[
    {
        "content": "<p>The <code>return</code> keyword (<a href=\"https://github.com/roc-lang/roc/pull/7173\">PR</a>) is now available for early returns in Roc! You can use it in <code>if</code> or <code>when</code>, even nested ones.</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">onlyCalculateWhenPositive</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">n</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">firstVal</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">        </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"w\"> </span><span class=\"nf\">&lt;=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"w\">            </span><span class=\"nv\">return</span><span class=\"w\"> </span><span class=\"kt\">NoResult</span>\n<span class=\"w\">        </span><span class=\"kr\">else</span>\n<span class=\"w\">            </span><span class=\"nv\">n</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">5</span>\n\n<span class=\"w\">    </span><span class=\"kt\">Found</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">firstVal</span><span class=\"w\"> </span><span class=\"nf\">*</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>The <code>try</code> keyword (<a href=\"https://github.com/roc-lang/roc/pull/7193\">PR</a>) has also been merged. It <em>should</em> be in nightlies by <time datetime=\"2024-11-04T10:00:00Z\">2024-11-04T02:00:00-08:00</time> . You can use it in place of <code>?</code>, which is still supported for now but may be deprecated soon.</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">contents</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">try</span><span class=\"w\"> </span><span class=\"kt\">File</span><span class=\"nf\">.</span><span class=\"nv\">read</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"s\">\"my-file.txt\"</span>\n\n<span class=\"nv\">contents</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"s\">\"my-file.txt\"</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">try</span><span class=\"w\"> </span><span class=\"kt\">File</span><span class=\"nf\">.</span><span class=\"nv\">read</span><span class=\"err\">!</span>\n\n<span class=\"nv\">contents</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">File</span><span class=\"nf\">.</span><span class=\"nv\">read</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"s\">\"my-file.txt\"</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">try</span>\n</code></pre></div>",
        "id": 480352342,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1730682341
    },
    {
        "content": "<p>yooooo, awesome work <span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span>!!! <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span></p>",
        "id": 480358451,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1730687915
    },
    {
        "content": "<p>this is going to make Purity Inference so ergonomic! <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 480358472,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1730687932
    },
    {
        "content": "<p>Really liking this direction of not having too many symbols, but using verbs instead <span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span></p>",
        "id": 480494904,
        "sender_full_name": "Jamie Neubert Pedersen",
        "timestamp": 1730742091
    },
    {
        "content": "<p>Roc is becoming a Forth dialect</p>",
        "id": 480495062,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1730742146
    },
    {
        "content": "<p>Too many parens and too few periods to be a Forth dialect</p>",
        "id": 481378068,
        "sender_full_name": "Kevin Gillette",
        "timestamp": 1731095758
    },
    {
        "content": "<p>Wouldn't the example clean up to look like the following?</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">onlyCalculateWhenPositive</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">n</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"w\"> </span><span class=\"nf\">&lt;=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"w\">        </span><span class=\"nv\">return</span><span class=\"w\"> </span><span class=\"kt\">NoResult</span>\n<span class=\"w\">    </span><span class=\"nv\">firstVal</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">5</span>\n<span class=\"w\">    </span><span class=\"kt\">Found</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">firstVal</span><span class=\"w\"> </span><span class=\"nf\">*</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 481378380,
        "sender_full_name": "Kevin Gillette",
        "timestamp": 1731095901
    },
    {
        "content": "<p>(it seems strange to use <code>return</code> alongside <code>else</code>, and to have the <code>return</code> \"dodge around\" the assignment that it's contained within)</p>",
        "id": 481378669,
        "sender_full_name": "Kevin Gillette",
        "timestamp": 1731096029
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"483789\">Kevin Gillette</span> <a href=\"#narrow/stream/397893-announcements/topic/New.20.60return.60.20and.20.60try.60.20keywords/near/481378380\">said</a>:</p>\n<blockquote>\n<p>Wouldn't the example clean up to look like the following?</p>\n<p><div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">onlyCalculateWhenPositive</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">n</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"w\"> </span><span class=\"nf\">&lt;=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"w\">        </span><span class=\"nv\">return</span><span class=\"w\"> </span><span class=\"kt\">NoResult</span>\n<span class=\"w\">    </span><span class=\"nv\">firstVal</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">5</span>\n<span class=\"w\">    </span><span class=\"kt\">Found</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">firstVal</span><span class=\"w\"> </span><span class=\"nf\">*</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This is a feature we want to support but haven't implemented yet: <a href=\"https://github.com/roc-lang/roc/issues/7105\">https://github.com/roc-lang/roc/issues/7105</a></p>",
        "id": 481382291,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1731097928
    },
    {
        "content": "<p>Between <a href=\"https://github.com/roc-lang/roc/pull/7296\">PR 1</a> and <a href=\"https://github.com/roc-lang/roc/pull/7309\">PR 2</a>, the <code>try</code> and <code>?</code> operators are now no longer just desugaring to other code, but are using a proper type-checking syntax! You should get better compiler errors when you use <code>try</code> or <code>?</code> in a weird way. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">invalidTry</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">nonResult</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"s\">\"abc\"</span>\n<span class=\"w\">    </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">nonResult</span><span class=\"err\">?</span>\n\n<span class=\"w\">    </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">*</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"nv\">invalidTry</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n</code></pre></div>\n<p>Gives this error:</p>\n<div class=\"codehilite\"><pre><span></span><code>── INVALID TRY TARGET in /code/proj/Main.roc ───────────────────────────────────\n\nThis expression cannot be tried with the `?` operator:\n\n6│          x = nonResult?\n                ^^^^^^^^^^\n\nI expected a Result, but it actually has type:\n\n    Str\n\nHint: Did you forget to wrap the value with an `Ok` or an `Err` tag?\n</code></pre></div>",
        "id": 486282030,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733397893
    },
    {
        "content": "<p>This is such a relief!  Thanks <span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span>!</p>",
        "id": 486282298,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733397972
    },
    {
        "content": "<blockquote>\n<p>should get better compiler errors when you use <code>try</code> or <code>?</code> in a weird way</p>\n</blockquote>\n<p>Challenge accepted <span aria-label=\"salute\" class=\"emoji emoji-1fae1\" role=\"img\" title=\"salute\">:salute:</span></p>",
        "id": 486282534,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733398058
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> <a href=\"#narrow/channel/397893-announcements/topic/New.20.60return.60.20and.20.60try.60.20keywords/near/486282298\">said</a>:</p>\n<blockquote>\n<p>This is such a relief!  Thanks <span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span>!</p>\n</blockquote>\n<p>Happy to help! Let me know if you run into any issues.</p>\n<p>My next task is to improve handling of early returns/try/? in statements, that pairs with this change well</p>",
        "id": 486282686,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733398111
    },
    {
        "content": "<p>Is there a preference to use <code>try</code> or <code>?</code>? Will both stay in Roc  or will one be deprecated in the future?</p>",
        "id": 486282739,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1733398130
    },
    {
        "content": "<p>I think <code>try</code> may go away if/when static dispatch(with parens-and-commas) lands</p>",
        "id": 486282861,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733398181
    },
    {
        "content": "<p>But I dont think it has to.  Zig has <code>try</code> before the expression</p>",
        "id": 486283098,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733398251
    },
    {
        "content": "<p>Either would work, but ? is syntactically much more compatible with static dispatch, so it's pretty likely we'll get rid of <code>try</code> to maintain the \"one way to do things\" goal</p>",
        "id": 486283250,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733398301
    },
    {
        "content": "<p>I hope we keep both through the first few months of static dispatch and get feedback before committing to one</p>",
        "id": 486283256,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733398304
    },
    {
        "content": "<p>Okay, we can do that</p>",
        "id": 486283284,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733398313
    },
    {
        "content": "<p>It wouldn't be too much of a compiler complexity burden to do so</p>",
        "id": 486283376,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733398333
    },
    {
        "content": "<p>Do we want to be more symbol-y or more keyword-y I think is the big design question</p>",
        "id": 486283388,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733398336
    },
    {
        "content": "<p>I tried to create a language in the same design space that had NO keywords and had commas and parens</p>",
        "id": 486283460,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733398365
    },
    {
        "content": "<p>But it had almost zero sugar</p>",
        "id": 486283498,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733398379
    },
    {
        "content": "<p>And no prefix, postfix, or binary operators <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 486283585,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733398421
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"557609\">Jamie Neubert Pedersen</span> <a href=\"#narrow/channel/397893-announcements/topic/New.20.60return.60.20and.20.60try.60.20keywords/near/480494904\">said</a>:</p>\n<blockquote>\n<p>Really liking this direction of not having too many symbols, but using verbs instead <span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span></p>\n</blockquote>\n<p>But I think this sentiment is common, especially for people coming from C/ALGOL descendants</p>",
        "id": 486283811,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733398497
    },
    {
        "content": "<p>A lot of work has been moving towards symbols where possible, but there are some places where operators are just better, since they're great at visually breaking up things</p>",
        "id": 486283974,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733398550
    },
    {
        "content": "<p>The main example is when arrows. We discussed maybe doing <code>when</code> and <code>then</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">result</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">    </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">val</span><span class=\"w\"> </span><span class=\"kr\">then</span><span class=\"w\"> </span><span class=\"nv\">abc</span>\n<span class=\"w\">    </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">err</span><span class=\"w\"> </span><span class=\"kr\">then</span><span class=\"w\"> </span><span class=\"nv\">def</span>\n</code></pre></div>\n<p>The branch patterns and bodies are harder to distinguish than with arrows</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">result</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">    </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">val</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">abc</span>\n<span class=\"w\">    </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">err</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">def</span>\n</code></pre></div>",
        "id": 486284385,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733398673
    },
    {
        "content": "<p>Syntax highlighting helps, but it's still worse IMO</p>",
        "id": 486284675,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733398749
    },
    {
        "content": "<p>Maybe it is a good thing to have <code>?</code> and <code>try</code> for the moment. I don't have any preference. I realise, that I am using both without a system. Sometimes <code>? </code> and sometimes <code>try</code>.  Maybe this is a good experiment, if a symbol or a keyword is better. But I hope that in a 1.0, where will be a clear system and only one way to do it.</p>",
        "id": 486285532,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1733399021
    },
    {
        "content": "<p>I agree with you on everything there</p>",
        "id": 486285696,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733399060
    },
    {
        "content": "<p>Ooh <code>?!</code> is back on the table, then <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 486347277,
        "sender_full_name": "jan kili",
        "timestamp": 1733416424
    },
    {
        "content": "<p>Oops I mean <code>!?</code></p>",
        "id": 486347373,
        "sender_full_name": "jan kili",
        "timestamp": 1733416444
    },
    {
        "content": "<p>And now <code>!?.</code> between names</p>",
        "id": 486347862,
        "sender_full_name": "jan kili",
        "timestamp": 1733416585
    },
    {
        "content": "<p>well with parens and commas it would always be <code>foo!()?</code></p>",
        "id": 486351046,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1733417457
    },
    {
        "content": "<p><code>foo!?</code> would be a type mismatch because the <code>!</code> suffix naming convention would only be for functions, and functions aren't <code>Result</code>s, so using <code>?</code> on one directly would always be a type mismatch <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 486351289,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1733417526
    },
    {
        "content": "<p>But <code>Task</code> is gone, so I can no longer alias <code>Task.fromResult</code> to <code>really</code></p>",
        "id": 486351540,
        "sender_full_name": "Dan G Knutson",
        "timestamp": 1733417611
    },
    {
        "content": "<p>Ohhh gotcha, I didn't realize empty <code>()</code> would be required. (Makes sense.)</p>",
        "id": 486353196,
        "sender_full_name": "jan kili",
        "timestamp": 1733418049
    },
    {
        "content": "<p>So then<br>\n<code>the |&gt; old |&gt; try idiomatic! |&gt; roc! style</code><br>\n<code>the.new().idiomatic!()?.roc!(style)</code></p>",
        "id": 486354813,
        "sender_full_name": "jan kili",
        "timestamp": 1733418513
    },
    {
        "content": "<p>so if I get this right <code>try ( anythingThatIsAResult )</code> is equivalent to <code>( anythingThatIsAResult )?</code> correct?</p>\n<p>and where is this new <code>aTask!()?</code> style coming from?</p>",
        "id": 486368966,
        "sender_full_name": "Nicola Peduzzi",
        "timestamp": 1733423082
    },
    {
        "content": "<p>Yes, those are equivalent</p>",
        "id": 486369087,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733423128
    },
    {
        "content": "<p>The new style is from the pretty much accepted static dispatch proposal:</p>\n<p><a href=\"https://docs.google.com/document/d/1OUd0f4PQjH8jb6i1vEJ5DOnfpVBJbGTjnCakpXAYeT8/edit\">https://docs.google.com/document/d/1OUd0f4PQjH8jb6i1vEJ5DOnfpVBJbGTjnCakpXAYeT8/edit</a></p>",
        "id": 486369299,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733423226
    },
    {
        "content": "<p><a href=\"#narrow/stream/304641-ideas/topic/static.20dispatch.20-.20proposal/near/481417068\">https://roc.zulipchat.com/#narrow/stream/304641-ideas/topic/static.20dispatch.20-.20proposal/near/481417068</a></p>",
        "id": 486369547,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733423326
    },
    {
        "content": "<p>Do they both interrupt the function and early return on Err? Visually (or thinking of other languages), when used in a .chain the <code>?</code>  looks to me like it would just interrupt the chain.</p>",
        "id": 486369996,
        "sender_full_name": "jan kili",
        "timestamp": 1733423504
    },
    {
        "content": "<p>They literally use the same code, so yes</p>",
        "id": 486370230,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733423598
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/channel/397893-announcements/topic/New.20.60return.60.20and.20.60try.60.20keywords/near/486369299\">said</a>:</p>\n<blockquote>\n<p>The new style is from the pretty much accepted static dispatch proposal:</p>\n<p><a href=\"https://docs.google.com/document/d/1OUd0f4PQjH8jb6i1vEJ5DOnfpVBJbGTjnCakpXAYeT8/edit\">https://docs.google.com/document/d/1OUd0f4PQjH8jb6i1vEJ5DOnfpVBJbGTjnCakpXAYeT8/edit</a></p>\n</blockquote>\n<p>How do proposals become \"accepted\"?  Is that process documented somewhere?</p>",
        "id": 486376616,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733425977
    },
    {
        "content": "<p>Lmao nope</p>",
        "id": 486376657,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733425996
    },
    {
        "content": "<p>I had kinda thought Richard just did the BDFL thing</p>",
        "id": 486376670,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733426003
    },
    {
        "content": "<p>That's true, but it's more that Rich is just the one who made the proposal this time</p>",
        "id": 486376760,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733426042
    },
    {
        "content": "<p>In general:</p>\n<ul>\n<li>Someone writes a doc or long message describing the feature, and posts it in <a class=\"stream\" data-stream-id=\"304641\" href=\"/#narrow/channel/304641-ideas\">#ideas</a> </li>\n<li>we discuss it, pros and cons, yada yada</li>\n<li>if at the end the discussion is positive of the feature, once it trickles out, we write up GitHub issues</li>\n<li>someone talks to Richard, or Richard asks someone, or someone volunteers on GitHub/here to work on it</li>\n<li>??? (for a few months)</li>\n<li>profit</li>\n</ul>",
        "id": 486377162,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733426178
    },
    {
        "content": "<p>Nothing formal</p>",
        "id": 486377220,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733426200
    },
    {
        "content": "<p>We do have an RFC repo, but it's not really used</p>",
        "id": 486377318,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733426239
    },
    {
        "content": "<p>Cool, so no 5 Stage process, quarterly plenaries, and consensus gathering amongst 100s of stakeholders?</p>",
        "id": 486377328,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733426242
    },
    {
        "content": "<p><span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 486377351,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733426248
    },
    {
        "content": "<p>This is vibes-based proposals</p>",
        "id": 486377391,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733426267
    },
    {
        "content": "<p>(This was a TC-39 subtweet)</p>",
        "id": 486377392,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733426268
    },
    {
        "content": "<p>Both processes make sense for where the respective languages are, and their environment</p>",
        "id": 486377544,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733426310
    },
    {
        "content": "<p>We have this <a href=\"https://www.roc-lang.org/community#ideas\">https://www.roc-lang.org/community#ideas</a></p>",
        "id": 486379564,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733427158
    }
]