[
    {
        "content": "<p>In the next release of Roc, we'll be adding a new ? operator that works kinda like the ? suffix you know and love, but also maps over the error.</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">file_contents</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"kt\">File</span><span class=\"nf\">.</span><span class=\"nv\">read</span><span class=\"err\">!</span><span class=\"p\">(</span><span class=\"s\">\"my-file.txt\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"err\">?</span><span class=\"w\"> </span><span class=\"kt\">FailedToReadFile</span>\n</code></pre></div>\n<p>If the <code>File.read!</code> fails, it'll map over the returned <code>Err</code> with the provided function, in this case it'll wrap the <code>ReadErr</code> into an <code>Err(FailedToReadFile(ReadErr))</code>. This is really handy for providing quick tracing on errors when writing scripts!</p>\n<p>You can also map the error with an inline function prior to early return:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">half</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">try_to_halve</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"err\">?</span><span class=\"w\"> </span><span class=\"nf\">|</span><span class=\"kt\">NotEven</span><span class=\"p\">(</span><span class=\"nv\">num</span><span class=\"p\">)</span><span class=\"nf\">|</span>\n<span class=\"w\">        </span><span class=\"kt\">HalfIsNotInt</span><span class=\"p\">(</span><span class=\"nv\">num</span><span class=\"nf\">.</span><span class=\"nv\">to_f64</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"nf\">/</span><span class=\"w\"> </span><span class=\"mf\">2.</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 494263792,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737076884
    },
    {
        "content": "<p>When using this operator, you should not also use the suffix version of <code>?</code>, a.k.a.</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">file_contents</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">File</span><span class=\"nf\">.</span><span class=\"nv\">read</span><span class=\"err\">!</span><span class=\"p\">(</span><span class=\"s\">\"my-file.txt\"</span><span class=\"p\">)</span><span class=\"err\">?</span><span class=\"w\"> </span><span class=\"err\">?</span><span class=\"w\"> </span><span class=\"nv\">mapper</span>\n</code></pre></div>\n<p>would be redundant.  You'll probably get a type error if you do that.</p>",
        "id": 494263930,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737076948
    }
]