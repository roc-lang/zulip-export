[
    {
        "content": "<p>If you own a platform and want even better debug messages, I just changed debug to take an extra arg that is the actual source of the debugged expression. Just add the extra arg and print it in a pretty way. Here is an example in rust and zig:</p>\n<p>Requires using the latest version of the compiler (should be in the next nightly).</p>\n<p>Can get awesome dbg messages like:</p>\n<div class=\"codehilite\"><pre><span></span><code>[day3.roc:18] (part1 p1Sample) = 4361\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[no_mangle]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">roc_dbg</span><span class=\"p\">(</span><span class=\"n\">loc</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">RocStr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">msg</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">RocStr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">src</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">RocStr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"fm\">eprintln!</span><span class=\"p\">(</span><span class=\"s\">\"[{}] {} = {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;*</span><span class=\"n\">loc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;*</span><span class=\"n\">src</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;*</span><span class=\"n\">msg</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"kr\">export</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">roc_dbg</span><span class=\"p\">(</span><span class=\"n\">loc</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">RocStr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">msg</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">RocStr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">RocStr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">callconv</span><span class=\"p\">(.</span><span class=\"n\">C</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">stderr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">io</span><span class=\"p\">.</span><span class=\"n\">getStdErr</span><span class=\"p\">().</span><span class=\"n\">writer</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">stderr</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s\">\"[{s}] {s} = {s}</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.{</span><span class=\"w\"> </span><span class=\"n\">loc</span><span class=\"p\">.</span><span class=\"n\">asSlice</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"p\">.</span><span class=\"n\">asSlice</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">asSlice</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"k\">catch</span><span class=\"w\"> </span><span class=\"k\">unreachable</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 405613504,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701587900
    },
    {
        "content": "<p>If you don't update roc_dbg, everything should be backwards compatible and still just work the same. Your function will just be missing and ignore the third arg.</p>",
        "id": 405613535,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701587943
    },
    {
        "content": "<p>Thank you, that is nice.</p>\n<p>Could it be, that there is a off-by-one error? It does not show the line of the dbg statement, but one line above it. For example, if I put dbg on line 10, the output shows line 9.</p>",
        "id": 405616871,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1701590869
    },
    {
        "content": "<p>That's definitely possible, though it had seemed to be working on my testing (at least in terms of the statements printed). I guess I never checked the actual line number and if it is zero indexed or not.</p>",
        "id": 405617134,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701591079
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"496321\">@Oskar Hahn</span> do you have more details or a repro file?</p>",
        "id": 405673796,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701616558
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/397893-announcements/topic/dbg.20upgrade/near/405673796\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"496321\">Oskar Hahn</span> do you have more details or a repro file?</p>\n</blockquote>\n<p>I already updated my platform. You can add the dbg statement anywhere here <a href=\"https://github.com/ostcar/aoc2023/blob/main/platform/host.zig\">https://github.com/ostcar/aoc2023/blob/main/platform/host.zig</a></p>",
        "id": 405674638,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1701617164
    },
    {
        "content": "<p>Here is an example: <a href=\"https://github.com/ostcar/aoc2023/blob/dbg_bug/days/dayXX.roc\">https://github.com/ostcar/aoc2023/blob/dbg_bug/days/dayXX.roc</a></p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>roc<span class=\"w\"> </span>days/dayXX.roc\nðŸ”¨<span class=\"w\"> </span>Rebuilding<span class=\"w\"> </span>platform...\n<span class=\"o\">[</span>days/dayXX.roc:13<span class=\"o\">]</span><span class=\"w\"> </span><span class=\"s2\">\"this is on line 14\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"this is on line 14\"</span>\nPart1<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"m\">58</span>.171us:\nNot<span class=\"w\"> </span>implemented<span class=\"w\"> </span>yet\n\nPart2<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"m\">1</span>.956us:\nNot<span class=\"w\"> </span>implemented<span class=\"w\"> </span>yet\n</code></pre></div>",
        "id": 405676207,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1701618687
    },
    {
        "content": "<p>Ok. So yeah just line numbers being zero index in roc. Need to add 1 to them. Thanks</p>",
        "id": 405676870,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701619254
    },
    {
        "content": "<p>And why is the string being printed two times? Here is the platform code: <a href=\"https://github.com/ostcar/aoc2023/blob/33b645286345c79ea2ae9e757ddb931d09fef475/platform/host.zig#L69\">https://github.com/ostcar/aoc2023/blob/33b645286345c79ea2ae9e757ddb931d09fef475/platform/host.zig#L69</a></p>",
        "id": 405682300,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1701623949
    },
    {
        "content": "<p>Ah. Because I did not use a variable</p>",
        "id": 405682428,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1701624057
    },
    {
        "content": "<p>Yeah, it prints the source code and the output.</p>",
        "id": 405682458,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701624092
    },
    {
        "content": "<p>Strange when debuging with a constant, but really awesome the rest of the time.</p>",
        "id": 405682480,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701624116
    },
    {
        "content": "<p>For example, you can get output like:</p>\n<div class=\"codehilite\"><pre><span></span><code>[path/my-file.roc:12] (List.len out) = 7\n</code></pre></div>",
        "id": 405682561,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701624168
    },
    {
        "content": "<p>The case, where you just debug a constant was easy to fix in the platform: <a href=\"https://github.com/ostcar/aoc2023/blob/f657d50aa2b393b5dc26b49baeb6f740ef405908/platform/host.zig#L67-L74\">https://github.com/ostcar/aoc2023/blob/f657d50aa2b393b5dc26b49baeb6f740ef405908/platform/host.zig#L67-L74</a></p>\n<p>But I don't know if this is really necessary. It is not the use case of a debugger to print a constant</p>",
        "id": 405685055,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1701626358
    },
    {
        "content": "<p>yep. Up to each platform if they want to do that or not</p>",
        "id": 405685112,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701626404
    },
    {
        "content": "<p>As an extra note, if you are using dbg and notice weird type issues (probably with number types) that appear when you add a debug statement, please update to the lastest main or wait for the next nightly. Just got a bug fix in.</p>",
        "id": 405692091,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701632451
    },
    {
        "content": "<p>Fresh nightlies are up</p>",
        "id": 405795899,
        "sender_full_name": "Anton",
        "timestamp": 1701686369
    }
]