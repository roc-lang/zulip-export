[
    {
        "content": "<p>This is probably a very ignorant question, but would it be possible to compile platforms into a core binary plus a library for each optional features, which would all be included in the distributed archive and linked by the roc compiler only as needed?</p>",
        "id": 402794901,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1700262854
    },
    {
        "content": "<p>Seems like it would make platform development more complex if possible</p>",
        "id": 402794925,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1700262880
    },
    {
        "content": "<p>So from an application author’s perspective it would feel like roc is doing dead code elimination/ live code inclusion for platform code</p>",
        "id": 402795344,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1700263129
    },
    {
        "content": "<p>That is definitely a possibility. Though if we were to do something like that, no point in distributing the binary at all. Just make the whole platform a group of static libraries. Note, you would also need function sections and gc sections to get the dead code elimination.</p>\n<p>This is essentially the legacy linker, but with multiple libraries instead of just one.</p>\n<p>Sadly, being essentially the legacy linker comes with all the pain points of the legacy linker. The biggest two issue being:</p>\n<ol>\n<li>slow linking time</li>\n<li>missing dependencies/lack of understanding around the linking process. With this setup, Roc has to know every system dependency and user libraries that the platform binary requires to be linked. Essentially roc needs to figure out the magic linking incantation that the source compiler was going to use. This may even include dependencies that are not install on the application developers machine.</li>\n</ol>",
        "id": 402795745,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700263333
    },
    {
        "content": "<p>It would be great if we could use the surgical linker to combine a platform binary with new optional features, but the surgical linker is only able to work with roc because roc has no dependencies. So it wouldn't work for essentially any optional feature given optional features probably make system calls and doing other things of that nature to enable new platform functionality</p>",
        "id": 402796073,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700263498
    },
    {
        "content": "<p>Interesting. So it sounds like in order to be feasible while maintaining Roc’s speed goals, we would need some kind of new linking system for binary application developers, regardless of what language they are using. Some kind of system that standardizes things regardless of language and system. Is that a correct understanding?</p>",
        "id": 402796145,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1700263536
    },
    {
        "content": "<p>I don’t even know if it would be possible to create a linking system like that, it just sounds like a much deeper problem than one language compiler can solve, if I’m understanding correctly.</p>",
        "id": 402796359,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1700263637
    },
    {
        "content": "<p>I mean you would still have the dependency issues even with a new linking system.</p>",
        "id": 402796380,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700263644
    },
    {
        "content": "<p>And yeah, really is not a rabbit whole we want to look down.</p>",
        "id": 402796399,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700263661
    },
    {
        "content": "<p>Of course, if someone wants smaller output, there will always be workarounds.</p>",
        "id": 402796500,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700263691
    },
    {
        "content": "<p>The simplest would be to make a custom slimmed platform or link roc into a static library letting the host language control the entire complication process instead of roc controlling the process.</p>",
        "id": 402796580,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700263724
    },
    {
        "content": "<p>I know 3MB is enormous for a web app shipped to the browser, but I have no idea how big it is in the context of CLI tools.</p>",
        "id": 402796594,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1700263739
    },
    {
        "content": "<p>Having a separate platform for those who need small binaries doesn’t seem terrible.</p>",
        "id": 402796757,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1700263817
    },
    {
        "content": "<p>I mean these sizes are essentially what you would get with rust, so makes sense for a rust based cli platform</p>",
        "id": 402796909,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700263908
    },
    {
        "content": "<p>What I’m getting from this is that Roc’s platform/application split is just very very useful. Need a smaller binary? Build a simple platform with Zig or something. Other needs? Do something else.</p>",
        "id": 402797122,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1700264017
    },
    {
        "content": "<p>I wonder how small a zig cli platform without network functionality could get</p>",
        "id": 402797239,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1700264084
    },
    {
        "content": "<blockquote>\n<p>What I’m getting from this is that Roc’s platform/application split is just very very useful. Need a smaller binary? Build a simple platform with Zig or something. Other needs? Do something else.</p>\n</blockquote>\n<p>I don't think that's the right thing to take away from this. In general your app is going to be written for a single platform. Swapping it is not something that you'd expect to be easy.</p>",
        "id": 402797308,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1700264118
    },
    {
        "content": "<p>In the long term we'd expect to have one or two platforms for web servers, one or two for CLI apps, one or two for graphical apps, etc. You can't switch out a web server platform for a graphical app platform, it doesn't make sense.</p>",
        "id": 402797447,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1700264174
    },
    {
        "content": "<p>Just to clarify, rust has larger binaries because it does a lot of static dependencies. So instead of linking to a shared library it will tend to compile all the code into a single binary.</p>\n<p>Our rust basic cli platform is 3MB, but only has 4 shared library dependencies.</p>\n<p><code>curl</code> as a c example, is 300KB, but has 33 shared library dependencies.</p>",
        "id": 402797481,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700264190
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"431893\">Brian Carroll</span> <a href=\"#narrow/stream/316715-contributing/topic/basic-cli.20reqwest.20lib.20size/near/402797308\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>What I’m getting from this is that Roc’s platform/application split is just very very useful. Need a smaller binary? Build a simple platform with Zig or something. Other needs? Do something else.</p>\n</blockquote>\n<p>I don't think that's the right thing to take away from this. In general your app is going to be written for a single platform. Swapping it is not something that you'd expect to be easy.</p>\n</blockquote>\n<p>That makes sense. You may not have an application that can be dropped into multiple contexts, but you can possibly reach for a different platform instead of reaching for a different language.</p>",
        "id": 402797549,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1700264240
    },
    {
        "content": "<p>yeah that's true in theory, it's like if I have a Python website built on Django framework it's possible to swap it to use Flask framework instead but I'm not expecting it to be easy.</p>",
        "id": 402797730,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1700264332
    },
    {
        "content": "<p>Its pretty easy to build the roc app into a library using <code>roc build --lib myApp.roc</code>. If you give that to cargo or zig can it link it and then strip the unused stuff out? doesn't work for url packages, but could be another way to get a smaller app executable.</p>",
        "id": 402798165,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700264627
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"431893\">Brian Carroll</span> <a href=\"#narrow/stream/316715-contributing/topic/basic-cli.20reqwest.20lib.20size/near/402797730\">said</a>:</p>\n<blockquote>\n<p>yeah that's true in theory, it's like if I have a Python website built on Django framework it's possible to swap it to use Flask framework instead but I'm not expecting it to be easy.</p>\n</blockquote>\n<p>Yeah I wouldn’t expect that to be easy by any stretch of the imagination. I guess I’m thinking more of the ability to choose Roc when beginning a project rather than rewriting code to use a different platform. </p>\n<p>If I’m starting a project with a particular set of constraints, and a Roc platform exists that is well suited to those constraints, I can use Roc.</p>",
        "id": 402798177,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1700264642
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"586417\">Elias Mulhall</span> <a href=\"#narrow/stream/316715-contributing/topic/basic-cli.20reqwest.20lib.20size/near/402797239\">said</a>:</p>\n<blockquote>\n<p>I wonder how small a zig cli platform without network functionality could get</p>\n</blockquote>\n<p>I don’t remember which talk it was in, but I think I remember Loris Cro saying something about committing a zig binary to git and using it in CI.</p>",
        "id": 402798300,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1700264726
    },
    {
        "content": "<blockquote>\n<p>If you give that to cargo or zig can it link it and then strip the unused stuff out?</p>\n</blockquote>\n<p>We may need to enable some function section stuff, but yeah, in general. Also, probably want <code>--no-link</code> cause <code>--lib</code> is currently a shared lib and you really want a static lib.</p>",
        "id": 402798445,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700264819
    },
    {
        "content": "<p>Sorry, I feel like I derailed the topic a bit.</p>",
        "id": 402798478,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1700264847
    },
    {
        "content": "<p>26 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"316715\" href=\"/#narrow/stream/316715-contributing/topic/basic-cli.20reqwest.20lib.20size\">#contributing &gt; basic-cli reqwest lib size</a> by <span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span>.</p>",
        "id": 402798567,
        "sender_full_name": "Notification Bot",
        "timestamp": 1700264887
    },
    {
        "content": "<p>No worries, can always move messages to more specific topics</p>",
        "id": 402798603,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700264920
    },
    {
        "content": "<p>That works!</p>",
        "id": 402798662,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1700264976
    },
    {
        "content": "<p>Re CURL: if it was built with MUSL it would be a lot larger yeah? So basically you have to choose between larger binaries or the challenges of dynamic linking.</p>",
        "id": 402798827,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1700265077
    },
    {
        "content": "<blockquote>\n<p>committing a zig binary to git and using it in CI</p>\n</blockquote>\n<p>I think that might have been the Wasm binary they use to bootstrap the self-hosted compiler</p>",
        "id": 402806488,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1700268550
    },
    {
        "content": "<p>Yeah, curl would be way larger without all the dynamic dependencies. In fact just adding back in lib curl, the total size is already 1MB.</p>",
        "id": 402809245,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700269535
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"431893\">Brian Carroll</span> <a href=\"#narrow/stream/316715-contributing/topic/optional.20platform.20features/near/402806488\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>committing a zig binary to git and using it in CI</p>\n</blockquote>\n<p>I think that might have been the Wasm binary they use to bootstrap the self-hosted compiler</p>\n</blockquote>\n<p>Maybe that was it. All I remember is that he was able to make a very small binary.</p>",
        "id": 402810120,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1700269858
    }
]