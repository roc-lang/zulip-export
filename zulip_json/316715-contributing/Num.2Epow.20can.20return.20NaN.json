[
    {
        "content": "<p><code>Num.sqrt</code> is planned to panic on negative values, yet <code>Num.pow n 0.5</code> is equivalently a square root operation and returns NaN on negative values.</p>\n<div class=\"codehilite\"><pre><span></span><code>Â» Num.pow -1 0.5\n\nNaN : Float *\n</code></pre></div>\n<p>Should we plan to make <code>pow</code> panic on roots of negative values, and add a corresponding <code>Num.powChecked</code>?</p>",
        "id": 279045712,
        "sender_full_name": "Kevin Gillette",
        "timestamp": 1649992283
    },
    {
        "content": "<p>great catch!</p>",
        "id": 279086006,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1650033607
    },
    {
        "content": "<p>I actually think we should leave this alone for now - once abilities have fully landed, and in particular once we disallow equality for floats (based on previous discussions) we'll presumably want to end up with both <code>pow</code> and <code>sqrt</code> being allowed to return <code>NaN</code></p>",
        "id": 279086092,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1650033691
    },
    {
        "content": "<p>I think it's okay if they're inconsistent in the meantime <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 279086103,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1650033703
    },
    {
        "content": "<p>What is the general intent? Are abilities providing a great way to express checked vs panicking vs nan'ing variants of an operation, or are abilities just changing enough lines of code everywhere that we don't want the abilities work to deal with too many merge conflicts?</p>",
        "id": 279140350,
        "sender_full_name": "Kevin Gillette",
        "timestamp": 1650073192
    },
    {
        "content": "<p>More of the former, abilities will just allow us to express in Roc code things we can't readily do today</p>",
        "id": 279147525,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1650084153
    }
]