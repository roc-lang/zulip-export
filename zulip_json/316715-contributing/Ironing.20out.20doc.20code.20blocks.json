[
    {
        "content": "<p>We don't currently have an issue on GitHub owning doc comment code blocks, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"err\">##</span><span class=\"w\"> </span><span class=\"kt\">Repeat</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">string</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"w\"> </span><span class=\"nv\">times</span><span class=\"nf\">.</span>\n<span class=\"err\">##</span>\n<span class=\"err\">##</span><span class=\"w\"> </span><span class=\"nf\">```</span>\n<span class=\"err\">##</span><span class=\"w\"> </span><span class=\"nv\">echoed_words</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"err\">##</span><span class=\"w\">     </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">repeat</span><span class=\"p\">(</span><span class=\"s\">\"hello\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"err\">##</span>\n<span class=\"err\">##</span><span class=\"w\"> </span><span class=\"nv\">expect</span><span class=\"w\"> </span><span class=\"nv\">echoed_words</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"s\">\"hellohellohello\"</span>\n<span class=\"err\">##</span><span class=\"w\"> </span><span class=\"nf\">```</span>\n</code></pre></div>\n<p>There are a few things we should iron out before we make this available for implementing by contributors.</p>\n<p>First, we want to be able to validate that they compile at all. I think we should parse the contents of doc comments as top-level code that can't be exposed or used by the rest of the module, and report warnings/errors just like the rest of the module. The only difference is that docs sometimes have top-level expressions, which aren't currently syntactically legal outside of docs. Should we allow this just in docs, or should we force users to put those values in defs? I vote the latter because it probably only increases readability.</p>\n<p>We also want to make sure that doc code blocks with top-level <code>expect</code>s have those tests run. I think these tests should always be run with <code>roc test</code>. We could optionally have a <code>--ignore-docs</code> flag for <code>roc test</code> if we want to allow only running non-doc tests, but I think we <em>shouldn't</em> do this unless there is a lot of demand.</p>\n<p>Rust has the ability to <a href=\"https://doc.rust-lang.org/rustdoc/write-documentation/documentation-tests.html#hiding-portions-of-the-example\">hide lines of docs</a> by putting a second set of doc comment prefixes, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"err\">##</span><span class=\"w\"> </span><span class=\"nf\">```</span>\n<span class=\"err\">##</span><span class=\"w\"> </span><span class=\"err\">##</span><span class=\"w\"> </span><span class=\"kr\">import</span><span class=\"w\"> </span><span class=\"kt\">Hidden</span>\n<span class=\"err\">##</span><span class=\"w\"> </span><span class=\"kt\">Hidden</span><span class=\"nf\">.</span><span class=\"nv\">run_func</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"abc\"</span><span class=\"p\">)</span>\n<span class=\"err\">##</span><span class=\"w\"> </span><span class=\"nf\">```</span>\n</code></pre></div>\n<p>We should allow hiding doc lines in the generated code, but they should be otherwise treated exactly the same as normal doc code block lines.</p>\n<p>Lastly, if a doc should not be treated normally, we should allow using <a href=\"https://doc.rust-lang.org/rustdoc/write-documentation/documentation-tests.html#attributes\">annotations like in Rust</a> to explicitly handle these cases in a trustworthy way. Syntactically, we would put a word right after the starting triple-backtick of the code block as one would notate the language in the block. All of these should be accompanied by a hint in the generated docs. I think the following annotations would be good:</p>\n<ul>\n<li><code>has_warnings</code> asserts that there is at least one parse/type/etc. warning in the code. If not, <code>roc check</code> fails.</li>\n<li><code>has_errors</code> asserts that there is at least one parse/type/etc. error in the code, warnings are allowed but there can be zero or a hundred and it doesn't matter. If not, <code>roc check</code> fails.</li>\n<li><code>should_crash</code> still ensures that there are no parse/type/etc. errors in the code block, but ensures that when run, the block <em>must</em> <code>crash</code>. If it doesn't, <code>roc test</code> fails. (Maybe <code>roc check</code> could catch this with constant folding, meaning we would just need <code>has_errors</code>.)</li>\n</ul>\n<p>There are some other annotations that Rust allows, but I think we shouldn't allow them:</p>\n<ul>\n<li><code>compile_fail</code> is a more general version of <code>has_warnings</code>/<code>has_errors</code>, I think we can be more specific on this.</li>\n<li><code>ignore</code> is a very general \"don't worry about it\" annotation that allows bucket ignoring, we should force more specific annotations.</li>\n<li><code>no_run</code> makes sense for effectful code, but we can't run effectful code unless it's using <code>Store.get!</code> and <code>Store.set!</code> in test environments.</li>\n<li><code>edition20XX</code> sets the Rust version that runs, but we can just use the proposed version of Roc at the top of the package.</li>\n</ul>\n<p>If the above plan is accepted, I'll some GitHub issues. First a parent issue for organizing these features into a single place, and then the following children:</p>\n<ul>\n<li>\"Compile doc code blocks and emit warnings/errors\"</li>\n<li>\"Run <code>expect</code>s in doc code blocks with <code>roc test</code>\"</li>\n<li>\"Hide lines in doc code blocks that start with <code>## ##</code>\"</li>\n<li>\"Add support for annotations on doc code blocks\"</li>\n</ul>",
        "id": 490992355,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735306243
    },
    {
        "content": "<p>I like the idea of making sure documentation examples compile and run as they should!</p>\n<p>I'm not sure how I feel about the annotations, I've not used those before. Do you have an example of some Rust documentation you like that uses these annotations to good effect?</p>",
        "id": 490995968,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1735308754
    },
    {
        "content": "<p>GitHub search didn't help that much. I'm trying to remember the examples I've seen. The main one is <code>should_panic</code> but I'm not remembering where I saw it. I'll work on it</p>",
        "id": 491003128,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735313556
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/rustdoc/write-documentation/documentation-tests.html#attributes\">https://doc.rust-lang.org/rustdoc/write-documentation/documentation-tests.html#attributes</a></p>",
        "id": 491008373,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735317151
    },
    {
        "content": "<p>This is the docs on how to use attributes, but not an example that shows they should exist</p>",
        "id": 491008422,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735317195
    },
    {
        "content": "<p>here’s one example: <a href=\"https://github.com/ayazhafiz/xorf/blob/108d67903f2df6db6dcd1c05c571594c529413d6/src/hash_proxy.rs#L65\">https://github.com/ayazhafiz/xorf/blob/108d67903f2df6db6dcd1c05c571594c529413d6/src/hash_proxy.rs#L65</a>. it’s kind of useful for checking you’re actually in the bounds of the language. not sure it’s super useful.</p>",
        "id": 491008751,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735317424
    },
    {
        "content": "<p>I have mixed feelings about this in general. I would definitely stay away from attributes for now until there is a clear need. With regard to checking that programs are well-formed, I am biased towards it being opt-in. There are two reasons for this.</p>\n<ol>\n<li>Unit tests may be a better and free source of documentation in this regard</li>\n<li>In general APIs that are not trivial require some setup, and so then you end up with code blocks with a bunch of decoration to comment “irrelevant” bits out, eg <a href=\"https://github.com/ayazhafiz/xorf/blob/108d67903f2df6db6dcd1c05c571594c529413d6/src/hash_proxy.rs#L46\">https://github.com/ayazhafiz/xorf/blob/108d67903f2df6db6dcd1c05c571594c529413d6/src/hash_proxy.rs#L46</a>. But the commented lines are needed if you want to copy-paste the code. I think for anything very involved, you are better off in general writing free-form documentation and checking with yourself/your users after the fact that it makes sense and they can reconstruct a program from it. If there is a mode for checking a program is well-formed, it probably should disallow hiding lines from the end docs (because then the program in the docs themselves aren’t well formed)</li>\n</ol>",
        "id": 491009304,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735317809
    },
    {
        "content": "<p>yeah I think this is a topic with nonobvious tradeoffs</p>",
        "id": 491009904,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735318215
    },
    {
        "content": "<p>the number one goal of docs is teaching</p>",
        "id": 491009923,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735318233
    },
    {
        "content": "<ol start=\"0\">\n<li>I'm okay with staying away from attributes, though I still think we can make a GitHub issue that says \"This is the recipe for adding doc code block attributes to Roc once we think they should be added.\"</li>\n<li>I, and I assume most people, will opt for reading the docs before reading the source code. Hovering over a function will show the doc code block, not other unit tests. I don't even think there's a consistent way to find such tests as some Roc devs write them next to the code, and some devs put them at the bottom of the module.</li>\n<li>I would be okay with starting with only allowing hiding imports, for example. I think code blocks more serve the purpose of giving the \"feel\" of usage of an API. Hiding arbitrary lines gets tricky, but I'd rather a code block teach concisely than be copy-pastable.</li>\n</ol>",
        "id": 491009959,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735318263
    },
    {
        "content": "<p>and sometimes the best way to teach is to give examples that don't fully work - e.g. you have a chunk missing and put in a comment like <code># this is where you put the thing</code></p>",
        "id": 491009979,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735318274
    },
    {
        "content": "<p>that can be optimal for teaching even though it doesn't compile</p>",
        "id": 491009989,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735318287
    },
    {
        "content": "<p>separately, a thing I don't love about docs having tests get run in them automatically is that it means they now have a split focus. You're no longer trying to optimize only for teaching, but also for your test suite</p>",
        "id": 491010069,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735318337
    },
    {
        "content": "<p>Though we generally can do well with putting a valid but obviously placeholding value, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">repeat</span><span class=\"p\">(</span><span class=\"s\">\"YOUR VAL HERE\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">123</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 491010073,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735318341
    },
    {
        "content": "<p>sometimes those happen to be 1-to-1 but sometimes making the test better makes it a worse example</p>",
        "id": 491010101,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735318362
    },
    {
        "content": "<p>which creates an unhealthy tension when tests and docs have been coupled</p>",
        "id": 491010130,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735318384
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/channel/316715-contributing/topic/Ironing.20out.20doc.20code.20blocks/near/491010069\">said</a>:</p>\n<blockquote>\n<p>separately, a thing I don't love about docs having tests get run in them automatically is that it means they now have a split focus. You're no longer trying to optimize only for teaching, but also for your test suite</p>\n</blockquote>\n<p>I think we can still set the standard of \"doc code blocks are valid Roc, even if some lines are hidden\". You don't have to put any <code>expect</code>s. If we don't even ensure that doc blocks are syntactically correct, then readers have much lower confidence that they can apply what they see.</p>",
        "id": 491010234,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735318454
    },
    {
        "content": "<p>I hear you and I agree, though I wonder if this is a non problem. I’ve very very rarely run into issues like this (only two in my head) and in both cases you can ask the author what’s wrong. I think if someone is already taking the time to write documentation, and moreover include code, they’re going to do so correctly</p>",
        "id": 491010435,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735318632
    },
    {
        "content": "<p>sorry by correct i mean syntactically valid</p>",
        "id": 491010451,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735318654
    },
    {
        "content": "<p>I don't agree</p>",
        "id": 491010462,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735318666
    },
    {
        "content": "<p>I just got a compiler panic when updating Weaver because I forgot to update a function name buried in a 100-line module header that didn't get changed from camelCase to snake_case</p>",
        "id": 491010548,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735318722
    },
    {
        "content": "<p>I have come to strongly appreciate tools that take away mental load</p>",
        "id": 491010585,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735318765
    },
    {
        "content": "<p>And having doc code blocks tell me \"If it compiles, it's valid Roc\" means I just don't have to worry about it</p>",
        "id": 491010607,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735318790
    },
    {
        "content": "<p>I think every developer has felt the pain of documentation always going out of date, which is why \"self-documenting code\" is so touted in our industry</p>",
        "id": 491010707,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735318832
    },
    {
        "content": "<p>I think you're right that the first time you write the docs, they'll probably be correct</p>",
        "id": 491010728,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735318854
    },
    {
        "content": "<p>But lots of PRs in our Roc compiler repo just move old docs around</p>",
        "id": 491010764,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735318876
    },
    {
        "content": "<p>I also put a lot of value in the guaranteed correctness of doc code blocks.</p>",
        "id": 491010781,
        "sender_full_name": "Anton",
        "timestamp": 1735318892
    },
    {
        "content": "<p>And I don't push on people to update them every time because a) it happens so often, and b) I'm jaded because I tend to devalue docs since I know they're somewhat likely to be wrong</p>",
        "id": 491010858,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735318928
    },
    {
        "content": "<blockquote>\n<p>I also put a lot of value in the guaranteed correctness of doc code blocks.</p>\n</blockquote>\n<p>It feels like a boost for the entire Roc ecosystem</p>",
        "id": 491010930,
        "sender_full_name": "Anton",
        "timestamp": 1735318997
    },
    {
        "content": "<p>Also</p>\n<blockquote>\n<p>I’ve very very rarely run into issues like this (only two in my head) and in both cases you can ask the author what’s wrong.</p>\n</blockquote>\n<p>Most code I work on and don't own is libraries owned by people I've never talked to before. I don't think it's feasible to expect users to reach out to code owners</p>",
        "id": 491010933,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735319001
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/channel/316715-contributing/topic/Ironing.20out.20doc.20code.20blocks/near/491010548\">said</a>:</p>\n<blockquote>\n<p>I just got a compiler panic when updating Weaver because I forgot to update a function name buried in a 100-line module header that didn't get changed from camelCase to snake_case</p>\n</blockquote>\n<p>Can you elaborate on this? I don't follow the connection to docs</p>",
        "id": 491014022,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735320934
    },
    {
        "content": "<p>When I say \"module header\", I mean:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"err\">##</span><span class=\"w\"> </span><span class=\"kt\">Welcome</span><span class=\"w\"> </span><span class=\"nv\">to</span><span class=\"w\"> </span><span class=\"kt\">Weaver</span><span class=\"err\">!</span>\n<span class=\"err\">##</span>\n<span class=\"err\">##</span><span class=\"w\"> </span><span class=\"kt\">Use</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">oldFuncName</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nv\">to</span><span class=\"w\"> </span><span class=\"nv\">do</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">thing</span><span class=\"nf\">.</span>\n\n<span class=\"kn\">module</span><span class=\"w\"> </span><span class=\"err\">[</span><span class=\"nc\">weave</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">combine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">...</span><span class=\"p\">]</span>\n</code></pre></div>",
        "id": 491014136,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735321004
    },
    {
        "content": "<p>got it</p>",
        "id": 491014201,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735321051
    },
    {
        "content": "<p>okay definitely +1 to the case of you have hyperlinks and making sure they actually link</p>",
        "id": 491014249,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735321081
    },
    {
        "content": "<p>I also have a lot of docs that I almost broke. Weaver has 39 (13 num types times 3) basically copy-pasted functions that parse numbers as args. All of them need to be manually updated</p>",
        "id": 491014250,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735321082
    },
    {
        "content": "<p>can those be unit tests?</p>",
        "id": 491014310,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735321097
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"err\">##</span><span class=\"w\"> </span><span class=\"kt\">Add</span><span class=\"w\"> </span><span class=\"nv\">an</span><span class=\"w\"> </span><span class=\"nv\">option</span><span class=\"w\"> </span><span class=\"nv\">that</span><span class=\"w\"> </span><span class=\"nv\">takes</span><span class=\"w\"> </span><span class=\"nv\">an</span><span class=\"w\"> </span><span class=\"nf\">`</span><span class=\"kt\">I128</span><span class=\"nf\">`</span><span class=\"w\"> </span><span class=\"nv\">and</span><span class=\"w\"> </span><span class=\"nv\">can</span><span class=\"w\"> </span><span class=\"nv\">be</span><span class=\"w\"> </span><span class=\"nv\">given</span><span class=\"w\"> </span><span class=\"nv\">multiple</span><span class=\"w\"> </span><span class=\"nv\">times</span>\n<span class=\"err\">##</span><span class=\"w\"> </span><span class=\"nv\">to</span><span class=\"w\"> </span><span class=\"nv\">your</span><span class=\"w\"> </span><span class=\"kt\">CLI</span><span class=\"w\"> </span><span class=\"nv\">builder</span><span class=\"nf\">.</span>\n<span class=\"err\">##</span>\n<span class=\"err\">##</span><span class=\"w\"> </span><span class=\"kt\">Parsing</span><span class=\"w\"> </span><span class=\"nv\">arguments</span><span class=\"w\"> </span><span class=\"nv\">will</span><span class=\"w\"> </span><span class=\"nv\">fail</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">any</span><span class=\"w\"> </span><span class=\"nv\">calls</span><span class=\"w\"> </span><span class=\"kr\">of</span><span class=\"w\"> </span><span class=\"nv\">the</span><span class=\"w\"> </span><span class=\"nv\">option</span><span class=\"w\"> </span><span class=\"nv\">don't</span><span class=\"w\"> </span><span class=\"nv\">provide</span>\n<span class=\"err\">##</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">or</span><span class=\"w\"> </span><span class=\"nv\">the</span><span class=\"w\"> </span><span class=\"nv\">values</span><span class=\"w\"> </span><span class=\"nv\">are</span><span class=\"w\"> </span><span class=\"nv\">not</span><span class=\"w\"> </span><span class=\"nv\">all</span><span class=\"w\"> </span><span class=\"nv\">numbers</span><span class=\"nf\">.</span>\n<span class=\"err\">##</span>\n<span class=\"err\">##</span><span class=\"w\"> </span><span class=\"nf\">```</span>\n<span class=\"err\">##</span><span class=\"w\"> </span><span class=\"nv\">expect</span>\n<span class=\"err\">##</span><span class=\"w\">     </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">parser</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"err\">##</span><span class=\"w\">         </span><span class=\"kt\">Opt</span><span class=\"nf\">.</span><span class=\"nv\">i128List</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">long</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"answer\"</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"err\">##</span><span class=\"w\">         </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Cli</span><span class=\"nf\">.</span><span class=\"nv\">finish</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">name</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"example\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"err\">##</span><span class=\"w\">         </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Cli</span><span class=\"nf\">.</span><span class=\"nv\">assertValid</span>\n<span class=\"err\">##</span>\n<span class=\"err\">##</span><span class=\"w\">     </span><span class=\"nv\">parser</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"example\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"-a\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"1\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"--answer=2\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"--answer\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"3\"</span><span class=\"p\">]</span>\n<span class=\"err\">##</span><span class=\"w\">     </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"kt\">SuccessfullyParsed</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"err\">##</span><span class=\"w\"> </span><span class=\"nf\">```</span>\n</code></pre></div>",
        "id": 491014330,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735321116
    },
    {
        "content": "<p>It's a type of denormalization</p>",
        "id": 491014365,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735321143
    },
    {
        "content": "<p>I think that localizing all code examples to a common set of tests makes my code cleaner, but it adds layers of indirection to someone using Weaver</p>",
        "id": 491014418,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735321182
    },
    {
        "content": "<p>So it's better for me to copy the same example to every function in the module so that it's immediately obvious when you hover the function how to use it</p>",
        "id": 491014496,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735321210
    },
    {
        "content": "<p>Meaning I have dozens of code examples that can easily go out-of-date</p>",
        "id": 491014541,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735321239
    },
    {
        "content": "<p>I think this is something that normalization could solve very well and probably be better than requiring you to copy the examples everywhere</p>",
        "id": 491014584,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735321275
    },
    {
        "content": "<p>Having docs generation lift up expect tests to the docs</p>",
        "id": 491014610,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735321292
    },
    {
        "content": "<p>Maybe some annotation to highlight the test in the docs or something</p>",
        "id": 491014625,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735321304
    },
    {
        "content": "<p>Not saying that's the answer but it feels like a better direction than copy/pasting the same docs and checking they're up-to-date - you only have one site to update</p>",
        "id": 491014712,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735321337
    },
    {
        "content": "<p>I agree that it <em>feels</em> like there's a better solution, but I can't think of one that isn't really fancy or makes the API worse to use</p>",
        "id": 491014754,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735321372
    },
    {
        "content": "<p>But I'd love to do that</p>",
        "id": 491014769,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735321381
    },
    {
        "content": "<p>Let's ignore this being a test for a minute</p>",
        "id": 491014786,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735321398
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"err\">##</span><span class=\"w\"> </span><span class=\"kt\">Add</span><span class=\"w\"> </span><span class=\"nv\">an</span><span class=\"w\"> </span><span class=\"nv\">option</span><span class=\"w\"> </span><span class=\"nv\">that</span><span class=\"w\"> </span><span class=\"nv\">takes</span><span class=\"w\"> </span><span class=\"nv\">an</span><span class=\"w\"> </span><span class=\"nf\">`</span><span class=\"kt\">I128</span><span class=\"nf\">`</span><span class=\"w\"> </span><span class=\"nv\">and</span><span class=\"w\"> </span><span class=\"nv\">can</span><span class=\"w\"> </span><span class=\"nv\">be</span><span class=\"w\"> </span><span class=\"nv\">given</span><span class=\"w\"> </span><span class=\"nv\">multiple</span><span class=\"w\"> </span><span class=\"nv\">times</span>\n<span class=\"err\">##</span><span class=\"w\"> </span><span class=\"nv\">to</span><span class=\"w\"> </span><span class=\"nv\">your</span><span class=\"w\"> </span><span class=\"kt\">CLI</span><span class=\"w\"> </span><span class=\"nv\">builder</span><span class=\"nf\">.</span>\n<span class=\"err\">##</span>\n<span class=\"err\">##</span><span class=\"w\"> </span><span class=\"kt\">Parsing</span><span class=\"w\"> </span><span class=\"nv\">arguments</span><span class=\"w\"> </span><span class=\"nv\">will</span><span class=\"w\"> </span><span class=\"nv\">fail</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">any</span><span class=\"w\"> </span><span class=\"nv\">calls</span><span class=\"w\"> </span><span class=\"kr\">of</span><span class=\"w\"> </span><span class=\"nv\">the</span><span class=\"w\"> </span><span class=\"nv\">option</span><span class=\"w\"> </span><span class=\"nv\">don't</span><span class=\"w\"> </span><span class=\"nv\">provide</span>\n<span class=\"err\">##</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">or</span><span class=\"w\"> </span><span class=\"nv\">the</span><span class=\"w\"> </span><span class=\"nv\">values</span><span class=\"w\"> </span><span class=\"nv\">are</span><span class=\"w\"> </span><span class=\"nv\">not</span><span class=\"w\"> </span><span class=\"nv\">all</span><span class=\"w\"> </span><span class=\"nv\">numbers</span><span class=\"nf\">.</span>\n<span class=\"err\">##</span>\n<span class=\"err\">##</span><span class=\"w\"> </span><span class=\"nf\">```</span><span class=\"nv\">roc</span>\n<span class=\"err\">##</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">parser</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"err\">##</span><span class=\"w\">     </span><span class=\"kt\">Opt</span><span class=\"nf\">.</span><span class=\"nv\">i128_list</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">long</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"answer\"</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"err\">##</span><span class=\"w\">     </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Cli</span><span class=\"nf\">.</span><span class=\"nv\">finish</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">name</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"example\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"err\">##</span><span class=\"w\">     </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Cli</span><span class=\"nf\">.</span><span class=\"nv\">assert_valid</span>\n<span class=\"err\">##</span>\n<span class=\"err\">##</span><span class=\"w\"> </span><span class=\"nv\">parser</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"example\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"-a\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"1\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"--answer=2\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"--answer\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"3\"</span><span class=\"p\">]</span>\n<span class=\"err\">##</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"kt\">SuccessfullyParsed</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"err\">##</span><span class=\"w\"> </span><span class=\"nf\">```</span>\n</code></pre></div>",
        "id": 491014814,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735321424
    },
    {
        "content": "<p>Let's say this is the code example.</p>",
        "id": 491014826,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735321435
    },
    {
        "content": "<p>I'd really like if code examples get type checked and all.</p>",
        "id": 491014899,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735321450
    },
    {
        "content": "<p>Just a quick note, not interrupting you:</p>\n<p>I still think long-form docs with a bunch of examples are more of an education tool as Richard mentioned and I think some opt-in checking is useful but I don't think it should be the default.</p>\n<p>I would also suggest maybe punting this until there are many more packages in the ecosystem and seeing what the common patterns across the ecosystem look like</p>",
        "id": 491014904,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735321452
    },
    {
        "content": "<p>Would you be opposed?</p>",
        "id": 491014905,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735321454
    },
    {
        "content": "<p>Okay, we can punt</p>",
        "id": 491014918,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735321467
    },
    {
        "content": "<p>I think you could do it with just two block tags “hide_header” and “hidden_module &lt;modulename&gt;”</p>",
        "id": 491014933,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735321477
    },
    {
        "content": "<p>I think it's fine but (1) I think that example should be an expect and (2) it should be opt-in if you have an example you want to type-check</p>",
        "id": 491014950,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735321493
    },
    {
        "content": "<p>I'll have to go look for some doc-based code examples that I feel would be better off not being type-checked</p>",
        "id": 491015028,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735321545
    },
    {
        "content": "<p>So using triple backticks, roc as the language, and then one of those. The first would hide the header of whatever file it it’s, and the second would not show the block at all but add the module as one that could be used by other blocks in the same document</p>",
        "id": 491015047,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735321549
    },
    {
        "content": "<p>Hard to show here</p>",
        "id": 491015104,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735321568
    },
    {
        "content": "<p>Because Richard's example of <code>xyz = # your answer</code> can usually be done with either of these</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">xyz</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"s\">\"your answer\"</span>\n\n<span class=\"c1\">-- or</span>\n<span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nv\">your</span><span class=\"w\"> </span><span class=\"nv\">answer</span><span class=\"w\"> </span><span class=\"nv\">below</span>\n<span class=\"nv\">xyz</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">null</span>\n</code></pre></div>",
        "id": 491015157,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735321609
    },
    {
        "content": "<p>And then we get that mental burden lowering of \"code examples all type check unless they say they don't\"</p>",
        "id": 491015190,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735321632
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> <a href=\"#narrow/channel/316715-contributing/topic/Ironing.20out.20doc.20code.20blocks/near/491015047\">said</a>:</p>\n<blockquote>\n<p>So using triple backticks, roc as the language, and then one of those. The first would hide the header of whatever file it it’s, and the second would not show the block at all but add the module as one that could be used by other blocks in the same document</p>\n</blockquote>\n<p>This has the disadvantage of making the docs less markdown-like, since you can no longer read them contiguously, but I'd personally be okay with this.</p>",
        "id": 491015681,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735322007
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> I'm much less experienced in the guiding of a language's development, so I'm curious about a metaprocess you seem to have running here. You suggest we should punt this until we have more ecosystem code to base our decision on, which mirrors what Richard has said for some of the other stuff I've suggested recently. I generally am trying to get ahead of problems I see in other languages with all aspects for Roc, but between:</p>\n<ul>\n<li>compiler-verified doc code blocks</li>\n<li>inline type annotations</li>\n<li>raising errors on top-level unannotated code</li>\n</ul>\n<p>I've gotten pushback on that approach. Do you think you know of a conscious heuristic (even a rough one) I can apply to figure out when we need to wait to solve a problem in Roc's design? I don't like the idea of making everyone update their code until after a problem is confirmed to exist, instead of just preempting it.</p>",
        "id": 491016170,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735322337
    },
    {
        "content": "<p>First off, I apologize if I made it seem that this is not worth discussing. That's not my intention. I think everything is worth thought and I don't think anyone has say what's worth discussing vs not</p>",
        "id": 491024527,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735328049
    },
    {
        "content": "<p>Not interpreted that way. You've been extremely courteous the whole time I've been working on Roc!</p>",
        "id": 491024556,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735328081
    },
    {
        "content": "<p>I see this now mostly as an optimization problem to get the language to a position of stability from where it can grow. Rewinding a few years, we added a lot of features in a short time. For a while I thought (esp. with Richard and Folkert) we could continue developing and fixing bugs at a consistent rate. Unfortunately, I think what has happened is that we sprayed too wide, too fast, and our time availability went down significantly. The outcome of this has been a lot of bugs and few solid foundations to stand on. Things have gotten much better since e.g. 2021/2022, but as you know, there is still a lot to do to get the foundational core of Roc to work correctly. I'm happy to share particular instances of this in my mind if it's helpful. Regardless, my opinion is that the optimization problem should be to develop a good, stable, working foundational core first, and then branch off from that.</p>",
        "id": 491025075,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735328427
    },
    {
        "content": "<p>I understand the problem you're talking about with stability, no need for examples, I see it when I work on the compiler</p>",
        "id": 491025177,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735328508
    },
    {
        "content": "<p>And when I did AoC last year</p>",
        "id": 491025188,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735328516
    },
    {
        "content": "<p>There are a few advantages of doing one thing right before branching off. The first is that you build a foundation people can build really sophisticated things on top of (like you have with Weaver) and then figure out how to support the emergent use cases better. In my experience trying to find the emergent use cases ahead of time is really hard, and you often have a few false starts. The second is that you give people a foundation that they can work with productively. People use the software and have a good time, and the discussion switches from \"when will this stop crashing\" to \"how do I make this use case better\". Roc is more in the latter direction now which is good, but the former still occurs way too much for what should be simple tasks, IMO.</p>",
        "id": 491025307,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735328589
    },
    {
        "content": "<p>Okay, fair. Between the monomorphization rewrite, lambda set rewrite, canonicalization rewrite, and ROAR, we're doing a lot of work to get a very robust core!</p>",
        "id": 491025319,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735328604
    },
    {
        "content": "<p>Okay, that's a great explanation!</p>",
        "id": 491025419,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735328664
    },
    {
        "content": "<p>We're trying to avoid buying a new car while we're still behind on our credit card payments</p>",
        "id": 491025456,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735328696
    },
    {
        "content": "<p>We've paid off most of our bills, but we still have a credit score of 500</p>",
        "id": 491025494,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735328719
    },
    {
        "content": "<p>Thanks for taking the time to explain</p>",
        "id": 491025506,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735328731
    },
    {
        "content": "<p>The third, and what I think is most important, is that keeping the surface area small and getting it right the first time gives a better basis for where to branch off. If you need to backtrack you only need to throw off a leaf rather than rebuild everything (or rearrange the leaves when you realize the core is bad). Also, when you have a core that isn't going to change much and can see what sophisticated things people are building on top of it, it gives you better ideas for what actually matters. A good example of this the new effects/for loop/imperative stuff. I think it's very hard to have seen that if you didn't have a lot of Roc code to look at and reflect on what was difficult about it for people</p>",
        "id": 491025543,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735328762
    },
    {
        "content": "<p>Yeah the car analogy is good</p>",
        "id": 491025586,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735328766
    },
    {
        "content": "<p>Fair.</p>",
        "id": 491025819,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735328900
    },
    {
        "content": "<p>Also just as a personal reflection/quirk/whatever, for me it's very difficult to understand the consequences of features without people using them. For me it's much easier to talk to someone and figure out what their pain is and solve that than to try to predict the pain. I'm probably just not smart enough to see the pain ahead of time, but sometimes the pain is invisible. And to predict an invisible pain I think is really difficult</p>",
        "id": 491025848,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735328926
    },
    {
        "content": "<p>Maybe I've been using too much Arrakian spice</p>",
        "id": 491026024,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735328990
    },
    {
        "content": "<p>I try to apply YAGNI (You Ain't Gonna Need It) when doing application dev</p>",
        "id": 491026089,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735329020
    },
    {
        "content": "<p>But I guess that instinct doesn't kick in as much with language dev because I assume that we're trying to handle future problems</p>",
        "id": 491026108,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735329047
    },
    {
        "content": "<p>But I guess Roc has found success in reacting more than proacting</p>",
        "id": 491026126,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735329063
    },
    {
        "content": "<p>yeah, i mean it's also fun right</p>",
        "id": 491026137,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735329070
    },
    {
        "content": "<p>So I'll try to lean more towards it</p>",
        "id": 491026141,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735329076
    },
    {
        "content": "<p>for me it's more fun to think of what could be than to reflect on what's not going well</p>",
        "id": 491026169,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735329109
    },
    {
        "content": "<p>eh, definitely not saying you should lean more towards it</p>",
        "id": 491026215,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735329123
    },
    {
        "content": "<p>but hopefully explains my perspective</p>",
        "id": 491026247,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735329129
    },
    {
        "content": "<p>It does explain your perspective</p>",
        "id": 491026271,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735329153
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"454654\">Ayaz Hafiz</span> <a href=\"#narrow/channel/316715-contributing/topic/Ironing.20out.20doc.20code.20blocks/near/491026215\">said</a>:</p>\n<blockquote>\n<p>eh, definitely not saying you should lean more towards it</p>\n</blockquote>\n<p>I find success in life applying virtue ethics: the philosophy is to align yourself and your decisions on good principles until they become second nature. I find it leads to less need to resolve conflict between what I do and what I should do.</p>\n<p>As a result, I tend to naturally make decisions I'm happy with, but have less practice holding competing ideas in my head and letting them \"weigh on the scale\".</p>\n<p>So I prefer to align on principles, but it's good practice to hear your opinion, disagree, and figure out how to manage that.</p>",
        "id": 491026678,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735329422
    },
    {
        "content": "<p>What's our conclusion here? I definitely want at least a minimal version of this that we can use to test the snippets in the tutorial in CI. It looks terrible for Roc if we have code that doesn't work in the tutorial.</p>",
        "id": 491111132,
        "sender_full_name": "Anton",
        "timestamp": 1735410813
    },
    {
        "content": "<p>To be fair, that's a different part of Roc, right? That means we should add a GH issue that's called \"Allow testing code blocks in roc markdown snippets\"</p>",
        "id": 491112219,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735411949
    },
    {
        "content": "<blockquote>\n<p>\"Allow testing code blocks in roc markdown snippets\"</p>\n</blockquote>\n<p>That's already implemented :) I need the ability to hide imports etc.</p>\n<blockquote>\n<p>that's a different part of Roc, right?</p>\n</blockquote>\n<p>Not really, there is a lot of shared functionality</p>",
        "id": 491112472,
        "sender_full_name": "Anton",
        "timestamp": 1735412233
    },
    {
        "content": "<p>For the features outlined in this thread, I would vote that we at least add some opt-in behavior to start the implementation with. I think that 90% of the work is parsing and typechecking doc comments, I <em>presume</em> we only highlight syntactically based on my memory.</p>",
        "id": 491112577,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735412341
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> Roc code blocks can't hide lines with the same syntax, since <code>## ##</code> is just for doc comments</p>",
        "id": 491112620,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735412398
    },
    {
        "content": "<p>Not sure what the right syntax would be</p>",
        "id": 491112706,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735412447
    },
    {
        "content": "<p>what if we just try out whatever seems best for the tutorial, but don't enable it in the compiler in general?</p>",
        "id": 491112707,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735412453
    },
    {
        "content": "<p>Oh, I know</p>",
        "id": 491112708,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735412453
    },
    {
        "content": "<p>like focus on the use case of the tutorial, defer the question of what should be in the language proper</p>",
        "id": 491112735,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735412476
    },
    {
        "content": "<p>I'm okay with that goal</p>",
        "id": 491112742,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735412487
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> do we need to hide imports for the tutorial?</p>",
        "id": 491112752,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735412509
    },
    {
        "content": "<p>I'd like them to be viewable with a toggle</p>",
        "id": 491112813,
        "sender_full_name": "Anton",
        "timestamp": 1735412544
    },
    {
        "content": "<p>We could just allow something like</p>\n<div class=\"codehilite\" data-code-language=\"Markdown\"><pre><span></span><code>Some tutorial stuff\n\n```roc,hide_imports\nimport Hidden\n\nHidden.call_func(123)\n</code></pre></div>",
        "id": 491112838,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735412571
    },
    {
        "content": "<p>Should be simple enough to implement</p>",
        "id": 491112858,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735412592
    },
    {
        "content": "<p>Then it just affects the generated HTML but not the Roc code, so we can still typecheck and all normally</p>",
        "id": 491112879,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735412622
    },
    {
        "content": "<p>I do think we'd want specific control over what lines to hide, like we want to able to hide the definition of <code>something</code> for this snippet that's currently in the tutorial:</p>\n<div class=\"codehilite\"><pre><span></span><code>stoplightColor =\n    if something &gt; 0 then\n        Red\n    else if something == 0 then\n        Yellow\n    else\n        Green\n</code></pre></div>",
        "id": 491113200,
        "sender_full_name": "Anton",
        "timestamp": 1735412983
    },
    {
        "content": "<p>We could do a Jupyter Notebook thing: all markdown blocks in a single file are part of the same module</p>",
        "id": 491113625,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735413385
    },
    {
        "content": "<p>And then we have a <code>toggleable</code> (name is flexible) annotation that makes entire blocks toggleable</p>",
        "id": 491113654,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735413414
    },
    {
        "content": "<p>That gives us control per block without needing a special new Roc directive just for markdown</p>",
        "id": 491113677,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735413445
    },
    {
        "content": "<p>something I like to do decently often is to have like a <code>...</code> in examples to omit things - could support that with a find/replace of <code>…</code> (the actual Unicode character) with <code>(crash \"\")</code> before compiling, so those always type-check</p>",
        "id": 491114019,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735413750
    },
    {
        "content": "<p>although that could result in compiler warnings of unreachable code <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 491114043,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735413782
    },
    {
        "content": "<p>Hmm, that's an interesting idea!</p>",
        "id": 491115987,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735415651
    },
    {
        "content": "<p>Do we have a precedent for any compiler warnings/errors that are there for dev but not production?</p>",
        "id": 491116816,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735416503
    },
    {
        "content": "<p>Wait, what am I saying</p>",
        "id": 491116870,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735416570
    },
    {
        "content": "<p>I think having <code>...</code> be the Python equivalent where it means \"this is a stub of some body\" would be a great feature to have</p>",
        "id": 491116937,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735416614
    },
    {
        "content": "<p>That would let people do </p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">xyz</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">...</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nv\">your</span><span class=\"w\"> </span><span class=\"nv\">val</span><span class=\"w\"> </span><span class=\"nv\">here</span>\n\n<span class=\"c1\">-- Or just this by convention</span>\n<span class=\"nv\">abc</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"kt\">True</span><span class=\"w\"> </span><span class=\"kr\">then</span><span class=\"w\"> </span><span class=\"nf\">...</span><span class=\"w\"> </span><span class=\"kr\">else</span><span class=\"w\"> </span><span class=\"mi\">123</span>\n</code></pre></div>",
        "id": 491117011,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735416722
    },
    {
        "content": "<p>And then we have a syntactically valid way to have your incomplete code blocks that still typecheck</p>",
        "id": 491117073,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735416767
    },
    {
        "content": "<p>Making it easier for us to typecheck and test doc code blocks if we go that road in the future</p>",
        "id": 491117078,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735416781
    },
    {
        "content": "<p><a href=\"https://python.land/python-ellipsis\">https://python.land/python-ellipsis</a></p>",
        "id": 491117119,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735416836
    },
    {
        "content": "<p>In maybe 45 minutes, I'll make a thread for this. It could work with inline annotations for host functions</p>",
        "id": 491117192,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735416899
    },
    {
        "content": "<p>Just for my curiosity, I'm wondering if people have preferences on formatting hidden code lines. Rust doesn't have <em>real</em> problems besides looking silly with hidden code lines because whitespace isn't significant there.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// Split a string.</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// ```</span>\n<span class=\"sd\">/// /// fn test_splitting() {</span>\n<span class=\"sd\">/// let x = \"a b c\";</span>\n<span class=\"sd\">/// /// let delimiter = \" \";</span>\n<span class=\"sd\">/// let split = x.split(delimiter);</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// assert_eq!(&amp;split[..], &amp;[\"a\", \"b\", \"c\"]);</span>\n<span class=\"sd\">/// /// }</span>\n</code></pre></div>\n<p>In Roc, whitespace is important, and parsing fails with incorrect indentation. The current suggestion is one of these two options:</p>\n<h3>Force common indentation if any hidden lines are showing</h3>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"err\">##</span><span class=\"w\"> </span><span class=\"nf\">```</span>\n<span class=\"err\">##</span><span class=\"w\">    </span><span class=\"nv\">my_func</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">|</span><span class=\"nv\">str</span><span class=\"nf\">|</span>\n<span class=\"err\">##</span><span class=\"w\"> </span><span class=\"err\">##</span><span class=\"w\">     </span><span class=\"kr\">import</span><span class=\"w\"> </span><span class=\"kt\">Helpers</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">str</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"kr\">as</span><span class=\"w\"> </span><span class=\"kt\">H</span>\n<span class=\"err\">##</span><span class=\"w\">        </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">H</span><span class=\"nf\">.</span><span class=\"nv\">build</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"err\">##</span>\n<span class=\"err\">##</span><span class=\"w\">        </span><span class=\"nv\">str</span><span class=\"nf\">.</span><span class=\"nv\">repeat</span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">)</span>\n<span class=\"err\">##</span><span class=\"w\"> </span><span class=\"nf\">```</span>\n</code></pre></div>\n<h3>Use normal indentation, ignoring the second doc comment prefix's width</h3>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"err\">##</span><span class=\"w\"> </span><span class=\"nf\">```</span>\n<span class=\"err\">##</span><span class=\"w\"> </span><span class=\"nv\">my_func</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">|</span><span class=\"nv\">str</span><span class=\"nf\">|</span>\n<span class=\"err\">##</span><span class=\"w\"> </span><span class=\"err\">##</span><span class=\"w\">        </span><span class=\"kr\">import</span><span class=\"w\"> </span><span class=\"kt\">Helpers</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">str</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"kr\">as</span><span class=\"w\"> </span><span class=\"kt\">H</span>\n<span class=\"err\">##</span><span class=\"w\">     </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">H</span><span class=\"nf\">.</span><span class=\"nv\">build</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"err\">##</span>\n<span class=\"err\">##</span><span class=\"w\">     </span><span class=\"nv\">str</span><span class=\"nf\">.</span><span class=\"nv\">repeat</span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">)</span>\n<span class=\"err\">##</span><span class=\"w\"> </span><span class=\"nf\">```</span>\n</code></pre></div>\n<p>I'm not super happy with either, but the first is more readable IMO for the source markdown, though both would generate the same HTML docs. Is there a third option, or do we have to pick from the lesser of two evils. If so, which evil?</p>",
        "id": 491145451,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735446880
    },
    {
        "content": "<p>We don't need to decide until this discussion is picked back up</p>",
        "id": 491145508,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735446957
    },
    {
        "content": "<p>right-hand hide?</p>\n<div class=\"codehilite\"><pre><span></span><code>## ```\n## my_func = |str|\n##     import Helpers { str } as H # @@hide (or whatever name)\n##     x = H.build(123)\n##\n##     str.repeat(x)\n## ```\n`\n```\n</code></pre></div>",
        "id": 491146224,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735447722
    },
    {
        "content": "<p>That's a solution if we are okay opening the door to add directives to comments.</p>",
        "id": 491146332,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735447831
    },
    {
        "content": "<p>Actually, I think putting doc comments after the line could work</p>",
        "id": 491146354,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735447865
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"err\">##</span><span class=\"w\"> </span><span class=\"nf\">```</span>\n<span class=\"err\">##</span><span class=\"w\"> </span><span class=\"nv\">my_func</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">|</span><span class=\"nv\">str</span><span class=\"nf\">|</span>\n<span class=\"err\">##</span><span class=\"w\">     </span><span class=\"kr\">import</span><span class=\"w\"> </span><span class=\"kt\">Helpers</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">str</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"kr\">as</span><span class=\"w\"> </span><span class=\"kt\">H</span><span class=\"w\"> </span><span class=\"err\">##</span>\n<span class=\"err\">##</span><span class=\"w\">     </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">H</span><span class=\"nf\">.</span><span class=\"nv\">build</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"err\">##</span>\n<span class=\"err\">##</span><span class=\"w\">     </span><span class=\"nv\">str</span><span class=\"nf\">.</span><span class=\"nv\">repeat</span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">)</span>\n<span class=\"err\">##</span><span class=\"w\"> </span><span class=\"nf\">```</span>\n</code></pre></div>",
        "id": 491146365,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735447882
    },
    {
        "content": "<p>this is docs specific right? <code>##</code> on the left is as much a directive</p>",
        "id": 491146371,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735447893
    },
    {
        "content": "<p>It's pretty subtle</p>",
        "id": 491146380,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735447900
    },
    {
        "content": "<p>Yeah, I agree</p>",
        "id": 491146384,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735447905
    },
    {
        "content": "<p>Just because something is visually indistinct from other Roc tools, it doesn't mean it's not totally different under the hood</p>",
        "id": 491146449,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735447938
    },
    {
        "content": "<p>But it would be nice to not invent a totally new feature for this</p>",
        "id": 491146465,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735447960
    },
    {
        "content": "<p>another hot take but i wonder if supporting hiding is a good idea. I think it makes sense if you have multiple code blocks that flow naturally from one to the other but are distinct for some reason. But for that maybe it's better to squash them altogether and run check over that. The downside of hiding is you can't copy-paste and have the code run correctly. If the code block is so complicated that it needs hidden pieces, maybe it's a bad API.</p>",
        "id": 491146559,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735448056
    },
    {
        "content": "<p>Probably true. The only case I care about is hiding imports, but we could just always have imports collapsed by default and toggleable, and imports would be included if you copied the block</p>",
        "id": 491146606,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735448127
    },
    {
        "content": "<p>I think we should start without code hiding for the reasons you point out</p>",
        "id": 491146616,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735448148
    },
    {
        "content": "<p>im curious of an example of a code block that has a lot of imports, if you have one in mind</p>",
        "id": 491146696,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735448234
    },
    {
        "content": "<p>I'm looking <a href=\"https://github.com/search?q=%22%2F%2F%2F+%23%22+path%3A*.rs&amp;type=code\">across GitHub</a> and I'm only seeing a few imports per example, so you probably have a point. They just don't have teaching value IMO, they only make copy-paste-ability better</p>",
        "id": 491146996,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735448456
    },
    {
        "content": "<p>So hiding them cleans up the code, but it's not necessary</p>",
        "id": 491147032,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735448470
    },
    {
        "content": "<p>Or should I say, it makes examples more concise</p>",
        "id": 491147148,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735448507
    },
    {
        "content": "<p>We can't squash all the code blocks together in the tutorial, we'd have duplicate name errors.</p>",
        "id": 491268890,
        "sender_full_name": "Anton",
        "timestamp": 1735556868
    }
]