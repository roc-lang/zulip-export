[
    {
        "content": "<p>I found this reddit thread on r/NixOS <a href=\"https://www.reddit.com/r/NixOS/comments/180ejh0/nixos_and_glibc/\">https://www.reddit.com/r/NixOS/comments/180ejh0/nixos_and_glibc/</a><br>\nIt seems like some folks in the nix community took a look at the install instructions and were a bit confused about how installing for nix was explained. This comment clarifies things pretty well</p>\n<blockquote>\n<p>I'm pretty sure you can use it just fine on nix and nixos. The warning is just for the prebuild nightlys that are built for a standard fs layout and won't run on nix without a bit of extra work.</p>\n</blockquote>\n<p>I'm curious if <span class=\"user-mention\" data-user-id=\"666594\">@John Murray</span> or anyone else with more nix experience has thoughts on how we could improve the install docs so nix-heads don't get confused.</p>",
        "id": 403593971,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1700660256
    },
    {
        "content": "<p>Yes that comment is pretty accurate.</p>\n<p>Basically you would need to make a custom derivation which wraps the binary to setup paths to all the dynamic libs.</p>\n<p>This is pretty common for most binaries when using nix.</p>\n<p>I don't think it would be too hard to setup our own wrapping. I'll take a stab at it so people who just wanna use roc with a full build from source can mess around</p>\n<p>The we could maybe just call out \"we have a nix derivation here\" instead of the caveat</p>",
        "id": 403595621,
        "sender_full_name": "John Murray",
        "timestamp": 1700660798
    },
    {
        "content": "<p>I usually build from source with <code>nix-build https://github.com/roc-lang/roc/archive/main.tar.gz</code>, is what you're proposing particularly different from that?</p>",
        "id": 403599138,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1700661963
    },
    {
        "content": "<p>Yes, John's solution would patch the existing nightly binary, whereas nix-build builds completely from source.</p>",
        "id": 403603453,
        "sender_full_name": "Anton",
        "timestamp": 1700663229
    },
    {
        "content": "<p>for what it's worth, we're working on getting roc building with static musl instead of dynamic glibc but it's nontrivial to say the least <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 403616290,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700667108
    },
    {
        "content": "<p>yeah, patching the binary for nix should be a lot easier :p</p>",
        "id": 403616580,
        "sender_full_name": "Anton",
        "timestamp": 1700667189
    },
    {
        "content": "<p>I'll see if I can get that working soon</p>",
        "id": 403616836,
        "sender_full_name": "John Murray",
        "timestamp": 1700667261
    },
    {
        "content": "<p>I got a basic derivation working for wrapping the pre compiled binary <a href=\"https://github.com/JRMurr/roc/blob/nix-wrapped-nightly/nix/nightly/default.nix\">https://github.com/JRMurr/roc/blob/nix-wrapped-nightly/nix/nightly/default.nix</a></p>\n<p>The issue i realized though is if we had that checked in we would need to update the sha each day... </p>\n<p>The other issue is since we dont have multiple nightly versions hosted people would also need to update the sha each day</p>\n<p>people can do this right now and it will get all the needed deps </p>\n<div class=\"codehilite\"><pre><span></span><code>nix-shell -p steam-run\nsteam-run &lt;downloaded-roc-binary&gt;\n</code></pre></div>\n<p>I like we mostly got \"well actually\"ied so maybe we just add a dedicated nixos section on the installer and get rid of the cavets on nix elsewhere?</p>\n<p>some info on binaries with nix <a href=\"https://unix.stackexchange.com/a/522823\">here</a> for those curious</p>",
        "id": 403647041,
        "sender_full_name": "John Murray",
        "timestamp": 1700678522
    },
    {
        "content": "<p>I can touch up the docs for that</p>",
        "id": 403647123,
        "sender_full_name": "John Murray",
        "timestamp": 1700678552
    },
    {
        "content": "<p>Thanks for helping out with this <span class=\"user-mention\" data-user-id=\"666594\">@John Murray</span>!</p>\n<blockquote>\n<p>The other issue is since we dont have multiple nightly versions hosted people would also need to update the sha each day</p>\n</blockquote>\n<p>Would a roc nix overlay help here?</p>",
        "id": 403955448,
        "sender_full_name": "Anton",
        "timestamp": 1700827747
    },
    {
        "content": "<p>yea we could do something like how the rust overlay works and have a seperate repo that pins to each day's commit.</p>\n<p>Though IMO most nix expressions build from source so using our default.nix or flake outputs should be fine if people want to use roc for builds. </p>\n<p>If they want to just play around without compiling the steam run approach works without any effort from us</p>",
        "id": 403984043,
        "sender_full_name": "John Murray",
        "timestamp": 1700838600
    },
    {
        "content": "<blockquote>\n<p>Though IMO most nix expressions build from source so using our default.nix or flake outputs should be fine if people want to use roc for builds. </p>\n</blockquote>\n<p>I think for CI the overlay would be valuable. Building from source can be quite time consuming on less powerful CI machines. They also could use steam-run but I think more people will be familiar with overlays.</p>",
        "id": 403992655,
        "sender_full_name": "Anton",
        "timestamp": 1700842102
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"666594\">John Murray</span> <a href=\"#narrow/stream/316715-contributing/topic/Nix.20install.20instructions.20website.20feedback/near/403647123\">said</a>:</p>\n<blockquote>\n<p>I can touch up the docs for that</p>\n</blockquote>\n<p>This would be great by the way :)</p>",
        "id": 403992708,
        "sender_full_name": "Anton",
        "timestamp": 1700842125
    }
]