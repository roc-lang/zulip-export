[
    {
        "content": "<p>Hi! I have a particular problem and a more general question.</p>\n<p>I'm looking at issue <a href=\"https://github.com/roc-lang/roc/issues/6041\">#6041</a> to help get a sense of the problems Rust glue is running into. After some prodding, it seems that in the sixteen-variant case, the Roc CLI describes IOError as an <code>Enumeration</code> tag union, whereas it describes the seventeen-variant case as a <code>NonRecursive</code> tag union. This could mean that either the Roc compiler is reporting the wrong shape, or that Roc is performing some kind of optimization in the representation for tag unions I'm not aware of.</p>\n<p>More generally, I'd be curious if there's some documentation I could read on how tag unions get represented in memory?</p>",
        "id": 469078362,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1725971827
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> <span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span></p>",
        "id": 469078837,
        "sender_full_name": "Anton",
        "timestamp": 1725971942
    },
    {
        "content": "<p>16 is suspecious. are we off by one? in the bottom 3 bits we can store 8 variants, and 16 being one more power of two is a clue maybe?</p>",
        "id": 469094968,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1725975637
    },
    {
        "content": "<p>Given there's no payload in any of the variants, I'd expect one byte to be sufficient for a 256-tag union right?</p>",
        "id": 469095745,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1725975805
    },
    {
        "content": "<p>ok, what is happening I think is that <code>[A, B, C]</code> is represented just as an integer</p>",
        "id": 469095753,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1725975807
    },
    {
        "content": "<p>right, but the 17-variant one must have a payload somewhere then?</p>",
        "id": 469095894,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1725975828
    },
    {
        "content": "<p>Not according to the Roc code</p>\n<div class=\"codehilite\"><pre><span></span><code>IOError : [\n    NotFound,\n    PermissionDenied,\n    ConnectionRefused,\n    ConnectionReset,\n    HostUnreachable,\n    NetworkUnreachable,\n    ConnectionAborted,\n    NotConnected,\n    AddrInUse,\n    AddrNotAvailable,\n    NetworkDown,\n    BrokenPipe,\n    AlreadyExists,\n    WouldBlock,\n    NotADirectory,\n    IsADirectory,\n    DirectoryNotEmpty, # comment out and glue generates correctly\n]\n</code></pre></div>",
        "id": 469096183,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1725975866
    },
    {
        "content": "<p>ok</p>",
        "id": 469096343,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1725975894
    },
    {
        "content": "<p>well, internally we only have <code>NonRecursive</code>, an <code>Enumeration</code> is not a thing in the IR, so that must be something that glue determines</p>",
        "id": 469096620,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1725975941
    },
    {
        "content": "<p>I see</p>",
        "id": 469096777,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1725975975
    },
    {
        "content": "<p>I'm inclined to think this is a bug in the glue part of the compiler then?</p>",
        "id": 469096876,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1725975998
    },
    {
        "content": "<p>I think enumeration is something Richard added for non recursive tags that have no payload</p>",
        "id": 469096979,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725976025
    },
    {
        "content": "<p>Should just be a simple check, but could have a bug for sure.</p>",
        "id": 469097016,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725976040
    },
    {
        "content": "<p>Is this documented anywhere? Or is there someone who has a complete picture on this?</p>",
        "id": 469097103,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1725976067
    },
    {
        "content": "<p>\"this\" being, the in-memory representation of tag unions</p>",
        "id": 469097237,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1725976096
    },
    {
        "content": "<p>see <code>fn add_int_enumeration(</code> and its usages</p>",
        "id": 469097330,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1725976120
    },
    {
        "content": "<p>it does not perform any sophisticated transformation though, so the 16/17 values difference might be something deeper</p>",
        "id": 469097570,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1725976181
    },
    {
        "content": "<p>so this would require some (<code>dbg!</code>) debugging</p>",
        "id": 469097842,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1725976229
    }
]