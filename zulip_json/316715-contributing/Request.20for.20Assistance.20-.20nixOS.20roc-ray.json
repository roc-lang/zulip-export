[
    {
        "content": "<p>Is anyone able to help me fix roc-ray so it can be used with nixOS? </p>\n<p><a href=\"https://github.com/lukewilliamboswell/roc-ray\">https://github.com/lukewilliamboswell/roc-ray</a></p>\n<p>This isn't urgent or anything, but I'm a complete nix noob, and usually just stumble through things with the help of a (just as confused) LLM.</p>\n<p>I know of at least one person who has been trying to use the platform for making games and are having issues using nixOS. I figured just providing a flake that works on linux would be enough... but turns out nix may not like the way I've set things up. </p>\n<p>Basically roc-ray currently uses the rust toolchain to drive the final linking which sidesteps some issues and is simpler. The dream is to one day cut a release so the surgical linkers can do their thing, enabling people to make graphics apps using <code>roc build</code>.</p>\n<p>I have a \"sys\" crate that wraps the raylib binaries (static libraries). This is a nice experience for most people as everything is included, but for someone using nix I think it expects to find dependencies in a special nix path. So I'm guessing raylib will be easier to use if it's dynamically linked.</p>\n<p>I've also setup the <code>build.rs</code> so it can link with raylib as a dynamic library. But I'm not sure it's working etc, without a nixOS installation myself to test things on.</p>\n<p>Anyway... if you have nixOS and a passion for nix, rust , roc, or games dev and would like to help please let me know.</p>",
        "id": 494750025,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1737362890
    },
    {
        "content": "<p>I've got some other issues to deal with first, but I can look at this after :)</p>",
        "id": 494770838,
        "sender_full_name": "Anton",
        "timestamp": 1737368480
    },
    {
        "content": "<p>I finally got to this <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span>, this flake.nix makes <code>just dev examples/pong.roc</code> work :)</p>\n<div class=\"codehilite\" data-code-language=\"Nix\"><pre><span></span><code><span class=\"p\">{</span>\n  <span class=\"ss\">description</span> <span class=\"o\">=</span> <span class=\"s2\">\"Roc Ray platform flake\"</span><span class=\"p\">;</span>\n\n  <span class=\"ss\">inputs</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    roc<span class=\"o\">.</span><span class=\"ss\">url</span> <span class=\"o\">=</span> <span class=\"s2\">\"github:roc-lang/roc\"</span><span class=\"p\">;</span>\n\n    nixpkgs<span class=\"o\">.</span><span class=\"ss\">follows</span> <span class=\"o\">=</span> <span class=\"s2\">\"roc/nixpkgs\"</span><span class=\"p\">;</span>\n\n    <span class=\"c1\"># rust from nixpkgs has some libc problems, this is patched in the rust-overlay</span>\n    <span class=\"ss\">rust-overlay</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"ss\">url</span> <span class=\"o\">=</span> <span class=\"s2\">\"github:oxalica/rust-overlay\"</span><span class=\"p\">;</span>\n        inputs<span class=\"o\">.</span>nixpkgs<span class=\"o\">.</span><span class=\"ss\">follows</span> <span class=\"o\">=</span> <span class=\"s2\">\"nixpkgs\"</span><span class=\"p\">;</span>\n    <span class=\"p\">};</span>\n\n    <span class=\"c1\"># to easily make configs for multiple architectures</span>\n    flake-utils<span class=\"o\">.</span><span class=\"ss\">url</span> <span class=\"o\">=</span> <span class=\"s2\">\"github:numtide/flake-utils\"</span><span class=\"p\">;</span>\n\n    <span class=\"c1\"># to make graphics work with nix</span>\n    <span class=\"ss\">nixgl</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n      <span class=\"ss\">url</span> <span class=\"o\">=</span> <span class=\"s2\">\"github:guibou/nixGL\"</span><span class=\"p\">;</span>\n      inputs<span class=\"o\">.</span>nixpkgs<span class=\"o\">.</span><span class=\"ss\">follows</span> <span class=\"o\">=</span> <span class=\"s2\">\"nixpkgs\"</span><span class=\"p\">;</span>\n      inputs<span class=\"o\">.</span>flake-utils<span class=\"o\">.</span><span class=\"ss\">follows</span> <span class=\"o\">=</span> <span class=\"s2\">\"flake-utils\"</span><span class=\"p\">;</span>\n    <span class=\"p\">};</span>\n\n  <span class=\"p\">};</span>\n\n  <span class=\"ss\">outputs</span> <span class=\"o\">=</span> <span class=\"p\">{</span> self<span class=\"p\">,</span> roc<span class=\"p\">,</span> nixpkgs<span class=\"p\">,</span> rust-overlay<span class=\"p\">,</span> flake-utils<span class=\"p\">,</span> nixgl  <span class=\"p\">}:</span>\n    <span class=\"k\">let</span> <span class=\"ss\">supportedSystems</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"s2\">\"x86_64-linux\"</span> <span class=\"s2\">\"aarch64-linux\"</span> <span class=\"s2\">\"x86_64-darwin\"</span> <span class=\"s2\">\"aarch64-darwin\"</span> <span class=\"p\">];</span>\n    <span class=\"k\">in</span> flake-utils<span class=\"o\">.</span>lib<span class=\"o\">.</span>eachSystem supportedSystems <span class=\"p\">(</span>system<span class=\"p\">:</span>\n        <span class=\"k\">let</span>\n            <span class=\"ss\">overlays</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"p\">(</span><span class=\"nb\">import</span> rust-overlay<span class=\"p\">)</span> <span class=\"p\">]</span>\n              <span class=\"o\">++</span> <span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"ss\">system</span> <span class=\"o\">==</span> <span class=\"s2\">\"x86_64-linux\"</span> <span class=\"k\">then</span> <span class=\"p\">[</span> nixgl<span class=\"o\">.</span>overlay <span class=\"p\">]</span> <span class=\"k\">else</span> <span class=\"p\">[</span> <span class=\"p\">]);</span>\n\n            <span class=\"ss\">pkgs</span> <span class=\"o\">=</span> <span class=\"nb\">import</span> nixpkgs <span class=\"p\">{</span> <span class=\"k\">inherit</span> system overlays<span class=\"p\">;</span> <span class=\"p\">};</span>\n\n            <span class=\"ss\">rocPkgs</span> <span class=\"o\">=</span> roc<span class=\"o\">.</span>packages<span class=\"o\">.</span><span class=\"si\">${</span>system<span class=\"si\">}</span><span class=\"p\">;</span>\n            <span class=\"c1\"># llvmPkgs = pkgs.llvmPackages_16;</span>\n\n            <span class=\"ss\">rust</span> <span class=\"o\">=</span> pkgs<span class=\"o\">.</span>rust-bin<span class=\"o\">.</span>fromRustupToolchainFile <span class=\"s2\">\"</span><span class=\"si\">${</span><span class=\"nb\">toString</span> <span class=\"l\">./rust-toolchain.toml</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">;</span>\n\n            <span class=\"ss\">linuxDeps</span> <span class=\"o\">=</span> <span class=\"k\">with</span> pkgs<span class=\"p\">;</span>\n                lib<span class=\"o\">.</span>optionals stdenv<span class=\"o\">.</span>isLinux <span class=\"p\">[</span>\n                    libglvnd\n                    xorg<span class=\"o\">.</span>libX11\n                    xorg<span class=\"o\">.</span>libXcursor\n                    xorg<span class=\"o\">.</span>libXrandr\n                    xorg<span class=\"o\">.</span>libXi\n                    xorg<span class=\"o\">.</span>libxcb\n                    xorg<span class=\"o\">.</span>libXinerama\n                <span class=\"p\">];</span>\n\n            <span class=\"ss\">macosDeps</span> <span class=\"o\">=</span> <span class=\"k\">if</span> pkgs<span class=\"o\">.</span>stdenv<span class=\"o\">.</span>isDarwin <span class=\"k\">then</span> <span class=\"p\">[</span>\n                pkgs<span class=\"o\">.</span>libiconv\n                pkgs<span class=\"o\">.</span>darwin<span class=\"o\">.</span>apple_sdk<span class=\"o\">.</span>frameworks<span class=\"o\">.</span>SystemConfiguration\n                pkgs<span class=\"o\">.</span>darwin<span class=\"o\">.</span>apple_sdk<span class=\"o\">.</span>frameworks<span class=\"o\">.</span>CoreGraphics\n                pkgs<span class=\"o\">.</span>darwin<span class=\"o\">.</span>apple_sdk<span class=\"o\">.</span>frameworks<span class=\"o\">.</span>AppKit\n            <span class=\"p\">]</span> <span class=\"k\">else</span> <span class=\"p\">[];</span>\n\n        <span class=\"k\">in</span> <span class=\"p\">{</span>\n\n            <span class=\"ss\">devShell</span> <span class=\"o\">=</span> <span class=\"k\">if</span> pkgs<span class=\"o\">.</span>stdenv<span class=\"o\">.</span>isDarwin <span class=\"k\">then</span>\n                <span class=\"nb\">throw</span> <span class=\"s s-Multiline\">''</span>\n<span class=\"s s-Multiline\">                    HELP WANTED FOR ROC RAY NIX CONFIGURATION</span>\n\n<span class=\"s s-Multiline\">                    Darwin/macOS is not currently supported due to framework linking issues.</span>\n<span class=\"s s-Multiline\">                    If you'd like to help fix this, please check:</span>\n<span class=\"s s-Multiline\">                    https://github.com/your-repo/roc-ray/issues</span>\n\n<span class=\"s s-Multiline\">                    The main issue is with linking Objective-C runtime and macOS frameworks</span>\n<span class=\"s s-Multiline\">                    correctly within the Nix environment. I can't find the right incantation</span>\n<span class=\"s s-Multiline\">                    to make it work. If you have experience with this, please help! :smile:</span>\n<span class=\"s s-Multiline\">                ''</span>\n                <span class=\"k\">else</span> pkgs<span class=\"o\">.</span>mkShell <span class=\"p\">{</span>\n\n                <span class=\"ss\">packages</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                        rocPkgs<span class=\"o\">.</span>cli\n                        rust\n                        pkgs<span class=\"o\">.</span>zig <span class=\"c1\"># For Web support, used to build roc wasm static library</span>\n                        pkgs<span class=\"o\">.</span>emscripten\n                        pkgs<span class=\"o\">.</span>simple-http-server\n                        pkgs<span class=\"o\">.</span>just <span class=\"c1\"># For dev command</span>\n                    <span class=\"p\">]</span> <span class=\"o\">++</span> linuxDeps <span class=\"o\">++</span> macosDeps<span class=\"p\">;</span>\n\n                <span class=\"ss\">shellHook</span> <span class=\"o\">=</span> <span class=\"s s-Multiline\">''</span>\n<span class=\"s s-Multiline\">                    if [ \"$(uname)\" = \"Darwin\" ]; then</span>\n<span class=\"s s-Multiline\">                        export SDKROOT=$(xcrun --show-sdk-path)</span>\n<span class=\"s s-Multiline\">                        export LD_LIBRARY_PATH=</span><span class=\"si\">${</span>pkgs<span class=\"o\">.</span>lib<span class=\"o\">.</span>makeLibraryPath macosDeps<span class=\"si\">}</span><span class=\"s s-Multiline\">:$LD_LIBRARY_PATH</span>\n<span class=\"s s-Multiline\">                    fi</span>\n\n<span class=\"s s-Multiline\">                    if [ \"$(uname)\" = \"Linux\" ]; then</span>\n<span class=\"s s-Multiline\">                        export LD_LIBRARY_PATH=</span><span class=\"si\">${</span>pkgs<span class=\"o\">.</span>lib<span class=\"o\">.</span>makeLibraryPath linuxDeps<span class=\"si\">}</span><span class=\"s s-Multiline\">:$LD_LIBRARY_PATH</span>\n<span class=\"s s-Multiline\">                    fi</span>\n<span class=\"s s-Multiline\">                ''</span><span class=\"p\">;</span>\n            <span class=\"p\">};</span>\n\n            <span class=\"ss\">formatter</span> <span class=\"o\">=</span> pkgs<span class=\"o\">.</span>nixpkgs-fmt<span class=\"p\">;</span>\n\n        <span class=\"p\">});</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 502090070,
        "sender_full_name": "Anton",
        "timestamp": 1740587281
    },
    {
        "content": "<p>I also tried with claude 3.7 but it could not handle it, nix experts are still safe :p</p>",
        "id": 502092327,
        "sender_full_name": "Anton",
        "timestamp": 1740587816
    },
    {
        "content": "<p>That's awesome</p>",
        "id": 502128881,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1740598566
    }
]