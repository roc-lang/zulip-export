[
    {
        "content": "<p>I'm working on a few things that would benefit from <a href=\"https://docs.google.com/document/d/1Jo9nZCekkoF6SaDcRqPqoPcgPaAAvlNZC7v3kgVQ3Tc/edit\">Proposal: Record Builder Syntax</a>. In my opinion, this would make Roc stand out from other FP languages where applicatives are often leveraged but feel somewhat clunky. </p>\n<p>I already looked into how this could be added, and I would love to take a stab at implementing it. </p>\n<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> Is this at a stage where you'd consider accepting a PR or is it too early for that?</p>",
        "id": 355268307,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683062665
    },
    {
        "content": "<p>totally happy to accept a contribution for it! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 355269042,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683063010
    },
    {
        "content": "<p>the only question mark in my mind is whether we should have it desugar to <code>apply</code> or <code>map2</code> (each can be implemented in terms of the other, but I haven't thought through the pros/cons of choosing one vs the other) but that's the very last step of the feature, so I don't think it's a blocker for getting started</p>",
        "id": 355269165,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683063073
    },
    {
        "content": "<p>Interesting. If we desugared to <code>map2</code> the \"sugared\" source would be different, right? </p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">usersAndPosts</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">users</span><span class=\"w\"> </span><span class=\"ow\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">Http</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"s\">\"/users\"</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">batch</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">posts</span><span class=\"w\"> </span><span class=\"ow\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">Http</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"s\">\"/posts\"</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">batch</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>In the example, <code>apply</code> is provided as <code>Task.batch</code>.</p>",
        "id": 355271399,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683064105
    },
    {
        "content": "<p>hm yeah, true</p>",
        "id": 355277346,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683066998
    },
    {
        "content": "<p>yeah maybe <code>map2</code> doesn't make sense <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 355277373,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683067016
    },
    {
        "content": "<p>it just occurred to me recently that it was an option because it can be losslessly transformed to <code>apply</code>, but thinking about it some more, it doesn't really seem to have any upsides here!</p>",
        "id": 355277436,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683067044
    },
    {
        "content": "<p>so let's stick with <code>apply</code></p>",
        "id": 355277446,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683067049
    },
    {
        "content": "<p>Yeah, <code>apply</code> seems more straightforward for this use case.</p>",
        "id": 355282519,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683069371
    },
    {
        "content": "<p>Ok, cool. I'll get started whenever I get some free time <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 355282547,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683069391
    },
    {
        "content": "<p>awesome, feel free to post here if you have any questions!</p>",
        "id": 355284190,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683070380
    },
    {
        "content": "<p>I'm not sure if this is the place for it but I just read the design doc for this feature and left wondering if there isn't something even better we could figure out without the downsides listed.</p>\n<p>for instance, does it make sense to use anything other than <code>Task.batch</code> for each of the items? I would think that <code>Task.await</code> would make it sequential - though it wouldn't right? since one of the design goals of this syntax is to make people understand they can't use ordering.</p>\n<p>it seems like this approach might make people have a headache trying to compute values inside the same <code>collect</code> statement, even if it doesn't work it kinda looks enough like backpassing for people to think it would work...</p>\n<p>with that in mind, any computed values or sequential tasks would need to happen in a follow-up step, right? wouldn't it be better to restrict it more and people could use a <code>Task.map</code> if they wanted to compute something or <code>Task.andThen</code> if they wanted to do something after all requests are done.</p>\n<p>something like</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">batch</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"nv\">users</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Http</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"w\"> </span><span class=\"s\">\"/users\"</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"nv\">posts</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Http</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"w\"> </span><span class=\"s\">\"/posts\"</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>the syntax sugar would be for the function <code>Task.batch</code> itself - it requires a record of tasks.</p>",
        "id": 355284241,
        "sender_full_name": "Georges Boris",
        "timestamp": 1683070427
    },
    {
        "content": "<p>IIUC, <code>Task.await</code> would fail to typecheck.</p>",
        "id": 355285931,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683071583
    },
    {
        "content": "<p>Related to his above question, why do we need <code>Task.collect</code> at all. We should even be able to do:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">usersAndPosts</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">succeed</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nx\">users</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">Http</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"w\"> </span><span class=\"s\">\"/users\"</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">batch</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nx\">posts</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">Http</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"w\"> </span><span class=\"s\">\"/posts\"</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">batch</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>It could desugar to:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">succeed</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"err\">\\</span><span class=\"nx\">users</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">posts</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nx\">users</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">posts</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">batch</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Http</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"w\"> </span><span class=\"s\">\"/users\"</span><span class=\"p\">)</span>\n<span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">batch</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Http</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"w\"> </span><span class=\"s\">\"/posts\"</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>I am not sure what adding in an extra layer of indirection and <code>wrap</code> function does for us.</p>",
        "id": 355286566,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683072047
    },
    {
        "content": "<p>Alos, <span class=\"user-mention\" data-user-id=\"364014\">@Georges Boris</span>, your above proposal would have no way to distinguish from a regular record without blessing <code>Task.batch</code>, it needs to at least keep something like <code>&lt;-</code> so that we know to apply syntax sugar.</p>",
        "id": 355286953,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683072287
    },
    {
        "content": "<p>so would this syntax work for any other record constructor? from the doc I thought it was explicitly related to parallel tasks - so this would also be useful for something like this?</p>\n<div class=\"codehilite\"><pre><span></span><code>D.succeed {\n  name &lt;- D.field &quot;name&quot; D.string  |&gt; D.required,\n  email &lt;- D.field &quot;email&quot; D.string |&gt; D.optional\n}\n</code></pre></div>\n<p>(trying to mimick elm's json decode pipeline api)</p>",
        "id": 355287561,
        "sender_full_name": "Georges Boris",
        "timestamp": 1683072701
    },
    {
        "content": "<p>Interesting. I mean it would build:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">D</span><span class=\"p\">.</span><span class=\"nx\">succeed</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"err\">\\</span><span class=\"nx\">name</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">email</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nx\">name</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">email</span><span class=\"p\">}</span>\n<span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">D</span><span class=\"p\">.</span><span class=\"nx\">required</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">D</span><span class=\"p\">.</span><span class=\"nx\">field</span><span class=\"w\"> </span><span class=\"s\">\"name\"</span><span class=\"w\"> </span><span class=\"nx\">D</span><span class=\"p\">.</span><span class=\"nx\">string</span><span class=\"p\">)</span>\n<span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">D</span><span class=\"p\">.</span><span class=\"nx\">optional</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">D</span><span class=\"p\">.</span><span class=\"nx\">field</span><span class=\"w\"> </span><span class=\"s\">\"email\"</span><span class=\"w\"> </span><span class=\"nx\">D</span><span class=\"p\">.</span><span class=\"nx\">string</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>the type of required and optional would be something like:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">required</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">D</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"nx\">err</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">D</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nx\">err</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">D</span><span class=\"w\"> </span><span class=\"nx\">b</span><span class=\"w\"> </span><span class=\"nx\">err</span>\n\n<span class=\"nv\">optional</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">D</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"nx\">err</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">D</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nx\">err</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">D</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Option</span><span class=\"w\"> </span><span class=\"nx\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n</code></pre></div>\n<p>Where optional would on failure return <code>None</code> and clear out the error. While required would propagate the error.</p>\n<p>I think all the types could work out at a minimum.</p>",
        "id": 355288038,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683073000
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"364014\">@Georges Boris</span>  Yes, it would work for any applicative API. For example, I want to use it to build type-safe SQL selections. You could also use it to build a CLI arguments parser.</p>",
        "id": 355288114,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683073057
    },
    {
        "content": "<p>You would just need something that can actually execute <code>D</code> just like we have platforms executing <code>Task</code>. So I think yes, it would enable that.</p>",
        "id": 355288118,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683073061
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> Good point about not needing <code>Task.collect</code></p>",
        "id": 355288252,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683073129
    },
    {
        "content": "<p>Oh, but <code>D.string</code> would not really work. But some other api should work. As in, <code>D.string</code> could work, but then <code>email</code> would not be a <code>Str</code> instead it would be a wrapped <code>[String Str]</code>. So you would then have to match on the type even though you know the only type it could be. I think instead you would need <code>D.fieldStr</code> and same for other types to make the api play nicely with types in roc.</p>",
        "id": 355288445,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683073228
    },
    {
        "content": "<p>it seems like a nice API that will need a veeery careful error message setup. I can totally see someone getting mixed up with types when trying to mix something like <code>Task.batch</code> and <code>Task.await</code> since the dependency is not as clear as an actual pipeline.</p>",
        "id": 355288525,
        "sender_full_name": "Georges Boris",
        "timestamp": 1683073268
    },
    {
        "content": "<p>(<code>optional</code> actually takes a default value in Elm - my mistake!)</p>",
        "id": 355288583,
        "sender_full_name": "Georges Boris",
        "timestamp": 1683073318
    },
    {
        "content": "<p>Will be interesting to see how this works with <code>Decode</code> in the future. I would assume it would in the end be built on top of <code>Decode</code>, but maybe that is wrong. Not sure if you can currently decode with a default value. I think not.</p>",
        "id": 355288869,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683073465
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"364014\">Georges Boris</span> <a href=\"#narrow/stream/316715-contributing/topic/Record.20Builder.20Syntax/near/355288525\">said</a>:</p>\n<blockquote>\n<p>it seems like a nice API that will need a veeery careful error message setup. I can totally see someone getting mixed up with types when trying to mix something like <code>Task.batch</code> and <code>Task.await</code> since the dependency is not as clear as an actual pipeline.</p>\n</blockquote>\n<p>That's true. On the other hand, by having a special syntax for applicatives, we can produce much more insightful error messages than the other languages.</p>",
        "id": 355289353,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683073725
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/316715-contributing/topic/Record.20Builder.20Syntax/near/355286566\">said</a>:</p>\n<blockquote>\n<p>Related to his above question, why do we need <code>Task.collect</code> at all. We should even be able to do:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">usersAndPosts</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">succeed</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nx\">users</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">Http</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"w\"> </span><span class=\"s\">\"/users\"</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">batch</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nx\">posts</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">Http</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"w\"> </span><span class=\"s\">\"/posts\"</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">batch</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>It could desugar to:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">succeed</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"err\">\\</span><span class=\"nx\">users</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">posts</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nx\">users</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">posts</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">batch</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Http</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"w\"> </span><span class=\"s\">\"/users\"</span><span class=\"p\">)</span>\n<span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">batch</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Http</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"w\"> </span><span class=\"s\">\"/posts\"</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>I am not sure what adding in an extra layer of indirection and <code>wrap</code> function does for us.</p>\n</blockquote>\n<p>This is a good point. I can't come up with anything the layer of indirection would allow us to do, that we couldn't without it.</p>",
        "id": 355290522,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683074356
    },
    {
        "content": "<p>Other than having a more intentional name for it I guess.</p>",
        "id": 355290838,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683074515
    },
    {
        "content": "<p>the reason for <code>Task.collect</code> is that it makes the sugar a self-contained expression</p>",
        "id": 355291401,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683074836
    },
    {
        "content": "<p>in other words, with <code>Task.collect</code>, the sugar is all inside the curly braces and everything outside the curly braces is normal Roc</p>",
        "id": 355291432,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683074855
    },
    {
        "content": "<p>if you want <code>Task.succeed { ... }</code> to replace <code>Task.collect { ... }</code> then you need to say that, despite all appearances, that <code>Task.succeed { ... }</code> is not a function call</p>",
        "id": 355291535,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683074893
    },
    {
        "content": "<p>rather it's the beginning of some syntax sugar that you only find out is happening if you read what's inside the curly braces</p>",
        "id": 355291580,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683074923
    },
    {
        "content": "<p>and every other time you see <code>Task.succeed { ... }</code> you know that it's going to evaluate to a <code>Task { ...some fields... }</code> but now it might not</p>",
        "id": 355291624,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683074950
    },
    {
        "content": "<p>I think calling <code>Task.collect</code> any different/an actual function call is wrong. <code>Task.collect</code> doesn't even make sense to be called with those args. (As in either way it is not a true function call and is a rule that a roc user needs to know. If they look at the raw <code>Task.collect</code>, or the raw <code>Task.succeed</code> neither truly makes senses. I think <code>Task.succeed</code> reads closer to the expected output type.)</p>",
        "id": 355291784,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683075023
    },
    {
        "content": "<blockquote>\n<p>every other time you see <code>Task.succeed { ... }</code> you know that it's going to evaluate to a <code>Task { ...some fields... } </code>but now it might not</p>\n</blockquote>\n<p>This is still true. They syntax sugar always generates a record.</p>",
        "id": 355291854,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683075066
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/316715-contributing/topic/Record.20Builder.20Syntax/near/355286566\">said</a>:</p>\n<blockquote>\n<p>Related to his above question, why do we need <code>Task.collect</code> at all. We should even be able to do:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">usersAndPosts</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">succeed</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nx\">users</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">Http</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"w\"> </span><span class=\"s\">\"/users\"</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">batch</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nx\">posts</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">Http</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"w\"> </span><span class=\"s\">\"/posts\"</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">batch</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>It could desugar to:</p>\n<p><div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">succeed</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"err\">\\</span><span class=\"nx\">users</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">posts</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nx\">users</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">posts</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">batch</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Http</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"w\"> </span><span class=\"s\">\"/users\"</span><span class=\"p\">)</span>\n<span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">batch</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Http</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"w\"> </span><span class=\"s\">\"/posts\"</span><span class=\"p\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>if you desugar the <code>|&gt;</code>s out, the <code>Task.batch</code> calls are the outermost calls.</p>\n<p>in other words, in this example we started with <code>Task.succeed { ... }</code> and ended up with (after desugaring) <code>Task.batch (Task.batch (Task.succeed ...)))</code></p>",
        "id": 355292282,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683075289
    },
    {
        "content": "<p>I personally like the parallel between:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">succeed</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nv\">user</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">getUser</span><span class=\"w\"> </span><span class=\"nx\">someData</span>\n<span class=\"w\">    </span><span class=\"nv\">email</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">loadEmail</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"nx\">b</span><span class=\"w\"> </span><span class=\"nx\">c</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>and:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">succeed</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nx\">users</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">Http</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"w\"> </span><span class=\"s\">\"/users\"</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">batch</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nx\">posts</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">Http</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"w\"> </span><span class=\"s\">\"/posts\"</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">batch</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Both give you the same output <code>Task {user: Str, email: Str} err</code>, but one is in parallel and using sub tasks.</p>",
        "id": 355292362,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683075334
    },
    {
        "content": "<p>that's a compelling point!</p>",
        "id": 355292460,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683075380
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span>  I guess <code>|&gt;</code> itself is actually precedent for adding wrapping calls to an expression after the fact</p>",
        "id": 355292510,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683075419
    },
    {
        "content": "<p>Of course, I think it will confuse users that some reason they have to transform to this syntax if there are dependencies:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">users</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">Http</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"w\"> </span><span class=\"s\">\"/users\"</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">await</span>\n<span class=\"nx\">posts</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">Http</span><span class=\"p\">.</span><span class=\"nx\">getPosts</span><span class=\"w\"> </span><span class=\"nx\">users</span><span class=\"w\"> </span><span class=\"s\">\"/posts\"</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">await</span>\n\n<span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">succeed</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nx\">users</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">posts</span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 355292561,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683075445
    },
    {
        "content": "<p>so it's already not necessarily the case that if you see <code>Task.succeed { ... }</code> you know that a <code>Task.succeed</code> will be the first call there; you already have to keep reading to see if there's a <code>|&gt;</code> coming in order to know what will be evaluated first</p>",
        "id": 355292563,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683075448
    },
    {
        "content": "<p>and actually I guess that's true of binary operators in general, not just <code>|&gt;</code> <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 355292579,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683075461
    },
    {
        "content": "<p>Oh, another expansion to the syntax, could it also support this:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">users</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"nx\">getUsers</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">await</span>\n\n<span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">succeed</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nx\">users</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nx\">emails</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"nx\">getEmails</span><span class=\"w\"> </span><span class=\"nx\">users</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">batch</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nx\">posts</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"nx\">getPosts</span><span class=\"w\"> </span><span class=\"nx\">users</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">batch</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 355293151,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683075895
    },
    {
        "content": "<p>Yes! That was going to be my next question.</p>",
        "id": 355293214,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683075922
    },
    {
        "content": "<p>I suppose, although at least one of them needs to be <code>&lt;-</code> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 355293411,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683076038
    },
    {
        "content": "<p>wait, actually I don't think that works</p>",
        "id": 355293440,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683076053
    },
    {
        "content": "<p>because it's not a <code>|&gt; Task.batch</code></p>",
        "id": 355293451,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683076059
    },
    {
        "content": "<p>I definitely do not think we should allow mixing and matching <code>await</code> and <code>batch</code></p>",
        "id": 355293463,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683076070
    },
    {
        "content": "<p>It should work, <code>users</code> in that scope is already the final value, not the <code>Task</code></p>",
        "id": 355293533,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683076084
    },
    {
        "content": "<p>oh wait nm I misunderstood</p>",
        "id": 355293537,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683076087
    },
    {
        "content": "<p>so <code>users</code> is sugar for <code>users: users</code> as usual, not <code>users &lt;- users</code> <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 355293564,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683076106
    },
    {
        "content": "<p>yeah that makes sense!</p>",
        "id": 355293568,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683076109
    },
    {
        "content": "<p>in that case we should allow <code>users: blah</code> as well (I forget if the doc mentioned that)</p>",
        "id": 355293589,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683076125
    },
    {
        "content": "<p>cool, I'm on board with both of those changes <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 355293638,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683076157
    },
    {
        "content": "<p>For sure! When I was looking into how I would implement this earlier, I thought we can split the fields set with <code>:</code> (or <code>LabelOnly</code>) from those using <code>&lt;-</code>.</p>",
        "id": 355293678,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683076184
    },
    {
        "content": "<p>The former are kept the same, and the latter get desugared into the pipeline thing.</p>",
        "id": 355293797,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683076238
    },
    {
        "content": "<p>Yes, exactly what I was thinking</p>",
        "id": 355294200,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683076479
    },
    {
        "content": "<p>could be useful to have a default type alias for applicatives so it is easier to spot which functions are compatible with this feature than looking for the usually confusing type signature... type alias is definitely not the way to go but would be great to spot compatibility easily.</p>",
        "id": 355294440,
        "sender_full_name": "Georges Boris",
        "timestamp": 1683076647
    },
    {
        "content": "<p>the pattern is:<code>Task a err -&gt; Task (a -&gt; b) err -&gt; Task somethingWithB err</code></p>\n<p>So could be:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">ApplicativeTask</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"nx\">b</span><span class=\"w\"> </span><span class=\"nv\">err</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"nx\">err</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nx\">err</span>\n\n<span class=\"nv\">batch</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">ApplicativeTask</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"nx\">b</span><span class=\"w\"> </span><span class=\"nx\">err</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"w\"> </span><span class=\"nx\">somethingWithB</span><span class=\"w\"> </span><span class=\"nx\">err</span>\n</code></pre></div>",
        "id": 355295615,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683077351
    },
    {
        "content": "<p>Not sure if it helps, but maybe...idk</p>",
        "id": 355295627,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683077366
    },
    {
        "content": "<p>I think we overlooked something:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">succeed</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">users</span><span class=\"w\"> </span><span class=\"ow\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">Http</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"s\">\"/users\"</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">batch</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">posts</span><span class=\"w\"> </span><span class=\"ow\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">Http</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"s\">\"/posts\"</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">batch</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>could not desugar to:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">succeed</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"n\">users</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">posts</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">users</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">posts</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">batch</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Http</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"s\">\"/users\"</span><span class=\"p\">)</span>\n<span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">batch</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Http</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"s\">\"/posts\"</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>because we would be applying <code>Task.batch</code> with 2 arguments: <code>Task.succeed (\\users -&gt; \\posts -&gt; { users, posts })</code> and <code>(Http.get \"/users\")</code></p>",
        "id": 355297908,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683078747
    },
    {
        "content": "<p>It would work in Elm because <code>Task.batch</code> would be partially applied with <code>Http.get ..</code> and then the pipe would apply <code>Task.succeed (..)</code></p>",
        "id": 355298106,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683078887
    },
    {
        "content": "<p>Since batch is <code>Task a err -&gt; Task (a -&gt; b) err -&gt; Task b err</code>, it is manually curried.</p>\n<p>I think you just need extra parens:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">succeed</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"err\">\\</span><span class=\"nx\">users</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">posts</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nx\">users</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">posts</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">batch</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Http</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"w\"> </span><span class=\"s\">\"/users\"</span><span class=\"p\">))</span>\n<span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">batch</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Http</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"w\"> </span><span class=\"s\">\"/posts\"</span><span class=\"p\">))</span>\n</code></pre></div>",
        "id": 355298348,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683079077
    },
    {
        "content": "<p>Oh, parens do that? Let me check</p>",
        "id": 355298464,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683079144
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/QN_85UZh6NNP20dEab_2Zog8/CleanShot-2023-05-02-at-22.59.482x.png\">CleanShot-2023-05-02-at-22.59.482x.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/QN_85UZh6NNP20dEab_2Zog8/CleanShot-2023-05-02-at-22.59.482x.png\" title=\"CleanShot-2023-05-02-at-22.59.482x.png\"><img src=\"/user_uploads/22008/QN_85UZh6NNP20dEab_2Zog8/CleanShot-2023-05-02-at-22.59.482x.png\"></a></div>",
        "id": 355298607,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683079227
    },
    {
        "content": "<p>I think <code>|&gt;</code> may not work correctly, but something like this should definitely type check:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">batch1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">batch</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Http</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"w\"> </span><span class=\"s\">\"/users\"</span><span class=\"p\">)</span>\n<span class=\"nv\">batch2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">batch</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Http</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"w\"> </span><span class=\"s\">\"/posts\"</span><span class=\"p\">)</span>\n\n<span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">succeed</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"err\">\\</span><span class=\"nx\">users</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">posts</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nx\">users</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">posts</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">batch1</span>\n<span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">batch2</span>\n</code></pre></div>",
        "id": 355298669,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683079262
    },
    {
        "content": "<p>Yeah, somehow we need to force application. Not sure if we have a way to do that in roc. Interesting issue.</p>",
        "id": 355298713,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683079296
    },
    {
        "content": "<p>Right. We could desugar to:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"p\">(</span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">batch</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Http</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"s\">\"/posts\"</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">batch</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Http</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"s\">\"/users\"</span><span class=\"p\">))</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">succeed</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"n\">users</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">posts</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">users</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">posts</span><span class=\"w\"> </span><span class=\"p\">}))</span>\n<span class=\"w\">    </span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 355298889,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683079405
    },
    {
        "content": "<p>I think this may be a bug in <code>|&gt;</code>, but I could see an argument for either. Personally, I think the parens should cause execution even in a pipeline cause that is what happens when desugared like above.</p>",
        "id": 355298956,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683079451
    },
    {
        "content": "<p>Cause the <code>|&gt;</code> should desugar to what you wrote above.</p>",
        "id": 355298973,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683079467
    },
    {
        "content": "<p>Yeah, interesting. I guess it could do that, I'm not sure if I'd expect it to, the way I would in Elm with partial application.</p>",
        "id": 355299510,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683079850
    },
    {
        "content": "<p>Yeah, I'm not sure either, but then it leaves an open question, how do I apply a manually curried function in a pipeline? Feels weird to say it is impossible</p>",
        "id": 355299886,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683080121
    },
    {
        "content": "<p>I mean I guess you could wrap it <code>|&gt; \\x -&gt; (manuallyCurried someParam) x</code></p>",
        "id": 355299919,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683080153
    },
    {
        "content": "<p>I still have like 10 TODOs but this thing is working! <br>\n<a href=\"/user_uploads/22008/SD2fPoFFs4_Op-vGS5hipGQ_/CleanShot-2023-05-03-at-21.48.502x.png\">CleanShot-2023-05-03-at-21.48.502x.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/SD2fPoFFs4_Op-vGS5hipGQ_/CleanShot-2023-05-03-at-21.48.502x.png\" title=\"CleanShot-2023-05-03-at-21.48.502x.png\"><img src=\"/user_uploads/22008/SD2fPoFFs4_Op-vGS5hipGQ_/CleanShot-2023-05-03-at-21.48.502x.png\"></a></div>",
        "id": 355632326,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683161386
    },
    {
        "content": "<p>Also formatting:<br>\n<a href=\"/user_uploads/22008/mYD18As6t1k8NFThnQS9hWca/CleanShot-2023-05-03-at-21.52.33.gif\">CleanShot-2023-05-03-at-21.52.33.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/mYD18As6t1k8NFThnQS9hWca/CleanShot-2023-05-03-at-21.52.33.gif\" title=\"CleanShot-2023-05-03-at-21.52.33.gif\"><img src=\"/user_uploads/22008/mYD18As6t1k8NFThnQS9hWca/CleanShot-2023-05-03-at-21.52.33.gif\"></a></div>",
        "id": 355632692,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683161586
    },
    {
        "content": "<p>wowwwwwww, this is amazing!</p>",
        "id": 355632712,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683161597
    },
    {
        "content": "<p>Oh wow...fast</p>",
        "id": 355635953,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683163571
    },
    {
        "content": "<p>would it be too crazy if the formatter transformed the non-sugared versions into this syntax for consistency? it would also prevent the errors this syntax is trying to help with <span aria-label=\"nerd\" class=\"emoji emoji-1f913\" role=\"img\" title=\"nerd\">:nerd:</span></p>",
        "id": 355646670,
        "sender_full_name": "Georges Boris",
        "timestamp": 1683170419
    },
    {
        "content": "<p>Hm, interesting. I think it'd be hard to detect in a way that wouldn't trigger for other constructs that might look the same (AST wise) but are not applicatives at all.</p>",
        "id": 355771580,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683206293
    },
    {
        "content": "<p>Also, IMHO that'd just be too surprising</p>",
        "id": 355772108,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683206406
    },
    {
        "content": "<p>To me, that'd be similar to having the formatter rewrite <code>a (b c))</code> to <code>c |&gt; b |&gt; a</code>. I wouldn't want it to do that.</p>",
        "id": 355773446,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683206708
    },
    {
        "content": "<p>I’m pretty busy after work this week, so I’m unlikely to continue coding this until next week. However, I’d like to determine all the cases where we want to allow record builders in.</p>\n<p>This is what I have so far:</p>\n<h2>Allowed</h2>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"c1\"># 1. Applied to a function identifier</span>\n<span class=\"nx\">succeed</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nv\">a</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nx\">b</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">apply</span><span class=\"w\"> </span><span class=\"nx\">getB</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nx\">c</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">apply</span><span class=\"w\"> </span><span class=\"nx\">getC</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nx\">d</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># 2. Applied to tag</span>\n<span class=\"nx\">Succeed</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">apply</span><span class=\"w\"> </span><span class=\"nx\">getA</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nx\">b</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">apply</span><span class=\"w\"> </span><span class=\"nx\">getB</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># 3. Applied to opaque wrapper</span>\n<span class=\"nx\">@Opaque</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">apply</span><span class=\"w\"> </span><span class=\"nx\">getA</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nx\">b</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">apply</span><span class=\"w\"> </span><span class=\"nx\">getB</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># 4. Piped</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">apply</span><span class=\"w\"> </span><span class=\"nx\">getA</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nx\">b</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">apply</span><span class=\"w\"> </span><span class=\"nx\">getB</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n<span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">succeed</span>\n\n<span class=\"c1\"># 5. Applied next to other arguments</span>\n<span class=\"nx\">succeed</span><span class=\"w\"> </span><span class=\"mi\">456</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">apply</span><span class=\"w\"> </span><span class=\"nx\">getA</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nx\">b</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">apply</span><span class=\"w\"> </span><span class=\"nx\">getB</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># 6. Applied to an expression that returns a function</span>\n<span class=\"p\">(</span><span class=\"nx\">getSucceed</span><span class=\"w\"> </span><span class=\"nx\">somehow</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">apply</span><span class=\"w\"> </span><span class=\"nx\">getA</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nx\">b</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">apply</span><span class=\"w\"> </span><span class=\"nx\">getB</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h2>Maybe allowed?</h2>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"c1\"># 7. Record update</span>\n<span class=\"nx\">succeed</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nx\">recordToUpdate</span><span class=\"w\"> </span><span class=\"o\">&amp;</span>\n<span class=\"w\">        </span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">apply</span><span class=\"w\"> </span><span class=\"nx\">getA</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nx\">b</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">apply</span><span class=\"w\"> </span><span class=\"nx\">getB</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">c</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nx\">d</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h2>Compile error</h2>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"c1\"># 8. Record builder in a def</span>\n<span class=\"nv\">builder</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">apply</span><span class=\"w\"> </span><span class=\"nx\">getA</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nx\">b</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">apply</span><span class=\"w\"> </span><span class=\"nx\">getB</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"nx\">succeed</span><span class=\"w\"> </span><span class=\"nx\">builder</span>\n\n<span class=\"c1\"># 9. Mulitple record builders applied to the same function</span>\n<span class=\"nx\">succeed</span>\n<span class=\"w\">    </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">apply</span><span class=\"w\"> </span><span class=\"nx\">getA</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nx\">b</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">apply</span><span class=\"w\"> </span><span class=\"nx\">getB</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nx\">z</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">apply</span><span class=\"w\"> </span><span class=\"nx\">getZ</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>Please let me know what you think. Let’s use the numbers to talk about each case.</p>",
        "id": 356068840,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683295337
    },
    {
        "content": "<p>My gut feeling is 1,2,3 and nothing else. It should only apply to functions directly.</p>\n<p>4 is not direct.<br>\n5... I am really not sure would need to think about use cases<br>\n6 Probably not. We already pointed out that <code>(func arg)</code> does not necessarily apply a function in roc. I think it just also would stick out weirdly and be uncommon.<br>\n7 Shouldn't be supported<br>\n8 Shouldn't be supported<br>\n9 Shouldn't be supported</p>",
        "id": 356070560,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683295619
    },
    {
        "content": "<p>very cool! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> </p>\n<p>I hadn't even thought about making this work for all the things that would be valid in front of a normal record literal (e.g. 2, 3, 4, 5) but I like that if someone tries to do that, it can Just Work the same way as any other expression would <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 356098029,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683300966
    },
    {
        "content": "<p>I think we definitely should not support record updates (7) at least at first; if there's demand for it in practice, we can have a separate discussion about it and decide later whether to add it</p>",
        "id": 356098140,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683300992
    },
    {
        "content": "<p>also there have been discussions in the past about potential changes to record update syntax, so committing to it would potentially complicate those discussions unnecessarily</p>",
        "id": 356098316,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683301035
    },
    {
        "content": "<p>I like 8 being a compiler error; I could see an argument for it returning a partially-applied function, but I suspect that would be more surprising/confusing than useful.</p>",
        "id": 356098696,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683301111
    },
    {
        "content": "<p>I'm not even sure if there's a design where 9 could work, so <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> to compile error there too <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 356098777,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683301128
    },
    {
        "content": "<p>I think if 8 doesn't work, 4 shouldn't work. They are the same code, but one is explicit with the name and the other implicit</p>",
        "id": 356103206,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683302132
    },
    {
        "content": "<p>hm, my main concern with 8 is that you can pass <code>builder</code> around, put it into the repl (what would its type be?), etc.</p>",
        "id": 356104015,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683302346
    },
    {
        "content": "<p>and those don't really make sense unless you define it to be a partial application or something</p>",
        "id": 356104072,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683302361
    },
    {
        "content": "<p>hm, actually maybe that idea is worth exploring <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 356104426,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683302428
    },
    {
        "content": "<p>eh nm, that doesn't make sense to me</p>",
        "id": 356104748,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683302499
    },
    {
        "content": "<p>I'm also ok with 4 being disallowed for now, and then we can revisit later</p>",
        "id": 356104963,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683302541
    },
    {
        "content": "<p>Also, should <code>(someFunc someArg)</code> apply a function in Roc? Currently that isn't consistent due to pipelining which ignores parens.</p>",
        "id": 356110205,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683303800
    },
    {
        "content": "<p>Cause that is what makes me unsure about 6</p>",
        "id": 356110256,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683303818
    },
    {
        "content": "<p>hm, what's an example of pipelining ignoring parens in that context?</p>",
        "id": 356110396,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683303844
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">x</span>\n<span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">someFunc</span><span class=\"w\"> </span><span class=\"nx\">y</span>\n\n<span class=\"c1\"># becomes</span>\n<span class=\"nx\">someFunc</span><span class=\"w\"> </span><span class=\"nx\">x</span><span class=\"w\"> </span><span class=\"nx\">y</span>\n\n<span class=\"c1\"># and this</span>\n<span class=\"nx\">x</span>\n<span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">someFunc</span><span class=\"w\"> </span><span class=\"nx\">y</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># becomes</span>\n<span class=\"p\">(</span><span class=\"nx\">someFunc</span><span class=\"w\"> </span><span class=\"nx\">x</span><span class=\"w\"> </span><span class=\"nx\">y</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># So you have to write</span>\n<span class=\"nx\">x</span>\n<span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">n</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">someFunc</span><span class=\"w\"> </span><span class=\"nx\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nx\">n</span>\n\n<span class=\"c1\"># to get something that simplifies to</span>\n<span class=\"p\">(</span><span class=\"nx\">someFunc</span><span class=\"w\"> </span><span class=\"nx\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nx\">x</span>\n</code></pre></div>",
        "id": 356111264,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683304070
    },
    {
        "content": "<p>oh interesting! I actually think <code>x |&gt; (someFunc y)</code> should be a type mismatch</p>",
        "id": 356111901,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683304206
    },
    {
        "content": "<p>(I never really thought about it before)</p>",
        "id": 356111938,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683304213
    },
    {
        "content": "<p>but if I write <code>(foo bar)</code> that should just call <code>foo</code> applying <code>bar</code> regardless of what else is going on around it</p>",
        "id": 356112018,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683304234
    },
    {
        "content": "<p>expressions in parens should be self-contained</p>",
        "id": 356112037,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683304240
    },
    {
        "content": "<p>so I think the only way <code>x |&gt; (someFunc y)</code> would work is if I'd defined <code>someFunc = \\arg1 -&gt; \\arg2 -&gt;</code></p>",
        "id": 356112210,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683304281
    },
    {
        "content": "<p>that is, I'd manually curried it</p>",
        "id": 356112238,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683304286
    },
    {
        "content": "<p>Yeah, I think that's what <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> is talking about</p>",
        "id": 356112305,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683304304
    },
    {
        "content": "<p>See: <a href=\"#narrow/stream/316715-contributing/topic/Record.20Builder.20Syntax/near/355297908\">https://roc.zulipchat.com/#narrow/stream/316715-contributing/topic/Record.20Builder.20Syntax/near/355297908</a></p>",
        "id": 356112360,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683304321
    },
    {
        "content": "<p>We're talking about different things here, though. <a href=\"https://github.com/roc-lang/roc/issues/6\">#6</a> can work fine because <code>(manullyCurriedFn 31) 11</code> already works.</p>",
        "id": 356112699,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683304408
    },
    {
        "content": "<p>The downside of not supporting <code>x |&gt; (someFunc y)</code> is that someone cannot just use the <code>apply</code> functions that they'd use in a Record Builder to construct an applicative manually</p>",
        "id": 356113662,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683304659
    },
    {
        "content": "<p>hm, not supporting it in what sense?</p>",
        "id": 356113850,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683304699
    },
    {
        "content": "<p>what I was suggesting earlier is that <code>x |&gt; (twoArgFunction y)</code> would not work</p>",
        "id": 356113947,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683304728
    },
    {
        "content": "<p>because <code>(twoArgFunction y)</code> would call the 2-arg function immediately, and that would be a type mismatch because it's only getting one argument</p>",
        "id": 356114040,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683304752
    },
    {
        "content": "<p>whereas <code>x |&gt; twoArgFunction y</code> would of course continue to work</p>",
        "id": 356114082,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683304763
    },
    {
        "content": "<p>Right. However, the desugared examples in your proposal make it look like you could either use Record Builder or pipe these curried functions. That's not currently possible. It'd be possible the way Elm does pipelines, but not in Roc.</p>",
        "id": 356114574,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683304882
    },
    {
        "content": "<p>In my current implementation, I'm not using pipes. I'm just desugaring to <code>Expr::Apply</code> like <a href=\"#narrow/stream/316715-contributing/topic/Record.20Builder.20Syntax/near/355298889\">this</a></p>",
        "id": 356115146,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683305017
    },
    {
        "content": "<p>ah, right - because the original proposal used <code>collect</code> rather than <code>succeed</code></p>",
        "id": 356116429,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683305302
    },
    {
        "content": "<p>I might be missing something, but I don't think <code>Task.collect</code> would've changed that. This is about <code>Task.batch</code> being curried.</p>",
        "id": 356116711,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683305380
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"489294\">Agus Zubiaga</span> <a href=\"#narrow/stream/316715-contributing/topic/Record.20Builder.20Syntax/near/355297908\">said</a>:</p>\n<blockquote>\n<p>I think we overlooked something:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">succeed</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">users</span><span class=\"w\"> </span><span class=\"ow\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">Http</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"s\">\"/users\"</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">batch</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">posts</span><span class=\"w\"> </span><span class=\"ow\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">Http</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"s\">\"/posts\"</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">batch</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>could not desugar to:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">succeed</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"n\">users</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">posts</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">users</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">posts</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">batch</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Http</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"s\">\"/users\"</span><span class=\"p\">)</span>\n<span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">batch</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Http</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"s\">\"/posts\"</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>because we would be applying <code>Task.batch</code> with 2 arguments: <code>Task.succeed (\\users -&gt; \\posts -&gt; { users, posts })</code> and <code>(Http.get \"/users\")</code></p>\n</blockquote>",
        "id": 356117076,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683305481
    },
    {
        "content": "<p>In the <code>Task.collect</code> case, <code>Task.batch</code> would still be applied with the same 2 arguments.</p>",
        "id": 356117311,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683305539
    },
    {
        "content": "<p>ohh gotcha</p>",
        "id": 356118077,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683305756
    },
    {
        "content": "<p>yep, I missed that!</p>",
        "id": 356118099,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683305762
    },
    {
        "content": "<p>That's why <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span>  suggested that <code>x |&gt; (manuallyCurried y)</code> could desugar to <code>(manuallyCurried y) x</code> instead of <code>(manuallyCurried x y)</code> which is a \"too many args\" error.</p>",
        "id": 356118284,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683305797
    },
    {
        "content": "<p>That would allow you to write:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">succeed</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"err\">\\</span><span class=\"nx\">users</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">posts</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nx\">users</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">posts</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">batch</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Http</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"w\"> </span><span class=\"s\">\"/users\"</span><span class=\"p\">))</span>\n<span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">batch</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Http</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"w\"> </span><span class=\"s\">\"/posts\"</span><span class=\"p\">))</span>\n</code></pre></div>",
        "id": 356118439,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683305841
    },
    {
        "content": "<p>oh, I think we're saying the same thing then?</p>",
        "id": 356118967,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683305970
    },
    {
        "content": "<p>so if I have a function like <code>curriedDivide = \\numerator -&gt; \\denominator -&gt; numerator / denominator</code></p>",
        "id": 356119128,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683306004
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/316715-contributing/topic/Record.20Builder.20Syntax/near/356112210\">said</a>:</p>\n<blockquote>\n<p>so I think the only way <code>x |&gt; (someFunc y)</code> would work is if I'd defined <code>someFunc = \\arg1 -&gt; \\arg2 -&gt;</code></p>\n</blockquote>\n<p>If you mean this, then yes.</p>",
        "id": 356119164,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683306008
    },
    {
        "content": "<p>yeah</p>",
        "id": 356119189,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683306014
    },
    {
        "content": "<p>I can write e.g. <code>answer = (curriedDivide 6) 2</code> and end up with <code>answer = 3</code></p>",
        "id": 356119257,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683306035
    },
    {
        "content": "<p>Cool, them <code>|&gt;</code> currently has a bug cause it doesn't work that way.</p>",
        "id": 356119259,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683306035
    },
    {
        "content": "<p>yeah I think it has a bug <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 356119289,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683306043
    },
    {
        "content": "<p>Ok, great. I think that makes sense intuitively. When I write <code>x |&gt; (someFunc y)</code>, <code>|&gt;</code> should not be concerned with was is inside the parens.</p>",
        "id": 356119653,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683306126
    },
    {
        "content": "<p>Fixing that would allow libraries to expose a single <code>Task.batch</code>-like function that could be used with Record Builders or that can be piped to manually construct something else.</p>",
        "id": 356120262,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683306254
    },
    {
        "content": "<p>yeah I think it's fine to have that function be curried manually, because it unavoidably has a highly unusual type signature no matter what</p>",
        "id": 356120747,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683306392
    },
    {
        "content": "<p>it's not like the first one of these is normal-looking <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">batch</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">err</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">err</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"nv\">err</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">batch</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">err</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">err</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"nv\">err</span>\n</code></pre></div>",
        "id": 356120899,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683306447
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> given how uncommon this is, I wonder if we should format it as:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">batch</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">err</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">err</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"nv\">err</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 356121124,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683306512
    },
    {
        "content": "<p>just to make it extra clear that it's a 1-arg function which returns a function</p>",
        "id": 356121180,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683306531
    },
    {
        "content": "<p>in a curried language you'd know that because you encounter it very early on in your learning, but in Roc this would be so rare it might be confusing to beginners what two <code>-&gt;</code>s in the same type signature means</p>",
        "id": 356121275,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683306560
    },
    {
        "content": "<p>That might already be the case. IIRC the current parser requires the parens actually.</p>",
        "id": 356121879,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683306711
    },
    {
        "content": "<p>Yup:</p>\n<div class=\"codehilite\"><pre><span></span><code>── NOT END OF FILE ───────────────────────────────────────── src/Pg/Result.roc ─\n\nI expected to reach the end of the file, but got stuck here:\n\n135│  apply : Decode a err -&gt; Decode (a -&gt; b) err -&gt; Decode b err\n                                                  ^\n</code></pre></div>",
        "id": 356122226,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683306795
    },
    {
        "content": "<p>The error could probably be improved though</p>",
        "id": 356122276,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683306810
    },
    {
        "content": "<p>nice - what does the formatter do?</p>",
        "id": 356122290,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683306814
    },
    {
        "content": "<p>(hopefully it doesn't remove the parens!)</p>",
        "id": 356122330,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683306824
    },
    {
        "content": "<p>Crashes without the parens, and doesn't remove them when they are present</p>",
        "id": 356122469,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683306858
    },
    {
        "content": "<p>cool!</p>",
        "id": 356122587,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683306892
    },
    {
        "content": "<p>Made an issue: <a href=\"https://github.com/roc-lang/roc/issues/5379\">https://github.com/roc-lang/roc/issues/5379</a></p>",
        "id": 356123241,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683307080
    },
    {
        "content": "<p>What I remember from Haskell is that the function arrow is right-associative because of automatic currying. So it makes sense to me that the parentheses are necessary in Roc since it doesn’t automatically curry</p>",
        "id": 356131265,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1683309244
    },
    {
        "content": "<p>I'm still thinking about ways to improve errors and such, but it's now in a pretty good state and I opened a draft PR: <a href=\"https://github.com/roc-lang/roc/pull/5389\">https://github.com/roc-lang/roc/pull/5389</a></p>",
        "id": 356841717,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683593787
    },
    {
        "content": "<p>I'm pretty new to Rust and the compiler source, so please let me know if I did anything horrible <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 356842044,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683593947
    },
    {
        "content": "<p>I'll explore adding a new <a href=\"https://github.com/roc-lang/roc/blob/7d67ec3f148b9b8545dd5aabfbc08972fed1ac3d/crates/compiler/module/src/called_via.rs#L78\"><code>CalledVia</code></a> tomorrow. I think it could help me give better hints for type-errors.</p>",
        "id": 356843870,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683594814
    },
    {
        "content": "<p>Without adding any special code for Record Builders, mismatched record types produce pretty good errors already!<br>\n<a href=\"/user_uploads/22008/mcCbTvZvlCng46ZIzokTwsgU/CleanShot-2023-05-09-at-22.52.372x.png\">CleanShot-2023-05-09-at-22.52.372x.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/mcCbTvZvlCng46ZIzokTwsgU/CleanShot-2023-05-09-at-22.52.372x.png\" title=\"CleanShot-2023-05-09-at-22.52.372x.png\"><img src=\"/user_uploads/22008/mcCbTvZvlCng46ZIzokTwsgU/CleanShot-2023-05-09-at-22.52.372x.png\"></a></div>",
        "id": 357136207,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683683609
    },
    {
        "content": "<p>These are actually coming from the generated closure, but I don't think they need any special handling</p>",
        "id": 357136374,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683683688
    },
    {
        "content": "<p>The following is one we could improve I think:<br>\n<a href=\"/user_uploads/22008/Gk0kKyc6fCqkLxlPri8Zf6GQ/CleanShot-2023-05-09-at-23.03.102x.png\">CleanShot-2023-05-09-at-23.03.102x.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/Gk0kKyc6fCqkLxlPri8Zf6GQ/CleanShot-2023-05-09-at-23.03.102x.png\" title=\"CleanShot-2023-05-09-at-23.03.102x.png\"><img src=\"/user_uploads/22008/Gk0kKyc6fCqkLxlPri8Zf6GQ/CleanShot-2023-05-09-at-23.03.102x.png\"></a></div>",
        "id": 357136559,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683683800
    },
    {
        "content": "<p>In that case, I forgot the <code>|&gt; apply</code> at the end</p>",
        "id": 357136595,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683683825
    },
    {
        "content": "<p>Also, this:<br>\n<a href=\"/user_uploads/22008/oGSOHHD_OpBK58BsLfdU7z2K/CleanShot-2023-05-09-at-22.58.232x.png\">CleanShot-2023-05-09-at-22.58.232x.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/oGSOHHD_OpBK58BsLfdU7z2K/CleanShot-2023-05-09-at-22.58.232x.png\" title=\"CleanShot-2023-05-09-at-22.58.232x.png\"><img src=\"/user_uploads/22008/oGSOHHD_OpBK58BsLfdU7z2K/CleanShot-2023-05-09-at-22.58.232x.png\"></a></div>",
        "id": 357136735,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683683932
    },
    {
        "content": "<p>It'd be great to suggest replacing the <code>&lt;-</code> with a <code>:</code> in that case.</p>",
        "id": 357136753,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683683946
    },
    {
        "content": "<p>I'm going to start with that last one</p>",
        "id": 357137011,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683684101
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/PHJgQOkPk6-uYpodDlWV7ntg/CleanShot-2023-05-09-at-23.18.332x.png\">CleanShot-2023-05-09-at-23.18.332x.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/PHJgQOkPk6-uYpodDlWV7ntg/CleanShot-2023-05-09-at-23.18.332x.png\" title=\"CleanShot-2023-05-09-at-23.18.332x.png\"><img src=\"/user_uploads/22008/PHJgQOkPk6-uYpodDlWV7ntg/CleanShot-2023-05-09-at-23.18.332x.png\"></a></div>",
        "id": 357138956,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683685124
    },
    {
        "content": "<p>Wording might have to improve, but I think that's helpful</p>",
        "id": 357139304,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683685303
    },
    {
        "content": "<p>This is very cool <span aria-label=\"sunglasses\" class=\"emoji emoji-1f60e\" role=\"img\" title=\"sunglasses\">:sunglasses:</span></p>",
        "id": 357142814,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1683686875
    },
    {
        "content": "<p>In the following code the <code>title</code> field is missing a call to <code>apply</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"w\">    </span><span class=\"nv\">succeed</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nv\">id</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">Pg</span><span class=\"nf\">.</span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">i32</span><span class=\"w\"> </span><span class=\"s\">\"film_id\"</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">apply</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">title</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">Pg</span><span class=\"nf\">.</span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">i32</span><span class=\"w\"> </span><span class=\"s\">\"title\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 357148291,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683689836
    },
    {
        "content": "<p>This is how the error looks without any special logic for record builders:</p>\n<p><a href=\"/user_uploads/22008/y6jldlhaM2fdnZSAKI0KHHe0/CleanShot-2023-05-09-at-23.03.102x.png\">CleanShot-2023-05-09-at-23.03.102x.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/y6jldlhaM2fdnZSAKI0KHHe0/CleanShot-2023-05-09-at-23.03.102x.png\" title=\"CleanShot-2023-05-09-at-23.03.102x.png\"><img src=\"/user_uploads/22008/y6jldlhaM2fdnZSAKI0KHHe0/CleanShot-2023-05-09-at-23.03.102x.png\"></a></div>",
        "id": 357148336,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683689879
    },
    {
        "content": "<p>and this is what I have so far:<br>\n<a href=\"/user_uploads/22008/rlwT1qbH2qWs8om1kmlajPeM/CleanShot-2023-05-10-at-00.39.062x.png\">CleanShot-2023-05-10-at-00.39.062x.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/rlwT1qbH2qWs8om1kmlajPeM/CleanShot-2023-05-10-at-00.39.062x.png\" title=\"CleanShot-2023-05-10-at-00.39.062x.png\"><img src=\"/user_uploads/22008/rlwT1qbH2qWs8om1kmlajPeM/CleanShot-2023-05-10-at-00.39.062x.png\"></a></div>",
        "id": 357148455,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683689952
    },
    {
        "content": "<p>which I think it's an improvement, but I'm not convinced</p>",
        "id": 357148484,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683689971
    },
    {
        "content": "<p>It's tricky because we don't know which function they might need to call</p>",
        "id": 357148519,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683690001
    },
    {
        "content": "<p>Also the wording seems awkward</p>",
        "id": 357148704,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683690070
    },
    {
        "content": "<p>I'm gonna go sleep on it!</p>",
        "id": 357148784,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1683690116
    },
    {
        "content": "<p>Yeah, definitely a weird error message both ways, but I don't have an immediate idea how to make it better.</p>",
        "id": 357150079,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683690753
    },
    {
        "content": "<p>This week has been super busy for me, but I finally got some time today to rewrite the parser and improve the errors. I think I'm ready to submit this for review!</p>",
        "id": 358180672,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1684023455
    },
    {
        "content": "<p><a href=\"#narrow/stream/316715-contributing/topic/Pull.20Request.20for.20Review/near/358182443\">https://roc.zulipchat.com/#narrow/stream/316715-contributing/topic/Pull.20Request.20for.20Review/near/358182443</a></p>",
        "id": 358183176,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1684024633
    },
    {
        "content": "<p>I've been looking at <a href=\"https://github.com/roc-lang/roc/pull/6995\">https://github.com/roc-lang/roc/pull/6995</a> which adds a tutorial section on the new Record Builders, thank you <span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> </p>\n<p>I'm thinking as this is in Advanced Concept section and it should provide only a minimal syntax sugar. Enough that someone who already familiar with the advanced concepts but not necessarily roc syntax would be ok with. We can generally wave our hands about what it is but no try to explain it; instead we can point the reader to a more detailed guide which walks it through from start to finish and builds up to the full feature.</p>\n<p>I'm finding I have to really think about things like what it is, how it works, why I would use it, etc. I think a well designed API using record builders will be intuitive for people to use, at least the Sqlite one is very easy to work with as long as I can see a worked example. So I think a very surface level knowledge, essentially \"what is this syntax called, this is where I can find more information, and don't sweat the details it's an advanced concept\", is ok for a tutorial.</p>",
        "id": 462274993,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1723617984
    },
    {
        "content": "<p>I'm interested to know what others think. It's not easy to write good content and I appreciate the effort that Sam has put into the PR.</p>",
        "id": 462275110,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1723618057
    },
    {
        "content": "<p>To clarify -- I'm wanting to clarify the intent for the tutorial section.</p>",
        "id": 462275321,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1723618149
    },
    {
        "content": "<p>So I guess I'm thinking; I should have a go at writing a guide for Record Builders to explore this further.</p>",
        "id": 462275863,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1723618374
    }
]