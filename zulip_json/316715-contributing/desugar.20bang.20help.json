[
    {
        "content": "<p>I've been working on the desguaring for <code>!</code> in the <a href=\"https://github.com/roc-lang/roc/tree/desugar-bang\">desugar-bang branch</a>. </p>\n<p>I'm currently having some trouble working with the <code>Defs</code> in <code>crates/compiler/parse/src/ast.rs</code>. Specifically to implement the algorithm the way I want, I need to be able to remove a definition from the <code>Defs</code>, from the start or from within the middle of the vec. Hence I've added the <code>remove_value_def</code> helper. To get the index I wrote the <code>search_suffixed_defs</code> which finds the first value def that I am interested in.</p>\n<p>But I'm really unsure about how to work with the <code>pub tags: std::vec::Vec&lt;EitherIndex&lt;TypeDef&lt;'a&gt;, ValueDef&lt;'a&gt;&gt;&gt;</code> part. It probably doesn't help I'm also just fumbling my way through rust at the same time so I am not sure where I'm going wrong.  </p>\n<p>I started off by just working with the <code>value_defs</code> vec but then realised that I probably need to also work with the <code>type_defs</code> and the other parts of the <code>Defs</code> struct if I am removing things. I know there is an issue here because I get \"panicked at 'index out of bounds: the len is 1 but the index is 1'\" errors.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>It may not be helpful, but here is my plan to desugar Defs worked out manually</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"c1\">// FROM THIS</span>\n<span class=\"c1\">// ```</span>\n<span class=\"c1\">// main =</span>\n<span class=\"c1\">//    a = line! \"FIRST ARGS\"</span>\n<span class=\"c1\">//    mid = \"MID THING\"</span>\n<span class=\"c1\">//    b = write! \"SECOND ARGS\"</span>\n<span class=\"c1\">//    c = read! \"THIRD ARGS\"</span>\n<span class=\"c1\">//</span>\n<span class=\"c1\">//    ok {}</span>\n<span class=\"c1\">// ```</span>\n<span class=\"c1\">// TO THIS</span>\n<span class=\"c1\">// ```</span>\n<span class=\"c1\">// main =</span>\n<span class=\"c1\">//     await (line \"FIRST ARGS\") \\a -&gt;</span>\n<span class=\"c1\">//         mid = \"MID THING\"</span>\n<span class=\"c1\">//         await (write \"SECOND ARGS\") \\b -&gt;</span>\n<span class=\"c1\">//             await (read \"THIRD ARGS\") \\c -&gt;</span>\n<span class=\"c1\">//                 ok {}</span>\n<span class=\"c1\">// ```</span>\n\n<span class=\"c1\">// start</span>\n<span class=\"nx\">Defs</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"p\">[</span>\n<span class=\"w\">        </span><span class=\"c1\">// note that we have a Suffixed first</span>\n<span class=\"w\">        </span><span class=\"nx\">Body</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Apply</span><span class=\"p\">(</span><span class=\"nx\">Suffixed</span><span class=\"p\">(</span><span class=\"s2\">\"line\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"s2\">\"FIRST ARGS\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">called_via_space</span><span class=\"p\">)),</span>\n<span class=\"w\">        </span><span class=\"nx\">Body</span><span class=\"p\">(</span><span class=\"nx\">mid</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"MID THING\"</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"nx\">Body</span><span class=\"p\">(</span><span class=\"nx\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Apply</span><span class=\"p\">(</span><span class=\"nx\">Suffixed</span><span class=\"p\">(</span><span class=\"s2\">\"write\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"s2\">\"SECOND ARGS\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">called_via_space</span><span class=\"p\">)),</span>\n<span class=\"w\">        </span><span class=\"nx\">Body</span><span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Apply</span><span class=\"p\">(</span><span class=\"nx\">Suffixed</span><span class=\"p\">(</span><span class=\"s2\">\"read\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"s2\">\"THIRD ARGS\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">called_via_space</span><span class=\"p\">)),</span>\n<span class=\"w\">    </span><span class=\"p\">],</span>\n<span class=\"w\">    </span><span class=\"s2\">\"ok {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// this is actually another Apply ... simplified here</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\">// first - pop the first Suffixed and wrap Defs node with an Apply and Closure</span>\n<span class=\"nx\">Apply</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"s2\">\"await\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">[</span>\n<span class=\"w\">        </span><span class=\"nx\">Apply</span><span class=\"p\">(</span><span class=\"s2\">\"line\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"FIRST ARGS\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">called_via_space</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"nx\">Closure</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"nx\">Identifier</span><span class=\"w\"> </span><span class=\"s2\">\"a\"</span><span class=\"p\">],</span>\n<span class=\"w\">            </span><span class=\"nx\">Defs</span><span class=\"p\">(</span>\n<span class=\"w\">                </span><span class=\"p\">[</span>\n<span class=\"w\">                    </span><span class=\"nx\">Body</span><span class=\"p\">(</span><span class=\"nx\">mid</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"MID THING\"</span><span class=\"p\">),</span>\n<span class=\"w\">                    </span><span class=\"c1\">// note that the next Suffixed is now in the middle of the Defs</span>\n<span class=\"w\">                    </span><span class=\"nx\">Body</span><span class=\"p\">(</span><span class=\"nx\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Apply</span><span class=\"p\">(</span><span class=\"nx\">Suffixed</span><span class=\"p\">(</span><span class=\"s2\">\"write\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"s2\">\"SECOND ARGS\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">called_via_space</span><span class=\"p\">)),</span>\n<span class=\"w\">                    </span><span class=\"nx\">Body</span><span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Apply</span><span class=\"p\">(</span><span class=\"nx\">Suffixed</span><span class=\"p\">(</span><span class=\"s2\">\"read\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"s2\">\"THIRD ARGS\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">called_via_space</span><span class=\"p\">)),</span>\n<span class=\"w\">                </span><span class=\"p\">],</span>\n<span class=\"w\">                </span><span class=\"s2\">\"ok {}\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">],</span>\n<span class=\"w\">    </span><span class=\"nx\">called_via_space</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\">// second - wrap loc_ret \"ok {}\" in the Defs node with Apply and Closure, moving remaining defs into new Defs node</span>\n<span class=\"nx\">Apply</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"s2\">\"await\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">[</span>\n<span class=\"w\">        </span><span class=\"nx\">Apply</span><span class=\"p\">(</span><span class=\"s2\">\"line\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"FIRST ARGS\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">called_via_space</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"nx\">Closure</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"nx\">Identifier</span><span class=\"w\"> </span><span class=\"s2\">\"a\"</span><span class=\"p\">],</span>\n<span class=\"w\">            </span><span class=\"nx\">Defs</span><span class=\"p\">(</span>\n<span class=\"w\">                </span><span class=\"p\">[</span>\n<span class=\"w\">                    </span><span class=\"c1\">// all Defs before Suffixed are left behind</span>\n<span class=\"w\">                    </span><span class=\"nx\">Body</span><span class=\"p\">(</span><span class=\"nx\">mid</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"MID THING\"</span><span class=\"p\">),</span>\n<span class=\"w\">                </span><span class=\"p\">],</span>\n<span class=\"w\">                </span><span class=\"c1\">// here the loc_ret \"ok {}\" was wrapped in an Apply and Closure and new Defs node</span>\n<span class=\"w\">                </span><span class=\"nx\">Apply</span><span class=\"p\">(</span>\n<span class=\"w\">                    </span><span class=\"s2\">\"await\"</span><span class=\"p\">,</span>\n<span class=\"w\">                    </span><span class=\"p\">[</span>\n<span class=\"w\">                        </span><span class=\"nx\">Apply</span><span class=\"p\">(</span><span class=\"s2\">\"write\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"SECOND ARGS\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">called_via_space</span><span class=\"p\">),</span>\n<span class=\"w\">                        </span><span class=\"nx\">Closure</span><span class=\"p\">(</span>\n<span class=\"w\">                            </span><span class=\"p\">[</span><span class=\"nx\">Identifier</span><span class=\"w\"> </span><span class=\"s2\">\"b\"</span><span class=\"p\">],</span>\n<span class=\"w\">                            </span><span class=\"nx\">Defs</span><span class=\"p\">(</span>\n<span class=\"w\">                                </span><span class=\"p\">[</span>\n<span class=\"w\">                                    </span><span class=\"c1\">// all Defs after the Suffixed were brought forward into new Def node</span>\n<span class=\"w\">                                    </span><span class=\"c1\">// note that now there is only a single Suffixed def remaining</span>\n<span class=\"w\">                                    </span><span class=\"nx\">Body</span><span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Apply</span><span class=\"p\">(</span><span class=\"nx\">Suffixed</span><span class=\"p\">(</span><span class=\"s2\">\"read\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"s2\">\"THIRD ARGS\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">called_via_space</span><span class=\"p\">)),</span>\n<span class=\"w\">                                </span><span class=\"p\">],</span>\n<span class=\"w\">                                </span><span class=\"s2\">\"ok {}\"</span>\n<span class=\"w\">                            </span><span class=\"p\">)</span>\n<span class=\"w\">                        </span><span class=\"p\">)</span>\n<span class=\"w\">                    </span><span class=\"p\">]</span>\n<span class=\"w\">                    </span><span class=\"nx\">called_via_space</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"p\">),</span>\n<span class=\"w\">            </span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">],</span>\n<span class=\"w\">    </span><span class=\"nx\">called_via_space</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\">// third - wrap the loc_ret with the Apply and Closure</span>\n<span class=\"nx\">Apply</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"s2\">\"await\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">[</span>\n<span class=\"w\">        </span><span class=\"nx\">Apply</span><span class=\"p\">(</span><span class=\"s2\">\"line\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"FIRST ARGS\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">called_via_space</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"nx\">Closure</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"nx\">Identifier</span><span class=\"w\"> </span><span class=\"s2\">\"a\"</span><span class=\"p\">],</span>\n<span class=\"w\">            </span><span class=\"nx\">Defs</span><span class=\"p\">(</span>\n<span class=\"w\">                </span><span class=\"p\">[</span>\n<span class=\"w\">                    </span><span class=\"nx\">Body</span><span class=\"p\">(</span><span class=\"nx\">mid</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"MID THING\"</span><span class=\"p\">),</span>\n<span class=\"w\">                </span><span class=\"p\">],</span>\n<span class=\"w\">                </span><span class=\"nx\">Apply</span><span class=\"p\">(</span>\n<span class=\"w\">                    </span><span class=\"s2\">\"await\"</span><span class=\"p\">,</span>\n<span class=\"w\">                    </span><span class=\"p\">[</span>\n<span class=\"w\">                        </span><span class=\"nx\">Apply</span><span class=\"p\">(</span><span class=\"s2\">\"write\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"SECOND ARGS\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">called_via_space</span><span class=\"p\">),</span>\n<span class=\"w\">                        </span><span class=\"nx\">Closure</span><span class=\"p\">(</span>\n<span class=\"w\">                            </span><span class=\"p\">[</span><span class=\"nx\">Identifier</span><span class=\"w\"> </span><span class=\"s2\">\"b\"</span><span class=\"p\">],</span>\n<span class=\"w\">                            </span><span class=\"c1\">// The loc_ret was wrapped with an Apply and Closure</span>\n<span class=\"w\">                            </span><span class=\"c1\">// There are no Defs left so we just have the loc_ret node</span>\n<span class=\"w\">                            </span><span class=\"nx\">Apply</span><span class=\"p\">(</span>\n<span class=\"w\">                                </span><span class=\"s2\">\"await\"</span><span class=\"p\">,</span>\n<span class=\"w\">                                </span><span class=\"p\">[</span>\n<span class=\"w\">                                    </span><span class=\"nx\">Apply</span><span class=\"p\">(</span><span class=\"s2\">\"read\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"THIRD ARGS\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">called_via_space</span><span class=\"p\">),</span>\n<span class=\"w\">                                    </span><span class=\"nx\">Closure</span><span class=\"p\">(</span>\n<span class=\"w\">                                        </span><span class=\"p\">[</span><span class=\"nx\">Identifier</span><span class=\"w\"> </span><span class=\"s2\">\"c\"</span><span class=\"p\">],</span>\n<span class=\"w\">                                        </span><span class=\"s2\">\"ok {}\"</span><span class=\"p\">,</span>\n<span class=\"w\">                                    </span><span class=\"p\">),</span>\n<span class=\"w\">                                </span><span class=\"p\">],</span>\n<span class=\"w\">                                </span><span class=\"nx\">called_via_space</span><span class=\"p\">,</span>\n<span class=\"w\">                            </span><span class=\"p\">)</span>\n<span class=\"w\">                        </span><span class=\"p\">)</span>\n<span class=\"w\">                    </span><span class=\"p\">]</span>\n<span class=\"w\">                    </span><span class=\"nx\">called_via_space</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"p\">),</span>\n<span class=\"w\">            </span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">],</span>\n<span class=\"w\">    </span><span class=\"nx\">called_via_space</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n</div></div>",
        "id": 427621670,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1710825198
    },
    {
        "content": "<p>I think I know what the issue with my logic is. Using Vec::remove shifts the remaining values left, so the remaining indexes will now be all off by 1.</p>",
        "id": 427641156,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1710836979
    }
]