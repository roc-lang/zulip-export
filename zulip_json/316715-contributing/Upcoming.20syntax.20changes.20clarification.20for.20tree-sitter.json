[
    {
        "content": "<p>I've had some more time to work on the tree-sitter grammar, but I have a few open questions.</p>\n<ul>\n<li>How sure are we about:<br>\n    -  the custom types syntax?<br>\n    - the static dispatch syntax?<br>\n    - the for loop syntax?   </li>\n<li>Am I missing any changes?<ul>\n<li>I thought there was some changes to list destructuring/pattern matching? </li>\n</ul>\n</li>\n</ul>\n<p>Here is my current todo list btw: </p>\n<ul>\n<li>[x] PNC calling syntax</li>\n<li>[x] Snake case</li>\n<li>[x] |a| lambda syntax</li>\n<li>[x] \"${}\" string interpolation syntax  </li>\n<li>[ ] static dispatch syntax <ul>\n<li>[x] .method() invocation</li>\n<li>[ ] new autoderive syntax</li>\n<li>[ ] remove abilities (probably put this off for a bit)</li>\n</ul>\n</li>\n<li>[ ] custom record/nominal types syntax</li>\n<li>[x] string interpolation within pattern matching</li>\n<li>[x] ... for todo</li>\n<li>[ ] for loop syntax<ul>\n<li>What do i actually need for this?</li>\n</ul>\n</li>\n<li>[x] new ident type for _ suffixed shadowable variables</li>\n<li>[x] new ident type for effecctful variables</li>\n</ul>\n<p>If some of this is still largely in flux, I can finish testing what I've done and get a release out, that at least gets it up to speed with all the current changes.</p>\n<p>Thhoughts and suggestions welcome.</p>",
        "id": 497498900,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1738605091
    },
    {
        "content": "<p>I would not worry about features like SD and for loop that are not currently in Roc, with the big rewrite these will take a while</p>",
        "id": 497504631,
        "sender_full_name": "Anton",
        "timestamp": 1738607007
    },
    {
        "content": "<p>Sure, but while I'm making changes it'd be nice to get ahead on anything that's pretty locked in :)</p>",
        "id": 497504760,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1738607048
    },
    {
        "content": "<p>For the list destructuring changes: <a href=\"https://github.com/roc-lang/roc/issues/7091\">https://github.com/roc-lang/roc/issues/7091</a></p>",
        "id": 497505155,
        "sender_full_name": "Anton",
        "timestamp": 1738607179
    },
    {
        "content": "<blockquote>\n<p>How sure are we about:</p>\n</blockquote>\n<p>I think these all could change somewhat after getting serious usage.</p>",
        "id": 497506353,
        "sender_full_name": "Anton",
        "timestamp": 1738607531
    },
    {
        "content": "<p>Sounds good, I might rough in at least the for loop, and leave the rest for now. They won't be a particularly big job to do later anyway.</p>",
        "id": 497506971,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1738607742
    },
    {
        "content": "<p>Here's the doc for <code>for</code> and <code>while</code>, I'd be surprised if they change once we implement them: <a href=\"https://docs.google.com/document/d/1Ly5Cp_Z7dY8KLQkkDYZlGCldxQj4jLzZ0vIeB-F8lJI/edit?tab=t.0\">https://docs.google.com/document/d/1Ly5Cp_Z7dY8KLQkkDYZlGCldxQj4jLzZ0vIeB-F8lJI/edit?tab=t.0</a></p>",
        "id": 497510432,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738608869
    },
    {
        "content": "<p>Abilities are very likely to be removed IMO, if you care about removing code that won't be used anymore</p>",
        "id": 497510514,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738608910
    },
    {
        "content": "<p>Yup, but I can't drop them just yet. Don't want to break everyone. They can exist happily, until we totally deprecate them.</p>",
        "id": 497510777,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1738608993
    },
    {
        "content": "<p>Custom types will look (almost?) exactly like opaque aliases at the type def site</p>",
        "id": 497510833,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738609013
    },
    {
        "content": "<p>Their use in other types will also be the same</p>",
        "id": 497510893,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738609040
    },
    {
        "content": "<p>In expressions, that's still in flux</p>",
        "id": 497510920,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738609055
    },
    {
        "content": "<p>The new autoderive syntax is also in flux</p>",
        "id": 497510968,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738609074
    },
    {
        "content": "<p>What we've talked about a whole lot and would be unlikely to change IMO is the <code>foo.(local_func)(args)</code> and <code>foo.(only_takes_foo_func)</code> \"method\" syntax</p>",
        "id": 497511139,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738609139
    },
    {
        "content": "<p>Lists and records now have spreads</p>",
        "id": 497511215,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738609170
    },
    {
        "content": "<p>Oh?</p>",
        "id": 497511226,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1738609176
    },
    {
        "content": "<p>Which also applies to record types and types that are written as lists, AKA tag unions</p>",
        "id": 497511288,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738609201
    },
    {
        "content": "<p>Instead of using <code>{ foo : Str }ext</code>, we're doing <code>{ foo : Str, ..ext }</code> (and <code>{ foo : Str, .. }</code> for open records)</p>",
        "id": 497511460,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738609243
    },
    {
        "content": "<p>Let me write a few things down</p>",
        "id": 497511758,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738609337
    },
    {
        "content": "<p>Types:</p>\n<ul>\n<li>Records: <code>{ list of \"name: type\", optionally followed by \"..\" (which is optionally followed by another type for the extension) }</code></li>\n<li>Lists: <code>List Str</code>, still the exact same</li>\n<li>Tag unions: <code>[ list of \"Name payload-type-1 payload-type-2\", optionally followed by \"..\" (which is optionally followed by another type for the extension) ]</code></li>\n</ul>",
        "id": 497512168,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738609477
    },
    {
        "content": "<p>Patterns:</p>\n<ul>\n<li>Records:<ul>\n<li><code>{ x, y: 3 }</code> is a closed record</li>\n<li><code>{ x, y, .. }</code> is an open record</li>\n<li><code>{ x, y, ..{ other, other2 } }</code> is a capture of the rest of the fields in the record besides <code>x</code> and <code>y</code></li>\n</ul>\n</li>\n<li>Lists: <code>[a, b, c]</code> or <code>[a, b, .., d]</code> or <code>[a, b, c, ..d]</code> (not <code>.. as d</code>)</li>\n</ul>",
        "id": 497512569,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738609627
    },
    {
        "content": "<p>Expressions:</p>\n<ul>\n<li>Record literals: <code>{ (field | (field: &lt;expr&gt;) | ..&lt;expr&gt;)* }</code></li>\n<li>List literals: <code>[ (&lt;expr&gt; | ..&lt;expr of type list&gt;)* ]</code></li>\n</ul>",
        "id": 497512882,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738609730
    },
    {
        "content": "<p>Optional types and values are also being removed</p>",
        "id": 497512923,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738609748
    },
    {
        "content": "<p>As well as module params</p>",
        "id": 497512937,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738609752
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span>  I don't understand this at all:<br>\n<code>{ x, y, ..{ other, other2 } }</code><br>\nwhy is there a nested record here?</p>",
        "id": 498300408,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1738922058
    },
    {
        "content": "<p>This makes sense to me: <code>{ x, y, .. other }</code></p>",
        "id": 498300499,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1738922091
    },
    {
        "content": "<p>I guess we could limit the spread sub pattern to the second one, which I'd agree would be much more sane</p>",
        "id": 498300604,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738922128
    },
    {
        "content": "<p>Would this:<code>{ x, y, ..{ other, other2 } }</code> not be the same as <code>{ x, y, other, other2, ..}</code>?</p>",
        "id": 498300629,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1738922137
    },
    {
        "content": "<p>It's just that we have been employing a philosophy of not disallowing specific combinations of syntax</p>",
        "id": 498300687,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738922159
    },
    {
        "content": "<p>sure, I'm just looking to make sure I understand what's going on, that's all</p>",
        "id": 498300813,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1738922185
    },
    {
        "content": "<p>You're right that it's a worse version of the ident based spread</p>",
        "id": 498300885,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738922209
    },
    {
        "content": "<p>How soon do you foresee <code>..</code> and <code>..rest</code> coming to the compiler? just checking to see if I should remove the as syntax or not</p>",
        "id": 498301697,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1738922449
    },
    {
        "content": "<p>or is that likely to be post compiler- rewrite?</p>",
        "id": 498302044,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1738922558
    },
    {
        "content": "<p>if so, I'll do a release with what I've currently done, covering all the changes that are actually in the compiler. Then I'll keep adding the proposed stuff too</p>",
        "id": 498302376,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1738922662
    },
    {
        "content": "<p>That's post compiler rewrite, there's less than a 1% chance that we make any big changes to the Rust-based Roc compiler at this point</p>",
        "id": 498307631,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738924365
    },
    {
        "content": "<p>Okay, sounds good. I'll do two releases then.</p>",
        "id": 498315432,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1738926833
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/stream/316715-contributing/topic/Upcoming.20syntax.20changes.20clarification.20for.20tree-sitter/near/498307631\">said</a>:</p>\n<blockquote>\n<p>That's post compiler rewrite, there's less than a 1% chance that we make any big changes to the Rust-based Roc compiler at this point</p>\n</blockquote>\n<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> I guess it depends on what you call big. I think we are definitely folding in a number of things, but many are not syntax</p>",
        "id": 498381499,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738946529
    },
    {
        "content": "<p>Yes, I should be more clear: we are rewriting the compiler, and trying to start with a minimal version of the compiler to prove that everything works. After that, we aren't trying to implement to parity with the Rust-based compiler, but rather only implement syntax for the new planned behavior</p>",
        "id": 498389771,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738949124
    },
    {
        "content": "<p>So when I said \"post-rewrite\", I was thinking \"post-get it working\", which was confusing</p>",
        "id": 498389820,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738949148
    },
    {
        "content": "<p>I got some more time to work on changes and I have now implemented all the syntax <span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> mentioned. I've also removed some features being deprecated like space based function calling.... A sad loss for sure.</p>",
        "id": 498403860,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1738953217
    },
    {
        "content": "<p>Basically now it's just building out the corpus to find edge cases</p>",
        "id": 498404099,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1738953297
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"651372\">Eli Dowling</span> <a href=\"#narrow/channel/316715-contributing/topic/Upcoming.20syntax.20changes.20clarification.20for.20tree-sitter/near/498403860\">said</a>:</p>\n<blockquote>\n<p>I got some more time to work on changes and I have now implemented all the syntax <span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> mentioned. I've also removed some features being deprecated like space based function calling.... A sad loss for sure.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> <span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> Is this the first step in Roc's ecosystem to un-support WSA?</p>",
        "id": 498413173,
        "sender_full_name": "jan kili",
        "timestamp": 1738956824
    },
    {
        "content": "<p>I remember y'all mentioning a long deprecation for it.</p>",
        "id": 498413353,
        "sender_full_name": "jan kili",
        "timestamp": 1738956878
    },
    {
        "content": "<p>I'd say so, yes. Technically, it's basically a parsing local change, so it wouldn't be a giant change to add/remove it, but we seem to be trying to only implement the features we'll see in Roc 0.1.0</p>",
        "id": 498413439,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738956921
    },
    {
        "content": "<p>However, you're right that we said we'd support it and are now moving away from that promise without discussion</p>",
        "id": 498413487,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738956942
    },
    {
        "content": "<p>I think this is a gap between what we think the future is for Roc that we are trying to plaster over with politeness, unsuccessfully</p>",
        "id": 498413656,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738957007
    },
    {
        "content": "<p>Thanks for that perspective! I'll start a separate topic for it.</p>",
        "id": 498413763,
        "sender_full_name": "jan kili",
        "timestamp": 1738957061
    },
    {
        "content": "<p>That's good</p>",
        "id": 498413781,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738957071
    },
    {
        "content": "<p>Just to be clear <span class=\"user-mention\" data-user-id=\"462053\">@JanCVanB</span>:<br>\nThe upcoming release making the grammar up to date with the existing rust compiler will not remove WSA.</p>\n<p>I expect though, that the compiler rewrite will only contain one syntax, having both would seem highly unusual to me...</p>",
        "id": 498414904,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1738957541
    },
    {
        "content": "<p>Yes, I think it's extremely unlikely that we'd have two function call syntaxes, and PNC seems to work with static dispatch in a way that WSA doesn't</p>",
        "id": 498415050,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738957603
    },
    {
        "content": "<p>We're trying to discuss what to do in the <a class=\"stream-topic\" data-stream-id=\"316715\" href=\"/#narrow/channel/316715-contributing/topic/.F0.9F.9A.A8.20Whitespace.20application.20and.20whitespace.20-.20breaking.20change.21.20.F0.9F.9A.A8\">#contributing &gt; 🚨 Whitespace application and whitespace - breaking change! 🚨</a> thread</p>",
        "id": 498415079,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738957620
    },
    {
        "content": "<p>(moved to <a class=\"stream-topic\" data-stream-id=\"304641\" href=\"/#narrow/channel/304641-ideas/topic/reflecting.20on.20static.20dispatch\">#ideas &gt; reflecting on static dispatch</a>)</p>",
        "id": 498417708,
        "sender_full_name": "jan kili",
        "timestamp": 1738958653
    },
    {
        "content": "<p>Thanks for this tree sitter, <span class=\"user-mention\" data-user-id=\"651372\">@Eli Dowling</span>! I'm switching from VSCode to Helix, and with this Roc support it feels like it could be an ideal daily driver for me. I'm working on <a href=\"https://gitlab.com/JanCVanB/rocwise-editor-themes/-/tree/helix-dracula?ref_type=heads\">a coloring theme</a> as my entrypoint into customizing/contributing to editor support tools.</p>\n<p>I think I see some gaps in our grammar coverage, but I might just be using it wrong. Does it look accurate to you that these gray portions are untokenized/unscoped?</p>\n<p>using tree-sitter-roc on master:<br>\n<a href=\"/user_uploads/22008/zu9_awNDekvfgu75xWGdmh73/Screenshot_20250218_084547.png\">Screenshot_20250218_084547.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/zu9_awNDekvfgu75xWGdmh73/Screenshot_20250218_084547.png\" title=\"Screenshot_20250218_084547.png\"><img data-original-content-type=\"image/png\" data-original-dimensions=\"2256x1505\" src=\"/user_uploads/thumbnail/22008/zu9_awNDekvfgu75xWGdmh73/Screenshot_20250218_084547.png/840x560.webp\"></a></div><p>using tree-sitter-roc on new-syntax-old-compiler: (seems unchanged) <br>\n<a href=\"/user_uploads/22008/P9-ZuqP8M9pHdU9Omy7eZIxw/Screenshot_20250218_091553.png\">Screenshot_20250218_091553.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/P9-ZuqP8M9pHdU9Omy7eZIxw/Screenshot_20250218_091553.png\" title=\"Screenshot_20250218_091553.png\"><img data-original-content-type=\"image/png\" data-original-dimensions=\"2256x1505\" src=\"/user_uploads/thumbnail/22008/P9-ZuqP8M9pHdU9Omy7eZIxw/Screenshot_20250218_091553.png/840x560.webp\"></a></div>",
        "id": 500443972,
        "sender_full_name": "jan kili",
        "timestamp": 1739896527
    },
    {
        "content": "<p>According to <a href=\"https://docs.helix-editor.com/themes.html\">Helix docs</a>, my question might be about our coverage of only <a href=\"https://tree-sitter.github.io/tree-sitter/3-syntax-highlighting.html#highlights\">the <code>highlights</code> query</a>, but idk how interconnected that query is with the rest of the tree sitter.</p>",
        "id": 500468142,
        "sender_full_name": "jan kili",
        "timestamp": 1739898079
    },
    {
        "content": "<p>After reading <code>queries/highlights.scm</code>, it does seem mostly powered by the syntax tree. It's super readable, and now I want to learn Scheme syntax to understand it fully. While I expect I could debug the grey gaps (above) in time, I'm still curious to hear your assessment of them.</p>",
        "id": 500470806,
        "sender_full_name": "jan kili",
        "timestamp": 1739898882
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"462053\">@JanCVanB</span>  my holiday is over this week. So I expect to get the updated grammar out in the next week which will fix all the issues with the existing syntax.<br>\nI know there is heaps of errors right now, sorry about that <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>.</p>",
        "id": 500505303,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1739910812
    },
    {
        "content": "<p>I have been dabbling a little bit with the upcoming helix plugin system (which uses a scheme dialect called steel as it's language)</p>",
        "id": 500505464,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1739910863
    },
    {
        "content": "<p>Sadly steel has very limited documentation and the plugin system has been pretty slow to develop</p>",
        "id": 500505648,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1739910946
    },
    {
        "content": "<p>It's a real shame because I don't use helix so much these days. In my day job, not using AI tools is just so much slower it's not worth it.<br>\nI've been looking to try out zed though, as my main editor is currently cursor.</p>\n<p>For my personal stuff though, it's actually hard and so AI is basically useless <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 500505967,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1739911050
    },
    {
        "content": "<p>Woohoo! No rush.</p>",
        "id": 500507254,
        "sender_full_name": "jan kili",
        "timestamp": 1739911557
    },
    {
        "content": "<p><del>The only token distinction I'm unsure whether you plan to support is when <code>:</code> is used in types vs in records - I'd like to color them differently.</del> Nevermind, I see you intend to support that distinction.</p>",
        "id": 500507428,
        "sender_full_name": "jan kili",
        "timestamp": 1739911623
    },
    {
        "content": "<p>Is the gray text above the result of syntax changes or of a small corpus? I'm happy to provide corpus/test cases.</p>",
        "id": 500507695,
        "sender_full_name": "jan kili",
        "timestamp": 1739911727
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"651372\">@Eli Dowling</span> welcome back! FYI we're moving to a context-free grammar (not kidding!) that doesn't do significant whitespace</p>",
        "id": 500519918,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739916440
    },
    {
        "content": "<p>see <a class=\"stream-topic\" data-stream-id=\"304641\" href=\"/#narrow/channel/304641-ideas/topic/braces.20syntax/with/499095466\">#ideas &gt; braces syntax</a> and <a class=\"stream-topic\" data-stream-id=\"304641\" href=\"/#narrow/channel/304641-ideas/topic/Using.20parens.20for.20types/with/493256837\">#ideas &gt; Using parens for types</a></p>",
        "id": 500538943,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739926014
    },
    {
        "content": "<p>Technically... it does do significant _whitespace_, but not significant indentation nor significant newlines</p>",
        "id": 500539233,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739926215
    },
    {
        "content": "<p>Indentation significance is the only thing in the grammar that was forcing Roc's grammar to not be context-free</p>",
        "id": 500670520,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1739977068
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span>  Thanks :) <br>\nI've been following that, with admittedly quite mixed feelings. <br>\nAs someone who uses a variety of programming languages regularly (php,js,rust,ocaml) and has tried/used many more. I'm pretty strongly in favour of whitespace sensitivity and WSA.<br>\n(technically ocaml isn't WS  sensitive, but I preferred F# which is almost the same but with whitespace sensitivity)</p>",
        "id": 501060820,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1740130529
    },
    {
        "content": "<p>I saw a lot of discussion about things that make code easier to write:<br>\n. autocomplete,<br>\npasting,<br>\nstatic dispatch aiding function discovery.<br>\nI love all that too, but I actually spend the majority of my time, reading and making small edits/refactors to code. <br>\nI think PNC and braces mostly add noise and annoyance in those cases. </p>\n<p>Still, if roc can deliver in other ways, I'll get over it <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 501061776,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1740130814
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"651372\">Eli Dowling</span> <a href=\"#narrow/channel/397893-announcements/topic/New.20tree-sitter.20for.20existing.20roc.20syntax/near/504291388\">said</a>:</p>\n<blockquote>\n<p>Hey folks, I know it's been a while, but I finally got around to finishing the update to the TS syntax for roc.<br>\nShould support all syntax in the existing rust compiler. (except WSA)</p>\n</blockquote>\n<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> Thank you so much for updating it!</p>\n<p>It's not working for me in Helix, so where would you like to discuss debugging/feedback - here or a new thread or DMs or GitHub?</p>",
        "id": 504436131,
        "sender_full_name": "jan kili",
        "timestamp": 1741557602
    },
    {
        "content": "<p>Here is fine, may as well keep it visible for others!<br>\nSend me a copy of your helix log after opening a roc file.</p>",
        "id": 504436997,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1741558264
    },
    {
        "content": "<p>Also <span class=\"user-mention\" data-user-id=\"462053\">@JanCVanB</span> if you can explain what's not working a little more that'd be great. Is it just totally no syntax highlighting?</p>",
        "id": 504437069,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1741558320
    },
    {
        "content": "<p>Also, what was your procedure for updating?</p>",
        "id": 504437141,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1741558346
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"462053\">@JanCVanB</span> did you copy over the query files?</p>",
        "id": 504438769,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741559674
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"651372\">Eli Dowling</span> <a href=\"#narrow/channel/316715-contributing/topic/Upcoming.20syntax.20changes.20clarification.20for.20tree-sitter/near/504437141\">said</a>:</p>\n<blockquote>\n<p>Also, what was your procedure for updating?</p>\n</blockquote>\n<ol>\n<li>Updated the commit SHA in <code>~/.config/helix/languages.toml</code></li>\n<li>Ran <code>hx --grammar fetch</code> and <code>build</code></li>\n<li>Pulled master on my tree-sitter-roc repo clone</li>\n<li>Moved <code>~/.config/helix/runtime/queries/roc</code> to <code>~/.config/helix/runtime/queries/roc-february</code></li>\n<li>Copied <code>repo/queries</code> to <code>~/.config/helix/runtime/queries/roc</code></li>\n</ol>\n<p>With any Helix theme, all text in .roc files is the <code>ui.text</code> color.</p>",
        "id": 504439358,
        "sender_full_name": "jan kili",
        "timestamp": 1741560117
    },
    {
        "content": "<p>That all sounds reasonable to me, and your log output?</p>",
        "id": 504439475,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1741560185
    },
    {
        "content": "<p>lol fixed!</p>\n<div class=\"codehilite\"><pre><span></span><code>~/_code/roc-lang/basic-cli/examples$ ls ~/.config/helix/runtime/queries/roc\nhighlights.scm  indents.scm  injections.scm  locals.scm  queries  tags.scm  textobjects.sc\n</code></pre></div>\n<p>Nested dirs. I must have messed up step 5.</p>",
        "id": 504439849,
        "sender_full_name": "jan kili",
        "timestamp": 1741560475
    },
    {
        "content": "<p>All, good. let me know if you notice any edge cases.<br>\n I didn't know exactly what projects had what level of syntax newness so the corpus is pretty small.</p>",
        "id": 504440064,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1741560648
    },
    {
        "content": "<p>Here are some of the basic-cli examples with the theme:</p>\n<div class=\"codehilite\"><pre><span></span><code>inherits = \"dracula\"\n\n\"ui.text\" = \"grey\"\n</code></pre></div>\n<p><a href=\"/user_uploads/22008/XCxPq-KNUgRYQLXDVGhWcG_t/Screenshot_20250309_170300.png\">Screenshot_20250309_170300.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/XCxPq-KNUgRYQLXDVGhWcG_t/Screenshot_20250309_170300.png\" title=\"Screenshot_20250309_170300.png\"><img data-original-content-type=\"image/png\" data-original-dimensions=\"1920x1200\" src=\"/user_uploads/thumbnail/22008/XCxPq-KNUgRYQLXDVGhWcG_t/Screenshot_20250309_170300.png/840x560.webp\"></a></div>",
        "id": 504441201,
        "sender_full_name": "jan kili",
        "timestamp": 1741561557
    },
    {
        "content": "<p>I'll resume my work on a set of themes that utilize all the highlights you've exposed!</p>",
        "id": 504441288,
        "sender_full_name": "jan kili",
        "timestamp": 1741561610
    },
    {
        "content": "<p>I wonder why <code>args</code> in the top-left isn't highlighted but <code>first</code> &amp; <code>last</code> in the bottom-right are.</p>",
        "id": 504441404,
        "sender_full_name": "jan kili",
        "timestamp": 1741561696
    },
    {
        "content": "<p>some stuff may not have more specific highlighting queries. Though I'm surprised the modules don't have a query, they certainly used to</p>",
        "id": 504441481,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1741561791
    },
    {
        "content": "<p>I'll check if I have the same issue with operators too</p>",
        "id": 504441569,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1741561839
    },
    {
        "content": "<p>You can use the tree sitter commands in helix to check the parse tree to show what is what</p>",
        "id": 504441600,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1741561863
    },
    {
        "content": "<p>Whoa cool, and such variety here! <br>\n<a href=\"/user_uploads/22008/u_Fb7RrvAbrCD08MOnDX9xi0/Screenshot_20250309_171437.png\">Screenshot_20250309_171437.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/u_Fb7RrvAbrCD08MOnDX9xi0/Screenshot_20250309_171437.png\" title=\"Screenshot_20250309_171437.png\"><img data-original-content-type=\"image/png\" data-original-dimensions=\"1920x1200\" src=\"/user_uploads/thumbnail/22008/u_Fb7RrvAbrCD08MOnDX9xi0/Screenshot_20250309_171437.png/840x560.webp\"></a></div>",
        "id": 504441924,
        "sender_full_name": "jan kili",
        "timestamp": 1741562113
    },
    {
        "content": "<p>Weeel that explains things <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> <br>\nLooks like I need to add variable assignment after question mark postfix to the test corpus</p>",
        "id": 504442217,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1741562304
    },
    {
        "content": "<p>Job for tomorrow</p>",
        "id": 504442231,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1741562314
    },
    {
        "content": "<p><span aria-label=\"smiley cat\" class=\"emoji emoji-1f63a\" role=\"img\" title=\"smiley cat\">:smiley_cat:</span> The bottom two changed with your updates:<br>\n<a href=\"/user_uploads/22008/ylGHfXo9V8AZu8BSgIiPYr6v/Screenshot_20250310_101744.png\">Screenshot_20250310_101744.png</a><br>\nLooking good now?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/ylGHfXo9V8AZu8BSgIiPYr6v/Screenshot_20250310_101744.png\" title=\"Screenshot_20250310_101744.png\"><img data-original-content-type=\"image/png\" data-original-dimensions=\"1920x1200\" src=\"/user_uploads/thumbnail/22008/ylGHfXo9V8AZu8BSgIiPYr6v/Screenshot_20250310_101744.png/840x560.webp\"></a></div>",
        "id": 504633029,
        "sender_full_name": "jan kili",
        "timestamp": 1741623560
    },
    {
        "content": "<p>all looks good to me :)</p>",
        "id": 504634939,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1741623983
    },
    {
        "content": "<p><a href=\"https://media2.giphy.com/media/ZcGStMD6r07de/giphy.gif?cid=c623cb355kuj6iwzsxzd2t4sl2c2bwz14a1eu20qcg2c8e7g&amp;ep=v1_gifs_search&amp;rid=giphy.gif&amp;ct=g\">https://media2.giphy.com/media/ZcGStMD6r07de/giphy.gif?cid=c623cb355kuj6iwzsxzd2t4sl2c2bwz14a1eu20qcg2c8e7g&amp;ep=v1_gifs_search&amp;rid=giphy.gif&amp;ct=g</a><br>\nIt's coloring time.</p>\n<div class=\"message_inline_image\"><a href=\"https://media2.giphy.com/media/ZcGStMD6r07de/giphy.gif?cid=c623cb355kuj6iwzsxzd2t4sl2c2bwz14a1eu20qcg2c8e7g&amp;ep=v1_gifs_search&amp;rid=giphy.gif&amp;ct=g\"><img src=\"https://uploads.zulipusercontent.net/eec976b3e2c75e9c533d9397dfb6b5930e983ff3/68747470733a2f2f6d65646961322e67697068792e636f6d2f6d656469612f5a634753744d443672303764652f67697068792e6769663f6369643d6336323363623335356b756a3669777a73787a64327434736c32633262777a31346131657532307163673263386537672665703d76315f676966735f736561726368267269643d67697068792e6769662663743d67\"></a></div>",
        "id": 504635648,
        "sender_full_name": "jan kili",
        "timestamp": 1741624158
    },
    {
        "content": "<p>hahah, I'm curious to see what you come up with. <br>\nI personally changed my theme to have a colour for modules.<br>\nOh and if we wanted to we could probably improve the scopes to make exports have the right colour. eg functions have correct function colouring.</p>",
        "id": 504636097,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1741624270
    },
    {
        "content": "<p>sorry <code>locals.scm</code> not scopes.scm</p>",
        "id": 504636272,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1741624319
    },
    {
        "content": "<p>My ongoing feedback seems sufficiently unrelated to this topic's original discussion and audience, so I'll start a new topic. This one seems resolvable!</p>",
        "id": 504647212,
        "sender_full_name": "jan kili",
        "timestamp": 1741627509
    }
]