[
    {
        "content": "<h3>Context</h3>\n<p>Hi! I got stuck while contributing to the code gen phase. I'm picking up on a put-on-hold work on Tail Recursion Modulo Cons optimisation; Allowing recursive calls to be turned to loops, even if the \"tail\" recursive call is inside a Recursive tag union's field. I'm making it so that the recursive call can be inside of an arbitrarily nested struct in one of the tag's arguments, not just in the argument directly. So this would compile to a loop:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">LinkedList</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Nil</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Cons</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">first</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">LinkedList</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"p\">}]</span>\n\n<span class=\"nv\">repeat</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">U64</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">LinkedList</span><span class=\"w\"> </span><span class=\"nv\">a</span>\n<span class=\"nv\">repeat</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Nil</span>\n<span class=\"w\">        </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Cons</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">first</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">repeat</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">n</span><span class=\"w\"> </span><span class=\"nf\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>Dev backend is done, started llvm. <br>\nI want to extend the capabilities of generating GetElementPointer-s. I've already prepared it to potentially get a field that is somewhere deeper in a nested struct, not directly in the arguments of the recursive tag union by holding not just an index associated with the data (<code>u64</code>), but rather a slice of indices <code>&amp;[64]</code>. That way you can \"drill down\" into a struct's field, following the indices. We only use the the first 2 elements so far (tag id &amp; tag argument index). See <a href=\"https://github.com/roc-lang/roc/blob/7180930e19f18fd38e3db394217f6d3ba629ce94/crates/compiler/gen_llvm/src/llvm/build.rs#L2077\">here</a>.<br>\nEssentially I want a function like <a href=\"https://github.com/roc-lang/roc/blob/7180930e19f18fd38e3db394217f6d3ba629ce94/crates/compiler/gen_llvm/src/llvm/build.rs#L2775\">union_field_ptr_at_index_help</a>, except the <code>builder.new_build_struct_gep(...)</code> should use the <a href=\"https://github.com/roc-lang/roc/blob/7180930e19f18fd38e3db394217f6d3ba629ce94/crates/compiler/gen_llvm/src/llvm/build.rs#L342\">new_build_in_bounds_gep</a> method that accepts a <code>ordered_indexes: &amp;[IntValue&lt;'ctx&gt;]</code>, not a <code>u32</code>. </p>\n<h3>The meat</h3>\n<p>How do I convert a <code>&amp;[u64]</code> into a  <code>&amp;[inkwell::values::IntValue&lt;'ctx&gt;]</code> inside the <a href=\"https://github.com/roc-lang/roc/blob/7180930e19f18fd38e3db394217f6d3ba629ce94/crates/compiler/gen_llvm/src/llvm/build.rs#L2775\">union_field_ptr_at_index_help</a> function? I'm a beginner at rust, so allow me to shamelessly ask for a snippet, if possible. It's night time for me, tomorrow I'll check zulip, bye!</p>",
        "id": 482040957,
        "sender_full_name": "Norbert Hajagos",
        "timestamp": 1731446418
    }
]