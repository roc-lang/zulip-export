[
    {
        "content": "<p>So I have been looking into porting <a href=\"https://github.com/elm/parser\">the Elm parser</a>... I feel like I have a good handle on how the library works in general and I have a few suggestions for how to do the Roc implementation.</p>",
        "id": 341273477,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1678624774
    },
    {
        "content": "<p>But one thing puzzles me a bit, so if anyone here has familiarity with the Elm parser I would gladly take some input. In the Advanced module there is a type <br>\n<code>Bag c x = Empty | AddRight (Bag c x) (DeadEnd c x) | Append (Bag c x) (Bag c x) </code><br>\nwhich is used in the <code>Bad</code> branches of the parsers (when the parser fails). In the end one maps this to a list of <code>DeadEnd</code> to give lots of info when e.g. constructing the error messages.</p>",
        "id": 341273993,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1678625004
    },
    {
        "content": "<p>But I don't quite understand why it is implemented this way. Why not just use a list (or a stack I guess) in the first place? Maybe there are some Elm specific performance considerations I am missing here?</p>",
        "id": 341274118,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1678625058
    },
    {
        "content": "<p>Hi Johan, the Elm parser is highly optimized for performance. So you're right: the Bag is modeled like this because of performance considerations. (This is just my understanding...) In function <code>oneOfHelp</code> we concatenate two lists. This is an expensive operation, so Evan decided to first create a binary tree of the lists which have to be concatenated (using the <code>Append</code> variant), and then create the final list from right to left.</p>",
        "id": 341277486,
        "sender_full_name": "Pit Capitain",
        "timestamp": 1678626607
    },
    {
        "content": "<p>I <strong>think</strong> the <code>AddRight</code> variant could be changed to something like <code>Single (DeadEnd c x)</code>, because the first element of <code>AddRight</code> is always <code>Empty</code>. This seems to be a leftover from a previous implementation.</p>",
        "id": 341278035,
        "sender_full_name": "Pit Capitain",
        "timestamp": 1678626871
    },
    {
        "content": "<p>I doin't know whether something like this would be necessary in Roc. (I didn't touch Roc for a very long time.)</p>",
        "id": 341278266,
        "sender_full_name": "Pit Capitain",
        "timestamp": 1678626969
    },
    {
        "content": "<p>Thanks! Yes I figured something like that was going on.</p>",
        "id": 341279806,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1678627659
    },
    {
        "content": "<p>My intuition says that it would be better to just build the list directly in Roc since they are \"just\" arrays. But I don't really know, I am still learning about the how to get the best performance in Roc.</p>",
        "id": 341280055,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1678627748
    },
    {
        "content": "<p>in general, in Roc if you have the choice between a <code>List</code> or a recursive tag union, the <code>List</code> approach will almost always be way faster</p>",
        "id": 341324741,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1678648020
    },
    {
        "content": "<p>it's kind of the classic \"linked list versus array\" situation</p>",
        "id": 341324766,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1678648041
    },
    {
        "content": "<p>Which is great, considering that it much more easy to reach for <code>List</code> than constructing a recursive tag union or a linked list :D</p>",
        "id": 341327387,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1678649486
    },
    {
        "content": "<p>also this list is almost certainly unique, which means it can be updated in place (and with our current strategies, there will usually be free capacity in the list, making that push really cheap)</p>",
        "id": 341328181,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1678649943
    },
    {
        "content": "<p>Cool. Is that also true for concatenating lists? Or does that require moving \"memory\" around more?</p>",
        "id": 341328742,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1678650260
    },
    {
        "content": "<p>same idea. so long as there is space, it should be pretty cheap. and usually there will be space</p>",
        "id": 341332116,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1678652482
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"595873\">@Johan Lövgren</span> have you done anything for the parser port yet? I'd love to look at it if you've got something. I'm trying to do something similar for the interpreter I'm trying to build, but really struggling at making a parser work without higher kinded types, like the other languages I've used parser combinators in.</p>",
        "id": 341602380,
        "sender_full_name": "Nick Hallstrom",
        "timestamp": 1678755770
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"580063\">Nick Hallstrom</span> <a href=\"#narrow/stream/316715-contributing/topic/Elm.20parser.20port/near/341602380\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"595873\">Johan Lövgren</span> have you done anything for the parser port yet? I'd love to look at it if you've got something. I'm trying to do something similar for the interpreter I'm trying to build, but really struggling at making a parser work without higher kinded types, like the other languages I've used parser combinators in.</p>\n</blockquote>\n<p>Yes I have got something cooking... It's still a work in progress but you are free to take a look:<br>\n<a href=\"https://github.com/Subtlesplendor/roc-parser\">https://github.com/Subtlesplendor/roc-parser</a></p>",
        "id": 341642736,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1678780299
    },
    {
        "content": "<p>To make it work for arbitrary inputs I had to make some simplifications from the Elm parser. For example, the Elm parser keeps track of row and col while parsing the input string, but that does not really make sense for arbitrary input. So right now it just keeps track of the offset (where the cursor is)</p>",
        "id": 341643399,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1678780518
    },
    {
        "content": "<p>Then if one wants to parse e.g. strings, one has to implement a way to find row and col when one generates an error message (which is the only time they are used anyway)</p>",
        "id": 341644095,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1678780760
    },
    {
        "content": "<p>I think this improves performance of the parser on success, but worsens it on failure (if you want a nice error message)</p>",
        "id": 341645890,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1678781321
    },
    {
        "content": "<p>And by arbitrary input I mean <code>List a</code> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> <br>\nI did have the thought that with higher kinded types you might be able to write such a Parser for everything that is \"indexable\" (not sure what that would be in Haskell)</p>",
        "id": 341652293,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1678783339
    },
    {
        "content": "<p>Cool. I think in many situations it's the right tradeoff to have good performance on success but not care too much about it on failure because it's for debug.</p>",
        "id": 341883690,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1678821229
    },
    {
        "content": "<p>If you use <code>oneOf</code> and the first one fails, does it skip the second pass to generate the nice error? Probably don't need it since you're going to try the next parser anyway, which might succeed.</p>",
        "id": 341883932,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1678821325
    },
    {
        "content": "<p>Yes the idea is that the second pass through is done first when the error message is generated. So it won't do it until the full parser is finished running</p>",
        "id": 341889697,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1678823186
    },
    {
        "content": "<p>I'm interested to know what the plan is for this package. It looks really good so far. I'm wondering if it would make sense to use this in the Json package? Specifically I was looking into parsing floats today and I feel like it would be good to use some combinators to handle the valid patterns e.g. before passing the string into <code>Str.toDec</code>. Most of the other decoders also could benefit too possibly. If we used a Parser package, then I assume Json could no longer live in the builtins? I guess the alternative is to implement the Json parsers more manually which may be better to optimise for performance in future.</p>",
        "id": 343329748,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1679394594
    },
    {
        "content": "<p>This may be a terrible idea, I was skim reading a paper and it included a survey of different algorithms to parse floats fast. I assume the roc std lib would be the best place to do this kind of thing, but not sure the best way to interface that with a parser. The current implementation parses a string that looks like a valid float and then attempts to convert it to a Dec or F32 etc.  The alternative would be to implement a fast algorithm in Roc, going directly from List U8 to Dec etc.</p>",
        "id": 343330798,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1679394908
    },
    {
        "content": "<p>I think the parsing should be a builtin. There are just a lot of subtle edge cases with floats, and performance is important</p>",
        "id": 343336072,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1679396285
    },
    {
        "content": "<p>so on the parser side, you would need to be able to tokenize a float</p>",
        "id": 343336271,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1679396335
    },
    {
        "content": "<p>I took a break from developing for a few days because of a compiler error I did not understand. But now Ayaz has explained it to me so I can continue working. Up next I want to implement some examples and tests to root out any inevitable off-by-1 errors.</p>",
        "id": 343384440,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1679408340
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281543\">Folkert de Vries</span> <a href=\"#narrow/stream/316715-contributing/topic/Elm.20parser.20port/near/343336271\">said</a>:</p>\n<blockquote>\n<p>so on the parser side, you would need to be able to tokenize a float</p>\n</blockquote>\n<p>Would this be implemented in Roc or lower level? (I guess the alternative is in Zig?)</p>",
        "id": 343384688,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1679408402
    },
    {
        "content": "<p>So... I started thinking about this again a bit, as I am working through <a href=\"http://craftinginterpreters.com\">Crafting interpreters</a> but decided to write the interpreter in Roc instead of Java. Since there is a bit of parsing going on, I thought I could pick this project up again.</p>",
        "id": 491992885,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1736106187
    },
    {
        "content": "<p>I am thinking whether it would be a good idea to pass the source, i.e. the input which to parse, to the parser as a module parameter. Currently the source is passed around to the different parsers via the \"state\" the parser is operating on. But because the Elm parser never consumes the input string, it just moves a cursor along it, the input is always the same. So it is more like a \"global context\" for the whole parser, and in my mind does not need to be passed around explicitly.</p>",
        "id": 491993048,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1736106338
    },
    {
        "content": "<p>I was wondering if anyone had any opinions on this, if it sounds reasonable, if there are any performance implications?</p>",
        "id": 491993119,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1736106369
    },
    {
        "content": "<p>So one might use the parser like this:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">File</span><span class=\"nf\">.</span><span class=\"nv\">readUtf8</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"nv\">path</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">Parser.Utf8</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"kr\">as</span><span class=\"w\"> </span><span class=\"kt\">Parser</span>\n\n<span class=\"kt\">Parser</span><span class=\"nf\">.</span><span class=\"nv\">run</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Parser</span><span class=\"nf\">.</span><span class=\"nv\">digit</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Parser</span><span class=\"nf\">.</span><span class=\"nv\">sepBy</span><span class=\"w\"> </span><span class=\"nv\">whitespace</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 491993300,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1736106559
    },
    {
        "content": "<p>(i.e. when running the parser one does not pass it the input, it just uses the input which you passed in when importing the module)</p>",
        "id": 491993395,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1736106614
    },
    {
        "content": "<p>I definitely wouldn't use module params for this, but I guess you technically could</p>",
        "id": 491995296,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736108373
    },
    {
        "content": "<p>I would make the cursor and the reference string into a single structure.</p>",
        "id": 491995306,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736108385
    },
    {
        "content": "<p>Also, most efficient likely will be to avoid the cursor all together and just drop off bytes from the beginning of the string.</p>",
        "id": 491995372,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736108412
    },
    {
        "content": "<p>Assuming you never rewind the cursor, I think pattern matching on the list for bytes and just keeping around <code>.. as rest</code> to be super powerful.</p>",
        "id": 491995491,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736108538
    },
    {
        "content": "<p>This is how I did it for example: <a href=\"https://github.com/bhansconnect/monkey-roc/blob/main/src/Lexer.roc\">https://github.com/bhansconnect/monkey-roc/blob/main/src/Lexer.roc</a></p>",
        "id": 491995618,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736108687
    },
    {
        "content": "<p>But I didn't use a fancier parser</p>",
        "id": 491995645,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736108716
    },
    {
        "content": "<p>I also split lexong and parsing just for the fun of it. Probably should be merged.</p>",
        "id": 491995661,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736108740
    },
    {
        "content": "<p>For this case yes I also split lexing and parsing</p>",
        "id": 491996440,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1736109382
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/316715-contributing/topic/Elm.20parser.20port/near/491995372\">said</a>:</p>\n<blockquote>\n<p>Also, most efficient likely will be to avoid the cursor all together and just drop off bytes from the beginning of the string.</p>\n</blockquote>\n<p>Hmm, so there is no real cost to dropping bytes from the start?</p>",
        "id": 491996516,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1736109465
    },
    {
        "content": "<p>If you don't mutate it is essentially free</p>",
        "id": 492007892,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736119992
    },
    {
        "content": "<p>Generates a seamless slice</p>",
        "id": 492007896,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736120000
    },
    {
        "content": "<p>So each drop essentially is two integer changes. One to increment the pointer offset. One to shorten the slice length</p>",
        "id": 492007971,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736120063
    }
]