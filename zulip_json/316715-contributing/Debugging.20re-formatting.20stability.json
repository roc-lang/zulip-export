[
    {
        "content": "<p>I have one snapshot test failing on re-formatting and I honestly just don't understand the progression.  I've updated the output of the case to be helpful, but here are the original/formatted/reformatted asts (with the source code below).  I've lined up the relevant nodes with each other</p>\n<p><a href=\"/user_uploads/22008/2OMC5165sTAE76eDuamt6TxK/Screenshot-2025-01-10-at-9.28.32-AM.png\">Screenshot 2025-01-10 at 9.28.32 AM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/2OMC5165sTAE76eDuamt6TxK/Screenshot-2025-01-10-at-9.28.32-AM.png\" title=\"Screenshot 2025-01-10 at 9.28.32 AM.png\"><img data-original-dimensions=\"1832x1462\" src=\"/user_uploads/thumbnail/22008/2OMC5165sTAE76eDuamt6TxK/Screenshot-2025-01-10-at-9.28.32-AM.png/840x560.webp\"></a></div><p>For those like <span class=\"user-mention\" data-user-id=\"453336\">@Joshua Warner</span> or <span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> who are familiar with this where do you think this SpaceAfter comes from around the PncApply in the reformatted AST?</p>",
        "id": 492973798,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736523136
    },
    {
        "content": "<p>Can you paste the source code?</p>",
        "id": 492974177,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736523250
    },
    {
        "content": "<p>Oh, I see it</p>",
        "id": 492974212,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736523263
    },
    {
        "content": "<p>In the bottom of the image</p>",
        "id": 492974232,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736523268
    },
    {
        "content": "<p>Yeah so the extra newline coming in is what is perplexing, and what makes the formatting so terrible</p>",
        "id": 492974383,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736523325
    },
    {
        "content": "<p>Yep, the formatting that comes as \"step 2\" here makes sense to me</p>",
        "id": 492974451,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736523352
    },
    {
        "content": "<p>The re-formatting is weird indeed</p>",
        "id": 492974530,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736523365
    },
    {
        "content": "<p>But I think it comes from how we format patterns</p>",
        "id": 492974567,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736523380
    },
    {
        "content": "<p>But I think it's the parsing of the formatted AST</p>",
        "id": 492974636,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736523404
    },
    {
        "content": "<p>Or I guess not</p>",
        "id": 492974715,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736523427
    },
    {
        "content": "<p>If you look at the docs for <a href=\"https://www.roc-lang.org/builtins/Str#walkUtf8\">Str.walkUtf8</a>, whenever we have a multiline function type, we make sure the arrow is indented</p>",
        "id": 492974754,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736523438
    },
    {
        "content": "<p>It would be the formatted of the formatted ast</p>",
        "id": 492974758,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736523440
    },
    {
        "content": "<p>Which makes sense for types</p>",
        "id": 492974771,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736523445
    },
    {
        "content": "<p>But this is a value, right?</p>",
        "id": 492974800,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736523454
    },
    {
        "content": "<p>This is a value, you can see the top level node is an Expr</p>",
        "id": 492974843,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736523471
    },
    {
        "content": "<p>So either our formatting for PNC patterns has some artifacts from formatting multiline spaced patterns</p>",
        "id": 492974913,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736523486
    },
    {
        "content": "<p>So it's an Expr::Closure, and the first list is a [Pattern&lt;'_&gt;]</p>",
        "id": 492975001,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736523520
    },
    {
        "content": "<p>I'll look at the code in a few minutes</p>",
        "id": 492975063,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736523543
    },
    {
        "content": "<p>It's on my branch, maybe I did something goofy aligning it with Expr formatting</p>",
        "id": 492975118,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736523562
    },
    {
        "content": "<p>Trying to finish up this invalid ident warning code</p>",
        "id": 492975145,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736523573
    },
    {
        "content": "<p>No worries.  I have to go to work and write and test some Java.</p>",
        "id": 492975290,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736523610
    },
    {
        "content": "<p>Shed a tear for me</p>",
        "id": 492975309,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736523613
    },
    {
        "content": "<p>Historically this sort of thing happened when <code>is_multiline</code> or one of the matches in the outer scopes differed slightly in details from how the child is actually formatted (e.g. adding/removing parens).</p>\n<p>Now, these bugs have generally been pushed into <code>&lt;&gt;.to_node()</code>, <code>expr_lift_spaces</code>, <code>pattern_lift_spaces</code>, etc. in such a way that those functions are not sufficiently \"normalizing\".</p>\n<p>In the initial formatted version (the middle column of your screenshot), it looks to me like the closure is for some reason incorrectly thinking that the arg list is _not_ multiline - and then it turning out it actually is when formatted.</p>",
        "id": 492981479,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736525605
    },
    {
        "content": "<p>I think this is the issue:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">   </span><span class=\"n\">buf</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"sc\">'\\\\'</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">arguments_are_multiline</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">loc_patterns</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">any</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">loc_pattern</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">loc_pattern</span><span class=\"p\">.</span><span class=\"n\">is_multiline</span><span class=\"p\">());</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// If the arguments are multiline, go down a line and indent.</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">indent</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">arguments_are_multiline</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">indent</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">INDENT</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">indent</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">first</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">loc_pattern</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">loc_patterns</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">first</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">buf</span><span class=\"p\">.</span><span class=\"n\">indent</span><span class=\"p\">(</span><span class=\"n\">indent</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">arguments_are_multiline</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"n\">buf</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"sc\">','</span><span class=\"p\">);</span>\n<span class=\"w\">                </span><span class=\"n\">buf</span><span class=\"p\">.</span><span class=\"n\">newline</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"n\">buf</span><span class=\"p\">.</span><span class=\"n\">push_str</span><span class=\"p\">(</span><span class=\"s\">\",\"</span><span class=\"p\">);</span>\n<span class=\"w\">                </span><span class=\"n\">buf</span><span class=\"p\">.</span><span class=\"n\">spaces</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"n\">first</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pattern_lift_spaces</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">.</span><span class=\"n\">text</span><span class=\"p\">.</span><span class=\"n\">bump</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">loc_pattern</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">arg</span><span class=\"p\">.</span><span class=\"n\">before</span><span class=\"p\">.</span><span class=\"n\">is_empty</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">fmt_comments_only</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"p\">.</span><span class=\"n\">before</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">NewlineAt</span><span class=\"p\">::</span><span class=\"n\">Bottom</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">indent</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"n\">arg</span><span class=\"p\">.</span><span class=\"n\">item</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">format_with_options</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Parens</span><span class=\"p\">::</span><span class=\"n\">InClosurePattern</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Newlines</span><span class=\"p\">::</span><span class=\"n\">No</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">indent</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">arg</span><span class=\"p\">.</span><span class=\"n\">after</span><span class=\"p\">.</span><span class=\"n\">is_empty</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">starts_with_inline_comment</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">.</span><span class=\"n\">after</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"n\">buf</span><span class=\"p\">.</span><span class=\"n\">spaces</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">            </span><span class=\"n\">fmt_comments_only</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"p\">.</span><span class=\"n\">after</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">NewlineAt</span><span class=\"p\">::</span><span class=\"n\">Bottom</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">indent</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 493023480,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736542145
    },
    {
        "content": "<p>The comment doesn't tell the truth</p>",
        "id": 493023649,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736542226
    },
    {
        "content": "<p>Nor is it correct - in my opinion</p>",
        "id": 493023673,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736542240
    },
    {
        "content": "<p>We do not go down a line and indent.  We just increase the indent</p>",
        "id": 493023698,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736542256
    },
    {
        "content": "<p>And I'm not sure we should do that at all for a single multi-line pattern</p>",
        "id": 493023743,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736542283
    },
    {
        "content": "<p>I think I'm going to say \"If arguments_are_multiline AND there are more than 1 argument - actually go down a line and indent with an increased indent.  otherwise keep the same indent and have the arrow be on the same line as the end of the arg pattern.</p>",
        "id": 493023952,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736542394
    },
    {
        "content": "<p>Does this sound correct?</p>",
        "id": 493023958,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736542399
    },
    {
        "content": "<p>That <em>sounds</em> correct, but I'd have to see examples get formatted in the PR</p>",
        "id": 493024011,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736542431
    },
    {
        "content": "<p>So:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nf\">\\</span>\n<span class=\"w\">    </span><span class=\"kt\">SomeThing</span><span class=\"p\">({</span>\n<span class=\"w\">        </span><span class=\"nv\">with</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"nv\">multilining'</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">more</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"nv\">args'</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}),</span>\n<span class=\"w\">    </span><span class=\"nv\">foo</span>\n<span class=\"w\">    </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nf\">....</span>\n</code></pre></div>\n<p>But:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nf\">\\</span><span class=\"kt\">L</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"nv\">z</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"kt\">This</span><span class=\"w\"> </span><span class=\"nv\">is</span><span class=\"w\"> </span><span class=\"nv\">multiline</span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nf\">....</span>\n</code></pre></div>",
        "id": 493024164,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736542510
    },
    {
        "content": "<p>That works for now. I don't like the <code>\\</code> being on a different line, but we're killing it soon, so <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 493024295,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736542569
    },
    {
        "content": "<p>But maybe we also want:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nf\">\\</span><span class=\"nv\">foo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">L</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"nv\">z</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"kt\">This</span><span class=\"w\"> </span><span class=\"nv\">is</span><span class=\"w\"> </span><span class=\"nv\">multiline</span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nf\">....</span>\n</code></pre></div>",
        "id": 493024307,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736542574
    },
    {
        "content": "<p>Yeah</p>",
        "id": 493024324,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736542582
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"o\">|</span>\n<span class=\"w\">    </span><span class=\"no\">SomeThing</span><span class=\"p\">({</span>\n<span class=\"w\">        </span><span class=\"ss\">with</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s1\">'multilining'</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"ss\">more</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s1\">'args'</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}),</span>\n<span class=\"w\">    </span><span class=\"n\">foo</span>\n<span class=\"o\">|</span><span class=\"w\">  </span><span class=\"o\">....</span>\n</code></pre></div>\n<p>looks better I guess?</p>",
        "id": 493024379,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736542606
    },
    {
        "content": "<p>Not <em>great</em>, but better</p>",
        "id": 493024424,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736542630
    },
    {
        "content": "<p>I don't think we can do better than that, though, so it's good</p>",
        "id": 493024437,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736542643
    },
    {
        "content": "<p>So I think the rule is if there is a multiline arg _before the last arg_, then we do the whole outdenting thing</p>",
        "id": 493024459,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736542652
    },
    {
        "content": "<p>Hmmm...thinking.  That would mean with <code>||</code> syntax:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"o\">|</span><span class=\"n\">foo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">SomeThing</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"n\">z</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\"># This is multiline</span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">....</span>\n</code></pre></div>\n<p>Is that better than:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"o\">|</span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"no\">SomeThing</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">z</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\"># This is multiline</span>\n<span class=\"w\">    </span><span class=\"p\">),</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">....</span>\n</code></pre></div>\n<p>?</p>",
        "id": 493024668,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736542742
    },
    {
        "content": "<p>I like symmetry, so I vote 2</p>",
        "id": 493024896,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736542840
    },
    {
        "content": "<p>Maybe that's just me</p>",
        "id": 493024905,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736542845
    },
    {
        "content": "<p>Function args have different aesthetic rules than function bodies</p>",
        "id": 493024954,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736542878
    },
    {
        "content": "<p>I agree that comment doesn't match the code, and that the current formatting is not ideal - but I'm not sure that's the cause of the bug you're looking at</p>",
        "id": 493024961,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736542882
    },
    {
        "content": "<p>Ok, So for now I'll do if more than one arg do the outdent.  But with <code>||</code> I'll go back to doing it for any number of args that are multiline</p>",
        "id": 493025068,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736542925
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453336\">Joshua Warner</span> <a href=\"#narrow/channel/316715-contributing/topic/Debugging.20re-formatting.20stability/near/493024961\">said</a>:</p>\n<blockquote>\n<p>I agree that comment doesn't match the code, and that the current formatting is not ideal - but I'm not sure that's the cause of the bug you're looking at</p>\n</blockquote>\n<p>We'll find out soon</p>",
        "id": 493025098,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736542943
    },
    {
        "content": "<p>But I have some other things to do first</p>",
        "id": 493025119,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736542952
    }
]