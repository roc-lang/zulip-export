[
    {
        "content": "<p>While fixing <a href=\"https://github.com/roc-lang/roc/issues/2457#issue-1125456771\">#2457</a>, there was a much larger problem that I found in <code>crates/compiler/test_syntax/tests/snapshots/pass/annotate_tuple_func.expr.roc</code>. Namely, this syntax is ambiguous<br>\nThe problem in short is that if we have a definition of the form</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">func</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">,</span><span class=\"nv\">y</span><span class=\"nf\">-&gt;</span><span class=\"nv\">z</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>this can be interpreted in two ways</p>\n<ol>\n<li><code>func</code> is the type of a singleton couple who's only element is a function that takes types <code>x</code> and <code>y</code> and returns <code>z</code></li>\n<li><code>func</code> is the type of a size two tuple, the first of which has the type <code>x</code>, the second the type <code>y-&gt;z</code>.<br>\nWhich of these should be preferred?</li>\n</ol>",
        "id": 488915712,
        "sender_full_name": "Wizard ish",
        "timestamp": 1734121887
    },
    {
        "content": "<p>I think functions in tuples require parens</p>",
        "id": 488916222,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734122149
    },
    {
        "content": "<p>So that is not ambigious. It can only be a function</p>",
        "id": 488916237,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734122160
    },
    {
        "content": "<p>That is at least my understanding of the syntax today</p>",
        "id": 488916292,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734122167
    },
    {
        "content": "<p>For that to be a tuple, it would have to be <code>tup : (x,(y-&gt;z))</code></p>",
        "id": 488916366,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734122195
    },
    {
        "content": "<p>Ok, this isn't the behavior in the snapshot, i didn't realize until i <em>really</em> looked at it that it was actually wrong, but this will also fix that as well, so two birds one stone ig</p>",
        "id": 488916442,
        "sender_full_name": "Wizard ish",
        "timestamp": 1734122246
    },
    {
        "content": "<p>interesting</p>",
        "id": 488916470,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734122264
    },
    {
        "content": "<p>Also, someone else with more parser knowledge may jump in later and correct what I said above, but I think it is correct.</p>",
        "id": 488916612,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734122300
    },
    {
        "content": "<p>so just to be clear this change to the snapshot ought to be approved?</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gu\">@0-16 Defs(</span>\n<span class=\"w\"> </span>    Defs {\n<span class=\"w\"> </span>        tags: [\n<span class=\"w\"> </span>            EitherIndex(2147483648),\n<span class=\"w\"> </span>        ],\n<span class=\"w\"> </span>        regions: [\n<span class=\"w\"> </span>            @0-13,\n<span class=\"w\"> </span>        ],\n<span class=\"w\"> </span>        space_before: [\n<span class=\"w\"> </span>            Slice&lt;roc_parse::ast::CommentOrNewline&gt; { start: 0, length: 0 },\n<span class=\"w\"> </span>        ],\n<span class=\"w\"> </span>        space_after: [\n<span class=\"w\"> </span>            Slice&lt;roc_parse::ast::CommentOrNewline&gt; { start: 0, length: 0 },\n<span class=\"w\"> </span>        ],\n<span class=\"w\"> </span>        spaces: [],\n<span class=\"w\"> </span>        type_defs: [],\n<span class=\"w\"> </span>        value_defs: [\n<span class=\"w\"> </span>            Annotation(\n<span class=\"w\"> </span>                @0-1 NumLiteral(\n<span class=\"w\"> </span>                    \"1\",\n<span class=\"w\"> </span>                ),\n<span class=\"w\"> </span>                @2-13 Tuple {\n<span class=\"w\"> </span>                    elems: [\n<span class=\"gd\">&lt;                        @3-4 SpaceAfter(</span>\n<span class=\"gd\">&lt;                            BoundVariable(</span>\n<span class=\"gd\">&lt;                                \"f\",</span>\n<span class=\"gd\">&lt;                            ),</span>\n<span class=\"gi\">&gt;                        @3-11 Function(</span>\n<span class=\"w\"> </span>                            [\n<span class=\"gd\">&lt;                                Newline,</span>\n<span class=\"gd\">&lt;                            ],</span>\n<span class=\"gd\">&lt;                        ),</span>\n<span class=\"gd\">&lt;                        @6-11 Function(</span>\n<span class=\"gd\">&lt;                            [</span>\n<span class=\"gi\">&gt;                                @3-4 BoundVariable(</span>\n<span class=\"gi\">&gt;                                    \"f\",</span>\n<span class=\"gi\">&gt;                                ),</span>\n<span class=\"w\"> </span>                                @6-8 BoundVariable(\n<span class=\"w\"> </span>                                    \"ww\",\n<span class=\"w\"> </span>                                ),\n<span class=\"w\"> </span>                            ],\n<span class=\"w\"> </span>                            Pure,\n<span class=\"w\"> </span>                            @10-11 BoundVariable(\n<span class=\"w\"> </span>                                \"p\",\n<span class=\"w\"> </span>                            ),\n<span class=\"w\"> </span>                        ),\n<span class=\"w\"> </span>                    ],\n<span class=\"w\"> </span>                    ext: Some(\n<span class=\"w\"> </span>                        @12-13 BoundVariable(\n<span class=\"w\"> </span>                            \"e\",\n<span class=\"w\"> </span>                        ),\n<span class=\"w\"> </span>                    ),\n<span class=\"w\"> </span>                },\n<span class=\"w\"> </span>            ),\n<span class=\"w\"> </span>        ],\n<span class=\"w\"> </span>    },\n<span class=\"w\"> </span>    @14-16 SpaceBefore(\n<span class=\"w\"> </span>        Tag(\n<span class=\"w\"> </span>            \"Mh\",\n<span class=\"w\"> </span>        ),\n<span class=\"w\"> </span>        [\n<span class=\"w\"> </span>            Newline,\n<span class=\"w\"> </span>        ],\n<span class=\"w\"> </span>    ),\n<span class=\"w\"> </span>)\n</code></pre></div>\n<p>(from</p>\n<div class=\"codehilite\"><pre><span></span><code>1:(f\n,ww-&gt;p)e\nMh\n</code></pre></div>\n<p>)</p>",
        "id": 488916691,
        "sender_full_name": "Wizard ish",
        "timestamp": 1734122355
    },
    {
        "content": "<p>I don't think it should be in a tuple at all</p>",
        "id": 488916822,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734122407
    },
    {
        "content": "<p><code>func : (x,y-&gt;z)</code> should be the same as <code>func : x,y-&gt;z</code></p>",
        "id": 488916858,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734122425
    },
    {
        "content": "<p>Cause we don't have 1 element tuples</p>",
        "id": 488916876,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734122436
    },
    {
        "content": "<p>wait really, why not?</p>",
        "id": 488916906,
        "sender_full_name": "Wizard ish",
        "timestamp": 1734122449
    },
    {
        "content": "<p><a class=\"stream-topic\" data-stream-id=\"304641\" href=\"/#narrow/channel/304641-ideas/topic/1-tuples\">#ideas &gt; 1-tuples</a></p>",
        "id": 488916978,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734122492
    },
    {
        "content": "<p>Has at least a little bit of context</p>",
        "id": 488917073,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734122524
    },
    {
        "content": "<p>hmmm ok so that to</p>",
        "id": 488917375,
        "sender_full_name": "Wizard ish",
        "timestamp": 1734122655
    },
    {
        "content": "<p>wait is that covered in <code>can</code>?</p>",
        "id": 488917401,
        "sender_full_name": "Wizard ish",
        "timestamp": 1734122671
    },
    {
        "content": "<p>My understanding there is nothing in explicitly blocks 1 tuples, we just never generate them when parsing.</p>",
        "id": 488917664,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734122722
    },
    {
        "content": "<p>but that is just a guess</p>",
        "id": 488917810,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734122748
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> or <span class=\"user-mention\" data-user-id=\"453336\">@Joshua Warner</span> would know a lot better</p>",
        "id": 488917937,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734122765
    },
    {
        "content": "<p>Yeah, we support 1 element tuples as far as I can tell past parsing. We need them for the custom types approach to aliasing types</p>",
        "id": 488918144,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734122861
    },
    {
        "content": "<p>Because <code>MyStr := Str</code> will be a 1-tuple around Str</p>",
        "id": 488918246,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734122891
    },
    {
        "content": "<p>It's more that Roc stays a small language by only including features that we need, and there doesn't seem to be a good use case for 1-tuples being definable as literals</p>",
        "id": 488918486,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734123008
    },
    {
        "content": "<p>okay then, so then that needs to be implemented because it appears to view <code>(T)</code> as a (valid) type</p>",
        "id": 488918869,
        "sender_full_name": "Wizard ish",
        "timestamp": 1734123213
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> what do you think <code>func : (x,y-&gt;z)</code> should parse to?</p>",
        "id": 488919977,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734123632
    },
    {
        "content": "<p>oh and something else i realized, <code>e</code> is a type extension, so how should that go  over, as one cannot ask for the <code>rest</code> of a functions fields...</p>",
        "id": 488920886,
        "sender_full_name": "Wizard ish",
        "timestamp": 1734123995
    },
    {
        "content": "<p>wait can tuples even have extensions?</p>",
        "id": 488921360,
        "sender_full_name": "Wizard ish",
        "timestamp": 1734124149
    },
    {
        "content": "<blockquote>\n<p>For that to be a tuple, it would have to be <code>tup : (x,(y-&gt;z))</code></p>\n</blockquote>",
        "id": 488921726,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734124320
    },
    {
        "content": "<p>Your suggestion is my vote</p>",
        "id": 488921779,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734124326
    },
    {
        "content": "<p>That's already how we format tuples in type signatures with functions in them</p>",
        "id": 488921799,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734124341
    },
    {
        "content": "<p>and can tuples have extensions?</p>",
        "id": 488921864,
        "sender_full_name": "Wizard ish",
        "timestamp": 1734124373
    },
    {
        "content": "<p>Tuples can have extensions</p>",
        "id": 488921880,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1734124383
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> so if we wanted what you just asked about to be a function, we should remove the parens</p>",
        "id": 488921936,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734124419
    },
    {
        "content": "<p>That's important at least in the type system. I'm not sure I've ever seen real code that annotated such a type, where the more general annotation enabled by extensions was important</p>",
        "id": 488921944,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1734124423
    },
    {
        "content": "<p>But even with parens it would be a 2 argument function to me</p>",
        "id": 488921961,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734124434
    },
    {
        "content": "<p>so should <code>(x)y</code> be interpreted as a singleton tuple with extension <code>y</code> or just the types <code>x</code> and <code>y</code></p>",
        "id": 488922025,
        "sender_full_name": "Wizard ish",
        "timestamp": 1734124449
    },
    {
        "content": "<p>I don't believe we support that syntax</p>",
        "id": 488922052,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734124467
    },
    {
        "content": "<p>Yeah we do :)</p>",
        "id": 488922071,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1734124475
    },
    {
        "content": "<p><code>(x)y</code> is a tuple with an ext, but <code>(x) y</code> is a type application</p>",
        "id": 488922088,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1734124481
    },
    {
        "content": "<p>Oh, cool!</p>",
        "id": 488922095,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734124483
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/stream/316715-contributing/topic/Ambigous.20syntax.20for.20tuples.20and.20functions/near/488921936\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> so if we wanted what you just asked about to be a function, we should remove the parens</p>\n</blockquote>\n<p>Yeah, I would expect the formatter to remove the parens</p>",
        "id": 488922114,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734124499
    },
    {
        "content": "<p>basically the code currently thinks <code>(f,ww-&gt;p)e</code> is a tuple with an extension <code>e</code>, but is this incorrect?</p>",
        "id": 488922131,
        "sender_full_name": "Wizard ish",
        "timestamp": 1734124505
    },
    {
        "content": "<p>That sounds wrong to me <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 488922177,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1734124532
    },
    {
        "content": "<p>The only reason we really use that at outside of signatures at the moment is for tuple getters</p>",
        "id": 488922179,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734124533
    },
    {
        "content": "<p>should i change this then?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">fields</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">ext</span><span class=\"p\">.</span><span class=\"n\">is_some</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"o\">..</span><span class=\"p\">.}</span>\n</code></pre></div>\n<p>to just</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">fields</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"o\">..</span><span class=\"p\">.}</span>\n</code></pre></div>\n<p>(in the type in parens function)<br>\njust making sure because this is a little bit confusing</p>",
        "id": 488922362,
        "sender_full_name": "Wizard ish",
        "timestamp": 1734124617
    },
    {
        "content": "<p>Oh wait sorry, I read that wrong</p>",
        "id": 488922529,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1734124687
    },
    {
        "content": "<p>That does look correct</p>",
        "id": 488922552,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1734124697
    },
    {
        "content": "<p>(for some reason my eyes glossed over the <code>e</code> ext in your example)</p>",
        "id": 488922579,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1734124713
    },
    {
        "content": "<p>so it <strong>should</strong> be a tuple ?</p>",
        "id": 488922689,
        "sender_full_name": "Wizard ish",
        "timestamp": 1734124770
    },
    {
        "content": "<p>or a function, or should it be rejected?</p>",
        "id": 488923520,
        "sender_full_name": "Wizard ish",
        "timestamp": 1734125137
    },
    {
        "content": "<p>It should be a tuple with a single element, which is itself a function.</p>",
        "id": 488924237,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1734125451
    },
    {
        "content": "<p>got it</p>",
        "id": 488924344,
        "sender_full_name": "Wizard ish",
        "timestamp": 1734125502
    },
    {
        "content": "<p>so then this diff <em>is</em> simply correct<br>\n<a class=\"message-link\" href=\"/#narrow/channel/316715-contributing/topic/Ambigous.20syntax.20for.20tuples.20and.20functions/near/488916691\">#contributing &gt; Ambigous syntax for tuples and functions @ 💬</a></p>",
        "id": 488924558,
        "sender_full_name": "Wizard ish",
        "timestamp": 1734125599
    },
    {
        "content": "<p>Yes, that looks right to me</p>",
        "id": 488924592,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1734125622
    },
    {
        "content": "<p>What change triggered that?</p>",
        "id": 488924603,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1734125627
    },
    {
        "content": "<p>Interesting. I would have guess that it was something that shouldn't parse.</p>",
        "id": 488924669,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734125644
    },
    {
        "content": "<p>I guess if it parses as a tuple with a function, the formatter would add in the extra parents which is fine</p>",
        "id": 488924752,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734125688
    },
    {
        "content": "<p>Why would there be extra parens?</p>",
        "id": 488924803,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1734125712
    },
    {
        "content": "<p><a href=\"https://github.com/wizard7377/roc/commit/7465a0c3ea02f6b2651559b5bfc04d04bc5d9852\">this one</a> and then also <a href=\"https://github.com/wizard7377/roc/commit/92ed5a56b7db717f89aba137f31e00223f706ce0\">this one</a></p>",
        "id": 488924830,
        "sender_full_name": "Wizard ish",
        "timestamp": 1734125726
    },
    {
        "content": "<p>I would have thought that only these are valid:</p>\n<div class=\"codehilite\"><pre><span></span><code>func : (x,y-&gt;z)\nfunc : x,y-&gt;z\n\ntuple_extension : ((x,y-&gt;z))e\ntuple_extension : (x,(y-&gt;z))e\n</code></pre></div>",
        "id": 488924899,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734125762
    },
    {
        "content": "<blockquote>\n<p>Why would there be extra parens?</p>\n</blockquote>\n<p>function signature in tuple type requires parens</p>",
        "id": 488924956,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734125778
    },
    {
        "content": "<p>Ah; I guess the formatter may add extra parens to be conservative, but it doesn't technically have to</p>",
        "id": 488925027,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1734125831
    },
    {
        "content": "<p>It'll parse fine if it doesn't, in this special case of a 1-elem tuple</p>",
        "id": 488925053,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1734125849
    },
    {
        "content": "<p>I just find it exceptionally strange that this is not a tuple type <code>func : (x,y-&gt;z)</code>, but this is <code>tup: (x,y-&gt;z)e</code></p>",
        "id": 488925202,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734125907
    },
    {
        "content": "<p>feels like a huge inconsistency even if it can technically parse</p>",
        "id": 488925255,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734125941
    },
    {
        "content": "<p>TBH tuples are very weird at a syntactic level. As are exts.</p>",
        "id": 488925279,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1734125953
    },
    {
        "content": "<p>This grammar is balancing on a knife's edge ;)</p>",
        "id": 488925317,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1734125968
    },
    {
        "content": "<p>ok yep that's the only test that failed, and is now updated, pr should be ready to go in like 10 minutes</p>",
        "id": 488925456,
        "sender_full_name": "Wizard ish",
        "timestamp": 1734126013
    },
    {
        "content": "<p>Also, to be fair, extension are changing and it will fix up this case</p>",
        "id": 488925506,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734126040
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>func : (x,y-&gt;z)\nfunc : x,y-&gt;z\n\ntuple_extension : ((x,y-&gt;z), ..e)\ntuple_extension : (x,(y-&gt;z), ..e)\n</code></pre></div>",
        "id": 488925545,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734126067
    },
    {
        "content": "<p>Now the parens around the function are clearly needed</p>",
        "id": 488925566,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734126079
    },
    {
        "content": "<p>Oh cool that's so much nicer to parse <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span></p>",
        "id": 488925568,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1734126083
    },
    {
        "content": "<p>also why not use one deliminator for tuples and another for just grouping (in types)</p>",
        "id": 488925664,
        "sender_full_name": "Wizard ish",
        "timestamp": 1734126131
    },
    {
        "content": "<p>See <a href=\"https://github.com/roc-lang/roc/issues/7091\">https://github.com/roc-lang/roc/issues/7091</a><br>\nfor Simplify Types with <code>..</code> Spread Syntax</p>",
        "id": 488925666,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734126131
    },
    {
        "content": "<blockquote>\n<p>also why not use one deliminator for tuples and another for just grouping (in types)</p>\n</blockquote>\n<p>Reasonable question. Not sure if alternative delimiters were considered when discussing the implementation for tuples.</p>",
        "id": 488925894,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1734126251
    },
    {
        "content": "<p>I don't think it was every discussion. People are too used to tuples being <code>(..., ..., ...)</code></p>",
        "id": 488926773,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734126710
    },
    {
        "content": "<p>We did discuss maybe following python and allowing a one tuple as <code>(...,)</code></p>",
        "id": 488926848,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734126729
    },
    {
        "content": "<p>Summary was that we really hadn't seen demand for it in roc, but sounds fine if needed.</p>",
        "id": 488926899,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734126760
    },
    {
        "content": "<p>yeah I'm default leaning towards not having 1-tuple syntax, based on what we've discussed so far, but it's conceivable that the tradeoffs could change in the future</p>",
        "id": 488932830,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734129750
    },
    {
        "content": "<p>I just proposed a way to resolve this ambiguity in <a class=\"stream-topic\" data-stream-id=\"304641\" href=\"/#narrow/channel/304641-ideas/topic/Change.20tuple.20syntax.20from.20.28.29.20to.20.7B.7D.3F\">#ideas &gt; Change tuple syntax from () to {}?</a></p>",
        "id": 489495337,
        "sender_full_name": "Sky Rose",
        "timestamp": 1734444864
    }
]