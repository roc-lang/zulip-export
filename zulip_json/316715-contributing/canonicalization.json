[
    {
        "content": "<p>Just to make sure that I'm on the right track for <a href=\"https://github.com/roc-lang/roc/issues/5235\">https://github.com/roc-lang/roc/issues/5235</a> <br>\nThe point of interest is the <code>crates/compiler/can/src/expr.rs</code>, <code>canonicalize_expr()</code> where it matches to <code>ast::Expr::Str</code>, right?</p>",
        "id": 345910735,
        "sender_full_name": "itmuckel",
        "timestamp": 1680260361
    },
    {
        "content": "<p>yes</p>",
        "id": 345911416,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1680260552
    },
    {
        "content": "<p>So the PlainLine-Case here:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">flatten_str_literal</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"n\">env</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Env</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">var_store</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">VarStore</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">scope</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Scope</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">literal</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">StrLiteral</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">(</span><span class=\"n\">Expr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Output</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">ast</span>::<span class=\"n\">StrLiteral</span>::<span class=\"o\">*</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">literal</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">PlainLine</span><span class=\"p\">(</span><span class=\"n\">str_slice</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Expr</span>::<span class=\"n\">Str</span><span class=\"p\">((</span><span class=\"o\">*</span><span class=\"n\">str_slice</span><span class=\"p\">).</span><span class=\"n\">into</span><span class=\"p\">()),</span><span class=\"w\"> </span><span class=\"n\">Output</span>::<span class=\"n\">default</span><span class=\"p\">()),</span>\n<span class=\"w\">        </span><span class=\"n\">Line</span><span class=\"p\">(</span><span class=\"n\">segments</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">flatten_str_lines</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">var_store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">scope</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">segments</span><span class=\"p\">]),</span>\n<span class=\"w\">        </span><span class=\"n\">Block</span><span class=\"p\">(</span><span class=\"n\">lines</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">flatten_str_lines</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">var_store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">scope</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lines</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>needs similar Unicode handling like it happens in <code>flatten_str_lines(...)</code> instead of just taking the inner string slice and turning it into an expression without checking?</p>",
        "id": 345914625,
        "sender_full_name": "itmuckel",
        "timestamp": 1680261423
    },
    {
        "content": "<p>looks like it</p>",
        "id": 345918039,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1680262384
    },
    {
        "content": "<p>Okay, I looked into how the parser creates string literals and actually it should already recognize utf8 and create a <code>StrLiteral::Line</code> (or <code>StrLiteral::Block</code>) out of it. This should actually work fine and create multiple segments out of <code>\"\\u(C3)\\u(28)\"</code>, but as I understand it the whole sequence isn't valid utf-8, so it should be checked as a whole? As a side note, the repl outputs Ã( for the sequence, which could be valid?</p>",
        "id": 345927706,
        "sender_full_name": "itmuckel",
        "timestamp": 1680264676
    },
    {
        "content": "<p>that is also the output that python gives for those octets</p>",
        "id": 345930180,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1680265251
    },
    {
        "content": "<p>probably best to try this with rust, which does actual validation</p>",
        "id": 345930476,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1680265308
    },
    {
        "content": "<p>yes, interesting</p>\n<div class=\"codehilite\"><pre><span></span><code> rustc -o main main.rs\nerror: incorrect unicode escape sequence\n --&gt; main.rs:2:15\n  |\n2 |     println!(&quot;\\u(C3)\\u(28)!&quot;);\n  |               ^^^ incorrect unicode escape sequence\n  |\n  = help: format of unicode escape sequences is `\\u{...}`\n\nerror: incorrect unicode escape sequence\n --&gt; main.rs:2:21\n  |\n2 |     println!(&quot;\\u(C3)\\u(28)!&quot;);\n  |                     ^^^ incorrect unicode escape sequence\n  |\n  = help: format of unicode escape sequences is `\\u{...}`\n\nerror: aborting due to 2 previous errors\n\nexit status 1\n</code></pre></div>",
        "id": 345946331,
        "sender_full_name": "itmuckel",
        "timestamp": 1680268439
    },
    {
        "content": "<p>thisis a rust syntax error</p>",
        "id": 345946606,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1680268496
    },
    {
        "content": "<p>Wait, no, I just used the wrong syntax <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<div class=\"codehilite\"><pre><span></span><code> rustc -o main main.rs\n ./main\nÃ(!\n\n</code></pre></div>",
        "id": 345946628,
        "sender_full_name": "itmuckel",
        "timestamp": 1680268500
    },
    {
        "content": "<p>So it parses correctly actually. I don't think this is a bug in roc <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 345946760,
        "sender_full_name": "itmuckel",
        "timestamp": 1680268527
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> what is happening here?</p>",
        "id": 345946905,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1680268548
    },
    {
        "content": "<p>I think I know what he means, technically C328 is not a correct utf-8 encoded sequence</p>",
        "id": 345948328,
        "sender_full_name": "itmuckel",
        "timestamp": 1680268858
    },
    {
        "content": "<p>although \\u{c328} returns a value <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 345948484,
        "sender_full_name": "itmuckel",
        "timestamp": 1680268884
    },
    {
        "content": "<p>yeah I'm surprised by Rust's behavior here: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=c2a6da700293f9b6b96b7940cd597ff5\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=c2a6da700293f9b6b96b7940cd597ff5</a> <span aria-label=\"face with raised eyebrow\" class=\"emoji emoji-1f928\" role=\"img\" title=\"face with raised eyebrow\">:face_with_raised_eyebrow:</span></p>",
        "id": 345948872,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1680268961
    },
    {
        "content": "<p>if you ask it what it thinks of those two bytes encoded as UTF-8, it gives an error</p>",
        "id": 345948968,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1680268979
    },
    {
        "content": "<p>but you can put them in a string literal and it's fine with it!</p>",
        "id": 345949035,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1680268988
    },
    {
        "content": "<p>hmm, ok I think I see what's happening</p>",
        "id": 345950145,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1680269230
    },
    {
        "content": "<p>it's treating it as a 32-bit scalar value</p>",
        "id": 345950198,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1680269239
    },
    {
        "content": "<p>and the byte <code>0xC3u8</code> is not valid, but <code>0xC3u32</code> is a valid Unicode scalar value - and in string escapes, it's padded to <code>u32</code> automatically</p>",
        "id": 345950321,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1680269262
    },
    {
        "content": "<p>ok, so I think the conclusion is that it looks wrong but it's actually correct <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 345950662,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1680269333
    },
    {
        "content": "<p>Okay, so Issue should be closed? <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 345950888,
        "sender_full_name": "itmuckel",
        "timestamp": 1680269367
    },
    {
        "content": "<p>my mistake!</p>",
        "id": 345950889,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1680269367
    },
    {
        "content": "<p>yeah, with a link to this discussion probably <a href=\"#narrow/stream/316715-contributing/topic/canonicalization/near/345927706\">https://roc.zulipchat.com/#narrow/stream/316715-contributing/topic/canonicalization/near/345927706</a></p>",
        "id": 345950929,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1680269375
    },
    {
        "content": "<p>all good, helped me set up the project and jump into the compiler <span aria-label=\"nerd\" class=\"emoji emoji-1f913\" role=\"img\" title=\"nerd\">:nerd:</span></p>",
        "id": 345951060,
        "sender_full_name": "itmuckel",
        "timestamp": 1680269402
    },
    {
        "content": "<p>awesome! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 345951264,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1680269447
    },
    {
        "content": "<p>if you're interested in getting into another canonicalization bug, here's one: <a href=\"https://github.com/roc-lang/roc/issues/3296\">https://github.com/roc-lang/roc/issues/3296</a></p>",
        "id": 345951485,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1680269501
    },
    {
        "content": "<p>I don't know what abilities are yet and I'm not sure how much time I'll get the next week. If it's not urgent and the fix doesn't involve understanding the whole project, I'm interested <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 345971370,
        "sender_full_name": "itmuckel",
        "timestamp": 1680273539
    },
    {
        "content": "<p>it's definitely not urgent, and shouldn't require much understanding!</p>",
        "id": 346011499,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1680282246
    },
    {
        "content": "<p>happy to explain more about abilities and answer questions about the project once you're ready to get started <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 346011562,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1680282261
    },
    {
        "content": "<p>btw: I don't think I can close this: <a href=\"https://github.com/roc-lang/roc/issues/5235\">https://github.com/roc-lang/roc/issues/5235</a> :')</p>",
        "id": 346054175,
        "sender_full_name": "itmuckel",
        "timestamp": 1680295711
    },
    {
        "content": "<p>closed it!</p>",
        "id": 346054359,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1680295785
    }
]