[
    {
        "content": "<p>I started debugging glue on basic-cli. When I run it on <code>main.roc</code>, it's falling into <a href=\"https://github.com/roc-lang/roc/blob/266e592ae2596a93d13058f19fec123a72858751/crates/glue/src/types.rs#L982\">this <code>unreachable!</code></a> because it finds a <code>Result</code> but type is <code>Layout::Struct</code>.</p>\n<p>I believe it should be <code>Layout::Union</code> so that it matches <a href=\"https://github.com/roc-lang/roc/blob/266e592ae2596a93d13058f19fec123a72858751/crates/glue/src/types.rs#L899\">this case</a>.</p>",
        "id": 339224666,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677799729
    },
    {
        "content": "<p>I'm trying to figure out how to get the position in the source code</p>",
        "id": 339225190,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677800040
    },
    {
        "content": "<p><code>Layout::Struct</code> is generated for <code>Result</code>s if either the ok or error type is void, for example <code>Result Foo []</code> can only ever be <code>Ok Foo</code>, so we compile it to just the layout of <code>Foo</code></p>",
        "id": 339225285,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1677800093
    },
    {
        "content": "<p>Unfortunately there is presently not enough debug information to trace you back to the source code position</p>",
        "id": 339225330,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1677800117
    },
    {
        "content": "<p>however, if you print out the types reached to that position (<code>dbg!(subs.dbg(var))</code>) it might give you enough hints to contextualize where the type was defined</p>",
        "id": 339225429,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1677800174
    },
    {
        "content": "<p>Oh, I see. So we should be handling this case then.</p>",
        "id": 339226217,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677800751
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"454654\">Ayaz Hafiz</span> <a href=\"#narrow/stream/316715-contributing/topic/Broken.20glue/near/339225429\">said</a>:</p>\n<blockquote>\n<p>however, if you print out the types reached to that position (<code>dbg!(subs.dbg(var))</code>) it might give you enough hints to contextualize where the type was defined</p>\n</blockquote>\n<p>Ok, it's a <code>Result {} []</code> somewhere</p>",
        "id": 339226300,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677800776
    },
    {
        "content": "<p>Weirdly I can't seem to find one like that in <code>basic-cli</code>. There are a few <code>Result {} {}</code> but I believe that would be <code>Layout::Union</code> following your logic.</p>",
        "id": 339226520,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677800899
    },
    {
        "content": "<p>Ah, <code>Task</code> holds a <code>Result</code> and <code>main.roc</code> has a <code>Task {} []</code></p>",
        "id": 339229007,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677802238
    },
    {
        "content": "<p>Ok, all is clear then. This is a real case and we have to handle <code>Layout::Struct</code> <code>Result</code>.</p>",
        "id": 339229424,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677802447
    },
    {
        "content": "<p>I added that case and now it doesn't crash, but it also doesn't generate anything</p>",
        "id": 339322385,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677844246
    },
    {
        "content": "<p>It's finding only what's under <a href=\"https://github.com/roc-lang/basic-cli/blob/main/src/main.roc\">main.roc</a> and not all the other modules such as <code>Effect</code> and its dependencies.</p>",
        "id": 339323044,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677844408
    },
    {
        "content": "<p>it crawls from the type of <code>mainForHost</code> (or should, anyway)</p>",
        "id": 339323401,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1677844498
    },
    {
        "content": "<p>Right, I think it is. However, <code>mainForHost</code> references <code>Task</code> which references <code>InternalTask</code> which references  <code>Effect</code> and it doesn't seem to find any of those.</p>",
        "id": 339323573,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677844558
    },
    {
        "content": "<p>more specifically, no rust code is generated for those types?</p>",
        "id": 339324548,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1677844813
    },
    {
        "content": "<p>Correct. This is all it generates:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// ⚠️ GENERATED CODE ⚠️ - this entire file was generated by the `roc glue` CLI command</span>\n\n<span class=\"cp\">#![allow(unused_unsafe)]</span>\n<span class=\"cp\">#![allow(dead_code)]</span>\n<span class=\"cp\">#![allow(unused_mut)]</span>\n<span class=\"cp\">#![allow(non_snake_case)]</span>\n<span class=\"cp\">#![allow(non_camel_case_types)]</span>\n<span class=\"cp\">#![allow(non_upper_case_globals)]</span>\n<span class=\"cp\">#![allow(clippy::undocumented_unsafe_blocks)]</span>\n<span class=\"cp\">#![allow(clippy::redundant_static_lifetimes)]</span>\n<span class=\"cp\">#![allow(clippy::unused_unit)]</span>\n<span class=\"cp\">#![allow(clippy::missing_safety_doc)]</span>\n<span class=\"cp\">#![allow(clippy::let_and_return)]</span>\n<span class=\"cp\">#![allow(clippy::missing_safety_doc)]</span>\n<span class=\"cp\">#![allow(clippy::redundant_static_lifetimes)]</span>\n<span class=\"cp\">#![allow(clippy::needless_borrow)]</span>\n<span class=\"cp\">#![allow(clippy::clone_on_copy)]</span>\n</code></pre></div>",
        "id": 339324833,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677844895
    },
    {
        "content": "<p>Which makes sense because these are all the types it finds:</p>\n<div class=\"codehilite\"><pre><span></span><code>    types: [\n        Unit,\n        EmptyTagUnion,\n        RocResult(\n            TypeId(\n                0,\n            ),\n            TypeId(\n                1,\n            ),\n        ),\n        Function {\n            name: &quot;TODO_roc_function_71&quot;,\n            args: [\n                TypeId(\n                    0,\n                ),\n            ],\n            ret: TypeId(\n                2,\n            ),\n        },\n    ],\n</code></pre></div>",
        "id": 339325089,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677844957
    },
    {
        "content": "<p>Just the stuff on <a href=\"https://github.com/roc-lang/basic-cli/blob/main/src/main.roc\">main.roc</a> if I'm reading correctly</p>",
        "id": 339325310,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677845001
    },
    {
        "content": "<p>and all of those are skipped here: <a href=\"https://github.com/roc-lang/roc/blob/3b5f6ef8285fb4177f24c7094c807ca9fb6485ec/crates/glue/src/rust_glue.rs#L282-L299\">https://github.com/roc-lang/roc/blob/3b5f6ef8285fb4177f24c7094c807ca9fb6485ec/crates/glue/src/rust_glue.rs#L282-L299</a></p>",
        "id": 339325543,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677845050
    },
    {
        "content": "<p><code>mainForHost</code> returns a <code>Task</code> though, I think the debug output above says it returns a <code>Result</code>. I guess that's getting optimized away?</p>",
        "id": 339326020,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677845170
    },
    {
        "content": "<p>I see, I think this makes sense.</p>",
        "id": 339326251,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1677845228
    },
    {
        "content": "<p>an effect is internally generated as a thunk (<code>Effect a := {} -&gt; a</code>). I'm assuming you're looking at our <code>main</code> branch, and there we don't generate anything for functions yet</p>",
        "id": 339326599,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1677845308
    },
    {
        "content": "<p>we have an experimental branch that does handle functions</p>",
        "id": 339326690,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1677845332
    },
    {
        "content": "<p>but some other stuff is still broken on that branch</p>",
        "id": 339326727,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1677845342
    },
    {
        "content": "<p>Oh. Yes, I'm on <code>main</code>. Do you mean <code>glue</code> can generate functions in that experimental branch?</p>",
        "id": 339327143,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677845428
    },
    {
        "content": "<p>it can generate glue for function types, yes</p>",
        "id": 339327230,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1677845450
    },
    {
        "content": "<p>our actual compilation scheme for functions is a bit involved</p>",
        "id": 339327285,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1677845465
    },
    {
        "content": "<p>I see. I wonder if the existing <a href=\"https://github.com/roc-lang/basic-cli/blob/main/src/src/glue.rs\">glue code in basic-cli</a> was generated using glue on that branch.</p>",
        "id": 339327473,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677845513
    },
    {
        "content": "<p>Maybe that's all I need to do</p>",
        "id": 339327592,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677845534
    },
    {
        "content": "<p>(the branch with functions is <code>glue-getters-rtfeldman</code>, but it's in an unfinished state)</p>",
        "id": 339327758,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1677845594
    },
    {
        "content": "<p>well that glue file does not contain anything for <code>Task</code> or <code>Effect</code></p>",
        "id": 339327812,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1677845611
    },
    {
        "content": "<p>Yeah, so that might not be the issue then. What I wanted to generate was error types like these: <a href=\"https://github.com/roc-lang/basic-cli/blob/main/src/InternalFile.roc\">https://github.com/roc-lang/basic-cli/blob/main/src/InternalFile.roc</a></p>",
        "id": 339328173,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677845724
    },
    {
        "content": "<p>Which were somehow generated here: <a href=\"https://github.com/roc-lang/basic-cli/blob/main/src/src/file_glue.rs\">https://github.com/roc-lang/basic-cli/blob/main/src/src/file_glue.rs</a></p>",
        "id": 339328289,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677845757
    },
    {
        "content": "<p>right, but from what I know that type needs to be reachable from the type of <code>mainForHost</code> and it isn't because glue stops when it hits a function type and it always does for basic-cli</p>",
        "id": 339328414,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1677845792
    },
    {
        "content": "<p>so I'm not sure how that glue was generated</p>",
        "id": 339328438,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1677845803
    },
    {
        "content": "<p>Right, that's what I understood from you. Maybe at some point there was a version of glue that generated all the types that <code>Task</code>and <code>Effect</code> reference but nothing for themselves?</p>",
        "id": 339328749,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677845899
    },
    {
        "content": "<p>Sorry if I'm saying something stupid, this is my first endeavor into the compiler :D</p>",
        "id": 339328891,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677845946
    },
    {
        "content": "<p>yeah no clearly at some point this glue was generated.</p>",
        "id": 339329186,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1677846025
    },
    {
        "content": "<p>Richard will know all of the details</p>",
        "id": 339329238,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1677846038
    },
    {
        "content": "<p>Tried running it on that branch and it hit the same <code>unreachable!()</code> for the <code>Layout::Struct</code> <code>Result</code>. I added that case and it generated some code for function as you said it would but still nothing for the types.</p>",
        "id": 339330987,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677846517
    },
    {
        "content": "<p>I'll wait for Richard to give me some more context</p>",
        "id": 339331029,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677846532
    },
    {
        "content": "<p>In case it helps, my workaround for the fact that glue doesn't handle functions, is to just define a constant of each type you care about! This works as long as the types don't have lambdas inside them!</p>",
        "id": 339333378,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1677847236
    },
    {
        "content": "<p>At least that used to work a few months ago</p>",
        "id": 339333525,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1677847280
    },
    {
        "content": "<p>in the <code>main.roc</code> you mean?</p>",
        "id": 339334201,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1677847470
    },
    {
        "content": "<p>yeah</p>",
        "id": 339334403,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1677847531
    },
    {
        "content": "<p>whatever Roc file you pass to the glue generator</p>",
        "id": 339334579,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1677847567
    },
    {
        "content": "<p>Just tried that but it failed because of the unused constant:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;main&#39; panicked at &#39;not yet implemented: Gracefully report compilation problems during glue generation:\n\n[UnusedDef(`16.IdentId(2)`, @233-240)], []&#39;, crates/glue/src/load.rs:125:9\n</code></pre></div>",
        "id": 339336394,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677848071
    },
    {
        "content": "<p>you might be able to get away with adding</p>\n<div class=\"codehilite\"><pre><span></span><code>main = \n    when someConstant is\n        _ -&gt; rest of main\n</code></pre></div>",
        "id": 339337329,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1677848364
    },
    {
        "content": "<p>Ooh, that did work! Thanks</p>",
        "id": 339338315,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677848609
    },
    {
        "content": "<p>It still doesn't work as it is on <code>main</code> because of the unreachable crash for <code>Result</code>, but it does if handle that case</p>",
        "id": 339338500,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677848664
    },
    {
        "content": "<p>you can make a PR for handling that result case</p>",
        "id": 339339068,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1677848798
    },
    {
        "content": "<p>then we'll merge it in everywhere</p>",
        "id": 339339108,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1677848803
    },
    {
        "content": "<p>Yeah but I think that Roc programs would still crash becase the memory layout won't line up for things returning <code>Result _ []</code></p>",
        "id": 339339382,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677848822
    },
    {
        "content": "<p>I think <code>roc_std</code> is always using the union layout for <code>Result</code></p>",
        "id": 339339662,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677848886
    },
    {
        "content": "<p>ah, yes that is correct</p>",
        "id": 339339742,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1677848903
    },
    {
        "content": "<p>so that needs some special handling</p>",
        "id": 339339803,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1677848919
    },
    {
        "content": "<p>which is maybe why the file example is marked as \"broken\" in <code>basic-cli</code></p>",
        "id": 339339862,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677848933
    },
    {
        "content": "<p>right</p>",
        "id": 339339976,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1677848959
    },
    {
        "content": "<p>Should <code>roc_std</code> expose a <code>NoErrorResult</code> or something like that?</p>",
        "id": 339340750,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677849131
    },
    {
        "content": "<p>hmm I'm not sure</p>",
        "id": 339341303,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1677849258
    },
    {
        "content": "<p>You could mess up and use it when you're supposed to use the normal <code>Result</code>. However, you can also mess up by returning any other invalid type.</p>",
        "id": 339341335,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677849266
    },
    {
        "content": "<p>Will glue eventually expose a trait for the implementation of the <code>roc_fx_</code> functions so that you get type errors in the platform?</p>",
        "id": 339341666,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677849357
    },
    {
        "content": "<p>well the alternative is to generate \"hidden\" glue for the \"noerrorresult\" (which is just another roc value) and then expose it after wrapping in a normal <code>RocResult</code></p>",
        "id": 339342596,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1677849576
    },
    {
        "content": "<p>Not sure I follow how that would work in practice. Would you generate a type per Effect function?</p>",
        "id": 339344090,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677849958
    },
    {
        "content": "<p><code>roc_fx_</code> functions should be going away when glue gets more powerful</p>",
        "id": 339383229,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1677859125
    },
    {
        "content": "<p>They will be replaced with tag union, state machine based effects</p>",
        "id": 339383334,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1677859153
    },
    {
        "content": "<p>Richard has talked about the new approach in some previous meetups.</p>",
        "id": 339383414,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1677859171
    },
    {
        "content": "<p>Maybe <code>roc_fx_</code> functions were not directly mentioned, but they should become redundant like the hosted module and I believe <code>Effect</code> in general</p>",
        "id": 339383670,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1677859220
    },
    {
        "content": "<p>Also, for the glue gen you want, can you make a dummy main file that just has a return type of the types you want generated. No tasks at all?</p>",
        "id": 339383878,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1677859269
    },
    {
        "content": "<p>Yeah, that’ll probably work as I’m not returning any <code>Result _ []</code>. Will give it a try tonight!</p>",
        "id": 339403241,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677864265
    },
    {
        "content": "<p>Thanks</p>",
        "id": 339403254,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1677864267
    },
    {
        "content": "<p>Working on <a href=\"https://github.com/roc-lang/basic-cli/issues/145\">https://github.com/roc-lang/basic-cli/issues/145</a> I think I ran into a similar issue, basically; how do I regenerate the glue for basic-cli? </p>\n<p><code>roc glue ../roc/crates/glue/src/RustGlue.roc platform/src/ platform/main.roc</code> outputs an entirely different file structure than the existing one with <code>file_glue.rs, dir_glue.rs, command_glue.rs</code></p>\n<ul>\n<li>instead I get <code>mod.rs, aarch64.rs, wasm32.rs</code> - and the files are not updated.  </li>\n</ul>\n<p>(<span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> refers to converting it to use <code>RustGlue</code> here: <a href=\"#narrow/stream/316715-contributing/topic/basic-cli.20glue/near/397443629\">https://roc.zulipchat.com/#narrow/stream/316715-contributing/topic/basic-cli.20glue/near/397443629</a>)</p>",
        "id": 410577723,
        "sender_full_name": "Johan Lindskogen",
        "timestamp": 1703975748
    },
    {
        "content": "<p>Glue for basic-cli has basically been manually put together rn. I have a WIP PR to make it so we can regenerate using a script, but I cant remember where I got to with that.</p>",
        "id": 410580968,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1703979414
    },
    {
        "content": "<p>Are you trying to add new features? If so you can make a fake platform and then just include the types you want and glue can generate for those types you need.</p>",
        "id": 410580997,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1703979469
    },
    {
        "content": "<p>This is the PR I'm refrring to <a href=\"https://github.com/roc-lang/basic-cli/pull/135\">https://github.com/roc-lang/basic-cli/pull/135</a></p>",
        "id": 410581155,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1703979622
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/316715-contributing/topic/Broken.20glue/near/410580997\">said</a>:</p>\n<blockquote>\n<p>Are you trying to add new features? If so you can make a fake platform and then just include the types you want and glue can generate for those types you need.</p>\n</blockquote>\n<p>Yes, I am adding <code>Path.x</code> methods in this issue <a href=\"https://github.com/roc-lang/basic-cli/issues/145\">https://github.com/roc-lang/basic-cli/issues/145</a></p>",
        "id": 410809131,
        "sender_full_name": "Johan Lindskogen",
        "timestamp": 1704182717
    },
    {
        "content": "<p>I've been updating that PR, it looks like it should be all OK to me, but for some reason it is getting stuck in CI creating a directory. </p>\n<p>I did update <code>examples/dir.roc</code> to make it clearer, but I don't see how this change is affecting tests in CI.</p>",
        "id": 410821346,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1704189436
    },
    {
        "content": "<p>I'll check it out</p>",
        "id": 410825259,
        "sender_full_name": "Anton",
        "timestamp": 1704191263
    },
    {
        "content": "<p>I submitted a PR if any of you would like to dissect further: <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span>  <a href=\"https://github.com/roc-lang/basic-cli/pull/150\">https://github.com/roc-lang/basic-cli/pull/150</a></p>",
        "id": 410909325,
        "sender_full_name": "Johan Lindskogen",
        "timestamp": 1704231491
    },
    {
        "content": "<p>This is caused by <a href=\"https://github.com/roc-lang/roc/issues/5924\">#5924</a>, everybody seems to be hitting it now, I'm working on it today.</p>",
        "id": 410976446,
        "sender_full_name": "Anton",
        "timestamp": 1704271316
    }
]