[
    {
        "content": "<p>What functions should we be duplicating and adding <code>!</code> versions of for now. For example <code>List.map!</code> and <code>List.walk!</code>. The code in <a class=\"stream-topic\" data-stream-id=\"231634\" href=\"/#narrow/channel/231634-beginners/topic/Handling.20List.2Ewalk.20Result.20Bool\">#beginners &gt; Handling List.walk Result Bool</a> is an example where we need a second version of the function. Otherwise the end users always has to manually write a recursive function.</p>",
        "id": 491114929,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735414628
    },
    {
        "content": "<p>I get that eventually for loops will deal with some of these use cases, but for loops may not come for quite a while, so a solution that can be used now seems beneficial.</p>",
        "id": 491114957,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735414676
    },
    {
        "content": "<p><code>walk!</code> for sure</p>",
        "id": 491117428,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735417154
    },
    {
        "content": "<p>I'd like to hold off on <code>map!</code> until we've seen some use cases where it's desirable over <code>for_each!</code></p>",
        "id": 491117460,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735417197
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/issues/7425\">https://github.com/roc-lang/roc/issues/7425</a></p>",
        "id": 491120126,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735419822
    },
    {
        "content": "<p>For List.walk!</p>",
        "id": 491120133,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735419833
    },
    {
        "content": "<p>Someone can pick it up first, but it's a pretty good beginner issue</p>",
        "id": 491120181,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735419849
    },
    {
        "content": "<p>Completely new to roc - Does the purity inference work mean that weâ€™ll need a pretty much duplicate stlib? One effectful one pure?</p>",
        "id": 491125104,
        "sender_full_name": "Yunti",
        "timestamp": 1735425064
    },
    {
        "content": "<p>Just for the functions we want to have potentially effectful, but yes.</p>",
        "id": 491125225,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735425193
    },
    {
        "content": "<p>I don't think so.  Most of the functions that need callbacks that would need to also have effects executed are things like walk and map (and for_each! now).  And many of them will be used little after the introduction of <code>for</code></p>",
        "id": 491125293,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735425252
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"815502\">@Yunti</span> We discussed having effectfulness variables that would allow both in the same function. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-</span><span class=\"nv\">fx</span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-</span><span class=\"nv\">fx</span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"nv\">b</span>\n<span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">items</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">mapper</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nf\">...</span>\n</code></pre></div>\n<p>If <code>mapper</code> was effectful, then <code>List.map</code> would become effectful, and same if <code>mapper</code> was pure. This could help mitigate the problem that ecosystems tend to split into a pure set of functions and a copied set of effectful functions. The problem here was that we now had to expose a lot of complexity that people would need to somewhat understand before using basic parts of Roc.</p>\n<p>We decided that if we could get away without that feature, we'd probably be fine. Luckily, with the addition of <code>for</code> loops and <code>var</code> and other Coming Soon features, we won't have need for very many builtins that are effectful, as Anthony said.</p>",
        "id": 491125642,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735425645
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span>  Thanks for your reply (and Anthony).  Are effectfulness variables essentially polymorphic variables with regard to effects? Would those have hidden the clear difference in the type signature (ie thin vs fat arrows)? Possibly getting off topic now from the original topic.</p>",
        "id": 491259951,
        "sender_full_name": "Yunti",
        "timestamp": 1735551127
    },
    {
        "content": "<p>That's what they are, yes. Roc only has the concept of pure or not pure, we don't have specific effects. So each of those variables would just be an on-off switch.</p>",
        "id": 491308077,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735579474
    },
    {
        "content": "<p>We also used to have ! as an operator that would mark effect use, but that's no longer necessary since we just made it part of the function name</p>",
        "id": 491308268,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735579583
    },
    {
        "content": "<p>We'd probably have to change that back to support effectfulness variables, which is another point against adding them</p>",
        "id": 491308315,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735579624
    },
    {
        "content": "<p>Since just having ! as part of a function's name is <em>really</em> simple</p>",
        "id": 491308359,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735579644
    },
    {
        "content": "<p>Working on <code>List.walk!</code>, and just want to double check I have the desired signature:</p>\n<div class=\"codehilite\"><pre><span></span><code>walk! : List elem, state, (state, elem =&gt; state) =&gt; state\n</code></pre></div>",
        "id": 491319291,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1735586292
    },
    {
        "content": "<p>That looks right to me</p>",
        "id": 491319358,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735586350
    }
]