[
    {
        "content": "<p>I'm going to try implementing a random number generator package but I figure I should double check first if anyone has already implemented one.</p>",
        "id": 290255206,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1658332487
    },
    {
        "content": "<p>I believe <span class=\"user-mention\" data-user-id=\"462053\">@JanCVanB</span> did something around this</p>",
        "id": 290255587,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1658332620
    },
    {
        "content": "<p><a href=\"https://github.com/JanCVanB/roc-random\">https://github.com/JanCVanB/roc-random</a></p>",
        "id": 290255873,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1658332723
    },
    {
        "content": "<p>Nice, good thing I checked then <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 290255970,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1658332765
    },
    {
        "content": "<p><span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 290275089,
        "sender_full_name": "jan kili",
        "timestamp": 1658340769
    },
    {
        "content": "<p>I got it to v1 in a week, a few months ago, and I was looking for feedback for v2.</p>",
        "id": 290275199,
        "sender_full_name": "jan kili",
        "timestamp": 1658340802
    },
    {
        "content": "<p>Feedback, contributions, and collaborators are always welcome! Usage and interest of the lib would make me reprioritize it.</p>",
        "id": 290275374,
        "sender_full_name": "jan kili",
        "timestamp": 1658340863
    },
    {
        "content": "<p>This was my first experience with RNG theory &amp; implementation, so some of my naming/terminology might be off.</p>",
        "id": 290276120,
        "sender_full_name": "jan kili",
        "timestamp": 1658341149
    },
    {
        "content": "<p>Why are you interested in RNG? :) I was drawn to its seemingly-impure nature (potentially conflicting with Roc's purity) and use cases in art, data visualization, simulation, and games.</p>",
        "id": 290276385,
        "sender_full_name": "jan kili",
        "timestamp": 1658341252
    },
    {
        "content": "<p>I was very proud of this plot, even though I never successfully diagnosed the 0 bias: <a href=\"https://raw.githubusercontent.com/JanCVanB/roc-plotters/main/examples/scatter.png\">https://raw.githubusercontent.com/JanCVanB/roc-plotters/main/examples/scatter.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://raw.githubusercontent.com/JanCVanB/roc-plotters/main/examples/scatter.png\"><img src=\"https://uploads.zulipusercontent.net/aa3eeb75ec484bb4e324abb53a824078f9eba664/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f4a616e4356616e422f726f632d706c6f74746572732f6d61696e2f6578616d706c65732f736361747465722e706e67\"></a></div>",
        "id": 290276778,
        "sender_full_name": "jan kili",
        "timestamp": 1658341406
    },
    {
        "content": "<p>I want to implement some of the core package stuff. Random numbers is pretty core!</p>",
        "id": 290277414,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1658341649
    },
    {
        "content": "<p>I'm having a look at the code you've written now and experimenting with back passing to see if it can be used here.</p>",
        "id": 290277537,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1658341683
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"462053\">@JanCVanB</span> I thought we eventually discovered the bug was related to a bug in the roc shifting functions. That should be fixed now (I think?), so maybe updating to latest roc would fix that plot.</p>",
        "id": 290277918,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1658341837
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> Oh yeah, that might have been where I left it.</p>",
        "id": 290278040,
        "sender_full_name": "jan kili",
        "timestamp": 1658341893
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"462053\">@JanCVanB</span> Which pseudoRNG algorithm does the library implement?</p>",
        "id": 290282425,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658343666
    },
    {
        "content": "<p>That a RNG library exists and that we now have <code>expect</code> makes me hyped for a  property-based testing library! <span aria-label=\"happy\" class=\"emoji emoji-1f600\" role=\"img\" title=\"happy\">:happy:</span></p>",
        "id": 290283145,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658343914
    },
    {
        "content": "<p>Here's a proof of concept of my backpassing idea</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">interface</span><span class=\"w\"> </span><span class=\"kt\">Random</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">exposes</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nv\">getSeed</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nv\">u32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nv\">finish</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kt\">Seed</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nv\">run</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">imports</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"></span>\n\n<span class=\"kt\">Generator</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Seed</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">newState</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Seed</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"kt\">Seed</span><span class=\"w\"> </span><span class=\"nf\">:=</span><span class=\"w\"> </span><span class=\"kt\">U32</span><span class=\"w\"></span>\n\n<span class=\"nv\">getSeed</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">U32</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Seed</span><span class=\"w\"></span>\n<span class=\"nv\">getSeed</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">seed</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"kt\">Seed</span><span class=\"w\"> </span><span class=\"nv\">seed</span><span class=\"w\"></span>\n\n<span class=\"nv\">u32</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">U32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">U32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">U32</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Generator</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Generator</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"></span>\n<span class=\"nv\">u32</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">low</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">high</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">func</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nf\">\\</span><span class=\"p\">(</span><span class=\"err\">@</span><span class=\"kt\">Seed</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nv\">generator</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"nf\">%</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">high</span><span class=\"w\"> </span><span class=\"nf\">-</span><span class=\"w\"> </span><span class=\"nv\">low</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"nv\">low</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nv\">generator</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"kt\">The</span><span class=\"w\"> </span><span class=\"nv\">random</span><span class=\"w\"> </span><span class=\"nv\">seed</span><span class=\"w\"> </span><span class=\"nv\">just</span><span class=\"w\"> </span><span class=\"nv\">increments</span><span class=\"w\"> </span><span class=\"nv\">between</span><span class=\"w\"> </span><span class=\"nv\">uses</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"err\">@</span><span class=\"kt\">Seed</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">))</span><span class=\"w\"></span>\n\n<span class=\"nv\">finish</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Generator</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"></span>\n<span class=\"nv\">finish</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">newState</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"></span>\n\n<span class=\"err\">#</span><span class=\"w\"> </span><span class=\"kt\">Example</span><span class=\"w\"> </span><span class=\"nv\">user</span><span class=\"w\"> </span><span class=\"nv\">code</span><span class=\"w\"></span>\n\n<span class=\"nv\">point</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Generator</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">U32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">U32</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"nv\">point</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"nv\">u32</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">y</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"nv\">u32</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"mi\">19</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">finish</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"nv\">run</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">point</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">getSeed</span><span class=\"w\"> </span><span class=\"mi\">123</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 290283225,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1658343945
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"432314\">@Martin Stewart</span> That's great! We might even be able to go a step further with inferring the return type</p>",
        "id": 290283688,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658344146
    },
    {
        "content": "<p>It uses a form of pcg if I recall</p>",
        "id": 290283762,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1658344184
    },
    {
        "content": "<p>I'm not sure if this is what you mean but at first I tried writing <code>int : Int b, Int b, (Int b -&gt; Generator a) -&gt; Generator a</code> instead of <code>u32 : U32, U32, (U32 -&gt; Generator a) -&gt; Generator a</code> but Roc kept saying that it was inferring <code>Int b</code> as <code>Int Unsigned32</code> and that was preventing me from adding two ints together.</p>",
        "id": 290283916,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1658344239
    },
    {
        "content": "<p>So you can just have</p>\n<div class=\"codehilite\"><pre><span></span><code>myVal : Generator {x: U32, y: I64, z: List Int64, w: Str}\nx &lt;- range 0 9\ny &lt;- range 10 19\nz &lt;- random\nw &lt;- random\nfinish {x, y, z, w}\n</code></pre></div>",
        "id": 290283922,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658344241
    },
    {
        "content": "<p>I'm not sure I understand, could you provide an example of how <code>random</code> would be implemented?</p>",
        "id": 290284190,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1658344367
    },
    {
        "content": "<p>Yes it's pcg based, and I put pcg links in the Roc comments</p>",
        "id": 290285110,
        "sender_full_name": "jan kili",
        "timestamp": 1658344787
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> To implement <code>random</code> we need an ability (Roc's version of what is known as a 'trait' or 'typeclass' or roughly an 'interface' in other languages).<br>\nAdding support for abilities is one of the things which is very recent (and it's not entirely finished yet if I remember correctly) but it should be possible to write this soon.</p>",
        "id": 290285192,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658344806
    },
    {
        "content": "<p>Gotcha. I don't think that's a good idea because, if I understand correctly, that means assigning exactly 1 way to randomly generate a given type. Most types will need some configuration, for example Random.str probably will take a min and max length (and maybe there could be another version called Random.ascii).</p>",
        "id": 290286654,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1658345418
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"462053\">@JanCVanB</span> If the backpassing approach looks good, I can try adding it to your code and making a PR</p>",
        "id": 290286977,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1658345548
    },
    {
        "content": "<p>Yes, you're absolutely right! Sometimes you do want to customize something further!</p>\n<p>...</p>\n<p><a href=\"https://media1.giphy.com/media/3o85xIO33l7RlmLR4I/giphy.gif?cid=c623cb350xcnug6zjprgvhqji08s64h9f3z7qarern1qb1lc&amp;rid=giphy.gif&amp;ct=g\">https://media1.giphy.com/media/3o85xIO33l7RlmLR4I/giphy.gif?cid=c623cb350xcnug6zjprgvhqji08s64h9f3z7qarern1qb1lc&amp;rid=giphy.gif&amp;ct=g</a> </p>\n<div class=\"message_inline_image\"><a href=\"https://media1.giphy.com/media/3o85xIO33l7RlmLR4I/giphy.gif?cid=c623cb350xcnug6zjprgvhqji08s64h9f3z7qarern1qb1lc&amp;rid=giphy.gif&amp;ct=g\"><img src=\"https://uploads.zulipusercontent.net/0b4b46bb333598cdaae51fa7b33767af0bc9afe4/68747470733a2f2f6d65646961312e67697068792e636f6d2f6d656469612f336f383578494f33336c37526c6d4c5234492f67697068792e6769663f6369643d63363233636233353078636e7567367a6a7072677668716a693038733634683966337a3771617265726e317162316c63267269643d67697068792e6769662663743d67\"></a></div><p><span aria-label=\"nerd\" class=\"emoji emoji-1f913\" role=\"img\" title=\"nerd\">:nerd:</span></p>",
        "id": 290287145,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658345620
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"432314\">@Martin Stewart</span> PRs are very welcome, thank you! I haven't really considered backpacking, so I'm looking forward to digging into your example above.</p>",
        "id": 290295045,
        "sender_full_name": "jan kili",
        "timestamp": 1658349404
    },
    {
        "content": "<p><span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> backpaSSing</p>",
        "id": 290298390,
        "sender_full_name": "jan kili",
        "timestamp": 1658350914
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"432314\">@Martin Stewart</span> I think I see - is the backpassing support just to simplify the use of one-time generators?</p>",
        "id": 290313240,
        "sender_full_name": "jan kili",
        "timestamp": 1658359566
    },
    {
        "content": "<p>I definitely care about improving the ergonomics, so I'm open to stuff like this!</p>",
        "id": 290315016,
        "sender_full_name": "jan kili",
        "timestamp": 1658360817
    },
    {
        "content": "<p>I'm not sure what you mean by one-time generators but yes this should simplify all generators</p>",
        "id": 290338302,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1658384957
    },
    {
        "content": "<p>In your example above, there is some conflation between seed &amp; state (a state is initialized with a seed) and since both seeds &amp; output values are <code>U32</code> it's a little tricky to say for certain whether variables like <code>x</code> and <code>y</code> are intended as seeds or output values (the backpassing callback function input parameter name calls them seeds, but they're returned from <code>point</code> like output values).</p>",
        "id": 290357527,
        "sender_full_name": "jan kili",
        "timestamp": 1658398685
    },
    {
        "content": "<p>However, details aside, using backpassing with generators seems like it would prevent state chaining.</p>",
        "id": 290357607,
        "sender_full_name": "jan kili",
        "timestamp": 1658398752
    },
    {
        "content": "<p>This means that if your <code>x</code> and <code>y</code> domains were identical, they would generate identical values for each iteration (because using the same seed leads to the same sequence of values, without chaining).</p>",
        "id": 290357700,
        "sender_full_name": "jan kili",
        "timestamp": 1658398823
    },
    {
        "content": "<p>In general, I see backpassing as primarily for asynchronous processes, but in this case it's used to avoid... what?</p>",
        "id": 290357764,
        "sender_full_name": "jan kili",
        "timestamp": 1658398897
    },
    {
        "content": "<p>I may be missing something critical here, so please let me know! :)</p>",
        "id": 290357835,
        "sender_full_name": "jan kili",
        "timestamp": 1658398940
    },
    {
        "content": "<p>I'd be curious to see <a href=\"https://github.com/JanCVanB/roc-random/blob/main/example_complex.roc\">one of the <code>roc-random</code> examples</a> rewritten with backpassing, that might help me understand.</p>",
        "id": 290357915,
        "sender_full_name": "jan kili",
        "timestamp": 1658399031
    },
    {
        "content": "<p>This code really is passing along a new seed to each generator. So x and y will get different values event if they had the same range</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">point</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Generator</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">U32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">U32</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"nv\">point</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"nv\">u32</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">y</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"nv\">u32</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"mi\">19</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">finish</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"nv\">run</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">U32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">U32</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"nv\">newState</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Seed</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"nv\">run</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">point</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">getSeed</span><span class=\"w\"> </span><span class=\"mi\">123</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It might be easier to see why this is possible if I replace the backpassing with the desugared version:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">point</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Generator</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">U32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">U32</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"nv\">point</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"kt\">The</span><span class=\"w\"> </span><span class=\"nv\">second</span><span class=\"w\"> </span><span class=\"nv\">u32</span><span class=\"w\"> </span><span class=\"nv\">is</span><span class=\"w\"> </span><span class=\"nv\">passed</span><span class=\"w\"> </span><span class=\"kr\">in</span><span class=\"w\"> </span><span class=\"kr\">as</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">parameter</span><span class=\"w\"> </span><span class=\"nv\">to</span><span class=\"w\"> </span><span class=\"nv\">the</span><span class=\"w\"> </span><span class=\"nv\">first</span><span class=\"w\"> </span><span class=\"nv\">u32</span><span class=\"w\"> </span><span class=\"nv\">so</span><span class=\"w\"> </span><span class=\"nv\">it's</span><span class=\"w\"> </span><span class=\"nv\">possible</span><span class=\"w\"> </span><span class=\"nv\">for</span><span class=\"w\"> </span><span class=\"nv\">it</span><span class=\"w\"> </span><span class=\"nv\">to</span><span class=\"w\"> </span><span class=\"nv\">be</span><span class=\"w\"> </span><span class=\"nv\">given</span><span class=\"w\"> </span><span class=\"nv\">the</span><span class=\"w\"> </span><span class=\"nv\">next</span><span class=\"w\"> </span><span class=\"nv\">seed</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">u32</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">u32</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"mi\">19</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"nv\">y</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">finish</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"w\"> </span><span class=\"p\">}))</span><span class=\"w\"></span>\n\n<span class=\"nv\">run</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">U32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">U32</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"nv\">newState</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Seed</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"nv\">run</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">point</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">getSeed</span><span class=\"w\"> </span><span class=\"mi\">123</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 290357990,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1658399086
    },
    {
        "content": "<p>Oh, wait, sorry, I just realized your example above is a from-scratch RNG implementation - I thought it was modifying my <code>roc-random</code> API.</p>",
        "id": 290358021,
        "sender_full_name": "jan kili",
        "timestamp": 1658399106
    },
    {
        "content": "<p>I'll update your roc-random examples once I have the rest of my PR ready</p>",
        "id": 290358022,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1658399107
    },
    {
        "content": "<p>Ah! Are you using output values as state?</p>",
        "id": 290358144,
        "sender_full_name": "jan kili",
        "timestamp": 1658399236
    },
    {
        "content": "<p>Yes, that's it - okay. My seed chaining confusion came from the fact that I was assuming internal state and external return values were distinct.</p>",
        "id": 290358225,
        "sender_full_name": "jan kili",
        "timestamp": 1658399302
    },
    {
        "content": "<p>It's advantageous with PCG to have a transformation step during value return. By preventing direct exposure of the internal state, the randomness (against either just malicious actors or also stats, I can't remember) improves.</p>",
        "id": 290358366,
        "sender_full_name": "jan kili",
        "timestamp": 1658399422
    },
    {
        "content": "<p>Therefore, perhaps I'm simply expecting more complex parameters passed into the backpassing callback.</p>",
        "id": 290358417,
        "sender_full_name": "jan kili",
        "timestamp": 1658399494
    },
    {
        "content": "<p>I still don't see where the internal state (or any seed) is passed/chained between generators, though...</p>",
        "id": 290358544,
        "sender_full_name": "jan kili",
        "timestamp": 1658399619
    },
    {
        "content": "<p>It's the last line here that passes the seed into the next generator.</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">u32</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">U32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">U32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">U32</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Generator</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Generator</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"></span>\n<span class=\"nv\">u32</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">low</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">high</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">func</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nf\">\\</span><span class=\"p\">(</span><span class=\"err\">@</span><span class=\"kt\">Seed</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nv\">generator</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"nf\">%</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">high</span><span class=\"w\"> </span><span class=\"nf\">-</span><span class=\"w\"> </span><span class=\"nv\">low</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"nv\">low</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nv\">generator</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"kt\">The</span><span class=\"w\"> </span><span class=\"nv\">random</span><span class=\"w\"> </span><span class=\"nv\">seed</span><span class=\"w\"> </span><span class=\"nv\">just</span><span class=\"w\"> </span><span class=\"nv\">increments</span><span class=\"w\"> </span><span class=\"nv\">between</span><span class=\"w\"> </span><span class=\"nv\">uses</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"err\">@</span><span class=\"kt\">Seed</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">))</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I can give a more detailed explanation later if you'd like. Busy at the moment unfortunately</p>",
        "id": 290358947,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1658399939
    },
    {
        "content": "<p>That part makes sense, thank you.</p>",
        "id": 290359087,
        "sender_full_name": "jan kili",
        "timestamp": 1658400015
    },
    {
        "content": "<p>I'm wondering how <code>point</code> works, because I don't see how its input <code>Seed</code> is passed to its <code>u32</code> subgenerators.</p>",
        "id": 290359165,
        "sender_full_name": "jan kili",
        "timestamp": 1658400088
    },
    {
        "content": "<p>Is that the magic of backpassing?</p>",
        "id": 290359253,
        "sender_full_name": "jan kili",
        "timestamp": 1658400144
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>finish = \\value -&gt;\n    (\\state -&gt; { value: value, newState : state })\n...\npoint =\n    x &lt;- u32 0 9\n    y &lt;- u32 10 19\n    finish { x, y }\n</code></pre></div>\n<p>This seems like <code>point</code> will return the same <code>.value</code> every time.</p>",
        "id": 290359391,
        "sender_full_name": "jan kili",
        "timestamp": 1658400253
    },
    {
        "content": "<p>Your desugared version above (thank you for that, very helpful for my backpassing noob brain) is<br>\n<code>point = u32 0 9 (\\x -&gt; u32 10 19 (\\y -&gt; finish { x, y }))</code><br>\nbut I'm expecting something more like<br>\n<code>...</code></p>",
        "id": 290360968,
        "sender_full_name": "jan kili",
        "timestamp": 1658401525
    },
    {
        "content": "<p>GAH! While thinking what I wanted in the second code snippet above, I think I figured out how this backpassing magic works <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 290361008,
        "sender_full_name": "jan kili",
        "timestamp": 1658401561
    },
    {
        "content": "<p>My brain hurts. So many overlapping functions...</p>",
        "id": 290361077,
        "sender_full_name": "jan kili",
        "timestamp": 1658401584
    },
    {
        "content": "<p>Your backpassing system might be amazing <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> I'll have to dig in more later!</p>",
        "id": 290361997,
        "sender_full_name": "jan kili",
        "timestamp": 1658402251
    },
    {
        "content": "<p>If it smoothly (though subtly) eliminates the need for <code>Random.next</code>/<code>.step</code> inside custom generators, that's great!</p>",
        "id": 290362484,
        "sender_full_name": "jan kili",
        "timestamp": 1658402587
    },
    {
        "content": "<p>I'm looking forward to implementing/seeing this with <code>Generation</code>s and <code>I8</code> values.</p>",
        "id": 290362768,
        "sender_full_name": "jan kili",
        "timestamp": 1658402763
    },
    {
        "content": "<p>I wonder if renaming some variables would help me not need a 10-second mental loading spinner every time I re-read the backpassing lines <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 290362891,
        "sender_full_name": "jan kili",
        "timestamp": 1658402870
    },
    {
        "content": "<p>I'm curious to see whether this backpassing system works better for simpler use cases or more complex use cases! Right now I think it's good for chaining but not for one-shots... but I'm vascillating on that with my shifting mental pseudocode. I'll have to try some examples!</p>",
        "id": 290395882,
        "sender_full_name": "jan kili",
        "timestamp": 1658419399
    },
    {
        "content": "<p>Even with one off uses, it can often make something look more like linear code and help reduce indenting</p>",
        "id": 290398635,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1658420517
    },
    {
        "content": "<p>So helps with readability</p>",
        "id": 290398714,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1658420540
    },
    {
        "content": "<p>When there's already callbacks involved yes, but this system is adding both callbacks and backpassing at the same time, so they're equally flat. This might still make it more readable, though.</p>",
        "id": 290402574,
        "sender_full_name": "jan kili",
        "timestamp": 1658422282
    },
    {
        "content": "<p>The readability gains would just be in hiding the state machine's internals, rather than decreasing indentation.</p>",
        "id": 290402847,
        "sender_full_name": "jan kili",
        "timestamp": 1658422386
    },
    {
        "content": "<p>Ah, yeah. Makes sense. Hiding state can definitely be really nice in Roc. Otherwise you get everyone's favorite variables <code>state0</code>, <code>state1</code>, <code>state2</code>, <code>state3</code>, ...</p>",
        "id": 290403074,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1658422469
    },
    {
        "content": "<p>This is the one reason I really miss shadowing.</p>",
        "id": 290403128,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1658422488
    },
    {
        "content": "<p>I made helper functions to pass state around externally, but <code>x.value</code> and <code>Random.step</code> are ugly tbh.</p>",
        "id": 290403231,
        "sender_full_name": "jan kili",
        "timestamp": 1658422529
    },
    {
        "content": "<p>Yeah, which is definitely an improvement and what I did for the second version of the wasm cpu emulator in Roc.</p>",
        "id": 290403513,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1658422647
    },
    {
        "content": "<p>But definitely less nice than bsckpassing</p>",
        "id": 290403525,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1658422656
    },
    {
        "content": "<p>Though probably a lot faster to compile</p>",
        "id": 290403534,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1658422664
    },
    {
        "content": "<p>Interesting, I hadn't even begun to think about performance implications</p>",
        "id": 290404564,
        "sender_full_name": "jan kili",
        "timestamp": 1658423078
    },
    {
        "content": "<p>The nested callback function call stack for each generator chain... Probably fine</p>",
        "id": 290404678,
        "sender_full_name": "jan kili",
        "timestamp": 1658423125
    },
    {
        "content": "<p>Hopefully that will become less of a thing in the near future <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 290411199,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658426323
    },
    {
        "content": "<p>Oh, I more meant that no matter what it will cost more to compilation time. It means you have lambdas that have to be inlined and optimized. That is not the case for directly passing state around. So it will always have some form of higher cost. Should be relatively small though (if we do things right)</p>",
        "id": 290417685,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1658429349
    },
    {
        "content": "<p>For runtime, it should get inlined and have zero cost</p>",
        "id": 290417863,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1658429410
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"432314\">@Martin Stewart</span> I've been playing around with refactoring <code>roc-random</code> to internalize its chained generator state management with backpassing instead of externalizing it, but I can't run it yet due to seemingly-unrelated compilation issues that I'll have to debug another time. In the meantime, this syntax looks really promising for cleanliness!</p>",
        "id": 290465257,
        "sender_full_name": "jan kili",
        "timestamp": 1658465748
    },
    {
        "content": "<p>I only have one remaining concern right now, and that's regarding chaining chains. For example, your <code>point</code> generator above - I believe it can't be chained with other point generators (as currently written) because the only state/seed it can return is the initial state/seed. Is that correct? It seems like the backpassing hiding state management (good) is also preventing that state from chaining with other contexts above/beyond the function context that calls those backpasses (bad), since that means multiple points requires multiple seedings.</p>",
        "id": 290465569,
        "sender_full_name": "jan kili",
        "timestamp": 1658466015
    },
    {
        "content": "<p>In the example, <code>finish</code> extracts the final state (in the example: after two RNG 'hops'), not the initial state.</p>",
        "id": 290470972,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658472052
    },
    {
        "content": "<p>What could be added is a function <code>Generator a -&gt; (a -&gt; Generator b) -&gt; Generator b</code> which could be called <code>chain</code> or <code>andThen</code> or something similar. This would allow chaining arbitrary generators together (like calling <code>point</code> multiple times on the same generator)</p>",
        "id": 290470999,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658472094
    },
    {
        "content": "<p>Yeah, as Marten said, the latest seed does get returned. But there will need to be an andThen or something in order to make a finished generator compose with other generators</p>",
        "id": 290503952,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1658495506
    },
    {
        "content": "<p>Haven't had a chance to continue working on it but I should have time this weekend</p>",
        "id": 290504012,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1658495524
    },
    {
        "content": "<p>Ah, so the <code>finish</code> is just a final wrapping step. Thank you both for that clarification!</p>",
        "id": 290504290,
        "sender_full_name": "jan kili",
        "timestamp": 1658495706
    },
    {
        "content": "<p>Yes, it seems that helpers like <code>Result.step</code> and/or <code>Result.next</code> will still be necessary when chaining without backpassing.</p>",
        "id": 290504454,
        "sender_full_name": "jan kili",
        "timestamp": 1658495782
    },
    {
        "content": "<p>I wonder if it would be valuable to support both ways, backpassing and not...</p>",
        "id": 290504480,
        "sender_full_name": "jan kili",
        "timestamp": 1658495804
    },
    {
        "content": "<p>oh definitely - for example, sometimes it's useful to store the seed in application state and then come back to it later</p>",
        "id": 290505562,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1658496440
    },
    {
        "content": "<p>I did this a bunch in the implementation of <code>elm-test</code></p>",
        "id": 290505584,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1658496465
    },
    {
        "content": "<p>because it would run the tests in parallel, but for the property-based tests, you could pass in a <code>--seed</code> value which would deterministically reproduce the results of a previous randomly-generated run</p>",
        "id": 290505665,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1658496505
    },
    {
        "content": "<p>and the way it did that was by storing the seeds in the application state in between test runs</p>",
        "id": 290505683,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1658496517
    },
    {
        "content": "<p>so it doesn't read as well when chaining several random operations together, but much nicer for storage!</p>",
        "id": 290505720,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1658496550
    },
    {
        "content": "<p>Is there a convention for how to support both patterns? Perhaps some sort of wrapper? Or is it just API x 2?</p>",
        "id": 290510796,
        "sender_full_name": "jan kili",
        "timestamp": 1658499127
    },
    {
        "content": "<p>I can probably figure something out by playing with callbacks and wrappers, but I don't see it just yet...</p>",
        "id": 290512129,
        "sender_full_name": "jan kili",
        "timestamp": 1658499737
    },
    {
        "content": "<p>What do you mean?<br>\nUsing the <code>andThen</code>/<code>finish</code> based API does not prevent you from using the manual API interchangeably in your program. (Nor vice-versa)</p>",
        "id": 290521466,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658501940
    },
    {
        "content": "<p>I hope to still support simple calls like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>diceRoll = (Random.int 1 6) myNoise\nStdout.line (Num.toStr diceRoll)\n</code></pre></div>",
        "id": 290548603,
        "sender_full_name": "jan kili",
        "timestamp": 1658513811
    },
    {
        "content": "<p>Adding a callback parameter to <code>Random.int</code> seems to deprecate the above simplicity, no?</p>",
        "id": 290548781,
        "sender_full_name": "jan kili",
        "timestamp": 1658513899
    },
    {
        "content": "<p>(granted, the current API isn't <strong><em>quite</em></strong> that simple, as it includes a <code>{ value: diceRoll }</code> destructuring of the wrapped state, but the above would be nice)</p>",
        "id": 290549131,
        "sender_full_name": "jan kili",
        "timestamp": 1658514107
    },
    {
        "content": "<p>I might be talking nonsense, though, as I still haven't finished the refactoring to see the changes in action!</p>",
        "id": 290549674,
        "sender_full_name": "jan kili",
        "timestamp": 1658514397
    },
    {
        "content": "<p>Thank you VERY much <span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> for unsticking me on Rust/Nix stuff :)</p>",
        "id": 290549717,
        "sender_full_name": "jan kili",
        "timestamp": 1658514419
    },
    {
        "content": "<p>So my from the beginning the idea was to not need any <code>Random.andThen</code> and you'd only write things like</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">randomPoint</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">Random</span><span class=\"nf\">.</span><span class=\"nv\">u32</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">y</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">Random</span><span class=\"nf\">.</span><span class=\"nv\">u32</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">finish</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"nv\">randomPerson</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">position</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"nv\">randomPoint</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">age</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">Random</span><span class=\"nf\">.</span><span class=\"nv\">u16</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">finish</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">position</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">age</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"nv\">randomPeople</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">count</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">Random</span><span class=\"nf\">.</span><span class=\"nv\">u8</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">people</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">Random</span><span class=\"nf\">.</span><span class=\"nv\">list</span><span class=\"w\"> </span><span class=\"nv\">count</span><span class=\"w\"> </span><span class=\"nv\">randomPerson</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">finish</span><span class=\"w\"> </span><span class=\"nv\">people</span><span class=\"w\"></span>\n\n<span class=\"nv\">foo</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">newSeed</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Random</span><span class=\"nf\">.</span><span class=\"nv\">generate</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Random</span><span class=\"nf\">.</span><span class=\"nv\">initialSeed</span><span class=\"w\"> </span><span class=\"mi\">123</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">randomPeople</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">value</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It seems like this isn't possible to do though. As <span class=\"user-mention\" data-user-id=\"462053\">@JanCVanB</span> pointed out <code>randomPoint</code> doesn't have the right type to be used the same way Random.u32 does for example. Maybe I'll call off that PR unless I come up with some better idea <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 290700465,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1658697699
    },
    {
        "content": "<p>I'm pretty sure there is a way to make it work, probably by just slightly altering the output type of <code>finish</code>.<br>\nI'm on vacation this week so I can only take a look afterwards though <span aria-label=\"zip it\" class=\"emoji emoji-1f910\" role=\"img\" title=\"zip it\">:zip_it:</span></p>",
        "id": 290700672,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658697991
    },
    {
        "content": "<p>That would be super cool! I'm interested in seeing how it can be done</p>",
        "id": 290700834,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1658698210
    },
    {
        "content": "<p>This backpassing stuff is a fantastic idea <span class=\"user-mention\" data-user-id=\"432314\">@Martin Stewart</span>, thank you for proposing it! Yes, I intend for both primitive and custom generators to behave/chain identically, but what do you think, should that not be a requirement?</p>",
        "id": 290700850,
        "sender_full_name": "jan kili",
        "timestamp": 1658698245
    },
    {
        "content": "<p>Haskell's <code>Data.Random</code> module allows this. But translating that to Roc might be a bit tricky unless you know Haskell well because Haskell code is quite terse  (and you need to take extra care to translate stuff that might depend on Haskell's lazy-by-default nature to Roc, which is strict)</p>",
        "id": 290700856,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658698260
    },
    {
        "content": "<p>Sorry, I should stop reading and responding this late</p>",
        "id": 290700893,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658698319
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"462053\">JanCVanB</span> <a href=\"#narrow/stream/316715-contributing/topic/Random.20number.20generator/near/290700850\">said</a>:</p>\n<blockquote>\n<p>This backpassing stuff is a fantastic idea <span class=\"user-mention silent\" data-user-id=\"432314\">Martin Stewart</span>, thank you for proposing it! Yes, I intend for both primitive and custom generators to behave/chain identically, but what do you think, should that not be a requirement?</p>\n</blockquote>\n<p>I agree that it would be ideal if primitive and custom generates behave the same way.</p>",
        "id": 290700932,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1658698326
    },
    {
        "content": "<p>The Haskell implementation does make liberal use of <code>andThen</code></p>",
        "id": 290700933,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658698329
    },
    {
        "content": "<p>I like the example above, how it chains lots of things together :))) very much what I'd like to see</p>",
        "id": 290700943,
        "sender_full_name": "jan kili",
        "timestamp": 1658698375
    }
]