[
    {
        "content": "<p>Now that this <a href=\"https://github.com/roc-lang/roc/pull/6134\">PR</a> is looking close to finishing I'd like to give a little summary of my view of the status of the tooling and where we can go to make it better. </p>\n<p>I think at this point there isn't a lot more that can be done on the language server end without changes to the compiler. </p>\n<p>There are three improvements to the compiler that would facilitate further improvements to tooling, in rough order of their impact they are: </p>\n<h3>1.</h3>\n<p>Exposing more information about every module after they are loaded.</p>\n<p>That would include:<br>\nWhat each module imports.<br>\nWhat each module exports.<br>\nInfo about the ast of the header so that we can use those regions to detect where the cursor is for completing imports vs exports etc.</p>\n<p>This unblocks:<br>\n completion of imported modules and built-ins, completion in import blocks, completion in export blocks. Automatic imports when accepting completions.<br>\nCode actions to add a missing import to fix an error. </p>\n<h3>2.</h3>\n<p>Recoverable parsing making it so that we can always get type information for completion and hover, and also show diagnostics always.</p>\n<h3>3.</h3>\n<p>Incremental output during module loading allowing us to get the most basic info about symbols and positions in a document before parsing. </p>\n<p>We currently do some hacky stuff to allow us to get completion for an unparsed document that will break completions in rare edge cases. I tried explaining it here but it's a bit complicated, I can go into it more elsewhere. </p>\n<p>I had a poke around trying to see what implementing 1 would look like, but frankly <br>\nI don't think I know enough about the vision for how the compiler should be architecture to make a change like that. </p>\n<p>Once 1. Is complete I'll happily get to work adding those features I've listed to the language server. Which should be easy given the groundwork I've laid in the existing completion PR </p>\n<p>Basically I just wanted to get a dump of all my thoughts to see what people think, and what other people's plans are.</p>",
        "id": 409718517,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1703339164
    },
    {
        "content": "<p>1 seems totally uncontroversial to me; if you want to make a PR that does it, I'd say go for it!</p>",
        "id": 409730270,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1703348682
    },
    {
        "content": "<p>I think (1) is good. I'd like to also add some way so that the builtin modules are saved on the filesystem and you can actually view them when you go-to-definition; right now an empty buffer is shown.</p>",
        "id": 410085688,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1703638546
    },
    {
        "content": "<p>(2) is a lot of work but definitely the most valuable.</p>",
        "id": 410085696,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1703638554
    },
    {
        "content": "<p>I like the idea of (3) but we need to be careful. In the short term, I hope the module compiler is fast enough that this is not needed. At some point it will be needed, but I think it will be useful to hook into the event loop for module compilation and pull for changes, rather than the compiler pushing incremental output out.</p>",
        "id": 410085905,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1703638683
    },
    {
        "content": "<p>As for (1), I think it's already pretty close. What you'll want to look at is the large file in the path <code>crates/compiler/load_internal/src/file.rs</code>. There's a lot going on there and we've talked for a long time about cleaning it up, but never have. But what will be important for (1) is to add the symbol table, which is a data structure called <code>Scope</code>, to the output objects of the compiler passes.</p>",
        "id": 410086046,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1703638763
    },
    {
        "content": "<p>We will need some rework along the lines of (3) soon anyway. The most pressing issue IMO is that the LS has no hook into the event loop, so when a file changes the LS re-compiles the dependencies of that file, which is the wrong direction of what's actually desired.</p>",
        "id": 410086344,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1703638899
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/skGYt1d6aVn6A1TrXDhz9SZN/image.png\">image.png</a><br>\n<a href=\"/user_uploads/22008/xwhfG0Z2aE2iCSMB5iGU-0Dw/image.png\">image.png</a><br>\nFirst draft of completion for imports,  and builtins. Lots of bugs, but i think I've finally got all the data available to complete everything i want to be able to complete</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/skGYt1d6aVn6A1TrXDhz9SZN/image.png\" title=\"image.png\"><img src=\"/user_uploads/22008/skGYt1d6aVn6A1TrXDhz9SZN/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/22008/xwhfG0Z2aE2iCSMB5iGU-0Dw/image.png\" title=\"image.png\"><img src=\"/user_uploads/22008/xwhfG0Z2aE2iCSMB5iGU-0Dw/image.png\"></a></div>",
        "id": 410424183,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1703850563
    },
    {
        "content": "<p>One area I'd like to make more progress on is getting docs for the completion and hover. I can see there is an implementation that's used for generating the website documentation that parses the ast but doesn't typecheck stuff properly but it seems pretty limited and I don't think it runs during regular analysis. Is there plans to revamp that?</p>",
        "id": 410595222,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1703990126
    },
    {
        "content": "<p>hm, revamp it how?</p>",
        "id": 410610278,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704005341
    },
    {
        "content": "<p>right now it runs in the <code>roc docs</code> command, so it only does what's necessary to generate the .html files</p>",
        "id": 410610295,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704005359
    },
    {
        "content": "<p>To make it generate docs using data from typechecking rather than just parsing the ast and therefore requiring type annotation for anything that needs docs.</p>",
        "id": 410833274,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1704195438
    },
    {
        "content": "<p>Hmm I would say if you are exporting something it's part of your public API, and you could argue it's bad practice not to annotate the type. Annotation makes sure the type signature doesn't accidentally get changed without you realising.</p>",
        "id": 410862384,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1704209151
    },
    {
        "content": "<p>I don't think we should require type annotations for docs. It's best practice, yes, but if you haven't gotten around to it, I don't see a reason to intentionally block you from having docs generated!</p>",
        "id": 410869199,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704212113
    },
    {
        "content": "<p>I don't follow how requiring annotations would help though - unless I'm misremembering, don't we already do type checking and therefore have access to all the inferred types anyway? <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 410869512,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704212257
    },
    {
        "content": "<p>I think what Eli might be saying is that right now the types of a function are only generated in the docs if you have an explicit type annotation. If there is no type annotation it won't be generated, and moreover the type annotation won't be checked for correctness. So you are required to annotate values if you want type docs for them.</p>",
        "id": 410880539,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1704216883
    },
    {
        "content": "<p>Right now the docs are generated directly from the AST. I agree we should generate them only after type checking.</p>",
        "id": 410880591,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1704216912
    },
    {
        "content": "<p>ahh gotcha! Yeah agreed</p>",
        "id": 410883625,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704218383
    },
    {
        "content": "<p>Yup, exactly what <span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> said.</p>",
        "id": 410894337,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1704223650
    },
    {
        "content": "<p>For anyone  wanting bleeding edge completion support, I've opened a PR for import /module name completions <a href=\"https://github.com/roc-lang/roc/pull/6347\">https://github.com/roc-lang/roc/pull/6347</a>.</p>\n<p>It needs some cleanup, but I've been using it and it's working really weel for me. I just got type information for built-ins working properly so this piece is pretty feature complete</p>\n<p>At some point I'd like to expand completion to be smart based on region eg: Complete field names inside a record update, tag names inside a pattern match, external module names inside import etc but that's pretty minor I'd say</p>",
        "id": 411310572,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1704430141
    }
]