[
    {
        "content": "<p>I was just writing a shell script that basically executes some other programs and does things like:</p>\n<ul>\n<li>checking their exit codes</li>\n<li>capturing stdout and stderr</li>\n<li>setting env vars for them</li>\n</ul>",
        "id": 366163748,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686745279
    },
    {
        "content": "<p>these are all totally things <code>basic-cli</code> could do, at which point I could rewrite that shell script in Roc, which would be awesome <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 366163860,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686745305
    },
    {
        "content": "<p>is anyone interested in getting involved in implementing process running support for <code>basic-cli</code>?</p>",
        "id": 366164096,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686745338
    },
    {
        "content": "<p>Made a start on PR <a href=\"https://github.com/roc-lang/basic-cli/pull/55\">#55</a> to add a Command module to <code>basic-cli</code> to do the above. It's still a WIP but I've ran into an issue and not sure if there is a problem here or not. I've been trying to diagnose why the current <code>examples/command.roc</code> which just runs \"ls\" on the local folder seems to fail with a non-zero exit code. </p>\n<div class=\"codehilite\"><pre><span></span><code>% roc dev examples/command.roc\nðŸ”¨ Rebuilding platform...\nLICENSE         examples        flake.lock      src\nREADME.md       file-test       flake.nix\nci          file-testBROKEN.roc generated-docs\nCommand failed with status code 1275068420\n</code></pre></div>",
        "id": 367343153,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1687083270
    },
    {
        "content": "<p>I'm pretty sure I'm not quite understanding how to do <code>std::processs::Command</code> things properly, specifically how child processes interact here. Should calling another program from rust give the exit code returned from the child process?</p>",
        "id": 367343818,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1687083490
    },
    {
        "content": "<p>I'm not sure what I was doing wrong here, but I've moved on and updated it to <code>status : Command -&gt; Task U8 *</code> which seems to be working as expected now.</p>",
        "id": 367354538,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1687086346
    }
]