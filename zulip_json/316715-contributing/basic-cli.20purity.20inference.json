[
    {
        "content": "<p>Just wanted to give an update on the progress with purity inference upgrade for basic-cli <a href=\"https://github.com/roc-lang/basic-cli/pull/257\">PR#257</a></p>\n<p>The host, platform, and all of the examples have been upgraded -- it's working well <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> </p>\n<p>The following examples have a bug. I've logged issues for each of these.</p>\n<p>$ roc examples/args.roc</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;main&#39; panicked at crates/compiler/gen_llvm/src/llvm/build.rs:5748:19:\nError in alias analysis: error in module ModName(&quot;UserApp&quot;), function definition FuncName(&quot;\\x11\\x00\\x00\\x00\\x00\\x00\\x00\\x80\\xe0{\\x02\\xeaI\\xd4\\xd7?&quot;), definition of value binding ValueId(54): expected type &#39;union { (((heap_cell,), ()),), ((),) }&#39;, found type &#39;union { (), (), ((heap_cell,),), (), (), (), () }&#39;\n</code></pre></div>\n<p>$ roc examples/task-list.roc</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;main&#39; panicked at crates/compiler/gen_llvm/src/llvm/build.rs:5748:19:\nError in alias analysis: error in module ModName(&quot;UserApp&quot;), function definition FuncName(&quot;\\x11\\x00\\x00\\x00\\x04\\x00\\x00\\x80\\x16\\x02|\\xef\\xcd\\x95Y\\xbd&quot;), definition of value binding ValueId(42): expected type &#39;union { (union { ((heap_cell,), ()), (union { (), (), ((heap_cell,),), (), (), (), () },) },), ((),) }&#39;, found type &#39;union { ((heap_cell,), ()), (union { (), (), ((heap_cell,),), (), (), (), () },) }&#39;\n</code></pre></div>\n<p>$ roc examples/tcp-client.roc</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;&lt;unnamed&gt;&#39; panicked at crates/compiler/mono/src/ir.rs:6191:56:\ncalled `Option::unwrap()` on a `None` value\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>\n<p>I've also switched us over to the Weaver package and removed the Arg parser from basic-cli. </p>\n<p>We can put this back if anyone has an issue with this, but we discussed eventually pointing people towards the packages as that keeps the platform simple, and I think now is a good time.</p>\n<p>Next up is updating/checking all of the expect tests to get CI back online. I've also temporarily disabled the <code>pull_request</code> trigger in the yaml files so I don't get spammed on every push, but we can restore this once we have that working locally.</p>",
        "id": 481434793,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731134881
    },
    {
        "content": "<blockquote>\n<p>I've also switched us over to the Weaver package and removed the Arg parser from basic-cli.</p>\n<p>We can put this back if anyone has an issue with this, but we discussed eventually pointing people towards the packages as that keeps the platform simple, and I think now is a good time.</p>\n</blockquote>\n<p>Could we stick to very simple arg handling like <a href=\"https://github.com/roc-lang/examples/blob/main/examples/CommandLineArgs/main.roc\">here</a> and link to weaver in a comment? I want to avoid being blocked on needing to upgrade weaver in case of breaking roc changes.</p>",
        "id": 481451812,
        "sender_full_name": "Anton",
        "timestamp": 1731151320
    },
    {
        "content": "<p>That works <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 481452001,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731151446
    },
    {
        "content": "<p>Thanks Luke!! I’ll look into the failing cases today</p>",
        "id": 481455140,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1731154200
    },
    {
        "content": "<p>It looks like the <code>tcp-client</code> example issue is caused by the <code>return</code> issue that Sam is already looking into. I inlined all <code>try</code> without using <code>return</code> and it run properly:<br>\n<a href=\"/user_uploads/22008/FINS5vQvxHST6H-TO-e6Nq12/Screenshot-2024-11-09-at-8.55.01PM.png\">Screenshot 2024-11-09 at 8.55.01 PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/FINS5vQvxHST6H-TO-e6Nq12/Screenshot-2024-11-09-at-8.55.01PM.png\" title=\"Screenshot 2024-11-09 at 8.55.01 PM.png\"><img data-original-dimensions=\"2602x846\" src=\"/user_uploads/thumbnail/22008/FINS5vQvxHST6H-TO-e6Nq12/Screenshot-2024-11-09-at-8.55.01PM.png/840x560.webp\"></a></div>",
        "id": 481506264,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1731196522
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> so if you made an issue for that one, I think we can close it as a dupe</p>",
        "id": 481506356,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1731196576
    },
    {
        "content": "<p>Actually, same with <code>args.roc</code></p>",
        "id": 481506427,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1731196676
    },
    {
        "content": "<p>checking <code>task-list.roc</code> now</p>",
        "id": 481506468,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1731196688
    },
    {
        "content": "<p>yep, same</p>",
        "id": 481506475,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1731196705
    },
    {
        "content": "<p>so these are all down to the same issue <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 481506483,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1731196715
    },
    {
        "content": "<p>We should hold the release until we fix it, because not having <code>try</code> is really painful</p>",
        "id": 481506535,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1731196790
    },
    {
        "content": "<p>This is great news. Thanks for investigating those. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> </p>\n<p>No pressure <span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 481507840,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731197859
    },
    {
        "content": "<p>I'll look tonight. The fix is in theory ready to go in <a href=\"https://github.com/roc-lang/roc/pull/7204\">https://github.com/roc-lang/roc/pull/7204</a>, but I'm hitting some weird codegen error</p>",
        "id": 481511916,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1731201720
    },
    {
        "content": "<p>Once that's fixed, we're ready to go</p>",
        "id": 481511962,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1731201733
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>--- STDOUT: test_gen::test_gen gen_return::early_return_annotated_function ---\n\nrunning 1 test\n\n--- STDERR: test_gen::test_gen gen_return::early_return_annotated_function ---\n\nAn internal compiler expectation was broken.\n\nThis is definitely a compiler bug.\n\nPlease file an issue here: &lt;https://github.com/roc-lang/roc/issues/new/choose&gt;\n\nsingle register layouts are not complex symbols\n\nLocation: crates/compiler/gen_dev/src/generic64/x86_64.rs:355:17\n</code></pre></div>",
        "id": 481512114,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1731201889
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/blob/b7c2cb084e15a56320e652ad3c77fdb8262bc1a4/crates/compiler/gen_dev/src/generic64/x86_64.rs#L355\">https://github.com/roc-lang/roc/blob/b7c2cb084e15a56320e652ad3c77fdb8262bc1a4/crates/compiler/gen_dev/src/generic64/x86_64.rs#L355</a></p>",
        "id": 481512165,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1731201955
    },
    {
        "content": "<p>Off to hang with a friend, I'll update when I get to a keyboard in like 5 hours or so</p>",
        "id": 481512220,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1731201976
    },
    {
        "content": "<p>I think we're pretty much done. </p>\n<p>If you are able, can you please give <a href=\"https://github.com/roc-lang/basic-cli/pull/257\">basic-cli purity inference upgrade</a> a test, or to skim through the changes and see if we've missed anything obvious. </p>\n<p>CI failures for native are to be expected until the new nightly which includes Sam's <a href=\"https://github.com/roc-lang/roc/issues/7204\">#7204</a> fix</p>\n<p>The CI nix failures need investigation.. I'm not sure what's going wrong yet. </p>\n<p>I'm hoping the euro-roc-stars can take it from here... I think I'm pretty much done for today. Still hopeful we can land this in time for AoC <span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span></p>",
        "id": 483830084,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732246334
    },
    {
        "content": "<p>Ok, I've only started to investigate... but I think that latest fix <span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span>  or something has broken hello world on basic-cli purity inference. </p>\n<p>It doesn't make any sense to me right now, but hello world exits with a non-zero exit code. </p>\n<p><a href=\"https://github.com/roc-lang/basic-cli/pull/257\">https://github.com/roc-lang/basic-cli/pull/257</a></p>\n<p>Trying to figure out how that could happen. It's odd, that it's happening on literally the most simple program.</p>",
        "id": 484022876,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732329058
    },
    {
        "content": "<p>Uh oh</p>",
        "id": 484022913,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1732329094
    },
    {
        "content": "<p>I can check it out in an hour when I get home</p>",
        "id": 484022938,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1732329117
    },
    {
        "content": "<p>Hm... I think I found a workaround.</p>",
        "id": 484023253,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732329339
    },
    {
        "content": "<h2>works</h2>\n<div class=\"codehilite\"><pre><span></span><code>mainForHost! : I32 =&gt; Result {} I32\nmainForHost! = \\_ -&gt;\n    when main! {} is\n        Ok {} -&gt; Ok {}\n        Err (Exit code msg) -&gt;\n</code></pre></div>\n<h2>broken</h2>\n<div class=\"codehilite\"><pre><span></span><code>mainForHost! : I32 =&gt; Result {} I32\nmainForHost! = \\_ -&gt;\n    main! {}\n    |&gt; \\result -&gt;\n        when result is\n            Ok {} -&gt; Ok {}\n</code></pre></div>",
        "id": 484023375,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732329431
    },
    {
        "content": "<p>Okay, looking into it now</p>",
        "id": 484028349,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1732334132
    },
    {
        "content": "<p>So when I log before and after running <code>mainForHost!</code> in the Rust host code, I get this:</p>\n<div class=\"codehilite\"><pre><span></span><code>before running mainForHost!\nHello, World!\nmain! returned Ok {}\nafter mainForHost! exit_code = 1875841744\n</code></pre></div>",
        "id": 484032119,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1732337581
    },
    {
        "content": "<p>So this means we successfully run <code>mainForHost!</code> and <code>main!</code> inside it, but the exit code is wrong.</p>",
        "id": 484032297,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1732337762
    },
    {
        "content": "<p>Not only that, but it's a seemingly random number each time</p>",
        "id": 484032339,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1732337774
    },
    {
        "content": "<p>Which smells to me like we're reading past our memory when detecting the exit code</p>",
        "id": 484032362,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1732337812
    },
    {
        "content": "<p>Okay, im tired and will pick this up tomorrow</p>",
        "id": 484033444,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1732338761
    },
    {
        "content": "<p>is this a general bug or surgical linker specific</p>",
        "id": 484039486,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732345164
    },
    {
        "content": "<p>Also, this smells of an old bug we never figured out but seemed to have gone away</p>",
        "id": 484039494,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732345179
    },
    {
        "content": "<p>Im on mac, so it's happening with the legacy linker.</p>",
        "id": 484039593,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732345250
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/issues/6121\">https://github.com/roc-lang/roc/issues/6121</a></p>",
        "id": 484040172,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732345855
    },
    {
        "content": "<p>We have some green shoots <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> </p>\n<p><a href=\"/user_uploads/22008/MeKhh-IMg9n9rYIftSxXP5jm/Screenshot-2024-11-24-at-11.00.27.png\">Screenshot 2024-11-24 at 11.00.27.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/MeKhh-IMg9n9rYIftSxXP5jm/Screenshot-2024-11-24-at-11.00.27.png\" title=\"Screenshot 2024-11-24 at 11.00.27.png\"><img data-original-dimensions=\"696x306\" src=\"/user_uploads/thumbnail/22008/MeKhh-IMg9n9rYIftSxXP5jm/Screenshot-2024-11-24-at-11.00.27.png/840x560.webp\"></a></div><p>Now to figure out why linux isn't happy... anyone with a linux machine feel like helping? feel free to jump in</p>",
        "id": 484106581,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732406520
    },
    {
        "content": "<p>I can help in 2 or so hours</p>",
        "id": 484107285,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1732407219
    },
    {
        "content": "<p>I found a bunch of places where the host fx type was returning a RocResult, but the PlatformTask was something like <code>{} =&gt; {}</code>.</p>",
        "id": 484108267,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732408339
    },
    {
        "content": "<p>The current issue looks to be the non-zero exit code... and I suspect it may be related to the types for our Fx's not matching perfectly with what roc expects. My current hypothesis is that is we return a unit <code>()</code> to roc i.e. <code>{}</code> in rust that maybe that is sized or aligned differently.</p>",
        "id": 484108312,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732408426
    },
    {
        "content": "<p>Need to dig into the LLVM IR maybe. Possible workaround might be to use a RocResult for everything across the host boundary which will ensure the correct alignment etc, and then just use a <code>crash \"unreachable\"</code> in the platform for those effects that cannot fail (or rust host never provides an RocResult::Err(..) value).</p>",
        "id": 484108394,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732408510
    },
    {
        "content": "<p>Linux definitely seems to be more picky about this stuff than macos for some reason.</p>",
        "id": 484108406,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732408542
    },
    {
        "content": "<p>Do we generate size functions for fx's? It would be good to add a debug_assert that calls that and verifies the size of the return value in each effect is what roc expects.</p>",
        "id": 484109476,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732409785
    },
    {
        "content": "<p>I would expect more issues with roc result than without</p>",
        "id": 484112257,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732413102
    },
    {
        "content": "<p>Switching from effect to task (aka no result to result) lead to a lot of random issues</p>",
        "id": 484112277,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732413122
    },
    {
        "content": "<p>So I would try to avoid results where not needed</p>",
        "id": 484112315,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732413134
    },
    {
        "content": "<p>We do not generate size functions for effects</p>",
        "id": 484112320,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732413150
    },
    {
        "content": "<p>Linux probably isn't more picky. Probably would be an arm vs x86 c abi thing</p>",
        "id": 484112334,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732413182
    },
    {
        "content": "<p>I know we have bugs in our c abi handling</p>",
        "id": 484112341,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732413193
    },
    {
        "content": "<p>Also, unit is just void</p>",
        "id": 484112346,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732413205
    },
    {
        "content": "<p>So should be trivial and just always work</p>",
        "id": 484112355,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732413218
    },
    {
        "content": "<p>No alignment. No data at all</p>",
        "id": 484112361,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732413232
    },
    {
        "content": "<p>Something really fishy is going on... on this commit <a href=\"https://github.com/roc-lang/basic-cli/tree/86eca456539547b3720a0b1dc45ed967a6d76a7d\">86eca456539547b3720a0b1dc45ed967a6d76a7d</a></p>\n<p>Just looking at the LLVM IR, not even the host, roc isn't generating anything for the effect <code>PlatformTasks.currentArchOS!</code>, which is really strange. I modified <code>hello-world.roc</code> to use this effect but for some reason roc isnt generating anything for it. </p>\n<p>I've tried all kind of different things, like changing the interface, with and without Result, making it larger, random things... real head scratcher</p>",
        "id": 484113630,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732414625
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> are you able to look at this? any thoughts on why this wouldn't be generating the effect?</p>",
        "id": 485175180,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732925365
    },
    {
        "content": "<p>I'll take a look tomorrow</p>",
        "id": 485189709,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732938472
    },
    {
        "content": "<p>Is the issue platform specific. Works for me</p>",
        "id": 485250642,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732990556
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span>roc<span class=\"w\"> </span>examples/hello-world.roc\n<span class=\"o\">{</span>arch:<span class=\"w\"> </span>AARCH64,<span class=\"w\"> </span>os:<span class=\"w\"> </span>MACOS<span class=\"o\">}</span>\n<span class=\"o\">[</span>crates/roc_host/src/lib.rs:350:5<span class=\"o\">]</span><span class=\"w\"> </span><span class=\"nv\">exit_code</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">0</span>\n</code></pre></div>",
        "id": 485250693,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732990571
    },
    {
        "content": "<p>To get things building correctly, I had to <code>rm platform/*.{a,rh}</code> then run <code>./jump-start.sh</code> again.</p>",
        "id": 485250734,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732990618
    },
    {
        "content": "<p>This is on latest main for roc.</p>",
        "id": 485250751,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732990651
    },
    {
        "content": "<p>Continues to just work when changing <code>glue::ReturnArchOS</code> to only contain arch and os.</p>",
        "id": 485250881,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732990760
    },
    {
        "content": "<p>Was this your linux machine?</p>",
        "id": 485252659,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732992445
    },
    {
        "content": "<p>No, mac. Is it only broken on linux?</p>",
        "id": 485252724,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732992496
    },
    {
        "content": "<p>Yes, only broken on linux afaik</p>",
        "id": 485252843,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732992628
    },
    {
        "content": "<p>Ah, ok. Will check</p>",
        "id": 485252895,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732992680
    },
    {
        "content": "<p>Could be intel macs too though.</p>",
        "id": 485252909,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732992695
    },
    {
        "content": "<p>Should be fixed now</p>",
        "id": 485254199,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732993847
    },
    {
        "content": "<p>Issue was the return type for mainForHost not matching between Rust and Roc.</p>",
        "id": 485254212,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732993865
    },
    {
        "content": "<p>Thank you <span aria-label=\"partying face\" class=\"emoji emoji-1f973\" role=\"img\" title=\"partying face\">:partying_face:</span></p>",
        "id": 485254312,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732993953
    },
    {
        "content": "<p>Almost all passing. <code>build-and-test-native</code> is failing with a segfault in <code>examples/arg.roc</code>. Anyone have a native (not using nix) linux setup they can run the tests on? I assume running with valgrind will reveal the issue.</p>",
        "id": 485415300,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732996115
    },
    {
        "content": "<p>I guess this is probably a musl specific issue.</p>",
        "id": 485415357,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732996184
    },
    {
        "content": "<p>In a half hour, I can run on native 2021-era Fedora and/or Debian 12, though I may be unclear how to run it</p>",
        "id": 485415844,
        "sender_full_name": "jan kili",
        "timestamp": 1732996568
    },
    {
        "content": "<p>Actually, I realized I can just download the nightly to get out of nix. Don't have to deal with all of the dependency and what not. So I can test.</p>",
        "id": 485416246,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732996923
    },
    {
        "content": "<p>Though I can't repro...</p>",
        "id": 485416428,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732997118
    },
    {
        "content": "<p>Just built everything outside of nix with roc nightly and musl, no segfault or failures.</p>",
        "id": 485416440,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732997135
    },
    {
        "content": "<p>So if anyone else wants to try and repro, that would be great.</p>",
        "id": 485417729,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732998246
    },
    {
        "content": "<p>Commands to repro on ubuntu: <a href=\"https://github.com/roc-lang/basic-cli/blob/purity-inference/.github/workflows/ci.yml\">https://github.com/roc-lang/basic-cli/blob/purity-inference/.github/workflows/ci.yml</a></p>",
        "id": 485417742,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732998272
    },
    {
        "content": "<p>Everything is passing in nix, so I think this is the last piece to have fully working basic cli with purity inference.</p>",
        "id": 485417844,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732998369
    },
    {
        "content": "<p>Update: on a relatively clean native Debian 12 setup, I haven't figured out basic-cli local execution yet - <del>debugging with Brendan in DMs</del> suggestions welcome<br>\nAfter successful <code>./jump-start.sh</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>jan@lenny:~/_roc/basic-cli$ roc build.roc\nLinkingStrategy was set to Surgical (default), but I tried to find the surgical host at any of these paths Either the generic host files or the surgical host files must exist. File status: Generic host (platform/host.rh): missing, Generic metadata (platform/metadata_host.rm): missing, Surgical host (platform/linux-x64.rh): missing, Surgical metadata (platform/metadata_linux-x64.rm): missing but it does not exist.\njan@lenny:~/_roc/basic-cli$ roc examples/hello-world.roc\nLinkingStrategy was set to Surgical (default), but I tried to find the surgical host at any of these paths Either the generic host files or the surgical host files must exist. File status: Generic host (examples/../platform/host.rh): missing, Generic metadata (examples/../platform/metadata_host.rm): missing, Surgical host (examples/../platform/linux-x64.rh): missing, Surgical metadata (examples/../platform/metadata_linux-x64.rm): missing but it does not exist.\njan@lenny:~/_roc/basic-cli$\n</code></pre></div>",
        "id": 485423555,
        "sender_full_name": "jan kili",
        "timestamp": 1733003738
    },
    {
        "content": "<p>Strange. I thought <code>roc build.roc</code> would have given you the surgical host... does it work if you add <code>--linker legacy</code>?</p>",
        "id": 485423967,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733004079
    },
    {
        "content": "<p>Can you share <code>$ ls -hl platform/</code>?</p>",
        "id": 485424079,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733004155
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>jan@lenny:~/_roc/basic-cli$ ls -hl platform/\ntotal 15M\ndrwxr-xr-x 2 jan jan 4.0K Nov 30 14:38 Arg\n-rw-r--r-- 1 jan jan 3.3K Nov 30 14:38 Arg.roc\n-rw-r--r-- 1 jan jan 4.1K Nov 30 14:38 Cmd.roc\n-rw-r--r-- 1 jan jan 2.6K Nov 30 14:38 Dir.roc\n-rw-r--r-- 1 jan jan 4.5K Nov 30 14:38 EnvDecoding.roc\n-rw-r--r-- 1 jan jan 7.2K Nov 30 14:38 Env.roc\n-rw-r--r-- 1 jan jan 1.3K Nov 30 14:38 FileMetadata.roc\n-rw-r--r-- 1 jan jan 9.8K Nov 30 14:38 File.roc\n-rw-r--r-- 1 jan jan  399 Nov 30 14:38 glue.roc\n-rw-r--r-- 1 jan jan 4.8K Nov 30 14:38 Http.roc\n-rw-r--r-- 1 jan jan  813 Nov 30 14:38 InternalCommand.roc\n-rw-r--r-- 1 jan jan 1.4K Nov 30 14:38 InternalFile.roc\n-rw-r--r-- 1 jan jan 1.8K Nov 30 14:38 InternalHttp.roc\n-rw-r--r-- 1 jan jan 3.6K Nov 30 14:38 InternalPath.roc\n-rw-r--r-- 1 jan jan  263 Nov 30 14:38 libapp.roc\n-rwxr-xr-x 1 jan jan  63K Nov 30 14:54 libapp.so\n-rw-r--r-- 1 jan jan  14M Nov 30 14:54 libhost.a\n-rw-r--r-- 1 jan jan  600 Nov 30 14:38 Locale.roc\n-rw-r--r-- 1 jan jan 1.3K Nov 30 14:38 main.roc\n-rw-r--r-- 1 jan jan  31K Nov 30 14:38 Path.roc\n-rw-r--r-- 1 jan jan 3.1K Nov 30 14:38 PlatformTasks.roc\n-rw-r--r-- 1 jan jan  310 Nov 30 14:38 Sleep.roc\n-rw-r--r-- 1 jan jan 2.5K Nov 30 14:38 Stderr.roc\n-rw-r--r-- 1 jan jan 4.1K Nov 30 14:38 Stdin.roc\n-rw-r--r-- 1 jan jan 2.5K Nov 30 14:38 Stdout.roc\n-rw-r--r-- 1 jan jan 6.4K Nov 30 14:38 Tcp.roc\n-rw-r--r-- 1 jan jan 1.2K Nov 30 14:38 Tty.roc\n-rw-r--r-- 1 jan jan  16K Nov 30 14:38 Url.roc\n-rw-r--r-- 1 jan jan 2.4K Nov 30 14:38 Utc.roc\njan@lenny:~/_roc/basic-cli$\n</code></pre></div>",
        "id": 485424095,
        "sender_full_name": "jan kili",
        "timestamp": 1733004175
    },
    {
        "content": "<p>An you've ran <code>roc build.roc</code> or just jumpstart?</p>",
        "id": 485424114,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733004204
    },
    {
        "content": "<p>Oops, yeah I wanted legacy, Brendan mentioned that</p>\n<div class=\"codehilite\"><pre><span></span><code>jan@lenny:~/_roc/basic-cli$ roc build.roc --linker=legacy\nINFO: Checking provided roc; executing `roc version`:\nroc nightly pre-release, built from commit d72da8e on Fr 29 Nov 2024 09:11:57 UTC\nINFO: Getting the native operating system and architecture ...\nINFO: Building stubbed app shared library ...\n0 errors and 0 warnings found in 336 ms\n while successfully building:\n\n    platform/libapp.so\nINFO: Building rust host ...\nwarning: skipping duplicate package `host` found at `/home/jan/.cargo/git/checkouts/roc-f2007fde281427d6/8c73786/examples/glue/rust-platform`\nwarning: skipping duplicate package `host` found at `/home/jan/.cargo/git/checkouts/roc-f2007fde281427d6/8c73786/examples/cli/false-interpreter/platform`\nwarning: skipping duplicate package `host` found at `/home/jan/.cargo/git/checkouts/roc-f2007fde281427d6/8c73786/crates/glue/tests/fixture-templates/rust`\n    Finished `release` profile [optimized] target(s) in 0.37s\nINFO: Failed to get env var CARGO_BUILD_TARGET with error VarNotFound. Assuming default CARGO_BUILD_TARGET (native)...\nINFO: Moving the prebuilt binary from target/release/libhost.a to platform/linux-x64.a ...\nINFO: Preprocessing surgical host ...\nINFO: Successfully built platform files!\njan@lenny:~/_roc/basic-cli$\n</code></pre></div>",
        "id": 485424117,
        "sender_full_name": "jan kili",
        "timestamp": 1733004205
    },
    {
        "content": "<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"question\" class=\"emoji emoji-2753\" role=\"img\" title=\"question\">:question:</span> </p>\n<div class=\"codehilite\"><pre><span></span><code>jan@lenny:~/_roc/basic-cli$ roc examples/hello-world.roc\nHello, World!\njan@lenny:~/_roc/basic-cli$\n</code></pre></div>",
        "id": 485424141,
        "sender_full_name": "jan kili",
        "timestamp": 1733004236
    },
    {
        "content": "<p>Nice</p>",
        "id": 485424194,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733004260
    },
    {
        "content": "<p>Another data point for defaulting to linker legacy if it's available and the flag isn't provided</p>",
        "id": 485424208,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733004278
    },
    {
        "content": "<p>I keep forgetting to make a PR for that</p>",
        "id": 485424226,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733004300
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>jan@lenny:~/_roc/basic-cli$ does that mean purity inference is fully working in basic-cli@0.17.0?\nbash: does: command not found\njan@lenny:~/_roc/basic-cli$\n</code></pre></div>",
        "id": 485424237,
        "sender_full_name": "jan kili",
        "timestamp": 1733004308
    },
    {
        "content": "<p><span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span> but really though, happy to run any other commands to help validate PI-in-BC</p>",
        "id": 485425077,
        "sender_full_name": "jan kili",
        "timestamp": 1733005143
    },
    {
        "content": "<p>You might need to install a few more deps, but can you run the CI test script</p>",
        "id": 485426605,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733006706
    },
    {
        "content": "<p>If you could work through the commands here, it would be useful validation: <a href=\"https://github.com/roc-lang/basic-cli/blob/purity-inference/.github/workflows/ci.yml\">https://github.com/roc-lang/basic-cli/blob/purity-inference/.github/workflows/ci.yml</a></p>",
        "id": 485426706,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733006805
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>jan@lenny:~/_roc/basic-cli$ cat platform/src/lib.rs | grep -oP &#39;roc_fx_[^(\\s]*&#39; | sort | uniq -u | grep -q .\ncat: platform/src/lib.rs: No such file or directory\njan@lenny:~/_roc/basic-cli$ curl -fOL https://github.com/roc-lang/roc/releases/download/nightly/roc_nightly-linux_x86_64-TESTING.tar.gz\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n  0     9    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\ncurl: (22) The requested URL returned error: 404\njan@lenny:~/_roc/basic-cli$ curl -fOL https://github.com/roc-lang/roc/releases/download/nightly/roc_nightly-linux_x86_64-latest.tar.gz\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\n100 34.1M  100 34.1M    0     0  14.0M      0  0:00:02  0:00:02 --:--:-- 21.2M\njan@lenny:~/_roc/basic-cli$ mv $(ls | grep &quot;roc_nightly.*tar\\.gz&quot;) roc_nightly.tar.gz\njan@lenny:~/_roc/basic-cli$ tar -xzf roc_nightly.tar.gz\njan@lenny:~/_roc/basic-cli$ rm roc_nightly.tar.gz\njan@lenny:~/_roc/basic-cli$ mv roc_nightly* roc_nightly\njan@lenny:~/_roc/basic-cli$ ./roc_nightly/roc version\nroc nightly pre-release, built from commit d72da8e on Fr 29 Nov 2024 09:11:57 UTC\njan@lenny:~/_roc/basic-cli$ sudo apt install -y expect ncat\n[sudo] password for jan:\nReading package lists... Done\nBuilding dependency tree... Done\nReading state information... Done\nThe following additional packages will be installed:\n  liblua5.3-0 libtcl8.6 tcl-expect tcl8.6\nSuggested packages:\n  tk8.6 tcl-tclreadline\nThe following NEW packages will be installed:\n  expect liblua5.3-0 libtcl8.6 ncat tcl-expect tcl8.6\n0 upgraded, 6 newly installed, 0 to remove and 0 not upgraded.\nNeed to get 1,961 kB of archives.\nAfter this operation, 6,186 kB of additional disk space will be used.\nGet:1 http://deb.debian.org/debian bookworm/main amd64 libtcl8.6 amd64 8.6.13+dfsg-2 [1,035 kB]\nGet:2 http://deb.debian.org/debian bookworm/main amd64 tcl8.6 amd64 8.6.13+dfsg-2 [120 kB]\nGet:3 http://deb.debian.org/debian bookworm/main amd64 tcl-expect amd64 5.45.4-2+b1 [133 kB]\nGet:4 http://deb.debian.org/debian bookworm/main amd64 expect amd64 5.45.4-2+b1 [166 kB]\nGet:5 http://deb.debian.org/debian bookworm/main amd64 liblua5.3-0 amd64 5.3.6-2 [123 kB]\nGet:6 http://deb.debian.org/debian bookworm/main amd64 ncat amd64 7.93+dfsg1-1 [384 kB]\nFetched 1,961 kB in 0s (6,665 kB/s)\nSelecting previously unselected package libtcl8.6:amd64.\n(Reading database ... 185306 files and directories currently installed.)\nPreparing to unpack .../0-libtcl8.6_8.6.13+dfsg-2_amd64.deb ...\nUnpacking libtcl8.6:amd64 (8.6.13+dfsg-2) ...\nSelecting previously unselected package tcl8.6.\nPreparing to unpack .../1-tcl8.6_8.6.13+dfsg-2_amd64.deb ...\nUnpacking tcl8.6 (8.6.13+dfsg-2) ...\nSelecting previously unselected package tcl-expect:amd64.\nPreparing to unpack .../2-tcl-expect_5.45.4-2+b1_amd64.deb ...\nUnpacking tcl-expect:amd64 (5.45.4-2+b1) ...\nSelecting previously unselected package expect.\nPreparing to unpack .../3-expect_5.45.4-2+b1_amd64.deb ...\nUnpacking expect (5.45.4-2+b1) ...\nSelecting previously unselected package liblua5.3-0:amd64.\nPreparing to unpack .../4-liblua5.3-0_5.3.6-2_amd64.deb ...\nUnpacking liblua5.3-0:amd64 (5.3.6-2) ...\nSelecting previously unselected package ncat.\nPreparing to unpack .../5-ncat_7.93+dfsg1-1_amd64.deb ...\nUnpacking ncat (7.93+dfsg1-1) ...\nSetting up libtcl8.6:amd64 (8.6.13+dfsg-2) ...\nSetting up liblua5.3-0:amd64 (5.3.6-2) ...\nSetting up tcl8.6 (8.6.13+dfsg-2) ...\nSetting up tcl-expect:amd64 (5.45.4-2+b1) ...\nSetting up ncat (7.93+dfsg1-1) ...\nupdate-alternatives: using /usr/bin/ncat to provide /bin/nc (nc) in auto mode\nSetting up expect (5.45.4-2+b1) ...\nProcessing triggers for man-db (2.11.2-2) ...\nProcessing triggers for libc-bin (2.36-9+deb12u9) ...\njan@lenny:~/_roc/basic-cli$ expect -v\nexpect version 5.45.4\n</code></pre></div>",
        "id": 485426975,
        "sender_full_name": "jan kili",
        "timestamp": 1733007087
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>jan@lenny:~/_roc/basic-cli$ ROC=./roc_nightly/roc EXAMPLES_DIR=./examples/ ./ci/all_tests.sh &gt; pasteme.txt 2&gt;&amp;1\njan@lenny:~/_roc/basic-cli$\n</code></pre></div>\n<p><a href=\"https://pastebin.com/V5kGW7f9\">https://pastebin.com/V5kGW7f9</a></p>",
        "id": 485427301,
        "sender_full_name": "jan kili",
        "timestamp": 1733007451
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>jan@lenny:~/_roc/basic-cli$ grep -zqv &quot;crashed&quot; pasteme.txt\njan@lenny:~/_roc/basic-cli$ sudo apt-get install -y musl-tools\nReading package lists... Done\nBuilding dependency tree... Done\nReading state information... Done\nThe following additional packages will be installed:\n  musl musl-dev\nRecommended packages:\n  linux-musl-dev\nThe following NEW packages will be installed:\n  musl musl-dev musl-tools\n0 upgraded, 3 newly installed, 0 to remove and 0 not upgraded.\nNeed to get 1,036 kB of archives.\nAfter this operation, 3,954 kB of additional disk space will be used.\nGet:1 http://deb.debian.org/debian bookworm/main amd64 musl amd64 1.2.3-1 [406 kB]\nGet:2 http://deb.debian.org/debian bookworm/main amd64 musl-dev amd64 1.2.3-1 [587 kB]\nGet:3 http://deb.debian.org/debian bookworm/main amd64 musl-tools amd64 1.2.3-1 [42.3 kB]\nFetched 1,036 kB in 0s (3,959 kB/s)\nSelecting previously unselected package musl:amd64.\n(Reading database ... 185670 files and directories currently installed.)\nPreparing to unpack .../musl_1.2.3-1_amd64.deb ...\nUnpacking musl:amd64 (1.2.3-1) ...\nSelecting previously unselected package musl-dev:amd64.\nPreparing to unpack .../musl-dev_1.2.3-1_amd64.deb ...\nUnpacking musl-dev:amd64 (1.2.3-1) ...\nSelecting previously unselected package musl-tools.\nPreparing to unpack .../musl-tools_1.2.3-1_amd64.deb ...\nUnpacking musl-tools (1.2.3-1) ...\nSetting up musl:amd64 (1.2.3-1) ...\nSetting up musl-dev:amd64 (1.2.3-1) ...\nSetting up musl-tools (1.2.3-1) ...\nProcessing triggers for man-db (2.11.2-2) ...\njan@lenny:~/_roc/basic-cli$ rustup target add x86_64-unknown-linux-musl\ninfo: downloading component &#39;rust-std&#39; for &#39;x86_64-unknown-linux-musl&#39;\ninfo: installing component &#39;rust-std&#39; for &#39;x86_64-unknown-linux-musl&#39;\n 33.0 MiB /  33.0 MiB (100 %)  15.0 MiB/s in  2s ETA:  0s\njan@lenny:~/_roc/basic-cli$ ROC=./roc_nightly/roc CARGO_BUILD_TARGET=x86_64-unknown-linux-musl ./roc_nightly/roc build.roc\nINFO: Checking provided roc; executing `roc version`:\nroc nightly pre-release, built from commit d72da8e on Fr 29 Nov 2024 09:11:57 UTC\nINFO: Getting the native operating system and architecture ...\nINFO: Building stubbed app shared library ...\n0 errors and 0 warnings found in 425 ms\n while successfully building:\n\n    platform/libapp.so\nINFO: Building rust host ...\nwarning: skipping duplicate package `host` found at `/home/jan/.cargo/git/checkouts/roc-f2007fde281427d6/8c73786/examples/glue/rust-platform`\nwarning: skipping duplicate package `host` found at `/home/jan/.cargo/git/checkouts/roc-f2007fde281427d6/8c73786/examples/cli/false-interpreter/platform`\nwarning: skipping duplicate package `host` found at `/home/jan/.cargo/git/checkouts/roc-f2007fde281427d6/8c73786/crates/glue/tests/fixture-templates/rust`\n   Compiling libc v0.2.155\n   Compiling cfg-if v1.0.0\n...\n   Compiling roc_host_bin v0.0.1 (/home/jan/_roc/basic-cli/crates/roc_host_bin)\n   Compiling host v0.0.1 (/home/jan/_roc/basic-cli/crates/roc_host_lib)\n    Finished `release` profile [optimized] target(s) in 31.42s\nINFO: Moving the prebuilt binary from target/x86_64-unknown-linux-musl/release/libhost.a to platform/linux-x64.a ...\nINFO: Preprocessing surgical host ...\nINFO: Successfully built platform files!\njan@lenny:~/_roc/basic-cli$\n</code></pre></div>",
        "id": 485427419,
        "sender_full_name": "jan kili",
        "timestamp": 1733007588
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>jan@lenny:~/_roc/basic-cli$ NO_BUILD=1 ROC=./roc_nightly/roc EXAMPLES_DIR=./examples/ ./ci/all_tests.sh &gt; pasteme2.txt 2&gt;&amp;1\njan@lenny:~/_roc/basic-cli$\n</code></pre></div>\n<p><a href=\"https://pastebin.com/AWAaggwa\">https://pastebin.com/AWAaggwa</a></p>",
        "id": 485427536,
        "sender_full_name": "jan kili",
        "timestamp": 1733007672
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>jan@lenny:~/_roc/basic-cli$ grep -zqv &quot;crashed&quot; pasteme2.txt\njan@lenny:~/_roc/basic-cli$ I think I did it!\nbash: I: command not found\njan@lenny:~/_roc/basic-cli$\n</code></pre></div>",
        "id": 485427561,
        "sender_full_name": "jan kili",
        "timestamp": 1733007718
    },
    {
        "content": "<p>Yay, but also <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 485430118,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733010455
    },
    {
        "content": "<p>It's tricky to repro</p>",
        "id": 485430122,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733010465
    },
    {
        "content": "<p>So no repro yet? I don't think I saw a segfualt anywhere above. I wonder if it is Ubuntu 20.04 specific. <span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> any chance you can try to repro on something identical to CI?</p>\n<p>Maybe I can just install Valgrind in CI and run with Valgrind?</p>",
        "id": 485435673,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733016206
    },
    {
        "content": "<p>I can't repro it on my linux machine running native either. I'm going to restart that CI and see if that changes anything</p>",
        "id": 485440487,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733021107
    },
    {
        "content": "<p>Is anyone hoping this goes green tonight to greenlight PI for AoC newcomers?</p>",
        "id": 485440577,
        "sender_full_name": "jan kili",
        "timestamp": 1733021192
    },
    {
        "content": "<p>I'd like to have it done, but I don't think we're in any rush to upgrade it to the latest supported release. Maybe make a pre-release sometime soon for those game to use it and not wanting to build from source.</p>",
        "id": 485440670,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733021291
    },
    {
        "content": "<p>If we rush it, we're just likely to cause a lot of confusion and mess things up for people.</p>",
        "id": 485440698,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733021337
    },
    {
        "content": "<p>I can make a pre-release \"purity-inference\" version of my AoC template in case anyone wants to use it and builds basic-cli from source.</p>",
        "id": 485440927,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733021604
    },
    {
        "content": "<p>Added bonus if someone uses it and finds the bug that's blocking CI... we have a reproduction that we can glean some information from.</p>",
        "id": 485440995,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733021661
    },
    {
        "content": "<p>I don't think I can make the template work with purity inference. <span class=\"user-mention\" data-user-id=\"489294\">@Agus Zubiaga</span> I might need your assistance to figure out if it's a me thing or something is broken</p>",
        "id": 485441898,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733022602
    },
    {
        "content": "<p>I think I'm stuck on this error</p>\n<div class=\"codehilite\"><pre><span></span><code>$ roc check examples/2020/01.roc\n\n── MODULE PARAMS MISMATCH in examples/2020/01.roc ──────────────────────────────\n\nSomething is off with the params provided by this import:\n\n 9│&gt;  import aoc.AoC {\n10│&gt;      stdin!: Stdin.bytes!,\n11│&gt;      stdout!: Stdout.write!,\n12│&gt;      time!: \\{} -&gt; Utc.now! {} |&gt; Utc.toMillisSinceEpoch,\n13│&gt;  }\n\nThis is the type I inferred:\n\n    { stdin! : {} =&gt; Result (List U8) [\n        EndOfFile,\n        StdinErr [\n            AlreadyExists,\n            BrokenPipe,\n            Interrupted,\n            NotFound,\n            Other Str,\n            OutOfMemory,\n            PermissionDenied,\n            Unsupported,\n        ],\n    ], … }\n\nHowever, AoC expects:\n\n    { stdin! : effectful function, … }\n\n────────────────────────────────────────────────────────────────────────────────\n\n1 error and 4 warnings found in 20 ms\n</code></pre></div>",
        "id": 485442008,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733022718
    },
    {
        "content": "<p><a href=\"https://github.com/lukewilliamboswell/aoc-template/pull/5\">https://github.com/lukewilliamboswell/aoc-template/pull/5</a></p>",
        "id": 485442083,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733022780
    },
    {
        "content": "<p>Stripping it back to </p>\n<div class=\"codehilite\"><pre><span></span><code>module { stdin!, stdout!, time! } -&gt; [Solution, solve!]\n\nSolution err : {\n    year : U64,\n    day : U64,\n    title : Str,\n    part1 : Str -&gt; Result Str err,\n    part2 : Str -&gt; Result Str err,\n} where err implements Inspect\n\nsolve! : Solution err =&gt; Result {} _\nsolve! = \\{ year, day, title, part1, part2 } -&gt;\n    Ok {}\n</code></pre></div>\n<p>I get the following error... </p>\n<div class=\"codehilite\"><pre><span></span><code>$ roc check examples/2020/01.roc\n\n── MODULE PARAMS MISMATCH in examples/2020/01.roc ──────────────────────────────\n\nSomething is off with the params provided by this import:\n\n 9│&gt;  import aoc.AoC {\n10│&gt;      stdin!: Stdin.bytes!,\n11│&gt;      stdout!: Stdout.write!,\n12│&gt;      time!: \\{} -&gt; Utc.now! {} |&gt; Utc.toMillisSinceEpoch,\n13│&gt;  }\n\nThis is the type I inferred:\n\n    {\n        stdin! : {} =&gt; Result (List U8) [\n            EndOfFile,\n            StdinErr [\n                AlreadyExists,\n                BrokenPipe,\n                Interrupted,\n                NotFound,\n                Other Str,\n                OutOfMemory,\n                PermissionDenied,\n                Unsupported,\n            ],\n        ],\n        stdout! : Str =&gt; Result {} [StdoutErr [\n            AlreadyExists,\n            BrokenPipe,\n            Interrupted,\n            NotFound,\n            Other Str,\n            OutOfMemory,\n            PermissionDenied,\n            Unsupported,\n        ]],\n        time! : {}e =&gt; I128,\n    }\n\nHowever, AoC expects:\n\n    {\n        stdin! : effectful function,\n        stdout! : effectful function,\n        time! : effectful function,\n    }\n\n────────────────────────────────────────────────────────────────────────────────\n\n1 error and 8 warnings found in 20 ms\n</code></pre></div>",
        "id": 485442198,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733022903
    },
    {
        "content": "<p>Interesting. That looks like we’re not constraining the module with params enough. <code>effectful function</code> means we only inferred it’s effectful from the name of the field, but we don’t know anything about the arguments or return type.</p>",
        "id": 485442315,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1733023038
    },
    {
        "content": "<p>Unfortunately, I’m moving this whole weekend so I probably won’t have time to look at this until Monday</p>",
        "id": 485442337,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1733023080
    },
    {
        "content": "<p>Are we planning to use purity inference for AoC?</p>",
        "id": 485442420,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1733023147
    },
    {
        "content": "<p>No</p>",
        "id": 485442423,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733023150
    },
    {
        "content": "<p>Ok, good <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 485442427,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1733023159
    },
    {
        "content": "<p>I just jumped out of bed realizing everything I did above was on the <code>main</code> branch and y'all were probably wondering about the <code>purity-inference</code> branch.</p>",
        "id": 485450730,
        "sender_full_name": "jan kili",
        "timestamp": 1733032067
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> does this look more like what you expected?</p>\n<div class=\"codehilite\"><pre><span></span><code>[jan@framey basic-cli]$ git status\nOn branch purity-inference\nYour branch is up to date with &#39;origin/purity-inference&#39;.\n\nnothing to commit, working tree clean\n[jan@framey basic-cli]$ roc build.roc\nroc: /lib64/libtinfo.so.6: no version information available (required by roc)\nError:\n\n        Function, roc__mainForHost_0_caller, was not defined by the app.\n\nPotential causes:\n\n        - because the platform was built with a non-compatible version of roc compared to the one you are running.\n\n                solutions:\n                        + Downgrade your roc version to the one that was used to build the platform.\n                        + Or ask the platform author to release a new version of the platform using a current roc release.\n\n        - This can also occur due to a bug in the compiler. In that case, file an issue here: https://github.com/roc-lang/roc/issues/new/choose\n[jan@framey basic-cli]$\n</code></pre></div>\n<p>(on Fedora 40 now, not at my Debian 12 machine until tomorrow)</p>",
        "id": 485450791,
        "sender_full_name": "jan kili",
        "timestamp": 1733032111
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>[jan@framey basic-cli]$ ./jump-start.sh\n+ &#39;[&#39; -z &#39;&#39; &#39;]&#39;\n+ echo &#39;Warning: ROC environment variable is not set... I&#39;\\&#39;&#39;ll try with just &#39;\\&#39;&#39;roc&#39;\\&#39;&#39;.&#39;\nWarning: ROC environment variable is not set... I&#39;ll try with just &#39;roc&#39;.\n+ ROC=roc\n+ roc build --lib ./platform/libapp.roc\nroc: /lib64/libtinfo.so.6: no version information available (required by roc)\n0 errors and 0 warnings found in 360 ms\n while successfully building:\n\n    ./platform/libapp\n+ cargo build --release\n    Finished `release` profile [optimized] target(s) in 0.16s\n+ &#39;[&#39; -n &#39;&#39; &#39;]&#39;\n+ cp target/release/libhost.a ./platform/libhost.a\n+ roc build --linker=legacy build.roc\nroc: /lib64/libtinfo.so.6: no version information available (required by roc)\nld: platform/linux-x64.a(host-e4e7228faf4c51e3.host.62e8b11d478b1302-cgu.0.rcgu.o): in function `rust_main&#39;:\nhost.62e8b11d478b1302-cgu.0:(.text.rust_main+0x88): undefined reference to `roc__mainForHost_0_caller&#39;\nld: host.62e8b11d478b1302-cgu.0:(.text.rust_main+0xc2): undefined reference to `roc__mainForHost_0_caller&#39;\nthread &#39;main&#39; panicked at crates/compiler/build/src/program.rs:1058:17:\nnot yet implemented: linker failed with exit code Some(1)\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n[jan@framey basic-cli]$ roc build.roc --linker=legacy\nroc: /lib64/libtinfo.so.6: no version information available (required by roc)\nld: platform/linux-x64.a(host-e4e7228faf4c51e3.host.62e8b11d478b1302-cgu.0.rcgu.o): in function `rust_main&#39;:\nhost.62e8b11d478b1302-cgu.0:(.text.rust_main+0x88): undefined reference to `roc__mainForHost_0_caller&#39;\nld: host.62e8b11d478b1302-cgu.0:(.text.rust_main+0xc2): undefined reference to `roc__mainForHost_0_caller&#39;\nthread &#39;main&#39; panicked at crates/compiler/build/src/program.rs:1058:17:\nnot yet implemented: linker failed with exit code Some(1)\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n[jan@framey basic-cli]$\n[jan@framey basic-cli]$ roc build.roc --linker=legacy\nroc: /lib64/libtinfo.so.6: no version information available (required by roc)\nld: platform/linux-x64.a(host-e4e7228faf4c51e3.host.62e8b11d478b1302-cgu.0.rcgu.o): in function `rust_main&#39;:\nhost.62e8b11d478b1302-cgu.0:(.text.rust_main+0x88): undefined reference to `roc__mainForHost_0_caller&#39;\nld: host.62e8b11d478b1302-cgu.0:(.text.rust_main+0xc2): undefined reference to `roc__mainForHost_0_caller&#39;\nthread &#39;main&#39; panicked at crates/compiler/build/src/program.rs:1058:17:\nnot yet implemented: linker failed with exit code Some(1)\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n[jan@framey basic-cli]$\n</code></pre></div>",
        "id": 485450958,
        "sender_full_name": "jan kili",
        "timestamp": 1733032320
    },
    {
        "content": "<p>That is likely different. Probably from a stale <code>platform/linux_x64.a</code> (not sure I got that file name quite right). If you <code>rm platform/*.a</code> then <code>./jump-start.sh</code> again,what do you get?</p>",
        "id": 485451015,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733032364
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>[jan@framey basic-cli]$ rm platform/*.a\n[jan@framey basic-cli]$ ./jump-start.sh\n+ &#39;[&#39; -z &#39;&#39; &#39;]&#39;\n+ echo &#39;Warning: ROC environment variable is not set... I&#39;\\&#39;&#39;ll try with just &#39;\\&#39;&#39;roc&#39;\\&#39;&#39;.&#39;\nWarning: ROC environment variable is not set... I&#39;ll try with just &#39;roc&#39;.\n+ ROC=roc\n+ roc build --lib ./platform/libapp.roc\nroc: /lib64/libtinfo.so.6: no version information available (required by roc)\n0 errors and 0 warnings found in 351 ms\n while successfully building:\n\n    ./platform/libapp\n+ cargo build --release\n    Finished `release` profile [optimized] target(s) in 0.18s\n+ &#39;[&#39; -n &#39;&#39; &#39;]&#39;\n+ cp target/release/libhost.a ./platform/libhost.a\n+ roc build --linker=legacy build.roc\nroc: /lib64/libtinfo.so.6: no version information available (required by roc)\n0 errors and 0 warnings found in 986 ms\n while successfully building:\n\n    build\n[jan@framey basic-cli]$ roc build.roc\nroc: /lib64/libtinfo.so.6: no version information available (required by roc)\nError:\n\n        Function, roc__mainForHost_0_caller, was not defined by the app.\n\nPotential causes:\n\n        - because the platform was built with a non-compatible version of roc compared to the one you are running.\n\n                solutions:\n                        + Downgrade your roc version to the one that was used to build the platform.\n                        + Or ask the platform author to release a new version of the platform using a current roc release.\n\n        - This can also occur due to a bug in the compiler. In that case, file an issue here: https://github.com/roc-lang/roc/issues/new/choose\n[jan@framey basic-cli]$ roc build.roc --linker=legacy\nroc: /lib64/libtinfo.so.6: no version information available (required by roc)\nINFO: Checking provided roc; executing `roc version`:\nroc: /lib64/libtinfo.so.6: no version information available (required by roc)\nroc nightly pre-release, built from commit d72da8e on Fr 29 Nov 2024 09:11:57 UTC\nINFO: Getting the native operating system and architecture ...\nINFO: Building stubbed app shared library ...\nroc: /lib64/libtinfo.so.6: no version information available (required by roc)\n0 errors and 0 warnings found in 949 ms\n while successfully building:\n\n    platform/libapp.so\nINFO: Building rust host ...\n    Finished `release` profile [optimized] target(s) in 0.20s\nINFO: Failed to get env var CARGO_BUILD_TARGET with error VarNotFound. Assuming default CARGO_BUILD_TARGET (native)...\nINFO: Moving the prebuilt binary from target/release/libhost.a to platform/linux-x64.a ...\nINFO: Preprocessing surgical host ...\nroc: /lib64/libtinfo.so.6: no version information available (required by roc)\nINFO: Successfully built platform files!\n[jan@framey basic-cli]$ roc examples/hello-world.roc\nroc: /lib64/libtinfo.so.6: no version information available (required by roc)\nHello, World!\n[jan@framey basic-cli]$\n</code></pre></div>",
        "id": 485451055,
        "sender_full_name": "jan kili",
        "timestamp": 1733032428
    },
    {
        "content": "<p>I also looked into this, I was able to get purity inference basic cli to build fine (I had to use the jumpstart.s,)  I'm on nixos.</p>\n<p>I also tried fixing the AOC template:<br>\nI learned a few things</p>\n<ol>\n<li>The  type checking of modules  isn't correctly detecting whether it should enable purity inference or tasks effect mode. I had a bunch of errors saying \"stdout\" isn't a function because it was looking for that rather than \"stout!\" I fixed this temporarily by modifying the compiler to always use purity inference mode.</li>\n<li>That change doesn't help the overall AOC template issue <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></li>\n</ol>",
        "id": 485451102,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733032447
    },
    {
        "content": "<p>Looks like the above is green (on Fedora 40)</p>",
        "id": 485451244,
        "sender_full_name": "jan kili",
        "timestamp": 1733032630
    },
    {
        "content": "<p><span aria-label=\"salute\" class=\"emoji emoji-1fae1\" role=\"img\" title=\"salute\">:salute:</span> back to bed for me then</p>",
        "id": 485451339,
        "sender_full_name": "jan kili",
        "timestamp": 1733032737
    },
    {
        "content": "<p>I fixed it!!</p>",
        "id": 485451960,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733033314
    },
    {
        "content": "<p>I assume the aoc template not the basic CLI issue in ci</p>",
        "id": 485452496,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733033922
    },
    {
        "content": "<p>Yeah, the template issue.<br>\nI'm working on making a test and also fixing the type checking issue .<br>\nThe fix was:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// The existing effectul function unification function:</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">EffectfulFunc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Func</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fx</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">outcome</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">unify_pool</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">pool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Variable</span><span class=\"p\">::</span><span class=\"n\">EFFECTFUL</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">fx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">mode</span><span class=\"p\">);</span>\n\n<span class=\"w\">            </span><span class=\"n\">outcome</span><span class=\"p\">.</span><span class=\"k\">union</span><span class=\"p\">(</span><span class=\"n\">merge</span><span class=\"p\">(</span>\n<span class=\"w\">                </span><span class=\"n\">env</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">ctx</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">Structure</span><span class=\"p\">(</span><span class=\"n\">Func</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">closure</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">ret</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Variable</span><span class=\"p\">::</span><span class=\"n\">EFFECTFUL</span><span class=\"p\">)),</span>\n<span class=\"w\">            </span><span class=\"p\">));</span>\n\n<span class=\"w\">            </span><span class=\"n\">outcome</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"c1\">//I added this becasue it seemed to not be unifying properly and just leaving the function as effectful func so I assumed it never processed the oppisite case</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">Func</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fx</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">EffectfulFunc</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">outcome</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">unify_pool</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">pool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">fx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Variable</span><span class=\"p\">::</span><span class=\"n\">EFFECTFUL</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">mode</span><span class=\"p\">);</span>\n\n<span class=\"w\">            </span><span class=\"n\">outcome</span><span class=\"p\">.</span><span class=\"k\">union</span><span class=\"p\">(</span><span class=\"n\">merge</span><span class=\"p\">(</span>\n<span class=\"w\">                </span><span class=\"n\">env</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">ctx</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">Structure</span><span class=\"p\">(</span><span class=\"n\">Func</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">closure</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">ret</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Variable</span><span class=\"p\">::</span><span class=\"n\">EFFECTFUL</span><span class=\"p\">)),</span>\n<span class=\"w\">            </span><span class=\"p\">));</span>\n\n<span class=\"w\">            </span><span class=\"n\">outcome</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 485453518,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733034972
    },
    {
        "content": "<p>I think the current method for detecting whether a module should be using purity inference or Task effects is kind of janky and error prone.<br>\nFor example if I require a record containing an effectful function it will break.<br>\nBut given I assume tasks will be removed soon I suppose it's okay</p>",
        "id": 485454408,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733035806
    },
    {
        "content": "<p>Here is the PR fixing it:<br>\n<a href=\"https://github.com/roc-lang/roc/pull/7285\">https://github.com/roc-lang/roc/pull/7285</a></p>",
        "id": 485456384,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733037783
    },
    {
        "content": "<p>Awesome! Great catch</p>",
        "id": 485472328,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1733051358
    },
    {
        "content": "<p>I guess the issue you found with the compiler not switching to purity inference mode was because you had no <code>main.roc</code>, so it wasn’t finding a <code>hosted</code> module on the platform with a <code>!</code>-suffixed function when you <code>roc check</code> a <code>module</code></p>",
        "id": 485472603,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1733051619
    },
    {
        "content": "<p>That’s a tricky case to detect reliably, because we need to switch to the right mode before canonicalization, but I don’t know if we have the all the context from just the parser</p>",
        "id": 485473010,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1733051969
    },
    {
        "content": "<p>Maybe we can visit all the exprs looking for <code>!</code>-suffixed defs and record fields (not call exprs because those could be tasks with the  <code>!</code> operator)</p>",
        "id": 485473183,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1733052107
    },
    {
        "content": "<p>Using the platform is way easier to tell, but of course, we have no platform in this case</p>",
        "id": 485473298,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1733052205
    },
    {
        "content": "<blockquote>\n<p>any chance you can try to repro on something identical to CI?</p>\n</blockquote>\n<p>It's using a github CI machine, I'm just going to try calling valgrind in the ci workflow</p>",
        "id": 485474267,
        "sender_full_name": "Anton",
        "timestamp": 1733053066
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code> + valgrind ./examples//args div -n 5 -d 20\n==5956== Memcheck, a memory error detector\n==5956== Copyright (C) 2002-2017, and GNU GPL&#39;d, by Julian Seward et al.\n==5956== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info\n==5956== Command: ./examples//args div -n 5 -d 20\n==5956==\nreceived argument: div\n==5956== Can&#39;t extend stack to 0x4803138 during signal delivery for thread 1:\n==5956==   no stack segment\n==5956==\n==5956== Process terminating with default action of signal 11 (SIGSEGV)\n==5956==  Access not within mapped region at address 0x4803138\n==5956==    at 0x2C1045: ??? (in /home/runner/work/basic-cli/basic-cli/examples/args)\n==5956==    by 0x24AC63: ??? (in /home/runner/work/basic-cli/basic-cli/examples/args)\n==5956==    by 0x12950D: ??? (in /home/runner/work/basic-cli/basic-cli/examples/args)\n==5956==    by 0x480423F: ???\n==5956==    by 0x1294F2: ??? (in /home/runner/work/basic-cli/basic-cli/examples/args)\n==5956==    by 0x480423F: ???\n==5956==    by 0x12981C: ??? (in /home/runner/work/basic-cli/basic-cli/examples/args)\n==5956==    by 0x3E8: ???\n==5956==    by 0x7E: ???\n==5956==  If you believe this happened as a result of a stack\n==5956==  overflow in your program&#39;s main thread (unlikely but\n==5956==  possible), you can try to increase the size of the\n==5956==  main thread stack using the --main-stacksize= flag.\n==5956==  The main thread stack size used in this run was 16777216.\n==5956==\n==5956== HEAP SUMMARY:\n==5956==     in use at exit: 0 bytes in 0 blocks\n==5956==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated\n==5956==\n==5956== All heap blocks were freed -- no leaks are possible\n==5956==\n==5956== For lists of detected and suppressed errors, rerun with: -s\n==5956== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n./ci/all_tests.sh: line 60:  5956 Segmentation fault      (core dumped) valgrind $EXAMPLES_DIR/args div -n 5 -d 20\n</code></pre></div>\n<p>I can try with the legacy linker tomorrow to clear up the <code>???</code></p>",
        "id": 485477816,
        "sender_full_name": "Anton",
        "timestamp": 1733056396
    },
    {
        "content": "<p>This could be <a href=\"https://github.com/roc-lang/roc/issues/5924\">#5924</a></p>",
        "id": 485477938,
        "sender_full_name": "Anton",
        "timestamp": 1733056489
    },
    {
        "content": "<p>You can probably see the valgrind errors locally</p>",
        "id": 485478203,
        "sender_full_name": "Anton",
        "timestamp": 1733056734
    },
    {
        "content": "<p>I made a small change and now I see <code>__run_exit_handlers</code> and <code>exit</code> in the valgrind output, so it is very likely <a href=\"https://github.com/roc-lang/roc/issues/5924\">#5924</a></p>",
        "id": 485479249,
        "sender_full_name": "Anton",
        "timestamp": 1733057720
    },
    {
        "content": "<p>btw if it is <a href=\"https://github.com/roc-lang/roc/issues/5924\">#5924</a>, using the legacy linker will make the issue disappear</p>",
        "id": 485479927,
        "sender_full_name": "Anton",
        "timestamp": 1733058244
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"489294\">Agus Zubiaga</span> <a href=\"#narrow/stream/316715-contributing/topic/basic-cli.20purity.20inference/near/485473010\">said</a>:</p>\n<blockquote>\n<p>That’s a tricky case to detect reliably, because we need to switch to the right mode before canonicalization, but I don’t know if we have the all the context from just the parser</p>\n</blockquote>\n<p>Does this, issue just kind of go away when we remove Tasks though? Like we can then not bother detecting if it's purity inference for tasks</p>",
        "id": 485480010,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733058344
    },
    {
        "content": "<p>As in, the current solution is imperfect but also very temporary, so it's not a big deal.</p>",
        "id": 485480141,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733058469
    },
    {
        "content": "<p>Yeah, totally</p>",
        "id": 485480708,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1733058983
    },
    {
        "content": "<p>From my experience with <a href=\"https://github.com/roc-lang/roc/issues/5924\">#5924</a>, we'll probably be good if we add or remove a roc_fx function from crates/roc_host/src/lib.rs, anybody any ideas for functionality we can add or leave out?</p>",
        "id": 486160194,
        "sender_full_name": "Anton",
        "timestamp": 1733339005
    },
    {
        "content": "<p>Lol, I didn't realise this could be a workaround. I could add something random in that we don't need pretty easily.</p>",
        "id": 486161108,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733339377
    },
    {
        "content": "<p>A minor addition would be adding <a href=\"https://doc.rust-lang.org/std/fs/fn.hard_link.html\">https://doc.rust-lang.org/std/fs/fn.hard_link.html</a> but something more substantial could be a semaphore.</p>",
        "id": 487106701,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733781126
    },
    {
        "content": "<p>I can start with hard linking, and then soft linking, and if those don't work we try something else?</p>",
        "id": 487106762,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733781153
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> thoughts?</p>",
        "id": 487106867,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733781195
    },
    {
        "content": "<p>Okay, I'll give that a go</p>",
        "id": 487107255,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733781335
    },
    {
        "content": "<p>Adding hard link doesn't seem to have worked</p>",
        "id": 487120451,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733786592
    },
    {
        "content": "<p>I'm thinking of merging <span class=\"user-mention\" data-user-id=\"651372\">@Eli Dowling</span>'s PR <a href=\"https://github.com/roc-lang/basic-cli/pull/278\">https://github.com/roc-lang/basic-cli/pull/278</a> into the PI branch. We don't have CI oversight here, but we haven't got everything passing yet anyway, and I think we should include the changes.</p>",
        "id": 487150138,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733800719
    },
    {
        "content": "<p>I'm not about the merge it rn, but if there's no objections I can do it tomorrow.</p>",
        "id": 487150203,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733800747
    },
    {
        "content": "<p>Good idea!</p>",
        "id": 487150751,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733800980
    },
    {
        "content": "<p>I'll review before then</p>",
        "id": 487150774,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733800990
    },
    {
        "content": "<p>I do think we should make ci/all_tests.sh pass on <a href=\"https://github.com/roc-lang/basic-cli/pull/278\">https://github.com/roc-lang/basic-cli/pull/278</a> before the merge, that just seems easier.</p>",
        "id": 487208264,
        "sender_full_name": "Anton",
        "timestamp": 1733825511
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> did you make much progress? </p>\n<p>I am just looking at CI and it looks like we've progressed significantly, it's only failing in native now.</p>",
        "id": 487350379,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733869115
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> or anyone familiar with valgrind... can we glean anything from this?</p>\n<div class=\"codehilite\"><pre><span></span><code>+ valgrind ./examples//args div -n 5 -d 20\n==4550== Memcheck, a memory error detector\n==4550== Copyright (C) 2002-2017, and GNU GPL&#39;d, by Julian Seward et al.\n==4550== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info\n==4550== Command: ./examples//args div -n 5 -d 20\n==4550==\nreceived argument: div\n==4550== Can&#39;t extend stack to 0x484c138 during signal delivery for thread 1:\n==4550==   no stack segment\n==4550==\n==4550== Process terminating with default action of signal 11 (SIGSEGV)\n==4550==  Access not within mapped region at address 0x484C138\n==4550==    at 0x2B0004: ??? (in /home/runner/work/basic-cli/basic-cli/examples/args)\n==4550==    by 0x48EE8A6: __run_exit_handlers (exit.c:108)\n==4550==    by 0x48EEA5F: exit (exit.c:139)\n==4550==    by 0x2556C4: ??? (in /home/runner/work/basic-cli/basic-cli/examples/args)\n==4550==    by 0x255653: ??? (in /home/runner/work/basic-cli/basic-cli/examples/args)\n==4550==    by 0x12859D: ??? (in /home/runner/work/basic-cli/basic-cli/examples/args)\n==4550==  If you believe this happened as a result of a stack\n==4550==  overflow in your program&#39;s main thread (unlikely but\n==4550==  possible), you can try to increase the size of the\n==4550==  main thread stack using the --main-stacksize= flag.\n==4550==  The main thread stack size used in this run was 16777216.\n==4550== Invalid write of size 8\n==4550==    at 0x4831134: _vgnU_freeres (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_core-amd64-linux.so)\n==4550==  Address 0x484cff8 is on thread 1&#39;s stack\n==4550==\n==4550==\n==4550== Process terminating with default action of signal 11 (SIGSEGV)\n==4550==  Access not within mapped region at address 0x484CFF8\n==4550==    at 0x4831134: _vgnU_freeres (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_core-amd64-linux.so)\n==4550==  If you believe this happened as a result of a stack\n==4550==  overflow in your program&#39;s main thread (unlikely but\n==4550==  possible), you can try to increase the size of the\n==4550==  main thread stack using the --main-stacksize= flag.\n==4550==  The main thread stack size used in this run was 16777216.\n==4550==\n==4550== HEAP SUMMARY:\n==4550==     in use at exit: 0 bytes in 0 blocks\n==4550==   total heap usage: 16 allocs, 16 frees, 3,330 bytes allocated\n==4550==\n==4550== All heap blocks were freed -- no leaks are possible\n==4550==\n==4550== For lists of detected and suppressed errors, rerun with: -s\n==4550== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)\n./ci/all_tests.sh: line 60:  4550 Segmentation fault      (core dumped) valgrind $EXAMPLES_DIR/args div -n 5 -d 20\nError: Process completed with exit code 139.\n</code></pre></div>",
        "id": 487350461,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733869164
    },
    {
        "content": "<p>oh... I think I found something <span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span>  that is just completely wrong. The args example doesn't do that anymore!</p>",
        "id": 487351164,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733869562
    },
    {
        "content": "<p>can you share what you found, I'm curious</p>",
        "id": 487351693,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733869841
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/basic-cli/pull/257/commits/cb9fface5c9aef5186b68d6e4be72e22ad36932f\">https://github.com/roc-lang/basic-cli/pull/257/commits/cb9fface5c9aef5186b68d6e4be72e22ad36932f</a></p>",
        "id": 487351728,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733869869
    },
    {
        "content": "<p>We were calling the args example <code>valgrind $EXAMPLES_DIR/args div -n 5 -d 20</code> but args has been dramatically simplified so we don't have a dependency on Weaver any more</p>",
        "id": 487351772,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733869903
    },
    {
        "content": "<p>Ah, maybe that was just our setup for investigating the segfault...</p>",
        "id": 487352039,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733870042
    },
    {
        "content": "<p>Added it back and getting the same segfault in CI. <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 487352825,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733870422
    },
    {
        "content": "<p>I'm pretty sure the issue is related to ubuntu-20.04, I can't repro on my 22.04. I might try disabling that machine... just to confirm CI passes for 22.04 also.</p>",
        "id": 487354714,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733871414
    },
    {
        "content": "<p>Is the failure with both surgical and legacy linker? Can we change ci test check?</p>",
        "id": 487356660,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733872557
    },
    {
        "content": "<p>Ok, so using only legacy linker and valgrind is happy... </p>\n<div class=\"codehilite\"><pre><span></span><code>+ valgrind --main-stacksize=32777216 --track-origins=yes --leak-check=full --show-leak-kinds=all --verbose ./examples//args argument\n==4639== Memcheck, a memory error detector\n==4639== Copyright (C) 2002-2017, and GNU GPL&#39;d, by Julian Seward et al.\n==4639== Using Valgrind-3.15.0-608cb11914-20190413 and LibVEX; rerun with -h for copyright info\n==4639== Command: ./examples//args argument\n--4639-- Reading syms from /usr/lib/x86_64-linux-gnu/libc-2.31.so\n--4639--   Considering /usr/lib/debug/.build-id/07/02430aef5fa3dda43986563e9ffcc47efbd75e.debug ..\n--4639--   .. build-id is valid\n--4639-- Reading syms from /usr/lib/x86_64-linux-gnu/libm-2.31.so\n--4639--   Considering /usr/lib/debug/.build-id/8d/2573eff281739f0e2b0eb710c860ce0b7261cf.debug ..\n--4639--   .. build-id is valid\n--4639-- Reading syms from /usr/lib/x86_64-linux-gnu/libpthread-2.31.so\n--4639--   Considering /usr/lib/debug/.build-id/9a/65bb469e45a1c6fbcffae5b82a2fd7a69eb479.debug ..\n--4639--   .. build-id is valid\n--4639-- Reading syms from /usr/lib/x86_64-linux-gnu/libdl-2.31.so\n--4639--   Considering /usr/lib/debug/.build-id/25/372f43dbcc661aa02020d0365c948e89f6e612.debug ..\n--4639--   .. build-id is valid\n--4639-- Reading syms from /usr/lib/x86_64-linux-gnu/librt-2.31.so\n--4639--   Considering /usr/lib/debug/.build-id/fc/7c873442781f08af6bc88f1acac7ecccec7285.debug ..\n--4639--   .. build-id is valid\n--4639-- Reading syms from /usr/lib/x86_64-linux-gnu/libutil-2.31.so\n--4639--   Considering /usr/lib/debug/.build-id/24/4c5140c0521c81914afe5d92ad5ccc954857d5.debug ..\n--4639--   .. build-id is valid\n--4639-- Reading syms from /usr/lib/x86_64-linux-gnu/libgcc_s.so.1\n--4639--    object doesn&#39;t have a symbol table\n--4639-- REDIR: 0x48fa480 (libc.so.6:memmove) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)\n--4639-- REDIR: 0x48f9780 (libc.so.6:strncpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)\n--4639-- REDIR: 0x48fa7b0 (libc.so.6:strcasecmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)\n--4639-- REDIR: 0x48f90a0 (libc.so.6:strcat) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)\n--4639-- REDIR: 0x48f97e0 (libc.so.6:rindex) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)\n--4639-- REDIR: 0x48fbc50 (libc.so.6:rawmemchr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)\n--4639-- REDIR: 0x4916ce0 (libc.so.6:wmemchr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)\n--4639-- REDIR: 0x4916820 (libc.so.6:wcscmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)\n--4639-- REDIR: 0x48fa5e0 (libc.so.6:mempcpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)\n--4639-- REDIR: 0x48fa410 (libc.so.6:bcmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)\n--4639-- REDIR: 0x48f9710 (libc.so.6:strncmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)\n--4639-- REDIR: 0x48f9150 (libc.so.6:strcmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)\n--4639-- REDIR: 0x48fa540 (libc.so.6:memset) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)\n--4639-- REDIR: 0x49167e0 (libc.so.6:wcschr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)\n--4639-- REDIR: 0x48f9670 (libc.so.6:strnlen) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)\n--4639-- REDIR: 0x48f9230 (libc.so.6:strcspn) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)\n--4639-- REDIR: 0x48fa800 (libc.so.6:strncasecmp) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)\n--4639-- REDIR: 0x48f91d0 (libc.so.6:strcpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)\n--4639-- REDIR: 0x48fa950 (libc.so.6:memcpy@@GLIBC_2.14) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)\n--4639-- REDIR: 0x4917f50 (libc.so.6:wcsnlen) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)\n--4639-- REDIR: 0x4916860 (libc.so.6:wcscpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)\n--4639-- REDIR: 0x48f9820 (libc.so.6:strpbrk) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)\n--4639-- REDIR: 0x48f9100 (libc.so.6:index) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)\n--4639-- REDIR: 0x48f9630 (libc.so.6:strlen) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)\n--4639-- REDIR: 0x4902bb0 (libc.so.6:memrchr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)\n--4639-- REDIR: 0x48fa850 (libc.so.6:strcasecmp_l) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)\n--4639-- REDIR: 0x48fa3d0 (libc.so.6:memchr) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)\n--4639-- REDIR: 0x4916930 (libc.so.6:wcslen) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)\n--4639-- REDIR: 0x48f9ae0 (libc.so.6:strspn) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)\n--4639-- REDIR: 0x48fa750 (libc.so.6:stpncpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)\n--4639-- REDIR: 0x48fa6f0 (libc.so.6:stpcpy) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)\n--4639-- REDIR: 0x48fbc90 (libc.so.6:strchrnul) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)\n--4639-- REDIR: 0x48fa8a0 (libc.so.6:strncasecmp_l) redirected to 0x48311d0 (_vgnU_ifunc_wrapper)\n--4639-- REDIR: 0x49e2730 (libc.so.6:__strrchr_avx2) redirected to 0x483ea10 (rindex)\n--4639-- REDIR: 0x48f40e0 (libc.so.6:malloc) redirected to 0x483b780 (malloc)\n--4639-- REDIR: 0x49e2900 (libc.so.6:__strlen_avx2) redirected to 0x483ef40 (strlen)\n--4639-- REDIR: 0x48f46d0 (libc.so.6:free) redirected to 0x483c9d0 (free)\n--4639-- REDIR: 0x49de230 (libc.so.6:__strncmp_avx2) redirected to 0x483f670 (strncmp)\n--4639-- REDIR: 0x48f5b10 (libc.so.6:calloc) redirected to 0x483dce0 (calloc)\nreceived argument: argument\n==4639==\n==4639== HEAP SUMMARY:\n==4639==     in use at exit: 0 bytes in 0 blocks\n==4639==   total heap usage: 8 allocs, 8 frees, 1,320 bytes allocated\n==4639==\n==4639== All heap blocks were freed -- no leaks are possible\n==4639==\n==4639== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n</code></pre></div>\n<p>But, now CI is stopping on another thing... so need to investigate that also. It may be related. </p>\n<div class=\"codehilite\"><pre><span></span><code>+ ./roc_nightly/roc dev ./examples/command.roc\nBAZ=DUCK\nFOO=BAR\nFOO=BAR\nEXEC\nError: Process completed with exit code 1.\n</code></pre></div>",
        "id": 487360811,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733875039
    },
    {
        "content": "<p>Ok, we're down to the very last step, and we're failing specifically with x86_64-unknown-linux-musl and not getting any args... this is a known issue <a href=\"https://github.com/roc-lang/basic-cli/issues/82\">https://github.com/roc-lang/basic-cli/issues/82</a> or at least feels very familiar</p>",
        "id": 487676799,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733876693
    },
    {
        "content": "<p>Would we be happy if only the legacy linker was passing?</p>",
        "id": 487677016,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733876830
    },
    {
        "content": "<p>Yes</p>",
        "id": 487678998,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733878086
    },
    {
        "content": "<p>Things also make more sense now</p>",
        "id": 487679029,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733878117
    },
    {
        "content": "<p>Yep</p>",
        "id": 487679038,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733878126
    },
    {
        "content": "<p>There has been an uber long standing bug related to this. Sometimes it seemed to be surgical linker only. Other times it was clearly with the legacy linker. I thought we finally fixed it with the exit code fixed. I think it was actually two separate bugs. The exit code bug that affected both linkers and this bug which is surgical linker specific. Really intriguing it only affects the arg example. I wonder what makes that special. I guess arg is also the only example to break on musl so maybe how loading args happens is just brittle/more complex.</p>",
        "id": 487679204,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733878249
    },
    {
        "content": "<p>Arg is just the first example</p>",
        "id": 487681248,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733879460
    },
    {
        "content": "<p>I've been trying to get musl thing locally on my linux machine, and I can't even get rust to compile. I'm really confused</p>",
        "id": 487681305,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733879501
    },
    {
        "content": "<p>Is there something in particular I can help with?</p>",
        "id": 487681386,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733879532
    },
    {
        "content": "<p>I'm trying to get CI green, trying to figure out if we can keep the whole musl build and test thing</p>",
        "id": 487995229,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733879901
    },
    {
        "content": "<p>If you have a linux machine, you could try running that step manually (build and run the tests using musl)</p>",
        "id": 487995246,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733879915
    },
    {
        "content": "<p>For some reason that last CI run got stuck at an earlier point, just building the host using musl. The previous run got further and was stuck at running the examples. So not sure why that happened, seems odd -- because the things I changed between runs were only in the running part and shouldn't have affected the building.</p>",
        "id": 487995324,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733879975
    },
    {
        "content": "<p>Trying this now</p>",
        "id": 488000773,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733883477
    },
    {
        "content": "<p>Found something: So in <a href=\"https://github.com/rust-lang/rust/issues/124126\">rust staticlibs and cdylibs using musl do not support init functions</a>. I'm not sure what all we interact with that uses the init array, but one piece that definitely uses the init array is args.</p>\n<p>From what I can tell, we need get the args in main and then store them in a global or pass them into rust_main.</p>",
        "id": 488001261,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733883815
    },
    {
        "content": "<p>Ok, sounds easy enough to change</p>",
        "id": 488001350,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733883869
    },
    {
        "content": "<p>So I know it's a breaking change, but we're already requiring breaking for converting to <code>main!</code></p>",
        "id": 488001427,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733883926
    },
    {
        "content": "<p>So the changes would be:</p>\n<ol>\n<li>take in argc and argv like a normal c main functions here: <a href=\"https://github.com/roc-lang/basic-cli/blob/de2ac5725018db05413392170b8821e755c334d0/crates/roc_host_lib/src/lib.rs#L2\">https://github.com/roc-lang/basic-cli/blob/de2ac5725018db05413392170b8821e755c334d0/crates/roc_host_lib/src/lib.rs#L2</a></li>\n<li>pass it into <code>rust_main</code></li>\n<li>have <code>rust_main</code> save it to a global</li>\n<li>also update <a href=\"https://github.com/roc-lang/basic-cli/blob/de2ac5725018db05413392170b8821e755c334d0/crates/roc_host_bin/src/main.rs#L2\">this main</a> to grab the args (can use std::env::args) and pass them into <code>rust_main</code></li>\n</ol>",
        "id": 488001428,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733883927
    },
    {
        "content": "<p>I'll do that now as a helpful distraction from my musl pain</p>",
        "id": 488001438,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733883939
    },
    {
        "content": "<p>oh, no change to the roc <code>main!</code> this is only the c program main that has to change</p>",
        "id": 488001461,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733883960
    },
    {
        "content": "<p>Can we change the signature of <code>main!</code> to <code>List Str =&gt; Result {} _</code>?</p>",
        "id": 488001467,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733883962
    },
    {
        "content": "<p>I know we don't have to do this</p>",
        "id": 488001507,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733883973
    },
    {
        "content": "<p>Also, I'm wanting to change <code>PlatformTasks.roc</code> to <code>Host.roc</code> ... unless there's strong objection in the next few minutes <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 488001514,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733883982
    },
    {
        "content": "<p>But it would be a good change IMO</p>",
        "id": 488001526,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733883989
    },
    {
        "content": "<p>Do it Luke!</p>",
        "id": 488001533,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733883992
    },
    {
        "content": "<p>Use the force (of being first)</p>",
        "id": 488001536,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733883995
    },
    {
        "content": "<p>I prefer <code>Effects.roc</code></p>",
        "id": 488001543,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733884001
    },
    {
        "content": "<p>but sure <code>Host.roc</code> is fine too</p>",
        "id": 488001550,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733884007
    },
    {
        "content": "<p>I'm okay with either, but the benefit of <code>Host.roc</code> is that it implies you're calling the host/platform</p>",
        "id": 488001591,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733884035
    },
    {
        "content": "<p>I was on the fence, I like <code>Effects.roc</code> ... but it's a <code>hosted</code> module type (which I don't think we're removing anytime soon. So..</p>",
        "id": 488001595,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733884038
    },
    {
        "content": "<p><code>Effects.roc</code> feels like its good because it's plural and sounds like the old name</p>",
        "id": 488001614,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733884053
    },
    {
        "content": "<p>It's where I like to keep all the functions and types that cross the boundary across to the host</p>",
        "id": 488001629,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733884064
    },
    {
        "content": "<p>I mean it does hold all the effectful functions. also, why did we pick the name <code>hosted</code>? I never got that</p>",
        "id": 488001672,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733884083
    },
    {
        "content": "<p>and either is fine luke. Pick what you like best</p>",
        "id": 488001712,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733884104
    },
    {
        "content": "<p>Also, no idea if fixing this will fix the valgrind bug with args and musl, but it seems likely</p>",
        "id": 488001743,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733884133
    },
    {
        "content": "<p>My thoughts are that <code>Host</code> is clearer for someone not very familiar with how it all connects together</p>",
        "id": 488001746,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733884135
    },
    {
        "content": "<p>that is totally fair....<code>HostedEffects.roc</code>.....nah, too long</p>",
        "id": 488001782,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733884168
    },
    {
        "content": "<p>Actually... I vaguely remember dealing with something about args and rust static libraries. There was a really deep rabbit hole I went down... trying to remember where that was.</p>",
        "id": 488002038,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733884326
    },
    {
        "content": "<p>Rust doesn't like putting a <code>main</code> symbol in a static library</p>",
        "id": 488002069,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733884344
    },
    {
        "content": "<p>yep</p>",
        "id": 488002412,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733884629
    },
    {
        "content": "<p>That is why originally the lib version was wrapped by a c layer that was only a main function</p>",
        "id": 488002437,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733884648
    },
    {
        "content": "<p>It was something like <a href=\"https://doc.rust-lang.org/beta/unstable-book/language-features/start.html\">https://doc.rust-lang.org/beta/unstable-book/language-features/start.html</a></p>",
        "id": 488002521,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733884692
    },
    {
        "content": "<p>That requires nightly though</p>",
        "id": 488002622,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733884789
    },
    {
        "content": "<p>I don't think that matters in this case:<br>\nthis works just fine:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[no_mangle]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"n\">argc</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">isize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_argv</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"fm\">dbg!</span><span class=\"p\">(</span><span class=\"n\">argc</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">roc_host</span><span class=\"p\">::</span><span class=\"n\">rust_main</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 488002868,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733884936
    },
    {
        "content": "<p>receives proper args</p>",
        "id": 488002892,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733884951
    },
    {
        "content": "<p>just wiring that up now</p>",
        "id": 488002926,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733884979
    },
    {
        "content": "<p>probably should just convert straight to a roc list of roc strings and pass that into <code>roc_host::rust_main()</code>. Then can store that in a global for later retrieval, that or change to passing it into mainforhost</p>",
        "id": 488002995,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733885040
    },
    {
        "content": "<p>I'll reiterate my vote for the latter (passing args to main_for_host)</p>",
        "id": 488003676,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733885550
    },
    {
        "content": "<p>Though there is probably value in continuing to make them available by saving them in a <a href=\"https://doc.rust-lang.org/std/cell/struct.OnceCell.html\">https://doc.rust-lang.org/std/cell/struct.OnceCell.html</a></p>",
        "id": 488003717,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733885592
    },
    {
        "content": "<p>My current thoughts </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">cell</span><span class=\"p\">::</span><span class=\"n\">RefCell</span><span class=\"p\">;</span>\n\n<span class=\"fm\">thread_local!</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">ARGS</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">RefCell</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">RefCell</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"fm\">vec!</span><span class=\"p\">[])</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">with</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">ARGS</span><span class=\"p\">.</span><span class=\"n\">with</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">args</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"p\">.</span><span class=\"n\">borrow_mut</span><span class=\"p\">()))</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 488003739,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733885612
    },
    {
        "content": "",
        "id": 488003743,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733885619
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[no_mangle]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"n\">argc</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">isize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">argv</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">roc_host</span><span class=\"p\">::</span><span class=\"n\">args</span><span class=\"p\">::</span><span class=\"n\">with</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">args</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"n\">argc</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">arg_ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">argv</span><span class=\"p\">.</span><span class=\"n\">offset</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">ffi</span><span class=\"p\">::</span><span class=\"n\">CStr</span><span class=\"p\">::</span><span class=\"n\">from_ptr</span><span class=\"p\">(</span><span class=\"n\">arg_ptr</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">)</span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">to_string_lossy</span><span class=\"p\">()</span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">into_owned</span><span class=\"p\">();</span>\n\n<span class=\"w\">                </span><span class=\"n\">args</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">});</span>\n\n<span class=\"w\">    </span><span class=\"n\">roc_host</span><span class=\"p\">::</span><span class=\"n\">rust_main</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 488003744,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733885619
    },
    {
        "content": "<p>It shouldn't be <code>thread_local!</code>, right?</p>",
        "id": 488003821,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733885661
    },
    {
        "content": "<p>It should just be static</p>",
        "id": 488003832,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733885667
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[no_mangle]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">roc_fx_args</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">RocList</span><span class=\"o\">&lt;</span><span class=\"n\">RocStr</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">args</span><span class=\"p\">::</span><span class=\"n\">with</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">args</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">vec_args</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">RocStr</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">().</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">s</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">as_str</span><span class=\"p\">().</span><span class=\"n\">into</span><span class=\"p\">()).</span><span class=\"n\">collect</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"n\">vec_args</span><span class=\"p\">.</span><span class=\"n\">as_slice</span><span class=\"p\">().</span><span class=\"n\">into</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">})</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 488003839,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733885671
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>rustc: `RefCell&lt;Vec&lt;String&gt;&gt;` cannot be shared between threads safely\nthe trait `Sync` is not implemented for `RefCell&lt;Vec&lt;String&gt;&gt;`\nif you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead\nshared static variables must have a type that implements `Sync`\n</code></pre></div>",
        "id": 488003864,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733885696
    },
    {
        "content": "<p>you can store as a constant roc list</p>",
        "id": 488003937,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733885751
    },
    {
        "content": "<p>will be thread safe</p>",
        "id": 488003987,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733885764
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>rustc: cannot call non-const fn `RocList::&lt;RocStr&gt;::empty` in constants\ncalls in constants are limited to constant functions, tuple structs and tuple variants\n</code></pre></div>",
        "id": 488004032,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733885812
    },
    {
        "content": "<p>How do I do that?</p>",
        "id": 488004035,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733885816
    },
    {
        "content": "<p>can make it read only and then convert it to a <code>SendSafeRocList</code></p>",
        "id": 488004052,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733885825
    },
    {
        "content": "<p>change the glue to make the necessary <code>RocList</code> functions constant</p>",
        "id": 488004070,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733885842
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>original_list.set_readonly()\nSendSafeRocList(original_list)\n</code></pre></div>",
        "id": 488004090,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733885864
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> it might be easier if you put something together... I'm going in circles a bit here</p>",
        "id": 488004188,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733885928
    },
    {
        "content": "<p>Also, what are the thoughts on removing args and just passing the args into main? If we do that, we can skip all the globals in general?</p>",
        "id": 488004246,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733885984
    },
    {
        "content": "<p>I agree with Sam that it sounds pretty reasonable to just do</p>",
        "id": 488004327,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733886007
    },
    {
        "content": "<p>I suggested that... but I think Richard wanted to keep the API simpler</p>",
        "id": 488004345,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733886014
    },
    {
        "content": "<p>Thought that was in a Task based world... with PI I think it might be different</p>",
        "id": 488004383,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733886032
    },
    {
        "content": "<p>eh:</p>\n<div class=\"codehilite\"><pre><span></span><code>main! = \\{} -&gt;\n    Stdout.line! &quot;Hello, World!&quot;\n</code></pre></div>\n<p>vs</p>\n<div class=\"codehilite\"><pre><span></span><code>main! = \\_args -&gt;\n    Stdout.line! &quot;Hello, World!&quot;\n</code></pre></div>",
        "id": 488004464,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733886078
    },
    {
        "content": "<p>We could have all the \"global\" environment type information passed in then, like the <code>Env.platform! : {} =&gt; { arch : ARCH, os : OS }</code> instead</p>",
        "id": 488004469,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733886080
    },
    {
        "content": "<p>I think that is more useful as an effect</p>",
        "id": 488004499,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733886101
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>main! = \\{args} -&gt;\n    Stdout.line! &quot;Got $(Inspect.toStr args)&quot;\n</code></pre></div>",
        "id": 488004501,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733886103
    },
    {
        "content": "<p>You could ignore all the stuff if you want and not destructure it</p>",
        "id": 488004531,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733886122
    },
    {
        "content": "<p>cause it may be wanted in a deeply nested state where it is convenient to just grab. Vs args are essentially only ever wanted at the top level</p>",
        "id": 488004572,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733886126
    },
    {
        "content": "<p>anyway, for now, let me try to fix without changing the api at all</p>",
        "id": 488004621,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733886155
    },
    {
        "content": "<p>So roc_std is missing some functionality that we need: <a href=\"https://github.com/roc-lang/roc/pull/7330\">https://github.com/roc-lang/roc/pull/7330</a></p>",
        "id": 488007710,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733888135
    },
    {
        "content": "<p>approved</p>",
        "id": 488007796,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733888172
    },
    {
        "content": "<p>git gud luke</p>",
        "id": 488008182,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733888412
    },
    {
        "content": "<p>I like to be thorough with my reviews <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 488008238,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733888458
    },
    {
        "content": "<p>rust traits are a pain even if they are technically safe........</p>",
        "id": 488008747,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733888769
    },
    {
        "content": "<p>just realized that <code>Send</code> isn't enough, I need <code>Sync</code></p>",
        "id": 488008761,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733888782
    },
    {
        "content": "<p>Technically a read only roc list is sync</p>",
        "id": 488008771,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733888787
    },
    {
        "content": "<p>but <code>SendSafeRocList</code> is not <code>Sync</code> cause it also includes unique roc lists, which are <code>Send</code> but not <code>Sync</code></p>",
        "id": 488008815,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733888822
    },
    {
        "content": "<p>So I also need <code>ReadOnlyRocList/SyncSafeRocList</code></p>",
        "id": 488008845,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733888840
    },
    {
        "content": "<p>Can you rename it to <code>SendAndSyncSafeRocList</code> ? or <code>DefinitelySendAndSyncSafeRocListBecauseItsReadOnly</code></p>",
        "id": 488008850,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733888844
    },
    {
        "content": "<p>It isn't <code>SendAndSyncSafeRocList</code> cause a unique list is send but not sync. Only a readonly list is send and sync.</p>",
        "id": 488008879,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733888869
    },
    {
        "content": "<p>So they are two different wrapper types.</p>",
        "id": 488008897,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733888882
    },
    {
        "content": "<p>You could just store the args as <code>Vec&lt;String&gt;</code> and convert every time, not as performant but it won't matter because it's just CLI args</p>",
        "id": 488009069,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733888898
    },
    {
        "content": "<p>I could also just wrap in a mutex</p>",
        "id": 488009110,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733888912
    },
    {
        "content": "<p>That'd be fine</p>",
        "id": 488009119,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733888918
    },
    {
        "content": "<p>RwLock is probably better here</p>",
        "id": 488009136,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733888930
    },
    {
        "content": "<p>Would allow for concurrent reads</p>",
        "id": 488009139,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733888936
    },
    {
        "content": "<p>That still needs <code>Send</code>/<code>Sync</code></p>",
        "id": 488009151,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733888947
    },
    {
        "content": "<p>let me make the proper fix, won't take long and is still wanted for other future usages.</p>",
        "id": 488009304,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733889034
    },
    {
        "content": "<p>ReadOnly types added to the PR: <a href=\"https://github.com/roc-lang/roc/pull/7330\">https://github.com/roc-lang/roc/pull/7330</a></p>",
        "id": 488010579,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733889843
    },
    {
        "content": "<p>Just got everything working locally with musl!!!</p>",
        "id": 488013149,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733891414
    },
    {
        "content": "<p>Will push to purity inference soon, though I guess <a href=\"https://github.com/roc-lang/roc/pull/7330\">https://github.com/roc-lang/roc/pull/7330</a> has to land first</p>",
        "id": 488013209,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733891432
    },
    {
        "content": "<p>Also, had to push one more fix around small strings to <a href=\"https://github.com/roc-lang/roc/pull/7330\">https://github.com/roc-lang/roc/pull/7330</a></p>",
        "id": 488013225,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733891442
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/316715-contributing/topic/basic-cli.20purity.20inference/near/488013209\">said</a>:</p>\n<blockquote>\n<p>Will push to purity inference soon, though I guess <a href=\"https://github.com/roc-lang/roc/pull/7330\">https://github.com/roc-lang/roc/pull/7330</a> has to land first</p>\n</blockquote>\n<p>Yeah, and then we need to add another commit with <code>nix flake update</code> in it</p>",
        "id": 488013270,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733891471
    },
    {
        "content": "<p>Also, I'll be curious if everything works with both surgical and legacy linkers</p>",
        "id": 488013409,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733891544
    },
    {
        "content": "<p>Feel free to revert or remove all the hacks in <code>ci/all_tests.sh</code>; we've left comments so it's easy to delete the relevant parts</p>",
        "id": 488013511,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733891611
    },
    {
        "content": "<p>It'd be really nice if this was the issue</p>",
        "id": 488013534,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733891630
    },
    {
        "content": "<p>from local testing, everything looks to be passing with both linkers for both musl and glibc</p>",
        "id": 488013747,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733891754
    },
    {
        "content": "<p>Wow, this is awesome.</p>",
        "id": 488013921,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733891880
    },
    {
        "content": "<p>I pushed my work, once <a href=\"https://github.com/roc-lang/roc/pull/7330\">https://github.com/roc-lang/roc/pull/7330</a> is landed, we can pull that in and cleanup any workarounds.</p>",
        "id": 488014008,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733891908
    },
    {
        "content": "<p>Thought it would be best to push now so either of you can take over later if I am not around</p>",
        "id": 488014030,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733891922
    },
    {
        "content": "<p>Thank you, Brendan!</p>",
        "id": 488014695,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733892422
    },
    {
        "content": "<p>I will be around</p>",
        "id": 488014740,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733892468
    },
    {
        "content": "<p>After Advent of Code ofc... <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 488014749,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733892479
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/316715-contributing/topic/basic-cli.20purity.20inference/near/488004246\">said</a>:</p>\n<blockquote>\n<p>Also, what are the thoughts on removing args and just passing the args into main? If we do that, we can skip all the globals in general?</p>\n</blockquote>\n<p>my original reasoning (although we never actually did this) is that the OS doesn't require that the args be valid UTF-8, and if you silently replace invalid UTF-8 sequences with the Unicode Replacement Character, then you've lost information and there becomes no way to access the actual original args that were passed into the process</p>",
        "id": 488017337,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1733894097
    },
    {
        "content": "<p>but maybe for <code>basic-cli</code> it's fine haha</p>",
        "id": 488017367,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1733894112
    },
    {
        "content": "<p>perhaps a more advanced cli platform can offer that functionality</p>",
        "id": 488017371,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1733894122
    },
    {
        "content": "<p>anyway, the main point is that THIS IS AWESOME!!!! <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span> <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span> <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span></p>",
        "id": 488017386,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1733894140
    },
    {
        "content": "<blockquote>\n<p>if you silently replace invalid UTF-8 sequences with the Unicode Replacement Character, then you've lost information</p>\n</blockquote>\n<p>We were already doing this. Given we have <code>?</code> and <code>try</code> now, maybe it would be best to change to returning a result.</p>",
        "id": 488017707,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733894392
    },
    {
        "content": "<p>but yeah, in practice, I would guess replacement is just fine for basic cli</p>",
        "id": 488017734,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733894403
    },
    {
        "content": "<p>yeah I assume that's what Java does</p>",
        "id": 488018239,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1733894775
    },
    {
        "content": "<p>another thing we could do is to do that for you automatically, and then have a separate way to opt into going and getting the originals if you really want to</p>",
        "id": 488018257,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1733894793
    },
    {
        "content": "<p>if there's demand in practice, we could introduce that as a nonbreaking change later</p>",
        "id": 488018270,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1733894802
    },
    {
        "content": "<p>kk, I've kicked off CI now with the changes... and then I remember that we need to wait for the new nightly to land <span aria-label=\"tear\" class=\"emoji emoji-1f972\" role=\"img\" title=\"tear\">:tear:</span> </p>\n<p><span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> we think this should be good to go. I've reverted the legacy linker and other debugging stuff we had in <code>all_tests.sh</code> so should be just the nightly I think <span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span></p>",
        "id": 488022928,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733897639
    },
    {
        "content": "<p>We don't need the new nightly</p>",
        "id": 488022993,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733897658
    },
    {
        "content": "<p>Just update the flake and the cargo lockfile</p>",
        "id": 488023000,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733897666
    },
    {
        "content": "<p>I can push the lockfile update if you want</p>",
        "id": 488023092,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733897745
    },
    {
        "content": "<p>I just pushed it I think</p>",
        "id": 488023170,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733897778
    },
    {
        "content": "<p>How many engineers to land a PR? <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> </p>\n<p><a href=\"/user_uploads/22008/R_9W_c9c4ELfYxrCzJx3uWuJ/Screenshot-2024-12-11-at-17.17.38.png\">Screenshot 2024-12-11 at 17.17.38.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/R_9W_c9c4ELfYxrCzJx3uWuJ/Screenshot-2024-12-11-at-17.17.38.png\" title=\"Screenshot 2024-12-11 at 17.17.38.png\"><img data-original-dimensions=\"352x152\" src=\"/user_uploads/thumbnail/22008/R_9W_c9c4ELfYxrCzJx3uWuJ/Screenshot-2024-12-11-at-17.17.38.png/840x560.webp\"></a></div>",
        "id": 488023272,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733897873
    },
    {
        "content": "<p>Been a massive effort, but feels like we're on the home stretch now.</p>",
        "id": 488023376,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733897932
    },
    {
        "content": "<p>Yeah, and if this passes ci with both the legacy and surgical linker, it will mean that we fixed some major platform bugs and don't have a hard to debug/fix surgical linker bug.</p>",
        "id": 488023576,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733898078
    },
    {
        "content": "<p>And we have <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> on native <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 488023586,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733898084
    },
    {
        "content": "<p>Yay!</p>",
        "id": 488023603,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733898094
    },
    {
        "content": "<p>Can we pull legacy linker changes to the test script and run it with surgical then?</p>",
        "id": 488023714,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733898162
    },
    {
        "content": "<p>It's running with surgical now</p>",
        "id": 488023773,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733898211
    },
    {
        "content": "<p>Oh, epic!</p>",
        "id": 488023780,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733898220
    },
    {
        "content": "<p>Nix macos failed though... seems odd it passed for me locally, probably a CI thing</p>",
        "id": 488023805,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733898238
    },
    {
        "content": "<p>So that means it should be ready to land?</p>",
        "id": 488023807,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733898240
    },
    {
        "content": "<p>If the other nix machines pass, I'll restart it. I suspect it's a cache thing</p>",
        "id": 488024105,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733898407
    },
    {
        "content": "<p>I'll run locally in <code>nix develop</code> to double check</p>",
        "id": 488024157,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733898449
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/T13FT7ETijFaWOKE2d90pVq-/Screenshot-2024-12-11-at-17.41.17.png\">Screenshot 2024-12-11 at 17.41.17.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/T13FT7ETijFaWOKE2d90pVq-/Screenshot-2024-12-11-at-17.41.17.png\" title=\"Screenshot 2024-12-11 at 17.41.17.png\"><img data-original-dimensions=\"1728x544\" src=\"/user_uploads/thumbnail/22008/T13FT7ETijFaWOKE2d90pVq-/Screenshot-2024-12-11-at-17.41.17.png/840x560.webp\"></a></div><p>Getting close</p>",
        "id": 488025901,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733899288
    },
    {
        "content": "<p>Think it will pass on rerun?</p>",
        "id": 488026797,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733899700
    },
    {
        "content": "<p>Yeah, it's looking good</p>",
        "id": 488026843,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733899733
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/SOhQVW-HKJIQfGP9dOIAGJnQ/Screenshot-2024-12-11-at-17.53.24.png\">Screenshot 2024-12-11 at 17.53.24.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/SOhQVW-HKJIQfGP9dOIAGJnQ/Screenshot-2024-12-11-at-17.53.24.png\" title=\"Screenshot 2024-12-11 at 17.53.24.png\"><img data-original-dimensions=\"1854x684\" src=\"/user_uploads/thumbnail/22008/SOhQVW-HKJIQfGP9dOIAGJnQ/Screenshot-2024-12-11-at-17.53.24.png/840x560.webp\"></a></div>",
        "id": 488027444,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733900010
    },
    {
        "content": "<p>Can anyone help a brother out?</p>",
        "id": 488027457,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733900019
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> how about one of those speedy reviews</p>",
        "id": 488027485,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733900035
    },
    {
        "content": "<p>Ok, I've left a few comments, nothing blocking in my opinion so I'm going to merge this. Thank you <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 488028228,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733900411
    },
    {
        "content": "<p>On it!</p>",
        "id": 488028473,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733900545
    },
    {
        "content": "<p>Not fast enough haha</p>",
        "id": 488028501,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733900561
    },
    {
        "content": "<p>Haha, too slow</p>",
        "id": 488028508,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733900566
    },
    {
        "content": "<p>This is awesome!! Good work to everyone who worked on this!<br>\nWhen will there be a release so it can be used without cloning the repo?</p>",
        "id": 488060653,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1733911932
    },
    {
        "content": "<p>I'm going to bundle in the required changes for <a href=\"https://github.com/roc-lang/roc/pull/7321\">https://github.com/roc-lang/roc/pull/7321</a> in the next basic-cli release, that is a widely used function but probably few things will actually break because of that change. The new release will probably be available next week.</p>",
        "id": 488065178,
        "sender_full_name": "Anton",
        "timestamp": 1733913363
    },
    {
        "content": "<p>Cool, can't wait. For now I'll just clone then</p>",
        "id": 488065503,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1733913468
    },
    {
        "content": "<p>Before the PI release, can we change <code>main! : {} =&gt; Result {} _</code> to <code>main! : List Str =&gt; Result {} _</code> to put all of the breaking changes together</p>",
        "id": 489552963,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734462050
    },
    {
        "content": "<p>Or did we not like the idea of that</p>",
        "id": 489552994,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734462061
    },
    {
        "content": "<p>From memory <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> didn't like it</p>",
        "id": 489553270,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734462155
    },
    {
        "content": "<p>Sounds fine. Args seem fine to be main down</p>",
        "id": 489553288,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734462159
    },
    {
        "content": "<p>I personally don't want it any more complex than a list of strings.</p>",
        "id": 489553423,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734462208
    },
    {
        "content": "<p>Or maybe it was my larger suggestion of providing all the envrionment stuff in an record that could be destructured.</p>",
        "id": 489553450,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734462218
    },
    {
        "content": "<p>I think Richard commented about wanting it to be a zero arg function for max simplicity when teaching a new user. Though ignoring one arg sounds fine to teach a new user as well.</p>",
        "id": 489553603,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734462261
    },
    {
        "content": "<p>I can certainly make the change today. I would like to merge that refactor PR, and can add this in. I think were really close to getting cli/server/ssg all passong CI. </p>\n<p>I might be getting ahead of myself, but I'm even thinking of bringing most of the basic-cli API across to ssg too.</p>",
        "id": 489553933,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734462383
    },
    {
        "content": "<p>*passing CI -- i mean ready for consumption</p>",
        "id": 489554055,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734462426
    },
    {
        "content": "<p>That's my thought. And I think every beginner will know what args are (they're what you pass to roc to use it!)</p>",
        "id": 489554749,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734462703
    },
    {
        "content": "<p>Args are always valid utf8? there's not strange OS things lurking there?</p>",
        "id": 489555055,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734462834
    },
    {
        "content": "<p>they don’t have to be utf8. they get be whatever at least on unix</p>",
        "id": 489555401,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1734462962
    },
    {
        "content": "<p><a href=\"https://stackoverflow.com/questions/5408730/what-is-the-encoding-of-argv\">They aren't</a>, but we currently coerce them to UTF-8 anyway: <a href=\"https://github.com/roc-lang/basic-cli/blob/fbdd5e68fe286ae7f999d549d0e761df0b3773cf/crates/roc_host_bin/src/main.rs#L7\">https://github.com/roc-lang/basic-cli/blob/fbdd5e68fe286ae7f999d549d0e761df0b3773cf/crates/roc_host_bin/src/main.rs#L7</a></p>",
        "id": 489555466,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734462980
    },
    {
        "content": "<p>So we're already committed to adding just a bit of sanity</p>",
        "id": 489555493,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734462993
    },
    {
        "content": "<p>I think it is fine to default to utf-8 and if we really want, we can add a fallback when a user requests/needs it.</p>",
        "id": 489555888,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734463143
    },
    {
        "content": "<p>Basic CLI may turn out to be ok with coercion always</p>",
        "id": 489555958,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734463167
    },
    {
        "content": "<p>My concern is the silent nature of that, would people assume something and then it causes a bug. Maybe we detect non-utf8 args and crash, or instead provide zero args so it's easy to ignfore and then read args using an effect that gives <code>List U8</code>.</p>",
        "id": 489557854,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734463829
    },
    {
        "content": "<p>Even Rust panics on non-UTF8 args: <a href=\"https://doc.rust-lang.org/beta/std/env/fn.args.html#panics\">https://doc.rust-lang.org/beta/std/env/fn.args.html#panics</a></p>",
        "id": 489558000,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734463884
    },
    {
        "content": "<p>I'm down for the crash, but <em>no one</em> wants to handle non-UTF-8 except for a very small contingent</p>",
        "id": 489558062,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734463918
    },
    {
        "content": "<p>Yeah, I agree. I think crashing is the way to go.</p>",
        "id": 489558282,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734464004
    },
    {
        "content": "<p>Rust has <code>args_os</code> as the fallback</p>",
        "id": 489558295,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734464008
    },
    {
        "content": "<p>We're aiming for higher level use cases. If someone needs non-utf8 args they're probably in the write or customise a platform space.</p>",
        "id": 489558953,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734464250
    },
    {
        "content": "<p>We still want to keep the effect for reading Args, so it's easier to get from within the app without having to thread apl the way through? Just checking.</p>",
        "id": 489559213,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734464347
    },
    {
        "content": "<p>I'd say yes</p>",
        "id": 489559465,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734464458
    },
    {
        "content": "<p>Eh</p>",
        "id": 489559583,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734464503
    },
    {
        "content": "<p>I would say pick just one way</p>",
        "id": 489559588,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734464505
    },
    {
        "content": "<p>Eh</p>",
        "id": 489559589,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734464506
    },
    {
        "content": "<p>I would say pick just one way</p>",
        "id": 489559590,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734464506
    },
    {
        "content": "<p>Eh</p>",
        "id": 489559591,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734464505
    },
    {
        "content": "<p>Both feels silly to me</p>",
        "id": 489559593,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734464506
    },
    {
        "content": "<p>I have bad Internet rn and I think Zulip does not like that</p>",
        "id": 489559687,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734464533
    },
    {
        "content": "<p>May as well try just passing it in, and see how that goes. It's easy enough to add back if people have issues.</p>",
        "id": 489560834,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734464955
    },
    {
        "content": "<p>Most cli apps are probably feeding it straight into weaver and parsing anyways</p>",
        "id": 489560929,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734464989
    },
    {
        "content": "<p>I'm working on this now</p>",
        "id": 489561412,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734465156
    },
    {
        "content": "<p>the only thing I strongly think we shouldn't do for sure is have the platform <code>crash</code> based on what args are provided <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 489568640,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734468159
    },
    {
        "content": "<p>So we should continue to lossily convert them to UTF-8?</p>",
        "id": 489568689,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734468188
    },
    {
        "content": "<p>we could do that, or if we wanted to be fancy we could do like <code>main : Result (List Str) [NonUnicodeArgs] -&gt; ...</code></p>",
        "id": 489568770,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734468239
    },
    {
        "content": "<p>but <code>basic-cli</code> probably shouldn't be fancy</p>",
        "id": 489568816,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734468245
    },
    {
        "content": "<p>I vote stupid</p>",
        "id": 489568837,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734468257
    },
    {
        "content": "<p>I'll change it back to lossy conversion</p>",
        "id": 489568855,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734468267
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/basic-cli/pull/289\">https://github.com/roc-lang/basic-cli/pull/289</a></p>",
        "id": 489569183,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734468423
    },
    {
        "content": "<p>the scenario I can think of where it could matter is that you have some non-utf8 filenames, and you want to pass those in as arguments</p>",
        "id": 489569457,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734468527
    },
    {
        "content": "<p>I'd say \"don't do that\" haha</p>",
        "id": 489569518,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734468552
    },
    {
        "content": "<p>the thing that bothers me about that is that we're now creating a situation where application authors are by default telling their users \"don't have this use case\"</p>",
        "id": 489569613,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734468593
    },
    {
        "content": "<p>This doesn't make <code>basic-cli</code> unusable, it just means you need to pass the file via env var or something</p>",
        "id": 489569626,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734468599
    },
    {
        "content": "<p>That's fair</p>",
        "id": 489569725,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734468624
    },
    {
        "content": "<p>what will happen in practice is that people will use the most convenient API, namely the <code>List Str</code> you get for free, and which doesn't handle this edge case, and then if end users have files they need to pass in that way, they just won't be able to do that</p>",
        "id": 489569785,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734468654
    },
    {
        "content": "<p>my hope with things like this is that if you're using a CLI arg parser like weaver anyway, then it can be actually very easy to handle that scenario</p>",
        "id": 489569855,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734468683
    },
    {
        "content": "<p>because weaver works on <code>List U8</code> and provides a convenient interface to the app author anyway</p>",
        "id": 489569887,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734468693
    },
    {
        "content": "<p>Weaver uses List Str</p>",
        "id": 489569913,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734468703
    },
    {
        "content": "<p>and then if at some point I want to be like \"oh just this one particular thing takes <code>List U8</code> instead of <code>Str</code>\" then I only have to change it in one place</p>",
        "id": 489569950,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734468720
    },
    {
        "content": "<p>But we could change <code>basic-cli</code> to use <code>List (List U8)</code> and Weaver to do the same, and have Weaver handle encoding errors</p>",
        "id": 489570034,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734468741
    },
    {
        "content": "<p>oh, interesting...I mean, ideally it wouldn't <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 489570054,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734468746
    },
    {
        "content": "<p>yeah, that! <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 489570078,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734468750
    },
    {
        "content": "<p>Okay, then I'll change this PR to make basic-cli do <code>List (List U8)</code> and update Weaver later</p>",
        "id": 489570167,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734468792
    },
    {
        "content": "<p>that works for me! <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 489570196,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734468804
    },
    {
        "content": "<p>For now, people can do <code>validArgs = List.map args \\arg -&gt; Str.fromUtf8 arg |&gt; Result.withDefault \"\"</code></p>",
        "id": 489570342,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734468850
    },
    {
        "content": "<p>And pass <code>validArgs</code> to Weaver</p>",
        "id": 489570374,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734468859
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> currently, Arg.list! returns <code>List Str</code>. Would you vote for:</p>\n<ul>\n<li>Keeping it as <code>Arg.list! : {} =&gt; List Str</code> and making it lossy</li>\n<li>Keeping it and also adding <code>Arg.listBytes : {} =&gt; List (List U8)</code></li>\n<li>Changing it to just <code>Arg.list! : {} =&gt; List (List U8)</code> for Weaver compat</li>\n<li>Something else</li>\n</ul>",
        "id": 489570696,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734468979
    },
    {
        "content": "<p>Since apps will be handling stuff with Weaver primarily, I vote just changing <code>Arg.list!</code> to <code>{} =&gt; List (List U8)</code></p>",
        "id": 489571159,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734469180
    },
    {
        "content": "<p>Would it still be passed into main?</p>",
        "id": 489571942,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734469476
    },
    {
        "content": "<p>Or just the arg list effect?</p>",
        "id": 489571968,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734469484
    },
    {
        "content": "<p>It seems like Richard's main want is <code>main! : List (List U8) =&gt; Result {} _</code></p>",
        "id": 489572044,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734469518
    },
    {
        "content": "<p>And to match with that, we should just convert <code>Arg.list!</code> to <code>{} =&gt; List (List U8)</code></p>",
        "id": 489572099,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734469541
    },
    {
        "content": "<p>Can we please remove arg list if we change main?</p>",
        "id": 489572223,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734469585
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/316715-contributing/topic/basic-cli.20purity.20inference/near/489572223\">said</a>:</p>\n<blockquote>\n<p>Can we please remove arg list if we change main?</p>\n</blockquote>\n<p>What if you want the arg list halfway through the program? Should you have to thread the args through the program?</p>",
        "id": 489572817,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734469839
    },
    {
        "content": "<p>I'm okay with that, just asking</p>",
        "id": 489573171,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734470017
    },
    {
        "content": "<p>I think it's fine. I personally just want one way. I think it is most common to use at the top, so forcing threading down sounds fine.</p>",
        "id": 489573368,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734470125
    },
    {
        "content": "<p>Okay, removing <code>Arg.list!</code></p>",
        "id": 489573396,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734470137
    },
    {
        "content": "<p>yeah <code>main! : List (List U8) =&gt; ...</code> sounds fine to me!</p>",
        "id": 489574278,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734470559
    },
    {
        "content": "<p>wait, crap</p>",
        "id": 489574300,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734470569
    },
    {
        "content": "<p>Windows <span aria-label=\"confounded\" class=\"emoji emoji-1f616\" role=\"img\" title=\"confounded\">:confounded:</span></p>",
        "id": 489574317,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734470580
    },
    {
        "content": "<p>on Windows they're <code>U16</code>s</p>",
        "id": 489574338,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734470586
    },
    {
        "content": "<p>I'm gonna cry</p>",
        "id": 489574356,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734470596
    },
    {
        "content": "<p>There has to be a line somewhere</p>",
        "id": 489574412,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734470632
    },
    {
        "content": "<p>Do any other languages make users handle UTF-16?</p>",
        "id": 489574490,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734470651
    },
    {
        "content": "<p>C and C++ are <code>main (int argc, char **argv)</code></p>",
        "id": 489574666,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734470751
    },
    {
        "content": "<p>I wonder if this use case was what caused Rust to introduce OsStr</p>",
        "id": 489574676,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734470756
    },
    {
        "content": "<p>That sounds exactly correct</p>",
        "id": 489574736,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734470774
    },
    {
        "content": "<p>yeah but they let you cast those pointers to u16 on Windows</p>",
        "id": 489574742,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734470777
    },
    {
        "content": "<p>Oh, I see</p>",
        "id": 489574752,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734470785
    },
    {
        "content": "<p>Why did Roc get rid of Nat?</p>",
        "id": 489574775,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734470794
    },
    {
        "content": "<p>that wouldn't help here</p>",
        "id": 489574789,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734470800
    },
    {
        "content": "<p>Presumably because the core language doesn't want to be OS-specific?</p>",
        "id": 489574831,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734470819
    },
    {
        "content": "<p>but the main reason was wanting to get to a state where no matter what target you run it on, all pure functions give the same answers given the same arguments</p>",
        "id": 489574836,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734470821
    },
    {
        "content": "<p>I agree it wouldn't help here</p>",
        "id": 489574854,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734470825
    },
    {
        "content": "<p>So OsStr would break that, right?</p>",
        "id": 489574872,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734470833
    },
    {
        "content": "<p>not necessarily, depends on the API</p>",
        "id": 489574886,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734470842
    },
    {
        "content": "<p>like <code>OsStr.display : OsStr -&gt; Str</code> would be fine</p>",
        "id": 489574929,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734470861
    },
    {
        "content": "<p>Or maybe <code>roc-lang/path</code></p>",
        "id": 489574956,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734470880
    },
    {
        "content": "<p>also <code>OsStr.to_list : OsStr -&gt; [Windows (List U16), Unix (List U8)]</code> would be fine</p>",
        "id": 489575014,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734470895
    },
    {
        "content": "<p>Ok, if we can't crash (for reasons Richard outline above), what about my other option?</p>",
        "id": 489575016,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734470895
    },
    {
        "content": "<p>We check if it's valid UTF-8, if not, we provide an empty list for args. Then keep a  <code>Args.unix! : {} -&gt; List (List  U8)</code> and a <code>Args.windows! : {} -&gt; List (List U16)</code> .. at least until we implement roc-lang/path</p>",
        "id": 489575155,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734470969
    },
    {
        "content": "<p>That's probably just making things worse though... because people aren't going to pre-emptively check for empty args</p>",
        "id": 489575301,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734471021
    },
    {
        "content": "<p>So I also don't think that's a workable solution</p>",
        "id": 489575321,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734471030
    },
    {
        "content": "<p>What about unicode replacement characters?</p>",
        "id": 489575553,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734471129
    },
    {
        "content": "<p>That's the Rust approach</p>",
        "id": 489575575,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734471142
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/channel/316715-contributing/topic/basic-cli.20purity.20inference/near/489574836\">said</a>:</p>\n<blockquote>\n<p>but the main reason was wanting to get to a state where no matter what target you run it on, all pure functions give the same answers given the same arguments</p>\n</blockquote>\n<p>We could still maintain this property?</p>",
        "id": 489575593,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734471151
    },
    {
        "content": "<p>yeah we have that property now because we removed <code>Nat</code></p>",
        "id": 489575620,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734471171
    },
    {
        "content": "<p>and this wouldn't change that</p>",
        "id": 489575625,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734471175
    },
    {
        "content": "<p>the only way to change that would be to change something in builtins, which this wouldn't do regardless <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 489575664,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734471202
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/channel/316715-contributing/topic/basic-cli.20purity.20inference/near/489575553\">said</a>:</p>\n<blockquote>\n<p>What about unicode replacement characters?</p>\n</blockquote>\n<p>if we're ok with those, then we should just go back to <code>main : List Str =&gt; ...</code></p>",
        "id": 489575728,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734471241
    },
    {
        "content": "<p>the downside there is that if you actually have an end user who has a file with invalid unicode in its path, and wants to pass it into a cli made with <code>basic-cli</code>, it will be impossible</p>",
        "id": 489575824,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734471273
    },
    {
        "content": "<p>so basically if we go with the Unicode replacement character route, we're choosing to have those edge cases never work correctly in <code>basic-cli</code></p>",
        "id": 489575864,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734471301
    },
    {
        "content": "<p>I dislike the silent nature of unicode replacment.. I'd prefer crashing and keeping <code>main! : List Str =&gt; ...</code></p>",
        "id": 489575932,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734471338
    },
    {
        "content": "<p>which feels like a bit of a shame if people are just going to use a cli parser anyway, and could just say \"hey this arg is a Path\" (for example)</p>",
        "id": 489575933,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734471338
    },
    {
        "content": "<p>You'd probably have something like</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">OsStr</span><span class=\"w\"> </span><span class=\"nf\">:=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">bytes</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">os</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Unix</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Windows</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"kt\">OsStr</span><span class=\"nf\">.</span><span class=\"nv\">bytes</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">os_str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">os</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">Unix</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">os_str</span><span class=\"nf\">.</span><span class=\"nv\">bytes</span>\n<span class=\"w\">        </span><span class=\"kt\">Windows</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"nv\">os_str</span><span class=\"nf\">.</span><span class=\"nv\">bytes</span>\n<span class=\"w\">                </span><span class=\"nf\">.</span><span class=\"nv\">chunks</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"p\">(</span><span class=\"nv\">left</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">right</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">left</span><span class=\"nf\">.</span><span class=\"nv\">shift_left</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"nv\">right</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 489575945,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734471345
    },
    {
        "content": "<p>if we crash, this statement is still equally true:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/channel/316715-contributing/topic/basic-cli.20purity.20inference/near/489575824\">said</a>:</p>\n<blockquote>\n<p>the downside there is that if you actually have an end user who has a file with invalid unicode in its path, and wants to pass it into a cli made with <code>basic-cli</code>, it will be impossible</p>\n</blockquote>",
        "id": 489576022,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734471366
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/channel/316715-contributing/topic/basic-cli.20purity.20inference/near/489575945\">said</a>:</p>\n<blockquote>\n<p>You'd probably have something like</p>\n<p><div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">OsStr</span><span class=\"w\"> </span><span class=\"nf\">:=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">bytes</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">os</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Unix</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Windows</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"kt\">OsStr</span><span class=\"nf\">.</span><span class=\"nv\">bytes</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">os_str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">os</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">Unix</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">os_str</span><span class=\"nf\">.</span><span class=\"nv\">bytes</span>\n<span class=\"w\">        </span><span class=\"kt\">Windows</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"nv\">os_str</span><span class=\"nf\">.</span><span class=\"nv\">bytes</span>\n<span class=\"w\">                </span><span class=\"nf\">.</span><span class=\"nv\">chunks</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"p\">(</span><span class=\"nv\">left</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">right</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">left</span><span class=\"nf\">.</span><span class=\"nv\">shift_left</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"nv\">right</span><span class=\"p\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Why not something like this <a href=\"https://github.com/roc-lang/path/blob/14b5fa518d13abb5012bcaa6809f7259e912eaeb/package/Path.roc#L24\">https://github.com/roc-lang/path/blob/14b5fa518d13abb5012bcaa6809f7259e912eaeb/package/Path.roc#L24</a></p>",
        "id": 489576053,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734471382
    },
    {
        "content": "<p>That works too</p>",
        "id": 489576096,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734471400
    },
    {
        "content": "<p>yeah <code>U16</code> differs in alignment too</p>",
        "id": 489576138,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734471423
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/channel/316715-contributing/topic/basic-cli.20purity.20inference/near/489575824\">said</a>:</p>\n<blockquote>\n<p>the downside there is that if you actually have an end user who has a file with invalid unicode in its path, and wants to pass it into a cli made with <code>basic-cli</code>, it will be impossible</p>\n</blockquote>\n<p>But in this case, people know they can't, and can reach for another program to convert the file names. </p>\n<p>I don't know how niche a thing this is.</p>",
        "id": 489576162,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734471431
    },
    {
        "content": "<p>I'm sure it's very niche haha</p>",
        "id": 489576238,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734471470
    },
    {
        "content": "<p>Just a point of pedantry, a <code>Path</code> is an <code>OsStr</code>, but an argument is not a <code>Path</code> necessarily, it's an <code>OsStr</code>. So <code>OsStr</code> is the real type at play</p>",
        "id": 489576243,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734471472
    },
    {
        "content": "<p>right</p>",
        "id": 489576263,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734471481
    },
    {
        "content": "<p>So I'm okay with <code>main! : List (List U8) =&gt; Result {} _</code> because Weaver makes the user experience not really impeded, but if Weaver and basic-cli now depend of <code>roc-lang/path</code> for some <code>OsStr</code> type, now versioning is weird. This is a lot of weirdness eaten right at the start of \"hello world\" for a very niche problem</p>",
        "id": 489576598,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734471654
    },
    {
        "content": "<p>(not trying to do \"hello world\"-driven dev, just saying this would probably turn off beginners)</p>",
        "id": 489576673,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734471696
    },
    {
        "content": "<p>the problem with <code>main! : List (List U8) =&gt; Result {} _</code> is that Windows will use u16s, not u8s</p>",
        "id": 489576786,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734471745
    },
    {
        "content": "<p>and weaver won't have any way of telling which one it's getting if we convert them all to u8</p>",
        "id": 489576807,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734471762
    },
    {
        "content": "<p>oh, here's a fairly straightforward idea</p>",
        "id": 489576923,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734471825
    },
    {
        "content": "<p>we could have <code>main! : List Arg =&gt; Result {} _</code></p>",
        "id": 489576945,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734471836
    },
    {
        "content": "<p><code>Arg</code> works the same way as the <code>OsStr</code> we've been talking about</p>",
        "id": 489577005,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734471848
    },
    {
        "content": "<p>but it's more self-descriptive and beginner-friendly imo</p>",
        "id": 489577017,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734471855
    },
    {
        "content": "<p>like \"oh, this is a command-line arg\"</p>",
        "id": 489577030,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734471865
    },
    {
        "content": "<p>\"what can I do with one of those?\"</p>",
        "id": 489577045,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734471875
    },
    {
        "content": "<p>and the most straightforward thing you can do is give them to <code>Arg.weave</code> (or whatever)</p>",
        "id": 489577070,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734471892
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Arg.display : Arg -&gt; Result Str [InvalidUtf8]\n</code></pre></div>",
        "id": 489577081,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734471896
    },
    {
        "content": "<p>yeah, exactly - stuff like that</p>",
        "id": 489577112,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734471909
    },
    {
        "content": "<p>How does Weaver engage with this? Does Weaver have <code>basic-cli</code> as a dep?</p>",
        "id": 489577113,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734471910
    },
    {
        "content": "<p>although in this case it'd be <code>InvalidUnicode</code> because on Windows they aren't UTF-8 <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 489577126,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734471919
    },
    {
        "content": "<p>maybe the other way around</p>",
        "id": 489577144,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734471929
    },
    {
        "content": "<p>we'd previously talked about having <code>basic-cli</code> ship with Weaver,  right?</p>",
        "id": 489577182,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734471956
    },
    {
        "content": "<p>maybe this is a reason to do that</p>",
        "id": 489577238,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734471964
    },
    {
        "content": "<p>It used to until very recently</p>",
        "id": 489577246,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734471967
    },
    {
        "content": "<p>As embedded code</p>",
        "id": 489577254,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734471972
    },
    {
        "content": "<p>I'd be okay with that</p>",
        "id": 489577259,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734471979
    },
    {
        "content": "<p>Especially now that I'm not the only person with write access to Weaver</p>",
        "id": 489577292,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734471993
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> </p>\n<p>For Weaver there should be a</p>\n<div class=\"codehilite\"><pre><span></span><code>Arg.to_raw : Arg -&gt; [Unix (List U8), Windows (List U16)]\n</code></pre></div>",
        "id": 489577295,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734471995
    },
    {
        "content": "<p>So that could be a module parameter for Weaver</p>",
        "id": 489577360,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734472030
    },
    {
        "content": "<p>I don't think it needs to be a module param</p>",
        "id": 489577399,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734472052
    },
    {
        "content": "<p>just pass it into <code>weave</code>?</p>",
        "id": 489577444,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734472074
    },
    {
        "content": "<p>Weaver should just expose a module <code>weaver.Arg</code> that exposes <code>Arg</code></p>",
        "id": 489577452,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734472079
    },
    {
        "content": "<p>yeah but just seems simpler to have <code>basic-cli</code> ship with it</p>",
        "id": 489577543,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734472105
    },
    {
        "content": "<p>then we have a coherent story around it</p>",
        "id": 489577557,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734472114
    },
    {
        "content": "<p>With <code>Arg</code> you mean</p>",
        "id": 489577579,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734472127
    },
    {
        "content": "<p>\"main gets a <code>List Arg</code> and here is a nice way to turn that into a good experience for people\"</p>",
        "id": 489577580,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734472127
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/channel/316715-contributing/topic/basic-cli.20purity.20inference/near/489577113\">said</a>:</p>\n<blockquote>\n<p>How does Weaver engage with this? Does Weaver have <code>basic-cli</code> as a dep?</p>\n</blockquote>\n<p>Then we're back here</p>",
        "id": 489577642,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734472166
    },
    {
        "content": "<p>I'd prefer we tell Weaver how to \"decode\" an <code>Arg</code> that comes from the platform. Other people may come up with Weaver 2.0's in future</p>",
        "id": 489577653,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734472172
    },
    {
        "content": "<p>Module params are our friend</p>",
        "id": 489577674,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734472189
    },
    {
        "content": "<p>that works</p>",
        "id": 489577678,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734472191
    },
    {
        "content": "<p>Oh, I see!</p>",
        "id": 489577686,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734472198
    },
    {
        "content": "<p>heh, and actually in the static dispatch future, <code>weave</code> can just ask for something that has a <code>to_raw</code> method of the appropriate type <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 489577813,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734472249
    },
    {
        "content": "<p>then it doesn't even need an extra arg!</p>",
        "id": 489577824,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734472254
    },
    {
        "content": "<p>Weaver has in Cli.roc:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kn\">module</span><span class=\"w\"> </span><span class=\"err\">[</span><span class=\"nc\">parseArgs</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">decodeArg</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"kt\">WeaverArg</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"kt\">WeaverArg</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Unix</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"kt\">Windows</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">U16</span><span class=\"p\">)]</span>\n\n<span class=\"nv\">parseArgs</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">WeaverArg</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nv\">_</span>\n</code></pre></div>",
        "id": 489577925,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734472305
    },
    {
        "content": "<p>Maybe we should spin this off into another thread... but, would we be picking a name for that?</p>\n<p>Like, anything with the shape <code>to_os_str : thing -&gt; [Unix _, Windows _] where ...</code> etc</p>",
        "id": 489577948,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734472317
    },
    {
        "content": "<p>I haven't fully digested static dispatch so ^^ may not be aligned with that worldview</p>",
        "id": 489578065,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734472356
    },
    {
        "content": "<p>Which for now would have people importing it as</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">weaver.Cli</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">decodeArg</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Arg</span><span class=\"nf\">.</span><span class=\"nv\">to_raw</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 489578088,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734472367
    },
    {
        "content": "<p>Not a huge fan of this, but it solves 100% of Bill Gates past mistakes</p>",
        "id": 489578180,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734472418
    },
    {
        "content": "<p>And it'll be better in static dispatch world</p>",
        "id": 489578209,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734472432
    },
    {
        "content": "<p>I like the idea of passing it to <code>weave</code></p>",
        "id": 489578212,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734472434
    },
    {
        "content": "<p>as opposed to a module param</p>",
        "id": 489578221,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734472439
    },
    {
        "content": "<p>because that's the only place where it's relevant, and in the static dispatch world we can drop the extra <code>weave</code> argument</p>",
        "id": 489578291,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734472453
    },
    {
        "content": "<p>Oh yeah, that works now, true</p>",
        "id": 489578315,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734472470
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>{ Cli.weave Args.to_os_raw &lt;-\n    alpha: Opt.u64 { short: &quot;a&quot;, help: &quot;Set the alpha level&quot; },\n    verbosity: Opt.count { short: &quot;v&quot;, long: &quot;verbose&quot;, help: &quot;How loud we should be.&quot; },\n    files: Param.strList { name: &quot;files&quot;, help: &quot;The files to process.&quot; },\n}\n</code></pre></div>",
        "id": 489578367,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734472495
    },
    {
        "content": "<p>We have nice things now... I love roc <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 489578649,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734472624
    },
    {
        "content": "<p>oh actually I think it might be <code>finish</code> that needs it, not <code>weave</code></p>",
        "id": 489578693,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734472646
    },
    {
        "content": "<p>Finish works</p>",
        "id": 489578721,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734472660
    },
    {
        "content": "<p>but yeah, one or the other</p>",
        "id": 489578722,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734472660
    },
    {
        "content": "<p>Since static dispatch doesn't allow implementing methods outside of the defining module for a type, I presume that once Weaver has converter your args to <code>WeaverArg</code>, the user wouldn't be able to get a method on <code>WeaverArg</code> to convert it to a <code>roc-lang/path</code> data type.</p>",
        "id": 489578811,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734472684
    },
    {
        "content": "<p>But there's pass_to</p>",
        "id": 489578824,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734472688
    },
    {
        "content": "<p>So it's fine</p>",
        "id": 489578832,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734472692
    },
    {
        "content": "<p>yeah I think this plan should work!</p>",
        "id": 489578873,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734472710
    },
    {
        "content": "<p>In the long run, this kind of data type is in std or a parent lib, but we're way out from that, and this is still 90% as nice for the end user</p>",
        "id": 489578910,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734472734
    },
    {
        "content": "<p><code>Arg</code> and <code>WeaverArg</code> can't be opaque</p>",
        "id": 489578929,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734472744
    },
    {
        "content": "<p>oh wait, <code>parseOrDisplayMessage</code> has to be the answer <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 489578932,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734472748
    },
    {
        "content": "<p>that's the one that takes <code>args</code></p>",
        "id": 489578948,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734472755
    },
    {
        "content": "<p>so it's the one that needs to know what to do with them</p>",
        "id": 489578954,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734472761
    },
    {
        "content": "<p>For args, why do we need to support utf16? All utf16 can be converted to utf-8. Why not just always losslessly convert to list u8?</p>",
        "id": 489578958,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734472765
    },
    {
        "content": "<p>in Windows the args aren't necessarily valid utf-16</p>",
        "id": 489579013,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734472791
    },
    {
        "content": "<p>and on Unix they aren't necessarily valid utf-8</p>",
        "id": 489579021,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734472796
    },
    {
        "content": "<div class=\"message_inline_image\"><a href=\"https://media0.giphy.com/media/YOqbsB7Ega18s/giphy.gif?cid=c623cb35k9i7nos3ha6n81jqpqjwqwnczhfo2iu8sx8afyrh&amp;ep=v1_gifs_search&amp;rid=giphy.gif&amp;ct=g\"><img src=\"https://uploads.zulipusercontent.net/76cd4578289c4f4de3bb0f5a3549f6fcf0730e0f/68747470733a2f2f6d65646961302e67697068792e636f6d2f6d656469612f594f71627342374567613138732f67697068792e6769663f6369643d63363233636233356b3969376e6f73336861366e38316a7170716a7771776e637a68666f3269753873783861667972682665703d76315f676966735f736561726368267269643d67697068792e6769662663743d67\"></a></div><p>Brendan rn</p>",
        "id": 489579022,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734472796
    },
    {
        "content": "<p>The only issue is with non Unicode args which is ever rarer</p>",
        "id": 489579034,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734472799
    },
    {
        "content": "<p>I need to read up more on os strings</p>",
        "id": 489579131,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734472820
    },
    {
        "content": "<p>yeah, the point is that if people are just going to be using Weaver anyway, we can handle those edge cases naturally</p>",
        "id": 489579169,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734472831
    },
    {
        "content": "<p>without people needing to know about all this</p>",
        "id": 489579192,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734472837
    },
    {
        "content": "<p>Yeah, we're not talking about path's any longer... this goes deep</p>",
        "id": 489579209,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734472842
    },
    {
        "content": "<p>in other words, we can create a pit of success for application authors</p>",
        "id": 489579220,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734472848
    },
    {
        "content": "<p>Richard has been down there, and survived to tell the story</p>",
        "id": 489579266,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734472869
    },
    {
        "content": "<p>Ah, windows is U16, but not necessarily utf16....why do os apis have to suck?</p>",
        "id": 489579500,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734472963
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/316715-contributing/topic/basic-cli.20purity.20inference/near/489579500\">said</a>:</p>\n<blockquote>\n<p>Ah, windows is U16, but not necessarily utf16....why do os apis have to suck?</p>\n</blockquote>\n<p>It's ok, <span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> has volunteered to handle all the edge cases in Weaver <span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span></p>",
        "id": 489579571,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734473001
    },
    {
        "content": "<p>Yes, that's the martyr emoji isn't it</p>",
        "id": 489579619,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734473024
    },
    {
        "content": "<p>So Weaver will implement utf16 so it can parse windows CLI args? And it will be able to parse both utf-8 and utf16. It also will be able to collect args that aren't valid utf-8/16 for use as paths and such</p>",
        "id": 489579812,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734473093
    },
    {
        "content": "<p>Is that the summary</p>",
        "id": 489579824,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734473097
    },
    {
        "content": "<p>haha, oh dear</p>",
        "id": 489579888,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734473129
    },
    {
        "content": "<p>I guess my biggest comment is that I really like being able to use simple args and keep the lie (of everything just working as utf-8). I find it very convenient for \"basic\" CLI. I personally don't generally use tools like Weaver (but maybe I should).</p>",
        "id": 489580051,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734473193
    },
    {
        "content": "<p>Maybe we want something to keep things more sane (only use the others for non-utf8 things)</p>\n<div class=\"codehilite\"><pre><span></span><code>Arg.as_os : Arg -&gt; [ Utf8 Str, Unix (List U8), Windows (List U16) ]\n</code></pre></div>",
        "id": 489580140,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734473239
    },
    {
        "content": "<p>Instead of handling every arg as <code>Str</code>, it's gonna use <code>WeaverArg</code>. For each arg, it'll attempt to parse to the right type from <code>WeaverArg</code>, be that:</p>\n<ul>\n<li>numbers</li>\n<li>strings</li>\n<li>bytestrings (List U8)</li>\n<li>paths (alias for WeaverArg?)</li>\n</ul>",
        "id": 489580243,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734473283
    },
    {
        "content": "<p>yeah I think we can offer a \"quick and dirty\" thing you can use e.g. if you're just making a quick script for yourself and don't want to build out a full set of args with help docs and all that</p>",
        "id": 489580329,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734473314
    },
    {
        "content": "<p>but have it be opt in</p>",
        "id": 489580417,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734473354
    },
    {
        "content": "<p>rather than part of of <code>main</code>'s type</p>",
        "id": 489580463,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734473380
    },
    {
        "content": "<p>Maybe Weaver could even offer that?</p>",
        "id": 489580491,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734473393
    },
    {
        "content": "<p>Which guides people away from saying \"I'll just use the built-in thing\"</p>",
        "id": 489580624,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734473439
    },
    {
        "content": "<p>also possible, but if I'm just making a quick script for myself and don't want to bother with edge cases, I probably don't want to bother with dependencies either <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 489580627,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734473440
    },
    {
        "content": "<p>Agreed</p>",
        "id": 489580636,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734473446
    },
    {
        "content": "<p>Though you always need a platform</p>",
        "id": 489580663,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734473456
    },
    {
        "content": "<p>There's no such thing as a CLI in Roc without deps</p>",
        "id": 489580704,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734473468
    },
    {
        "content": "<p>sure</p>",
        "id": 489580719,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734473477
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 489580738,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734473482
    },
    {
        "content": "<p>I just mean adding another one</p>",
        "id": 489580742,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734473484
    },
    {
        "content": "<p>I think API design decisions like this are really worthwhile</p>",
        "id": 489580860,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734473529
    },
    {
        "content": "<p>I just don't know what \"quick and dirty args\" will look like without giving users a footgun that this whole discussion just attempted to avoid</p>",
        "id": 489580897,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734473556
    },
    {
        "content": "<p>I'd be happy to see one, though!</p>",
        "id": 489580911,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734473563
    },
    {
        "content": "<p>So we have the \"pit-of-success\" but somewhat complicated default for <code>main! : List Arg -&gt; ...</code>, and then also provde a quick and dirty <code>Arg.list! : {} =&gt; List Str</code> which might crash on invalid utf8</p>",
        "id": 489580917,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734473565
    },
    {
        "content": "<p>Maybe <code>Arg.lossyList!</code>?</p>",
        "id": 489580952,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734473585
    },
    {
        "content": "<p>If we make Weaver part of basic CLI, I would be happy with it exposing a method to just convert all args to utf8</p>",
        "id": 489580960,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734473587
    },
    {
        "content": "<p>it's the difference between people being unpleasantly surprised when things don't work in unusual circumstances vs being like \"hey the equivalent tool written in Roc works fine in this scenario, how come yours crashes, Non Roc Program?\"</p>",
        "id": 489581025,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734473605
    },
    {
        "content": "<p>Otherwise yeah, effect is fine.</p>",
        "id": 489581030,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734473607
    },
    {
        "content": "<p>For the quick and dirty... you just ignore the args in main, and use the Effect</p>",
        "id": 489581043,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734473616
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/channel/316715-contributing/topic/basic-cli.20purity.20inference/near/489581025\">said</a>:</p>\n<blockquote>\n<p>it's the difference between people being unpleasantly surprised when things don't work in unusual circumstances vs being like \"hey the equivalent tool written in Roc works fine in this scenario, how come yours crashes, Non Roc Program?\"</p>\n</blockquote>\n<p>You really targeted my anti-Python CLI bias right there</p>",
        "id": 489581148,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734473650
    },
    {
        "content": "<p>or we could have <code>Arg.display : Arg -&gt; Str</code></p>",
        "id": 489581192,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734473671
    },
    {
        "content": "<p>\"Ranger is the most popular TUI file manager, it's gotta be battle tested!\"</p>",
        "id": 489581197,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734473672
    },
    {
        "content": "<p>And it is, but it still broke a bunch when I used it</p>",
        "id": 489581209,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734473683
    },
    {
        "content": "<p>and then you can just <code>map</code> over them to get a <code>List Str</code></p>",
        "id": 489581273,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734473710
    },
    {
        "content": "<p>also this discussion (and <code>Path</code>) are good examples of why having a pit of success is so important</p>",
        "id": 489581363,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734473756
    },
    {
        "content": "<p>how many application authors are gonna go far enough down the OS rabbit hole to know about these things?</p>",
        "id": 489581457,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734473784
    },
    {
        "content": "<p>negative five percent</p>",
        "id": 489581533,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734473820
    },
    {
        "content": "<p>finding an API where if they use it and naturally end up with edge cases Just Working is awesome</p>",
        "id": 489581548,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734473823
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/316715-contributing/topic/basic-cli.20purity.20inference/near/489581192\">said</a>:</p>\n<blockquote>\n<p>or we could have <code>Arg.display : Arg -&gt; Str</code></p>\n</blockquote>\n<p>Yeah, I vote for this. Or if we want to be more explicit <code>Arg.toStrLossy</code></p>",
        "id": 489581659,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734473882
    },
    {
        "content": "<p>Or similar name</p>",
        "id": 489581708,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734473890
    },
    {
        "content": "<p>Yep, having \"lossy\" in the name is really good IMO</p>",
        "id": 489581744,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734473912
    },
    {
        "content": "<p>C'mon guys... <code>Arg.to_str_lossy</code></p>",
        "id": 489581878,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734473998
    },
    {
        "content": "<p>Yeah, I like where this design is reaching overall. Essentially main gets OsString args. Weaver knows how to handle them well. Otherwise, users can opt into the naive thing and the name calls out it is naive.</p>",
        "id": 489581961,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734474018
    },
    {
        "content": "<p>Steve Irwin over here with his love of reptiles</p>",
        "id": 489581964,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734474019
    },
    {
        "content": "<p>So I'm busy for 1.5 hours at work, I'll add <code>Arg := [Unix (List U8), Windows (List U16)]</code> after that to the basic-cli PR</p>",
        "id": 489582062,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734474085
    },
    {
        "content": "<p>And then update Weaver later</p>",
        "id": 489582075,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734474090
    },
    {
        "content": "<p>While you're at it, feel like adding <code>Str.from_utf16</code> to the builtins? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 489582175,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734474127
    },
    {
        "content": "<p>That'd be great</p>",
        "id": 489582203,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734474141
    },
    {
        "content": "<p>New thread time</p>",
        "id": 489582223,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734474154
    },
    {
        "content": "<p>That is also needed for js, right?</p>",
        "id": 489582315,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734474198
    },
    {
        "content": "<p>I feel like I remember this coming up in wasm land</p>",
        "id": 489582355,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734474218
    },
    {
        "content": "<p>Oh man, you're right, JS uses UTF-16 for strings</p>",
        "id": 489582686,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734474387
    },
    {
        "content": "<p>Yep, both JS and Dart used UCS-2 (and UTF16 in modern implementations)</p>",
        "id": 489583271,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1734474685
    },
    {
        "content": "<p>Java too</p>",
        "id": 489583945,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734475038
    },
    {
        "content": "<p>although I think Java might use one of the custom encodings that disallows zeros, I forget</p>",
        "id": 489584134,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734475117
    },
    {
        "content": "<p>but yeah <code>Str.from_utf16</code> seems like a good idea! <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 489584179,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734475141
    },
    {
        "content": "<p>Great! Discussion happening <a href=\"#narrow/channel/383402-API-design/topic/Lossy.20unicode.20conversion.20builtins/near/489582492\">here</a> for the onlookers</p>",
        "id": 489584250,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734475187
    },
    {
        "content": "<p>👏🏼 love to see 242 unreads in a juicy topic</p>",
        "id": 489584587,
        "sender_full_name": "jan kili",
        "timestamp": 1734475366
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"462053\">JanCVanB</span> <a href=\"#narrow/channel/316715-contributing/topic/basic-cli.20purity.20inference/near/489584587\">said</a>:</p>\n<blockquote>\n<p>👏🏼 love to see 242 unreads in a juicy topic</p>\n</blockquote>\n<p>Make sure to wear a helmet</p>",
        "id": 489584769,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734475462
    },
    {
        "content": "<blockquote>\n<p>The new release will probably be available next week.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"497765\">@Kilian Vounckx</span> we're still getting in some final changes, so should be next week</p>",
        "id": 490303566,
        "sender_full_name": "Anton",
        "timestamp": 1734791822
    },
    {
        "content": "<p>No problems, take all the time you need</p>",
        "id": 490310340,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1734797422
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"497765\">@Kilian Vounckx</span>  The pre-release for basic-cli 0.18.0 is <a href=\"https://github.com/roc-lang/basic-cli/releases/tag/0.18.0\">availabe</a> :)</p>",
        "id": 491108079,
        "sender_full_name": "Anton",
        "timestamp": 1735407748
    },
    {
        "content": "<p>Awesome! Thanks for the tag <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 491112565,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1735412320
    },
    {
        "content": "<p>Today I successfully manually merged that pre-release into my downstream \"fork\" roc-on - <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> I loooooove the glue splitting, I refactored my codegen pipeline to populate a new crate <code>roc_midi</code></p>",
        "id": 491465837,
        "sender_full_name": "jan kili",
        "timestamp": 1735702609
    }
]