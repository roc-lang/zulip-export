[
    {
        "content": "<p>If anyone is interested, I have a well-scoped project that could use some help - compiling type-erased closures to WASM and dev compilation backends, and supporting their reference counting.</p>\n<p>Most languages implement closures by \"type erasure\" of the values that they capture, hiding them away somewhere on the heap and loading them only when needed. Roc generally does not use this scheme, because it begets various useful optimizations. However, in some cases, type erasure of closures will be required in the future, and in other cases it is useful to have as an option.</p>\n<p><a href=\"https://github.com/roc-lang/roc/pull/5576\">https://github.com/roc-lang/roc/pull/5576</a> implements initial support for type-erased closures for the LLVM backend, but there are several things missing:</p>\n<ul>\n<li>Compilation to the WASM backend</li>\n<li>Compilation to the machine-code dev backend</li>\n<li>Injection of reference counting functions in the erased closure value representation</li>\n<li>Support for erased closures in glue (more involved)</li>\n</ul>\n<p>With the exception of the last bullet, none of these require significant knowledge of the rest of the Roc compiler's implementation. I won't claim that these are easy, but they are small and well-scoped projects that you could sink into if you wanted to.</p>\n<p>If anyone is interested, please follow up on this thread or DM me and I am happy to help you get started.</p>",
        "id": 375098728,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1689296683
    }
]