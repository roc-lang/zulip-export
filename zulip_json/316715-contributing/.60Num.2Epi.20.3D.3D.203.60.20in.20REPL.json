[
    {
        "content": "<p>So I just found an amusing bug. I was thinking of writing a proposal to change the trig functions to accept tagged values like Degs 180 or Rads Num.pi/2, as this can easily lead to mistakes (with more explicitly named functions if you don't want to tag things), and I discovered that <code>Num.pi == 3</code> in the REPL.</p>\n<p>Now I know engineers like to approximate, but I think that's bit silly.</p>",
        "id": 407442948,
        "sender_full_name": "Declan Joseph Maguire",
        "timestamp": 1702376802
    },
    {
        "content": "<p>Adding an issue on github, just amusing enough I thought it was worth mentioning here</p>",
        "id": 407446348,
        "sender_full_name": "Declan Joseph Maguire",
        "timestamp": 1702377806
    },
    {
        "content": "<p>lol. Not sure what's happening there, the definition is ... more accurate</p>\n<div class=\"codehilite\"><pre><span></span><code>## Archimedes&#39; constant (Ï€)\npi : Frac *\npi = 3.14159265358979323846264338327950288419716939937510\n</code></pre></div>",
        "id": 407446483,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1702377843
    },
    {
        "content": "<p>I checked, and putting Num.pi == 3 into repl returns Bool.true</p>",
        "id": 407446628,
        "sender_full_name": "Declan Joseph Maguire",
        "timestamp": 1702377882
    },
    {
        "content": "<p><code>Num.tau</code> actually runs into a repl error that I'll fix</p>",
        "id": 407446643,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1702377887
    },
    {
        "content": "<p>yes, if you just put in <code>Num.pi</code> is shows 3 too</p>",
        "id": 407446679,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1702377899
    },
    {
        "content": "<p>so it must get truncated somewhere</p>",
        "id": 407446733,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1702377917
    },
    {
        "content": "<p>I was checked because I wanted to be sure it wasn't a display thing</p>",
        "id": 407446790,
        "sender_full_name": "Declan Joseph Maguire",
        "timestamp": 1702377933
    },
    {
        "content": "<p>maybe because of the large number of decimal digits</p>",
        "id": 407446799,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1702377938
    },
    {
        "content": "<p>Bug submitted. Do you think that making trig accept tagged values is a good idea? Whether the input is degrees of radians (or other units) is effectively a strange sort of type in my mind, because a trig function ultimately acts on an angle, not a number</p>",
        "id": 407447191,
        "sender_full_name": "Declan Joseph Maguire",
        "timestamp": 1702378069
    },
    {
        "content": "<p>not sure. elm had a cool thing here where it did something like <code>cos (radians x)</code> or <code>cos (degrees x)</code> where <code>radians</code> is just the identity function and <code>degrees</code> actually converts to radians</p>",
        "id": 407448148,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1702378373
    },
    {
        "content": "<p>so, it turns out that there is no <code>Dec.mulWrap</code>, but what should that function even do? We use mulWrap to indicate \"this will not overflow, go as fast as possible) but I think the actual behavior is just unspecified here (similar for floats)</p>",
        "id": 407448947,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1702378650
    },
    {
        "content": "<p>I asssume mulWrap is just the standard wrapping multiplication for ints. Perhaps replace it with a saturate version? For floats that would naturally allow things to hit infinity</p>",
        "id": 407450318,
        "sender_full_name": "Declan Joseph Maguire",
        "timestamp": 1702379042
    },
    {
        "content": "<p>It's also odd to have numerical constants as Dec type, they should really be Frac. It's an irrational number, it's not going to have nice digits in ANY base</p>",
        "id": 407450532,
        "sender_full_name": "Declan Joseph Maguire",
        "timestamp": 1702379112
    },
    {
        "content": "<p>dec stands for decimal (point). it has nothing to do with base 10 in particular</p>",
        "id": 407450869,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1702379236
    },
    {
        "content": "<p>hah, it is actually the large number of digits that makes it truncate</p>",
        "id": 407451023,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1702379292
    },
    {
        "content": "<p>My understanding was it was a datatype specifically existing for decimal representation, i.e. base 10, so that stuff like recording a bank balance as $10.2 wouldn't be subject to float approximations</p>",
        "id": 407451097,
        "sender_full_name": "Declan Joseph Maguire",
        "timestamp": 1702379322
    },
    {
        "content": "<p>Because we already have Frac for that purpose, if we just wanted to represent non-integer values</p>",
        "id": 407451272,
        "sender_full_name": "Declan Joseph Maguire",
        "timestamp": 1702379398
    },
    {
        "content": "<p>Unless the documentation is VERY out of date and Dec now includes floats</p>",
        "id": 407451474,
        "sender_full_name": "Declan Joseph Maguire",
        "timestamp": 1702379464
    },
    {
        "content": "<p>Dec is a fixed-point type, that uses base10 in practice but that is not really what it's about</p>",
        "id": 407451544,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1702379493
    },
    {
        "content": "<p>frac covers numbers with a point (that is, fractions), so covers both Dec, F64 and F32</p>",
        "id": 407451615,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1702379523
    },
    {
        "content": "<p>I think I'd misunderstood what you'd said earlier, yes, that matches my understanding. I'm pretty sure that choosing a base for a fixed-point type still imposes limits on which values are exactly representable or not, so Dec is still tied to its base intimately</p>",
        "id": 407452156,
        "sender_full_name": "Declan Joseph Maguire",
        "timestamp": 1702379708
    },
    {
        "content": "<p>Does using a very very precise Dec for something like pi, instead of an F64 have a reason? Because it feels like it should naturally be a float.</p>",
        "id": 407452409,
        "sender_full_name": "Declan Joseph Maguire",
        "timestamp": 1702379794
    },
    {
        "content": "<p>pi is defined as a frac in the standard library. in the repl we pick Dec as the default concrete type. For most purposes that is probably fine, but for performance using F64 definitely makes more sense</p>",
        "id": 407453291,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1702380121
    },
    {
        "content": "<p>note btw that <code>Dec = Frac Decimal</code>, and <code>F64 = Frac Float64</code>, they use some type trickery</p>",
        "id": 407453420,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1702380160
    },
    {
        "content": "<p>I know enough about Roc number type magic to know that I do not know how Roc number type magic works</p>",
        "id": 407453556,
        "sender_full_name": "Declan Joseph Maguire",
        "timestamp": 1702380211
    },
    {
        "content": "<p>I wonder if there's some way to force pi to default to float in repl, because having it be a dec just feels wrong. It's not terribly important, but it's got a kind of smell, you know?</p>",
        "id": 407454427,
        "sender_full_name": "Declan Joseph Maguire",
        "timestamp": 1702380520
    },
    {
        "content": "<p>no? dec is the better type for a repl. you don't do serious work there, and float imprecision is just annoying</p>",
        "id": 407472664,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1702386844
    },
    {
        "content": "<p>we could actually generate different versions of <code>pi</code> depending on the type it specializes to</p>",
        "id": 407478706,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1702388692
    },
    {
        "content": "<p>like give it the maximum number of digits possible for <code>Dec</code>, <code>F64</code>, and <code>F32</code> depending on which of those it ends up monomorphizing to</p>",
        "id": 407478754,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1702388709
    },
    {
        "content": "<p>same with tau</p>",
        "id": 407478762,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1702388711
    },
    {
        "content": "<p>I had thought of that but I assumed it'd be too much of a pain to implement. I like that.</p>\n<p>But yes the too-many-digits truncation glitch is hillarious and goofy.</p>",
        "id": 407479540,
        "sender_full_name": "Declan Joseph Maguire",
        "timestamp": 1702388941
    },
    {
        "content": "<p>I think we should just fix the truncation glitch</p>",
        "id": 407508246,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702396273
    },
    {
        "content": "<p>Cause someone is gonna write a too long constant for a Dec one day</p>",
        "id": 407508282,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702396287
    },
    {
        "content": "<p>That should either error or just work</p>",
        "id": 407508324,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702396298
    },
    {
        "content": "<p>I prefer just work and warm on lost precision</p>",
        "id": 407508364,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702396314
    },
    {
        "content": "<p>When is pi actually parsed to a Dec? Does it use our zig parsing logic or is parsed in the rust in the compiler?</p>",
        "id": 407508616,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702396386
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/316715-contributing/topic/.60Num.2Epi.20.3D.3D.203.60.20in.20REPL/near/407508246\">said</a>:</p>\n<blockquote>\n<p>I think we should just fix the truncation glitch</p>\n</blockquote>\n<p>Oviously, yeah, lets get that fixed before anything else.</p>",
        "id": 407586903,
        "sender_full_name": "Declan Joseph Maguire",
        "timestamp": 1702422085
    },
    {
        "content": "<p>Key word is \"just\". I don't think we should do any of the other stuff mentioned here.</p>",
        "id": 407587683,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702422527
    }
]