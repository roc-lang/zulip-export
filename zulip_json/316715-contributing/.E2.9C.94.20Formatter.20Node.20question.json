[
    {
        "content": "<p>What are these and what is there purpose?  And why to parts of a type annotation get turned into a Node sequence where somethings that are NOT literals, get turned into literals?  I see this for a type annotation of a record type</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">NodeSpaces</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">before</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[],</span><span class=\"w\"> </span><span class=\"n\">item</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Sequence</span><span class=\"p\">(</span><span class=\"n\">Literal</span><span class=\"p\">(</span><span class=\"s\">\"siblingIds\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">[(</span><span class=\"n\">Sp</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">default_space</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">comments</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">Literal</span><span class=\"p\">(</span><span class=\"s\">\":\"</span><span class=\"p\">)),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Sp</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">default_space</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">comments</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">TypeAnnotation</span><span class=\"p\">(</span><span class=\"n\">Apply</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"List\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">@</span><span class=\"mi\">318</span><span class=\"o\">-</span><span class=\"mi\">321</span><span class=\"w\"> </span><span class=\"n\">Apply</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"U64\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[])])))]),</span><span class=\"w\"> </span><span class=\"n\">after</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 490347991,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1734832368
    },
    {
        "content": "<p>To snakify this requires doing some gnarly threading of the migration flags into logic about turning the RequiredValue (and others) into a Node</p>",
        "id": 490348118,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1734832507
    },
    {
        "content": "<p>Ok, I think the borrow checker has defeated me.  Doing what is necessary here seems to require some pretty sizable changes - or I just need more borrow-checker-fu</p>",
        "id": 490385510,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1734870512
    },
    {
        "content": "<p>The problem TLDR:</p>\n<p>We have an AST node (a Loc&lt;RequiredValue&lt;TypeAnnotation&gt;&gt;) that right now is being turned into a Node sequence.  It is in that Node sequence that I need to snakify the identifier if the migrate flag is on.</p>\n<p>I have two options:</p>\n<ol>\n<li>Snakify the ident by cloning the original and doing the snakification.  But that requires creating a new Buf that will be dropped and that causes a borrowing violation.</li>\n<li>Having the snakification happen when we create the Literal Node for the identifier.  Same problem - it has to create a new Buf to create the new ident string and their is a dangling value.</li>\n</ol>\n<p>I've tried all manners of lifetime combinations (and ellisions) and cloning.  I am not going to give up, but if anyone has any pointers I'd be very appreciative</p>",
        "id": 490385876,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1734870867
    },
    {
        "content": "<p><strong>UPDATE</strong>: I DEFEATED THE BORROW CHECKER BACK</p>",
        "id": 490389908,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1734874715
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> has marked this topic as resolved.</p>",
        "id": 490505667,
        "sender_full_name": "Notification Bot",
        "timestamp": 1734954903
    }
]