[
    {
        "content": "<p>One thing an LLM could be well suited for is checking for too few comments and nondescriptive variable names in CI.  Thoughts?</p>",
        "id": 502631255,
        "sender_full_name": "Anton",
        "timestamp": 1740764214
    },
    {
        "content": "<p>as in, have the compiler itself invoke an LLM?</p>",
        "id": 502638082,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740766317
    },
    {
        "content": "<p>No, just a github CI check</p>",
        "id": 502641708,
        "sender_full_name": "Anton",
        "timestamp": 1740767516
    },
    {
        "content": "<p>I've edited the original message for clarity</p>",
        "id": 502642159,
        "sender_full_name": "Anton",
        "timestamp": 1740767645
    },
    {
        "content": "<p>ah gotcha</p>",
        "id": 502642217,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740767664
    },
    {
        "content": "<p>I dunno, I tend to think those sorts of reviews are more annoying than helpful when a human does them <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 502642308,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740767696
    },
    {
        "content": "<p>\"more test coverage\" might be reasonable though, especially for outside contributors</p>",
        "id": 502642393,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740767721
    },
    {
        "content": "<blockquote>\n<p>checking for too few comments</p>\n</blockquote>\n<p>I think it would be better to enforce every function has a doc comment then something like this.</p>",
        "id": 502642415,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740767729
    },
    {
        "content": "<p>and especially if it was just a comment a bot left instead of a check</p>",
        "id": 502642442,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740767738
    },
    {
        "content": "<p>A human can do a better job for sure, but with a bunch of contributors we may not be reviewing consistently</p>",
        "id": 502642443,
        "sender_full_name": "Anton",
        "timestamp": 1740767739
    },
    {
        "content": "<p>I definitely don't love the idea of a check that can block the PR which is nondeterministic <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 502642518,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740767763
    },
    {
        "content": "<p>Yeah that could be a problem but the variance between identical calls could turn out extremely small</p>",
        "id": 502642899,
        "sender_full_name": "Anton",
        "timestamp": 1740767886
    },
    {
        "content": "<blockquote>\n<p>I think it would be better to enforce every function has a doc comment then something like this.</p>\n</blockquote>\n<p>Can you elaborate <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span>?</p>",
        "id": 502643045,
        "sender_full_name": "Anton",
        "timestamp": 1740767942
    },
    {
        "content": "<blockquote>\n<p>I think it would be better to enforce every function has a doc comment then something like this.</p>\n</blockquote>\n<p>I suspect that would get kind of annoying and would result in a lot of half-hearted comments left to satisfy the requirement</p>",
        "id": 502643141,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1740767978
    },
    {
        "content": "<p>Yeah, I generally prefer good descriptive names instead of comments when possible</p>",
        "id": 502643277,
        "sender_full_name": "Anton",
        "timestamp": 1740768015
    },
    {
        "content": "<p>I don't think that requiring comments within a function is the right requirement. While they can be good, they tend to lead to lots of terrible comments that just lead to telling what the code is doing (which you can tell from reading the code). The most useful comments tends to explain the why. I don't think llm too few comment messages will help with this.</p>",
        "id": 502643409,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740768066
    },
    {
        "content": "<p>How do you feel about just a nondescriptive variable names check?</p>",
        "id": 502643635,
        "sender_full_name": "Anton",
        "timestamp": 1740768141
    },
    {
        "content": "<blockquote>\n<p>I suspect that would get kind of annoying and would result in a lot of half-hearted comments left to satisfy the requirement</p>\n</blockquote>\n<p>Doc comments on functions (especially those exposed and imported) are rather fundamental in my opinion. From watching many new people interact with and work with the old rust compiler, almost always a fundamental problem is our lack of doc comments. Good naming helps a lot but is not enough.</p>\n<p>Clearly high level why and how docs are also huge (but those tend to get stale very quickly and are much more of an investment to write). While I don't think every function needs a doc comment (especially when thinking about internal functions), I do think it is extra valuable in an open source project (even if many are half hearted)</p>",
        "id": 502643839,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740768221
    },
    {
        "content": "<p>Yeah, agreed on exposed functions</p>",
        "id": 502644535,
        "sender_full_name": "Anton",
        "timestamp": 1740768450
    },
    {
        "content": "<p>I think a really valuable base check would be doc comments on everything with <code>pub</code>. So types, functions, etc.</p>",
        "id": 502644688,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740768492
    },
    {
        "content": "<p>Also, mixed value (depends on how half hearted or descriptive people are), but a top of file doc comment would also be good (this would be where we write down the rough goal of a module and any important design pieces).</p>",
        "id": 502644859,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740768555
    },
    {
        "content": "<p>I think it would make roc code a lot more explorable. Even if to start it is just the one sentence description of what a pass is meant to do</p>",
        "id": 502645065,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740768618
    },
    {
        "content": "<p>I think those both could be hard requirements and add a lot of value</p>",
        "id": 502645091,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740768627
    },
    {
        "content": "<blockquote>\n<p>How do you feel about just a nondescriptive variable names check?</p>\n</blockquote>\n<p>Sounds fine overall. I think there is some nuance depending on variable lifetime, but better names are very helpful.</p>",
        "id": 502645200,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740768668
    },
    {
        "content": "<p>That said, I think this would fit best as code review comments that a user can choose to ignore rather than a blocking check</p>",
        "id": 502645768,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740768844
    },
    {
        "content": "<p>agreed!</p>",
        "id": 502645813,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740768864
    },
    {
        "content": "<blockquote>\n<p>I think a really valuable base check would be doc comments on everything with <code>pub</code>. So types, functions, etc.</p>\n</blockquote>\n<p>I'm going to start on this, forking <a href=\"https://github.com/DonIsaac/zlint\">zlint</a> seems like the way to go. I'll contribute the rule if they want it.</p>",
        "id": 503778649,
        "sender_full_name": "Anton",
        "timestamp": 1741263620
    },
    {
        "content": "<p>I'm just going with regex, that's way simpler and one less dependency</p>",
        "id": 503859019,
        "sender_full_name": "Anton",
        "timestamp": 1741284669
    },
    {
        "content": "<p>Scan file. Find word <code>pub</code>. Assert line before starts with <code>///</code>?</p>",
        "id": 503863090,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741285860
    },
    {
        "content": "<p>Separate check to assert each file starts with a doc comment</p>",
        "id": 503863141,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741285877
    },
    {
        "content": "<blockquote>\n<p>Scan file. Find word <code>pub</code>. Assert line before starts with <code>///</code>?</p>\n</blockquote>\n<p>Yeah, I got way of course with nodes, symbols, the ast... with zlint :p</p>",
        "id": 503865192,
        "sender_full_name": "Anton",
        "timestamp": 1741286544
    },
    {
        "content": "<blockquote>\n<p>Separate check to assert each file starts with a doc comment</p>\n</blockquote>\n<p>Going to leave this for a second PR, so we can quickly address all the missing comments for the first check.</p>",
        "id": 503865666,
        "sender_full_name": "Anton",
        "timestamp": 1741286688
    },
    {
        "content": "<p>There are 45 zig files in the src folder (<a href=\"https://github.com/roc-lang/roc/actions/runs/13705874080/job/38330922006?pr=7670\">overview</a>) where pub functions and constants do not have a doc comment <code>///</code>.<br>\nPlease add doc comments to the files you are familiar with <span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> <span class=\"user-mention\" data-user-id=\"453336\">@Joshua Warner</span> <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> <span class=\"user-mention\" data-user-id=\"781658\">@Anthony Bullard</span> <span class=\"user-mention\" data-user-id=\"341568\">@Jared Ramirez</span> <span class=\"user-mention\" data-user-id=\"611722\">@Isaac Van Doren</span></p>",
        "id": 503868190,
        "sender_full_name": "Anton",
        "timestamp": 1741287497
    },
    {
        "content": "<p>I'll add doc comments in my latest PR</p>",
        "id": 503904986,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1741300755
    },
    {
        "content": "<p>I decided to add the doc comments in Anton's PR</p>",
        "id": 503913513,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1741304323
    },
    {
        "content": "<p>I've been bulk adding these... I figure it's just not going to happen any other way. Some of my comments are probably not great. But I figure we can get them there and maintain a culture of improving comments as we go</p>",
        "id": 503913605,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1741304367
    },
    {
        "content": "<p>That's awesome. Thanks</p>",
        "id": 503916743,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741305788
    },
    {
        "content": "<p>Maybe thank me after you see the damage <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 503916789,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1741305814
    },
    {
        "content": "<p>I think folks are more likely to update wrong comments than add non-existent ones</p>",
        "id": 503916905,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741305870
    },
    {
        "content": "<p>So the more wrong the comment... the more inclined someone is to fix it right? <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 503916948,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1741305901
    },
    {
        "content": "<p><img alt=\":grug:\" class=\"emoji\" src=\"https://avatars.zulip.com/22008/emoji/images/18c68b0c.png\" title=\"grug\"> <span aria-label=\"tombstone\" class=\"emoji emoji-1faa6\" role=\"img\" title=\"tombstone\">:tombstone:</span></p>",
        "id": 503916974,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741305919
    },
    {
        "content": "<p>Cunningham's Law in full force</p>",
        "id": 503916994,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741305931
    },
    {
        "content": "<p>Ok... everything has a doc comment now.</p>",
        "id": 503921104,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1741307797
    },
    {
        "content": "<p>I propose we land this PR -- even though I've added lots of TODO's in doc comments. </p>\n<p>My logic is that we aren't going to resolve all the TODO's in this PR, there are just far too many. The scope of this change was to introduce the CI check, which is working well. </p>\n<p>So we can follow this up with other PR's and gradually clean up things as we go.</p>",
        "id": 503922452,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1741308513
    },
    {
        "content": "<p>I'll try to work on that tonight</p>",
        "id": 503922470,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741308526
    },
    {
        "content": "<p>Something that would be really nice to figure out is how to avoid this requirement on re-exports. Maybe the regex can check if the line contains an <code>@import</code> and ignore those lines?</p>",
        "id": 503937637,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741317077
    },
    {
        "content": "<p>The current behavior requires docs on those lines, which puts what I'd call superfluous docs on top of the real docs in the LSP hover box</p>",
        "id": 503937685,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741317108
    },
    {
        "content": "<p>Also <code>init</code> and <code>deinit</code> feels a bit silly also</p>",
        "id": 503937691,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1741317112
    },
    {
        "content": "<p>Yep</p>",
        "id": 503937701,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741317117
    },
    {
        "content": "<p>The regex also doesn't check nested <code>pub</code> items, which seems like something we'll want</p>",
        "id": 503937777,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741317152
    },
    {
        "content": "<p>It's a good start, we can collect ideas to adjust as we go</p>",
        "id": 503937805,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1741317173
    },
    {
        "content": "<p>Another round of doc comments (besides the <code>build/</code> and <code>check/</code> folders) <a href=\"https://github.com/roc-lang/roc/pull/7671/files\">https://github.com/roc-lang/roc/pull/7671/files</a></p>",
        "id": 503942670,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741320037
    },
    {
        "content": "<p>Love to see it</p>",
        "id": 503945319,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1741321612
    },
    {
        "content": "<p>I've been <em>pretty good</em> about this, but I will look to get better as I work on my current PR</p>",
        "id": 504129042,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741363247
    },
    {
        "content": "<p>I've added a check for a top level comment for every zig file <code>//!</code>. That comment should describe the purpose  of the file. It's currently limited to zig files introduced in the current PR.</p>",
        "id": 504633647,
        "sender_full_name": "Anton",
        "timestamp": 1741623669
    },
    {
        "content": "<p>Doc comments are now no longer required for init, deinit and re-exports.</p>",
        "id": 504650304,
        "sender_full_name": "Anton",
        "timestamp": 1741628407
    },
    {
        "content": "<p>Thank you Anton!</p>",
        "id": 504656816,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741630320
    },
    {
        "content": "<p>We should expand this check for public functions in structs. Like all of the tokenizer struct functions and such. Basically any line with <code>pub</code> on it that isn't a re-export.</p>",
        "id": 505324892,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741844772
    }
]