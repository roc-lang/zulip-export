[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> and <span class=\"user-mention\" data-user-id=\"361169\">@Anton</span>  I got a chance to look at <a href=\"https://github.com/roc-lang/roc/pull/6808\">6808</a> today. I am trying to get my head around what you have done. So it looks like the new version of <code>roc preprocess-host</code> in the PR requires you to pass the <code>--host</code> <code>--platform</code> and <code>--lib</code> flags explicitly pointing to the appropriate files instead of being produced as part of the build process?</p>\n<p>The failures I get in the test suite locally are all in the CLI tests. Looks like this exactly matches the existign failed CI run. Doesn't that make sense though? Many of the examples provide their own platforms and will have to be updated with the new <code>preprocess-host</code> command? They all seem to fail with a similar error message.</p>\n<p>Taking a look at the first failed test <code>expects_dev_and_test</code> calls <code>test_roc_app</code> on <code>crates/cli/tests/expects/expects.roc</code>. Reading that file it looks like it uses a local implementation of the <a href=\"https://github.com/roc-lang/roc/blob/main/crates/cli/tests/expects/expects.roc#L2\">zig platform</a>. Scanning through a few more of the failed tests reveals they also use local platform sources.</p>\n<p>To fix this it seems like I could preprocess these local hosts as part of the test or use some prebuilt base. Preferences?</p>",
        "id": 447607581,
        "sender_full_name": "Ryan Barth",
        "timestamp": 1719528853
    },
    {
        "content": "<p>I think those tests should be unrelated to this change. The <code>preprocess-host</code> is a subcommand for the cli. You run it like </p>\n<div class=\"codehilite\"><pre><span></span><code>roc preprocess-host /path/to/exe /path/to/platform/main.roc path/to/app.dylib\n</code></pre></div>",
        "id": 447609308,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719529654
    },
    {
        "content": "<p>The CLI tests are using a release or local platform and I don't think any of them are using preprocess-host -- I'm not 100% on that.</p>",
        "id": 447609464,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719529732
    },
    {
        "content": "<p>Hmm ok, yeah I have not seen <code>preprocess-host</code> in any I have looked at so far.</p>",
        "id": 447609557,
        "sender_full_name": "Ryan Barth",
        "timestamp": 1719529776
    },
    {
        "content": "<p>I'm just having a look now</p>",
        "id": 447609651,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719529819
    },
    {
        "content": "<p>All of these CLI tests pass for me on the main branch. I will try bringing that feature branch up to date with main.</p>",
        "id": 447609660,
        "sender_full_name": "Ryan Barth",
        "timestamp": 1719529824
    },
    {
        "content": "<p>Great news. <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> </p>\n<p><span class=\"user-mention\" data-user-id=\"453714\">@Ryan Barth</span> and I were able to fix <a href=\"https://github.com/roc-lang/roc/pull/6808\">roc PR #6808</a> for Linux and MacOS, and test that it correctly generates the surgical linker files. We used the refactor-host <a href=\"https://github.com/roc-lang/basic-cli/pull/194\">basic-cli PR #194</a> to confirm this by uncommenting <a href=\"https://github.com/roc-lang/basic-cli/pull/194/files#r1642551257\">these lines in the build script</a>.</p>\n<p>Both of these PRs are now almost ready to merge. If we did that today we would have;</p>\n<ul>\n<li>updated the API for the roc <code>preprocess-host</code> subcommand </li>\n<li>refactored the basic-cli <code>.rs</code> host files out into crates</li>\n<li>have a <code>.roc</code> build script to generate the basic-cli binaries (for both legacy and surgical linkers)</li>\n</ul>\n<p>The only remaining issue is generating stub_dll_symbols for Windows -- which is currently left as a todo because I wasn't sure what we wanted to do with this.</p>\n<div class=\"codehilite\"><pre><span></span><code>error: cannot find macro `internal_error` in this scope\n   --&gt; crates\\cli\\src/main.rs:174:17\n    |\n174 |                 internal_error!(&quot;TODO populate stub_dll_symbols for Windows&quot;);\n    |                 ^^^^^^^^^^^^^^\n</code></pre></div>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span>  <a href=\"https://github.com/roc-lang/roc/pull/6696#pullrequestreview-2031699432\">said</a>: ... I think we can remove the dependency on an actual dylib and the stub symbols. So I think we should remove both of those. The only piece of information we actually need is what shared library the host thinks it linked to such that we can remove that dependency during preprocessing.</p>\n</blockquote>\n<p>Based on this comment, am I correct that we should remove the <code>stub_dll_symbols</code> from Windows and related failing tests?</p>",
        "id": 447688579,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719561361
    },
    {
        "content": "<p>The <a href=\"https://github.com/roc-lang/basic-webserver/pull/54\">basic-webserver #54 PR</a> also refactors the host into crates and adds a build script. </p>\n<p>I thought that would also be paired with the above pre-process API change and need to be coordinated. I was waiting for the API change to be ready so that we could also generate the surgical linker binaries for basic-webserver.</p>\n<p>Ryan and I tested this today, and we found what looks like a surgical linker bug. </p>\n<p>I can see that the current basic-webserver release does not have any surgical linker binaries, and assume this is because they can't be built with this bug.</p>\n<p>Therefore, I don't think the basic-webserver <a href=\"https://github.com/roc-lang/roc/issues/54\">#54</a> PR is not blocked on this change, and we can progress that independently.</p>",
        "id": 447691018,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719562126
    },
    {
        "content": "<p>Yeah, let's remove the stub lib command</p>",
        "id": 447794154,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719586773
    },
    {
        "content": "<p>Just make platform authors compile a simple app with <code>build --lib</code></p>",
        "id": 447794375,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719586825
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> I'm talking about the internals not a subcommand. Do we need the sub lib symbols to make the surgical linker things for Windows?</p>",
        "id": 447870510,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719607963
    },
    {
        "content": "<p><a href=\"https://github.com/search?q=repo%3Aroc-lang%2Froc%20stub_dll_symbols&amp;type=code\">https://github.com/search?q=repo%3Aroc-lang%2Froc%20stub_dll_symbols&amp;type=code</a></p>",
        "id": 447870885,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719608134
    },
    {
        "content": "<p>I think that is currently still needed, but is a hack</p>",
        "id": 447997336,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719678350
    },
    {
        "content": "<p>Essentially, we really should be using glue to tell us what host function actually get generated</p>",
        "id": 447997398,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719678367
    },
    {
        "content": "<p>Instead, we take some base function names and attempt to generate all possible wrapper names.</p>",
        "id": 447997434,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719678392
    },
    {
        "content": "<p>I'm not sure how we should proceed with this PR then. <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> </p>\n<p>Is there some way to defer that for a follow up? Maybe we lose surgical linking on Windows for now... but that ok because it's got a critical bug anyway?</p>",
        "id": 448026598,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719692510
    },
    {
        "content": "<p>Is there a reason that specific function can just be left alone for a follow up?</p>",
        "id": 448026766,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719692572
    },
    {
        "content": "<p>*can't</p>",
        "id": 448026811,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719692591
    },
    {
        "content": "<p>It's killing CI on that PR</p>",
        "id": 448026819,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719692594
    },
    {
        "content": "<p>Well, actually I havent tested removing the todo!.</p>",
        "id": 448026863,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719692617
    },
    {
        "content": "<p>Wait....what does the current windows surgical linker do instead....I must be missing soemthing</p>",
        "id": 448026971,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719692662
    },
    {
        "content": "<p>But I'm leaning towards leaving it alone. It's just with this PR it's no longer wired up.</p>",
        "id": 448026974,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719692667
    },
    {
        "content": "<p>It currently takes a .roc file and uses that to generate the stubbed lib symbols. These symbols are only used in the Windows preprocess host. </p>\n<p>With this API change we are no longer providing a path to a .roc stubb app, but instead a dylib - the stubbed app dylib that that was used to link with and build the host.</p>",
        "id": 448029004,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719693415
    },
    {
        "content": "<blockquote>\n<p>All this said, I think we can remove the dependency on an actual dylib and the stub symbols.</p>\n</blockquote>\n<p>I think I looked into removing the dependency on the actual dylib, so all we should need to pass in is the host executable and the platform main. But I think I couldn't for some reason. </p>\n<p>I'll try again and see.</p>",
        "id": 448029522,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719693647
    },
    {
        "content": "<p>Sorry, that comment only meant for the stub lib dylib.</p>",
        "id": 448030468,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719694145
    },
    {
        "content": "<p>Still probably want an app.roc or app dylib</p>",
        "id": 448030476,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719694157
    }
]