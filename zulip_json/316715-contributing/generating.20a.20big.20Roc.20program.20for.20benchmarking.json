[
    {
        "content": "<p>right now we only have small Roc programs on which to try out the compiler</p>",
        "id": 294853021,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1661256901
    },
    {
        "content": "<p>it would be helpful to have a bigger code base (e.g. 100K or 1M LoC), but of course nobody has written any real Roc programs that big yet!</p>",
        "id": 294853070,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1661256922
    },
    {
        "content": "<p>still, we could get some really useful information if we had an actual code base with line counts like that - even if it was generated by a script</p>",
        "id": 294853139,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1661256955
    },
    {
        "content": "<p>e.g. having a script that randomly generates a valid Roc <code>interface</code> module with a random name, a handful of functions in it, randomly imports a few of the other modules, etc.</p>",
        "id": 294853282,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1661257006
    },
    {
        "content": "<p>that way, we could run the compiler on it and not only see how long it takes, but also see where specific bottlenecks are in the compilation pipeline etc.</p>",
        "id": 294853363,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1661257049
    },
    {
        "content": "<p>anyone interested in generating something like that?</p>",
        "id": 294853478,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1661257086
    },
    {
        "content": "<p>are you thinking something similar to a fuzzer/shrinker or just a random generator?</p>",
        "id": 294867661,
        "sender_full_name": "Brian Hicks",
        "timestamp": 1661262113
    },
    {
        "content": "<p>I wrote a super basic one a long while ago. I remember that after some number of files the compiler would just hang back then...not sure the state now.</p>",
        "id": 294870615,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1661263017
    },
    {
        "content": "<p>just a random generator - like something that makes valid <code>.roc</code> files which reference each other</p>",
        "id": 294877708,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1661265237
    },
    {
        "content": "<p>the goal wouldn't be fuzzing because the point wouldn't be to identify edge cases (e.g. no need for shrinking)</p>",
        "id": 294877822,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1661265257
    },
    {
        "content": "<p>the goal would just be raw lines of code in some generally realistic structure (e.g. files of nontrivial length that import various other files of nontrivial length)</p>",
        "id": 294877943,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1661265294
    },
    {
        "content": "<p>for the purpose of seeing how well the compiler can handle it, identifying performance bottlenecks, etc.</p>",
        "id": 294877986,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1661265309
    },
    {
        "content": "<p>My version just used jinja2 templates and in this case made a binary expansion of files.</p>\n<div class=\"codehilite\" data-code-language=\"Django/Jinja\"><pre><span></span><code><span class=\"x\">interface </span><span class=\"cp\">{{</span> <span class=\"nv\">name</span> <span class=\"cp\">}}</span><span class=\"x\"></span>\n<span class=\"x\">    exposes [ a, b ]</span>\n<span class=\"x\">    imports [ </span><span class=\"cp\">{{</span> <span class=\"nv\">left</span> <span class=\"cp\">}}</span><span class=\"x\">, </span><span class=\"cp\">{{</span> <span class=\"nv\">right</span> <span class=\"cp\">}}</span><span class=\"x\">]</span>\n\n<span class=\"x\">a = \\n -&gt;</span>\n<span class=\"x\">    </span><span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">flip1</span> <span class=\"cp\">%}{{</span> <span class=\"nv\">op1</span> <span class=\"cp\">}}</span><span class=\"x\"> (</span><span class=\"cp\">{{</span> <span class=\"nv\">left</span> <span class=\"cp\">}}</span><span class=\"x\">.a n) (</span><span class=\"cp\">{{</span> <span class=\"nv\">right</span> <span class=\"cp\">}}</span><span class=\"x\">.a </span><span class=\"cp\">{{</span> <span class=\"nv\">rand</span> <span class=\"cp\">}}</span><span class=\"x\">)</span><span class=\"cp\">{%</span> <span class=\"k\">else</span> <span class=\"cp\">%}{{</span> <span class=\"nv\">op1</span> <span class=\"cp\">}}</span><span class=\"x\"> (</span><span class=\"cp\">{{</span> <span class=\"nv\">left</span> <span class=\"cp\">}}</span><span class=\"x\">.a </span><span class=\"cp\">{{</span> <span class=\"nv\">rand</span> <span class=\"cp\">}}</span><span class=\"x\">) (</span><span class=\"cp\">{{</span> <span class=\"nv\">right</span> <span class=\"cp\">}}</span><span class=\"x\">.a n)</span><span class=\"cp\">{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span><span class=\"x\"></span>\n\n<span class=\"x\">b = \\n -&gt;</span>\n<span class=\"x\">    </span><span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">flip2</span> <span class=\"cp\">%}{{</span> <span class=\"nv\">op2</span> <span class=\"cp\">}}</span><span class=\"x\"> (</span><span class=\"cp\">{{</span> <span class=\"nv\">left</span> <span class=\"cp\">}}</span><span class=\"x\">.b n) (</span><span class=\"cp\">{{</span> <span class=\"nv\">right</span> <span class=\"cp\">}}</span><span class=\"x\">.b </span><span class=\"cp\">{{</span> <span class=\"nv\">rand</span> <span class=\"cp\">}}</span><span class=\"x\">)</span><span class=\"cp\">{%</span> <span class=\"k\">else</span> <span class=\"cp\">%}{{</span> <span class=\"nv\">op2</span> <span class=\"cp\">}}</span><span class=\"x\"> (</span><span class=\"cp\">{{</span> <span class=\"nv\">left</span> <span class=\"cp\">}}</span><span class=\"x\">.b </span><span class=\"cp\">{{</span> <span class=\"nv\">rand</span> <span class=\"cp\">}}</span><span class=\"x\">) (</span><span class=\"cp\">{{</span> <span class=\"nv\">right</span> <span class=\"cp\">}}</span><span class=\"x\">.b n)</span><span class=\"cp\">{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span><span class=\"x\"></span>\n</code></pre></div>",
        "id": 294880413,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1661265843
    },
    {
        "content": "<p>Of course you could do something way more interesting. This just used a few possible functions from <code>Num</code> and some randomness to build out the tree.</p>",
        "id": 294880534,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1661265883
    },
    {
        "content": "<p>Making interesting to compiler functions is of course a much larger challenge than focus on something specific like number of files and module depth.</p>",
        "id": 294880861,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1661265978
    },
    {
        "content": "<p>right, the idea here would be to keep the scope minimal so it can be a quick project <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 294881642,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1661266048
    },
    {
        "content": "<p>If this is done, we'd want to be careful about the shape of the program that's generated. For example, I don't think we'd want to have any deeply nested closures - that is a known bottleneck that will dominate any perf trace, and how those constructs are treated in the compiler are likely to change soon.</p>",
        "id": 294884398,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1661266602
    },
    {
        "content": "<p>Depending on how complex of generation is wanted, I may be able to modify what I have to support this use case. I think what I had here was specifically trying to also support the dev backend, which is why it was so restricted.</p>",
        "id": 294887234,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1661267134
    }
]