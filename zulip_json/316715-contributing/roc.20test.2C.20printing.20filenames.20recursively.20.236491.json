[
    {
        "content": "<p>Hi everyone!</p>\n<p>Im an absolute newcomer to Roc but fell in love immediately.<br>\nAs a first contribution I just started trying to work on issue <a href=\"https://github.com/roc-lang/roc/issues/6491\">#6491</a>:</p>\n<p>it being my very first time touching the repo I eventually found my way around to<br>\n<code>run_expects_with_memory</code>, <code>ToplevelExpect</code>, <code>ExpectFunctions</code>, etc --<br>\nseems like this is the relevant \"part of town\" and I was already able to simulate a<br>\nvery bare-bones version of the desired outcome using some <code>eprintln!</code> :)</p>\n<p>But at this point I feel like I need some clarification on a few concepts as well as<br>\nwhat we're exactly going for with this feature.</p>",
        "id": 425567412,
        "sender_full_name": "Miilyn",
        "timestamp": 1709921098
    },
    {
        "content": "<p>1.) Looking at <a href=\"https://github.com/roc-lang/roc/blob/main/crates/repl_expect/src/run.rs#L183\">run_expects_with_memory</a>:</p>\n<div class=\"codehilite\"><pre><span></span><code>for expect in expects.fx {\n    let result = run_expect_fx(\n        // ...\n}\n\nmemory.set_shared_buffer(lib);\n\nfor expect in expects.pure {\n    let result = run_expect_pure(\n        // ...\n</code></pre></div>\n<p>1.1) What exactly does <code>set_shared_buffer</code> do (introduced <a href=\"https://github.com/roc-lang/roc/commit/f8fba56b0ae48f8db1fd07904daed273f4ef960a\">here</a>) ?</p>\n<p>1.2) As a consequence, am I understanding correctly that it's imperative to run fx-tests and pure-tests <em>separately</em>, i.e.</p>\n<ul>\n<li>first run <em>all</em> fx-<code>TopLevelExpect</code>s (originating from <code>expect-fx</code>)</li>\n<li>then set <code>memory.set_shared_buffer(lib)</code></li>\n<li>and finally run all pure-<code>TopLevelExpect</code>s (originating from regular <code>expect</code>)<br>\n?</li>\n</ul>",
        "id": 425571760,
        "sender_full_name": "Miilyn",
        "timestamp": 1709923079
    },
    {
        "content": "<p>2.) This is how <span class=\"user-mention\" data-user-id=\"361169\">@Anton</span>  sketched out the desired behaviour (<a href=\"https://github.com/roc-lang/roc/issues/6491\">#6491</a>):</p>\n<div class=\"codehilite\"><pre><span></span><code>Instead of the current:\n\n  0 failed and 2 passed in 129 ms.\n\nThis should be something like:\n\n  main.roc:\n    0 failed and 1 passed in 52 ms.\n  someImportOfMain.roc:\n    0 failed and 1 passed in 46 ms.\n</code></pre></div>\n<p>Based on assumption of having to run <code>expect-fx</code>s and <code>expect</code>s separately (see 1.2):</p>\n<p>2.1) In the case of all tests passing, achieving this output seems straightforward.<br>\nIt requires collecting the number of failed/passed tests (as well as their duration)<br>\nper module -- and then printing the \"summary\" in <a href=\"https://github.com/roc-lang/roc/blob/main/crates/cli/src/lib.rs#L439\"><code>test</code></a>.<br>\nI've already managed to implement a basic version of this.</p>\n<p>2.2) But ideally, the output for failing tests should be \"grouped\" by their modules as well.<br>\nCurrently <a href=\"https://github.com/roc-lang/roc/blob/main/crates/repl_expect/src/run.rs#L241\"><code>run_expect_pure</code> / <code>run_expect_fx</code></a><br>\nmake use of <a href=\"https://github.com/roc-lang/roc/blob/main/crates/repl_expect/src/run.rs#L460\"><code>render_expect_failure</code></a> directly, i.e. render test failures <em>immediately</em> as they occur.</p>\n<p>According to my understanding we would need make the following change:<br>\nDon't let <a href=\"https://github.com/roc-lang/roc/blob/main/crates/repl_expect/src/run.rs#L241\"><code>run_expect_pure</code> / <code>run_expect_fx</code></a> flush their failure-output directly --<br>\nbut instead just \"collect\" their errors (if any) and postpone rendering these until <a href=\"https://github.com/roc-lang/roc/blob/main/crates/cli/src/lib.rs#L439\"><code>test</code></a> (similar to and alongside 2.1).</p>",
        "id": 425577609,
        "sender_full_name": "Miilyn",
        "timestamp": 1709925443
    },
    {
        "content": "<p>Hi! I started working on this issue (I really should have commented on the github issue), and some details have been discussed in this topic: <a href=\"#narrow/stream/316715-contributing/topic/Test.20discovery\">https://roc.zulipchat.com/#narrow/stream/316715-contributing/topic/Test.20discovery</a></p>\n<p>I share your questions about <code>set_shared_buffer</code>. My approach was to run the expects for each module separately, so <code>set_shared_buffer</code> would be called once in between each set of <code>expects</code> and <code>expects-fx</code>. I'm planning on putting a PR up today, maybe we can collaborate on it (I'm a bit fresh to Rust so I can certainly use a code review).</p>",
        "id": 425583143,
        "sender_full_name": "Jonathan Schear",
        "timestamp": 1709927709
    },
    {
        "content": "<p>As discussed via DM, thanks for your <a href=\"https://github.com/roc-lang/roc/pull/6567\">PR</a> ! <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> </p>\n<p>hence PSA: please ignore my questions above, Im now gonna search for another issue to work on <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 425610216,
        "sender_full_name": "Miilyn",
        "timestamp": 1709933381
    }
]