[
    {
        "content": "<p>hey, Just setting up my development environment to play around in, and I hit a small snag.</p>\n<p>When I run <code>cargo test</code> within nix from the project root directory, it comes back saying that ~70-90 of the tests have failed (it seems to be a different number every time). This is with a clean working tree on commit 116463893.</p>\n<p>Is this expected behavior? If not, any ideas on how to fix that?</p>",
        "id": 315266930,
        "sender_full_name": "Nathan Freestone",
        "timestamp": 1670801551
    },
    {
        "content": "<p>which tests fail?</p>",
        "id": 315267194,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1670801766
    },
    {
        "content": "<p>they all start with <code>gen_</code> I can give you a complete list for my last test if you want</p>",
        "id": 315267238,
        "sender_full_name": "Nathan Freestone",
        "timestamp": 1670801867
    },
    {
        "content": "<p>just a sample is fine. is any particular error printed?</p>",
        "id": 315267405,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1670802017
    },
    {
        "content": "<p>and also, what are your system details</p>",
        "id": 315267417,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1670802044
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>failures:\n    gen_abilities::encode_derived_list_of_lists_of_strings\n    gen_abilities::encode_derived_nested_record_tag_record\n    gen_abilities::encode_immediate::u16\n    gen_abilities::hash::immediate::u16\n    gen_compare::eq_i64\n    gen_compare::list_eq_empty\n    gen_compare::unit\n    gen_list::bool_list_literal\n    gen_list::list_drop_if_geq3\n    gen_list::list_drop_if_string_eq\n    gen_list::list_drop_last_mutable\n    gen_list::list_find\n    gen_list::list_find_index_not_found\n...\n</code></pre></div>\n<p>the error that cargo comes back with is simply </p>\n<div class=\"codehilite\"><pre><span></span><code>error: test failed, to rerun pass &#39;-p test_gen --test test_gen&#39;\n</code></pre></div>\n<p>I'm on an M1 Macbook, macOS Monterey version 12.3.1</p>",
        "id": 315267591,
        "sender_full_name": "Nathan Freestone",
        "timestamp": 1670802223
    },
    {
        "content": "<p>hmm there is nothing else above the <code>failures: </code> line?</p>",
        "id": 315267653,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1670802265
    },
    {
        "content": "<p>oh sorry, lots, something like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>---- gen_tags::pattern_matching_unit stdout ----\nthread &#39;gen_tags::pattern_matching_unit&#39; panicked at &#39;called `Result::unwrap()` on an `Err` value: DlClose { desc: &quot;dlclose(0x20fc175a0): cannot dlclose until fork() handlers have completed&quot; }&#39;, crates/compiler/test_gen/src/gen_tags.rs:712:5\n</code></pre></div>\n<p>79 times</p>\n<p>from a quick scan they all seem to be panics on <code>unwrap</code> calls.</p>",
        "id": 315267766,
        "sender_full_name": "Nathan Freestone",
        "timestamp": 1670802385
    },
    {
        "content": "<p>hmm. well that is the interesting bit</p>",
        "id": 315267870,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1670802486
    },
    {
        "content": "<p>but I don't know what it means</p>",
        "id": 315267878,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1670802490
    },
    {
        "content": "<p>some sort of race condition maybe?</p>",
        "id": 315267884,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1670802495
    },
    {
        "content": "<p>ok, well, that must be it, running <code>cargo test -p test_gen --test test_gen -- --test-threads=1</code> returns no failures.</p>",
        "id": 315269126,
        "sender_full_name": "Nathan Freestone",
        "timestamp": 1670803570
    },
    {
        "content": "<p>but it also took 10 minutes. any ideas on how to fix?</p>",
        "id": 315269153,
        "sender_full_name": "Nathan Freestone",
        "timestamp": 1670803603
    },
    {
        "content": "<p>yeah, I always run those tests with <code>--test-threads=1</code> due to that race condition, generally with release</p>",
        "id": 315269319,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670803758
    },
    {
        "content": "<p>do you have any idea what causes the race condition? hardware? OS? just the way the tests are designed?</p>",
        "id": 315269577,
        "sender_full_name": "Nathan Freestone",
        "timestamp": 1670804012
    },
    {
        "content": "<p>Not really. I assume it is running a kernel call in parallel over many tests.</p>",
        "id": 315269819,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670804240
    },
    {
        "content": "<p>since dlclose is directly a kernel call</p>",
        "id": 315269825,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670804249
    },
    {
        "content": "<p>maybe we could modify the test to use a lock when opening and closing dylibs</p>",
        "id": 315269894,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670804296
    },
    {
        "content": "<p>interesting, also maybe we should add some text explaining this to <code>CONTRIBUTING.md</code>explaining the issue in the mean time. (in the running tests section)</p>",
        "id": 315270070,
        "sender_full_name": "Nathan Freestone",
        "timestamp": 1670804514
    },
    {
        "content": "<p>ether way, thank you very much for the help :)</p>",
        "id": 315270190,
        "sender_full_name": "Nathan Freestone",
        "timestamp": 1670804626
    },
    {
        "content": "<p>Update: it seems to work for up to 4 threads. don't know if that's significant, but it seemed to yield a small performance boost</p>",
        "id": 315272541,
        "sender_full_name": "Nathan Freestone",
        "timestamp": 1670806626
    },
    {
        "content": "<p>So I tried locks and it actually made things worse. Don't know why, maybe I just did something wrong. That said, it did work to just ignore the error instead of crashing. I guess the one concern of ignoring the error is that it could maybe lead to enough file handles building up that some random tests fail?</p>\n<p>Thoughts on just changing from <code>library.close().unwrap()</code> to <code>let _ = library.close();</code>. That or just removing the line completely. The library should close when dropped(just ignoring errors). So maybe explicitly closing isn't need at all.</p>",
        "id": 315281505,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670814671
    },
    {
        "content": "<p>yeah seems unnecessary in tests, unless I'm missing something!</p>",
        "id": 315284163,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1670817154
    },
    {
        "content": "<p>I thought we had a case in CI where we ran out of file handles. Thought this was maybe added because of that...but I could be wrong.</p>",
        "id": 315284228,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670817241
    },
    {
        "content": "<p>we did do that because multiple tests might try to rebuild eg the cli platform at the same time</p>",
        "id": 315285135,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1670817964
    },
    {
        "content": "<p>I put something in place to manage that but i’m not confident it always works</p>",
        "id": 315285153,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1670817985
    },
    {
        "content": "<p>That is just locking which platform can build, right? This shouldn't relate to opening and closing dynamic libraries in <code>test_gen</code>. This failure is specifically from closing dls and making sure that doesn't error.</p>",
        "id": 315285401,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670818192
    },
    {
        "content": "<p>is the problem only due to trying to close the dylib? i’m not sure i totally follow what the symptom is aside tests hanging<br>\non macos we spin trying to open the dylib if it doesn’t load the first time</p>",
        "id": 315287027,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1670819511
    },
    {
        "content": "<p>Yeah. Only on closing the dylib. Always this error: <code> DlClose { desc: \"dlclose(0x20fc175a0): cannot dlclose until fork() handlers have completed\" }</code></p>",
        "id": 315287237,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670819693
    },
    {
        "content": "<p>if we ignore the error on close all the tests pass for me consistently</p>",
        "id": 315287267,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670819730
    },
    {
        "content": "<p>tried to dig into the why, but really not sure</p>",
        "id": 315287344,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670819799
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"572078\">@Nathan Freestone</span> does <code>cargo test --release</code> work without errors? That is how we test it on CI.</p>",
        "id": 315317200,
        "sender_full_name": "Anton",
        "timestamp": 1670835654
    },
    {
        "content": "<p>For these tests, it doesn't for me. I still have to limit threads in release builds for it to pass consistently with current main on test_gen</p>",
        "id": 315400161,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670860570
    },
    {
        "content": "<p>I think this test_gen failure is the same as <a href=\"#narrow/stream/231635-compiler-development/topic/macos_x86_64.20test_gen.20failure/near/312339022\">here</a> on the github ci macos x86_64 server. I could not reproduce it, so I never ended up bisecting it. If someone wants to give that a try; the failure first showed up 16 days ago. We can probably learn something from the commit that introduced the failure.</p>",
        "id": 315405256,
        "sender_full_name": "Anton",
        "timestamp": 1670861896
    },
    {
        "content": "<p>I think it is likely different:</p>\n<ol>\n<li>I hit it on M1 macos</li>\n<li>It is a dlclose here that gets unwrapped, there is no default unlike the issue on the CI server</li>\n<li>I have been hitting it for months whenever I have to run <code>test_gen</code> locally (pretty rare, so i just  used 1 test thread when it happened)</li>\n</ol>",
        "id": 315406371,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670862229
    },
    {
        "content": "<p>Oh alright, good to know</p>",
        "id": 315406539,
        "sender_full_name": "Anton",
        "timestamp": 1670862266
    },
    {
        "content": "<p>Also, it happens often enough that i will hit it consistently over the 1200ish tests in test_gwn.</p>",
        "id": 315406544,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670862267
    },
    {
        "content": "<p>Based on the comments here: <a href=\"https://github.com/nagisa/rust_libloading/blob/6e284984aee68cc2d1b7e7d5e7b5a2a2279cf8e3/src/os/unix/mod.rs#L316\">https://github.com/nagisa/rust_libloading/blob/6e284984aee68cc2d1b7e7d5e7b5a2a2279cf8e3/src/os/unix/mod.rs#L316</a></p>\n<p>Especially those inside the function, i think we should just remove the lib.close line and see if it passes CI. With the current API, we can't even retry closing the lib. So i think we should just ignore the errors and make sure that doesn't break anything. The dl will still be requested to close, it just won't crash the test if that fails.</p>",
        "id": 315407581,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670862536
    },
    {
        "content": "<p>I'll push a CL in a minute</p>",
        "id": 315408681,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670862844
    },
    {
        "content": "<p>Then we can see if it passes CI</p>",
        "id": 315408713,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670862856
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/pull/4741\">#4741</a></p>",
        "id": 315411718,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670863760
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/stream/316715-contributing/topic/Setting.20up.20development.20enviroment/near/315317200\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"572078\">Nathan Freestone</span> does <code>cargo test --release</code> work without errors? That is how we test it on CI.</p>\n</blockquote>\n<p>I have the same experience as Brendan, also on Apple sillicon</p>",
        "id": 315432424,
        "sender_full_name": "Nathan Freestone",
        "timestamp": 1670869719
    },
    {
        "content": "<p>Ok. merged the fix.</p>",
        "id": 315441106,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670872500
    },
    {
        "content": "<p>If you pull main, it should work with full threading</p>",
        "id": 315441159,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670872517
    },
    {
        "content": "<p>I  will test</p>",
        "id": 315441366,
        "sender_full_name": "Nathan Freestone",
        "timestamp": 1670872584
    },
    {
        "content": "<p><code>cargo test --release</code> now works without errors! Thanks for looking into it!</p>",
        "id": 315446595,
        "sender_full_name": "Nathan Freestone",
        "timestamp": 1670874412
    }
]