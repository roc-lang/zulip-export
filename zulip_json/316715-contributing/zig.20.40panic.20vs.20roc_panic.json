[
    {
        "content": "<p>Im working on a fix for <a href=\"https://github.com/roc-lang/roc/issues/6027\">https://github.com/roc-lang/roc/issues/6027</a> and I think i traced the issue down to this line <a href=\"https://github.com/roc-lang/roc/blob/ad5ed57c4202f847cf9e215cda970c6ece22f9ff/crates/compiler/builtins/bitcode/src/dec.zig#L372\">https://github.com/roc-lang/roc/blob/ad5ed57c4202f847cf9e215cda970c6ece22f9ff/crates/compiler/builtins/bitcode/src/dec.zig#L372</a> </p>\n<p>if i switch it to <code>roc_panic</code> the llvm and wasm backends seem to be erroring as expected, without my change they return non-sense numbers for div by 0</p>\n<p>Based on  this <a href=\"#narrow/stream/316715-contributing/topic/good.20first.20zig.20projects/near/390992783\">message</a> it seems like all <code>@panic</code> in zig should be <code>roc_panic</code> calls. </p>\n<p>Is that still the case? If So i can update them all on my pr</p>\n<p>side question: does that fix make sense for the og issue?</p>",
        "id": 403289013,
        "sender_full_name": "John Murray",
        "timestamp": 1700535322
    },
    {
        "content": "<p>Yeah, that sounds accurate.</p>",
        "id": 403289184,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700535401
    },
    {
        "content": "<p>as for replacing them all, maybe... My thought is that generally zig <code>@panic</code> should be used if we have a todo while <code>roc_panic</code> should be used if it is something intentional to expose.</p>",
        "id": 403289302,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700535467
    },
    {
        "content": "<p>But that may not be correct thinking. Making them all <code>roc_panic</code>is probably fine.</p>",
        "id": 403289373,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700535485
    },
    {
        "content": "<p>oh, richard already said they should all be <code>roc_panic</code>. Ok, cool, yeah, change them all!</p>",
        "id": 403289466,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700535544
    },
    {
        "content": "<p>dope will do!</p>",
        "id": 403289722,
        "sender_full_name": "John Murray",
        "timestamp": 1700535644
    },
    {
        "content": "<p>while doing some testing i came across this potentially confusing output from the repl</p>\n<p><a href=\"/user_uploads/22008/IVGh2Zue3ilTDlPb6UIbODMU/2023-11-21-22-50-08.png\">2023-11-21-22-50-08.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/IVGh2Zue3ilTDlPb6UIbODMU/2023-11-21-22-50-08.png\" title=\"2023-11-21-22-50-08.png\"><img src=\"/user_uploads/22008/IVGh2Zue3ilTDlPb6UIbODMU/2023-11-21-22-50-08.png\"></a></div><p>so looks like in the repl when theres a panic or a call to crash we still display some \"normal\" output</p>\n<p>is this expected?</p>\n<p>Something similar happens with calling <code>crash</code> from roc <br>\n<a href=\"/user_uploads/22008/clgorXgkR1RczCJHo8g3SCE-/2023-11-21-22-51-28.png\">2023-11-21-22-51-28.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/clgorXgkR1RczCJHo8g3SCE-/2023-11-21-22-51-28.png\" title=\"2023-11-21-22-51-28.png\"><img src=\"/user_uploads/22008/clgorXgkR1RczCJHo8g3SCE-/2023-11-21-22-51-28.png\"></a></div>",
        "id": 403512756,
        "sender_full_name": "John Murray",
        "timestamp": 1700625123
    },
    {
        "content": "<p>Interesting.</p>",
        "id": 403516992,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700627545
    },
    {
        "content": "<p>Definitely a bug</p>",
        "id": 403516996,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700627548
    },
    {
        "content": "<p>Forgot to respond, will filed an issue for that <a href=\"https://github.com/roc-lang/roc/issues/6066\">https://github.com/roc-lang/roc/issues/6066</a></p>",
        "id": 403675083,
        "sender_full_name": "John Murray",
        "timestamp": 1700692549
    },
    {
        "content": "<p>Does anyone have any insights to the failing tests on this pr? <a href=\"https://github.com/roc-lang/roc/pull/6062\">https://github.com/roc-lang/roc/pull/6062</a></p>\n<p>On the apple silcon test i see</p>\n<div class=\"codehilite\"><pre><span></span><code>---- cli_run::inspect_gui stdout ----\nthread &#39;cli_run::inspect_gui&#39; panicked at &#39;\n___________\nThe roc command:\n\n  &quot;/Users/m1ci/actions-runner2/_work/roc/roc/target/release/roc build --optimize /Users/m1ci/actions-runner2/_work/roc/roc/examples/inspect-gui.roc --&quot;\n\nhad unexpected stderr:\n\n  ðŸ”¨ Rebuilding platform...\nld: malformed nlist string offset file &#39;/Users/m1ci/actions-runner2/_work/roc/roc/examples/gui/platform/macos-arm64.o&#39;\n/Users/m1ci/actions-runner2/_work/roc/roc/examples/inspect-gui: No such file or directory\nthread &#39;main&#39; panicked at &#39;not yet implemented: gracefully handle `ld` (or `zig` in the case of wasm with --optimize) returning exit code Some(1)&#39;, crates/compiler/build/src/program.rs:1089:17\nstack backtrace:\n   0: rust_begin_unwind\n             at /rustc/eb26296b556cef10fb713a38f3d16b9886080f26/library/std/src/panicking.rs:593:5\n   1: core::panicking::panic_fmt\n             at /rustc/eb26296b556cef10fb713a38f3d16b9886080f26/library/core/src/panicking.rs:67:14\n   2: roc_build::program::build_loaded_file\n   3: roc_build::program::build_file\n   4: roc_cli::build\n   5: roc::main\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\n</code></pre></div>\n<p>the other is </p>\n<div class=\"codehilite\"><pre><span></span><code>---- list_concat_empty_list_zero_sized_type stdout ----\nthread &#39;list_concat_empty_list_zero_sized_type&#39; panicked at &#39;`valgrind` exited with exit code 1. valgrind stdout was: &quot;&quot;\n\nvalgrind stderr was: &quot;--1766045-- VALGRIND INTERNAL ERROR: Valgrind received a signal 11 (SIGSEGV) - exiting\n--1766045-- si_code=1;  Faulting address: 0x251000;  sp: 0x1002f7d4c0\n\nvalgrind: the &#39;impossible&#39; happened:\n   Killed by fatal signal\n\nhost stacktrace:\n==1766045==    at 0x581B3211: getUChar (guest_amd64_toIR.c:524)\n==1766045==    by 0x581B3211: dis_ESC_NONE.isra.0 (guest_amd64_toIR.c:19967)\n==1766045==    by 0x581E3A09: disInstr_AMD64_WRK (guest_amd64_toIR.c:32515)\n==1766045==    by 0x581E41E3: disInstr_AMD64 (guest_amd64_toIR.c:32683)\n==1766045==    by 0x58166439: disassemble_basic_block_till_stop (guest_generic_bb_to_IR.c:956)\n==1766045==    by 0x5816748C: bb_to_IR (guest_generic_bb_to_IR.c:1365)\n==1766045==    by 0x58148834: LibVEX_FrontEnd (main_main.c:583)\n==1766045==    by 0x581491A6: LibVEX_Translate (main_main.c:1235)\n==1766045==    by 0x5806384F: vgPlain_translate (m_translate.c:1831)\n==1766045==    by 0x580AEBBF: handle_tt_miss (scheduler.c:1136)\n==1766045==    by 0x580AEBBF: vgPlain_scheduler (scheduler.c:1526)\n==1766045==    by 0x580F9959: thread_wrapper (syswrap-linux.c:102)\n==1766045==    by 0x580F9959: run_a_thread_NORETURN (syswrap-linux.c:155)\n\nsched status:\n  running_tid=1\n\nThread 1: status = VgTs_Runnable (lwpid 1766045)\nclient stack range: [0x1FFEFFD000 0x1FFF000FFF] client SP: 0x1FFEFFF090\nvalgrind stack range: [0x1002E7E000 0x1002F7DFFF] top usage: 18664 of 1048576\n</code></pre></div>\n<p>Both I cant seem to fail on either of my machines (both nixos x64)</p>\n<p>Do i need to change the calls to <code>roc_panic</code> to have the second param be non zero? Not sure what that does tbh</p>",
        "id": 404508669,
        "sender_full_name": "John Murray",
        "timestamp": 1701129392
    },
    {
        "content": "<p>Did a bit of a wild guess and figured it might be related to me doing a renmae for some existing panics, undid that to only affect \"new\" code</p>",
        "id": 404522879,
        "sender_full_name": "John Murray",
        "timestamp": 1701136185
    },
    {
        "content": "<p>It shouldnt be related to the second param</p>",
        "id": 404543389,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701145263
    },
    {
        "content": "<p>That is just a selector essentially</p>",
        "id": 404543397,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701145273
    },
    {
        "content": "<p>0 is std lib crash</p>",
        "id": 404543408,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701145280
    },
    {
        "content": "<p>1 is userland crash</p>",
        "id": 404543420,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701145285
    },
    {
        "content": "<p>At least IIRC</p>",
        "id": 404543441,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701145296
    },
    {
        "content": "<p>did a bit of digging, i added some <code>unreachable</code> calls after <code>roc_panic</code> since zig didnt know that it will end there.</p>\n<p>Looks like <code>unreachable</code> is undefiened behavior when compiled with <code>RelaseFast</code> <a href=\"https://ziglang.org/documentation/master/#try\">https://ziglang.org/documentation/master/#try</a> which i think we do</p>\n<p>I then just noticed our custom panic handler uses <code>unreachable</code> and does not actually do anything in non test</p>\n<div class=\"codehilite\"><pre><span></span><code>// Custom panic function, as builtin Zig version errors during LLVM verification\npub fn panic(message: []const u8, stacktrace: ?*std.builtin.StackTrace, _: ?usize) noreturn {\n    if (builtin.is_test) {\n        std.debug.print(&quot;{s}: {?}&quot;, .{ message, stacktrace });\n    }\n\n    unreachable;\n}\n</code></pre></div>\n<p>That comment is 2 years old, ill see if can get that to call out to <code>roc_panic</code> and maybe of this will <em>just work</em></p>",
        "id": 404543634,
        "sender_full_name": "John Murray",
        "timestamp": 1701145420
    },
    {
        "content": "<p>So that version should only ever be called in some tests. Most of the time <code>roc_panic</code> will be a call to a real platform</p>",
        "id": 404543794,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701145512
    },
    {
        "content": "<p><code>inspect_gui</code> shouldn't be using it. The other test will be though I'm pretty sure.</p>",
        "id": 404543909,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701145573
    },
    {
        "content": "<p>Hmm</p>\n<p>.though why is our panic definition just unreachable....I think it should instead exit or call zigs panic during tests or something. Just calling unreachable seems weird, but maybe that is reasonable for tests</p>",
        "id": 404544023,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701145649
    },
    {
        "content": "<p>O it seems me reverting some of renames that were unrelated to this branch fixed the <code>inspect_gui</code> issue, now its just the valgrind error for <code>list_concat_empty_list_zero_sized_type</code></p>",
        "id": 404544416,
        "sender_full_name": "John Murray",
        "timestamp": 1701145865
    },
    {
        "content": "<p>That was an m1 specific error?</p>",
        "id": 404545324,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701146502
    },
    {
        "content": "<p>Somehow...</p>\n<p>I realized that the llvm backend equilvants had the panic strings in the lowercased form as well so some of the tests were actually wrong but tbh not sure how running <code>cargo test</code> locally didnt catch it, could be some weirdness with default features.</p>\n<p>so maybe cargo test just got in a really weird state but that doesnt make a lot of sense either...</p>",
        "id": 404545980,
        "sender_full_name": "John Murray",
        "timestamp": 1701146753
    },
    {
        "content": "<p>hmm, looks to be an x86_64 linux test. Valgrind doesn't run on m1 macs</p>",
        "id": 404546239,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701146894
    },
    {
        "content": "<p>o sorry the <code>inspect_gui</code> error was the error only on m1</p>",
        "id": 404546260,
        "sender_full_name": "John Murray",
        "timestamp": 1701146916
    },
    {
        "content": "<p>ah, ok and that is fixed now...got it. That definitely seems like it probably was a flake to me.</p>",
        "id": 404546286,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701146943
    },
    {
        "content": "<p>Can't repro the valgrind failure locally....sad</p>",
        "id": 404546502,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701147073
    },
    {
        "content": "<p>atleast im not crazy lol</p>\n<p>My gut is the unreachable undefined behavior, ill see if theres another way to tell zig that <code>roc_panic</code>'s return is actuall <code>noreturn</code></p>\n<p>actually now that i think of it, i wonder if just updating </p>\n<div class=\"codehilite\"><pre><span></span><code>extern fn roc_panic(msg: *const RocStr, tag_id: u32) callconv(.C) void;\n</code></pre></div>\n<p>to</p>\n<div class=\"codehilite\"><pre><span></span><code>extern fn roc_panic(msg: *const RocStr, tag_id: u32) callconv(.C) noreturn;\n</code></pre></div>\n<p>works?</p>",
        "id": 404546717,
        "sender_full_name": "John Murray",
        "timestamp": 1701147234
    },
    {
        "content": "<p>o zig seems to compile at least with that.. Ill push a commit with all my <code>unreachable</code>s removed and that change</p>",
        "id": 404547016,
        "sender_full_name": "John Murray",
        "timestamp": 1701147444
    },
    {
        "content": "<p>That makes a lot of sense. Hopefully a fix</p>",
        "id": 404547106,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701147495
    },
    {
        "content": "<p>pushed up a commit, can you kick off the ci when you get a sec?</p>",
        "id": 404547957,
        "sender_full_name": "John Murray",
        "timestamp": 1701147948
    },
    {
        "content": "<p>It made it past that test <span aria-label=\"party ball\" class=\"emoji emoji-1f38a\" role=\"img\" title=\"party ball\">:party_ball:</span></p>",
        "id": 404549172,
        "sender_full_name": "John Murray",
        "timestamp": 1701148956
    },
    {
        "content": "<p>Awesome <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 404549216,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701149016
    },
    {
        "content": "<p>I remember we hit some <code>valgrind: the 'impossible' happened</code> before and I gave up on it, awesome work <span class=\"user-mention\" data-user-id=\"666594\">@John Murray</span>!</p>",
        "id": 404585740,
        "sender_full_name": "Anton",
        "timestamp": 1701165338
    }
]