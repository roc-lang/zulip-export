[
    {
        "content": "<p>we've tagged a number of issues as <code>Good First Issue</code>: <a href=\"https://github.com/rtfeldman/roc/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22\">https://github.com/rtfeldman/roc/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22</a></p>",
        "id": 273355015,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645899629
    },
    {
        "content": "<p>if anyone's interested in trying to take on one of those, that would be really awesome! If you start a new thread in <a class=\"stream\" data-stream-id=\"316715\" href=\"/#narrow/stream/316715-contributing\">#contributing</a> about the issue you're interested in taking on, an experienced contributor can help you out with it. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 273355089,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645899746
    },
    {
        "content": "<p>if anyone's looking for a good first issue, here's a nice one! <a href=\"https://github.com/rtfeldman/roc/issues/2826\">https://github.com/rtfeldman/roc/issues/2826</a></p>",
        "id": 278440696,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1649553075
    },
    {
        "content": "<p>if you're interested in working on it, just start a new topic about it here and link to the issue - plenty of folks can help you out, even if you have no previous experience with Rust, with compilers in general, or with Roc's code base!</p>",
        "id": 278440778,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1649553191
    },
    {
        "content": "<p>as an aside, I'm signal boosting this one because I want to get it in for a talk I'm giving in a week and a half, so now's the perfect time! <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 278442229,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1649555674
    },
    {
        "content": "<p>If nobody wants to claim it in the next 16 hours or so, I'd be interested. I will need guidance, particularly around calling <code>roc_panic</code> (since it seems it's not currently actually used?), but I believe I have a reasonable idea about where other bits live, and because I'm also new to Rust/Zig(/Roc).</p>",
        "id": 278448218,
        "sender_full_name": "Kevin Gillette",
        "timestamp": 1649566273
    },
    {
        "content": "<p>Would you be down to split it in half with me? I could do the division-related ones while you do the rest. What do you think?</p>",
        "id": 278466795,
        "sender_full_name": "Nikita Mounier",
        "timestamp": 1649595352
    },
    {
        "content": "<p>I'm definitely happy to do any kind of split you want :)</p>",
        "id": 278468322,
        "sender_full_name": "Kevin Gillette",
        "timestamp": 1649597527
    },
    {
        "content": "<p>Let's do it! I'll create the topic</p>",
        "id": 278474853,
        "sender_full_name": "Nikita Mounier",
        "timestamp": 1649605778
    },
    {
        "content": "<p>just added a couple of new Good First Issues!</p>\n<p><a href=\"https://github.com/rtfeldman/roc/issues/2847\">https://github.com/rtfeldman/roc/issues/2847</a><br>\n<a href=\"https://github.com/rtfeldman/roc/issues/2848\">https://github.com/rtfeldman/roc/issues/2848</a><br>\n<a href=\"https://github.com/rtfeldman/roc/issues/2846\">https://github.com/rtfeldman/roc/issues/2846</a> (probably the easiest - see the first comment!)</p>\n<p>if anyone's interested in them and would like some guidance or other help on them, feel free to start a new topic about them in <a class=\"stream\" data-stream-id=\"316715\" href=\"/#narrow/stream/316715-contributing\">#contributing</a>!</p>",
        "id": 278898105,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1649887954
    },
    {
        "content": "<p>Adding </p>\n<p><a href=\"https://github.com/rtfeldman/roc/issues/2844\">https://github.com/rtfeldman/roc/issues/2844</a><br>\n<a href=\"https://github.com/rtfeldman/roc/issues/2845\">https://github.com/rtfeldman/roc/issues/2845</a></p>\n<p>to the above list ^</p>",
        "id": 278901258,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1649890087
    },
    {
        "content": "<p>I'm supposed to do my vacation homework, why you guys tempting me with these</p>",
        "id": 278904036,
        "sender_full_name": "Nikita Mounier",
        "timestamp": 1649892155
    },
    {
        "content": "<p>fine if I take a stab at <a href=\"https://github.com/rtfeldman/roc/issues/2646\">https://github.com/rtfeldman/roc/issues/2646</a> ?</p>",
        "id": 278904683,
        "sender_full_name": "Jared Cone",
        "timestamp": 1649892721
    },
    {
        "content": "<p>for sure, thatâ€™s an important one to fix!</p>",
        "id": 278906023,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1649893889
    },
    {
        "content": "<p>Here is a good \"intermediate issue\" related to type checking, if you want to dive into something related to that! <a href=\"https://github.com/rtfeldman/roc/issues/2686\">https://github.com/rtfeldman/roc/issues/2686</a> I'm marking it \"intermediate\" because there are a few pieces to it. Happy to dive in and talk through it if you want to pick it up.</p>",
        "id": 278999081,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1649958748
    },
    {
        "content": "<p>Hey I'm trying to build from source to pick one of these issues. I got a nix-shell, however I got an error related to glibc <a href=\"/user_uploads/22008/fmjplYL8HDlVUzlamIjvOTls/Screenshot-from-2022-04-14-16-54-29.png\">Screenshot-from-2022-04-14-16-54-29.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/fmjplYL8HDlVUzlamIjvOTls/Screenshot-from-2022-04-14-16-54-29.png\" title=\"Screenshot-from-2022-04-14-16-54-29.png\"><img src=\"/user_uploads/22008/fmjplYL8HDlVUzlamIjvOTls/Screenshot-from-2022-04-14-16-54-29.png\"></a></div>",
        "id": 279014441,
        "sender_full_name": "RÃ­gille Scherrer Borges Menezes",
        "timestamp": 1649966564
    },
    {
        "content": "<p>What's your PATH look like?</p>",
        "id": 279014488,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1649966596
    },
    {
        "content": "<p>indeed my system's glibc is 2.31, but I thought this wouldn't matter inside the nix shell</p>",
        "id": 279014538,
        "sender_full_name": "RÃ­gille Scherrer Borges Menezes",
        "timestamp": 1649966638
    },
    {
        "content": "<p>If you have statements in your pathrc/bashrc/etc that modify the PATH or library path, make sure to put them at the end, so that it doesn't clobber the paths set by nix</p>",
        "id": 279014643,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1649966689
    },
    {
        "content": "<p>You could also try <code>nix-shell --pure</code></p>",
        "id": 279014653,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1649966696
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"454654\">Ayaz Hafiz</span> <a href=\"#narrow/stream/316715-contributing/topic/good.20first.20issues/near/279014643\">said</a>:</p>\n<blockquote>\n<p>If you have statements in your pathrc/bashrc/etc that modify the PATH or library path, make sure to put them at the end, so that it doesn't clobber the paths set by nix</p>\n</blockquote>\n<p>Oh I have some of those</p>",
        "id": 279014720,
        "sender_full_name": "RÃ­gille Scherrer Borges Menezes",
        "timestamp": 1649966745
    },
    {
        "content": "<p>I'll try <code>nix-shell --pure</code></p>",
        "id": 279014783,
        "sender_full_name": "RÃ­gille Scherrer Borges Menezes",
        "timestamp": 1649966763
    },
    {
        "content": "<p>The compile errors don't seem to tell which file has the error:</p>\n<div class=\"codehilite\"><pre><span></span><code>ðŸ”¨ Rebuilding host...\nâ”€â”€ UNUSED IMPORT â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n\nNothing from Terminal is used in this module.\n\n5â”‚          pf.Terminal,\n            ^^^^^^^^^^^\n\nSince Terminal isn&#39;t used, you don&#39;t need to import it.\n\nâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n\nDone!\n</code></pre></div>\n<p>I'd like to add support for this assuming it just hasn't been a priority yet? If so, any preferences on where /how it gets displayed?</p>",
        "id": 279049094,
        "sender_full_name": "Jared Cone",
        "timestamp": 1649997185
    },
    {
        "content": "<p>Hopefully this can be done in a general way that puts the file name on all error messages. It is probably good to have in general</p>",
        "id": 279049412,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1649997719
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"493801\">@RÃ­gille Scherrer Borges Menezes</span>, this issue should no longer occur if you use the nix flake (flake.nix).</p>",
        "id": 279055191,
        "sender_full_name": "Anton",
        "timestamp": 1650006202
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"361169\">@Anton</span>, the problem also disappeared after updating from Ubuntu 20.04 to Ubuntu 20.10</p>",
        "id": 279067194,
        "sender_full_name": "RÃ­gille Scherrer Borges Menezes",
        "timestamp": 1650017383
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"481285\">@Jared Cone</span> elm formats it as </p>\n<div class=\"codehilite\"><pre><span></span><code>â”€â”€ UNUSED IMPORT â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ foo/bar/Baz.roc â”€\n</code></pre></div>\n<p>That's probably a good initial goal</p>",
        "id": 279079441,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1650028901
    },
    {
        "content": "<p>we can worry about exact formatting later, but having the above work means that the path information is available when the error messages are constructed</p>",
        "id": 279079543,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1650028967
    },
    {
        "content": "<p>if anyone's interested in adding a new builtin, I'd love to have these for a talk I'm giving on Tuesday!</p>\n<div class=\"codehilite\"><pre><span></span><code>Num.min : Num a, Num a -&gt; Num a\n\nNum.max : Num a, Num a -&gt; Num a\n</code></pre></div>\n<p>they'd work the same way <code>min</code> and <code>max</code> do in most languages</p>",
        "id": 279103374,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1650044103
    },
    {
        "content": "<p>maybe don't do this?</p>",
        "id": 279103860,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1650044361
    },
    {
        "content": "<p>with builtins in roc this is trivial</p>",
        "id": 279103868,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1650044367
    },
    {
        "content": "<p>but today you'd need to do nasty things with hardcoding ASTs</p>",
        "id": 279103889,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1650044382
    },
    {
        "content": "<p>surely you can hide <code>min = \\a, b -&gt; if a &lt; b then a else b</code> somewhere in your file?</p>",
        "id": 279103953,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1650044404
    },
    {
        "content": "<p>oh good point!</p>",
        "id": 279109857,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1650047786
    },
    {
        "content": "<p>yeah nm let's hold off on this for now</p>",
        "id": 279109883,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1650047800
    },
    {
        "content": "<p>At least in [docs/Num.roc](ttps://github.com/rtfeldman/roc/blob/80f3a29ed436eeaced4f5dbbf8fd245fb50bc791/comp<br>\niler/builtins/docs/Num.roc#L1266-L1276) there's already <code>Num.lower</code> and <code>Num.higher</code>. They don't appear to be implemented though</p>",
        "id": 279140192,
        "sender_full_name": "Kevin Gillette",
        "timestamp": 1650072945
    },
    {
        "content": "<p>a rare type checker bug with <code>Good First Issue</code> appears! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> </p>\n<p><a href=\"https://github.com/rtfeldman/roc/issues/3298\">https://github.com/rtfeldman/roc/issues/3298</a></p>",
        "id": 286993237,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1655860531
    },
    {
        "content": "<p>If anyone is interested in the type checker or type-related projects, we have a number of good starter projects open!</p>\n<p><a href=\"https://github.com/rtfeldman/roc/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22%2C%22intermediate+issue%22+label%3Acan%2C%22type+checking%22\">https://github.com/rtfeldman/roc/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22%2C%22intermediate+issue%22+label%3Acan%2C%22type+checking%22</a></p>\n<p>This one in particular is blocking some larger progress on a CLI platform, and will be super valuable for future Roc code:</p>\n<p><a href=\"https://github.com/rtfeldman/roc/issues/3314\">https://github.com/rtfeldman/roc/issues/3314</a></p>",
        "id": 287327402,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1656075646
    },
    {
        "content": "<p>Here's a nice bugfix for anyone interested in the LLVM code generator<br>\n<a href=\"https://github.com/rtfeldman/roc/issues/3318\">https://github.com/rtfeldman/roc/issues/3318</a></p>",
        "id": 287421329,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1656143425
    },
    {
        "content": "<p>Unless someone else picks it [the type-checker good first issue(s)]  up in the meantime, I'd love to work on it. But I'm not going to claim it before finishing what I'm currently busy with <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 287581966,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1656338669
    },
    {
        "content": "<p>feel free to pick it up anytime you like! <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span></p>",
        "id": 287582743,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1656339004
    },
    {
        "content": "<p>that one's blocking me right now, so I'd love to see it fixed - by all means, go for it! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 287583194,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1656339212
    },
    {
        "content": "<p>(once you've wrapped up other things you'd like to wrap up first, of course!)</p>",
        "id": 287583245,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1656339237
    },
    {
        "content": "<p>here's a quick one - just a string change! <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> </p>\n<p><a href=\"https://github.com/roc-lang/roc/issues/3875\">https://github.com/roc-lang/roc/issues/3875</a></p>",
        "id": 294950824,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1661291109
    },
    {
        "content": "<p>I wrote a fix for this one and then realized I cannot create a branch in the roc repo anymore. Maybe this is because the repo has moved to the org recently? Or has the no PRs from forks policy changed?</p>\n<p>Edit: if nothing extra has changed, can someone please add me to the org/repo? I am <code>@dit7ya</code> on GitHub.</p>",
        "id": 295031830,
        "sender_full_name": "mostlyvoid",
        "timestamp": 1661343134
    },
    {
        "content": "<blockquote>\n<p>Or has the no PRs from forks policy changed?</p>\n</blockquote>\n<p>Yes indeed, forks are required now.</p>",
        "id": 295036352,
        "sender_full_name": "Anton",
        "timestamp": 1661344297
    },
    {
        "content": "<p>I'll update CONTIBUTING.md :)</p>",
        "id": 295036539,
        "sender_full_name": "Anton",
        "timestamp": 1661344346
    },
    {
        "content": "<p>Does anyone want to move some files and update some path references? These apps are referenced a lot, so shortening their paths like this would be much appreciated :) <a href=\"https://github.com/roc-lang/roc/issues/3912\">https://github.com/roc-lang/roc/issues/3912</a></p>",
        "id": 295590007,
        "sender_full_name": "jan kili",
        "timestamp": 1661603081
    },
    {
        "content": "<p>I'd like to take a stab at #3912. Anything I should know beyond the comments on the issue before submitting a PR?</p>",
        "id": 296403109,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1661963724
    },
    {
        "content": "<p>I don't think so! But if you do encounter any surprises, I'm here for you in this chat &amp; PR comments.</p>",
        "id": 296403315,
        "sender_full_name": "jan kili",
        "timestamp": 1661963786
    },
    {
        "content": "<p>try <code>cargo test --test cli_run</code> to verify that it worked, and you should be good I think</p>",
        "id": 296403426,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1661963828
    },
    {
        "content": "<p>It should be a simple find-and-replace... although updating the tests might be the most nuanced if there's some expected directory, idk</p>",
        "id": 296403504,
        "sender_full_name": "jan kili",
        "timestamp": 1661963858
    },
    {
        "content": "<p>Thank you, <span class=\"user-mention\" data-user-id=\"522634\">@Bryce Miller</span>!</p>",
        "id": 296403634,
        "sender_full_name": "jan kili",
        "timestamp": 1661963888
    },
    {
        "content": "<p>Well, If I break something it will be a good opportunity to learn!</p>",
        "id": 296403713,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1661963914
    },
    {
        "content": "<p>Yeah, even if your PR broke other people's work that'd be a great find!</p>",
        "id": 296403980,
        "sender_full_name": "jan kili",
        "timestamp": 1661964002
    },
    {
        "content": "<p>#BlameSystemsNotPeople</p>",
        "id": 296404071,
        "sender_full_name": "jan kili",
        "timestamp": 1661964019
    },
    {
        "content": "<p>And local breakages are definitely educational - you'll see how narrow/wide Roc's forgiveness is currently, and if you get any ugly error messages then let us know because they can always be improved!</p>",
        "id": 296404258,
        "sender_full_name": "jan kili",
        "timestamp": 1661964099
    },
    {
        "content": "<p>I really do hope it's uneventful, but of course weird issues pop up when you least expect them.</p>",
        "id": 296404490,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1661964186
    },
    {
        "content": "<p>Hey all, just wondering about issue #4052. Have there been any takers?</p>",
        "id": 299652994,
        "sender_full_name": "Kevin Wasilenkoff",
        "timestamp": 1663625442
    },
    {
        "content": "<p>It's all you!</p>",
        "id": 299654169,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1663626022
    },
    {
        "content": "<p>Is Rust nightly an option? There's an ErrorKind available in nightly called \"IsADirectory\" that I think would fit nicely here</p>",
        "id": 299655943,
        "sender_full_name": "Kevin Wasilenkoff",
        "timestamp": 1663627026
    },
    {
        "content": "<p>I don't think we want to go that route. From what I've heard that stuff also won't be stabilized any time soon</p>",
        "id": 299656111,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1663627115
    },
    {
        "content": "<p>so I guess the best approach is to check for permission here, and look at the metadata of the path to see if it is a file</p>",
        "id": 299656147,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1663627137
    },
    {
        "content": "<p>Fair enough, thank you. I'll see what I can do!</p>",
        "id": 299656445,
        "sender_full_name": "Kevin Wasilenkoff",
        "timestamp": 1663627259
    },
    {
        "content": "<p>Hi! I was looking for a nice first issue, and was wondering about issue <a href=\"https://github.com/roc-lang/roc/issues/4726\">#4726</a>. From what I can see it might have been resolved already? At least I tried the nightly build and could not reproduce the crashes mentioned. All the suggested tests pass!</p>",
        "id": 339693190,
        "sender_full_name": "Johan LÃ¶vgren",
        "timestamp": 1678022000
    },
    {
        "content": "<p>yes this was fixed recently</p>",
        "id": 339697724,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1678024171
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"595873\">Johan LÃ¶vgren</span> has marked this topic as resolved.</p>",
        "id": 339698330,
        "sender_full_name": "Notification Bot",
        "timestamp": 1678024413
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"595873\">Johan LÃ¶vgren</span> has marked this topic as unresolved.</p>",
        "id": 339698343,
        "sender_full_name": "Notification Bot",
        "timestamp": 1678024418
    },
    {
        "content": "<p>I'm not sure what other open stdlib issues we have.</p>",
        "id": 339698530,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1678024514
    },
    {
        "content": "<p>in the package space, if you are familiar with elm, we'd like to port over its parser package</p>",
        "id": 339698583,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1678024557
    },
    {
        "content": "<p>Not really familiar with Elm but I am familiar with Haskell and I gather the syntax is pretty similar. I have a little familiarity with Parsers as well</p>",
        "id": 339700117,
        "sender_full_name": "Johan LÃ¶vgren",
        "timestamp": 1678025197
    },
    {
        "content": "<p><a href=\"https://github.com/elm/parser/tree/1.1.0\">https://github.com/elm/parser/tree/1.1.0</a> is the package. we don't have custom operators, so <code>|.</code> will be <code>|&gt; skip</code> and <code>|=</code>will be <code>|&gt; keep</code></p>",
        "id": 339701190,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1678025764
    },
    {
        "content": "<p>there is <code>examples/parser/Parser/Core.roc</code> already which has some ideas for the type signatures, but in terms of implementation I think the elm approach is much better</p>",
        "id": 339701276,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1678025794
    },
    {
        "content": "<p>it handles backtracking in a really nice way, and has some support for custom error messages</p>",
        "id": 339701318,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1678025808
    },
    {
        "content": "<p>Thanks! Sounds fun, I'll take a look</p>",
        "id": 339701456,
        "sender_full_name": "Johan LÃ¶vgren",
        "timestamp": 1678025856
    },
    {
        "content": "<p>Johan, when you implement the low-level JavaScript functions in <a href=\"https://github.com/elm/parser/blob/1.1.0/src/Elm/Kernel/Parser.js\">https://github.com/elm/parser/blob/1.1.0/src/Elm/Kernel/Parser.js</a>, take a look at issue <a href=\"https://github.com/elm/parser/issues/53\">#53</a> where I describe a bug, PR <a href=\"https://github.com/elm/parser/pull/54\">#54</a> shows a possible fix...</p>",
        "id": 339731597,
        "sender_full_name": "Pit Capitain",
        "timestamp": 1678040892
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281543\">Folkert de Vries</span> <a href=\"#narrow/stream/316715-contributing/topic/good.20first.20issues/near/339701276\">said</a>:</p>\n<blockquote>\n<p>there is <code>examples/parser/Parser/Core.roc</code> already which has some ideas for the type signatures, but in terms of implementation I think the elm approach is much better</p>\n</blockquote>\n<p>By the way, I have some questions about this already. I see the Elm parser only parses strings, and does so by \"chomping\" one or more Chars at a time. But the concept of a Char does not exist in roc. Also I see that the Core parser in our examples can parse arbitrary input.</p>",
        "id": 339807025,
        "sender_full_name": "Johan LÃ¶vgren",
        "timestamp": 1678092501
    },
    {
        "content": "<p>Would the idea be to continue with the roc approach of arbitrary inputs, but change the representation of error-handling / context and so on to match the elm implementation?</p>",
        "id": 339807256,
        "sender_full_name": "Johan LÃ¶vgren",
        "timestamp": 1678092593
    },
    {
        "content": "<p>that sounds nice and flexible, and only being able to parse strings is a limitation that I hear about on the elm slack. So it would be nice to lift that restriction. </p>\n<p>I do wonder where there are cases where performance would be better by just specializing to a list of bytes</p>",
        "id": 339807815,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1678092737
    },
    {
        "content": "<p>I guess that is possible... For sure the most elegant way would be if the core  parser is generic and performance depends on what type you implement a parser for in the end.</p>",
        "id": 339810141,
        "sender_full_name": "Johan LÃ¶vgren",
        "timestamp": 1678093286
    },
    {
        "content": "<p>yes so let's try that first</p>",
        "id": 339810743,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1678093477
    },
    {
        "content": "<p>(the generic approach)</p>",
        "id": 339810764,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1678093486
    },
    {
        "content": "<p>and just see where we miss opportunities</p>",
        "id": 339810782,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1678093492
    },
    {
        "content": "<p>I'm super interested to see how this develops. <span aria-label=\"sunglasses\" class=\"emoji emoji-1f60e\" role=\"img\" title=\"sunglasses\">:sunglasses:</span></p>",
        "id": 339830329,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1678098559
    },
    {
        "content": "<p>I think it's actually really good if the parser works on bytes (so, <code>List U8</code> in Roc terms)</p>",
        "id": 339872342,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1678110488
    },
    {
        "content": "<p>because then you can use it to implement both things like CSV parsers as well as binary format parsers like protobuf!</p>",
        "id": 339872477,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1678110527
    },
    {
        "content": "<p>yes but not anything where you do custom tokenization</p>",
        "id": 339872540,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1678110543
    },
    {
        "content": "<p>sure</p>",
        "id": 339872565,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1678110551
    },
    {
        "content": "<p>so what I hope to find out is: what is the price we actually pay for generality (vs. just working on bytes)</p>",
        "id": 339872675,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1678110585
    },
    {
        "content": "<p>maybe it's big, maybe it's small. I don't have a good idea really</p>",
        "id": 339872705,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1678110598
    },
    {
        "content": "<p>Hmm after thinking about this some more I think I will start by porting the Elm parser to work for <code>List U8</code> first. Then after that I can think about how it should look for generic input.</p>",
        "id": 340091186,
        "sender_full_name": "Johan LÃ¶vgren",
        "timestamp": 1678190659
    },
    {
        "content": "<p>If I understand correctly, the advanced Elm parser keeps track of state by moving a cursor and not like the Roc parser which \"consumes\" the source string bit by bit. And I think this is necessary for the good error messaging and for backtracking. I am not sure what a movable cursor would even mean for generic inputs.</p>",
        "id": 340091708,
        "sender_full_name": "Johan LÃ¶vgren",
        "timestamp": 1678190792
    },
    {
        "content": "<p>it's also way more efficient to just use indices into the input</p>",
        "id": 340092848,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1678191129
    },
    {
        "content": "<p>It may be interesting to discuss the proposal for <a href=\"https://docs.google.com/document/d/1sYA8lgUW836OJoH_kFJz1WPzwJrFLnWbTCCYNhMSI80/edit?usp=drivesdk\">seamless slices</a>? Does that impact on the design on a Roc parser?</p>",
        "id": 340192759,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1678216557
    },
    {
        "content": "<p>I think most likely we should assume that will be implemented as described in the issue</p>",
        "id": 340196744,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1678217626
    },
    {
        "content": "<p>even though that probably won't happen soon (because it's pretty involved and there are other higher priorities at the moment)</p>",
        "id": 340196808,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1678217643
    },
    {
        "content": "<p>I guess it does mean that as long as you aren't modifying a <code>List</code>, it should be equally fast to take sub slices of it as it would be to use an index. Or at least in the same ball pack.</p>",
        "id": 340203238,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1678219686
    },
    {
        "content": "<p>if anyone's looking for a beginner-friendly way to get into compiler contributions, <a href=\"https://github.com/roc-lang/roc/pull/5218\">https://github.com/roc-lang/roc/pull/5218</a> will need 128-bit integers to work on the WASM development backend so that <a href=\"https://www.roc-lang.org/repl\">https://www.roc-lang.org/repl</a> will still work if you enter things like <code>1 + 2</code> - we already have all the ingredients in place for this to work, it's just a matter of wiring them up</p>",
        "id": 346366833,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1680444971
    },
    {
        "content": "<p>which is a fairly mechanical task, but if you're new to the code base, a fairly mechanical task is a gentle introduction to how things work! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 346366878,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1680444995
    },
    {
        "content": "<p>so if anyone's interested in that, just mention it here and we can help you get started on it!</p>",
        "id": 346366923,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1680445015
    },
    {
        "content": "<p>hi <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> , pretty new to the project, just joined Zulip and followed along from your talks on Youtube and your Rust course on FrontendMasters and I got pretty excited!! This week I have time off on Thursday 6th and Friday 7th and if you see fit for a totally newcomer to the project I gladly will take this task :D</p>",
        "id": 346986759,
        "sender_full_name": "Mauro Martinez",
        "timestamp": 1680649581
    },
    {
        "content": "<p>awesome, thank you for taking it on! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 346987139,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1680649751
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"431893\">@Brian Carroll</span> any advice on where's the best starting point?</p>",
        "id": 346987171,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1680649772
    },
    {
        "content": "<p>Great, thanks for helping, <span class=\"user-mention\" data-user-id=\"604755\">@Mauro Martinez</span> !<br>\nLet's start with some links!<br>\nHere's the issue listing all the operations to be implemented: <a href=\"https://github.com/roc-lang/roc/issues/2324\">https://github.com/roc-lang/roc/issues/2324</a><br>\nHere's the file where they are implemented: <a href=\"https://github.com/roc-lang/roc/blob/main/crates/compiler/gen_wasm/src/low_level.rs\">https://github.com/roc-lang/roc/blob/main/crates/compiler/gen_wasm/src/low_level.rs</a><br>\nHere are the tests for numeric operations: <a href=\"https://github.com/roc-lang/roc/blob/main/crates/compiler/test_gen/src/gen_num.rs\">https://github.com/roc-lang/roc/blob/main/crates/compiler/test_gen/src/gen_num.rs</a></p>",
        "id": 347051663,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1680681548
    },
    {
        "content": "<p>I suggest you explore for a while, and ask some questions here, and we'll take it from there.</p>",
        "id": 347052190,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1680681648
    },
    {
        "content": "<p>The <a href=\"https://github.com/roc-lang/roc/blob/main/crates/compiler/gen_wasm/README.md\">gen_wasm readme</a> might also be good to look at. A lot of the information isn't directly relevant to this task, but a bit of context is good!</p>",
        "id": 347052908,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1680681802
    },
    {
        "content": "<p>thanks for sharing <span class=\"user-mention\" data-user-id=\"431893\">@Brian Carroll</span>, I will take a look and come back here soon!!</p>",
        "id": 347165163,
        "sender_full_name": "Mauro Martinez",
        "timestamp": 1680704976
    },
    {
        "content": "<p>hey folks couple of questions, </p>\n<ul>\n<li>from the <a href=\"https://github.com/roc-lang/roc/issues/2324\">issue list</a>, only those under the section <strong> Int128</strong> and with the <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> are the functions that will need to be wired up, right (11 in total)?</li>\n<li>for the functions implementations, I notice there are some that use <code>IntWidth::I128 | IntWidth::U128</code> width for matching like <code>NumMulWrap</code>, is that only necessary for Wrap operations ? </li>\n<li>I was able to read the <code>gen_wasm_readme</code> pretty good explanation, I'm not too sure if I completely understood the section for <a href=\"https://github.com/roc-lang/roc/blob/main/crates/compiler/gen_wasm/README.md#linking-host-to-app-calls\">linking_host_to_app_calls</a>, but if what I understood is right, that is what Roc is using to successfully use memory for stuff that is not built-in on WASM, or am I wrong?</li>\n</ul>",
        "id": 347730607,
        "sender_full_name": "Mauro Martinez",
        "timestamp": 1680895057
    },
    {
        "content": "<ul>\n<li>\n<p>No, it's the opposite! The ticked ones are fully implemented, including whatever \"wiring\" is needed! The unticked ones need to be done.</p>\n</li>\n<li>\n<p>The pattern <code>IntWidth::I128 | IntWidth::U128</code> means it is generating the same Wasm instructions for both signed and unsigned numbers. That makes sense for wrapped ops. You might discover it also makes sense for some other ops. I don't know, it's hard to tell without going through them all!</p>\n</li>\n<li>\n<p>Linking host to app calls is not about memory, it's about how we take some code compiled by Roc, and some code compiled by some \"foreign language\" compiler, and link them together into a single program. The foreign language part of the platform is called the \"host\". The hard part of that is where the host is calling the Roc app. Because we actually have to modify some of the instruction bytes inside the host to make it work.<br>\nThis linking stuff is totally unrelated to what you're working on, so don't worry if you're not following everything yet!</p>\n</li>\n</ul>",
        "id": 347738476,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1680898146
    },
    {
        "content": "<p>gotcha! I understand now what is needed to implement, and thanks for clarifying the linking of the wasm_generation. Moving on, what do you think should be the first methods to tackle? I think I could star with  <code>&gt;, &gt;=, &lt; and &lt;=</code>, but let me know if you have another suggestion! </p>\n<p>I was also able to follow the <a href=\"https://github.com/roc-lang/roc/blob/main/BUILDING_FROM_SOURCE.md\">BUILDING_FROM_SOURCE_README</a> and I can start a nix shell with roc using <code>nix develop\n</code></p>",
        "id": 348276311,
        "sender_full_name": "Mauro Martinez",
        "timestamp": 1681150203
    },
    {
        "content": "<p>That's great!<br>\nThose ones seem good to start with, yes. Mostly you should go wherever your interest takes you!<br>\nOh there's one more thing you should know about: the <code>compiler-rt</code> library.<br>\nThis is a C library that implements some very low level operations that compilers can \"just use\". It's part of the LLVM project and we are basically borrowing from it in a few places. It contains a lot of 128-bit ops. They have weird shortened names like <code>__lshrti3</code>, which apparently does a right shift, and is called <a href=\"https://github.com/roc-lang/roc/blob/main/crates/compiler/gen_wasm/src/low_level.rs#L1772\">here</a><br>\nTo see which of its functions to use, you could try compiling some Zig or Rust code and see what they do. I recommend <a href=\"https://rust.godbolt.org/\">Compiler Explorer</a> by Matt Godbolt.<br>\nYou can also have a look around in the source code. <a href=\"https://github.com/llvm/llvm-project/tree/main/compiler-rt\">https://github.com/llvm/llvm-project/tree/main/compiler-rt</a></p>",
        "id": 348420310,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1681209522
    },
    {
        "content": "<p>Hello folks! How are you? As I mentioned in  my introduction in the <a class=\"stream\" data-stream-id=\"231634\" href=\"/#narrow/stream/231634-beginners\">#beginners</a> stream, I really want to contribute to Roc for it to achieve its goals, but I don't have a lot of knowledge in Rust nor compilers, but I'm totally willing to learn, in fact I want to use my will to contribute as a driver to learn what is needed in order to be able to take the more advanced tasks. But for now, is there anything that you think I can help with? Even if it's documenting what is missing. I'm a software engineer with knowledge in functional programing, currently I work with clojure, but I have personal projects in Elm, Haskell, Elixir, Rescript etc.. I have a lot of experience also with regular languages like, JS, Python etc..</p>",
        "id": 350391590,
        "sender_full_name": "Matheus Ashton",
        "timestamp": 1681696418
    },
    {
        "content": "<p>Hi Matheus, there are issues labelled \"Good first issue\" you could brosw through. I've been working on making examples for roc-lang/examples which you could always help with. Basically any introductory or common cs algorithms or datastructures would be helpful, like implementing Dijkstra's etc.</p>",
        "id": 350394090,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1681698370
    },
    {
        "content": "<p>Hello, everyone!<br>\nI am very interested in the project. I am very familiar with Haskell and Elm, but not at all familiar with Rust. Therefore, I want to contribute in Roc itself. <br>\nI picked this issue as my first one: <a href=\"https://github.com/roc-lang/roc/issues/5138\">https://github.com/roc-lang/roc/issues/5138</a></p>\n<p>My question is: how best to test the builtin libraries? Are there even tests for the standard library? Or is the best way to compile the roc executable and running a file with tests?</p>",
        "id": 350834646,
        "sender_full_name": "iko",
        "timestamp": 1681836167
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"610916\">@iko</span>,<br>\nWe have <a href=\"https://github.com/roc-lang/roc/blob/4cfbd295b761ab7723aca182c50fa3a945d6cff2/crates/compiler/builtins/README.md\">this guide</a> on how to add builtins, I'm not sure if it is still completely up to date but it might suffice :)</p>",
        "id": 350838507,
        "sender_full_name": "Anton",
        "timestamp": 1681837109
    },
    {
        "content": "<p>we have some basic tests for the builtin functions in this file <code>crates/compiler/test_gen/src/gen_list.rs </code>. These are mostly to check that the function is defined and does the right thing for some common cases</p>",
        "id": 350838545,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1681837123
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/pull/4249/files\">This PR</a> may also be useful to see what you need to change in which places</p>",
        "id": 350839164,
        "sender_full_name": "Anton",
        "timestamp": 1681837267
    },
    {
        "content": "<p>Hey everyone!<br>\nI am interested in contributing to the project. I already have some experience with Haskell, Rust and a bit of Zig as well.<br>\nWhen building the project and trying out the repl I stumbled upon a bug which I've reported here <a href=\"https://github.com/roc-lang/roc/issues/5337\">https://github.com/roc-lang/roc/issues/5337</a>. And in order to get familiar with the project I implemented a simple fix that I think might do the job. Should I open a PR?</p>",
        "id": 353083474,
        "sender_full_name": "Gabriel Dertoni",
        "timestamp": 1682572510
    },
    {
        "content": "<p>Yep</p>",
        "id": 353092079,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682574007
    },
    {
        "content": "<p>Contributions are always welcome.</p>",
        "id": 353092129,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682574016
    },
    {
        "content": "<p>Worst case, a review may give comments about a different way we would prefer the issue to be solved.</p>",
        "id": 353092311,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682574053
    },
    {
        "content": "<p>Here is the PR, <a href=\"https://github.com/roc-lang/roc/pull/5339\">https://github.com/roc-lang/roc/pull/5339</a> I don't know if I've removed some corner case handling so please let me know what you think.</p>",
        "id": 353389271,
        "sender_full_name": "Gabriel Dertoni",
        "timestamp": 1682613830
    },
    {
        "content": "<p>I kicked off CI. Hopefully someone familiar with the repl code can take a look soon.</p>",
        "id": 353392126,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682614222
    },
    {
        "content": "<p>Hey, I've been working on some issues in the last couple of days and found that the error reporting code uses a lot of <code>format!()</code> macro calls and I can't figure out why allocate all these strings. Isn't it equivalent to doing <code>alloc.as_string(format_args!(...))</code> on the <code>DocAllocator</code>? Using <code>format_args!()</code> can avoid many allocations since it doesn't perform any allocations and <code>as_string</code> may choose to store the data in a <code>SmallString</code>. Additionally, in the future <code>RocDocAllocator</code> can itself override <code>as_string</code> and use an arena allocator, in order to store the strings. To make this more readable, we could add a macro <code>text!(alloc, ...)</code> that would use <code>format_args!()</code>.</p>\n<p>Is this something worth changing? Should I open an issue in order to address this?</p>",
        "id": 355568497,
        "sender_full_name": "Gabriel Dertoni",
        "timestamp": 1683136019
    },
    {
        "content": "<p>well, the good thing is that error reporting is out of the hot path.</p>",
        "id": 355569320,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1683136267
    },
    {
        "content": "<p>but changing this to be more efficient might be fun. I would like to see some benchmarks of error reporting though, to verify whether it actually helps</p>",
        "id": 355569653,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1683136356
    },
    {
        "content": "<p>Since it is not on the hot path, it may be difficult to benchmark the compiler end-to-end in a way that the improvements actually show up. But it is possible to benchmark the <code>RocDocAllocator</code> in isolation in order to measure the differences. In general, I think this is more about preventing a needles allocation without pretty much any additional complexity. The change would delegate the allocation to the allocator and so, if we never need to use a different allocation strategy for this, nothing needs to be changed (continue to allocate strings on the heap). But if at some point it becomes a worthwhile improvement, it can be done in a single spot!</p>\n<p>This issue also might make people new to the project more familliar to the codebase and set a better example for people who are just copy-pasting things around. If <code>RocDocAllocator</code> is then used to do a lot more work in the future (for example, <a href=\"https://www.tweag.io/blog/2022-12-22-making-ghc-faster-at-emitting-code/\">GHC used to use a similar strattegy for printing ASM code, and eventually they had to change that</a>) then it's easier to optimize, since we're essentially delegating allocation to the actual allocator.</p>",
        "id": 355602536,
        "sender_full_name": "Gabriel Dertoni",
        "timestamp": 1683146049
    },
    {
        "content": "<p>I think it's a worthwhile change, since your implementation suggestion sounds like it would not introduce additional complexity. More macros are a slower to compile the compiler itself but I think that's entirely negligible. if you'd like to open a PR I think we'd be happy to review! Thanks for the suggestion.</p>",
        "id": 355605094,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1683146973
    },
    {
        "content": "<p>Done <a href=\"https://github.com/roc-lang/roc/pull/5374\">https://github.com/roc-lang/roc/pull/5374</a></p>",
        "id": 355632506,
        "sender_full_name": "Gabriel Dertoni",
        "timestamp": 1683161496
    },
    {
        "content": "<p>a new Good First Issue appears!</p>\n<p><a href=\"https://github.com/roc-lang/roc/issues/5377\">https://github.com/roc-lang/roc/issues/5377</a></p>",
        "id": 355912838,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683248399
    },
    {
        "content": "<p>another Good First Issue: <a href=\"https://github.com/roc-lang/roc/issues/5379\">https://github.com/roc-lang/roc/issues/5379</a></p>",
        "id": 356193307,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1683336969
    },
    {
        "content": "<p>If anyone is interested in a task that is larger but very well scoped, we have <a href=\"https://github.com/roc-lang/roc/issues/5388\">#5388</a>.</p>\n<p>Fundamentally, the task is just to upgrade the compiler from clap 3 to clap 4. Clap is used for parsing command line arguments for the compiler. This means the update is limited to a very few number of <a href=\"https://github.com/search?q=repo%3Aroc-lang%2Froc%20clap&amp;type=code\">files within the compiler</a>. You really don't have to know anything about the rest of the compiler. It definitely would be helpful to have some decent knowledge of rust given this will mostly be updating and dealing with changes in api. Hopefully a simple compiler error driven update.</p>\n<p>If you are interested, comment here and/or on the issue.<br>\nJust doing the upgrade to clap 4 and ignoring the rest of the issue would be super helpful.</p>",
        "id": 356799083,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1683574942
    },
    {
        "content": "<p>this one requires no compiler knowledge, it's scoped only to CLI stuff <a href=\"https://github.com/roc-lang/roc/issues/5394\">https://github.com/roc-lang/roc/issues/5394</a></p>",
        "id": 358185092,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1684025306
    },
    {
        "content": "<p><code>roc help</code> (=<code>./target/release/roc help</code>) recently stopped working. I've made a \"good first issue\" for it: <a href=\"https://github.com/roc-lang/roc/issues/5418\">#5418</a></p>",
        "id": 358956604,
        "sender_full_name": "Anton",
        "timestamp": 1684322358
    },
    {
        "content": "<p>this is a pretty reasonable first issue for getting into the compiler a bit: <a href=\"https://github.com/roc-lang/roc/issues/6027\">https://github.com/roc-lang/roc/issues/6027</a></p>\n<p>it involves the compiler because the place where this needs to change is not in a .roc file, but it's a good first issue because we already do this behavior for integer division by 0, so there's already a template you can follow for how the logic should look!</p>",
        "id": 403221110,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700503815
    },
    {
        "content": "<p>a new good first issue for anyone interested in getting into a bit of machine code generation!</p>\n<p><a href=\"https://github.com/roc-lang/roc/issues/6169\">https://github.com/roc-lang/roc/issues/6169</a></p>",
        "id": 405689119,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701629690
    },
    {
        "content": "<p>also, here's a very easy one: adding <code>Set.keepIf</code> and <code>Set.dropIf</code> - <a href=\"https://github.com/roc-lang/roc/issues/6171\">https://github.com/roc-lang/roc/issues/6171</a></p>\n<p>these can be added to <a href=\"https://github.com/roc-lang/roc/blob/142681f77eb7dc18092eb29267162f5d3f487cac/crates/compiler/builtins/roc/Set.roc\">Set.roc</a> by following the pattern of <a href=\"https://github.com/roc-lang/roc/pull/5905/files\">this PR which added <code>Str.contains</code></a></p>",
        "id": 405694181,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701634271
    },
    {
        "content": "<p>(don't worry about the <code>test_mono/generated</code> stuff - those get automatically regenerated and then checked in)</p>",
        "id": 405694214,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701634319
    },
    {
        "content": "<p>If anyone is interesting, <a class=\"stream-topic\" data-stream-id=\"231634\" href=\"/#narrow/stream/231634-beginners/topic/Is.20sqrt.20implemented.3F\">#beginners &gt; Is sqrt implemented?</a> would be a good first issue for working on our zig bitcode that powers the standard library. Turns our we missed a few functions on our custom <code>Dec</code> type.</p>",
        "id": 406340183,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701879506
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/issues/6208\">#6208</a></p>",
        "id": 406341047,
        "sender_full_name": "Anton",
        "timestamp": 1701879798
    },
    {
        "content": "<p>This is another good first issue if anyone is interested. It is two pieces:</p>\n<ol>\n<li>add <code>Num.round</code>, <code>Num.floor</code>, <code>Num.ceil</code> to the dev backend (ultra simple, just add a call to existing zig bitcode i'm pretty sure) I guess <code>Num.div</code> and dec also needs a wrapper here from the issue.</li>\n<li>Add those same functions to the <code>Dec</code> type. This should just require adding a few zig bitcode functions that essential convert Dec to a number (division) and then check the fractional part to decide how round/increment afterwards.</li>\n</ol>\n<p>Context: <a href=\"https://github.com/roc-lang/roc/issues/6212\">https://github.com/roc-lang/roc/issues/6212</a><br>\nFeel free to claim 1, 2, or both.</p>",
        "id": 406577653,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701966052
    },
    {
        "content": "<p>a new good first issue! Adding constants to the <code>Num</code> module for infinity, -infinity, and NaN <a href=\"https://github.com/roc-lang/roc/issues/6709\">https://github.com/roc-lang/roc/issues/6709</a></p>",
        "id": 436793734,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714693570
    },
    {
        "content": "<p>I had a stab at the first part of this at <a href=\"https://github.com/roc-lang/roc/pull/6711\">https://github.com/roc-lang/roc/pull/6711</a>. It is working but I got stuck on <code>assert_evals_to!</code> not believing that <code>NaN == NaN</code>. Is there a way to seperate the assertion and the eval?</p>",
        "id": 436851628,
        "sender_full_name": "Andy Ferris",
        "timestamp": 1714730116
    },
    {
        "content": "<p>in this particular case, Rust is correct! <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 436857702,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714732590
    },
    {
        "content": "<p><code>NaN</code> is defined at the hardware level to be unequal to <code>NaN</code></p>",
        "id": 436857725,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714732600
    },
    {
        "content": "<p>so I think we'd need to special-case that one, to use <a href=\"https://doc.rust-lang.org/std/primitive.f64.html#method.is_nan\"><code>is_nan</code></a> instead of the usual <code>assert_evals_to!</code> macro</p>",
        "id": 436857840,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714732659
    },
    {
        "content": "<p>might be easiest to duplicate the macro except make the new version <code>assert_evals_to_nan</code> instead of <code>assert_evals_to</code>, and the only change is checking for <code>is_nan</code> instead of equality</p>",
        "id": 436858033,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714732724
    },
    {
        "content": "<p>no the quicker way I think is to use a mapping function</p>",
        "id": 436862881,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1714734783
    },
    {
        "content": "<p>much like</p>\n<div class=\"codehilite\"><pre><span></span><code>#[test]\n#[cfg(any(feature = &quot;gen-llvm&quot;, feature = &quot;gen-wasm&quot;))]\nfn f64_log_negative() {\n    assert_evals_to!(&quot;Num.log -1f64&quot;, true, f64, |f: f64| f.is_nan());\n}\n</code></pre></div>",
        "id": 436862959,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1714734832
    },
    {
        "content": "<p>that sounds good!</p>",
        "id": 436879964,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714741713
    },
    {
        "content": "<p>Hot off the press... another Good First Issue <a href=\"https://github.com/roc-lang/roc/issues/7425\">https://github.com/roc-lang/roc/issues/7425</a> </p>\n<p>If anyone is interested in having a go at this, please let us know and we'd be happy to help.</p>",
        "id": 491124202,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735424031
    },
    {
        "content": "<p>Wouldnâ€™t be able to take this on until Monday, but Iâ€™d love to take a stab at it</p>",
        "id": 491126391,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1735426512
    },
    {
        "content": "<p>Yeah no rush or anything. If/when you leave a comment in the GH Issue I can assign it to you.</p>",
        "id": 491126419,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735426552
    },
    {
        "content": "<p>Freshly minted Good First Issue -- <a href=\"https://github.com/roc-lang/roc/issues/7515\">https://github.com/roc-lang/roc/issues/7515</a></p>\n<p>Replace <code>Result.map</code> with <code>Result.map_ok</code> in the builtins. </p>\n<p>Let us know if you are interesting in implementing this change. I'm happy to help.</p>",
        "id": 493682165,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736893830
    }
]