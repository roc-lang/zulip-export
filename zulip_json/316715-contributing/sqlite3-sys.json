[
    {
        "content": "<p>So I was looking at the sqlite3 issues that basic-webserver hit with sqlite3-sys: <a href=\"https://github.com/roc-lang/basic-webserver/pull/82\">https://github.com/roc-lang/basic-webserver/pull/82</a></p>",
        "id": 491116485,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735416151
    },
    {
        "content": "<p>I think the root issue is just that the <code>sqlite</code> crate does not bundle sqlite, but when switching to <code>sqlite-sys</code>, we switched to bundling sqlite</p>",
        "id": 491116522,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735416185
    },
    {
        "content": "<p>So everything probably would work if we just reloaded everything but avoided bundling sqlite</p>",
        "id": 491116534,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735416209
    },
    {
        "content": "<p>That said, I still want to look into if we can bundle sqlite somehow cause that is nicer overall.</p>",
        "id": 491116542,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735416225
    },
    {
        "content": "<p>Also, when we tried just disabling default features, that failed cause that leads to neither bundling or linking sqlite3. We needed to switch to the <code>linkage</code> feature if we wanted to link instead of bundle.</p>",
        "id": 491116620,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735416303
    },
    {
        "content": "<p>As a note, if we can't get <code>sqlite3-sys</code> to work bundled, we can also try <code>libsqlite3-sys</code> (that is what <code>rusqlite</code> uses and maintains)</p>",
        "id": 491116742,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735416431
    },
    {
        "content": "<p>Just collecting info on all of this now</p>",
        "id": 491116751,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735416447
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> is the current path for basic cli to just manually implement glue and have the <code>roc_*</code> crates implement what they use. So <code>roc_file</code> implements all file related types. <code>roc_sqlite</code> will implement all sqlite related types.</p>",
        "id": 491118596,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735418306
    },
    {
        "content": "<p>Yeah, that's what I've been trying... no idea if it's the best way, just the first thing I thought of.</p>",
        "id": 491121361,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735421109
    },
    {
        "content": "<p>I tried to group them into crates that basic-webserver and basic-ssg would need. Sqlite would definitely be its own I think.</p>",
        "id": 491121387,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735421156
    },
    {
        "content": "<p>SG</p>",
        "id": 491123812,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735423570
    },
    {
        "content": "<p>Hopefully will have a PR soon</p>",
        "id": 491123818,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735423577
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> What do I need to do to make sure my <a href=\"https://github.com/roc-lang/basic-cli/pull/299\">new PR for sqlite</a> doesn't <a href=\"https://github.com/roc-lang/roc/pull/7241\">break releasing</a>?</p>\n<p>Do I just need to attempt to build with musl?</p>",
        "id": 491130032,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735430593
    },
    {
        "content": "<p>You could make a new tag on the webserver repo,  and then make a new PR just like that release one, and just build a new release. It wont upload any files, that is done manually by Anton</p>",
        "id": 491131006,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735431626
    },
    {
        "content": "<p>Or the basic-cli repo... whichever you are more interested in</p>",
        "id": 491131020,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735431654
    },
    {
        "content": "<p>If it passes CI in roc-lang/roc then you know it's all good</p>",
        "id": 491131044,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735431702
    },
    {
        "content": "<p>To tag, I'll need to merge into main, right? So I guess first I need to land in basic cli. Then will make a test release to make sure everything is working in basic-cli. If not, will iterate.</p>",
        "id": 491131210,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735431871
    },
    {
        "content": "<p>No I don't think you need it on main</p>",
        "id": 491131221,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735431887
    },
    {
        "content": "<p>Just a tag -- in the remote (roc-lang/basic-cli) repo</p>",
        "id": 491131223,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735431889
    },
    {
        "content": "<p>Oh, ok</p>",
        "id": 491131229,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735431895
    },
    {
        "content": "<p>We can delete the tag afterwards, it's just so the CI runners checkout the correct branch/commit</p>",
        "id": 491131260,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735431955
    },
    {
        "content": "<p>Makes sense</p>",
        "id": 491131505,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735432215
    },
    {
        "content": "<p>kicked off here: <a href=\"https://github.com/roc-lang/roc/actions/runs/12530963666/job/34948060619?pr=7428\">https://github.com/roc-lang/roc/actions/runs/12530963666/job/34948060619?pr=7428</a></p>\n<p>I think it should build. Though won't be fully functional until <a href=\"https://github.com/roc-lang/roc/issues/7427\">#7427</a> lands and is pulled in</p>",
        "id": 491131738,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735432448
    },
    {
        "content": "<p>I feel really close here for the release. Only issue is on linux arm64 with musl. I think the issue is that <code>cc</code> is compiling for <code>glibc</code> instead of <code>musl</code> for some reason. And an old version of glibc at that. As such, it is generating a call to <code>fcntl64</code> which no longer exists. It is just <code>fcntl</code> now.</p>",
        "id": 491140761,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735441774
    },
    {
        "content": "<p>Maybe I can just update glibc on the system. Maybe there is some config I can set to get the c properly building targeting musl libc.</p>",
        "id": 491140828,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735441814
    },
    {
        "content": "<blockquote>\n<p>Only issue is on linux arm64 with musl</p>\n</blockquote>\n<p>It's not building against musl though is it?</p>",
        "id": 491142354,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735443501
    },
    {
        "content": "<p>It's just running <code>+ cargo build --release</code> on the native linux arm64</p>",
        "id": 491142373,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735443530
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 491142389,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735443557
    },
    {
        "content": "<p>Maybe we could try building against the musl target</p>",
        "id": 491142410,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735443595
    },
    {
        "content": "<p>So instead we do <code>cargo build --release --target aarch64-unknown-linux-musl</code>?</p>",
        "id": 491142501,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735443691
    },
    {
        "content": "<p>Ignore my last, looking at the actual workflow in <code>.github/workflows/basic_cli_build_release.yml</code> we can see</p>\n<div class=\"codehilite\"><pre><span></span><code>- name: build basic-cli\n        env:\n          CARGO_BUILD_TARGET: aarch64-unknown-linux-musl\n          CC_aarch64_unknown_linux_musl: clang-18\n          AR_aarch64_unknown_linux_musl: llvm-ar-18\n          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_RUSTFLAGS: &quot;-Clink-self-contained=yes -Clinker=rust-lld&quot;\n        run: ./ci/build_basic_cli.sh linux_arm64\n</code></pre></div>",
        "id": 491142772,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735443970
    },
    {
        "content": "<p>Yeah, I can test that. Though it should be building against musl due to the environment variable <code>CARGO_BUILD_TARGET: aarch64-unknown-linux-musl</code></p>",
        "id": 491142779,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735443980
    },
    {
        "content": "<p>I wonder how far we are from fully statically linked... and if that effort would also help us here?</p>",
        "id": 491143125,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735444414
    },
    {
        "content": "<p>Also, in the final link command, I see a bunch of <code>aarch64-unknown-linux-gnu</code>. So I guess that <code>CARGO_BUILD_TARGET</code> is not enough</p>",
        "id": 491143918,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735445112
    },
    {
        "content": "<p><del>I think I see the issue... in <a href=\"https://github.com/roc-lang/roc/blob/main/ci/build_basic_cli.sh\">build_basic_cli.sh</a></del> ... hmm, actually I'm not sure</p>",
        "id": 491144230,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735445422
    },
    {
        "content": "<p>I just pushed something to set <code>--target</code> as well. We'll see if it works.</p>",
        "id": 491144348,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735445570
    },
    {
        "content": "<p>Might be helpful to <code>echo $CARGO_BUILD_TARGET</code> in there too somewhere so we can see what's getting to that point</p>",
        "id": 491144430,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735445689
    },
    {
        "content": "<p>Also in <code>build.roc</code> we might need to do something... I think that gets called as well</p>",
        "id": 491144457,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735445730
    },
    {
        "content": "<p>So I wonder if the call to <code>roc build.roc</code> in <code>ci/build_basic_cli.sh</code> is passing the <code>CARGO_BUILD_TARGET</code> env var down</p>",
        "id": 491144519,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735445796
    },
    {
        "content": "<p>There's two layers of shells there</p>",
        "id": 491144525,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735445813
    },
    {
        "content": "<p>I'm not sure, but currently we are failing in the <code>cargo build --release</code> of <code>jumpstart.sh</code> from basic-cli</p>",
        "id": 491144935,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735446330
    },
    {
        "content": "<p>can now see: <code>+ cargo build --release --target aarch64-unknown-linux-musl</code></p>\n<p>Yet still failing while linking to stuff in <code>1.82.0-aarch64-unknown-linux-gnu</code></p>",
        "id": 491146677,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735448210
    },
    {
        "content": "<p>Feels like I am missing some sort of linker config to update to <code>musl</code></p>",
        "id": 491146684,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735448224
    },
    {
        "content": "<p>Testing now with <code>rust-lld</code> disabled, maybe that is the issue</p>",
        "id": 491146966,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735448445
    },
    {
        "content": "<p>That didn't help. Though it did give a slightly different form of the error. Some minor context from searching it:</p>\n<blockquote>\n<p>No worries. I found out it was eventually a problem with incompatible versions of glib for cross-compilation. I would assume you cross-compiled on &lt;= Ubuntu 18 with GLIB 2.27 which is strictly not-forward compatible with GLIB2.28 on the Raspbian (Debian Buster). Faintly recalling, they have changed the header for fcntl64 to a macro in the latest version of GLIB.</p>\n</blockquote>",
        "id": 491147668,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735449114
    },
    {
        "content": "<p>given we are building with musl, idk why we are hitting glibc errors, but I wonder if we can just update glibc on the pi</p>",
        "id": 491147729,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735449152
    },
    {
        "content": "<p>cc: <span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> in case you have ideas</p>",
        "id": 491147746,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735449194
    },
    {
        "content": "<p>If this doesn't pan out, eventually I'll give in and switch to linking sqlite instead of bundling it, but it would be nicer to bundle it if possible.</p>",
        "id": 491147764,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735449221
    },
    {
        "content": "<p>Does the build target set CC? <a href=\"https://github.com/stainless-steel/sqlite3-src/blob/7704dc7f0842ba2708dfcc8baa2a526dc0730020/build.rs#L5\">https://github.com/stainless-steel/sqlite3-src/blob/7704dc7f0842ba2708dfcc8baa2a526dc0730020/build.rs#L5</a></p>",
        "id": 491148744,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735450382
    },
    {
        "content": "<p><a href=\"https://docs.rs/cc/latest/cc/\">https://docs.rs/cc/latest/cc/</a></p>",
        "id": 491150071,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735451937
    },
    {
        "content": "<p>The <code>CC</code> environment variable is set to <code>clang-18</code></p>",
        "id": 491150225,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735452056
    },
    {
        "content": "<p>We could try setting <code>CC_ENABLE_DEBUG_OUTPUT</code></p>",
        "id": 491150259,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735452080
    },
    {
        "content": "<p>I think clang should support musl. Nothing fails until the final link step</p>",
        "id": 491150261,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735452085
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/316715-contributing/topic/sqlite3-sys/near/491150259\">said</a>:</p>\n<blockquote>\n<p>We could try setting <code>CC_ENABLE_DEBUG_OUTPUT</code></p>\n</blockquote>\n<p>I tried, didn't see any extra output in CI.</p>",
        "id": 491150277,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735452097
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/cc-rs/issues/1251\">https://github.com/rust-lang/cc-rs/issues/1251</a> maybe?</p>",
        "id": 491150424,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735452199
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> </p>\n<p>Mind if I try adding this to <code>.cargo/config.toml</code>?</p>\n<div class=\"codehilite\"><pre><span></span><code>[target.aarch64-unknown-linux-musl]\nlinker = &quot;aarch64-linux-musl-gcc&quot;\nrustflags = [&quot;-C&quot;, &quot;target-feature=+crt-static&quot;]\n\n[profile.release]\nlto = true\ncodegen-units = 1\npanic = &quot;abort&quot;\n</code></pre></div>",
        "id": 491150833,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735452609
    },
    {
        "content": "<p>Oh, interesting, disabled clang as the default cc and it is looking for <code>aarch64-linux-musl-gcc</code>. This feels relevant. Maybe clang doesn't correctly support musl and thus is leading to still linking glibc. Sadly, even though <code>musl-tools</code> should be installed, <code>aarch64-linux-musl-gcc</code> is not found.</p>",
        "id": 491150962,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735452789
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/channel/316715-contributing/topic/sqlite3-sys/near/491150833\">said</a>:</p>\n<blockquote>\n<p>Mind if I try adding this to <code>.cargo/config.toml</code>?</p>\n</blockquote>\n<p>go for it</p>",
        "id": 491150969,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735452811
    },
    {
        "content": "<p>Do you think we need these flags? <code>\"-Clink-self-contained=yes -Clinker=rust-lld\"</code></p>",
        "id": 491151029,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735452846
    },
    {
        "content": "<p>Maybe using <code>rust-lld</code> is better if we know it's available</p>",
        "id": 491151044,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735452876
    },
    {
        "content": "<p>To my understanding <code>link-self-contained=yes</code> should be default with musl and <code>linker=rust-lld</code> should lead to faster linking</p>",
        "id": 491151054,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735452897
    },
    {
        "content": "<p>So neither should be needed.</p>",
        "id": 491151066,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735452905
    },
    {
        "content": "<p>Feel free to push to either branch and update the tag if needed. I am gonna log off for the night</p>",
        "id": 491151084,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735452939
    },
    {
        "content": "<p>From more reading, it sounds like rust just tends to hit toolchain issues when compiling for <code>aarch64-unknown-linux-musl</code> (looks to even happen from time to time with x86_64 musl). My best guess is that rust does not actually correctly enable the toolchain. Scouring the web, there are a mix of various linking and compilation issues that are regularly hit with this musl.</p>\n<p>I am currently testing a workaround that someone claimed work for sqlite: <a href=\"https://github.com/briansmith/ring/issues/1414#issuecomment-1596300080\">https://github.com/briansmith/ring/issues/1414#issuecomment-1596300080</a></p>\n<p>That said, it sounds like the only sure-fire way to get rust to compile for <code>aarch64-unknown-linux-musl</code> is to use <a href=\"https://github.com/cross-rs/cross\">cross</a>. I guess musl is different enough that it is best to fully isolate the toolchain to make it work correctly. So we may want to start using <code>cross</code> for all of our <code>musl</code> builds.</p>",
        "id": 491195916,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735495561
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/actions/runs/12537623092/job/34961921175?pr=7428\">Workaround is functional</a>. This means the fundamental issue was from mixed toolchains (pulling in some stuff from gnu and some from musl). I think that we should eventually change all of our musl builds to use <a href=\"https://github.com/cross-rs/cross\">cross</a> to completely rule out this class of issues.</p>",
        "id": 491196928,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735496502
    },
    {
        "content": "<p>Anyway, this should mean we are good to land <a href=\"https://github.com/roc-lang/basic-cli/pull/299\">https://github.com/roc-lang/basic-cli/pull/299</a> with bundled sqlite.</p>",
        "id": 491197022,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735496588
    },
    {
        "content": "<p>We can figure out moving to <code>cross</code> in a separate PR. The workaround is functional and can be used for whenever the next release is.</p>",
        "id": 491197043,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735496622
    },
    {
        "content": "<p>And just to post this here to perserve it, this is the fundamental part of the workaround. Ensure clang does not pull in the default glibc and instead pulls in the musl version:<br>\n<code>CFLAGS_aarch64_unknown_linux_musl: \"-nostdinc -nostdlib -isystem/usr/include/aarch64-linux-musl/\"</code></p>",
        "id": 491197351,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735496893
    }
]