[
    {
        "content": "<p>Bit of an insane question, but is implementing Task as a built-in currently possible, but not implemented? It seems like once that and module params are implemented, the ecosystem is now able to share effectful code through pure Roc packages. If it's possible, would someone be able to help me enumerate the work required to implement it? If not, what's blocking it?</p>",
        "id": 446329116,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719092429
    },
    {
        "content": "<p>I don't think it's blocked really. In fact, I think <span class=\"user-mention\" data-user-id=\"611722\">@Isaac Van Doren</span> had already started looking into it.</p>",
        "id": 446329321,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1719092515
    },
    {
        "content": "<p><a href=\"#narrow/stream/395097-compiler-development/topic/Task.20as.20builtin/near/444132539\">https://roc.zulipchat.com/#narrow/stream/395097-compiler-development/topic/Task.20as.20builtin/near/444132539</a></p>",
        "id": 446329465,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1719092607
    },
    {
        "content": "<p>Oh, nice! I forgot about this. I didn't see anything on <span class=\"user-mention\" data-user-id=\"611722\">@Isaac Van Doren</span> 's fork/branches, but I'd love to work with him if possible on implementing it</p>",
        "id": 446329701,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719092743
    },
    {
        "content": "<p>Yeah not blocked, would be a massive benefit to have it <span aria-label=\"partying face\" class=\"emoji emoji-1f973\" role=\"img\" title=\"partying face\">:partying_face:</span></p>",
        "id": 446330459,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719093252
    },
    {
        "content": "<p>My thoughts exactly</p>",
        "id": 446330479,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719093275
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> I haven’t made much progress so you’re welcome to start a branch! I’d be happy to collaborate also if it makes sense to.</p>\n<p>We need the functions generated for the hosted module in the platform (defined in <a href=\"http://effect_module.rs\">effect_module.rs</a>) to implement the task module in the builtins. I’m not sure how to go about exposing these functions to the builtins. Maybe they need to be rewritten in Zig?</p>",
        "id": 446336794,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1719095214
    },
    {
        "content": "<p>Yes, I'd expect as much, though we'll have to see when it gets written</p>",
        "id": 446339806,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719097050
    },
    {
        "content": "<p>I'll look into it tomorrow and see what I find</p>",
        "id": 446339897,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719097087
    },
    {
        "content": "<p>Thanks for the tip!</p>",
        "id": 446339906,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719097091
    },
    {
        "content": "<p>Sounds good!</p>",
        "id": 446339928,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1719097110
    },
    {
        "content": "<p>I've made good progress on the built-in Task implementation, which mainly has involved copying the <code>Task</code> module from <code>basic-cli</code> to <code>crates/compiler/builtins/roc/Task.roc</code>. Just to make sure I'm on the right path:</p>\n<ul>\n<li>I removed <code>Effect</code> and <code>InternalTask</code>, and now only <code>Task</code> remains. I implemented it as <code>Effect</code> was implemented, which means <code>Task := {} -&gt; Result ok err</code>.</li>\n<li>I renamed <code>effect_module.rs</code> to <code>task_module.rs</code> and now for all foreign function definitions in the hosted module, I'm expecting them to return <code>Task</code> instead of <code>Effect</code></li>\n<li>I am no longer generating the <code>Effect.after</code>, <code>Effect.always</code>, etc. because they acted as a bridge to <code>Task</code> that's no longer needed if it's in the std library (so I removed those functions)<ul>\n<li>Since we don't need these functions, I removed the <code>generates Effect with [...]</code> section from our syntax and our codegen. We already have to update all hosted modules anyway to return <code>Task</code>s instead, so breaking their parsing doesn't seem too crazy.</li>\n</ul>\n</li>\n<li>After work today, I'm going to work on converting <code>basic-cli</code> to return <code>Task</code>s instead, and if that works, then I'll add testing and then release at least a draft PR</li>\n</ul>\n<p>Does anyone disagree with this game plan? It might be too much for one PR (ignoring the PRs for the platforms), which would mean I will try to break up into multiple PR's, but otherwise this isn't that bad of a change to make since all of the infrastructure is already there.</p>",
        "id": 446709088,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719260551
    },
    {
        "content": "<p>Sounds great. I'm happy to hack away on platforms and stage PRs when we're ready.</p>",
        "id": 446713645,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719261581
    },
    {
        "content": "<p>If you're bored, you could start making PR's per platform now that declare <code>Task</code>s instead of <code>Effect</code>s for the FFI, but I'd recommend waiting until I test <code>basic-cli</code> integration just in case, so you don't waste your time</p>",
        "id": 446714261,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719261771
    },
    {
        "content": "<p>Also, do we have a name we're considering for the hosted module instead of <code>Effect</code>? It seems like <code>PlatformTask</code> is a good name to imply that these are tasks that come from the platform. That's what I'm going to go with in the meantime</p>",
        "id": 446717266,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719262730
    },
    {
        "content": "<p>It's a fair amount of work to make a change like this and I can chip in a little. </p>\n<p>I'll wait until there's an E2E example, that will be a good point to replicate.</p>",
        "id": 446717290,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719262735
    },
    {
        "content": "<p>This sounds fine, I think lumping in one PR is fine. Landing this sooner is a good idea</p>",
        "id": 446767915,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1719286090
    },
    {
        "content": "<p>is there any reason for hosted modules in the long term? i understand the need in the interim and any name seems fine, but I think there is no need to have hosted modules at all once this work is completed.</p>",
        "id": 446768025,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1719286162
    },
    {
        "content": "<p>Yeah, the suggestion from Richard was to use module params to declare the FFI (I think), rendering hosted module no longer needed</p>",
        "id": 446768416,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719286370
    },
    {
        "content": "<p>right, understood, thank you</p>",
        "id": 446768476,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1719286398
    },
    {
        "content": "<p>So I can't do it in the PR, but it'll be a welcome change.</p>",
        "id": 446768478,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719286400
    },
    {
        "content": "<p>Should also be pretty easy since everything will already be changed to Tasks</p>",
        "id": 446768506,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719286426
    },
    {
        "content": "<p>I have created two PRs, the <a href=\"https://github.com/roc-lang/roc/pull/6836\">main one</a> in the language repo, and a <a href=\"https://github.com/roc-lang/basic-cli/pull/217\">basic-cli</a> one as a platform update demo. They are both in draft mode because pretty much all of the implementation work is done, but I am running into a couple issues. The main one is that Roc says the inferred types of our generated FFI function bodies don't match their type definitions for the <code>Task</code> return types:</p>\n<div class=\"codehilite\"><pre><span></span><code>── TYPE MISMATCH in examples/cli/false-interpreter/platform/PlatformTask.roc ───\n\nSomething is off with the body of the getLine definition:\n\n\n\n\nThis Task.Task opaque wrapping has the type:\n\n    Task *\n\nBut the type annotation on getLine says it should be:\n\n    Task Str\n</code></pre></div>\n<p>If anyone has time to look at what the issue is (I expect it's in the newly-renamed <a href=\"https://github.com/roc-lang/roc/blob/700c7ae9aa3f9642857b9281da726ec93ae2cf71/crates/compiler/can/src/task_module.rs\">task_module.rs</a>, which should be returning a manually-built <code>Task {} -&gt; Result ok err</code> but obviously something is wrong), that would be appreciated.</p>",
        "id": 446801678,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719301526
    },
    {
        "content": "<p>The PR for the language looks very big, and that's because it is, but it includes a lot of minor file reformats from the new module syntax, so it's a little inflated</p>",
        "id": 446801879,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719301598
    },
    {
        "content": "<p>And again, I'm happy to split this up, but for now I just wanted to get it into a draft PR so that someone else could run it if they wanted to</p>",
        "id": 446803834,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719302254
    },
    {
        "content": "<p>Here's the command I ran for the above output: <code>cargo run --bin roc -- check examples/cli/false-interpreter/False.roc</code></p>",
        "id": 446804148,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719302347
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> if you have free time sometime soon, could you see if you can see anything?</p>",
        "id": 446809425,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719303815
    },
    {
        "content": "<p>My current theory is that we allow inference of the Task's inner closure's type and that leads to the <code>Task *</code>, but I don't know if setting the type during canonicalization actually is respected or if it's \"paved over\" during type-checking</p>",
        "id": 446810278,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719304057
    },
    {
        "content": "<p>This is the code I'm referring to: <a href=\"https://github.com/roc-lang/roc/blob/d47a073634e79d2db69a67fd08a12b714d46b514/crates/compiler/can/src/effect_module.rs#L1401\">https://github.com/roc-lang/roc/blob/d47a073634e79d2db69a67fd08a12b714d46b514/crates/compiler/can/src/effect_module.rs#L1401</a></p>",
        "id": 446810437,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719304091
    },
    {
        "content": "<p>So I'm gonna try changing it here and seeing if I can get things to work</p>",
        "id": 446810472,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719304105
    },
    {
        "content": "<p>If you don't have time though, don't worry about it.</p>",
        "id": 446810615,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719304158
    },
    {
        "content": "<p>Okay, I fixed the issue with type misalignment, I now understand the type system a whole lot better!</p>",
        "id": 447164649,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719393340
    },
    {
        "content": "<p>I'm now running into other issues with respect to building our test platforms, but it's progress</p>",
        "id": 447164763,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719393368
    },
    {
        "content": "<p>Just kidding, I thought it was hanging, but it was waiting for user input <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 447168136,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719394496
    },
    {
        "content": "<p>haha, know the feeling</p>",
        "id": 447171589,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719395421
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> btw a helpful tip when making changes to builtins: if you break something in a builtin <code>.roc</code> file, <code>cargo check</code> can hang because it tries to build the builtins when compiling the rest of the compiler.</p>\n<p>to see the error message, do <code>cargo check -vvv</code> (\"very, very verbose\") - which will print out the compile error message that occurred when trying to build the .roc files for the builtins</p>",
        "id": 447184286,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1719399053
    },
    {
        "content": "<p>Huh... that is really good to know</p>",
        "id": 447184364,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719399087
    },
    {
        "content": "<p>Not the case with this last issue (not yet mentioned in this thread)</p>",
        "id": 447184544,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719399153
    },
    {
        "content": "<p>But good for the back pocket</p>",
        "id": 447184560,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719399159
    },
    {
        "content": "<p>I seem to have messed up the <code>load_internal/src/file.rs</code> \"graph\" of steps somehow, it runs out of steps after solving types, I believe, and then loops forever instead of exiting</p>",
        "id": 447184660,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719399209
    },
    {
        "content": "<p>Once that's fixed, then I expect everything will be working</p>",
        "id": 447184735,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719399231
    },
    {
        "content": "<p>I have Tasks as a built-in working with the <code>examples/cli/effects</code> platform</p>",
        "id": 447184814,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719399253
    },
    {
        "content": "<p>Just a quick update on this, the issue I was running into with was that there were many <code>import pf.Task</code> statements in the <code>basic-cli</code> platform. I've tested with other built-ins, and it seems like <code>import pf.&lt;builtin&gt;</code> hangs, probably because built-in imports are only ignored in the current app. Here's a repro:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">app</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">pf</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">platform</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/roc-lang/basic-cli/releases/download/0.10.0/vNe6s9hWzoTZtFmNkvEICPErI9ptji_ySjicO6CkucY.tar.br\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">pf.Task</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">pf.List</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">pf.Stdout</span>\n\n<span class=\"kr\">main </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"s\">\"Hello, world!\"</span>\n</code></pre></div>\n<p>If I change <code>List</code> to <code>List2</code>, I get an error that it isn't found, and if I remove it, the app runs, but otherwise it hangs. I'll make an issue if I can't find an existing one for this.</p>",
        "id": 447559581,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719514924
    },
    {
        "content": "<p>That being resolved, pretty much all of the CI tests are passing for <code>basic-cli</code> barring a couple for an odd reason. After changing the return type of <code>roc_fx_args</code> in <code>platform/src/lib.rs</code> to <code>RocResult&lt;RocList&lt;RocStr&gt;, ()&gt;</code>, calling the method deterministically returns <em>one of the error tags</em> for a different error. The Rust code cannot fail, and the type annotation on the Roc side is <code>args : Task (List Str) *</code>, so it shouldn't fail either. I believe I have to update the glue code, because it seems like a silent failure in the Rust -&gt; Roc decoding, but it would be nice to have type checking between the Roc and Rust FFI if at all possible.</p>",
        "id": 447562692,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719515549
    },
    {
        "content": "<p>I think I'll make an issue for that as well, since changing the return type of a Rust function doesn't cause any errors during Roc runtime. It may not be an easy add, but it means we have weaker type safety than Elm's ports, which this is somewhat analogous to.</p>",
        "id": 447563023,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719515652
    },
    {
        "content": "<p>Once this issue is fixed, I'll un-draft the PR's and ask for help reviewing this change.</p>",
        "id": 447563094,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719515683
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/stream/316715-contributing/topic/Task.20as.20a.20built-in/near/447563023\">said</a>:</p>\n<blockquote>\n<p>I think I'll make an issue for that as well, since changing the return type of a Rust function doesn't cause any errors during Roc runtime. It may not be an easy add, but it means we have weaker type safety than Elm's ports, which this is somewhat analogous to.</p>\n</blockquote>\n<p>Hm, I don't know how we could do that without slowing down every IO interaction. I feel like the goal should be to make glue more reliable, probably via roundtrip property testing.</p>",
        "id": 447564848,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1719516260
    },
    {
        "content": "<p>I mean at compilation, not during runtime</p>",
        "id": 447564910,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719516284
    },
    {
        "content": "<p>During runtime would be terrible</p>",
        "id": 447564921,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719516289
    },
    {
        "content": "<p>Oh, I'm not sure what that'd look like, but that's probably for another topic <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 447565441,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1719516463
    },
    {
        "content": "<p>This weekend if I remember I'll post in <a class=\"stream\" data-stream-id=\"304641\" href=\"/#narrow/stream/304641-ideas\">#ideas</a></p>",
        "id": 447565579,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719516497
    },
    {
        "content": "<h1>Builtin Task Coord</h1>\n<p>Making a list of things to land <a href=\"https://github.com/roc-lang/roc/pull/6836\">#6836</a></p>\n<h2>Handy References</h2>\n<ul>\n<li><a href=\"https://github.com/lukewilliamboswell/roc-platform-template-zig/pull/3/files\">PR roc-platform-template-zig</a> is ready for builtin task as an example</li>\n</ul>\n<h2>Preparations</h2>\n<ul>\n<li>Upgrade and pre-release of basic-cli <a href=\"https://github.com/roc-lang/basic-cli/pull/217\">WIP PR #217</a></li>\n<li>Upgrade and pre-release of basic-webserver TODO</li>\n<li>Upgrade and pre-release of basic-ssg TODO</li>\n<li>Stage pre-release URL platforms in roc-lang/examples TODO</li>\n<li>Stage pre-release URL platforms in roc-lang/roc TODO</li>\n</ul>\n<h2>Nice to have</h2>\n<ul>\n<li>Upgrade and pre-release of roc-platform-template-zig DONE</li>\n<li>Upgrade and pre-release of roc-wasm4 TODO</li>\n<li>Upgrade and pre-release of <a href=\"https://github.com/lukewilliamboswell/roc-platform-template-rust\">roc-platform-template-rust</a> TODO</li>\n<li>Upgrade and pre-release of <a href=\"https://github.com/lukewilliamboswell/roc-platform-template-go\">roc-platform-template-go</a> TODO</li>\n<li>Upgrade and pre-release of <a href=\"https://github.com/lukewilliamboswell/roc-platform-template-swift\">roc-platform-template-swift</a> TODO</li>\n<li>Upgrade and pre-release of <a href=\"https://github.com/lukewilliamboswell/roc-platform-template-c\">roc-platform-template-c</a> TODO</li>\n</ul>",
        "id": 448178884,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719783838
    },
    {
        "content": "<p>I lumped basic-webserver in with the required group, because I think we need to ensure it is working OK before we make this change. Most of the basic-cli changes to replace glue types will translate directly across.</p>",
        "id": 448179510,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719784467
    },
    {
        "content": "<ul>\n<li>Update Tutorial code samples and add Task in <a href=\"https://www.roc-lang.org/tutorial#builtin-modules\">builtin-modules</a> DONE <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span></li>\n</ul>",
        "id": 448197682,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719796735
    },
    {
        "content": "<p>Upgrade and pre-release of basic-ssg READY <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> </p>\n<ul>\n<li>PR <a href=\"https://github.com/lukewilliamboswell/basic-ssg/pull/2\">basic-ssg #2</a></li>\n<li>Pre-release <a href=\"https://github.com/lukewilliamboswell/basic-ssg/releases/tag/0.2.0\">0.2.0</a></li>\n<li>tested on aarch64 macos</li>\n</ul>",
        "id": 448202870,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719799698
    },
    {
        "content": "<p>Stage pre-release URL platforms in roc-lang/roc</p>\n<ul>\n<li>basic-ssg  <a href=\"https://github.com/roc-lang/roc/pull/6836/commits/66463c54c2a2bd21c828b0cb8b4ae29854c1a8ca\">commit</a> <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> </li>\n<li>basic-cli TODO <span aria-label=\"multiplication\" class=\"emoji emoji-2716\" role=\"img\" title=\"multiplication\">:multiplication:</span></li>\n<li>basic-webserver N/A</li>\n</ul>",
        "id": 448204822,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719800348
    },
    {
        "content": "<p>Upgrade and pre-release of basic-webserver <a href=\"https://github.com/roc-lang/basic-webserver/pull/58\">PR #58</a> READY FOR REVIEW <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 448257095,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719821298
    },
    {
        "content": "<p>We are chugging along with the Task as a built-in PRs, and I think I finally found the source of my FFI decoding issues. With the current Roc code in the <code>smores56:builtin-task</code> branch, typing the <code>args</code> Task as <code>Task (Dict Str Str) *</code> in the hosted module gives this in the CLI:</p>\n<div class=\"codehilite\"><pre><span></span><code>smores@smortress:~/dev/roc$ cargo run --bin roc ../basic-cli/examples/args.roc\n    Finished dev [unoptimized + debuginfo] target(s) in 0.15s\n     Running `target/debug/roc ../basic-cli/examples/args.roc`\n🔨 Rebuilding platform...\nParsing args...\nProgram exited with error:\n    (StdoutErr Interrupted)\n</code></pre></div>\n<p>But if I change the Task declaration to <code>args : Task (Dict Str Str) {}</code> (a.k.a. make the type static by removing the wildcard), then the code works:</p>\n<div class=\"codehilite\"><pre><span></span><code>smores@smortress:~/dev/roc$ cargo run --bin roc ../basic-cli/examples/args.roc -- div\n    Finished dev [unoptimized + debuginfo] target(s) in 0.15s\n     Running `target/debug/roc ../basic-cli/examples/args.roc -- div`\n🔨 Rebuilding platform...\nParsing args...\n[src/lib.rs:379:9] std::env::args_os().map(|os_str|\n            RocStr::from(os_str.to_string_lossy().borrow())).collect() = [\n    &quot;/proc/self/fd/3&quot;,\n    &quot;div&quot;,\n]\nError: Required option -n/--dividend is missing.\n\nUsage:\n  args-example div -n/--dividend NUM -d/--divisor NUM\n</code></pre></div>\n<p>My theory is that <code>RocResult</code> is trying to decode my <code>Result data [StdoutErr err, Exit I32 Str]</code> as a <code>Result data []</code> since the FFI definition returns <code>RocResult&lt;RocDict&lt;RocStr, RocStr&gt;, ()&gt;</code>. The extra bytes mean we interpret the underlying struct totally incorrectly. There's probably more testing to be done here, though I'm not entirely sure about how to do that yet.</p>\n<p>If this indeed our issues right now, then for now I'm going to change the <code>basic-cli</code> hosted module to only declare static types, and in the long term we should consider interpretting <code>Task ok *</code> as <code>Task ok []</code>, or better yet interpretting <code>Result ok err</code> as <code>Result ok err</code>, even if the error gets combined into a bigger tag union.</p>",
        "id": 448793734,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719997297
    },
    {
        "content": "<p>Or maybe this is just a wildcard * implementation issue, I know that there are lots of issues surrounding it at the moment.</p>",
        "id": 448794172,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719997432
    },
    {
        "content": "<h1>Builtin Task Coord (Update)</h1>\n<ul>\n<li><a href=\"https://github.com/roc-lang/roc/pull/6836\">Task as Builtin PR</a> - Almost ready for review</li>\n</ul>\n<h2>Preparations</h2>\n<ul>\n<li>Upgrade and pre-release of basic-ssg DONE <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span></li>\n<li>Update Tutorial code samples and add Task in builtin-modules DONE <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span></li>\n<li>Upgrade and pre-release of <a href=\"https://github.com/roc-lang/basic-cli/pull/217\">basic-cli PR</a> - Almost ready for review</li>\n<li>Upgrade and pre-release of <a href=\"https://github.com/roc-lang/basic-webserver/pull/58\">basic-webserver PR</a> - Almost ready for review</li>\n<li>Stage pre-release URL platforms in roc-lang/examples TODO</li>\n<li>Stage pre-release URL platforms in roc-lang/roc TODO</li>\n</ul>\n<p>We have made a lot of progress and are very close. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 448818750,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720004246
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/stream/316715-contributing/topic/Task.20as.20a.20built-in/near/447559581\">said</a>:</p>\n<blockquote>\n<p>Just a quick update on this, the issue I was running into with was that there were many <code>import pf.Task</code> statements in the <code>basic-cli</code> platform. I've tested with other built-ins, and it seems like <code>import pf.&lt;builtin&gt;</code> hangs</p>\n</blockquote>\n<p>Fixed in: <a href=\"https://github.com/roc-lang/roc/pull/6863\">https://github.com/roc-lang/roc/pull/6863</a></p>",
        "id": 448888106,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1720021939
    },
    {
        "content": "<p>I spent some time this evening updating the PR's for builtin-task (just merging really).</p>\n<p>It looks like there is one or two minor issues/failures on the roc PR, but otherwise it's looking almost ready for a testing release.</p>\n<p>I updated basic-cli and that is also looking good. There is an issue/segfault with <code>Arg.list</code> which I think may be something I broke or a known issue... <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> besides that it's also almost ready for a pre-release.</p>",
        "id": 452550250,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1721388174
    },
    {
        "content": "<blockquote>\n<p>There is an issue/segfault with <code>Arg.list</code> ...</p>\n</blockquote>\n<p>Is that with builtin-task or without?</p>",
        "id": 452557474,
        "sender_full_name": "Anton",
        "timestamp": 1721391055
    },
    {
        "content": "<p>Builtin-task</p>",
        "id": 452557902,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1721391219
    },
    {
        "content": "<p>I'm also now experiencing the segfault without builtin-task using the basic-cli 0.13 pre-release (built with the 0.13.x branch).</p>",
        "id": 452586293,
        "sender_full_name": "Anton",
        "timestamp": 1721399986
    },
    {
        "content": "<p>Many other examples are failing as well, --linker=legacy makes the issue disappear, this could be musl related</p>",
        "id": 452599594,
        "sender_full_name": "Anton",
        "timestamp": 1721403234
    },
    {
        "content": "<p>Valgrind errors:</p>\n<div class=\"codehilite\"><pre><span></span><code>==65301== Command: examples/LeastSquares/main\n==65301==\n==65301== Jump to the invalid address stated on the next line\n==65301==    at 0x0: ???\n==65301==    by 0x34E762: ??? (in /home/username/gitrepos/examples2/examples/examples/LeastSquares/main)\n==65301==  Address 0x0 is not stack&#39;d, malloc&#39;d or (recently) free&#39;d\n==65301==\n==65301==\n==65301== Process terminating with default action of signal 11 (SIGSEGV): dumping core\n==65301==  Bad permissions for mapped region at address 0x0\n==65301==    at 0x0: ???\n==65301==    by 0x34E762: ??? (in /home/username/gitrepos/examples2/examples/examples/LeastSquares/main)\n==65301==\n==65301== HEAP SUMMARY:\n==65301==     in use at exit: 0 bytes in 0 blocks\n==65301==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated\n</code></pre></div>",
        "id": 452600089,
        "sender_full_name": "Anton",
        "timestamp": 1721403402
    },
    {
        "content": "<p>Yeah, I think it is musl. I have been building locally and haven't hit this</p>",
        "id": 452626506,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721410282
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/xSUrVlSCDaZfC2S8faLrOEKu/Screenshot_20240719_194128.png\">Screenshot_20240719_194128.png</a><br>\nInteresting diff between the unique (over both files) functions in linux-x64.rh for 0.12 and 0.13 releases</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/xSUrVlSCDaZfC2S8faLrOEKu/Screenshot_20240719_194128.png\" title=\"Screenshot_20240719_194128.png\"><img src=\"/user_uploads/22008/xSUrVlSCDaZfC2S8faLrOEKu/Screenshot_20240719_194128.png\"></a></div>",
        "id": 452628304,
        "sender_full_name": "Anton",
        "timestamp": 1721411064
    },
    {
        "content": "<p>Well we ripped out all the roc glue generated types and replaced them with roc std and handrolled interfaces, also bumped the toolchain significantly. Maybe that explains the size difference?</p>",
        "id": 452647495,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1721416849
    },
    {
        "content": "<p>For the segfault.. you just gave me an idea. What if it's a dev backend issue? </p>\n<p>So I'm not 100% on how we used to generate surgical hosts. But we updated the preprocess host subcommand. </p>\n<p>We generate the host using a dylib generated by roc. It currently just uses <code>roc build --lib</code>, but does that default to dev backend on linux and maybe if we added <code>--optimize</code> it would be different? </p>\n<p>I figured it wouldn't matter because the stubbed app is what gets replaced.  But maybe it confuses things somehow?</p>",
        "id": 452649031,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1721417145
    },
    {
        "content": "<blockquote>\n<p>bumped the toolchain ...</p>\n</blockquote>\n<p>The rust toolchain is on 1.79 for both 0.12 and 0.13.</p>",
        "id": 452812440,
        "sender_full_name": "Anton",
        "timestamp": 1721466771
    },
    {
        "content": "<p>I'll check out those leads...<br>\nI'd say the missing memset in 0.13 is definitely suspicious/problematic</p>",
        "id": 452812702,
        "sender_full_name": "Anton",
        "timestamp": 1721467039
    },
    {
        "content": "<p>Missing memset?</p>",
        "id": 452852944,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721489748
    },
    {
        "content": "<p>Yeah, linux-x64.rh for 0.13 does not contain memset, but the same file does for 0.12</p>",
        "id": 452855950,
        "sender_full_name": "Anton",
        "timestamp": 1721491037
    },
    {
        "content": "<p>Rust getting smarter at removing things if you use musl?</p>",
        "id": 452856062,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721491099
    },
    {
        "content": "<p>The issue with musl is that toolchains tend so assume everything is static and can be cleaned up and hidden even if you use it.</p>",
        "id": 452856182,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721491151
    },
    {
        "content": "<p>This is probably one of the biggest reasons we need effect interpretters with all these dependency functions passed in as pointers.</p>",
        "id": 452856337,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721491208
    },
    {
        "content": "<p>I don't think those are coupled, for what it's worth</p>",
        "id": 452871752,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1721498499
    },
    {
        "content": "<p>we could get started on passing allocator functions (and the like) in from the host anytime, really</p>",
        "id": 452871897,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1721498534
    },
    {
        "content": "<p>Yeah, but unless we also pass all effects in from the host with the allocators, we still have the linker issues.</p>",
        "id": 452890229,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721503888
    },
    {
        "content": "<p>totally, but given that both are a requirement, it's worth noting that we can start on the one anytime - and then the other one becomes the only remaining blocker to fixing the linking issue</p>",
        "id": 452890710,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1721504131
    },
    {
        "content": "<p>Ah yeah! that definitely could be started at any time.</p>",
        "id": 452890825,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721504229
    },
    {
        "content": "<blockquote>\n<p>Yeah, linux-x64.rh for 0.13 does not contain memset, but the same file does for 0.12</p>\n</blockquote>\n<p>We were also hitting an error earlier (still happens) running <code>cargo build</code> without <code>--release</code> inside <code>build.roc</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: linking with `cc` failed: exit status: 1\n  |\n  = note: LC_ALL=&quot;C&quot; PATH=&quot;/home/username/.rustup/toolchains/1.79.0-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/bin:\n[...]\n&quot;/home/username/gitrepos/basic-cli/target/debug/deps/host-1af30843a687a450&quot; &quot;-Wl,--gc-sections&quot; &quot;-pie&quot; &quot;-Wl,-z,relro,-z,now&quot; &quot;-nodefaultlibs&quot;\n  = note: /usr/bin/ld: /home/username/gitrepos/basic-cli/target/debug/deps/libroc_host-2562b64005f3ca50.rlib(roc_host-2562b64005f3ca50.1t441est2wxz5auf.rcgu.o): in function `rust_main&#39;:\n          /home/username/gitrepos/basic-cli/crates/roc_host/src/lib.rs:339: undefined reference to `roc__mainForHost_1_exposed_size&#39;\n          /usr/bin/ld: /home/username/gitrepos/basic-cli/crates/roc_host/src/lib.rs:349: undefined reference to `roc__mainForHost_1_exposed_generic&#39;\n          /usr/bin/ld: /home/username/gitrepos/basic-cli/target/debug/deps/libroc_host-2562b64005f3ca50.rlib(roc_host-2562b64005f3ca50.1t441est2wxz5auf.rcgu.o): in function `roc_host::call_the_closure&#39;:\n          /home/username/gitrepos/basic-cli/crates/roc_host/src/lib.rs:368: undefined reference to `roc__mainForHost_0_caller&#39;\n          collect2: error: ld returned 1 exit status\n\n  = note: some `extern` functions couldn&#39;t be found; some native libraries may need to be installed or have their path specified\n  = note: use the `-l` flag to specify native libraries to link\n  = note: use the `cargo:rustc-link-lib` directive to specify the native libraries to link with Cargo (see https://doc.rust-lang.org/cargo/reference/build-scripts.html#rustc-link-lib)\n\nerror: could not compile `roc_host_bin` (bin &quot;host&quot;) due to 1 previous error\n</code></pre></div>\n<p>It does work with <code>cargo build --release</code>. There's a decent chance that if we fix this we fix the musl memset issue too.</p>",
        "id": 453479499,
        "sender_full_name": "Anton",
        "timestamp": 1721756701
    },
    {
        "content": "<p><code>cargo build --release</code> no longer works if I remove:</p>\n<div class=\"codehilite\"><pre><span></span><code>[profile.release]\nlto = true\nstrip = &quot;debuginfo&quot;\ncodegen-units = 1\n</code></pre></div>",
        "id": 453480309,
        "sender_full_name": "Anton",
        "timestamp": 1721757037
    },
    {
        "content": "<p>Getting close now... :)</p>",
        "id": 453480969,
        "sender_full_name": "Anton",
        "timestamp": 1721757317
    },
    {
        "content": "<p>I found it <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> </p>\n<p><code>links=app</code> was in <code>crates/roc_host_bin/Cargo.toml</code> but should be in <code>crates/roc_host/Cargo.toml</code>  <span aria-label=\"expressionless\" class=\"emoji emoji-1f611\" role=\"img\" title=\"expressionless\">:expressionless:</span></p>",
        "id": 453757754,
        "sender_full_name": "Anton",
        "timestamp": 1721842368
    },
    {
        "content": "<p>I wonder if that fixes some of our other strange segfault related errors</p>",
        "id": 453766909,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721845127
    },
    {
        "content": "<p>I merged latest main for both <a href=\"https://github.com/roc-lang/roc/pull/6836\">roc PR</a> and <a href=\"https://github.com/roc-lang/basic-cli/pull/217\">basic-cli PR</a> and have all <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span>'s. </p>\n<p><span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> I think these are good to go. You still have these marked as Draft -- can you please have a look and if you are happy with these update Ready for Review?</p>",
        "id": 454733289,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722233921
    },
    {
        "content": "<p>Just a heads up, Sam mentioned earlier that he was going on vacation so he may still be vacationing :p</p>",
        "id": 454758864,
        "sender_full_name": "Anton",
        "timestamp": 1722241648
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"361169\">@Anton</span>  yeah, I went from Japan to now a week-long choir retreat, but I planned to have 4 hours each day of free time, so I can finally get back to working on Roc</p>",
        "id": 454821154,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1722256636
    },
    {
        "content": "<p>Cool, no pressure though :)</p>",
        "id": 454821654,
        "sender_full_name": "Anton",
        "timestamp": 1722256720
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> do have to have all the effects be lambdas? Is there an issue on linux? it was working ok for me on my mac.</p>",
        "id": 455489883,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722461952
    },
    {
        "content": "<p>So the change is coming from how the type system works</p>",
        "id": 455489950,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1722461990
    },
    {
        "content": "<p>The old way had the return types as [...]_</p>",
        "id": 455490050,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1722462024
    },
    {
        "content": "<p>Which meant that you couldn't actually use the same Task with two different error types, the compiler would infer a specific one</p>",
        "id": 455490132,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1722462053
    },
    {
        "content": "<p>So it felt like you could just do Arg.list!, but that was a false promise</p>",
        "id": 455490170,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1722462072
    },
    {
        "content": "<p>This constraint comes from the fact that a static <code>Task ok *</code> currently cannot be integrated into a larger error tag union</p>",
        "id": 455490328,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1722462132
    },
    {
        "content": "<p>Since it's a top level definition, which can only have one specialization</p>",
        "id": 455490374,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1722462153
    },
    {
        "content": "<p>Now, since they're all thunks, the * can actually be expanded to another tag union, meaning we can just call <code>Arg.list! {}</code> in context in multiple different functions with different error unions</p>",
        "id": 455490652,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1722462251
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/stream/316715-contributing/topic/Task.20as.20a.20built-in/near/455490374\">said</a>:</p>\n<blockquote>\n<p>Since it's a top level definition, which can only have one specialization</p>\n</blockquote>\n<p>I think that's only true for some types but not others fwiw</p>",
        "id": 455490659,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1722462256
    },
    {
        "content": "<p>e.g. top-level <code>Num *</code> can have multiple specializations</p>",
        "id": 455490679,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1722462268
    },
    {
        "content": "<p>When I tried just using <code>Task ok *</code> I got type errors</p>",
        "id": 455490749,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1722462304
    },
    {
        "content": "<p>yeah, some types are special-cased</p>",
        "id": 455490813,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1722462332
    },
    {
        "content": "<p>I think it might actually just be <code>Num *</code> right now</p>",
        "id": 455490827,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1722462338
    },
    {
        "content": "<p>we've planned to expand that list for awhile, but haven't yet</p>",
        "id": 455490854,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1722462348
    },
    {
        "content": "<p>I think we should try and resolve the underlying type issue if possible. It was probably ok for the Arg.list workaround, but I'm concerned if we are doing this accross the board, and then may change it back again. There will be a lot of code that breaks.</p>",
        "id": 455491008,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722462408
    },
    {
        "content": "<p>If we can special case <code>Result ok *</code> and <code>Task ok *</code> that would fix this need for thunks</p>",
        "id": 455491062,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1722462432
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> I wasn't considering it was possible because I thought it was a constraint of the type system, but if what Rich is saying is right, then I totally agree, let's do the right way</p>",
        "id": 455491288,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1722462526
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> do we have written down anywhere what the \"expand this by induction to other types\" project would entail?</p>",
        "id": 455491396,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1722462582
    },
    {
        "content": "<p>I can look at the Num impl tonight after rehearsal</p>",
        "id": 455491468,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1722462603
    },
    {
        "content": "<p>i really would not recommend trying to expand this to other value types right now</p>",
        "id": 455535012,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1722482240
    },
    {
        "content": "<p>i understand that wrapping in lambdas can be annoying but i think the only other reasonable way to compile this is to desugar all polymorphic value types to lambdas after type checking, which is not easy (it's the reason it was removed)</p>",
        "id": 455535256,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1722482332
    },
    {
        "content": "<p>there is a simple way to do it, but the existing implementation in mono and the backends is not amenable to it IMO</p>",
        "id": 455535664,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1722482422
    },
    {
        "content": "<p>It sounds like a reasonable trade-off then.</p>\n<ul>\n<li>All PlatformTasks <code>Task ok *</code> will be lambdas, even if they normally wouldn't take any arguments.</li>\n<li>We can look at upgrading mono and backends in future</li>\n<li>Maybe we could review the API and find ways to make use of the additional argument.</li>\n</ul>",
        "id": 455537577,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722482984
    },
    {
        "content": "<p>Okay, just saw this. I found where we determine generalizability in the <code>compiler/constrain</code> module <a href=\"https://github.com/roc-lang/roc/blob/c64b3d92cc49b587f71e87ba872745f702dae80d/crates/compiler/constrain/src/expr.rs#L4073\">here</a>. Though as Ayaz points out, just marking <code>*</code> tag unions as generalizable isn't nearly where the work ends.</p>",
        "id": 455649653,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1722519100
    },
    {
        "content": "<p>So for now, I have all tests except for those based on the specific basic-cli version we use working in the task branch. So I think it's ready for review.</p>",
        "id": 455649879,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1722519153
    },
    {
        "content": "<p>I've marked the roc-lang PR as ready for review <a href=\"https://github.com/roc-lang/roc/pull/6836\">https://github.com/roc-lang/roc/pull/6836</a>, and I'll update the summary to facilitate reviewing it, since even though the change isn't very complicated, there are a lot of files that are touched.</p>",
        "id": 455650935,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1722519415
    },
    {
        "content": "<p>I'm just wondering what the status on this change is?</p>\n<p>I understand it's basically ready (looks like theres a recent conflict now), and we just need to coordinate a breaking change to make it happen and switch over. Or does this need further review? Ayaz has looked at it a few times and Sam has resolved the comments.</p>\n<p>I'd love to help get this change over the line.</p>",
        "id": 462028248,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1723529363
    },
    {
        "content": "<p>Thanks for bringing this up! I was thinking about it earlier today</p>",
        "id": 462028284,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1723529393
    },
    {
        "content": "<p>I'll work on resolving those conflicts now</p>",
        "id": 462028354,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1723529411
    },
    {
        "content": "<p>I can help with basic-webserver, and merge the latest main with API changes into that branch</p>",
        "id": 462028458,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1723529471
    },
    {
        "content": "<p>I think once I do that, <span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> (or someone with the same perms) will need to make a test release of basic-cli, then we can ensure the roc-lang PR works</p>",
        "id": 462028469,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1723529475
    },
    {
        "content": "<p>I think we can make a testing release of roc by making a PR and uncommenting the right part in CI script, we just can't upload the binaries without Anton but he can do that later if it all passes.</p>",
        "id": 462028587,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1723529546
    },
    {
        "content": "<p>We need roc before we'll get a passing release of basic-cli right?</p>",
        "id": 462028606,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1723529567
    },
    {
        "content": "<p>Well, Roc can't be merged without updating the tests in Roc that use hardcoded basic-cli versions</p>",
        "id": 462028655,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1723529601
    },
    {
        "content": "<p>Unless we assert \"it'll be fine\" and just do it anyway</p>",
        "id": 462028677,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1723529623
    },
    {
        "content": "<p>Which feels a little iffy to me, but I'd be okay with</p>",
        "id": 462028692,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1723529633
    },
    {
        "content": "<p>I mean, we can make a PR to build a testing release of Roc -- I don't think that runs CI tests or anything</p>",
        "id": 462028698,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1723529641
    },
    {
        "content": "<p>I think we can do it like <a href=\"https://github.com/roc-lang/roc/pull/6908\">https://github.com/roc-lang/roc/pull/6908</a></p>",
        "id": 462028864,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1723529729
    },
    {
        "content": "<p>That would be great!</p>",
        "id": 462029021,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1723529803
    },
    {
        "content": "<p>It looks like we just make a PR from the task as builtin branch, and uncomment/comment the line in those five yaml files.</p>",
        "id": 462029228,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1723529914
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> just to be clear, I'd make a branch on top of my own <code>builtin-task</code> branch, do the YAML flips as Anton does in <a href=\"https://github.com/roc-lang/roc/issues/6908\">#6908</a>, and then have him upload the created binary as a test release, which we'd then use to test basic-cli?</p>",
        "id": 462034576,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1723531937
    },
    {
        "content": "<p>After which we'd merge the <a href=\"https://github.com/roc-lang/basic-cli/pull/217\">basic-cli PR</a> and then the roc PR after that?</p>",
        "id": 462034727,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1723531982
    },
    {
        "content": "<blockquote>\n<p>I'd love to help get this change over the line.</p>\n</blockquote>\n<p>Yeah, I want to get this done but I really want to fix <a href=\"http://github.com/roc-lang/examples/pull/192\">github.com/roc-lang/examples/pull/192</a> first</p>",
        "id": 462057767,
        "sender_full_name": "Anton",
        "timestamp": 1723539463
    },
    {
        "content": "<p>btw instead of building Roc releases, it should be a lot easier to use nix to use a specific Roc commit like <a href=\"#narrow/stream/231634-beginners/topic/basic-cli.20http-get-json.20example/near/460027149\">here</a>. It's not that important that ubuntu CI fails as long as nix CI passes for now.</p>",
        "id": 462058598,
        "sender_full_name": "Anton",
        "timestamp": 1723539744
    },
    {
        "content": "<blockquote>\n<p>btw instead of building Roc releases, it should be a lot easier to use nix to use a specific Roc commit</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> can we use this to merge builtin task into main though? I thought we needed a release so that we can reference that and have CI pass before we can merge the branch into main.</p>",
        "id": 462064738,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1723541915
    },
    {
        "content": "<blockquote>\n<p>@Anton can we use this to merge builtin task into main though?</p>\n</blockquote>\n<p>No, for the final merge you'll need a release. But you'll want to make sure basic-cli and basic-webserver tests pass (using nix to get that specific roc commit) before you make that release.</p>",
        "id": 462065279,
        "sender_full_name": "Anton",
        "timestamp": 1723542041
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> -- sorry I missed your comment on using an LLM to update the basic-webserver PR until after I fixed it. </p>\n<p>I did a quick pass over all three PRs, and from what I can tell the roc PR <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span>, and basic-cli PR <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span>  are good to go. There is just this LLVM issue blocking basic-webserver <span aria-label=\"cross mark\" class=\"emoji emoji-274c\" role=\"img\" title=\"cross mark\">:cross_mark:</span>  (and therefore the Task as builtin breaking change). The fix for this will be an update to the roc PR.</p>\n<div class=\"codehilite\"><pre><span></span><code>+ roc build --prebuilt-platform --linker=legacy examples/dir.roc\nthread &#39;main&#39; panicked at /Users/luke/.cargo/git/checkouts/inkwell-55729a4c43239568/d1a5963/src/values/enums.rs:302:13:\nFound StructValue(StructValue { struct_value: Value { name: &quot;load_result&quot;, address: 0x6000030b1040, is_const: false, is_null: false, is_undef: false, llvm_value: &quot;  %load_result = load { [0 x i64], [3 x i64], i8, [7 x i8] }, ptr %result_value, align 8, !dbg !10&quot;, llvm_type: &quot;{ [0 x i64], [3 x i64], i8, [7 x i8] }&quot; } }) but expected PointerValue variant\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>",
        "id": 464199509,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724285446
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> -- does this LLVM look like an easy fix? I suspect there's just a typo somewhere in the task and builtin PR.</p>",
        "id": 464199804,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724285621
    },
    {
        "content": "<p>It looks like we have an already loaded struct but didn't realize so. As such, we are trying to load the struct from a pointer even though we already have the struct loaded.</p>",
        "id": 464199898,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724285685
    },
    {
        "content": "<p>Probably a minor bug</p>",
        "id": 464199900,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724285688
    },
    {
        "content": "<blockquote>\n<p>sorry I missed your comment on using an LLM to update the basic-webserver PR until after I fixed it.</p>\n</blockquote>\n<p>No problem, I got started on it but it requires some time to set up all the plumbing code, so I wanted to do it manually for now anyway</p>",
        "id": 464591894,
        "sender_full_name": "Anton",
        "timestamp": 1724404083
    },
    {
        "content": "<p>More detailed error and backtrace:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;main&#39; panicked at crates/compiler/gen_llvm/src/llvm/build.rs:3776:17:\n&quot;PlatformTask_task_closure_stderrLine_146823d2bf8fc0c097442048ad932e5338966c8ef5244f2d062b7bbb52d84c7&quot;: StructValue(StructValue { struct_value: Value { name: &quot;load_result&quot;, address: 0x6000029b9c40, is_const: false, is_null: false, is_undef: false, llvm_value: &quot;  %load_result = load { [0 x i64], [3 x i64], i8, [7 x i8] }, ptr %result_value, align 8, !dbg !10&quot;, llvm_type: &quot;{ [0 x i64], [3 x i64], i8, [7 x i8] }&quot; } })\nUnion(NonRecursive([[InLayout(STR)], [InLayout(UNIT)]]))\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n(base) ➜  roc git:(task-builtins) ✗ RUST_BACKTRACE=1 ROC_CHECK_MONO_IR=1 cargo run ../roc-webserver/examples/dir.roc\n    Finished dev [unoptimized + debuginfo] target(s) in 0.29s\n     Running `target/debug/roc ../roc-webserver/examples/dir.roc`\n🔨 Rebuilding platform...\nthread &#39;main&#39; panicked at crates/compiler/gen_llvm/src/llvm/build.rs:3776:17:\n&quot;PlatformTask_task_closure_stderrLine_146823d2bf8fc0c097442048ad932e5338966c8ef5244f2d062b7bbb52d84c7&quot;: StructValue(StructValue { struct_value: Value { name: &quot;load_result&quot;, address: 0x60000008d880, is_const: false, is_null: false, is_undef: false, llvm_value: &quot;  %load_result = load { [0 x i64], [3 x i64], i8, [7 x i8] }, ptr %result_value, align 8, !dbg !10&quot;, llvm_type: &quot;{ [0 x i64], [3 x i64], i8, [7 x i8] }&quot; } })\nUnion(NonRecursive([[InLayout(STR)], [InLayout(UNIT)]]))\nstack backtrace:\n   0: rust_begin_unwind\n             at /rustc/25ef9e3d85d934b27d9dada2f9dd52b1dc63bb04/library/std/src/panicking.rs:647:5\n   1: core::panicking::panic_fmt\n             at /rustc/25ef9e3d85d934b27d9dada2f9dd52b1dc63bb04/library/core/src/panicking.rs:72:14\n   2: build_return\n             at ./crates/compiler/gen_llvm/src/llvm/build.rs:3776:17\n   3: build_exp_stmt\n             at ./crates/compiler/gen_llvm/src/llvm/build.rs:3232:13\n   4: build_exp_stmt\n             at ./crates/compiler/gen_llvm/src/llvm/build.rs:3451:21\n   5: build_exp_stmt\n             at ./crates/compiler/gen_llvm/src/llvm/build.rs:3213:26\n   6: build_proc\n             at ./crates/compiler/gen_llvm/src/llvm/build.rs:6261:16\n   7: build_procedures_help\n             at ./crates/compiler/gen_llvm/src/llvm/build.rs:5803:13\n   8: build_procedures\n             at ./crates/compiler/gen_llvm/src/llvm/build.rs:5557:25\n   9: gen_from_mono_module_llvm\n             at ./crates/compiler/build/src/program.rs:239:5\n  10: gen_from_mono_module\n             at ./crates/compiler/build/src/program.rs:125:47\n  11: build_loaded_file\n             at ./crates/compiler/build/src/program.rs:924:61\n  12: build_file\n             at ./crates/compiler/build/src/program.rs:735:5\n  13: build\n             at ./crates/cli/src/lib.rs:904:27\n  14: main\n             at ./crates/cli/src/main.rs:48:17\n</code></pre></div>",
        "id": 464795834,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724479159
    },
    {
        "content": "<p>Caused by <code>stderrLine</code> somehow. Expected a pointer for somthing passed by reference. Instead got a tag with a struct in it.</p>",
        "id": 464795973,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724479220
    },
    {
        "content": "<p>They type looks like it may be equivalent to <code>Result Str []</code></p>",
        "id": 464796010,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724479241
    },
    {
        "content": "<p>I'm assuming this is a bug in the signature generation of the new task hosted module equivalent.</p>",
        "id": 464796161,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724479317
    },
    {
        "content": "<p>Just to get this out of private chats and give an update:</p>\n<p>Fundamentally the issue is caused by the platform api getting expanded by open tag unions and type variables. This leads to the platform static api having a different type than the final type that roc is generating.</p>\n<p>In the specific case above we have something like this:<br>\n<code>stdoutLine : Str -&gt; Task {} *</code></p>\n<p>What this ends up becoming in basic webserver is:<br>\n<code>stdoutLine : Str -&gt; Task {} [ServerErr Str]</code></p>\n<p>Thus the return type of <code>[ C Str, C {} ]</code>. <code>Err</code> case of <code>Str</code> and <code>Ok</code> case of nothing.</p>\n<hr>\n<p>We are fundamentally missing a way to make sure that the platform api is static and never expands to support extra tag union variants through open tag merging. This would also be hit with the platform api returning an error union that gets expanded. Cause <code>Task Str [MyError]</code> might end up expanding to <code>Task Str [MyError, YourError Str]</code> which would change the layout and break the type.</p>",
        "id": 464809079,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724487044
    },
    {
        "content": "<p>Do we have any way to lock down platform type variables and then programmatically expand them?</p>\n<p>Like we really want <code>stdoutLine : Str -&gt; Task {} []</code> to mean that <code>stdoutLine</code> is infallible and the platform host function will return a <code>Result {} []</code>. We then want to force roc to deal with mapping the <code>Result {} []</code> to a <code>Result {} [ServerErr Str]</code> such that the platform api stays restricted but the resulting type can be used as expected.</p>",
        "id": 464809355,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724487357
    },
    {
        "content": "<p>hm, could we make the hosted version be <code>Str -&gt; Task {} {}</code>?</p>",
        "id": 464827433,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724498643
    },
    {
        "content": "<p>that doesn't express what we want it to express, but it certainly wouldn't expand!</p>",
        "id": 464827490,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724498663
    },
    {
        "content": "<p>I mean we can, but it is a general problem that I think we need to solve. Any platform returning a tag union or a <code>*</code> from host to app could break based on how it is used.</p>",
        "id": 464867838,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724515811
    },
    {
        "content": "<p>Also, you have to make the <code>{}</code> error case back to something that can merge with tags to make it happily work with await and error accumulation</p>",
        "id": 464868183,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724515963
    },
    {
        "content": "<p>I mean in this case you can do <code>|&gt; Task.onErr \\_ -&gt; Task.ok {}</code>, but that isn't a general solution.</p>",
        "id": 464868338,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724516035
    },
    {
        "content": "<p>yeah I mainly meant it as a way to unblock in the short term</p>",
        "id": 464868598,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724516135
    },
    {
        "content": "<p>not as a good long term solution <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 464868646,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724516149
    },
    {
        "content": "<p>I guess you could technically do this.</p>\n<p>For everything infallible:<br>\n<code>|&gt; Task.err \\{} -&gt; crash \"unreachable\"</code></p>\n<p>For everything fallible like<br>\n<code>Task Str [Eof]</code><br>\nYou can do:</p>\n<div class=\"codehilite\"><pre><span></span><code>|&gt; Task.mapErr \\err -&gt;\n        when err is\n            # manually list out all cases\n            Eof -&gt; Eof\n</code></pre></div>",
        "id": 464868891,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724516200
    },
    {
        "content": "<p>We theoretically could even do this programmatically. Would need to ban <code>*</code> and <code>[]</code> in the API. Cause I don't know of a way to map those.</p>",
        "id": 464869189,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724516329
    },
    {
        "content": "<p>But maybe there is a way to cleanly map all types.</p>",
        "id": 464869277,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724516376
    },
    {
        "content": "<p>Made the updates I think we need for basic-webserver.</p>\n<p>I think I found a new bug, but I could have done something silly. I've just smashed out these changes and need take a much closer look to see, but definitely haven't seen this issue before. </p>\n<div class=\"codehilite\"><pre><span></span><code>$ roc build platform/libapp.roc\n🔨 Rebuilding platform...\nthread &#39;main&#39; panicked at crates/compiler/gen_llvm/src/llvm/build.rs:3391:30:\ncalled `Result::unwrap()` on an `Err` value: AlignmentError(&quot;The src_align_bytes argument to build_memcpy was not a power of 2.&quot;)\n</code></pre></div>",
        "id": 464998167,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724585307
    },
    {
        "content": "<p>I think I know the issue.</p>",
        "id": 465030805,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724607520
    },
    {
        "content": "<p><code>0</code> isn't a valid alignment, but we generate it.</p>",
        "id": 465030808,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724607531
    },
    {
        "content": "<p>A zero sized type still has an alignment of <code>1</code>.</p>",
        "id": 465030830,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724607549
    },
    {
        "content": "<p>I think this should fix it, but haven't tested on basic-webserver: <a href=\"https://github.com/roc-lang/roc/pull/7024\">https://github.com/roc-lang/roc/pull/7024</a></p>\n<p>branch is <code>align-1</code> if you want to test locallly.</p>",
        "id": 465035088,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724611788
    },
    {
        "content": "<p>Ok, so I think we're <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> across the board now -- when testing locally using nix on my mac. <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> </p>\n<p>All that remains now I think some CI magic and release coordination etc. </p>\n<p>The PR's are pointing at the latest commit on the builtin-task branch on roc.</p>",
        "id": 465043149,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724619991
    },
    {
        "content": "<p>WOW</p>",
        "id": 465043285,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724620155
    },
    {
        "content": "<p>I'm gonna be free in an hour for a few hours, and then tonight for a few hours after that. Or we can try to coordinate some other day soon?</p>",
        "id": 465043297,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724620191
    },
    {
        "content": "<p>Or go without me! Whatever works</p>",
        "id": 465043302,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724620200
    },
    {
        "content": "<p>It's all over to Anton from here I think.</p>",
        "id": 465043349,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724620215
    },
    {
        "content": "<p>Thanks for all the work from <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> , <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> , and <span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> , you've all been instrumental to this massive effort!</p>",
        "id": 465043368,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724620237
    },
    {
        "content": "<p>Actually, could you give the webserver PR a once over. I made a bunch of fixes very last night, I'm going to be sitting in an airport waiting for a flight in an hour or so.</p>",
        "id": 465043450,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724620339
    },
    {
        "content": "<p>Sure</p>",
        "id": 465044092,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724621152
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> I left a few comments a couple days ago, but it's otherwise good, and now approved</p>",
        "id": 465044401,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724621495
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> </p>\n<p>Any chance you can attempt to produce an error if a platform tasks has an unbound <code>[]</code> or <code>*</code>? Like preferably we would automatically generate the mapping I mentioned about to avoid accidentally expanding types, but this is definitely a case where it will easily lead to bugs and forces platforms to have worse apis (for example, all of our strings being used as error types for basic CLI instead of tags. That is a terrible API to workaround bugs like this cause by expanding tags).</p>",
        "id": 465046819,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724624495
    },
    {
        "content": "<p>Let me try to do that once I get through security in 20 minutes</p>",
        "id": 465046877,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724624533
    },
    {
        "content": "<p>Like landing this with the edge cases is fine, but I really think we need a proper fix here. At a minimum we really need proper errors to guide a platform author</p>",
        "id": 465046881,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724624540
    },
    {
        "content": "<p>Yeah, I was internally worried about the PR size, but it's already so big, why not make it cleaner to avoid more and more breaking changes</p>",
        "id": 465046909,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724624590
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/316715-contributing/topic/Task.20as.20a.20built-in/near/465046819\">said</a>:</p>\n<blockquote>\n<p>for example, all of our strings being used as error types for basic CLI instead of tags. That is a terrible API to workaround bugs like this cause by expanding tags).</p>\n</blockquote>\n<p>Can we please break this into a separate branch and PR? (on top of builtin-task)</p>\n<p>I've got everything happy on the builtin-task branch, and we can merge this later as a non-breaking change in roc. </p>\n<p>Not a big problem, just have to do another round of nix flake updates and running all the tests.</p>",
        "id": 465047268,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724625055
    },
    {
        "content": "<p>It seems like just waiting for everything to merge would be easier, then. How bad would doing it right after merging this be, <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> ?</p>",
        "id": 465047357,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724625189
    },
    {
        "content": "<p>Feel free to merge. I just don't want this to be forgotten</p>",
        "id": 465047565,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724625438
    },
    {
        "content": "<p>It just a really easy edge to hit and the worse part is the platform author may not be aware the bug exists until a user writes complex enough code to break things</p>",
        "id": 465047635,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724625495
    },
    {
        "content": "<p>I will DEFINITELY handle it in the next 48 hours</p>",
        "id": 465047682,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724625588
    },
    {
        "content": "<p>Anton will be online in 12hrs or so... if the PR is merging into the builtin-task branch he may be able to include it in the release. We will need a pre-release of basic-cli first anyway before either of the roc PR's could pass CI.</p>\n<p>My thoughts are if we keep it in a separate branch/PR then Anton can decide what will be easiest.</p>\n<p>For similar changes (against breaking releases) he has asked me to do it this way.</p>",
        "id": 465047887,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724625788
    },
    {
        "content": "<p>Okay, on it</p>",
        "id": 465048022,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724625933
    },
    {
        "content": "<p>I think I found a blocking issue, just looking into it now. It only comes up when you go to build a URL package for the platform. </p>\n<p>Maybe we should add a check in our CI for this on basic-cli/webserver (just using .tar.gz). </p>\n<div class=\"codehilite\"><pre><span></span><code>14:34:04 ~/Documents/GitHub/basic-webserver release $ roc build --bundle .tar.br platform/main.roc\nCompressing with Brotli at maximum quality level…\n\n(Note: Brotli compression can take awhile! Using --bundle .tar.gz takes less time, but usually produces a significantly larger output file. Brotli is generally worth the up-front wait if this is a file people will be downloading!)\n\nthread &#39;main&#39; panicked at crates/packaging/src/tarball.rs:279:9:\nnot yet implemented\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>",
        "id": 465080223,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724647029
    },
    {
        "content": "<p>Blocking, but seemingly unrelated. Do you disagree?</p>",
        "id": 465080305,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724647088
    },
    {
        "content": "<p>That seems like a good thing to test, unless it would significantly lengthen our CI testing wait</p>",
        "id": 465080324,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724647113
    },
    {
        "content": "<p>Well it has to be related I think, it's a panic when parsing a platform module header</p>",
        "id": 465080457,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724647171
    },
    {
        "content": "<p>Ok, maybe it's not a problem... and I had just done something strange locally</p>",
        "id": 465081930,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724648074
    },
    {
        "content": "<p>Yeah, sorry I think that was a false alarm.</p>",
        "id": 465082130,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724648233
    },
    {
        "content": "<p>I must have messed something up with versions of Roc</p>",
        "id": 465082140,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724648244
    },
    {
        "content": "<p>Yeah, I was gonna point out that you used <code>roc</code>, not <code>/Users/mrcoolguy/roc/target/release/roc</code></p>",
        "id": 465082215,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724648291
    },
    {
        "content": "<p>Testing that now</p>",
        "id": 465082262,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724648340
    },
    {
        "content": "<p>Yeah, that was the giveaway actually... because my nix shell normally looks like <code>192-168-1-103:basic-cli luke$</code></p>",
        "id": 465082274,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724648349
    },
    {
        "content": "<p>So the version of roc I have my OS pointing to is definitely long since out of date</p>",
        "id": 465082296,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724648371
    },
    {
        "content": "<p>Yep, it broke with global <code>roc</code>, and worked with the Task version</p>",
        "id": 465082302,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724648378
    },
    {
        "content": "<p>I use rocup, and because of the recent unblocking efforts, the latest binary is from August 23rd</p>",
        "id": 465082495,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724648440
    },
    {
        "content": "<p>Would recommend <a href=\"https://github.com/appblue/rocup\">rocup</a></p>",
        "id": 465082527,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724648458
    },
    {
        "content": "<p>I'm switching between branches so much I couldn't imagine doing things without nix now.</p>",
        "id": 465082653,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724648523
    },
    {
        "content": "<p>That's the way to be, yes</p>",
        "id": 465082717,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724648574
    },
    {
        "content": "<p>Not to get <em>too</em> off topic, but: I use rocup for general package dev because it's easier, and nix for everything else (e.g. language/platform dev)</p>",
        "id": 465082761,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724648615
    },
    {
        "content": "<p><a href=\"https://github.com/lukewilliamboswell/roc-htmx-tailwindcss-demo/pull/1\">https://github.com/lukewilliamboswell/roc-htmx-tailwindcss-demo/pull/1</a></p>\n<p>Upgraded the roc-htmx-tailwindcss demo app using a release I made and it's working well <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> <img alt=\":roc:\" class=\"emoji\" src=\"https://avatars.zulip.com/22008/emoji/images/5f42d943.png\" title=\"roc\"></p>",
        "id": 465084535,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724649275
    },
    {
        "content": "<p>Approved!</p>",
        "id": 465085839,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724649707
    },
    {
        "content": "<p>I'm trying to update rtl to builtin task.. and seeing a cryptic type error that may or may not be related...</p>\n<div class=\"codehilite\"><pre><span></span><code>15:58:55 ~/Documents/GitHub/rtl builtin-task $ roc check rtl.roc\n\n── TYPE MISMATCH in rtl.roc ────────────────────────────────────────────────────\n\nThis 1st argument to this function has an unexpected type:\n\n1│  app [main] {\n\n\nThis Utc.now value is a:\n\n    ({} -&gt; Task Utc.Utc *)\n\nBut this function needs its 1st argument to be:\n\n    Task a b\n\nTip: Add type annotations to functions or values to help you figure\nthis out.\n\n────────────────────────────────────────────────────────────────────────────────\n\n1 error and 14 warnings found in 48 ms\n</code></pre></div>",
        "id": 465090245,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724651990
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>main =\n\n    start = Utc.now! {}\n\n    cliParser =\n        { Cli.combine &lt;-\n    &lt;---- snipped----&gt;\n</code></pre></div>",
        "id": 465090317,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724652012
    },
    {
        "content": "<p>The implication there is that the desugaring for the ! bangs are not adding regions, so they show their type errors at the start of the document</p>",
        "id": 465092405,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724653055
    },
    {
        "content": "<p>If you add explicit annotations to the definitions, do you see anything more helpful?</p>",
        "id": 465092521,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724653109
    },
    {
        "content": "<p>It doesn't really help</p>\n<div class=\"codehilite\"><pre><span></span><code>main : Task {} [Exit I32 Str]_\nmain =\n\n    start : Utc\n    start = Utc.now! {}\n\n    cliParser : Cli.CliParser { maybeInputDir : _, maybeOutputDir : _, maybeExtension : _  }\n    cliParser =\n        { Cli.combine &lt;-\n</code></pre></div>",
        "id": 465093548,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724653617
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>$ roc check rtl.roc\n\n── TYPE MISMATCH in rtl.roc ────────────────────────────────────────────────────\n\nThis 1st argument to this function has an unexpected type:\n\n1│  app [main] {\n\n\nThis Utc.now value is a:\n\n    ({} -&gt; Task Utc.Utc *)\n\nBut this function needs its 1st argument to be:\n\n    Task a b\n\nTip: Add type annotations to functions or values to help you figure\nthis out.\n\n────────────────────────────────────────────────────────────────────────────────\n\n1 error and 14 warnings found in 46 ms\n</code></pre></div>",
        "id": 465093571,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724653630
    },
    {
        "content": "<p>I'll check it out</p>",
        "id": 465093769,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724653721
    },
    {
        "content": "<p>There's another <code>Utc.now!</code> on line 94 that needs <code>{}</code> as an arg</p>",
        "id": 465095717,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724654639
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span></p>",
        "id": 465095731,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724654642
    },
    {
        "content": "<p><span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 465096600,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724655036
    },
    {
        "content": "<p>Oh man, I'd really like regions in that error message</p>",
        "id": 465096656,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724655062
    },
    {
        "content": "<p>Yeah...</p>",
        "id": 465096772,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724655120
    },
    {
        "content": "<p>PRs have been reviewed, I'll build the TESTING release tomorrow <span aria-label=\"rocket\" class=\"emoji emoji-1f680\" role=\"img\" title=\"rocket\">:rocket:</span></p>",
        "id": 465254132,
        "sender_full_name": "Anton",
        "timestamp": 1724698468
    },
    {
        "content": "<p>I've made the requested changes on the PR, we're looking good</p>",
        "id": 465278362,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724710015
    },
    {
        "content": "<p>I ran into <code>No borrow signature for LambdaName</code> on <code>roc build ./examples/Tasks/main.roc</code>when testing the examples with the latest basic-cli pre-release.<br>\nI'm done for today, so feel free to take a stab at it</p>",
        "id": 465527145,
        "sender_full_name": "Anton",
        "timestamp": 1724782725
    },
    {
        "content": "<p>I'll check it out later</p>",
        "id": 465527317,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724782800
    },
    {
        "content": "<p>I forgot to do <code>roc check</code>, I need to add that to the error message:</p>\n<div class=\"codehilite\"><pre><span></span><code>❯ roc check ./examples/Tasks/main.roc\n\n── TYPE MISMATCH in ./examples/Tasks/main.roc ──────────────────────────────────\n\nThis 1st argument to this function has an unexpected type:\n\n21│      startTime = Utc.now!\n                     ^^^^^^^^\n\nThis Utc.now value is a:\n\n    ({} -&gt; Task Utc.Utc *)\n\nBut this function needs its 1st argument to be:\n\n    Task a b\n\nTip: Add type annotations to functions or values to help you figure\nthis out.\n\n\n── TYPE MISMATCH in ./examples/Tasks/main.roc ──────────────────────────────────\n\nThis 1st argument to this function has an unexpected type:\n\n47│      endTime = Utc.now!\n                   ^^^^^^^^\n\nThis Utc.now value is a:\n\n    ({} -&gt; Task Utc.Utc *)\n\nBut this function needs its 1st argument to be:\n\n    Task a b\n\nTip: Add type annotations to functions or values to help you figure\nthis out.\n\n────────────────────────────────────────────────────────────────────────────────\n\n2 errors and 0 warnings found in 67 ms\n</code></pre></div>\n<p>I think I saw a similar issue recently, but I can't find it anymore</p>",
        "id": 465527730,
        "sender_full_name": "Anton",
        "timestamp": 1724782934
    },
    {
        "content": "<p>Easy fix, just add a {} because they're thunks</p>",
        "id": 465527879,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724782990
    },
    {
        "content": "<p>I can do it</p>",
        "id": 465527885,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724782994
    },
    {
        "content": "<p>Haha, I glossed over the tip (I wrote that one too :p ):</p>\n<div class=\"codehilite\"><pre><span></span><code>Tip: This can happen when you call a function with less arguments than it expects.\n        Like `Arg.list!` instead of `Arg.list! {}`\n</code></pre></div>",
        "id": 465528153,
        "sender_full_name": "Anton",
        "timestamp": 1724783100
    },
    {
        "content": "<p>Could someone actually give me contributor access for <a href=\"https://github.com/roc-lang/examples/pulls\">roc/examples</a>?</p>",
        "id": 465530573,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724784026
    },
    {
        "content": "<p>I don't believe I can help with this PR without it</p>",
        "id": 465530645,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724784039
    },
    {
        "content": "<p>done!</p>",
        "id": 465543434,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724787218
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 465549680,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724788716
    },
    {
        "content": "<p>It's nice that hello world is now shorter and also does not contain a new concept (for beginners) <code>Task</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">app</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">pf</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"n\">platform</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/roc-lang/basic-cli/releases/download/0.15.0/SlwdbJ-3GR7uBWQo6zlmYWNYOxnvo8r6YABXD-45UOw.tar.br\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"kr\">import</span><span class=\"w\"> </span><span class=\"nn\">pf.Stdout</span>\n\n<span class=\"nf\">main</span><span class=\"w\"> </span><span class=\"ow\">=</span>\n<span class=\"w\">    </span><span class=\"kt\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"s\">\"Hello, World!\"</span>\n</code></pre></div>",
        "id": 466320535,
        "sender_full_name": "Anton",
        "timestamp": 1725041523
    }
]