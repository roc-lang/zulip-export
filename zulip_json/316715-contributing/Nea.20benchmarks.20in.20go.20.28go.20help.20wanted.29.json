[
    {
        "content": "<p>this may seem off-topic but it's relevant: I'm trying to write benchmarks in go to compare performance to nea (our roc webserver). I don't know any go, so I have no idea what I'm doing, and could use some help here</p>\n<p>the server below should just serve the string \"hello world!\". But curl does not actually find that </p>\n<div class=\"codehilite\"><pre><span></span><code>&gt; curl -i 127.0.0.1:8080\nHTTP/1.1 200 OK\nDate: Wed, 17 Jan 2024 10:20:01 GMT\nContent-Length: 0\n</code></pre></div>\n<p>Ultimately I want to convert these benchmarks to use go. It is important that there is just one thread doing the listening on a socket, and then work gets distributed to N worker threads that process the request and send a response.</p>\n<p><a href=\"https://github.com/tweedegolf/nea/tree/main/benchmarks/roc-nea\">https://github.com/tweedegolf/nea/tree/main/benchmarks/roc-nea</a></p>\n<p>Help would be most welcome!</p>\n<div class=\"codehilite\" data-code-language=\"Go\"><pre><span></span><code><span class=\"kn\">package</span><span class=\"w\"> </span><span class=\"nx\">main</span>\n\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"s\">\"fmt\"</span>\n<span class=\"w\">    </span><span class=\"s\">\"net/http\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"s\">\"embed\"</span>\n\n<span class=\"kd\">var</span><span class=\"w\"> </span><span class=\"nx\">workerCount</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"kd\">var</span><span class=\"w\"> </span><span class=\"nx\">workerPool</span><span class=\"w\"> </span><span class=\"kd\">chan</span><span class=\"w\"> </span><span class=\"kd\">struct</span><span class=\"p\">{}</span>\n\n<span class=\"kd\">func</span><span class=\"w\"> </span><span class=\"nx\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// Create a buffered channel to limit the number of concurrent worker threads</span>\n<span class=\"w\">    </span><span class=\"nx\">workerPool</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"nb\">make</span><span class=\"p\">(</span><span class=\"kd\">chan</span><span class=\"w\"> </span><span class=\"kd\">struct</span><span class=\"p\">{},</span><span class=\"w\"> </span><span class=\"nx\">workerCount</span><span class=\"p\">)</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Handle requests using a single IO thread</span>\n<span class=\"w\">    </span><span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">HandleFunc</span><span class=\"p\">(</span><span class=\"s\">\"/\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kd\">func</span><span class=\"p\">(</span><span class=\"nx\">w</span><span class=\"w\"> </span><span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">ResponseWriter</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">r</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">Request</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// Acquire a worker thread from the pool</span>\n<span class=\"w\">        </span><span class=\"nx\">workerPool</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"kd\">struct</span><span class=\"p\">{}{}</span>\n\n<span class=\"w\">        </span><span class=\"c1\">// Handle the request in a goroutine</span>\n<span class=\"w\">        </span><span class=\"k\">go</span><span class=\"w\"> </span><span class=\"kd\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"c1\">// Ensure the worker is released back to the pool when done</span>\n<span class=\"w\">            </span><span class=\"k\">defer</span><span class=\"w\"> </span><span class=\"kd\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"o\">&lt;-</span><span class=\"nx\">workerPool</span>\n<span class=\"w\">            </span><span class=\"p\">}()</span>\n\n<span class=\"w\">            </span><span class=\"c1\">// Handle the actual request (in this case, just returning \"Hello, World!\")</span>\n<span class=\"w\">            </span><span class=\"nx\">handleRequest</span><span class=\"p\">(</span><span class=\"nx\">w</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">r</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">}()</span>\n<span class=\"w\">    </span><span class=\"p\">})</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Start the web server on port 8080</span>\n<span class=\"w\">    </span><span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nx\">Println</span><span class=\"p\">(</span><span class=\"s\">\"Server listening on :8080\"</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">ListenAndServe</span><span class=\"p\">(</span><span class=\"s\">\":8080\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">nil</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">func</span><span class=\"w\"> </span><span class=\"nx\">handleRequest</span><span class=\"p\">(</span><span class=\"nx\">w</span><span class=\"w\"> </span><span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">ResponseWriter</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">r</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">Request</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// Simulate some work being done by the worker</span>\n<span class=\"w\">    </span><span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nx\">Println</span><span class=\"p\">(</span><span class=\"s\">\"Processing request...\"</span><span class=\"p\">)</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Set the Content-Type header to plain text</span>\n<span class=\"w\">    </span><span class=\"nx\">w</span><span class=\"p\">.</span><span class=\"nx\">Header</span><span class=\"p\">().</span><span class=\"nx\">Set</span><span class=\"p\">(</span><span class=\"s\">\"Content-Type\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"text/plain\"</span><span class=\"p\">)</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Get the response string</span>\n<span class=\"w\">    </span><span class=\"nx\">response</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"s\">\"Hello, World!\"</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Set the Content-Length header</span>\n<span class=\"w\">    </span><span class=\"nx\">w</span><span class=\"p\">.</span><span class=\"nx\">Header</span><span class=\"p\">().</span><span class=\"nx\">Set</span><span class=\"p\">(</span><span class=\"s\">\"Content-Length\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nx\">Sprint</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">)))</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Write the response body</span>\n<span class=\"w\">    </span><span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nx\">Fprint</span><span class=\"p\">(</span><span class=\"nx\">w</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">response</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 415995161,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1705486949
    },
    {
        "content": "<p>Not a solution, will need to play with the code later cause that looks like it should work. Anyway, general questions:<br>\nDo you want to limit go workers in that way? Goroutines are meant to be exceptionally cheap and should essentially be treated like async contexts. So they generally shouldn't be limited like regular threads.</p>",
        "id": 416057714,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705506078
    },
    {
        "content": "<p>Go will automatically limit the number of actual threads</p>",
        "id": 416057780,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705506095
    },
    {
        "content": "<p>There is a bug in the code. The go call in the callback function does not sync. So the callback returns before the inner go function runs. This means that the function handleRequest gets called after the request handler is finished. In this case, the variables r and w are not valid anymore. You cannot write \"hello world\" to the client, after the connection is closed.</p>\n<p>Go starts a separate gorotine for any request anyway. So there is no need to start another one. To fix your code, you can just remove the line \"go func()\"</p>\n<p>I also would not use a Worker Pool.</p>",
        "id": 416076062,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1705510192
    },
    {
        "content": "<p>Cool, I guessed something along those lines but haven't used go in a long while so didn't remember for sure.</p>",
        "id": 416080391,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705511416
    },
    {
        "content": "<p>I assume for this work, probably just want to limit the number of system threads go uses with GOMAXPROCS</p>",
        "id": 416080571,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705511485
    },
    {
        "content": "<p>I need a fair comparison. So in rust/tokio we have one \"thread\" that listens for requests on the socket, and N others that process requests. I just need to replicate that</p>",
        "id": 416080845,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1705511580
    },
    {
        "content": "<p>you can have many concurrent OS threads all listening to the same socket, and that would be faster but also not a fair comparison</p>",
        "id": 416080922,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1705511605
    },
    {
        "content": "<p>That said it just limits live threads running go code. It doesn't limit the number of threads waiting on system calls</p>",
        "id": 416080944,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705511614
    },
    {
        "content": "<p>Is that a system thread limit or an async process limit?</p>",
        "id": 416081519,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705511791
    },
    {
        "content": "<p>Looking at the go source. The server is single threaded dispatch that spawns a goroutine after accepting a request.</p>",
        "id": 416081842,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705511906
    },
    {
        "content": "<p>If you want to restrict the number of goroutines, I guess you can just use the worker pool without a second go func call.</p>",
        "id": 416082267,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705512046
    },
    {
        "content": "<p>Though go will end up generating a metric crap ton of waiting go routines and that will probably have really bad characteristics. Cause it will still accept every connection and spawn a go thread for it.</p>",
        "id": 416082368,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705512093
    },
    {
        "content": "<p>finally coming back to this, thanks for the help earlier! </p>\n<p>a quick thing I want to check, does this actually allocate the memory?</p>\n<div class=\"codehilite\"><pre><span></span><code>    // Allocate an array of N bytes using make\n    byteArray := make([]byte, capacity)\n</code></pre></div>\n\n<p>Even if so I'd guess it doesn't initialize it? I want something like <code>let v = vec![0xAA; capacity];</code> but in go</p>",
        "id": 424684048,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1709566670
    },
    {
        "content": "<p>fingers crossed this is turned into a memset?</p>\n<div class=\"codehilite\" data-code-language=\"Go\"><pre><span></span><code><span class=\"w\">        </span><span class=\"c1\">// Allocate an array of N bytes using make</span>\n<span class=\"w\">        </span><span class=\"nx\">byteArray</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"nb\">make</span><span class=\"p\">([]</span><span class=\"kt\">byte</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">capacity</span><span class=\"p\">)</span>\n\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nx\">i</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">range</span><span class=\"w\"> </span><span class=\"nx\">byteArray</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nx\">byteArray</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"mh\">0xAA</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 424685416,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1709567042
    },
    {
        "content": "<p>As far as I understand, <code>byteArray := make([]byte, capacity)</code> on its own does initialise the values of the underlying array (in addition to allocating memory) as well, as per <a href=\"https://go.dev/play/p/m56SY2GjVh5\">this</a> Go playground session.</p>\n<p>Further background reading:</p>\n<ul>\n<li><a href=\"https://go.dev/doc/effective_go#allocation_make\">https://go.dev/doc/effective_go#allocation_make</a></li>\n<li><a href=\"https://go.dev/blog/slices-intro\">https://go.dev/blog/slices-intro</a></li>\n</ul>\n<p><strong>Update:</strong> I see now what your intention was in your code. Yes, as far as I'm aware, the only way to initialise to non-default values is the way you specified <a href=\"#narrow/stream/316715-contributing/topic/Nea.20benchmarks.20in.20go.20.28go.20help.20wanted.29/near/424685416\">here</a> with the <code>for</code> loop.</p>",
        "id": 424701153,
        "sender_full_name": "Hristo",
        "timestamp": 1709571054
    },
    {
        "content": "<p>cool! there is special hardware support for initializing to zero so that's why I want a different value. But it turns out to not matter too much anyway</p>",
        "id": 424703170,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1709571654
    },
    {
        "content": "<p>in that zero vs <code>0xAA</code> does not make a big performance difference</p>",
        "id": 424703220,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1709571671
    },
    {
        "content": "<p>probably the final question: does this look reasonable</p>\n<div class=\"codehilite\" data-code-language=\"Go\"><pre><span></span><code><span class=\"kd\">func</span><span class=\"w\"> </span><span class=\"nx\">handleRequest</span><span class=\"p\">(</span><span class=\"nx\">w</span><span class=\"w\"> </span><span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">ResponseWriter</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">r</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">Request</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nx\">body</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">err</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"nx\">io</span><span class=\"p\">.</span><span class=\"nx\">ReadAll</span><span class=\"p\">(</span><span class=\"nx\">r</span><span class=\"p\">.</span><span class=\"nx\">Body</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nx\">err</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"kc\">nil</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">Error</span><span class=\"p\">(</span><span class=\"nx\">w</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"Error reading request body\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">StatusInternalServerError</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"k\">return</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"nx\">pathString</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">err</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"nx\">generateSVGPath</span><span class=\"p\">(</span><span class=\"nb\">string</span><span class=\"p\">(</span><span class=\"nx\">body</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nx\">err</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"kc\">nil</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">Error</span><span class=\"p\">(</span><span class=\"nx\">w</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"Error processing request body\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">StatusBadRequest</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"k\">return</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"nx\">response</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nx\">Sprintf</span><span class=\"p\">(</span><span class=\"s\">`&lt;svg width=\"100\" height=\"100\" xmlns=\"http://www.w3.org/2000/svg\"&gt;</span>\n<span class=\"s\">    &lt;path d=\"%s\" stroke=\"black\" fill=\"transparent\"/&gt;</span>\n<span class=\"s\">&lt;/svg&gt;</span>\n<span class=\"s\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">pathString</span><span class=\"p\">)</span>\n\n<span class=\"w\">    </span><span class=\"nx\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"nx\">w</span><span class=\"p\">.</span><span class=\"nx\">Write</span><span class=\"p\">([]</span><span class=\"nb\">byte</span><span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">))</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">func</span><span class=\"w\"> </span><span class=\"nx\">generateSVGPath</span><span class=\"p\">(</span><span class=\"nx\">requestBody</span><span class=\"w\"> </span><span class=\"kt\">string</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">string</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">error</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nx\">lines</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"nx\">strings</span><span class=\"p\">.</span><span class=\"nx\">Split</span><span class=\"p\">(</span><span class=\"nx\">requestBody</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"\\n\"</span><span class=\"p\">)</span>\n\n<span class=\"w\">    </span><span class=\"kd\">var</span><span class=\"w\"> </span><span class=\"nx\">pathString</span><span class=\"w\"> </span><span class=\"nx\">strings</span><span class=\"p\">.</span><span class=\"nx\">Builder</span>\n<span class=\"w\">    </span><span class=\"nx\">pathString</span><span class=\"p\">.</span><span class=\"nx\">WriteString</span><span class=\"p\">(</span><span class=\"s\">\"M 0 0 L\"</span><span class=\"p\">)</span>\n\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nx\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">line</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"k\">range</span><span class=\"w\"> </span><span class=\"nx\">lines</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nx\">parts</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"nx\">strings</span><span class=\"p\">.</span><span class=\"nx\">SplitN</span><span class=\"p\">(</span><span class=\"nx\">line</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\", \"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nx\">parts</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"k\">continue</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"nx\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">errX</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"nx\">strconv</span><span class=\"p\">.</span><span class=\"nx\">Atoi</span><span class=\"p\">(</span><span class=\"nx\">parts</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"w\">        </span><span class=\"nx\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">errY</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"nx\">strconv</span><span class=\"p\">.</span><span class=\"nx\">Atoi</span><span class=\"p\">(</span><span class=\"nx\">parts</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nx\">errX</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"kc\">nil</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"nx\">errY</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"kc\">nil</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nx\">Errorf</span><span class=\"p\">(</span><span class=\"s\">\"invalid input format\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"nx\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nx\">Fprintf</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"nx\">pathString</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\" %d %d\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">y</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nx\">pathString</span><span class=\"p\">.</span><span class=\"nx\">String</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"kc\">nil</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>in particular from a performance perspective?</p>",
        "id": 424705437,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1709572313
    }
]