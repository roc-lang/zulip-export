[
    {
        "content": "<p>AFAIK, roc does not yet have an option type. Something like</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">Option</span> <span class=\"nv\">t : </span><span class=\"p\">[</span> <span class=\"nx\">None</span><span class=\"p\">,</span> <span class=\"nx\">Some</span> <span class=\"nx\">t</span> <span class=\"p\">]</span>\n</code></pre></div>\n<p>Plus functions for it.</p>\n<p>I would like to submit code for one, implemented in roc itself. Would that be accepted?</p>",
        "id": 275151168,
        "sender_full_name": "Matthias Beyer",
        "timestamp": 1647174731
    },
    {
        "content": "<p>we prefer <code>Result a b</code> in practice</p>",
        "id": 275151262,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1647174860
    },
    {
        "content": "<p>because we can create ad-hoc error types, that has little overhead</p>",
        "id": 275151267,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1647174873
    },
    {
        "content": "<p>so you can actually say <code>Err OutOfBounds</code> instead of getting a <code>None</code> and having to look up in what cases that is actually created and what it means</p>",
        "id": 275151273,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1647174895
    },
    {
        "content": "<p>No, actually it is not what I want. I want to represent a thing that is there or is not there... hence <code>Option</code>, not <code>Result</code>!</p>",
        "id": 275151286,
        "sender_full_name": "Matthias Beyer",
        "timestamp": 1647174945
    },
    {
        "content": "<p>well we decided to go with <code>Result</code> for the standard library. In your own programs you can do what you want of course</p>",
        "id": 275151511,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1647175279
    },
    {
        "content": "<p>So how would someone use <code>Result</code> to represent a thing that can be missing? Is there some way to make the <code>b</code> in <code>Result a b</code> to something like <code>void</code>?</p>",
        "id": 275151596,
        "sender_full_name": "Matthias Beyer",
        "timestamp": 1647175412
    },
    {
        "content": "<p><code>void</code> in the C sense I guess yeah. In rust/ML this is usually called \"unit\", a type with exactly one value</p>",
        "id": 275151720,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1647175571
    },
    {
        "content": "<p>we can give it a custom name, like <code>Result SomeType [ Missing ]</code>, or pick the generic <code>Result SomeType {}</code></p>",
        "id": 275151740,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1647175612
    },
    {
        "content": "<p>(in rust/ML <code>Void</code> is the type with zero values, so no value of such a type can be created)</p>",
        "id": 275151758,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1647175649
    },
    {
        "content": "<p>except with panics or diverging computation</p>",
        "id": 275151763,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1647175662
    },
    {
        "content": "<p>infinite loop</p>",
        "id": 275151768,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1647175679
    },
    {
        "content": "<p>yeah, sure. I was talking more C void, as I thought from your messages that you're not familiar with Rust, as you seem to not know what an Option is... sorry 'bout that</p>",
        "id": 275151816,
        "sender_full_name": "Matthias Beyer",
        "timestamp": 1647175708
    },
    {
        "content": "<p>oh I know</p>",
        "id": 275151845,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1647175768
    },
    {
        "content": "<p>and I know I've gone multiple levels of \"go to definition\" deep to figure out what <code>None</code> actually means</p>",
        "id": 275151853,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1647175790
    },
    {
        "content": "<p>there's now a PR for <a href=\"https://github.com/rtfeldman/roc/blob/63086ecb2e674a2c2ebede8a2470755e33a6e8ea/FAQ.md#why-doesnt-roc-have-a-maybe-or-option-or-optional-type-or-null-or-nil-or-undefined\">a FAQ entry</a> about this!</p>",
        "id": 275156818,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647181264
    },
    {
        "content": "<p>Does the tutorial mention the optional record field feature? I didn't know about it, and didn't see it just now when searching for \"option\". Could maybe give a quick blurb for its syntax in this new faq entry?</p>",
        "id": 275157821,
        "sender_full_name": "Jared Cone",
        "timestamp": 1647182622
    },
    {
        "content": "<p>not yet - I still need to write that part!</p>",
        "id": 275160772,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647186260
    },
    {
        "content": "<p>Are any functions for <code>Result</code> actually part of roc? I know that we return results, but I didn't think we had any special methods for it.</p>",
        "id": 275165954,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1647193190
    },
    {
        "content": "<p>there are a bunch</p>",
        "id": 275166085,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1647193353
    },
    {
        "content": "<p>like <code>map</code>, <code>withDefault</code> etc</p>",
        "id": 275166093,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1647193364
    },
    {
        "content": "<p>they are just implemented as ASTs, no lowlevels</p>",
        "id": 275166100,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1647193382
    },
    {
        "content": "<p>Ok. I guess I never realized</p>",
        "id": 275166119,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1647193418
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"481285\">@Jared Cone</span> I looked as well and found it in the guid for developers coming from Elm. <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 275216391,
        "sender_full_name": "Johannes Maas",
        "timestamp": 1647253353
    },
    {
        "content": "<p>Hmmm... not sure if this solves the original issue. Let's say I have a record, and in that record I want a field that represents a thing that may or may not have been set yet.</p>\n<div class=\"codehilite\"><pre><span></span><code>Customer : { name : Str, email ? Str }\n</code></pre></div>\n<p>Is there any way to match on that field? Or can you only extract it by passing it into a function like this?</p>\n<div class=\"codehilite\"><pre><span></span><code>emailHasBeenSet = \\{name, email ? &quot;&quot;} -&gt; if Str.isEmpty email then False else True\n</code></pre></div>\n<p>One nice thing about having an official Option type is it has a slew of helpful util functions like <code>Option.map</code>. If every programmer has to instead write their own domain-specific option type for every field, do they also have to implement all those util functions?</p>",
        "id": 275261735,
        "sender_full_name": "Jared Cone",
        "timestamp": 1647275350
    },
    {
        "content": "<blockquote>\n<p>Is there any way to match on that field?</p>\n</blockquote>\n<p>not currently, but we've talked about supporting it; this isn't the first time an interest in that has come up!</p>",
        "id": 275264557,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647276384
    }
]