[
    {
        "content": "<p>I would like to contribute to roc in some way, i love what you guys are doing and I think the language holds a lot of promise. My main experience that's relevant to roc is with editor tooling. However I understand from reading about the current langserver that  the roc compiler isn't at a point where implementing proper completion is possible. <br>\nOne thing i can help with is making a tree-sitter grammar though, this allows for better support for neovim, helix and any other editors that make heavy use of tree-sitter. A TS grammar may also be useful when developing a structured editor which as i understand it is an eventual goal for roc. See <a href=\"https://www.masteringemacs.org/article/combobulate-structured-movement-editing-treesitter\">https://www.masteringemacs.org/article/combobulate-structured-movement-editing-treesitter</a>.<br>\nBasically i just want to make sure someone else isn't already doing this, and if not, I'll get started :)</p>",
        "id": 402309889,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1700075250
    },
    {
        "content": "<p>very cool! As far as I know, nobody else is working on this right now</p>",
        "id": 402315461,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700077521
    },
    {
        "content": "<p>Great, I'll get on it then!</p>",
        "id": 402315603,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1700077574
    },
    {
        "content": "<p>I would 100% use it. I have debated trying to make one a few times, but never dove into it.</p>",
        "id": 402317682,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700078384
    },
    {
        "content": "<p>I'm probably going to have a few questions as I go, the first one, is there anywhere I could find a spec for things like what chars can exist in an identifier? Var name, func name etc</p>",
        "id": 402318722,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1700078696
    },
    {
        "content": "<p>I think the parser has tests for things like that</p>",
        "id": 402319982,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1700079291
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/tree/main/crates%2Fcompiler%2Ftest_syntax%2Ftests\">https://github.com/roc-lang/roc/tree/main/crates%2Fcompiler%2Ftest_syntax%2Ftests</a></p>",
        "id": 402320443,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1700079519
    },
    {
        "content": "<p>Oh, thanks that will be super helpful :)</p>",
        "id": 402320589,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1700079592
    },
    {
        "content": "<p>Well it's far too early in the morning, but here we are, the basics are all working, just need to start implementing the esoteric stuff now :)<br>\n<a href=\"/user_uploads/22008/zGYKkeGP7ymw02jo3YC3OSNS/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/zGYKkeGP7ymw02jo3YC3OSNS/image.png\" title=\"image.png\"><img src=\"/user_uploads/22008/zGYKkeGP7ymw02jo3YC3OSNS/image.png\"></a></div>",
        "id": 402357777,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1700097052
    },
    {
        "content": "<p>wow, impressive speed.</p>",
        "id": 402366644,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700101700
    },
    {
        "content": "<p>Amazing <span class=\"user-mention\" data-user-id=\"651372\">@Eli Dowling</span>!<br>\nNice colors too :)</p>",
        "id": 402661200,
        "sender_full_name": "Anton",
        "timestamp": 1700215675
    },
    {
        "content": "<p>Wonderful! I have <a href=\"https://gitlab.com/tad-lispy/nixos-configuration/-/blob/main/doom-emacs/modules/lang/roc/config.el\">a rudimentary integration of the language server with my Emacs</a> and would love the syntax highlighting too. Where can I find your code <span class=\"user-mention\" data-user-id=\"651372\">@Eli Dowling</span>?</p>",
        "id": 402778241,
        "sender_full_name": "Tad Lispy",
        "timestamp": 1700254478
    },
    {
        "content": "<p>Found it <a href=\"https://github.com/faldor20/tree-sitter-roc\">https://github.com/faldor20/tree-sitter-roc</a> :D</p>",
        "id": 402778786,
        "sender_full_name": "Tad Lispy",
        "timestamp": 1700254769
    },
    {
        "content": "<p>Oh don't look, it's far to ugly for the world to see.</p>",
        "id": 402784282,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1700257351
    },
    {
        "content": "<p>It's all a mess right now, for my eyes only <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>.<br>\nGimme a few days</p>",
        "id": 402784307,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1700257373
    },
    {
        "content": "<p>Too late <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 402784697,
        "sender_full_name": "Tad Lispy",
        "timestamp": 1700257570
    },
    {
        "content": "<p>Honestly, it's very impressive what you got so far. I'm trying to figure out how to build it though. I guess with cargo?</p>",
        "id": 402784783,
        "sender_full_name": "Tad Lispy",
        "timestamp": 1700257627
    },
    {
        "content": "<p>I know nothing about Tree Sitter, but maybe I can help by improving the flake.nix and providing a makefile?</p>",
        "id": 402784970,
        "sender_full_name": "Tad Lispy",
        "timestamp": 1700257754
    },
    {
        "content": "<p>I am so excited of all of this. Can't want for nice colors in helix!!!</p>",
        "id": 402785583,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700258080
    },
    {
        "content": "<p>Oh yeah, it's a bit awkward to build tree-sitter definitions using nix. <br>\nWell it's a god awful mess because it's based of the elm parser. I decided to start there and slowly replace it with the differences. Unfortunately elm makes  some fundimental assumptions about the structure of their code that are incompatible with roc so there were some issues I just couldn't fix. As far as I can tell, because they enforce purity they never have two independent expressions within the same scope.<br>\nSo I've restarted based off fsharp instead. Things are coming along nicely, and it's almost back to how it was with elm.</p>",
        "id": 402787169,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1700258847
    },
    {
        "content": "<p>If you want to test it you can just run 'tree-sitter test'<br>\nOn nixos I can't get helix to build my tree-sitter definitions, they use a special nix flake for building in the normal nix install for helix so you'd have to make an override for helix and add it that way.<br>\nMy nasty way is right now if I want to test on helix is: reference the Grammer in neovim, run tsupdate which builds it properly then if I want to test it in helix I <a href=\"http://roc.so\">roc.so</a> from the neovim tree-sitter parsers directory into the helix grammars directory. </p>\n<p>But I wouldn't recommend that... Because it's stupid <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 402787764,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1700259140
    },
    {
        "content": "<p>Looks like a lot of people here are very excited about your effort. Please take it easy. I'm sure it's nobody's intention to push you.</p>",
        "id": 402789085,
        "sender_full_name": "Tad Lispy",
        "timestamp": 1700259794
    },
    {
        "content": "<p>Appreciate the concern :) <br>\nWell tonight's work has us a working grammar, highlighting and a Todo list with the things I'll work on in the upcoming days. The foundation should be all setup now and everything just needs dialing in. Edge cases,and missing language features, neatening up names etc but the basic structural bits are all represented and parse correctly.</p>",
        "id": 402818364,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1700274117
    },
    {
        "content": "<p><del>I know it's possible to integrate a tree-sitter grammar into a VSCode extension, might be something for <span class=\"user-mention\" data-user-id=\"625544\">@Ivan Demchenko</span> to look into. I think tree-sitter sits somewhere between the basic textmate grammar highlighting that VSCode uses and the full blown LSP integration which is still in the early stages.</del></p>",
        "id": 402833917,
        "sender_full_name": "Hannes",
        "timestamp": 1700284322
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"508951\">@Hannes</span>, my understanding is that it's not very normal and support is pretty poor. <br>\nThere is this  <a href=\"https://marketplace.visualstudio.com/items?itemName=ms-vscode.anycode\">https://marketplace.visualstudio.com/items?itemName=ms-vscode.anycode</a><br>\nBut I believe the way it currently works in most cases is that you basically fake the semantic tokens response using the data from tree-sitter. That's how this works at least <a href=\"https://github.com/EvgeniyPeshkov/syntax-highlighter\">https://github.com/EvgeniyPeshkov/syntax-highlighter</a><br>\nAre you aware of any other methods?</p>",
        "id": 402857746,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1700301576
    },
    {
        "content": "<p>Haha, to be honest I i just remember seeing a heading called \"integrating tree-sitter\" in the VSCode extension documentation, i didn't actually read it <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> I'll defer to someone with actual knowledge on the topic</p>",
        "id": 402860659,
        "sender_full_name": "Hannes",
        "timestamp": 1700303432
    },
    {
        "content": "<p>Little update on tree-sitter status, I've been going through all the example code in the roc repo, and the examples pages on the Wip website, and making sure everything works. I've added many many little features and I'm getting to the point where most stuff I paste in mostly just works. Still lots of edge cases to be found though. <br>\nIf anyone could point me to some good examples that use a lot of language features that'd be great.<br>\nThe only other really large scale change the needs making is going through and ensure names of everything are good and the structure of the tokens is nice coming out. But I'm mostly just gonna let it be a mess till I have every language feature working. <br>\nCurrently you should be able to use the highlights.scm and parser in master in the  helix editor, I'm not sure if the highlights work in neovim as I don't test there while I'm working. <br>\nI'll write a readme with some explanation of development and building soon</p>",
        "id": 402986153,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1700384287
    },
    {
        "content": "<p>Also I'd like to see if I can improve error recovery, currently an error at the top just tends to kind of break everything below, I believe the python tree-sitter does some error recovery stuff so I'll try to investigate how that works</p>",
        "id": 402986224,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1700384350
    },
    {
        "content": "<p>I suspect it's a problem of not escaping the current scope because of the whole indentation situation.</p>",
        "id": 402986266,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1700384386
    },
    {
        "content": "<p><a href=\"https://github.com/lukewilliamboswell/roc-json/blob/main/package/Core.roc\">https://github.com/lukewilliamboswell/roc-json/blob/main/package/Core.roc</a> might be a good test case</p>",
        "id": 402989603,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700386100
    },
    {
        "content": "<p>Pretty sure most of the languages features are in there</p>",
        "id": 402989678,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700386150
    },
    {
        "content": "<p>Also give <a href=\"https://github.com/roc-lang/examples/blob/main/examples/RecordBuilder/IDCounter.roc\">https://github.com/roc-lang/examples/blob/main/examples/RecordBuilder/IDCounter.roc</a> a go too, that has record builder in it which is a bit special</p>",
        "id": 402989742,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700386196
    },
    {
        "content": "<p>Thanks a lot <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span>, I had seen the record builder syntax and filed that away as probably the scariest bit of syntax left, and something that I'd need to collect some more examples of <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>.</p>",
        "id": 402994267,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1700388738
    },
    {
        "content": "<p>Fantastic <span class=\"user-mention\" data-user-id=\"651372\">@Eli Dowling</span> ! I got some success integrating your grammar with Emacs. It's still WIP, but very exciting. <br>\n<a href=\"/user_uploads/22008/17qFdT0Yk7dOEZ3lZUm45iGS/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/17qFdT0Yk7dOEZ3lZUm45iGS/image.png\" title=\"image.png\"><img src=\"/user_uploads/22008/17qFdT0Yk7dOEZ3lZUm45iGS/image.png\"></a></div>",
        "id": 403004680,
        "sender_full_name": "Tad Lispy",
        "timestamp": 1700395627
    },
    {
        "content": "<p>Hey nice! Well done :)</p>",
        "id": 403005701,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1700396542
    },
    {
        "content": "<p>The work-in-progress code for the major mode is here: <a href=\"https://gitlab.com/tad-lispy/nixos-configuration/-/blob/main/doom-emacs/modules/lang/roc/config.el\">https://gitlab.com/tad-lispy/nixos-configuration/-/blob/main/doom-emacs/modules/lang/roc/config.el</a></p>",
        "id": 403007353,
        "sender_full_name": "Tad Lispy",
        "timestamp": 1700397947
    },
    {
        "content": "<p>I wonder about the granularity of the AST. Mind you I never used Tree Sitter before, so maybe I just don't know what is what. Anyway, it seems to me that there is no way to query for keyword \"app\", or \"pacakges\" or \"imports\", without code that \"belongs to it\". So I made the whole <code>app_header</code>highlighted as a keyword, and then I target individual parts inside. It seems off. Maybe those words inside the header should be their own nodes? What do you think <span class=\"user-mention\" data-user-id=\"651372\">@Eli Dowling</span>?</p>",
        "id": 403007876,
        "sender_full_name": "Tad Lispy",
        "timestamp": 1700398453
    },
    {
        "content": "<p>It's similar with <code>if</code>, <code>then</code> and <code>else</code>.</p>",
        "id": 403007910,
        "sender_full_name": "Tad Lispy",
        "timestamp": 1700398494
    },
    {
        "content": "<p>Take a look at the highlights.scm file in the repo. The way most tree-sitter grammars I've seen do keyword queries is:<br>\n[<br>\n\"app\"<br>\n\"If\"<br>\n;;Etc<br>\n]@keyword<br>\nThe grammar doesn't define a special toke for each keyword. I can't say why that is that way, maybe it's more efficient maybe it's just annoying to make a saved named token for every keyword <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 403008551,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1700399053
    },
    {
        "content": "<p>I see. Thanks. I'll have to learn more about the query system.</p>",
        "id": 403008788,
        "sender_full_name": "Tad Lispy",
        "timestamp": 1700399276
    },
    {
        "content": "<p>But I'm not at all happy with the current state of the output tree. The names and shape of it is pretty ugly. But as I mentioned, for now I'm focusing on getting everything working well.<br>\nThe two big things that need to change are  being much more specific about what expressions can go where, and rethinking the current very flat structure. I haven't really decided, but technically roc should have a lot more nesting with backpassing. Currently we actually allow a list of side by side expressions which I've realised isn't really how roc works. Each value should be better though of containing nested expressions, value definitions and backpassing just happen to not increase indentation.</p>",
        "id": 403008977,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1700399414
    },
    {
        "content": "<p>Yes! Backpassing is really interesting syntactically, because it encompasses everything below it, I guess up to the drop in indentation.</p>",
        "id": 403018351,
        "sender_full_name": "Tad Lispy",
        "timestamp": 1700406077
    },
    {
        "content": "<p>I think we have a very good starting point and we can go incrementally from here.</p>",
        "id": 403018449,
        "sender_full_name": "Tad Lispy",
        "timestamp": 1700406123
    },
    {
        "content": "<p>An <code>else_expression</code> is a sibling of an <code>if_expression</code>. Is that right?</p>\n<div class=\"codehilite\" data-code-language=\"EmacsLisp\"><pre><span></span><code><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"nv\">if_expression</span><span class=\"w\"> </span><span class=\"k\">if</span>\n<span class=\"w\">   </span><span class=\"nv\">guard:</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"nv\">infix_expression</span>\n<span class=\"w\">     </span><span class=\"p\">(</span><span class=\"nv\">long_identifier_or_op</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"nv\">long_identifier</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">identifier</span><span class=\"p\">)))</span>\n<span class=\"w\">     </span><span class=\"p\">(</span><span class=\"nv\">infix_op</span><span class=\"w\"> </span><span class=\"nv\">==</span><span class=\"p\">)</span>\n<span class=\"w\">     </span><span class=\"p\">(</span><span class=\"nv\">long_identifier_or_op</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"nv\">long_identifier</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">identifier</span><span class=\"p\">))))</span>\n<span class=\"w\">   </span><span class=\"nv\">then</span>\n<span class=\"w\">   </span><span class=\"nv\">then:</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"nv\">application_expression</span>\n<span class=\"w\">     </span><span class=\"nv\">caller:</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"nv\">long_identifier_or_op</span>\n<span class=\"w\">       </span><span class=\"p\">(</span><span class=\"nv\">long_identifier</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">module</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">identifier</span><span class=\"p\">)))</span>\n<span class=\"w\">     </span><span class=\"p\">(</span><span class=\"nv\">args</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"nv\">const</span>\n<span class=\"w\">       </span><span class=\"p\">(</span><span class=\"nf\">string</span><span class=\"w\"> </span><span class=\"s\">\" \"</span><span class=\"p\">)))))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"nv\">else_expression</span><span class=\"w\"> </span><span class=\"nv\">else</span>\n<span class=\"w\">   </span><span class=\"p\">(</span><span class=\"nv\">application_expression</span>\n<span class=\"w\">    </span><span class=\"nv\">caller:</span>\n<span class=\"w\">     </span><span class=\"p\">(</span><span class=\"nv\">long_identifier_or_op</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"nv\">long_identifier</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">module</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">identifier</span><span class=\"p\">)))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"nv\">args</span>\n<span class=\"w\">     </span><span class=\"p\">(</span><span class=\"nv\">const</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"nf\">string</span><span class=\"w\"> </span><span class=\"s\">\" \"</span><span class=\"p\">))))))</span>\n</code></pre></div>",
        "id": 403035613,
        "sender_full_name": "Tad Lispy",
        "timestamp": 1700415857
    },
    {
        "content": "<p>That sounds correct, though an <code>else</code> can only exist within an <code>if</code>, so it could be seen as a sibling of <code>then</code> technically.</p>",
        "id": 403035701,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700415925
    },
    {
        "content": "<p>Cause the full syntax is something like <code>if expression then block else block</code> That is the syntax for an if statement.</p>",
        "id": 403035813,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700415993
    },
    {
        "content": "<p>Hmm, so yeah, I would say sibling to <code>then</code>, <code>else</code> is definitely not it's own expression.</p>",
        "id": 403035857,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700416044
    },
    {
        "content": "<p>I actually just fixed that exact issue. Else is a child of if along with then</p>",
        "id": 403036282,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1700416337
    },
    {
        "content": "<p>Maybe it should be <code>(if_expression \"if\" (condition_block ...) \"then\" (then_block ...) \"else\" (else_block ...))</code>. The things in quotes are keywords that need to match literally, as discussed earlier in this stream.</p>",
        "id": 403036319,
        "sender_full_name": "Tad Lispy",
        "timestamp": 1700416361
    },
    {
        "content": "<p>I hope you don't mind me dropping those questions / suggestions. I'm slowly writing syntax highlighting code. In the process I'm learning a lot about Emacs, Tree Sitter and adjacent stuff.</p>",
        "id": 403036536,
        "sender_full_name": "Tad Lispy",
        "timestamp": 1700416539
    },
    {
        "content": "<p>I would be hesitant to recommend that. I'm super happy to help, but if you base it off how the tokens are now, you will be very disappointed when I rename them all</p>",
        "id": 403036616,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1700416592
    },
    {
        "content": "<p>Go ahead ofcourse, just when I have all the syntax working correctly there will be a big pass renaming piles of tokens and adding field names and such</p>",
        "id": 403036682,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1700416660
    },
    {
        "content": "<p>No, I wont be. I expect it to change and will be happy to rework my stuff. Most of the effort goes into my learning, so it's not wasted.</p>",
        "id": 403036687,
        "sender_full_name": "Tad Lispy",
        "timestamp": 1700416667
    },
    {
        "content": "<p>Excellent :)</p>",
        "id": 403036743,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1700416693
    },
    {
        "content": "<p>Hopefully I can provide some feedback too. But if you don't want it, say so and I'll be quiet.</p>",
        "id": 403036745,
        "sender_full_name": "Tad Lispy",
        "timestamp": 1700416696
    },
    {
        "content": "<p>No, for sure, provide away, I'm super happy for input.</p>",
        "id": 403036787,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1700416726
    },
    {
        "content": "<p>You probably know, but <code>tree-sitter test</code> gives </p>\n<div class=\"codehilite\"><pre><span></span><code>Error in query file &quot;highlights.scm&quot;\n\nCaused by:\n    Query error at 125:4. Invalid node type\n</code></pre></div>",
        "id": 403042389,
        "sender_full_name": "Tad Lispy",
        "timestamp": 1700420021
    },
    {
        "content": "<p>There is <code>ident</code> (I see it in <code>app_header</code> -&gt; <code>provides</code>) and <code>identifier</code> (everywhere else). Are they suppose to be two different node types?</p>",
        "id": 403046899,
        "sender_full_name": "Tad Lispy",
        "timestamp": 1700422931
    },
    {
        "content": "<p>yeah, the hightlights keep going out of sync because i change the names occasionally</p>",
        "id": 403047187,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1700423274
    },
    {
        "content": "<p>Seems like type annotations are broken now. This:</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>    actual : F64\n    actual = 2.0 + 3.0\n</code></pre></div>\n<p>Gives this syntax tree:</p>\n<div class=\"codehilite\" data-code-language=\"EmacsLisp\"><pre><span></span><code><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"nv\">value_declaration</span>\n<span class=\"w\">   </span><span class=\"p\">(</span><span class=\"nv\">value_declaration_left</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"nv\">identifier_pattern</span>\n<span class=\"w\">     </span><span class=\"p\">(</span><span class=\"nv\">long_identifier</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">identifier</span><span class=\"p\">))))</span>\n<span class=\"w\">   </span><span class=\"p\">(</span><span class=\"nv\">ERROR</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">ERROR</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">ERROR</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">ERROR</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">l</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 403047351,
        "sender_full_name": "Tad Lispy",
        "timestamp": 1700423413
    },
    {
        "content": "<p>I think I'm done for today. Once again thanks for your effort. I hope my feedback is helpful. Please don't feel any pressure because of it. Good night!</p>",
        "id": 403047427,
        "sender_full_name": "Tad Lispy",
        "timestamp": 1700423505
    },
    {
        "content": "<p>I'll take a look tomorrow :)</p>",
        "id": 403050933,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1700426568
    },
    {
        "content": "<p>Okay another update. <br>\nThe grammar is in a good enough state I'd say. I'm sure there is stuff missing and i can guarantee there are bugs with indentation, but it's working on most of the test files I've used. </p>\n<p>This has been a very interesting learning experience. Mostly I've learned a ton of things not to do <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>. <br>\nThe grammar does need one more big overhaul to remove all the indentation tokens. The reasons are somewhat complex to explain but basically indentation tokens can match anywhere and so when you have two different sections of code that will diverge and resolve if you have an indentation token in the description of one variant that variant will always match so you need indentation tokens all over the place. <br>\nThe elm and fsharp grammar both get away with using almost none at all. So i think a migration to an indentation-less grammar would help fix most of  the edge cases and make it look way less messy.</p>\n<p>However i fly to Indonesia tomorrow so this I won't be adding to this for a few weeks. But I'll check github in case anyone does a PR</p>\n<p>Hope you all have fun with this :)<br>\noh and here is the link to the repo:<a href=\"https://github.com/faldor20/tree-sitter-roc\">https://github.com/faldor20/tree-sitter-roc</a></p>",
        "id": 403474684,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1700606649
    },
    {
        "content": "<p>super awesome, hope you enjoy Indonesia! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 403477030,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700607957
    },
    {
        "content": "<p>I had a little time on planes and boats and such, so I added a readme for how to setup the grammar in helix and neovim. <br>\nI also knocked out a few more edge cases and rewrote a bunch of the ugly bits of the grammar. <br>\nMaybe <span class=\"user-mention\" data-user-id=\"663757\">@Tad Lispy</span> you could PR in some Emacs instructions? I'm not very Emacs familiar.</p>",
        "id": 404458245,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1701106096
    },
    {
        "content": "<blockquote>\n<p>I added a readme for how to setup the grammar in helix</p>\n</blockquote>\n<p>Looks like I have something awesome to setup later today. Thanks for all your work!</p>",
        "id": 404462420,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701107625
    },
    {
        "content": "<p>Hey! Great job! Sorry for late response. I've been distracted past days. I'll try to contribute, but Emacs Lisp is also a learning experience for me. I guess first thing I need to do is publish a package for with a major mode for Roc. As soon as I get it, I'll provide the instructions.</p>",
        "id": 406143670,
        "sender_full_name": "Tad Lispy",
        "timestamp": 1701803914
    },
    {
        "content": "<p>I've been using it for the past few days (in Neovim) and it's working great! Thanks for your work! I've made a PR that fixes some issues that I found</p>",
        "id": 406157453,
        "sender_full_name": "LoipesMas",
        "timestamp": 1701809773
    },
    {
        "content": "<p>I've made a package for Emacs and linked to it from your readme. Here is the PR: <a href=\"https://github.com/faldor20/tree-sitter-roc/pull/2\">https://github.com/faldor20/tree-sitter-roc/pull/2</a></p>",
        "id": 406380276,
        "sender_full_name": "Tad Lispy",
        "timestamp": 1701894215
    },
    {
        "content": "<p>I have opened a pull request to integrate this tree-sitter support into Neovim: <a href=\"https://github.com/nvim-treesitter/nvim-treesitter/pull/6381\">https://github.com/nvim-treesitter/nvim-treesitter/pull/6381</a></p>",
        "id": 430401585,
        "sender_full_name": "nat-418",
        "timestamp": 1711815106
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"705306\">nat-418</span> <a href=\"#narrow/stream/316715-contributing/topic/tree-sitter.20grammar/near/430401585\">said</a>:</p>\n<blockquote>\n<p>I have opened a pull request to integrate this tree-sitter support into Neovim: <a href=\"https://github.com/nvim-treesitter/nvim-treesitter/pull/6381\">https://github.com/nvim-treesitter/nvim-treesitter/pull/6381</a></p>\n</blockquote>\n<p>This has been accepted. If anyone notices problems please report them to the issue tracker in this repository: <a href=\"https://github.com/nat-418/tree-sitter-roc\">https://github.com/nat-418/tree-sitter-roc</a> .</p>",
        "id": 430576265,
        "sender_full_name": "nat-418",
        "timestamp": 1711968733
    },
    {
        "content": "<p>I started messing with the tree-sitter grammar because I was trying to figure out why thing weren't highlighting. One thing led to another and I spent a good chunk of yesterday changing things and I now have seven reasonably sized commits. I'd like to know if you'd like them in one large PR or a set of smaller ones.</p>\n<p>A lot of things are uncontroversial (e.g. tagging doc comments, tagging builtins) but some are more questionable like tagging match captures as parameters so that tree-sitters local analysis highlights typos.</p>\n<p>Here's a before and after using my theme:</p>\n<p><a href=\"/user_uploads/22008/yQXOn-8uEKwa1yJkfkd1Mvqx/Screenshot-2024-04-01-at-5.06.49-PM.png\">Screenshot-2024-04-01-at-5.06.49-PM.png</a><br>\n<a href=\"/user_uploads/22008/40pNEM0n3jevBRIfRBJx24sW/Screenshot-2024-04-01-at-5.08.03-PM.png\">Screenshot-2024-04-01-at-5.08.03-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/yQXOn-8uEKwa1yJkfkd1Mvqx/Screenshot-2024-04-01-at-5.06.49-PM.png\" title=\"Screenshot-2024-04-01-at-5.06.49-PM.png\"><img src=\"/user_uploads/22008/yQXOn-8uEKwa1yJkfkd1Mvqx/Screenshot-2024-04-01-at-5.06.49-PM.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/22008/40pNEM0n3jevBRIfRBJx24sW/Screenshot-2024-04-01-at-5.08.03-PM.png\" title=\"Screenshot-2024-04-01-at-5.08.03-PM.png\"><img src=\"/user_uploads/22008/40pNEM0n3jevBRIfRBJx24sW/Screenshot-2024-04-01-at-5.08.03-PM.png\"></a></div><p>Some things come from extending the highlight match tags (e.g. separate colorspace for typedefs, highlighting fn defs) so other themes would need to be tweaked for full support.</p>",
        "id": 430666013,
        "sender_full_name": "Karl",
        "timestamp": 1712006632
    },
    {
        "content": "<p>Sure make some PRs and we can discuss anything questionable :)</p>",
        "id": 430675281,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1712010946
    },
    {
        "content": "<p>Yeah, smaller ones are usually nicer</p>",
        "id": 430737936,
        "sender_full_name": "Anton",
        "timestamp": 1712046420
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/stream/316715-contributing/topic/tree-sitter.20grammar/near/430737936\">said</a>:</p>\n<blockquote>\n<p>Yeah, smaller ones are usually nicer</p>\n</blockquote>\n<p>Hahah I hear you <span class=\"user-mention\" data-user-id=\"361169\">@Anton</span>  ;) I swear I do try to make them small <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 430738150,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1712046501
    },
    {
        "content": "<p>Hehe <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> I get it though, if we focus too much on keeping them small there are various improvements that don't happen because you'd need to do a separate PR.</p>",
        "id": 430738791,
        "sender_full_name": "Anton",
        "timestamp": 1712046750
    },
    {
        "content": "<p>To be clear, I'm completely okay with having the PR rejected and split into smaller parts. I didn't really have a plan so branch naming isn't great and the patches being coherent are mostly a matter of massaging git history</p>",
        "id": 430739141,
        "sender_full_name": "Karl",
        "timestamp": 1712046880
    },
    {
        "content": "<p>I was hoping to get to it today actually, I just need to download your version, test it out and ensure that the highlights are as standard as they can be. Like obviously helix defines some standard highlighting types and not all themes implement them fully. My memory is that highlights are namespaced so that if a theme doesn't implement the most specific version it will be highlighted as the less specific version eg <code>@function.recursive</code> or some such</p>\n<p>It does look good though :)</p>",
        "id": 430739633,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1712047075
    },
    {
        "content": "<p>Yes, that's how the selectors work.</p>",
        "id": 430740085,
        "sender_full_name": "Karl",
        "timestamp": 1712047206
    },
    {
        "content": "<p>Also, if you're checking with <code>:tree-sitter-highlight-name</code> in helix you'll only get the correct name if you have it defined in the theme. Otherwise you'll get the more general rule or none at all if it's not within a major match group.</p>",
        "id": 430740865,
        "sender_full_name": "Karl",
        "timestamp": 1712047482
    },
    {
        "content": "<p>cool, thanks for the tip</p>",
        "id": 430741941,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1712047887
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"705306\">nat-418</span> <a href=\"#narrow/stream/316715-contributing/topic/tree-sitter.20grammar/near/430576265\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"705306\">nat-418</span> <a href=\"#narrow/stream/316715-contributing/topic/tree-sitter.20grammar/near/430401585\">said</a>:</p>\n<blockquote>\n<p>I have opened a pull request to integrate this tree-sitter support into Neovim: <a href=\"https://github.com/nvim-treesitter/nvim-treesitter/pull/6381\">https://github.com/nvim-treesitter/nvim-treesitter/pull/6381</a></p>\n</blockquote>\n<p>This has been accepted. If anyone notices problems please report them to the issue tracker in this repository: <a href=\"https://github.com/nat-418/tree-sitter-roc\">https://github.com/nat-418/tree-sitter-roc</a> .</p>\n</blockquote>\n<p>This is slightly off-topic but it is related and I'd rather not make a whole new thread to mention it:  I have a PR open in Vim to add a Roc filetype plugin. This will allow better integration with tree-sitter and generally set the stage for further Roc developer experience improvements in Vim and Neovim.</p>",
        "id": 431573359,
        "sender_full_name": "nat-418",
        "timestamp": 1712338003
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"705306\">nat-418</span> <a href=\"#narrow/stream/316715-contributing/topic/tree-sitter.20grammar/near/431573359\">said</a>:</p>\n<blockquote>\n<p>This is slightly off-topic but it is related and I'd rather not make a whole new thread to mention it:  I have a PR open in Vim to add a Roc filetype plugin. This will allow better integration with tree-sitter and generally set the stage for further Roc developer experience improvements in Vim and Neovim.</p>\n</blockquote>\n<p>This has been merged. Future releases of Vim and Neovim will now know what a Roc file is.</p>",
        "id": 432532926,
        "sender_full_name": "nat-418",
        "timestamp": 1712763451
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"705306\">@nat-418</span> for pushing Roc into neovim ecosystem. After the merges I could clean up my local nvim config :)</p>\n<p>Here is the full configuration of Roc in <a href=\"https://www.lazyvim.org/\">LazyVim</a> distro (should be easy to tailor for other distros/plain nvim): <a href=\"https://github.com/jluzny/nvim/blob/main/lua/plugins/roc.lua\">https://github.com/jluzny/nvim/blob/main/lua/plugins/roc.lua</a></p>\n<p>After my <a href=\"https://github.com/JoosepAlviste/nvim-ts-context-commentstring/pull/105\">PR</a> to nvim-ts-context-commentstring gets merged, I will submit this config to LazyVim for its next release.</p>",
        "id": 434654908,
        "sender_full_name": "Jiří Lužný",
        "timestamp": 1713764075
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"707718\">Jiří Lužný</span> <a href=\"#narrow/stream/316715-contributing/topic/tree-sitter.20grammar/near/434654908\">said</a>:</p>\n<blockquote>\n<p>Thanks <span class=\"user-mention silent\" data-user-id=\"705306\">nat-418</span> for pushing Roc into neovim ecosystem. After the merges I could clean up my local nvim config :)</p>\n<p>Here is the full configuration of Roc in <a href=\"https://www.lazyvim.org/\">LazyVim</a> distro (should be easy to tailor for other distros/plain nvim): <a href=\"https://github.com/jluzny/nvim/blob/main/lua/plugins/roc.lua\">https://github.com/jluzny/nvim/blob/main/lua/plugins/roc.lua</a></p>\n<p>After my <a href=\"https://github.com/JoosepAlviste/nvim-ts-context-commentstring/pull/105\">PR</a> to nvim-ts-context-commentstring gets merged, I will submit this config to LazyVim for its next release.</p>\n</blockquote>\n<p>we still need to get more filetype defaults for the roc plugin. I am thinking basic indent rules, regex, etc. so the out-of-the-box vim/neovim experience is decent</p>",
        "id": 434737352,
        "sender_full_name": "nat-418",
        "timestamp": 1713789355
    },
    {
        "content": "<p>Hey all, I just updated this to support the new bang syntax, if you were having issues, please grab the new parser and queries :)</p>",
        "id": 445977709,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1718930027
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"651372\">@Eli Dowling</span> very cool, I'll update the zed extension.</p>",
        "id": 446022798,
        "sender_full_name": "Alf Richter",
        "timestamp": 1718955114
    },
    {
        "content": "<p>Here the PR in the zed extension repo, the CI build checks are all green :)</p>",
        "id": 446026783,
        "sender_full_name": "Alf Richter",
        "timestamp": 1718956686
    },
    {
        "content": "<p><a href=\"https://github.com/zed-industries/extensions/pull/925\">https://github.com/zed-industries/extensions/pull/925</a></p>",
        "id": 446026797,
        "sender_full_name": "Alf Richter",
        "timestamp": 1718956692
    },
    {
        "content": "<p>Update PR is merged into zed extensions repo now. :)</p>",
        "id": 446088661,
        "sender_full_name": "Alf Richter",
        "timestamp": 1718978175
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/Lh_O1fjMWiSaMapnXlWkCYik/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/Lh_O1fjMWiSaMapnXlWkCYik/image.png\" title=\"image.png\"><img src=\"/user_uploads/22008/Lh_O1fjMWiSaMapnXlWkCYik/image.png\"></a></div>",
        "id": 446088836,
        "sender_full_name": "Alf Richter",
        "timestamp": 1718978242
    },
    {
        "content": "<p>Is it ok if I report random bugs in here? These aren't urgent or anything, but I figure it would be helpfull to collect them as I see them. </p>\n<p>I've been using zed and occasionally notice things and could take a screenshot and include here, or maybe log an issue somewhere. </p>\n<p>Like this - the platform <code>Str</code> isn't highlighted. </p>\n<p><a href=\"/user_uploads/22008/LV8mjE9E-HFbnO57KEwKNTwj/Screenshot-2024-06-28-at-11.27.42.png\">Screenshot-2024-06-28-at-11.27.42.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/LV8mjE9E-HFbnO57KEwKNTwj/Screenshot-2024-06-28-at-11.27.42.png\" title=\"Screenshot-2024-06-28-at-11.27.42.png\"><img src=\"/user_uploads/22008/LV8mjE9E-HFbnO57KEwKNTwj/Screenshot-2024-06-28-at-11.27.42.png\"></a></div>",
        "id": 447625922,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719538073
    },
    {
        "content": "<p>Yeah, no worries this is actually an issue with the queries in zeed and not the tree sitter grammar itself. I fixed it for neovim  and helix but the zed queries need updating <span class=\"user-mention\" data-user-id=\"485505\">@Alf Richter</span> could you take a look at this? Just see the last commit on the tree sitter repo.</p>",
        "id": 447628863,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1719539847
    },
    {
        "content": "<p>Sweet, well I'll just drop a msg in here when I notice something.</p>",
        "id": 447629579,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719540227
    },
    {
        "content": "<p>New PR for zed extensions repo update is created:<br>\n<a href=\"https://github.com/zed-industries/extensions/pull/981\">https://github.com/zed-industries/extensions/pull/981</a></p>",
        "id": 448273552,
        "sender_full_name": "Alf Richter",
        "timestamp": 1719825922
    },
    {
        "content": "<p>It’s merged in Zed now.</p>",
        "id": 448355293,
        "sender_full_name": "Alf Richter",
        "timestamp": 1719845663
    },
    {
        "content": "<p>Sometimes the Tags aren't highlighted correctly. See <a href=\"https://github.com/roc-lang/basic-cli/blob/d2a434df5082d975e6494137dda99f9bd1c47f1d/build.roc\">this build script</a> for an example. <code>ErrBuildingAppStub</code> is highlighted in blue correctly, while <code>ErrGeneratingGlue</code> is not.</p>\n<p><a href=\"/user_uploads/22008/DP5X5M99Ng-0Jnd1lSe56nzP/Screenshot-2024-07-03-at-12.38.42.png\">Screenshot-2024-07-03-at-12.38.42.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/DP5X5M99Ng-0Jnd1lSe56nzP/Screenshot-2024-07-03-at-12.38.42.png\" title=\"Screenshot-2024-07-03-at-12.38.42.png\"><img src=\"/user_uploads/22008/DP5X5M99Ng-0Jnd1lSe56nzP/Screenshot-2024-07-03-at-12.38.42.png\"></a></div>",
        "id": 448739743,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719974449
    },
    {
        "content": "<p>Tree-sitter doesn't love the new syntax for Record Builders <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> </p>\n<p><a href=\"/user_uploads/22008/Fik2FSqdG7vevyH-1UHEoUvp/Screenshot-2024-07-14-at-18.46.48.png\">Screenshot-2024-07-14-at-18.46.48.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/Fik2FSqdG7vevyH-1UHEoUvp/Screenshot-2024-07-14-at-18.46.48.png\" title=\"Screenshot-2024-07-14-at-18.46.48.png\"><img src=\"/user_uploads/22008/Fik2FSqdG7vevyH-1UHEoUvp/Screenshot-2024-07-14-at-18.46.48.png\"></a></div><p>To be fair, it's a really new change. Just thought I'd mention it.</p>",
        "id": 451335211,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720946871
    },
    {
        "content": "<p>Also, I've noticed it doesn't like the \"platform\" in the <code>pf: platform \"https://github</code> part of the header.</p>\n<p><a href=\"/user_uploads/22008/9KJ674OA3dKWiySvow4sfKLM/Screenshot-2024-07-14-at-19.07.27.png\">Screenshot-2024-07-14-at-19.07.27.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/9KJ674OA3dKWiySvow4sfKLM/Screenshot-2024-07-14-at-19.07.27.png\" title=\"Screenshot-2024-07-14-at-19.07.27.png\"><img src=\"/user_uploads/22008/9KJ674OA3dKWiySvow4sfKLM/Screenshot-2024-07-14-at-19.07.27.png\"></a></div>",
        "id": 451336870,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720948085
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/316715-contributing/topic/tree-sitter.20grammar/near/451336870\">said</a>:</p>\n<blockquote>\n<p>Also, I've noticed it doesn't like the \"platform\" in the <code>pf: platform \"https://github</code> part of the header.</p>\n</blockquote>\n<p>That seems to work fine in Emacs, so I suspect it's just a missing query in Zed, not a tree-sitter grammar issue</p>",
        "id": 451338753,
        "sender_full_name": "Ajai Nelson",
        "timestamp": 1720949702
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> <a href=\"https://github.com/faldor20/tree-sitter-roc/pull/21\">https://github.com/faldor20/tree-sitter-roc/pull/21</a></p>",
        "id": 451341025,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1720951647
    },
    {
        "content": "<p>I have a PR to fix tree-sitter-roc for the new builder syntax</p>",
        "id": 451341048,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1720951665
    },
    {
        "content": "<p>Hey, <span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> I saw your forked and assumed that was your plan. Let me know if you need any help, or a hand.</p>",
        "id": 451341213,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1720951728
    },
    {
        "content": "<p>The PR is already set for merging IMO</p>",
        "id": 451341230,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1720951749
    },
    {
        "content": "<p>I guess I'll ping you on Zulip next time</p>",
        "id": 451341233,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1720951757
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"511136\">Ajai Nelson</span> <a href=\"#narrow/stream/316715-contributing/topic/tree-sitter.20grammar/near/451338753\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/316715-contributing/topic/tree-sitter.20grammar/near/451336870\">said</a>:</p>\n<blockquote>\n<p>Also, I've noticed it doesn't like the \"platform\" in the <code>pf: platform \"https://github</code> part of the header.</p>\n</blockquote>\n<p>That seems to work fine in Emacs, so I suspect it's just a missing query in Zed, not a tree-sitter grammar issue</p>\n</blockquote>\n<p>I agree with this, I have tested that in helix and neovim.</p>",
        "id": 451341239,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1720951765
    },
    {
        "content": "<p>Oh haha, I just got home after a few days away. I'll check it out now :)</p>",
        "id": 451341331,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1720951819
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span>  I've had a look at the changes needed to the grammar to fix the tags issue.<br>\nBasically with the introduction of the ! operator the structure of roc code can now be very different and I'd have to re think a lot of the assumptions, the current grammar makes</p>",
        "id": 452273964,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1721289240
    },
    {
        "content": "<p>Thank you. Look forward to hearing how you go <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 452275628,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1721289575
    },
    {
        "content": "<p>Hey folks, quick status update on this. I'm seeing a lot of new syntax coming down the pipe for roc. That's awesome, but also means potentially a lot for tree sitter churn. </p>\n<p>I've pretty much decided to not update this grammar, more than the bare minimum to keep it mostly working, until the syntax settles a bit again. </p>\n<p>I'm definitely happy to add little patches that make new syntax not to totally bork the whole document, but for the full overhaul it needs to fix all the new edge cases I'll hold off on for a while.</p>",
        "id": 470779489,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1726532006
    }
]