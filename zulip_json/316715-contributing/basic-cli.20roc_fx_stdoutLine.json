[
    {
        "content": "<p>I'm looking for some assistance with this solution... </p>\n<div class=\"codehilite\"><pre><span></span><code>app [main] {\n    pf: platform &quot;https://github.com/roc-lang/basic-cli/releases/download/0.15.0/SlwdbJ-3GR7uBWQo6zlmYWNYOxnvo8r6YABXD-45UOw.tar.br&quot;,\n    aoc: &quot;https://github.com/lukewilliamboswell/aoc-template/releases/download/0.1.0/DcTQw_U67F22cX7pgx93AcHz_ShvHRaFIFjcijF3nz0.tar.br&quot;,\n}\n\nimport pf.Stdin\nimport pf.Stdout\nimport pf.Utc\nimport aoc.AoC {\n    stdin: Stdin.bytes,\n    stdout: Stdout.write,\n    time: \\{} -&gt; Utc.now {} |&gt; Task.map Utc.toMillisSinceEpoch,\n}\n\nmain =\n    AoC.solve {\n        year: 2020,\n        day: 1,\n        title: &quot;Report Repair&quot;,\n        part1,\n        part2,\n    }\n\npart1 : Str -&gt; Result Str Str\npart1 = \\input -&gt;\n\n    numbers : List U128\n    numbers = parse input\n\n    combined : List { x : U128, y : U128, mul : U128 }\n    combined =\n        List.joinMap numbers \\x -&gt;\n            List.keepOks numbers \\y -&gt;\n                if (x + y) == 2020 then\n                    Ok { x, y, mul: x * y }\n                else\n                    Err NotValid\n\n    combined\n    |&gt; List.first\n    |&gt; Result.map \\{ x, y, mul } -&gt; &quot;$(Num.toStr x) * $(Num.toStr y) = $(Num.toStr mul)&quot;\n    |&gt; Result.mapErr \\_ -&gt; &quot;Expected at least one pair to have sum of 2020&quot;\n\npart2 : Str -&gt; Result Str Str\npart2 = \\input -&gt;\n\n    numbers : List U128\n    numbers = parse input\n\n    combined : List { x : U128, y : U128, z : U128, mul : U128 }\n    combined =\n        List.joinMap numbers \\x -&gt;\n            List.joinMap numbers \\y -&gt;\n                List.keepOks numbers \\z -&gt;\n                    if (x + y + z) == 2020 then\n                        Ok { x, y, z, mul: x * y * z }\n                    else\n                        Err NotValid\n\n    combined\n    |&gt; List.first\n    |&gt; Result.map \\{ x, y, z, mul } -&gt; &quot;$(Num.toStr x) * $(Num.toStr y) * $(Num.toStr z) = $(Num.toStr mul)&quot;\n    |&gt; Result.mapErr \\_ -&gt; &quot;Expected at least one triple to have sum of 2020&quot;\n\nparse : Str -&gt; List U128\nparse = \\input -&gt;\n    input\n    |&gt; Str.split &quot;\\n&quot;\n    |&gt; List.keepOks Str.toU128\n\nexpect\n    result = part1 example\n    result == Ok &quot;1721 * 299 = 514579&quot;\n\nexpect\n    result = part2 example\n    result == Ok &quot;979 * 366 * 675 = 241861950&quot;\n\nexpect parse example == [1721, 979, 366, 299, 675, 1456]\n\nexample =\n    &quot;&quot;&quot;\n    1721\n    979\n    366\n    299\n    675\n    1456\n    &quot;&quot;&quot;\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>$ roc --optimize 2020/01.roc &lt; input/2020_01.txt\n--- ADVENT OF CODE 2020-1: Report Repair ---\n\nINPUT:\nReading input from STDIN...\n\nPART 1:\n1939 * 81 = 157059\n\nPART 2 ERROR:\n&quot;Expected at least one triple to have sum of 2020&quot;\n\nTIMING:\nREADING INPUT:  &lt;1ms\nSOLVING PART 1: &lt;1ms\nSOLVING PART 2: 4ms\n---\n</code></pre></div>\n<p>For some reason I can't get the correct answer for Part 2... and I'm really scratching my head trying to figure out what is wrong here.</p>",
        "id": 481224941,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731028095
    },
    {
        "content": "<p>I'm going through an upgrading my solutions to use latest Roc, so people can use these as examples for ideas. But this one has me stumped. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 481225028,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731028192
    },
    {
        "content": "<p>I know what the answer is, I have a simple python script which also gives the correct answer (so I know it's not an issue with my input file).</p>",
        "id": 481225093,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731028220
    },
    {
        "content": "<p>Oh ... maybe this is a basic-cli issue reading from Stdin</p>",
        "id": 481225227,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731028329
    },
    {
        "content": "<p>Adding some dbg statements</p>\n<div class=\"codehilite\"><pre><span></span><code>parse : Str -&gt; List U128\nparse = \\input -&gt;\n    input\n    |&gt; Str.split &quot;\\n&quot;\n    |&gt; \\lines -&gt;\n        dbg List.len lines\n        lines\n    |&gt; List.keepOks Str.toU128\n    |&gt; \\numbers -&gt;\n        dbg List.len numbers\n        numbers\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>[2020/01.roc:70] List.len lines = 52\n[2020/01.roc:74] List.len numbers = 52\n</code></pre></div>\n<p>I can see only 52 numbers/lines are being parsed when the input file is 200 lines long</p>",
        "id": 481225271,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731028377
    },
    {
        "content": "<p>Looks like I may have found the issue...</p>\n<div class=\"codehilite\"><pre><span></span><code>#[no_mangle]\npub extern &quot;C&quot; fn roc_fx_stdinBytes() -&gt; RocResult&lt;RocList&lt;u8&gt;, ()&gt; {\n    let stdin = std::io::stdin();\n    let mut buffer: [u8; 256] = [0; 256];\n\n    match stdin.lock().read(&amp;mut buffer) {\n        Ok(bytes_read) =&gt; RocResult::ok(RocList::from(&amp;buffer[0..bytes_read])),\n        Err(_) =&gt; RocResult::ok(RocList::from(([]).as_slice())),\n    }\n}\n</code></pre></div>",
        "id": 481225422,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731028485
    },
    {
        "content": "<p>Reading at most 256 bytes....was this effect copied from my false interpreter years ago? I added that restriction to false to force extra io for testing purposes.</p>",
        "id": 481434537,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731134529
    },
    {
        "content": "<p>I don't have much to go off here... but 256 bytes seems ultra low to me for this kind of thing. It was good to discover though, as it's not the right effect for reading a whole file from stdin.</p>",
        "id": 481434959,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731135059
    },
    {
        "content": "<p>Yeah, stupidly small intentionally. For basic CLI should be at least 4k, if not 16k</p>",
        "id": 481437201,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731137182
    },
    {
        "content": "<p>I'll add that change in the purity inference branch <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 481437250,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731137242
    },
    {
        "content": "<p>While I'm there, I'll remove some of the RocStr hacks we've got for handling errors.</p>",
        "id": 481437395,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731137348
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[no_mangle]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">roc_fx_stdinBytes</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">RocResult</span><span class=\"o\">&lt;</span><span class=\"n\">RocList</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">BUF_SIZE</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">16_384</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// 16 KiB = 16 * 1024 = 16,384 bytes</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">stdin</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">stdin</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">BUF_SIZE</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">BUF_SIZE</span><span class=\"p\">];</span>\n\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">stdin</span><span class=\"p\">.</span><span class=\"n\">lock</span><span class=\"p\">().</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">bytes_read</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">RocResult</span><span class=\"p\">::</span><span class=\"n\">ok</span><span class=\"p\">(</span><span class=\"n\">RocList</span><span class=\"p\">::</span><span class=\"n\">from</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">buffer</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"n\">bytes_read</span><span class=\"p\">])),</span>\n<span class=\"w\">        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">RocResult</span><span class=\"p\">::</span><span class=\"n\">ok</span><span class=\"p\">(</span><span class=\"n\">RocList</span><span class=\"p\">::</span><span class=\"n\">from</span><span class=\"p\">(([]).</span><span class=\"n\">as_slice</span><span class=\"p\">())),</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 481437584,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731137518
    },
    {
        "content": "<p>Shouldn't that return Eof at least as an error?</p>",
        "id": 481437678,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731137589
    },
    {
        "content": "<p>I think end of file returns  <code>Ok</code></p>",
        "id": 481437772,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731137691
    },
    {
        "content": "<p>There's an <code>ErrorKind::UnexpectedEof</code> </p>\n<blockquote>\n<p>An error returned when an operation could not be completed because an \"end of file\" was reached prematurely.<br>\nThis typically means that an operation could only succeed if it read a particular number of bytes but only a smaller number of bytes could be read.</p>\n</blockquote>",
        "id": 481437802,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731137722
    },
    {
        "content": "<p>I'm going to change that effect to handle errors, this is the set I've got that I think are helpful.</p>\n<div class=\"codehilite\"><pre><span></span><code>InternalIOErr : {\n    tag : [\n        BrokenPipe,\n        WouldBlock,\n        WriteZero,\n        Unsupported,\n        Interrupted,\n        OutOfMemory,\n        UnexpectedEof,\n        InvalidInput,\n        Other,\n    ],\n    msg : Str,\n}\n</code></pre></div>",
        "id": 481437900,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731137799
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">From</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">InternalIOErr</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 481437923,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731137835
    },
    {
        "content": "<p>I don't think you will ever hit WouldBlock</p>",
        "id": 481438034,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731137927
    },
    {
        "content": "<p>I've got this same type for all the Stdio effects -- sorry forgot to mention that</p>",
        "id": 481438049,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731137956
    },
    {
        "content": "<p>Yeah, but basic CLI doesn't support async io</p>",
        "id": 481438065,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731137993
    },
    {
        "content": "<p>So wouldblock shouldn't ever happen as an error</p>",
        "id": 481438116,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731138004
    },
    {
        "content": "<p>Also, I wonder what a write zero error is</p>",
        "id": 481438131,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731138028
    },
    {
        "content": "<p>Just doing a quick review of all the error kinds.. 1 min</p>",
        "id": 481438338,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731138232
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/std/io/enum.ErrorKind.html\">https://doc.rust-lang.org/std/io/enum.ErrorKind.html</a></p>\n<div class=\"codehilite\"><pre><span></span><code>#[non_exhaustive]\npub enum ErrorKind {\n    NotFound, // YES\n    PermissionDenied, // YES\n    ConnectionRefused, // OTHER -- uncommon server related\n    ConnectionReset, // OTHER -- uncommon server related\n    HostUnreachable, // NO - experimental\n    NetworkUnreachable, // NO - experimental\n    ConnectionAborted, // OTHER -- uncommon\n    NotConnected, // OTHER -- uncommon\n    AddrInUse, // OTHER -- uncommon\n    AddrNotAvailable, // OTHER -- uncommon\n    NetworkDown,  // NO - experimental\n    BrokenPipe, // YES - pipe was closed\n    AlreadyExists, // YES\n    WouldBlock, // OTHER -- async not used in basic-cli\n    NotADirectory,  // NO - experimental\n    IsADirectory,  // NO - experimental\n    DirectoryNotEmpty,  // NO - experimental\n    ReadOnlyFilesystem,  // NO - experimental\n    FilesystemLoop,  // NO - experimental\n    StaleNetworkFileHandle,  // NO - experimental\n    InvalidInput,  // NO -- parameter was incorrect, unlikely to be hit\n    InvalidData, // NO -- operation parameters were valid, however the error was caused by malformed input data, unlikely to be hit\n    TimedOut, // YES -- operation’s timeout expired, causing it to be canceled\n    WriteZero, // OTHER -- uncommon\n    StorageFull, // NO - experimental\n    NotSeekable, // NO - experimental\n    FilesystemQuotaExceeded, // NO - experimental\n    FileTooLarge, // NO - experimental\n    ResourceBusy, // NO - experimental\n    ExecutableFileBusy, // NO - experimental\n    Deadlock, // NO - experimental\n    CrossesDevices, // NO - experimental\n    TooManyLinks, // NO - experimental\n    InvalidFilename, // NO - experimental\n    ArgumentListTooLong, // NO - experimental\n    Interrupted, // YES - Interrupted operations can typically be retried\n    Unsupported, // YES - operation is unsupported on this platform\n    UnexpectedEof, // OTHER - unlikely to be hit\n    OutOfMemory, // YES\n    Other, // OTHER -- catch all\n}\n</code></pre></div>\n<p>Leaves us with the following...</p>\n<div class=\"codehilite\"><pre><span></span><code>RocIOError [\n    NotFound, // YES\n    PermissionDenied, // YES\n    BrokenPipe, // YES - pipe was closed\n    AlreadyExists, // YES\n    TimedOut, // YES -- operation’s timeout expired, causing it to be canceled\n    Interrupted, // YES - Interrupted operations can typically be retried\n    Unsupported, // YES - operation is unsupported on this platform\n    OutOfMemory, // YES\n    ++ OTHER Str for everything else.\n]\n</code></pre></div>",
        "id": 481438638,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731138508
    },
    {
        "content": "<p>Is timedout also async io specific?</p>",
        "id": 481438750,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731138612
    },
    {
        "content": "<p>Also, wow, so many experimental</p>",
        "id": 481438764,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731138622
    },
    {
        "content": "<p>And otherwise, the list looks good to me</p>",
        "id": 481438810,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731138671
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/316715-contributing/topic/basic-cli.20roc_fx_stdoutLine/near/481438750\">said</a>:</p>\n<blockquote>\n<p>Is timedout also async io specific?</p>\n</blockquote>\n<p>I'll move it to OTHER category</p>",
        "id": 481439153,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731138954
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> </p>\n<p>Just looking at this </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[no_mangle]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">roc_fx_stdinLine</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">RocResult</span><span class=\"o\">&lt;</span><span class=\"n\">RocStr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">glue</span><span class=\"p\">::</span><span class=\"n\">IOErr</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">stdin</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">stdin</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">stdin</span><span class=\"p\">.</span><span class=\"n\">lock</span><span class=\"p\">().</span><span class=\"n\">lines</span><span class=\"p\">().</span><span class=\"n\">next</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">RocResult</span><span class=\"p\">::</span><span class=\"n\">err</span><span class=\"p\">(</span><span class=\"n\">RocStr</span><span class=\"p\">::</span><span class=\"n\">from</span><span class=\"p\">(</span><span class=\"s\">\"EOF\"</span><span class=\"p\">)),</span>\n<span class=\"w\">        </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"kt\">str</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">RocResult</span><span class=\"p\">::</span><span class=\"n\">ok</span><span class=\"p\">(</span><span class=\"n\">RocStr</span><span class=\"p\">::</span><span class=\"n\">from</span><span class=\"p\">(</span><span class=\"kt\">str</span><span class=\"p\">.</span><span class=\"n\">as_str</span><span class=\"p\">())),</span>\n<span class=\"w\">        </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">io_err</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">RocResult</span><span class=\"p\">::</span><span class=\"n\">err</span><span class=\"p\">(</span><span class=\"n\">io_err</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">()),</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Instead of returning an <code>Err EndOfFile</code> I'm thinking we should return an <code>Ok \"EOT\"</code> where EOT is the ASCII 04 for end of transmission.</p>",
        "id": 481440132,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731139836
    },
    {
        "content": "<p>My thoughts are that it's not an error condition, reading has succeeded there is just nothing further to read.</p>",
        "id": 481440166,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731139879
    },
    {
        "content": "<p>I'm definitely on the fence here... because it would be easy to just return another Err tag for EndOfFile</p>",
        "id": 481440251,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731139939
    },
    {
        "content": "<p>So like this.. </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[no_mangle]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">roc_fx_stdinLine</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">RocResult</span><span class=\"o\">&lt;</span><span class=\"n\">RocStr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">glue</span><span class=\"p\">::</span><span class=\"n\">IOErr</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">stdin</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">stdin</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">stdin</span><span class=\"p\">.</span><span class=\"n\">lock</span><span class=\"p\">().</span><span class=\"n\">lines</span><span class=\"p\">().</span><span class=\"n\">next</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">RocResult</span><span class=\"p\">::</span><span class=\"n\">ok</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\x04</span><span class=\"s\">\"</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">()),</span>\n<span class=\"w\">        </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"kt\">str</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">RocResult</span><span class=\"p\">::</span><span class=\"n\">ok</span><span class=\"p\">(</span><span class=\"kt\">str</span><span class=\"p\">.</span><span class=\"n\">as_str</span><span class=\"p\">().</span><span class=\"n\">into</span><span class=\"p\">()),</span>\n<span class=\"w\">        </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">io_err</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">RocResult</span><span class=\"p\">::</span><span class=\"n\">err</span><span class=\"p\">(</span><span class=\"n\">io_err</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">()),</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 481440380,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731140079
    },
    {
        "content": "<p>I definitely wouldn't return a valid string. that will just confuse users</p>",
        "id": 481441360,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731140962
    },
    {
        "content": "<p>It needs to be a tag of some sort</p>",
        "id": 481441363,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731140968
    },
    {
        "content": "<p>It can be in the ok tag, but that is probably less convenient than putting it in the error tag</p>",
        "id": 481441373,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731140994
    },
    {
        "content": "<p>I do agree that it generally isn't an actual error</p>",
        "id": 481441442,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731141029
    },
    {
        "content": "<p>This is how I was thinking of handling it in the example</p>\n<div class=\"codehilite\"><pre><span></span><code>when Stdin.line! {} is\n\n    # End of Transmission (EOT) / File (EOF)\n    Ok str if str == &quot;\\x04&quot; -&gt;\n        try Stdout.line! (echo &quot;Received end of input.&quot;)\n        Ok {}\n\n    Ok str -&gt;\n        try Stdout.line! (echo str)\n        tick! {}\n\n    Err (StdinErr err) -&gt;\n        try Stdout.line! (echo &quot;Unable to read input $(Inspect.toStr err)&quot;)\n        Ok {}\n</code></pre></div>",
        "id": 481441551,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731141148
    },
    {
        "content": "<p>But I think a tag is clearer</p>",
        "id": 481441595,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731141201
    },
    {
        "content": "<p>Found an API that feels nice</p>\n<div class=\"codehilite\"><pre><span></span><code>line! : {} =&gt; Result Str [EndOfFile, StdinErr Err]\nbytes! : {} =&gt; Result (List U8) [StdinErr Err]\nreadToEnd! : {} =&gt; Result (List U8) [StdinErr Err]\n</code></pre></div>",
        "id": 481442374,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731142014
    },
    {
        "content": "<p>It feels a bit weird to put <code>EndOfFile</code> in the error group of the Result.</p>",
        "id": 481451458,
        "sender_full_name": "Anton",
        "timestamp": 1731151014
    },
    {
        "content": "<p>I feel like this was iterated on before. We had Eof in the ok side. Even though it technically makes more sense, it is less convenient to use in general.</p>",
        "id": 481471456,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731167438
    },
    {
        "content": "<p>Also, bytes vs read to end feels a bit strange</p>",
        "id": 481471497,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731167484
    },
    {
        "content": "<p>Shouldn't it just be read and read to end?</p>",
        "id": 481471506,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731167495
    },
    {
        "content": "<blockquote>\n<p>I feel like this was iterated on before.</p>\n</blockquote>\n<p>Yeah, me too but I could not find it on github</p>",
        "id": 481472823,
        "sender_full_name": "Anton",
        "timestamp": 1731168538
    }
]