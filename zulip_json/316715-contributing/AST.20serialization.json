[
    {
        "content": "<p>I want to add AST dump functionality but not sure what's the most meaningful way to do it. On the one hand, the simplest as-is serialization from what we have is a reflection of the parser. On the other hand, it's complicated and not unified (e.g. <code>Defs</code> is a SoA but it's not important for AST dump).<br>\nI'm leaning towards creating a separate crate but want to discuss the problem first.</p>",
        "id": 452060651,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1721220532
    },
    {
        "content": "<p>like dump to disk?</p>",
        "id": 452061924,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1721220988
    },
    {
        "content": "<p>a separate crate sounds smart, that way we don't spend any time building it or its unique dependencies when we don't need it</p>",
        "id": 452061939,
        "sender_full_name": "Anton",
        "timestamp": 1721220993
    },
    {
        "content": "<blockquote>\n<p>like dump to disk?</p>\n</blockquote>\n<p>yeah, for different purposes. the nearest is ast visualization. the furthest is roc code generation from ast externally (e.g. for lang-to-roc transformers. roc preprocessors? <span aria-label=\"death\" class=\"emoji emoji-2620\" role=\"img\" title=\"death\">:death:</span> )</p>",
        "id": 452062346,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1721221127
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"584248\">@Kiryl Dziamura</span> , I'm also interested in this for the purpose of refactoring tools. I have some local experiments but nothing I'm particularly happy with. If you have any demos or insights feel free to loop me in maybe I can help.</p>",
        "id": 456261450,
        "sender_full_name": "Ray Myers",
        "timestamp": 1722741174
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"726142\">@Ray Myers</span> ! Unfortunately, have nothing to show yet, and I have a hectic schedule these days <span aria-label=\"disappointed\" class=\"emoji emoji-1f61e\" role=\"img\" title=\"disappointed\">:disappointed:</span> <br>\nFeel free to create a PR!</p>",
        "id": 457350504,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1723119227
    },
    {
        "content": "<p>Oh cool! Are you thinking some kind of textual / human-readable format? Will it need to be parsable back into the exact same types - or just visualized in some separate process?</p>\n<p>BTW I've been thinking broadly in the same area, but from the angle of serializing the AST for the purpose of sharing it with \"plugins\" written in Roc, that would take the AST, do some modification, and send it back for formatting / saving to the editor. (e.g. things like writing your own auto-upgrade scripts to migrate from one version of a library to another / etc)</p>\n<p>Maybe these could be the same thing?</p>",
        "id": 459344244,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1723173523
    },
    {
        "content": "<p>On second try I had some progress, I was able to convert this code to S-Expressions using the Expr data structure returned by <code>can_expr_with</code>, which is a canonicalized AST. This is probably too lossy for a refactoring tool, we can talk about what the different needs are. I'll try to get this into a draft PR.</p>\n<h2>Roc:</h2>\n<div class=\"codehilite\"><pre><span></span><code>birds = 3\niguanas = 2\ntotal = addAndStringify birds iguanas\n\naddAndStringify = \\num1, num2 -&gt;\n    Num.toStr (num1 + num2)\n&quot;There are $(total) animals.&quot;\n</code></pre></div>\n<h2>S-Expressions</h2>\n<p>(manually indented)</p>\n<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nv\">LetNonRec</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"s\">\"Test.birds\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">Num</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"nv\">LetNonRec</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"s\">\"Test.iguanas\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">Num</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"nv\">LetNonRec</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"s\">\"Test.addAndStringify\"</span>\n<span class=\"w\">                                </span><span class=\"p\">(</span><span class=\"nv\">Closure</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"s\">\"Test.IdentId(4)\"</span><span class=\"w\"> </span><span class=\"s\">\"Test.IdentId(5)\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">Call</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">Var</span><span class=\"w\"> </span><span class=\"s\">\"Num.toStr\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">Call</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">Var</span><span class=\"w\"> </span><span class=\"s\">\"Num.add\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">Var</span><span class=\"w\"> </span><span class=\"s\">\"Test.IdentId(4)\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">Var</span><span class=\"w\"> </span><span class=\"s\">\"Test.IdentId(5)\"</span><span class=\"p\">)))))</span>\n<span class=\"w\">       </span><span class=\"p\">(</span><span class=\"nv\">LetNonRec</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"s\">\"Test.total\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">Call</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">Var</span><span class=\"w\"> </span><span class=\"s\">\"Test.addAndStringify\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">Var</span><span class=\"w\"> </span><span class=\"s\">\"Test.birds\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">Var</span><span class=\"w\"> </span><span class=\"s\">\"Test.iguanas\"</span><span class=\"p\">)))</span>\n<span class=\"w\">         </span><span class=\"p\">(</span><span class=\"nv\">Call</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">Var</span><span class=\"w\"> </span><span class=\"s\">\"Str.concat\"</span><span class=\"p\">)</span>\n<span class=\"w\">                    </span><span class=\"p\">(</span><span class=\"nv\">Str</span><span class=\"w\"> </span><span class=\"s\">\"There are \"</span><span class=\"p\">)</span>\n<span class=\"w\">                    </span><span class=\"p\">(</span><span class=\"nv\">Call</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">Var</span><span class=\"w\"> </span><span class=\"s\">\"Str.concat\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">Var</span><span class=\"w\"> </span><span class=\"s\">\"Test.total\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">Str</span><span class=\"w\"> </span><span class=\"s\">\" animals.\"</span><span class=\"p\">)))))))</span>\n</code></pre></div>\n<h2>Rust Debug Formatted Expr</h2>\n<p><a href=\"https://gist.github.com/raymyers/72d82720d20848d99dd7350b4d29a6a1\">https://gist.github.com/raymyers/72d82720d20848d99dd7350b4d29a6a1</a></p>",
        "id": 459472959,
        "sender_full_name": "Ray Myers",
        "timestamp": 1723209659
    },
    {
        "content": "<p>Curious what your goals are for using the canonicalized ast? I agree that may be hard to get to work properly for a refactoring tool.</p>",
        "id": 462001756,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1723516609
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453336\">Joshua Warner</span> <a href=\"#narrow/stream/316715-contributing/topic/AST.20serialization/near/462001756\">said</a>:</p>\n<blockquote>\n<p>Curious what your goals are for using the canonicalized ast? I agree that may be hard to get to work properly for a refactoring tool.</p>\n</blockquote>\n<p>It was for an interpreter. Not sure how necessary it is though, those steps might not be hard to re-implement.</p>",
        "id": 462177922,
        "sender_full_name": "Ray Myers",
        "timestamp": 1723572488
    },
    {
        "content": "<p>Ahh that makes sense.</p>",
        "id": 462265999,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1723613251
    }
]