[
    {
        "content": "<p>Having a crack at this and I'm a little stuck. Just wondering if there is something obvious I'm missing here.</p>\n<div class=\"codehilite\"><pre><span></span><code>no method named `is_refcounted` found for reference `&amp;ManuallyDrop&lt;T&gt;` in the current scope\nfound the following associated functions; to be used as methods, functions must have a `self` parameter\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">RocRefcounted</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">RocResult</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span>\n<span class=\"k\">where</span>\n<span class=\"w\">    </span><span class=\"n\">T</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">RocRefcounted</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">E</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">RocRefcounted</span><span class=\"p\">,</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">inc</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">as_result_of_refs</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">payload</span><span class=\"p\">.</span><span class=\"n\">is_refcounted</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"n\">payload</span><span class=\"p\">.</span><span class=\"n\">inc</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">            </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">payload</span><span class=\"p\">.</span><span class=\"n\">is_refcounted</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"n\">payload</span><span class=\"p\">.</span><span class=\"n\">inc</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">            </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">dec</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">todo!</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">is_refcounted</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">todo!</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 451346254,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720955854
    },
    {
        "content": "<p>I think I'm closer...</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">RocRefcounted</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">RocResult</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span>\n<span class=\"k\">where</span>\n<span class=\"w\">    </span><span class=\"n\">T</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">RocRefcounted</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">E</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">RocRefcounted</span><span class=\"p\">,</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">inc</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tag</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"n\">RocResultTag</span><span class=\"p\">::</span><span class=\"n\">RocOk</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">payload</span><span class=\"p\">.</span><span class=\"n\">ok</span><span class=\"p\">).</span><span class=\"n\">inc</span><span class=\"p\">(),</span>\n<span class=\"w\">                </span><span class=\"n\">RocResultTag</span><span class=\"p\">::</span><span class=\"n\">RocErr</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">payload</span><span class=\"p\">.</span><span class=\"n\">err</span><span class=\"p\">).</span><span class=\"n\">inc</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">dec</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tag</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"n\">RocResultTag</span><span class=\"p\">::</span><span class=\"n\">RocOk</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">payload</span><span class=\"p\">.</span><span class=\"n\">ok</span><span class=\"p\">).</span><span class=\"n\">dec</span><span class=\"p\">(),</span>\n<span class=\"w\">                </span><span class=\"n\">RocResultTag</span><span class=\"p\">::</span><span class=\"n\">RocErr</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">payload</span><span class=\"p\">.</span><span class=\"n\">err</span><span class=\"p\">).</span><span class=\"n\">dec</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">is_refcounted</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tag</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"n\">RocResultTag</span><span class=\"p\">::</span><span class=\"n\">RocOk</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">payload</span><span class=\"p\">.</span><span class=\"n\">ok</span><span class=\"p\">).</span><span class=\"n\">is_refcounted</span><span class=\"p\">(),</span>\n<span class=\"w\">                </span><span class=\"n\">RocResultTag</span><span class=\"p\">::</span><span class=\"n\">RocErr</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">payload</span><span class=\"p\">.</span><span class=\"n\">err</span><span class=\"p\">).</span><span class=\"n\">is_refcounted</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><a href=\"/user_uploads/22008/EkMUBQgD89wOoqZDmcWJK2EI/Screenshot-2024-07-14-at-21.32.50.png\">Screenshot-2024-07-14-at-21.32.50.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/EkMUBQgD89wOoqZDmcWJK2EI/Screenshot-2024-07-14-at-21.32.50.png\" title=\"Screenshot-2024-07-14-at-21.32.50.png\"><img src=\"/user_uploads/22008/EkMUBQgD89wOoqZDmcWJK2EI/Screenshot-2024-07-14-at-21.32.50.png\"></a></div><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">RocRefcounted</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"sd\">/// Increments the refcount.</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">inc</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"sd\">/// Decrements the refcount potentially freeing the underlying allocation.</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">dec</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"sd\">/// Returns true if the type is actually refcounted by roc.</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">is_refcounted</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 451346969,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720956804
    },
    {
        "content": "<p>is_refcointed should have a branch</p>",
        "id": 451365955,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720973897
    },
    {
        "content": "<p>Should be true if either the ok or err is refcounted</p>",
        "id": 451365972,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720973917
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">fn</span><span class=\"w\"> </span><span class=\"nv\">is_refcounted</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">bool</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kt\">T</span><span class=\"nf\">::</span><span class=\"nv\">is_refcounted</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"nf\">||</span><span class=\"w\"> </span><span class=\"kt\">E</span><span class=\"nf\">::</span><span class=\"nv\">is_refcounted</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 451367961,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720976082
    },
    {
        "content": "<p>Also need to implement this</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">roc_std</span><span class=\"p\">::</span><span class=\"n\">RocRefcounted</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">SQLiteValue</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">inc</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">unimplemented!</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">dec</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">unimplemented!</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">is_refcounted</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kc\">true</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 451389236,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720999824
    },
    {
        "content": "<p>This was generated by roc glue. I might try hand implementing first.</p>",
        "id": 451389283,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720999893
    },
    {
        "content": "<p>I think I know where the problem might be for basic-cli...</p>\n<p>We have a lot of hand-rolled interface types like the following.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[repr(C)]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">InternalResponse</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">body</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">RocList</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">metadata</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Metadata</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">variant</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">RocStr</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">#[repr(C)]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Metadata</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">headers</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">RocList</span><span class=\"o\">&lt;</span><span class=\"n\">Header</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">url</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">RocStr</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">statusCode</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">u16</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">statusText</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">RocStr</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Do we need to do/change anything to manage the refcounting in these correctly?</p>",
        "id": 451389950,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1721000732
    },
    {
        "content": "<p>Like if roc gives the host one of these, or the host gives roc one, do we need to use the RocRefcounted fn's at all?</p>",
        "id": 451390091,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1721000888
    },
    {
        "content": "<blockquote>\n<p>Do we need to do/change anything to manage the refcounting in these correctly?</p>\n</blockquote>\n<p>If they aren't put in lists, nothing should change</p>",
        "id": 451391903,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721002893
    },
    {
        "content": "<p>So only if you give a <code>List InternalResponse</code> To/from roc.</p>",
        "id": 451391971,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721002925
    },
    {
        "content": "<blockquote>\n<p><code>SQLiteValue</code></p>\n</blockquote>\n<p>Must have missed that, I thought it would fall under a struct style tag, but I guess it is a non-recursive tag which needs smarter rules</p>",
        "id": 451391994,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721002968
    },
    {
        "content": "<p>impl should just be a match statement and then calling inc/dec on the values within it.</p>",
        "id": 451392010,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721002988
    },
    {
        "content": "<p>OK. </p>\n<p>Well, I'm currently porting some of the changes we made in basic-cli across to basic-webserver so there is less glue there and trying to implement these RefCounted things.</p>",
        "id": 451392031,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1721003022
    },
    {
        "content": "<p>I haven't found the issue in basic-cli</p>",
        "id": 451392046,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1721003035
    },
    {
        "content": "<blockquote>\n<p>I haven't found the issue in basic-cli</p>\n</blockquote>\n<p>I think likely the bug is on the roc internal side and not platform related.</p>",
        "id": 451392111,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721003073
    },
    {
        "content": "<p>Also, is args.roc the only one with issues?</p>",
        "id": 451392130,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721003102
    },
    {
        "content": "<p>I'm not sure, it's the first one on the list and fails in the expect script</p>",
        "id": 451392298,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1721003256
    },
    {
        "content": "<p>Ok, figured you can run the expect scripts manually using </p>\n<div class=\"codehilite\"><pre><span></span><code>$ EXAMPLES_DIR=examples/ expect ci/expect_scripts/args.exp\nspawn examples//args div -n 5 -d 20\nargs(82068,0x201c58c00) malloc: Heap corruption detected, free list is damaged at 0x600000f48080\n*** Incorrect guard value: 145982044012671\nargs(82068,0x201c58c00) malloc: *** set a breakpoint in malloc_error_break to debug\n\nError: output was different from expected value.\n</code></pre></div>",
        "id": 451392384,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1721003322
    },
    {
        "content": "<p>Just ran them all manually, only <code>args.roc</code> is failing</p>",
        "id": 451392536,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1721003451
    },
    {
        "content": "<p>Args with valgrind, core issue:</p>\n<div class=\"codehilite\"><pre><span></span><code># Probably reading heap size on a list allocated without a heap size?\n=56308== Invalid read of size 8\n==56308==    at 0x1CDF43: ??? (roc_app:0)\n==56308==    by 0x1D1E03: ??? (roc_app:0)\n==56308==    by 0x1AAAB7: List_walkTryHelp_147f9a29f721bc6a47c431ffbf897368d53af6834eae9416f984da7fc2dd89 (roc_app:0)\n\n\n# Double free\n==56308==  Address 0x4b6d4b0 is 0 bytes inside a block of size 9 free&#39;d\n==56308==    at 0x48469E4: free (in /nix/store/78zxvxfy6klvwfc2s95y71y0b284fd6v-valgrind-3.22.0/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)\n==56308==    by 0x1D4882: roc_dealloc (lib.rs:81)\n==56308==    by 0x1CE2CA: decrement_refcounted_ptr_8 (roc_app:0)\n==56308==    by 0x1CE27D: ??? (roc_app:0)\n==56308==    by 0x18DB36: #Attr_#generic_rc_by_ref_2_dec (roc_app:0)\n==56308==    by 0x18DB36: Arg.Parser_constructSetOfOptions_3655121d7ba98da90331d38b92032d451b515e695221ee2a9d34aa692cd2c (roc_app:0)\n\n# Use after free\n==56308== Invalid write of size 8\n==56308==    at 0x1CDF64: ??? (roc_app:0)\n==56308==    by 0x1D1E03: ??? (roc_app:0)\n==56308==    by 0x1AAAB7: List_walkTryHelp_147f9a29f721bc6a47c431ffbf897368d53af6834eae9416f984da7fc2dd89 (roc_app:0)\n==56308==    by 0x194BAE: List_walkTry_1d346aa605d9beef3d3c8b59d397858b899a3c7efdcede8d0efd4953334f936 (roc_app:0)\n</code></pre></div>",
        "id": 451392559,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721003482
    },
    {
        "content": "<p>So almost certainly a refcounting bug of some sort.</p>",
        "id": 451392566,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721003494
    },
    {
        "content": "<p>Just need to figure out how to debug it.</p>",
        "id": 451392572,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721003500
    },
    {
        "content": "<p>Add some sort of minimal repro to <code>gen_refcount</code></p>",
        "id": 451392582,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721003515
    },
    {
        "content": "<p>All the cli parser combinators are pretty complex, so would prefer something more minimal....</p>",
        "id": 451392629,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721003544
    },
    {
        "content": "<p>I think I've found a more minimal repro, but some reason I can't get it to run as a <code>gen_refcount</code> test. So still need to mess with debugging more.</p>",
        "id": 451396353,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721006929
    },
    {
        "content": "<p>Much more minimal repro of at least one refcounting issue:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">app</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nv\">pf</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">platform</span><span class=\"w\"> </span><span class=\"s\">\"../platform/main.roc\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">pf.Stdout</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">pf.Task</span><span class=\"w\"> </span><span class=\"nv\">exposing</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Task</span><span class=\"p\">]</span>\n\n<span class=\"kt\">Arg</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">    </span><span class=\"kt\">Short</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"kt\">ShortGroup</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">names</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">complete</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Complete</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Partial</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"kt\">Long</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">name</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">NoValue</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"kt\">Parameter</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n\n<span class=\"nv\">constructSetOfOptions</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Arg</span>\n<span class=\"nv\">constructSetOfOptions</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">combined</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">options</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">        </span><span class=\"nv\">combined</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toUtf8</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">keepOks</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">fromUtf8</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">c</span><span class=\"p\">]</span>\n\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">options</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"p\">[</span><span class=\"nv\">alone</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Short</span><span class=\"w\"> </span><span class=\"nv\">alone</span>\n<span class=\"w\">        </span><span class=\"nv\">other</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">ShortGroup</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">names</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">other</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">complete</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Complete</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"kr\">main </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"s\">\"-d\"</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">splitFirst</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"s\">\"-\"</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">            </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nv\">after</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                </span><span class=\"nv\">constructSetOfOptions</span><span class=\"w\"> </span><span class=\"nv\">after</span>\n<span class=\"w\">            </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                </span><span class=\"kt\">Parameter</span><span class=\"w\"> </span><span class=\"s\">\"err\"</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">len</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toStr</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span>\n</code></pre></div>",
        "id": 451398243,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721008627
    },
    {
        "content": "<p>Seems like the bug is somehow with pattern matching extracting  a value...no idea how though. Maybe I am missing something:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">constructSetOfOptions</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Arg</span>\n<span class=\"nv\">constructSetOfOptions</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">combined</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">options</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">        </span><span class=\"nv\">combined</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toUtf8</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">keepOks</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">fromUtf8</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">c</span><span class=\"p\">]</span>\n\n<span class=\"w\">    </span><span class=\"nv\">dbg</span><span class=\"w\"> </span><span class=\"nv\">options</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">options</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"p\">[</span><span class=\"nv\">alone</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"nv\">dbg</span><span class=\"w\"> </span><span class=\"nv\">alone</span>\n<span class=\"w\">            </span><span class=\"kt\">Short</span><span class=\"w\"> </span><span class=\"nv\">alone</span>\n<span class=\"w\">        </span><span class=\"nv\">other</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">ShortGroup</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">names</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">other</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">complete</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Complete</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"kr\">main </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"s\">\"-d\"</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">splitFirst</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"s\">\"-\"</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">            </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nv\">after</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                </span><span class=\"nv\">out</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">constructSetOfOptions</span><span class=\"w\"> </span><span class=\"nv\">after</span>\n<span class=\"w\">                </span><span class=\"nv\">dbg</span><span class=\"w\"> </span><span class=\"nv\">out</span>\n<span class=\"w\">                </span><span class=\"nv\">out</span>\n<span class=\"w\">            </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                </span><span class=\"kt\">Parameter</span><span class=\"w\"> </span><span class=\"s\">\"err\"</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">len</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toStr</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span>\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>[examples/args.roc:22] options = [&quot;d&quot;]\n[examples/args.roc:25] alone = &quot;d&quot;\n[examples/args.roc:35] out = (Short &quot;�&quot;)\n</code></pre></div>",
        "id": 451398902,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721009077
    },
    {
        "content": "<p>Or maybe treating something as a large string/slice incorrectly.</p>",
        "id": 451398941,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721009111
    },
    {
        "content": "<p>Oh, interesting, I think the issue might actually be pattern matching directly... (I guess I don't know how pattern matching does refcounting).<br>\nThis is fine:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">len</span><span class=\"w\"> </span><span class=\"nv\">options</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"w\">        </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">get</span><span class=\"w\"> </span><span class=\"nv\">options</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">            </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">alone</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Short</span><span class=\"w\"> </span><span class=\"nv\">alone</span>\n<span class=\"w\">            </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">crash</span><span class=\"w\"> </span><span class=\"s\">\"impossible\"</span>\n<span class=\"w\">    </span><span class=\"kr\">else</span>\n<span class=\"w\">        </span><span class=\"kt\">ShortGroup</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">names</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">options</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">complete</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Complete</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 451399259,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721009313
    },
    {
        "content": "<p>Ok even more minimal:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kr\">main </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"kr\">in</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">fromUtf8</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nf\">'</span><span class=\"nv\">d'</span><span class=\"p\">]]</span>\n<span class=\"w\">    </span><span class=\"nv\">out</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">        </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"kr\">in</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"nv\">alone</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">alone</span><span class=\"p\">]</span>\n<span class=\"w\">            </span><span class=\"nv\">other</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">other</span>\n<span class=\"w\">    </span><span class=\"nv\">out</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">len</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toStr</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span>\n</code></pre></div>",
        "id": 451399990,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721009806
    },
    {
        "content": "<p>Ok, so I've done a fair bit of refactoring for basic-webserver for these changes. It looks like everything is happy, the platform and all the examples check and build ok, but whenever I run the server and actually call into roc I get the following error from inside Roc.</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;tokio-runtime-worker&#39; panicked at crates/roc_host/src/roc.rs:42:5:\nThe Roc app crashed with: NoImplementationNamed { def_symbol: `38.IdentId(2)` }\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\nthread &#39;tokio-runtime-worker&#39; panicked at crates/roc_host/src/http_server.rs:87:26:\ncalled `Result::unwrap()` on an `Err` value: JoinError::Panic(Id(10), ...)\n</code></pre></div>",
        "id": 451407351,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1721016828
    },
    {
        "content": "<p>Never mind, I found the thing that causes that is when you have a type annotation but have provided the implementation. Oops on my part.</p>",
        "id": 451407525,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1721016984
    },
    {
        "content": "<p>Ok, so I think I've completed the refactor for basic-webserver. I added all the changes to the <a href=\"https://github.com/roc-lang/basic-webserver/pull/54\">refactor-host PR</a>. <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> </p>\n<p>I have some failing expect scripts, but I can verify it's behaving correctly manually... so I think it's just a macos versus linux CI thing.</p>\n<p>Before this will pass in CI it also needs a new nightly with the Refcount changes, and a release of basic-cli. But otherwise looks like everything is running ok on my macos. </p>\n<p>I can also test it on my linux machine later.</p>",
        "id": 451408078,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1721017512
    },
    {
        "content": "<p>I've been testing the updated/refactored basic-webserver with the demo web app I've been working on, so am pretty confident it's working well.</p>",
        "id": 451410560,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1721019482
    },
    {
        "content": "<p>The RC bug looks to be llvm specific (which makes sense, cause llvm rolls its own rc while other backends generate refcount procs).</p>",
        "id": 451536694,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721059999
    },
    {
        "content": "<p>Yep, a use after free for sure in llvm. The list <code>['d']</code> was converted to a <code>Str</code>, but still got freed anyway.</p>\n<div class=\"codehilite\"><pre><span></span><code>+ allocated u8@60000166c040 (1 bytes with alignment 8)\n+ allocated u8@600001a600c0 (32 bytes with alignment 8)\ndecref list: (8,32,true,fn(?[*]u8) callconv(.C) void@1049a9420)\nfreeing underlying elements from: (u8@600001a600d0, 1)\n| decrement isize@60000166c040: 1 - 1 = 0!\n💀 freed u8@60000166c040\n| decrement isize@600001a600c8: 1 - 1 = 0!\n💀 freed u8@600001a600c0\n+ allocated u8@600001a600c0 (32 bytes with alignment 8)\ndecref list: (8,32,true,fn(?[*]u8) callconv(.C) void@1049a9420)\nfreeing underlying elements from: (u8@600001a600d0, 1)\n| decrement isize@60000166c040: 9223523571393151041 - 1 = 9223523571393151040!\n| decrement isize@600001a600c8: 1 - 1 = 0!\n💀 freed u8@600001a600c0\n</code></pre></div>",
        "id": 451546332,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721061861
    },
    {
        "content": "<p><code>60000166c040</code> specifically</p>",
        "id": 451546545,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721061898
    },
    {
        "content": "<p>Is this output from a tool?</p>",
        "id": 451558063,
        "sender_full_name": "Anton",
        "timestamp": 1721063721
    },
    {
        "content": "<p>Debug prints in our zig builtins</p>",
        "id": 451559387,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721063919
    },
    {
        "content": "<p>Some behind flags that already exist. A few new.</p>",
        "id": 451559498,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721063935
    },
    {
        "content": "<p>Testing the changes on my x64 linux machine -- in short basic-webserver refactor host branch is good to go. </p>\n<p>The above free issue prevents us from using basic-cli.</p>\n<div class=\"codehilite\"><pre><span></span><code>08:44:37 ~/Documents/Github/basic-cli refactor-host$ roc --prebuilt-platform examples/args.roc -- div 5 2\nfree(): invalid next size (fast)\n</code></pre></div>\n<p>This prevents us from using the build script for basic-webserver as it uses argument parsing. </p>\n<div class=\"codehilite\"><pre><span></span><code>08:44:11 ~/Documents/Github/basic-webserver refactor-host$ roc --prebuilt-platform build.roc\nfree(): invalid pointer\n</code></pre></div>\n<p>Running through the build steps manually I can verify that basic-webserver is working well.</p>",
        "id": 451644019,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1721083637
    },
    {
        "content": "<p>Yeah, hopefully I can narrow down the bug and then everything will be green.</p>",
        "id": 451647311,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721085088
    },
    {
        "content": "<p>Ok. I think it is a bug in drop specialization or something related to the <code>dec</code> to <code>decref</code> conversion.</p>",
        "id": 451651633,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721087501
    },
    {
        "content": "<p>After refcounting ir is correct:</p>\n<div class=\"codehilite\"><pre><span></span><code>procedure : `#UserApp.main` Str\nprocedure = `#UserApp.main` ():\n    let `#UserApp.16` : U8 = 100i64;\n    let `#UserApp.15` : List U8 = Array [`#UserApp.16`];\n    let `#UserApp.inStr` : [C {U64, U8}, C Str] = CallByName `Str.fromUtf8` `#UserApp.15`;\n    let `#UserApp.in` : List [C {U64, U8}, C Str] = Array [`#UserApp.inStr`];\n    joinpoint `#UserApp.8` `#UserApp.out`:\n        let `#UserApp.7` : U64 = CallByName `List.len` `#UserApp.out`;\n        dec `#UserApp.out`;\n        let `#UserApp.6` : Str = CallByName `Num.toStr` `#UserApp.7`;\n        ret `#UserApp.6`;\n    in\n    let `#UserApp.12` : U64 = lowlevel ListLenUsize `#UserApp.in`;\n    let `#UserApp.13` : U64 = 1i64;\n    let `#UserApp.14` : Int1 = lowlevel Eq `#UserApp.12` `#UserApp.13`;\n    if `#UserApp.14` then\n        let `#UserApp.11` : U64 = 0i64;\n        let `#UserApp.alone` : [C {U64, U8}, C Str] = lowlevel ListGetUnsafe `#UserApp.in` `#UserApp.11`;\n        inc `#UserApp.alone`;\n        dec `#UserApp.in`;\n        let `#UserApp.9` : List [C {U64, U8}, C Str] = Array [`#UserApp.alone`];\n        jump `#UserApp.8` `#UserApp.9`;\n    else\n        jump `#UserApp.8` `#UserApp.in`;\n</code></pre></div>\n<p>After drop specialization ir is incorrect cause it is missing the increment of <code>#UserApp.alone</code>. For lists, there should not longer be a difference between <code>dec</code> and <code>decref</code> or at least, that is my understanding of how my PR changes things, but drop specialization (some other pass after refcounting) doesn't know that....Though maybe there should still be a difference... Cause we could save on the increment here if there was a difference.</p>\n<div class=\"codehilite\"><pre><span></span><code>procedure : `#UserApp.main` Str\nprocedure = `#UserApp.main` ():\n    let `#UserApp.16` : U8 = 100i64;\n    let `#UserApp.15` : List U8 = Array [`#UserApp.16`];\n    let `#UserApp.inStr` : [C {U64, U8}, C Str] = CallByName `Str.fromUtf8` `#UserApp.15`;\n    let `#UserApp.in` : List [C {U64, U8}, C Str] = Array [`#UserApp.inStr`];\n    joinpoint `#UserApp.8` `#UserApp.out`:\n        let `#UserApp.7` : U64 = CallByName `List.len` `#UserApp.out`;\n        dec `#UserApp.out`;\n        let `#UserApp.6` : Str = CallByName `Num.toStr` `#UserApp.7`;\n        ret `#UserApp.6`;\n    in\n    let `#UserApp.12` : U64 = lowlevel ListLenUsize `#UserApp.in`;\n    let `#UserApp.13` : U64 = 1i64;\n    let `#UserApp.14` : Int1 = lowlevel Eq `#UserApp.12` `#UserApp.13`;\n    if `#UserApp.14` then\n        let `#UserApp.11` : U64 = 0i64;\n        let `#UserApp.alone` : [C {U64, U8}, C Str] = lowlevel ListGetUnsafe `#UserApp.in` `#UserApp.11`;\n        decref `#UserApp.in`;\n        let `#UserApp.9` : List [C {U64, U8}, C Str] = Array [`#UserApp.alone`];\n        jump `#UserApp.8` `#UserApp.9`;\n    else\n        jump `#UserApp.8` `#UserApp.in`;\n</code></pre></div>",
        "id": 451652053,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721087743
    },
    {
        "content": "<p>Thinking about this more, I don't think there can be this optimization anymore. Cause decrementing the list may be freeing tail elements that are in the capacity of the ilst but not in the specific slice being freed. So while it may be correct for the slice elements, it won't be correct for the underlying elements.</p>",
        "id": 451652170,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721087800
    },
    {
        "content": "<p>So I think I just need to block this optimization.</p>",
        "id": 451652179,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721087807
    },
    {
        "content": "<p>I guess it could still be allowed if there was some sort of check on slice vs list though.</p>",
        "id": 451652225,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721087832
    },
    {
        "content": "<p>cc: <span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> in case he has any comments around this optimization and how it maps to the new list refcounting</p>",
        "id": 451652259,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721087864
    },
    {
        "content": "<p>Oh, I think this optimization may only apply to lists with known lengths. So maybe we can make it safe.</p>",
        "id": 451652804,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721088122
    },
    {
        "content": "<p>Ok. I think I have a fix</p>",
        "id": 451653841,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721088691
    },
    {
        "content": "<p>If anyone has thoughts on drop specialization for lists, left a big todo with info on the refcounting change. Currently just disabled it, but not sure if it should be fully removed or not: <a href=\"https://github.com/roc-lang/roc/pull/6907/files#r1678554981\">https://github.com/roc-lang/roc/pull/6907/files#r1678554981</a> (extra context in todo right above comment)</p>",
        "id": 451654274,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721088962
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"463199\">@J.Teeuwissen</span> who worked on drop specialization</p>",
        "id": 451656856,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721090606
    },
    {
        "content": "<p>Test results for <a href=\"https://github.com/roc-lang/roc/pull/6907\">https://github.com/roc-lang/roc/pull/6907</a> using</p>\n<ul>\n<li><code>ROC=roc EXAMPLES_DIR=examples/ bash ci/all_tests.sh</code></li>\n<li>on commit <code>5dc20e0</code></li>\n</ul>\n<h3>macos aarch64</h3>\n<ul>\n<li>basic-cli <strong>refactor-host</strong> <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> </li>\n<li>basic-webserver <strong>refactor-host</strong> <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> </li>\n</ul>\n<h3>linux x64</h3>\n<ul>\n<li>basic-cli <strong>refactor-host</strong> <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> </li>\n<li>basic-webserver <strong>refactor-host</strong> <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span></li>\n</ul>",
        "id": 451656987,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1721090696
    },
    {
        "content": "<p>Ok, I think we are ready for the next steps <span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> </p>\n<ol>\n<li>a new test nightly for roc</li>\n<li>pre-release of basic-cli</li>\n<li>release of roc nightly &amp; update examples</li>\n<li>latest release of basic-cli &amp; basic-webserver</li>\n</ol>\n<p>The following platforms have been updated and compatible with these changes;</p>\n<ul>\n<li>roc-wasm4</li>\n<li>basic-ssg <a href=\"https://github.com/lukewilliamboswell/basic-ssg/releases/tag/0.4.0\">latest release</a> </li>\n</ul>\n<p>The following packages/platforms <em>should</em> be updated at some point soon, not blocking</p>\n<ul>\n<li><a href=\"https://github.com/lukewilliamboswell/roc-glue-code-gen\">roc-glue-code-gen</a> - to include <a href=\"https://github.com/roc-lang/roc/pull/6905\">impl RocRefcounted for RocResult</a> -- nice to have, but not currently blocking basic-cli or basic-webserver</li>\n</ul>",
        "id": 451658552,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1721091632
    },
    {
        "content": "<p>So, if my understanding of the new lists is correct, a <code>dec</code> of a list does something like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>if (unique list)\n  dec items\n  free list\nelse\n  decref list\n</code></pre></div>\n<p>If this is the case, <code>inc item; dec list</code> (with list being a singleton), it could be optimized as follows </p>\n<div class=\"codehilite\"><pre><span></span><code>if (unique list)\n  free list\nelse\n  inc item\n  decref list\n</code></pre></div>",
        "id": 451688453,
        "sender_full_name": "J.Teeuwissen",
        "timestamp": 1721110876
    },
    {
        "content": "<p>Iirc the previous list <code>dec</code> simply decremented all items. I think all drop specializations for lists (with a known length) would have to be updated with a uniqueness check (and free/decref).<br>\nI'm not sure how \"dead\" references factor in, I would assume they do not matter as their reference count should not be touched either way.</p>",
        "id": 451688956,
        "sender_full_name": "J.Teeuwissen",
        "timestamp": 1721111232
    },
    {
        "content": "<p>That is correct with the caveat that seamless slices can make it more complex</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">str</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"s\">\"some super long string that will definitely be allocated\"</span>\n<span class=\"nv\">list</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">str</span><span class=\"p\">]</span>\n<span class=\"nv\">subList</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">dropFirst</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n\n<span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nv\">keep</span><span class=\"w\"> </span><span class=\"nv\">sublist</span><span class=\"w\"> </span><span class=\"nv\">alive</span><span class=\"w\"> </span><span class=\"nv\">and</span><span class=\"w\"> </span><span class=\"nv\">use</span><span class=\"w\"> </span><span class=\"nv\">it</span><span class=\"w\"> </span><span class=\"nv\">later</span>\n</code></pre></div>\n<p>In this case, we are left with 2 allocations. 1 for the Str and 1 for the List.<br>\nThe Str has a refcount of 2.<br>\nThe slice has a size of 1, but knows how to get back to the initial allocation so it can free the entire original list.</p>\n<p>When <code>subList</code> goes out of scope, it will end up decrementing the refcount to <code>str</code> twice and freeing both it and the underlying list allocation.</p>",
        "id": 451688989,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721111257
    },
    {
        "content": "<p>So more accurate refcount note to add to the code would be:</p>\n<div class=\"codehilite\"><pre><span></span><code>if (unique list)\n  dec items (this includes all items in the entire allocation, they don&#39;t have to be in the current sublist)\n  free list\nelse\n  decref list\n</code></pre></div>",
        "id": 451689302,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721111480
    },
    {
        "content": "<p>Ah okay. Using the suggested slice/list check would be a simple fix. It would only make sense to drop specialise a slice if the size of the underlying list size is known at <em>compile</em> time. But even then, you would have to inline both the <code>dec</code> for the slice and the <code>dec</code> for the list. (Assuming the slice one calls the list one).</p>",
        "id": 451692266,
        "sender_full_name": "J.Teeuwissen",
        "timestamp": 1721113076
    },
    {
        "content": "<p>Makes sense. Thanks for the info.</p>",
        "id": 451693010,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721113403
    },
    {
        "content": "<blockquote>\n<p>linux x64  basic-cli <strong>refactor-host</strong> <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> </p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> did you run this inside nix?<br>\nI'm now hitting:</p>\n<div class=\"codehilite\"><pre><span></span><code>❯ ./examples/args div -n 5 -d 20\nfree(): invalid next size (fast)\nAborted (core dumped)\n</code></pre></div>",
        "id": 451801846,
        "sender_full_name": "Anton",
        "timestamp": 1721146901
    },
    {
        "content": "<p>Did you delete and rebuild the host for surgical linking? I think we hit that as well if the surgical linker pulled in the old host (should pass with --linker=legacy` or if the surgical linker host is properly rebuilt</p>",
        "id": 451802906,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721147106
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> <br>\nthat fixed it :)</p>",
        "id": 451805365,
        "sender_full_name": "Anton",
        "timestamp": 1721147616
    }
]