[
    {
        "content": "<p>If you use <code>dbg</code> in a package's <code>interface</code> file, the compiler throws the following error and hangs:</p>\n<div class=\"codehilite\"><pre><span></span><code>Thread &#39;&lt;unnamed&gt;&#39; panicked at &#39;called `Option::unwrap()` on a `None` value&#39;, crates/compiler/mono/src/ir.rs:6826:18\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>",
        "id": 344140754,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1679624337
    },
    {
        "content": "<p>Apparently, <code>env.expectation_subs</code> is <code>None</code> here: <a href=\"https://github.com/roc-lang/roc/blob/24e2c661870d9d7c54a5aa8750c334a837af1966/crates/compiler/mono/src/ir.rs#L6808-L6812\">https://github.com/roc-lang/roc/blob/24e2c661870d9d7c54a5aa8750c334a837af1966/crates/compiler/mono/src/ir.rs#L6808-L6812</a></p>",
        "id": 344140953,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1679624432
    },
    {
        "content": "<p>I wonder if that is interface specific. I have seen similar errors a lot. That and sometimes debug just not printing. Definitely one of the easier to break features. I think i notice it most in rather nested code, especially if related to tasks.</p>",
        "id": 344143093,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679624907
    },
    {
        "content": "<p>Oh. I haven't noticed that. In this case the <code>app</code>'s <code>main</code> is directly calling the function from the package's <code>interface</code> with the <code>dbg</code> usage in it.</p>",
        "id": 344144472,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1679625177
    },
    {
        "content": "<p>At least in my absolute minimal repro, it is working in an <code>interface</code>:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">interface</span><span class=\"w\"> </span><span class=\"nx\">Interface</span>\n<span class=\"w\">    </span><span class=\"nx\">exposes</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">someFunc</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"nx\">imports</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n\n<span class=\"nv\">someFunc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">x</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nx\">dbg</span><span class=\"w\"> </span><span class=\"nx\">x</span>\n<span class=\"w\">    </span><span class=\"nx\">x</span>\n</code></pre></div>\n<p>So maybe not interface specific. Are you able to share example code where this happens or a repro?</p>",
        "id": 344148204,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679626336
    },
    {
        "content": "<p>Oh, nevermind, I can repro.</p>",
        "id": 344148961,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679626787
    },
    {
        "content": "<p>It takes an interface in a package specifically, not an interface in general.</p>",
        "id": 344149059,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679626817
    },
    {
        "content": "<p>submitted <a href=\"https://github.com/roc-lang/roc/issues/5185\">#5185</a> as a minimal repro.</p>",
        "id": 344149687,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679627147
    },
    {
        "content": "<p>Nice</p>",
        "id": 344154573,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1679629667
    },
    {
        "content": "<p>Found the root cause of the <code>None</code> in <code>env.expectaction_subs</code>: <a href=\"https://github.com/roc-lang/roc/blob/24e2c661870d9d7c54a5aa8750c334a837af1966/crates/compiler/load_internal/src/file.rs#L2748-L2753\">https://github.com/roc-lang/roc/blob/24e2c661870d9d7c54a5aa8750c334a837af1966/crates/compiler/load_internal/src/file.rs#L2748-L2753</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">should_include_expects</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">loc_expects</span><span class=\"p\">.</span><span class=\"n\">is_empty</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">loc_dbgs</span><span class=\"p\">.</span><span class=\"n\">is_empty</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">modules</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">.</span><span class=\"n\">arc_modules</span><span class=\"p\">.</span><span class=\"n\">lock</span><span class=\"p\">();</span>\n<span class=\"w\">                </span><span class=\"n\">modules</span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">package_eq</span><span class=\"p\">(</span><span class=\"n\">module_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">.</span><span class=\"n\">root_id</span><span class=\"p\">)</span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"root or this module is not yet known - that's a bug!\"</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">};</span>\n</code></pre></div>",
        "id": 344155966,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1679630452
    },
    {
        "content": "<p><code>!loc_dbgs.is_empty()</code> is <code>true</code> because the <code>dbg</code> exists</p>",
        "id": 344156055,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1679630497
    },
    {
        "content": "<p>but <code>.package_eq(module_id, state.root_id)</code> evaluates to <code>false</code> because the module is in a different package</p>",
        "id": 344156138,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1679630538
    },
    {
        "content": "<p>When building applications, you probably don't want to include expects from packages, so that makes sense</p>",
        "id": 344156303,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1679630681
    },
    {
        "content": "<p>However, we still need a way to use <code>dbg</code> and <code>expect</code> when building packages. Maybe this can be a CLI option?</p>",
        "id": 344156473,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1679630759
    },
    {
        "content": "<p>Also, in normal operation, it shouldn't crash because a package contains a <code>dbg</code> or <code>expect</code></p>",
        "id": 344156690,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1679630935
    },
    {
        "content": "<p>this is an interesting design question...I've gone back and forth on this in the past, but what makes sense to me right now is:</p>\n<ul>\n<li>we should always execute <code>dbg</code> no matter where it comes from. This way if you're debugging a local package on your filesystem, it Just Works.</li>\n<li>in the future, when we have a central package repo, we should disallow publishing packages that use <code>dbg</code> (just take them out before you publish, don't annoy people with your own debugging logic!)</li>\n</ul>",
        "id": 344363511,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1679690224
    },
    {
        "content": "<p><code>expect</code> is trickier because on the one hand it could be annoying if I get a third-party package that's crashing due to failed <code>expect</code>s all the time...but on the other hand, wouldn't it be better if I could report that to them? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 344363577,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1679690261
    },
    {
        "content": "<p>my default thinking is that <code>expect</code> should just always work the same way no matter whether it's a package, and then we can revisit that if it's annoying in practice</p>",
        "id": 344363623,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1679690280
    },
    {
        "content": "<p>Ah cool. So we just need to get rid of that <code>package_eq</code> check, then.</p>",
        "id": 344368220,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1679692123
    },
    {
        "content": "<p>I tried it last night and <code>dbg</code> just started working from packages</p>",
        "id": 344368318,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1679692182
    },
    {
        "content": "<p>Should I make a PR with that change?</p>",
        "id": 344368439,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1679692219
    },
    {
        "content": "<p>sounds good to me! <span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> any concerns?</p>",
        "id": 344369599,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1679692761
    },
    {
        "content": "<p>The one annoyance with this is that this will also mean “roc test” will run all tests under a package and all its dependencies, not just local to the module.</p>",
        "id": 344370000,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1679692918
    },
    {
        "content": "<p>That could be made into a separate check though</p>",
        "id": 344370089,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1679692942
    },
    {
        "content": "<p>hm, aren't those separate?</p>",
        "id": 344374391,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1679694966
    },
    {
        "content": "<p>like <code>roc test</code> doesn't have to run top-level <code>expect</code>s in other packages</p>",
        "id": 344374427,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1679694983
    },
    {
        "content": "<p>even if it still runs inline <code>expect</code>s</p>",
        "id": 344374448,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1679694994
    },
    {
        "content": "<p>Right. I just mean that the implementation, I don't think it is enough to only get rid of the <code>package_eq</code> check.</p>",
        "id": 344377226,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1679696349
    },
    {
        "content": "<p>Yeah, if I get rid of that check, <code>roc test</code> includes <code>expect</code>s from packages</p>",
        "id": 344377366,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1679696404
    },
    {
        "content": "<p>and this weird bug shows up if I have both <code>dbg</code>s and <code>expect</code>s in a package, <code>roc test</code> hangs, but it works fine if only have one kind <span aria-label=\"oh no\" class=\"emoji emoji-1f615\" role=\"img\" title=\"oh no\">:oh_no:</span></p>",
        "id": 344377583,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1679696489
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"489294\">Agus Zubiaga</span> <a href=\"#narrow/stream/316715-contributing/topic/dbg.20in.20packages/near/344377366\">said</a>:</p>\n<blockquote>\n<p>Yeah, if I get rid of that check, <code>roc test</code> includes <code>expect</code>s from packages</p>\n</blockquote>\n<p>oh ok, so then the problem is that right after that code we're using <code>should_include_expects</code> to decide whether to include <code>dbg</code>s too</p>",
        "id": 344393812,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1679704980
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/blob/24e2c661870d9d7c54a5aa8750c334a837af1966/crates/compiler/load_internal/src/file.rs#L2758\">https://github.com/roc-lang/roc/blob/24e2c661870d9d7c54a5aa8750c334a837af1966/crates/compiler/load_internal/src/file.rs#L2758</a></p>",
        "id": 344393822,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1679704983
    },
    {
        "content": "<p>so that line could be used in the <code>else</code> branch too, just with <code>expectations:</code> being empty</p>",
        "id": 344393864,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1679705008
    },
    {
        "content": "<p>could go even further to have that under an <code>else if !loc_dbgs.is_empty() {</code> so we don't bother cloning <code>solved_subs</code> etc if there happen to be no <code>dbg</code>s</p>",
        "id": 344394028,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1679705073
    }
]