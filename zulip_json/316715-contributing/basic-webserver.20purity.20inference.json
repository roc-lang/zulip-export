[
    {
        "content": "<p>Ok, so we've landed basic-cli ... next step is our webserver. </p>\n<p>I made a bit of a start yesterday, but haven't pushed anything yet. I'm WFH for the rest of the week so should have time to smash through it. I'd love to have something ready for a new release on Friday, but there's a lot to do.</p>",
        "id": 488030355,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733901496
    },
    {
        "content": "<p>What platforms otherwise should get upgraded for Purity Inference?</p>",
        "id": 488031579,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733902007
    },
    {
        "content": "<p>any of the templates?</p>",
        "id": 488031589,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733902016
    },
    {
        "content": "<p>All the platforms in the roc repo still need to updated along with docs.</p>",
        "id": 488032027,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733902204
    },
    {
        "content": "<p>I think we could update templates, but may be best to do them at the very end after all the docs and such are updated</p>",
        "id": 488032067,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733902223
    },
    {
        "content": "<p>Question, can the host import packages? If so, can we package all the roc files used to build the host API somehow?</p>",
        "id": 488965701,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734155899
    },
    {
        "content": "<p>I don't quite follow</p>",
        "id": 488965715,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734155940
    },
    {
        "content": "<p>The host is rust, so we can refactor out into crates and re-use those</p>",
        "id": 488965727,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734155954
    },
    {
        "content": "<p>For the roc files, we can make a cross platform package like roc-lang/path</p>",
        "id": 488965733,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734155967
    },
    {
        "content": "<p>But path hasn't matured enough to use it yet... though this is starting to lay the foundation for that, so it's easier to upgrade in future</p>",
        "id": 488965747,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734155999
    },
    {
        "content": "<p>So, I mean for all of the platform <code>.roc</code> files outside of <code>Host.roc</code> that have the exact same api (ex. File.roc, Stdin.roc, Stdout.roc, etc)</p>",
        "id": 488966049,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734156218
    },
    {
        "content": "<p>Can we share those files between basic webserver and basic cli</p>",
        "id": 488966055,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734156233
    },
    {
        "content": "<p>Aside from a cross-platform package... not really</p>",
        "id": 488966115,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734156270
    },
    {
        "content": "<p>I'm hoping to get the API's identical so that we can have basic-webserver just copy from basic-cli</p>",
        "id": 488966130,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734156292
    },
    {
        "content": "<p>There's only a few things that wouldn't be shared like, MultiPartFormData, or SqLite... though we could potentially get them in both too... <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 488966186,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734156352
    },
    {
        "content": "<p>In this pass I'm just trying to get the current features like Cmd, File, Dir, Env etc common</p>",
        "id": 488966249,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734156389
    },
    {
        "content": "<p>It's probably a lot to chew, but the type safety gives me some confidence I can untangle it all</p>",
        "id": 488966270,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734156424
    },
    {
        "content": "<p>Long term, we definitely should look into allow platforms to directly share things like <code>Stdout.roc</code> if they have the same primitives (or though module parana)</p>",
        "id": 488966386,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734156560
    },
    {
        "content": "<p>13 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"316715\" href=\"/#narrow/channel/316715-contributing/topic/Pull.20Request.20for.20Review\">#contributing &gt; Pull Request for Review</a> by <span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span>.</p>",
        "id": 488966455,
        "sender_full_name": "Notification Bot",
        "timestamp": 1734156622
    },
    {
        "content": "<p>Is there any reason the Tcp API should be different between cli and webserver?</p>",
        "id": 488966488,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734156650
    },
    {
        "content": "<p>For sending requests</p>",
        "id": 488966498,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734156661
    },
    {
        "content": "<p>I think the best would be to try to develop some common set of only a couple generic functions that each platform would need to support, and then a module params-based package would handle giving a useful, platform agnostic interface</p>",
        "id": 488966518,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734156686
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/316715-contributing/topic/basic-webserver.20purity.20inference/near/488966488\">said</a>:</p>\n<blockquote>\n<p>Is there any reason the Tcp API should be different between cli and webserver?</p>\n</blockquote>\n<p>I'd say no</p>",
        "id": 488966525,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734156708
    },
    {
        "content": "<p>Unless one of them prepackages SSL certs or something?</p>",
        "id": 488966585,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734156733
    },
    {
        "content": "<p>Which even then I wouldn't expect should be handled by the platform automatically</p>",
        "id": 488966596,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734156745
    },
    {
        "content": "<p>Alg, I tend to agree. <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 488966708,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734156888
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/stream/316715-contributing/topic/basic-webserver.20purity.20inference/near/488966518\">said</a>:</p>\n<blockquote>\n<p>I think the best would be to try to develop some common set of only a couple generic functions that each platform would need to support, and then a module params-based package would handle giving a useful, platform agnostic interface</p>\n</blockquote>\n<p>For sure, would be nice if the platform could re expose and import</p>\n<p>Basically import from a package passing in effects from the platform. Then re-expose that packages api</p>",
        "id": 488967603,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734157897
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/316715-contributing/topic/basic-webserver.20purity.20inference/near/488967603\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/stream/316715-contributing/topic/basic-webserver.20purity.20inference/near/488966518\">said</a>:</p>\n<blockquote>\n<p>I think the best would be to try to develop some common set of only a couple generic functions that each platform would need to support, and then a module params-based package would handle giving a useful, platform agnostic interface</p>\n</blockquote>\n<p>For sure, would be nice if the platform could re expose and import</p>\n<p>Basically import from a package passing in effects from the platform. Then re-expose that packages api</p>\n</blockquote>\n<p>Thinking about it, I think static dispatch should make this easier? If the platform just exports structural aliases to custom types, the \"methods\" of the custom types should get exposed as if they were written inline. Not sure if that would work</p>",
        "id": 488968139,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734158451
    },
    {
        "content": "<p>I think it's not ideal if we have to manually copy over the docs and all functions (even codegen would be suboptimal)</p>",
        "id": 488968169,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734158490
    },
    {
        "content": "<p>Ok, finally made a draft PR for this <a href=\"https://github.com/roc-lang/basic-webserver/pull/84\">https://github.com/roc-lang/basic-webserver/pull/84</a></p>",
        "id": 488968679,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734159079
    },
    {
        "content": "<p>Anyone will welcome to help continue with the upgrade <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> </p>\n<p>Next up will be going through all the <code>Host.roc</code> exposed functions one by one and implementing them in the host. Should be mostly just updating the function signature and then calling the impl in the crate from basic-cli. </p>\n<p>Then it's on to upgrading the examples and verifying everything is wired up correctly and working.</p>\n<p>I've disabled <code>HTTP.send!</code> for now... we need to dig into that a little an find an API that works for both cli and webserver. They're currently different.</p>",
        "id": 488968865,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734159267
    },
    {
        "content": "<p>update the false interpreter to purity inference and get it running as a test again: <a href=\"https://github.com/roc-lang/roc/pull/7369\">https://github.com/roc-lang/roc/pull/7369</a></p>",
        "id": 488969763,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734160264
    },
    {
        "content": "<p>limit morphic to trivial solving only to avoid the inplace mutation correctness bugs: <a href=\"https://github.com/roc-lang/roc/pull/7370\">https://github.com/roc-lang/roc/pull/7370</a></p>\n<p>Surprisingly, this seems to increase performance in a number of cases by a few percent. My only guess is that the accidental mutation is leading to extra looping that shouldn't be happening. All changes to perf are within 5% and most are slightly positive.</p>",
        "id": 488969944,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734160464
    },
    {
        "content": "<p>Made significant progress with <a href=\"https://github.com/roc-lang/basic-webserver/pull/84\">https://github.com/roc-lang/basic-webserver/pull/84</a></p>\n<p>I've hit another segfault... this time I think it's on the other side, roc passing the response back to the host. </p>\n<p>I'm pretty tired from all the changes I've made today, so I'll maybe come back to this tomorrow. If anyone has time to look at it, the easiest repro is just building the host <code>roc build.roc</code>, then running the echo example <code>roc examples/echo.roc</code>.</p>",
        "id": 489624843,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734501296
    },
    {
        "content": "<p>Valgrind output:</p>\n<div class=\"codehilite\"><pre><span></span><code>❯ valgrind ./examples/echo\n==37674== Memcheck, a memory error detector\n==37674== Copyright (C) 2002-2024, and GNU GPL&#39;d, by Julian Seward et al.\n==37674== Using Valgrind-3.23.0 and LibVEX; rerun with -h for copyright info\n==37674== Command: ./examples/echo\n==37674==\nListening on &lt;http://127.0.0.1:8000&gt;\n==37674== Thread 34 tokio-runtime-w:\n==37674== Conditional jump or move depends on uninitialised value(s)\n==37674==    at 0x12BECA: ??? (roc_app:0)\n==37674==    by 0x124F65: Box_unbox_3d7aff37b23cd9f9e6beb177d8bf818babb9d186ea278cc981a34be43b8cf34 (roc_app:0)\n==37674==    by 0x1299D4: _respond_for_host!_bad96aa871ccf5b068b2a1da7544fd3d07a932588efb92244e692b8beda99ce (roc_app:0)\n==37674==    by 0x129D1C: roc__respond_for_host_1_exposed_generic (roc_app:0)\n==37674==    by 0x196D2B: tokio::runtime::task::raw::poll (in /home/username/gitrepos/basic-webserver/examples/echo)\n==37674==    by 0x1E8C6D: std::sys_common::backtrace::__rust_begin_short_backtrace (in /home/username/gitrepos/basic-webserver/examples/echo)\n==37674==    by 0x1E8910: core::ops::function::FnOnce::call_once{{vtable.shim}} (in /home/username/gitrepos/basic-webserver/examples/echo)\n==37674==    by 0x1E4A5A: call_once&lt;(), dyn core::ops::function::FnOnce&lt;(), Output=()&gt;, alloc::alloc::Global&gt; (boxed.rs:2022)\n==37674==    by 0x1E4A5A: call_once&lt;(), alloc::boxed::Box&lt;dyn core::ops::function::FnOnce&lt;(), Output=()&gt;, alloc::alloc::Global&gt;, alloc::alloc::Global&gt; (boxed.rs:2022)\n==37674==    by 0x1E4A5A: std::sys::pal::unix::thread::Thread::new::thread_start (thread.rs:108)\n==37674==    by 0x48ECA41: start_thread (in /nix/store/0wydilnf1c9vznywsvxqnaing4wraaxp-glibc-2.39-52/lib/libc.so.6)\n==37674==    by 0x496BE43: clone (in /nix/store/0wydilnf1c9vznywsvxqnaing4wraaxp-glibc-2.39-52/lib/libc.so.6)\n==37674==\n==37674== Conditional jump or move depends on uninitialised value(s)\n==37674==    at 0x12B3B9: decrement_refcounted_ptr_8 (roc_app:0)\n==37674==    by 0x12BED7: ??? (roc_app:0)\n==37674==    by 0x124F65: Box_unbox_3d7aff37b23cd9f9e6beb177d8bf818babb9d186ea278cc981a34be43b8cf34 (roc_app:0)\n==37674==    by 0x1299D4: _respond_for_host!_bad96aa871ccf5b068b2a1da7544fd3d07a932588efb92244e692b8beda99ce (roc_app:0)\n==37674==    by 0x129D1C: roc__respond_for_host_1_exposed_generic (roc_app:0)\n==37674==    by 0x196D2B: tokio::runtime::task::raw::poll (in /home/username/gitrepos/basic-webserver/examples/echo)\n==37674==    by 0x1E8C6D: std::sys_common::backtrace::__rust_begin_short_backtrace (in /home/username/gitrepos/basic-webserver/examples/echo)\n==37674==    by 0x1E8910: core::ops::function::FnOnce::call_once{{vtable.shim}} (in /home/username/gitrepos/basic-webserver/examples/echo)\n==37674==    by 0x1E4A5A: call_once&lt;(), dyn core::ops::function::FnOnce&lt;(), Output=()&gt;, alloc::alloc::Global&gt; (boxed.rs:2022)\n==37674==    by 0x1E4A5A: call_once&lt;(), alloc::boxed::Box&lt;dyn core::ops::function::FnOnce&lt;(), Output=()&gt;, alloc::alloc::Global&gt;, alloc::alloc::Global&gt; (boxed.rs:2022)\n==37674==    by 0x1E4A5A: std::sys::pal::unix::thread::Thread::new::thread_start (thread.rs:108)\n==37674==    by 0x48ECA41: start_thread (in /nix/store/0wydilnf1c9vznywsvxqnaing4wraaxp-glibc-2.39-52/lib/libc.so.6)\n==37674==    by 0x496BE43: clone (in /nix/store/0wydilnf1c9vznywsvxqnaing4wraaxp-glibc-2.39-52/lib/libc.so.6)\n==37674==\n2024-12-18T13:26:11Z Get /\n==37674== Invalid read of size 8\n==37674==    at 0x12C0B3: ??? (roc_app:0)\n==37674==    by 0x128322: #UserApp_respond!_1e4d2f1e6b4984301a1489b71481ade3a818d1fae80b8f87ea525c7bff923 (roc_app:0)\n==37674==    by 0x1299E6: _respond_for_host!_bad96aa871ccf5b068b2a1da7544fd3d07a932588efb92244e692b8beda99ce (roc_app:0)\n==37674==    by 0x129D1C: roc__respond_for_host_1_exposed_generic (roc_app:0)\n==37674==    by 0x196D2B: tokio::runtime::task::raw::poll (in /home/username/gitrepos/basic-webserver/examples/echo)\n==37674==    by 0x1E8C6D: std::sys_common::backtrace::__rust_begin_short_backtrace (in /home/username/gitrepos/basic-webserver/examples/echo)\n==37674==    by 0x1E8910: core::ops::function::FnOnce::call_once{{vtable.shim}} (in /home/username/gitrepos/basic-webserver/examples/echo)\n==37674==    by 0x1E4A5A: call_once&lt;(), dyn core::ops::function::FnOnce&lt;(), Output=()&gt;, alloc::alloc::Global&gt; (boxed.rs:2022)\n==37674==    by 0x1E4A5A: call_once&lt;(), alloc::boxed::Box&lt;dyn core::ops::function::FnOnce&lt;(), Output=()&gt;, alloc::alloc::Global&gt;, alloc::alloc::Global&gt; (boxed.rs:2022)\n==37674==    by 0x1E4A5A: std::sys::pal::unix::thread::Thread::new::thread_start (thread.rs:108)\n==37674==    by 0x48ECA41: start_thread (in /nix/store/0wydilnf1c9vznywsvxqnaing4wraaxp-glibc-2.39-52/lib/libc.so.6)\n==37674==    by 0x496BE43: clone (in /nix/store/0wydilnf1c9vznywsvxqnaing4wraaxp-glibc-2.39-52/lib/libc.so.6)\n==37674==  Address 0xfffffffffffffff8 is not stack&#39;d, malloc&#39;d or (recently) free&#39;d\n==37674==\n==37674==\n==37674== Process terminating with default action of signal 11 (SIGSEGV)\n==37674==  Access not within mapped region at address 0xFFFFFFFFFFFFFFF8\n==37674==    at 0x12C0B3: ??? (roc_app:0)\n==37674==    by 0x128322: #UserApp_respond!_1e4d2f1e6b4984301a1489b71481ade3a818d1fae80b8f87ea525c7bff923 (roc_app:0)\n==37674==    by 0x1299E6: _respond_for_host!_bad96aa871ccf5b068b2a1da7544fd3d07a932588efb92244e692b8beda99ce (roc_app:0)\n==37674==    by 0x129D1C: roc__respond_for_host_1_exposed_generic (roc_app:0)\n==37674==    by 0x196D2B: tokio::runtime::task::raw::poll (in /home/username/gitrepos/basic-webserver/examples/echo)\n==37674==    by 0x1E8C6D: std::sys_common::backtrace::__rust_begin_short_backtrace (in /home/username/gitrepos/basic-webserver/examples/echo)\n==37674==    by 0x1E8910: core::ops::function::FnOnce::call_once{{vtable.shim}} (in /home/username/gitrepos/basic-webserver/examples/echo)\n==37674==    by 0x1E4A5A: call_once&lt;(), dyn core::ops::function::FnOnce&lt;(), Output=()&gt;, alloc::alloc::Global&gt; (boxed.rs:2022)\n==37674==    by 0x1E4A5A: call_once&lt;(), alloc::boxed::Box&lt;dyn core::ops::function::FnOnce&lt;(), Output=()&gt;, alloc::alloc::Global&gt;, alloc::alloc::Global&gt; (boxed.rs:2022)\n==37674==    by 0x1E4A5A: std::sys::pal::unix::thread::Thread::new::thread_start (thread.rs:108)\n==37674==    by 0x48ECA41: start_thread (in /nix/store/0wydilnf1c9vznywsvxqnaing4wraaxp-glibc-2.39-52/lib/libc.so.6)\n==37674==    by 0x496BE43: clone (in /nix/store/0wydilnf1c9vznywsvxqnaing4wraaxp-glibc-2.39-52/lib/libc.so.6)\n==37674==  If you believe this happened as a result of a stack\n==37674==  overflow in your program&#39;s main thread (unlikely but\n==37674==  possible), you can try to increase the size of the\n==37674==  main thread stack using the --main-stacksize= flag.\n==37674==  The main thread stack size used in this run was 8388608.\n==37674==\n==37674== HEAP SUMMARY:\n==37674==     in use at exit: 149,092 bytes in 497 blocks\n==37674==   total heap usage: 2,438 allocs, 1,941 frees, 384,367 bytes allocated\n==37674==\n==37674== LEAK SUMMARY:\n==37674==    definitely lost: 8 bytes in 1 blocks\n==37674==    indirectly lost: 0 bytes in 0 blocks\n==37674==      possibly lost: 12,414 bytes in 38 blocks\n==37674==    still reachable: 136,670 bytes in 458 blocks\n==37674==         suppressed: 0 bytes in 0 blocks\n==37674== Rerun with --leak-check=full to see details of leaked memory\n==37674==\n==37674== Use --track-origins=yes to see where uninitialised values come from\n==37674== For lists of detected and suppressed errors, rerun with: -s\n==37674== ERROR SUMMARY: 3 errors from 3 contexts (suppressed: 0 from 0)\nSegmentation fault (core dumped)\n</code></pre></div>",
        "id": 489757471,
        "sender_full_name": "Anton",
        "timestamp": 1734528410
    },
    {
        "content": "<p>Anton is truly our resident Valgrinder, I salute you for helping those of us with Macs <span aria-label=\"salute\" class=\"emoji emoji-1fae1\" role=\"img\" title=\"salute\">:salute:</span></p>",
        "id": 489781873,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1734535541
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/issues/5772\">#5772</a> has very similar valgrind output, it was fixed by <a href=\"https://github.com/roc-lang/roc/pull/5892\">PR#5892</a></p>",
        "id": 489797203,
        "sender_full_name": "Anton",
        "timestamp": 1734539528
    },
    {
        "content": "<p>Probably an issue with the model in this case</p>",
        "id": 489808218,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734543003
    },
    {
        "content": "<p>Probably can take a look in a bit</p>",
        "id": 489808261,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734543013
    },
    {
        "content": "<p>Taking a look now, on mac, looks to still be input side.</p>",
        "id": 489817242,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734546277
    },
    {
        "content": "<p>Crashes the first time it tries to load from the request to print it</p>",
        "id": 489817271,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734546291
    },
    {
        "content": "<p>segfaults when loading the body in roc on mac</p>",
        "id": 489818008,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734546545
    },
    {
        "content": "<p>oh... <code>RocList::from_raw_parts</code> would do that....</p>",
        "id": 489818131,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734546598
    },
    {
        "content": "<p>we can make a seemless slice here, but this is not what is being done</p>",
        "id": 489818258,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734546631
    },
    {
        "content": "<p>ooops, forgot I did that. Was trying to be efficient and forgot about it. Does making an actual owned RocStr help?</p>",
        "id": 489820276,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734547378
    },
    {
        "content": "<p>I just made it a proper seamless slice and pushed that</p>",
        "id": 489820523,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734547489
    },
    {
        "content": "<p>could also do that with the headers if wanted</p>",
        "id": 489820676,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734547550
    },
    {
        "content": "<p>let me push that as well, should be easy at this point and avoid copies</p>",
        "id": 489820851,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734547618
    },
    {
        "content": "<p>Oh nice. I managed to fix it with <code>let body = RocList::from_slice(body.to_vec().as_slice());</code> but I imagine your impl is more efficient</p>",
        "id": 489821995,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734548043
    },
    {
        "content": "<p>yeah, will push shortly</p>",
        "id": 489822139,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734548103
    },
    {
        "content": "<p>some voodoo magic in here... <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">const_refcount_allocation</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">REFCOUNT_CONSTANT</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">size_of_val</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">REFCOUNT_CONSTANT</span><span class=\"p\">);</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">const_seamless_slice</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">const_refcount_allocation</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">SEAMLESS_SLICE_BIT</span><span class=\"p\">;</span>\n</code></pre></div>",
        "id": 489822376,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734548200
    },
    {
        "content": "<p>Just pushed another change</p>",
        "id": 489822677,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734548320
    },
    {
        "content": "<p>with more magic</p>",
        "id": 489822685,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734548324
    },
    {
        "content": "<p>but it is hidden behind a function now</p>",
        "id": 489822707,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734548336
    },
    {
        "content": "<p>We've still got an issue somewhere, see <code>roc examples/init-basic.roc</code></p>",
        "id": 489823370,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734548555
    },
    {
        "content": "<p>hmm, maybe just a standalone bug somewhere.</p>",
        "id": 489823577,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734548619
    },
    {
        "content": "<p>I haven't got any of the expect scripts passing. I'll need to dig into each now and figure out what I've changed</p>",
        "id": 489823674,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734548645
    },
    {
        "content": "<p>ooh, <code>GET</code> -&gt; <code>Get</code>... simple enough change, I think I switched to using <code>Inspect.toStr</code> because we didn't need <code>method_to_str</code>, turns out we do if we want these tags to print all uppercase</p>",
        "id": 489823882,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734548716
    },
    {
        "content": "<p>Or do people think this looks fine for a log?</p>\n<div class=\"codehilite\"><pre><span></span><code>2024-12-18T19:05:04Z Get /\n</code></pre></div>",
        "id": 489824149,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734548810
    },
    {
        "content": "<p>I'd prefer all caps</p>",
        "id": 489824268,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734548848
    },
    {
        "content": "<p>I prefer caps for methods</p>",
        "id": 489824279,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1734548853
    },
    {
        "content": "<p>Can the tag simply be all uppercase?</p>",
        "id": 489824439,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734548896
    },
    {
        "content": "<p>It's not an acronym, so it might be a little strange.</p>",
        "id": 489825008,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734549090
    },
    {
        "content": "<p>We could do that...</p>",
        "id": 489825024,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734549099
    },
    {
        "content": "<p>Yeah, might not be worth, I just like being able to print things in the expect form via the default print and debug mechanism.</p>",
        "id": 489825184,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734549154
    },
    {
        "content": "<p>it's not an acronym but they're always spelled in all caps. I think it's fine if it doesn't fit the usual identifier convention but does fit the way it's usually spelled</p>",
        "id": 489825356,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734549229
    },
    {
        "content": "<p>Ok, changing to all caps for Http Method</p>",
        "id": 489825752,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734549386
    },
    {
        "content": "<p>Ok, so we've restored most of our CI tests now</p>",
        "id": 489826240,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734549592
    },
    {
        "content": "<p>Only a few are failing</p>",
        "id": 489826298,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734549603
    },
    {
        "content": "<p>Something is really broken in <code>examples/init-basic.roc</code>, it's a super simple app but the server just hangs</p>",
        "id": 489826649,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734549744
    },
    {
        "content": "<p>I'll take a look now</p>",
        "id": 489829706,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734551054
    },
    {
        "content": "<p>It gets stuck during init or respond?</p>",
        "id": 489830340,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1734551342
    },
    {
        "content": "<p>fails to load the model during respond I think</p>",
        "id": 489830613,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734551446
    },
    {
        "content": "<p><code>init gave me ðŸŽ</code></p>",
        "id": 489830698,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734551481
    },
    {
        "content": "<p>so beautiful.....</p>",
        "id": 489830708,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734551487
    },
    {
        "content": "<p>looks like roc does expect the box as a <code>boxed_model: RocBox&lt;()&gt;,</code> and not by pointer</p>",
        "id": 489831228,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734551690
    },
    {
        "content": "<p>Not sure why the data is wrong though</p>",
        "id": 489831248,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734551702
    },
    {
        "content": "<p>yeah, I think changing the model works, then rendering unicode seems to be failing</p>",
        "id": 489831545,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734551838
    },
    {
        "content": "<p>Also, refcounted things in a model for basic webserver technically have a race condition. Cause the outer box is set to a constant refcount, but none of the inner data is. As such when loading inner data, each thread will locally be incrementing and decrementing refcounts.</p>",
        "id": 489832222,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734552107
    },
    {
        "content": "<p>And I think that <code>ðŸŽ</code> is the present, just rendering as ascii and not unicode.</p>",
        "id": 489832507,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734552234
    },
    {
        "content": "<p>So everything \"working\" with the box change</p>",
        "id": 489832636,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734552275
    },
    {
        "content": "<p>just pushed it</p>",
        "id": 489832799,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734552343
    },
    {
        "content": "<p>and \"working\" means that I think it should be doing the same as the old basic-webserver including bugs</p>",
        "id": 489833451,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734552589
    },
    {
        "content": "<p>We're on the home stretch.... <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> </p>\n<p><a href=\"/user_uploads/22008/aVc6wEPsdlfnqFX-nWSTnj5X/Screenshot-2024-12-19-at-08.25.09.png\">Screenshot 2024-12-19 at 08.25.09.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/aVc6wEPsdlfnqFX-nWSTnj5X/Screenshot-2024-12-19-at-08.25.09.png\" title=\"Screenshot 2024-12-19 at 08.25.09.png\"><img data-original-dimensions=\"1716x630\" src=\"/user_uploads/thumbnail/22008/aVc6wEPsdlfnqFX-nWSTnj5X/Screenshot-2024-12-19-at-08.25.09.png/840x560.webp\"></a></div><p>I've ignored two failing tests, because I wanted to see how far we got through CI. </p>\n<p>So just a couple things now to dig into, and we should be good to go.</p>",
        "id": 489843716,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734557199
    },
    {
        "content": "<p>Famous last words Luke…. <span aria-label=\"stuck out tongue closed eyes\" class=\"emoji emoji-1f61d\" role=\"img\" title=\"stuck out tongue closed eyes\">:stuck_out_tongue_closed_eyes:</span></p>",
        "id": 489848290,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1734559335
    },
    {
        "content": "<p>1 down... 1 to go :chef's kiss:</p>",
        "id": 489848444,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734559410
    },
    {
        "content": "<p><span aria-label=\"folded hands\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"folded hands\">:folded_hands:</span></p>",
        "id": 489849526,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1734559889
    },
    {
        "content": "<p>And we did it! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"space invader\" class=\"emoji emoji-1f47e\" role=\"img\" title=\"space invader\">:space_invader:</span></p>\n<p><a href=\"/user_uploads/22008/00jVPvNR55nSZssxWUCUlFj-/Screenshot-2024-12-19-at-16.30.45.png\">Screenshot 2024-12-19 at 16.30.45.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/00jVPvNR55nSZssxWUCUlFj-/Screenshot-2024-12-19-at-16.30.45.png\" title=\"Screenshot 2024-12-19 at 16.30.45.png\"><img data-original-dimensions=\"1346x430\" src=\"/user_uploads/thumbnail/22008/00jVPvNR55nSZssxWUCUlFj-/Screenshot-2024-12-19-at-16.30.45.png/840x560.webp\"></a></div><p>A big thank you to <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> (for saving us 10x over) and <span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> for helping with this upgrade. It was much smoother this time round after landing basic-cli, and re-using crates from there. </p>\n<p>I'm looking forward to testing it out and upgrading my demo web apps etc, and see what issues we can flush out.</p>",
        "id": 489889740,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734586379
    },
    {
        "content": "<p>Congrats Luke on landing this!  Having the two big platforms moved over will help a lot</p>",
        "id": 489928404,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1734603539
    },
    {
        "content": "<p>Congrats Luke on landing this!  Having the two big platforms moved over will help a lot</p>",
        "id": 489928433,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1734603549
    }
]