[
    {
        "content": "<p>Can anyone think of a reason why <code>Stdout.write</code> would flush but <code>Stdout.line</code> doesn't? </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[no_mangle]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">roc_fx_stdoutLine</span><span class=\"p\">(</span><span class=\"n\">line</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">RocStr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"p\">.</span><span class=\"n\">as_str</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">#[no_mangle]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">roc_fx_stdoutWrite</span><span class=\"p\">(</span><span class=\"n\">text</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">RocStr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">text</span><span class=\"p\">.</span><span class=\"n\">as_str</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">print!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">std</span>::<span class=\"n\">io</span>::<span class=\"n\">stdout</span><span class=\"p\">().</span><span class=\"n\">flush</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 402932690,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700354960
    },
    {
        "content": "<p>Cause somebody needed it to flush for a clic game or something</p>",
        "id": 402936630,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700356898
    },
    {
        "content": "<p>At least, I think that is why</p>",
        "id": 402936653,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700356906
    },
    {
        "content": "<p>Probably should add a separate flush effect</p>",
        "id": 402936677,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700356919
    },
    {
        "content": "<p>I can do that, just add a separate flush Effect. Would it be acceptable for it to flush stdout and stderr with the same or better to have two separate ones?</p>",
        "id": 402937168,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700357174
    },
    {
        "content": "<p>Like <code>Stdout.flush</code> and <code>Stderr.flush</code></p>",
        "id": 402937193,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700357192
    },
    {
        "content": "<p>I guess it should handle the errors too, like if not all bytes could be written due to I/O errors or EOF being reached. So more like <code>Stdout.flush : Task {} [IOError, EOF]</code> or something</p>",
        "id": 402937749,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700357484
    },
    {
        "content": "<p>Yeah, should be separate.</p>",
        "id": 402940787,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700358845
    },
    {
        "content": "<p>Also, technically even write and line should also have error returns, but I'm not sure what our decision around that for basic CLI was. I think we were ignoring some of those kinds of errors for simplicity of the platform, but I guess it is up to us overall to decide.</p>",
        "id": 402940852,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700358909
    },
    {
        "content": "<p>I think for most simple platforms, people just care about std in returning errors so they can recognize eof.</p>",
        "id": 402940885,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700358949
    },
    {
        "content": "<p>Currently implementing error handling for flush, would be easy to add RN if we are happy with that API change</p>",
        "id": 402940888,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700358950
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/316715-contributing/topic/Casual.20Conversation/near/402940852\">said</a>:</p>\n<blockquote>\n<p>Also, technically even write and line should also have error returns, but I'm not sure what our decision around that for basic CLI was. I think we were ignoring some of those kinds of errors for simplicity of the platform, but I guess it is up to us overall to decide.</p>\n</blockquote>\n<p>yeah I think if you want to write with error handling, that should be the unusual case</p>",
        "id": 402944435,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700361312
    },
    {
        "content": "<p>it should be supported, but it shouldn't be the default because that's not what people want 99% of the time <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 402944462,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700361335
    },
    {
        "content": "<p>Having played with this a bit I think it makes sense. My logic is;</p>\n<ol>\n<li>We are properly handling errors which could realistically occur</li>\n<li>It's pretty much the exact same API but uses <code>Task.attempt</code> instead of <code>Task.await</code>, so we can always just ignore the result if we don't care about it. For example;</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code># Log request date, method and url\ndate &lt;- Utc.now |&gt; Task.map Utc.toIso8601Str |&gt; Task.await\n_ &lt;- Stdout.line &quot;\\(date) \\(Http.methodToStr req.method) \\(req.url)&quot; |&gt; Task.attempt\n_ &lt;- Stdout.flush |&gt; Task.attempt\n</code></pre></div>",
        "id": 402944561,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700361397
    },
    {
        "content": "<p>I'm pretty sure it's normal stdout behavior to automatically flush when it encounters a newline: <a href=\"https://stackoverflow.com/a/65385249\">https://stackoverflow.com/a/65385249</a></p>",
        "id": 402945381,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700361769
    },
    {
        "content": "<p>I don't think <code>Stdin.line</code> or <code>Stdin.bytes</code> make sense for basic-webserver context so I am removing these</p>",
        "id": 402947724,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700362686
    },
    {
        "content": "<p>Any idea why this generated glue assertion might be incorrect? Is this an easy fix? <br>\n<a href=\"/user_uploads/22008/SWNj2xEL6Dt-hjy0zaVxYoDe/Screenshot-2023-11-19-at-14.16.02.png\">Screenshot-2023-11-19-at-14.16.02.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/SWNj2xEL6Dt-hjy0zaVxYoDe/Screenshot-2023-11-19-at-14.16.02.png\" title=\"Screenshot-2023-11-19-at-14.16.02.png\"><img src=\"/user_uploads/22008/SWNj2xEL6Dt-hjy0zaVxYoDe/Screenshot-2023-11-19-at-14.16.02.png\"></a></div>",
        "id": 402949886,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700363790
    },
    {
        "content": "<p>My current workaround it to comment out this line for each architecture.</p>",
        "id": 402949906,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700363813
    },
    {
        "content": "<p>difference between platforms maybe (I notice you are on aarch)</p>",
        "id": 402949963,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1700363859
    },
    {
        "content": "<p>That was in the <code>platform/src/glue_manual/src/aarch64.rs</code> file</p>",
        "id": 402950033,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700363888
    },
    {
        "content": "<p>I'm working on this <a href=\"https://github.com/roc-lang/basic-webserver/pull/8\">https://github.com/roc-lang/basic-webserver/pull/8</a> PR</p>",
        "id": 402950068,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700363919
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/316715-contributing/topic/Casual.20Conversation/near/402947724\">said</a>:</p>\n<blockquote>\n<p>I don't think <code>Stdin.line</code> or <code>Stdin.bytes</code> make sense for basic-webserver context so I am removing these</p>\n</blockquote>\n<p>I don't think <code>Stdin</code> makes sense for basic-webserver in general <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 402952613,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700365513
    },
    {
        "content": "<p>Maybe you want to pipe in something to serve? Seems unusual though</p>",
        "id": 402960897,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1700370293
    },
    {
        "content": "<p>I'm currently coming up against this which is causing me troubles making a RocDict</p>\n<div class=\"codehilite\"><pre><span></span><code>impl&lt;K: Hash, V&gt; RocDict&lt;K, V&gt; {\n    unsafe fn insert_unchecked(&amp;mut self, _key: K, _val: V) {\n        todo!();\n    }\n}\n</code></pre></div>",
        "id": 402962655,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700371416
    },
    {
        "content": "<p>I'm going to temporarily change the API for <code>Env.dict : Task (Dict Str Str) *</code> to <code>Env.list: Task (List (Str, Str)) *</code> as a workaround as I have been unable to make a RocDict from rust</p>",
        "id": 402964107,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700372227
    },
    {
        "content": "<p>Did we ever implement <code>RocDict</code> in rust?</p>\n<p>Aside, Dict may be one of the most painful pieces for platforms/glue to implement. Especially since they have to depend on a ton of implementation details (like the hashing function among others)</p>",
        "id": 402971266,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700376599
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/316715-contributing/topic/Casual.20Conversation/near/402932690\">said</a>:</p>\n<blockquote>\n<p>Can anyone think of a reason why <code>Stdout.write</code> would flush but <code>Stdout.line</code> doesn't? </p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[no_mangle]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">roc_fx_stdoutLine</span><span class=\"p\">(</span><span class=\"n\">line</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">RocStr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"p\">.</span><span class=\"n\">as_str</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">#[no_mangle]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">roc_fx_stdoutWrite</span><span class=\"p\">(</span><span class=\"n\">text</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">RocStr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">text</span><span class=\"p\">.</span><span class=\"n\">as_str</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">print!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">std</span>::<span class=\"n\">io</span>::<span class=\"n\">stdout</span><span class=\"p\">().</span><span class=\"n\">flush</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Since stdout is line-buffered by default, doesn't <code>println!</code> flush automatically?</p>",
        "id": 403016663,
        "sender_full_name": "timotree",
        "timestamp": 1700404932
    },
    {
        "content": "<p>I think <a href=\"https://github.com/roc-lang/basic-cli/releases/tag/0.6.1\">https://github.com/roc-lang/basic-cli/releases/tag/0.6.1</a> somehow regressed, with calls to Http now failing with 301 for some reason... I'm just investigating now</p>",
        "id": 404016695,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700857605
    },
    {
        "content": "<p>I'm wondering if we need to regenerate glue, I do have a PR for that but it hasn't passed CI yet.</p>",
        "id": 404016865,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700857720
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>$ echo &quot;http://roc-lang.org&quot; | roc run examples/http-get.roc\n🔨 Rebuilding platform...\nEnter a URL to fetch. It must contain a scheme like &quot;http://&quot; or &quot;https://&quot;.\nRequest failed with status 301\n</code></pre></div>",
        "id": 404017084,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700857899
    },
    {
        "content": "<p>Building from source it works just fine for me</p>",
        "id": 404017400,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700858140
    },
    {
        "content": "<p>301 is expected for <code>http://roc-lang.org</code> it is redirecting to <code>https://www.roc-lang.org</code></p>",
        "id": 404017469,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700858180
    },
    {
        "content": "<p>I get the same with \"echo <code>http://www.roc-lang.org\" | roc run examples/http-get.roc</code></p>",
        "id": 404018389,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700858901
    },
    {
        "content": "<p><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 404018422,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700858946
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span></p>",
        "id": 404018434,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700858960
    },
    {
        "content": "<p>I hadn't paid enough attention to the <code>http</code> vs <code>https</code> too. Also, there was a bug in the way I was using <code>Dir.list</code>.</p>",
        "id": 404018603,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700859103
    },
    {
        "content": "<p>I found this <a href=\"https://sans-io.readthedocs.io/\">https://sans-io.readthedocs.io/</a> and thought it may be a good reference for future implementations in pure Roc.</p>",
        "id": 413072169,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1705375197
    },
    {
        "content": "<p>There is an issue <a href=\"https://github.com/roc-lang/basic-webserver/actions/runs/7577479595/job/20638360851?pr=19\">in basic-webserver CI</a> I haven't seen before -- it should be totally unrelated to the changes in that PR. The surgical linker is unhappy with <code>__umodti3</code>. I've had a quick look and haven't resolved yet, posting here in case anyone else is able to look at this further. I'll circle back later, but want to progress some other things rn.</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;main&#39; panicked at &#39;Undefined Symbol in relocation, (+4ef2, Relocation { kind: PltRelative, encoding: Generic, size: +20, target: Symbol(SymbolIndex(+88)), addend: +fffffffffffffffc, implicit_addend: false }): Ok(Symbol { name: &quot;__umodti3&quot;, address: +0, size: +0, kind: Unknown, section: Undefined, scope: Unknown, weak: false, flags: Elf { st_info: +10, st_other: +0 } })&#39;, crates/linker/src/elf.rs:1486:25\n</code></pre></div>",
        "id": 416675309,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1705624184
    },
    {
        "content": "<p>I cannot reproduce the failures in CI for <a href=\"https://github.com/roc-lang/roc/pull/6415\">https://github.com/roc-lang/roc/pull/6415</a></p>",
        "id": 417568139,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1706066166
    },
    {
        "content": "<p>I've tried all kinds of different things, am tempted to try re-run CI and maybe that will resolve things? otherwise I'm out of ideas</p>",
        "id": 417568163,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1706066194
    },
    {
        "content": "<p>27 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"304641\" href=\"/#narrow/stream/304641-ideas/topic/package.20shorthands.20when.20compiling.20interface.20modules\">#ideas &gt; package shorthands when compiling interface modules</a> by <span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span>.</p>",
        "id": 422133264,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708294070
    },
    {
        "content": "<p>I've been looking at fixing a bug regarding <a href=\"https://github.com/roc-lang/roc/issues/6532\">aliasing option record fields</a>. The core of this seems to be a parsing error. I've read through the parser file, but still not sure how to modify the parser (and any implications after that). Are there any other places I can read to get some more context on how to implement this fix?</p>",
        "id": 424161465,
        "sender_full_name": "Trevor Settles",
        "timestamp": 1709269681
    },
    {
        "content": "<p>I am not very educated on the parser, but the root of the issue is here: <a href=\"https://github.com/roc-lang/roc/blob/9bf57d63370f69093c5ce2660d39cafe9a424aa7/crates/compiler/parse/src/pattern.rs#L494-L500\">https://github.com/roc-lang/roc/blob/9bf57d63370f69093c5ce2660d39cafe9a424aa7/crates/compiler/parse/src/pattern.rs#L494-L500</a></p>",
        "id": 424166649,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1709274114
    },
    {
        "content": "<p>You can see that it is select either of the two instead of optionally  accepting <code>:</code> and then optionally accepting <code>?</code></p>",
        "id": 424166749,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1709274164
    },
    {
        "content": "<p>If I understand correctly, which id definitely might not, I think the changes would just be parser local. Cause you are just changing the variable name of the parser output when renaming and optional</p>",
        "id": 424167222,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1709274498
    },
    {
        "content": "<p>Checkout the <span aria-label=\"cool\" class=\"emoji emoji-1f192\" role=\"img\" title=\"cool\">:cool:</span> diagram I made for my basic-cli build script <span aria-label=\"sunglasses\" class=\"emoji emoji-1f60e\" role=\"img\" title=\"sunglasses\">:sunglasses:</span> </p>\n<p><a href=\"https://github.com/roc-lang/basic-cli/tree/refactor-host?tab=readme-ov-file#building-the-platform\">https://github.com/roc-lang/basic-cli/tree/refactor-host?tab=readme-ov-file#building-the-platform</a></p>",
        "id": 448999976,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720068254
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/316715-contributing/topic/Casual.20Conversation/near/448999976\">said</a>:</p>\n<blockquote>\n<p>Checkout the <span aria-label=\"cool\" class=\"emoji emoji-1f192\" role=\"img\" title=\"cool\">:cool:</span> diagram I made for my basic-cli build script <span aria-label=\"sunglasses\" class=\"emoji emoji-1f60e\" role=\"img\" title=\"sunglasses\">:sunglasses:</span> </p>\n<p><a href=\"https://github.com/roc-lang/basic-cli/tree/refactor-host?tab=readme-ov-file#building-the-platform\">https://github.com/roc-lang/basic-cli/tree/refactor-host?tab=readme-ov-file#building-the-platform</a></p>\n</blockquote>\n<p>What did you make it with?</p>",
        "id": 449003186,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1720069857
    },
    {
        "content": "<p>PowerPoint</p>",
        "id": 449003202,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720069870
    },
    {
        "content": "<p>Classic</p>",
        "id": 449003219,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1720069882
    },
    {
        "content": "<p>Quite helpful! That looks familiar. Was tat from one your your recent meetup presentations?</p>",
        "id": 449129928,
        "sender_full_name": "Trevor Settles",
        "timestamp": 1720111748
    },
    {
        "content": "<p>No, I just put it together yesterday for Anton. He wanted something for the new basic-cli. I've got a PR that should hopefully land soon which refactors the rust code out into crates from the roc platform code. So to build the platform we use rust's cargo toolchain. I added a build script using (ironically a release of) basic-cli to drive all the different steps. </p>\n<p>This is in preparation for removing the platform rebuilding from the roc cli. Platforms should be responsible for building the binaries for their host using the native toolchains, i.e. zig, cargo, etc. Roc shouldn't need to have dependencies on any of this. Roc should only need to understand how to link the host binaries using one of the linkers (legacy, additive or surgical).</p>",
        "id": 449177548,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720134906
    },
    {
        "content": "<p>FYI -- I've got family staying with me this weekend (including 4x under the age of 5) so I don't expect I'll get much time to dig into to roc things. <span aria-label=\"beach umbrella\" class=\"emoji emoji-26f1\" role=\"img\" title=\"beach umbrella\">:beach_umbrella:</span></p>",
        "id": 449182697,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720137854
    },
    {
        "content": "<p>nice, enjoy the family time! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 449183204,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1720138024
    },
    {
        "content": "<p>Git noob question -- can anyone tell me why this PR has a bunch of unrelated commits in the history in GH? <a href=\"https://github.com/roc-lang/roc/pull/6859\">https://github.com/roc-lang/roc/pull/6859</a></p>",
        "id": 450046747,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720495824
    },
    {
        "content": "<p>I suspect it is because I merged in remote/main. But those other commits are from previous PR's that have been merged already</p>",
        "id": 450049250,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720496398
    },
    {
        "content": "<p>This is why I hate merge and always rebase if possible</p>",
        "id": 450051029,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720496808
    },
    {
        "content": "<p>I just did something super ugly, and rebased then squished</p>",
        "id": 450051083,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720496831
    },
    {
        "content": "<p>Seems to be happy now</p>",
        "id": 450051094,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720496836
    },
    {
        "content": "<p>How do we feel about using resources from a CDN for examples? </p>\n<p>I was thinking of adding a small text editor example to basic-webserver using htmx and <a href=\"https://quilljs.com\">quilljs</a>, with the sqlite backend.</p>",
        "id": 456973397,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722985459
    },
    {
        "content": "<p>The examples should be reflective of how we think people would write real-life Roc code, just smaller. If you think it's better for someone to depend on a CDN instead of including the files in the Roc binary, then that works for me.</p>",
        "id": 456973451,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1722985506
    },
    {
        "content": "<p>It seems like that would be useful if they want to keep a smaller binary size.</p>",
        "id": 456973561,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1722985570
    },
    {
        "content": "<p>The other place this kind of example could live is in roc-lang/examples. It's not necessarily specific to basic-webserver in that it brings in other resources and is somewhat opinionated about how to do things (htmx, quill etc), so just demonstrates one way to do things.</p>",
        "id": 456973620,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722985639
    },
    {
        "content": "<p>If I'm getting super excited I might even pull in tailwindcss from a CDN to make it look ok</p>",
        "id": 456973723,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722985706
    },
    {
        "content": "<p>Or I guess I could just make it a blog post. I'm not sure how we'd make an expect test for this in CI -- and it's more stuff to maintain.</p>",
        "id": 456974121,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722985999
    },
    {
        "content": "<p>can we just host them on GH pages in one of our repos or something?</p>",
        "id": 456977559,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1722988407
    },
    {
        "content": "<p>so it's a CDN but it's a CDN we know isn't going to 404 without our knowing about it <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 456977570,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1722988427
    },
    {
        "content": "<p>I could add them to the static files hosted on the roc website.</p>",
        "id": 456977830,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722988619
    },
    {
        "content": "<p>If we do that, it would make more sense for this kind of example to live in roc-lang/examples</p>",
        "id": 456977947,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722988694
    },
    {
        "content": "<p>I just don't know if we want an example like this and have the additional burden of maintaining it.</p>\n<p>I could just make a blog post, and then we link it under \"external\" examples.</p>",
        "id": 456978001,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722988750
    },
    {
        "content": "<p>How do we draw that line?</p>",
        "id": 456978025,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722988774
    },
    {
        "content": "<p>external seems fine for now I guess, as long as we're using a CDN that seems likely to be up for a long time</p>",
        "id": 456978200,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1722988849
    },
    {
        "content": "<blockquote>\n<p>small text editor example to basic-webserver using htmx and <a href=\"https://quilljs.com/\">quilljs</a>, with the sqlite backend.</p>\n</blockquote>\n<p>This seems quite niche, I would put it in its own repo and link to it on roc-awesome</p>",
        "id": 457072579,
        "sender_full_name": "Anton",
        "timestamp": 1723025940
    },
    {
        "content": "<p>Turned out to be really simple, and quite small. So I just shared in a gist in show and tell.</p>",
        "id": 457073227,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1723026190
    },
    {
        "content": "<p>In Germany and Austria, we had programs, that people, that used Google fonds from the Google servers got sued for privacy reasons. The cases came to a good end. But it is still not decided, if it is legal in Europe to use Google fonts or for the same reason a CDN, when the data is processed outside of Europe.</p>\n<p>I had cases in my circle of friends, where they got an \"Abmahnung\". (I have no idea how to translate this. This is a really problematic legal construct we have here.) I am absolutely sure, that a high Court will allow CDNs, but I don't want to be the person, that has to go to court for that. So I removed all CDNs from all my pages. I also know from companies, where they had to remove them.</p>\n<p>So if it's possible, I would always advise people in Germany not to use a CDN and ship the files by their own service.</p>",
        "id": 457093205,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1723032702
    },
    {
        "content": "<blockquote>\n<p>\"Abmahnung\"</p>\n</blockquote>\n<p>We have a Dutch word for that as well, perhaps this is similar to a \"Cease and Desist\"?</p>",
        "id": 457093908,
        "sender_full_name": "Anton",
        "timestamp": 1723032853
    },
    {
        "content": "<p>Maybe. An \"Abmahnung\" is a letter from a lawyer, which is so friendly to inform you, that you are doing something wrong. You should sign a declaration, that you will not do this again in the future. And you should also pay the bill of the lawyer. This may not be a big problem for companies, but it is for people and small charity organizations. A lot of them are doing what the laws say and are paying the bill. So there are lawyers that have built their business model on this system. We even have a word for that \"Abmahnindustrie\" maybe ChatGPT can explain it better</p>",
        "id": 457107494,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1723036725
    },
    {
        "content": "<p>Speaking of CDNs<br>\n<a href=\"https://httptoolkit.com/blog/public-cdn-risks/\">https://httptoolkit.com/blog/public-cdn-risks/</a></p>",
        "id": 459941367,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1723408357
    },
    {
        "content": "<p>Have we seen this before on linux x86? Just doing a fresh install of my server and building from source</p>\n<div class=\"codehilite\"><pre><span></span><code>  = note: /usr/bin/ld: cannot find -lz: No such file or directory\n          /usr/bin/ld: cannot find -lzstd: No such file or directory\n          collect2: error: ld returned 1 exit status\n</code></pre></div>",
        "id": 465405798,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724755498
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 465405836,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724755516
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> </p>\n<div class=\"codehilite\"><pre><span></span><code>$ sudo apt install libz-dev libzstd-dev\n</code></pre></div>\n<p>Seems to have worked ok and given me the correct dependencies... is this worth adding to the getting started guide for linux?</p>",
        "id": 465407244,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724755893
    },
    {
        "content": "<p>The getting started page is targeted towards Roc users using the nightly releases, I would add it to BUILDING_FROM_SOURCE.md</p>",
        "id": 465419162,
        "sender_full_name": "Anton",
        "timestamp": 1724758755
    },
    {
        "content": "<p>Not really something to open a new thread about, but I thought I would share that I spent some time today updating my <a href=\"https://github.com/lukewilliamboswell/roc-htmx-tailwindcss-demo/tree/main\">https://github.com/lukewilliamboswell/roc-htmx-tailwindcss-demo/tree/main</a> demo -- it's now working again.</p>\n<p>I encountered a number of compiler bugs along the way which made the process challenging. </p>\n<p>One example is that I've stripped out the Session management as that was giving me grief and responsible for an error in alias analysis bug somewhere. </p>\n<p>Also, <a href=\"https://github.com/roc-lang/roc/issues/7127\">this bug</a> currently prevents Isaac's RTL from finishing which needs to be manually worked around.</p>\n<p>I don't have any specific issue here to resolve or anything, but more a general observation that the experience wasn't great with our current state.</p>",
        "id": 473403623,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727576980
    },
    {
        "content": "<p>I like coming back to this demo and using it to help find bugs and test changes.</p>",
        "id": 473403716,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727577051
    },
    {
        "content": "<p>relatedly, I have a mostly working (with some gaps; it's not all the way there yet) implementation of Ayaz's standalone monomorphization-of-types pass, which is part 1 of the new lambda sets overhaul</p>\n<p>gives a pretty amusing overview of the magnitude of difference between proof-of-concept OCaml and production Rust implementation <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> </p>\n<ul>\n<li><a href=\"https://github.com/ayazhafiz/cor/blob/b67174d98b6dde16809b3606f9f88d4863d8743f/experiments/lss/monotype/lower_type.ml\">working OCaml proof-of-concept</a></li>\n<li><a href=\"https://github.com/roc-lang/roc/compare/specialize-types\">mostly-done Rust implementation</a></li>\n</ul>\n<p>(most of the difference is just in the proof-of-concept type system being intentionally way simpler)</p>",
        "id": 473403962,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1727577328
    },
    {
        "content": "<p>also I'm trying out a new \"never panic\" strategy for dealing with errors: everything takes a <code>problems: &amp;mut Vec&lt;Problem&gt;</code> and if something happens that's definitely a compiler bug, we just push into there and continue as best we can</p>",
        "id": 473404043,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1727577416
    },
    {
        "content": "<p>if all the passes end up doing that strategy, then we won't have any compiler panics, and even if there are bugs, you'll still get some partial (and hopefully helpful enough to unblock you) errors because we won't have panicked prior to the reporting step</p>",
        "id": 473404059,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1727577454
    },
    {
        "content": "<p>Will also make tracking them down and fixing much easier I imagine</p>",
        "id": 473404070,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727577481
    },
    {
        "content": "<p>maybe haha...right now they aren't including much context, but in the future we could throw a backtrace in there or something</p>",
        "id": 473404113,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1727577502
    },
    {
        "content": "<p>mainly I'm just trying to make it so they don't panic, but do record where the problem is so we have <em>some</em> way of handling it better down the line</p>",
        "id": 473404130,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1727577532
    },
    {
        "content": "<p>I guess I'm thinking we wont be throwing away the previous problems we've collected which may be useful for the user to fix also</p>",
        "id": 473404147,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727577569
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/316715-contributing/topic/Casual.20Conversation/near/473403623\">said</a>:</p>\n<blockquote>\n<p>Not really something to open a new thread about, but I thought I would share that I spent some time today updating my <a href=\"https://github.com/lukewilliamboswell/roc-htmx-tailwindcss-demo/tree/main\">https://github.com/lukewilliamboswell/roc-htmx-tailwindcss-demo/tree/main</a> demo -- it's now working again.</p>\n</blockquote>\n<p>It's a cool demo, I've been trying to find a way into Roc and I was taking a look at it last night, even though it was in a kind of broken state it was fun to play around with.</p>",
        "id": 473404266,
        "sender_full_name": "Nathan Kramer",
        "timestamp": 1727577696
    },
    {
        "content": "<p>Glad you enjoyed looking at it. There's a bunch of things in there now I'm looking at it I'd like to improve. When I last really touched it, was before module params... so I think there is plenty of space to explore with refactoring to use those better.</p>",
        "id": 473404355,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727577789
    },
    {
        "content": "<p>I've also used it to find API designs for basic-webserver... it's good to have a larger app to help find which helpers or types we might want to include in the platform.</p>",
        "id": 473404375,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727577831
    },
    {
        "content": "<p>I'll have to look into module params. <span aria-label=\"note\" class=\"emoji emoji-1f4dd\" role=\"img\" title=\"note\">:note:</span> <br>\nQuestion, is there a way to get the LSP to show autocomplete suggestions for package imports? or does that require changes to the LSP</p>",
        "id": 473404409,
        "sender_full_name": "Nathan Kramer",
        "timestamp": 1727577875
    },
    {
        "content": "<p>I'm not sure, I know we've discussed in zulip at some point. <span class=\"user-mention\" data-user-id=\"651372\">@Eli Dowling</span> would probably know I think. </p>\n<p>It may be something specific to an editor though. I'm not familiar with the LSP api myself</p>",
        "id": 473404473,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727577956
    },
    {
        "content": "<blockquote>\n<p>Convert a type-checked canonical IR to a monomorphized IR by creating specializations of all functions, such that they are monomorphic in types</p>\n</blockquote>\n<p>Just to check my understanding. After this we have no type variables, the functions are duplicated (specialized) for each possible combination of types that is used.</p>",
        "id": 473404997,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727578530
    },
    {
        "content": "<p>correct</p>",
        "id": 473405080,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1727578610
    },
    {
        "content": "<p>Just trying to follow this from a high level --- I can see we have the Subs types in <code>crates/compiler/types/src/subs.rs</code>, does the Mono IR (monomorphized IR) referred to  here also use these same types?</p>\n<p><a href=\"/user_uploads/22008/OOr0eFCWpi-oJWnPfmAXuU75/Screenshot-2024-09-29-at-13.00.11.png\">Screenshot 2024-09-29 at 13.00.11.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/OOr0eFCWpi-oJWnPfmAXuU75/Screenshot-2024-09-29-at-13.00.11.png\" title=\"Screenshot 2024-09-29 at 13.00.11.png\"><img data-original-dimensions=\"1290x348\" src=\"/user_uploads/thumbnail/22008/OOr0eFCWpi-oJWnPfmAXuU75/Screenshot-2024-09-29-at-13.00.11.png/840x560.webp\"></a></div>",
        "id": 473405497,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727579002
    },
    {
        "content": "<p>I'm guessing mono is in <code>crates/compiler/mono/src/ir.rs</code></p>",
        "id": 473405640,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727579123
    },
    {
        "content": "<p>In <a href=\"https://github.com/roc-lang/roc/pull/7130\">https://github.com/roc-lang/roc/pull/7130</a> snobee asks for clarification </p>\n<blockquote>\n<p>I'm making some assumptions here that I wanted to confirm:<br>\n1. All definitions begin at the start of a line<br>\n2. The left side of a type annotation is the exact same as the left side of a definition</p>\n</blockquote>\n<p>This sounds correct to me. Just wanted to ask here too.</p>",
        "id": 473409948,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727583703
    },
    {
        "content": "<p>I believe that's correct</p>",
        "id": 473413881,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1727587223
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/316715-contributing/topic/Casual.20Conversation/near/473405497\">said</a>:</p>\n<blockquote>\n<p>Just trying to follow this from a high level --- I can see we have the Subs types in <code>crates/compiler/types/src/subs.rs</code>, does the Mono IR (monomorphized IR) referred to  here also use these same types?</p>\n<p><a href=\"/user_uploads/22008/OOr0eFCWpi-oJWnPfmAXuU75/Screenshot-2024-09-29-at-13.00.11.png\">Screenshot 2024-09-29 at 13.00.11.png</a></p>\n</blockquote>\n<p>No, the type representation is different between mono and the earlier stages</p>",
        "id": 473413904,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1727587246
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/316715-contributing/topic/Casual.20Conversation/near/473404473\">said</a>:</p>\n<blockquote>\n<p>I'm not sure, I know we've discussed in zulip at some point. <span class=\"user-mention silent\" data-user-id=\"651372\">Eli Dowling</span> would probably know I think. </p>\n<p>It may be something specific to an editor though. I'm not familiar with the LSP api myself</p>\n</blockquote>\n<p>That does indeed require changes to the lsp. It's been a while since I looked at it, but from my memory the main issue was that before module Params and the changes to roc project structure that came with it, there wasn't a good way by default to find which file was the \"root/module entry\" of a project which made it mostly impossible to resolve what packages should be available in a particular file. </p>\n<p>But I believe that should be sorted now, so it's definitely something that could be implemented!</p>\n<p>There is kind of a uniform path for all the data to get into the lang-server from the compiler, and one section where we look for all the possible completions in the current scope. <br>\nAgain, just a guess, but adding it would be a matter of:</p>\n<ul>\n<li>add the extra data into the struct the Lang server gets form the compiler</li>\n<li>maybe do a little bit of processing to get the data into the right shape to get completions from it.</li>\n<li>add that new data source to the completion list generator. </li>\n</ul>\n<p>If you wanted to take a look, my suggestion is follow how we get in file completion vs imported completions.</p>\n<p>The main process when doing the actual completion is:<br>\nFigure out we are inside a package import using the ast (similar to how we find what completion are available at the current scope. </p>\n<p>Perform a lookup that's similar to the current imported completions, but instead search all packages instead of ones we've already imported.</p>\n<p><span class=\"user-mention\" data-user-id=\"452796\">@Nathan Kramer</span> if you wanted to take a crack at it, I'd be very happy to advise. I've been meaning to write some better docs for the lsp code anyway :)</p>",
        "id": 473413926,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1727587272
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"651372\">Eli Dowling</span> <a href=\"#narrow/stream/316715-contributing/topic/Casual.20Conversation/near/473413926\">said</a>:</p>\n<blockquote>\n<p>@Nathan Kramer if you wanted to take a crack at it, I'd be very happy to advise. I've been meaning to write some better docs for the lsp code anyway :)</p>\n</blockquote>\n<p>I think it's a bit outside the scope of my competence... I don't know rust <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> <br>\nAppreciate you taking the time to write out these thoughts, maybe I can work my way up to something like that!</p>",
        "id": 473417635,
        "sender_full_name": "Nathan Kramer",
        "timestamp": 1727590623
    },
    {
        "content": "<p>Hahah, I see. Yeah, learning rust is certainly a bit of a hurdle to get over. Obviously I misunderstood <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 473417869,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1727590858
    },
    {
        "content": "<p>I go to clean up 1 thing... and end up cleaning up 5 others... and I still haven't yet got back to the thing I started with. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<p>I've implemented a few fixes for basic-webserver... and then to test it I thought I'd use the htmx example, and next thing I know I'm updating roc-ansi and random other things.</p>",
        "id": 477549223,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729214867
    },
    {
        "content": "<p>It takes some discipline to not clean up 40 things at once, but it's not like any of us are complaining when you do it!</p>",
        "id": 477552713,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1729217375
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> -- I'm made that change to basic-webserver using a tag union for the method. I'm getting a segfault though. </p>\n<p>I'm thinking I should we might be able to make some unit tests to be sure it's working correctly, but also help isolate the bug. I'm going to try that.</p>",
        "id": 477553068,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729217553
    },
    {
        "content": "<p>Here's the glue module I've got so far <a href=\"https://gist.github.com/lukewilliamboswell/e13968df1b305288555cbdadf84a9078\">https://gist.github.com/lukewilliamboswell/e13968df1b305288555cbdadf84a9078</a></p>",
        "id": 477553145,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729217582
    },
    {
        "content": "<p>Lol, immediately after I wrote this, I think I realised a way we could dramatically simplify the glue. Move the RocStr value up into the <code>RequestToAndFromHost</code> struct. It'll be empty most of the time but that ok. </p>\n<p>Is there some way we can have an <code>Option&lt;xxx&gt;</code> in a Roc record so we're not allocating an empty string?</p>",
        "id": 477553453,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729217767
    },
    {
        "content": "<p>Empty strings don't allocate</p>",
        "id": 477553544,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729217824
    },
    {
        "content": "<p>So should be fine to just leave the string in</p>",
        "id": 477553571,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729217836
    },
    {
        "content": "<p>Hmm. the problem though with this plan, is that then we introduce a deep copy for every request&amp;response pair becuase now the platform will translate between the host version and what the app sees</p>",
        "id": 477553725,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729217908
    },
    {
        "content": "<p>I think we might be doing that everytime anyway</p>",
        "id": 477553791,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729217943
    },
    {
        "content": "<p>Yeah, I'm ditching this plan. It's just a bit too fragile and I want to move on.</p>",
        "id": 477557181,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729219445
    },
    {
        "content": "<p>Is there anyone online who has an Intel mac and would be free to help me with something?</p>",
        "id": 483815508,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732236089
    },
    {
        "content": "<p>Juts going back and forwards on this PR <a href=\"https://github.com/lukewilliamboswell/roc-platform-template-zig/pull/3\">https://github.com/lukewilliamboswell/roc-platform-template-zig/pull/3</a>  with CI, I think I've found a fix, but then every time I have to wait for Nix to do it's thing which takes a while.</p>",
        "id": 483815656,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732236174
    },
    {
        "content": "<p>I could probably make my life easier if I just used a nightly... but where's the fun in that</p>",
        "id": 483815680,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732236195
    },
    {
        "content": "<p>All good now... figured it out</p>",
        "id": 483820935,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732239745
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/316715-contributing/topic/Casual.20Conversation/near/483815508\">said</a>:</p>\n<blockquote>\n<p>Is there anyone online who has an Intel mac and would be free to help me with something?</p>\n</blockquote>\n<p>I think <span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> has one if I remember right! <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 483823968,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1732241879
    },
    {
        "content": "<p>oh nm glad it worked out!</p>",
        "id": 483824037,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1732241904
    },
    {
        "content": "<p>Yeah, I figured out how to make a nice GH matrix runner that tests the platform against most of the roc supported os/archs</p>",
        "id": 483824090,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732241943
    },
    {
        "content": "<p>Between that and nix, I'm pretty happy with the coverage</p>",
        "id": 483824156,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732241988
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/channel/316715-contributing/topic/Casual.20Conversation/near/465405798\">said</a>:</p>\n<blockquote>\n<p>Have we seen this before on linux x86? Just doing a fresh install of my server and building from source</p>\n<p><div class=\"codehilite\"><pre><span></span><code>  = note: /usr/bin/ld: cannot find -lz: No such file or directory\n          /usr/bin/ld: cannot find -lzstd: No such file or directory\n          collect2: error: ld returned 1 exit status\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I'm seeing a similar error on MacOS (with M1 Pro). </p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>  = note: ld: library not found for -lzstd\n          clang: error: linker command failed with exit code 1 (use -v to see invocation)\n\n\nerror: could not compile `roc_cli` (bin \"roc\") due to 1 previous error\n</code></pre></div>\n<p>I have zstd installed, and have even tried adding it's path to LDFLAGS, no dice.  Anyone seen that before?</p>",
        "id": 483896913,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1732277300
    },
    {
        "content": "<p>And I'm sorry, but I don't have the time to grok everything nix wants to do to my system, so I don't plan on installing it</p>",
        "id": 483900021,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1732278397
    },
    {
        "content": "<blockquote>\n<p>I have zstd installed, and have even tried adding it's path to LDFLAGS, no dice. Anyone seen that before?</p>\n</blockquote>\n<p>Can you tell me the path where zstd is installed?</p>",
        "id": 483901537,
        "sender_full_name": "Anton",
        "timestamp": 1732278908
    },
    {
        "content": "<blockquote>\n<p>but I don't have the time to grok everything nix wants to do to my system</p>\n</blockquote>\n<p>I've never experienced any problems after installing nix but I understand the desire to know everything it does.</p>",
        "id": 483901800,
        "sender_full_name": "Anton",
        "timestamp": 1732278987
    },
    {
        "content": "<p>It's <code>/opt/homebrew/opt/zstd</code> which is a symlink to <code>/opt/homebrew/Cellar/zstd/1.5.6</code></p>",
        "id": 483920348,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1732284963
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/channel/316715-contributing/topic/Casual.20Conversation/near/483901800\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>but I don't have the time to grok everything nix wants to do to my system</p>\n</blockquote>\n<p>I've never experience any problems after installing nix but I understand the desire to know everything it does.</p>\n</blockquote>\n<p>Yeah, just going through the installer it talks about adding users and groups and a top level directory and more.  I just need to spend some time eventually to get it.  I know some people I trust use it and love it.</p>",
        "id": 483920609,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1732285042
    },
    {
        "content": "<p>I've tried</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nb\">export</span><span class=\"w\"> </span><span class=\"nv\">LDFLAGS</span><span class=\"o\">=</span><span class=\"s2\">\"-L/usr/local/opt/llvm/lib,-L/opt/homebrew/opt,-rpath,/usr/local/opt/llvm/lib\"</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nb\">export</span><span class=\"w\"> </span><span class=\"nv\">LDFLAGS</span><span class=\"o\">=</span><span class=\"s2\">\"-L/usr/local/opt/llvm/lib,-L/opt/homebrew/Cellar/zstd/1.5.6,-rpath,/usr/local/opt/llvm/lib\"</span>\n</code></pre></div>\n<p>And then both of those with -Wl put in various places (which yes, means I don't understand <code>ld</code> very well even though I read the entire man page).</p>",
        "id": 483921310,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1732285261
    },
    {
        "content": "<p>Also tried paring down LDFLAGS to just <code>-L/opt/homebrew/opt</code> OR <code>-L/opt/homebrew/Cellar/zstd/1.5.6</code> and no dice</p>",
        "id": 483921970,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1732285457
    },
    {
        "content": "<p>Running <code>find / -name zstd</code> I see that I have it also in a few Go packages, in some Cargo crates, and in Go itself</p>",
        "id": 483922589,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1732285647
    },
    {
        "content": "<p>I'll check and compare on my mac in a bit</p>",
        "id": 483923681,
        "sender_full_name": "Anton",
        "timestamp": 1732285953
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> I figured it out.  Did some searching on here and found another thread from <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> about this.  I needed:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nb\">export</span><span class=\"w\"> </span><span class=\"nv\">LIBRARY_PATH</span><span class=\"o\">=</span><span class=\"s2\">\"/opt/homebrew/Cellar/zstd/1.5.6/lib\"</span>\n</code></pre></div>",
        "id": 483923844,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1732286007
    },
    {
        "content": "<p>Had nothing to do with LDFLAGS.  Don't worry, that was only an hour of my life wasted <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>",
        "id": 483923925,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1732286034
    },
    {
        "content": "<p>Maybe we should add this to the BUILDING_FROM_SOURCE.md file?</p>",
        "id": 483924016,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1732286056
    },
    {
        "content": "<p>It was right in the github workflow for macos apple silicon.... <span aria-label=\"man facepalming\" class=\"emoji emoji-1f926-200d-2642\" role=\"img\" title=\"man facepalming\">:man_facepalming:</span></p>",
        "id": 483924248,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1732286152
    },
    {
        "content": "<p>I thought we removed the zstd dependency <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 483924994,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1732286402
    },
    {
        "content": "<p>maybe that was something else?</p>",
        "id": 483925038,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1732286411
    },
    {
        "content": "<p>In good news, from my local repl:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>» this_should_work = 1\n\n1 : Num *\n» holy_hell = \"This worked\"\n\n\"This worked\" : Str\n» repl_is_slow = True\n\nTrue : [True]\n» bad_tag = Yuck_This_Is_God_Awful\n\n── SYNTAX PROBLEM ──────────────────────────────────────────────────────────────\n\nUnderscores are not allowed in tag or opaque ref names:\n\n10│      bad_tag = Yuck_This_Is_God_Awful\n                   ^^^^^^^^^^^^^^^^^^^^^^\n\nI recommend using PascalCase. It's the standard style in Roc code!\n\n» bad_ref = @Yuck_This_Is_God_Awful\n\n── SYNTAX PROBLEM ──────────────────────────────────────────────────────────────\n\nUnderscores are not allowed in tag or opaque ref names:\n\n12│      bad_ref = @Yuck_This_Is_God_Awful\n                   ^^^^^^^^^^^^^^^^^^^^^^^\n\nI recommend using PascalCase. It's the standard style in Roc code!\n</code></pre></div>",
        "id": 483925761,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1732286664
    },
    {
        "content": "<p>And</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>» how_about___this_kind_thing = 42\n\n── NAMING PROBLEM ──────────────────────────────────────────────────────────────\n\nI am trying to parse an identifier here:\n\n14│      how_about___this_kind_thing = 42\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nWhile snake case is allowed here, only a single consecutive underscore\nshould be used.\n</code></pre></div>",
        "id": 483925977,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1732286741
    },
    {
        "content": "<blockquote>\n<p>I thought we removed the zstd dependency <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>\n</blockquote>\n<p>I think it was removed but we had to put it back</p>",
        "id": 483926087,
        "sender_full_name": "Anton",
        "timestamp": 1732286769
    },
    {
        "content": "<p>While waiting for some substantive review of my PR, I'm going to play with updating an example to use snake_case and build it</p>",
        "id": 483926187,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1732286812
    },
    {
        "content": "<p>Sweet, after changing all references of <code>fizzBuzz</code> to <code>fizz_buzz</code> in <code>examples/FizzBuzz</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code> …/roc-examples/examples/FizzBuzz   main !   08:51\n❯ ../../../roc/target/debug/roc build\nDownloading https://github.com/roc-lang/basic-cli/releases/download/0.16.0/O00IPk-Krg_diNS2dVWlI0ZQP794Vctxzv0ha96mK0E.tar.br\n    into /Users/anthonybullard/.cache/roc/packages\n\n[8.9 / 8.9 MB]\n0 errors and 0 warnings found in 10613 ms\n while successfully building:\n\n    main\n\n …/roc-examples/examples/FizzBuzz   main !   08:52\n❯ ./main\n1,2,Fizz,4,Buzz,Fizz,7,8,Fizz,Buzz,11,Fizz,13,14,FizzBuzz,16,17,Fizz,19,Buzz,Fizz,22,23,Fizz,Buzz,26,Fizz,28,29,FizzBuzz,31,32,Fizz,34,Buzz,Fizz,37,38,Fizz,Buzz,41,Fizz,43,44,FizzBuzz,46,47,Fizz,49,Buzz,Fizz,52,53,Fizz,Buzz,56,Fizz,58,59,FizzBuzz,61,62,Fizz,64,Buzz,Fizz,67,68,Fizz,Buzz,71,Fizz,73,74,FizzBuzz,76,77,Fizz,79,Buzz,Fizz,82,83,Fizz,Buzz,86,Fizz,88,89,FizzBuzz,91,92,Fizz,94,Buzz,Fizz,97,98,Fizz,Buzz\n</code></pre></div>",
        "id": 483927313,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1732287195
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/channel/316715-contributing/topic/Casual.20Conversation/near/483926087\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>I thought we removed the zstd dependency <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>\n</blockquote>\n<p>I think it was removed but we had to put it back</p>\n</blockquote>\n<p>ah I see - <a href=\"https://github.com/roc-lang/roc/pull/7008\">llvm needs it</a></p>\n<p>so I guess once we're building our own llvm from source, we can drop the dependency?</p>",
        "id": 483947606,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1732293157
    },
    {
        "content": "<p>most likely</p>",
        "id": 483947746,
        "sender_full_name": "Anton",
        "timestamp": 1732293200
    },
    {
        "content": "<p>This hasn't gone as swimmingly since.  It seems that there is a problem with the basic-cli platform latest where the Arg module is still using Str.split and that is not available in the latest version of the compiler</p>",
        "id": 483949910,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1732293882
    },
    {
        "content": "<p>Just linking to my comments here: <a href=\"#narrow/channel/302903-platform-development/topic/Platform.20.2F.20Language.20version.20compatibility/near/483949925\">https://roc.zulipchat.com/#narrow/channel/302903-platform-development/topic/Platform.20.2F.20Language.20version.20compatibility/near/483949925</a></p>",
        "id": 483950383,
        "sender_full_name": "Anton",
        "timestamp": 1732294038
    },
    {
        "content": "<p>My Roc journey this month:</p>\n<ol>\n<li>I'm gonna make a platform and apps for a project</li>\n<li>First I'll copy and modify an existing platform</li>\n<li>No, first I need to figure out how purity-inference impacts platform APIs</li>\n<li>No, first I need to figure out these other syntax changes</li>\n<li>No, first I need to read some examples</li>\n<li>No, first I need to make those examples</li>\n<li>No, first I need to re-read the tutorial</li>\n<li>No, first I need to update the tutorial <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></li>\n</ol>\n<p>Updating the tutorial is really helping me understand the scope of recent changes <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 483988383,
        "sender_full_name": "jan kili",
        "timestamp": 1732308194
    },
    {
        "content": "<p>I'm sorry for the rabbit hole <span aria-label=\"rabbit\" class=\"emoji emoji-1f407\" role=\"img\" title=\"rabbit\">:rabbit:</span> <span aria-label=\"hole\" class=\"emoji emoji-1f573\" role=\"img\" title=\"hole\">:hole:</span></p>",
        "id": 483989259,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732308614
    },
    {
        "content": "<p>I'm stomping through the tall grass before the schoolbus arrives next week!</p>",
        "id": 483989541,
        "sender_full_name": "jan kili",
        "timestamp": 1732308751
    },
    {
        "content": "<p>How is December so soon?</p>",
        "id": 483989581,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732308774
    },
    {
        "content": "<p>Basic CLI plans to support sqlite eventually, right?</p>\n<p>Just thinking about the bundle of sqlite improvements that got reverted from basic webserver.</p>\n<p>I might try to add them as a standalone crate and module in basic CLI (like <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> has been doing for other shared effects). Then I would work to add it back into basic webserver.</p>",
        "id": 490718123,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735078184
    },
    {
        "content": "<p>Sounds great <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 490718773,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735078748
    },
    {
        "content": "<p>What is the current reasoning about things like sqlite(shared libs) and platforms? As they make sense to be used across different platforms and it would be great if there was one great API for it instead of \"learn the API for the same thing for each platform\".</p>\n<p>I've not followed much of the conversation for the last several months (due to becoming a dad! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> ) - so I wonder if the general conclusion was that platforms benefit from being batteries included instead of composing shared effectful libs.</p>",
        "id": 490807600,
        "sender_full_name": "Georges Boris",
        "timestamp": 1735159670
    },
    {
        "content": "<p>So sqlite is always special. If you want it, you must embed it in the platform. There is no implementing sqlite in roc. With many other things, like any other database, you can make a roc library built over tcp.</p>",
        "id": 490809942,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735162181
    },
    {
        "content": "<p>Anyway, with basic cli and basic webserver, we are starting to do basic rust crate sharing</p>",
        "id": 490809950,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735162198
    },
    {
        "content": "<p>So many effects are implemented in rust crates shared between the two platforms.</p>",
        "id": 490810018,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735162220
    },
    {
        "content": "<p>Then a thin duplicate roc shell</p>",
        "id": 490810026,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735162230
    },
    {
        "content": "<p>We could write a library for sqld/libsql and use the http protocol, but as far as “platform level capability” composition I hope we come up with something better than just sharing implementations in the long run. I’d like to have a singular Roc interface to many of these that also could be shared (and maybe built upon by plain Roc packages)</p>",
        "id": 490813542,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735166027
    },
    {
        "content": "<p>I think the correct way to use sqlite is to embedded it and skip any protocols. This means the primitives must be in the platform.</p>",
        "id": 490816174,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735169178
    },
    {
        "content": "<p>They can still be shared and libraries can still build on top of them, but the primitives would be required in each platform that wants to support sqlite</p>",
        "id": 490816224,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735169227
    },
    {
        "content": "<p>The only other reasonable alternative is generic ffi (which roc could support, but is a much more complex topic)</p>",
        "id": 490816254,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735169256
    },
    {
        "content": "<p>Someone could also make something to use the http protocol for sqlite, but, at least for me, that defeats essentially the entire point of using sqlite.</p>",
        "id": 490816461,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735169462
    },
    {
        "content": "<p>Turso would disagree <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>. They also have a binary protocol as well. You still have an extremely fast battle-tested database that is file based (and libsql has a bunch of improvements over mainline SQLite)</p>\n<p>But I don’t want to argue about SQLite in specific. I worry that having singular monolithic platforms instead of a runtime of effects that can be composed will, at scale, cause issues with adoption and many many speed bumps to a lot of reasonable use cases</p>",
        "id": 490827118,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735180661
    },
    {
        "content": "<p>SQLite is an outlier database because it's the only one that's normally bundled as a dylib</p>",
        "id": 490828732,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735182363
    },
    {
        "content": "<p>Postgres, MySQL, etc operate over a socket by default and so there's no problem making platform-agnostic pure-Roc packages to talk to them, such as roc-pg</p>",
        "id": 490828815,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735182445
    },
    {
        "content": "<p>that's why these conversations always come up in the context of SQLite specifically: it's the only one that makes this tricky <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 490828878,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735182492
    },
    {
        "content": "<p>Yeah, I think SQlite is specifically a bad example</p>",
        "id": 490829038,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735182684
    },
    {
        "content": "<p>There are lots of other tools and effects to worry about.</p>",
        "id": 490829056,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735182715
    },
    {
        "content": "<p>That said, I think sharing via rust crates is totally reasonable</p>",
        "id": 490829092,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735182744
    },
    {
        "content": "<p>Slightly tangential to this conversation, but tree-sitter might be a good example of a tool that's written in order to make it easy to use from different programming languages.</p>\n<p>Most of it is written in C so any language with C-ffi can pull it in. I've been integrating tree-sittter into a Zig platform I'm working on, and also tree-sitter-highlight, a tool bundled with tree-sitter, written in Rust, with hooks for calling it from C.</p>\n<p>Another thought is that it might also be interesting to watch how different platforms integrate sqlite for a while before we start investing in tooling to make it easier. For my Zig platform I needed a library for generating HTML. Hannes wrote one that I could have used, roc-html, but I realized that for my platform an ideal Html type would internally be represented like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>Xml : List\n        [\n            FromSource { start: U32, end: U32 },\n            RocGenerated (List U8),\n        ]\n</code></pre></div>\n<p>I.e., a list of slices, some copied from a source file, others generated using functions like <code>Html.div</code>. This is super specific to my platform, so no generic HTML library will define the HTML type like this. There might still be a way to do code sharing here, possibly a HTLM library might define all the helper functions for constructing different node types, but require you to pass in a custom internal <code>XML</code> type and <code>node</code> function.</p>\n<p>I'm curious if we'll see similar situations with regards to sqlite, or tree-sitter, or other libraries designed for performance and integration via C-ffi. Platform authors might find that they can integrate the C dependency in a way specific to their platform that squeezes out some extra performance. It's hard to know upfront, given the platform concept is such a new paradigm.</p>",
        "id": 490862163,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1735209236
    },
    {
        "content": "<p>I remember an idea discussed here in the likes of \"libraries that require the platform to expose some types that implement abilities x y z\".</p>\n<p>That way a general html library might work with a generic <code>Html msg</code> type while multiple platforms might pick up that type and render it in different ways (e.g. <a href=\"https://www.nicbarker.com/clay\">clay</a> is an immediate mode rendering library that was just released that supports rendering as html, canvas and opengl - maybe a game engine platform could use it to render some html content using the same API)</p>",
        "id": 490891292,
        "sender_full_name": "Georges Boris",
        "timestamp": 1735228247
    },
    {
        "content": "<p>Yeah, that still can be the basis for a lot of sharing</p>",
        "id": 490921798,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735251827
    },
    {
        "content": "<p>Can someone find the zulip discussion for <code>??</code> (providing defaults for results) as in <a href=\"https://github.com/roc-lang/roc/issues/7089\">#7089</a>?</p>",
        "id": 491020186,
        "sender_full_name": "Anton",
        "timestamp": 1735325017
    },
    {
        "content": "<p>It's a couple different discussions. I'm on it</p>",
        "id": 491020326,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735325118
    },
    {
        "content": "<p>First mention by Richard: <a href=\"#narrow/channel/304641-ideas/topic/.60try-else.60.20error.20context.20adding.20syntax/near/470420320\">#ideas &gt; &#96;try-else&#96; error context adding syntax @ 💬</a></p>",
        "id": 491020479,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735325229
    },
    {
        "content": "<p>Okay, not that many discussions</p>",
        "id": 491020921,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735325549
    },
    {
        "content": "<p>That's basically the last one that isn't just giving usage examples</p>",
        "id": 491020939,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735325560
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> did I ship something that's not meeting your expectations?</p>",
        "id": 491020982,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735325590
    },
    {
        "content": "<p>No, that's not it, I was not immediately sold on the concept of the <code>??</code> operator and wanted to look at the discussion that lead to it.</p>",
        "id": 491022551,
        "sender_full_name": "Anton",
        "timestamp": 1735326605
    },
    {
        "content": "<p>Yeah, I think it was suggested and no one really had an issue with it. So it was added (or planned for addition)</p>",
        "id": 491023143,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735327063
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> If you aren't a fan, I'd like to hear why and have a discussion about it before I implement the <code>?</code> binop</p>",
        "id": 491023462,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735327310
    },
    {
        "content": "<p>I was doubting if <code>Result.withDefault</code> is used so often that there should be an operator for it. I now see that  <code>??</code> will also be used for default value record fields, so it seems justified <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 491086137,
        "sender_full_name": "Anton",
        "timestamp": 1735386327
    },
    {
        "content": "<p>I think <code>Result.withDefault</code> will be used a lot for things like getting data out of a list, set, or map.</p>",
        "id": 491086219,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735386401
    },
    {
        "content": "<p>Pretty much like an <code>Option.withDefault</code> if we had Options</p>",
        "id": 491086251,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735386444
    },
    {
        "content": "<p>That's how I found myself using it in AOC at least</p>",
        "id": 491086260,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735386463
    },
    {
        "content": "<blockquote>\n<p>like getting data out of a list, set, or map.</p>\n</blockquote>\n<p>Would using <code>Result.withDefault</code> in these cases not be a point of silent failure?</p>",
        "id": 491090759,
        "sender_full_name": "Anton",
        "timestamp": 1735390647
    },
    {
        "content": "<p>It all depends on the use case</p>",
        "id": 491090864,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735390731
    },
    {
        "content": "<p>But yes many times it would be.</p>",
        "id": 491090891,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735390751
    },
    {
        "content": "<p>I think the main cases will be for those \"scripty\" sort of workflows</p>",
        "id": 491090919,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735390786
    },
    {
        "content": "<p>Not 100% sure where this should go, so just asking it here:<br>\nHow does one transfer a PGP key between computers?</p>",
        "id": 491196524,
        "sender_full_name": "Wizard ish",
        "timestamp": 1735496089
    },
    {
        "content": "<p>you can use <code>gpg --export-secret-key</code></p>",
        "id": 491197244,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735496803
    },
    {
        "content": "<p>This what I use for two linux machines:</p>\n<div class=\"codehilite\"><pre><span></span><code># on old pc:\ngpg --list-keys --keyid-format SHORT | grep ^pub\ngpg --export --armor [Your_Key_ID] &gt; public.key\n\n# on new pc\ngpg --import public.key\n</code></pre></div>",
        "id": 491266701,
        "sender_full_name": "Anton",
        "timestamp": 1735555416
    },
    {
        "content": "<p>I'm going to be hacking on the type checker for the next few hours. If anyone would like to join you're most welcome.</p>",
        "id": 499847447,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739574299
    },
    {
        "content": "<p>I'm still at the \"how does this thing work\" phase of things... so it's pretty slow progress</p>",
        "id": 499847562,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739574356
    },
    {
        "content": "<p>at the most basic level, I like to think of <code>Subs</code> as a \"type database\" (the name of that data structure could probably be better <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>)</p>",
        "id": 499848041,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739574593
    },
    {
        "content": "<p><code>Variable</code> is like a <code>TypeId</code> - the key in the key/value store of the types database</p>",
        "id": 499848113,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739574611
    },
    {
        "content": "<p>and then the value in that key/value store is either a specific type like \"this is a function with these arguments and this return value...\" or else a \"symlink\" to another TypeId - like \"see this other thing for what my type is\"</p>",
        "id": 499848210,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739574659
    },
    {
        "content": "<p>a really critical performance aspect of our type unification algorithm is that you're allowed to \"compact\" chains of symlinks at any point in the process without there being any chance of that changing the answer at the end of type-checking</p>",
        "id": 499848367,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739574726
    },
    {
        "content": "<p>in other words, if the type of A is \"symlinked\" to be whatever the type of B is, and B is \"symlinked\" to be whatever the type of C is, then we can compact that to have A be symlinked directly to C</p>",
        "id": 499848422,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739574762
    },
    {
        "content": "<p>which means that later whenever we're looking up the final type of A (which can come up a lot during type inference, e.g. to check if something has a type mismatch with A), we don't have to go through B, we can go straight to C</p>",
        "id": 499848470,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739574798
    },
    {
        "content": "<p>which means the symlink chains never get longer than 1 hop, instead of potentially growing to N hops - which could really get out of hand if it were allowed to happen <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 499848530,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739574831
    },
    {
        "content": "<p><code>get_content</code> refers to \"go get the actual type associated with this <code>Variable</code>\" and <code>get_content_without_compacting</code> is the same thing except it takes a <code>&amp;Subs</code> instead of <code>&amp;mut Subs</code> and therefore won't (and can't, because it's not <code>mut</code>) compact any symlink chains it encounters</p>",
        "id": 499848698,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739574903
    },
    {
        "content": "<p>By \"symlinked\" you're talking about substitutions?</p>",
        "id": 499849663,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739575339
    },
    {
        "content": "<p>Yeah I've been trying to learn the theory basics and map that back to what we have in the rust impl. It's a challenge to unpick and see how it all works together. Just poking at the different data structures mostly and translating them mostly 1-1 to zig for now.</p>",
        "id": 499849965,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739575497
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/channel/316715-contributing/topic/Casual.20Conversation/near/499849663\">said</a>:</p>\n<blockquote>\n<p>By \"symlinked\" you're talking about substitutions?</p>\n</blockquote>\n<p>yeah, I always thought of them as symlinks <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 499854673,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739577817
    },
    {
        "content": "<p>but that's why it's called <code>Subs</code> - short for \"substitutions table\"</p>",
        "id": 499854685,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739577826
    },
    {
        "content": "<p>Where do folks \"join\" for co-working or pairing or mobbing these days? All Zed? Sometimes Discord? I'm curious to try streaming some workdays, but I haven't felt motivated to set up OBS or perf check my hardware.</p>",
        "id": 499887699,
        "sender_full_name": "jan kili",
        "timestamp": 1739601109
    },
    {
        "content": "<p>Luke and I mainly do Google Meet, but sometimes Zed</p>",
        "id": 499887791,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739601201
    },
    {
        "content": "<p>Discord is great, but lots of people don't really use it still</p>",
        "id": 499887802,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739601217
    },
    {
        "content": "<p>I posted earlier when I was starting. I'm almost done for todays session. My plan is to let people know in here if I know I've got a few hours to hack on things.</p>",
        "id": 499887984,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739601389
    },
    {
        "content": "<p>Oh, you're still going?</p>",
        "id": 499887999,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739601415
    },
    {
        "content": "<p>Good to know</p>",
        "id": 499888002,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739601420
    },
    {
        "content": "<p>Ah, hopefully, I can join the next time. It's been a time since I last looked into roc’s guts</p>",
        "id": 499892077,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1739605470
    },
    {
        "content": "<p>Hello, I would like to ask if the rust part of roc is still being updated? I want to learn about compiled languages ​​through roc, and I might want to start with the rust part, but I see that roc seems to have been rewritten with zig?</p>",
        "id": 499985946,
        "sender_full_name": "Cancai Cai",
        "timestamp": 1739688877
    },
    {
        "content": "<p>We have recently started a rewrite in zig. The rust compiler is still there and operational... all the recent effort to add new features is going into the zig compiler. </p>\n<p>What are you hoping to learn about? You can definitely read through the rust compiler code, though there is a lot there.</p>",
        "id": 499986082,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739689025
    },
    {
        "content": "<p>OK, thank you very much for your quick answer. I am very interested in the world of compiled languages ​​and I hope to learn some knowledge about compiled languages ​​from roc. I will try to read roc's rust code and try to make some contributions.</p>\n<p>Are we currently accepting contributions for the rust part, or would it be more appropriate to start with zig?</p>",
        "id": 499986433,
        "sender_full_name": "Cancai Cai",
        "timestamp": 1739689370
    },
    {
        "content": "<p>I would point you to the <a href=\"https://www.roc-lang.org/community#ideas\">https://www.roc-lang.org/community#ideas</a> and say it's a good idea to discuss anything in here before you commit too much time on something you would like to merge. </p>\n<p>I would suggest Zig is the best place, though there isn't much actually there to work with at the moment. We're trying to put the bare bones together and get a really simple compiler end to end -- which might take us a little while.</p>",
        "id": 499986554,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739689514
    },
    {
        "content": "<p>I'll be jumping on either a Zed call or Google Meet in about an hour and a half to work on implementing the basic form of <code>coordinate.zig</code> if anyone would like to join!</p>",
        "id": 500049342,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739743723
    },
    {
        "content": "<p>I'm in this call: <a href=\"https://meet.google.com/vse-gvzr-sqv\">https://meet.google.com/vse-gvzr-sqv</a></p>",
        "id": 500054467,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739748405
    },
    {
        "content": "<p>Is there an existing #roc channel for Zed, or should I create a new one?</p>",
        "id": 500054939,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739748783
    },
    {
        "content": "<p>I thought we said one already existed, but not sure</p>",
        "id": 500055247,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739749040
    },
    {
        "content": "<p>We jumped off for now, might jump back on later but not sure</p>",
        "id": 500067895,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739758842
    },
    {
        "content": "<p>Yeah I'm just grabbing a bite to eat</p>",
        "id": 500068073,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739758998
    },
    {
        "content": "<p>Heads up, if anyone is ever curious about any of the plans for how a part of the new Zig-based compiler will work, I'm happy to chat. Please feel free to ask questions here or in a direct message <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 504932704,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741720765
    },
    {
        "content": "<p>For anyone interested, myself and a few other roc contributors will be meeting up at  <time datetime=\"2025-03-22T17:30:00Z\">2025-03-22T10:30:00-07:00</time>. Just an ad hoc update and general discussion. Will be super laid back. I guess we'll <a href=\"https://meet.jit.si/moderated/672e6cc127f67c355ac33a6c800ab60136fe27de5db001bed534ad2d2e3ee02d\">try jitsi for this one</a></p>",
        "id": 507405361,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742614690
    },
    {
        "content": "<p>Starting now for anyone interested <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 507471658,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742664651
    },
    {
        "content": "<p>Here are screenshots showing a pathological case of my error message UX pain, where I'm deleting one line of code:<br>\n<a href=\"/user_uploads/22008/XwUyVndvUgwZpBSOQ8ONyN0o/Screenshot_20250322_122439.png\">Screenshot_20250322_122439.png</a><br>\n<a href=\"/user_uploads/22008/ch4M7x7o2LLwvc8VPa-K71BL/Screenshot_20250322_122512.png\">Screenshot_20250322_122512.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/XwUyVndvUgwZpBSOQ8ONyN0o/Screenshot_20250322_122439.png\" title=\"Screenshot_20250322_122439.png\"><img data-original-content-type=\"image/png\" data-original-dimensions=\"1920x1200\" src=\"/user_uploads/thumbnail/22008/XwUyVndvUgwZpBSOQ8ONyN0o/Screenshot_20250322_122439.png/840x560.webp\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/22008/ch4M7x7o2LLwvc8VPa-K71BL/Screenshot_20250322_122512.png\" title=\"Screenshot_20250322_122512.png\"><img data-original-content-type=\"image/png\" data-original-dimensions=\"1920x1200\" src=\"/user_uploads/thumbnail/22008/ch4M7x7o2LLwvc8VPa-K71BL/Screenshot_20250322_122512.png/840x560.webp\"></a></div>",
        "id": 507477132,
        "sender_full_name": "jan kili",
        "timestamp": 1742668032
    },
    {
        "content": "<p>btw know ive just been gone for the past little bit (got myself into a bit of a journey with <a href=\"https://racket-lang.org/\">Racket</a>, but what's the status of the Zig rewrite so far (is the zig src folder readme state accurate, and why are theyre still issues for the rust version)?</p>",
        "id": 510517518,
        "sender_full_name": "Wizard ish",
        "timestamp": 1743971423
    },
    {
        "content": "<p>I think we basically have a full tokenizer and parser, but later stages just have shims or limited work. I know progress has been made for canonicalization and unification.</p>",
        "id": 510518327,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743972084
    },
    {
        "content": "<p>We have done no work to clean up rust issues and we still log some rust bugs. Not that they are planned to be fixed. Just tracked.</p>",
        "id": 510518359,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743972121
    },
    {
        "content": "<p>Oh, we also have made a decent bit of progress for fuzzing, snapshotting, and testing, to give a more robust base</p>",
        "id": 510518424,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743972155
    },
    {
        "content": "<p>I think overall progress will ebb and flow in waves</p>",
        "id": 510518438,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743972169
    },
    {
        "content": "<p>I've been trying to add some snapshoting (sexpr) support to canonicalize, but I've banging my head against a compiler error for a while. Would appreciate a second pair of eyes if one is available.</p>\n<p>My current code is <a href=\"https://github.com/joshuawarner32/roc/blob/add-canonicalize-sexpr/src/check/canonicalize/IR.zig#L286\">here</a>, and on that line specifically I'm seeing the following error:</p>\n<div class=\"codehilite\"><pre><span></span><code>src/check/canonicalize/IR.zig:286:42: error: no field or member function named &#39;toSExpr&#39; in &#39;collections.safe_list.SafeList(base.ModuleImport).Idx&#39;\n                    var elem_sexpr = elem.toSExpr(env, ir);\n                                     ~~~~^~~~~~~~\nsrc/collections/safe_list.zig:31:25: note: enum declared here\n        pub const Idx = enum(u32) { _ };\n                        ^~~~~~~~~~~~~~~\n</code></pre></div>\n<p>Similar errors involving <code>SafeList(base.ModuleImport).Idx</code> also pop up when trying other variations of this loop.</p>\n<p>AFAICT this code very explicitly is not doing anything involving ModuleImport's - so I'm very confused.</p>\n<p>There are similar errors that pop up in some similar circumstances later in the file, clearly also mismatching in type arguments.</p>\n<p>At this point I suspect there is a zig compiler bug of some sort, if nothing else in deciding which types to show to the user when rendering the error message.</p>\n<p>Thoughts/tips?</p>",
        "id": 510519283,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1743972806
    },
    {
        "content": "<p>ok i know the idea for \"type functions as comptime\" in Roc was too compicated, but i just had a thought. Extend the Racket \"seperate compilation guarentee\" to <em>any</em> sort of logic beyond pattern matching. That is, a \"type function\" (generic type) could only act as a simple, pure, lambda from one term (that is a type) to another</p>",
        "id": 510522545,
        "sender_full_name": "Wizard ish",
        "timestamp": 1743975357
    },
    {
        "content": "<p>Probably worth spinning up a <a class=\"stream\" data-stream-id=\"304641\" href=\"/#narrow/channel/304641-ideas\">#ideas</a> thread with more concrete details.</p>",
        "id": 510523054,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743975799
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453336\">Joshua Warner</span> <a href=\"#narrow/stream/316715-contributing/topic/Casual.20Conversation/near/510519283\">said</a>:</p>\n<blockquote>\n<p>I've been trying to add some snapshoting (sexpr) support to canonicalize, but I've banging my head against a compiler error for a while. Would appreciate a second pair of eyes if one is available.</p>\n<p>My current code is <a href=\"https://github.com/joshuawarner32/roc/blob/add-canonicalize-sexpr/src/check/canonicalize/IR.zig#L286\">here</a>, and on that line specifically I'm seeing the following error:</p>\n<div class=\"codehilite\"><pre><span></span><code>src/check/canonicalize/IR.zig:286:42: error: no field or member function named &#39;toSExpr&#39; in &#39;collections.safe_list.SafeList(base.ModuleImport).Idx&#39;\n                    var elem_sexpr = elem.toSExpr(env, ir);\n                                     ~~~~^~~~~~~~\nsrc/collections/safe_list.zig:31:25: note: enum declared here\n        pub const Idx = enum(u32) { _ };\n                        ^~~~~~~~~~~~~~~\n</code></pre></div>\n<p>Similar errors involving <code>SafeList(base.ModuleImport).Idx</code> also pop up when trying other variations of this loop.</p>\n<p>AFAICT this code very explicitly is not doing anything involving ModuleImport's - so I'm very confused.</p>\n<p>There are similar errors that pop up in some similar circumstances later in the file, clearly also mismatching in type arguments.</p>\n<p>At this point I suspect there is a zig compiler bug of some sort, if nothing else in deciding which types to show to the user when rendering the error message.</p>\n<p>Thoughts/tips?</p>\n</blockquote>\n<p>Not immediately, but I probably can take a look tomorrow night or Tuesday.</p>",
        "id": 510523077,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743975834
    },
    {
        "content": "<p>I think you need to fetch the child expressions and call toSExpr on them <span class=\"user-mention\" data-user-id=\"453336\">@Joshua Warner</span></p>",
        "id": 510524905,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1743977365
    },
    {
        "content": "<p>Like here: <a href=\"https://github.com/roc-lang/roc/blob/5ba1c8e24b555b4c2c625e7d718bfcb223f00281/src/check/parse/IR.zig#L2566\">https://github.com/roc-lang/roc/blob/5ba1c8e24b555b4c2c625e7d718bfcb223f00281/src/check/parse/IR.zig#L2566</a></p>",
        "id": 510525074,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1743977505
    },
    {
        "content": "<p>Right, I was thinking roughly along those lines, but I haven't happened upon the right pattern to use with SafeMultiList. Applying this diff:</p>\n<div class=\"codehilite\"><pre><span></span><code>diff --git a/src/check/canonicalize/IR.zig b/src/check/canonicalize/IR.zig\nindex 3b4858fe9c..25db1cc804 100644\n--- a/src/check/canonicalize/IR.zig\n+++ b/src/check/canonicalize/IR.zig\n@@ -283,7 +283,8 @@ pub const Expr = union(enum) {\n                 appendTypeVarChild(&amp;node, gpa, &quot;elem_var&quot;, l.elem_var);\n                 var elems_node = sexpr.Expr.init(gpa, &quot;elems&quot;);\n                 for (l.elems.items(.expr)) |elem| {\n-                    var elem_sexpr = elem.toSExpr(env, ir);\n+                    const e = ir.exprs_at_regions.get(elem);\n+                    var elem_sexpr = e.toSExpr(env, ir);\n                     elems_node.appendNodeChild(gpa, &amp;elem_sexpr);\n                 }\n                 node.appendNodeChild(gpa, &amp;elems_node);\n</code></pre></div>\n<p>Results in a very similar error:</p>\n<div class=\"codehilite\"><pre><span></span><code>src/check/canonicalize/IR.zig:286:55: error: expected type &#39;collections.safe_list.SafeMultiList(check.canonicalize.IR.When).Idx&#39;, found &#39;collections.safe_list.SafeList(base.ModuleImport).Idx&#39;\n                    const e = ir.exprs_at_regions.get(elem);\n                                                      ^~~~\n</code></pre></div>",
        "id": 510525822,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1743978169
    },
    {
        "content": "<p>Ok yeah, found the issue. Zig is indeed giving error messages that involve incorrect types vs what it's actually using internally.</p>",
        "id": 510534604,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1743985669
    },
    {
        "content": "<p>Hey is there a place for open needed contributions for the zig rewrite so I don’t step on anyone’s toes by doing something they’re already doing?</p>",
        "id": 511173602,
        "sender_full_name": "Wizard ish",
        "timestamp": 1744205352
    },
    {
        "content": "<p>Feel free to take anything without an emoji from <a href=\"https://github.com/roc-lang/roc/blob/main/src/README.md\">here</a>. <span class=\"user-mention\" data-user-id=\"489294\">@Agus Zubiaga</span> was really busy with work so perhaps you can try finishing <a href=\"https://github.com/roc-lang/roc/pull/7634\">https://github.com/roc-lang/roc/pull/7634</a> ?</p>",
        "id": 511177897,
        "sender_full_name": "Anton",
        "timestamp": 1744206333
    },
    {
        "content": "<p>Sure, so long as he dosent mind I’ll copy the pr and start work on it</p>",
        "id": 511196422,
        "sender_full_name": "Wizard ish",
        "timestamp": 1744210593
    },
    {
        "content": "<p>i dont know how i would get by without git guis, ive started work on the pr</p>",
        "id": 511246844,
        "sender_full_name": "Wizard ish",
        "timestamp": 1744226254
    },
    {
        "content": "<p>are certain of the values in <a href=\"https://github.com/roc-lang/roc/blob/main/src/base/module_work.zig\">https://github.com/roc-lang/roc/blob/main/src/base/module_work.zig</a> not supposed to be generic with Work and instead specific with can.IR?</p>",
        "id": 511268181,
        "sender_full_name": "Wizard ish",
        "timestamp": 1744235478
    },
    {
        "content": "<p>Should be generic if it’s in base</p>",
        "id": 511273304,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744238170
    },
    {
        "content": "<p>is it even used?</p>",
        "id": 511274493,
        "sender_full_name": "Wizard ish",
        "timestamp": 1744238736
    },
    {
        "content": "<p>also theres an error in the good for it (unless im just missing something here) </p>\n<div class=\"codehilite\"><pre><span></span><code>src/base/module_work.zig:92:43: error: expected type &#39;mem.Allocator&#39;, found pointer\n                        .work = Work.init(&amp;can_irs.getWork(work_idx).env),\n</code></pre></div>",
        "id": 511274594,
        "sender_full_name": "Wizard ish",
        "timestamp": 1744238787
    },
    {
        "content": "<p>Zig won't compiler or test anything it doesn't have to</p>",
        "id": 511275397,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744239178
    },
    {
        "content": "<p>It will tree shake to remove code before compiling</p>",
        "id": 511275458,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744239213
    },
    {
        "content": "<p>So unused code (like that written during the build out process) can easily become stale</p>",
        "id": 511275560,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744239268
    },
    {
        "content": "<p>ok, yeah zig's compiler is too smart :)</p>",
        "id": 511275648,
        "sender_full_name": "Wizard ish",
        "timestamp": 1744239327
    },
    {
        "content": "<p>Compiles faster, but means a lot of stuff is totally unchecked</p>",
        "id": 511276314,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744239659
    },
    {
        "content": "<p>Finally have my Mac Mini on Linux (Fedora 41 w/ Gnome), and it is ready for Roc development!</p>",
        "id": 511918823,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744559414
    },
    {
        "content": "<p>This is a machine that I'm much more likely to try out Nix on</p>",
        "id": 511918849,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744559431
    },
    {
        "content": "<p>this was obviously unnecessary, but I thought it was fun: instead of looking up whether Zig's <code>@max</code> and <code>@min</code> are branchless (I assumed so, but wanted to double-check) I asked Claude to prove one way or the other by writing a small zig program, building it, disassembling the output, checking the assembly instructions, and then quoting relevant portions of the asm to me to prove whether they were branchless</p>\n<p><a href=\"/user_uploads/22008/1yz4a6-2-OKpFz22C24ddsjX/screenshot.jpeg\">screenshot.jpeg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/1yz4a6-2-OKpFz22C24ddsjX/screenshot.jpeg\" title=\"screenshot.jpeg\"><img data-original-content-type=\"image/jpeg\" data-original-dimensions=\"2698x1410\" src=\"/user_uploads/thumbnail/22008/1yz4a6-2-OKpFz22C24ddsjX/screenshot.jpeg/840x560.webp\"></a></div>",
        "id": 511929304,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1744567542
    },
    {
        "content": "<p>And it explains how conditional select differs from a jump?</p>",
        "id": 511929425,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744567621
    },
    {
        "content": "<p>I mean a cmp then a jmp</p>",
        "id": 511929543,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744567689
    },
    {
        "content": "<p>Cool use, though still wouldn't truly prove anything. Zig could still be building the branches and llvm could just be removing them (not the case here, but difference between guarantees and happenstance).</p>",
        "id": 511929694,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744567809
    },
    {
        "content": "<p>Just thinking about the complex heuristics in compilers and what can accidentally be assumed</p>",
        "id": 511929727,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744567849
    },
    {
        "content": "<p>But really is just a brittle pattern</p>",
        "id": 511929733,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744567857
    },
    {
        "content": "<p>oh sure, but the thing I care about is whether there's branching in the output asm</p>",
        "id": 511930261,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1744568234
    },
    {
        "content": "<p>so in that sense, it's testing exactly what I want it to test! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 511930273,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1744568244
    },
    {
        "content": "<p>and then I asked it to do the same thing on a function I wrote, and it confirmed that it was not branchless (as I had suspected) - that is, in this case the <code>if</code>s were not getting compiled to <code>csel</code>s</p>",
        "id": 511930302,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1744568274
    },
    {
        "content": "<p>basically a quicker way to verify that than my usual standby of \"copy/paste as much as I need to into <a href=\"http://godbolt.org\">godbolt.org</a> and scan the assembly output myself\"</p>",
        "id": 511930460,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1744568413
    },
    {
        "content": "<p>That's fair</p>",
        "id": 511936532,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744573368
    },
    {
        "content": "<p>Just make sure it runs with optimizations</p>",
        "id": 511936551,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744573377
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> <a href=\"#narrow/channel/316715-contributing/topic/Casual.20Conversation/near/511918823\">said</a>:</p>\n<blockquote>\n<p>Finally have my Mac Mini on Linux (Fedora 41 w/ Gnome), and it is ready for Roc development!</p>\n</blockquote>\n<p>This is a kind of setup that I have not tested before, let me know if you hit any issues! We do test aarch64 linux but macs can be special <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 512020499,
        "sender_full_name": "Anton",
        "timestamp": 1744620476
    },
    {
        "content": "<p>Oh to be clear this is a 2018 Intel Mac Mini</p>",
        "id": 512035336,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744624256
    },
    {
        "content": "<p>And it runs like a dream!  The only difficulty I had was figuring out how to get the WiFi card to work - just had to find the proprietary firmware.</p>",
        "id": 512035676,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744624337
    },
    {
        "content": "<p>I use a hp laptop that runs an Ubuntu 22.04 GNU-Linux OS...</p>\n<p>I hope this works for Roc development? <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 512329069,
        "sender_full_name": "Magdiel Amor",
        "timestamp": 1744725721
    },
    {
        "content": "<p>That should work, but feel free to ask if you hit any problems</p>",
        "id": 512331462,
        "sender_full_name": "Anton",
        "timestamp": 1744726254
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"899457\">@Magdiel Amor</span> Roc is delightful on Debian 12 on my Framework laptop, and Ubuntu 22.04 is based on Debian 12, so you should have a relatively smooth developer experience!</p>",
        "id": 512638572,
        "sender_full_name": "jan kili",
        "timestamp": 1744827802
    },
    {
        "content": "<p>Sorry for the slight change in plans, but I’m going to need to take a two week hiatus from Roc development work. My workload has went from busy to insane in the past two weeks and going to ludicrous through the first week of May.</p>\n<p>I will try my best to be at the contributor meeting, but beyond that I’ll need to use my Roc time for work.</p>",
        "id": 513275340,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1745156439
    },
    {
        "content": "<p>no worries…I’m in a similar boat. Biggest launch in Zed’s history is like 3 weeks away (we have a hard deadline of launching before the RustWeek conference) and some of us are already making weekend PRs on it. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 513276698,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1745157486
    },
    {
        "content": "<p>🤞🏻 please be the Windows version, please be the Windows version 🤞🏻<span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 513538556,
        "sender_full_name": "Fábio Beirão",
        "timestamp": 1745307643
    },
    {
        "content": "<p>Hey everyone, this week I started streaming myself working. <span aria-label=\"partying face\" class=\"emoji emoji-1f973\" role=\"img\" title=\"partying face\">:partying_face:</span> Right now I'm resuming (and will continue this week during North American office hours) script writing for my upcoming Roc syntax tutorial videos, and next week I hope to resume developing my Roc/Rust-based music synthesizer. Join me any time! <a href=\"https://www.twitch.tv/kili_ilo\">https://www.twitch.tv/kili_ilo</a></p>",
        "id": 515402042,
        "sender_full_name": "jan kili",
        "timestamp": 1746048357
    },
    {
        "content": "<p>We did not have a test for <code>Tty.enable_raw_mode!({})</code> yet in basic-cli, so I made an example that uses it: snake in the terminal <span aria-label=\"snake\" class=\"emoji emoji-1f40d\" role=\"img\" title=\"snake\">:snake:</span> <br>\n<a href=\"/user_uploads/22008/q67EeO5ECVy5sUOBIHFWO3-l/screenshot_snake.png\">screenshot_snake.png</a><br>\nSource code <a href=\"https://github.com/roc-lang/basic-cli/blob/main/examples/terminal-app-snake.roc\">here</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/q67EeO5ECVy5sUOBIHFWO3-l/screenshot_snake.png\" title=\"screenshot_snake.png\"><img data-original-content-type=\"image/png\" data-original-dimensions=\"298x422\" src=\"/user_uploads/thumbnail/22008/q67EeO5ECVy5sUOBIHFWO3-l/screenshot_snake.png/840x560.webp\"></a></div>",
        "id": 521306591,
        "sender_full_name": "Anton",
        "timestamp": 1748614680
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/m7qYBMe-FuMLPn3XsaAGfvh9/My-First-Impressions-of-Gleam-mtlynch.io.jpeg.png\">My First Impressions of Gleam · mtlynch.io.jpeg.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/m7qYBMe-FuMLPn3XsaAGfvh9/My-First-Impressions-of-Gleam-mtlynch.io.jpeg.png\" title=\"My First Impressions of Gleam · mtlynch.io.jpeg.png\"><img data-original-content-type=\"image/png\" data-original-dimensions=\"1179x2374\" src=\"/user_uploads/thumbnail/22008/m7qYBMe-FuMLPn3XsaAGfvh9/My-First-Impressions-of-Gleam-mtlynch.io.jpeg.png/840x560.webp\"></a></div><p>pretty wild how all of these except the last one are now things 0.1.0 will have...should be a much smoother learning curve for beginners! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 525228208,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1750618464
    },
    {
        "content": "<p>from <a href=\"https://mtlynch.io/notes/gleam-first-impressions/\">https://mtlynch.io/notes/gleam-first-impressions/</a></p>",
        "id": 525228225,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1750618485
    },
    {
        "content": "<p>I've thought about list accessors btw...would be pretty straightforward, just <code>a[b]</code> desugars to <code>a.get(b)</code></p>",
        "id": 525228263,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1750618543
    },
    {
        "content": "<p>not sure it's worth having in the language, but the design would be pretty obvious given how <code>a + b</code> will desugar to <code>a.plus(b)</code> etc.</p>",
        "id": 525228284,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1750618592
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/PdIadecpn5tZAJdclDuCmlpa/My-First-Impressions-of-Gleam-mtlynch.io.jpeg.png\">My First Impressions of Gleam · mtlynch.io.jpeg.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/PdIadecpn5tZAJdclDuCmlpa/My-First-Impressions-of-Gleam-mtlynch.io.jpeg.png\" title=\"My First Impressions of Gleam · mtlynch.io.jpeg.png\"><img data-original-content-type=\"image/png\" data-original-dimensions=\"1179x2556\" src=\"/user_uploads/thumbnail/22008/PdIadecpn5tZAJdclDuCmlpa/My-First-Impressions-of-Gleam-mtlynch.io.jpeg.png/840x560.webp\"></a></div><p>ha! this one too</p>",
        "id": 525228964,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1750619530
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/Z1lKRAGCe-rRoWxYveEdKDi3/My-First-Impressions-of-Gleam-mtlynch.io.jpeg.png\">My First Impressions of Gleam · mtlynch.io.jpeg.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/Z1lKRAGCe-rRoWxYveEdKDi3/My-First-Impressions-of-Gleam-mtlynch.io.jpeg.png\" title=\"My First Impressions of Gleam · mtlynch.io.jpeg.png\"><img data-original-content-type=\"image/png\" data-original-dimensions=\"1179x1914\" src=\"/user_uploads/thumbnail/22008/Z1lKRAGCe-rRoWxYveEdKDi3/My-First-Impressions-of-Gleam-mtlynch.io.jpeg.png/840x560.webp\"></a></div><p>and this <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 525229029,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1750619640
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/channel/316715-contributing/topic/Casual.20Conversation/near/525228263\">said</a>:</p>\n<blockquote>\n<p>I've thought about list accessors btw...would be pretty straightforward, just <code>a[b]</code> desugars to <code>a.get(b)</code></p>\n</blockquote>\n<p>Worth a serious consideration. A lot of people probably would appreciate it.</p>",
        "id": 525232751,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1750624910
    },
    {
        "content": "<p>The one benefit I see to <code>.get</code> over accessors is that it is more obvious it could return a result. For some reason (probably just used to it), I expect brackets to not return a result, but a value or panic.<br>\nI could probably get used to the (arguably better) semantics of brackets also returning a result</p>",
        "id": 525234175,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1750627190
    },
    {
        "content": "<p>Also thinking about tuple accessors, <code>t[0]</code> is probably nicer than <code>t.0</code></p>",
        "id": 525235086,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1750628721
    },
    {
        "content": "<p>Going back to a convo about re-exporting pub types and when we used to need to put comments on all pub types: TIL that you can do:</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"k\">usingnamespace</span><span class=\"w\"> </span><span class=\"nb\">@import</span><span class=\"p\">(</span><span class=\"s\">\"./types/types.zig\"</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>To re-export all of a sub-modules types!</p>",
        "id": 525235457,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1750629134
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/channel/316715-contributing/topic/Casual.20Conversation/near/525235086\">said</a>:</p>\n<blockquote>\n<p>Also thinking about tuple accessors, <code>t[0]</code> is probably nicer than <code>t.0</code></p>\n</blockquote>\n<p>it's not the same bc you can put variables in there - e.g. <code>tuple[x]</code></p>",
        "id": 525236519,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1750630674
    },
    {
        "content": "<p>a downside of brackets for familiarity is that although <code>x = list[y]</code> can work about the way you'd expect (give or take the <code>Result</code>), but <code>list[x] = y</code> wouldn't work at all for multiple reasons</p>",
        "id": 525236586,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1750630768
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/316715-contributing/topic/Casual.20Conversation/near/525235086\">said</a>:</p>\n<blockquote>\n<p>Also thinking about tuple accessors, <code>t[0]</code> is probably nicer than <code>t.0</code></p>\n</blockquote>\n<p>Hmmm....I think that has a problem of being a different signature. <code>t.0</code> would be compile time known and guaranteed in bounds. <code>t[0]</code> would also allow for <code>t[x]</code> and might be out of bounds. That said, I think we should support that for homogeneous tuples (essentially just treat them as array types).</p>",
        "id": 525236733,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1750630979
    },
    {
        "content": "<p>We could allow <code>list_[x] = y</code> to work though. Just require reassignment.</p>",
        "id": 525236784,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1750631048
    },
    {
        "content": "<p>For Records... I've been pulling together a number of snapshots to exercise different use cases. I think I should introduce those in a separate PR even though they aren't implemented yet. </p>\n<p>I'd like someone (maybe <span class=\"user-mention\" data-user-id=\"781658\">@Anthony Bullard</span> or <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> ) to review and confirm I've got the syntax and describe behaviour correctly before working on \"fixing\" anything that isn't working in our current implementation.</p>\n<p>Hopefully I'll have something to share soon.</p>",
        "id": 525806661,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1750897256
    },
    {
        "content": "<p>sounds good!</p>",
        "id": 525806730,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750897335
    },
    {
        "content": "<p>i'm currently refactoring a bunch of stuff having to do with numbers in Can</p>",
        "id": 525806745,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750897354
    },
    {
        "content": "<p>Are you working from main? Richard just merged his PR</p>",
        "id": 525806763,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1750897371
    },
    {
        "content": "<p>yeah <span class=\"user-mention\" data-user-id=\"781658\">@Anthony Bullard</span> make sure to take a look at <code>main</code> - a bunch of canonical number changes just landed!</p>",
        "id": 525807394,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1750898020
    },
    {
        "content": "<p>oh shoot!  i had no idea you were working on that</p>",
        "id": 525807410,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750898045
    },
    {
        "content": "<p>OK, any change you might be able to look at these snapshot examples <a href=\"https://github.com/roc-lang/roc/pull/7874\">https://github.com/roc-lang/roc/pull/7874</a></p>",
        "id": 525808314,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1750898872
    },
    {
        "content": "<p>yes in a bit</p>",
        "id": 525808430,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750898987
    },
    {
        "content": "<p>my number changes might be able to be reused in a later stage but i doubt it</p>",
        "id": 525808459,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750899015
    },
    {
        "content": "<p>i approved but you have a lot of spelling mistakes</p>",
        "id": 525815873,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750906217
    },
    {
        "content": "<p>fields is uniformly spelled fileds</p>",
        "id": 525815886,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750906230
    },
    {
        "content": "<p>This is what happens when your fingers don't obey your brain</p>",
        "id": 525816261,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1750906659
    },
    {
        "content": "<p>Should the Ident interner be de-duplicating strings? so if I \"insert\" two identical strings <code>name</code> and <code>name</code> I get the same Idx back?</p>",
        "id": 525818118,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1750908357
    },
    {
        "content": "<p>In Can there a quite a few places where we are comparing \"strings\", extracting their idents from the interner by idx then comparing bytes. I thought the idea was we intern them (paying the price once) and then we can use thier Idx's to compare very cheaply</p>",
        "id": 525818238,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1750908480
    },
    {
        "content": "<p>Update on this for anyone interested. </p>\n<blockquote>\n<p>The problem is that <strong>each occurrence of an identifier gets its own <code>Ident.Idx</code> value</strong>, even if it has the same text content. The interning system deduplicates the string storage, but still creates separate <code>Ident.Idx</code> values for each occurrence because they have different source locations.</p>\n</blockquote>\n<blockquote>\n<p>So when we're doing scope lookups, we need to compare by text content (using <code>identsHaveSameText</code>) rather than by exact <code>Ident.Idx</code> equality, because the same variable name used in different places in the code will have different <code>Ident.Idx</code> values.</p>\n</blockquote>",
        "id": 525819095,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1750909259
    },
    {
        "content": "<p>Note. We should still never need to compare strings</p>",
        "id": 525822448,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1750912133
    },
    {
        "content": "<p>Once you know the offset into the underlying byte storage you know if they match or not</p>",
        "id": 525822476,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1750912152
    },
    {
        "content": "<p>So it should just be a pointer/offset comparison and not a full string comparison</p>",
        "id": 525822503,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1750912169
    },
    {
        "content": "<p>Yeah the helper is called <code>identsHaveSameText</code> and it does that for us.</p>",
        "id": 525822579,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1750912217
    },
    {
        "content": "<p>i think Martin Odersky has been following you <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> </p>\n<p><a href=\"/user_uploads/22008/eCtYV4a0JNSfJvc_DCpjzUpX/image_3B1C51AF-9251-49A2-AD1C-FE077EFB95C1_1750937783.png\">image_3B1C51AF-9251-49A2-AD1C-FE077EFB95C1_1750937783.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/eCtYV4a0JNSfJvc_DCpjzUpX/image_3B1C51AF-9251-49A2-AD1C-FE077EFB95C1_1750937783.png\" title=\"image_3B1C51AF-9251-49A2-AD1C-FE077EFB95C1_1750937783.png\"><img data-original-content-type=\"image/png\" data-original-dimensions=\"2796x1290\" src=\"/user_uploads/thumbnail/22008/eCtYV4a0JNSfJvc_DCpjzUpX/image_3B1C51AF-9251-49A2-AD1C-FE077EFB95C1_1750937783.png/840x560.webp\"></a></div>",
        "id": 525883598,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750937789
    },
    {
        "content": "<p>A very quick way to get a backtrace when you hit a segfault:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ gdb --batch --ex run --ex bt --args ./zig-out/bin/roc check myApp.roc\n</code></pre></div>",
        "id": 528449185,
        "sender_full_name": "Anton",
        "timestamp": 1752316937
    },
    {
        "content": "<p>What does <code>--batch</code> do there?</p>",
        "id": 528468270,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752336185
    },
    {
        "content": "<p>It's for providing commands in a one liner; so you don't have to do <code>run</code> and <code>bt</code> separately in the gdb console.</p>",
        "id": 528468858,
        "sender_full_name": "Anton",
        "timestamp": 1752336897
    },
    {
        "content": "<p>Ah, you need batch to use ex?</p>",
        "id": 528468971,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752336991
    },
    {
        "content": "<p>No I was wrong, you can do it with just <code>--ex</code> if you want but then you're still in interactive mode (like paging for the backtrace). Batch is non-interactive, just regular output.</p>",
        "id": 528470384,
        "sender_full_name": "Anton",
        "timestamp": 1752338479
    }
]