[
    {
        "content": "<p>I'm just wondering if anyone would like to help with the work to upgrade to Purity Inference? My understanding is that Agus has made the changes backwards compatible, so this isn't an urgent or blocking thing, but helpful to find any issues.</p>\n<p>I've been having fun working on it, and thought others might like to get involved too. I'm happy to help anyone if they would like to learn more.</p>\n<p>I've started the upgrade for basic-cli here <a href=\"https://github.com/roc-lang/basic-cli/pull/257\">https://github.com/roc-lang/basic-cli/pull/257</a> and done all the <code>platform/*.roc</code> files. Next up would be upgrading the <code>examples/*.roc</code> files and getting those all happy with <code>roc check</code>.</p>\n<p>Then we need to update the host <code>roc_fx_*</code> type signatures, and update the call from the host into roc (which is now so much simpler with purity inference).</p>\n<p>I've completely upgraded roc-ray to purity inference, so we have that as an example if we need. You can see the code and test it out if you want here <a href=\"https://github.com/lukewilliamboswell/roc-ray/pull/38\">https://github.com/lukewilliamboswell/roc-ray/pull/38</a></p>",
        "id": 478391839,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729646019
    },
    {
        "content": "<p>I'm your guy</p>",
        "id": 478401706,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1729652734
    },
    {
        "content": "<p>Do you have anything in particular that you already want to do, or is it just the stuff you listed?</p>",
        "id": 478401985,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1729652800
    },
    {
        "content": "<p>Yeah just the stuff I listed. <span aria-label=\"sunglasses\" class=\"emoji emoji-1f60e\" role=\"img\" title=\"sunglasses\">:sunglasses:</span></p>",
        "id": 478403670,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729653475
    },
    {
        "content": "<p>Sounds good. I probably won't have <em>that</em> much time for this, so we'd be happy to have any volunteers for this!</p>",
        "id": 478403934,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1729653658
    },
    {
        "content": "<p>Could you list the things necessary to update a platform?</p>\n<ul>\n<li>Remove Task</li>\n<li>Change the signature functions, that call into the host. Add an <code>!</code> and change <code>-&gt;</code> to <code>=&gt;</code>. </li>\n</ul>\n<p>How did the interface between the platform and the host change? You write, that <code>roc_fx_*</code> has to be updated. In which way?</p>",
        "id": 478419178,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1729663803
    },
    {
        "content": "<p>The main difference is that effects that can’t fail would return their values directly instead of being wrapped in <code>Result</code>, so you need to adjust the host to reflect that. If the effectful function returns <code>{}</code>, the host side would just be <code>void</code>. The name of the <code>roc_fx_*</code> function remains unchanged. The <code>!</code> suffix that would appear in the hosted function is dropped.</p>",
        "id": 478490280,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1729688388
    },
    {
        "content": "<p>The other difference is that when you are running <code>Task</code> in the host today (from the entry point), you have to unwrap the closure inside and call that, but now you’d get effectful functions instead that you can run directly</p>",
        "id": 478491013,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1729688574
    },
    {
        "content": "<p>You can see these changes in Luke’s PR: <a href=\"https://github.com/lukewilliamboswell/roc-ray/pull/38/files#diff-fb36a3f95902a5f802b4bedd10bbe149ef6acb768f7815bf10f15ecbeb486595\">https://github.com/lukewilliamboswell/roc-ray/pull/38/files#diff-fb36a3f95902a5f802b4bedd10bbe149ef6acb768f7815bf10f15ecbeb486595</a></p>",
        "id": 478491112,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1729688602
    },
    {
        "content": "<p>That’s it for the host side</p>",
        "id": 478491350,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1729688656
    },
    {
        "content": "<p>As Luke said, the compiler will be backwards compatible with <code>Task</code> for a while. It detects what fx mode to use based on whether the platform’s <code>hosted</code> module exposes effectful functions or <code>Task</code>.</p>",
        "id": 478491788,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1729688774
    },
    {
        "content": "<p>As a note, the changes to the platform API are basically going back to before we had task as builtin. For example, I updated wasm4 from before task as builtin directly to purity inference. The host basically didn't change. The one caveat is that I stopped returning a record of lambdas to the host and instead returned two functions cause that is simply nicer to use from the host.</p>",
        "id": 478519777,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729696241
    },
    {
        "content": "<p>So is it possible now to export more than one function? That is nice.</p>",
        "id": 478585620,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1729718547
    },
    {
        "content": "<p>One thing I'd add is that purity inference hasn't landed in roc main yet. So the first thing I did was update the nix flake to point at the branch.</p>\n<div class=\"codehilite\" data-code-language=\"Nix\"><pre><span></span><code><span class=\"ss\">inputs</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n     roc<span class=\"o\">.</span><span class=\"ss\">url</span> <span class=\"o\">=</span> <span class=\"s2\">\"github:roc-lang/roc?ref=purity-inference\"</span><span class=\"p\">;</span>\n     nixpkgs<span class=\"o\">.</span><span class=\"ss\">url</span> <span class=\"o\">=</span> <span class=\"s2\">\"github:nixos/nixpkgs\"</span><span class=\"p\">;</span>\n   <span class=\"p\">};</span>\n</code></pre></div>\n<p>Then I basically started updating the type annotations and just followed the compiler errors all the way through until I was completed (for the platform side). <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 478591513,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729721410
    },
    {
        "content": "<blockquote>\n<p>So is it possible now to export more than one function? That is nice.</p>\n</blockquote>\n<p>yeah, this is in nightly currently. Don't even need purity inference for it. I added it a few weeks back</p>",
        "id": 478596198,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729724182
    },
    {
        "content": "<p>Makes a lot of apis a lot simpler in the platform. Anything to get away from dealing with closures</p>",
        "id": 478596213,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729724207
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"489294\">@Agus Zubiaga</span> one thing to double check that came up in <a class=\"stream-topic\" data-stream-id=\"395097\" href=\"/#narrow/channel/395097-compiler-development/topic/Early.20return.20and.20correct.20refcounting\">#compiler development &gt; Early return and correct refcounting</a>. We need to make sure that we don't reorder effectful function calls. I assume they all get toposorted with the pure functions currently. Unlike task where the await lambas enforced order, purity inference would have nothing to enforce order.</p>",
        "id": 478774251,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729793862
    },
    {
        "content": "<p>Yeah, just tested something really basic in roc-wasm4. This will reorder, which could be really problematic for side effecting ops:</p>\n<div class=\"codehilite\"><pre><span></span><code>    i =\n        W4.trace! &quot;this should print first&quot;\n        j\n\n    j =\n        W4.trace! &quot;this should print second&quot;\n        1\n</code></pre></div>\n<p>outputs:</p>\n<div class=\"codehilite\"><pre><span></span><code>this should print second\nthis should print first\n</code></pre></div>",
        "id": 478777643,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729795266
    },
    {
        "content": "<p>I think this, while being problematic, should still be outside of the purity inference PR</p>",
        "id": 478778002,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1729795406
    },
    {
        "content": "<p>We should make a separate PR that:</p>\n<ul>\n<li>Stops reordering defs outside of top-level functions</li>\n<li>Gives more helpful error messages in light of this where efficiently feasible</li>\n</ul>",
        "id": 478778214,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1729795493
    },
    {
        "content": "<p>By \"efficiently feasible\", I mean that even though errors saying \"you defined y after x so you can't use y in x\" would be helpful, I'm not sure if they require creation of a dependency graph, and I expect standard liveness checking would be a good bit more efficient</p>",
        "id": 478778955,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1729795774
    },
    {
        "content": "<p>I think we still need the same dependency graph to check for things like cyclic definitions</p>",
        "id": 478779438,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1729795947
    },
    {
        "content": "<p>we just need to not use it to reorder as many things as we are today</p>",
        "id": 478779463,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1729795956
    },
    {
        "content": "<p>Oh, great catch! I forgot we did this</p>",
        "id": 478779576,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1729796011
    },
    {
        "content": "<p>So we would reorder unless the def calls an effectful function, in which case we would report an error?</p>",
        "id": 478779958,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1729796167
    },
    {
        "content": "<p>Or do we want to always require that defs are defined in order unless recursive?</p>",
        "id": 478780035,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1729796203
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 478780077,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1729796225
    },
    {
        "content": "<p>Current plan is that everything is in order except for top level definitions.</p>",
        "id": 478780542,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729796394
    },
    {
        "content": "<p>Just makes the model simple</p>",
        "id": 478780638,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729796414
    },
    {
        "content": "<p>Oh ok. Except top-level and recursive functions, right?</p>",
        "id": 478780789,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1729796470
    },
    {
        "content": "<p>I think we decided to disallow inline recursive functions</p>",
        "id": 478780828,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1729796485
    },
    {
        "content": "<p>I’ll read the other thread</p>",
        "id": 478780843,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1729796491
    },
    {
        "content": "<p>just be like if you need a recursive function, make it top-level</p>",
        "id": 478780845,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1729796492
    },
    {
        "content": "<p>comes up super rarely (if ever) anyway haha</p>",
        "id": 478780892,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1729796514
    },
    {
        "content": "<p>Ok yeah, that’s really simple <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 478780927,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1729796523
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> are you planning to work on this change or should I?</p>",
        "id": 478781336,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1729796686
    },
    {
        "content": "<p>I'm happy to work on it, but not planning on it</p>",
        "id": 478781564,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1729796780
    },
    {
        "content": "<p>If you've got time, feel free!</p>",
        "id": 478781586,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1729796789
    },
    {
        "content": "<p>If you don't pick it up, I'll do it once I finish return</p>",
        "id": 478781717,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1729796840
    },
    {
        "content": "<p>As you point out, it's easy for either of us to do <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 478781736,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1729796851
    },
    {
        "content": "<p>Cool! Let’s just make sure we tell the other if we start it <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 478781856,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1729796885
    },
    {
        "content": "<p>haha sure thing</p>",
        "id": 478781886,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1729796899
    },
    {
        "content": "<blockquote>\n<p>just be like if you need a recursive function, make it top-level</p>\n</blockquote>\n<p>I assume a self recursive function should work fine even if nested? It is just mutually recursive functions that will be blocked?</p>",
        "id": 478786439,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729798760
    },
    {
        "content": "<p>right, yeah</p>",
        "id": 478786812,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1729798912
    },
    {
        "content": "<p>I've been working with Luke to try to update roc-platform-template-rust, and I've been hitting confusing setup issues and lower-level-than-expected errors. Is that work the best way for a higher-level programmer like me to help purity-inference along, or is there another way I can help it get into main / usable?</p>",
        "id": 481153103,
        "sender_full_name": "jan kili",
        "timestamp": 1730995794
    },
    {
        "content": "<p>Can you post an example? Do you mean you found bugs in the code generation or confusing error messages?</p>",
        "id": 481173956,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1731002726
    },
    {
        "content": "<p>I know getting the memory layouts right on the platform side is tricky, but I think that’s orthogonal to purity inference itself</p>",
        "id": 481174298,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1731002875
    },
    {
        "content": "<p>Re getting on main, I’m planning to merge shortly but some tests seem to be failing on Linux despite the programs they run working fine outside of tests</p>",
        "id": 481174995,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1731003163
    },
    {
        "content": "<p>It seems to be related to building a platform multiple times in parallel. I tried to fix it by building it only once and then using <code>—prebuilt-platform</code> but that didn’t help. I’ll take another look tonight.</p>",
        "id": 481175359,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1731003305
    },
    {
        "content": "<ol>\n<li>I'm getting confused between building PI roc locally and referencing PI roc via <code>roc_std</code> in <code>roc_host/</code>, which seems like a simple confusion that compounds everything else but also points to my general ignorance as to how packages are built</li>\n<li><code>cargo build</code> froze with no error message here: <a href=\"https://github.com/lukewilliamboswell/roc-platform-template-rust/pull/2#issue-2636489209\">https://github.com/lukewilliamboswell/roc-platform-template-rust/pull/2#issue-2636489209</a></li>\n<li>updating FFI seems required, which is deeper than I want to go <a href=\"https://github.com/lukewilliamboswell/roc-platform-template-rust/pull/2#issuecomment-2460978387\">https://github.com/lukewilliamboswell/roc-platform-template-rust/pull/2#issuecomment-2460978387</a></li>\n</ol>",
        "id": 481177184,
        "sender_full_name": "jan kili",
        "timestamp": 1731004070
    },
    {
        "content": "<p>Stepping back a bit, I'm getting frustrated because I've been wanting to write a new Roc app by extending a basic platform, but I keep getting blocked by lower-level things like how platforms work behind the senes. It feels like we're in an in-between time where I shouldn't use main and I can't use purity-inference, but maybe I just need to start with main &amp; basic-cli instead of a template?</p>",
        "id": 481177968,
        "sender_full_name": "jan kili",
        "timestamp": 1731004328
    },
    {
        "content": "<p>Perhaps I've oversold my capacity to assist, since I'm only poking at this for like 30 minutes per day and don't feel like learning much that is tangential to my goals.</p>",
        "id": 481178270,
        "sender_full_name": "jan kili",
        "timestamp": 1731004449
    },
    {
        "content": "<p>Note that we don’t have to migrate platforms to get the purity inference PR merged since it’s backwards compatible with <code>Task</code>-based platforms.</p>",
        "id": 481178692,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1731004619
    },
    {
        "content": "<p>You can’t mix and match in an app, but we can incrementally migrate platforms after merging</p>",
        "id": 481178888,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1731004685
    },
    {
        "content": "<p>I don’t have a lot of free time now, so my focus is on getting the PR merged, but I’m happy to help with any platform efforts after</p>",
        "id": 481179014,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1731004741
    },
    {
        "content": "<p>Sounds like maybe I should just use the nightly and build on basic-cli as-is!</p>",
        "id": 481180321,
        "sender_full_name": "jan kili",
        "timestamp": 1731005244
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"489294\">Agus Zubiaga</span> <a href=\"#narrow/channel/316715-contributing/topic/Help.20upgrade.2Ftest.20purity.20inference/near/481174995\">said</a>:</p>\n<blockquote>\n<p>Re getting on main, I’m planning to merge shortly but some tests seem to be failing on Linux despite the programs they run working fine outside of tests</p>\n</blockquote>\n<p>Can we please ignore them. We've done a big uplift in the rebuild host PR and we will merge them in once purity inference lands.</p>",
        "id": 481189978,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731009325
    },
    {
        "content": "<p>Yeah, we could. It just occurred to me that I was testing the program on Linux arm while the tests run on x86. I’ll check that first just in case.</p>",
        "id": 481192601,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1731010331
    },
    {
        "content": "<p>I'm trying out the purity inference branch with the Zig platform I'm working on. Really pleaseant experience so far, with great error messages.</p>\n<p>I ran into a corner case. Suppose I have the following code:</p>\n<div class=\"codehilite\"><pre><span></span><code>foo : {} =&gt; U8\n\nexpect foo {} == 25\n</code></pre></div>\n<p>I get this warning:</p>\n<div class=\"codehilite\"><pre><span></span><code>── EFFECT IN TOP-LEVEL in platform/PagesInternal.roc ───────────────────────────\n\nThis call to PagesInternal.foo might produce an effect:\n\n12│  expect foo {} == 25\n            ^^^^^^\n</code></pre></div>\n<p>This is a weird example, in the real one that I simplified to this I have a higher-level function that supports running effectfully or not depending on the function passed in, and I have a couple of tests where I pass in pure functions. I don't think the warning should show under those circumstances (the test pass).</p>\n<p>Also, I don't think code in an <code>expect</code> is considered top-level, right?</p>",
        "id": 481210216,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1731018608
    },
    {
        "content": "<p>To my understanding, we have avoided support for effect polymorphism, meaning that a function that takes in either a pure or effectful function will \"assume\" it takes an effectful function</p>",
        "id": 481210648,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1731018853
    },
    {
        "content": "<p>For us to support that would entail exposing <code>fx</code> variables in user code, which is messier than we want for now</p>",
        "id": 481210690,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1731018884
    },
    {
        "content": "<p>Though in the future we may realize we get strong benefit from effect polymorphism, so the door isn't fully closed</p>",
        "id": 481210749,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1731018913
    },
    {
        "content": "<p>All in all, I'd say this is expected behavior</p>",
        "id": 481210764,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1731018921
    },
    {
        "content": "<p>Yeah, if you managed to write an effect polymorphic function, I’d be really interested to see it because that’d be considered a bug <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 481210820,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1731018947
    },
    {
        "content": "<p>And yes, the <code>expect</code>at the top-level considers its body as part of the \"top-level\" code</p>",
        "id": 481210948,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1731019006
    },
    {
        "content": "<p>we probably need a specific error message for effects in expects</p>",
        "id": 481210968,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1731019020
    },
    {
        "content": "<p>“top-level” might be confusing in that context</p>",
        "id": 481210991,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1731019038
    },
    {
        "content": "<p>Eventually the plan is to remove <code>expect-fx</code> and just have <code>expect \\get!, set! -&gt; ...</code>, so we can probably improve the error messages then</p>",
        "id": 481211042,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1731019081
    },
    {
        "content": "<p>But it would be an improvement to add that now, too</p>",
        "id": 481211098,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1731019095
    },
    {
        "content": "<p>Yeah, that’ll come later</p>",
        "id": 481211397,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1731019289
    },
    {
        "content": "<p>\"add that now\" meaning the top-level expect with effects message</p>",
        "id": 481211474,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1731019323
    },
    {
        "content": "<p>Oh, I think I know where the confusion might come from. You are allowed to pass a pure function to something that expects an effectful function. However, the higher order function is still considered effectful.</p>",
        "id": 481212070,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1731019697
    },
    {
        "content": "<p>You get warnings for things that don’t make sense like discarding the result of a pure function because that’s dead code. But otherwise, pure unifies with effectful.</p>",
        "id": 481212389,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1731019937
    },
    {
        "content": "<p>and not the other way around, of course</p>",
        "id": 481212456,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1731020006
    },
    {
        "content": "<p>Ah that makes sense, thanks.</p>\n<p>I ran into something else. I've some functions that construct some build steps. Basically they take effectful functions and store them in a record without running them, and so are not effectul themselves (the compiler agrees). The record field needs a <code>!</code>, so far so good. However, in some places I'm initializing that record with a pure function and I get a warning</p>\n<div class=\"codehilite\"><pre><span></span><code>Config : {\n    fn! : U8 =&gt; U8,\n}\n\ninit : Config\ninit = {\n    fn!: \\x -&gt; x,\n}\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>── UNNECESSARY EXCLAMATION in platform/PagesInternal.roc ───────────────────────\n\nThis field&#39;s value is a pure function, but its name suggests\notherwise:\n\n20│      fn!: \\x -&gt; x,\n         ^^^^^^^^^^^^\n</code></pre></div>\n<p>I can't take out the <code>!</code> as the error suggests, because that would break the contract and constrain <code>fn</code> to be effectful everywhere.</p>",
        "id": 481212543,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1731020049
    },
    {
        "content": "<p>I managed to get rid of those earlier warnings I mentioned. I just had to manually created a pure version of the \"polymorphic\" function, use that version in tests, pull the common pure logic between the two (almost the entire function) into a helper. Pretty neat <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span>.</p>",
        "id": 481213534,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1731020660
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"477725\">Jasper Woudenberg</span> <a href=\"#narrow/channel/316715-contributing/topic/Help.20upgrade.2Ftest.20purity.20inference/near/481212543\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>── UNNECESSARY EXCLAMATION in platform/PagesInternal.roc ───────────────────────\n\nThis field&#39;s value is a pure function, but its name suggests\notherwise:\n\n20│      fn!: \\x -&gt; x,\n         ^^^^^^^^^^^^\n</code></pre></div>\n<p>I can't take out the <code>!</code> as the error suggests, because that would break the contract and constrain <code>fn</code> to be effectful everywhere.</p>\n</blockquote>\n<p>Oh, that's a really good catch! I guess we only want this warning for record annotations, and destructuring, but not in record literals specifically.</p>",
        "id": 481218379,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1731023760
    },
    {
        "content": "<p>we do want the opposite (MISSING EXCLAMATION) for record literals</p>",
        "id": 481218934,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1731024065
    },
    {
        "content": "<p>I think I found another strange purity-inference related bug while upgrading roc-wasm4</p>\n<p><a href=\"https://github.com/lukewilliamboswell/roc-wasm4/pull/32#issuecomment-2481949480\">https://github.com/lukewilliamboswell/roc-wasm4/pull/32#issuecomment-2481949480</a></p>\n<p>I'm having trouble finding the source of this.</p>",
        "id": 482929237,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731905713
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>$ roc build ./examples/sound.roc --target=wasm32 --no-link\nthread &#39;main&#39; panicked at crates/compiler/mono/src/reset_reuse.rs:1269:42:\nExpected symbol to have a layout. It should have been inserted in the environment already.\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>",
        "id": 482929255,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731905725
    },
    {
        "content": "<p>I see that all first-party platforms use pre-purity-inference Task-ful syntax. Do we/you want to intentionally defer all purity-inference update work until after AoC for stability and to prioritize responding to newcomer issues? Or do we/you hope to push <code>basic-*</code> across the finish line by next week?</p>",
        "id": 483800791,
        "sender_full_name": "jan kili",
        "timestamp": 1732228301
    },
    {
        "content": "<p>Just waiting on a review for <a href=\"https://github.com/roc-lang/roc/pull/7204\">https://github.com/roc-lang/roc/pull/7204</a></p>\n<p>If we can merge that and get a new nightly... it's a clear path to a new purity-inference basic-cli</p>",
        "id": 483801194,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732228456
    },
    {
        "content": "<p>So could be on the streets early next week... folks can always use an older Task-based version of basic-cli if there are any issues with the new purity inference one, so we can keep it in pre-release until it's had a few more people test it out</p>",
        "id": 483801463,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732228570
    },
    {
        "content": "<p>In all but the most optimistic forecasts, does that mean we should prepare to keep post-purity-inference first-party platforms in pre-release mode until after AoC?</p>",
        "id": 483802002,
        "sender_full_name": "jan kili",
        "timestamp": 1732228814
    },
    {
        "content": "<p>If not, then the tutorial and documentation seem unready to assist newcomers with that, conceptually or snippetly. <a href=\"https://www.roc-lang.org/tutorial#tasks\">https://www.roc-lang.org/tutorial#tasks</a></p>",
        "id": 483802339,
        "sender_full_name": "jan kili",
        "timestamp": 1732228987
    },
    {
        "content": "<p>Basically, I'm expecting someone to announce a month-long AoC freeze on breaking changes to @roc-lang, for UX.</p>",
        "id": 483803223,
        "sender_full_name": "jan kili",
        "timestamp": 1732229419
    },
    {
        "content": "<p>I'm hoping we can switch over to the release management process we've discuss/agreed on</p>\n<p><a href=\"#narrow/channel/304641-ideas/topic/roc.20release.20management/near/478608428\">https://roc.zulipchat.com/#narrow/channel/304641-ideas/topic/roc.20release.20management/near/478608428</a></p>\n<p>Basically, we can make breaking changes to roc but the supported platforms and recommended version for everything stays stable/relibable.</p>",
        "id": 483803483,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732229526
    },
    {
        "content": "<p>Does anyone want to have a crack at updating the Tutorial for purity inference? Not a major uplift, just removing Task</p>",
        "id": 483828161,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732244921
    },
    {
        "content": "<p>Shouldn't such an update also add explainers for <code>!</code>, <code>=&gt;</code>, and <code>try</code>?</p>",
        "id": 483843580,
        "sender_full_name": "jan kili",
        "timestamp": 1732256033
    },
    {
        "content": "<p>Sounds like you're halfway there <span class=\"user-mention\" data-user-id=\"462053\">@JanCVanB</span> <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 483844166,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732256420
    },
    {
        "content": "<p>Hehe but I still don't fully understand where Tasks went so I'm hesitant to explain anything!</p>",
        "id": 483844348,
        "sender_full_name": "jan kili",
        "timestamp": 1732256548
    },
    {
        "content": "<p>(Side note, the tutorial and linked examples still use <code>?</code>, which seems maybe deprecated/removed?)</p>",
        "id": 483844438,
        "sender_full_name": "jan kili",
        "timestamp": 1732256613
    },
    {
        "content": "<p>I'm happy to give it a try tomorrow, partly as an exercise in outlining my own confusions!</p>",
        "id": 483844669,
        "sender_full_name": "jan kili",
        "timestamp": 1732256762
    },
    {
        "content": "<p>With such inspiring sentences as \"I infer that <code>try</code> bubbles any downstream <code>Err</code> tags up all the way to the platform, though you can no longer see the tags in function signature types... hmm that doesn't seem right...\"</p>\n<p>Edit: yay I'm wrong on the \"no longer see\" part</p>",
        "id": 483844899,
        "sender_full_name": "jan kili",
        "timestamp": 1732256913
    },
    {
        "content": "<p>Getting started is the hard part <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> I'm sure we can help to find the right words. It would be very helpful to sit back and think about the new things (syntax etc) and map out what is missing or needs adding. </p>\n<p>I'm not thinking we should add/update everything, but we could do a pass or two and polish it a little so newcomers can still follow along and have a good experience.</p>",
        "id": 483844903,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732256916
    },
    {
        "content": "<p>As a returning user, I'm concerned that in the last month or two Roc has frontloaded its complexity (slightly steepened its learning curve to greatly improve code readability) without yet paying the cost in documentation or newcomer pushback... right before AoC.</p>",
        "id": 483845534,
        "sender_full_name": "jan kili",
        "timestamp": 1732257350
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"462053\">JanCVanB</span> <a href=\"#narrow/stream/316715-contributing/topic/Help.20upgrade.2Ftest.20purity.20inference/near/483844348\">said</a>:</p>\n<blockquote>\n<p>Hehe but I still don't fully understand where Tasks went so I'm hesitant to explain anything!</p>\n</blockquote>\n<p>Tasks are still functional, we just decide whether to use the old style of Tasks or the new style of purity inference based on the following three rules:</p>\n<ul>\n<li>if the platform requires something with an exclam at the end</li>\n<li>if an hosted module exposes something with an exclam</li>\n<li>if the module is builtin</li>\n</ul>\n<p><a href=\"https://github.com/roc-lang/roc/blob/22423ca98bef41e2f55ae54e11c632bd0610c241/crates/compiler/load_internal/src/file.rs#L2262\">https://github.com/roc-lang/roc/blob/22423ca98bef41e2f55ae54e11c632bd0610c241/crates/compiler/load_internal/src/file.rs#L2262</a></p>",
        "id": 483845834,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1732257510
    },
    {
        "content": "<p>? is still present, but will be removed at least for now, since it desugars with <code>Result.try</code> instead of the <code>try</code> keyword with early returns</p>",
        "id": 483845919,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1732257590
    },
    {
        "content": "<p>So it's still in the language, but in a month or so it's probably gone. Basically, whenever we remove tasks</p>",
        "id": 483845990,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1732257615
    },
    {
        "content": "<p>True, but if in the next week we ensure that every AoC-friendly platform requires <code>main!</code>, then to a newcomer the concept of tasks is fully implicit and the tutorial should never capitalize the word.</p>",
        "id": 483846148,
        "sender_full_name": "jan kili",
        "timestamp": 1732257729
    },
    {
        "content": "<p>The <code>try</code> keyword is much simpler to understand now IMO, since it just does what Rust does. it desugars to</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">thingYouTried</span><span class=\"w\"> </span><span class=\"nv\">and</span><span class=\"w\"> </span><span class=\"nv\">the</span><span class=\"w\"> </span><span class=\"nv\">args</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">    </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">val</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">val</span>\n<span class=\"w\">    </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">err</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"nv\">return</span><span class=\"w\"> </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">err</span>\n</code></pre></div>",
        "id": 483846150,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1732257733
    },
    {
        "content": "<p>I can't think of a reason the word Task, uppercase or lowercase, should be preserved at all in the tutorial. Though I'm open to being wrong</p>",
        "id": 483846261,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1732257829
    },
    {
        "content": "<p>In that example, does the type of <code>err</code> appear in the <code>try</code>ing function's type signature?</p>",
        "id": 483846342,
        "sender_full_name": "jan kili",
        "timestamp": 1732257865
    },
    {
        "content": "<p>Yes</p>",
        "id": 483846380,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1732257896
    },
    {
        "content": "<p>I may be being overly pessimistic (or exhibiting an \"old dog new tricks\" stiffness). Also, AoC is both an opportunity for adoption and an opportunity for constructive feedback on Roc's recent choices.</p>",
        "id": 483846531,
        "sender_full_name": "jan kili",
        "timestamp": 1732257963
    },
    {
        "content": "<p>So for example</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">parseThenDoubleAndPrint</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">strNum</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">num</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">try</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toU64</span><span class=\"w\"> </span><span class=\"nv\">strNum</span>\n<span class=\"w\">    </span><span class=\"nv\">doubled</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">num</span><span class=\"w\"> </span><span class=\"nf\">*</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n\n<span class=\"w\">    </span><span class=\"nv\">try</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"s\">\"$(Inspect.toStr doubled)\"</span>\n\n<span class=\"w\">    </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n</code></pre></div>",
        "id": 483846678,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1732258073
    },
    {
        "content": "<p>Would infer type Str =&gt; Result {} [InvalidNumStr, StdoutErr _]</p>",
        "id": 483846769,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1732258119
    },
    {
        "content": "<p>Sweet! Like this? <a href=\"https://github.com/roc-lang/basic-cli/pull/257#discussion_r1853325645\">https://github.com/roc-lang/basic-cli/pull/257#discussion_r1853325645</a> (comment on line 11)</p>",
        "id": 483846985,
        "sender_full_name": "jan kili",
        "timestamp": 1732258241
    },
    {
        "content": "<p>In other words, jinx, cause I forgot to hit submit on the PR review until now.</p>",
        "id": 483847033,
        "sender_full_name": "jan kili",
        "timestamp": 1732258277
    },
    {
        "content": "<p>Yes, but replace the a with the actual error type</p>",
        "id": 483849824,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1732259788
    },
    {
        "content": "<p>Also, though task still exists, it is deprecated and will be removed once purity inference is fully working and things are updated.</p>",
        "id": 483931536,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732288394
    },
    {
        "content": "<p>Just a tracking issue for my in-progress tutorial work: <a href=\"https://github.com/roc-lang/roc/issues/7242\">https://github.com/roc-lang/roc/issues/7242</a></p>",
        "id": 483991532,
        "sender_full_name": "jan kili",
        "timestamp": 1732309638
    },
    {
        "content": "<p>found a bug</p>",
        "id": 484085983,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732386900
    },
    {
        "content": "<p>If a platform exposes a function like <code>respond!</code> and the implementation in the app uses no effects, it generates a warning</p>",
        "id": 484085999,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732386925
    },
    {
        "content": "<p>It is valid for the app to implement <code>respond!</code> with a simple static response that uses no effects</p>",
        "id": 484086019,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732386950
    },
    {
        "content": "<p>So we should not check the <code>!</code> effectfulness over the platform to app boundary</p>",
        "id": 484086080,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732386975
    },
    {
        "content": "<p>Yeah, I noticed that as well. We could add a constraint to all top-level defs to allow them to be effectful without an effectful body?</p>",
        "id": 484086133,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1732387041
    },
    {
        "content": "<p>I think it would be best if we make a special exception just for the platform</p>",
        "id": 484086158,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732387074
    },
    {
        "content": "<p>Other locations this shouldn't happen</p>",
        "id": 484086163,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732387081
    },
    {
        "content": "<p>Yeah, good catch. It should definitely be only for functions provided to the platform.</p>",
        "id": 484086230,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1732387121
    },
    {
        "content": "<p>Top-level defs are the main motivation for this warning since those are the functions you can call from far away. Disabling it for all of them would kind of defeat the purpose.</p>",
        "id": 484086373,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1732387257
    },
    {
        "content": "<p>Yeah, I think it should just be an exception for the functions specified in the provides.</p>",
        "id": 484087101,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732387927
    },
    {
        "content": "<p>I’ll look into it tonight</p>",
        "id": 484088401,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1732389021
    },
    {
        "content": "<p>Fixed in <a href=\"https://github.com/roc-lang/roc/pull/7254\">#7254</a></p>",
        "id": 484765615,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1732727443
    },
    {
        "content": "<p>Should <a href=\"https://github.com/roc-lang/examples/blob/main/examples/Results/main.roc\">this file of Result parsing/trying examples</a> (linked from the tutorial) include versions using the new <code>try</code> keyword?<br>\nCC <span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> <span class=\"user-mention\" data-user-id=\"734214\">@Aurélien Geron</span></p>",
        "id": 485173617,
        "sender_full_name": "jan kili",
        "timestamp": 1732923984
    },
    {
        "content": "<p>Yes - that would be good <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 485174805,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732925028
    },
    {
        "content": "<p>Tutorial PR mostly finished - final additions coming tomorrow, ready for primary feedback whenever, hoping to merge tomorrow<br>\n<a href=\"https://github.com/roc-lang/roc/pull/7274\">https://github.com/roc-lang/roc/pull/7274</a><br>\n(TODO: purity inference previews, Result examples file additions)</p>",
        "id": 485175273,
        "sender_full_name": "jan kili",
        "timestamp": 1732925447
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"462053\">JanCVanB</span> <a href=\"#narrow/stream/316715-contributing/topic/Help.20upgrade.2Ftest.20purity.20inference/near/485173617\">said</a>:</p>\n<blockquote>\n<p>Should <a href=\"https://github.com/roc-lang/examples/blob/main/examples/Results/main.roc\">this file of Result parsing/trying examples</a> (linked from the tutorial) include versions using the new <code>try</code> keyword?<br>\nCC <span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <span class=\"user-mention silent\" data-user-id=\"734214\">Aurélien Geron</span></p>\n</blockquote>\n<p>Thanks for the heads up. I'm on vacation without my laptop, I'll be back home on Thursday. If it can wait until then, I'm happy to update the example. <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 485213330,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1732960832
    }
]