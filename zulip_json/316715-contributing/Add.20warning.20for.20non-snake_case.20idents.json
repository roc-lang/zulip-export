[
    {
        "content": "<p>When updating the tests for the snake_case change, it was really easy to miss a lot of syntax issues because everything was in a string. We might consider moving as many tests into snapshots as possible at some point, but for now, we can still make catching these issues easy by giving warnings for old syntax, including:</p>\n<ul>\n<li>any ident (a.k.a. not types) that has uppercase characters in it</li>\n<li>functions, tags, opaques, etc. called with whitespace syntax</li>\n<li>the <code>\\args -&gt;</code> syntax once we move to <code>|args|</code> syntax</li>\n</ul>\n<p>Anyone disagree? Otherwise I can do this, probably no issue needed.</p>",
        "id": 492611565,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736385515
    },
    {
        "content": "<p><code>\"my string ${interpolation}\"</code> too</p>",
        "id": 492611909,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736385732
    },
    {
        "content": "<p>I keep forgetting that one, good catch</p>",
        "id": 492612161,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736385921
    },
    {
        "content": "<p>The other one mentioned in the Richard's draft blog about functional PI is the <code>??</code></p>",
        "id": 492612484,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736386138
    },
    {
        "content": "<p>I'm not sure we're tracking any Issues for that</p>",
        "id": 492612523,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736386167
    },
    {
        "content": "<p>They're mentioned here: <a href=\"https://github.com/roc-lang/roc/issues/7086\">https://github.com/roc-lang/roc/issues/7086</a></p>",
        "id": 492612764,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736386299
    },
    {
        "content": "<p>Nvm.. I just realised it's already implemented. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">main!</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">\\</span><span class=\"n\">_args</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n\n<span class=\"w\">    </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"no\">Env</span><span class=\"o\">.</span><span class=\"n\">var!</span><span class=\"p\">(</span><span class=\"s2\">\"NAME\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"sc\">??</span><span class=\"w\"> </span><span class=\"s2\">\"LUKE\"</span>\n\n<span class=\"w\">    </span><span class=\"no\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line!</span><span class=\"p\">(</span><span class=\"s2\">\"Hello, $(value)!\"</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 492612889,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736386377
    },
    {
        "content": "<p>Anthony is a Bull in an Unimplemented Syntax Shop</p>",
        "id": 492612922,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736386402
    },
    {
        "content": "<p>What did I do now?</p>",
        "id": 492620722,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736391490
    },
    {
        "content": "<p>Oh ??</p>",
        "id": 492620835,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736391586
    },
    {
        "content": "<p>Yeah I did that</p>",
        "id": 492620839,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736391591
    },
    {
        "content": "<p>Iâ€™m dragging Roc into the future</p>",
        "id": 492620911,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736391609
    },
    {
        "content": "<p>Luckily not kicking and screaming. That my four year olds job</p>",
        "id": 492620953,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736391628
    },
    {
        "content": "<p>Can tags have single underscores in them?</p>",
        "id": 492823226,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736458636
    },
    {
        "content": "<p>Normal tags are PascalCase</p>",
        "id": 492823321,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736458681
    },
    {
        "content": "<p>But I've been seeing some SCREAMING_SNAKE_CASE tags recently</p>",
        "id": 492823394,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736458695
    },
    {
        "content": "<p>Though I'm only seeing a single word for these</p>",
        "id": 492823417,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736458706
    },
    {
        "content": "<p>Where have you seen that?</p>",
        "id": 492824550,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736459161
    },
    {
        "content": "<p>GET, POST, DELETE, etc.</p>",
        "id": 492824635,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736459181
    },
    {
        "content": "<p>We had a conversation about those specifically, Richard wanted them UPPERCASE</p>",
        "id": 492824932,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736459292
    },
    {
        "content": "<p>But what should we do if it's two words</p>",
        "id": 492824969,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736459308
    },
    {
        "content": "<p>TWOWORDS or TWO_WORDS?</p>",
        "id": 492824986,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736459317
    },
    {
        "content": "<p>We could allow <em>either</em> SCREAMING_SNAKE_CASE or PascalCase, but you can only have either underscores <em>or</em> lowercase letters</p>",
        "id": 492825099,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736459368
    },
    {
        "content": "<p>I like SCREAMING_CASE for constants, so for tag unions without payloads it kind of feels ok</p>",
        "id": 492825663,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736459578
    },
    {
        "content": "<p>Maybe tag unions with payloads are only PascalCase? (just spitballing here)</p>",
        "id": 492825733,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736459613
    },
    {
        "content": "<p>I don't think we want to be too restrictive. Maybe just allow anything as long as it starts with an Uppercase ASCII letter?</p>",
        "id": 492825943,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736459682
    },
    {
        "content": "<p>For context, I'm trying to write a utility that parses out relevant info for names in one O(n) pass, e.g.</p>\n<ul>\n<li>does it end with a !</li>\n<li>does it end with a _ for shadowing</li>\n<li>does it have multiple underscores in a row</li>\n<li>etc.</li>\n</ul>",
        "id": 492826100,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736459750
    },
    {
        "content": "<p>This will help with reporting non-snake_case names, in addition to other stuff</p>",
        "id": 492826389,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736459853
    },
    {
        "content": "<p>We definitely want to allow running any code even if we don't like it</p>",
        "id": 492826601,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736459925
    },
    {
        "content": "<p>But I think Roc being opinionated on style makes code more consistent in unfamiliar codebases, which is a really nice feature</p>",
        "id": 492826673,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736459959
    },
    {
        "content": "<p>I don't think we should allow more than one underscore in a row, for example</p>",
        "id": 492826708,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736459974
    },
    {
        "content": "<p>yeah I agree about disallowing (via warning) multiple underscores in a row</p>",
        "id": 492829025,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1736460790
    },
    {
        "content": "<p>Should we allow <code>First_Second</code>?</p>",
        "id": 492829078,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736460816
    },
    {
        "content": "<p>I think no</p>",
        "id": 492829192,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736460849
    },
    {
        "content": "<p>I think that's ok. I could imagine a scenario where you're trying to make a tag for each field in a record or something</p>",
        "id": 492829235,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1736460874
    },
    {
        "content": "<p>and there might be underscores in there, and you want them to match up</p>",
        "id": 492829253,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1736460886
    },
    {
        "content": "<p>fair</p>",
        "id": 492829283,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736460900
    },
    {
        "content": "<blockquote>\n<p>We might consider moving as many tests into snapshots as possible at some point</p>\n</blockquote>\n<p>I'm not a fan of that, I think it's difficult for newcomers to find the snapshot file for a specific test. It requires more effort to see the input for a test for experienced people too.</p>",
        "id": 492909637,
        "sender_full_name": "Anton",
        "timestamp": 1736501394
    },
    {
        "content": "<p>Okay, makes sense. I think the thing I was thinking of was that we should make it easy to update tests with Roc changes, but that should happen if we make add warnings for invalid Roc</p>",
        "id": 492911198,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736501920
    }
]