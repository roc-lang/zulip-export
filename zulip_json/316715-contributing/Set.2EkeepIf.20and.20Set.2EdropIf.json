[
    {
        "content": "<p>Since <code>Set</code> is implemented through <code>Dict</code>, I wonder if <code>keepIf</code> and <code>dropIf</code> should also be implemented for <code>Dict</code> and then just used in <code>Set</code>. But I'm not sure if <code>Dict.keepIf</code>'s predicate would take just key or key and value? Or maybe it doesn't make sense for <code>Dict</code> to have those functions? What do you think? <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span></p>",
        "id": 405701190,
        "sender_full_name": "LoipesMas",
        "timestamp": 1701640327
    },
    {
        "content": "<p>I think it makes sense; I'd say the <code>Dict</code> one should get two arguments, one for key and one for value</p>",
        "id": 405701495,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701640577
    },
    {
        "content": "<p>That's what I thought, thanks!</p>",
        "id": 405701580,
        "sender_full_name": "LoipesMas",
        "timestamp": 1701640674
    },
    {
        "content": "<p>I see three possible implementations for <code>Dict.keepIf</code>:</p>\n<ol>\n<li>Create an empty dict and insert keys and values that fit the predicate</li>\n<li>Use input dict and remove values that don't fit the predicate</li>\n<li><code>List.keepIf</code> on the <code>data</code> and then <code>Dict.fromList</code></li>\n</ol>\n<p>With current <code>Dict.fromList</code> implementation, 1. would be the same as 3., just written out, so it doesn't really make sense. But I'm not sure if using input dict and using <code>Dict.remove</code> would allow us to avoid allocations (i.e., mutate in-place if the input dict isn't used later). If yes, that would probably be better, right? But 3. is cleaner and when <code>Dict.fromList</code> gets optimized it might be faster than removals. Or am I overthinking this and I should just go with the simplest solution?</p>",
        "id": 405703465,
        "sender_full_name": "LoipesMas",
        "timestamp": 1701642082
    },
    {
        "content": "<blockquote>\n<ol start=\"2\">\n<li>Use input dict and remove values that don't fit the predicate</li>\n</ol>\n</blockquote>",
        "id": 405703544,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701642137
    },
    {
        "content": "<p>I would definitely pick that</p>",
        "id": 405703550,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701642145
    },
    {
        "content": "<p>Yeah, should be able to mutate in place if written correctly (that actually might be a bit tricky to do right). And should keep the dictionary capacity around which will help with perf. Don't need to re-allocate a bunch.</p>",
        "id": 405703618,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701642223
    },
    {
        "content": "<p>To clarify why this may be quite tricky. To walk the list to figure out what to remove, you would need to keep a reference to the original list. That would stop mutation. Instead, you probably have to manually write a recursive function that just takes an index. If an item is removed, the index won't update. If it isn't it will. So a bit more complex.</p>",
        "id": 405704016,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701642586
    },
    {
        "content": "<p>Indeed, sounds tricky. That's what I get for picking a \"very easy\" task ;p But I'll give it a try!</p>",
        "id": 405704386,
        "sender_full_name": "LoipesMas",
        "timestamp": 1701642903
    },
    {
        "content": "<p>If you want, just write the naive way and it can be upgraded later.</p>",
        "id": 405705176,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701643552
    }
]