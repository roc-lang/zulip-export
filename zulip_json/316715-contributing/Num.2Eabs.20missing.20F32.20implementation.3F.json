[
    {
        "content": "<p>I was looking at the failed tests for the isApproxEq PR.  Do I need to add a 32bit implementation here in <code>./gen_dev/src/generic64/mod.rs</code>?</p>\n<div class=\"codehilite\"><pre><span></span><code>    fn build_num_abs(&amp;mut self, dst: &amp;Symbol, src: &amp;Symbol, layout: &amp;InLayout&lt;&#39;a&gt;) {\n        match self.interner().get_repr(*layout) {\n            LayoutRepr::Builtin(Builtin::Int(IntWidth::I64 | IntWidth::U64)) =&gt; {\n                let dst_reg = self.storage_manager.claim_general_reg(&amp;mut self.buf, dst);\n                let src_reg = self.storage_manager.load_to_general_reg(&amp;mut self.buf, src);\n                ASM::abs_reg64_reg64(&amp;mut self.buf, dst_reg, src_reg);\n            }\n            LayoutRepr::Builtin(Builtin::Float(FloatWidth::F64)) =&gt; {\n                let dst_reg = self.storage_manager.claim_float_reg(&amp;mut self.buf, dst);\n                let src_reg = self.storage_manager.load_to_float_reg(&amp;mut self.buf, src);\n                ASM::abs_freg64_freg64(&amp;mut self.buf, &amp;mut self.relocs, dst_reg, src_reg);\n            }\n            x =&gt; todo!(&quot;NumAbs: layout, {:?}&quot;, x),\n        }\n    }\n</code></pre></div>",
        "id": 416703112,
        "sender_full_name": "Brian Teague",
        "timestamp": 1705636857
    },
    {
        "content": "<p>That's for the dev backend</p>",
        "id": 416704767,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1705637940
    },
    {
        "content": "<p>I guess so. That or just ignore the dev backend for now</p>",
        "id": 416704779,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705637951
    },
    {
        "content": "<p>What is the status for <code>gen_llvm</code>?</p>",
        "id": 416704879,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1705638024
    },
    {
        "content": "<p>ignoring the dev backend means <code>isApproxEq</code> does not work in the repl. So I think that we do need an implementation for it</p>",
        "id": 416781522,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1705672127
    },
    {
        "content": "<p>I've implemented it here <a href=\"https://github.com/roc-lang/roc/pull/6401\">https://github.com/roc-lang/roc/pull/6401</a></p>",
        "id": 416787011,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1705673826
    },
    {
        "content": "<p>I merged your changes into my branch approxEq, but it still gets this error when running <code>cargo test --release</code><br>\n(signal: 11, SIGSEGV: invalid memory reference)</p>",
        "id": 416875792,
        "sender_full_name": "Brian Teague",
        "timestamp": 1705701809
    },
    {
        "content": "<p>so this is likely an error in your changes then? you can check this by using e.g. <code>cargo nextest-gen-llvm</code> (note <code>nextest</code> instead of <code>test</code></p>",
        "id": 416883093,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1705704382
    },
    {
        "content": "<p>this only works for the gen tests but I'm assuming that is where the error is</p>",
        "id": 416883132,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1705704395
    },
    {
        "content": "<p>Since I saw f32_abs was merged to main, I went ahead and made a new feature branch based on updated main with just the isApproxEq implementation.</p>\n<p>This PR should be ready for review and should pass the tests now.<br>\n<a href=\"https://github.com/roc-lang/roc/pull/6421\">https://github.com/roc-lang/roc/pull/6421</a></p>",
        "id": 417563226,
        "sender_full_name": "Brian Teague",
        "timestamp": 1706062438
    }
]