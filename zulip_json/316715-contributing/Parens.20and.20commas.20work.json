[
    {
        "content": "<p>Got my first unit test with PNC to work - alongside whitespace application.  Long way to go, but I'll use this thread to collect feedback and share progress</p>",
        "id": 490950263,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735277252
    },
    {
        "content": "<p>THese two are passing</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"cp\">#[test]</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">single_line_application_with_parens</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">expr_formats_same</span><span class=\"p\">(</span><span class=\"n\">indoc</span><span class=\"o\">!</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"s\">r\"</span>\n<span class=\"s\">            combine(peanut_butter, chocolate)</span>\n<span class=\"s\">            \"</span>\n<span class=\"w\">        </span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"cp\">#[test]</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">multi_line_application_with_parens</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">expr_formats_same</span><span class=\"p\">(</span><span class=\"n\">indoc</span><span class=\"o\">!</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"s\">r\"</span>\n<span class=\"s\">            combine(</span>\n<span class=\"s\">                peanut_butter,</span>\n<span class=\"s\">                chocolate</span>\n<span class=\"s\">            )</span>\n<span class=\"s\">            \"</span>\n<span class=\"w\">        </span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>Any especially tricky cases you'd like to see tested let me know</p>",
        "id": 490950399,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735277397
    },
    {
        "content": "<p>And yes, I will make the second case allow trailing comma and make sure it formats to that</p>",
        "id": 490950475,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735277421
    },
    {
        "content": "<p>One really nice feature in some language formatters: if you add the trailing commas, it formats to multiline. If you delete the trailing comma it formats back to single line.</p>",
        "id": 490950672,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735277606
    },
    {
        "content": "<p>Note: I think they generally will still override and go to multiple if a line gets way too long</p>",
        "id": 490950699,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735277636
    },
    {
        "content": "<p>I can do that</p>",
        "id": 490990561,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735305079
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/316715-contributing/topic/Parens.20and.20commas.20work/near/490950699\">said</a>:</p>\n<blockquote>\n<p>Note: I think they generally will still override and go to multiple if a line gets way too long</p>\n</blockquote>\n<p>I like the \"trailing comma means I want multiline\" idea, but I don't think we should enforce line lengths in any way.</p>",
        "id": 490991653,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735305786
    },
    {
        "content": "<p>having spent a lot of time with formatters that do and don't enforce line lengths, I still find the line lengths enforcement a significant source of annoyance and not a significant source of helpfulness</p>",
        "id": 490991713,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735305838
    },
    {
        "content": "<p>Thank you for that Richard!  And I agree totally</p>",
        "id": 490991844,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735305917
    },
    {
        "content": "<p>that said, I do think having a line-length-enforcing formatter would be helpful for docs generation, because then we can tell it exactly how many monospace chars are going to be available on the page, and wrap gracefully based on that (since there's no way to avoid wrapping in that scenario)</p>",
        "id": 490991893,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735305959
    },
    {
        "content": "<p>and sometimes we want to generate inferred types for docs that weren't annotated, so in those cases we have to add line breaks somewhere anyway</p>",
        "id": 490992010,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735306021
    },
    {
        "content": "<p>but I think that's a separate use case, and I don't think <code>roc format</code> should enforce at all <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 490992037,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735306042
    },
    {
        "content": "<p>I think for docs you don’t really <em>need</em> tooling</p>",
        "id": 490992201,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735306156
    },
    {
        "content": "<p>agreed, but I do think it would be helpful (someday) when it comes to wrapping!</p>",
        "id": 490992998,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735306754
    },
    {
        "content": "<p>another way to think of it: if we don't have our own wrapping logic, the browser is going to decide how to wrap on overflow, and it's not going to look right (compared to if we did it ahead of time)</p>",
        "id": 490993027,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735306789
    },
    {
        "content": "<p>Yeah you’d want that tool to output differently wrapped output based on screen width</p>",
        "id": 490993685,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735307251
    },
    {
        "content": "<p>Which would require a derivative of the “A prettier printer” algo</p>",
        "id": 490994319,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735307652
    },
    {
        "content": "<p>yeah, we could (for example) include different wrapping widths at different breakpoints in the HTML, and then hide all but 1 of them as the screen resizes</p>",
        "id": 490995161,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735308222
    },
    {
        "content": "<p>so you're only ever seeing one, but they've all been precomputed to look nice at a few different widths</p>",
        "id": 490995222,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735308245
    },
    {
        "content": "<p>You’d probably want to move our formatter to using a prettier algo, with a default width of Infinity.</p>",
        "id": 490995493,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735308441
    },
    {
        "content": "<p>that could work! <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 490995755,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735308610
    },
    {
        "content": "<p>I've run into a weird failure with the test_fmt tests:  I get that these are not the same, but I've tested in my editor and these are byte for byte equivalent:</p>\n<div class=\"codehilite\"><pre><span></span><code> combine(\n     mix(vodka, gin),\n     FoodItems.Juices({\n&lt;        color: Colors.orange,\n&lt;        flavor: Flavors.orange,\n&gt;        color: Colors.orange,\n&gt;        flavor: Flavors.orange,\n         amount: 1 + 2,\n     }),\n )\n</code></pre></div>",
        "id": 491003719,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735313970
    },
    {
        "content": "<p>Has anyone ran into this before, and what things should I be looking for?</p>",
        "id": 491003763,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735313998
    },
    {
        "content": "<p>Are there escape sequences being hidden?</p>",
        "id": 491003815,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735314009
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/channel/316715-contributing/topic/Parens.20and.20commas.20work/near/491003815\">said</a>:</p>\n<blockquote>\n<p>Are there escape sequences being hidden?</p>\n</blockquote>\n<p>I can check, but my editor sure didn't catch it.  I copied one line, but it in find and it finds both lines</p>",
        "id": 491003859,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735314047
    },
    {
        "content": "<p>Try manually typing, copy-paste would hide the issue</p>",
        "id": 491003934,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735314104
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/47lPXjfIezJfXPsTxxorrMFC/Screenshot-2024-12-27-at-9.42.04-AM.png\">Screenshot 2024-12-27 at 9.42.04 AM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/47lPXjfIezJfXPsTxxorrMFC/Screenshot-2024-12-27-at-9.42.04-AM.png\" title=\"Screenshot 2024-12-27 at 9.42.04 AM.png\"><img data-original-dimensions=\"419x1179\" src=\"/user_uploads/thumbnail/22008/47lPXjfIezJfXPsTxxorrMFC/Screenshot-2024-12-27-at-9.42.04-AM.png/840x560.webp\"></a></div>",
        "id": 491004004,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735314131
    },
    {
        "content": "<p>I did that as well</p>",
        "id": 491004006,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735314140
    },
    {
        "content": "<p>Super weird. Probably not worth the investigation</p>",
        "id": 491004043,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735314172
    },
    {
        "content": "<p>So I should get rid of the test?</p>",
        "id": 491004071,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735314185
    },
    {
        "content": "<p>Can you not just update the result?</p>",
        "id": 491004396,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735314400
    },
    {
        "content": "<p>This isn't a snapshot</p>",
        "id": 491004431,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735314431
    },
    {
        "content": "<p>This is an indoc test</p>",
        "id": 491004433,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735314435
    },
    {
        "content": "<p>You can comment it out and I'll try to fix it once this gets to the PR stage</p>",
        "id": 491004525,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735314497
    },
    {
        "content": "<p>24 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"316715\" href=\"/#narrow/channel/316715-contributing/topic/.F0.9F.9A.A8.20Whitespace.20application.20and.20whitespace.20-.20breaking.20change.21.20.F0.9F.9A.A8\">#contributing &gt; 🚨 Whitespace application and whitespace - breaking change! 🚨</a> by <span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span>.</p>",
        "id": 491026195,
        "sender_full_name": "Notification Bot",
        "timestamp": 1735329119
    },
    {
        "content": "<p>Another interesting bit.</p>\n<p>Currently creating a Type with type parameters has this syntax:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Cons</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"kt\">Nil</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>But with PNC right now this would look like:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">List</span><span class=\"p\">(</span><span class=\"nv\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Cons</span><span class=\"p\">(</span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"p\">(</span><span class=\"nv\">a</span><span class=\"p\">)),</span><span class=\"w\"> </span><span class=\"kt\">Nil</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>Is that lhs desired? or would we instead expect</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"no\">List</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"no\">Cons</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">List</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)),</span><span class=\"w\"> </span><span class=\"no\">Nil</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I honestly don't know which why I'd go with this, but this does give it the feel of List is a type that needs a type arg <code>a</code> to be supplied for it to be \"applied\" and made concrete.</p>",
        "id": 491036089,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735336863
    },
    {
        "content": "<p>Another advantage of the latter is that any form of application in types would be uniform</p>",
        "id": 491036419,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735337137
    },
    {
        "content": "<p>Well of course I didn't think about the obvious problem - this is not obviously distinguishable from a Function type being defined :-(</p>",
        "id": 491036714,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735337391
    },
    {
        "content": "<p>So I guess <code>List(a) : [Cons(a, List(a)), Nil]</code> it is! Unless someone else has a genius idea here</p>",
        "id": 491036786,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735337442
    },
    {
        "content": "<p>This is the only real example from the static dispatch proposal, and it is using non-PNC syntax for this one and only case, and I don't think that's a good outcome:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">Sort</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">a</span>\n<span class=\"w\">    </span><span class=\"kr\">where</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"nf\">.</span><span class=\"nv\">order</span><span class=\"p\">(</span><span class=\"nv\">elem</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">elem</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">LT</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">EQ</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">GT</span><span class=\"p\">]</span>\n</code></pre></div>",
        "id": 491036950,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735337595
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> if you could opine here, that would probably help unblock me.</p>",
        "id": 491037029,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735337651
    },
    {
        "content": "<p>current plan is to leave type syntax completely unchanged relative to today</p>",
        "id": 491037094,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735337714
    },
    {
        "content": "<p>we can discuss in a thread if we want to make changes, but currently no plans to change anything</p>",
        "id": 491037108,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735337737
    },
    {
        "content": "<p>So only when using the constructors as values?</p>",
        "id": 491038002,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735338580
    },
    {
        "content": "<p>I think seeing <code>Cons a (List a)</code> in a type annotation and <code>Cons(123, Nil)</code> when used as a value might be....confusing</p>",
        "id": 491038153,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735338672
    },
    {
        "content": "<p>But maybe not more confusing than <code>Str, Str -&gt; Str</code> / <code>|a, b| a</code> contrast</p>",
        "id": 491038180,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735338705
    },
    {
        "content": "<p>it's a fair point, but we haven't discussed it before, and I think we should discuss before making any implementation changes <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 491038965,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735339324
    },
    {
        "content": "<p>So here is the first Roc program to compile with 100% PNC usage:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">main!</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"ss\">pl</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">platform</span><span class=\"w\"> </span><span class=\"s2\">\"../../basic-cli/platform/main.roc\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">pl</span><span class=\"o\">.</span><span class=\"n\">Stdout</span>\n<span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">pl</span><span class=\"o\">.</span><span class=\"n\">Stdin</span>\n<span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">pl</span><span class=\"o\">.</span><span class=\"n\">Stderr</span>\n\n<span class=\"n\">main!</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">\\</span><span class=\"n\">_args</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">tick!</span><span class=\"p\">({})</span>\n\n<span class=\"n\">tick!</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">\\{}</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">try</span><span class=\"w\"> </span><span class=\"no\">Stdout</span><span class=\"o\">.</span><span class=\"n\">write!</span><span class=\"p\">(</span><span class=\"s2\">\"Enter a number: \"</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"no\">Stdin</span><span class=\"o\">.</span><span class=\"n\">line!</span><span class=\"p\">({})</span><span class=\"w\"> </span><span class=\"n\">is</span>\n<span class=\"w\">        </span><span class=\"no\">Ok</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"n\">num</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">                </span><span class=\"no\">Str</span><span class=\"o\">.</span><span class=\"n\">toU8</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"no\">Result</span><span class=\"o\">.</span><span class=\"n\">withDefault</span><span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">addOne</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"n\">try</span><span class=\"w\"> </span><span class=\"no\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line!</span><span class=\"p\">(</span><span class=\"s2\">\"Did you write $(Num.toStr(num)) (Y/n)\"</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"no\">Stdin</span><span class=\"o\">.</span><span class=\"n\">line!</span><span class=\"p\">({})</span><span class=\"w\"> </span><span class=\"n\">is</span>\n<span class=\"w\">                </span><span class=\"no\">Ok</span><span class=\"w\"> </span><span class=\"s2\">\"n\"</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"no\">Ok</span><span class=\"p\">({})</span>\n<span class=\"w\">                </span><span class=\"no\">Ok</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">tick!</span><span class=\"p\">({})</span>\n<span class=\"w\">                </span><span class=\"no\">Err</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"no\">Err</span><span class=\"p\">(</span><span class=\"no\">Done</span><span class=\"p\">)</span>\n\n<span class=\"w\">        </span><span class=\"no\">Err</span><span class=\"p\">(</span><span class=\"no\">EndOfFile</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"n\">try</span><span class=\"w\"> </span><span class=\"no\">Stderr</span><span class=\"o\">.</span><span class=\"n\">line!</span><span class=\"p\">(</span><span class=\"s2\">\"EOF\"</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"no\">Err</span><span class=\"p\">(</span><span class=\"no\">Done</span><span class=\"p\">)</span>\n\n<span class=\"w\">        </span><span class=\"no\">Err</span><span class=\"p\">(</span><span class=\"no\">StdinErr</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"n\">try</span><span class=\"w\"> </span><span class=\"no\">Stderr</span><span class=\"o\">.</span><span class=\"n\">line!</span><span class=\"p\">(</span><span class=\"s2\">\"Couldn't read from stdin\"</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"no\">Err</span><span class=\"p\">(</span><span class=\"no\">Done</span><span class=\"p\">)</span>\n\n<span class=\"n\">addOne</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">\\</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">255</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">        </span><span class=\"mi\">255</span>\n<span class=\"w\">    </span><span class=\"k\">else</span>\n<span class=\"w\">        </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 491090101,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735389984
    },
    {
        "content": "<p>It's very dumb, but it was something that was quick to translate...working on migrating some of my AOC</p>",
        "id": 491090137,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735390026
    },
    {
        "content": "<p>(<strong>NOTE</strong>: This is with PI as well)</p>",
        "id": 491090148,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735390045
    },
    {
        "content": "<p>PR is up: <a href=\"https://github.com/roc-lang/roc/pull/7421\">https://github.com/roc-lang/roc/pull/7421</a></p>",
        "id": 491090779,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735390678
    },
    {
        "content": "<p>This doesn't look like correct PNC:</p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">num</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"nc\">Str</span><span class=\"o\">.</span><span class=\"n\">toUtf8</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Result</span><span class=\"o\">.</span><span class=\"n\">withDefault</span><span class=\"w\"> </span><span class=\"mi\">255</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">addOne</span>\n</code></pre></div>\n<p>Should be:</p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">num</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"nc\">Str</span><span class=\"o\">.</span><span class=\"n\">toUtf8</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Result</span><span class=\"o\">.</span><span class=\"n\">withDefault</span><span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">addOne</span><span class=\"p\">()</span>\n</code></pre></div>",
        "id": 491110237,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735409910
    },
    {
        "content": "<p>You got me. I’ll fix that</p>",
        "id": 491110422,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735410100
    },
    {
        "content": "<p>Thanks for pointing that out Brendan, think I caught a formatter error</p>",
        "id": 491111118,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735410794
    },
    {
        "content": "<p>I just wanted to share this, from someone I know who's planning to try Roc soon and who didn't know PNC was coming:</p>\n<blockquote>\n<p>This is super exciting stuff. My only points of friction are not having a version manager and getting used to the omitted parens</p>\n</blockquote>",
        "id": 495383227,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737584005
    },
    {
        "content": "<p>(I told him about our \"cli versions itself plans, and asked to clarify if the second thing was referring to whitespace calling)</p>\n<blockquote>\n<p>Yeah having spaces only is a trip for me, as I’m already dyslexic and struggle to read code I’ve been used to for years, but I know this isn’t a roc thing, I’ve seen it in other languages in the functional world<br>\nBut, I’m excited to play with it<br>\nAnd an optimistic that my brain will adjust</p>\n</blockquote>",
        "id": 495383238,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737584008
    },
    {
        "content": "<p>Nice to hear!</p>",
        "id": 495383390,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737584060
    },
    {
        "content": "<p>(I explained about PNC)</p>\n<blockquote>\n<p>Wait<br>\nYou have parenthesis now?</p>\n</blockquote>",
        "id": 495383448,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737584089
    },
    {
        "content": "<p>I wonder if people with dyslexia and maybe mild forms of ADHD struggle to parse whitespace application as a general rule?  Maybe the parens and then commas help guide their eyes from left to right?</p>",
        "id": 495383554,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737584141
    },
    {
        "content": "<p>Would be interesting if there has been any science done on something like that</p>",
        "id": 495383584,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737584160
    },
    {
        "content": "<p>(yup!)</p>\n<blockquote>\n<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span>  <br>\nHell yeah! I didn’t expect that. I think that was literally my only “I don’t know if I can read/write this” point when looking at the language lol<br>\nThe parenthesis stuff was my biggest worry <br>\nAnd prob the main thing that kept from digging in sooner<br>\nIt’s always been on my list, literally an apple notes list I have to play with new tech, roc has been there since [before he'd even met me]</p>\n</blockquote>",
        "id": 495383646,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737584174
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> <a href=\"#narrow/stream/316715-contributing/topic/Parens.20and.20commas.20work/near/495383554\">said</a>:</p>\n<blockquote>\n<p>I wonder if people with dyslexia and maybe mild forms of ADHD struggle to parse whitespace application as a general rule?  Maybe the parens and then commas help guide their eyes from left to right?</p>\n</blockquote>\n<p>yeah it's the first time I've heard of it, but it was really heartwarming to hear! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 495383701,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737584207
    },
    {
        "content": "<p>makes me feel better about the loss of aesthetics I like, knowing that for others the benefit is much more than aesthetic</p>",
        "id": 495383784,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737584256
    },
    {
        "content": "<p>Yes, a lot of things that make a language easier to parse for a computer, makes it easier for (many) humans to parse</p>",
        "id": 495383935,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737584316
    },
    {
        "content": "<p>Us humans just have a lot more natural variance than computers</p>",
        "id": 495383969,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737584340
    },
    {
        "content": "<p>also, this is someone who has done Gleam in the past, so it's interesting that whitespace calling was specifically a barrier to trying Roc where functional semantics weren't at all a barrier (this is someone coming from an imperative background)</p>",
        "id": 495384197,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737584442
    },
    {
        "content": "<p>anyway, thanks to all who made it happen! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 495384378,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737584524
    }
]