[
    {
        "content": "<p>Over the last couple days I started poking around the compiler to see if I could figure out how to update the abilities syntax. I think I need a hint <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>\n<p>Specifically, what part of the compiler identifies specific character sequences in the source file and translates them to AST nodes?</p>",
        "id": 359382490,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1684413005
    },
    {
        "content": "<p>What you describe is the <code>parse</code> crate in general. I don't know the specifics about the abilities parser but I would start at the <a href=\"https://github.com/roc-lang/roc/blob/main/crates/compiler/parse/src/type_annotation.rs\"><code>type_annotations</code> module</a>.</p>",
        "id": 359397157,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1684416548
    },
    {
        "content": "<p>For example, <a href=\"https://github.com/roc-lang/roc/blob/69a487a96afa0a4b2cc0eccbd0592ef10316e00c/crates/compiler/parse/src/type_annotation.rs#L447-L479\">here's</a> how the <code>has</code> clause is parsed</p>",
        "id": 359397429,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1684416612
    },
    {
        "content": "<p>Which is used by <a href=\"https://github.com/roc-lang/roc/blob/69a487a96afa0a4b2cc0eccbd0592ef10316e00c/crates/compiler/parse/src/type_annotation.rs#L484-L507\"><code>has_clause_chain</code></a> to parse <a href=\"https://github.com/roc-lang/roc/blob/69a487a96afa0a4b2cc0eccbd0592ef10316e00c/crates/compiler/parse/src/type_annotation.rs#L491-L499\">one or more of them</a>.</p>",
        "id": 359400150,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1684417230
    },
    {
        "content": "<p>You can also see the <code>|</code> char <a href=\"https://github.com/roc-lang/roc/blob/69a487a96afa0a4b2cc0eccbd0592ef10316e00c/crates/compiler/parse/src/type_annotation.rs#LL488C55-L488C59\">here</a> which we want to replace by <code>where</code></p>",
        "id": 359400443,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1684417315
    },
    {
        "content": "<p>Ah ha! I did spend some time digging around in the <code>parse</code> crate, but not quite enough by the looks of it.</p>",
        "id": 359401846,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1684417656
    },
    {
        "content": "<p>This is very helpful, I think I can change the behavior of the parser now. Once I have that working, I’ll update the various types <code>s/Has/Implements/g</code> Then I can update tests, comments, etc.</p>",
        "id": 359402392,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1684417790
    },
    {
        "content": "<p>I realize we also want to require curly brackets for new ability definitions but I’m hoping I can make that a separate PR.</p>",
        "id": 359402799,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1684417890
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"489294\">@Agus Zubiaga</span> !</p>",
        "id": 359403264,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1684418007
    },
    {
        "content": "<p>Sounds good! Happy to help if you have more specific questions later :)</p>",
        "id": 359403519,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1684418057
    },
    {
        "content": "<p>As you reading more of the parsing code you'll start to notice some of these helpers everywhere: <code>and!</code>, <code>loc!</code>,<code>wordN</code>, <code>map!</code>, etc.  </p>\n<p>These are defined in <a href=\"https://github.com/roc-lang/roc/blob/main/crates/compiler/parse/src/parser.rs\">parser.rs</a>. Looking at how these are implemented really helped me demystify them.</p>",
        "id": 359404384,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1684418241
    },
    {
        "content": "<p>Oh, also! You can find where things are parsed by opening <a href=\"https://github.com/roc-lang/roc/blob/main/crates/compiler/parse/src/ast.rs\">parse/src/ast.rs</a> and using your editor's <code>Go to References</code> feature. Look at those under <code>crates/compiler/parse/src</code> and you'll find where the AST node is created:</p>\n<p><a href=\"/user_uploads/22008/Edl8XzoXv79d-mjUmWOj9BOF/CleanShot-2023-05-18-at-11.07.472x.png\">CleanShot-2023-05-18-at-11.07.472x.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/Edl8XzoXv79d-mjUmWOj9BOF/CleanShot-2023-05-18-at-11.07.472x.png\" title=\"CleanShot-2023-05-18-at-11.07.472x.png\"><img src=\"/user_uploads/22008/Edl8XzoXv79d-mjUmWOj9BOF/CleanShot-2023-05-18-at-11.07.472x.png\"></a></div>",
        "id": 359408492,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1684419156
    },
    {
        "content": "<p>Ok, looks like it’s time for me to bite the bullet and  learn how macros are defined in Rust. This day was bound to arrive eventually.</p>",
        "id": 359459069,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1684431677
    },
    {
        "content": "<p>I did use the go to references feature in my editor, but I’m pretty sure I was looking at references to the wrong symbols or that I just missed the key references I needed.</p>",
        "id": 359459327,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1684431746
    },
    {
        "content": "<p>I also just realized there’s an entire README in the compiler crate that I missed. I guess being productive on a plane is harder than I thought lol.</p>",
        "id": 359459481,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1684431788
    },
    {
        "content": "<p>Thanks for the pointers, this helps a lot!</p>",
        "id": 359459513,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1684431797
    },
    {
        "content": "<p>For the <code>Set</code> builtin I had to change</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>Set k := Dict.Dict k {}\n     has [\n         Eq {\n             isEq,\n         },\n     ]\n</code></pre></div>\n<p>to </p>\n<div class=\"codehilite\"><pre><span></span><code>Set k := Dict.Dict k {} | k implements Hash &amp; Eq\n     implements [\n         Eq {\n             isEq,\n         },\n     ]\n</code></pre></div>\n<p>in order to make the compiler happy. Is this correct?</p>\n<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> You left a comment here a while back (<a href=\"https://github.com/roc-lang/roc/blob/28e56937ccab4da5792fa9779bb3779063a2f9f5/crates/compiler/builtins/roc/Set.roc#L26\">https://github.com/roc-lang/roc/blob/28e56937ccab4da5792fa9779bb3779063a2f9f5/crates/compiler/builtins/roc/Set.roc#L26</a>)</p>",
        "id": 359975360,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1684630221
    },
    {
        "content": "<p>Note: I'm only working on <code>s/has/implements/g</code> for now.</p>",
        "id": 359975396,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1684630266
    },
    {
        "content": "<p>Assuming it doesn't break the formatter anymore, that is a valid change. Just is clearer specification of the type.</p>",
        "id": 359975659,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1684630510
    },
    {
        "content": "<p>Not sure why just a naming change would make it required though</p>",
        "id": 359975674,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1684630541
    },
    {
        "content": "<p>Yeah, it makes me wonder if I did something wrong in my changes to the parser.</p>",
        "id": 359976371,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1684631203
    },
    {
        "content": "<p>Yeah the constraint on <code>k</code> should not be required. Did the definition of Dict change in a similar way?</p>",
        "id": 359979565,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1684634246
    },
    {
        "content": "<p>All that changed for the constraint on <code>k</code> in <code>Dict</code> is the keyword <code>has</code> changing to <code>implements</code></p>",
        "id": 360128358,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1684708276
    },
    {
        "content": "<p>Draft PR is <a href=\"https://github.com/roc-lang/roc/issues/5426\">#5426</a></p>",
        "id": 360128370,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1684708294
    },
    {
        "content": "<p>When Set is defined as:</p>\n<div class=\"codehilite\"><pre><span></span><code>Set k := Dict.Dict k {}\n     implements [\n         Eq {\n             isEq,\n         },\n     ]\n</code></pre></div>\n<p>Compilation fails with this error (followed by a huge string of others):</p>\n<div class=\"codehilite\"><pre><span></span><code> ── TOO MANY TYPE ARGUMENTS ─────────────────────────────────────────── Set.roc ─\n\n  The Dict opaque expects 2 type arguments, but it got 4 instead:\n\n  31│&gt;  Set k := Dict.Dict k {}\n  32│&gt;       implements [\n  33│&gt;           Eq {\n  34│&gt;               isEq,\n  35│&gt;           },\n  36│&gt;       ]\n\n  Are there missing parentheses?\n</code></pre></div>",
        "id": 360128481,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1684708388
    },
    {
        "content": "<p>But defined like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>Set k := Dict.Dict k {} | k implements Hash &amp; Eq\n     implements [\n         Eq {\n             isEq,\n         },\n     ]\n</code></pre></div>\n<p>The formatter fails:</p>\n<div class=\"codehilite\"><pre><span></span><code>An internal compiler expectation was broken.\nThis is definitely a compiler bug.\nPlease file an issue here: https://github.com/roc-lang/roc/issues/new/choose\nthread &#39;main&#39; panicked at &#39;Formatting bug; formatted code isn&#39;t valid\n\nI wrote the incorrect result to this file for debugging purposes:\ncrates/compiler/builtins/roc/Set.roc-format-failed\n\nParse error was: NotEndOfFile(@686)\n\n&#39;, crates/cli/src/format.rs:79:13\n</code></pre></div>",
        "id": 360128636,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1684708520
    },
    {
        "content": "<p>Hmm</p>\n<div class=\"codehilite\"><pre><span></span><code>#  crates/compiler/builtins/roc/Set.roc-format-failed\n\n## Provides a [set](https://en.wikipedia.org/wiki/Set_(abstract_data_type))\n## type which stores a collection of unique values, without any ordering\nSet k := Dict.Dict k {} | k has Hash &amp; Eq\n     has [\n         Eq {\n             isEq,\n         },\n     ]\n</code></pre></div>",
        "id": 360128901,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1684708744
    },
    {
        "content": "<p>Are the builtins formatted during the build process? Looks like I failed to update the formatter.</p>",
        "id": 360129007,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1684708806
    },
    {
        "content": "<p>after fixing the formatter, it seems to be working fine as long as I keep the constraint on <code>k</code> for <code>Set</code></p>",
        "id": 360129733,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1684709522
    },
    {
        "content": "<p>However, it still seems to be broken if I don't include the constraint on <code>k</code></p>",
        "id": 360130045,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1684709840
    },
    {
        "content": "<p>I'm also getting some weird failures on reporting tests. for example, <code>cargo test --package roc_reporting --test test_reporting -- test_reporting::ability_first_demand_not_indented_enough</code> gives me:</p>\n<div class=\"codehilite\"><pre><span></span><code>-old snapshot\n+new results\n────────────┬──────────────────────────────────────────────────────────────────────────────────\n    0       │-── UNFINISHED ABILITY ── tmp/ability_first_demand_not_indented_enough/Test.roc ─␊\n          0 │+── SYNTAX PROBLEM ──────────────────────────────────────── /code/proj/Main.roc ─␊\n\n...\n</code></pre></div>",
        "id": 360130181,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1684709983
    },
    {
        "content": "<p>Not the sort of failure I would expect.</p>",
        "id": 360130270,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1684710026
    },
    {
        "content": "<p>This seems to me to be a strong indicator that I either introduced or uncovered a bug when making changes to the parsing logic.</p>",
        "id": 360133047,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1684712547
    },
    {
        "content": "<p>I have two questions: </p>\n<ol>\n<li>Would someone be willing to take a look at my changes to the parser and check for errors? </li>\n<li>How do you feel about the size of my PR? Too many changes? I renamed a lot of types which makes the diff a lot bigger. I was torn between leaving those changes for a separate PR to keep the PRs smaller, and including them in this PR to reduce  possible confusion. What is the general preference for this project?</li>\n</ol>",
        "id": 360133476,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1684713020
    },
    {
        "content": "<p>I’ll take a look in a few minutes. I think larger sized PRs are fine for this kind of thing, namely an atomic refactor of the language. I think we should figure out why the type definitions changed though, that should not be necessary.</p>",
        "id": 360135719,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1684715036
    },
    {
        "content": "<p>The type changes were things such as <code>ast::Has</code> -&gt; <code>ast::Implements</code>,  <code>ast::HasClause</code> -&gt; <code>ast::ImplementsClause</code>, etc. My thought was that like leaving them as-is could be a source of confusion in the future.</p>",
        "id": 360137015,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1684716120
    },
    {
        "content": "<p>The PR LGTM so far! Left a couple comments.</p>",
        "id": 360137262,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1684716313
    },
    {
        "content": "<p>Sweet thanks!</p>",
        "id": 360142471,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1684720611
    },
    {
        "content": "<p>I noticed that <code>has</code> was not defined as a constant in <code>roc_parse::keywords</code> is there a specific reason for this, or is it ok if I add a new constant there for <code>implements</code> and replace the various string literals?</p>",
        "id": 360579145,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1684858471
    },
    {
        "content": "<p>(I definitely did not spend hours troubleshooting a simple failure to find and replace. Not me. Why would you think that?)</p>",
        "id": 360579493,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1684858563
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"522634\">Bryce Miller</span> <a href=\"#narrow/stream/316715-contributing/topic/Updated.20Abilities.20Syntax/near/360579145\">said</a>:</p>\n<blockquote>\n<p>I noticed that <code>has</code> was not defined as a constant in <code>roc_parse::keywords</code> is there a specific reason for this, or is it ok if I add a new constant there for <code>implements</code> and replace the various string literals?</p>\n</blockquote>\n<p>we should probably rename that - it's just for reserved keywords in <em>expressions</em> specifically</p>",
        "id": 360609320,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1684866233
    },
    {
        "content": "<p>so <code>implements</code> is only reserved in type annotations and ability definitions</p>",
        "id": 360609455,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1684866252
    },
    {
        "content": "<p>really, what we should do is have a separate list of keywords that are reserved in expressions vs in types!</p>",
        "id": 360609511,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1684866268
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/316715-contributing/topic/Updated.20Abilities.20Syntax/near/360609511\">said</a>:</p>\n<blockquote>\n<p>really, what we should do is have a separate list of keywords that are reserved in expressions vs in types!</p>\n</blockquote>\n<p>If we did that, would that mean you could use type keywords in expressions and vice versa? E.g. Could you have a type signature <code>List if -&gt; List if</code>? Not saying anyone would do this, but would that change make it possible?</p>",
        "id": 360627078,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1684871648
    },
    {
        "content": "<p>heh, I guess? Seems like a bad idea, of course <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 360628461,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1684872173
    },
    {
        "content": "<p>to be honest, that does make a decent argument for unifying the keywords list just to make the rules easier to understand <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 360628535,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1684872201
    },
    {
        "content": "<p>Ohh, are the strings in the <code>keywords</code> array automatically allowed in expressions? I was wondering what that was for.</p>",
        "id": 360639525,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1684876295
    },
    {
        "content": "<p>All I really wanted was a const</p>",
        "id": 360639577,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1684876317
    },
    {
        "content": "<p>How would a separate list of keywords reserved in types allow keywords from the other list to be used in types?</p>",
        "id": 360640579,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1684876692
    },
    {
        "content": "<p>Aside from names changing in the AST files for <code>test_snapshots</code>,  would changes to regions also be expected?</p>",
        "id": 361474203,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1685159065
    },
    {
        "content": "<p>I'd also like to confirm whether you want me to keep the changes I made to names of types, functions, values, etc. I could revert those changes so that this PR contains only functional changes. Then make another PR changing the names of things to reflect the new syntax.</p>",
        "id": 361474433,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1685159295
    },
    {
        "content": "<p>The PR is already at +665 −617 and I haven't changed <code>|</code> to <code>where</code> or added the brackets for ability definitions yet.</p>",
        "id": 361474569,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1685159440
    },
    {
        "content": "<p>I just took a look through it and it looks fantastic!!! <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span></p>",
        "id": 361550230,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1685187657
    },
    {
        "content": "<blockquote>\n<p>I could revert those changes so that this PR contains only functional changes. Then make another PR changing the names of things to reflect the new syntax.</p>\n</blockquote>\n<p>I don't think that's necessary; I think it's fine if both changes are in the same PR <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 361550332,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1685187683
    },
    {
        "content": "<blockquote>\n<p>Aside from names changing in the AST files for <code>test_snapshots</code>, would changes to regions also be expected?</p>\n</blockquote>\n<p>I'd expect regions to change if keywords change lengths, so yeah I'd assume there would be some region changes here!</p>",
        "id": 361551736,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1685188068
    },
    {
        "content": "<blockquote>\n<p>How would a separate list of keywords reserved in types allow keywords from the other list to be used in types?</p>\n</blockquote>\n<p>if we only give errors for identifiers from one list vs the other depending on whether we're parsing a type vs an expression</p>",
        "id": 361552031,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1685188129
    },
    {
        "content": "<p>but honestly based on this discussion I think we should unify those lists and just have one list of reserved keywords for both types and expressions <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 361552107,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1685188148
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/316715-contributing/topic/Updated.20Abilities.20Syntax/near/361552031\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>How would a separate list of keywords reserved in types allow keywords from the other list to be used in types?</p>\n</blockquote>\n<p>if we only give errors for identifiers from one list vs the other depending on whether we're parsing a type vs an expression</p>\n</blockquote>\n<p>Ohhh I think I understand now.</p>",
        "id": 361580180,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1685195535
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/316715-contributing/topic/Updated.20Abilities.20Syntax/near/361551736\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Aside from names changing in the AST files for <code>test_snapshots</code>, would changes to regions also be expected?</p>\n</blockquote>\n<p>I'd expect regions to change if keywords change lengths, so yeah I'd assume there would be some region changes here!</p>\n</blockquote>\n<p>Ah ha, right. So it looks like the only changes to these ASTs are names and regions. Would it make sense to just overwrite the old AST files with the new output? And if so, is there a script somewhere to do that?</p>",
        "id": 361581111,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1685195785
    },
    {
        "content": "<p>Speaking of ASTs, while I was looking at the code I was kinda wondering why most nodes included a reference to a <code>Loc</code>. It just occurred to me that that’s probably there to facilitate error messages. Is that correct?</p>",
        "id": 361581985,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1685196004
    },
    {
        "content": "<p>I'm running into <code>thread 'gen_abilities::encode_derive_to_encoder_for_opaque' has overflowed its stack</code><br>\nIgnoring that test results in a failure for the next test that uses derived abilities. </p>\n<p>Any suggestions on where to check for the problem?</p>",
        "id": 361918942,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1685358280
    },
    {
        "content": "<p>It's looking as though merging main has fixed the problem</p>",
        "id": 361929112,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1685361065
    },
    {
        "content": "<p>now <code>gen_tags::issue_5162_recast_nested_nullable_unwrapped_layout</code> is failing with a stack overflow, but we've made progress</p>",
        "id": 361930488,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1685361465
    },
    {
        "content": "<p>Does it fail in release mode?</p>",
        "id": 361944981,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1685365179
    },
    {
        "content": "<p>I’ll try that</p>",
        "id": 361954426,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1685367513
    },
    {
        "content": "<p>Yeah that one seems to pass in release mode</p>",
        "id": 362152682,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1685446152
    },
    {
        "content": "<p>okay then you will want to use the with_larger_stack helper to increase the test stack size in debug mode</p>",
        "id": 362175041,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1685451438
    },
    {
        "content": "<p>That worked. Thanks!</p>",
        "id": 363027990,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1685708198
    },
    {
        "content": "<p>I have completed <code>s/has/implements/g</code> and <code>s/|/where/g</code>. I'm now working on adding the braces around ability members in ability definitions. </p>\n<div class=\"codehilite\"><pre><span></span><code>## Definition of the [DecoderFormatting] ability\nDecoderFormatting implements {\n    u8 : Decoder U8 fmt where fmt implements DecoderFormatting,\n    u16 : Decoder U16 fmt where fmt implements DecoderFormatting,\n    u32 : Decoder U32 fmt where fmt implements DecoderFormatting,\n}\n</code></pre></div>\n<p>Does the following approach make sense?</p>\n<ol>\n<li>change <code>roc_parse::ast::TypeDef::Ability</code> from</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Ability</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">header</span>: <span class=\"nc\">TypeHeader</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">loc_implements</span>: <span class=\"nc\">Loc</span><span class=\"o\">&lt;</span><span class=\"n\">Implements</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">members</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"p\">[</span><span class=\"n\">AbilityMember</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">],</span>\n<span class=\"p\">},</span>\n</code></pre></div>\n<p>to something like </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Ability</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">header</span>: <span class=\"nc\">TypeHeader</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">loc_implements</span>: <span class=\"nc\">Loc</span><span class=\"o\">&lt;</span><span class=\"n\">Implements</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">ann</span>: <span class=\"nc\">Loc</span><span class=\"o\">&lt;</span><span class=\"n\">TypeAnnotation</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">},</span>\n</code></pre></div>\n<ol start=\"2\">\n<li>Add a new function in <code>roc_parse::type_annotation</code> to parse the text following the <code>implements</code> keyword</li>\n</ol>",
        "id": 365172051,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1686420226
    },
    {
        "content": "<p>I noticed that the <code>implements</code> keyword plays the same role as <code>:</code> or <code>:=</code> in alias or opaque type definitions, but is the only type definition that maintains the location of that sequence in the AST.</p>",
        "id": 365172567,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1686420414
    },
    {
        "content": "<p>An alternative I see to the above approach is to parse the braces in <code>roc_parse::expr::finish_parsing_ability_def_help</code></p>",
        "id": 365173141,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1686420627
    },
    {
        "content": "<p>I was planning to bring this up later, but I wonder if there is any merit to using something other than the <code>implements</code> keyword for ability definitions. In this context, it has a different meaning than it does in other contexts. </p>\n<p>In the the following contexts,  the <code>implements</code> keyword means \"the preceding type implements the following ability\":</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code># Type annotations:\nfoo : a -&gt; Str where a implements Bar\n\n# Implementing abilities for opaque types:\nFoo := U64 implements [Eq]\n</code></pre></div>\n<p>In the context of an ability definition, the <code>implements</code> keyword means \"The preceding name identifies an ability which can be implemented by providing the following functions\"</p>",
        "id": 365174589,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1686421225
    },
    {
        "content": "<p>One idea I had for disambiguating these use cases was to reserve a new keyword such as <code>implemented-with</code> to use instead of <code>implements</code> in ability definitions. I don't like reserving another keyword though, and that one is long and cumbersome.</p>",
        "id": 365174749,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1686421297
    },
    {
        "content": "<p>It occurred to me today that perhaps another approach would be to use a symbol or set of symbols, like all other type and value definitions use:</p>\n<div class=\"codehilite\"><pre><span></span><code># Value Def\nnice = 69\n\n# Type Def (alias)\nFoo : { bar : U64 }\n\n# Type Def (opaque)\nBaz := U64\n\n# Ability Def (???)\nSomeAbility :@ {\n    foo : a -&gt; Str where a implements SomeAbility,\n}\n</code></pre></div>",
        "id": 365175322,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1686421487
    },
    {
        "content": "<p>This seemed relevant to me because I think the first approach I suggested for implementing the braces requirement would make more sense if ability defs looked more like the other type annotations whose parsers live in <code>type_annotation.rs</code></p>",
        "id": 365175698,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1686421662
    },
    {
        "content": "<p>Anyway, the last few messages should probably be moved to #ideas &gt; Abilities Syntax. I wasn't even planning to bring that up until after we had a chance to use the new syntax for a while.</p>",
        "id": 365175953,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1686421777
    },
    {
        "content": "<p>Possibly related: </p>\n<p>When I add the <code>implements</code> keyword to <code>roc_parse::keyword::KEYWORDS</code>, the compiler chokes on ability definitions in the builtins.</p>",
        "id": 365176826,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1686422078
    },
    {
        "content": "<p>Does anybody have any advice on which direction to go in regards to parsing the braces? I’m not liking my first idea because an ability definition really isn’t a type annotation. I know I will also need to provide error messages for missing braces.</p>",
        "id": 365605276,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1686584673
    },
    {
        "content": "<p>I apologize for the parsing questions. I think I’d be much better off here if I had experience implementing a parser for a toy language. I suspect I’m getting a little tripped up simply because I haven’t worked with parsers before.</p>",
        "id": 365605745,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1686584763
    },
    {
        "content": "<p>have you taken a look at the <code>record!</code> macro in the parser? there are various places which use it, and I think that's what I would use here!</p>",
        "id": 365837291,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686655963
    },
    {
        "content": "<p>Thanks for the lead! I’ll take a look!</p>",
        "id": 365852040,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1686659219
    },
    {
        "content": "<p>cool, happy to help! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 365860205,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686661093
    },
    {
        "content": "<p>I’ve noticed special treatment of indentation for ability definitions. For example, <code>ability::demand_parser</code> takes an <code>ability::IndentLevel</code> and returns a parser which produces a <code>(u32, AbilityDemand)</code> value.</p>",
        "id": 367687219,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1687190126
    },
    {
        "content": "<p>Does adding braces around the list of demands change how we treat indentation here?</p>",
        "id": 367687753,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1687190249
    },
    {
        "content": "<p>It looks like I’m going to have to make more than a couple tweaks to get the types to work out for the <code>record!</code> macro, because the parsing logic for ability definitions seems different from most of the rest of the parsing logic.</p>",
        "id": 367688380,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1687190385
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"522634\">Bryce Miller</span> <a href=\"#narrow/stream/316715-contributing/topic/Updated.20Abilities.20Syntax/near/367687753\">said</a>:</p>\n<blockquote>\n<p>Does adding braces around the list of demands change how we treat indentation here?</p>\n</blockquote>\n<p>yeah I don't think we should have to care about indentation anymore after introducing the record literal <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 367700571,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1687193283
    },
    {
        "content": "<p>I see <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span>  and <span class=\"user-mention\" data-user-id=\"361169\">@Anton</span>  have merged my branch into main. I feel I owe you all a status update, and regret that I haven't done so before now. </p>\n<p>As you can see, I completed the <code>|</code> -&gt; <code>where</code> and <code>has</code> -&gt; <code>implements</code> changes. I have not yet completed the proposed addition of curly braces in ability definitions.  This is because I was getting tripped up  a lot in my attempts to implement the change, and my personal life has also been hairy. </p>\n<p>Realistically, I don't think I'll be able to implement the last part of the proposal. I apologize for not recognizing this and letting you know sooner.  I kept thinking that I might be able to try again and get it, so that we would have only one breaking syntax change instead of two. But alas, weeks have passed and nothing of the sort has happened.</p>\n<p>I could possibly manage it with a pairing session, but anyone who would pair with me on this could probably get it done faster alone.  I don't want to take anyone away from the other important things they are doing to make Roc awesome. Ergo, I think I'm going to need to pass the torch.</p>",
        "id": 384092364,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1691787720
    },
    {
        "content": "<p>hey no worries! I really appreciate all the work you did on it - you got the most valuable part done for sure!</p>",
        "id": 384095241,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1691788702
    },
    {
        "content": "<p>Glad I was able to help a little!</p>",
        "id": 384116255,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1691799263
    },
    {
        "content": "<p>I would say a lot! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 384116430,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1691799350
    },
    {
        "content": "<p>thanks again!</p>",
        "id": 384116443,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1691799358
    }
]