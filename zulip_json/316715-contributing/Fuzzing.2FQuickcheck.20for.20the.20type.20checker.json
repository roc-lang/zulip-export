[
    {
        "content": "<p>Similar to <a class=\"stream-topic\" data-stream-id=\"316715\" href=\"/#narrow/stream/316715-contributing/topic/generating.20a.20big.20Roc.20program.20for.20benchmarking\">#contributing &gt; generating a big Roc program for benchmarking</a>, it would be helpful to have some mechanism for generating Roc programs with certain semantic properties, to check that the compiler is correctly validating or invalidating those properties. Here are a few examples of properties that would be useful for us to check:</p>\n<ul>\n<li>\n<p>We have a few algorithms for determining specializations of abilities whose correctness is assumed, but hasn't been verified to a significant extent. It would be helpful for us to generate programs that use a lot of abilities, and make sure that the compiler is able to resolve their specializations correctly (if it can't, that means it's possible to write programs that are impossible to compile - that's not good!)</p>\n</li>\n<li>\n<p>In the past couple months we've run into a few holes in the exhaustiveness checker that we've patched. It would be nice to have a way to generate <code>when</code> expressions whose exhaustiveness status we know, and validate that the compiler checks their exhaustiveness the same way.</p>\n</li>\n<li>\n<p>One of Roc's goals is to compile and run programs in the presence of type errors, at least as far as they can without getting stuck. However, today, a lot of programs with type errors cause the compiler to crash because those type errors break invariants in latter phases of the compiler. We have many known issues regarding such crashes, but later down the road, it could be useful to generate programs with type errors, and make sure Roc can compile them without crashing!</p>\n</li>\n</ul>\n<p>All of these are things I'm very interested in exploring more, so if anyone would be interested in helping explore them, I'd be more than happy to assist.</p>",
        "id": 294890661,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1661268177
    },
    {
        "content": "<p>Just a note, we have some parser fuzzing setup, but I don't think it works anymore. I think it is easy to fix, but then you just hit panics in parsing super quick, so it isn't very useful.</p>",
        "id": 294897302,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1661270067
    },
    {
        "content": "<p>So would have to be a lot smarter than fuzzing currently. Otherwise it will just find our current todos and other panics.</p>",
        "id": 294897445,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1661270114
    },
    {
        "content": "<p>Yeah, ideally we would generate ASTs with certain properties</p>",
        "id": 294897543,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1661270147
    },
    {
        "content": "<p>I remember looking at trying to generate an AST for fuzzing, but didn't want to deal with all of the bumpalo and references. Makes things a lot lot more annoying to generate.</p>",
        "id": 294897759,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1661270203
    },
    {
        "content": "<p>Was looking at setting up random AST to formatter to parser and finally back to AST.</p>",
        "id": 294897846,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1661270228
    },
    {
        "content": "<p>yes very true. It may be easier to generate the canonical AST, since that is a much smaller AST surface</p>",
        "id": 294897908,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1661270248
    },
    {
        "content": "<p>though that doesn't really cover cases needed for the formatter</p>",
        "id": 294897946,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1661270260
    }
]