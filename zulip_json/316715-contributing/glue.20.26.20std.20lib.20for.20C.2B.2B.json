[
    {
        "content": "<p>In the <code>roc</code> repo we have a Rust implementation of the Roc standard library data structures, at <a href=\"https://github.com/roc-lang/roc/tree/main/crates/roc_std/\">crates/roc_std/</a><br>\nI've been working on a C++ version at <a href=\"https://github.com/brian-carroll/roc-std-cpp\">https://github.com/brian-carroll/roc-std-cpp</a><br>\nOne of the reasons C++ is useful is that we can build on it to expand our bindings for Node and Ruby.<br>\nAfter discussing with <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span>  I'm going to make a PR to move this into the <code>roc</code> repo. It may eventually get moved somewhere else.</p>",
        "id": 406922918,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1702119596
    },
    {
        "content": "<p>I'm wondering how to organise it though.<br>\nThere is no glue yet, just the std lib: Str, List, Dict, Box, and Result.<br>\nIt has a <code>src</code> and <code>test</code> directory, and a Makefile.<br>\nSo where to put this stuff?<br>\nIt's not a \"crate\" because it's not Rust. So maybe not in <code>crates/roc_std</code>? Or maybe it <em>does</em> go there because it logically implements the same thing?<br>\nWe have a Zig version of the std lib because that's part of the <em>real</em> std lib! And that lives in <code>crates/compiler/builtins</code>.</p>",
        "id": 406923870,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1702120195
    },
    {
        "content": "<p>So we don't really have a pattern that generalises at the moment.</p>",
        "id": 406923920,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1702120208
    },
    {
        "content": "<p>This is the first time we've had an implementation in a \"truly foreign\" language that isn't used to actually build Roc itself.</p>",
        "id": 406923935,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1702120221
    },
    {
        "content": "<p>One possibility would be to make it a subdirectory of <code>crates/glue</code> because that's kinda what we need it for.<br>\nI think longer term we probably will have a <code>CppGlue.roc</code> that will import the C++ header files as strings and write them into a final <code>roc_glue.h</code>.</p>",
        "id": 406924140,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1702120411
    },
    {
        "content": "<p>When we do get around to generating C++ glue, we'll have to decide whether it generates two files (.cpp and .h) or one (a header-only library). Or maybe you could let the user configure that? I don't work with C++ at all so I'm not very familiar with the pros and cons.</p>",
        "id": 406926301,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1702122217
    },
    {
        "content": "<p>Maybe we could detect that from the output filename. If you specify .cpp then you get .h as well. If you specify .h then that's all you get.</p>",
        "id": 406926567,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1702122398
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"431893\">Brian Carroll</span> <a href=\"#narrow/stream/316715-contributing/topic/glue.20.26.20std.20lib.20for.20C.2B.2B/near/406924140\">said</a>:</p>\n<blockquote>\n<p>One possibility would be to make it a subdirectory of <code>crates/glue</code> because that's kinda what we need it for.<br>\nI think longer term we probably will have a <code>CppGlue.roc</code> that will import the C++ header files as strings and write them into a final <code>roc_glue.h</code>.</p>\n</blockquote>\n<p>yeah I think that's the most logical place! <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 406928964,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1702124109
    },
    {
        "content": "<p>Cool. I opened a PR there.<br>\nNow I'm off to my stag (bachelor) party <span aria-label=\"partying face\" class=\"emoji emoji-1f973\" role=\"img\" title=\"partying face\">:partying_face:</span></p>",
        "id": 406929769,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1702124752
    },
    {
        "content": "<p>awesome, enjoy!!! <span aria-label=\"cowboy\" class=\"emoji emoji-1f920\" role=\"img\" title=\"cowboy\">:cowboy:</span></p>",
        "id": 406932199,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1702126735
    },
    {
        "content": "<p>Love that someone is working on cpp support. Something I've been loosely considering is trying react native turbo modules in roc (probably way lower overhead than doing a wasm build), and bridging through to rust was gonna be a hassle</p>",
        "id": 406960283,
        "sender_full_name": "Pearce Keesling",
        "timestamp": 1702145384
    },
    {
        "content": "<p>Coming back to this after a while...<br>\nThe <a href=\"https://github.com/roc-lang/roc/pull/6230\">PR</a> is failing CI with a mysterious bug that only seems to happen when compiling with Clang 11.1, which, for some reason, is what we are using in Nix.<br>\nSo I'm wondering - why are we on such an old version of Clang? This seems to imply that we have two different LLVM versions in Nix, which seems a bit heavy.</p>",
        "id": 408433768,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1702811429
    },
    {
        "content": "<p>It would certainly be nice to support old C++ compilers at some point. I'm sure they are still in use. But I am not keen to bundle that work into this first PR. The intent was just to copy stuff across from my own repo to the Roc repo. I don't have time to do more work on this at the moment. And I have not been able to isolate or fix this issue by changing the source code.</p>",
        "id": 408434013,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1702811651
    },
    {
        "content": "<p>my guess is just that it's not intentional, and upgrading clang versions would be fine <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 408437200,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1702814719
    },
    {
        "content": "<p>Yeah that's what I thought</p>",
        "id": 408438473,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1702816003
    },
    {
        "content": "<p>I'll try to upgrade today</p>",
        "id": 408571397,
        "sender_full_name": "Anton",
        "timestamp": 1702892569
    }
]