[
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/pull/7897\">7897</a>: Handle parsing ambiguous nodes</p>",
        "id": 526280766,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751215169
    },
    {
        "content": "<p>Starting work on updating if-else:</p>\n<ul>\n<li>Canonicalization: Don't use <code>predictNodeIndex</code></li>\n<li>Type Checking: Stop cascading failures, better error messages</li>\n</ul>",
        "id": 526292519,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1751228185
    },
    {
        "content": "<p>Just a note on the above, I'll be touching huge swaths of check/parse/AST.zig, a good bit of check/parse/NodeStore.zig, and a bit of check/parse/Parser.zig.  If you could check in with me about changes there that will be coming in within the next week, it would be helpful to avoid a very painful merge conflict.</p>\n<p>I do aim to merge the most impactful stuff to AST and NodeStore as soon as I have tests passing</p>",
        "id": 526296196,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751232417
    },
    {
        "content": "<p>I'm getting rid of other uses of <code>predictNodeIndex</code></p>",
        "id": 526297099,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751233827
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"781658\">@Anthony Bullard</span> would you mind looking at <a href=\"https://github.com/roc-lang/roc/pull/7898\">https://github.com/roc-lang/roc/pull/7898</a> does that impact on your parser work?</p>",
        "id": 526298030,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751235008
    },
    {
        "content": "<p>I'm wanting to finish my crusade to add a single unit test per Can NodeStore add/get variant to verify they roundtrip correctly.</p>",
        "id": 526298390,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751235452
    },
    {
        "content": "<p>I'm working on <code>SingleQuote</code> tokenization and possibly parsing <span class=\"user-mention\" data-user-id=\"781658\">@Anthony Bullard</span> it will likely interfere with you changes. although the conflicts shouldn't be very big</p>",
        "id": 526363265,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1751277525
    },
    {
        "content": "<p>Also, I plan to make <code>tokenizer.zig</code> use <code>Region</code>s in relevant places in a separate pr</p>",
        "id": 526363513,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1751277593
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"584248\">@Kiryl Dziamura</span> I don't think there is work to do here...Maybe I'm wrong.  But the main thing that needs to be done is adding a node for it in the Parser and actually parsing it.</p>",
        "id": 526380928,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751283826
    },
    {
        "content": "<p>The tokenization is happening here: <a href=\"https://github.com/roc-lang/roc/blob/259b290c2a39e45f683d329d16ba2963cec13c68/src/check/parse/tokenize.zig#L980\">https://github.com/roc-lang/roc/blob/259b290c2a39e45f683d329d16ba2963cec13c68/src/check/parse/tokenize.zig#L980</a></p>",
        "id": 526381042,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751283868
    },
    {
        "content": "<p>and it lacks return after this line:<br>\n<a href=\"https://github.com/roc-lang/roc/blob/259b290c2a39e45f683d329d16ba2963cec13c68/src/check/parse/tokenize.zig#L999\">https://github.com/roc-lang/roc/blob/259b290c2a39e45f683d329d16ba2963cec13c68/src/check/parse/tokenize.zig#L999</a></p>",
        "id": 526381116,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1751283894
    },
    {
        "content": "<p>Oh, I didn't even see that!  Great catch!</p>",
        "id": 526381449,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751284004
    },
    {
        "content": "<p>Planning on starting type checking on match statements once Luke's draft PR lands</p>",
        "id": 526495290,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1751322590
    },
    {
        "content": "<p>I may get the Can for match (at least with current supported syntax) done by your time tomorrow. Somewhat tempted to take a detour and cleanup the snapshot mess I'm feeling like I've contributed to</p>",
        "id": 526496285,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751323125
    },
    {
        "content": "<p>started working on <code>tokenize.zig</code> cleanup related to offsets (the goal is to use regions if they don't introduce any penalty):<br>\n<a href=\"https://github.com/roc-lang/roc/pull/7917\">https://github.com/roc-lang/roc/pull/7917</a></p>",
        "id": 526574565,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1751365203
    },
    {
        "content": "<p>Generally question about the above PR. Why are we starting lengths in the tokenizer at all?</p>",
        "id": 526632212,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751383060
    },
    {
        "content": "<p>Retpkenizing should be essentially free.</p>",
        "id": 526632302,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751383085
    },
    {
        "content": "<p>So why not only store the offset and leave regions to later parts of the stack. Even later parts of the stack likely could just reference two token indices and then just request the start and end from the two tokens.</p>",
        "id": 526632569,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751383159
    },
    {
        "content": "<p>Not saying that is the best setup, but curious our strategy here</p>",
        "id": 526632836,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751383227
    },
    {
        "content": "<p>I guess <code>interned</code> is the reason? maybe it's redundant tho</p>",
        "id": 526635165,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1751383856
    },
    {
        "content": "<p>Also, whitespaces are skipped, I think without end offset we'd have to collect all gaps as tokens</p>",
        "id": 526645085,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1751387275
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"341568\">Jared Ramirez</span> <a href=\"#narrow/channel/316715-contributing/topic/Worklog.20.28Draft.20PRs.20and.20coordination.29/near/526495290\">said</a>:</p>\n<blockquote>\n<p>Planning on starting type checking on match statements once Luke's draft PR lands</p>\n</blockquote>\n<p>Working on canonicalization + type checking for <code>match</code></p>",
        "id": 526678489,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1751401730
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"341568\">@Jared Ramirez</span> are you building on top of my branch? Does it look ok to merge as is?</p>",
        "id": 526683346,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751404191
    },
    {
        "content": "<p>Yeah, it looks good to me!</p>",
        "id": 526683980,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1751404509
    },
    {
        "content": "<p>I've been mostly reading about exhaustiveness checking so far, haven't written any code yet. But was planning on starting with error messages until your branch is merged!</p>",
        "id": 526684163,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1751404604
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/pull/7919\">#7919</a> -- I've started adding a roc package. I'm thinking about and exploring how we will do multi file snapshots. Also wanting more realistic examples to test our parser/can implementation against to understand what areas need work still. </p>\n<p>My current line of thinking is we make a directory that represents the root, with the <code>.roc</code> files in it exactly as they would be.</p>\n<p>Until we get multiple module things up and running, I might have the snapshot tool just pickup these <code>.roc</code> files and treat them as independent <code>file</code> type snapshots and generate a <code>.md</code> for each...</p>",
        "id": 526692024,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751409214
    },
    {
        "content": "<p>I'm going to start investigating support for Nominal Tag Unions.</p>\n<p>PR <a href=\"https://github.com/roc-lang/roc/pull/7922\">https://github.com/roc-lang/roc/pull/7922</a></p>",
        "id": 526700255,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751415682
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/pull/7923\">#7923</a> - draft of making effectful functions work (and not use a type variable anymore!) along with some type inference fixes and other miscellaneous improvements</p>",
        "id": 526709585,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751423348
    },
    {
        "content": "<p>I've started refactoring CIR a little... <a href=\"https://github.com/roc-lang/roc/pull/7925\">https://github.com/roc-lang/roc/pull/7925</a>. Basically pulling the obvious parts into separate files (Expressions, Statements, Patterns, TypeAnnotations etc), adding doc comments and examples. etc.</p>\n<p>I've been researching how to implement new features like nominal types, and figure I may as well clean up and document everything as I learn more. It's easier for me to understand how things are wired together when it's organised, and hopefully helps the next guy that comes along too.</p>\n<p>I can keep this in Draft and rebase it until <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> and <span class=\"user-mention\" data-user-id=\"341568\">@Jared Ramirez</span> land those two PRs sometime tomorrow (my time) I assume, I'm not tracking anyone else working in CIR right now.</p>",
        "id": 526787590,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751458513
    },
    {
        "content": "<p>I've rebased this CIR refactor on main. I'll continue poking at it for a few hours. Please avoid making PR's that touch CIR unless your basing off this branch.</p>",
        "id": 526893632,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751499052
    },
    {
        "content": "<p>I'm taking a look at type checking binops. Are all of the following, minus <code>and</code>, <code>or</code>, <code>pipe_forward</code> and <code>null_coalesce</code> going use static dispatch?</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"c1\">/// Binary operators available in Roc.</span>\n<span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">Op</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">enum</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">add</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// +</span>\n<span class=\"w\">    </span><span class=\"n\">sub</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// -</span>\n<span class=\"w\">    </span><span class=\"n\">mul</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// *</span>\n<span class=\"w\">    </span><span class=\"n\">div</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// /</span>\n<span class=\"w\">    </span><span class=\"n\">rem</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// %</span>\n<span class=\"w\">    </span><span class=\"n\">lt</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// &lt;</span>\n<span class=\"w\">    </span><span class=\"n\">gt</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// &gt;</span>\n<span class=\"w\">    </span><span class=\"n\">le</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// &lt;=</span>\n<span class=\"w\">    </span><span class=\"n\">ge</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// &gt;=</span>\n<span class=\"w\">    </span><span class=\"n\">eq</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// ==</span>\n<span class=\"w\">    </span><span class=\"n\">ne</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// !=</span>\n<span class=\"w\">    </span><span class=\"n\">pow</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// ^</span>\n<span class=\"w\">    </span><span class=\"n\">div_trunc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// //</span>\n<span class=\"w\">    </span><span class=\"err\">@</span><span class=\"s\">\"and\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// and</span>\n<span class=\"w\">    </span><span class=\"err\">@</span><span class=\"s\">\"or\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// or</span>\n<span class=\"w\">    </span><span class=\"n\">pipe_forward</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// |&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">null_coalesce</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// ?</span>\n<span class=\"p\">};</span>\n</code></pre></div>",
        "id": 527029670,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1751557974
    },
    {
        "content": "<p><code>pipe_forward</code> should be <code>-&gt;</code> instead of <code>|&gt;</code> (and prob could use a different name)</p>",
        "id": 527032371,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751558836
    },
    {
        "content": "<p>it doesn't use static dispatch</p>",
        "id": 527032378,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751558839
    },
    {
        "content": "<p>it's just sugar for a normal function call</p>",
        "id": 527032408,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751558848
    },
    {
        "content": "<p>(maybe <code>arrow_call</code> might be a better name?)</p>",
        "id": 527032422,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751558854
    },
    {
        "content": "<p>e.g. <code>arg1-&gt;my_fn(arg2, arg3)</code> does the same thing as <code>my_fn(arg1, arg2, arg3)</code></p>",
        "id": 527032543,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751558893
    },
    {
        "content": "<p><code>null_coalesce</code> also doesn't use static dispatch, and should be renamed to something like <code>return_err</code></p>",
        "id": 527032659,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751558932
    },
    {
        "content": "<p>it works like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">answer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">my_result</span><span class=\"o\">?</span>\n</code></pre></div>\n<p>...is equivalent to:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">answer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">my_result</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">val</span>\n<span class=\"w\">    </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 527032783,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751558974
    },
    {
        "content": "<p>or maybe <code>postfix_question_mark</code> if we want to name it based on how it looks <span aria-label=\"smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 527032910,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751559020
    },
    {
        "content": "<p>btw I definitely want to make it so that if we get type mismatches with these, we report them using the binop names (since that's what was in the source code) rather than the functions they effectively desugar to!</p>",
        "id": 527033117,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751559083
    },
    {
        "content": "<p>like if I write <code>+</code> or <code>?</code> in my code, I should see <code>+</code> or <code>?</code> in the error message (and not just in the source code snippet, but in the words too!)</p>",
        "id": 527033216,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751559113
    },
    {
        "content": "<p>okay cool, since no desugaring has happened by type checking, nice error messages should be straightforward here</p>",
        "id": 527035607,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1751560008
    },
    {
        "content": "<p><del>then <code>?</code> shouldn't actually be a binop, since it's really just a suffix? Maybe I should remove it?</del></p>",
        "id": 527035823,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1751560090
    },
    {
        "content": "<p>true</p>",
        "id": 527035890,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751560110
    },
    {
        "content": "<p>Maybe this <code>null_coalesce</code> was ported from the older <code>??</code> or optional record fields?</p>",
        "id": 527035898,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1751560113
    },
    {
        "content": "<p>ohh</p>",
        "id": 527035922,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751560121
    },
    {
        "content": "<p>yeah <code>??</code> is totally a binop</p>",
        "id": 527035935,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751560125
    },
    {
        "content": "<p>that's like <code>Result.withDefault</code> right?</p>",
        "id": 527035984,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1751560141
    },
    {
        "content": "<p>kinda - it's also not static dispatch, but rather a <code>match</code> sugar:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">answer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">my_result</span><span class=\"w\"> </span><span class=\"o\">??</span><span class=\"w\"> </span><span class=\"mi\">5</span>\n</code></pre></div>\n<p>...is equivalent to:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">answer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">my_result</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">val</span>\n<span class=\"w\">    </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"mi\">5</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 527036109,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751560186
    },
    {
        "content": "<p>the distinction matters if you want to use it with things that affect control flow, like <code>?? return 5</code> or <code>?? crash \"blah\"</code></p>",
        "id": 527036176,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751560210
    },
    {
        "content": "<p>whereas if it just desugared to actual <code>.with_default</code>, those use cases wouldn't work</p>",
        "id": 527036238,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751560233
    },
    {
        "content": "<p>I'd like to re-attack Nominal Types. </p>\n<p>Before I can do that we need to support parsing multiple <code>UpperIdent</code> separated by <code>Comma</code> tokens, and also a package prefix, e.g. <code>json.Core.Utf8.Encoder</code> might be an example of the <code>Encoder</code> type declaration (presumably nominal but could be an alias) in the <code>Core/Utf8.roc</code> module inside the <code>json</code> package.</p>",
        "id": 527091769,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751590655
    },
    {
        "content": "<p>I've pushed my WIP to <a href=\"https://github.com/roc-lang/roc/pull/7931\">https://github.com/roc-lang/roc/pull/7931</a></p>\n<p>I think it's looking ok, but I'm still working through the diffs in the snapshots and picking up minor bugs that I'm fixing.  I've ran out of time today to finish this... I should be able to pick it up again Sat evening.</p>",
        "id": 527120202,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751613164
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"781658\">@Anthony Bullard</span> there are changes in here in the Parser and AST/NodeStore to support parsing of qualified types and values in packages/module chains.</p>",
        "id": 527120352,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751613254
    },
    {
        "content": "<p>Hey! I continue reading the codebase. Now I have some questions regarding parsing. can you please take a look <a href=\"https://github.com/roc-lang/roc/pull/7936/files\">https://github.com/roc-lang/roc/pull/7936/files</a> ?</p>",
        "id": 527141624,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1751621118
    },
    {
        "content": "<p>I was looking at switching our build script back to a proper <code>check</code> step. On top of that, making <code>check</code> cover all executables and tests, but then having smaller steps for faster checking. The most relevant probably being <code>check-test</code> which would likely be a solid default for most work. One thing that still annoys me with how zig/zls currently do checking is that if you have multiple check targets that include the same source, you get a ton of repeated error mesages. So for every executable, we get another copy of each error message. Theoretically the fix for this is to use more modules. That way the executables just import our \"main\" module and the \"main\" module runs check once on all the files it contains. I haven't tried factoring this way yet, but I want to make some of this nicer overall (though it would require a refactoring of imports).</p>\n<p>Have a draft PR for at least some starter work as I think of better factoring: <a href=\"https://github.com/roc-lang/roc/pull/7942\">https://github.com/roc-lang/roc/pull/7942</a></p>",
        "id": 527237072,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751669541
    },
    {
        "content": "<p>Not actually sure this is the right way to go, just tinkering and trying to match what zls suggests.</p>",
        "id": 527237406,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751669986
    },
    {
        "content": "<p>I feel like adding support for qualified Idents, and Nominal Types (including recursive) has been a mighty big yak.</p>",
        "id": 527264387,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751704231
    },
    {
        "content": "<p>I've gotten to the home stretch a few times now, and then noticed a bug which has taken me down another rabbit hole.</p>",
        "id": 527264444,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751704290
    },
    {
        "content": "<p>I got type instantiation landed, but it needs a refactor. gonna do that next.</p>",
        "id": 527277878,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751719984
    },
    {
        "content": "<p>Gonna work on checking nominal types next.</p>\n<p>Thinking a next mini-milestone for me might be: after nominal type checking work, I might create a pared-down version of the bool.roc built-in file. Then canonicalize and type check that, and pass those types into the actual user roc file to to use the built-in Bool nominal type in type checking in things like if conditions.</p>",
        "id": 527290703,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1751731969
    },
    {
        "content": "<p>that sounds sweet!</p>",
        "id": 527296200,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751738814
    },
    {
        "content": "<p>if you wanted to get advanced, you could do the same with <code>List.roc</code> and implement it as a Cons list (just for now, of course)</p>",
        "id": 527296230,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751738852
    },
    {
        "content": "<p><span aria-label=\"alert\" class=\"emoji emoji-1f6a8\" role=\"img\" title=\"alert\">:alert:</span> PSA! <span aria-label=\"alert\" class=\"emoji emoji-1f6a8\" role=\"img\" title=\"alert\">:alert:</span> as of <a href=\"https://github.com/roc-lang/roc/pull/7949\">https://github.com/roc-lang/roc/pull/7949</a> we now have a new <code>EXPECTED</code> section of snapshots, which lists the <code>PROBLEMS</code> we expect to see in the rest of the snapshot (just the ALL CAPS name of the problem and the source region, not the entire error message)</p>\n<p>the goal here is just that if we  accidentally cause regressions in our snapshots, this will let us know! (If we actually make fixes and reduce the reported <code>PROBLEMS</code>, then we can update the snapshot with a revised <code>EXPECTED</code> section.) And since it doesn't verify the <em>entire</em> contents of the snapshot, just the errors reported, it shouldn't give us false positives for things like refactors that change ident numbers etc.</p>",
        "id": 527296384,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751739045
    },
    {
        "content": "<p>Wow, that PR hits more files than I expected...we have way more snapshots than I realized.</p>",
        "id": 527296465,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751739146
    },
    {
        "content": "<p>in the future we could maybe also do something with like verifying expected types of things</p>",
        "id": 527296468,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751739147
    },
    {
        "content": "<p>yeah we've accumulated a lot of them already <span aria-label=\"smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 527296478,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751739158
    },
    {
        "content": "<p>many of them have problems though</p>",
        "id": 527296490,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751739172
    },
    {
        "content": "<p>(as in, unintentional ones, e.g. because we haven't implemented things yet, or in some cases because they're using old syntax)</p>",
        "id": 527296512,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751739195
    },
    {
        "content": "<p>I've been talking with <span class=\"user-mention\" data-user-id=\"453336\">@Joshua Warner</span> about the snapshots. I've started reviewing all of the old-syntax ones and I'm going through and deleting any that I think are not helpful, and updating the ones I think are useful. </p>\n<p>I still plan on implementing Can for <code>where</code>, but just taking a quick detour to clean up that snapshots a little. I got a bit carried away just converting them all using a script, and didn't take the time to properly review them.</p>",
        "id": 527330377,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751788343
    },
    {
        "content": "<p>I appreciate that! now that we have <code>EXPECTED</code> in there, would also be great to review those</p>",
        "id": 527347493,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751808924
    },
    {
        "content": "<p>right now I set it so that all the <code>EXPECTED</code> fields just line up with the current <code>PROBLEMS</code></p>",
        "id": 527347513,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751808947
    },
    {
        "content": "<p>but we should review whether they're actually correct</p>",
        "id": 527347517,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751808953
    },
    {
        "content": "<p>e.g. I've already seen quite a few where the snapshot seems to be trying to verify one thing, but actually it gets derailed by a syntax error (which is reported in <code>PROBLEMS</code>, at least!) which causes it to not actually be type-checked (or whatever thing it's actually trying to test)</p>",
        "id": 527347654,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751809088
    },
    {
        "content": "<p>I'm gonna start working on canonicalizing and type-checking other modules (e.g. imports, exposing, etc.)</p>",
        "id": 527387971,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751853261
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"341568\">@Jared Ramirez</span> since I saw you had a commit involving <code>canonicalizeHeaderExposes</code> yesterday! <span aria-label=\"smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 527387998,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751853284
    },
    {
        "content": "<p>Tomrrow will work can/type checking for type arguments in nominal tags</p>",
        "id": 527402778,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1751866653
    },
    {
        "content": "<p>If we're happy with <code>where</code> clause for now. I'm thinking of digging into the issues from our realistic example <code>src/snapshots/plume_package/Color.md</code>. It looks like we need to investigate;</p>\n<ul>\n<li>single quotes in patterns, </li>\n<li>nominal tags with payloads, </li>\n<li>interpolated strings in tag payloads, </li>\n<li>and top-level expect</li>\n</ul>",
        "id": 527574482,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751927048
    },
    {
        "content": "<p>I’m currently working on nominal tag payloads!</p>",
        "id": 527576726,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1751927871
    },
    {
        "content": "<p>I'd like to change canonicalize/NodeStore.addExpr to return an error...</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"c1\">// FROM</span>\n<span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">addExpr</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">NodeStore</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">expr</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">CIR</span><span class=\"p\">.</span><span class=\"n\">Expr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">CIR</span><span class=\"p\">.</span><span class=\"n\">Expr</span><span class=\"p\">.</span><span class=\"n\">Idx</span>\n<span class=\"c1\">// TO</span>\n<span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">addExpr</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">NodeStore</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">expr</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">CIR</span><span class=\"p\">.</span><span class=\"n\">Expr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">mem</span><span class=\"p\">.</span><span class=\"n\">Allocator</span><span class=\"p\">.</span><span class=\"n\">Error</span><span class=\"o\">!</span><span class=\"n\">CIR</span><span class=\"p\">.</span><span class=\"n\">Expr</span><span class=\"p\">.</span><span class=\"n\">Idx</span>\n</code></pre></div>\n<p>But I'd like to merge all these PR's that touch Can first to avoid a conflict</p>",
        "id": 527587055,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751935513
    },
    {
        "content": "<p>Why? I thought OOMs were deemed unrecoverable errors. Mostly curious cause if we want this, we probably should be consistent across the compiler.</p>",
        "id": 527594825,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751942298
    },
    {
        "content": "<p>Richard has said he would like to use this pattern more.</p>",
        "id": 527594905,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751942380
    },
    {
        "content": "<p>I'm not sure where. But <span class=\"user-mention\" data-user-id=\"341568\">@Jared Ramirez</span> and I have been slowly converting to use the zig errors like this.</p>",
        "id": 527594937,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751942417
    },
    {
        "content": "<p>I guess it's more explicit at the callsite that the function is allocating</p>",
        "id": 527595013,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751942497
    },
    {
        "content": "<p>yeah, that plus also I think there may be an increasing number of cases where we're only using allocation for <code>Problems</code></p>",
        "id": 527595153,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751942685
    },
    {
        "content": "<p>and in those cases I think it would be interesting to have <code>Problems</code> record an \"OOM Problem\" and stop recording further problems</p>",
        "id": 527595200,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751942717
    },
    {
        "content": "<p>which would mean that pushing to <code>Problems</code> could stop having allocation errors, and then it would be more useful to see which things are allocating and which ones aren't</p>",
        "id": 527595288,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751942802
    },
    {
        "content": "<p>separately, I also like the idea of actually knowing what will happen in resource-constrained environments, e.g. we could offer a CLI flag for constraining how much memory the interpreter can use when evaluating compile-time constants, we could have a better UX in wasm (e.g. in the playground) if we want to limit total memory usage in the browser and be able to more gracefully handle OOMs etc.</p>",
        "id": 527595384,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751942925
    },
    {
        "content": "<p>I thought to myself ... it should be nice and easy to implement Can for these guys;</p>\n<div class=\"codehilite\"><pre><span></span><code>dbg x\ncrash &quot;msg&quot;\nexpect 1 == 1\nreturn x\n</code></pre></div>\n<p>Turns into another massive Yak <span aria-label=\"melt\" class=\"emoji emoji-1fae0\" role=\"img\" title=\"melt\">:melt:</span></p>",
        "id": 527606876,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751952741
    },
    {
        "content": "<p>Starting looking at de-structuring record sub-patterns, going on another tangent with record update syntax, <code>as</code> patterns, and pattern alternatives. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 527654497,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751971188
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/pull/7979\">#7979</a> -- WIP implement module caching. </p>\n<p>Currently we have a unit test that round-trips a whole module, and we added a verification test for every snapshot that serialises and deserialises from memory and compares the SExpr matches.</p>\n<p>Next steps are to cleanup some of the serialisation logic (type.Store looks particularly hairy), and wire up hashes and filesystem parts into <code>roc check</code>.</p>",
        "id": 527800203,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752030093
    },
    {
        "content": "<p>Lmk how I can help with types store! I'm also working on some changes in there related to aliases and nominal types, should hopefully MR tomorrow or thursday</p>",
        "id": 527803458,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1752033610
    },
    {
        "content": "<p>I also would like to reduce the number of backing arrays in <code>types.Store</code> too, which may be relevant</p>",
        "id": 527803587,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1752033671
    },
    {
        "content": "<p>I'll see if I can fix the valgrind issue and maybe we merge as is, and fixup the types.Store backing/serialization in a follow up</p>",
        "id": 527804085,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752034036
    },
    {
        "content": "<p>It's taking a little while, I can't run valgrind on my mac so doing what I can and then throwing at CI to test.</p>",
        "id": 527806653,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752036594
    },
    {
        "content": "<p>Turns out the cleanup I had in mind is just the remedy I think for our valgrind issues <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 527806875,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752036806
    },
    {
        "content": "<p>Today I have been down the alignment rabbit hole -- I do not yet know if I will emerge victorious</p>",
        "id": 527818820,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752044007
    },
    {
        "content": "<p>I'm poking at the module caching again, there are some obvious improvements we should make. I just hacked something together to get it working yesterday, but would like to clean it up and simplify it a little today.</p>",
        "id": 527987784,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752110630
    },
    {
        "content": "<p>I've started working on unit tests to round-trip the AST <a href=\"https://github.com/roc-lang/roc/pull/8002\">https://github.com/roc-lang/roc/pull/8002</a></p>\n<p>I've experimented with using RNG to provide integers (deterministically) which I think significantly reduces boilerplate. </p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"c1\">// example using random helpers to reduce visual noise in the tests</span>\n<span class=\"k\">try</span><span class=\"w\"> </span><span class=\"n\">headers</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">AST</span><span class=\"p\">.</span><span class=\"n\">Header</span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">.{</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">packages</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rand_idx</span><span class=\"p\">(</span><span class=\"n\">AST</span><span class=\"p\">.</span><span class=\"n\">Collection</span><span class=\"p\">.</span><span class=\"n\">Idx</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">platform_idx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rand_idx</span><span class=\"p\">(</span><span class=\"n\">AST</span><span class=\"p\">.</span><span class=\"n\">RecordField</span><span class=\"p\">.</span><span class=\"n\">Idx</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">provides</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rand_idx</span><span class=\"p\">(</span><span class=\"n\">AST</span><span class=\"p\">.</span><span class=\"n\">Collection</span><span class=\"p\">.</span><span class=\"n\">Idx</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">region</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rand_region</span><span class=\"p\">(),</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p>I'm reasonably confident this will help with the Parser NodeStore refactor, as we're not touching the internal Node representation, just using the AST representation.</p>",
        "id": 528200823,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752212910
    },
    {
        "content": "<p>Up next on my immediate todo list is:</p>\n<ul>\n<li>Address <a href=\"https://github.com/roc-lang/roc/pull/7997\">PR</a> feedback from Richard </li>\n<li>Update types store to: use <code>Span</code> instead of <code>Range</code>, and flatten backing arrays (eg <code>tag_args</code>, <code>tuple_elems</code>, etc into a single array</li>\n<li>Look at canonicalize type annotations – we have both <code>canonicalizeTypeAnno</code> and <code>canonicalizeTypeAnnoToTypeVar</code>, but I suspect if we generate type vars correctly in <code>canonicalizeTypeAnno</code> we don't need this extra var conversion func, which would remove a step and I think dedup logic</li>\n<li>Update parse AST <code>tag</code> patterns to contain in qualifiers (to deal with pattern matching on nominal tag unions)</li>\n</ul>",
        "id": 528359751,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1752246666
    },
    {
        "content": "<p>^ FYI taking a detour to refactor Can to ensure that CIR nodes&lt;-&gt; type vars always match 1 to 1</p>",
        "id": 528417693,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1752277078
    },
    {
        "content": "<p>I'm probably going on a crusade tomorrow to eradicate <code>exitOnOom</code>, and anything else that is OS specific deeper in our compiler than the cli.</p>\n<p>This is in preparation for WASM -- so we can avoid a more painful extraction later.</p>",
        "id": 528521917,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752404343
    },
    {
        "content": "<p>Hey everyone. From my side, I started chipping away at the parse fuzz crashes that show up in <a href=\"https://roc-lang.github.io/roc-compiler-fuzz\">https://roc-lang.github.io/roc-compiler-fuzz</a>. The codebase is a treat to work with <span aria-label=\"100\" class=\"emoji emoji-1f4af\" role=\"img\" title=\"100\">:100:</span><br>\nI am also planning on configuring a machine to run the fuzzing myself.</p>",
        "id": 528522365,
        "sender_full_name": "JRI98",
        "timestamp": 1752404787
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/316715-contributing/topic/Worklog.20.28Draft.20PRs.20and.20coordination.29/near/528521917\">said</a>:</p>\n<blockquote>\n<p>I'm probably going on a crusade tomorrow to eradicate <code>exitOnOom</code>, and anything else that is OS specific deeper in our compiler than the cli.</p>\n<p>This is in preparation for WASM -- so we can avoid a more painful extraction later.</p>\n</blockquote>\n<p>Exiting is os specific?</p>",
        "id": 528527837,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752410992
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"639239\">JRI98</span> <a href=\"#narrow/stream/316715-contributing/topic/Worklog.20.28Draft.20PRs.20and.20coordination.29/near/528522365\">said</a>:</p>\n<blockquote>\n<p>I am also planning on configuring a machine to run the fuzzing myself.</p>\n</blockquote>\n<p>Awesome. Just make sure you are actually getting fuzzer coverage info when you do so. I know that afl++ and zig is a bit finicky.</p>",
        "id": 528527942,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752411115
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> yeah currently our impl prints to stdout</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">io</span><span class=\"p\">.</span><span class=\"n\">getStdErr</span><span class=\"p\">().</span><span class=\"n\">writer</span><span class=\"p\">().</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">format</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">catch</span><span class=\"w\"> </span><span class=\"k\">unreachable</span><span class=\"p\">;</span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">tracy</span><span class=\"p\">.</span><span class=\"n\">enable</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">tracy</span><span class=\"p\">.</span><span class=\"n\">waitForShutdown</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">catch</span><span class=\"w\"> </span><span class=\"k\">unreachable</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">process</span><span class=\"p\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n</code></pre></div>",
        "id": 528562976,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752446720
    },
    {
        "content": "<p>Ah... Duh</p>",
        "id": 528566292,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752450528
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/channel/316715-contributing/topic/Worklog.20.28Draft.20PRs.20and.20coordination.29/near/528521917\">said</a>:</p>\n<blockquote>\n<p>I'm probably going on a crusade tomorrow to eradicate <code>exitOnOom</code>, and anything else that is OS specific deeper in our compiler than the cli.</p>\n<p>This is in preparation for WASM -- so we can avoid a more painful extraction later.</p>\n</blockquote>\n<p>exitOnOom is invasive... this is going to be a mammoth PR that basically touches everything.</p>",
        "id": 528573139,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752457616
    },
    {
        "content": "<p>I tried to do a little bit or think about gradual migration... I'm currently going with the rip-the-bandaid off approach.</p>",
        "id": 528573221,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752457707
    },
    {
        "content": "<p>In a way it's easier this way, because I can quickly scan through code and see what needs to be updated. Anything that allocates should return <code>std.mem.Allocator.Error!...</code> etc</p>",
        "id": 528573299,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752457792
    },
    {
        "content": "<p>Thanks, I need morale support... this is a very mechanical change. Thank the Zig gods for making a fast compiler <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 528573840,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752458370
    },
    {
        "content": "<p>Might be a good job for claude or similar</p>",
        "id": 528576699,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752461042
    },
    {
        "content": "<p>If you aren't already done that is.</p>",
        "id": 528576706,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752461054
    },
    {
        "content": "<p>I think I'm probably way faster than Claude at this. It's pretty mechanical.</p>",
        "id": 528576885,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752461226
    },
    {
        "content": "<p>Also -- I wouldn't trust an LLM with this kind of refactor, how would you ever review the changes with any confidence... there is just waaay too many.</p>",
        "id": 528577210,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752461663
    },
    {
        "content": "<p>hmm. I haven't tested claude on this type of refactor, but it tends to do a great job with mechanical simple error driven things. Especially once you set up a base example.</p>\n<blockquote>\n<p>how would you ever review the changes with any confidence</p>\n</blockquote>\n<p>The same way I would review your code once you make the PR?</p>",
        "id": 528578144,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752462723
    },
    {
        "content": "<p>going to work on parsing utf8 escape seq in strings and single quote (<code>\\u(...)</code>)</p>",
        "id": 528618855,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1752484833
    },
    {
        "content": "<p>nice! I think we ended up using curly braces instead of parens for those in the old compiler (we should keep whatever syntax it uses)</p>",
        "id": 528635861,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752490887
    },
    {
        "content": "<p>I can't help myself it seems... still tweaking CSS for the playground.</p>",
        "id": 528856112,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752584637
    },
    {
        "content": "<p>This is why people shouldn't let me touch any CSS -- I have the same problems with PPT slides in case anyone was wondering.</p>",
        "id": 528856197,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752584659
    },
    {
        "content": "<p>I used to love hacking css so much that my over-engineered nonsense would end up on codepen's front page. but then I looked over the fence and found a healthy lifestyle without alcohol. now I can’t look at any css snippet without feeling pain. I even started thinking html tables were enough. just give me a11y. I don’t care about all your fancy dynamic layouts, animations, or endlessly improvable design systems. argh.</p>",
        "id": 528859333,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1752585493
    },
    {
        "content": "<p>Working on refactoring types store and type snapshots store to do less allocations</p>",
        "id": 528973163,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1752635935
    },
    {
        "content": "<p>Working on consolidating <code>canonicalizeTypeAnno</code> and <code>canonicalizeTypeAnnoToTypeVar</code> in Can</p>",
        "id": 529106166,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1752686815
    },
    {
        "content": "<p>Moving single quote contents validation from can to tokenize: <a href=\"https://github.com/roc-lang/roc/pull/8064/files\">https://github.com/roc-lang/roc/pull/8064/files</a><br>\n<span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> you mentioned you wanted to parse actual values values during tokenization, could you please clarify how you thought it to be implemented? create a new collection in module and put parsed numbers there in a similar to interned logic way?</p>",
        "id": 529264158,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1752753902
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"584248\">@Kiryl Dziamura</span> yeah like how we do it in canonicalization currently</p>",
        "id": 529281761,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752759578
    },
    {
        "content": "<p>basically put it in <code>extra</code> like we do with interned strings</p>",
        "id": 529281794,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752759587
    },
    {
        "content": "<p>(as in, add new entries to the <code>extra</code> union for in-memory numbers like <code>u8</code>, <code>i8</code>, etc.)</p>",
        "id": 529281914,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752759614
    },
    {
        "content": "<p><code>extra</code> takes 64 bits now, but we would need 128 for numbers?</p>",
        "id": 529282238,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1752759713
    },
    {
        "content": "<p>for bigger ones we can put them on the heap, like we do with interned strings</p>",
        "id": 529282312,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752759731
    },
    {
        "content": "<p>but almost all number literals should fit in 64 bits</p>",
        "id": 529282342,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752759740
    },
    {
        "content": "<p>yeah, I don't expect i128 be written as a literal (I hope it won't)</p>",
        "id": 529282465,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1752759775
    },
    {
        "content": "<p>we have <code>dec_small</code> for fitting float literals in less space</p>",
        "id": 529282472,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752759776
    },
    {
        "content": "<p>yeah I could actually see an argument for just storing 64-bit and smaller inline, and then if it's bigger than 64 bits, just store the full string</p>",
        "id": 529282651,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752759826
    },
    {
        "content": "<p>(which we'll need for arbitrary-sized int literals)</p>",
        "id": 529282682,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752759835
    },
    {
        "content": "<p>actually, do we really need to parse them straight away exactly for that reason? we don't know if the number is custom ahead of time. when we got there, we'd need to have normalized num literals rather than parsed numbers</p>",
        "id": 529283114,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1752759955
    },
    {
        "content": "<p>I mean, we likely need to parse them during tokenization as a normalized num literal (<code>NaN | +-Infinity | { value: +-digits, exponent: +-digits }</code>)</p>",
        "id": 529284095,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1752760245
    },
    {
        "content": "<p>we don't have it right now, but I think it means we need to convert the digits to actual number at canonicalization anyway, right?</p>",
        "id": 529284351,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1752760322
    },
    {
        "content": "<p>the plan is to never support infinity/-infinity/Nan literals; they are special constants exposed by the relevant modules</p>",
        "id": 529307748,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752766967
    },
    {
        "content": "<p>fair point about not knowing if the number is custom ahead of time, but 99.99% of the time they will be not custom and will fit in 64 bits, so I think we should optimize for that case and convert back if it turns out we were wrong <span aria-label=\"smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 529307991,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752767051
    },
    {
        "content": "<p>ok, so we want to get as much as we can from module file contents while it's in cache because later we want to touch heap anyway and it's better if this heap is optimized for the future cache rather than having random access to the module file contents via regions?</p>\n<p>I'm asking because I'm learning along the way. I'm not experienced in system level development so my questions may be... simple <span aria-label=\"smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 529309678,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1752767523
    },
    {
        "content": "<p>I'm looking at the build system with the goal to re-use modules for our different targets and also to help our generated docs be useful.</p>",
        "id": 529371456,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752796441
    },
    {
        "content": "<p>Refactoring to use modules and then setting up the tests to run on those modules has uncovered a heap of lurking bugs <span aria-label=\"bug\" class=\"emoji emoji-1f41b\" role=\"img\" title=\"bug\">:bug:</span></p>",
        "id": 529385966,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752810528
    },
    {
        "content": "<p>I've been working on the WASM playground again <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 529511664,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752864728
    },
    {
        "content": "<p>I'm working on Eval for Lambdas</p>",
        "id": 529651757,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752998622
    },
    {
        "content": "<p>I have the simplest of expressions working so far <code>(|x| x + 1)(5)</code> <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span>  -- but working on padding that out into something more complete</p>",
        "id": 529652003,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752998678
    },
    {
        "content": "<p>Taking a slight detour implementing unary_minus <code>-x</code> ... this Yak was just asking for a shave</p>",
        "id": 529679009,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753008055
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/pull/8085\">https://github.com/roc-lang/roc/pull/8085</a></p>",
        "id": 529680372,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753009676
    },
    {
        "content": "<p>I'm still working on interpreter Eval... I'm learning as I go and also getting distracted building debug tooling. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 530231138,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753221983
    },
    {
        "content": "<p>You can never have too much debug tooling :p</p>",
        "id": 530284492,
        "sender_full_name": "Anton",
        "timestamp": 1753258206
    },
    {
        "content": "<p>Goal: more lines of code in debug tools than in the compiler</p>",
        "id": 530348331,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1753278341
    },
    {
        "content": "<p>That honestly would probably actually be a good thing if the debug tooling was good</p>",
        "id": 530348433,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1753278369
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/pull/8104\">#8104</a> DRAFT PR implements closure captures for the interpreter. </p>\n<p>Tests are passing but I think there's some hacks in there we need to clean up. </p>\n<p>I'll definitely go through it myself again a few times. But if anyone else has time I would appreciate any thoughts.</p>",
        "id": 530559865,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753362491
    },
    {
        "content": "<p>I've made some progress on the interpreter (I think) ... haven't got all my tests passing yet. </p>\n<p>I also need to do a rebase on main now Richard's mammoth PR removing CIR landed.</p>\n<p>I'd love to have something working to share in the online meetup <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 530712448,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753429259
    },
    {
        "content": "<p>Ok, I've merged main into <a href=\"https://github.com/roc-lang/roc/pull/8104\">https://github.com/roc-lang/roc/pull/8104</a> so CI should pass now</p>",
        "id": 530842025,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753474435
    },
    {
        "content": "<p>I'm planning on continuing with my refactors to use proper Zig modules. Next I'm looking at Can and CheckTypes I think. It's not necessarily untangling the web of dependencies yet, but makes it much easier to refactor in future and also speed up compilation I think.</p>\n<p>I'm aware that the playground is a little broken in release builds -- I have plans to refactor it and remove the custom build pipeline and instead have the playground, snapshots, roc check etc all using the same <code>coordinate_simple</code> pipeline. I think this will be much more DRY and maintainable.</p>\n<p>Along with the playground changes I'd like to setup an e2e harness to run in CI and exercise our playground  interface. Now the actual web app itself is in a separate repository it will be good to avoid regressions across that boundary.</p>",
        "id": 531240600,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753662073
    },
    {
        "content": "<p>After all this, I'd love to get the REPL online... upgrade our CLI to use <a href=\"https://github.com/rockorager/libvaxis\">https://github.com/rockorager/libvaxis</a> and plug the REPL in etc with our reporting system to render reports etc. </p>\n<p>The key thing I've been thinking about here is making a nice abstraction for that that support both the playground REPL, and the cli REPL frontends. </p>\n<p>If anyone is interested in working on this let me know.</p>",
        "id": 531241251,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753662324
    },
    {
        "content": "<p>When are you planning starting on this refactor? I have some stuff in progress in can/type checking that I should wrap up this week</p>",
        "id": 531261449,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1753670917
    },
    {
        "content": "<p>I've almost finished the \"check\" module just now... about to make a PR for it. I can leave it in draft for you to look at</p>",
        "id": 531263193,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753671877
    },
    {
        "content": "<p>Here's the DRAFT <a href=\"https://github.com/roc-lang/roc/pull/8124\">https://github.com/roc-lang/roc/pull/8124</a></p>",
        "id": 531263792,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753672174
    },
    {
        "content": "<p>When I've done these migrations I've found things that were slipping through and not running with <code>zig build test</code>. For example this PR currently fails with this issue... which I was just looking into. </p>\n<div class=\"codehilite\"><pre><span></span><code>$ zig build test\ntest\n└─ run test\n   └─ zig test Debug native 3 errors\nsrc/collections/safe_list.zig:587:17: error: Cannot serialize non-POD type problem.Problem\n                @compileError(&quot;Cannot serialize non-POD type &quot; ++ @typeName(T));\n                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nsrc/collections/safe_list.zig:649:62: error: enum &#39;meta.FieldEnum(multi_array_list.MultiArrayList(problem.Problem).Elem__struct_41809)&#39; has no tag with value &#39;2&#39;\n                    const field_ptr = slice.items(@as(Field, @enumFromInt(i))).ptr;\n                                                             ^~~~~~~~~~~~~~~\n/Users/luke/zig-macos-aarch64-0.14.0/lib/std/meta.zig:544:12: note: enum declared here\n    return @Type(.{\n           ^~~~~\nsrc/check/snapshot.zig:391:36: error: expected type &#39;[]const snapshot.SnapshotTag&#39;, found &#39;multi_array_list.MultiArrayList(snapshot.SnapshotTag).Slice&#39;\n        return self.tags.sliceRange(range);\n               ~~~~~~~~~~~~~~~~~~~~^~~~~~~\n/Users/luke/zig-macos-aarch64-0.14.0/lib/std/multi_array_list.zig:70:27: note: struct declared here\n        pub const Slice = struct {\n                          ^~~~~~\nsrc/check/snapshot.zig:390:78: note: function return type declared here\n    pub fn getTagsSlice(self: *const Self, range: SnapshotTagSafeList.Range) []const SnapshotTag {\n                                                                             ^~~~~~~~~~~~~~~~~~~\nerror: the following command failed with 3 compilation errors:\n</code></pre></div>\n<p>I can hold off on this refactor if you would like.</p>",
        "id": 531264045,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753672298
    },
    {
        "content": "<p>Nice, no go ahead and I'll rebase based from your changes when they land. I don't wanna hold you up!</p>",
        "id": 531271528,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1753676936
    },
    {
        "content": "<blockquote>\n<p>upgrade our CLI to use <a href=\"https://github.com/rockorager/libvaxis\">https://github.com/rockorager/libvaxis</a> and plug the REPL in etc with our reporting system to render reports etc.</p>\n</blockquote>\n<p>Do we want to pay the price of adding this as a dependency? I'm not necessarily opposed to doing so, but it's worth considering</p>",
        "id": 531367614,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1753708505
    },
    {
        "content": "<p>Yeah, we discussed it during the meetup, we think it's too tedious to build that all ourselves. Maybe we could vendor it and cut it down a bit, I don't think we need zigimg for example.</p>",
        "id": 531374762,
        "sender_full_name": "Anton",
        "timestamp": 1753710331
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/316715-contributing/topic/Worklog.20.28Draft.20PRs.20and.20coordination.29/near/531240600\">said</a>:</p>\n<blockquote>\n<p>I'm planning on continuing with my refactors to use proper Zig modules. Next I'm looking at Can and CheckTypes I think. It's not necessarily untangling the web of dependencies yet, but makes it much easier to refactor in future and also speed up compilation I think.</p>\n</blockquote>\n<p>I'm obviously out of the loop for roc currently, but just curious around the why of this? Like what is the advantage of making build.zig a lot more complicated and tracking all the dependencies inside of it instead of leaving the compiler as a single module. Or like a few executables and then a single library module.</p>\n<p>Given zig does tree shaking, I'm not sure I understand the value of doing this.</p>",
        "id": 531388669,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1753713793
    },
    {
        "content": "<p>Also, I don't think modules would change compilation speed at all. At least not based on my understanding of how zig does compilation. (Zig always puts everything in a single compilation unit)</p>",
        "id": 531389139,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1753713916
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/316715-contributing/topic/Worklog.20.28Draft.20PRs.20and.20coordination.29/near/527237072\">said</a>:</p>\n<blockquote>\n<p>hat way the executables just import our \"main\" module and the \"main\" module runs check once on all the files it contains. I haven't tried factoring this way yet, but I want to make some of this nicer overall (though it would require a refactoring of imports).</p>\n</blockquote>\n<p>I probably misunderstood your message here, but this is why I started refactoring to use modules.</p>",
        "id": 531472156,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753741125
    },
    {
        "content": "<p>I only quickly skimmed your PR earlier, but it look like you were introducing a bunch of modules.</p>\n<p>I would not add a check and base and collections and etc module. I would make 1 singular lib module.</p>",
        "id": 531487936,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1753749977
    },
    {
        "content": "<p>Then 1 module for every executable (which we already have I believe)</p>",
        "id": 531487970,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1753749989
    },
    {
        "content": "<p>I'll look into it</p>",
        "id": 531489081,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753750738
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"341568\">@Jared Ramirez</span> <span class=\"user-mention\" data-user-id=\"639239\">@JRI98</span> -- I'm tracking your PR's but planning on merging the cleanup in <a href=\"https://github.com/roc-lang/roc/pull/8124\">https://github.com/roc-lang/roc/pull/8124</a> first. That restores a significant number of our unit tests. </p>\n<p>Just need to find some time to dig into the CI failures... it looks like some memory leaks need to be addressed.</p>",
        "id": 531718539,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753833153
    },
    {
        "content": "<p>I've been back working on the WASM Playground again... I've built a test harness using a VM built in zig. <a href=\"https://github.com/roc-lang/roc/pull/8134\">https://github.com/roc-lang/roc/pull/8134</a></p>\n<p>I've been iterating on that, polishing and refactoring along with the playground as I go. </p>\n<p>I hoped I would have a PR ready by now, but I've discovered that our current approach to generating HTML from the AST and CIR involves a lot of recursion and easily stack overflows on a WASM VM. </p>\n<p>So taking a slight tangent exploring a alternate approach instead. The general idea is we could stream the IR by writing to our buffer as we go and reduce recursion by using a stack.</p>",
        "id": 531821857,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753876193
    },
    {
        "content": "<p>I added a new CI workflow for this, if you wanted to see what the output looks like it just ran and failed with the issue I'm currently digging into Re HTML</p>\n<p><a href=\"https://github.com/roc-lang/roc/actions/runs/16621547420/job/47027019738?pr=8134\">https://github.com/roc-lang/roc/actions/runs/16621547420/job/47027019738?pr=8134</a></p>",
        "id": 531822405,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753876342
    },
    {
        "content": "<p>Gemini basically one-shotted the stack based HTML generator... I had to fixup some compile errors (converting a bunch of AST helpers to take a <code>*const</code> where they don't need to mutate). </p>\n<p>Happy to report it works nicely within our WASM VM and doesn't stack overflow... no idea if the HTML looks any good yet. But that's a start. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 531832087,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753879082
    },
    {
        "content": "<p>Our CI uncovered a bug in a transitive dependency specific to ARM... so seeing if I can patch that. I'll make a PR to upstream if it passes everything.</p>",
        "id": 531958288,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753923440
    },
    {
        "content": "<p>Here's the patch in case anyone is interested <a href=\"https://github.com/rdunnington/zig-stable-array/pull/13\">https://github.com/rdunnington/zig-stable-array/pull/13</a></p>",
        "id": 531959169,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753924045
    },
    {
        "content": "<p>So now the upgraded playground &amp; e2e test harness look to be passing our CI. </p>\n<p>I'll update the actual TypeScript web app and confirm it's all working correctly before changing that Ready For Review.</p>",
        "id": 531959697,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753924448
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/channel/316715-contributing/topic/Worklog.20.28Draft.20PRs.20and.20coordination.29/near/531959169\">said</a>:</p>\n<blockquote>\n<p>Here's the patch in case anyone is interested <a href=\"https://github.com/rdunnington/zig-stable-array/pull/13\">https://github.com/rdunnington/zig-stable-array/pull/13</a></p>\n</blockquote>\n<p><a href=\"https://github.com/rdunnington/bytebox/pull/82\">Upstreamed already</a> we're giving back to the zig community <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 532000067,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753946811
    },
    {
        "content": "<p>Internal debate I'm having with myself... implement more of the interpreter, or wire the REPL into the playground <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 532203331,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1754013111
    },
    {
        "content": "<p>I’m continuing to work on type checking odds and ends, particularly around annotations and rigid vars!</p>",
        "id": 532207534,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1754015387
    },
    {
        "content": "<p>I'm working on getting a dev build of an interpreter working on an actual host (single-module only for now, but gotta start somewhere!)</p>",
        "id": 532207734,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1754015486
    },
    {
        "content": "<p>Ok, you convinced me... I'm going to flesh out support for the interpreter, we'll need that so the dev builds are useful <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 532208261,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1754015765
    },
    {
        "content": "<p>First up, numbers <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span> </p>\n<div class=\"codehilite\"><pre><span></span><code>(1u8, 2i8, 3u16, 4i16, 5u32, 6i32, 7u64, 8i64, 9u128, 10i128, 11.0f32, 12.0f64, 13.0dec)\n</code></pre></div>",
        "id": 532208303,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1754015791
    },
    {
        "content": "<p>Ok, new stretch goal </p>\n<div class=\"codehilite\"><pre><span></span><code>(1u8, 2i8, 3u16, 4i16, 5u32, 6i32, 7u64, 8i64, 9u128, 10i128, 11.0f32, 12.0f64, 13.0dec, 0xE, 0xf, 0x20, 0b10001, 0b1_0010, 19, 20.0, 21_000, 22_000_000, 0.0, -0.1, 2e4, 3E2, -0.2e-2)\n</code></pre></div>",
        "id": 532210887,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1754017339
    },
    {
        "content": "<p>Also taking another tangent with these</p>\n<div class=\"codehilite\"><pre><span></span><code>(True, False, Bool.True, Bool.False, !True, !False, True and False, !True or !True)\n</code></pre></div>",
        "id": 532244051,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1754033333
    },
    {
        "content": "<p>Good progress on evaluating strings. Initial implementation seems to be working ok. </p>\n<p><a href=\"https://github.com/roc-lang/roc/pull/8151\">https://github.com/roc-lang/roc/pull/8151</a></p>\n<p>Tomorrow I plan on testing it more thoroughly and ensuring it handles errors properly. </p>\n<p>I'd like to add a new test expectation that asserts we evaluate to the correct RocStr value.</p>\n<p>I'm not 100% sure this is the correct approach or anything... in hindsight I feel like I should have started with RocList. I'm trying to understand how to properly manage heap allocated things in the interpreter.</p>",
        "id": 532549666,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1754222524
    },
    {
        "content": "<p>I think string was a better choice; <code>List</code> needs the interpreter to be able to do polymorphism, which is a rabbit hole <span aria-label=\"smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 532550558,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1754223133
    },
    {
        "content": "<p>just landed: our interpreter running in a real host! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span>  <a href=\"https://github.com/roc-lang/roc/pull/8155\">https://github.com/roc-lang/roc/pull/8155</a></p>\n<p><a href=\"/user_uploads/22008/4UE68SXhpskcnd2aEYtXIzr0/interpreter.mov\">interpreter.mov</a></p>",
        "id": 532628074,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1754274008
    },
    {
        "content": "<p>I could really use some help getting tests for that running on CI in Windows etc. with our actual LLD <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 532628112,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1754274034
    },
    {
        "content": "<p>oh yeah, quick benchmarks on the file in that demo vs python: (release build of <code>roc</code>)</p>\n<div class=\"codehilite\"><pre><span></span><code>Benchmark 1: ./zig-out/bin/roc test_direct.roc\n  Time (mean ± σ):      26.9 ms ±   6.9 ms    [User: 5.0 ms, System: 10.1 ms]\n  Range (min … max):    24.2 ms …  59.2 ms    47 runs\n\nBenchmark 2: python3 test_direct.py\n  Time (mean ± σ):      21.3 ms ±   1.5 ms    [User: 14.6 ms, System: 4.3 ms]\n  Range (min … max):    19.2 ms …  27.8 ms    95 runs\n</code></pre></div>",
        "id": 532632022,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1754276318
    },
    {
        "content": "<p>I have some ideas on how we can get that to be faster than Python...we're almost there already! <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 532632051,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1754276347
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/channel/316715-contributing/topic/Worklog.20.28Draft.20PRs.20and.20coordination.29/near/532628112\">said</a>:</p>\n<blockquote>\n<p>I could really use some help getting tests for that running on CI in Windows etc. with our actual LLD <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>\n<p>I can look at that in the coming weeks, do I just need to fix these?</p>\n<div class=\"codehilite\"><pre><span></span><code>if (builtin.os.tag == .windows) {\n        return;\n}\n</code></pre></div>",
        "id": 532684804,
        "sender_full_name": "Anton",
        "timestamp": 1754299295
    },
    {
        "content": "<p>I plan on looking at it also. I've been up to my eyeballs in this part of the codebase today. I think I've got two test platforms setup with CI, and linking using our LLD implementation.</p>",
        "id": 532692614,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1754301651
    },
    {
        "content": "<p>Just been going back and forth with CI trying to resolve some issues</p>",
        "id": 532692687,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1754301668
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> all but Windows now looks to be passing on my PR <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 532702223,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1754305075
    },
    {
        "content": "<p>I'm going to disable them. Tomorrow I can boot up my Windows machine and give it some love</p>",
        "id": 532703330,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1754305475
    },
    {
        "content": "<p>Ok, CI is passing now <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 532705303,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1754306179
    },
    {
        "content": "<p>I've merged my PR... if anyone wants to try it out I left a README explaining how to run the two test platforms/examples</p>\n<p><a href=\"https://github.com/roc-lang/roc/tree/main/test/platform\">https://github.com/roc-lang/roc/tree/main/test/platform</a></p>",
        "id": 532719312,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1754311161
    },
    {
        "content": "<p>I'm so excited for some of the direct integration we get with the zig version of the compiler</p>",
        "id": 532790572,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1754338440
    },
    {
        "content": "<p>I'm going to setup my Windows machine and finish the dev interpreter implementation.</p>",
        "id": 532805648,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1754346109
    },
    {
        "content": "<p>working on can/type checking for statements (statement annotations, inheriting <code>forall</code> type vars from parent annotation, etc)</p>",
        "id": 533508654,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1754677218
    },
    {
        "content": "<p>I'm working on the REPL and aim to wire it into the playground.</p>",
        "id": 533538465,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1754694716
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/316715-contributing/topic/Worklog.20.28Draft.20PRs.20and.20coordination.29/near/533538465\">said</a>:</p>\n<blockquote>\n<p>I'm working on the REPL and aim to wire it into the playground.</p>\n</blockquote>\n<p>that's funny. i was actually playing with the repl this morning and got some stuff working</p>",
        "id": 533548900,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1754707539
    },
    {
        "content": "<p>Not serious about it though, was just seeing how far i could get</p>",
        "id": 533548916,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1754707561
    },
    {
        "content": "<p>Definitely implemented the loop but I sure do get a lot of crashes from eval <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 533548940,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1754707590
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/pull/8175\">https://github.com/roc-lang/roc/pull/8175</a><br>\nI got the reassigment of defs thing working. I  don't think this is a long term design, maybe more of a hack. I just wanted something working to play with the interpreter. </p>\n<p>My approach is keeping track of definitions in a hashmap, then when you evaluation something concatenate all the defs and the expression together into a block expression and evaluate that.</p>",
        "id": 533559013,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1754721258
    },
    {
        "content": "<p>I haven't been touching the roc cli or anything.</p>",
        "id": 533559072,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1754721364
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 533566095,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1754730457
    },
    {
        "content": "<p>I think I've got the new REPL wired through everything... we have REPL snapshots that support redefinitions (the intermediate steps in the snapshot are linked), the e2e WASM test harness also includes a number of roundtrip tests for the REPL features in the playground (sending JSON messages etc).</p>\n<p>Tomorrow I'll try and upgrade the Playground web app to include a switch to try the experimental REPL mode. </p>\n<p>It'll be rough for a while probably as the actual interpreter itself is fairly primitive. But at least we know it definitely will work in WASM once we finish implementing it</p>",
        "id": 533569214,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1754734101
    },
    {
        "content": "<p>sweet</p>",
        "id": 533571773,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1754737441
    },
    {
        "content": "<p>I've been adding it to the CLI. Mainly to explore the capabilities of the interpreter such as they are</p>",
        "id": 533571833,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1754737520
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/channel/316715-contributing/topic/Worklog.20.28Draft.20PRs.20and.20coordination.29/near/533559013\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/roc-lang/roc/pull/8175\">https://github.com/roc-lang/roc/pull/8175</a><br>\nI got the reassigment of defs thing working. I  don't think this is a long term design, maybe more of a hack. I just wanted something working to play with the interpreter. </p>\n<p>My approach is keeping track of definitions in a hashmap, then when you evaluation something concatenate all the defs and the expression together into a block expression and evaluate that.</p>\n</blockquote>\n<p>Left a few comments</p>",
        "id": 533574955,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1754741126
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"781658\">@Anthony Bullard</span>  -- I've had to take a major detour and refactor some things to sort out our modules. I'll come back to this once that work is completed.</p>",
        "id": 533877985,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1754951489
    },
    {
        "content": "<p>FYI all, we just merged a big PR that reorganised things. It was such a big job there are some test files with slabs of code commented out, but we have all of our e2e tests operational and happy. </p>\n<p>If you have any questions or need help merging WIP changes please let me know. Mostly just shuffling things into a module structure without any cyclic dependencies, so hopefully shouldnt be really big conflicts.</p>",
        "id": 533962167,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1754998831
    },
    {
        "content": "<p><span aria-label=\"face with peeking eye\" class=\"emoji emoji-1fae3\" role=\"img\" title=\"face with peeking eye\">:face_with_peeking_eye:</span></p>",
        "id": 533985890,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1755006527
    },
    {
        "content": "<p>Calling any Web dev people -- I could really use some help with CSS on the Playground REPL <a href=\"https://github.com/roc-lang/roc-playground/pull/6\">https://github.com/roc-lang/roc-playground/pull/6</a></p>\n<p>I've got the basics wired up in this PR, but feel like a gorilla working with this CSS, just wondering if anyone is interested in helping? </p>\n<p><a href=\"/user_uploads/22008/IuVmbCsiQxDSbPwIyojq1bki/playground-demo-4.gif\">playground-demo-4.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/IuVmbCsiQxDSbPwIyojq1bki/playground-demo-4.gif\" title=\"playground-demo-4.gif\"><img data-animated=\"true\" data-original-content-type=\"image/gif\" data-original-dimensions=\"892x560\" src=\"/user_uploads/thumbnail/22008/IuVmbCsiQxDSbPwIyojq1bki/playground-demo-4.gif/840x560-anim.webp\"></a></div>",
        "id": 534342365,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1755147867
    },
    {
        "content": "<p>I can take a look later :)</p>",
        "id": 534624667,
        "sender_full_name": "Anton",
        "timestamp": 1755250187
    },
    {
        "content": "<p>I'm still working on <a href=\"https://github.com/roc-lang/unicode/issues/28\">https://github.com/roc-lang/unicode/issues/28</a> <br>\nI'll try to check out the css tomorrow</p>",
        "id": 534690482,
        "sender_full_name": "Anton",
        "timestamp": 1755280399
    },
    {
        "content": "<p>I tried a lot of different angles with <a href=\"https://github.com/roc-lang/unicode/issues/28\">https://github.com/roc-lang/unicode/issues/28</a> but ended up with a nice and simple fix: <a href=\"https://github.com/roc-lang/roc/pull/8204\">https://github.com/roc-lang/roc/pull/8204</a></p>",
        "id": 534777600,
        "sender_full_name": "Anton",
        "timestamp": 1755368246
    },
    {
        "content": "<p>Turns out tokio uses a smaller stack size than the OS default for the threads it creates.</p>",
        "id": 534777628,
        "sender_full_name": "Anton",
        "timestamp": 1755368286
    },
    {
        "content": "<p>Going to make the CSS a priority on Monday.</p>",
        "id": 534777668,
        "sender_full_name": "Anton",
        "timestamp": 1755368340
    },
    {
        "content": "<p>I was wondering why <code>a = 1 == \"a\"</code> did typecheck, so I investigated. Here is a draft PR with the fix, but I have no idea if this is remotely correct: <a href=\"https://github.com/roc-lang/roc/issues/8213\">#8213</a></p>",
        "id": 535528801,
        "sender_full_name": "Fabian Schmalzried",
        "timestamp": 1755790075
    },
    {
        "content": "<p>the short answer to why this typechecks is just that we don't have the real implementation yet, which will be <code>1 == \"a\"</code> desugars to <code>1.equals(\"a\")</code> which will look up <code>equals</code> in the relevant number module, which in turn will expect another number of the same type rather than a <code>Str</code>, and will give a type mismatch</p>\n<p>but we don't have the desugar-into-static-dispatch stuff in place yet in the new compiler <span aria-label=\"smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 535539104,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1755793429
    },
    {
        "content": "<p>That makes sense, thank you.</p>",
        "id": 535554296,
        "sender_full_name": "Fabian Schmalzried",
        "timestamp": 1755799535
    },
    {
        "content": "<p>I'm looking at upgrading to zig 0.15.1, so far I've upgraded bytebox (used for the playground) and one of its dependencies <br>\n<a href=\"https://github.com/rdunnington/bytebox/pull/85\">https://github.com/rdunnington/bytebox/pull/85</a><br>\n<a href=\"https://github.com/rdunnington/zig-stable-array/pull/14\">https://github.com/rdunnington/zig-stable-array/pull/14</a></p>",
        "id": 535876636,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1756004445
    },
    {
        "content": "<p>Hey awesome <span class=\"user-mention\" data-user-id=\"611722\">@Isaac Van Doren</span></p>",
        "id": 535884527,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1756016812
    },
    {
        "content": "<p>hi, i would like to aid in making new cli roc repl work, can you guys give me some directions?</p>",
        "id": 535884809,
        "sender_full_name": "EnDeRBeaT",
        "timestamp": 1756017269
    },
    {
        "content": "<p>Would it make sense to add the formatter to the playground wasm? Like a <code>QUERY_FORMATTED</code> command?</p>",
        "id": 536254775,
        "sender_full_name": "Fabian Schmalzried",
        "timestamp": 1756219691
    },
    {
        "content": "<p>Yeah, totally :)</p>",
        "id": 536254916,
        "sender_full_name": "Anton",
        "timestamp": 1756219734
    },
    {
        "content": "<p>5 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"316715\" href=\"/#narrow/channel/316715-contributing/topic/playground.20-.20roc.20format/with/536319489\">#contributing &gt; playground - roc format</a> by <span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span>.</p>",
        "id": 536319490,
        "sender_full_name": "Notification Bot",
        "timestamp": 1756246494
    },
    {
        "content": "<p>Going to try out generating type variables in <code>Check</code> (in addition to <code>Can</code>, for now) like I mentioned yesterday. Gonna be in the same branch as my statement annotation work. Going to be some decent size changes to both can + check, so lmk if anyone else is planning on touching that significantly so we can coordinate!</p>",
        "id": 537025935,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1756695567
    },
    {
        "content": "<p>I think it's just you and Richard touching Can at the moment</p>",
        "id": 537026002,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1756695617
    },
    {
        "content": "<p>For viz: ^ This is turning into a pretty large rework of type checking. All good changes, feels like a simplification and it's been easier to reason about. Hoping to get a good chunk of work in this weekend and have something ready for review next week!</p>",
        "id": 537866142,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1757077457
    },
    {
        "content": "<p>I have a <a href=\"https://github.com/roc-lang/roc/pull/8238\">draft PR</a> up for upgrading to Zig 0.15.1 with a good chunk of changes. My wife and I just bought a house so I have lots of painting/repairs/moving etc to do so I probably won't have much time to look at this for a while. If anyone is eager to get to Zig 0.15.1 and would like to take over the PR, feel free to! Otherwise I will come back to it once I have time.</p>",
        "id": 539878595,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1758050520
    },
    {
        "content": "<p>I can probably look at it this week, thanks for getting started on it  :)</p>",
        "id": 539940535,
        "sender_full_name": "Anton",
        "timestamp": 1758092109
    },
    {
        "content": "<p>Of note, I am about to update roc-bootstrap (which really just gets us llvm and related libs) to zig 0.15.1 and the newest llvm version.</p>\n<p>Since we don't really use llvm yet, it isn't really a big deal. Also, even once we do use llvm, it is pretty decoupled do to the fact that we will generate bitcode directly.</p>",
        "id": 540097240,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1758140708
    },
    {
        "content": "<p>Ready here: <a href=\"https://github.com/roc-lang/roc-bootstrap/releases/tag/zig-0.15.1\">https://github.com/roc-lang/roc-bootstrap/releases/tag/zig-0.15.1</a> would be good to pull into <a href=\"https://github.com/roc-lang/roc/issues/8238\">#8238</a> when that is getting updated for merge</p>",
        "id": 540482612,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1758295714
    },
    {
        "content": "<p>Does zig-afl-kit need to be updated as well <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span>?</p>",
        "id": 540841266,
        "sender_full_name": "Anton",
        "timestamp": 1758555962
    },
    {
        "content": "<p>Oh, yeah, would need to add well</p>",
        "id": 540842600,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1758556225
    },
    {
        "content": "<p>i'm getting an error in CI only on macos 13: <a href=\"https://github.com/roc-lang/roc/actions/runs/18208999424/job/51845902296?pr=8239\">https://github.com/roc-lang/roc/actions/runs/18208999424/job/51845902296?pr=8239</a></p>\n<p>anyone have any ideas?</p>",
        "id": 542851756,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1759452130
    },
    {
        "content": "<p>^ rerunning fixed, seems like a flakey test</p>",
        "id": 542855050,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1759455284
    },
    {
        "content": "<p>I've seen it on windows 11 arm too, I will wrap it with automatic retry and make an issue.</p>",
        "id": 542901210,
        "sender_full_name": "Anton",
        "timestamp": 1759482558
    },
    {
        "content": "<p>Heads up that <a href=\"https://github.com/roc-lang/roc/issues/8239\">#8239</a> just landed, which added tons of new type checking features, including proper handling &amp; generalization of polymorphic types! You can look at <a href=\"https://github.com/roc-lang/roc/blob/main/src/check/test/type_checking_integration.zig\">this test file</a> to see pretty much everything implemented so far! Not everything is there yet, but this is a big step forward – we're getting closer!</p>\n<p>Also included in that is some tweaks to <code>build.zig</code> to run tests for individual zig module, so beyond <code>zig build test</code>, we now have <code>zig build test-can</code>, <code>zig build test-check</code>, <code>zig build test-eval</code> and so on.  These all should work with the <code>--test-filter</code> that Anton added recently too.</p>",
        "id": 542949787,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1759499040
    },
    {
        "content": "<p>some other things on my list to do are:</p>\n<ul>\n<li>Round out type checking for block statements (not 100% complete yet)</li>\n<li>Remove all reference to types from <code>Can</code>, since <code>Check</code> handles the whole thing now</li>\n<li>Add some addition tests related to above types</li>\n<li>Possibly keep hacking type checking fuzzer </li>\n</ul>\n<p>if anyone is interested in helping with any of these things, lmk and i can share context!</p>",
        "id": 542950437,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1759499228
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/issues/8273\">#8273</a>: Add back full unit test suite for type unification &amp; type instantiation, and fixes some type number bugs</p>",
        "id": 543626819,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1759873617
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/issues/8275\">#8275</a>: Small MR modifying some types in <code>types.zig</code> to prepare for static dispatch type checking implementation</p>",
        "id": 543841892,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1759961312
    },
    {
        "content": "<p>FYI, we now have compile-time evaluation of top-level constants! <a href=\"https://github.com/roc-lang/roc/pull/8300\">https://github.com/roc-lang/roc/pull/8300</a></p>\n<p>still todo in future PRs:</p>\n<ul>\n<li>updating CIR with the evaluated values (right now we just eval them and report crashes/dbgs/expects, but we don't yet do anything with the final eval'd value - that's next!)</li>\n<li>partial evaluation within functions, so it's not just top-level things being evaluated, but also \"effectively top-level\" things (e.g. they don't depend on function arguments, even indirectly)</li>\n<li>include stack traces in <code>crash</code> reports (interpreter doesn't know how to do these in general yet)</li>\n</ul>",
        "id": 545795480,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1760839633
    },
    {
        "content": "<p>4 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"395097\" href=\"/#narrow/channel/395097-compiler-development/topic/compile-time.20evaluation/with/546322413\">#compiler development &gt; compile-time evaluation</a> by <span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span>.</p>",
        "id": 546322414,
        "sender_full_name": "Notification Bot",
        "timestamp": 1761078670
    },
    {
        "content": "<p>What do we need to remove the platform hardcoding?</p>\n<p><a href=\"https://github.com/roc-lang/roc/blob/a16d26b5c0d59429f9dd266cf2adb802a5e0d52c/src/cli/main.zig#L2142-L2169\">https://github.com/roc-lang/roc/blob/a16d26b5c0d59429f9dd266cf2adb802a5e0d52c/src/cli/main.zig#L2142-L2169</a></p>\n<p>I want to make a basic integer only platform for testing, but currently we only allow the test int platform and nothing else. This is based on that so should work as well.</p>",
        "id": 546357632,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1761102422
    },
    {
        "content": "<p>Can I just remove this check? Do we first need header info to get the correct platform dir? Other?</p>",
        "id": 546357665,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1761102444
    },
    {
        "content": "<p>yeah I think that's obsolete but <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> would probably know better!</p>",
        "id": 546357755,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1761102537
    },
    {
        "content": "<p>I guess as I scan this all the entrypoints are hard coded. So probably just need to read the actual app, use that to read the platform main and use that for all the pieces here.</p>",
        "id": 546357919,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1761102700
    },
    {
        "content": "<p>And it looks like we already do this for <code>rocRun</code>. So I guess just need to port that over. Cool.</p>",
        "id": 546358694,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1761103500
    },
    {
        "content": "<p>For cross-compilation we compile the int test app using zig bitcode to simulate the roc compiler</p>",
        "id": 546358786,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1761103588
    },
    {
        "content": "<p>Ah. Thus only roc run for general platforms right now</p>",
        "id": 546358880,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1761103673
    },
    {
        "content": "<p>But we theoretically could roc build, but that requires compiling the interpreter into the final app.</p>",
        "id": 546358918,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1761103722
    },
    {
        "content": "<p>So more complexity</p>",
        "id": 546358921,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1761103728
    },
    {
        "content": "<p>Yeah we can build the ModuleEnv's and embed them as a blob into another interpreter shim and link that .. so we could have <code>roc build</code> using the interpreter now. I looked at it briefly, but haven't tried properly. You could probably do that much better than I; I think it's fully unblocked.</p>",
        "id": 546360540,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1761105326
    },
    {
        "content": "<p>I might look into eventually. First messing around with <code>rocRun</code> for my random chip platform thing.</p>",
        "id": 546364746,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1761108276
    },
    {
        "content": "<p>What to get that working. First platform running outside of the roc repo for the new compiler. Though it still is basically just the int test platform</p>",
        "id": 546364779,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1761108307
    },
    {
        "content": "<p>I've waiting for the multi-module/builtin/interpreter/type checking work to settle a little and mature. This maybe has the potential to conflict a little with that and Jared and Richard are making awesome progress -- my desire for building standalone executables can wait a few more weeks <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 546364859,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1761108411
    },
    {
        "content": "<p>I assume I'll eventually hit things not yet function in the interpreter and then have to add features. That said, right now, hitting:</p>\n<div class=\"codehilite\"><pre><span></span><code>debug: Spawning child process: /Users/bren077s/Library/Caches/roc/94915fa5e90b0dafb36fcd8becc1e3b8/temp/roc-tmp-SbmW7bKkQbKfY4QVPWMlg9d1yNK5poKG/roc_run_1408828109\ndebug: Child process working directory: /Users/bren077s/Projects/chip8\ndebug: Child process spawned successfully (PID: 91570)\nStarting Host\nLaunching Roc\nthread 3451892 panic: reached unreachable code\nUnable to dump stack trace: debug info stripped\nerror: Child process /Users/bren077s/Library/Caches/roc/94915fa5e90b0dafb36fcd8becc1e3b8/temp/roc-tmp-SbmW7bKkQbKfY4QVPWMlg9d1yNK5poKG/roc_run_1408828109 killed by signal: 6\nerror: Child process aborted (SIGABRT)\nerror: Failed to run with POSIX fd inheritance: error.ProcessKilledBySignal\n</code></pre></div>\n<p>Which is not particularly useful for debugging...</p>",
        "id": 546364942,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1761108493
    },
    {
        "content": "<p>A bit closer:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread 3473998 panic: reached unreachable code\n???:?:?: 0x10009379b in ??? (roc_run_1408828109)\n???:?:?: 0x10008f907 in ??? (roc_run_1408828109)\n???:?:?: 0x1000f853f in ??? (roc_run_1408828109)\n???:?:?: 0x1000c0303 in ??? (roc_run_1408828109)\n???:?:?: 0x1000aff4b in ??? (roc_run_1408828109)\n???:?:?: 0x10008fc5b in ??? (roc_run_1408828109)\n???:?:?: 0x10008e983 in ??? (roc_run_1408828109)\n???:?:?: 0x10008e45b in ??? (roc_run_1408828109)\n???:?:?: 0x100000abb in ??? (roc_run_1408828109)\n???:?:?: 0x100001657 in ??? (roc_run_1408828109)\n???:?:?: 0x1924a9d53 in ??? (???)\n???:?:?: 0x0 in ??? (???)\n</code></pre></div>\n<p>There was an attempt at a stack trace</p>",
        "id": 546367046,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1761110128
    },
    {
        "content": "<p>I wonder what's panicking... I had a similar issue when the parent wasn't serialising the ModuleEnv correctly I think</p>",
        "id": 546369862,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1761112427
    },
    {
        "content": "<p>Do we really have anyway of knowing the module env bytes that we very unsafe just rehydrate the pointers from is correct?</p>",
        "id": 546369944,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1761112479
    },
    {
        "content": "<p>Yeah. Seems like we may need to figure out a better way to validate rehydration. Based on some debug prints, this is panicking in the interpreter somewhere, but not sure why</p>",
        "id": 546370018,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1761112530
    },
    {
        "content": "<p>I guess in this case, it may not be rehydration then.</p>",
        "id": 546370129,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1761112620
    },
    {
        "content": "<p>Just something not supported by the interpreter and a pain debugging due to no good backtrace for some reason.</p>",
        "id": 546370158,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1761112639
    },
    {
        "content": "<p>Claude after much debug printing to find the error location:</p>\n<blockquote>\n<p>The debug trace shows:</p>\n<p>- The crash occurs when evaluating a closure that needs to resolve a capture from<br>\n  top-level defs</p>\n<p>- It calls getDef(def_idx = @enumFromInt(1)) and crashes before returning<br>\n  - Most likely culprit: corrupted data in shared memory or an unreachable in data<br>\n  decoding</p>\n</blockquote>",
        "id": 546372423,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1761113887
    },
    {
        "content": "<p>In zig 0.15 the std.array_list.Managed is deprecated. I think many uses can be replaced with the new unmanaged std.ArrayList using a bit of regex or script. I will try what is possible without spending to much time on it.</p>",
        "id": 546693608,
        "sender_full_name": "Fabian Schmalzried",
        "timestamp": 1761229176
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/316715-contributing/topic/Worklog.20.28Draft.20PRs.20and.20coordination.29/near/546367046\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\"><pre><span></span><code>thread 3473998 panic: reached unreachable code\n???:?:?: 0x10009379b in ??? (roc_run_1408828109)\n???:?:?: 0x10008f907 in ??? (roc_run_1408828109)\n???:?:?: 0x1000f853f in ??? (roc_run_1408828109)\n???:?:?: 0x1000c0303 in ??? (roc_run_1408828109)\n???:?:?: 0x1000aff4b in ??? (roc_run_1408828109)\n???:?:?: 0x10008fc5b in ??? (roc_run_1408828109)\n???:?:?: 0x10008e983 in ??? (roc_run_1408828109)\n???:?:?: 0x10008e45b in ??? (roc_run_1408828109)\n???:?:?: 0x100000abb in ??? (roc_run_1408828109)\n???:?:?: 0x100001657 in ??? (roc_run_1408828109)\n???:?:?: 0x1924a9d53 in ??? (???)\n???:?:?: 0x0 in ??? (???)\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I'm gonna try to figure out getting an actual stack trace here. I feel like for future debugging it will be useful. Then we won't need a mile of defensive logging to root cause things like this.</p>",
        "id": 546799911,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1761273788
    },
    {
        "content": "<p>Sadly, I have not had luck here so far.</p>",
        "id": 547144712,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1761497859
    },
    {
        "content": "<p>4 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"395097\" href=\"/#narrow/channel/395097-compiler-development/topic/roc.20build/with/547152079\">#compiler development &gt; roc build</a> by <span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span>.</p>",
        "id": 547152080,
        "sender_full_name": "Notification Bot",
        "timestamp": 1761504759
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/316715-contributing/topic/Worklog.20.28Draft.20PRs.20and.20coordination.29/near/547144712\">said</a>:</p>\n<blockquote>\n<p>Sadly, I have not had luck here so far.</p>\n</blockquote>\n<p>Thanks for trying anyway <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 547203281,
        "sender_full_name": "Anton",
        "timestamp": 1761549123
    },
    {
        "content": "<p>Working on some let-polymorphism bugs I discovered</p>",
        "id": 547527051,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1761665901
    },
    {
        "content": "<p>Just for viz in case anyone is touching type checker</p>",
        "id": 547527092,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1761665911
    },
    {
        "content": "<p>Look like my PR <a href=\"https://github.com/roc-lang/roc/issues/8342\">#8342</a> revealed a problem with basically every roc check. They all have <code>FileNotFound</code>. I did some debugging and it looks like it is looking for a Str.roc file.</p>",
        "id": 547535359,
        "sender_full_name": "Fabian Schmalzried",
        "timestamp": 1761667692
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>        const src = std.fs.cwd().readFileAlloc(self.gpa, st.path, std.math.maxInt(usize)) catch |read_err| {\n            // Note: Let the FileNotFound error propagate naturally\n            // The existing error handling will report it appropriately\n            return read_err;\n        };\n</code></pre></div>\n<p>And I don't think that comment is correct (in compile_package.zig)</p>",
        "id": 547535544,
        "sender_full_name": "Fabian Schmalzried",
        "timestamp": 1761667743
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> recently added  the Str.roc builtin</p>",
        "id": 547535991,
        "sender_full_name": "Anton",
        "timestamp": 1761667864
    },
    {
        "content": "<p>I have a PR that will get rid of Str.roc (consolidating all the builtins into Builtin.roc) but I'm dealing with a sick kid, so will take a bit to land <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 547542917,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1761669586
    },
    {
        "content": "<p>Then it's probably better to wait to merge my PR.</p>",
        "id": 547543392,
        "sender_full_name": "Fabian Schmalzried",
        "timestamp": 1761669710
    },
    {
        "content": "<blockquote>\n<p>but I'm dealing with a sick kid</p>\n</blockquote>\n<p>Wish him well from the Roc community :)</p>",
        "id": 547543572,
        "sender_full_name": "Anton",
        "timestamp": 1761669754
    },
    {
        "content": "<p>nah it's fine, go ahead and merge it <span class=\"user-mention\" data-user-id=\"559412\">@Fabian Schmalzried</span>  - I'll work around it!</p>",
        "id": 547557185,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1761673922
    },
    {
        "content": "<p>Well CI fails with the PR.</p>",
        "id": 547557383,
        "sender_full_name": "Fabian Schmalzried",
        "timestamp": 1761673998
    }
]