[
    {
        "content": "<p>I would really like an encoder/decoder for Roc that uses a more efficient representation than JSON. I would like to use this e.g. in basic-webserver to cache data in memory between requests. JSON doesn't map very well 1-1 with Roc's types and could be way more efficient. </p>\n<p>I started implementing <code>get : U64, value -&gt; Task value [NotFound] where value implements Decoding</code> but realised that the platform needs access to a decoder to do that.</p>\n<p>So I've been doing some research to explore ways to implement this in Roc. Any tips or pointers would be most appreciated. I'm not sure it's possible to do this well using pure Roc at the moment, but interested to explore this further. </p>\n<p>Take an <code>F64</code> for example, I can encode this to bytes using <code>Num.toStr</code>. Then to convert back using <code>Str.toF64</code>. For example we could do this.</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>f64ToBytes : F64 -&gt; List U8\nf64ToBytes = \\f64 -&gt;\n    f64\n    |&gt; Num.toStr\n    |&gt; Str.toUtf8\n\nf64FromBytes : List U8 -&gt; F64\nf64FromBytes = \\bytes -&gt;\n    bytes\n    |&gt; Str.fromUtf8\n    |&gt; Result.try Str.toF64\n    |&gt; Result.withDefault 0f64\n</code></pre></div>\n<p>I don't love this idea... because it isn't very efficient. For example <code>f64ToBytes 123.42345234 == [49, 50, 51, 46, 52, 50, 51, 52, 53, 50, 51, 52] : List U8</code> which is far more bytes than I think we actually need to represent this number.</p>\n<p>For example  IEEE 754 double precision floats is a 64-bit encoding, so maybe we could have <code>toRaw : F64 -&gt; (U8,U8,U8,U8,U8,U8,U8,U8)</code>? Or maybe a builtin to expose the sign, exponent and significand?</p>",
        "id": 409331870,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1703145477
    },
    {
        "content": "<p>yeah I like the idea of having a way to encode and decode every number type to/from raw bytesâ€”with <a href=\"https://en.wikipedia.org/wiki/Endianness\">endianness</a> specified explicitly instead of inferred based on the target (I think we talked about this somewhere on Zulip although I don't remember where <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>)</p>",
        "id": 409393766,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1703166922
    },
    {
        "content": "<p>10 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"304641\" href=\"/#narrow/stream/304641-ideas/topic/builtin.20serialization.20format\">#ideas &gt; builtin serialization format</a> by <span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span>.</p>",
        "id": 409395501,
        "sender_full_name": "Notification Bot",
        "timestamp": 1703167428
    }
]