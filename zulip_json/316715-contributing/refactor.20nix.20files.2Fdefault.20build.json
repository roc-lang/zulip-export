[
    {
        "content": "<p>Hey recently got an interest to try out Roc and contributing what I can!</p>\n<p>I noticed that the <code>default.nix</code> is duplicating a fair number of logic from the dev shell in <code>flake.nix</code>. </p>\n<p>Any objections to moving more of the nix logic into the flake and using <a href=\"https://github.com/edolstra/flake-compat\">https://github.com/edolstra/flake-compat</a> to keep the default.nix build working outside of flakes?</p>\n<p>Some extra benefits would also be allowing us to use <code>rust-overlay</code> to pin our rust version from the toolchain toml for the package build and remove the <code>pkgs.lib.assertMsg rustVersionsMatch</code> in <code>defualt.nix</code></p>",
        "id": 402315808,
        "sender_full_name": "John Murray",
        "timestamp": 1700077645
    },
    {
        "content": "<p>That all sounds great <span class=\"user-mention\" data-user-id=\"666594\">@John Murray</span>, I've been wanting to do that but could not get around to it. Go for it :)</p>",
        "id": 402331157,
        "sender_full_name": "Anton",
        "timestamp": 1700083741
    },
    {
        "content": "<p>Awesome! Hopefully will have something up tonight or tomorrow</p>",
        "id": 402331648,
        "sender_full_name": "John Murray",
        "timestamp": 1700083972
    },
    {
        "content": "<p>Pushed up <a href=\"https://github.com/roc-lang/roc/pull/5990\">https://github.com/roc-lang/roc/pull/5990</a>. Let me know if I should add any additional comments to the nix setup or write up any documentation on it!</p>\n<p>I noted in the pr description that I see one error with <code>cargo test</code>, the same error seems to happen on main for me so hoping CI will be happy...</p>",
        "id": 402365778,
        "sender_full_name": "John Murray",
        "timestamp": 1700101274
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"666594\">@John Murray</span> <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> <br>\nI'll review later today :)</p>",
        "id": 402657059,
        "sender_full_name": "Anton",
        "timestamp": 1700214404
    },
    {
        "content": "<p>Another potential nix cleanup I've been thinking about</p>\n<p>Right now the nix build for roc has <code>src = pkgs.nix-gitignore.gitignoreSource [ ] &lt;repo_root&gt;</code></p>\n<p>This is pretty inefficaint since <strong>any file change checked into to git</strong> will cause the derivation to be rebuilt.</p>\n<p>This is also possibly why adding a binary cache didnt help much since it basically always needed to do a full rebuild.</p>\n<p>Thankfully in the next nix stable release which will be out tomrrow there is a <a href=\"https://nix.dev/tutorials/file-sets\">file set api</a> this should make it much easier to filer down that build to just the code needed to build the roc compiler (ie we can ignore all markdown files, webstie files, etc)</p>\n<p>If there are no objections would yall be cool with doing that? The only potential issue is we would need to update the nixpkg input in the flake. If that causes pain we could add a new input that has a different version of nix pkgs pinned just pull in that lib</p>\n<p>Future improvments can also be using <a href=\"https://github.com/ipetkov/crane\">https://github.com/ipetkov/crane</a> which should help cache some of the rust deps + make it easy to run tests from nix</p>",
        "id": 404518156,
        "sender_full_name": "John Murray",
        "timestamp": 1701133716
    },
    {
        "content": "<p>Sounds cool. One thing to note is that new Rust crates get added every so often as the project grows. Ideally the derivation should just discover those automatically, without the author knowing anything about how the Nix build works.</p>",
        "id": 404566433,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1701158247
    },
    {
        "content": "<p>good point <span class=\"user-mention\" data-user-id=\"431893\">@Brian Carroll</span> , my hope is too mostly do very high level filtering</p>\n<p>Ie the nix build only looks at the <code>crates</code>folder, filters out any generated files, and exclude readmes. Hopefully that should make any new crates \"just work\"</p>\n<p>Also probably worth while to filter out the test crates since those are not run in the nix build anyway. <br>\nWe can revist the tests in nix once we have crane setup</p>",
        "id": 404649634,
        "sender_full_name": "John Murray",
        "timestamp": 1701182425
    }
]