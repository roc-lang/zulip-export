[
    {
        "content": "<p>Hey y'all, it's been a while since I've contributed to Roc but I have the next couple of weeks off so I'd like to get back into it a bit!</p>\n<p>I see that <span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> create <a href=\"https://github.com/roc-lang/roc/issues/7395\">this issue to add a builtin</a> an hour ago. This seems like a straightforward one to get started with. Since the issue was created so recently, I'm assuming it's up for grabs, but if it's not or someone thinks there's something better for me to work on, please let me know!</p>\n<p>I'm planning on following <a href=\"https://github.com/roc-lang/roc/pull/6993/files\">this similar PR</a> which adds other some builtins function!</p>",
        "id": 490228269,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1734727575
    },
    {
        "content": "<p>nice, go for it! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 490228354,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734727624
    },
    {
        "content": "<p>You should assume if there is not an assignee, it's up for grabs!</p>",
        "id": 490228363,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1734727626
    },
    {
        "content": "<p>Okay, so small wrinkle:</p>\n<p>Adding <code>Bool.toNum : Bool -&gt; Num *</code> requires importing <code>Num</code> in <code>Bool</code>, causing a cyclical dependency (because <code>Num</code> already imports <code>Bool</code>).</p>\n<p>One possible solution here is moving both the definitions of the types <code>Num</code> and <code>Bool</code> to a third module, then importing that from both <code>Num</code> and <code>Bool</code>. These modules could then re-export their respective types. This seems like it could have broader implications though.</p>\n<p>What do y'all think? Has there been any thought into this kind of thing before?</p>",
        "id": 490243789,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1734736615
    },
    {
        "content": "<p>You don't need to import Num because it's a Builtin</p>",
        "id": 490243824,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1734736645
    },
    {
        "content": "<p>At least that's my understanding that it is also the case even in the Builtins package</p>",
        "id": 490243865,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1734736676
    },
    {
        "content": "<p>I'm wrong</p>",
        "id": 490243970,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1734736737
    },
    {
        "content": "<p>Don't listen to me</p>",
        "id": 490243977,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1734736742
    },
    {
        "content": "<p>I think we might then want to have <code>Num.fromBool : Bool -&gt; Num *</code></p>",
        "id": 490244116,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1734736852
    },
    {
        "content": "<p>To avoid the cycle</p>",
        "id": 490244132,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1734736865
    },
    {
        "content": "<p>Yeah, that makes sense to me!</p>",
        "id": 490244167,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1734736899
    },
    {
        "content": "<p>What's the typical process to reach consensus on something like this?</p>",
        "id": 490244375,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1734737050
    },
    {
        "content": "<p>Or we just wait for folks to weigh in?</p>",
        "id": 490244415,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1734737087
    },
    {
        "content": "<p><code>Num.fromBool</code> seems fine! <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 490244905,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734737430
    },
    {
        "content": "<p>Great PR is up <a href=\"https://github.com/roc-lang/roc/pull/7396\">here</a>!</p>",
        "id": 490248278,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1734739909
    },
    {
        "content": "<p>Looks great, but I'm on mobile and can't give approval.</p>\n<p>Part of me wants to guarantee it will optimize to not generate a branch, but llvm should always optimize that to not generate a branch. Just will be a branch in dev backend and normal builds</p>",
        "id": 490248823,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734740305
    },
    {
        "content": "<p>It's going to need mono snapshots regenerated i think... but I kicked off CI anyway</p>",
        "id": 490248873,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734740371
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"341568\">@Jared Ramirez</span> are you able to update the mono snapshots?</p>",
        "id": 490252291,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734743209
    },
    {
        "content": "<p>Yup, I can do it tomorrow! Whatâ€™s the command to do so?</p>",
        "id": 490258675,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1734748927
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>    cargo test -p test_mono -p uitest --no-fail-fast\n    git add -u\n    git commit -S -m &quot;update mono tests&quot;\n    git push origin YOUR_BRANCH_NAME\n</code></pre></div>",
        "id": 490288711,
        "sender_full_name": "Anton",
        "timestamp": 1734778691
    },
    {
        "content": "<p>Great, updated the snapshots</p>",
        "id": 490548413,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1734972135
    }
]