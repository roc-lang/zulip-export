[
    {
        "content": "<p>Anyone else working on <a href=\"https://github.com/roc-lang/roc/issues/5446\">#5446</a> or <a href=\"https://github.com/roc-lang/roc/issues/5486\">#5486</a>?</p>",
        "id": 484816572,
        "sender_full_name": "Wizard ish",
        "timestamp": 1732751737
    },
    {
        "content": "<p>I don't think anyone is</p>",
        "id": 484816971,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732752016
    },
    {
        "content": "<p>Want me to assign them to you?</p>",
        "id": 484817011,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732752030
    },
    {
        "content": "<p>yes :)</p>",
        "id": 484817023,
        "sender_full_name": "Wizard ish",
        "timestamp": 1732752038
    },
    {
        "content": "<p>Oh, wait I need a comment again <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 484817046,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732752055
    },
    {
        "content": "<p>What is the internal form of the toXChecked functions?</p>",
        "id": 485114354,
        "sender_full_name": "Wizard ish",
        "timestamp": 1732891814
    },
    {
        "content": "<p>internal form?</p>",
        "id": 485116164,
        "sender_full_name": "Anton",
        "timestamp": 1732892376
    },
    {
        "content": "<p>Yeah, so what is the actual data that should be returned.<br>\nAlso, why are their both X_op functions in the llvm/lowlevel.rs as well as run_low_level</p>",
        "id": 485129177,
        "sender_full_name": "Wizard ish",
        "timestamp": 1732897075
    },
    {
        "content": "<blockquote>\n<p>why are their both X_op functions in the llvm/lowlevel.rs as well as run_low_level</p>\n</blockquote>\n<p>I'm a little confused, run_low_level is inside llvm/lowlevel.rs</p>",
        "id": 485131526,
        "sender_full_name": "Anton",
        "timestamp": 1732898091
    },
    {
        "content": "<p>Sorry, these questions were a complete mess. So, there are functions like <code>toI32Checked</code>, which returns <code>Result I32 [OutOfBounds]</code>, so what does the <code>[OutOfBounds]</code> correspond to, is it a tag? <br>\nSecond question, the <code>run_low_level</code> function is indeed in <code>llvm/lowlevel.rs</code>. However there is also <code>build_int_unary_op</code>, <code>build_int_binary_op</code>, among others. Why is this? What should be put into <code>run_low_level</code> and what should be made into an <code>op</code>? <br>\nHopefully this clears up the questions about the questions.</p>",
        "id": 485139681,
        "sender_full_name": "Wizard ish",
        "timestamp": 1732901696
    },
    {
        "content": "<blockquote>\n<p>so what does the <code>[OutOfBounds]</code> correspond to, is it a tag?</p>\n</blockquote>\n<p>Yes, <code>OutOfBounds</code> is a tag</p>",
        "id": 485144353,
        "sender_full_name": "Anton",
        "timestamp": 1732904387
    },
    {
        "content": "<p>i see, and when should one use the <code>_op</code> functions as opposed to the <code>run_low_level</code></p>",
        "id": 485144468,
        "sender_full_name": "Wizard ish",
        "timestamp": 1732904430
    },
    {
        "content": "<p>is it just a way to seperate the code out</p>",
        "id": 485144487,
        "sender_full_name": "Wizard ish",
        "timestamp": 1732904441
    },
    {
        "content": "<p>Yes, I believe so</p>",
        "id": 485144725,
        "sender_full_name": "Anton",
        "timestamp": 1732904571
    },
    {
        "content": "<p>ok got it</p>",
        "id": 485144737,
        "sender_full_name": "Wizard ish",
        "timestamp": 1732904582
    },
    {
        "content": "<p>Hey anyone know why running </p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">app</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">pf</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">platform</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/roc-lang/basic-cli/releases/download/0.16.0/O00IPk-Krg_diNS2dVWlI0ZQP794Vctxzv0ha96mK0E.tar.br\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">pf.Stdout</span>\n\n<span class=\"kr\">main </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">numF64</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"mf\">1701411834604692531795.</span><span class=\"mi\">748</span>\n<span class=\"w\">    </span><span class=\"nv\">numDec</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toDecChecked</span><span class=\"w\"> </span><span class=\"nv\">numF64</span>\n<span class=\"w\">    </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Inspect</span><span class=\"nf\">.</span><span class=\"nv\">toStr</span><span class=\"w\"> </span><span class=\"nv\">numDec</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Gives this error</p>\n<div class=\"codehilite\"><pre><span></span><code>An internal compiler expectation was broken.\nThis is definitely a compiler bug.\nPlease file an issue here: &lt;https://github.com/roc-lang/roc/issues/new/choose&gt;\nInvalid decimal for float literal = 1701411834604692531795.748. This should be a type error!\nLocation: crates/compiler/mono/src/ir/literal.rs:115:25\n</code></pre></div>\n<p>(Yes I'm implementing the decimal function, but even removing it still gives this error)</p>",
        "id": 485419243,
        "sender_full_name": "Wizard ish",
        "timestamp": 1732999686
    },
    {
        "content": "<blockquote>\n<p>but even removing it still gives this error</p>\n</blockquote>\n<p>This breaks the same for me on main</p>\n<div class=\"codehilite\"><pre><span></span><code>app [main] { pf: platform &quot;https://github.com/roc-lang/basic-cli/releases/download/0.16.0/O00IPk-Krg_diNS2dVWlI0ZQP794Vctxzv0ha96mK0E.tar.br&quot; }\n\nimport pf.Stdout\n\nmain =\n    numF64 = 1701411834604692531795.748\n\n    Stdout.line! (Inspect.toStr numF64)\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>An internal compiler expectation was broken.\nThis is definitely a compiler bug.\nPlease file an issue here: &lt;https://github.com/roc-lang/roc/issues/new/choose&gt;\nInvalid decimal for float literal = 1701411834604692531795.748. This should be a type error!\nLocation: crates/compiler/mono/src/ir/literal.rs:115:25\n</code></pre></div>",
        "id": 485419302,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732999776
    },
    {
        "content": "<p>yeah thats what I'm saying</p>",
        "id": 485419360,
        "sender_full_name": "Wizard ish",
        "timestamp": 1732999808
    },
    {
        "content": "<p>Changing it to <code>1701411834604692531795.748f64</code> works fine</p>",
        "id": 485419373,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732999827
    },
    {
        "content": "<p>The default number type is <code>Dec</code> so I imagine that is relevant here</p>",
        "id": 485419385,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732999842
    },
    {
        "content": "<p>Do you get this or is this a bug in my addition?</p>\n<div class=\"codehilite\"><pre><span></span><code>An internal compiler expectation was broken.\nThis is definitely a compiler bug.\nPlease file an issue here: &lt;https://github.com/roc-lang/roc/issues/new/choose&gt;\nUndefined Symbol in relocation, (+6360, Relocation { kind: PltRelative, encoding: Generic, size: +20, target: Symbol(SymbolIndex(+a6)), addend: +fffffffffffffffc, implicit_addend: false }): Ok(Symbol { name: &quot;__fixdfti&quot;, address: +0, size: +0, kind: Unknown, section: Undefined, scope: Unknown, weak: false, flags: Elf { st_info: +10, st_other: +0 } })\nLocation: crates/linker/src/elf.rs:1452:25\n</code></pre></div>",
        "id": 485419503,
        "sender_full_name": "Wizard ish",
        "timestamp": 1732999933
    },
    {
        "content": "<p>This is where it's failing </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">LayoutRepr</span><span class=\"p\">::</span><span class=\"n\">Builtin</span><span class=\"p\">(</span><span class=\"n\">Builtin</span><span class=\"p\">::</span><span class=\"n\">Decimal</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">dec</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">RocDec</span><span class=\"p\">::</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"n\">num_str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">internal_error</span><span class=\"o\">!</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"s\">\"Invalid decimal for float literal = {}. This should be a type error!\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">num_str</span>\n<span class=\"w\">        </span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"n\">NumLiteral</span><span class=\"p\">::</span><span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"n\">dec</span><span class=\"p\">.</span><span class=\"n\">to_ne_bytes</span><span class=\"p\">())</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 485419513,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732999946
    },
    {
        "content": "<blockquote>\n<p>Do you get this or is this a bug in my addition?</p>\n</blockquote>\n<p>I haven't seen that</p>\n<p>My guess is that may be unrelated though... that looks like a linker bug</p>",
        "id": 485419556,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733000019
    },
    {
        "content": "<p>ok so that's my bug</p>",
        "id": 485419566,
        "sender_full_name": "Wizard ish",
        "timestamp": 1733000035
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">app</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">pf</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">platform</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/roc-lang/basic-cli/releases/download/0.16.0/O00IPk-Krg_diNS2dVWlI0ZQP794Vctxzv0ha96mK0E.tar.br\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">pf.Stdout</span>\n\n<span class=\"kr\">main </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">numF64</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"mf\">1701411834604692531795.</span><span class=\"mi\">748</span><span class=\"nv\">f64</span>\n<span class=\"w\">    </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Inspect</span><span class=\"nf\">.</span><span class=\"nv\">toStr</span><span class=\"w\"> </span><span class=\"nv\">numF64</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nv\">numDec</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toDec</span><span class=\"w\"> </span><span class=\"nv\">numF64</span>\n<span class=\"w\">    </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Inspect</span><span class=\"nf\">.</span><span class=\"nv\">toStr</span><span class=\"w\"> </span><span class=\"nv\">numDec</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 485419618,
        "sender_full_name": "Wizard ish",
        "timestamp": 1733000058
    },
    {
        "content": "<p>With this</p>",
        "id": 485419627,
        "sender_full_name": "Wizard ish",
        "timestamp": 1733000066
    },
    {
        "content": "<p>Can you represent that number as a F64?</p>\n<div class=\"codehilite\"><pre><span></span><code>» 1701411834604692531795.748f64\n\n1701411834604692400000 : F64\n</code></pre></div>",
        "id": 485419668,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733000122
    },
    {
        "content": "<p>wdym</p>",
        "id": 485419695,
        "sender_full_name": "Wizard ish",
        "timestamp": 1733000151
    },
    {
        "content": "<p>When I put it in the repl it's getting cut off at the <code>4</code>, rounding and losing precision</p>",
        "id": 485419762,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733000195
    },
    {
        "content": "<p>It's definitly in the range, it's probably just not high percision that far from 0</p>",
        "id": 485419820,
        "sender_full_name": "Wizard ish",
        "timestamp": 1733000277
    },
    {
        "content": "<p>Ok yeah i don't think it's related</p>",
        "id": 485420178,
        "sender_full_name": "Wizard ish",
        "timestamp": 1733000571
    },
    {
        "content": "<p>but ima check anyway</p>",
        "id": 485420185,
        "sender_full_name": "Wizard ish",
        "timestamp": 1733000579
    },
    {
        "content": "<p>Ok yeah it's a bug in another part of the code</p>",
        "id": 485420452,
        "sender_full_name": "Wizard ish",
        "timestamp": 1733000865
    },
    {
        "content": "<p>We should return a constant out of range error if the constant is too large to be converted into a Dec</p>",
        "id": 485420756,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733001134
    },
    {
        "content": "<p>So there is a missing error that needs to be wired up</p>",
        "id": 485420773,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733001165
    },
    {
        "content": "<p>So that error is correct, it just isn't pretty</p>",
        "id": 485420828,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733001225
    },
    {
        "content": "<p>No, it <em>is</em> a valid F64, Roc is just saying it isn't</p>",
        "id": 485420834,
        "sender_full_name": "Wizard ish",
        "timestamp": 1733001233
    },
    {
        "content": "<p>It isn't an f64</p>",
        "id": 485420883,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733001251
    },
    {
        "content": "<p>It's a Dec.</p>",
        "id": 485420896,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733001264
    },
    {
        "content": "<p>And it isn't a valid Dec</p>",
        "id": 485420902,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733001271
    },
    {
        "content": "<p>At what point?</p>",
        "id": 485420947,
        "sender_full_name": "Wizard ish",
        "timestamp": 1733001319
    },
    {
        "content": "<p>Oh, am I mixed up, I thought it was too large to be a valid Dec and that is the failuer</p>",
        "id": 485421027,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733001370
    },
    {
        "content": "<p>oh there was a mistake, but it's still invalid even if I switch <code>toDec</code> to <code>toDecChecked</code></p>",
        "id": 485421037,
        "sender_full_name": "Wizard ish",
        "timestamp": 1733001377
    },
    {
        "content": "<p>If it fits in a Dec then it is a Dec parsing bug</p>",
        "id": 485421048,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733001386
    },
    {
        "content": "<p>Even if its marked as a float?</p>",
        "id": 485421098,
        "sender_full_name": "Wizard ish",
        "timestamp": 1733001453
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"782426\">Wizard ish</span> <a href=\"#narrow/stream/316715-contributing/topic/Decimal.20max.20and.20to/near/485419503\">said</a>:</p>\n<blockquote>\n<p>Do you get this or is this a bug in my addition?</p>\n<p><div class=\"codehilite\"><pre><span></span><code>An internal compiler expectation was broken.\nThis is definitely a compiler bug.\nPlease file an issue here: &lt;https://github.com/roc-lang/roc/issues/new/choose&gt;\nUndefined Symbol in relocation, (+6360, Relocation { kind: PltRelative, encoding: Generic, size: +20, target: Symbol(SymbolIndex(+a6)), addend: +fffffffffffffffc, implicit_addend: false }): Ok(Symbol { name: &quot;__fixdfti&quot;, address: +0, size: +0, kind: Unknown, section: Undefined, scope: Unknown, weak: false, flags: Elf { st_info: +10, st_other: +0 } })\nLocation: crates/linker/src/elf.rs:1452:25\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>You probably need to explicit tell llvm not to Dead code eliminate that function. It's probably part of compiler rt.</p>",
        "id": 485421173,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733001491
    },
    {
        "content": "<p>which func</p>",
        "id": 485421186,
        "sender_full_name": "Wizard ish",
        "timestamp": 1733001513
    },
    {
        "content": "<p>toDec?</p>",
        "id": 485421201,
        "sender_full_name": "Wizard ish",
        "timestamp": 1733001539
    },
    {
        "content": "<p><code>__fixdfti</code></p>",
        "id": 485421212,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733001554
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"782426\">Wizard ish</span> <a href=\"#narrow/stream/316715-contributing/topic/Decimal.20max.20and.20to/near/485421098\">said</a>:</p>\n<blockquote>\n<p>Even if its marked as a float?</p>\n</blockquote>\n<p>I don't follow. Based on Luke's comments above, it works with the <code>f64</code> suffix. So it works when marked as a float.</p>",
        "id": 485421349,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733001679
    },
    {
        "content": "<p>no it doesn't</p>",
        "id": 485421357,
        "sender_full_name": "Wizard ish",
        "timestamp": 1733001693
    },
    {
        "content": "<p>here</p>",
        "id": 485421364,
        "sender_full_name": "Wizard ish",
        "timestamp": 1733001705
    },
    {
        "content": "<p><a href=\"https://github.com/wizard7377/roc/blob/87ca37ded827f5b20c023a50fd291fcadd296105/crates/compiler/gen_llvm/src/llvm/lowlevel.rs#L1153\">Here's</a> the work on Dec functions and both of these fail:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">app</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">pf</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">platform</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/roc-lang/basic-cli/releases/download/0.16.0/O00IPk-Krg_diNS2dVWlI0ZQP794Vctxzv0ha96mK0E.tar.br\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">pf.Stdout</span>\n\n<span class=\"kr\">main </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">numF64</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"mi\">1701411795</span><span class=\"nv\">f64</span>\n<span class=\"w\">    </span><span class=\"nv\">numDec</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toDecChecked</span><span class=\"w\"> </span><span class=\"nv\">numF64</span>\n<span class=\"w\">    </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Inspect</span><span class=\"nf\">.</span><span class=\"nv\">toStr</span><span class=\"w\"> </span><span class=\"nv\">numDec</span><span class=\"p\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">app</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">pf</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">platform</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/roc-lang/basic-cli/releases/download/0.16.0/O00IPk-Krg_diNS2dVWlI0ZQP794Vctxzv0ha96mK0E.tar.br\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">pf.Stdout</span>\n\n<span class=\"kr\">main </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">numF64</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"mf\">17014117913243243243234223141241.</span><span class=\"mi\">43243</span><span class=\"nv\">f64</span>\n<span class=\"w\">    </span><span class=\"nv\">numDec</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toDecChecked</span><span class=\"w\"> </span><span class=\"nv\">numF64</span>\n<span class=\"w\">    </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Inspect</span><span class=\"nf\">.</span><span class=\"nv\">toStr</span><span class=\"w\"> </span><span class=\"nv\">numDec</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 485421682,
        "sender_full_name": "Wizard ish",
        "timestamp": 1733001972
    },
    {
        "content": "<p>With </p>\n<div class=\"codehilite\"><pre><span></span><code>An internal compiler expectation was broken.\nThis is definitely a compiler bug.\nPlease file an issue here: &lt;https://github.com/roc-lang/roc/issues/new/choose&gt;\nUndefined Symbol in relocation, (+7fb0, Relocation { kind: PltRelative, encoding: Generic, size: +20, target: Symbol(SymbolIndex(+a9)), addend: +fffffffffffffffc, implicit_addend: false }): Ok(Symbol { name: &quot;__fixdfti&quot;, address: +0, size: +0, kind: Unknown, section: Undefined, scope: Unknown, weak: false, flags: Elf { st_info: +10, st_other: +0 } })\nLocation: crates/linker/src/elf.rs:1452:25\n</code></pre></div>",
        "id": 485421730,
        "sender_full_name": "Wizard ish",
        "timestamp": 1733001996
    },
    {
        "content": "<p>Oh sure. That is a separate issue from <code>Invalid decimal for float literal = 1701411834604692531795.748. This should be a type error!</code>.</p>\n<p>Let me try and find where you need to stop dead code elimination</p>",
        "id": 485421818,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733002080
    },
    {
        "content": "<p>I think Brendan is talking about adding that function here <a href=\"https://github.com/roc-lang/roc/blob/49ab969ff3eedad0d5feaa56dc63e7cb4be3b471/crates/compiler/gen_llvm/src/llvm/build.rs#L1056\">https://github.com/roc-lang/roc/blob/49ab969ff3eedad0d5feaa56dc63e7cb4be3b471/crates/compiler/gen_llvm/src/llvm/build.rs#L1056</a></p>",
        "id": 485421870,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733002089
    },
    {
        "content": "<p>Yes, exactly. Thanks for finding it!</p>",
        "id": 485421890,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733002114
    },
    {
        "content": "<p>hmmm and do i add the llvm operation name or the name given in the code</p>",
        "id": 485421927,
        "sender_full_name": "Wizard ish",
        "timestamp": 1733002151
    },
    {
        "content": "<p><code>__fixdfti</code> from the linker error</p>",
        "id": 485422062,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733002287
    },
    {
        "content": "<p>ah ok</p>",
        "id": 485422073,
        "sender_full_name": "Wizard ish",
        "timestamp": 1733002301
    },
    {
        "content": "<p>Yo that fixed it!</p>",
        "id": 485422168,
        "sender_full_name": "Wizard ish",
        "timestamp": 1733002363
    },
    {
        "content": "<p>ok and the implementations of the funcs are done<br>\njust gonna add some tests and then open the pr</p>",
        "id": 485423771,
        "sender_full_name": "Wizard ish",
        "timestamp": 1733003921
    },
    {
        "content": "<p>Why are there three backends, and what even is the <code>dev</code> backend?</p>",
        "id": 485428010,
        "sender_full_name": "Wizard ish",
        "timestamp": 1733008173
    },
    {
        "content": "<p>The <code>gen-llvm</code> backend is used to produce optimised code which means the code that is produces will run fast.</p>\n<p>The <code>gen-dev</code> backends are designed to compile and produce code very fast (a few milliseconds) so they are nicer for a development workflow where you don't care (yet) about runtime performance but instead want to iterate fast. </p>\n<p>The <code>gen-wasm</code> backend produces native wasm32 bytecode and is the <code>dev</code> backend equivalent for wasm.</p>\n<p>LLVM is really great, but it is very slow to compile like on the order of 700 milliseconds for a hello word type app.</p>",
        "id": 485430070,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733010379
    },
    {
        "content": "<p>does <code>gen-dev</code> use LLVM?</p>",
        "id": 485431137,
        "sender_full_name": "Wizard ish",
        "timestamp": 1733011427
    },
    {
        "content": "<p>Nope. It generates assembly directly</p>",
        "id": 485435786,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733016313
    },
    {
        "content": "<p>Hey, should PRs be seperate from the diffrent backends (so, for instance, should / can I make a PR just implementing toDec for LLVM)?</p>",
        "id": 485501561,
        "sender_full_name": "Wizard ish",
        "timestamp": 1733075908
    },
    {
        "content": "<p>Totally fine either way.</p>",
        "id": 485505595,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733079298
    },
    {
        "content": "<p>Very often llvm backend has features long before the other backends</p>",
        "id": 485505610,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733079311
    },
    {
        "content": "<p>Frankly, we really need to iron out the last few features for the dev backend so that it could be enabled by default (though that may reveal that we also need a proper register allocator and a bigger overhaul)</p>",
        "id": 485505700,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733079371
    },
    {
        "content": "<p>Hmm that’s done in mono right?</p>",
        "id": 485505735,
        "sender_full_name": "Wizard ish",
        "timestamp": 1733079406
    },
    {
        "content": "<p>Register allocation? No, it's backend specific.</p>",
        "id": 485505769,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733079439
    },
    {
        "content": "<p>I mean gen dev</p>",
        "id": 485505782,
        "sender_full_name": "Wizard ish",
        "timestamp": 1733079449
    },
    {
        "content": "<p>Yep</p>",
        "id": 485505787,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733079454
    },
    {
        "content": "<p>Ok</p>",
        "id": 485505849,
        "sender_full_name": "Wizard ish",
        "timestamp": 1733079484
    },
    {
        "content": "<p>Its register allocation is exceptionally naive right now. Runs super fast, but spills all the time. The dev backend currently goes straight from mono to assembly. This is fast, but really the wrong abstraction for generating assembly. So it has some complications and limitations.</p>\n<p>Currently the dev backend is used for the repl and can be opted into. I think the only major missing feature is generating the platform interface correctly. Once that is done, it could be the default backend.</p>",
        "id": 485506135,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733079704
    },
    {
        "content": "<p>Wasm backend is farther along. It is used for the web repl, but also can be used for real apps (still requires explicit opt in)</p>",
        "id": 485506210,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733079743
    },
    {
        "content": "<p>I’m not familiar with it. Does it just always load stuff into memory even if the next op uses it?</p>",
        "id": 485509729,
        "sender_full_name": "Wizard ish",
        "timestamp": 1733082717
    },
    {
        "content": "<p>out of curosity why is mono used?</p>",
        "id": 485512453,
        "sender_full_name": "Wizard ish",
        "timestamp": 1733085332
    },
    {
        "content": "<p>It keeps a working list of stuff in registers, but doesn't track lifetimes in order to be smarter. So it just pushes the oldest thing in a register to stack if it runs out of registers.</p>",
        "id": 485710307,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733174265
    },
    {
        "content": "<p>It uses mono cause that is the bottom of the compiler stack before backends. It is faster to just use mono than to build and convert to another ir.</p>",
        "id": 485710393,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733174299
    },
    {
        "content": "<p>ah i see, anything y'all in particular need help with?</p>",
        "id": 485712842,
        "sender_full_name": "Wizard ish",
        "timestamp": 1733175421
    },
    {
        "content": "<p>The plan is actually now to add an extra level of ir:<br>\n<a href=\"https://github.com/roc-lang/roc/issues/6498\">https://github.com/roc-lang/roc/issues/6498</a></p>",
        "id": 485714320,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733176140
    },
    {
        "content": "<p>Bigger project, but very useful.</p>",
        "id": 485714344,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733176151
    },
    {
        "content": "<p>while you go into it a little, exactly how high level should it be?</p>",
        "id": 485722127,
        "sender_full_name": "Wizard ish",
        "timestamp": 1733179921
    },
    {
        "content": "<p>should it be like assembly, where, for instance, types are completly irrelevant and for instance <code>Add&lt;i32&gt;</code> is a completly seperate op from <code>Add&lt;u64&gt;</code> (ie <code>AddSigned4</code> and <code>AddUnsigned8</code>) or rather should it have types tagged (so have registers also store types) so one writes <code>Add</code> and it will then when translated in binary become either <code>Add&lt;i32&gt;</code> or <code>Add&lt;u64&gt;</code>?</p>",
        "id": 485722271,
        "sender_full_name": "Wizard ish",
        "timestamp": 1733179990
    },
    {
        "content": "<p>I assumed roughly one enum entry per function here: <a href=\"https://github.com/roc-lang/roc/blob/fc6b519b5948023981ac5751d2f6ee48bcef2316/crates/compiler/gen_dev/src/generic64/mod.rs#L153-L742\">https://github.com/roc-lang/roc/blob/fc6b519b5948023981ac5751d2f6ee48bcef2316/crates/compiler/gen_dev/src/generic64/mod.rs#L153-L742</a></p>",
        "id": 485734298,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733187619
    },
    {
        "content": "<p>That is our current assembly abstraction</p>",
        "id": 485734331,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733187641
    },
    {
        "content": "<p>Hello, I was advised (here)[https://github.com/roc-lang/roc/pull/7261#issuecomment-2556535016], to sign my old commits, however I couldn’t find any source that said how to sign pushed commits in a PR. How would I do this?</p>",
        "id": 490193889,
        "sender_full_name": "Wizard ish",
        "timestamp": 1734712124
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"782426\">@Wizard ish</span>,<br>\nIt is explained <a href=\"https://github.com/roc-lang/roc/blob/main/devtools/signing.md\">here</a> but I don't recommend doing that procedure in the case of this PR, because its complicated if you got merges in there. We'll force the merge, I'm just going to check out the failure of the panic check.</p>",
        "id": 490196308,
        "sender_full_name": "Anton",
        "timestamp": 1734712968
    },
    {
        "content": "<p>Ok, also that should be linked with signing in the contribution guide</p>",
        "id": 490203235,
        "sender_full_name": "Wizard ish",
        "timestamp": 1734715685
    },
    {
        "content": "<p>It is linked: <a href=\"https://github.com/roc-lang/roc/blob/main/CONTRIBUTING.md#commit-signing\">https://github.com/roc-lang/roc/blob/main/CONTRIBUTING.md#commit-signing</a><br>\nBut I welcome suggestions on how we can make that more visible</p>",
        "id": 490207836,
        "sender_full_name": "Anton",
        "timestamp": 1734717822
    },
    {
        "content": "<p>Oh I was looking under the dropdown</p>",
        "id": 490220390,
        "sender_full_name": "Wizard ish",
        "timestamp": 1734723637
    },
    {
        "content": "<p>Yeah my original here link was wrong, the dropdown (Forgot to sign commits?) actually seems to contain the best answer to your question \"to sign my old commits\".</p>\n<blockquote>\n<p>Hi <span class=\"user-mention silent\" data-user-id=\"782426\">Wizard ish</span>,<br>\nIt is explained <a href=\"https://github.com/roc-lang/roc/blob/main/devtools/signing.md\">here</a> but I don't recommend doing that procedure in the case of this PR, because its complicated if you got merges in there. We'll force the merge, I'm just going to check out the failure of the panic check.</p>\n</blockquote>",
        "id": 490221531,
        "sender_full_name": "Anton",
        "timestamp": 1734724212
    },
    {
        "content": "<p>Do you agree?</p>",
        "id": 490221553,
        "sender_full_name": "Anton",
        "timestamp": 1734724228
    },
    {
        "content": "<p>Yeah, though both are quite useful</p>",
        "id": 490221891,
        "sender_full_name": "Wizard ish",
        "timestamp": 1734724392
    },
    {
        "content": "<p>I'll link to the guide again under the dropdown</p>",
        "id": 490222277,
        "sender_full_name": "Anton",
        "timestamp": 1734724612
    },
    {
        "content": "<p>What do you think?<br>\n<a href=\"/user_uploads/22008/9u-Ot_8jJuRcKGq6HQKz2Xr_/Screenshot-from-2024-12-20-21-00-01.png\">Screenshot from 2024-12-20 21-00-01.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/9u-Ot_8jJuRcKGq6HQKz2Xr_/Screenshot-from-2024-12-20-21-00-01.png\" title=\"Screenshot from 2024-12-20 21-00-01.png\"><img data-original-dimensions=\"1033x276\" src=\"/user_uploads/thumbnail/22008/9u-Ot_8jJuRcKGq6HQKz2Xr_/Screenshot-from-2024-12-20-21-00-01.png/840x560.webp\"></a></div>",
        "id": 490222708,
        "sender_full_name": "Anton",
        "timestamp": 1734724817
    },
    {
        "content": "<p>it's good, but imo it should really be a <a href=\"https://docs.github.com/en/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax#alerts\">alert</a></p>",
        "id": 490225535,
        "sender_full_name": "Wizard ish",
        "timestamp": 1734726217
    },
    {
        "content": "<p>I didn't know about alerts, those are nice!<br>\nI did find out that they do not work inside dropdowns so I went with an exclamation emoji instead</p>",
        "id": 490290519,
        "sender_full_name": "Anton",
        "timestamp": 1734780368
    },
    {
        "content": "<p>Yeah, github has a lot of fun formatting things, you can find much on them <a href=\"https://docs.github.com/en/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/quickstart-for-writing-on-github\">here</a>. My personal favorite has got to be <a href=\"https://docs.github.com/en/get-started/writing-on-github/working-with-advanced-formatting/creating-diagrams\">diagramming</a></p>",
        "id": 490342322,
        "sender_full_name": "Wizard ish",
        "timestamp": 1734826480
    }
]