[
    {
        "content": "<p>I thought I'd share this short summary in case it helps anyone interested in contributing to the new zig compiler. It's a small example working with the Parser and s-expressions with our snapshot tool.</p>\n<p>I started by translating the old test_syntax snapshot from <code>crates/compiler/test_syntax/tests/snapshots/pass/add_var_with_spaces.expr.roc</code> to soemthing like the below at <code>src/snapshots/if_then_else.txt</code></p>\n<div class=\"codehilite\"><pre><span></span><code>~~~META\ndescription=Correct formatting for if-then-else statement\n~~~SOURCE\nmodule [foo]\n\nfoo =\n    if\n    h\n    then\n    A\n    else &amp;e\n    s#\n~~~FORMATTED\nmodule [foo]\n\nfoo =\n    if\n        h\n    then\n        A\n    else\n        &amp;e\n    s #\n</code></pre></div>\n<p>However, running the snapshot tool <code>zig build snapshot</code> gave me an error ...</p>\n<div class=\"codehilite\"><pre><span></span><code>thread 2240469 panic: TODO: problem for no else UpperIdent@14\n/Users/luke/Documents/GitHub/roc/src/check/parse/Parser.zig:868:32: 0x1007758c7 in parseExprWithBp (snapshot)\n</code></pre></div>\n<p>I expected to run into something like this. The issue here I think is that we've changed the syntax for <code>if-then-else</code>.</p>\n<p>This snapshot is no longer relevant at least in it's current form. </p>\n<p>So I modified it to use the new syntax taking inspiration from Anthony's \"grab bag\" unit test and used deliberately using sloppy formatting so I can validate the formatting also.</p>\n<div class=\"codehilite\"><pre><span></span><code>~~~META\ndescription=Example if-then-else statement\n~~~SOURCE\nmodule [foo]\n\nfoo = if true A\n\n    else {\n    B\n    }\n</code></pre></div>\n<p>However running it with <code>zig build snapshot</code> gave errors telling me I had unimplemented paths for generating a s-expression. </p>\n<p>Following the compiler errors like a bouncing ball, I implemented those. </p>\n<p>Here's what I wrote.</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"c1\">// (tag &lt;tag&gt;)</span>\n<span class=\"p\">.</span><span class=\"n\">tag</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">tag</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kr\">var</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sexpr</span><span class=\"p\">.</span><span class=\"n\">Expr</span><span class=\"p\">.</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">.</span><span class=\"n\">gpa</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"tag\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">appendStringChild</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">.</span><span class=\"n\">gpa</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ir</span><span class=\"p\">.</span><span class=\"n\">resolve</span><span class=\"p\">(</span><span class=\"n\">tag</span><span class=\"p\">.</span><span class=\"n\">token</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">;</span>\n<span class=\"p\">},</span>\n\n<span class=\"c1\">// (if_then_else &lt;condition&gt; &lt;then&gt; &lt;else&gt;)</span>\n<span class=\"p\">.</span><span class=\"n\">if_then_else</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">stmt</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kr\">var</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sexpr</span><span class=\"p\">.</span><span class=\"n\">Expr</span><span class=\"p\">.</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">.</span><span class=\"n\">gpa</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"if_then_else\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kr\">var</span><span class=\"w\"> </span><span class=\"n\">condition</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ir</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">getExpr</span><span class=\"p\">(</span><span class=\"n\">stmt</span><span class=\"p\">.</span><span class=\"n\">condition</span><span class=\"p\">).</span><span class=\"n\">toSExpr</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ir</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kr\">var</span><span class=\"w\"> </span><span class=\"n\">then</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ir</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">getExpr</span><span class=\"p\">(</span><span class=\"n\">stmt</span><span class=\"p\">.</span><span class=\"n\">then</span><span class=\"p\">).</span><span class=\"n\">toSExpr</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ir</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kr\">var</span><span class=\"w\"> </span><span class=\"n\">else_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ir</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">getExpr</span><span class=\"p\">(</span><span class=\"n\">stmt</span><span class=\"p\">.</span><span class=\"err\">@</span><span class=\"s\">\"else\"</span><span class=\"p\">).</span><span class=\"n\">toSExpr</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ir</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">appendNodeChild</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">.</span><span class=\"n\">gpa</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">condition</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">appendNodeChild</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">.</span><span class=\"n\">gpa</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">then</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">appendNodeChild</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">.</span><span class=\"n\">gpa</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">else_</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">;</span>\n<span class=\"p\">},</span>\n</code></pre></div>\n<p>Finally running the snapshot tool gave me the following final golden output which I can commit to the repository. You can see it now includes the FORMATTED and PARSE sections which were generated from the SOURCE.</p>\n<div class=\"codehilite\"><pre><span></span><code>~~~META\ndescription=Example if-then-else statement\n~~~SOURCE\nmodule [foo]\n\nfoo = if true A\n\n    else {\n    B\n    }\n~~~FORMATTED\nmodule [foo]\n\nfoo = if true A else B\n~~~PARSE\n(file\n    (header &#39;foo&#39;)\n    (decl\n        (ident &#39;foo&#39;)\n        (if_then_else\n            (ident &#39;&#39; &#39;true&#39;)\n            (tag &#39;A&#39;)\n            (block (tag &#39;B&#39;)))))\n</code></pre></div>\n<p>Relevant commit <a href=\"https://github.com/roc-lang/roc/pull/7669/commits/7d793aa6ee0e933a7d021f80df78fa554d7a5e9f\">https://github.com/roc-lang/roc/pull/7669/commits/7d793aa6ee0e933a7d021f80df78fa554d7a5e9f</a></p>",
        "id": 503736901,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1741251535
    }
]