[
    {
        "content": "<p>I played around with the following code and couldn't understand why it didn't work as expected:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"c1\">-- unexpected type annotation</span>\n<span class=\"nf\">ignoreResult</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">*</span>\n<span class=\"nf\">ignoreResult</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">task</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">task</span>\n<span class=\"w\">    </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n\n<span class=\"c1\">-- desugared version</span>\n<span class=\"nf\">ignoreResultDesugared</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">*</span>\n<span class=\"nf\">ignoreResultDesugared</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">task</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"n\">task</span>\n\n<span class=\"c1\">-- what I expected</span>\n<span class=\"nf\">ignoreResultExpected</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"o\">*</span>\n<span class=\"nf\">ignoreResultExpected</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">task</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"n\">task</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"kr\">_</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n</code></pre></div>\n<p>currently, desugaring works this way:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"c1\">-- initial code</span>\n<span class=\"nf\">ignoreResult</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">task</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">task</span>\n<span class=\"w\">    </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n\n<span class=\"c1\">-- 1. add record destructuring in front of the statement (why not underscore?)</span>\n<span class=\"nf\">ignoreResult</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">task</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">task</span>\n<span class=\"w\">    </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n\n<span class=\"c1\">-- 2. unwrap TaskAwaitBang to a Task.await call preserving record destructuring</span>\n<span class=\"nf\">ignoreResult</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">task</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"n\">task</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n\n<span class=\"c1\">-- 3. drop destructuring because input and output are the same. it's incorrect</span>\n<span class=\"nf\">ignoreResult</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">task</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"n\">task</span>\n</code></pre></div>\n<p>what I want to do:</p>\n<ol>\n<li>use <code>_</code> instead of <code>{}</code> in step 2</li>\n<li>remove step <code>3</code></li>\n</ol>\n<p>Just want to confirm that it's a bug and the fix logic is correct</p>",
        "id": 449124639,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1720109805
    },
    {
        "content": "<p>Yeah. That sounds like a bug and correct fix</p>",
        "id": 449126496,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720110337
    },
    {
        "content": "<p>going to create a pr soon then</p>",
        "id": 449126602,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1720110365
    },
    {
        "content": "<p>Oh, one quick thought</p>",
        "id": 449128830,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720111217
    },
    {
        "content": "<p><code>result!</code> returns data, so maybe we intentionally want to force users to write:</p>\n<div class=\"codehilite\"><pre><span></span><code>_ = Task.result! task\n</code></pre></div>",
        "id": 449128938,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720111288
    },
    {
        "content": "<p>Like be explicit they meant to throw away the data.</p>",
        "id": 449128992,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720111313
    },
    {
        "content": "<p>I could see the value in that (of course it would need a custom error to avoid confusion)</p>",
        "id": 449129084,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720111341
    },
    {
        "content": "<p>I believe there was a discussion a long time ago and as a result, statements were introduced. otherwise we'd write <code>_ = </code> everywhere.<br>\nOr you mean, allow statements only for <code>Task {} *</code> case?</p>",
        "id": 449129861,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1720111712
    },
    {
        "content": "<p>I would agree with this.</p>",
        "id": 449129886,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1720111722
    },
    {
        "content": "<p>In Rust, we have the #[must_use] directive, which makes sure that users don't perform fallible tasks and forget to handle a Result</p>",
        "id": 449129982,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1720111780
    },
    {
        "content": "<p>Without such a directive here, if we don't require users to at least put an underscore, it becomes very easy to avoid handling task outcomes</p>",
        "id": 449130177,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1720111857
    },
    {
        "content": "<p>I like the idea. not sure how to implement it tho. it's a type based unused variable</p>",
        "id": 449130370,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1720111942
    },
    {
        "content": "<p>The simple thing is what I think we already do: allow skipping the assignment if the {} unit type is returned, otherwise require an assignment</p>",
        "id": 449131128,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1720112181
    },
    {
        "content": "<p>can you give an example?</p>",
        "id": 449131616,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1720112390
    },
    {
        "content": "<p>The fix for the problem described in the head message: <a href=\"https://github.com/roc-lang/roc/issues/6868\">https://github.com/roc-lang/roc/issues/6868</a></p>",
        "id": 449146523,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1720118294
    },
    {
        "content": "<p>I think an example is this:</p>\n<div class=\"codehilite\"><pre><span></span><code>x = Stdin.line!\n{} = Stdout.line! &quot;some output&quot;\n</code></pre></div>\n<p>We definitely want to allow:</p>\n<div class=\"codehilite\"><pre><span></span><code>x = Stdin.line!\nStdout.line! &quot;some output&quot;\n</code></pre></div>\n<p>We actually might not want to allow:</p>\n<div class=\"codehilite\"><pre><span></span><code>Stdin.line!\nStdout.line! &quot;some output&quot;\n</code></pre></div>\n<p>With this final code, we may want to force the user to be explicit that they are throwing away the result of <code>Stdin.line!</code>. So We may want to generate an error that say: <code>Stdin.line! returns a Str, but you are not using it. If this is intentional, please write \"_ = Stdin.line!\"</code></p>\n<p>As such, the required form would be:</p>\n<div class=\"codehilite\"><pre><span></span><code>_ = Stdin.line!\nStdout.line! &quot;some output&quot;\n</code></pre></div>\n<p>Basically, the question is: Do we want warnings for when the result of a Task! is not used and is not <code>{}</code>?</p>",
        "id": 449149421,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720119927
    },
    {
        "content": "<p>I could see people voting either way. I think the explicit <code>_ = </code> is a lot clearer on intention, but is extra verbosity. It also, likely will be a bit harder to program into the compiler, but I think it is likely the better solution so that a user doesn't accidentally miss a returned value from a task.</p>",
        "id": 449149741,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720120048
    },
    {
        "content": "<p>yeah I think statements should only work for <code>Task {} _</code></p>",
        "id": 449154709,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1720121740
    },
    {
        "content": "<p>Yeah, I agree with all points. I meant, an example of what <span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> was talking about.</p>\n<p>I imagined suffixed stmt desugaring to work this way, in particular the first step:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">ignoreResult</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">task</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">task</span>\n<span class=\"w\">    </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n\n<span class=\"c1\">-- 1. add a unique var in front of the statement along with a type annotation</span>\n<span class=\"nf\">ignoreResult</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">task</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"o\">#!</span><span class=\"n\">a0</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"w\">    </span><span class=\"o\">#!</span><span class=\"n\">a0</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">task</span>\n<span class=\"w\">    </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n</code></pre></div>",
        "id": 449154730,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1720121757
    },
    {
        "content": "<p>and then if not a unit type returned - ask user to have an explicit pattern. otherwise - ignore the unused variable (assuming it's a special kind of var)</p>",
        "id": 449154843,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1720121820
    },
    {
        "content": "<p>However, no need to add the annotation if there’s a special kind of pattern. I’ll play with the concept. I don’t know how errors/warnings of the compiler are collected, and didn’t look into type system much yet, so it will be a good introduction I think</p>",
        "id": 449158053,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1720123633
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"584248\">Kiryl Dziamura</span> <a href=\"#narrow/stream/316715-contributing/topic/TaskAwaitBang.20statement.20desugaring/near/449154730\">said</a>:</p>\n<blockquote>\n<p>Yeah, I agree with all points. I meant, an example of what <span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> was talking about.</p>\n</blockquote>\n<p>I might be communicating poorly, I'm just saying what Richard said. If the Task returns {}, we know nothing valuable was returned. Otherwise, if the dev is forced to assign the value to a variable, we get what I'm talking about for free</p>",
        "id": 449161605,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1720125058
    },
    {
        "content": "<p>In that if they assign a variable that's not prefixed with an underscore, they'll get a warning if the value isn't used. So they need to explicitly ignore the value by prefixing with an underscore to ignore it, which is good enough as a #[must_use] in my eyes</p>",
        "id": 449161720,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1720125139
    },
    {
        "content": "<p>Then we’re on the same page! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 449162304,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1720125546
    },
    {
        "content": "<p>Awesome!</p>",
        "id": 449162318,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1720125555
    },
    {
        "content": "<p>I think there may have been some confusion here. At least I'm a little confused about the PR. -- I'll try and explain 1 sec</p>",
        "id": 449182053,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720137526
    },
    {
        "content": "<p>I thought were desugaring suffixed statements into <code>{} = Task.await ...</code> because that restricts their use to only tasks that are <code>Task {} _</code>.</p>",
        "id": 449182935,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720137951
    },
    {
        "content": "<p>For example the following example is not the behaviour that we want</p>\n<div class=\"codehilite\"><pre><span></span><code>main =\n    Stdin.input!\n\n    Stdout.print &quot;just ingore the input&quot;\n\n# the PR would desguar this into\nmain =\n    Task.await (Stdin.input) \\_ -&gt;\n\n        Stdout.print &quot;just ingore the input&quot;\n</code></pre></div>",
        "id": 449183477,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720138103
    },
    {
        "content": "<p>While this should be permitted because the user is intentionally throwing the input away</p>\n<div class=\"codehilite\"><pre><span></span><code>main =\n    _ = Stdin.input!\n\n    Stdout.print &quot;just ingore the input&quot;\n\n# this should be ok, and is the current bevahiour (ASFAIK)\nmain =\n    Task.await (Stdin.input) \\_ -&gt;\n\n        Stdout.print &quot;just ingore the input&quot;\n</code></pre></div>",
        "id": 449183745,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720138183
    },
    {
        "content": "<p>And if they just make it a statement and don't explicitly ignore, like below, then this should throw a type error.</p>\n<div class=\"codehilite\"><pre><span></span><code>main =\n    Stdin.input!\n\n    Stdout.print &quot;just ingore the input&quot;\n\n# this will throw a type error\nmain =\n    Task.await (Stdin.input) \\{} -&gt;\n\n        Stdout.print &quot;just ingore the input&quot;\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>── TYPE MISMATCH in main.roc ───────────────────────────────────────────────────\n\nThis 2nd argument to this function has an unexpected type:\n\n10│      Stdin.input!\n\n\nThe argument is an anonymous function of type:\n\n    {}a -&gt; Task {} […]\n\nBut this function needs its 2nd argument to be:\n\n    Str -&gt; Task {} […]\n\n────────────────────────────────────────────────────────────────────────────────\n</code></pre></div>",
        "id": 449184236,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720138389
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> are you saying this is how you thought we agreed it should work, or how you personally think it should work?</p>",
        "id": 449184918,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1720138899
    },
    {
        "content": "<p>I think users should be able to use ! to await any Task, and eliding the {} = means when the task returns {}, we can throw that away because it's useless</p>",
        "id": 449185010,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1720138973
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/316715-contributing/topic/TaskAwaitBang.20statement.20desugaring/near/449154709\">said</a>:</p>\n<blockquote>\n<p>yeah I think statements should only work for <code>Task {} _</code></p>\n</blockquote>\n<p>This is basically what I'm thinking of, and why I don't think we <em>should</em> have statements for any task.</p>",
        "id": 449185757,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720139356
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/316715-contributing/topic/TaskAwaitBang.20statement.20desugaring/near/449128938\">said</a>:</p>\n<blockquote>\n<p><code>result!</code> returns data, so maybe we intentionally want to force users to write:</p>\n<p><div class=\"codehilite\"><pre><span></span><code>_ = Task.result! task\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>And also this. If users want to throw away the data they can add a <code>_ =</code> assignment and be explicit.</p>",
        "id": 449186009,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720139451
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/stream/316715-contributing/topic/TaskAwaitBang.20statement.20desugaring/near/449184918\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> are you saying this is how you thought we agreed it should work, or how you personally think it should work?</p>\n</blockquote>\n<p>I'm saying I think there has been some confusion. Based on my read of the above discussion, and the behaviour I can see in the PR, I don't think it matches.</p>\n<p>I'm seeking clarification -- as much as pointing out how I also understand the design was intended to work.</p>",
        "id": 449186320,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720139587
    },
    {
        "content": "<p>Okay, when we say \"statement\", we mean something like</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"s\">\"Hello world\"</span>\n</code></pre></div>\n<p>Where we call a task <code>Task {} _</code>, but don't <em>assign</em> anything. Whereas an \"assignment\" means</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">data</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Http</span><span class=\"nf\">.</span><span class=\"nv\">get</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"s\">\"api.com\"</span>\n</code></pre></div>",
        "id": 449188675,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1720140993
    },
    {
        "content": "<p>Okay, given that much</p>",
        "id": 449188899,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1720141079
    },
    {
        "content": "<p>Yeah, it's a very specific distinction based on the implementation for the <code>Ast::Expr</code>type</p>",
        "id": 449189046,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720141131
    },
    {
        "content": "<p>We only have statements for <code>dbg</code> <code>expect</code> <code>if then else</code> <code>when</code></p>",
        "id": 449189073,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720141168
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/316715-contributing/topic/TaskAwaitBang.20statement.20desugaring/near/449185757\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/316715-contributing/topic/TaskAwaitBang.20statement.20desugaring/near/449154709\">said</a>:</p>\n<blockquote>\n<p>yeah I think statements should only work for <code>Task {} _</code></p>\n</blockquote>\n<p>This is basically what I'm thinking of, and why I don't think we <em>should</em> have statements for any task.</p>\n</blockquote>\n<p>You would rather not have \"statements\", aka users should have to write</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"s\">\"Hello world\"</span>\n</code></pre></div>",
        "id": 449189074,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1720141171
    },
    {
        "content": "<p>Is that the case?</p>",
        "id": 449189084,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1720141182
    },
    {
        "content": "<p>This is discussed in the <a href=\"https://docs.google.com/document/d/1mTEZlOKqtMonmVsIGEC1A9ufs1TQHhVgZ52Vn-13GeU/edit?usp=sharing\">Chaining Syntax Design Proposal</a></p>",
        "id": 449189238,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720141289
    },
    {
        "content": "<p>See the section <code>Task statements</code></p>",
        "id": 449189254,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720141305
    },
    {
        "content": "<p>I'll read through that again. In the mean time, I think I personally am okay with eliding the left hand side of this assignment for a few reasons</p>\n<ul>\n<li>like how Task.await is the only thing that ! now means, eliding <code>{} = </code> is unambiguous if it only happens with unit value Tasks</li>\n<li>there are lots of ops that return {}, so it is nice to be able to ignore their result</li>\n</ul>",
        "id": 449189655,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1720141623
    },
    {
        "content": "<p>yeah so maybe a summary would be:</p>\n<ul>\n<li>it should never be necessary to write <code>{} = someTask! ...</code> because you should always be able to omit that <code>{} =</code></li>\n<li>for all other <code>Task</code> return types, this shouldn't be the case, and you <em>should</em> have to write <code>_ = someTask!</code> (or some more specific pattern than <code>_</code>)</li>\n</ul>",
        "id": 449189735,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1720141666
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> thanks for clarification!</p>\n<p>I updated the pr: <a href=\"https://github.com/roc-lang/roc/pull/6868\">https://github.com/roc-lang/roc/pull/6868</a></p>\n<p>the actual fix is to just remove the third step I mentioned in my original message:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">ignoreResult</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">task</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"n\">task</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n\n<span class=\"c1\">-- 3. drop destructuring because input and output are the same</span>\n<span class=\"nf\">ignoreResult</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">task</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"n\">task</span>\n</code></pre></div>\n<p>In this step, we completely remove user's return <code>Task.ok {}</code>, assuming the task returns <code>{}</code> which is not correct because we don't know it's type during desugaring</p>",
        "id": 449236112,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1720163761
    },
    {
        "content": "<p>What about records? Say you do something like <code>Http.get</code> which returns a response record like <code>{ status : U16, body : Str }</code> (simplified of course). With await syntax you used to be able to do</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>Task.await (Http.get \"example.com\") \\{} -&gt;\n    # do something without response\n</code></pre></div>\n<p>The record fields would just be ignored because the anonymous function takes an open record. I don't know how this would work with bang syntax, but it shouldn't work as a statement for such calls. However just desugaring a statement to an empty record would allow it to work. I don't know the way around it though because you would need type information</p>",
        "id": 449239899,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1720164793
    },
    {
        "content": "<p>Yeah, I think we should generate a special pattern as I mentioned earlier.</p>",
        "id": 449249176,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1720167799
    },
    {
        "content": "<p>Or, even better, we can have a named underscore with type annotation</p>",
        "id": 449257888,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1720169977
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kr\">_</span><span class=\"o\">#!</span><span class=\"n\">a0</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"kr\">_</span><span class=\"o\">#!</span><span class=\"n\">a0</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">task</span>\n</code></pre></div>",
        "id": 449259147,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1720170365
    },
    {
        "content": "<p>Is there a way to annotate closure without moving it into a separate variable?</p>",
        "id": 449259556,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1720170479
    },
    {
        "content": "<p>I imagine smth like that</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">ignoreResult</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">task</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">task</span>\n<span class=\"w\">    </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n</code></pre></div>\n<p>transforms to</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">ignoreResult</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">task</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"n\">task</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"n\">_a</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"w\">        </span><span class=\"n\">_a</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">a</span>\n<span class=\"w\">        </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n</code></pre></div>\n<p>it works and requires strictly unit type. however in this form it produces this warning:</p>\n<div class=\"codehilite\"><pre><span></span><code>This destructure assignment doesn&#39;t introduce any new variables:\n\n14│          _a = a\n             ^^\n\nIf you don&#39;t need to use the value on the right-hand-side of this\nassignment, consider removing the assignment. Since Roc is purely\nfunctional, assignments that don&#39;t introduce variables cannot affect a\nprogram&#39;s behavior!\n</code></pre></div>\n<p>which is expectable but I'm not sure how it would look like for syntax sugar. we should ignore this warning there</p>",
        "id": 449271337,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1720173086
    },
    {
        "content": "<p>Ha! I think it can be this:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">ignoreResult</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">task</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span><span class=\"w\"> </span><span class=\"n\">task</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">a0</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"n\">a1</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"w\">        </span><span class=\"n\">a1</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">a0</span>\n<span class=\"w\">        </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"n\">a1</span>\n</code></pre></div>",
        "id": 449279249,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1720175997
    },
    {
        "content": "<p>Found another bug. Type annotation is ignored in this example:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">f</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">task</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">U32</span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">task</span><span class=\"o\">!</span>\n<span class=\"w\">    </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"n\">a</span>\n</code></pre></div>\n<p>The fix from the prev message should cover this case as well</p>",
        "id": 449285145,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1720177470
    },
    {
        "content": "<p>On the other hand, it won't work with multiple statements:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">f</span><span class=\"w\"> </span><span class=\"ow\">=</span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"o\">!</span>\n<span class=\"w\">    </span><span class=\"n\">b</span><span class=\"o\">!</span>\n<span class=\"w\">    </span><span class=\"n\">c</span><span class=\"o\">!</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">f</span><span class=\"w\"> </span><span class=\"ow\">=</span>\n<span class=\"w\">    </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">\\#!</span><span class=\"n\">a0</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"o\">#!</span><span class=\"n\">a1</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"w\">        </span><span class=\"o\">#!</span><span class=\"n\">a1</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"o\">#!</span><span class=\"n\">a0</span><span class=\"w\"> </span><span class=\"c1\">-- &lt;---- need to drop this variable without warnings somehow</span>\n<span class=\"w\">        </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">\\#!</span><span class=\"n\">a2</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">...</span>\n</code></pre></div>\n<p>I'll extend <code>Underscore(&amp;str)</code> to <code>Underscore(&amp;str, AddedBy)</code> where <code>AddedBy</code> is enum with options <code>User, TaskAwaitBang</code> (and <code>ResultTryQuestion</code> in the future) so we can both fix the problem and generate better error message going forward</p>",
        "id": 449294331,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1720180569
    },
    {
        "content": "<p>Sorry for spamming. I realized that typed closures are better for now. This way no need to introduce changes to the <code>Underscore</code> pattern. At least for now</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">f</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"o\">!</span>\n<span class=\"w\">    </span><span class=\"n\">y</span><span class=\"o\">!</span>\n<span class=\"w\">    </span><span class=\"n\">z</span><span class=\"o\">!</span>\n<span class=\"w\">    </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">f</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">a2</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kr\">_</span>\n<span class=\"w\">    </span><span class=\"n\">a2</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"kr\">_</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"w\">    </span><span class=\"n\">a1</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kr\">_</span>\n<span class=\"w\">    </span><span class=\"n\">a1</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"kr\">_</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"n\">a2</span>\n<span class=\"w\">    </span><span class=\"n\">a0</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kr\">_</span>\n<span class=\"w\">    </span><span class=\"n\">a0</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"kr\">_</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">a1</span>\n<span class=\"w\">    </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">a0</span>\n</code></pre></div>",
        "id": 449334280,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1720192539
    }
]