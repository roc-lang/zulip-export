[
    {
        "content": "<p>this is very cool!<br>\n<a href=\"/user_uploads/22008/JULRdvBEkuL0eTujUVq_6x3Z/Screen-Shot-2023-03-28-at-8.56.08-PM.png\">Screen-Shot-2023-03-28-at-8.56.08-PM.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/JULRdvBEkuL0eTujUVq_6x3Z/Screen-Shot-2023-03-28-at-8.56.08-PM.png\" title=\"Screen-Shot-2023-03-28-at-8.56.08-PM.png\"><img src=\"/user_uploads/22008/JULRdvBEkuL0eTujUVq_6x3Z/Screen-Shot-2023-03-28-at-8.56.08-PM.png\"></a></div><p><a href=\"/user_uploads/22008/BwQRxYZoTl0giqDGlQZMswgT/Screen-Shot-2023-03-28-at-8.56.40-PM.png\">Screen-Shot-2023-03-28-at-8.56.40-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/BwQRxYZoTl0giqDGlQZMswgT/Screen-Shot-2023-03-28-at-8.56.40-PM.png\" title=\"Screen-Shot-2023-03-28-at-8.56.40-PM.png\"><img src=\"/user_uploads/22008/BwQRxYZoTl0giqDGlQZMswgT/Screen-Shot-2023-03-28-at-8.56.40-PM.png\"></a></div><p><a href=\"/user_uploads/22008/YvoRPMkNPC0DYYDyE1BBvaZx/Screen-Shot-2023-03-28-at-8.56.56-PM.png\">Screen-Shot-2023-03-28-at-8.56.56-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/YvoRPMkNPC0DYYDyE1BBvaZx/Screen-Shot-2023-03-28-at-8.56.56-PM.png\" title=\"Screen-Shot-2023-03-28-at-8.56.56-PM.png\"><img src=\"/user_uploads/22008/YvoRPMkNPC0DYYDyE1BBvaZx/Screen-Shot-2023-03-28-at-8.56.56-PM.png\"></a></div>",
        "id": 345270881,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1680051429
    },
    {
        "content": "<p>here's what it came up with:</p>\n<div class=\"codehilite\"><pre><span></span><code>## Split a string into its constituent grapheme clusters.\n##\n## This function breaks a string into its individual [grapheme clusters](https://stackoverflow.com/a/27331885/4200103),\n## returning them as a list of strings. This is useful for working with text that\n## contains complex characters, such as emojis or combined characters.\n##\n## Examples:\n## ```\n## expect Str.graphemes &quot;Roc&quot; == [&quot;R&quot;, &quot;o&quot;, &quot;c&quot;]\n## expect Str.graphemes &quot;‡§®‡§Æ‡§∏‡•ç‡§§‡•á&quot; == [&quot;‡§®&quot;, &quot;‡§Æ&quot;, &quot;‡§∏&quot;, &quot;‡•ç&quot;, &quot;‡§§&quot;, &quot;‡•á&quot;]\n## expect Str.graphemes &quot;üë©‚Äçüë©‚Äçüë¶‚Äçüë¶&quot; == [&quot;üë©&quot;, &quot;‚Äç&quot;, &quot;üë©&quot;, &quot;‚Äç&quot;, &quot;üë¶&quot;, &quot;‚Äç&quot;, &quot;üë¶&quot;]\n## ```\n##\n## Note that the &quot;üë©‚Äçüë©‚Äçüë¶‚Äçüë¶&quot; example consists of 7 grapheme clusters, although it visually\n## appears as a single glyph. This is because it uses an emoji modifier sequence.\ngraphemes : Str -&gt; List Str\n</code></pre></div>",
        "id": 345270896,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1680051440
    },
    {
        "content": "<p>the second and third examples are nice examples, and although they're totally incorrect, I can fix them myself <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>\n<p><a href=\"/user_uploads/22008/qEtQRc_D41U-t4AMSQI78t_b/Screen-Shot-2023-03-28-at-9.08.06-PM.png\">Screen-Shot-2023-03-28-at-9.08.06-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/qEtQRc_D41U-t4AMSQI78t_b/Screen-Shot-2023-03-28-at-9.08.06-PM.png\" title=\"Screen-Shot-2023-03-28-at-9.08.06-PM.png\"><img src=\"/user_uploads/22008/qEtQRc_D41U-t4AMSQI78t_b/Screen-Shot-2023-03-28-at-9.08.06-PM.png\"></a></div>",
        "id": 345272159,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1680051989
    },
    {
        "content": "<p>another cool one:</p>\n<p><a href=\"/user_uploads/22008/TWCEXtfba7bTa0lfrNHXTODw/Screen-Shot-2023-03-28-at-9.33.55-PM.png\">Screen-Shot-2023-03-28-at-9.33.55-PM.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/TWCEXtfba7bTa0lfrNHXTODw/Screen-Shot-2023-03-28-at-9.33.55-PM.png\" title=\"Screen-Shot-2023-03-28-at-9.33.55-PM.png\"><img src=\"/user_uploads/22008/TWCEXtfba7bTa0lfrNHXTODw/Screen-Shot-2023-03-28-at-9.33.55-PM.png\"></a></div><p>(I also gave it a couple of other <code>Str</code> functions for context)</p>\n<p>It came up with:</p>\n<div class=\"codehilite\"><pre><span></span><code>## Encode a range of a [List] of [U8] UTF-8 [code units](https://unicode.org/glossary/#code_unit)\n## into a [Str]. The range is specified by a `start` index and a `count` of elements to encode.\n##\n## Returns `Err OutOfBounds` if the specified range exceeds the list&#39;s length.\n## Returns `Err BadUtf8` if the given bytes within the specified range are invalid UTF-8.\n## Returns `Ok &quot;&quot;` when given `[]` or a `count` of 0.\n##\n## Example:\n## ```\n## expect Str.toUtf8 &quot;Hi there!&quot; |&gt; Str.fromUtf8Range { start : 0, count : 2 } == Ok &quot;Hi&quot;\n## expect Str.toUtf8 &quot;Hello, Roc!&quot; |&gt; Str.fromUtf8Range { start : 0, count : 0 } == Ok &quot;&quot;\n## expect Str.toUtf8 &quot;Hello, Roc!&quot; |&gt; Str.fromUtf8Range { start : 7, count : 3 } == Ok &quot;Roc&quot;\n## expect Str.toUtf8 &quot;Hello, Roc!&quot; |&gt; Str.fromUtf8Range { start : 12, count : 2 } |&gt; Result.isErr\n## ```\nfromUtf8Range : List U8, { start : Nat, count : Nat } -&gt; Result Str [BadUtf8 Utf8ByteProblem Nat, OutOfBounds]\n</code></pre></div>",
        "id": 345275061,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1680053684
    },
    {
        "content": "<p>It looks like ChatGPT has no issues reading and writing Roc syntax <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 345280507,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1680057580
    },
    {
        "content": "<p>oh yeah, I've already started to take that for granted <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 345388694,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1680093607
    },
    {
        "content": "<p>Copilot will sometimes think I'm writing Elm and do things like generate <code>case ... of</code> instead of <code>when ... is</code> - but maybe that's because Copilot uses Codex, which is some version of GPT earlier than 4</p>",
        "id": 345388852,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1680093645
    },
    {
        "content": "<p>although at least on chatGPT, choosing GPT-4 makes it way slower to generate answers, so I'm curious to see how that affects the \"Copilot on GPT-4\" experience</p>",
        "id": 345389052,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1680093696
    }
]