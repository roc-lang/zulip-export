[
    {
        "content": "<p>I'm interested in working on <a href=\"https://github.com/roc-lang/roc/issues/6490\">https://github.com/roc-lang/roc/issues/6490</a>: \"<code>roc test platform/main.roc</code> should test every file referenced in exposes and the respective imports of those files too\" (and the related <a href=\"https://github.com/roc-lang/roc/issues/6491\">https://github.com/roc-lang/roc/issues/6491</a>) and looking for a bit of guidance on the desired behavior when running <code>roc test</code>.</p>\n<p>I think the first part of 6490 (\"should test every file referenced in exposes\") is already implemented -- when running <code>roc test platform/main.roc</code> for <a href=\"https://github.com/roc-lang/basic-webserver/blob/main/platform/main.roc\">https://github.com/roc-lang/basic-webserver/blob/main/platform/main.roc</a>, I see 60 tests executed, which appear to be 14 from Http.roc, 6 from Url.roc, and 40 from Utc.roc. But I'm not sure if the latter part (\"and the respective imports of those files too\") is functional yet -- working on a toy project to test that.</p>\n<p>Is this specifying special behavior that should only apply to platforms, or in general should <code>roc test file.roc</code> run all <code>expects</code> within any modules that <code>file.roc</code> contains in its <code>exposes</code> and <code>imports</code>, recursively? (It feels like it might be nice to be able to run _only_ the expects in a certain file too, in cases where the transitive closure of all modules' <code>expects</code> could be a lot of tests.)</p>",
        "id": 424550641,
        "sender_full_name": "Jonathan Schear",
        "timestamp": 1709506468
    },
    {
        "content": "<p>yeah, should work on any module!</p>",
        "id": 424553137,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1709508611
    },
    {
        "content": "<p>thanks for taking this on! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 424553143,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1709508617
    },
    {
        "content": "<p>For sure. A bit of a newcomer to Rust and the domain so we'll see how far I get :) </p>\n<p>I'm seeing some code about <code>expect-fx</code>,  sounds like those will eventually be for tests that may have side-effects?</p>",
        "id": 424572036,
        "sender_full_name": "Jonathan Schear",
        "timestamp": 1709523932
    },
    {
        "content": "<p>yeah exactly!</p>",
        "id": 424572289,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1709524143
    },
    {
        "content": "<p>A few questions on the ideal output:</p>\n<ol>\n<li>\n<p>If we're listing each module &amp; the number of tests that passed, failed, and the duration they took, should these messages be interspersed with any failures, or should they all be in a summary at the end?</p>\n</li>\n<li>\n<p>If expects from only a single module are discovered, should we display the name of the module, or go with the current <code>0 failed and 2 passed in 129 ms.</code> for simplicity?</p>\n</li>\n</ol>",
        "id": 424582275,
        "sender_full_name": "Jonathan Schear",
        "timestamp": 1709531481
    },
    {
        "content": "<p>For 1, it would be the difference between:</p>\n<div class=\"codehilite\"><pre><span></span><code>❯ roc test ../roc-parser/package/main.roc\n── EXPECT FAILED in ../roc-parser/package/String.roc ───────────────────────────\n\nThis expectation failed:\n\n289│  expect parseStr parseNumbers &quot;1,2,3&quot; == Ok [1, 2, 4]\n      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nString.roc:\n    1 failed and 12 passed in 43ms.\n\n── EXPECT FAILED in ../roc-parser/package/HTTP.roc ─────────────────────────────\n\nThis expectation failed:\n\n73│&gt;  expect\n74│&gt;      actual = parseStr httpVersion &quot;HTTP/1.2&quot;\n75│&gt;      expected = Ok { major: 1, minor: 1 }\n76│&gt;      actual == expected\n\nWhen it failed, these variables had these values:\n...\n\nHTTP.roc:\n    0 failed and 1 passed in 46 ms.\n</code></pre></div>\n<p>and </p>\n<div class=\"codehilite\"><pre><span></span><code>~/dev/roc-parser main*\n❯ roc test ../roc-parser/package/main.roc\n── EXPECT FAILED in ../roc-parser/package/String.roc ───────────────────────────\n\nThis expectation failed:\n\n289│  expect parseStr parseNumbers &quot;1,2,3&quot; == Ok [1, 2, 4]\n      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n── EXPECT FAILED in ../roc-parser/package/HTTP.roc ─────────────────────────────\n\nThis expectation failed:\n\n73│&gt;  expect\n74│&gt;      actual = parseStr httpVersion &quot;HTTP/1.2&quot;\n75│&gt;      expected = Ok { major: 1, minor: 1 }\n76│&gt;      actual == expected\n\nWhen it failed, these variables had these values:\n\n...\n\nString.roc:\n    1 failed and 12 passed in 43ms.\nHTTP.roc:\n    0 failed and 1 passed in 46 ms.\n</code></pre></div>\n<p>I lean towards the latter <span aria-label=\"man shrugging\" class=\"emoji emoji-1f937-200d-2642\" role=\"img\" title=\"man shrugging\">:man_shrugging:</span></p>",
        "id": 424582377,
        "sender_full_name": "Jonathan Schear",
        "timestamp": 1709531562
    },
    {
        "content": "<p>Printing all at the end (your later example)  or early exiting on first failure (likely with a flag) sound like the way to go. </p>\n<p>Aggregating that info is most useful.</p>",
        "id": 424585612,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1709533626
    },
    {
        "content": "<p>Interspersed is simply hard to follow</p>",
        "id": 424585653,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1709533656
    },
    {
        "content": "<p>For 2. I think it's good to stick with the current approach. We can always change it if there is demand.</p>",
        "id": 424617760,
        "sender_full_name": "Anton",
        "timestamp": 1709546763
    },
    {
        "content": "<p>I was able to get a test written for transitive imports, and it looks like they're working: <code>roc test main.roc</code> runs all three expects here:</p>\n<div class=\"codehilite\"><pre><span></span><code># main.roc\npackage &quot;transitive-tests&quot;\n    exposes [\n        Direct,\n    ]\n    packages {}\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code># Direct.roc\ninterface Direct\n    exposes [\n        addAndStringify,\n    ]\n    imports [\n        Transitive,\n    ]\n\naddAndStringify = \\num1, num2 -&gt;\n    Num.toStr (Transitive.add num1 num2)\n\nexpect addAndStringify 1 2 == &quot;3&quot;\n\nexpect addAndStringify 3 4 == &quot;7&quot;\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code># Transitive.roc\ninterface Transitive\n    exposes [\n        add,\n    ]\n    imports []\n\nadd = \\num1, num2 -&gt; (num1 + num2)\n\nexpect add 1 2 == 3\n</code></pre></div>\n<p>Here's my general plan for implementing the reporting change, would love to hear if this makes any sense from anyone more familiar with the codebase:</p>\n<ul>\n<li>Currently expects and expects-fx are collected into <code>VecMap&lt;Symbol, Region&gt;</code>s on <code>MonomorphizedModule</code>, I'd collect them into maps keyed by module ID instead.</li>\n<li>I'd want to run each modules' expects separately in <code>roc_repl_expect::run::run_toplevel_expects</code>, so we can easily measure and report the elapsed time per module.</li>\n</ul>\n<p>Alternatively, I guess I could leave <code>MonomorphizedModule</code> and friends as-is, and just do more bookkeeping around module ID, start time, and end time per test, then sum the elapsed time per module.</p>",
        "id": 424706584,
        "sender_full_name": "Jonathan Schear",
        "timestamp": 1709572646
    },
    {
        "content": "<p>that proposed plan sounds great, this is awesome!!!</p>",
        "id": 424715108,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1709575501
    }
]