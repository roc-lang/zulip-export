[
    {
        "content": "<p>on the plane back from <span aria-label=\"flag netherlands\" class=\"emoji emoji-1f1f3-1f1f1\" role=\"img\" title=\"flag netherlands\">:flag_netherlands:</span> I got started on the interpreter</p>",
        "id": 518845611,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1747508874
    },
    {
        "content": "<p>I think we concluded that we wanted to essentially have it output exactly the bytes the host expects, right <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span>?</p>",
        "id": 518845702,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1747508910
    },
    {
        "content": "<p>Hey i was just talking about how much I'd like to see a v0.1 Hello World running...</p>",
        "id": 518845758,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1747508943
    },
    {
        "content": "<p>and then have the inferred types off to the side (like we do today in the repl) so we can tell what their layout is</p>",
        "id": 518845797,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1747508965
    },
    {
        "content": "<p>Yeah, that sounds roughly right</p>",
        "id": 518845829,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1747508988
    },
    {
        "content": "<p>this seems like what we need for debug builds, since the host has the same abi for debug and release builds</p>",
        "id": 518845912,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1747509018
    },
    {
        "content": "<p>The shim function that the host calls would generate the type spec (cause it knows this from the roc types at compile time). Then it would call into the interepretter passing in raw data and types.</p>",
        "id": 518845946,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1747509053
    },
    {
        "content": "<p>And yeah, same abi for debug and release is the important part.</p>",
        "id": 518845966,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1747509068
    },
    {
        "content": "<p>yeah makes sense!</p>",
        "id": 518845967,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1747509069
    },
    {
        "content": "<p>and then when interpreting constants at compile time, we can do what the repl does</p>",
        "id": 518845996,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1747509091
    },
    {
        "content": "<p>namely traverse the data and use the types to know where to put everything</p>",
        "id": 518846013,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1747509108
    },
    {
        "content": "<p>yep</p>",
        "id": 518846098,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1747509154
    },
    {
        "content": "<p>this is a snippet of the direction I'm going:</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"w\">            </span><span class=\"k\">switch</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">op_stack</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">branch</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                    </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">then_idx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">idx_stack</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">();</span>\n<span class=\"w\">                    </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">else_idx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">idx_stack</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">();</span>\n<span class=\"w\">                    </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">cond</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"n\">val_stack</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">().</span><span class=\"n\">asBool</span><span class=\"p\">();</span>\n<span class=\"w\">                    </span><span class=\"n\">idx_stack</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">cond</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">then_idx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">else_idx</span><span class=\"p\">);</span>\n<span class=\"w\">                    </span><span class=\"n\">op_stack</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">Op</span><span class=\"p\">.</span><span class=\"n\">eval</span><span class=\"p\">);</span>\n<span class=\"w\">                </span><span class=\"p\">},</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">assign</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                    </span><span class=\"n\">scope</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">ident_stack</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">val_stack</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">());</span>\n<span class=\"w\">                </span><span class=\"p\">},</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">begin_scope</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                    </span><span class=\"c1\">// TODO</span>\n<span class=\"w\">                </span><span class=\"p\">},</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">end_scope</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                    </span><span class=\"c1\">// TODO</span>\n<span class=\"w\">                </span><span class=\"p\">},</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">crash</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                    </span><span class=\"c1\">// TODO return a crash error along with the string.</span>\n<span class=\"w\">                </span><span class=\"p\">},</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                    </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">idx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">idx_stack</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">();</span>\n\n<span class=\"w\">                    </span><span class=\"k\">switch</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">exprAt</span><span class=\"p\">(</span><span class=\"n\">idx</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                        </span><span class=\"p\">.</span><span class=\"n\">if_then_else</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">if_then_else</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                            </span><span class=\"c1\">// first, eval the condition</span>\n<span class=\"w\">                            </span><span class=\"n\">op_stack</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">Op</span><span class=\"p\">.</span><span class=\"n\">eval</span><span class=\"p\">);</span>\n<span class=\"w\">                            </span><span class=\"n\">idx_stack</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">if_then_else</span><span class=\"p\">.</span><span class=\"n\">condIdx</span><span class=\"p\">());</span>\n\n<span class=\"w\">                            </span><span class=\"c1\">// next, do an if/else branch</span>\n<span class=\"w\">                            </span><span class=\"n\">op_stack</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">Op</span><span class=\"p\">.</span><span class=\"n\">branch</span><span class=\"p\">);</span>\n<span class=\"w\">                            </span><span class=\"n\">idx_stack</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">if_then_else</span><span class=\"p\">.</span><span class=\"n\">thenIdx</span><span class=\"p\">());</span>\n<span class=\"w\">                            </span><span class=\"n\">idx_stack</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">if_then_else</span><span class=\"p\">.</span><span class=\"n\">elseIdx</span><span class=\"p\">());</span>\n<span class=\"w\">                        </span><span class=\"p\">},</span>\n<span class=\"w\">                        </span><span class=\"p\">.</span><span class=\"n\">block</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">block</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                            </span><span class=\"c1\">// blocks get their own scope for their assignments</span>\n<span class=\"w\">                            </span><span class=\"n\">op_stack</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">Op</span><span class=\"p\">.</span><span class=\"n\">begin_scope</span><span class=\"p\">);</span>\n\n<span class=\"w\">                            </span><span class=\"c1\">// run all the statements preceding the expr</span>\n<span class=\"w\">                            </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">.</span><span class=\"n\">stmts</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">stmt</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                                </span><span class=\"k\">switch</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">stmt</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                                    </span><span class=\"p\">.</span><span class=\"n\">assign</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">name</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">idx</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                                        </span><span class=\"c1\">// eval the expr that's being assigned to name</span>\n<span class=\"w\">                                        </span><span class=\"n\">op_stack</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">Op</span><span class=\"p\">.</span><span class=\"n\">eval</span><span class=\"p\">);</span>\n<span class=\"w\">                                        </span><span class=\"n\">idx_stack</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">idx</span><span class=\"p\">);</span>\n\n<span class=\"w\">                                        </span><span class=\"c1\">// assign it to name</span>\n<span class=\"w\">                                        </span><span class=\"n\">op_stack</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">Op</span><span class=\"p\">.</span><span class=\"n\">assign</span><span class=\"p\">);</span>\n<span class=\"w\">                                        </span><span class=\"n\">ident_stack</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">);</span>\n<span class=\"w\">                                    </span><span class=\"p\">},</span>\n<span class=\"w\">                                </span><span class=\"p\">}</span>\n<span class=\"w\">                            </span><span class=\"p\">}</span>\n\n<span class=\"w\">                            </span><span class=\"c1\">// eval the expr at the end of the block</span>\n<span class=\"w\">                            </span><span class=\"n\">op_stack</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">Op</span><span class=\"p\">.</span><span class=\"n\">eval</span><span class=\"p\">);</span>\n<span class=\"w\">                            </span><span class=\"n\">idx_stack</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">.</span><span class=\"n\">expr</span><span class=\"p\">);</span>\n\n<span class=\"w\">                            </span><span class=\"n\">op_stack</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">Op</span><span class=\"p\">.</span><span class=\"n\">end_scope</span><span class=\"p\">);</span>\n<span class=\"w\">                        </span><span class=\"p\">},</span>\n<span class=\"w\">                    </span><span class=\"p\">}</span>\n<span class=\"w\">                </span><span class=\"p\">},</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 518846184,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1747509241
    },
    {
        "content": "<p>that's all in a loop, where all the <code>stack</code>s are in scope</p>",
        "id": 518846257,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1747509270
    },
    {
        "content": "<p>not using recursion because we don't want the interpreter to blow the stack</p>",
        "id": 518846281,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1747509292
    },
    {
        "content": "<p>That seems reasonable for a base implementation. I'm sure we'll eventually have a lot a tricks for perf, but those aren't too important now.</p>",
        "id": 518846457,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1747509401
    },
    {
        "content": "<p>yeah my thinking is that for now the interpreter needs to be:</p>\n<ul>\n<li>ABI-compatible with release builds</li>\n<li>correct</li>\n<li>stack-safe</li>\n</ul>",
        "id": 518846492,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1747509441
    },
    {
        "content": "<p>Yeah, that seems like great priorities</p>",
        "id": 518846508,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1747509461
    },
    {
        "content": "<p>and then yeah we can see how the perf is in practice and evaluate things accordingly</p>",
        "id": 518846511,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1747509463
    },
    {
        "content": "<p>I want to basically just get it off the ground and then let others pick it up</p>",
        "id": 518846585,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1747509491
    },
    {
        "content": "<p>Very excited to see something minimal working...</p>",
        "id": 518966700,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1747609952
    },
    {
        "content": "<p>Two dumb questions:</p>\n<ol>\n<li>Is this an inprogress Roc interpreter written in Rust ?</li>\n<li>Where can I find this code on github ?</li>\n</ol>\n<p>Context: I'm working on a project where I need an embedded interpreter where I can place cpu/memory limits (thus, somehow limit the bytecode interpreter). I am not looking for the Roc -&gt; wasm compiler. I am looking to see if there is a Roc interpreter written in Rust somewhere -- and stumbled across this thread.</p>",
        "id": 520274761,
        "sender_full_name": "tk",
        "timestamp": 1748163131
    },
    {
        "content": "<p>the Roc compiler as a whole is being rewritten in Zig, and that's where the interpreter will be as well</p>",
        "id": 520280948,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1748169030
    },
    {
        "content": "<p>is the Rust compiler getting abandoned ? is there a thread where this Rust -&gt; Zig switch was debated ? I am mainly curious to understand the reasoning.</p>",
        "id": 520302959,
        "sender_full_name": "tk",
        "timestamp": 1748187878
    },
    {
        "content": "<p>Yeah, rust implementation is being abandoned</p>",
        "id": 520303026,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1748187950
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"919530\">@tk</span> I wrote up this explanation back at the time: <a href=\"https://gist.github.com/rtfeldman/505bc158ad6965a71ff2777ad8451209\">https://gist.github.com/rtfeldman/505bc158ad6965a71ff2777ad8451209</a></p>",
        "id": 520303932,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1748188723
    },
    {
        "content": "<blockquote>\n<p>Zig's x86-64 backend can reportedly scratch-build (without anything cached) the entire 300K-line Zig compiler code base in a second or two. It takes us longer than that to build one of our medium-sized Rust crates, and that's even <em>with</em> the benefit of caching.</p>\n</blockquote>\n<p>Yeah, I guess that is pretty relevant. I have a 100 kloc project with another 200 kloc forked crates, and I'd kill for a 2-second non-cached build time.</p>",
        "id": 520313738,
        "sender_full_name": "tk",
        "timestamp": 1748196953
    },
    {
        "content": "<p>it's worth noting that the numbers there are unfortunately overly optimistic right now, and aiui were based on a miscommunication between richand and andrew</p>",
        "id": 520318036,
        "sender_full_name": "Matthew Lugg",
        "timestamp": 1748200499
    },
    {
        "content": "<p>yeah, although as I understand it, incremental zig with non-llvm backend should outperform Rust by a lot once we get there</p>",
        "id": 520318308,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1748200712
    },
    {
        "content": "<p>and Zig is very close to that, whereas at least at the moment nothing like that is anywhere on Rust's roadmap (although I still hope that changes!)</p>",
        "id": 520318343,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1748200759
    },
    {
        "content": "<p>for the zig compiler, getting compile errors for a core subset of the pipeline is the number in question of 1-2 seconds (it's actually like 5 on my system but my system is currently a laptop lol), actually properly building just those core components is maybe around 50-100% more time all in all, building the whole compiler (llvm and package manager and all) is 25 seconds on my system and probably 15-20 seconds on a reasonable desktop. these are all scratch builds. we're aiming to improve these numbers over time ofc, compiler performance remains a high priority.</p>\n<p>and, yeah, incremental builds are the real killer feature for development. idk if anyone on the roc team has had a reason to try out incremental compilation yet, but when it works (there are still occasional bugs, although for some use cases it's fairly solid now) it's <em>amazing</em>. my main use for it right now is after i've done a big local patch, and it's time to start fixing compile errors, i will spin up (approximately) <code>zig build -Dno-bin -fincremental --watch --prominent-compile-errors</code> in a new terminal, and it will just do semantic analysis on my code and show me all the compile errors; i fix them one at a time, and every time i save a file, i typically get new error output in somewhere between [idk, too fast to see] and (absolute worst case, because of some pathological cases the zig compiler handles poorly at the moment) 2 seconds</p>",
        "id": 520318559,
        "sender_full_name": "Matthew Lugg",
        "timestamp": 1748200939
    },
    {
        "content": "<p>well, i will be absolutely fair and say if you get <em>real</em> unlucky with how you hit a pathological case you might get close to scratch build time for one update. there is basically one design flaw in the current implementation of incremental compilation which causes these pathological cases where the compiler does way more work than it should need to, it's sooooomewhere on my priority list to solve</p>",
        "id": 520318723,
        "sender_full_name": "Matthew Lugg",
        "timestamp": 1748201096
    },
    {
        "content": "<p>i'm not trying to evangelise btw, i do apologise if it comes across that way, just trying to clarify the current real-world performance with the most realistic numbers i can</p>\n<p>oh, and final note: all of the numbers above are with the self-hosted x86_64 backend. right now that's the only self-hosted backend which is generally usable (it's likely to become the default on x86_64-linux somewhat soon); for other targets you usually still have to go through LLVM, which comes with huge compilation speed losses because LLVM is (imo) wholly unreasonably slow at producing debug-mode binaries</p>\n<p>okay, i'm done, sorry for wall of text :D</p>",
        "id": 520318870,
        "sender_full_name": "Matthew Lugg",
        "timestamp": 1748201213
    },
    {
        "content": "<p>Always a good sign to have honest engineers giving real world number and caveats</p>",
        "id": 520319615,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1748201801
    },
    {
        "content": "<p>yeah I haven't tried it yet, but that's mostly because our Zig compiler code base is still small enough that even cold compile times aren't long enough to be a pain point for me yet <span aria-label=\"smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 520320979,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1748203018
    },
    {
        "content": "<p>I'm hoping that there will be an aarch64 backend by the time I want to reach for it <span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span></p>",
        "id": 520320998,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1748203032
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"918459\">@Matthew Lugg</span> </p>\n<blockquote>\n<p>okay, i'm done, sorry for wall of text :D</p>\n</blockquote>\n<p>I found the wall of text really insightful. Thank you for taking your time to write out your experience. I do agree with you, alot of the time, what I really care about is 'time to first compile error', and less full on compile time.</p>",
        "id": 520321000,
        "sender_full_name": "tk",
        "timestamp": 1748203039
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/channel/316715-contributing/topic/interpreter/near/520320998\">said</a>:</p>\n<blockquote>\n<p>I'm hoping that there will be an aarch64 backend by the time I want to reach for it <span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span></p>\n</blockquote>\n<p>ah yes, i always forget that people actually run aarch64 now lol</p>",
        "id": 520322632,
        "sender_full_name": "Matthew Lugg",
        "timestamp": 1748204439
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"919530\">tk</span> <a href=\"#narrow/channel/316715-contributing/topic/interpreter/near/520321000\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"918459\">Matthew Lugg</span> </p>\n<blockquote>\n<p>okay, i'm done, sorry for wall of text :D</p>\n</blockquote>\n<p>I found the wall of text really insightful. Thank you for taking your time to write out your experience. I do agree with you, alot of the time, what I really care about is 'time to first compile error', and less full on compile time.</p>\n</blockquote>\n<p>no worries, do feel free to ping me with questions about this for the record, i tend to kind of enjoy discussing the compiler internals and how to get the most out of them</p>\n<p>and indeed, in cases where i need fast compiles, usually what i <em>actually</em> need is fast response about compile errors. full-on incremental compilation is still very valuable ofc, it's still very actively being worked towards, but even without the codegen i find the feature incredibly useful. one interesting thing it makes feasible is a language server (as in, LSP) communicating with the compiler to quickly get up-to-date information about the compilation</p>",
        "id": 520322902,
        "sender_full_name": "Matthew Lugg",
        "timestamp": 1748204643
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"918459\">Matthew Lugg</span> <a href=\"#narrow/stream/316715-contributing/topic/interpreter/near/520322632\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/channel/316715-contributing/topic/interpreter/near/520320998\">said</a>:</p>\n<blockquote>\n<p>I'm hoping that there will be an aarch64 backend by the time I want to reach for it <span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span></p>\n</blockquote>\n<p>ah yes, i always forget that people actually run aarch64 now lol</p>\n</blockquote>\n<p>everyone who has a Mac, yes <span aria-label=\"smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 520324034,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1748205562
    },
    {
        "content": "<p>what's really fun is that in principle you could just use the x86_64 backend and Rosetta 2, but iirc our linker (or maybe our actual codegen?) manages to emit something that completely breaks Rosetta</p>",
        "id": 520324208,
        "sender_full_name": "Matthew Lugg",
        "timestamp": 1748205702
    }
]