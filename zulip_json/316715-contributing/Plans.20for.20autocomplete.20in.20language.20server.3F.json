[
    {
        "content": "<p>I'm wondering if there is any plan for adding autocomplete to the language server? I believe I've seen it mentioned that autocomplete isn't possible right now because the compiler doesn't support it. If that's likely to be a long way off how interested would folks here be in using tree-sitter to provide autocomplete? <br>\nIt would be basic, no docs (at least from imports, you could provide docs from the local file) and limited ability to tell the type's of imports and fields of records(may be possible), but tree-sitter has enough info to at least provide autocomplete that only includes functions/variables actually available within the scope you are in. This wouldn't be too hard to implement in a very basic way to tide people over.<br>\nJust gauging interest :)</p>",
        "id": 404887506,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1701270298
    },
    {
        "content": "<p>In principle the language server should be able to support auto-complete without any considerable effort, someone just needs to implement it</p>",
        "id": 404888685,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1701270596
    },
    {
        "content": "<p>But if the tree-sitter autocomplete is also trivial to set up, I think it would definitely be useful</p>",
        "id": 404888771,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1701270613
    },
    {
        "content": "<p>Oh okay, well maybe I'll look into setting up a proper implementation. While we are on the topic, why is the language server not written in roc?<br>\nSeems like it would be a good project to show off some quality roc code, language Servers tend to include most common coding patterns, error handling, io, IPC, event driven architecture, testing, etc.</p>",
        "id": 404984352,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1701308060
    },
    {
        "content": "<p>Just because the compiler is also written in Rust, so it enables a lot of code reuse. Writing a language server in Roc would be great. But it would require a lot of effort (parsing, type checking) that I didn't want to put in. If someone wants to try to write a Roc-based LSP, it could be a great project. You could even use the Roc compiler as a platform and have the LSP-specific logic in Roc to begin with</p>",
        "id": 404984756,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1701308321
    },
    {
        "content": "<p>Oh yeah, that makes sense, I assumed that it might be for tighter integration with the compiler. I was thinking you'd have to expose the compiler services to roc via some json-rpc type interface and call into it, but making it a platform does seem like a solution. Shows that I'm clearly not thinking about things the roc way yet <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 404986324,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1701309120
    },
    {
        "content": "<p>The nice thing is there are multiple ways for sure :)</p>",
        "id": 404986785,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1701309276
    },
    {
        "content": "<p>long-term I actually would like to eliminate the JSON-RPC overhead of LSP in most editor extensions, by having the compiler expose a <code>libroc</code> C library that extensions can call directly in the same way! <span aria-label=\"rocket\" class=\"emoji emoji-1f680\" role=\"img\" title=\"rocket\">:rocket:</span></p>",
        "id": 404986927,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701309328
    },
    {
        "content": "<p>but LSP is definitely a huge step forward for Roc tooling, and is also worth having indefinitely regardless because there will always be new editors that will support LSP but won't have a dedicated Roc extension etc.</p>",
        "id": 404987139,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701309395
    },
    {
        "content": "<p>Well that would be interesting... Though, how much overhead do you think jsonrpc actually adds? I couldn't say accurately, but I've worked on 3 language Servers and I would guess that the time spent in the compiler doing stuff like type checking completely dwarfs it.</p>",
        "id": 404987532,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1701309539
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span>  I felt like my statement there wasn't very well substantiated,  so i did some testing to back it up. <br>\nI made a jsonrpc connection between two  ocaml programs( the language I've most recently been doing some lsp stuff in) and then sequentially sent 1000 requests that had 1000 lines of json as the response.<br>\nNo work was done on either end except deserializing the request and serializing the response.<br>\nThe time per request on my laptop was 0.2ms. <br>\nI would consider this completely meaningless overhead.</p>",
        "id": 405274086,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1701405288
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/pull/6134\">https://github.com/roc-lang/roc/pull/6134</a><br>\nOkay that's an initial draft for the completion, it's all a bit of a mess but I thought I'd better at least let people know I'm working on it :)</p>",
        "id": 405389688,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1701445558
    },
    {
        "content": "<p>If anyone wants to use this for AOC or the like it's currently working well, supporting local variables,function args, pattern matching, destructing etc. no types, tags, or imports though. And I couldn't figure out how to get the data from a backpassing expression so that one might be a little while. Should add more in the coming days</p>",
        "id": 405488743,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1701490279
    },
    {
        "content": "<p>roc_ls is really helpful - just discovered that it exist :D</p>\n<p>Are there any plans to add <code>roc_ls</code> to the nightly builds? <br>\nI'm coding roc mainly on a laptop on which I can't use tools like nix to build it from source :(</p>",
        "id": 405882783,
        "sender_full_name": "Artur Domurad",
        "timestamp": 1701712392
    },
    {
        "content": "<p>We've talked about that before but we did not want it bundled with the nightly forever and thus did not want people to rely on it being there. We failed to come up with a good compromise. I can't seem to find that dicussion...</p>",
        "id": 405884938,
        "sender_full_name": "Anton",
        "timestamp": 1701713189
    },
    {
        "content": "<p>I thought the most recent dicussion on this was that we should probably directly add it to the <code>roc</code> executable as a sub command.</p>",
        "id": 405885328,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701713350
    },
    {
        "content": "<p>Though maybe I just mixed up messages...</p>",
        "id": 405885542,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701713422
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"634290\">Artur Domurad</span> <a href=\"#narrow/stream/316715-contributing/topic/Plans.20for.20autocomplete.20in.20language.20server.3F/near/405882783\">said</a>:</p>\n<blockquote>\n<p>roc_ls is really helpful - just discovered that it exist :D</p>\n<p>Are there any plans to add <code>roc_ls</code> to the nightly builds? <br>\nI'm coding roc mainly on a laptop on which I can't use tools like nix to build it from source :(</p>\n</blockquote>\n<p>Fwiw I was able to build roc_ls without needing nix. I do think I installed llvm on brew though.</p>",
        "id": 405893643,
        "sender_full_name": "Pearce Keesling",
        "timestamp": 1701716472
    },
    {
        "content": "<p>It worked :O <br>\n<code>git clone ...</code> and <code>cargo build -p roc_lang_srv --release</code> - without nix.</p>\n<p>Thanks,  advent of code tomorrow will be a much nicer experience &lt;3</p>",
        "id": 405897117,
        "sender_full_name": "Artur Domurad",
        "timestamp": 1701717847
    },
    {
        "content": "<p>I think it all ends up playing nicer since language server doesn't need to do any codegen</p>",
        "id": 405973635,
        "sender_full_name": "Pearce Keesling",
        "timestamp": 1701752011
    },
    {
        "content": "<p>I added support for record fields today as well.</p>\n<p>Unfortunately I think that's the last one I'm going to be able to easily implement, it seems like the current way the the document is loaded doesn't expose imports and type definitions. I have been digging around the the compiler a bit but I think someone with some more experience would be better off taking a look at how to surface that info. <br>\nI can clean this up and see about closing the PR with the current parts working.</p>\n<p>I am also taking a look at fixing the nasty delay in completion and hover. Currently we tie the completion and hover to the document having been typechecked. My proposed solution is that we store:<br>\nThe latest typechecked document,<br>\nThe last typecheck that didn't completely fail, (this I've already done)<br>\nIdeally you could get symbols almost immediately for any changed versions of the document(I assume the parsing step is very quick), and use the typecheck results from the previous version. If splitting that out of the loading process is difficult we can just immediately provide the lineinfo for the new document which is enough for completions, and we could change how hover works to use that too. </p>\n<p>I am in the process of implementing the second solution, but rust is hard and it's been ages, so I'm lost in a hell of lifetimes and borrow checking right now. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 405990578,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1701760215
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"651372\">@Eli Dowling</span>  Not sure if this is the right place to ask, but I tried running <code>roc_ls</code> with the <a href=\"https://marketplace.visualstudio.com/items?itemName=IvanDemchenko.roc-lang-unofficial\">vscode extension</a> from your fork, and it keeps crashing with this message:</p>\n<div class=\"codehilite\"><pre><span></span><code>got document\nstarting to get completion items for prefix:\ndecl:&quot;simple&quot;\ncheck if prefix &quot;p&quot; matches &quot;simple&quot;\ndecl:&quot;main&quot;\ncheck if prefix &quot;p&quot; matches &quot;main&quot;\ndecl:&quot;run&quot;\ncheck if prefix &quot;p&quot; matches &quot;run&quot;\ncheck if prefix &quot;p&quot; matches &quot;part2&quot;\ncheck if prefix &quot;p&quot; matches &quot;part1&quot;\ncheck if prefix &quot;p&quot; matches &quot;countWays&quot;\ncheck if prefix &quot;p&quot; matches &quot;parse2&quot;\ncheck if prefix &quot;p&quot; matches &quot;parse&quot;\ncheck if prefix &quot;p&quot; matches &quot;input&quot;\ncompletion begin\ncheck if prefix &quot;p&quot; matches &quot;parseNums&quot;\ngot completions:\n[Error - 07:37:46] Request completionItem/resolve failed.\n  Message: Method not found\n  Code: -32601\n</code></pre></div>\n<p>Do you want a repro? Or am I just holding it wrong? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 406237952,
        "sender_full_name": "Johan Lindskogen",
        "timestamp": 1701844791
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"668691\">@Johan Lindskogen</span>  No no, please do send a sample over, and I'll take a look.</p>",
        "id": 406239732,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1701845398
    },
    {
        "content": "<p>I have a short repro here:</p>\n<div class=\"codehilite\"><pre><span></span><code>app &quot;hello&quot;\n    packages { pf: &quot;https://github.com/roc-lang/basic-cli/releases/download/0.7.0/bkGby8jb0tmZYsy2hg1E_B2QrCgcSTxdUlHtETwm5m4.tar.br&quot; }\n    imports [pf.Stdout]\n    provides [main] to pf\n\nsimple1 = 100\n\nmain =\n\n    Stdout.line\n        &quot;done&quot;\n</code></pre></div>\n<p>Just type <code>simple</code> in the main function and it \"crashes\" for every keystroke</p>",
        "id": 406240440,
        "sender_full_name": "Johan Lindskogen",
        "timestamp": 1701845601
    },
    {
        "content": "<p>I just realised the error might be that I am running your branch against the nightly build of roc. Is it <strong>really important</strong> that I keep <code>roc_ls</code> in sync with the <code>roc</code> binary?</p>",
        "id": 406240950,
        "sender_full_name": "Johan Lindskogen",
        "timestamp": 1701845752
    },
    {
        "content": "<p>It shouldn't be. I'll check out your example soonish, I'm currently still rewriting a bunch of stuff to remove all the delays in completion, so it might take me a little while.</p>",
        "id": 406326752,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1701875649
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"668691\">@Johan Lindskogen</span> Sorry for the wait. I just tested this with the latest version and it all seems good :)</p>",
        "id": 406989914,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1702169751
    },
    {
        "content": "<p>Thank you! It seems to get further, but now I get this:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;main&#39; panicked at &#39;Cannot block the current thread from within a runtime. This happens because a function attempted to block the current thread while the thread is being used to drive asynchronous tasks.&#39;, crates/lang_srv/src/registry.rs:140:14\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>",
        "id": 407215312,
        "sender_full_name": "Johan Lindskogen",
        "timestamp": 1702292123
    }
]