[
    {
        "content": "<p>So I was thinking about how to get null decoding to work inside roc. <br>\nI've got a prototype but I'd like some feedback</p>\n<p>Now I know currently we don't have an Optional type, and so I tried to find a solution that would allow user defined types to be decodable from no data.<br>\nSo I modified the records decoder in \"decoder/records.rs\" (my god... that certainly hurt my brain <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> ), after a few iterations I settled on a replacement for the original finalizer function that is generated.<br>\nThe generated code will look like this now:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">finalizer2</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">rec</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">fmt</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span>\n<span class=\"w\">        </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">rec</span><span class=\"nf\">.</span><span class=\"nv\">f0</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">            </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"kt\">Decode</span><span class=\"nf\">.</span><span class=\"nv\">decodeWith</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"kt\">Decode</span><span class=\"nf\">.</span><span class=\"nv\">decoder</span><span class=\"w\"> </span><span class=\"nv\">fmt</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">                    </span><span class=\"nv\">rec2</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">rec2</span><span class=\"nf\">.</span><span class=\"nv\">result</span>\n\n<span class=\"w\">            </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">a</span>\n<span class=\"w\">    </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">f0</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"nv\">when</span>\n<span class=\"w\">                </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">rec</span><span class=\"nf\">.</span><span class=\"nv\">f1</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">                    </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">NoField</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                        </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"kt\">Decode</span><span class=\"nf\">.</span><span class=\"nv\">decodeWith</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"kt\">Decode</span><span class=\"nf\">.</span><span class=\"nv\">decoder</span><span class=\"w\"> </span><span class=\"nv\">fmt</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">                            </span><span class=\"nv\">rec2</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">rec2</span><span class=\"nf\">.</span><span class=\"nv\">result</span>\n\n<span class=\"w\">                    </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">a</span>\n<span class=\"w\">            </span><span class=\"nv\">is</span>\n<span class=\"w\">                </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">f1</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">f1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">f0</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">                </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">TooShort</span>\n\n<span class=\"w\">        </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">TooShort</span>\n</code></pre></div>\n<p>Basically if we find a record field that doesn't exist we  first try to run the decoder with empty input to see if it has some valid state even if there was no data in the field.</p>\n<p>The Option type decoder looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">optionDecode</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Decode</span><span class=\"nf\">.</span><span class=\"nv\">custom</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">bytes</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">fmt</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">bytes</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">len</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"w\">        </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">result</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"err\">@</span><span class=\"kt\">Option</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">None</span><span class=\"p\">)),</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"kr\">else</span>\n<span class=\"w\">        </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">bytes</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Decode</span><span class=\"nf\">.</span><span class=\"nv\">decodeWith</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Decode</span><span class=\"nf\">.</span><span class=\"nv\">decoder</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">fmt</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">            </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">result</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">res</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">result</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"err\">@</span><span class=\"kt\">Option</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Some</span><span class=\"w\"> </span><span class=\"nv\">res</span><span class=\"p\">)),</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">            </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">result</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">result</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>I was wondering what people thought about this solution?</p>\n<p>I'd like to get this working so i can start on my chapter for the book. Without optional types there is no way to decode json with optional fields which the LSP spec is totally full of</p>",
        "id": 426537119,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1710421600
    },
    {
        "content": "<p>I also have working union types using a similar principal:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">Union2</span><span class=\"w\"> </span><span class=\"nv\">u1</span><span class=\"w\"> </span><span class=\"nv\">u2</span><span class=\"w\"> </span><span class=\"nf\">:=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">U1</span><span class=\"w\"> </span><span class=\"nv\">u1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">U2</span><span class=\"w\"> </span><span class=\"nv\">u2</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"nv\">implements</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">        </span><span class=\"kt\">Eq</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nv\">isEq</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">union2Eq</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"kt\">Decoding</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nv\">decoder</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">decodeUnionTwo</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">]</span>\n<span class=\"nv\">union2Eq</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"err\">@</span><span class=\"kt\">Union2</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"kt\">Union2</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"nv\">b</span>\n<span class=\"nv\">union2a</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">item</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"kt\">Union2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">U1</span><span class=\"w\"> </span><span class=\"nv\">item</span><span class=\"p\">)</span>\n<span class=\"nv\">union2b</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">item</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"kt\">Union2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">U2</span><span class=\"w\"> </span><span class=\"nv\">item</span><span class=\"p\">)</span>\n<span class=\"nv\">union2Get</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"err\">@</span><span class=\"kt\">Union2</span><span class=\"w\"> </span><span class=\"nv\">union</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">union</span>\n<span class=\"nv\">decodeUnionTwo</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Decode</span><span class=\"nf\">.</span><span class=\"nv\">custom</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">bytes</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">fmt</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">bytes</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Decode</span><span class=\"nf\">.</span><span class=\"nv\">decodeWith</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Decode</span><span class=\"nf\">.</span><span class=\"nv\">decoder</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">fmt</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">result</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">res</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">result</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">union2a</span><span class=\"w\"> </span><span class=\"nv\">res</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">bytes</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Decode</span><span class=\"nf\">.</span><span class=\"nv\">decodeWith</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Decode</span><span class=\"nf\">.</span><span class=\"nv\">decoder</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">fmt</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">                </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">result</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">res</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">result</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">union2b</span><span class=\"w\"> </span><span class=\"nv\">res</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">                </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">result</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">res</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">result</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">res</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 427006361,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1710651024
    },
    {
        "content": "<p>I think this is a clever solution to support optional values. <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span> </p>\n<p>My understanding of this proposal is that we modify the way the <code>finalizer</code> for records is derived (in <code>crates/compiler/derive/src/decoding/record.rs</code>).</p>\n<p>The current <code>finalizer</code> derives an implementation that immediately returns an error if any of the fields are missing. This proposal is that when a field is missing, we first attempt to decode using an empty list (of bytes) and if that succeeds, we use that value for the field. </p>\n<p>This means we can support optional fields in user-defined types by adding an implementation using <code>Decode.custom</code>, and then when e.g. <code>roc-json</code> finalises a record value that has this type it will use the default value if the field was missing from the provided json input. </p>\n<p>I think if you have a working implementaiton then it would be good to make a PR so we can test it out. <img alt=\":roc:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/22008/emoji/images/18217.png\" title=\"roc\"></p>",
        "id": 427007373,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1710651304
    },
    {
        "content": "<p>I now have a draft PR: <a href=\"https://github.com/roc-lang/roc/pull/6587\">https://github.com/roc-lang/roc/pull/6587</a></p>",
        "id": 427007993,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1710651482
    },
    {
        "content": "<p>The full code example with tests is:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">Option</span><span class=\"w\"> </span><span class=\"nv\">val</span><span class=\"w\"> </span><span class=\"nf\">:=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Some</span><span class=\"w\"> </span><span class=\"nv\">val</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"nv\">implements</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">        </span><span class=\"kt\">Eq</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nv\">isEq</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">optionEq</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"kt\">Decoding</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nv\">decoder</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">optionDecode</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">]</span>\n\n<span class=\"nv\">none</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"kt\">Option</span><span class=\"w\"> </span><span class=\"kt\">None</span>\n<span class=\"nv\">some</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"kt\">Option</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Some</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">)</span>\n<span class=\"nv\">isNone</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"err\">@</span><span class=\"kt\">Option</span><span class=\"w\"> </span><span class=\"nv\">opt</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">opt</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">None</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">true</span>\n<span class=\"w\">        </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">false</span>\n\n<span class=\"nv\">optionEq</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"err\">@</span><span class=\"kt\">Option</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"kt\">Option</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"kt\">Some</span><span class=\"w\"> </span><span class=\"nv\">a1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Some</span><span class=\"w\"> </span><span class=\"nv\">b1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">a1</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"nv\">b1</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"kt\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">None</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">true</span>\n<span class=\"w\">        </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">false</span>\n\n<span class=\"nv\">optionDecode</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Decode</span><span class=\"nf\">.</span><span class=\"nv\">custom</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">bytes</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">fmt</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">bytes</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">len</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"w\">        </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">result</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"err\">@</span><span class=\"kt\">Option</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">None</span><span class=\"p\">)),</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"kr\">else</span>\n<span class=\"w\">        </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">bytes</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Decode</span><span class=\"nf\">.</span><span class=\"nv\">decodeWith</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Decode</span><span class=\"nf\">.</span><span class=\"nv\">decoder</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">fmt</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">            </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">result</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">res</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">result</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"err\">@</span><span class=\"kt\">Option</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Some</span><span class=\"w\"> </span><span class=\"nv\">res</span><span class=\"p\">)),</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">            </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">result</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">result</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"err\">#</span><span class=\"w\"> </span><span class=\"kt\">Now</span><span class=\"w\"> </span><span class=\"kt\">I</span><span class=\"w\"> </span><span class=\"nv\">can</span><span class=\"w\"> </span><span class=\"nv\">try</span><span class=\"w\"> </span><span class=\"nv\">to</span><span class=\"w\"> </span><span class=\"nv\">modify</span><span class=\"w\"> </span><span class=\"nv\">the</span><span class=\"w\"> </span><span class=\"nv\">json</span><span class=\"w\"> </span><span class=\"nv\">decoding</span><span class=\"w\"> </span><span class=\"nv\">to</span><span class=\"w\"> </span><span class=\"nv\">try</span><span class=\"w\"> </span><span class=\"nv\">decoding</span><span class=\"w\"> </span><span class=\"nv\">every</span><span class=\"w\"> </span><span class=\"kr\">type</span><span class=\"w\"> </span><span class=\"nv\">with</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">zero</span><span class=\"w\"> </span><span class=\"nv\">byte</span><span class=\"w\"> </span><span class=\"nv\">buffer</span><span class=\"w\"> </span><span class=\"nv\">and</span><span class=\"w\"> </span><span class=\"nv\">see</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">that</span><span class=\"w\"> </span><span class=\"nv\">will</span><span class=\"w\"> </span><span class=\"nv\">decode</span><span class=\"w\"> </span><span class=\"nv\">my</span><span class=\"w\"> </span><span class=\"nv\">field</span>\n<span class=\"kt\">OptionTest</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">maybe</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Option</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"nv\">expect</span>\n<span class=\"w\">    </span><span class=\"nv\">decoded</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"kt\">OptionTest</span><span class=\"w\"> </span><span class=\"nv\">_</span>\n<span class=\"w\">    </span><span class=\"nv\">decoded</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"s\">\"{</span><span class=\"se\">\\\"</span><span class=\"s\">y</span><span class=\"se\">\\\"</span><span class=\"s\">:1}\"</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toUtf8</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Decode</span><span class=\"nf\">.</span><span class=\"nv\">fromBytes</span><span class=\"w\"> </span><span class=\"kt\">TotallyNotJson</span><span class=\"nf\">.</span><span class=\"nv\">json</span>\n<span class=\"w\">    </span><span class=\"nv\">dbg</span><span class=\"w\"> </span><span class=\"s\">\"hil\"</span>\n\n<span class=\"w\">    </span><span class=\"nv\">expected</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">({</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"nv\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">maybe</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">none</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"w\">    </span><span class=\"nv\">isGood</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">        </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">decoded</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">expected</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"nv\">b</span>\n\n<span class=\"w\">            </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">false</span>\n<span class=\"w\">    </span><span class=\"nv\">isGood</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">true</span>\n<span class=\"kt\">OptionTest2</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">maybe</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Option</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"nv\">expect</span>\n<span class=\"w\">    </span><span class=\"nv\">decoded</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"kt\">OptionTest2</span><span class=\"w\"> </span><span class=\"nv\">_</span>\n<span class=\"w\">    </span><span class=\"nv\">decoded</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">        </span><span class=\"s\">\"\"\"</span>\n<span class=\"s\">        {\"</span><span class=\"nv\">maybe</span><span class=\"s\">\":1}</span>\n<span class=\"s\">        \"\"\"</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toUtf8</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Decode</span><span class=\"nf\">.</span><span class=\"nv\">fromBytes</span><span class=\"w\"> </span><span class=\"kt\">TotallyNotJson</span><span class=\"nf\">.</span><span class=\"nv\">json</span>\n<span class=\"w\">    </span><span class=\"nv\">dbg</span><span class=\"w\"> </span><span class=\"s\">\"hil\"</span>\n\n<span class=\"w\">    </span><span class=\"nv\">expected</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">({</span><span class=\"w\"> </span><span class=\"nv\">maybe</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">some</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"nv\">u8</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"w\">    </span><span class=\"nv\">expected</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"nv\">decoded</span>\n</code></pre></div>",
        "id": 427009518,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1710651876
    },
    {
        "content": "<p>This looks good to me, what do you think <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span>?</p>",
        "id": 427501102,
        "sender_full_name": "Anton",
        "timestamp": 1710772981
    },
    {
        "content": "<p>yeah, I like it! I've been thinking about this design since you posted it, and I think it makes a lot of sense <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 427516166,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710776766
    },
    {
        "content": "<p>we could potentially take it a step further in the future and auto-derive this behavior for decoding tag unions that look like <code>Maybe</code> - as in:</p>\n<ul>\n<li>one tag with a payload that holds the \"wrapped\" value (so, <code>Just</code> in Maybe's case, or <code>Some</code> in Option's case)</li>\n<li>all the other tags have no payload data (so, either no payload like <code>None</code> or <code>Nothing</code>, or payloads that hold no information, e.g. <code>Err [FieldMissing]</code>)</li>\n</ul>",
        "id": 427516772,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710776924
    },
    {
        "content": "<p>this would mean you could optional record fields into whatever tag names make sense for your use case</p>",
        "id": 427516825,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710776940
    },
    {
        "content": "<p>e.g. <code>email : [Specified Str, Unspecified]</code></p>",
        "id": 427517061,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710777003
    },
    {
        "content": "<p>I'm not sure if that's the default behavior we want for tag unions (e.g. other formats may want a missing field to result in an error for tag unions instead), but it's interesting!</p>",
        "id": 427517286,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710777059
    },
    {
        "content": "<p>I imagine you want tag unions to be encodable and decodable, that would loose the information along the way. Ie you couldn't encode <code>email:[Specified Str, NotSpecified, NotAsked]</code> and distinguish between <code>NotAsked</code> and <code>NotSpecified</code></p>",
        "id": 427906608,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1710934223
    }
]