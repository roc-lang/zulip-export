[
    {
        "content": "<p>Hi! :D</p>\n<p>Is {Min,Max}Heap something that would fit the roc builtins? I wanted to write a discrete event simulation toy project and a min heap is the only thing i'm missing and don't know if i can implement efficiently in roc</p>",
        "id": 524082681,
        "sender_full_name": "Prokop Randacek",
        "timestamp": 1749928007
    },
    {
        "content": "<p>I'd rather not put it in builtins, but I think it should definitely be efficiently implementable using <code>List</code>! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 524084069,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749929831
    },
    {
        "content": "<p>Depending on the size, a true flat solution based on list may not be the right option. In large cases a N-ary tree with large nodes would be the way to go. That is a data structure that would be annoying to make in roc. Cause you would need to use tuples manually when you really want inline static sized arrays.</p>\n<p>Though for many uses I'm sure a list is fine.</p>",
        "id": 524085571,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749931924
    },
    {
        "content": "<p>This is still one of the gaps on roc on my opinion. Kinda similar to a Simd chunk type, but probably more flexible with what can be in it</p>",
        "id": 524085636,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749932005
    },
    {
        "content": "<p>we could offer <code>.iter()</code> on tuples that have a common element type</p>",
        "id": 524088717,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749936559
    },
    {
        "content": "<p>that would make it nicer at least <span aria-label=\"smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 524088735,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749936592
    },
    {
        "content": "<p>I think indexing with runtime integers is the more important feature. So you can binary search a tuple for example</p>",
        "id": 524089664,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749938168
    },
    {
        "content": "<p>And also have variable length based on a compile time constant</p>",
        "id": 524089671,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749938185
    },
    {
        "content": "<p>Cause most dense trees hold some number of elements and children nodes (often configurable). They need to be able to search them and preferably the elements are stored inline</p>",
        "id": 524089713,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749938265
    },
    {
        "content": "<p>we can do that too, in the same way</p>",
        "id": 524090377,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749939327
    },
    {
        "content": "<p>offer <code>.get(n)</code> etc.</p>",
        "id": 524090392,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749939346
    },
    {
        "content": "<p>Only if there tuple is homogeneous I guess?</p>",
        "id": 524090844,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749940050
    },
    {
        "content": "<p>right</p>",
        "id": 524093273,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749943985
    },
    {
        "content": "<p>it would have to be checked, but hopefully in practice that would get elided a lot</p>",
        "id": 524093297,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749944027
    },
    {
        "content": "<p>While homogeneous would have to be dealt with at compile time to avoid type errors.</p>",
        "id": 524100613,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749956444
    },
    {
        "content": "<p>But yeah, length would get checked at runtime</p>",
        "id": 524100619,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749956454
    },
    {
        "content": "<p>And hopefully be elided</p>",
        "id": 524100623,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749956462
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"917605\">@Prokop Randacek</span>  I didn't think I'd be showing this to others, but I happened to create a DES project some time ago. I intended it for the Software Design by Example book.<br>\n<a href=\"https://github.com/HajagosNorbert/roc-book-of-examples-des\">https://github.com/HajagosNorbert/roc-book-of-examples-des</a><br>\nI don't know what efficiency you had in mind. I have a prio queue and a queue in there. The (non-prio) queue I created can be faster if you choose to fill it initially with dummy data, because you can omit the condition that decides to append vs set the enqueued value. If your use case permits it, when enqueuing on a full queue, you can overwrite the first value, which will get rid of another branch.<br>\nIt is an older version of roc, I don't know if it runs or not, but you can look at the source and the tests. It's not like I've done something like this before, what Brendan has said is new to me as well with wide trees.</p>",
        "id": 524337492,
        "sender_full_name": "Norbert Hajagos",
        "timestamp": 1750110061
    },
    {
        "content": "<p>This repo is better, as it has some readme for planning the layout of the book: <a href=\"https://github.com/roc-lang/book-of-examples/tree/main/des\">https://github.com/roc-lang/book-of-examples/tree/main/des</a><br>\nAnd if you want to read some rambling on why the heapify functions have a weird signature (advised to read the source code before) for the sake of accessing the underlying list less often, I did that in this channel in the last message. <br>\n<a href=\"#narrow/stream/429849-book---software-design-by-example-in-roc/topic/Chapters.20ready.20for.20feedback\">https://roc.zulipchat.com/#narrow/stream/429849-book---software-design-by-example-in-roc/topic/Chapters.20ready.20for.20feedback</a></p>",
        "id": 524341205,
        "sender_full_name": "Norbert Hajagos",
        "timestamp": 1750111971
    }
]