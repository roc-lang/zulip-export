[
    {
        "content": "<p>Looking at <a href=\"https://github.com/rtfeldman/roc/blob/f39f7eda03a2488c1a89ee2b58ab3c6ca97ccaee/compiler/builtins/docs/Num.roc#L784-L805\"><code>compiler/builtins/docs/Num.roc:784-805</code></a>, <code>//</code> is documented as desugaring to <code>Num.divRound</code> (which isn't actually defined/implemented). In <a href=\"https://github.com/rtfeldman/roc/blob/f39f7eda03a2488c1a89ee2b58ab3c6ca97ccaee/TUTORIAL.md#L1944\"><code>TUTORIAL.md:1944</code></a>, and <a href=\"https://github.com/rtfeldman/roc/blob/f39f7eda03a2488c1a89ee2b58ab3c6ca97ccaee/roc-for-elm-programmers.md#L1297\"><code>roc-for-elm-programmers.md:1297</code></a>, it's defined as desugaring to <code>Num.divFloor</code>.</p>\n<p>The present behavior is clearly divTrunc(ate), which doesn't appear to have an corresponding, precisely-named function. We had internal references to a \"NUM_DIV_INT\" which was accurate but perhaps whose naming is too circular (\"integer division has the behavior that integer division has\"). I had mistakenly conflated flooring division with truncating division in <a href=\"https://github.com/rtfeldman/roc/pull/2840\">https://github.com/rtfeldman/roc/pull/2840</a>. </p>\n<div class=\"codehilite\"><pre><span></span><code>» 23 // 13\n\n1 : Int *\n\n» -23 // 11\n\n-2 : Int *\n\n» 23 // -11\n\n-2 : Int *\n</code></pre></div>\n<p>If the behavior were <code>Num.divRound</code>, we'd expect <code>23 // 13 == 2</code>, and if it were <code>Num.divFloor</code> (at least, iiuc, following the <em>mathematical</em> meaning of floor, i.e. \"towards negative infinity\"), we'd expect <code>-23 // 11 == -3</code>.</p>\n<p>I'm assuming C as well as the integer signed division operation in most modern hardware \"truncates towards zero,\" thus is the behavior most programmers would expect across the broadest swath of languages.</p>\n<p>Further, I suspect most programmers share in my weakness of not being great at internalizing edge cases involving negative numbers. We may think of a flooring operation as \"going towards zero\" since that's what it does for positive results (even though more precisely we'd call it a \"truncating\" operation); likewise we might incorrectly/casually think of a ceiling operation as \"going away from zero.\" Mathematically, ceiling should be going towards positive infinity, again, iiuc.</p>\n<div class=\"codehilite\"><pre><span></span><code>» Num.divCeil -5 2\n\n-2 : Int *\n\n» Num.divFloor -5 2\n\n-2 : Int *\n</code></pre></div>\n<p>In any case, these should never produce the same answer when there's a non-zero remainder.</p>\n<p>I propose the following:</p>\n<ol>\n<li><code>Num.divFloor</code> is renamed to <code>Num.divTruncate</code> (since that's the behavior it implements already).</li>\n<li><code>//</code> is redefined as desugaring to <code>Num.divTruncate</code>.</li>\n<li>We decide if we want to implement <code>Num.divRound</code>.</li>\n<li>We decide if we want to implement a <em>true</em> <code>Num.divFloor</code> (<code>Num.divCeil</code> is <em>correct</em> but actually no longer has a paired opposite-rounding variant).</li>\n<li>We evaluate whether we want <code>Num.divRoundAwayFromZero</code> (a more succinct yet equally precise name to be determined). If we decide we want it, that may suggest the name of <code>Num.divTruncate</code> should actually be something like <code>Num.divRoundTowardsZero</code>.</li>\n</ol>",
        "id": 278923479,
        "sender_full_name": "Kevin Gillette",
        "timestamp": 1649912605
    },
    {
        "content": "<p>I agree that the default should be that integer division goes towards zero, which would match what <a href=\"https://godbolt.org/z/7r6KPbeKe\">c++ does</a> and most other languages. It also is likely easier to reason about for most people.</p>\n<p>I think that if we have a <code>divCeil</code> we should also have a <code>divFloor</code>. I think that these should go towards positive and negative infinity respectively. Otherwise, I think the naming would be very confusing because they wouldn't match what <code>ceil</code> and <code>floor</code> normally do.</p>\n<p>I think that <code>divTruncate</code> is an ok name. Though maybe we want to to be part of the group of rounding specific functions something like <code>divRoundIn</code>, <code>divRoundOut</code>, <code>divRound</code>. Of course those aren't great names, but <code>divRoundUp</code> and <code>divRoundDown</code> are ambiguous so in and out are my best thoughts so far if we want explicit rounding options.</p>",
        "id": 278924016,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1649913371
    },
    {
        "content": "<p>ooh, I like <code>divRoundIn</code>. Very concise and technically unambiguous (if the implied relative anchor is correctly inferred by the reader, that is).</p>",
        "id": 278924118,
        "sender_full_name": "Kevin Gillette",
        "timestamp": 1649913491
    },
    {
        "content": "<p>Up, Down, In, and Out, taken together, sounds a bit like subatomic particle (quark) naming (<a href=\"https://global.jaxa.jp/article/interview/vol43/img/photo_04_e.gif\">https://global.jaxa.jp/article/interview/vol43/img/photo_04_e.gif</a>)... probably not something we want to replicate.</p>\n<div class=\"message_inline_image\"><a href=\"https://global.jaxa.jp/article/interview/vol43/img/photo_04_e.gif\"><img src=\"https://uploads.zulipusercontent.net/9d868af6b45f4114f0d6c39c4915d38c8796c4dd/68747470733a2f2f676c6f62616c2e6a6178612e6a702f61727469636c652f696e746572766965772f766f6c34332f696d672f70686f746f5f30345f652e676966\"></a></div>",
        "id": 278924259,
        "sender_full_name": "Kevin Gillette",
        "timestamp": 1649913658
    },
    {
        "content": "<p>So we want <code>divRoundStrange</code> and <code>divRoundCharm</code>? I think that would be a good feature to have only enabled on april fools day.</p>",
        "id": 278924344,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1649913758
    },
    {
        "content": "<p>And leap day.</p>",
        "id": 278924366,
        "sender_full_name": "Kevin Gillette",
        "timestamp": 1649913815
    },
    {
        "content": "<p>good catch <span class=\"user-mention\" data-user-id=\"483789\">@Kevin Gillette</span>!</p>\n<p>I agree, we should rename the current <code>divFloor</code> to <code>divTrunc</code> <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 278951801,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1649934981
    },
    {
        "content": "<p>also should probably get rid of <code>divRound</code> and <code>divFloor</code> in the docs, and consider re-adding them later if there's demand</p>",
        "id": 278951841,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1649935018
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/316715-contributing/topic/divFloor.20vs.20divRound.20vs.20divTrunc/near/278951801\">said</a>:</p>\n<blockquote>\n<p>I agree, we should rename the current <code>divFloor</code> to <code>divTrunc</code> <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>\n</blockquote>\n<p>Sounds good. I'll do that as part of the non-div aspects of <a href=\"https://github.com/rtfeldman/roc/issues/2826\">https://github.com/rtfeldman/roc/issues/2826</a>, which I should be able to wrap up soon (the issue isn't actually properly complete yet, as only the \"div\" changes are merged).</p>",
        "id": 278966421,
        "sender_full_name": "Kevin Gillette",
        "timestamp": 1649943285
    },
    {
        "content": "<p><a href=\"https://github.com/rtfeldman/roc/pull/2883\">https://github.com/rtfeldman/roc/pull/2883</a> should be ready.</p>",
        "id": 279243307,
        "sender_full_name": "Kevin Gillette",
        "timestamp": 1650233888
    }
]