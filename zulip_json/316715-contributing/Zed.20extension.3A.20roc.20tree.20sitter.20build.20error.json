[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"651372\">@Eli Dowling</span> the Zed Extensions CI gives following error:<br>\n<a href=\"/user_uploads/22008/9QChQ8_oykGz3L2tb4rhOrbz/image.png\">image.png</a><br>\n<a href=\"https://github.com/zed-industries/extensions/actions/runs/8860237363/job/24335434614\">https://github.com/zed-industries/extensions/actions/runs/8860237363/job/24335434614</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/9QChQ8_oykGz3L2tb4rhOrbz/image.png\" title=\"image.png\"><img src=\"/user_uploads/22008/9QChQ8_oykGz3L2tb4rhOrbz/image.png\"></a></div>",
        "id": 435887629,
        "sender_full_name": "Alf Richter",
        "timestamp": 1714320558
    },
    {
        "content": "<p>Okay, so that's going to be because just like helix and neovim zed supports it's own specific selection of tree sitter queries. The default ones inside the tree-sitter-roc repo are from Helix and I imagine zed probably matches that closely but we'll have to either find documentation for the queries that z supports or just go by trial and error removing the ones that don't work for now</p>",
        "id": 435914057,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1714343313
    },
    {
        "content": "<p>I'd love to help you but unfortunately zed it's completely borked on Linux for me :(</p>",
        "id": 435914072,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1714343332
    },
    {
        "content": "<p>We could try to run their CI scripts inside of the your tree sitter or the my zed-roc repo, so we would at least get the errors step by step.</p>",
        "id": 435914910,
        "sender_full_name": "Alf Richter",
        "timestamp": 1714344138
    },
    {
        "content": "<p>You get the errors when you load the plugin in zed if you run zed from the CLI</p>",
        "id": 435915355,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1714344510
    },
    {
        "content": "<p>I was able to get that far on my Linux setup</p>",
        "id": 435915375,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1714344534
    },
    {
        "content": "<p>I was able to get that far on my Linux setup test</p>",
        "id": 435915377,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1714344538
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"651372\">@Eli Dowling</span>: I have  build the zed extension cli tool locally on my ARM Mac, they are using the tool in the CI Build. It’s included as create in the main zed.git, but only published for x86 Linux. I’ll try to detect the problematic queries and mark these, bc. I have no clue about tree sitter and queries atm. :)</p>",
        "id": 436211817,
        "sender_full_name": "Alf Richter",
        "timestamp": 1714462156
    },
    {
        "content": "<p>Commenting out the following lines got it \"working\" for me on arm mac.</p>\n<div class=\"codehilite\"><pre><span></span><code># highlights.scm\n(backpassing_expr assignee: (identifier_pattern (identifier) @parameter.definition))\n;----function invocations ----\n(function_call_expr\n  caller:  (variable_expr\n      (identifier)@function))\n\n(function_call_expr\n  caller: (field_access_expr (identifier)@function .))\n\n; pattern captures\n(when_is_branch pattern: (_ (identifier_pattern (identifier) @variable.parameter)))\n\n# indents.scm\n;;It&#39;s annoying when pipelines automatically dedent this pervents that\n(expr_body\n    result: (bin_op_expr)\n)@extend\n\n;this automatically dedents, this may be more annying than helpful when writing pipelines\n(expr_body\n    result: (_)\n) @extend.prevent-once\n\n# injections.scm\n;injection from piping function calls\n(bin_op_expr\npart: (const\n    [(multiline_string)(string)] @injection.content)\npart: (operator)\npart: (variable_expr\n  (identifier)@injection.language))\n</code></pre></div>\n<p>Logs all displayed the error message of <code>Impossible pattern</code></p>\n<div class=\"codehilite\"><pre><span></span><code># example\nError loading highlights query\n\nCaused by:\n    Query error at 143:19. Impossible pattern:\n    (backpassing_expr assignee: (identifier_pattern (identifier) @parameter.definition))\n</code></pre></div>",
        "id": 436277819,
        "sender_full_name": "dwyd",
        "timestamp": 1714485437
    },
    {
        "content": "<p>Lovely! I'll look into this when I get some time :)</p>",
        "id": 436366459,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1714517629
    },
    {
        "content": "<p>Okay I think this is now a fixed issue I updated my version of zed and it's working fine. It seems like at some point zed didn't support part of the query syntax and now it does. Using <span class=\"user-mention\" data-user-id=\"485505\">@Alf Richter</span>'s extension worked well for me</p>",
        "id": 436461163,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1714547739
    },
    {
        "content": "<p>Thank you both! Seems to be working for me too. Pulled down the latest changes and I don't see any  errors in the Zed log when rebuilding.</p>",
        "id": 436538999,
        "sender_full_name": "dwyd",
        "timestamp": 1714583327
    },
    {
        "content": "<p>I've triggered a new build of my PR <br>\n<a href=\"https://github.com/zed-industries/extensions/pull/432\">https://github.com/zed-industries/extensions/pull/432</a><br>\nIf this CI/CD run is successful, then the roc extension should be installable as normal zed plugin.</p>",
        "id": 436545755,
        "sender_full_name": "Alf Richter",
        "timestamp": 1714585952
    },
    {
        "content": "<p>yeah I forgot to mention, this has been working well for me too!</p>",
        "id": 436549542,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714587345
    }
]