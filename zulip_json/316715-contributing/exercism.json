[
    {
        "content": "<p>Could you please check that the following would be an idiomatic way of formulating the hello world exercise in exercism? They require the tests to be separated from the code, so I put the code in a module, and the test in an app:</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code># HelloWorld.roc\nmodule [hello]\n\nhello = \"Hello, World!\"\n</code></pre></div>\n<p>and here's the corresponding test script:</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code># hello-world-test.roc\napp [main] { pf: platform \"https://github.com/roc-lang/basic-cli/releases/download/0.12.0/Lb8EgiejTUzbggO2HVVuPJFkwvvsfW6LojkLR20kTVE.tar.br\" }\n\nimport pf.Task exposing [Task]\nimport HelloWorld exposing [hello]\n\nexpect hello == \"Hello, World!\"\n\nmain =\n    Task.ok {}\n</code></pre></div>\n<p>They would just need to run <code>roc test hello-world-test.roc</code>, and off we go?</p>",
        "id": 455894101,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1722594292
    },
    {
        "content": "<p><a href=\"#narrow/stream/316715-contributing/topic/exercism/near/455894101\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"304641\" href=\"/#narrow/stream/304641-ideas/topic/Learning.20Roc.3A.20with.20an.20AI.20mentor.2C.20and.2For.20with.20exercism.2Eorg\">#ideas &gt; Learning Roc: with an AI mentor, and/or with exercism.org</a> by <span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span>.</p>",
        "id": 455894928,
        "sender_full_name": "Notification Bot",
        "timestamp": 1722594528
    },
    {
        "content": "<blockquote>\n<p>Could you please check that the following would be an idiomatic way</p>\n</blockquote>\n<p>Looks good <span class=\"user-mention\" data-user-id=\"734214\">@Aurélien Geron</span> :)</p>",
        "id": 455895437,
        "sender_full_name": "Anton",
        "timestamp": 1722594647
    },
    {
        "content": "<p>How are we tracking with the Exercism language track? I think this will be really nice to have, and am interested to know what the plan/way forward is. </p>\n<p><span class=\"user-mention\" data-user-id=\"734214\">@Aurélien Geron</span> do you need help with this? Is it something we could splut up into smaller tasks? Do the exercism team want to see a minimum number or problems or something before they add Roc as a language track?</p>",
        "id": 463259710,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724025491
    },
    {
        "content": "<p>The first two exercises are <a href=\"https://github.com/exercism/roc/pull/3\">almost ready</a>.</p>",
        "id": 463632751,
        "sender_full_name": "Anton",
        "timestamp": 1724143444
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> , I was busy the last couple of weeks, but I found a bit of time to finally get the ball rolling. The hardest part was understanding how an Exercism track is structured and what's required to get it to work. Now that the structure is there, things should be much faster.<br>\nI've got two exercises ready, and the second one took me maybe 10 minutes to add.<br>\nAnyone can help by adding an exercise using the same structure as the other ones and then submitting a PR. The more exercises we have, the better.<br>\nThat said, I still have one important task left to do: finish the <code>roc-test-runner</code>, basically a Docker container that the website can use to test the user's code. I've started it but it's not quite done yet.<br>\nAlso, it would be nice to write a generator: that's a tool which can read the exercise specs (written in JSON) and convert them into Roc tests for each exercise. This will simplify writing the tests for each exercise.</p>",
        "id": 463945256,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724218013
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> , thanks for all your help. Could you please Approve this review so I can merge the PR?<br>\n<a href=\"https://github.com/exercism/roc/pull/3#pullrequestreview-2245342898\">https://github.com/exercism/roc/pull/3#pullrequestreview-2245342898</a></p>",
        "id": 463945452,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724218060
    },
    {
        "content": "<blockquote>\n<p>basically a Docker container that the website can use</p>\n</blockquote>\n<p>In case you were not aware, <a href=\"https://github.com/roc-lang/roc/tree/main/docker\">these</a> should be a good starting point.</p>",
        "id": 463981411,
        "sender_full_name": "Anton",
        "timestamp": 1724228814
    },
    {
        "content": "<p>@Anton, yes these are the ones I used. <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 464008569,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724236039
    },
    {
        "content": "<p>I'm running into a little issue with the roc-test-runner: the Docker container does not have network access, so it cannot download the basic-cli platform. The only solution I can see is to add it to the Roc cache when building the Docker image. This involves downloading the .tar.br, checking its hash, and uncompressing it. I wish there was a <code>roc download &lt;url&gt; -o /some/path</code> command to make this easier. Is there?</p>",
        "id": 464009946,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724236354
    },
    {
        "content": "<p>There is no command like that but you can wget the hello world example, do <code>roc helloWorld.roc</code>and then all those steps are done as well</p>",
        "id": 464010613,
        "sender_full_name": "Anton",
        "timestamp": 1724236620
    },
    {
        "content": "<p>Oh good point, thanks</p>",
        "id": 464012833,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724237378
    },
    {
        "content": "<p>I implemented a basic roc-test-runner in <a href=\"https://github.com/exercism/roc-test-runner/pull/4\">https://github.com/exercism/roc-test-runner/pull/4</a></p>",
        "id": 464170391,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724274380
    },
    {
        "content": "<p>Yikes, the tests passed on my machine, but they seem to be failing with this error <a href=\"https://github.com/exercism/roc-test-runner/actions/runs/10497471104/job/29080392361?pr=4\">on github</a>:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;main&#39; panicked at crates/cli/src/lib.rs:571:10:\ncalled `Result::unwrap()` on an `Err` value: DlOpen { desc: \\&quot;/tmp/.tmpKLdU2k/app.so: failed to map segment from shared object\\&quot; }\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>\n<p>That's really odd. Any idea what could cause this?</p>",
        "id": 464171763,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724274867
    },
    {
        "content": "<p>The test is compiled into a shared library in a temp folder and then opened by the roc compiler and executed</p>",
        "id": 464171976,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724274959
    },
    {
        "content": "<p>Not sure why that is failing, but that is the error source here</p>",
        "id": 464172050,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724274977
    },
    {
        "content": "<p>According to this <a href=\"https://stackoverflow.com/a/55693490/38626\">SO answer</a>, it might be a permissions issue: perhaps <code>/tmp</code> is not mounted properly. It should be mounted with <code>sudo mount /tmp -o remount,exec</code>.</p>",
        "id": 464186426,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724280619
    },
    {
        "content": "<p>I checked, it looks like <code>/tmp</code> is writeable after all, so unless Roc is trying to write somewhere else, this should not be the problem.<br>\nI'm stumped, some help would be really appreciated. Here's the full RUST_BACKTRACE. It's not very helpful...</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;main&#39; panicked at crates/cli/src/lib.rs:571:10:\ncalled `Result::unwrap()` on an `Err` value: DlOpen { desc: \\&quot;/tmp/.tmp3qpj0O/app.so: failed to map segment from shared object\\&quot; }\nstack backtrace:\n   0:     0x5600dfb5049b - &lt;unknown&gt;\n   1:     0x5600dedd53f0 - &lt;unknown&gt;\n   2:     0x5600dfb4bd03 - &lt;unknown&gt;\n   3:     0x5600dfb50234 - &lt;unknown&gt;\n   4:     0x5600dfb51d90 - &lt;unknown&gt;\n   5:     0x5600dfb51aaf - &lt;unknown&gt;\n   6:     0x5600dfb522ae - &lt;unknown&gt;\n   7:     0x5600dfb521b2 - &lt;unknown&gt;\n   8:     0x5600dfb50996 - &lt;unknown&gt;\n   9:     0x5600dfb51f14 - &lt;unknown&gt;\n  10:     0x5600deccae75 - &lt;unknown&gt;\n  11:     0x5600deccb383 - &lt;unknown&gt;\n  12:     0x5600df10c296 - &lt;unknown&gt;\n  13:     0x5600defaf330 - &lt;unknown&gt;\n  14:     0x5600defa2543 - &lt;unknown&gt;\n  15:     0x5600defa2563 - &lt;unknown&gt;\n  16:     0x5600dfb41a1a - &lt;unknown&gt;\n  17:     0x5600defb3595 - &lt;unknown&gt;\n  18:     0x7f31500221ca - &lt;unknown&gt;\n  19:     0x7f315002228b - __libc_start_main\n  20:     0x5600ded68a6e - &lt;unknown&gt;\n  21:                0x0 - &lt;unknown&gt;\n</code></pre></div>",
        "id": 464195939,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724284422
    },
    {
        "content": "<p>I'm not sure how to reproduce this. Is this just spool up the Docker container? I can have a look later tonight on my dev machine.</p>",
        "id": 464199935,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724285715
    },
    {
        "content": "<p>Thanks for your help!<br>\nI'm not sure I understand what you mean by \"Is this just spool up the Docker container\"?<br>\nBasically, everything works fine when I run <code>bin/run-tests-in-docker.sh</code> on my machine: it builds the Docker image and runs the <code>bin/run.sh</code> script inside the container, and all the tests pass.<br>\nHowever, when Github Actions runs this same script (when you push anything to the <code>main</code> branch), the container seems to be built fine, but I get the error above while the <code>bin/run-tests-in-docker.sh</code> runs, every time it calls <code>roc tests ...</code>.</p>\n<p>I've checked a few things on Github Actions:</p>\n<ul>\n<li>The docker host is Ubuntu 24.04.</li>\n<li>The container has:<ul>\n<li><code>uname -a = Linux 72fc66ec05dd 6.8.0-1012-azure #14-Ubuntu SMP Mon Jul 29 21:12:56 UTC 2024 x86_64 x86_64 x86_64 GNU/Linux</code></li>\n<li><code>whoami</code> = <code>root</code></li>\n<li><code>/tmp</code> has read-write access.</li>\n<li><code>TMPDIR</code> is undefined (setting it to <code>/tmp</code> fixes nothing)</li>\n</ul>\n</li>\n</ul>\n<p>A couple ideas:</p>\n<ul>\n<li>Perhaps AppArmor is running on the host and blocking something. It looks like it was <a href=\"https://github.com/actions/runner-images/pull/10024\">recently disabled</a>, but perhaps the change is not online yet?</li>\n<li>Perhaps <code>/tmp</code> is writeable but there are some limitations, for example perhaps you can't delete anything in <code>/tmp/foo</code>?</li>\n</ul>\n<p>I tried adding <code>--profiling</code> to <code>roc test</code> to get more debug info in the RUST_BACKTRACE, but I saw no difference.</p>",
        "id": 464201757,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724286820
    },
    {
        "content": "<p>to get more info in the backtrace, you would need a debug build of the roc compiler</p>",
        "id": 464202493,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724286990
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span>. Do you have a URL I can download it from?</p>",
        "id": 464202866,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724287224
    },
    {
        "content": "<p>Or do I need to build Roc from source?</p>",
        "id": 464202883,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724287239
    },
    {
        "content": "<p>I think you would have to build from source</p>",
        "id": 464203025,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724287329
    },
    {
        "content": "<p>I don't think we publish it anywhere</p>",
        "id": 464203032,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724287336
    },
    {
        "content": "<p>Ok thanks, I'll try that.<br>\nAnother possible difference between my computer and the Github Actions host is perhaps the amount of available RAM, but I doubt that running <code>roc test</code> would use up too much RAM.</p>",
        "id": 464204391,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724287992
    },
    {
        "content": "<p>I've just tried creating a directory in /tmp, adding a file, appending to it, deleting the file, then deleting the directory, and everything worked fine, so it doesn't look like a permission issue on /tmp after all.</p>",
        "id": 464204542,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724288091
    },
    {
        "content": "<p>Oh wow, I compiled Roc from source using the latest code on the <code>main</code> branch, and I uploaded the <code>roc</code> binary <a href=\"https://github.com/ageron/prototype-roc-test-runner/raw/main/bin/roc.tgz\">here</a> and made the test runner use that instead of the binaries on <a href=\"http://github.com/roc-lang/roc\">github.com/roc-lang/roc</a>, and I was hoping to see a detailed stacktrace but instead... the test runner works just fine now!<br>\nI'm not sure I'm happy that it works now, because I'm no closer to understanding what's wrong with the official release. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>  But at least this unblocks the roc-test-runner with a temporary hack.</p>\n<p>As a side-note, the debug version prints deprecation warnings about backpassing because <code>&lt;-</code> is used in <code>Task.roc</code>, so I need to either figure out how to fix that or filter out deprecation warnings. Perhaps I should upgrade to basic-cli 0.13?</p>\n<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span>, what could cause the debug version to work and the release version to fail? Perhaps they're not exactly based on the same code? Or perhaps they were built on different platforms against different library versions? I built the debug version on Debian bookworm in a Docker container on my Macbook.</p>",
        "id": 464272642,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724307916
    },
    {
        "content": "<p>Honestly not sure. Maybe <span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> would have a guess</p>",
        "id": 464275146,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724308791
    },
    {
        "content": "<p>I wouldn't expect source or debug to make a difference for roc test. And I don't think the code in that part of the compiler has changed any time recently</p>",
        "id": 464275267,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724308836
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"734214\">@Aurélien Geron</span> we just fixed the <a href=\"https://github.com/roc-lang/roc/pull/7015\">bug that has been holding the nightly releases up</a> for a while now, and is why we've been talking about TESTING releases. </p>\n<p>I think that means we should be good to put together a new nightly for both roc and basic-cli and that will include a lot of fixes too, which aren't in the current releases. </p>\n<p>I imagine this will happen when Anton is back online sometime tomorrow evening our time, or maybe some time Monday/Tuesday and he can upload the binaries etc.</p>\n<p>I would recommend just working with your release for testing (for now) and we should be able to switch to a nightly soon.</p>",
        "id": 464282076,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724310731
    },
    {
        "content": "<p>I cant see any obvious issues with the test runner -- it is strange that the latest nightly isn't working. But it sounds like the later versions of the compiler are ok.</p>",
        "id": 464282721,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724311038
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> , that's great news, I was going completely nuts! <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 464309687,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724317435
    },
    {
        "content": "<p>The current test runner is really brittle, as any little change in the test output will cause the test runner to break. For example, any deprecation warning or any formatting difference. It will be hard to maintain as Roc evolves. In the long run, it would be great to have a kind of plugin system as Richard suggested, as I expect this will be easier to maintain. But in the short term, is there a way I can exclude warnings from the test output? If not, it would be nice to be able to set the desired level of verbosity (the <code>--verbose</code> option is not that granular).</p>",
        "id": 464312076,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724317850
    },
    {
        "content": "<p>Great, the roc-test-runner tests in <a href=\"https://github.com/exercism/roc-test-runner/pull/4/\">PR #4</a> finally pass using the latest Roc code (I compiled Roc from source and uploaded the debug and release versions <a href=\"https://github.com/ageron/prototype-roc-test-runner/tree/main/bin\">here</a>).</p>",
        "id": 464328491,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724321691
    },
    {
        "content": "<p>I just submitted <a href=\"https://github.com/exercism/roc/pull/6\">PR #6</a> which adds a test generator (adapted from Python's generator). Now that we have a roc-test-runner, a test generator, and a couple working exercises, I think we're ready to start adding many exercises.<br>\nNote: the test generator is not user facing, so I don't think it's an issue that it's written in Python, it was much faster adapting the Python one rather than writing it from scratch in Roc. We can always port it to Roc in the future if we want.</p>",
        "id": 464528705,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724383823
    },
    {
        "content": "<blockquote>\n<p>The docker host is Ubuntu 24.04</p>\n</blockquote>\n<p>We don't test yet with 24.04 so I recommend sticking to 22.04 for now. I know Luke tried it sometime and could not get llvm 16 set up with it.</p>",
        "id": 464590582,
        "sender_full_name": "Anton",
        "timestamp": 1724403830
    },
    {
        "content": "<blockquote>\n<p>Perhaps I should upgrade to basic-cli 0.13?</p>\n</blockquote>\n<p>0.14 will be out soon with the backpassing warnings resolved</p>",
        "id": 464590713,
        "sender_full_name": "Anton",
        "timestamp": 1724403852
    },
    {
        "content": "<blockquote>\n<p>what could cause the debug version to work and the release version to fail?</p>\n</blockquote>\n<p>Are you sure both were built using the same commit?</p>",
        "id": 464590911,
        "sender_full_name": "Anton",
        "timestamp": 1724403893
    },
    {
        "content": "<blockquote>\n<p>I think that means we should be good to put together a new nightly for both roc and basic-cli and that will include a lot of fixes too, which aren't in the current releases.</p>\n</blockquote>\n<p><span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span></p>",
        "id": 464591025,
        "sender_full_name": "Anton",
        "timestamp": 1724403916
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> . Indeed both debug and release built from the latest source worked.</p>",
        "id": 464624228,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724411722
    },
    {
        "content": "<p>I just added three easy exercises: bob, darts, and difference-of-squares. If anyone wants to help me add more exercises (it's fun!), here's how:</p>\n<ul>\n<li>Fork <a href=\"https://github.com/exercism/roc\">https://github.com/exercism/roc</a></li>\n<li>Make sure you have the latest Roc release, and a recent release of Python 3.</li>\n<li>Install the Python dependencies: <code>pip3 install -r requirements-generator.txt</code></li>\n<li>Choose an exercise in <a href=\"https://github.com/exercism/problem-specifications\">https://github.com/exercism/problem-specifications</a>. Below, I'll suppose you chose, say, <code>all-your-base</code></li>\n<li>Run <code>bin/add-exercise all-your-base</code> and follow the instructions</li>\n<li>When you're happy, submit a PR.</li>\n</ul>",
        "id": 464738381,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724444371
    },
    {
        "content": "<p>Btw, my solutions to the three exercises may not be idiomatic or optimal, please feel free to suggest improvements.</p>",
        "id": 464745370,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724447425
    },
    {
        "content": "<p>Heads up, you can use <code>'a'</code> as a char literal that translates to its respective ASCII code. So you can implement <code>isLower</code> and whatnot more reabably:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"w\">    </span><span class=\"nv\">isLower</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nf\">&gt;=</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"nv\">a'</span><span class=\"w\"> </span><span class=\"nf\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nf\">&lt;=</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"nv\">z'</span>\n</code></pre></div>",
        "id": 464745682,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724447598
    },
    {
        "content": "<p>I don't think that's in the tutorial yet, it should probably get added</p>",
        "id": 464745715,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724447620
    },
    {
        "content": "<p>Cool, thanks Sam</p>",
        "id": 464750396,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724450106
    },
    {
        "content": "<p>I'm working on the <code>reverse-string</code> exercise. If it's an ASCII string, then I can just convert to a UTF8 List and reverse it, but I'd like the code to handle any Unicode strings, so I'm using roc-lang/unicode.<br>\nI'm using <code>Grapheme.split</code>, reversing the list, then using <code>Str.joinWith \"\"</code>. Does this seem like the appropriate approach to you?<br>\nSide-note: there's a bug with <code>Grapheme.split</code>: it fails on empty strings (I filed <a href=\"https://github.com/roc-lang/unicode/issues/15\">issue #15</a>).</p>",
        "id": 464928895,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724556563
    },
    {
        "content": "<p>Oh boy...this is where I have to remember my Unicode...I think reversing graphemes is incorrect. Cause sometimes multiple graphemes merge together to create a single printed character</p>",
        "id": 464929359,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724556771
    },
    {
        "content": "<p>Grapheme clusters...yay</p>",
        "id": 464929364,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724556780
    },
    {
        "content": "<p>I thought a grapheme was a single printed character, and multiple codepoints (aka unicode scalars) can combine to form one grapheme?</p>",
        "id": 464929450,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724556858
    },
    {
        "content": "<p>Personally, I would limit to ASCII for the simplicity of the exercise and teaching</p>",
        "id": 464929455,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724556877
    },
    {
        "content": "<p>Ah ok, it would definitely make my life simpler. You're probably right. I think Exercism lets you offer multiple solutions, so perhaps I could have a simple ASCII one and a more complex Unicode one?</p>",
        "id": 464929501,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724556951
    },
    {
        "content": "<p>Also, for our Unicode library, I'm not sure if a grapheme is the same as an extended grapheme clusters as defined here: <a href=\"https://www.unicode.org/reports/tr29/\">https://www.unicode.org/reports/tr29/</a></p>\n<p>If it is then reversing it would be reasonable.</p>",
        "id": 464930171,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724557156
    },
    {
        "content": "<p>But I think graphemes can merge to form a grapheme clusters. And a grapheme clusters is the closest thing to a printable unit (which is roughly what humans think of as a character)</p>",
        "id": 464930314,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724557300
    },
    {
        "content": "<p>Ah ok, I thought graphemes and grapheme clusters were the same thing. My understanding was:<br>\n101 = code point for the letter e<br>\ne = a grapheme, composed of a single codepoint 101<br>\né = a grapheme, which can be represented either by a single code point 233, or by a couple 101 (e) + 769 ( ́ )</p>",
        "id": 464930422,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724557396
    },
    {
        "content": "<p>Perhaps the term \"grapheme cluster\" specifically refers to the graphemes that are actually composed of two or more codepoints. I'll look into this.</p>",
        "id": 464930488,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724557470
    },
    {
        "content": "<p>\"A grapheme cluster represents a horizontally segmentable unit of text, consisting of some grapheme base (which may consist of a Korean syllable) together with any number of nonspacing marks applied to it.\"</p>",
        "id": 464930520,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724557514
    },
    {
        "content": "<p><a href=\"https://unicode.org/glossary/#grapheme_cluster\">https://unicode.org/glossary/#grapheme_cluster</a></p>",
        "id": 464930526,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724557525
    },
    {
        "content": "<p>But I don't really understand</p>",
        "id": 464930528,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724557532
    },
    {
        "content": "<p>My mental model is still not fully clear here</p>",
        "id": 464930532,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724557544
    },
    {
        "content": "<p>Thanks. I think that in my example, 'e' is a grapheme base, and 'é' is a grapheme cluster if it is represented as 101 + 769</p>",
        "id": 464930587,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724557567
    },
    {
        "content": "<p>So I guess the question is, is a grapheme the same thing as a grapheme clusters then? Just different terms that map to the same thing kinda. One being more specific of what it comes of.</p>",
        "id": 464930611,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724557629
    },
    {
        "content": "<p>That's my understanding, yes.</p>",
        "id": 464930618,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724557646
    },
    {
        "content": "<p>Ok. Then yeah, probably good.</p>",
        "id": 464930681,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724557697
    },
    {
        "content": "<p>To be precise, I'd say:</p>\n<ul>\n<li>grapheme = a character unit as perceived by humans (such as e or é)</li>\n<li>grapheme base = the simplest unit of a writing system, such as e (but not é)</li>\n<li>grapheme cluster = a grapheme base plus some extra marks added to it (such as é)</li>\n</ul>",
        "id": 464930702,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724557747
    },
    {
        "content": "<p>That makes sense.</p>",
        "id": 464930925,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724557978
    },
    {
        "content": "<p>Thanks for pointing this difference out, I thought they were synonyms. <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 464931101,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724558030
    },
    {
        "content": "<p>I guess I had initially thought of it as a Grapheme clusters was composed of graphemes and a grapheme could be a base or extra mark....but that is wrong....just naming makes it confusing.</p>",
        "id": 464931256,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724558065
    },
    {
        "content": "<p>Your description looks to be correct from what I can tell.</p>",
        "id": 464931310,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724558082
    },
    {
        "content": "<p>The docs of roc-lang/unicode seem to define <code>Grapheme</code> as \"Extended Grapheme Clusters\". What's that \"Extended\" qualifier now!? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 464931539,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724558147
    },
    {
        "content": "<p>It just distinguishes it from legacy grapheme clusters</p>",
        "id": 464931647,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724558167
    },
    {
        "content": "<p>Not that I know the underlying details of the difference</p>",
        "id": 464931694,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724558180
    },
    {
        "content": "<p>ChatGPT to the rescue! <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span> <br>\n<a href=\"/user_uploads/22008/HGHMNk6YrhAiyqC7aaGT7cg_/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/HGHMNk6YrhAiyqC7aaGT7cg_/image.png\" title=\"image.png\"><img data-original-dimensions=\"1380x666\" src=\"/user_uploads/thumbnail/22008/HGHMNk6YrhAiyqC7aaGT7cg_/image.png/840x560.webp\"></a></div>",
        "id": 464931897,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724558237
    },
    {
        "content": "<p>It looks like Extended Grapheme Clusters (EGCs) are just an extension of the concept to thinks like flags, emojis, and more.</p>",
        "id": 464932050,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724558280
    },
    {
        "content": "<p>So back to the original problem of reversing a unicode string, it looks like <code>Grapheme.split</code> is the correct way to go (if I'm going to offer a Unicode solution on top of the basic ASCII solution)</p>",
        "id": 464932383,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724558358
    },
    {
        "content": "<p>Thanks Brendan! <span aria-label=\"thank you\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"thank you\">:thank_you:</span></p>",
        "id": 464932510,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724558393
    },
    {
        "content": "<p>Yes</p>",
        "id": 464932592,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724558404
    },
    {
        "content": "<p>Also, as I am reading more of the Unicode docs, I am realizing more and more how terminology/definitions we are using (and chat gpt is using) are subtle off or wrong. Nothing that matters for this example, but lots of underly nuance and history.</p>",
        "id": 464933131,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724558528
    },
    {
        "content": "<p>A very long time ago (around 2008), a friend of mine wrote a massive <a href=\"https://www.amazon.com/Unicode-5-0-pratique-internationalisation-d%C3%A9veloppement-ebook/dp/B00TEE94FK\">Unicode book</a>, and I helped him review it. There were thousands of important details everywhere. Language turns out to be incredibly complex and varied, and Unicode is a massive beast that is really hard to tame (sorting, right-to-left, capitalisation, marks, spacing, normalisation, and so much more).</p>",
        "id": 464933873,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724558709
    },
    {
        "content": "<p>One interesting note, a lot of asian scripts like those used in Thailand and India require extended grapheme clusters to be parsed. So they aren't something special to emoji. In fact the Unicode standard actually mentions that extended grapheme clusters should really just be called grapheme clusters, but they added extended to distinguish from old versions of the standard. Also if you reverse Hindi text with grapheme clusters, I'm pretty sure it would be reversing syllables, which is kinda intriguing. To be fair if you reversed the \"characters\" it would lead to a really strange mess of likely invalid sounds being chained together.</p>\n<p>Anyway, I can stop side tangenting now.</p>",
        "id": 464934841,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724558953
    },
    {
        "content": "<p>Good to know, thanks!</p>",
        "id": 464935191,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724559043
    },
    {
        "content": "<p>I would like to contribute thoughts on this, I'm interested to know the answer. My mental model is that it's fine to just reverse because the extended frapheme cluster includes all the relevant parts. But I'd definitely need to read up on it again.</p>",
        "id": 464947252,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724565554
    },
    {
        "content": "<p>Yeah, that's the conclusion we came to</p>",
        "id": 464947431,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724565601
    },
    {
        "content": "<p>I've submitted the exercise in <a href=\"https://github.com/exercism/roc/pull/11/\">PR #11</a>, your feedback is most welcome.<br>\nNote that Exercism's test cases for this exercise do check unicode strings, so I had to use the <code>unicode</code> package. However, I included the <code>reverseAscii</code> function as well, for information.</p>",
        "id": 464947830,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724565676
    },
    {
        "content": "<p>Very roughly:</p>\n<p>Graphemes are visual units that generally would be considered \"characters\" by people. Extended grapheme clusters are just an implementation detail of how graphemes are formed and extracted from a Unicode string.</p>",
        "id": 464947919,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724565699
    },
    {
        "content": "<p>I got the full unicode test suite passing, but I am very sure there's bugs in there. I left a crash so it's easy to find them. I was going to fuzz it but got distracted. It'd be great to write a python script or something to throw a large body of unicode things at it and reduce it down to any errors. Shouldn't be too hard to resolve, but I'm pretty sure there's a few in there. Just a lot of ege cases to handle, and it's pretty mechanical.</p>",
        "id": 464948170,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724565844
    },
    {
        "content": "<p><code>Grapheme.split</code> fails on empty strings for some reason, I can't figure out why by looking at the source code, what it does on empty strings looks perfectly fine, so perhaps it's something to do with Lists with capacity 0 or something. I filed an issue in <code>unicode</code></p>",
        "id": 464948244,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724565928
    },
    {
        "content": "<p>The good news is that all the tests for this exercise pass (except for the empty string, which I had to handle separately) so the <code>unicode</code>package seems pretty healthy overall.</p>",
        "id": 464948368,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724566009
    },
    {
        "content": "<p>Haha, that error is literally <code>Grapheme.split</code> just missing the base case. It always assumes there is at least one code point to be splitting out. <code>(Next, [], [])</code> is the state machine, but it expects <code>(Next, [cp], _)</code></p>",
        "id": 464949417,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724566507
    },
    {
        "content": "<p>I think we just need to add a case something like:</p>\n<div class=\"codehilite\"><pre><span></span><code>    (Next, [], _) -&gt; acc\n</code></pre></div>",
        "id": 464949580,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724566667
    },
    {
        "content": "<p>Yeah, that seems to fix it. Just the one extra line.</p>",
        "id": 464950113,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724566877
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/unicode/pull/16\">https://github.com/roc-lang/unicode/pull/16</a></p>",
        "id": 464950298,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724566991
    },
    {
        "content": "<p>Note: someone should probably go through and remove all the backpassing to get rid of warnings</p>",
        "id": 464950358,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724567036
    },
    {
        "content": "<p>Sure, here you go: <a href=\"https://github.com/roc-lang/unicode/pull/18\">https://github.com/roc-lang/unicode/pull/18</a> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 464993853,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724584000
    },
    {
        "content": "<p>Working on the gigasecond exercise, which involves manipulating dates, datetimes, and iso formatting. Is there a recommended package for this? I found <a href=\"https://github.com/Hasnep/roc-datetimes\">https://github.com/Hasnep/roc-datetimes</a> and <a href=\"https://github.com/imclerran/Roc-IsoDate\">https://github.com/imclerran/Roc-IsoDate</a>.</p>\n<p>Any recommendations?</p>",
        "id": 465044155,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724621196
    },
    {
        "content": "<p>Ok I've used Roc-IsoDate, which had all that was needed for the exercise. <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n<p>We're up to 10 exercises now! <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 465058752,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724634475
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"734214\">@Aurélien Geron</span> new release of <a href=\"https://github.com/roc-lang/unicode/releases/tag/0.1.2\">https://github.com/roc-lang/unicode/releases/tag/0.1.2</a> for you</p>",
        "id": 465087795,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724650546
    },
    {
        "content": "<p>With that fix</p>",
        "id": 465087831,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724650555
    },
    {
        "content": "<p>Thanks Luke! <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 465087960,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724650577
    },
    {
        "content": "<p>And we're up to 20 exercises now! <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> <br>\n<a href=\"https://github.com/exercism/roc/tree/main/exercises/practice\">https://github.com/exercism/roc/tree/main/exercises/practice</a></p>",
        "id": 465279388,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724710721
    },
    {
        "content": "<p>You'll find my solutions in the <code>.meta/Example.roc</code> file in each exercise folder. I'd appreciate it if you could take a look and give me some feedback on what could be improved to make it more idiomatic. Feel free to submit PRs too. Thanks! <span aria-label=\"thank you\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"thank you\">:thank_you:</span></p>",
        "id": 465279581,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724710852
    },
    {
        "content": "<p>Awesome work <span class=\"user-mention\" data-user-id=\"734214\">@Aurélien Geron</span> ! I'm taking a look at adding the acronym exercise</p>",
        "id": 465306193,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1724725252
    },
    {
        "content": "<p>Exercism was the way I originally learned functional programming so it is very cool to have a track in progress for Roc <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 465306235,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1724725275
    },
    {
        "content": "<p>PR for Acronym: <a href=\"https://github.com/exercism/roc/pull/34/files\">https://github.com/exercism/roc/pull/34/files</a></p>",
        "id": 465312304,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1724728306
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"734214\">@Aurélien Geron</span> it would be good to update the existing tests to start declaring the result as an intermediate definition so that when there are failures they get printed out by the test runner for the user:</p>\n<div class=\"codehilite\"><pre><span></span><code>expect\n    result = abbreviate &quot;Portable Network Graphics&quot;\n    result == &quot;PNG&quot;\n</code></pre></div>",
        "id": 465313168,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1724728696
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"611722\">@Isaac Van Doren</span> , I updated all the exercises to define the result on a separate line in the expect statement, the output is much more useful, thanks for the tip!</p>",
        "id": 465552593,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724789284
    },
    {
        "content": "<p>Awesome!</p>",
        "id": 465559823,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1724791166
    },
    {
        "content": "<p><strong>Status update</strong><br>\nI've added support for Roc in:</p>\n<ul>\n<li><a href=\"https://github.com/exercism/tokei\">exercism/tokei</a> (a fork of <a href=\"https://github.com/XAMPPRocky/tokei\">tokei</a>), which counts lines of actual code, vs comments, and blank lines.</li>\n<li><a href=\"https://github.com/exercism/snippet-extractor\">exercism/snippet-extractor</a>, which extracts the first 10 lines of meaningful code. I'm skipping comments, as well as <code>module</code> and <code>import</code> statements.</li>\n<li><a href=\"https://github.com/exercism/cli\">exercism/cli</a>, which provides a unified interface across tracks, in particular to run the tests for an exercise.</li>\n</ul>\n<p>I've also implemented the <code>test.yml</code> workflow in <a href=\"https://github.com/exercism/roc\">exercism/roc</a>, to automatically test all exercises when someone submits a PR.</p>\n<p>Now I'm requesting a track logo.</p>\n<p>After that, we should be ready to go live! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>\n<p>We now have 28 exercises, thanks to <span class=\"user-mention\" data-user-id=\"611722\">@Isaac Van Doren</span> for contributing several of them! <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 465661045,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724829148
    },
    {
        "content": "<p>For the track logo, I provided a link to the official logo, but they ask to list the attribution requirements, and rights given for use of that logo. Does someone know the answer to this?</p>",
        "id": 465662165,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724829347
    },
    {
        "content": "<p>I think it was just made by <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span></p>",
        "id": 465663108,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724829517
    },
    {
        "content": "<p>It would probably be a good idea to add the logo to <a href=\"https://github.com/roc-lang/design-assets\">https://github.com/roc-lang/design-assets</a> and to add a LICENSE file to that repo. The roc-lang/roc repo uses the UPL license, but for assets like logos, it might be preferable to use something else, since you might want to avoid people just (ab)using your brand. I'm not lawyer though.</p>",
        "id": 465682703,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724832986
    },
    {
        "content": "<p>Yeah, I've brought this up before, the logo is trademarked, so I'm not sure what the license should be</p>",
        "id": 465697430,
        "sender_full_name": "Anton",
        "timestamp": 1724836053
    },
    {
        "content": "<p>The Roc track is enabled for testing!</p>\n<p>If you'd like to take a look and help me test before we launch it publicly, please let me know, I just need to know your github login and I'll ask the Exercism admins to add you to the testers.</p>\n<p><a href=\"/user_uploads/22008/JtAXMo5olbTGVhMHdtFdoxAd/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/JtAXMo5olbTGVhMHdtFdoxAd/image.png\" title=\"image.png\"><img data-original-dimensions=\"2880x1662\" src=\"/user_uploads/thumbnail/22008/JtAXMo5olbTGVhMHdtFdoxAd/image.png/840x560.webp\"></a></div>",
        "id": 465857365,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724882884
    },
    {
        "content": "<p>Happy to test, I'm smores56</p>",
        "id": 465857984,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724883258
    },
    {
        "content": "<p>I can test also! isaacvando</p>",
        "id": 465858082,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1724883314
    },
    {
        "content": "<p>Thanks Sam &amp; Isaac, much appreciated!<br>\nI'm not sure how long it will take them to add you to the testers, but once they've done so you will have access to the Roc track at: <a href=\"https://exercism.org/tracks/roc\">https://exercism.org/tracks/roc</a><br>\n(until then you'll get a 404 error)</p>",
        "id": 465858218,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724883378
    },
    {
        "content": "<p>The online editor works nicely, and the test results look good:<br>\n<a href=\"/user_uploads/22008/HyjRnW1gzLgzZNJOFgYnQXRx/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/HyjRnW1gzLgzZNJOFgYnQXRx/image.png\" title=\"image.png\"><img data-original-dimensions=\"2880x1662\" src=\"/user_uploads/thumbnail/22008/HyjRnW1gzLgzZNJOFgYnQXRx/image.png/840x560.webp\"></a></div>",
        "id": 465861272,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724885105
    },
    {
        "content": "<p>It misses syntax highlighting, however. I'll work on that. I've already added syntax highlighting for the static code (simply using Haskell syntax highlighting), but dynamic code is a different beast.</p>",
        "id": 465861401,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724885168
    },
    {
        "content": "<p>It would also be nice to have a few of the usual editor shortcuts, such as typing Ctrl / or Cmd / to toggle commenting.</p>",
        "id": 465861532,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724885259
    },
    {
        "content": "<p>And this is what a solved exercise looks like:<br>\n<a href=\"/user_uploads/22008/shuEc_6EuZ5HbouoTiFaUSph/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/shuEc_6EuZ5HbouoTiFaUSph/image.png\" title=\"image.png\"><img data-original-dimensions=\"2880x1662\" src=\"/user_uploads/thumbnail/22008/shuEc_6EuZ5HbouoTiFaUSph/image.png/840x560.webp\"></a></div>",
        "id": 465861620,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724885303
    },
    {
        "content": "<p>Happy to test: bsassoli</p>",
        "id": 465863822,
        "sender_full_name": "bernardino",
        "timestamp": 1724886568
    },
    {
        "content": "<p>Thanks @bernadino!</p>",
        "id": 465871450,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724892123
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"734214\">@Aurélien Geron</span> I'm curious if you have a perspective on how many exercises should be added to the Roc track right now. From a user's perspective, having as many as possible seems nice, but that also increases the maintenance burden when breaking changes are made in Roc. That being said, maybe the number of breaking changes will be low since none of the exercises run effects.</p>",
        "id": 465877307,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1724896686
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"611722\">@Isaac Van Doren</span> , I would just add as many as possible, as you said I don't expect that many breaking changes (except perhaps in exercises that use external libraries like <a href=\"https://github.com/roc-lang/unicode\">roc-lang/unicode</a> or <a href=\"https://github.com/roc-imclerran/isodate\">imclerran/isodate</a>.<br>\nPlus, once you've upgraded a few exercises, you get the hang of it and it becomes much faster. For example, I recently upgraded roc-lang/unicode to use <code>?</code> instead of <code>&lt;-</code> for backpassing, and that took me a while, but after that I upgraded imclerran/isodate and it was much faster.</p>",
        "id": 465899793,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724905429
    },
    {
        "content": "<p>Just to be sure, which of the following is considered more idiomatic in Roc?</p>\n<ul>\n<li><code>Err \"Input must be positive\"</code></li>\n<li><code>Err InputMustBePositive</code></li>\n<li><code>Err NonPositiveInput</code></li>\n<li><code>Err NonPositive</code></li>\n<li>something else?</li>\n</ul>\n<p>Exercism's exercise specifications is represented in JSON, and the errors are specified like this:<br>\n<code>{\"error\": \"The input must be positive\"}</code><br>\nand right now the Roc test generator convert this object to this:<br>\n<code>Err TheInputMustBePositive</code></p>\n<p>Wdyt?</p>",
        "id": 465972203,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724927881
    },
    {
        "content": "<p>Sounds good!</p>",
        "id": 465994674,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1724933057
    },
    {
        "content": "<p>Err InputMustBePositive is great</p>",
        "id": 465994746,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1724933079
    },
    {
        "content": "<p>There’s definitely a preference for using tags rather than strings for errors, but I don’t think there’s much of a convention about how the tag names are detemined</p>",
        "id": 465994875,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1724933108
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/0qoidoInVn0K25Mf8YDR2r74/Screenshot-2024-08-29-alle-16.43.54.png\">Screenshot-2024-08-29-alle-16.43.54.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/0qoidoInVn0K25Mf8YDR2r74/Screenshot-2024-08-29-alle-16.43.54.png\" title=\"Screenshot-2024-08-29-alle-16.43.54.png\"><img data-original-dimensions=\"2156x472\" src=\"/user_uploads/thumbnail/22008/0qoidoInVn0K25Mf8YDR2r74/Screenshot-2024-08-29-alle-16.43.54.png/840x560.webp\"></a></div>",
        "id": 466036119,
        "sender_full_name": "bernardino",
        "timestamp": 1724942709
    },
    {
        "content": "<p>Awesome <span class=\"user-mention\" data-user-id=\"745620\">@bernardino</span>, good job! <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 466114096,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724966287
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> , <span class=\"user-mention\" data-user-id=\"611722\">@Isaac Van Doren</span> , <span class=\"user-mention\" data-user-id=\"745620\">@bernardino</span> , I heard back from Erik at <a href=\"http://Exercism.org\">Exercism.org</a>: he said that in order to add you to the testers, you need to create an Exercism account and link it to your github account. You also need to agree to be added to the Exercism organisation on github (you will get notifications by default, but you can silence them if you want).<br>\nCould you please do that if you're still interested in testing the Roc track, and let me know your exercism login name when it's done? Thanks! <span aria-label=\"thank you\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"thank you\">:thank_you:</span></p>",
        "id": 466115709,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724967032
    },
    {
        "content": "<p>I'm still interested! My exercism handle is @smores56, and my GH account is said to be linked in my account settings on their site. I don't see an invite to their GH org...</p>",
        "id": 466117426,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724967846
    },
    {
        "content": "<p>My exercism handle is isaacvando and it is linked with GitHub also. I also don't see an invite for the GH org, but if you mean I just need to acknowledge that I agree to being added to the org before they add me, I agree to be added <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span></p>",
        "id": 466118536,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1724968414
    },
    {
        "content": "<p>Same here my account is bsassoli and is already linked with gh</p>",
        "id": 466120950,
        "sender_full_name": "bernardino",
        "timestamp": 1724969641
    },
    {
        "content": "<p>We now have beautiful syntax highlighting in the online editor! <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span><br>\n<a href=\"/user_uploads/22008/XC1wUd6mfLoAXdM54igc_N1-/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/XC1wUd6mfLoAXdM54igc_N1-/image.png\" title=\"image.png\"><img data-original-dimensions=\"2880x1626\" src=\"/user_uploads/thumbnail/22008/XC1wUd6mfLoAXdM54igc_N1-/image.png/840x560.webp\"></a></div><p>The editor is CodeMirror 6, and we just reused the Elm syntax highlighter for now, to get started, which means that a few things are not highlighted properly (see the screenshot). The main issue is the comments: Elm uses <code>--</code> instead of <code>#</code>, so comments look bad.</p>\n<p>I looked into creating a Roc plugin for CodeMirror, but it looks a bit tricky. Perhaps the simplest option would be to adapt the Elm plugin, but it was designed for CodeMirror 5, and things look quite different in CodeMirror 6. That said, Elm's plugin works, so there must be a way. Would anyone like to help with this?</p>",
        "id": 466125034,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1724972183
    },
    {
        "content": "<p>Amazing progress <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span> thank you very much <span class=\"user-mention\" data-user-id=\"734214\">@Aurélien Geron</span> and everyone else involved!</p>",
        "id": 466232070,
        "sender_full_name": "Anton",
        "timestamp": 1725014205
    },
    {
        "content": "<blockquote>\n<p>There’s definitely a preference for using tags rather than strings for errors</p>\n</blockquote>\n<p>I think we use only a tag too often in Roc. In a case like this:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">aliquotSum</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">number</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">number</span><span class=\"w\"> </span><span class=\"nf\">&lt;=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"w\">        </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">OnlyPositiveIntegersAreAllowed</span>\n<span class=\"nf\">...</span>\n</code></pre></div>\n<p>I think this is better:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">aliquotSum</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">number</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">number</span><span class=\"w\"> </span><span class=\"nf\">&lt;=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"w\">        </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">BadNumber</span><span class=\"w\"> </span><span class=\"s\">\"Argument number needs to be larger than 0, but it was $(number).\"</span>\n<span class=\"nf\">...</span>\n</code></pre></div>\n<p>Often including some context makes it a lot easier to figure out the cause. You can't include context without a Str.</p>",
        "id": 466300503,
        "sender_full_name": "Anton",
        "timestamp": 1725033603
    },
    {
        "content": "<p>Yes that’s a good point</p>",
        "id": 466301790,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1725034076
    },
    {
        "content": "<p>Not that it is too important to this discussion, but I think the most correct thing to push for is a tag with extra data and a function to convert it to a string</p>",
        "id": 466305600,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725035468
    },
    {
        "content": "<p><code>BadNumber WasNotPositive number</code></p>\n<p>Then an error to string method</p>",
        "id": 466305674,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725035496
    },
    {
        "content": "<p>Avoids perf costs of converting to string if a user doesn't need it</p>",
        "id": 466305727,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725035514
    },
    {
        "content": "<p>Is descriptive</p>",
        "id": 466305742,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725035518
    },
    {
        "content": "<p>Can create the pretty error string if needed</p>",
        "id": 466305802,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725035528
    },
    {
        "content": "<p>It's also less effort at the error creation site</p>",
        "id": 466305859,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1725035549
    },
    {
        "content": "<p>Hmm, I do like to have the full error message (in the code) right where it happened. That avoids needing to jump around between the two.</p>\n<blockquote>\n<p>Avoids perf costs of converting to string if a user doesn't need it</p>\n</blockquote>\n<p>Is perf so important in this branch? I could see you'd want to avoid it during a DDOS but on the other hand I would also like to log errors that happen on my webserver with a nice message.</p>",
        "id": 466307914,
        "sender_full_name": "Anton",
        "timestamp": 1725036336
    },
    {
        "content": "<p>I think it's a good technique in part because it makes the errors more testable</p>",
        "id": 466308481,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1725036545
    },
    {
        "content": "<p>you have a semantic record of all the relevant info about what went wrong, which isn't brittle to changes in user-facing wording! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 466308600,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1725036600
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/stream/316715-contributing/topic/exercism/near/466307914\">said</a>:</p>\n<blockquote>\n<p>Is perf so important in this branch?</p>\n</blockquote>\n<p>I think it heavily depends. If the error is just expected to bubble to the top of the program, no big deal. If the error is in utf8 conversion from list to string and is likely to be used for more decisions, it definitely matters. Also, in the utf8 case, the string error would almost certainly be the wrong error meesage for the end user.</p>",
        "id": 466309109,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725036804
    },
    {
        "content": "<p>I think for me, it is more about the mindset to avoid paper cuts all over the codebase. But I also value tags for better UX to a programmer to interact with the value</p>",
        "id": 466309256,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725036847
    },
    {
        "content": "<p>I feel like <code>BadNumber WasNotPositive number</code> is equally readable to a programmer as the full error string</p>",
        "id": 466309375,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725036896
    },
    {
        "content": "<p>I got it...best error <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span> </p>\n<div class=\"codehilite\"><pre><span></span><code>Err (BadNumber Argument Number Needs To Be Larger Than 0 But It Was number)\n</code></pre></div>\n<p>Haha</p>\n<p>Though in all reality, you could technically do this and it would be fast (not saying to actually do it):</p>\n<div class=\"codehilite\"><pre><span></span><code>Err (BadNumber &quot;Argument number needs to be larger than 0, but it was&quot; number)\n</code></pre></div>",
        "id": 466310085,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725037196
    },
    {
        "content": "<p>That first one might even compile down to U64</p>",
        "id": 466310287,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1725037251
    },
    {
        "content": "<p>I see no problems here</p>",
        "id": 466310308,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1725037262
    },
    {
        "content": "<p>How about this?</p>\n<p>For perf sensitive things:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">BadNumber</span><span class=\"w\"> </span><span class=\"nv\">number</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">nr</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"Argument number needs to be larger than 0, but it was $(nr)\"</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Otherwise:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">BadNumber</span><span class=\"w\"> </span><span class=\"nv\">number</span><span class=\"w\"> </span><span class=\"s\">\"Argument number needs to be larger than 0, but it was $(number).\"</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 466311693,
        "sender_full_name": "Anton",
        "timestamp": 1725037813
    },
    {
        "content": "<p>Seems to tick all the boxes</p>",
        "id": 466311891,
        "sender_full_name": "Anton",
        "timestamp": 1725037906
    },
    {
        "content": "<p>Not a style I would personally use, but it would be functional.</p>",
        "id": 466312025,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725037971
    },
    {
        "content": "<p>With only a small perf cost due to lambdasets not boxing</p>",
        "id": 466312085,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725038000
    },
    {
        "content": "<p>It's good at localizing the error message to the code, but passing around handlers for the code your running is oddly coupling.</p>",
        "id": 466312123,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1725038024
    },
    {
        "content": "<p>This isn't great if you have multiple different locations where the error is returned.</p>",
        "id": 466312287,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1725038095
    },
    {
        "content": "<p>How so?</p>",
        "id": 466312349,
        "sender_full_name": "Anton",
        "timestamp": 1725038123
    },
    {
        "content": "<p>If I do this for missing keys/values in a dict, for example, then <em>why</em> the missing value is an error will change with context</p>",
        "id": 466312385,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1725038141
    },
    {
        "content": "<p>Yeah, you can discard the original error message if you want and print or pass your own</p>",
        "id": 466312486,
        "sender_full_name": "Anton",
        "timestamp": 1725038178
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">ensureLoggedIn</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">user</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">isLoggedIn</span><span class=\"w\"> </span><span class=\"nv\">user</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"w\">        </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"w\">    </span><span class=\"kr\">else</span>\n<span class=\"w\">        </span><span class=\"nv\">errorCode</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"mi\">403</span>\n<span class=\"w\">        </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">NotLoggedIn</span><span class=\"w\"> </span><span class=\"nv\">errorCode</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">code</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"User was not authorized: $(Num.toStr code)\"</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 466312684,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1725038280
    },
    {
        "content": "<p>If I give that to my users, they're probably not gonna be in the practice of writing a better error message, they'll say \"good enough\"</p>",
        "id": 466312796,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1725038327
    },
    {
        "content": "<p>It's why Roc doesn't have an Option type, right? Force people to come up with a descriptive reason failure occurred</p>",
        "id": 466312872,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1725038366
    },
    {
        "content": "<p>Though sometimes it doesn't matter, I just want something I can throw ? at</p>",
        "id": 466312932,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1725038401
    },
    {
        "content": "<p>I just want to give code examples that imply that we should default to good \"code health\" practices</p>",
        "id": 466313097,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1725038444
    },
    {
        "content": "<p>Yours is good, but I think it's more effort but better to expect the user to contextualize errors</p>",
        "id": 466313188,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1725038480
    },
    {
        "content": "<blockquote>\n<p>I think it's more effort but better to expect the user to contextualize errors</p>\n</blockquote>\n<p>I don't know, people are lazy :p<br>\nI've regularly written <code>Stdout.line (Inpsect.toStr err)</code> when writing Roc code just for me and I think that could be a very common approach.</p>",
        "id": 466313930,
        "sender_full_name": "Anton",
        "timestamp": 1725038781
    },
    {
        "content": "<p>I have a suspicion that keeping the error message close to the place where the error happened could turn out important in practice. Like keeping docs close to the code they're about.</p>",
        "id": 466314650,
        "sender_full_name": "Anton",
        "timestamp": 1725039084
    },
    {
        "content": "<p>I'm down to try it! Roc makes it much easier than usual to keep the two things together</p>",
        "id": 466314790,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1725039146
    },
    {
        "content": "<p>Currently, <code>basic-cli</code>'s <code>Task {} [Exit I32]_</code> type incentivizes set-and-forget propagation, if this works out maybe we change it to <code>Task {} [Exit I32, StdoutErr Stdout.Err]</code></p>",
        "id": 466315334,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1725039391
    },
    {
        "content": "<p>Interesting, yeah incentives are important :)</p>",
        "id": 466315982,
        "sender_full_name": "Anton",
        "timestamp": 1725039657
    },
    {
        "content": "<p>I definitely prefer just using tags. They play nicely with LSP when I'm handling them later, I can just hover and see the full error. If I've wrapped it at eash level where I didn't handle it, it's easy to see the flow.</p>",
        "id": 466337219,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1725049062
    },
    {
        "content": "<p>I also lean towards long and descriptive tag names too.</p>",
        "id": 466337334,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1725049101
    },
    {
        "content": "<p>Yeah, there's not really a cost to long names, we have auto-complete</p>",
        "id": 466337364,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1725049122
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/stream/316715-contributing/topic/exercism/near/466315334\">said</a>:</p>\n<blockquote>\n<p>Currently, <code>basic-cli</code>'s <code>Task {} [Exit I32]_</code> type incentivizes set-and-forget propagation, if this works out maybe we change it to <code>Task {} [Exit I32, StdoutErr Stdout.Err]</code></p>\n</blockquote>\n<p>we actually changed to this to facilitate this workflow:</p>\n<ul>\n<li>you can start out with <code>main = ...</code> and not annotate anything and write a script, and errors will automatically <code>crash</code> and print what the error was</li>\n<li>once you're building a more robust program, all you have to do is add one line - <code>main : Task {} [Exit I32]</code> - and now all errors have to be handled</li>\n</ul>",
        "id": 466345231,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1725053254
    },
    {
        "content": "<p>and that one type annotation is something you'd normally add anyway when making a program robust</p>",
        "id": 466345251,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1725053274
    },
    {
        "content": "<p>Oh, cool!</p>",
        "id": 466345301,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1725053284
    },
    {
        "content": "<p>Is there somewhere that this behavior could be added for discoverability?</p>",
        "id": 466345363,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1725053328
    },
    {
        "content": "<p>The basic-cli README is basically just a version summary list</p>",
        "id": 466345395,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1725053344
    },
    {
        "content": "<p>I think it is really important to remember that this and most roc code today lives in the world of small scripts. Lazy errors are often what is wanted for small scripts with quick iteration cycles. I think this is correct and just printing the error tag is totally reasonable for that.</p>",
        "id": 466345621,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725053460
    },
    {
        "content": "<p>I agree</p>",
        "id": 466345658,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1725053479
    },
    {
        "content": "<p>For more robust code, I think more information tags and enabling users to contextualize is important. I think that is what many libraries will do as they get more robust.</p>",
        "id": 466345700,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725053511
    },
    {
        "content": "<p>I'm just thinking about all of the Python tools out there that started as small projects, and in growth from rising popularity, never shook off their scriptness</p>",
        "id": 466345765,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1725053532
    },
    {
        "content": "<p>I'm wondering if there's a way to prevent Roc programs from running into that by incentivizing app authors to not avoid handling errors</p>",
        "id": 466345854,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1725053586
    },
    {
        "content": "<p>Very true, but I think it is at least somewhat less likely in roc. I think there will be stronger cultural norms around error handling and propagation due to it being explicitly in the types and more common in general in functional langauges</p>",
        "id": 466345925,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725053638
    },
    {
        "content": "<p>Also, I don't think it is about the app authors. More the library authors for setting this norm</p>",
        "id": 466345989,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725053669
    },
    {
        "content": "<p>Yes, at least in Roc this is mostly an issue at the <code>main</code> function level, within the app stuff should get handled</p>",
        "id": 466346034,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1725053699
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/stream/316715-contributing/topic/exercism/near/466345363\">said</a>:</p>\n<blockquote>\n<p>Is there somewhere that this behavior could be added for discoverability?</p>\n</blockquote>\n<p>We have an roc-lang/example article on error handling. This could be discussed there. </p>\n<p>It probably needs a bit of polish as the world has changed a nit since we wrote that. </p>\n<p>Maybe we coukd make an issue and link to richards explanation as a TODO for including in the next revision of that example.</p>",
        "id": 466347270,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1725054387
    },
    {
        "content": "<p>yeah my general thinking is:</p>\n<ul>\n<li>application authors who want to write quick scripts should have a good experience and not need to bother with elaborate error handling if that's going to be a waste of time in their use case</li>\n<li>application authors who want to write production CLIs should be able to super easily opt into something that makes it easy for them to gracefully handle errors correctly</li>\n<li>library authors should always cater to people who want robustness; the \"blow up if there's an error\" thing should be the platform default rather than something libraries do</li>\n</ul>",
        "id": 466349063,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1725055462
    },
    {
        "content": "<p>Interesting discussion!<br>\nFor what it's worth, I really like <code>Err WasNotPositive number</code> because:</p>\n<ul>\n<li>It's very clear and provides 100% of the necessary info.</li>\n<li>The error handler has easy access to the number</li>\n<li>Autocomplete works</li>\n<li>If the programmer wants to provide more details here, why not add a comment?</li>\n</ul>\n<p>I'm not a big fan of passing an English string or a function to convert the error to an English string. It's too verbose to be sprinkled everywhere and it's English-only: what about other languages?</p>",
        "id": 466382788,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1725059992
    },
    {
        "content": "<p>More generally, English text seems like something you want to handle at the program boundary, much like converting a UTC date to a localized string for presentation to the user. Returning an error with an English string feels very much like returning a localized date from a library function: it should really return a UTC date and let the code at the user boundary handle the localization. If that makes sense...</p>",
        "id": 466383007,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1725060130
    },
    {
        "content": "<p>Localization is another super important note for why tags over strings</p>",
        "id": 466384155,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725061118
    },
    {
        "content": "<p>Good extra context</p>",
        "id": 466384163,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725061133
    },
    {
        "content": "<p>I'd love your feedback on the solution to the minesweeper exercise. I'm not super satisfied with it, I'd love to see what more experienced Roc developers would do. Thanks!<br>\n<a href=\"https://github.com/exercism/roc/pull/62/files#diff-6880507fc33caf686b54948260b85fae05addd72ead91541dd73ed3d86988e9a\">https://github.com/exercism/roc/pull/62/files#diff-6880507fc33caf686b54948260b85fae05addd72ead91541dd73ed3d86988e9a</a></p>",
        "id": 466477916,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1725088362
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"734214\">@Aurélien Geron</span> Just FYI I'm still getting a 404 on <a href=\"https://exercism.org/tracks/roc\">https://exercism.org/tracks/roc</a> (but Erik did add me on gh)</p>",
        "id": 466498863,
        "sender_full_name": "bernardino",
        "timestamp": 1725096248
    },
    {
        "content": "<blockquote>\n<p>For what it's worth, I really like <code>Err WasNotPositive number</code> because:</p>\n</blockquote>\n<p>I'd like to be a little more descriptive: <code>Err NumberArgWasNotPositive number</code>. I think if we don't have a Str message we should encourage a proper description of what went wrong. This should make it easier for users to work around an error if the programmer did not convert the tags into nice error messages.</p>",
        "id": 466501323,
        "sender_full_name": "Anton",
        "timestamp": 1725097791
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"734214\">Aurélien Geron</span> <a href=\"#narrow/stream/316715-contributing/topic/exercism/near/466477916\">said</a>:</p>\n<blockquote>\n<p>I'd love your feedback on the solution to the minesweeper exercise. I'm not super satisfied with it, I'd love to see what more experienced Roc developers would do. Thanks!<br>\n<a href=\"https://github.com/exercism/roc/pull/62/files#diff-6880507fc33caf686b54948260b85fae05addd72ead91541dd73ed3d86988e9a\">https://github.com/exercism/roc/pull/62/files#diff-6880507fc33caf686b54948260b85fae05addd72ead91541dd73ed3d86988e9a</a></p>\n</blockquote>\n<p>I'm no expert, but my approach was to find all the mines up front</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">sweep</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Set</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">I32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">I32</span><span class=\"p\">)</span>\n<span class=\"nv\">sweep</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">minefield</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">walkWithIndex</span><span class=\"w\"> </span><span class=\"nv\">minefield</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Set</span><span class=\"nf\">.</span><span class=\"nv\">empty</span><span class=\"w\"> </span><span class=\"p\">{})</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">mines</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">row</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">walkWithIndex</span><span class=\"w\"> </span><span class=\"nv\">row</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Set</span><span class=\"nf\">.</span><span class=\"nv\">empty</span><span class=\"w\"> </span><span class=\"p\">{})</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">rowMines</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">cell</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">cell</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">                </span><span class=\"nf\">'*'</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Set</span><span class=\"nf\">.</span><span class=\"nv\">insert</span><span class=\"w\"> </span><span class=\"nv\">rowMines</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toI32</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toI32</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">rowMines</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Set</span><span class=\"nf\">.</span><span class=\"nv\">union</span><span class=\"w\"> </span><span class=\"nv\">mines</span>\n\n<span class=\"nv\">countNeighbourMines</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Set</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">I32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">I32</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">I32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">I32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">U64</span>\n<span class=\"nv\">countNeighbourMines</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">mines</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">countIf</span>\n<span class=\"w\">        </span><span class=\"p\">[</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"w\"> </span><span class=\"nf\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">),</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"w\"> </span><span class=\"nf\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">),</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"p\">),</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">),</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">),</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">),</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"p\">),</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"w\"> </span><span class=\"nf\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"p\">]</span>\n<span class=\"w\">        </span><span class=\"nf\">\\</span><span class=\"nv\">pos</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Set</span><span class=\"nf\">.</span><span class=\"nv\">contains</span><span class=\"w\"> </span><span class=\"nv\">mines</span><span class=\"w\"> </span><span class=\"nv\">pos</span>\n\n<span class=\"nv\">annotate</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span>\n<span class=\"nv\">annotate</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">minefield</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"w\"> </span><span class=\"nv\">str</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toUtf8</span>\n<span class=\"w\">    </span><span class=\"nv\">mines</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">sweep</span><span class=\"w\"> </span><span class=\"nv\">minefield</span>\n\n<span class=\"w\">    </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">mapWithIndex</span><span class=\"w\"> </span><span class=\"nv\">minefield</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">row</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">mapWithIndex</span><span class=\"w\"> </span><span class=\"nv\">row</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">cell</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"kr\">if</span>\n<span class=\"w\">                </span><span class=\"nv\">cell</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"nf\">'*'</span>\n<span class=\"w\">            </span><span class=\"kr\">then</span>\n<span class=\"w\">                </span><span class=\"nf\">'*'</span>\n<span class=\"w\">            </span><span class=\"kr\">else</span>\n<span class=\"w\">                </span><span class=\"nv\">pos</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toI32</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toI32</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"p\">)</span>\n\n<span class=\"w\">                </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">countNeighbourMines</span><span class=\"w\"> </span><span class=\"nv\">mines</span><span class=\"w\"> </span><span class=\"nv\">pos</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">                    </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"w\"> </span><span class=\"nf\">'</span>\n<span class=\"w\">                    </span><span class=\"nv\">bombs</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">bombs</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"mi\">0</span><span class=\"nf\">'</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toU8</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">keepOks</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">fromUtf8</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">joinWith</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n</code></pre></div>",
        "id": 466512219,
        "sender_full_name": "Alex Nuttall",
        "timestamp": 1725102124
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> , there are currently 7 exercises that have test cases for errors. Here are the errors I propose to use for each of them:</p>\n<ul>\n<li>binary-search: <code>Err ValueWasNotFound</code>  -- (or just <code>Err NotFound</code> like <code>List.findFirst</code>?)</li>\n<li>collatz-conjecture: <code>Err NumberWasNotPositive</code></li>\n<li>grains: <code>Err SquareWasNotBetween1And64</code></li>\n<li>hamming: <code>Err StrandsWereNotOfEqualLength</code></li>\n<li>perfect-numbers: <code>Err NumberWasNotPositive</code></li>\n<li>space-age: <code>Err InputWasNotAPlanet</code></li>\n<li>wordy: <code>Err QuestionHadASyntaxError</code> and <code>Err QuestionHadAnUnknownOperation</code></li>\n</ul>\n<p>We could add the input arg's value as an extra payload, but I think that in this context it will just complicate things for the users. Perhaps we could add an example or two in a few exercises just to show that it's possible (e.g., for <code>QuestionHadAnUnknownOperation</code> we could add the unknown operation).</p>",
        "id": 466514556,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1725103486
    },
    {
        "content": "<p>I could also add <code>Arg</code> after the arg name in each case except <code>ValueWasNotFound</code>, for example <code>Err NumberArgWasNotFound</code> or <code>Err SquareArgWasNotBetween1And64</code>.</p>",
        "id": 466515091,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1725103954
    },
    {
        "content": "<p>So just to be clear how do you want us to test the existing exercises? Once we pass the tests how should we update ? Or is it a fallback kind of thing where we signal only when we think something is off?</p>",
        "id": 466515246,
        "sender_full_name": "bernardino",
        "timestamp": 1725104068
    },
    {
        "content": "<p>I like it with <code>Arg</code> :)</p>",
        "id": 466516924,
        "sender_full_name": "Anton",
        "timestamp": 1725105170
    },
    {
        "content": "<blockquote>\n<p>but I think that in this context it will just complicate things for the users</p>\n</blockquote>\n<p>Can you share how it will complicate things?</p>",
        "id": 466516971,
        "sender_full_name": "Anton",
        "timestamp": 1725105210
    },
    {
        "content": "<p>When the inputs &amp; expected output are short, then it's no big deal, but when it's strings (especially long or multiline strings), it will make the tests a bit hard to read. That said, the only exercises with strings and error test cases so far are hamming, space-age, and wordy, and none of them have very long strings for the error cases, so we're probably fine.</p>\n<p>But suppose that the minesweeper exercise had an error test case. Right now, here's what a test case looks like, just imagine if the errors also carried a copy of the input:</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code># large minefield\nexpect\n    minefield =\n        \"\"\"\n        ·*··*·\n        ··*···\n        ····*·\n        ···*·*\n        ·*··*·\n        ······\n        \"\"\"\n        |&gt; Str.replaceEach \"·\" \" \"\n    result = annotate minefield\n    expected =\n        \"\"\"\n        1*22*1\n        12*322\n        ·123*2\n        112*4*\n        1*22*2\n        111111\n        \"\"\"\n        |&gt; Str.replaceEach \"·\" \" \"\n    result == expected\n</code></pre></div>",
        "id": 466517685,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1725105674
    },
    {
        "content": "<p>Oh actually it wouldn't be much different... so you're right! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 466518095,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1725105780
    },
    {
        "content": "<p>At what point in the exercism tracks are the examples shown to the user? Is it after submission?</p>",
        "id": 466589592,
        "sender_full_name": "Anton",
        "timestamp": 1725128197
    },
    {
        "content": "<p>I assumed that they were available in the \"community solutions\" section after you submit a correct solution, but I checked and it doesn't seem to be there. In fact I haven't found the example solutions anywhere on the site, so I guess they're just used to test the tests (i.e., ensure that the tests can pass). I'll double-check with the exercism team.</p>",
        "id": 466598057,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1725133115
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"745620\">bernardino</span> <a href=\"#narrow/stream/316715-contributing/topic/exercism/near/466498863\">said</a>:</p>\n<blockquote>\n<p>Hi <span class=\"user-mention silent\" data-user-id=\"734214\">Aurélien Geron</span> Just FYI I'm still getting a 404 on <a href=\"https://exercism.org/tracks/roc\">https://exercism.org/tracks/roc</a> (but Erik did add me on gh)</p>\n</blockquote>\n<p>Erik from Exercism said: \"All three are invited to the GitHub team. Once accepted, they should be able to access the track.\"<br>\nCan you please ensure you've accepted the GH invitation and try again?</p>",
        "id": 466598913,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1725133477
    },
    {
        "content": "<p>It looks to me like we all are part of the GitHub team <a href=\"https://github.com/orgs/exercism/teams/roc\">https://github.com/orgs/exercism/teams/roc</a></p>",
        "id": 466605290,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1725137316
    },
    {
        "content": "<p>I also don't see any option to further confirm anything in GitHub</p>",
        "id": 466605533,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1725137537
    },
    {
        "content": "<blockquote>\n<p>Can you please ensure you've accepted the GH invitation and try again? </p>\n</blockquote>\n<p>I am pretty sure i did</p>",
        "id": 466671934,
        "sender_full_name": "bernardino",
        "timestamp": 1725183383
    },
    {
        "content": "<p>Thanks for your feedback, I've asked Erik from Exercism (here: <a href=\"https://forum.exercism.org/t/enabling-the-roc-track-for-testing/12726/11\">https://forum.exercism.org/t/enabling-the-roc-track-for-testing/12726/11</a>)</p>",
        "id": 466676077,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1725184991
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"745620\">@bernardino</span> , <span class=\"user-mention\" data-user-id=\"611722\">@Isaac Van Doren</span> , <span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> , <span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> : could you please review the <a href=\"https://github.com/exercism/roc/pulls\">pending exercism/roc PRs</a> when you have a minute? There are 3 new exercises, and 1 PR to make the error handling more idiomatic: as discussed above, the errors now look like <code>Err (NumberArgWasNotPositive -123)</code> rather than <code>Err OnlyPositiveIntegersAreAllowed</code> or <code>Err \"Only positive integers are allowed\"</code>.</p>",
        "id": 466783394,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1725237892
    },
    {
        "content": "<p>Reviewed! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 466815960,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1725252525
    },
    {
        "content": "<p>Let me give a look as soon as I get  chance :)</p>",
        "id": 466976890,
        "sender_full_name": "bernardino",
        "timestamp": 1725289087
    },
    {
        "content": "<p>Hi everyone,<br>\nEarlier in this thread, we had a discussion about errors. @Anton advocated for errors like <code>Err (NumberArgWasNotPositive -123)</code>:</p>\n<ul>\n<li>Clear tag + data that may be needed for error handling, e.g., the invalid argument's value.</li>\n<li>No English text = easier to internationalize, more machine readable</li>\n</ul>\n<p>I really like that so I implemented it for all exercises in <a href=\"https://github.com/exercism/roc/pull/64\">PR #64</a>.</p>\n<p>However, <span class=\"user-mention\" data-user-id=\"611722\">@Isaac Van Doren</span> argues (in this PR's comments) that a different approach to error handling by the user's solution should not count as the solution being incorrect.</p>\n<p>I agree that some proportion of users will be frustrated by the fact that their solution fails because their error is named <code>Err InvalidNumber</code> and the expected error is <code>Err (NumberArgWasNotPositive -123)</code>.</p>\n<p>I personally love Roc's error management, IMO it's one of the great features of the language. I think it's great to show it off, and encourage users to return descriptive errors with all the payload an error handler may need.</p>\n<p>But I'd like to know what others think! Here's a little poll:</p>",
        "id": 467052231,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1725312672
    },
    {
        "content": "<p>/poll What should we test for in case of errors?<br>\nMinimal: <code>expect result |&gt; Result.isErr</code><br>\nDetailed: <code>expect result == Err NumberArgWasNotPositive -123</code><br>\nSomething else (please comment below)</p>",
        "id": 467052572,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1725312852
    },
    {
        "content": "<p>I also noticed that some test cases can be removed using better type annotations. For example, there's no need to test whether a number is negative if it's <code>U64</code>. I'm submitting a PR now to add annotations to all exercises.</p>",
        "id": 467052721,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1725312961
    },
    {
        "content": "<p>Note that in solution 1 (minimal) the users will start with annotations like this:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">answer</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"kt\">I64</span><span class=\"w\"> </span><span class=\"nv\">_</span>\n<span class=\"nv\">answer</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">question</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">crash</span><span class=\"w\"> </span><span class=\"s\">\"Please implement the 'answer' function\"</span>\n</code></pre></div>\n<p>while in solution 2 (detailed) they will start with this:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">answer</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"kt\">I64</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">UnknownOperation</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">SyntaxError</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">]</span>\n<span class=\"nv\">answer</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">question</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">crash</span><span class=\"w\"> </span><span class=\"s\">\"Please implement the 'answer' function\"</span>\n</code></pre></div>",
        "id": 467053493,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1725313346
    },
    {
        "content": "<p>I like the more descriptive errors, but I feel like it may be too much for some people depending on what stage their at. So my vote is keeping the expectations easier, but in the answer we show the gold standard.</p>",
        "id": 467053979,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1725313573
    },
    {
        "content": "<p>That makes sense. Perhaps our approach could change depending on the exercise difficulty: for easy exercises, be lenient, but for medium or hard exercises, be demanding. Wdyt?<br>\nI added an option in the poll for this mixed approach.</p>",
        "id": 467054125,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1725313665
    },
    {
        "content": "<p>Please review <a href=\"https://github.com/exercism/roc/pull/65\">PR #65</a> which adds annotations to all exercises.</p>",
        "id": 467055792,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1725314535
    },
    {
        "content": "<p>Yeah, I think we shouldn't push any specific error handling on the user even for harder exercise</p>\n<p>This has one core caveat. If the interface needs to distinguish specific types of errors to be usable, we need to enforce the error union types</p>",
        "id": 467060110,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725316900
    },
    {
        "content": "<p>I think error handling is pretty subjective. For example, I don't think I would ever write a <code>NumberArgWasNotPositiveError</code> tag. It is way too verbose in my opinion.</p>",
        "id": 467060361,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725317033
    },
    {
        "content": "<p>I think it would be bad style to enforce that exact error</p>",
        "id": 467060416,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725317049
    },
    {
        "content": "<p>On the other hand, for something with actionable errors that the caller is expected to respond to. Like on Dict.get. error specification may be required.</p>",
        "id": 467060503,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725317102
    },
    {
        "content": "<p>That said, as long as you can be explicit in the problem definition about the exact errors the user is required to return, it isn't terrible either.</p>",
        "id": 467060714,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725317199
    },
    {
        "content": "<p>The poll looks like a tie, but there seem to be stronger feelings against the detailed approach than against the minimal approach, so unless the poll changes over the next few hours,  I'll update the PRs to go for the minimal approach. Vox populi, vox dei! <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 467081607,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1725327009
    },
    {
        "content": "<blockquote>\n<p>In fact I haven't found the example solutions anywhere on the site, so I guess they're just used to test the tests (i.e., ensure that the tests can pass). I'll double-check with the exercism team</p>\n</blockquote>\n<p>Did they get back to you about this <span class=\"user-mention\" data-user-id=\"734214\">@Aurélien Geron</span>?</p>",
        "id": 467177410,
        "sender_full_name": "Anton",
        "timestamp": 1725353634
    },
    {
        "content": "<blockquote>\n<p>I don't think I would ever write a <code>NumberArgWasNotPositiveError</code> tag. It is way too verbose in my opinion.</p>\n</blockquote>\n<p>My main justification for this verbosity is that there is a significant chance that users of Roc software (in general) would only get a tag as error info. Because the author did not want to spend time on nice error messages, so they just did <code>Stderr.line (Inspect.toStr err)</code>.</p>",
        "id": 467178598,
        "sender_full_name": "Anton",
        "timestamp": 1725353919
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"611722\">@Isaac Van Doren</span> , <span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> , <span class=\"user-mention\" data-user-id=\"745620\">@bernardino</span> , <span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> : good news, Erik just fixed the issue that was preventing you from testing the Roc track, you should now be able to visit <a href=\"https://exercism.org/tracks/roc\">https://exercism.org/tracks/roc</a> without getting a 404.</p>",
        "id": 467213601,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1725361406
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/stream/316715-contributing/topic/exercism/near/467177410\">said</a>:</p>\n<blockquote>\n<p>Did they get back to you about this <span class=\"user-mention silent\" data-user-id=\"734214\">Aurélien Geron</span>?</p>\n</blockquote>\n<p>Errrr... I had forgotten to ask, I just did, sorry about that.</p>",
        "id": 467213809,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1725361463
    },
    {
        "content": "<p>No problem</p>",
        "id": 467216391,
        "sender_full_name": "Anton",
        "timestamp": 1725362175
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"734214\">Aur&eacute;lien Geron</span> <a href=\"#narrow/stream/316715-contributing/topic/exercism/near/467213601\">ha scritto</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"611722\">Isaac Van Doren</span> , <span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> , <span class=\"user-mention silent\" data-user-id=\"745620\">bernardino</span> , <span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> : good news, Erik just fixed the issue that was preventing you from testing the Roc track, you should now be able to visit <a href=\"https://exercism.org/tracks/roc\">https://exercism.org/tracks/roc</a> without getting a 404.</p>\n</blockquote>\n<p>Yup! Working! Thanks <span class=\"user-mention\" data-user-id=\"734214\">@Aur&eacute;lien Geron</span> <br>\n<a href=\"/user_uploads/22008/tZQU7-33ORXdVSv3TCjm6i4Y/Screenshot-2024-09-03-alle-13.21.53.png\">Screenshot-2024-09-03-alle-13.21.53.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/tZQU7-33ORXdVSv3TCjm6i4Y/Screenshot-2024-09-03-alle-13.21.53.png\" title=\"Screenshot-2024-09-03-alle-13.21.53.png\"><img data-original-dimensions=\"2200x1530\" src=\"/user_uploads/thumbnail/22008/tZQU7-33ORXdVSv3TCjm6i4Y/Screenshot-2024-09-03-alle-13.21.53.png/840x560.webp\"></a></div>",
        "id": 467218551,
        "sender_full_name": "bernardino",
        "timestamp": 1725362702
    },
    {
        "content": "<p>I’m in! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 467259600,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1725370928
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/stream/316715-contributing/topic/exercism/near/467178598\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>I don't think I would ever write a <code>NumberArgWasNotPositiveError</code> tag. It is way too verbose in my opinion.</p>\n</blockquote>\n<p>My main justification for this verbosity is that there is a significant chance that users of Roc software (in general) would only get a tag as error info. Because the author did not want to spend time on nice error messages, so they just did <code>Stderr.line (Inspect.toStr err)</code>.</p>\n</blockquote>\n<p>I think that is more a byproduct of the fact that roc is mostly used for small apps and quick scripting today. As roc apps grow this will become less and less common. I think we can in general agree that <code>Stderr.line (Inspect.toStr err)</code> is bad design for any program that wants to be robust and user friendly. I think as apps grow in general, no matter how specific the error for a single function, it will be too small in scope to be the right level of information to expose to the end user. As such, I don't prefer making it verbose. I think less verbose hopefully pushes people in the right direction of needing to add context and color for their specific app.</p>\n<hr>\n<p>These are all super short examples/challenge problems. I'm not sure what we are optimizing for, but I think either is more or less equivalent as long as there are solid doc comments for the user to go off of.</p>",
        "id": 467300556,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725379271
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> , Erik just confirmed that the <code>.meta/Example.roc</code> files are only used to ensure the test cases work well, they don't appear anywhere on the website.</p>",
        "id": 467349612,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1725393619
    },
    {
        "content": "<p>Not necessarily a big app yet, but in my webserver I've been finding have multiple layers or nesting can be really helpful. Like I've wrapped it with a tag each time. I can quickly narrow down what was happening that caused the error.</p>",
        "id": 467349831,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1725393670
    },
    {
        "content": "<p>Interesting. Are you saying that you wrap errors inside errors? For example, suppose an <code>Err (A 123)</code> is handled by some function, it could return <code>Err (B (Err (A 123), 456))</code>? And the next error handler might return <code>Err (C (Err (B (Err (A 123), 456)), 789))</code>?</p>",
        "id": 467354092,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1725395376
    },
    {
        "content": "<p>Just on my phone rn, but I can grab an example later.</p>",
        "id": 467354440,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1725395505
    },
    {
        "content": "<p>Ok, here is an example from <a href=\"https://github.com/lukewilliamboswell/roc-htmx-tailwindcss-demo\">https://github.com/lukewilliamboswell/roc-htmx-tailwindcss-demo</a></p>\n<p>If I delete the SQL db so it doesn't exist and then startup the server and hit an endpoint. The server responds with a http 500, and prints the following to Stderr.</p>\n<div class=\"codehilite\"><pre><span></span><code>2024-09-03T23:13:00Z Get /\n500 Server Error (SqlErrGettingSession (SQLError ERROR &quot;no such table: sessions&quot;))\n</code></pre></div>",
        "id": 467374414,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1725405274
    },
    {
        "content": "<p>Love it! Nested errors FTW!</p>",
        "id": 467375617,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1725405940
    },
    {
        "content": "<p>Yeah, they can be great for layering on more context. Though have to be careful not to nest too deep</p>",
        "id": 467375703,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725405993
    },
    {
        "content": "<p>Also, SQLError is a slightly special cause cause it depends on the sqlite c++ to get the actual message.</p>",
        "id": 467375811,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725406066
    },
    {
        "content": "<p>Would be nice if it could have a tag union in the inner most case, but we don't have proper wrapping currently. So just the c++ generated string.</p>",
        "id": 467375902,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725406102
    },
    {
        "content": "<p>I don't have a good example, but sometimes I'll add a new feature and forget to handle an error or something and it bubbles all the way up to main. It's super convenient to see the chain. </p>\n<p>In fact I find I'll sometimes run the app just to see the error and remind myself what the next thing I need to implement is. I'll often just leave a <code>Task.err TODO</code> and it's pretty obvious when that happens.</p>",
        "id": 467375987,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1725406154
    },
    {
        "content": "<p>I did some testing of the track and it is working very smoothly! I submitted exercises via the CLI and online editor. I also requested mentoring for one of the exercises to test that flow out. <span class=\"user-mention\" data-user-id=\"734214\">@Aurélien Geron</span> Do you know what we need to set up to do mentoring?</p>",
        "id": 467381829,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1725409810
    },
    {
        "content": "<p>Oh great, I hadn't thought of trying out mentoring. I'll give it a shot and get more info from the Exercism team if needed.</p>",
        "id": 467396693,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1725418057
    },
    {
        "content": "<p>It looks like you need to sign up for mentoring: <a href=\"https://exercism.org/mentoring\">https://exercism.org/mentoring</a><br>\nI'll try that now</p>",
        "id": 467396985,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1725418139
    },
    {
        "content": "<p>Oh... Roc's not there yet, that's what you meant!</p>",
        "id": 467397054,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1725418161
    },
    {
        "content": "<p>I actually hadn't looked at the mentoring page yet, I just tried requesting mentoring on an exercise. Looks like I'm already signed up to be a mentor. Maybe we can't test that part until the track goes live</p>",
        "id": 467397563,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1725418337
    },
    {
        "content": "<p>BNAndras from Exercism answered this <a href=\"http://forum.exercism.org/t/enabling-the-roc-track-for-testing/12726/32\">here</a>:</p>\n<blockquote>\n<p>Until the track goes live, you can’t sign up as a mentor for the public queue since there isn’t one really. I’d try making direct mentoring request links and sending them to one another. Those are automatically generated under the code review tab of the exercise’s page (<a href=\"https://exercism.org/tracks/roc/exercises/leap/mentor_discussions\">Exercism</a> as an example of where to look). The URLs look like <code>https://exercism.org/mentoring/external_requests/&lt;long_uuid&gt;</code>. You send the link, the other party opens it, and they can accept your request. That starts a mentoring session with you and from there on, it’s no different from the usual mentoring workflow.</p>\n</blockquote>",
        "id": 467404319,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1725421459
    },
    {
        "content": "<p>So here's a <a href=\"https://exercism.org/mentoring/external_requests/2354e2c7734b4370abd41d4cec28a352\">mentoring request</a> from me for the collatz-conjecture exercise. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 467404398,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1725421536
    },
    {
        "content": "<p>We've reached 40 exercises! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 467467587,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1725440721
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/xKHfpKKyAp1EuCog_TMjKqHn/roc.svg\">roc.svg</a><br>\n<a href=\"/user_uploads/22008/M0n1qxuWAij7kNkV0AN6wg6v/image.png\">image.png</a><br>\nAnd we now have a Roc track icon. That's the last item on the To-Do list before launch, so I think we're very close!</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/M0n1qxuWAij7kNkV0AN6wg6v/image.png\" title=\"image.png\"><img data-original-dimensions=\"182x208\" src=\"/user_uploads/thumbnail/22008/M0n1qxuWAij7kNkV0AN6wg6v/image.png/840x560.webp\"></a></div>",
        "id": 467646591,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1725479420
    },
    {
        "content": "<p>Just tried out that mentoring link and it worked well!</p>",
        "id": 467704877,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1725504756
    },
    {
        "content": "<p>Yes, thanks, I saw your feedback, it's great! I updated my solution, and commented back, could you please take a look?</p>",
        "id": 467740133,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1725520152
    },
    {
        "content": "<p>It seems to me that everything is running smoothly, if you all agree, I think I'll ask Erik whether we can launch the track now. Unless perhaps we want to prepare a little bit of publicity around this? E.g., prepare a post for social media, ensure that <a href=\"http://roc-lang.org\">roc-lang.org</a> points to <a href=\"http://exercism.org\">exercism.org</a>, etc.</p>",
        "id": 467740165,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1725520164
    },
    {
        "content": "<p>Yep, I just replied to your comment. Exercism is such a nice platform <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 467836230,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1725538173
    },
    {
        "content": "<p>The track seems ready to launch to me! It would be good to have some publicity around it. Perhaps a tweet from the roc lang twitter account? Maybe someone should write a blog post?</p>",
        "id": 467837121,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1725538409
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span></p>",
        "id": 468068326,
        "sender_full_name": "Anton",
        "timestamp": 1725599439
    },
    {
        "content": "<p>sure! any ideas for what I should post? (I haven't used exercism so I'm not sure what would be best to share!)</p>",
        "id": 468073434,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1725601276
    },
    {
        "content": "<p>We could make an appeal for those who like learning by doing</p>",
        "id": 468076916,
        "sender_full_name": "Anton",
        "timestamp": 1725602369
    },
    {
        "content": "<p>anyone want to write up a draft?</p>",
        "id": 468077995,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1725602703
    },
    {
        "content": "<p>Do we want to do a tweet or a blog post or both?</p>",
        "id": 468078307,
        "sender_full_name": "Anton",
        "timestamp": 1725602799
    },
    {
        "content": "<p>if anyone wants to write a blog post I'd be happy to share it!</p>",
        "id": 468078666,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1725602902
    },
    {
        "content": "<p>I was thinking I might upload a short YouTube video. However I'm not sure I'll have time until the end of next week.<br>\nSynchronizing our posts will have much more impact, but I don't want to hold you up. WDYT?</p>",
        "id": 468080105,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1725603305
    },
    {
        "content": "<p>I think it's helpful to wait and take our time. There's no rush, and it gives us time to resolve any issues that may pop up.</p>",
        "id": 468085420,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1725604823
    },
    {
        "content": "<p>I think we could launch the track though. Like a soft launch I guess.</p>",
        "id": 468085618,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1725604873
    },
    {
        "content": "<p>I can write a blog post!</p>",
        "id": 468161745,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1725623019
    },
    {
        "content": "<p>I also like the idea of soft launching the track now and then coordinating posts next week</p>",
        "id": 468162058,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1725623087
    },
    {
        "content": "<p>Sounds good. I confirmed with Erik, it's just a matter of flipping a switch in the config.json. I'll submit a PR now.</p>",
        "id": 468165880,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1725623752
    },
    {
        "content": "<p><a href=\"https://github.com/exercism/roc/pull/77\">https://github.com/exercism/roc/pull/77</a></p>",
        "id": 468167239,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1725623922
    },
    {
        "content": "<p>Approved!</p>",
        "id": 468167670,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1725623999
    },
    {
        "content": "<p>It's live! Woohoo!</p>",
        "id": 468167942,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1725624035
    },
    {
        "content": "<p>Everyone should be able to see the track now: <a href=\"https://exercism.org/tracks/roc\">https://exercism.org/tracks/roc</a></p>",
        "id": 468168029,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1725624052
    },
    {
        "content": "<p>Awesome! <span aria-label=\"star struck\" class=\"emoji emoji-1f929\" role=\"img\" title=\"star struck\">:star_struck:</span></p>",
        "id": 468169161,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1725624247
    },
    {
        "content": "<p>Looks great :) <img alt=\":roc:\" class=\"emoji\" src=\"https://avatars.zulip.com/22008/emoji/images/5f42d943.png\" title=\"roc\"></p>",
        "id": 468178025,
        "sender_full_name": "Anton",
        "timestamp": 1725626184
    },
    {
        "content": "<p>Not fully relevant but felt worth sharing: <a href=\"https://exercism.org/blog/september-2024-restructure\">https://exercism.org/blog/september-2024-restructure</a></p>\n<p>Looks like exercism is hitting tough times financially.</p>",
        "id": 468257830,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725646446
    },
    {
        "content": "<p>Yeah I saw that yesterday, it is very sad. It seems like they’ve had financial difficulties for the past two years or so</p>",
        "id": 468258024,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1725646521
    },
    {
        "content": "<p>Which is a good reminder to donate if you like the platform and are able!</p>",
        "id": 468258695,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1725646751
    },
    {
        "content": "<p>Using the unit tests make me wonder: are there any plans to add titles/descriptions to expects? Are there any plans to provide a way to run single tests without commenting out code?</p>",
        "id": 468894593,
        "sender_full_name": "Alex Nuttall",
        "timestamp": 1725908796
    },
    {
        "content": "<p>I don't think there is anything concrete currently around that</p>",
        "id": 468895589,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725909098
    },
    {
        "content": "<p>I know that expects print the comment before them</p>",
        "id": 468895801,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725909162
    },
    {
        "content": "<p>That kinda works for at least identifying the tests better</p>",
        "id": 468895912,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725909200
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"680716\">Alex Nuttall</span> <a href=\"#narrow/stream/316715-contributing/topic/exercism/near/468894593\">said</a>:</p>\n<blockquote>\n<p>any plans to add titles/descriptions to expects? Are there any plans to provide a way to run single tests without commenting out code?</p>\n</blockquote>\n<p>for the titles/descriptions, just an optional comment right before the test that shows up in the test failure.</p>",
        "id": 468908034,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1725913079
    },
    {
        "content": "<p>for the run single test, we haven't really talked about it but I think we should do that. maybe <code>expect.only</code> or something like that?</p>",
        "id": 468908477,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1725913224
    },
    {
        "content": "<p><code>expect.only</code> would be for a test that runs once for a suite, I presume? I think that the want to \"run single tests without commenting out code\" implies they want to filter on the name of the test, like <code>cargo test foo</code></p>",
        "id": 468908819,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1725913331
    },
    {
        "content": "<p>Which we could enable by allowing substring matching on the comments above tests</p>",
        "id": 468908884,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1725913359
    },
    {
        "content": "<p>so I like being able to say in the actual code \"only run these tests\" and/or \"skip these tests\" and then have the test runner say \"test run incomplete\" when they're all passing, and then list the ones that were skipped and exit with a nonzero exit code</p>",
        "id": 468918806,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1725916833
    },
    {
        "content": "<p>that way you get whatever level of control you want, but also you can't accidentally check in a bunch of skips because it'll fail the build</p>",
        "id": 468919035,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1725916913
    },
    {
        "content": "<p>Okay, sure. You usually want to run:</p>\n<ol>\n<li>one or two tests, which something like <code>expect.only</code> would allow in the way you're describing</li>\n<li>a specific module, which can already be done with <code>roc test path/to/Module.roc</code></li>\n<li>all tests, which can already be done with <code>roc test main.roc</code></li>\n</ol>\n<p>So I think adding what you're describing would be a good addition. Maybe only allowed for top-level expects?</p>",
        "id": 468919858,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1725917218
    },
    {
        "content": "<p>I think separately it is really useful to be able to select/skip tests via the cli. Can really speed up the development loop to minimize the tests that run.</p>",
        "id": 468919864,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725917222
    },
    {
        "content": "<p>As much as doing the testing via a CLI is fast, I think doing it in the editor is almost as fast nowadays</p>",
        "id": 468920001,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1725917265
    },
    {
        "content": "<p>But yes, doing it via file editing is more money out of the weirdness budget</p>",
        "id": 468920136,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1725917302
    },
    {
        "content": "<p>oh I think both are separately reasonable</p>",
        "id": 468920239,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1725917342
    },
    {
        "content": "<p>Comments as descriptions works well enough, but I feel it's almost like introducing a decorator when (optional) descriptions should just be first class citizens in the test framework</p>\n<p>At work I use Jest so <code>.only</code> and <code>xtest(...</code> are second nature to me. Substring matching is good, but presumably wouldn't work well for tests without descriptions, and there is a bit of mental overhead in selecting and typing the right substring</p>",
        "id": 468923490,
        "sender_full_name": "Alex Nuttall",
        "timestamp": 1725918541
    },
    {
        "content": "<p>It seems like a string argument a la Zig would be what you're looking for, then?</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">expect</span><span class=\"w\"> </span><span class=\"s\">\"two plus two equals four\"</span>\n<span class=\"w\">    </span><span class=\"nv\">sum</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n\n<span class=\"w\">    </span><span class=\"nv\">sum</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"mi\">4</span>\n</code></pre></div>\n<p>It doesn't seem distracting or out of place to me. Not sure if we should require it, but requiring it would incentivize giving nominal context to tests.</p>",
        "id": 468924278,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1725918848
    },
    {
        "content": "<p>I feel like I remember richard commenting that he didn't like require names cause often times names are redundant with test content and just extra noise.</p>",
        "id": 468926217,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725919573
    },
    {
        "content": "<p>Since Roc loves tags, why not use optional expect tags instead of strings?</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>expect [Math, Integers]\n        sum = 2 + 2\n        sum == 4\n</code></pre></div>\n<p>then:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>roc<span class=\"w\"> </span><span class=\"nb\">test</span><span class=\"w\"> </span>--only<span class=\"w\"> </span>Math\n</code></pre></div>",
        "id": 468932906,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1725922474
    },
    {
        "content": "<p>And we could probably easily add a <code>roc test --list-features</code> that would let users discover what to add features for</p>",
        "id": 468933129,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1725922557
    },
    {
        "content": "<p>There are also no spaces in tag names, which makes them a bit more cleanly searchable from a CLI perspective</p>",
        "id": 468933340,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1725922620
    },
    {
        "content": "<p>I've submitted <a href=\"https://github.com/exercism/roc/pulls\">PRs for 4 new exercises</a>: if someone can review them , we'll reach 50 exercises on <a href=\"http://exercism.org\">exercism.org</a>! <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 469498627,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1726085012
    },
    {
        "content": "<p>General problem design question: Do we have the ability to choose the input type for a roc exercise on exercism. As a direct example: <a href=\"https://exercism.org/tracks/roc/exercises/resistor-color\">https://exercism.org/tracks/roc/exercises/resistor-color</a></p>\n<p>It has a Str as a input. In roc, I think a Tag would be the most reasonable input for that problem. It would be the best practice suggestion.</p>",
        "id": 469532210,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726104817
    },
    {
        "content": "<p>Yep we can! You can use any type as long as you can transform the json that describes the test cases into the correct type in the tests. I agree that that exercise should use tags</p>",
        "id": 469536228,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1726107294
    },
    {
        "content": "<p>Well... I think tags don't currently have encoding support</p>",
        "id": 469542087,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1726110561
    },
    {
        "content": "<p>We use jinja templates to generate the tests so that doesn’t matter here</p>",
        "id": 469542736,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1726110989
    },
    {
        "content": "<p>Okay great</p>",
        "id": 469542753,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1726110999
    },
    {
        "content": "<p>Yes, in retrospect I should have used tags, good catch. I'm still quite new to Roc, so I hope I didn't make too many mistakes like this one.</p>",
        "id": 469864546,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1726208945
    },
    {
        "content": "<p>One or two exercises using strings isn't that bad I feel like. It teaches people to parse. But the function should have to return a <code>Result</code> in this case</p>",
        "id": 469907490,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1726219100
    },
    {
        "content": "<blockquote>\n<p>I'm still quite new to Roc, so I hope I didn't make too many mistakes like this one.</p>\n</blockquote>\n<p>Nothing to worry about! Plus, you pretty much willed the track into existence overnight which is fantastic <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 469953352,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1726230380
    },
    {
        "content": "<p>Hi Roc'ers!<br>\nI just submitted a draft PR for a <a href=\"https://github.com/exercism/roc/pull/92\">new exercise about error handling</a>. For this exercise, there was practically no guidance from Exercism, it's basically up to the track authors to come up with the idea, as long as it covers error handling.<br>\nCould you please take a look and tell me what you think<br>\nThanks! <span aria-label=\"thank you\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"thank you\">:thank_you:</span></p>",
        "id": 470297316,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1726388004
    },
    {
        "content": "<p>I'll check it out :)</p>",
        "id": 470339665,
        "sender_full_name": "Anton",
        "timestamp": 1726408725
    },
    {
        "content": "<p>Apparently it's currently not possible to use the try operator <code>?</code> inside an <code>expect</code> statement, it crashes the compiler. I filed issue <a href=\"https://github.com/roc-lang/roc/issues/7081\">#7081</a>. If anyone can take a look at it, I would really appreciate it, as it would make the Exercism test cases much easier to write and nicer to read. Thanks! <span aria-label=\"thank you\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"thank you\">:thank_you:</span></p>",
        "id": 471875621,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1726890740
    },
    {
        "content": "<p>For example, I'd like to write:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">expect</span>\n<span class=\"w\">    </span><span class=\"nv\">white</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">create</span><span class=\"err\">?</span><span class=\"w\"> </span><span class=\"s\">\"B4\"</span>\n<span class=\"w\">    </span><span class=\"nv\">black</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">create</span><span class=\"err\">?</span><span class=\"w\"> </span><span class=\"s\">\"F6\"</span>\n<span class=\"w\">    </span><span class=\"nv\">result</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">white</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">queenCanAttack</span><span class=\"w\"> </span><span class=\"nv\">black</span>\n<span class=\"w\">    </span><span class=\"nv\">result</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">false</span>\n</code></pre></div>\n<p>But I have to write:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">expect</span>\n<span class=\"w\">    </span><span class=\"nv\">maybeWhite</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">create</span><span class=\"w\"> </span><span class=\"s\">\"B4\"</span>\n<span class=\"w\">    </span><span class=\"nv\">maybeBlack</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">create</span><span class=\"w\"> </span><span class=\"s\">\"F6\"</span>\n<span class=\"w\">    </span><span class=\"nv\">result</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">        </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">maybeWhite</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">maybeBlack</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">white</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">black</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                </span><span class=\"nv\">white</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">queenCanAttack</span><span class=\"w\"> </span><span class=\"nv\">black</span>\n\n<span class=\"w\">            </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">crash</span><span class=\"w\"> </span><span class=\"s\">\"Unreachable: B4 and F6 are both valid squares\"</span>\n<span class=\"w\">    </span><span class=\"nv\">result</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">false</span>\n</code></pre></div>\n<p>As you can see, it makes the test case quite long and hard to read. It's unclear that the tested function is <code>queenCanAttack</code>.</p>",
        "id": 471892380,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1726900364
    },
    {
        "content": "<p>Isaac and I are pushing new exercises like there's no tomorrow! <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span> </p>\n<p><a href=\"/user_uploads/22008/5IQYmcycsthKOx82QZKXe-OI/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/5IQYmcycsthKOx82QZKXe-OI/image.png\" title=\"image.png\"><img data-original-dimensions=\"1524x532\" src=\"/user_uploads/thumbnail/22008/5IQYmcycsthKOx82QZKXe-OI/image.png/840x560.webp\"></a></div>",
        "id": 472135362,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1727071504
    },
    {
        "content": "<p>We've just overtaken Perl, haha!</p>",
        "id": 472135568,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1727071572
    },
    {
        "content": "<p>Adding exercises is definitely addictive <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 472204923,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1727091700
    },
    {
        "content": "<p>We discussed a blog post or article to launch the Exercism track. Just wondering how that plan is progressing? <span class=\"user-mention\" data-user-id=\"611722\">@Isaac Van Doren</span> I'm guessing you're having fun smashing out exercises... <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 472352868,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727133813
    },
    {
        "content": "<p>I’m about 70% done with the writing itself, but I have procrastinated it. Once I finish thwt I need to turn it into HTML. Hoping to finish it by this weekend</p>",
        "id": 472354732,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1727134617
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"734214\">@Aurélien Geron</span> are you still thinking of recording a YouTube video?</p>",
        "id": 472354782,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1727134647
    },
    {
        "content": "<p>Sadly I'm not sure I'll be able to do this right now, but perhaps in a few weeks.</p>",
        "id": 472382531,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1727146639
    },
    {
        "content": "<p>Alright, no worries either way!</p>",
        "id": 472387647,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1727148392
    },
    {
        "content": "<p>Here's my Exercism blog post <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> <br>\n<a href=\"https://isaacvando.com/roc-exercism-forth\">https://isaacvando.com/roc-exercism-forth</a></p>",
        "id": 473298707,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1727506429
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> are you still up for sharing the blog post out?</p>",
        "id": 473366743,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1727543577
    },
    {
        "content": "<p>for sure! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 473366768,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1727543603
    },
    {
        "content": "<p>I'll tweet about it today</p>",
        "id": 473366780,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1727543614
    },
    {
        "content": "<p>Sweet!</p>",
        "id": 473366794,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1727543629
    },
    {
        "content": "<p>Great post Isaac, super clear and convincing. And thanks for the kind shout-out! <span aria-label=\"folded hands\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"folded hands\">:folded_hands:</span><span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 473386838,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1727558903
    },
    {
        "content": "<p>Shared on <a href=\"https://www.reddit.com/r/roc_lang/comments/1frow3f/roc_exercism_forth/?utm_source=share&amp;utm_medium=web3x&amp;utm_name=web3xcss&amp;utm_term=1&amp;utm_content=share_button\">Reddit roc_lang</a></p>",
        "id": 473387599,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727559636
    },
    {
        "content": "<p>And also <a href=\"https://www.reddit.com/r/programming/comments/1froxh2/roc_exercism_forth/?utm_source=share&amp;utm_medium=web3x&amp;utm_name=web3xcss&amp;utm_term=1&amp;utm_content=share_button\">r/programming</a></p>",
        "id": 473387728,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727559752
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"734214\">Aurélien Geron</span> <a href=\"#narrow/stream/316715-contributing/topic/exercism/near/473386838\">said</a>:</p>\n<blockquote>\n<p>Great post Isaac, super clear and convincing. And thanks for the kind shout-out! <span aria-label=\"folded hands\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"folded hands\">:folded_hands:</span><span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>\n</blockquote>\n<p>I agree, it's a nicely written article. I like how <span class=\"user-mention\" data-user-id=\"611722\">@Isaac Van Doren</span> you have highlighted the error handling in a really concrete way. Not just thrown a bunch of terminology out there, but really walked the reader through why it's useful.</p>",
        "id": 473393331,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727565910
    },
    {
        "content": "<p>Thanks folks! Glad to hear it turned out well <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 473393655,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1727566223
    },
    {
        "content": "<p>Wow, 3.4k views already apparently from r/programming</p>",
        "id": 473393992,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727566658
    },
    {
        "content": "<p>I'm guessing that's how many times it's appeared in someone's feed and not clicks.</p>",
        "id": 473394055,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727566745
    },
    {
        "content": "<p>Yeah there have definitely not been that many page views yet haha</p>",
        "id": 473394114,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1727566816
    },
    {
        "content": "<p>Next time I’ll have to create some kind of image for the link preview so it pops more</p>",
        "id": 473394137,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1727566846
    },
    {
        "content": "<p>I could add something simple in an hour or so but Reddit probably wouldn’t regenerate the link preview either way</p>",
        "id": 473394238,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1727566977
    },
    {
        "content": "<p>I wonder if there's some kind of service or webpage that evaluates your pages SEO and gives it a score or makes recommendations like add an image etc. Maybe that might include a hint like adding an image or something. <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 473396222,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727569092
    },
    {
        "content": "<p>There probably is</p>",
        "id": 473396820,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1727569653
    },
    {
        "content": "<p>Lighthouse gave me a 100 on the page for SEO so there actually isn’t anything that can be improved <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 473396884,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1727569696
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/DJQ8-5EmdS54Hv7KQAMBiIKP/Screenshot-2024-09-28-at-8.43.06PM.png\">Screenshot 2024-09-28 at 8.43.06PM.png</a><br>\nNow with a preview <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/DJQ8-5EmdS54Hv7KQAMBiIKP/Screenshot-2024-09-28-at-8.43.06PM.png\" title=\"Screenshot 2024-09-28 at 8.43.06PM.png\"><img data-original-dimensions=\"1192x1024\" src=\"/user_uploads/thumbnail/22008/DJQ8-5EmdS54Hv7KQAMBiIKP/Screenshot-2024-09-28-at-8.43.06PM.png/840x560.webp\"></a></div>",
        "id": 473401150,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1727574213
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"611722\">Isaac Van Doren</span> <a href=\"#narrow/stream/316715-contributing/topic/exercism/near/473298707\">said</a>:</p>\n<blockquote>\n<p>Here's my Exercism blog post <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> <br>\n<a href=\"https://isaacvando.com/roc-exercism-forth\">https://isaacvando.com/roc-exercism-forth</a></p>\n</blockquote>\n<p>i came here for commenting it  that forth is not only parsing by space that simple, you might better to prepare a function named nexttoken which accept a delimitter as parameter. for eg in forth the word S\"  need to pair with \"  and between these symbols, there could be space as expected</p>",
        "id": 473406977,
        "sender_full_name": "alex smith",
        "timestamp": 1727580502
    },
    {
        "content": "<p>I think exercism is greatly simplified problems. That would definitely be important for a robust forth interpreter though.</p>",
        "id": 473407062,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1727580596
    },
    {
        "content": "<p>Right, the parser in my solution is definitely not robust at all, I just went with a naive approach that is enough to solve the exercise</p>",
        "id": 473407112,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1727580611
    },
    {
        "content": "<p>We're up to 75 exercises. There are <a href=\"https://github.com/exercism/roc/pulls\">7 more exercises waiting to be reviewed</a>, if anyone has a minute or 2. <span aria-label=\"thank you\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"thank you\">:thank_you:</span> <br>\nOne of them (<code>pov</code>) is blocked by <a href=\"https://github.com/roc-lang/roc/issues/7108\">issue 7108</a>.<br>\nAnother (<code>robot-name</code>) is blocked by a core dump in Github Actions just after downloading <code>roc-random</code>. Everything works well on my machine, I'm not sure how to debug this:</p>\n<div class=\"codehilite\"><pre><span></span><code>[...]\ndouble free or corruption (!prev)\nbin/verify-exercises: line 31:  3695 Aborted                 (core dumped) roc test &quot;${test_file}&quot;\nError: Process completed with exit code 134.\n</code></pre></div>",
        "id": 473502140,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1727652256
    },
    {
        "content": "<p>&lt;strike&gt;It's trying to run <code>roc test download-dependencies.roc</code>.&lt;/strike&gt;<br>\nOh no it's not, it's actually trying to run <code>./bin/verify-exercises robot-name</code> (which runs <code> roc test exercises/practice/robot-name/robot-name-test.roc</code> after replacing <code>RobotName.roc</code> with <code>.meta/Example.roc</code>). This works fine on my machine (both on my Macbook directly, and inside a Docker container), so I'm not sure how to debug this.</p>",
        "id": 473502285,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1727652348
    },
    {
        "content": "<p>Oh actually it works well on my Macbook directly, but it does <em>not</em> work inside the docker container (I was running the wrong test). I'm getting this error:</p>\n<div class=\"codehilite\"><pre><span></span><code>Verifying robot-name exercise...\ncorrupted double-linked list\n\n./bin/verify-exercises: line 31:    23 Aborted                 (core dumped) roc test &quot;${test_file}&quot;\n</code></pre></div>",
        "id": 473504281,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1727653325
    },
    {
        "content": "<p>New release of <a href=\"https://github.com/lukewilliamboswell/roc-random/releases/tag/0.2.2\">roc-random</a>, I upgraded the examples to basic-cli 0.15.0 and merged a PR I hadn't noticed from <span class=\"user-mention\" data-user-id=\"559412\">@Fabian Schmalzried</span> (thank you and sorry I missed it).</p>",
        "id": 473510276,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727655294
    },
    {
        "content": "<p>I did the <code>List Ops</code> exercise. I understand, why this is a good exercise for most functional languages, but I think it is not a good fit for Roc.</p>\n<p>The assignment is, to write  List functions like concat, filter, map, fold etc, but you are only allowed to use <code>List.prepend</code> from the List module.</p>\n<p>This makes sense for a language, where a List is a linked list. By writing this functions, you learn, how the List functions work under the hood.</p>\n<p>But in roc, Lists are not linked lists. They are arrays/vectors (or how ever you want to call them). When you call<code>List.prepend</code>, every element in the list has to be copied.  This is not, what the List functions do in Roc under the hood.</p>\n<p>I would propose, that the exercise is changed, that only <code>List.append</code> is allowed. The students should also be recommended to use <code>List.withCapacity</code></p>\n<p>What do you think?</p>",
        "id": 473840026,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1727726089
    },
    {
        "content": "<p>Great suggestion, IMO!</p>",
        "id": 473850248,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1727728603
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"496321\">@Oskar Hahn</span> , good point! Would you like to submit a PR to update <code>.meta/Example.roc</code> and <code>.docs/instructions.append.md</code> for the Roc-specific instructions? If you don't have time I'm happy to do it, no pb.</p>",
        "id": 473860458,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1727731166
    },
    {
        "content": "<p>I created the PR: <a href=\"https://github.com/exercism/roc/pull/128\">#128</a></p>",
        "id": 473875934,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1727735808
    },
    {
        "content": "<p>A message was moved from this topic to <a class=\"stream-topic\" data-stream-id=\"304641\" href=\"/#narrow/stream/304641-ideas/topic/Exercism.3A.20Learning.20Track\">#ideas &gt; Exercism: Learning Track</a> by <span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span>.</p>",
        "id": 473965888,
        "sender_full_name": "Notification Bot",
        "timestamp": 1727766780
    },
    {
        "content": "<p>All open PRs are now approved and or merged <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> <br>\nI also opened a <a href=\"https://github.com/exercism/roc-test-runner/pull/15\">PR</a> to bump the roc-random version in the test runner</p>",
        "id": 474162859,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1727833678
    },
    {
        "content": "<p>It looks like we've implemented a few deprecated exercises: <code>binary</code>, <code>octal</code>, <code>hexadecimal</code> and <code>accumulate</code>. The first three have been replaced by <code>all-your-base</code> and the last was replaced by <code>list-ops</code>. I've submitted <a href=\"https://github.com/exercism/roc/pull/138\">PR #138</a> to mark these exercises as deprecated: this will remove them from the UI except for people who have already done these exercises. I've also submitted <a href=\"https://github.com/exercism/roc/pull/139\">PR #139</a> to output a warning when trying to add a deprecated exercise.</p>\n<p>So the bad news is that we're losing 4 exercises, but the good news is that there are <a href=\"https://github.com/exercism/roc/pulls\">8 new exercises</a> ready to be reviewed by anyone who has a few minutes to spare! <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 475464559,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1728360969
    },
    {
        "content": "<p>Status update:<br>\n<a href=\"/user_uploads/22008/nNPwnyC3tIcBW8UOEVktc-sR/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/nNPwnyC3tIcBW8UOEVktc-sR/image.png\" title=\"image.png\"><img data-original-dimensions=\"1526x538\" src=\"/user_uploads/thumbnail/22008/nNPwnyC3tIcBW8UOEVktc-sR/image.png/840x560.webp\"></a></div>",
        "id": 476294255,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1728620131
    },
    {
        "content": "<p>I just realized there's a <a href=\"https://exercism.org/tracks/roc/build\">build page</a> with some stats: it looks like there are 125 Roc students so far.</p>",
        "id": 477769450,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1729309977
    },
    {
        "content": "<p>And we reached 100 exercises, woohoo!!! Almost as many as students, haha! <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 477775627,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1729316087
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/oJZvUj4zVu-_NFJG9NxyEOn7/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/oJZvUj4zVu-_NFJG9NxyEOn7/image.png\" title=\"image.png\"><img data-original-dimensions=\"1926x1106\" src=\"/user_uploads/thumbnail/22008/oJZvUj4zVu-_NFJG9NxyEOn7/image.png/840x560.webp\"></a></div>",
        "id": 477775633,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1729316100
    },
    {
        "content": "<p>STOP WRITING, WE'VE PEAKED</p>",
        "id": 477775641,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1729316117
    },
    {
        "content": "<p>4005 submissions, wow!</p>",
        "id": 477790116,
        "sender_full_name": "Anton",
        "timestamp": 1729329715
    },
    {
        "content": "<p>Yes, that's impressive, over 30 per user on average. I'm not sure what this counts: if you try and fail, is that a submission? If so, it's less impressive, but still nice to know people are playing with Roc</p>",
        "id": 477790761,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1729330287
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"734214\">Aurélien Geron</span> <a href=\"#narrow/stream/316715-contributing/topic/exercism/near/477790761\">said</a>:</p>\n<blockquote>\n<p>if you try and fail, is that a submission?</p>\n</blockquote>\n<p>I think that would count as a submission. I’ve submitted multiple times on some exercises, as I make iterative improvements. <br>\nBut yeah still cool!</p>",
        "id": 477791750,
        "sender_full_name": "Nathan Kramer",
        "timestamp": 1729331106
    },
    {
        "content": "<p>I've submitted <a href=\"https://github.com/exercism/roc/pull/163\">PR #163</a> to add the <code>zebra-puzzle</code> exercise. My solution works, but I'm not too happy with it, it feels really long and boring. It would be great if other people gave this exercise a shot, perhaps there's a more elegant way to solve it, that I missed. Here are the instructions:</p>\n<div class=\"codehilite\"><pre><span></span><code>Your task is to solve the Zebra Puzzle to find the answer to these two questions:\n\n- Which of the residents drinks water?\n- Who owns the zebra?\n\n## Puzzle\n\nThe following 15 statements are all known to be true:\n\n1. There are five houses.\n2. The Englishman lives in the red house.\n3. The Spaniard owns the dog.\n4. The person in the green house drinks coffee.\n5. The Ukrainian drinks tea.\n6. The green house is immediately to the right of the ivory house.\n7. The snail owner likes to go dancing.\n8. The person in the yellow house is a painter.\n9. The person in the middle house drinks milk.\n10. The Norwegian lives in the first house.\n11. The person who enjoys reading lives in the house next to the person with the fox.\n12. The painter&#39;s house is next to the house with the horse.\n13. The person who plays football drinks orange juice.\n14. The Japanese person plays chess.\n15. The Norwegian lives next to the blue house.\n\nAdditionally, each of the five houses is painted a different color, and their inhabitants are of different national extractions, own different pets, drink different beverages and engage in different hobbies.\n</code></pre></div>\n<p>To ensure your solution is correct, check that the Norwegian drinks water, and the Japanese owns a Zebra.</p>\n<p>Reading the instructions, I felt like I had to define tags for each field (<code>Drink</code>, <code>Animal</code>, <code>Color</code>, <code>Activity</code>, and <code>Nationality</code>), and I'd still love to see a solution that does this elegantly, but it made my code ugly, so I dropped the idea.</p>\n<p>Thanks for your help!</p>",
        "id": 478198524,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1729568351
    },
    {
        "content": "<p>This feels like a problem meant for prolog</p>",
        "id": 478199687,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729569036
    },
    {
        "content": "<p>I'm updating the exercism repo to use the new splitting functions now, mentioning so that someone else doesn't do it at the same time.</p>",
        "id": 485008895,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1732846368
    },
    {
        "content": "<p>I've done a LOT of exercism: Elixir, Rust, Smalltalk, Zig,  and more.  I don't know if Exercism is a great experience for a language like Roc that is still SO in flux.</p>",
        "id": 485078967,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1732879818
    },
    {
        "content": "<p>It really has not been a problem so far. It helps that the exercises are all pure so the amount they are impacted by language changes is smaller. The biggest downside I see is that public solutions may become out of date quickly. It seems like a lot of people have enjoyed using the Exercism track and it has been a great resource to point people to, so I’m glad that we have it.</p>",
        "id": 485112153,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1732891053
    }
]