[
    {
        "content": "<p>I think I need some help with <a href=\"https://github.com/roc-lang/roc/issues/5379\">Pipes ignore parenthesis wrapping an application</a></p>\n<p>I could blindly fix the exact problem outlined in the issue but the fix is not correct (I'll explain why below) and the biggest problem I'm struggling with is I don't know how to debug the compiler.</p>\n<p>All the time I encounter <a href=\"#narrow/stream/316715-contributing/topic/Build.20Issues/near/360565363\">the problem</a>, probably because the changes I make lead to infinite loops but I don't know how to check it. I also added <code>println</code> to the <code>can</code> module to log intermediate values but it logs std which is very distracting. Ah, and I use <code>repl</code> to quickly test/experiment with my assumptions.</p>\n<hr>\n<p>Now regarding the issue itself. In the case of pizza, both <a href=\"https://github.com/roc-lang/roc/blob/ec21f1982611915bfbfffb4b89eece4cdc043ebd/crates/compiler/can/src/operator.rs#LL472C31-L472C31\">desugaring for lefts</a> and <a href=\"https://github.com/roc-lang/roc/blob/ec21f1982611915bfbfffb4b89eece4cdc043ebd/crates/compiler/can/src/operator.rs#L479\">right</a> matter. Both of the following examples should be invalid (because parens produce partial application which is not allowed):</p>\n<div class=\"codehilite\"><pre><span></span><code>2 |&gt; (Num.sub 3) # removing desugar from the `right` helps in this case...\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>2 |&gt; (Num.sub 3) |&gt; Num.sub 3 # but in this case, desugar is applied to the `left`, but removing it breaks many other places\n</code></pre></div>\n<p>The idea is to match <code>loc_op</code> and desugar based on it, but it feels incorrect because it makes the pizza a special case.</p>",
        "id": 361745222,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1685277099
    },
    {
        "content": "<p>hm, this is interesting!</p>",
        "id": 361757614,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1685281159
    },
    {
        "content": "<p>an idea: what if we just didn't desugar parens? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 361757669,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1685281189
    },
    {
        "content": "<p>in other words, leave them in when we're doing the desugar pass in <code>operator.rs</code> and then <a href=\"https://github.com/roc-lang/roc/blob/7cabaecd6ec711371c24889445e9b3a00f7a528d/crates/compiler/can/src/expr.rs#L1399\">later, in <code>can::expr</code></a>, remove them at the last minute (using the same strategy we currently do during desugaring)</p>",
        "id": 361757923,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1685281277
    },
    {
        "content": "<p>that way, when we're desugaring the pizza operator, we would see the parens and not treat it as a function call because <a href=\"https://github.com/roc-lang/roc/blob/ec21f1982611915bfbfffb4b89eece4cdc043ebd/crates/compiler/can/src/operator.rs#L32\">https://github.com/roc-lang/roc/blob/ec21f1982611915bfbfffb4b89eece4cdc043ebd/crates/compiler/can/src/operator.rs#L32</a> wouldn't pass</p>",
        "id": 361758135,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1685281356
    },
    {
        "content": "<p>so it would take the <code>_ =&gt;</code> branch there and (I think) do what we want?</p>",
        "id": 361758171,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1685281376
    },
    {
        "content": "<p>With regards to debugging the compiler - when building/testing, you can use the environment variable <code>ROC_SKIP_SUBS_CACHE=1</code>, which will avoid building the std during compile time and hopefully give you better messages at runtime</p>",
        "id": 361761782,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1685282695
    },
    {
        "content": "<p>Actually I wonder, should <code>2 |&gt; (Num.sub 3)</code> be disallowed? Because there is only one way to interpret this, which is <code>Num.sub 2 3</code> (so it always breaks in to a call, you cannot claim a partial application)</p>",
        "id": 361762066,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1685282796
    },
    {
        "content": "<p>Another alternative to Richard's suggestion is to disallow parens around top-level expressions on the RHS and before LHS of a pipe. So <code>2 |&gt; (Num.sub 3)</code> is disallowed but e.g. <code> 2 |&gt; (if Bool.true then Num.add else Num.sub) 3</code> may be admitted.</p>",
        "id": 361762224,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1685282855
    },
    {
        "content": "<blockquote>\n<p>I wonder, should <code>2 |&gt; (Num.sub 3)</code> be disallowed? Because there is only one way to interpret this, which is <code>Num.sub 2 3</code> (so it always breaks in to a call, you cannot claim a partial application)</p>\n</blockquote>\n<p>I think it should be allowed, but should actually apply the function - e.g. I think this should be allowed, and should work:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">curriedSub</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">num1</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">num2</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">sub</span><span class=\"w\"> </span><span class=\"nv\">num1</span><span class=\"w\"> </span><span class=\"nv\">num2</span>\n\n<span class=\"nv\">expect</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">sub</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">curriedSub</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 361762528,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1685282975
    },
    {
        "content": "<p><code>Num.sub</code> specifically isn't a curried function, so it shouldn't be allowed for that function, right?</p>",
        "id": 361763712,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1685283375
    },
    {
        "content": "<p>As in, the error should be that <code>Num.sub</code> didn't get enough arcs if you do <code>|&gt; (Num.sub 2)</code></p>",
        "id": 361763850,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1685283429
    },
    {
        "content": "<p>I'm saying I think the code I wrote there should be valid and the <code>expect</code> should pass</p>",
        "id": 361763896,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1685283450
    },
    {
        "content": "<p>in other words, that <code>x |&gt; (foo y)</code> should be allowed because <code>foo</code> could be curried</p>",
        "id": 361763943,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1685283475
    },
    {
        "content": "<p>and if <code>foo</code> is curried, then <code>x |&gt; foo y</code> should be a type mismatch because that desugars to <code>foo x y</code>, which is the wrong number of arguments to give <code>foo</code> if it's curried (since it should only be given 1 argument!)</p>",
        "id": 361764052,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1685283504
    },
    {
        "content": "<p>I see, I misunderstood - thanks!</p>",
        "id": 361764851,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1685283807
    },
    {
        "content": "<p>What if we passed a precedence level while parsing expressions in a pipe and increased the level each time you go under a parenthesis? Then the top level <code>|&gt; Num.sub 3</code> has Apply(Num.sub, 3) at precedence-level 0, and <code>|&gt; (Num.sub 3)</code> has Apply(Num.sub, 3) at precedence-level 1. During desugaring, only expressions at the same precedence-level can be chained, or else they must be nested <code>Apply</code>s.</p>",
        "id": 361765114,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1685283917
    },
    {
        "content": "<p>hm, what would the difference be between that and the idea of deferring removing parens until after operator desugaring? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 361767878,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1685284836
    },
    {
        "content": "<p>I guess maybe not much?</p>",
        "id": 361772855,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1685286470
    },
    {
        "content": "<p>maybe just separation of concerns so we donâ€™t have to keep parents around as semantic information?</p>",
        "id": 361772950,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1685286494
    },
    {
        "content": "<p>oh they're still not kept around</p>",
        "id": 361774259,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1685287025
    },
    {
        "content": "<p>it's just a question of whether they get removed before or after desugaring</p>",
        "id": 361774281,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1685287032
    },
    {
        "content": "<p>(desugaring operators I mean)</p>",
        "id": 361774299,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1685287037
    },
    {
        "content": "<p>right now it's:</p>\n<ul>\n<li>desugar operators and parens while still in parse AST mode</li>\n<li>convert parse AST to canonical IR</li>\n</ul>\n<p>and I think if we change this to the following, it would (hopefully!) solve the problem:</p>\n<ul>\n<li>desugar operators while still in parse AST mode, but leave parens</li>\n<li>convert parse AST to canonical IR, dropping any parens we encounter along the way</li>\n</ul>",
        "id": 361774516,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1685287113
    },
    {
        "content": "<p>the critical distinction being that during operator desugaring the parens are still there, so <code>|&gt;</code> sees a distinction between parenthesized and non-parenthesized expressions (whereas today it can't see a distinction bc they've already been removed by the in-progress desugaring)</p>",
        "id": 361774654,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1685287165
    },
    {
        "content": "<p>Btw, the result of <a href=\"https://github.com/roc-lang/roc/blob/ec21f1982611915bfbfffb4b89eece4cdc043ebd/crates/compiler/parse/src/expr.rs#L437\">compiler/parse/src/expr.rs#parse_expr_final</a></p>\n<p>for this expr</p>\n<div class=\"codehilite\"><pre><span></span><code>2 |&gt; (Num.sub 3) |&gt; Num.sub 3\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>BinOps([(@66-67 Num(&quot;2&quot;), @68-70 Pizza), (@72-81 ParensAround(Apply(@72-79 Var { module_name: &quot;Num&quot;, ident: &quot;sub&quot; }, [@80-81 Num(&quot;3&quot;)], Space)), @83-85 Pizza)], @86-95 Apply(@86-93 Var { module_name: &quot;Num&quot;, ident: &quot;sub&quot; }, [@94-95 Num(&quot;3&quot;)], Space))\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\"><pre><span></span><code>2 |&gt; (Num.sub 3)\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>BinOps([(@66-67 Num(&quot;2&quot;), @68-70 Pizza)], @72-81 ParensAround(Apply(@72-79 Var { module_name: &quot;Num&quot;, ident: &quot;sub&quot; }, [@80-81 Num(&quot;3&quot;)], Space)))\n</code></pre></div>\n<p>so parser doesn't remove parens. or do you mean something else?</p>",
        "id": 361776476,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1685287813
    },
    {
        "content": "<p>ah, yeah! So in <code>operator.rs</code> (the \"operator desugaring step\" - which takes a parse AST as its input and then ouputs a desugared parse AST), there are two places where we explicitly drop parens from the parse AST:</p>\n<ul>\n<li><a href=\"https://github.com/roc-lang/roc/blob/cf20c74eb9713543f9dd4bae9763a46ac5d102e3/crates/compiler/can/src/operator.rs#L291\">https://github.com/roc-lang/roc/blob/cf20c74eb9713543f9dd4bae9763a46ac5d102e3/crates/compiler/can/src/operator.rs#L291</a></li>\n<li><a href=\"https://github.com/roc-lang/roc/blob/cf20c74eb9713543f9dd4bae9763a46ac5d102e3/crates/compiler/can/src/operator.rs#L385\">https://github.com/roc-lang/roc/blob/cf20c74eb9713543f9dd4bae9763a46ac5d102e3/crates/compiler/can/src/operator.rs#L385</a></li>\n</ul>\n<p>so my first suggestion is that in these cases, we should change these (just the <code>ParensAround</code> cases - so they would need to be moved out into their own branches in the <code>match</code>, because <code>SpaceBefore</code> and <code>SpaceAfter</code> should continue to be handled the way they are today) and make it so that <code>ParensAround</code> desugars the sub-expression but then re-adds the <code>ParensAround</code>, so that we aren't actually dropping the <code>ParensAround</code> anymore.</p>",
        "id": 361799550,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1685297140
    },
    {
        "content": "<p>so if you do this, it will cause some things to break, because this desugaring step runs before we convert between parse AST and canonical IR</p>",
        "id": 361799651,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1685297177
    },
    {
        "content": "<p>and today, when we convert to canonical IR, we have a check that says \"hey if we run into any parens, that must be a bug, because a previous step should have gotten rid of those\" - <a href=\"https://github.com/roc-lang/roc/blob/7cabaecd6ec711371c24889445e9b3a00f7a528d/crates/compiler/can/src/expr.rs#L1399\">https://github.com/roc-lang/roc/blob/7cabaecd6ec711371c24889445e9b3a00f7a528d/crates/compiler/can/src/expr.rs#L1399</a></p>",
        "id": 361799707,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1685297205
    },
    {
        "content": "<p>so we'd want to change <em>that</em> code to no longer throw an error, and instead silently discard the parens right there</p>",
        "id": 361799765,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1685297244
    },
    {
        "content": "<p>does that make sense? Happy to elaborate on any part of that!</p>",
        "id": 361799788,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1685297260
    },
    {
        "content": "<p>ah, now I see. makes sense. let me try</p>",
        "id": 361804408,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1685299326
    },
    {
        "content": "<p>A simple pr (but it solves the problem. somehow) <a href=\"https://github.com/roc-lang/roc/pull/5481\">https://github.com/roc-lang/roc/pull/5481</a></p>",
        "id": 362200628,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1685456680
    },
    {
        "content": "<p>Just wondering <span class=\"user-mention\" data-user-id=\"584248\">@Kiryl Dziamura</span> , what is the status of this? Will it be submitted soon?</p>\n<p>Ran into it in something I am working on and would be quite convenient to take advantage of this change if it can be submitted soon.</p>",
        "id": 367795860,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1687235015
    },
    {
        "content": "<p>Every day I think about back to the issue, but unfortunately, last three weeks I hardly find time even for my primary job <span aria-label=\"confounded\" class=\"emoji emoji-1f616\" role=\"img\" title=\"confounded\">:confounded:</span><br>\nHaving small child, fulltime job and passion for opensource contribution is a very fragile construction.<br>\nI apologise for the delay and lack of status update. Will find some time next week, and put the status here if I have any difficulties. If it's a blocker - feel free to fix it, it doesn't look difficult at all. I would be happy to review and learn something new.<br>\n(omg, itâ€™s the monthly meeting in two days. time flies)</p>",
        "id": 368695867,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1687468489
    },
    {
        "content": "<p>No worries, i totally understand.</p>",
        "id": 368702527,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1687470883
    },
    {
        "content": "<p>no need to apologize! We appreciate your time, and no pressure <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 368710835,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1687474700
    },
    {
        "content": "<p>ok, found a way to unhang the <code>load(build)</code> step: just commented <a href=\"https://github.com/roc-lang/roc/blob/a9f7961b524b11f34038d96e262e5f68f3ecc86d/crates/compiler/load/build.rs#L17-L28\">https://github.com/roc-lang/roc/blob/a9f7961b524b11f34038d96e262e5f68f3ecc86d/crates/compiler/load/build.rs#L17-L28</a></p>\n<p>It helped a lot, so I could locate the problem I was struggling with almost immediately.</p>\n<p>I updated the pr, but some tests failed with stack overflow:</p>\n<p><a href=\"https://github.com/roc-lang/roc/pull/5481#issuecomment-1603413829\">https://github.com/roc-lang/roc/pull/5481#issuecomment-1603413829</a></p>",
        "id": 368710981,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1687474781
    },
    {
        "content": "<p>any ideas on what I can do with the error?</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;glue_cli_run::basic_record&#39; panicked at &#39;`roc glue` command had unexpected stderr:\nthread &#39;main&#39; has overflowed its stack\nfatal runtime error: stack overflow\n</code></pre></div>\n<p>not sure how to debug it</p>",
        "id": 369263581,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1687640633
    },
    {
        "content": "<p>I would make sure to run it in release just to check if it is a correctness issue or an optimization issue</p>",
        "id": 369264331,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1687641044
    },
    {
        "content": "<p>ha! in release glue code tests are passed</p>",
        "id": 369266554,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1687642324
    },
    {
        "content": "<p>faced fatal in the following scenario:</p>\n<div class=\"codehilite\"><pre><span></span><code>Â» id = (\\x -&gt; x)\nthread &#39;main&#39; panicked at &#39;function symbol `#UserApp.id` not in set LambdaSet { set: [( Test.2, [])], args: [InLayout(VOID)], ret: InLayout(VOID), representation: InLayout(21), full_layout: InLayout(22) }&#39;, crates/compiler/mono/src/layout.rs:1472:9\n</code></pre></div>",
        "id": 369270078,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1687644659
    },
    {
        "content": "<p>nice! Check out the <code>with_larger_debug_stack</code> test helper - it's what we use in the situation where a test works with <code>--release</code> but overflows the stack without <code>--release</code> (basically it just increases the test's stack size in non-<code>--release</code> builds)</p>",
        "id": 369275879,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1687649251
    },
    {
        "content": "<p>Iâ€™ll do that, thanks. But thereâ€™s another problem with the parens around lambda now. I probably should fix that first.</p>",
        "id": 369316028,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1687673676
    },
    {
        "content": "<p>An update: </p>\n<ol>\n<li>\n<p>since the parens aren't dropped, this code <code>id = (\\x -&gt; x)</code> fails because for closures there's a special case in <code>canonicalize_pending_body</code> (lambda sets are involved there), and a closure wrapped into parens is not recognized. <a href=\"https://github.com/roc-lang/roc/pull/5481/commits/78380070e2d13959522efa954bdbdd794b563e50\">I pushed an update</a>, all tests are passed (at least in --release) but I'm not sure about the changes. looking for insights</p>\n</li>\n<li>\n<p>speaking of the <code>with_larger_debug_stack</code> helper - it lives in <code>test_gen</code> crate but as I understand, I can't just add it to the <code>roc_glue</code> crate?</p>\n</li>\n</ol>",
        "id": 370556314,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1687981309
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> <span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> any thoughts here?</p>",
        "id": 371027598,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1688109639
    },
    {
        "content": "<p>I left some comments on the PR - great catch! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 371330971,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1688170930
    }
]