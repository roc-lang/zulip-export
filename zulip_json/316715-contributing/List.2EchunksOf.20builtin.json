[
    {
        "content": "<p>I've already got a function written for <a href=\"https://github.com/roc-lang/roc/issues/5885\">https://github.com/roc-lang/roc/issues/5885</a>, so I'd be happy to make a PR.</p>\n<p>This is my first time contributing, so I partially just want to make sure I understand the process. Do I need to do anything on github, or is posting here and making a PR sufficient?</p>\n<p>I have one technical question, which is if there are any established patterns for walking every N elements of a list. Here's my current code</p>\n<div class=\"codehilite\"><pre><span></span><code>chunksOf : List a, Nat -&gt; List (List a)\nchunksOf = \\list, chunkSize -&gt;\n    if chunkSize == 0 || List.len list == 0 then\n        []\n    else\n        chunkIndices = List.range { start: At 0, end: At (List.len list), step: chunkSize }\n        chunks = (List.withCapacity (List.len chunkIndices))\n\n        List.walk chunkIndices chunks \\state, chunkStartIndex -&gt;\n            List.append state (List.sublist list {start: chunkStartIndex, len: chunkSize})\n\nexpect chunksOf (List.range {start: At 0, end: At 10}) 0 == []\nexpect chunksOf [] 5 == []\nexpect chunksOf [1,2,3,4] 5 == [[1,2,3,4]]\nexpect chunksOf [1, 2, 3, 4, 5, 6, 7, 8] 3 == [[1, 2, 3], [4, 5, 6], [7, 8]]\n</code></pre></div>\n<p><code>chunkIndices</code> is convenient because it does the math for us of determining how many chunks will be in the final list and where each chunk starts, but it's an extra (temporary) array allocation. Would a recursive function be better? Any other ways to do this?</p>",
        "id": 395334066,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1696629551
    },
    {
        "content": "<p>posting here and making a PR is sufficient! It's always a good idea to confirm that we definitely want to add the builtin before working on a PR (and in this case I can confirm that we do!) but other than that, there's no other process!</p>",
        "id": 395347015,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1696639114
    },
    {
        "content": "<p>As for perf, a tail recursive version would be better, but I wouldn't worry about it too much. Someone can always optimize it in the future.</p>",
        "id": 395348051,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1696639663
    }
]