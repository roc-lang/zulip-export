[
    {
        "content": "<p>How would you feel about an implementation like this?<br>\n<a href=\"/user_uploads/22008/rVhCyNt9t9Sf_su2f-gUXx0h/Screenshot_20230420_120155.png\">Screenshot_20230420_120155.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/rVhCyNt9t9Sf_su2f-gUXx0h/Screenshot_20230420_120155.png\" title=\"Screenshot_20230420_120155.png\"><img src=\"/user_uploads/22008/rVhCyNt9t9Sf_su2f-gUXx0h/Screenshot_20230420_120155.png\"></a></div>",
        "id": 351254880,
        "sender_full_name": "iko",
        "timestamp": 1681981354
    },
    {
        "content": "<p><code>takeWhile</code> usually only returns the part of the list that it takes, right? this is more like a split</p>",
        "id": 351255310,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1681981468
    },
    {
        "content": "<p>(which is still useful!)</p>",
        "id": 351255345,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1681981476
    },
    {
        "content": "<p>I think this is the behaviour that is expected in the issue: <a href=\"https://github.com/roc-lang/roc/issues/5138\">https://github.com/roc-lang/roc/issues/5138</a></p>\n<p>I agree though, it doesn't really match the name</p>",
        "id": 351255681,
        "sender_full_name": "iko",
        "timestamp": 1681981559
    },
    {
        "content": "<p>maybe <code>breakOn</code>?</p>",
        "id": 351256020,
        "sender_full_name": "iko",
        "timestamp": 1681981633
    },
    {
        "content": "<p>Not sure about the <code>Predicate</code> type itself though. I don't think it can be made anonymous.</p>",
        "id": 351256480,
        "sender_full_name": "iko",
        "timestamp": 1681981748
    },
    {
        "content": "<p>I think that is too fancy, I don't think the predicate should be recursive</p>",
        "id": 351256871,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1681981838
    },
    {
        "content": "<p>it would be more efficient to fold to find the index, and then slice, for instance</p>",
        "id": 351257047,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1681981874
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281543\">Folkert de Vries</span> <a href=\"#narrow/stream/316715-contributing/topic/List.2EtakeWhile/near/351257047\">said</a>:</p>\n<blockquote>\n<p>it would be more efficient to fold to find the index, and then slice, for instance</p>\n</blockquote>\n<p>I think the type I proposed still allows this sort of implementation </p>\n<p>The recursive predicate allows you to make a decision using an arbitrart number of elements. I think this is the general case for what was described in the issue. Using a simple boolean predicate would not allow for making a decision based on two consecutive elements.</p>",
        "id": 351258922,
        "sender_full_name": "iko",
        "timestamp": 1681982314
    },
    {
        "content": "<p>this is true, but would that be convenient to use in practice?</p>",
        "id": 351259322,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1681982407
    },
    {
        "content": "<p>this makes me think of a fold, which is a traversal that keeps some state</p>",
        "id": 351259466,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1681982439
    },
    {
        "content": "<p>In practice the type I proposed can be used as just a simple boolean predicate (Take and Break) without using NeedMore.</p>",
        "id": 351259951,
        "sender_full_name": "iko",
        "timestamp": 1681982546
    },
    {
        "content": "<p>yes I understand, but is the inclusion of <code>NeedMore</code> really worth it. it makes the signature more complicated</p>",
        "id": 351260488,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1681982689
    },
    {
        "content": "<p>and its usecases can be covered in other ways</p>",
        "id": 351260539,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1681982701
    },
    {
        "content": "<p>perhaps to resolve this: can you create an example that uses <code>NeedMore</code>that might be included in the documentation?</p>",
        "id": 351260707,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1681982743
    },
    {
        "content": "<p>I think we are actually debating if the function proposed in the Github issue is needed in builtins at all.</p>",
        "id": 351260731,
        "sender_full_name": "iko",
        "timestamp": 1681982749
    },
    {
        "content": "<p>then let's see if we like that code</p>",
        "id": 351260745,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1681982754
    },
    {
        "content": "<p>sure</p>",
        "id": 351260856,
        "sender_full_name": "iko",
        "timestamp": 1681982769
    },
    {
        "content": "<p>yeah I think we should include the simpler (standard) version of <code>takeWhile : List a, (a -&gt; Bool) -&gt; List a</code></p>",
        "id": 351260959,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1681982798
    },
    {
        "content": "<p>and anything fancier than what that can do, can be done with <code>List.walk</code> and variants, plus a <code>List.splitAt : List a, Nat -&gt; List a</code></p>",
        "id": 351261191,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1681982848
    },
    {
        "content": "<p>makes sense to me!</p>",
        "id": 351309067,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1681993614
    },
    {
        "content": "<p>Good discussion, thanks for clarification Folkert. I copied what I had into the issue, glad to see some design in here <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 351309354,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1681993673
    },
    {
        "content": "<p>To be clear: we decided to not implement <code>takeWhile</code> as described in the Github issue, and instead decided to add a more traditional boolean-based <code>takeWhile</code>?</p>",
        "id": 351350051,
        "sender_full_name": "iko",
        "timestamp": 1682002314
    },
    {
        "content": "<p>yep!</p>",
        "id": 351368674,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1682006473
    }
]