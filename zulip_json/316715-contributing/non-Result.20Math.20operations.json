[
    {
        "content": "<p>Hi everyone!<br>\n<span class=\"user-mention\" data-user-id=\"483789\">@Kevin Gillette</span> and I are going to work on making math operations no longer return <code>Result</code>. Specifically, these functions are: <code>div</code>, <code>divFloor</code>, <code>divCeil</code>, <code>mod</code>, <code>rem</code>, <code>log</code>, and <code>sqrt</code>. <br>\nHere's the corresponding GitHub issue: <a href=\"https://github.com/rtfeldman/roc/issues/2826\">https://github.com/rtfeldman/roc/issues/2826</a></p>",
        "id": 278474999,
        "sender_full_name": "Nikita Mounier",
        "timestamp": 1649605956
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"492598\">@Nikita Mounier</span> so we can divide work, which functions are you considering to be div-related?</p>",
        "id": 278475037,
        "sender_full_name": "Kevin Gillette",
        "timestamp": 1649606038
    },
    {
        "content": "<p>Sorry you're right, I meant <code>div</code>, <code>divFloor</code>, and <code>divCeil</code>. It's true that <code>mod</code> and <code>rem</code> are also division-related.</p>",
        "id": 278475125,
        "sender_full_name": "Nikita Mounier",
        "timestamp": 1649606126
    },
    {
        "content": "<blockquote>\n<p>so we can divide work</p>\n</blockquote>\n<p>I see what you did there</p>",
        "id": 278475138,
        "sender_full_name": "Nikita Mounier",
        "timestamp": 1649606159
    },
    {
        "content": "<p>Yes, I <em>completely</em> meant that as a joke. That I thought about ahead of time. Indeed.</p>",
        "id": 278475195,
        "sender_full_name": "Kevin Gillette",
        "timestamp": 1649606200
    },
    {
        "content": "<p>Okay, sounds good. So you'll handle <code>div</code>, <code>divFloor</code>, and <code>divCeil</code>, and I'll handle <code>mod</code>, <code>rem</code>, <code>log</code>, and <code>sqrt</code>?</p>\n<p>Are you planning to rename the existing functions to <code>divChecked</code> and so on, per <a href=\"https://github.com/rtfeldman/roc/issues/2826#issuecomment-1094166537\">https://github.com/rtfeldman/roc/issues/2826#issuecomment-1094166537</a>, and then produce panicking versions using the original versions?</p>",
        "id": 278475300,
        "sender_full_name": "Kevin Gillette",
        "timestamp": 1649606336
    },
    {
        "content": "<p>Sure, if everyone else is cool with that.</p>",
        "id": 278475616,
        "sender_full_name": "Nikita Mounier",
        "timestamp": 1649606717
    },
    {
        "content": "<p>Should the panic be at the zig level (using the `@panic(\"...\") builtin function I saw elsewhere?</p>",
        "id": 278475675,
        "sender_full_name": "Nikita Mounier",
        "timestamp": 1649606771
    },
    {
        "content": "<p><a href=\"https://github.com/rtfeldman/roc/blob/trunk/compiler/builtins/bitcode/src/dec.zig#L312-L316\">This is how</a> the <code>div</code> function inside <code>builtins/bitcode/src/dec.zig</code> handles denominators equal to 0:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">denominator_i128</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"o\">//</span> <span class=\"nx\">The</span> <span class=\"nx\">compiler</span> <span class=\"nx\">frontend</span> <span class=\"nx\">does</span> <span class=\"nx\">the</span> <span class=\"o\">`</span><span class=\"nx\">denominator</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">`</span> <span class=\"nx\">check</span> <span class=\"k\">for</span> <span class=\"nx\">us</span><span class=\"p\">,</span>\n    <span class=\"o\">//</span> <span class=\"nx\">therefore</span> <span class=\"k\">this</span> <span class=\"nx\">case</span> <span class=\"o\">is</span> <span class=\"nx\">unreachable</span> <span class=\"nx\">from</span> <span class=\"nx\">roc</span> <span class=\"nx\">user</span> <span class=\"nx\">code</span>\n    <span class=\"nx\">unreachable</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>So should I remove the compiler frontend check and instead have zig panic? Or should the panic be higher up?</p>",
        "id": 278475797,
        "sender_full_name": "Nikita Mounier",
        "timestamp": 1649606980
    },
    {
        "content": "<p>no a zig panic is quite different</p>",
        "id": 278475878,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1649607070
    },
    {
        "content": "<p>oh, actually</p>",
        "id": 278475952,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1649607154
    },
    {
        "content": "<p>we overload zig's <code>@panic</code> with our <code>roc_panic</code></p>",
        "id": 278475956,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1649607172
    },
    {
        "content": "<p>so I guess indeed you can do a <code>@panic(\"some message\")</code> there</p>",
        "id": 278475961,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1649607206
    },
    {
        "content": "<p>Right, I saw <code>@panic</code> being used for overflow which feels similar to dividing by 0. Cool!</p>",
        "id": 278475970,
        "sender_full_name": "Nikita Mounier",
        "timestamp": 1649607221
    },
    {
        "content": "<p>Okay, so an <code>@panic</code> in Zig will compile to a <code>roc_panic</code> call?</p>",
        "id": 278476019,
        "sender_full_name": "Kevin Gillette",
        "timestamp": 1649607272
    },
    {
        "content": "<p>Could you point me to the directory where the compiler frontend would do the <code>denominator == 0</code> check? I'm still not super familiar with the codebase structure</p>",
        "id": 278476025,
        "sender_full_name": "Nikita Mounier",
        "timestamp": 1649607286
    },
    {
        "content": "<p>here's an example <a href=\"https://github.com/rtfeldman/roc/blob/e477813be41eed53a8df6e517fbbae8d01088dee/compiler/can/src/builtins.rs#L4298-L4362\">https://github.com/rtfeldman/roc/blob/e477813be41eed53a8df6e517fbbae8d01088dee/compiler/can/src/builtins.rs#L4298-L4362</a></p>",
        "id": 278476144,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1649607419
    },
    {
        "content": "<blockquote>\n<p>Okay, so an <code>@panic</code> in Zig will compile to a <code>roc_panic</code> call?</p>\n</blockquote>\n<p>Looks like it</p>",
        "id": 278476162,
        "sender_full_name": "Nikita Mounier",
        "timestamp": 1649607440
    },
    {
        "content": "<p>Great, that's what I was looking for. Thanks!</p>",
        "id": 278476169,
        "sender_full_name": "Nikita Mounier",
        "timestamp": 1649607461
    },
    {
        "content": "<p>What are people's thoughts about the wording of the panics. It looks like all <code>@panic</code> calls within latest trunk start with the word \"TODO\". It also doesn't look like there are any explicit panics for integer overflow to reference (are those handled by rust/zig intrinsics)?</p>",
        "id": 278476947,
        "sender_full_name": "Kevin Gillette",
        "timestamp": 1649608317
    },
    {
        "content": "<p>Oh, I see. It's handled via <code>throw_on_overflow</code></p>",
        "id": 278477128,
        "sender_full_name": "Kevin Gillette",
        "timestamp": 1649608496
    },
    {
        "content": "<p>Btw it might be a good idea if we were to both put all the checked variants inside <a href=\"https://github.com/rtfeldman/roc/blob/e477813be41eed53a8df6e517fbbae8d01088dee/compiler/module/src/symbol.rs#L908-L1059\"><code>compiler/module/src/symbol.rs</code></a>, where all the symbols are listed in a macro with a number followed by its name followed by the corresponding function. <br>\nFor instance, there's:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"mi\">39</span> <span class=\"nv\">NUM_DIV_FLOAT: </span><span class=\"s\">\"div\"</span>\n<span class=\"mi\">40</span> <span class=\"nv\">NUM_DIV_INT: </span><span class=\"s\">\"divFloor\"</span>\n</code></pre></div>\n<p>Which we'd want to turn into:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"mi\">39</span> <span class=\"nv\">NUM_DIV_FLOAT: </span><span class=\"s\">\"div\"</span>\n<span class=\"mi\">40</span> <span class=\"nv\">NUM_DIV_FLOAT_CHECKED: </span><span class=\"s\">\"divChecked\"</span>\n<span class=\"mi\">41</span> <span class=\"nv\">NUM_DIV_INT: </span><span class=\"s\">\"divFloor\"</span>\n<span class=\"mi\">42</span> <span class=\"nv\">NUM_DIV_INT_CHECKED: </span><span class=\"s\">\"divFloorChecked\"</span>\n</code></pre></div>\n<p>Since we gotta offset the number on the left each time we add a new symbol, we might get some nasty merge conflicts if we don't take each others' checked functions into account. Do you see where I'm coming from?</p>",
        "id": 278478405,
        "sender_full_name": "Nikita Mounier",
        "timestamp": 1649610020
    },
    {
        "content": "<p>that's hard to prevent</p>",
        "id": 278478868,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1649610598
    },
    {
        "content": "<p>because there cannot be gaps in those lists</p>",
        "id": 278478909,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1649610604
    },
    {
        "content": "<p>I follow. I'm reading through <code>compiler/builtins/README.md</code> now.</p>\n<p>Side note: are the integers critical for humans to manage (is there any bespoke \"42ness\" to \"42\"), or does other human-managed code refer to the ID by number instead of symbol? At some point could those integer identifiers by assigned by position, thus minimizing conflicts?</p>",
        "id": 278479101,
        "sender_full_name": "Kevin Gillette",
        "timestamp": 1649610855
    },
    {
        "content": "<p>Here, I've created a gist with the symbol list so that you don't need to go through the same time-consuming process: <a href=\"https://gist.github.com/nikitamounier/776a49dfc84d07347d7669b80775c030\">https://gist.github.com/nikitamounier/776a49dfc84d07347d7669b80775c030</a></p>",
        "id": 278479412,
        "sender_full_name": "Nikita Mounier",
        "timestamp": 1649611230
    },
    {
        "content": "<p>Lmk if there's anything missing or if you notice any gaps</p>",
        "id": 278479423,
        "sender_full_name": "Nikita Mounier",
        "timestamp": 1649611249
    },
    {
        "content": "<p>Thanks! I've got some stuff to take care of over the next several hours, so it sounds like you may well have code I can reference (or at least will touch relevant files before I do).</p>\n<p>Something that's not entirely clear to me at this time: why do some operations have <code>_INT</code> or <code>_FLOAT</code> suffices? <code>NUM_DIV_INT</code> makes sense to me, given that it is, iirc, a separate operator, but <code>NUM_MOD_INT</code> vs <code>NUM_MOD_FLOAT</code> is not clear to me given that <code>NUM_REM</code> has no such variants.</p>",
        "id": 278480471,
        "sender_full_name": "Kevin Gillette",
        "timestamp": 1649612410
    },
    {
        "content": "<blockquote>\n<p>Thanks! I've got some stuff to take care of over the next several hours, so it sounds like you may well have code I can reference (or at least will touch relevant files before I do).</p>\n</blockquote>\n<p>Sure! I can already tell you that some of the files you'll want to modify are <code>compiler/builtins/roc/Num.roc</code>, <code>compiler/builtins/bitcode/src/num.zig</code>, <code>compiler/builtins/bitcode/src/dec.zig</code>, <code>compiler/can/src/builtins.rs</code>, <code>compiler/module/src/low_level.rs</code>, <code>compiler/module/src/symbol.rs</code>, and <code>compiler/builtins/src/std.rs</code></p>",
        "id": 278482579,
        "sender_full_name": "Nikita Mounier",
        "timestamp": 1649615123
    },
    {
        "content": "<p>There's one thing I'm slightly confused by, if anyone could give me some context. From <a href=\"https://github.com/rtfeldman/roc/blob/trunk/compiler/module/src/symbol.rs#L949\"><code>compiler/module/src/symbol.rs</code></a>, <code>divFloor</code> is associated to the symbol <code>NUM_DIV_INT</code>. However, in <a href=\"https://github.com/rtfeldman/roc/blob/trunk/compiler/can/src/builtins.rs#L198\"><code>compiler/can/src/builtins.src</code></a>,  <code>NUM_DIV_INT</code> is associated to the <code>num_div_int</code> function, which, in the <a href=\"https://github.com/rtfeldman/roc/blob/trunk/compiler/can/src/builtins.rs#L4403-L4410\">branch where the denominator is not equal to 0</a>, is identical to <code>num_div_float</code>'s success branch. What's weirder, the comment above <code>num_div_int</code> defines it as:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"sr\">/// Num.div : Int a , Int a -&gt; Result (Int a) [ DivByZero ]*</span>\n</code></pre></div>\n<p>Instead of what should logically be:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"sr\">/// Num.divFloor: Int a , Int a -&gt; Result (Int a) [ DivByZero ]*</span>\n</code></pre></div>\n<p>Any idea what I'm missing here?</p>",
        "id": 278483884,
        "sender_full_name": "Nikita Mounier",
        "timestamp": 1649617047
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"483789\">Kevin Gillette</span> <a href=\"#narrow/stream/316715-contributing/topic/non-Result.20Math.20operations/near/278480471\">said</a>:</p>\n<blockquote>\n<p><code>NUM_DIV_INT</code> makes sense to me, given that it is, iirc, a separate operator, but <code>NUM_MOD_INT</code> vs <code>NUM_MOD_FLOAT</code> is not clear to me given that <code>NUM_REM</code> has no such variants.</p>\n</blockquote>\n<p>IIRC, modulus for integer and modulus for floats works quite differently. For instance, C++ has <code>%</code> for integer modulus and <code>fmod</code> for floating-point modulus. Most newer languages unified the two though, even though the implementation works differently under the hood whether it's integer or float.</p>",
        "id": 278484170,
        "sender_full_name": "Nikita Mounier",
        "timestamp": 1649617375
    },
    {
        "content": "<p>I haven't looked at it, but their is a chance that float div is just a generic llvm division and not actually specific to floating point, thus int can call it</p>",
        "id": 278484871,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1649618186
    },
    {
        "content": "<p>Also, I think our modulus only works with ints.</p>",
        "id": 278484879,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1649618200
    },
    {
        "content": "<p>Also int division is like normal int division in other languages where it is not a floor. It also goes towards zero. Floor goes towards -infinity</p>",
        "id": 278485061,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1649618436
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/316715-contributing/topic/non-Result.20Math.20operations/near/278485061\">said</a>:</p>\n<blockquote>\n<p>Also int division is like normal int division in other languages where it is not a floor. It also goes towards zero. Floor goes towards -infinity</p>\n</blockquote>\n<p>Got it. So why is <code>NUM_DIV_INT</code> associated to <code>\"divFloor\"</code> here? <a href=\"https://github.com/rtfeldman/roc/blob/trunk/compiler/module/src/symbol.rs#L949\">https://github.com/rtfeldman/roc/blob/trunk/compiler/module/src/symbol.rs#L949</a></p>",
        "id": 278485243,
        "sender_full_name": "Nikita Mounier",
        "timestamp": 1649618683
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"492598\">@Nikita Mounier</span> my guess is that this is the difference between the <code>/</code> operator (floating point division) and the <code>//</code> operator (flooring division).</p>",
        "id": 278486073,
        "sender_full_name": "Kevin Gillette",
        "timestamp": 1649619702
    },
    {
        "content": "<blockquote>\n<p>Got it. So why is <code>NUM_DIV_INT</code> associated to <code>\"divFloor\"</code> here?</p>\n</blockquote>\n<p>Bug? Differing opinion around rounding direction? <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> <br>\nProbably just wasn't thought about.</p>",
        "id": 278487420,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1649621532
    },
    {
        "content": "<p>A lot of the symbols were added just to give standard features, they may not be fully correct/thought through. For example, we recently had a large discussion about bit shifting</p>",
        "id": 278487448,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1649621626
    },
    {
        "content": "<p>Alrighty, I've made a WIP pull request, let me know what you think:<br>\n<a href=\"https://github.com/rtfeldman/roc/pull/2832\">https://github.com/rtfeldman/roc/pull/2832</a></p>",
        "id": 278495449,
        "sender_full_name": "Nikita Mounier",
        "timestamp": 1649633467
    },
    {
        "content": "<p>I'm not sure I fully understand <a href=\"https://github.com/rtfeldman/roc/runs/5977398384?check_suite_focus=true#step:4:2891\">the test error CI is giving me</a> about <code>f64</code> not implementing <code>PartialEq&lt;{integer}</code>.  What do you think?</p>",
        "id": 278601325,
        "sender_full_name": "Nikita Mounier",
        "timestamp": 1649703570
    },
    {
        "content": "<p>In Rust, you can't compare two floats via equality</p>",
        "id": 278601672,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1649703709
    },
    {
        "content": "<p>oh wait nvm that's not it</p>",
        "id": 278601782,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1649703750
    },
    {
        "content": "<p>Try making it <code>-1.0</code> rather than <code>-1</code> in the test. I think otherwise Rust infers it to be an integer</p>",
        "id": 278601897,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1649703816
    },
    {
        "content": "<p>Yeah you're probably right. Let's see what CI says...</p>",
        "id": 278606571,
        "sender_full_name": "Nikita Mounier",
        "timestamp": 1649706258
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/316715-contributing/topic/non-Result.20Math.20operations/near/278484879\">said</a>:</p>\n<blockquote>\n<p>Also, I think our modulus only works with ints.</p>\n</blockquote>\n<p>Direction-wise, is this the design intent, or something we intend to change? As I'm working on a PR to handle make mod panic, I might as well either get rid of float mod, or alternatively look into implementing it for floats (or at least add clarifying comments in the code) depending on the answer to this question.</p>",
        "id": 278642993,
        "sender_full_name": "Kevin Gillette",
        "timestamp": 1649732698
    },
    {
        "content": "<p>A bit more clarity needed: <code>%</code> and <code>%%</code> each appear to inconsistently be referred to as <code>mod</code> and <code>rem</code>/<code>modFloor</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code>| `a % b`           | `Num.rem a b`    |\n| `a %% b`          | `Num.mod a b`    |\n</code></pre></div>\n<p><a href=\"https://github.com/rtfeldman/roc/blob/a7c37a4b7a635cb6122234f67d03669d71c87c09/TUTORIAL.md?plain=1#L1946-L1947\">https://github.com/rtfeldman/roc/blob/a7c37a4b7a635cb6122234f67d03669d71c87c09/TUTORIAL.md?plain=1#L1946-L1947</a></p>\n<hr>\n<div class=\"codehilite\"><pre><span></span><code>`a % b` is shorthand for `Num.mod a b`.\n</code></pre></div>\n<p><a href=\"https://github.com/rtfeldman/roc/blob/a7c37a4b7a635cb6122234f67d03669d71c87c09/compiler/builtins/docs/Num.roc#L1104\">https://github.com/rtfeldman/roc/blob/a7c37a4b7a635cb6122234f67d03669d71c87c09/compiler/builtins/docs/Num.roc#L1104</a></p>\n<hr>\n<div class=\"codehilite\"><pre><span></span><code>`a %% b` is shorthand for `Int.modFloor a b`.\n</code></pre></div>\n<p><a href=\"https://github.com/rtfeldman/roc/blob/a7c37a4b7a635cb6122234f67d03669d71c87c09/compiler/builtins/docs/Num.roc#L818\">https://github.com/rtfeldman/roc/blob/a7c37a4b7a635cb6122234f67d03669d71c87c09/compiler/builtins/docs/Num.roc#L818</a></p>\n<hr>\n<p>iiuc, the primary difference between integer <code>rem</code> and <code>mod</code> is in the handling of negative operands. Is that Roc's interpretation as well? What then is the intended behavior of <code>modFloor</code> as defined on integers (should it be called <code>mod</code> or <code>rem</code> instead)? And which operator is truly meant to correspond to which named function?</p>",
        "id": 278647185,
        "sender_full_name": "Kevin Gillette",
        "timestamp": 1649737723
    },
    {
        "content": "<blockquote>\n<p>Direction-wise, is this the design intent, or something we intend to change? </p>\n</blockquote>\n<p>Mostly my assumption that could be wrong. I personally don't think it should work with floats. They can produce quite surprising results when you use mod due to their inaccuracies. I think that in many languages, <code>%</code> doesn't work with float types, but they still have an explicity <code>fmod</code> function somewhere in the standard library.</p>",
        "id": 278707648,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1649776491
    },
    {
        "content": "<p>Hmmmmm, I'm getting a very weird test failure:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">gen_div_checked_by_zero_dec</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_evals_to</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">indoc</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"s\">r#\"</span>\n<span class=\"s\">                    x : Dec</span>\n<span class=\"s\">                    x = 10</span>\n\n<span class=\"s\">                    y : Dec</span>\n<span class=\"s\">                    y = 0</span>\n\n<span class=\"s\">                    when Num.divChecked x y is</span>\n<span class=\"s\">                        Ok val -&gt; val</span>\n<span class=\"s\">                        Err _ -&gt; -1</span>\n<span class=\"s\">                \"#</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kt\">i128</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>CI says it's returning <code>-1000000000000000000</code> instead of <code>-1</code>. Any idea why that could be happening?</p>",
        "id": 278717002,
        "sender_full_name": "Nikita Mounier",
        "timestamp": 1649780702
    },
    {
        "content": "<p>A dec is an int value times <code>10^-18</code></p>",
        "id": 278717309,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1649780850
    },
    {
        "content": "<p>In rust you are viewing the raw dec value, so it it <code>10^18</code> times bigger than you expect.</p>",
        "id": 278717385,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1649780882
    },
    {
        "content": "<p>I see – should I replace <code>-1</code> with something like <code>RocDec::from_str_to_i128_unsafe(\"-1\")</code> then?</p>",
        "id": 278717963,
        "sender_full_name": "Nikita Mounier",
        "timestamp": 1649781183
    },
    {
        "content": "<p>Yeah, that or the explicit value. I would just follow whatever other dec tests do.</p>",
        "id": 278718046,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1649781217
    },
    {
        "content": "<p>Yeah, the other dec tests do <code>RocDec::from_str_to_i128_unsafe</code> so I'll just stick with that. Thanks!</p>",
        "id": 278718377,
        "sender_full_name": "Nikita Mounier",
        "timestamp": 1649781369
    },
    {
        "content": "<p>I spent a bunch of time looking into remainder and mod at some point; let me look some things up to refresh my memory on the subject <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 278723608,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1649783782
    },
    {
        "content": "<p>so one of my goals for Roc in general is to try to have the \"performance ceiling\" be as high as possible without breaking referential transparency or memory safety. That is, try to make there be <em>some</em> way to get the fastest combination of machine instructions into the binary, so that if you find that your Roc program isn't running fast enough, you have <em>some</em> way to solve that problem - even if it involves writing code in a way you normally wouldn't</p>",
        "id": 278723927,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1649783946
    },
    {
        "content": "<p>that goal guides builtin design; for example, if the CPU supports a particular arithmetic operation (like float mod), by default I want to expose that as a primitive so that if someone really needs that for their particular use case to run fast, they have access to it</p>",
        "id": 278724074,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1649784007
    },
    {
        "content": "<p>because if the operation isn't an effect and isn't exposed in the builtins, there's really no other way to access it</p>",
        "id": 278724138,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1649784040
    },
    {
        "content": "<p>so if mod didn't accept <code>Num</code>, then I'd want to have a separate <code>modFloat</code> that only works on floats...which maybe is fine, if mod on floats is indeed a footgun, but it would have the downside that you could no longer do mod on floats using an infix operator, so I'd want to learn more about that before splitting one function into two! <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 278724340,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1649784135
    },
    {
        "content": "<p>ok, looking it up, it appears that there actually is no CPU instruction for modulo or remainder for floats, so let's drop that operation for now <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> - we can revisit adding it again in the future if there's demand, and discuss the pros/cons then</p>",
        "id": 278726308,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1649785062
    },
    {
        "content": "<p>so basically:</p>\n<ul>\n<li>let's change <code>rem</code> to <code>Num.rem : Int a, Int a -&gt; Int a</code> and then also have a <code>Num.remChecked : Int a, Int a -&gt; Result (Int a) [ DivByZero ]*</code></li>\n<li>let's delete all mentions of <code>%%</code> and <code>modFloor</code> in the docs</li>\n</ul>",
        "id": 278726467,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1649785120
    },
    {
        "content": "<p>sound good?</p>",
        "id": 278726481,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1649785128
    },
    {
        "content": "<p>All tests passed <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span><span aria-label=\"champagne\" class=\"emoji emoji-1f37e\" role=\"img\" title=\"champagne\">:champagne:</span>!</p>",
        "id": 278736569,
        "sender_full_name": "Nikita Mounier",
        "timestamp": 1649789493
    },
    {
        "content": "<p>Now I can take off the [WIP] from my PR <span aria-label=\"sunglasses\" class=\"emoji emoji-1f60e\" role=\"img\" title=\"sunglasses\">:sunglasses:</span></p>",
        "id": 278736798,
        "sender_full_name": "Nikita Mounier",
        "timestamp": 1649789601
    },
    {
        "content": "<p>I'll make the necessary changes to the documentation, then I think it's ready to merge...</p>",
        "id": 278736855,
        "sender_full_name": "Nikita Mounier",
        "timestamp": 1649789634
    },
    {
        "content": "<p>Actually looks like there's nothing else to change in the docs! Merge away</p>",
        "id": 278738000,
        "sender_full_name": "Nikita Mounier",
        "timestamp": 1649790068
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> so that means Roc will no longer have an <code>%%</code> operator? <code>%</code> will desugar to <code>Num.rem</code>, and <code>Num.mod</code> is only available by name?</p>",
        "id": 278752844,
        "sender_full_name": "Kevin Gillette",
        "timestamp": 1649797375
    },
    {
        "content": "<p>right!</p>",
        "id": 278752988,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1649797455
    },
    {
        "content": "<p>Just wanted to mention some inconsistency that <code>/</code> does float division and <code>//</code> does integer division, but <code>%</code> does int remainder with this proposal?</p>",
        "id": 278760141,
        "sender_full_name": "Jared Cone",
        "timestamp": 1649801183
    },
    {
        "content": "<p>Just wondering, does <code>/</code> ever cast int to floats, or is it always float division with float inputs. If it never casts, can't we just have <code>/</code> for both float and int division. It will just fail to type check if you use and int with a float?</p>",
        "id": 278762112,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1649802526
    },
    {
        "content": "<p>Python 3 broke compatibility with Python 2 by changing <code>/</code> to always mean \"float division\" (previously it mean \"flooring division\" for ints and \"regular division\" for floats), while <code>//</code> was introduced to always mean \"flooring division\". I feel this clarity makes sense.</p>\n<p>In Python 3 the types are preserved though for <code>//</code>, such that <code>3.0 // 2.0</code> yields <code>1.0</code>, yet <code>/</code> always produces a float even from int inputs.</p>\n<p>I'm not sure about what typing choice is reasonable for Roc. For Elm's tradeoffs (less concerned with access to low-level performance control), I'd think <code>(//) : Num, Num -&gt; Int</code> makes sense, but for Roc, it's not clear how to turn a <code>Num a</code> into an <code>Int b</code>. Also, if someone doing performance sensitive floating point code wanted a truncated float result, forcing them to explicitly convert back to float would be undesirable (even if LLVM could optimize that into remaining a float the whole time).</p>\n<p>I would expect <code>divFloor : Num a, Num a -&gt; Num a</code> is reasonable (no type changes).</p>\n<p>I don't know what to think about the result type of <code>div</code> however due to the type correspondence question. Do we just prohibit <code>div</code> and <code>/</code> on integers?</p>",
        "id": 278766567,
        "sender_full_name": "Kevin Gillette",
        "timestamp": 1649806120
    },
    {
        "content": "<p>(and does that imply that a function operating on <code>Num</code> can't access <code>/</code>, since not every <code>Num</code> variant would have access to non-flooring division?)</p>",
        "id": 278766620,
        "sender_full_name": "Kevin Gillette",
        "timestamp": 1649806178
    },
    {
        "content": "<p>the main motivation for that split is that it's easy to get surprising answers with int division</p>",
        "id": 278772417,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1649811576
    },
    {
        "content": "<p>e.g. in <code>x / y</code>, if <code>x</code> is 3 and <code>y</code> is 2, then if they're both floats the answer is 1.5 but if they're both ints the answer is 1</p>",
        "id": 278772564,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1649811645
    },
    {
        "content": "<p>and <code>3 / 2</code> returning 1 is a surprising result because that's not what it is in math</p>",
        "id": 278772592,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1649811678
    },
    {
        "content": "<p><code>3 // 2</code> is a visual indicator that it's not doing normal division</p>",
        "id": 278772663,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1649811725
    },
    {
        "content": "<p>so it's less error prone</p>",
        "id": 278772669,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1649811732
    },
    {
        "content": "<p>Looking through some of the code, I see:</p>\n<div class=\"codehilite\"><pre><span></span><code>I128 : Num (Integer Signed128)\nI64 : Num (Integer Signed64)\nI32 : Num (Integer Signed32)\nI16 : Num (Integer Signed16)\nI8 : Int Signed8\n</code></pre></div>\n<p><a href=\"https://github.com/rtfeldman/roc/blob/f39f7eda03a2488c1a89ee2b58ab3c6ca97ccaee/compiler/builtins/roc/Num.roc#L169-L173\">https://github.com/rtfeldman/roc/blob/f39f7eda03a2488c1a89ee2b58ab3c6ca97ccaee/compiler/builtins/roc/Num.roc#L169-L173</a></p>\n<p>Of these two styles, which is preferred? It looks like the <code>I8</code> style was introduced more recently. Would it be desirable to align these declarations on one style or another?</p>",
        "id": 278783346,
        "sender_full_name": "Kevin Gillette",
        "timestamp": 1649824750
    },
    {
        "content": "<p>They resolve to the same underlying type (<code>Int</code> is <code>Int a : Num (Integer a)</code>), so there is no functional difference, also because the end user will only ever see <code>I8</code> or <code>I16</code> anyway, not the whole expanded type.</p>\n<p>In any case these definitions will change relatively soon with opaque types and abilities.</p>",
        "id": 278784061,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1649825712
    }
]