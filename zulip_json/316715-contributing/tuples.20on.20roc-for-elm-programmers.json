[
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/blob/main/roc-for-elm-programmers.md#standard-library\">https://github.com/roc-lang/roc/blob/main/roc-for-elm-programmers.md#standard-library</a><br>\ni went through this just to see if i missed something that wasn't in the tutorial i should know about</p>\n<p>the part about tuples seemed outdated so thought i'd quickly update it<br>\nbut then i had a look, <a href=\"https://github.com/roc-lang/roc/tree/main/crates/compiler/builtins\">https://github.com/roc-lang/roc/tree/main/crates/compiler/builtins</a><br>\ni see tuple is not implemented like the rest of the builtins<br>\ni found a <a href=\"https://github.com/roc-lang/roc/blob/main/crates/compiler/derive/src/decoding/tuple.rs\">decoding module</a> of it but not sure how it's actually implemented</p>\n<p>so it's partly the case that roc does have tuples, but does not expose a Tuple module<br>\nhow does that work?</p>",
        "id": 344606928,
        "sender_full_name": "dank",
        "timestamp": 1679815460
    },
    {
        "content": "<p>Yeah, tuples are a builtin type, but there is no module devoted to providing utilities for tuples</p>",
        "id": 344667272,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1679839507
    },
    {
        "content": "<p>just like records/tags are types, but have no dedicated builtin module</p>",
        "id": 344667334,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1679839523
    },
    {
        "content": "<p>oh right<br>\nhm where is the compiler logic for them?<br>\ni would've thought there's more to it than just the decoding part</p>",
        "id": 344674345,
        "sender_full_name": "dank",
        "timestamp": 1679841832
    },
    {
        "content": "<p>like how am i able to index into it?</p>",
        "id": 344674779,
        "sender_full_name": "dank",
        "timestamp": 1679842001
    },
    {
        "content": "<p>pattern match?</p>",
        "id": 344678717,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1679843376
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"583319\">@dank</span> , There are a lot of references to tuples directly in the IR. That is how we get both destucturing <code>(a, b) = someTuple</code> and direct access <code>someTuple.0</code>.</p>\n<p>A few examples:</p>\n<ul>\n<li><a href=\"https://github.com/roc-lang/roc/blob/e549c8b4a38993dd16d92fbfd6d0c39a753fbe21/crates/compiler/can/src/expr.rs#L170\">expr for defining a tuple</a></li>\n<li><a href=\"https://github.com/roc-lang/roc/blob/e549c8b4a38993dd16d92fbfd6d0c39a753fbe21/crates/compiler/can/src/expr.rs#L193\">expr for accessing a specific field in a tuple</a></li>\n<li><a href=\"https://github.com/roc-lang/roc/blob/e549c8b4a38993dd16d92fbfd6d0c39a753fbe21/crates/compiler/can/src/pattern.rs#L61\">pattern for tuple destructuring</a></li>\n</ul>",
        "id": 344684881,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679846031
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281543\">Folkert de Vries</span> <a href=\"#narrow/stream/316715-contributing/topic/tuples.20on.20roc-for-elm-programmers/near/344678717\">said</a>:</p>\n<blockquote>\n<p>pattern match?</p>\n</blockquote>\n<p>no i meant direct access like what brendan mentioned</p>",
        "id": 344685211,
        "sender_full_name": "dank",
        "timestamp": 1679846177
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/316715-contributing/topic/tuples.20on.20roc-for-elm-programmers/near/344684881\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"583319\">dank</span> , There are a lot of references to tuples directly in the IR. That is how we get both destucturing <code>(a, b) = someTuple</code> and direct access <code>someTuple.0</code>.</p>\n<p>A few examples:</p>\n<ul>\n<li><a href=\"https://github.com/roc-lang/roc/blob/e549c8b4a38993dd16d92fbfd6d0c39a753fbe21/crates/compiler/can/src/expr.rs#L170\">expr for defining a tuple</a></li>\n<li><a href=\"https://github.com/roc-lang/roc/blob/e549c8b4a38993dd16d92fbfd6d0c39a753fbe21/crates/compiler/can/src/expr.rs#L193\">expr for accessing a specific field in a tuple</a></li>\n<li><a href=\"https://github.com/roc-lang/roc/blob/e549c8b4a38993dd16d92fbfd6d0c39a753fbe21/crates/compiler/can/src/pattern.rs#L61\">pattern for tuple destructuring</a></li>\n</ul>\n</blockquote>\n<p>thanks!!</p>",
        "id": 344685222,
        "sender_full_name": "dank",
        "timestamp": 1679846184
    },
    {
        "content": "<p>yeah the idea is that, like records and tag unions, we shouldn't need a module because there's enough built-in syntax that you don't really need it</p>",
        "id": 344695994,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1679852316
    },
    {
        "content": "<p>so instead of needing like a <code>Tuple.snd</code> or something, you can just have <code>.1</code></p>",
        "id": 344696021,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1679852330
    },
    {
        "content": "<p>btw so why did you guys decide not to offer mapping functions over tuples?</p>",
        "id": 344805940,
        "sender_full_name": "dank",
        "timestamp": 1679908647
    },
    {
        "content": "<p>because elements in a tuple can have different data types?</p>",
        "id": 344806767,
        "sender_full_name": "Ron Panduwana",
        "timestamp": 1679908892
    },
    {
        "content": "<p>no I mean like Elm's mapFirst/Second/Both</p>",
        "id": 344806972,
        "sender_full_name": "dank",
        "timestamp": 1679908938
    },
    {
        "content": "<p>just doesn't seem worth a whole module, to be honest</p>",
        "id": 344869714,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1679924772
    },
    {
        "content": "<p>especially considering you have to implement a separate one for each arity of tuple, which means you have to decide where to draw the line on what arity to support</p>",
        "id": 344869844,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1679924805
    },
    {
        "content": "<p>we could always add syntax sugar for it if it seemed worth it</p>",
        "id": 344869882,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1679924818
    },
    {
        "content": "<p>so tuples ended up not being extensible? (I remember the reasoning was to enable tuple functions that weren't coupled to the tuple arity)</p>",
        "id": 345609455,
        "sender_full_name": "Georges Boris",
        "timestamp": 1680167558
    },
    {
        "content": "<p>They are extensible- you can define a “fst” function that unpacks the first element of any size tuple</p>",
        "id": 345661630,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1680180612
    }
]