[
    {
        "content": "<p>I've been working on implementing the chaining design proposal and have been having a lot of trouble with an implementation for <code>split_defs_around</code>. I've tried a bunch of different things, but I've been unable to get it right. The combination of <code>Vec</code>s, indexes, phantom data, and memory has been tricky.</p>\n<p>The implementation below works... the problem is that there are unecessary defs that remain because I'm just cloning the original and then replace the tags to keep for <code>before</code> and <code>after</code>. </p>\n<p>The current implementation behaves correctly (as in programs compile and run fine), but there is a lot of duplication which makes debugging the AST when reading it manually, and it would also grow quite large on real programs.</p>\n<p>I would appreciate any assistance.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// crates/compiler/parse/src/ast.rs</span>\n\n<span class=\"cp\">#[derive(Debug, Clone, PartialEq, Default)]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Defs</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">tags</span>: <span class=\"nc\">std</span>::<span class=\"n\">vec</span>::<span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">EitherIndex</span><span class=\"o\">&lt;</span><span class=\"n\">TypeDef</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ValueDef</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">regions</span>: <span class=\"nc\">std</span>::<span class=\"n\">vec</span>::<span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">Region</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">space_before</span>: <span class=\"nc\">std</span>::<span class=\"n\">vec</span>::<span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">Slice</span><span class=\"o\">&lt;</span><span class=\"n\">CommentOrNewline</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">space_after</span>: <span class=\"nc\">std</span>::<span class=\"n\">vec</span>::<span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">Slice</span><span class=\"o\">&lt;</span><span class=\"n\">CommentOrNewline</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">spaces</span>: <span class=\"nc\">std</span>::<span class=\"n\">vec</span>::<span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">CommentOrNewline</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">type_defs</span>: <span class=\"nc\">std</span>::<span class=\"n\">vec</span>::<span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">TypeDef</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">value_defs</span>: <span class=\"nc\">std</span>::<span class=\"n\">vec</span>::<span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">ValueDef</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">#[derive(Debug, Clone, PartialEq)]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">SplitDefsAround</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">before</span>: <span class=\"nc\">Defs</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">after</span>: <span class=\"nc\">Defs</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Defs</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// For desugaring suffixed Defs we need to split around the current value</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">split_defs_around</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">target</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">SplitDefsAround</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">before</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">after</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">();</span>\n\n<span class=\"w\">        </span><span class=\"n\">before</span><span class=\"p\">.</span><span class=\"n\">tags</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tags</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"n\">target</span><span class=\"p\">].</span><span class=\"n\">to_vec</span><span class=\"p\">();</span>\n\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tags</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">after</span><span class=\"p\">.</span><span class=\"n\">tags</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tags</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"n\">after</span><span class=\"p\">.</span><span class=\"n\">tags</span><span class=\"p\">.</span><span class=\"n\">clear</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">after</span><span class=\"p\">.</span><span class=\"n\">tags</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tags</span><span class=\"p\">[(</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">..</span><span class=\"p\">].</span><span class=\"n\">to_vec</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"n\">SplitDefsAround</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">before</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">after</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 431760722,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1712489421
    },
    {
        "content": "<p>So this only needs to split tags and the rest stays identical?</p>",
        "id": 431797291,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712509929
    },
    {
        "content": "<p>No, that is the problem with my current solution. The tags are indexes into the other Vecs. So I'm keeping type_defs and value_defs that dont have a tag pointing to them.</p>",
        "id": 431822212,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1712529364
    },
    {
        "content": "<p>So just redundant data and the inconvenient copy?</p>",
        "id": 431825858,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712533002
    },
    {
        "content": "<p>If I use Vec::remove on the value_defs it shifts the indexes. Which means the tags now point to the wrong place, and I haven't found a way to update them all correctly</p>",
        "id": 431829286,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1712536419
    },
    {
        "content": "<p>Honestly, the best way would be to reference the original defs and only update the tags. But that might require larger complier changes</p>",
        "id": 431830871,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712538058
    },
    {
        "content": "<p>Another option. Update Defs to instead of containing <code>std::vec::Vec</code> make it have a <code>&amp;'a bumpalo::Vec</code> or something like that.</p>",
        "id": 431833152,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712540106
    },
    {
        "content": "<p>Then cause it is a refernce, no need to copy it. just keep referencing the original data.</p>",
        "id": 431833173,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712540147
    },
    {
        "content": "<p>But yeah, you may be stuck properly splitting the defs. If so, may be worth just walking the defs, copying them over and assigning to new indices.</p>",
        "id": 431833314,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712540282
    },
    {
        "content": "<p>hard to say what is best, would need to look at specifics and mess around more.</p>",
        "id": 431833352,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712540300
    },
    {
        "content": "<p>Ok, I've made some progress I think.</p>\n<p>I've pushed my WIP to <a href=\"https://github.com/roc-lang/roc/blob/f70fafcedbc5707f1b088ab4f57ffda0bb8e96ec/crates/compiler/parse/src/ast.rs#L771\">this branch</a>.</p>\n<p>There are two functions which I have implemented which are almost identical and where I think the issue is, both are in <code>crates/compiler/parse/src/ast.rs</code>, <code>replace_with_value_def</code> and <code>split_defs_around</code>.</p>\n<p>Unfortunately I've managed to break things somehow. I know it's an issue with the way I am handling spaces.</p>\n<p>I'm hoping someone can help me out with this. <span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span></p>",
        "id": 432160340,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1712649799
    },
    {
        "content": "<p>Specifically I think this might be wrong somehow...</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">space_before</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">CommentOrNewline</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">start</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">space_before</span><span class=\"p\">[</span><span class=\"n\">tag_index</span><span class=\"p\">].</span><span class=\"n\">start</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">len</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">space_before</span><span class=\"p\">[</span><span class=\"n\">tag_index</span><span class=\"p\">].</span><span class=\"n\">len</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">spaces</span><span class=\"p\">[</span><span class=\"n\">start</span><span class=\"o\">..</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"p\">)]</span>\n<span class=\"p\">};</span>\n</code></pre></div>",
        "id": 432160755,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1712649907
    },
    {
        "content": "<p>I'd generally write that as <code>[start..][..len]</code>, but that's just cosmetic</p>",
        "id": 432160929,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1712649951
    },
    {
        "content": "<p>I've had trouble understanding that <code>pub space_before: Vec&lt;Slice&lt;CommentOrNewline&lt;'a&gt;&gt;, Global&gt;</code> is and how to work with it I think.</p>",
        "id": 432161248,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1712650025
    },
    {
        "content": "<p>right, actually you can do <code>&amp;self.spaces[self.space_before[tag_index].indices()]</code></p>",
        "id": 432161635,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1712650119
    },
    {
        "content": "<p>Thank you, that looks much nicer.</p>",
        "id": 432162115,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1712650246
    },
    {
        "content": "<p>but in general I'd try to create test cases here and see what breaks. hard to spot invalid assumptions just by reading the code</p>",
        "id": 432162321,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1712650292
    },
    {
        "content": "<p>Thank you, thats a good idea.</p>",
        "id": 432162540,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1712650340
    }
]