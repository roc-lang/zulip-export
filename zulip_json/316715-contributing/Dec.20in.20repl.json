[
    {
        "content": "<p>I'm trying to get Decs to work in the repl. I've traced it back to repl_eval/src/eval.rs It looks like the function being passed to app.call_function needs to take a RocDec, which isn't included in the crate. Does this sound right? I want to make sure I'm not I'm not going about this in the wrong way before adding RocDec to the appropriate cargo file</p>",
        "id": 274153046,
        "sender_full_name": "Derek Gustafson",
        "timestamp": 1646411136
    },
    {
        "content": "<p>I think you can use <code>deref_i128</code></p>",
        "id": 274154451,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646411799
    },
    {
        "content": "<p>and then in the cli and wasm crates (that already import roc_std) do the actual conversion to RocDec</p>",
        "id": 274154471,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646411815
    },
    {
        "content": "<p><code>repl_cli</code> and <code>repl_wasm</code>, that is</p>",
        "id": 274154515,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646411836
    },
    {
        "content": "<p>at least that's how we do it with strings and lists today</p>",
        "id": 274154637,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646411882
    },
    {
        "content": "<p>I'll give that a try. Thanks!</p>",
        "id": 274154856,
        "sender_full_name": "Derek Gustafson",
        "timestamp": 1646411992
    },
    {
        "content": "<p>Now that I've dug deeper, what's needed in <code>repl_eval</code> is an <code>Expr::Num</code>, which takes a string representation of the number. I see 3 options:</p>\n<ol>\n<li>Use <code>deref_i128</code> and build the display logic into <code>repl_eval</code>. This will require leaking implementation details (how many decimal digits) of <code>Dec</code> into <code>repl_eval</code></li>\n<li>Add <code>deref_dec(&amp;self, addr: usize) -&gt; &amp;str</code> to <code>ReplAppMemory</code> and add a function <code>toStr(&amp;self) -&gt; &amp;str</code> to <code>RocDec</code>. This feels the cleanest to me.</li>\n<li>Add <code>deref_dec(&amp;self, addr: usize) -&gt; (i128, i32)</code> to <code>ReplAppMemory</code> that returns the whole and decimal parts. Then add a function to <code>repl_eval</code> to display the pair. Note that there is already display logic for other numbers in <code>repl_eval</code></li>\n</ol>\n<p>Thoughts?</p>",
        "id": 274168948,
        "sender_full_name": "Derek Gustafson",
        "timestamp": 1646418234
    },
    {
        "content": "<p>that's surprising. What makes it different form list/str ?</p>",
        "id": 274169324,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646418393
    },
    {
        "content": "<p><code>deref_str</code> uses method 2.</p>",
        "id": 274169692,
        "sender_full_name": "Derek Gustafson",
        "timestamp": 1646418585
    },
    {
        "content": "<p>right, let's go with that then</p>",
        "id": 274169886,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646418665
    },
    {
        "content": "<p><code>toStr</code> is implemented in zig, but should be easy to port to rust</p>",
        "id": 274170019,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646418725
    },
    {
        "content": "<p>I don't understand the List structure enough to be sure, but I think it basically uses 1 and leaks that it's implemented as an array.</p>",
        "id": 274170086,
        "sender_full_name": "Derek Gustafson",
        "timestamp": 1646418739
    },
    {
        "content": "<p>Should I leave the zig implementation for generating the llvm bytecode, or just convert the function to rust, and call that one?</p>",
        "id": 274170199,
        "sender_full_name": "Derek Gustafson",
        "timestamp": 1646418789
    },
    {
        "content": "<p>porting that code and putting it into <code>roc_std</code> should work</p>",
        "id": 274170329,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646418827
    },
    {
        "content": "<p>the type signature there doesn't work though</p>",
        "id": 274170411,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646418851
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 274170443,
        "sender_full_name": "Derek Gustafson",
        "timestamp": 1646418863
    },
    {
        "content": "<p>it has to be <code>deref_dec(&amp;self, addr: usize) -&gt; i128</code>, or at least something that is not a reference type</p>",
        "id": 274170486,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646418887
    },
    {
        "content": "<p>Why not a <code>&amp;str</code>?</p>",
        "id": 274171021,
        "sender_full_name": "Derek Gustafson",
        "timestamp": 1646419048
    },
    {
        "content": "<p>I guess the other possibility is <code>deref_dec(&amp;self, addr: usize) -&gt; f64</code> and the print it as a <code>f64</code></p>",
        "id": 274171335,
        "sender_full_name": "Derek Gustafson",
        "timestamp": 1646419184
    },
    {
        "content": "<p>lifetimes</p>",
        "id": 274171827,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646419389
    },
    {
        "content": "<p>you cannot return a <code>&amp;str</code> there, there is no way to allocate it</p>",
        "id": 274171859,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646419402
    },
    {
        "content": "<p>it works in the case of <code>deref_str</code> because <code>self</code> contains the bytes</p>",
        "id": 274171890,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646419417
    },
    {
        "content": "<p>but you cannot create a new string there and then return it as a <code>&amp;str</code></p>",
        "id": 274171921,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646419432
    },
    {
        "content": "<p>Right</p>",
        "id": 274172003,
        "sender_full_name": "Derek Gustafson",
        "timestamp": 1646419451
    },
    {
        "content": "<p><code>f64</code> is a good option I think</p>",
        "id": 274172011,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646419455
    },
    {
        "content": "<p>although</p>",
        "id": 274172062,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646419481
    },
    {
        "content": "<p>maybe not</p>",
        "id": 274172072,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646419487
    },
    {
        "content": "<p>we can represent <code>1/3</code> exactly I think right? and floats cannot</p>",
        "id": 274172128,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646419514
    },
    {
        "content": "<p>so converting via float could introduce weird <code>.000000001</code> problems</p>",
        "id": 274172160,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646419530
    },
    {
        "content": "<p>you know what, <code>mono</code> is a dependency of <code>repl_eval</code> and it already imports <code>roc_std</code>, so adding it as a dependency has no effect whatsoever to repl_eval</p>",
        "id": 274172696,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646419771
    },
    {
        "content": "<p>so making it <code>deref_dec(...) -&gt; RocDec</code> should also be just fine</p>",
        "id": 274172744,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646419799
    },
    {
        "content": "<p>And then call <code>toStr</code> to get the representation on the stack, and env.arena.alloc to get it on the heap, right?</p>",
        "id": 274173004,
        "sender_full_name": "Derek Gustafson",
        "timestamp": 1646419930
    },
    {
        "content": "<p>let's see, we want to do this right. </p>\n<p>1) implement std::fmt::Display for RocStr <br>\n2) make a bumpalo::collections::String::with_capacity_in(max_num_of_digits)<br>\n3) use <code>write!(bumaplo_string, \"{}\", roc_dec)</code>; it converts the RocDec to a string and pushes that result into the bumpalo string efficiently <br>\n4) there's probably some <code>.into_bump_slice</code> equivalent for strings, I'll look this up</p>",
        "id": 274173542,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646420228
    },
    {
        "content": "<p>step 1 is only efficient if you <code>write!</code> the individual characters to the formatter, don't create a String in there</p>",
        "id": 274173813,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646420349
    },
    {
        "content": "<p>the zig implementation does something similar</p>",
        "id": 274173823,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646420356
    },
    {
        "content": "<p>Here's what's being called for the other numbers.<br>\n<a href=\"/user_uploads/22008/O0yJ82tO63_OpeccxJ5NyHBg/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/O0yJ82tO63_OpeccxJ5NyHBg/image.png\" title=\"image.png\"><img src=\"/user_uploads/22008/O0yJ82tO63_OpeccxJ5NyHBg/image.png\"></a></div>",
        "id": 274173871,
        "sender_full_name": "Derek Gustafson",
        "timestamp": 1646420389
    },
    {
        "content": "<p>oh that's not great</p>",
        "id": 274174090,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646420439
    },
    {
        "content": "<p>you can use the later steps I described to create a bumpalo string directly</p>",
        "id": 274174130,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646420464
    },
    {
        "content": "<p>Does this mean we can punt on steps 2-4?</p>",
        "id": 274174140,
        "sender_full_name": "Derek Gustafson",
        "timestamp": 1646420466
    },
    {
        "content": "<p>Or does it mean I should rewrite that function to use bumpalo?</p>",
        "id": 274174354,
        "sender_full_name": "Derek Gustafson",
        "timestamp": 1646420560
    },
    {
        "content": "<p>yeah, something like</p>\n<div class=\"codehilite\"><pre><span></span><code>fn number_literal_to_ast&lt;T: std::fmt::Display&gt;(arena: &amp;Bump, num: T) -&gt; Expr&lt;&#39;_&gt; {\n    let mut string = bumpalo::collections::String::with_capacity_in(64, arena);\n    write!(string, &quot;{}&quot;, num).unwrap();\n    Expr::Num(string.into_bump_slice())\n}\n</code></pre></div>",
        "id": 274174610,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646420650
    },
    {
        "content": "<p>that doesn't quite work yet though, I'll do some debugging</p>",
        "id": 274174771,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646420742
    },
    {
        "content": "<p>I'll start by getting <code>deref_dec</code> and <code>Display</code> implemented</p>",
        "id": 274174958,
        "sender_full_name": "Derek Gustafson",
        "timestamp": 1646420839
    },
    {
        "content": "<p>got it</p>\n<div class=\"codehilite\"><pre><span></span><code>/// This is centralized in case we want to format it differently later,\n/// e.g. adding underscores for large numbers\nfn number_literal_to_ast&lt;T: std::fmt::Display&gt;(arena: &amp;Bump, num: T) -&gt; Expr&lt;&#39;_&gt; {\n    use std::fmt::Write;\n\n    let mut string = bumpalo::collections::String::with_capacity_in(64, arena);\n    write!(string, &quot;{}&quot;, num).unwrap();\n    Expr::Num(string.into_bump_str())\n}\n</code></pre></div>",
        "id": 274175469,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646421087
    },
    {
        "content": "<p>Oh yeah the original one allocates the string twice! Nice improvement.</p>",
        "id": 274176242,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1646421476
    },
    {
        "content": "<p>Do I need to worry about boxing/unboxing RocDec? Or can I just call this macro with RocDec?<br>\n<a href=\"/user_uploads/22008/vNMUrVsOcFMwB1cYro2LmOi0/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/vNMUrVsOcFMwB1cYro2LmOi0/image.png\" title=\"image.png\"><img src=\"/user_uploads/22008/vNMUrVsOcFMwB1cYro2LmOi0/image.png\"></a></div>",
        "id": 274176352,
        "sender_full_name": "Derek Gustafson",
        "timestamp": 1646421518
    },
    {
        "content": "<p>Well that's tiny</p>",
        "id": 274176397,
        "sender_full_name": "Derek Gustafson",
        "timestamp": 1646421545
    },
    {
        "content": "<p>I think the best approach is a default trait method</p>",
        "id": 274176424,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646421561
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>    fn deref_dec(&amp;self, addr: usize) -&gt; RocDec {\n        bits = self.deref_i128(addr)\n        ...\n    }\n</code></pre></div>",
        "id": 274176541,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646421613
    },
    {
        "content": "<p>in the definition of </p>\n<div class=\"codehilite\"><pre><span></span><code>pub trait ReplAppMemory {\n</code></pre></div>",
        "id": 274176551,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646421627
    },
    {
        "content": "<p>wouldn't we need separate methods for i128 and Dec?</p>",
        "id": 274176599,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1646421669
    },
    {
        "content": "<p>oh right sorry, that's what you wrote</p>",
        "id": 274176616,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1646421684
    },
    {
        "content": "<p>I misread</p>",
        "id": 274176620,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1646421688
    },
    {
        "content": "<p>yeah</p>",
        "id": 274176626,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646421690
    },
    {
        "content": "<p>just, we only need to implement <code>deref_dec</code> once in this way</p>",
        "id": 274176652,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646421706
    },
    {
        "content": "<p>Right, that's a good idea!</p>",
        "id": 274176707,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1646421724
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281543\">Folkert de Vries</span> <a href=\"#narrow/stream/316715-contributing/topic/Dec.20in.20repl/near/274172128\">said</a>:</p>\n<blockquote>\n<p>we can represent <code>1/3</code> exactly I think right? and floats cannot</p>\n</blockquote>\n<p>No, but if I remember correctly, our dec is essentially a <code>x * 10^-18</code>. So anything divisible by <code>10^-18</code> is always perfectly represented. So <code>1/3</code> is still a problem.</p>",
        "id": 274185729,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1646426441
    },
    {
        "content": "<p>wait then what problem do decimals solve?</p>",
        "id": 274186499,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646427007
    },
    {
        "content": "<p>I thought they were designed to prevent this sort of <code>0.0000000001</code> thing</p>",
        "id": 274186530,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646427022
    },
    {
        "content": "<p>Representing cash and any sort of numbers divisible by 10 is the main thing.</p>",
        "id": 274187475,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1646427556
    },
    {
        "content": "<p>Theoretically we could have the base to make it nicer for other cases. Could make it base 60 so it gets 1/2, 1/3, 1/4, 1/5, 1/6, 1/10, 1/12. That gets most human expected fractions and still makes it work well with base 10 since it is a multiple of 10.</p>",
        "id": 274187814,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1646427696
    },
    {
        "content": "<p>Change the number to <code>x * 60^10</code></p>",
        "id": 274188042,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1646427828
    },
    {
        "content": "<p>Also, I guess it still has a slightly more reasonable third already. Would be <code>0.33333....3</code> with 18 3s. So it shouldn't have as many issues with the <code>0.000000001</code> thing.</p>",
        "id": 274188344,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1646428029
    },
    {
        "content": "<p>If I remember correctly, 0.3 isn't exactly representable in base 2.</p>",
        "id": 274190228,
        "sender_full_name": "Derek Gustafson",
        "timestamp": 1646429043
    },
    {
        "content": "<p>ah that must be what I'm thinking of</p>",
        "id": 274190258,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646429064
    },
    {
        "content": "<p>If we're looking to provide nice representations for lots of fractions, we probably want it to be a fractional class, although that will be representable in Roc itself once Abilities are implemented.</p>",
        "id": 274190621,
        "sender_full_name": "Derek Gustafson",
        "timestamp": 1646429279
    },
    {
        "content": "<p>Ah yeah, it fixes the 0.3 case and like 0.1 + 0.9 actually equalling 1.</p>",
        "id": 274191021,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1646429456
    },
    {
        "content": "<p>yeah in every language that uses IEEE floats if you put 0.1 + 0.2 into the repl, it does not print 0.3 <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 274191041,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1646429470
    },
    {
        "content": "<p>but with<code>Dec</code> in Roc it would!</p>",
        "id": 274191048,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1646429474
    },
    {
        "content": "<p>so it's better for currency, but is it good?</p>",
        "id": 274191093,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646429496
    },
    {
        "content": "<p>when you calculate interest, it would still be inaccurate right?</p>",
        "id": 274191115,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646429510
    },
    {
        "content": "<p>(and potentially accumulating the errors to a point where they matter)</p>",
        "id": 274191228,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646429549
    },
    {
        "content": "<p>I remember asking some people about this</p>",
        "id": 274191331,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1646429622
    },
    {
        "content": "<p>I forget exactly who told me this, but it's something like \"nobody in finance uses fixed-point decimal with more than 6 decimal places, and one time we had a client ask for 8 or 9 and it was the most absurd thing, everyone was laughing about it\"</p>",
        "id": 274191529,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1646429747
    },
    {
        "content": "<p>depends what inaccurate is. If everyone accepts that interest is always compounded at a certain time interval and rounded off then it's ok</p>",
        "id": 274191539,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1646429754
    },
    {
        "content": "<p>and <code>Dec</code> has 18 decimal places, so...seems like we're ok? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 274191545,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1646429758
    },
    {
        "content": "<p>SQL Server has a fixed-point decimal type where you can configure the number of decimal places, and the common advice there is to always use 4</p>",
        "id": 274191658,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1646429805
    },
    {
        "content": "<p>I remember asking around for various use cases and nobody I talked to had any use cases they knew of where 18 decimal places wouldn't suffice</p>",
        "id": 274191898,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1646429923
    },
    {
        "content": "<p>(unless of course you're doing arbitrary fractions like 1/3, in which case yeah - probably want a different datatype altogether for that!)</p>",
        "id": 274191946,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1646429942
    },
    {
        "content": "<p>basically the goal with <code>Dec</code> is to have a better default than <code>F32</code> or <code>F64</code>, which actually works the way people expect it to in terms of decimal math</p>",
        "id": 274192290,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1646430095
    },
    {
        "content": "<p>as opposed to all the weird footguns of floating-point math, currency or otherwise</p>",
        "id": 274192317,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1646430109
    },
    {
        "content": "<p>and still having reasoanble, if not ideal, performance</p>",
        "id": 274192401,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1646430134
    },
    {
        "content": "<p>while still of course having <code>F32</code> and <code>F64</code> as opt-in higher-performance alternatives if you care more about math operation performance than about precision (e.g. for graphics coordinates)</p>",
        "id": 274192461,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1646430166
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"431893\">@Brian Carroll</span> It's fairly common to quote daily compounding, and actually use continuous compounding, which adds even more inaccuracies.</p>",
        "id": 274193702,
        "sender_full_name": "Derek Gustafson",
        "timestamp": 1646430903
    },
    {
        "content": "<p>I've managed to get myself confused in the RocDec implementation.</p>\n<div class=\"codehilite\"><pre><span></span><code>#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\npub struct RocDec(pub i128);\n</code></pre></div>\n<p>That i128 is never named. How can I reference it?</p>",
        "id": 274193888,
        "sender_full_name": "Derek Gustafson",
        "timestamp": 1646431019
    },
    {
        "content": "<p><code>roc_dec_value.0</code></p>",
        "id": 274193926,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646431044
    },
    {
        "content": "<p>btw if anyone wants to do a bachelors/masters thesis on the Dec type, its implementation (e.g. we'll also need <code>sin</code> and <code>sqrt</code> ect) and its accuracy tradeoffs, that would be very cool</p>",
        "id": 274194022,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646431089
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 274194023,
        "sender_full_name": "Derek Gustafson",
        "timestamp": 1646431089
    },
    {
        "content": "<p>oh also speed because we do integer arithmetic but it's more operations than the equivalent float operation that happens in hardware</p>",
        "id": 274194078,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646431129
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"483118\">@Samuel Dubovec</span></p>",
        "id": 274194113,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646431155
    },
    {
        "content": "<p>btw <span class=\"user-mention\" data-user-id=\"483003\">@Derek Gustafson</span> was that field already <code>pub</code>? that seems suspicious</p>",
        "id": 274194153,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646431185
    },
    {
        "content": "<p>Yup, already pub</p>",
        "id": 274194218,
        "sender_full_name": "Derek Gustafson",
        "timestamp": 1646431204
    },
    {
        "content": "<p>does anything bad happen when you remove it?</p>",
        "id": 274194268,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646431218
    },
    {
        "content": "<p>I'll give it a try and let you know</p>",
        "id": 274194334,
        "sender_full_name": "Derek Gustafson",
        "timestamp": 1646431237
    },
    {
        "content": "<p>I guess we want to construct from an <code>i128</code> sometimes</p>",
        "id": 274194362,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646431249
    },
    {
        "content": "<p>but we could add <code>from_le_bytes</code></p>",
        "id": 274194382,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646431262
    },
    {
        "content": "<p>Since I'm not interested in writing about the Dec implementation, should I leave it alone once I'm done with this feature?</p>",
        "id": 274194435,
        "sender_full_name": "Derek Gustafson",
        "timestamp": 1646431289
    },
    {
        "content": "<p>And, speed wise, Dec should be comparable to f64, if there is a fpu available</p>",
        "id": 274194528,
        "sender_full_name": "Derek Gustafson",
        "timestamp": 1646431325
    },
    {
        "content": "<p>not for more specialized operations right? like <code>sqrt</code> or <code>sin</code>?</p>",
        "id": 274195040,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646431612
    },
    {
        "content": "<p>at least I thought those might by \"in silicon\"</p>",
        "id": 274195072,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646431633
    },
    {
        "content": "<p>and no if the material interests you go ahead with implementing. Don't want to block on the chance that someone comes along to do a thesis, but if it works out that way then it would be cool</p>",
        "id": 274195197,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646431694
    },
    {
        "content": "<p>It's been a decade since I've worked on that sort of stuff. You're probably right that those are hardware instructions on the fpu, and we'd be implementing in software</p>",
        "id": 274195270,
        "sender_full_name": "Derek Gustafson",
        "timestamp": 1646431761
    },
    {
        "content": "<p>If I remember, I think one operation is already slower than F64. I believe it was multiplication because it requires more expensive normalization.</p>",
        "id": 274197922,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1646433399
    },
    {
        "content": "<p>Probably. The work I was doing was fixed point base 2 arithmatic, so we got the renormalization shr, which is really fast.</p>",
        "id": 274198157,
        "sender_full_name": "Derek Gustafson",
        "timestamp": 1646433544
    },
    {
        "content": "<p>from way back when we originally talked about this:</p>\n<p><a href=\"/user_uploads/22008/HMuEPX-j2WLnE6BvgqHnOd_5/Screen-Shot-2022-03-04-at-5.39.23-PM.png\">Screen-Shot-2022-03-04-at-5.39.23-PM.png</a> <a href=\"/user_uploads/22008/tJqr29h0zxToG7G5MI2Ng_pH/Screen-Shot-2022-03-04-at-5.39.38-PM.png\">Screen-Shot-2022-03-04-at-5.39.38-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/HMuEPX-j2WLnE6BvgqHnOd_5/Screen-Shot-2022-03-04-at-5.39.23-PM.png\" title=\"Screen-Shot-2022-03-04-at-5.39.23-PM.png\"><img src=\"/user_uploads/22008/HMuEPX-j2WLnE6BvgqHnOd_5/Screen-Shot-2022-03-04-at-5.39.23-PM.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/22008/tJqr29h0zxToG7G5MI2Ng_pH/Screen-Shot-2022-03-04-at-5.39.38-PM.png\" title=\"Screen-Shot-2022-03-04-at-5.39.38-PM.png\"><img src=\"/user_uploads/22008/tJqr29h0zxToG7G5MI2Ng_pH/Screen-Shot-2022-03-04-at-5.39.38-PM.png\"></a></div>",
        "id": 274198325,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1646433653
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> Removing <code>pub</code> from <code>RocDec.0</code> causes  compilation to fail in mono with 4 errors. I expect they're fixable using traits that are already defined on RocDec, but one problem at a time. I'll make an issue so it doesn't get lost.</p>",
        "id": 274200717,
        "sender_full_name": "Derek Gustafson",
        "timestamp": 1646435045
    },
    {
        "content": "<p>Do we have a safe mode vs release mode implemented?</p>",
        "id": 274205819,
        "sender_full_name": "Derek Gustafson",
        "timestamp": 1646438730
    },
    {
        "content": "<p>there's multiple levels to this</p>",
        "id": 274206768,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646439702
    },
    {
        "content": "<p>so, we can build our compiler with <code>--release</code>, which instructs the rust compiler to perform more optimizations</p>",
        "id": 274206822,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646439724
    },
    {
        "content": "<p>but, we can also make our compiler turn Roc code into more optimal code</p>",
        "id": 274206832,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646439736
    },
    {
        "content": "<p>with the <code>--optimize</code> flag</p>",
        "id": 274206837,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646439741
    },
    {
        "content": "<p>optimizations are always safe btw</p>",
        "id": 274206868,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646439775
    },
    {
        "content": "<p>so <code>--release</code> is for <code>cargo</code>, and makes the <code>roc</code> executable run faster</p>",
        "id": 274206874,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1646439789
    },
    {
        "content": "<p>and <code>--optimize</code> is an argument you pass to the <code>roc</code> executable to make the compiled roc code go faster</p>",
        "id": 274206887,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1646439804
    },
    {
        "content": "<p>yeah, that <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 274206900,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1646439819
    },
    {
        "content": "<p>e.g. <code>cargo run -- --optimize --debug examples/benchmarks/Deriv.roc</code></p>",
        "id": 274206984,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646439874
    },
    {
        "content": "<p>here <code>--debug</code> make the roc compiler emit the LLVM bytecode to a file</p>",
        "id": 274206992,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646439888
    },
    {
        "content": "<p>you will need an extra tool for that though, using that flag should panic with a link to instructions on how to do that</p>",
        "id": 274207015,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646439911
    },
    {
        "content": "<p>So,  I'm going to be calling <code>str.from_utf8</code> which returns a <code>Result</code>. The compiler is building the string from the i128, so if we've done our job right, it should always succeed. It's nice to have that check while we're building the compiler, so we know it failed, but in a release mode, we should probably call <code>str.from_utf8unsafe</code> and skip the check that it's a valid codepoint</p>",
        "id": 274207534,
        "sender_full_name": "Derek Gustafson",
        "timestamp": 1646440390
    },
    {
        "content": "<p>oh we just use unsafe in those cases</p>",
        "id": 274207550,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646440426
    },
    {
        "content": "<p>it makes sense here; we have to trust ourselves</p>",
        "id": 274207559,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646440441
    },
    {
        "content": "<p>and we add tests ect but we choose speed in this sort of scenario</p>",
        "id": 274207600,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646440455
    },
    {
        "content": "<p>Okay. I'm used to C where the preprocessor can switch between those choices at compile time</p>",
        "id": 274207633,
        "sender_full_name": "Derek Gustafson",
        "timestamp": 1646440506
    },
    {
        "content": "<p>I'm sure you can, but <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 274207946,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646440823
    },
    {
        "content": "<p>To be fair, you can do that in rust as well. Just have to use <code>cfg</code></p>",
        "id": 274207977,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1646440865
    },
    {
        "content": "<p>Generally though, I don't think that would add much value.</p>",
        "id": 274207996,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1646440888
    },
    {
        "content": "<p>Yeah part of the explanation here is in the way a compiler is structured. It's really only the parser that needs to handle invalid UTF8. If the user input doesn't make it past the parser, then none of the other stages need to worry about it.</p>",
        "id": 274235376,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1646476610
    },
    {
        "content": "<p>What's the format for <code>1: Dec</code>? I can think of 3 reasonable answers<br>\n1)  <code>1</code><br>\n2)  <code>1.</code><br>\n3)  <code>1.0</code></p>",
        "id": 274248990,
        "sender_full_name": "Derek Gustafson",
        "timestamp": 1646493812
    },
    {
        "content": "<p>I suppose whatever we do for <code>1: F64</code> this should be the same?</p>",
        "id": 274249201,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1646494008
    },
    {
        "content": "<p>That would be option 1)</p>",
        "id": 274249809,
        "sender_full_name": "Derek Gustafson",
        "timestamp": 1646494723
    },
    {
        "content": "<p>I think 1) is good for now, unlike other languages (at least today) a float literal can be inferred without having to have a decimal point after it.</p>",
        "id": 274249911,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1646494871
    },
    {
        "content": "<p>Pushed my RocDec fix and I'm getting a number of failing tests regarding recognizing records with a single <code>Num *</code> in them as <code>Num *</code>.<br>\nThe error is in the function <code>num_to_ast</code> in <code>repl_eval/src/eval.rs</code>, but I don't understand <code>Content</code> well enough to understand what's going on.<br>\nAnyone have a suggestion of what could be going on, and where I should look?</p>",
        "id": 274271876,
        "sender_full_name": "Derek Gustafson",
        "timestamp": 1646523065
    },
    {
        "content": "<p>if you just want to peek at what is in a <code>Content</code>, then <code>dbg!(roc_types::subs::SubsFmtContent(content, subs))</code> works</p>",
        "id": 274272049,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646523333
    },
    {
        "content": "<p>hmm I can reproduce the problem locally and it's odd that your changes would cause this issue</p>",
        "id": 274272422,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646523884
    },
    {
        "content": "<p>got it, in <code>eval.rs</code>, change this snippet to</p>\n<div class=\"codehilite\"><pre><span></span><code>    let (newtype_containers, content) = unroll_newtypes(env, content);\n    let content = unroll_aliases(env, content);\n\n    macro_rules! helper {\n        ($ty:ty) =&gt; {\n            app.call_function(main_fn_name, |_, num: $ty| {\n                num_to_ast(env, number_literal_to_ast(env.arena, num), content)\n            })\n        };\n    }\n</code></pre></div>",
        "id": 274272512,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646524070
    },
    {
        "content": "<p>I think the moving of <code>helper</code> up to line 281 may be causing the problem, as it seems to be capturing <code>content</code> before unrolling</p>",
        "id": 274272513,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1646524075
    },
    {
        "content": "<p>crucially, <code>content</code> must be defined before the macro</p>",
        "id": 274272514,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646524078
    },
    {
        "content": "<p>yes, exactly</p>",
        "id": 274272557,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646524089
    },
    {
        "content": "<p>What Folkert said :)</p>",
        "id": 274272558,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1646524097
    },
    {
        "content": "<p>I assumed that my changes exposed an unhandled case of RocDec</p>",
        "id": 274272559,
        "sender_full_name": "Derek Gustafson",
        "timestamp": 1646524101
    },
    {
        "content": "<p>no this is why shadowing is not allowed in roc</p>",
        "id": 274272567,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646524119
    },
    {
        "content": "<p>but it's so convenient sometimes ...</p>",
        "id": 274272572,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646524128
    },
    {
        "content": "<p>but yeah you have to be careful when moving macros that they capture the same things</p>",
        "id": 274272584,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646524157
    },
    {
        "content": "<p>Should I revert that change, or rename something</p>",
        "id": 274272587,
        "sender_full_name": "Derek Gustafson",
        "timestamp": 1646524159
    },
    {
        "content": "<p>no just swap the lines around</p>",
        "id": 274272590,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646524181
    },
    {
        "content": "<p>like in the snippet I posted</p>",
        "id": 274272595,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646524196
    },
    {
        "content": "<p>Okay. Will do when I get home</p>",
        "id": 274272598,
        "sender_full_name": "Derek Gustafson",
        "timestamp": 1646524201
    },
    {
        "content": "<p>I'll just push that change then, got it already</p>",
        "id": 274272644,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646524221
    },
    {
        "content": "<p>repl tests all succeed at least</p>",
        "id": 274272672,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1646524308
    }
]