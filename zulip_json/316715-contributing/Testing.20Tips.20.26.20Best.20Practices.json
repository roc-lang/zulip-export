[
    {
        "content": "<p>In working on  <a href=\"https://github.com/roc-lang/roc/issues/6258\">#6258</a>, trying to get CI tests to pass and getting tests results on my machine to match the CI results has been a challenge.  Is there a doc with testing recommendations that I missed perhaps? Or a script that runs all the same tests CI runs? If not, could we create some documentation to take some of the surprises out of testing? </p>\n<p>Here's what I encountered: </p>\n<ol>\n<li>I didn't realize I had to run mono and ui tests and commit the changes. That was a pretty painless process though. </li>\n<li>I was testing in debug mode and getting failures that didn't occur in CI. Switching to release mode fixed this. </li>\n<li>I had a test that failed with <code>gen_wasm</code>, because I was expecting an <code>I64</code>, but wasm was generating an <code>I32</code>. Makes perfect sense. I just disabled the test for <code>gen_wasm</code> (figured that might be preferable to creating a separate tests for wasm?). The issue is that I didn't know I should run these tests before pushing.</li>\n<li>I now have a test that is failing in CI on MacOS Arm only, and I can't replicate it on my machine.</li>\n</ol>\n<p>Maybe this is just a symptom of my inexperience with large projects, or with Rust. Either way, I feel a little lost.</p>",
        "id": 407724695,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1702473503
    },
    {
        "content": "<p>Ok, I see that <code>CONTRIBUTING.md</code> suggests testing with <code>--release</code>.  My own fault for forgetting about this.</p>",
        "id": 407725195,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1702473676
    },
    {
        "content": "<blockquote>\n<p>I now have a test that is failing in CI on MacOS Arm only, and I can't replicate it on my machine.</p>\n</blockquote>\n<p>There are several flaky failures on the apple silicon CI machine, I've now added this to my high priority issues.</p>",
        "id": 407725740,
        "sender_full_name": "Anton",
        "timestamp": 1702473860
    },
    {
        "content": "<blockquote>\n<p>The issue is that I didn't know I should run these tests before pushing.</p>\n</blockquote>\n<p>There are several groups of tests that can both take a long time to run and rarely fail. I don't think we should recommend contributors to execute all of them before every PR.</p>",
        "id": 407727942,
        "sender_full_name": "Anton",
        "timestamp": 1702474570
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/stream/316715-contributing/topic/Testing.20Tips.20.26.20Best.20Practices/near/407725740\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>I now have a test that is failing in CI on MacOS Arm only, and I can't replicate it on my machine.</p>\n</blockquote>\n<p>There are several flaky failures on the apple silicon CI machine, I've now added this to my high priority issues.</p>\n</blockquote>\n<p>At least the flakes are gluten free!</p>",
        "id": 407747702,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1702480135
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/stream/316715-contributing/topic/Testing.20Tips.20.26.20Best.20Practices/near/407727942\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>The issue is that I didn't know I should run these tests before pushing.</p>\n</blockquote>\n<p>There are several groups of tests that can both take a long time to run and rarely fail. I don't think we should recommend contributors to execute all of them before every PR.</p>\n</blockquote>\n<p>Hmm ok, makes sense. Would it make sense to test all code generation when your PR adds a builtin? Or would that not make sense for most builtin contributions?</p>",
        "id": 407748283,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1702480315
    },
    {
        "content": "<blockquote>\n<p>Would it make sense to test all code generation when your PR adds a builtin?</p>\n</blockquote>\n<p>I'm not sure, I think it's quite rare for the gen_wasm tests to fail for example.</p>",
        "id": 407751429,
        "sender_full_name": "Anton",
        "timestamp": 1702481196
    },
    {
        "content": "<p>I think you could argue that I did this to myself by naively including <code>feature = gen_wasm</code> on my test.</p>",
        "id": 407752132,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1702481401
    },
    {
        "content": "<p>In hindsight it seems like a newbie mistake that probably isn’t common</p>",
        "id": 407752657,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1702481557
    },
    {
        "content": "<p>Well it's nice to test with wasm for sure, it's just that you happened to test with a 64 bit number and wasm works with 32 bit.</p>",
        "id": 407753574,
        "sender_full_name": "Anton",
        "timestamp": 1702481854
    },
    {
        "content": "<p>Right. I should have written a separate test for wasm if I wanted to test it.</p>",
        "id": 407754341,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1702482083
    },
    {
        "content": "<p>On that note, is it better to just write a nearly identical test for wasm in this case? I honestly wasn’t sure what was preferable.</p>",
        "id": 407754503,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1702482126
    },
    {
        "content": "<p>Yeah, that's fine</p>",
        "id": 407760111,
        "sender_full_name": "Anton",
        "timestamp": 1702483718
    },
    {
        "content": "<blockquote>\n<p>you happened to test with a 64 bit number and wasm works with 32 bit.</p>\n</blockquote>\n<p>This is a common misconception about Wasm!<br>\nOnly Wasm's <em>pointers</em> are 32-bit. Integers can be 32 or 64.<br>\nThe misunderstanding comes from thinking Wasm probably works like old 32-bit CPUs, but it doesn't work like that.<br>\nWasm is designed to run on 64 bit machines but use small amounts of memory. So it has math ops for 64-bit but only pointer ops for 32-bit.<br>\nSo this should not be happening and it is a bug.</p>",
        "id": 407786214,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1702491759
    },
    {
        "content": "<p>Interesting! With that in mind, what is the most helpful thing I can do with this new test?</p>",
        "id": 407789753,
        "sender_full_name": "Bryce Miller",
        "timestamp": 1702493114
    }
]