[
    {
        "content": "<p>I saw that in the 'TUTORIAL.md', the part about Phantom Types has not been written yet.<br>\nIf you want, I can spend some time drafting something for this section.<br>\nIs there anything special to be aware w.r.t. phantom types (i.e. are there differences in their basic usage vs. how they are used in Haskell?)<br>\nI am aware that the various number types are aliases for Num (Integer Signed64)` etc., and should probably name them in that section.</p>\n<p>Anything else? <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 286041852,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1655197584
    },
    {
        "content": "<p>I actually have a WIP there, just haven't polished it up and added it <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 286065732,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1655210882
    },
    {
        "content": "<p>the way phantom types worked changed between when the tutorial was originally written and today, so I need to update it for that</p>",
        "id": 286065792,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1655210901
    },
    {
        "content": "<p>I appreciate the offer though!</p>",
        "id": 286065810,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1655210907
    },
    {
        "content": "<p>Yeah, no worries! I'll find something else to work on. There is enough to do after all <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 286066897,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1655211375
    },
    {
        "content": "<p>In last week's meeting <span class=\"user-mention\" data-user-id=\"364014\">@Georges Boris</span> was looking for some things to contribute related to documentation.<br>\nBelow are some suggestions. Other people are welcome to join in on this or make their own docs-related suggestions.</p>\n<ul>\n<li>\n<p>Better builtin searching: to help you find the builtin for the operation you have in mind. If you type in <code>foldr</code>, it would return <code>walkBackwards</code>, other examples: <code>Hashmap get</code>-&gt;<code>Dict.get</code>, <code>zip list</code>-&gt;<code>List.map2</code>, <code>List filter</code>-&gt;<code>List.keepIf</code>. To get started, I thought we should add an \"alias list\" to doc comments of builtin functions where this is useful, e.g.: <code>## alias: [fold,foldr]</code>. Next up we make the search function on the builtin website use these aliases. I've discussed something similar with <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span>  but I don't think he has started on that yet.</p>\n</li>\n<li>\n<p>Make a Tree Sitter Grammer (issue #4468) for syntax highlighting of:<br>\n    + roc code in the legacy editing mode of the editor<br>\n    + documentation on the web and inside the editor<br>\n  For this one, we probably want to pair up at the start.</p>\n</li>\n<li>\n<p>Research on defining a roc notebook file format.</p>\n</li>\n</ul>",
        "id": 311418539,
        "sender_full_name": "Anton",
        "timestamp": 1669047784
    },
    {
        "content": "<p>I actually tried a very simple version of #1 (instead of an \"alias list\") which you can check out already if you search the builtins for <code>foldr</code></p>",
        "id": 311431272,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1669051752
    },
    {
        "content": "<p>I want to see if that solves the problem without doing a more complex solution first!</p>",
        "id": 311431310,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1669051769
    },
    {
        "content": "<p>This \"different names\" table definitely helps, but I think the UX would be better if you type <code>foldr</code> in the search bar and you immediately get shown <code>walkBackwards</code> instead of needing to click the <code>Some names</code> link and having to search again in the table. I believe a decent percentage of users will also not click the <code>Some names</code> link if they get no results.</p>\n<p>I also like creating the convention of an alias list because making docs easier to search helps fulfill the inherent goal of documentation.</p>",
        "id": 311434043,
        "sender_full_name": "Anton",
        "timestamp": 1669052686
    },
    {
        "content": "<p>yeah so that was my initial plan, but when I thought about a specific implementation I realized some UX concerns</p>",
        "id": 311435034,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1669053025
    },
    {
        "content": "<p>for example, let's say I want to search for <code>reduce</code> docs and so I start typing <code>re</code> and I see one search result: <code>reverse</code>. So I think \"oh it doesn't have <code>reverse</code>...uh, now what?\"</p>",
        "id": 311435297,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1669053113
    },
    {
        "content": "<p>we could fix that by making the rule be \"always search aliases too, and show them at the bottom\" - e.g. every time I search for <code>re</code> I see not just <code>List.reverse</code> but also \"<code>reduce</code> is like <code>walk</code>\" below that, along with any other aliases that start with <code>re</code></p>",
        "id": 311435598,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1669053214
    },
    {
        "content": "<p>that seems like it would work, but now we're showing a long list of usually unhelpful results for everyone forever, in order to provide extra help to people who are just starting out</p>",
        "id": 311436128,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1669053317
    },
    {
        "content": "<p>and I can see myself as a beginner preferring to have just one extra link instead</p>",
        "id": 311436447,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1669053425
    },
    {
        "content": "<p>like the UX is not quite as nice in the moment, but it gives me the information - and then long term it's this static piece of text that's always the same, so my brain will pretty quickly filter it out</p>",
        "id": 311436568,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1669053471
    },
    {
        "content": "<p>taking advantage of \"banner blindness\" <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 311436663,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1669053497
    },
    {
        "content": "<p>I'm totally open to the possibility that the alias design is better, but since this design is simpler and I honestly think I would personally prefer it long term even if I were a beginner, I want to try it out and see what actual beginners think of it in practice!</p>",
        "id": 311436906,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1669053594
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 311439048,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1669054304
    },
    {
        "content": "<p>I'm not sure if you have ever used <a href=\"http://aplcart.info\">APL cart</a> or <a href=\"http://mlochbaum.github.io/bqncrate\">BQN crate</a>, but they are super useful (even as you become more advanced) and very similar to what you described above. You type a search term. They will show you that exact term or aliases that are similar. Each description is specific and doesn't no just give an alias table. Instead it tries to show you things that match what you want or close to it.</p>\n<p>On main difference is that it is for larger (though still small) code snippets as well as specific function documentation.</p>",
        "id": 311439715,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1669054549
    },
    {
        "content": "<p>I think a similar tool, especially with code snippets for common conversions would be amazingly useful (though it may fit best as a separate tool rather than directly in the docs).</p>\n<p>For example, if i were to type <code>fold</code>, it might show all of the walk related functions. If the roc equivalent was slightly different in semantics, it might even give a short function definition of how someone could get a more canonical <code>fold</code> implementation using roc builtins. It would not directly mention other names/implementations, but it would describe what it does and try to be clear so you don't need exact reference names (especially since they might be slightly different in semantics).</p>",
        "id": 311440549,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1669054834
    },
    {
        "content": "<p>huh, very interesting! I was not aware of those tools</p>",
        "id": 311442080,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1669055311
    },
    {
        "content": "<p>what makes them useful as you get more advanced? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 311442122,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1669055326
    },
    {
        "content": "<blockquote>\n<p>what makes them useful as you get more advanced? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>\n</blockquote>\n<p>I would guess it can be a lot faster than typing it yourself.</p>",
        "id": 311444543,
        "sender_full_name": "Anton",
        "timestamp": 1669056133
    },
    {
        "content": "<p>Thanks for sharing this <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span>, I had something similar planned for the editor. I'll make sure to add it to the inspiration list on the repo.</p>",
        "id": 311444811,
        "sender_full_name": "Anton",
        "timestamp": 1669056239
    },
    {
        "content": "<blockquote>\n<p>what makes them useful as you get more advanced? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>\n</blockquote>\n<ol>\n<li>for APL specifically, it gives you a lot of more complex algorithms as snippets. Would take a lot more thinking to generate them correctly and efficiently. I think code snippets would have to get decently large in Roc to do the equivalent. (Mostly due to lambdas and when clauses)</li>\n<li>Still thinking in other languages for names sometimes. This means you can't always find the right thing in the standard if you don't exactly remember it.</li>\n<li>It still is a form of standard library reference. </li>\n<li>Great to link to when sharing with/teaching others.</li>\n</ol>",
        "id": 311447729,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1669057218
    },
    {
        "content": "<blockquote>\n<p>that seems like it would work, but now we're showing a long list of usually unhelpful results for everyone forever, in order to provide extra help to people who are just starting out</p>\n</blockquote>\n<p>Working with different colors could make this matter less. We could also not show aliases for partial matches. I don't know how often people would actually only type <code>red</code> from <code>reduce</code> and wait for results because the names are all pretty short, so you would just type them completely. I think people are used to ignoring text when there are no results because it is rarely helpful. Usually, it is something like \"ensure the spelling is correct\" . I do appreciate simple solutions and am willing to wait for beginner feedback.</p>",
        "id": 311447913,
        "sender_full_name": "Anton",
        "timestamp": 1669057278
    },
    {
        "content": "<p>This happened to remind me of another task suggestion; setting up an advent of code document/cheatsheet. I'd presume this would contain mostly links for e.g.: builtin documentation, cli platform documentation, zulip, repo's of others with AoC solutions from last year...</p>",
        "id": 311447919,
        "sender_full_name": "Anton",
        "timestamp": 1669057279
    },
    {
        "content": "<p>An alternative perspective, maybe we can improve the docs experience so this becomes less of an issue.</p>\n<p>I have found the std lib to be easy to pickup and there was only a couple of funtions named something different which I had to look up. After using Roc for a short while I've not had any issues finding the right function. </p>\n<p>Instead I find the current docs hard to navigate. I suggested the quick search function which I find really helps, but that only half solves the problem. It's still difficult to see all the functions in a module. I think this is because they are stacked vertically and expanded with all the detail. One idea I had was to display a table or list of just the names at the top of the file which link to the detail. </p>\n<p>I'm not the best with UX design, but I feel there is more we could do to improve the current experience which may reduce the need for alternate name search or mapping? </p>\n<p>Aside, Tui platform is almost good enough to build this into an Roc demo app. I was still planning on building this as one of the examples that also is useful.</p>",
        "id": 311449435,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1669057819
    },
    {
        "content": "<blockquote>\n<p>I'm not the best with UX design, but I feel there is more we could do to improve the current experience which may reduce the need for alternate name search or mapping?</p>\n</blockquote>\n<p>I think they are two tangential problems. I 100% agree that better UX would make life a lot easier for everyone. I still think there is a lot of value in something like APL cart. Many people use multiple languages and everyone (who isn't 100% new to programming) will come from a background with different names. No matter how well we name a function, there will be conflicting names that people expect, or arguably worse, the same name with different semantics.</p>",
        "id": 311450253,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1669058127
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> I see, two distinct problems we are talking about here. I think another dimension is the target audience; this feature sounds important for those who work mostly in other languages. If there is a solution that also supports beginners, and more experienced Roc programmers than that would be nice too.</p>\n<p>APL crate looks cool, it reminds me of Github <a href=\"https://github.com/features/copilot\">copilot</a>. It seems like a soft problem where AI could be well suited as an assistant.</p>",
        "id": 311462533,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1669059978
    },
    {
        "content": "<p>The UX bit is something I'm planning on working in the short term.</p>",
        "id": 311468660,
        "sender_full_name": "Georges Boris",
        "timestamp": 1669062320
    },
    {
        "content": "<p>Has anyone made a start on tree sitter parser for Roc?</p>",
        "id": 311519144,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1669093934
    },
    {
        "content": "<p>Not that I know of, if I recall correctly the TS parser can be generated from a TS grammar for which <a href=\"https://github.com/roc-lang/roc/blob/ed82e80a2b502fa7f6b9273f30ef7da45bc61a42/crates/highlight/tests/peg_grammar.rs\">crates/highlight/tests/peg_grammar.rs</a> will be an excellent starting point. I'm up for pairing on this :)</p>",
        "id": 311540633,
        "sender_full_name": "Anton",
        "timestamp": 1669105599
    },
    {
        "content": "<blockquote>\n<p>APL crate looks cool, it reminds me of Github copilot. It seems like a soft problem where AI could be well suited as an assistant.</p>\n</blockquote>\n<p>The AI model for Github copilot is big, which is why they price it at 10$ a month. There is also very little roc code to train(or re-train) a model on. I think with a tool similar to APL cart and a non-AI algorithm to find code with a similar AST as the block of code you are currently writing, we can offer a similar experience that everyone can easily run locally.</p>",
        "id": 311543158,
        "sender_full_name": "Anton",
        "timestamp": 1669106459
    },
    {
        "content": "<p>I think the <a href=\"https://www.roc-lang.org/builtins/List#takeFirst\">doc examples for <code>List.takeFirst</code> and <code>List.takeLast</code></a> have reversed argument order</p>",
        "id": 313432894,
        "sender_full_name": "Andy Kluger",
        "timestamp": 1669961543
    },
    {
        "content": "<p>Thanks for alerting us <span class=\"user-mention\" data-user-id=\"565380\">@Andy Kluger</span>, I'll update that :)</p>",
        "id": 313453746,
        "sender_full_name": "Anton",
        "timestamp": 1669971927
    }
]