[
    {
        "content": "<p>According to the <a href=\"https://github.com/github-linguist/linguist/tree/main/vendor\">vendor list for linguist</a> (which is GitHub's syntax highlighting lib), we can use tree sitter for our GitHub syntax, which would keep everything aligned with the tool most users rely on for syntax highlighting. We currently use the <a href=\"https://github.com/ivan-demchenko/roc-vscode-unofficial\">VSCode Roc highlighting</a> which I think gets less love.</p>",
        "id": 495793752,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737753183
    },
    {
        "content": "<p>We definitely need that treesitter grammar to be updated</p>",
        "id": 495793814,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737753212
    },
    {
        "content": "<p>I'm biased for tree-sitter being a Helix user, but also because it seems like the more future-facing technology</p>",
        "id": 495793817,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737753214
    },
    {
        "content": "<p>I have some experience with TS, but <span class=\"user-mention\" data-user-id=\"651372\">@Eli Dowling</span> owns the repo I think and is on vacation</p>",
        "id": 495793842,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737753233
    },
    {
        "content": "<p>Yes, we'd want to update the tree-sitter-roc grammar to point at all the syntax features we want for the foreseeable future</p>",
        "id": 495793900,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737753246
    },
    {
        "content": "<p>Yeah TM grammars are not the future</p>",
        "id": 495793909,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737753249
    },
    {
        "content": "<p>It should become a roc-lang repo</p>",
        "id": 495793935,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737753265
    },
    {
        "content": "<p>And then we would make a PR to GitHub to point at the updated commit hash of tree-sitter-roc</p>",
        "id": 495793942,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737753268
    },
    {
        "content": "<p>GitHub makes releases of linguist every few months, and the last one was at the end of November, so if we update by mid-February we can probably get this done</p>",
        "id": 495794038,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737753314
    },
    {
        "content": "<p>I agree that it should be an official Roc repo</p>",
        "id": 495794071,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737753329
    },
    {
        "content": "<p>Maybe someone with a more holistic vision than of the planned syntax could write down a set of what we'd need to highlight, even informally</p>",
        "id": 495794197,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737753385
    },
    {
        "content": "<p>And then it wouldn't be so bad to update the tree-sitter grammar given that kind of list</p>",
        "id": 495794220,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737753397
    },
    {
        "content": "<p>I think that's reasonable. And yes, I'm on vacation. I'll be ending that by late February though.<br>\nThe syntax will need some pretty low level changes for the PNC syntax. But that will be the hardest part. It's much simpler than the current calling syntax in many ways though.</p>",
        "id": 495794483,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1737753532
    },
    {
        "content": "<p>It would be worth making it support the for syntax as well and just putting it behind an ifdef for now. <br>\nI agree with <span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> about getting a list of all planned syntax changes and then making ts ahead of what's actually implemented in the roc compiler.</p>",
        "id": 495794768,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1737753666
    },
    {
        "content": "<p>Unfortunately we need to support both whitespace for types and parens for values</p>",
        "id": 495794773,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737753669
    },
    {
        "content": "<p>Yep, <code>for</code>, <code>var</code>, <code>reassignable_</code> variables, etc.</p>",
        "id": 495794834,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737753704
    },
    {
        "content": "<p>I have some time today to work on the TS grammar. I'll make some corpus entries from the real-world example repo that <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> made and then work on getting the syntax right. </p>\n<p>One of the big areas we could work on first is starting a new corpus that has nice, simple examples of the new features. </p>\n<p>As I said I'll use the realworld repo to try to rough out what the changes should be to the grammar</p>",
        "id": 495863435,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1737805379
    },
    {
        "content": "<p>Awesome! I can try to put together some such syntax examples</p>",
        "id": 495863476,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737805429
    },
    {
        "content": "<p>It feels like having an official, tested syntax definition might help here as well</p>",
        "id": 495863527,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737805450
    },
    {
        "content": "<p>I started working on a <a href=\"https://docs.rs/pest/latest/pest/\">https://docs.rs/pest/latest/pest/</a> definition for Roc earlier, but it feels like it's just gonna be another dependency we'd try to remove eventually</p>",
        "id": 495863555,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737805498
    },
    {
        "content": "<p>I wonder if there's some simple specification for a grammar we could implement ourselves</p>",
        "id": 495863577,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737805517
    },
    {
        "content": "<p>Though maybe a dependency like <code>pest</code> that we only use for testing and LSP/tree-sitter coherence wouldn't be such a bad thing to pull in</p>",
        "id": 495863605,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737805548
    },
    {
        "content": "<p>Is a pest definition going to be more understandable than a treesitter definition?</p>",
        "id": 495863710,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1737805634
    },
    {
        "content": "<p>I don't think so...</p>",
        "id": 495863734,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737805664
    },
    {
        "content": "<p>I think it's a PEG-adjacent grammar that we could test both our custom parser <em>and</em> tree-sitter against (probably)</p>",
        "id": 495863797,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737805684
    },
    {
        "content": "<p>We used pest in the past</p>",
        "id": 495863809,
        "sender_full_name": "Anton",
        "timestamp": 1737805695
    },
    {
        "content": "<p>Whatever tool would fill the behavior would be great</p>",
        "id": 495863817,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737805703
    },
    {
        "content": "<p>I think the new tutorial has plenty of small examples of new syntax, as well as the new release of roc-lang/examples</p>",
        "id": 495863853,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737805746
    },
    {
        "content": "<p>ocaml has what I'd consider the best syntax docs. They have these fancy (I asssume autogenerated) syntax specs.<br>\ntake this:<br>\n<a href=\"https://ocaml.org/manual/5.3/bindingops.html\">https://ocaml.org/manual/5.3/bindingops.html</a></p>",
        "id": 495863857,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1737805750
    },
    {
        "content": "<p>Here's the source for that page: <a href=\"https://github.com/ocaml/ocaml/blob/trunk/manual/src/refman/extensions/bindingops.etex\">https://github.com/ocaml/ocaml/blob/trunk/manual/src/refman/extensions/bindingops.etex</a></p>",
        "id": 495863942,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737805807
    },
    {
        "content": "<p>or their docs on what an expression is:<br>\n<a href=\"https://ocaml.org/manual/5.3/expr.html\">https://ocaml.org/manual/5.3/expr.html</a></p>",
        "id": 495863945,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1737805809
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/channel/316715-contributing/topic/Use.20tree-sitter-roc.20for.20GH.20grammar/near/495863809\">said</a>:</p>\n<blockquote>\n<p>We used pest in the past</p>\n</blockquote>\n<p>This is not the latest version of the file but here's the link: <a href=\"https://github.com/roc-lang/roc/pull/2675/files#diff-490af2dd8e5b9915ae07391871ab6575a352e10294bc3d90f4d05e7328aab278\">https://github.com/roc-lang/roc/pull/2675/files#diff-490af2dd8e5b9915ae07391871ab6575a352e10294bc3d90f4d05e7328aab278</a></p>",
        "id": 495863991,
        "sender_full_name": "Anton",
        "timestamp": 1737805864
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/channel/316715-contributing/topic/Use.20tree-sitter-roc.20for.20GH.20grammar/near/495863942\">said</a>:</p>\n<blockquote>\n<p>Here's the source for that page: <a href=\"https://github.com/ocaml/ocaml/blob/trunk/manual/src/refman/extensions/bindingops.etex\">https://github.com/ocaml/ocaml/blob/trunk/manual/src/refman/extensions/bindingops.etex</a></p>\n</blockquote>\n<p>Oh well, maybe it's not autogenerated.... shame</p>",
        "id": 495864023,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1737805901
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"651372\">@Eli Dowling</span> if we could generate something like those docs from some PEG-adjacent grammar, that'd be great</p>",
        "id": 495864031,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737805912
    },
    {
        "content": "<p>This isn't a topic I know a whole lot about but :<br>\n<a href=\"https://github.com/matthijsgroen/ebnf2railroad\">https://github.com/matthijsgroen/ebnf2railroad</a><br>\nAnd it seems there are a number of parser generators that take EBNF as input it seems the most standardised. Could be a good choice as a way to generate some docs and also a reference implementation that while maybe slow could be used to compare against the rust and TS implementations and provide a spec</p>\n<p><a href=\"https://www.researchgate.net/publication/376883410_Comparison_of_Leading_Language_Parsers_-_ANTLR_JavaCC_SableCC_Tree-sitter_Yacc_Bison\">https://www.researchgate.net/publication/376883410_Comparison_of_Leading_Language_Parsers_-_ANTLR_JavaCC_SableCC_Tree-sitter_Yacc_Bison</a></p>",
        "id": 495864894,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1737806567
    },
    {
        "content": "<p>I think this is a good thing to explore, but syntax highlighting grammar != actual parsing grammar</p>",
        "id": 495866865,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737808121
    },
    {
        "content": "<p>Yep</p>",
        "id": 495867139,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737808343
    },
    {
        "content": "<p>Something it'd be nice to enable for the future is easy, safe codegen</p>",
        "id": 495867163,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737808374
    },
    {
        "content": "<p>Without a macro system, we need codegen for stuff like gRPC and DB access interfacing</p>",
        "id": 495867185,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737808404
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> <a href=\"#narrow/channel/316715-contributing/topic/Use.20tree-sitter-roc.20for.20GH.20grammar/near/495866865\">said</a>:</p>\n<blockquote>\n<p>I think this is a good thing to explore, but syntax highlighting grammar != actual parsing grammar</p>\n</blockquote>\n<p>Sure but from a testing standpoint, if the syntax grammar ever rejects anything the parsing grammar accepts we have an issue</p>",
        "id": 495867191,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1737808414
    },
    {
        "content": "<p>I want something that everyone can point at for \"correctness\"</p>",
        "id": 495867255,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737808446
    },
    {
        "content": "<p>But doing good error handling in PEG grammars can't compare to what we have today</p>",
        "id": 495867272,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737808468
    },
    {
        "content": "<p><a href=\"https://github.com/faldor20/tree-sitter-roc/new-syntax\">https://github.com/faldor20/tree-sitter-roc/new-syntax</a><br>\nI made a tiny start, but got a bit bogged down in nix stuff trying to update tree-sitter on my terrible train wifi <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 495875644,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1737815458
    },
    {
        "content": "<p>I might get some more train time, but otherwise I'll finish it when I'm more free in a month.</p>",
        "id": 495875770,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1737815549
    },
    {
        "content": "<p>I'm not very familiar with tree sitter, but I can try to work on it too</p>",
        "id": 495876189,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737815891
    },
    {
        "content": "<p>Would you have time to review on vacation if you didn't have to write it?</p>",
        "id": 495876200,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737815915
    },
    {
        "content": "<p>Please feel free to say no</p>",
        "id": 495876210,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737815923
    },
    {
        "content": "<p>yeah, for for sure. I can definitely carve out the time for that. <br>\nHonestly If you're not familiar with TS working on the test corpus would be the biggest help. <br>\nI can crank out the changes to TS, but I'm not familiar enough with the changes to roc to know exactly what needs doing. <br>\nHaving a list of changes and a test corpus to make the changes against would be amazing.</p>",
        "id": 495876358,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1737816022
    },
    {
        "content": "<p>Any particular format for the test corpus?</p>",
        "id": 495876395,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737816067
    },
    {
        "content": "<p>Presumably just a list of Roc snippets</p>",
        "id": 495876408,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737816078
    },
    {
        "content": "<p>Without their TS S expression translation</p>",
        "id": 495876421,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737816090
    },
    {
        "content": "<p>I suspect you or others a little more dialled into the current roc changes would be much quicker at the sorting out the corpus and I'd probably be quicker at doing the TS changes, so we may as well work together</p>",
        "id": 495876422,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1737816090
    },
    {
        "content": "<p>take a look at the existing corpus</p>",
        "id": 495876427,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1737816103
    },
    {
        "content": "<p>Yeah, I think I know what everything will look like</p>",
        "id": 495876435,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737816113
    },
    {
        "content": "<p>Don't bother with the s-expressions. I'll just be checking that the generated expressions have no errors and look reasonable and I'll accept whatever TS generates.</p>",
        "id": 495876500,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1737816159
    },
    {
        "content": "<p>Okay</p>",
        "id": 495876513,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737816173
    },
    {
        "content": "<p>you can omit the output part of the corpus and just add the samples, then tree-sitter will insert all the s-expressions when we accept the test output as good</p>",
        "id": 495876539,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1737816198
    },
    {
        "content": "<p>I'll ping you if/when I get to this. Should be this weekend, but I've suggested I'll be doing like 4 things so we'll see which of them happen...</p>",
        "id": 495876552,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737816213
    },
    {
        "content": "<p>no worries at all.</p>\n<p>My one suggestion is format the test names as <code>category_less_specific_name_</code><br>\nthat makes it easy to filter  and run a small subset of tests:<code>tree-sitter test -t func_def</code></p>",
        "id": 495876678,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1737816306
    },
    {
        "content": "<p>Just like we do with the compiler tests, got it</p>",
        "id": 495876731,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737816361
    },
    {
        "content": "<p>I like to build each group of tests starting with a super basic test that's really short and then building up to much longer more complex ones, but I think you know what you're doing :)</p>",
        "id": 495876933,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1737816488
    },
    {
        "content": "<p>feel free to reuse the existing tests, I just copied them all to old_corpus so we can be intenional about what is compatible and what isn't</p>",
        "id": 495876955,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1737816517
    },
    {
        "content": "<p>I appreciate the reminder!</p>",
        "id": 495876957,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737816521
    },
    {
        "content": "<p>It's good to reinforce shared knowledge</p>",
        "id": 495876973,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737816533
    },
    {
        "content": "<p>Why not just make a platform that uses the actual roc parser as a library? </p>\n<p>I was talking with Josh Warner about this and we made a bit of a start on that. He has some ideas he was cooking. </p>\n<p>I guess fuzzing has been the priority rn.</p>",
        "id": 495894053,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1737829737
    },
    {
        "content": "<p>Update on this: <br>\nI added a couple more features (new string interpolation, PNC calling and static dispatch calling ), and added some very basic corpus tests for them.</p>",
        "id": 495902831,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1737837194
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/channel/316715-contributing/topic/Use.20tree-sitter-roc.20for.20GH.20grammar/near/495894053\">said</a>:</p>\n<blockquote>\n<p>Why not just make a platform that uses the actual roc parser as a library? </p>\n<p>I was talking with Josh Warner about this and we made a bit of a start on that. He has some ideas he was cooking. </p>\n<p>I guess fuzzing has been the priority rn.</p>\n</blockquote>\n<p>This generally makes sense, but there are two problems that it'd be interested to find a solution to:</p>\n<ul>\n<li>interfacing with the platform is always effectful, even if the operation on the platform side is pure.</li>\n<li>If we pass a string to <code>roc_parse</code> and it parses an AST node, how do we access that arena-allocated syntax tree if not with a lot of indirection. Would we copy the whole thing into Roc recursively?</li>\n</ul>\n<p>If those problems can be mitigated, then this solution makes sense</p>",
        "id": 495906148,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737839961
    },
    {
        "content": "<p>Yeah I think the idea was to serialise and deserialise the AST.</p>",
        "id": 495908371,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1737842198
    },
    {
        "content": "<p>What's the connection between tree-sitter / GH grammar and the \"roc ast platform\" thing (for lack of a better name)?</p>",
        "id": 496916137,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738297542
    },
    {
        "content": "<p>Is that just the ast serialization?</p>",
        "id": 496916203,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738297567
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/channel/316715-contributing/topic/Use.20tree-sitter-roc.20for.20GH.20grammar/near/495867185\">said</a>:</p>\n<blockquote>\n<p>Something it'd be nice to enable for the future is easy, safe codegen<br>\nWithout a macro system, we need codegen for stuff like gRPC and DB access interfacing</p>\n</blockquote>\n<p>Things like this</p>",
        "id": 496916313,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738297676
    },
    {
        "content": "<p>So I took that to mean, we want a way to parse roc code, to get an AST we can do interesting things with</p>",
        "id": 496916511,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738297806
    },
    {
        "content": "<p>Ahh, so that kinda sounds like the reverse - you'd have a roc platform that is 100% sandboxed, and only has a single <code>main: Ast</code> (or perhaps <code>main: {} -&gt; Ast</code>) it exposes, where it's expected to <code>import</code> any source files it needs as str/byte literals, run, and then spit out the generated code</p>",
        "id": 496916767,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738298022
    },
    {
        "content": "<p>Something like that, yeah</p>",
        "id": 496934622,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738303339
    }
]