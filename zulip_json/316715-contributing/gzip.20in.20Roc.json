[
    {
        "content": "<p>It would be nice to be able to compress responses with gzip in basic-webserver. I know this could be implemented by the platform, but it seems like it would be nice to have a pure Roc implementation of gzip so it could be reused and would not have to be exposed across multiple platforms. Does that sound right? Is there anything else I should be thinking about?</p>",
        "id": 430190956,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1711678640
    },
    {
        "content": "<p>That sounds right to me. I have no idea how complicated that would be to implement though</p>",
        "id": 430193357,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1711680518
    },
    {
        "content": "<p>Sounds pretty reasonable. Always a little concerned about fine grain byte twiddling that might happen. Cause this should be solid perf in roc, but if it is running on every single web request, the extra perf from platform langauges feels nice too.</p>",
        "id": 430193413,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711680580
    },
    {
        "content": "<p>Like 3% slower web requests can actually lead to a much earlier slump under load.</p>",
        "id": 430193496,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711680626
    },
    {
        "content": "<p>Right that makes sense. Even if some platforms choose to expose an implementation from another language, it would still be nice to have one implemented in Roc for other use cases</p>",
        "id": 430193578,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1711680708
    },
    {
        "content": "<p>I think it's totally worth it for a lot of applications. If perf is a concern you can always pass that off to the platform. </p>\n<p>Maybe this would be a good package to think about for roc performance tooling?</p>",
        "id": 430193583,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1711680711
    },
    {
        "content": "<p>Yeah, I definitely think we can close most of the gap. Just still can be a high cost when thinking about scale...the fun of scale.</p>",
        "id": 430193838,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711680870
    },
    {
        "content": "<p>But yeah would be useful.</p>",
        "id": 430193840,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711680876
    },
    {
        "content": "<p>Also, basic compression might be useful for the book, but idk.</p>",
        "id": 430193851,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711680888
    },
    {
        "content": "<blockquote>\n<p>Also, basic compression might be useful for the book, but idk.</p>\n</blockquote>\n<p>I was thinking the same thing. Do you know of any good algorithms that would be reasonable in scope?</p>",
        "id": 430193928,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1711680958
    },
    {
        "content": "<p>Probably best would be one of the super simple cores of the lz algorithms that is basically a windowed lookup.</p>",
        "id": 430194057,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711681045
    },
    {
        "content": "<p>Though maybe that is less applicable to general users than parsers and things of that nature</p>",
        "id": 430194073,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711681063
    },
    {
        "content": "<p>I think it could still definitely fit because devs use compression all the time but I would guess frequently don't know that much about how it works under the hood</p>",
        "id": 430194220,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1711681126
    },
    {
        "content": "<p>fair</p>",
        "id": 430194563,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711681269
    },
    {
        "content": "<p>I would probably target LZ77</p>",
        "id": 430194598,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711681301
    },
    {
        "content": "<p>maybe slightly simplified if needed</p>",
        "id": 430194621,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711681318
    },
    {
        "content": "<p>I believe gzip uses LZ77 so that's nice too</p>",
        "id": 430194698,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1711681354
    },
    {
        "content": "<p>IIRC, It uses deflate which has a ton more on top of it.</p>",
        "id": 430194743,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711681398
    },
    {
        "content": "<p>eh, not a ton, but definitely a solid bit more complex</p>",
        "id": 430194769,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711681441
    },
    {
        "content": "<p>Right, I'm just saying its a component of it</p>",
        "id": 430194895,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1711681545
    },
    {
        "content": "<p>If it is compressed in roc using LZ77, could another program detect that and decompress it?</p>",
        "id": 430195095,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1711681693
    },
    {
        "content": "<p>I don't think you would be able to detect it automatically, but another program could definitely decompress it if it knows the format from the get go</p>",
        "id": 430195994,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1711682506
    },
    {
        "content": "<p>I created an issue for the book here: <a href=\"https://github.com/roc-lang/book-of-examples/issues/48\">https://github.com/roc-lang/book-of-examples/issues/48</a></p>",
        "id": 430196007,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1711682517
    },
    {
        "content": "<p>With a header, you probably could lie about Huffman encoding and some how get gzip to do it....otherwise a decode for lz77 is also very simple</p>",
        "id": 430196112,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711682612
    },
    {
        "content": "<p>Just found <span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span>'s <a href=\"https://github.com/folkertdev/elm-tiny-inflate\">elm-tiny-inflate</a> which implements deflate.</p>",
        "id": 430197199,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1711683427
    },
    {
        "content": "<p>Also maybe relevant, <span class=\"user-mention\" data-user-id=\"452038\">@Shritesh Bhattarai</span>  implemented the CRC32 and Adler32 in <a href=\"https://github.com/shritesh/roc-image/blob/main/package/Image.roc#L146\">roc-image</a>.</p>",
        "id": 430197321,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1711683567
    },
    {
        "content": "<p>Cool! I know crc32 is also needed for gzip</p>",
        "id": 430197428,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1711683652
    },
    {
        "content": "<p>I've also been working on <a href=\"https://github.com/memorysafety/zlib-rs\">https://github.com/memorysafety/zlib-rs</a> recently, so I'm quite familiar with the implementation details</p>",
        "id": 430227812,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1711704615
    },
    {
        "content": "<p>though it's hard to strike a balance here between simplicity and efficiency</p>",
        "id": 430228084,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1711704763
    }
]