[
    {
        "content": "<p>The following code will crash when running <code>roc test</code>, but not when running <code>roc check</code> or <code>build</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code>app &quot;Roc_99_Problems&quot;\n    packages { pf: &quot;https://github.com/roc-lang/basic-cli/releases/download/0.5.0/Cufzl36_SnJ4QbOoEmiJ5dIpUxBvdB3NEySvuH82Wio.tar.br&quot; }\n    imports [pf.Stdout]\n    provides [main] to pf\n\nmain =\n    Stdout.line &quot;Running `roc test` crashes this code&quot;\n\nfail : List Str -&gt; List List Str\nfail = \\_list -&gt; [[], []]\nexpect fail [&quot;a&quot;,&quot;b&quot;] == [[&quot;a&quot;], [&quot;b&quot;]]\n</code></pre></div>\n<p>The crash looks like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;main&#39; panicked at &#39;Error in alias analysis: error in module ModName(&quot;UserApp&quot;), function definition FuncName(&quot;\\x11\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x87h\\xb9Z\\xedHc\\x19&quot;), definition of value binding ValueId(13): expected type &#39;(heap_cell, bag&lt;(heap_cell,)&gt;)&#39;, found type &#39;(heap_cell, bag&lt;()&gt;)&#39;&#39;, crates/compiler/gen_llvm/src/llvm/build.rs:5744:19\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>\n<p>The <code>fail</code> function is just a dummy implementation, but it is important that it returns a <em>nested</em> list of lists. Using a non-nested structure correctly fails the test, as expected.  Using another type other than <code>Str</code> will also not crash and simply fail the test as expected.</p>\n<p>I've tried a couple variations of this, including doing the<code>==</code> test without an expect, and that fails the exact same way, so I'd figure that the error is in the <code>==</code> implementation itself.</p>",
        "id": 408724222,
        "sender_full_name": "Lucas Culverhouse",
        "timestamp": 1702951448
    },
    {
        "content": "<p>Here is a full backtrace as well:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ RUST_BACKTRACE=full roc test\nthread &#39;main&#39; panicked at &#39;Error in alias analysis: error in module ModName(&quot;UserApp&quot;), function definition FuncName(&quot;\\x11\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x87h\\xb9Z\\xedHc\\x19&quot;), definition of value binding ValueId(13): expected type &#39;(heap_cell, bag&lt;(heap_cell,)&gt;)&#39;, found type &#39;(heap_cell, bag&lt;()&gt;)&#39;&#39;, crates/compiler/gen_llvm/src/llvm/build.rs:5744:19\nstack backtrace:\n   0:     0x55eab1fa62c1 - &lt;std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display&gt;::fmt::hbd7d55b7108d2ab8\n   1:     0x55eab1fd3b8f - core::fmt::write::h6d54cd7c9e155ec5\n   2:     0x55eab1fa1a21 - std::io::Write::write_fmt::h6a453a71c692f63b\n   3:     0x55eab1fa60d5 - std::sys_common::backtrace::print::h4ddf81241a51b337\n   4:     0x55eab1fa7757 - std::panicking::default_hook::{{closure}}::hff91f1f484ade5cd\n   5:     0x55eab1fa7544 - std::panicking::default_hook::h21f14afd59f7aef9\n   6:     0x55eab1fa7c0c - std::panicking::rust_panic_with_hook::h45f66047b14c555c\n   7:     0x55eab1fa7b07 - std::panicking::begin_panic_handler::{{closure}}::h49d1a88ef0908eb4\n   8:     0x55eab1fa66f6 - std::sys_common::backtrace::__rust_end_short_backtrace::hccebf9e57f8cc425\n   9:     0x55eab1fa7852 - rust_begin_unwind\n  10:     0x55eaaf3effd3 - core::panicking::panic_fmt::h54ec9d0e3180a83d\n  11:     0x55eaaf6f3752 - roc_gen_llvm::llvm::build::build_procedures_help::h3bdbf853df53af30\n  12:     0x55eaaf6ecb58 - roc_gen_llvm::llvm::build::build_procedures_expose_expects::h472e9cfdc7ef043d\n  13:     0x55eaaf60b70d - roc_repl_expect::run::expect_mono_module_to_dylib::h1ae11cd75ea6252c\n  14:     0x55eaaf5ea6c6 - roc_cli::test::h40d1fa4542d423a5\n  15:     0x55eaaf4d627b - roc::main::h8c0286bbf2fcf86b\n  16:     0x55eaaf4cb823 - std::sys_common::backtrace::__rust_begin_short_backtrace::ha2e31af2549d8703\n  17:     0x55eaaf4cb8e3 - std::rt::lang_start::{{closure}}::h1a31ddf22b52a3d4\n  18:     0x55eab1f98535 - std::rt::lang_start_internal::hf502095b101390bb\n  19:     0x55eaaf4d84e5 - main\n  20:     0x7fabc863dace - __libc_start_call_main\n  21:     0x7fabc863db89 - __libc_start_main@@GLIBC_2.34\n  22:     0x55eaaf4ca625 - _start\n  23:                0x0 - &lt;unknown&gt;\n</code></pre></div>",
        "id": 408724344,
        "sender_full_name": "Lucas Culverhouse",
        "timestamp": 1702951498
    },
    {
        "content": "<p>If you use that function in main instead of in the expect, will it fail with <code>roc build</code>?</p>\n<p>Like use the expect as an if condition?</p>",
        "id": 408726990,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702952506
    },
    {
        "content": "<p>Yes it also fails in that case</p>",
        "id": 408747826,
        "sender_full_name": "Lucas Culverhouse",
        "timestamp": 1702956991
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>main =\n    val = fail [&quot;a&quot;,&quot;b&quot;]\n    if val == [[&quot;a&quot;], [&quot;b&quot;]] then\n        Stdout.line &quot;This will crash&quot;\n    else\n        Stdout.line &quot;&quot;\n\n\nfail : List Str -&gt; List List Str\nfail = \\_list -&gt; [[], []]\n</code></pre></div>\n<p>That code gives the same failure</p>",
        "id": 408748499,
        "sender_full_name": "Lucas Culverhouse",
        "timestamp": 1702957106
    },
    {
        "content": "<p>Cool that's what I expected. No idea why it is happening though. Probably need to dump the mono ir and investigate</p>",
        "id": 408765706,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702959982
    },
    {
        "content": "<p>Out of curiosity does assigning the empty lists to a temporary fix the issue.</p>",
        "id": 408765834,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702960003
    },
    {
        "content": "<p>Oh, also, just realized the type of failed is wrong</p>",
        "id": 408766090,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702960046
    },
    {
        "content": "<p>The output needs parens</p>",
        "id": 408766129,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702960054
    },
    {
        "content": "<p>Not sure if that is the issue, but another good test, make the output type <code>List (List Str)</code></p>",
        "id": 408766263,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702960078
    },
    {
        "content": "<p>With parens it doesn't crash</p>",
        "id": 408766402,
        "sender_full_name": "Lucas Culverhouse",
        "timestamp": 1702960095
    },
    {
        "content": "<p>Ah, so bad type and check failing to catch the type error, interesting</p>",
        "id": 408766563,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702960126
    },
    {
        "content": "<p>So there should be a failure in the type checker thats not working</p>",
        "id": 408766678,
        "sender_full_name": "Lucas Culverhouse",
        "timestamp": 1702960145
    },
    {
        "content": "<p>What does the type checker think the type of <code>List List Str</code> is without the parens? That would be intresting to see.</p>",
        "id": 408767190,
        "sender_full_name": "Lucas Culverhouse",
        "timestamp": 1702960232
    },
    {
        "content": "<p>How would I dump the  IR out of curiosity, I haven't done that yet, I have built the compiler from source if needed.</p>",
        "id": 408767446,
        "sender_full_name": "Lucas Culverhouse",
        "timestamp": 1702960289
    },
    {
        "content": "<p>if built from source, we have a few flags for dumping it a different stages.</p>\n<p>In this case two interesting things to try:<br>\n<code>ROC_PRINT_IR_AFTER_REFCOUNT=1 cargo run ...</code><br>\nAnd:<br>\n<code>ROC_CHECK_MONO_IR=1 cargo run ...</code></p>",
        "id": 408776493,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702962136
    },
    {
        "content": "<p>Here's what I got back from the after refcount IR</p>\n<div class=\"codehilite\"><pre><span></span><code>procedure : `#UserApp.3` {}\nprocedure = `#UserApp.3` ():\n    let `#UserApp.17` : Str = &quot;a&quot;;\n    let `#UserApp.18` : Str = &quot;b&quot;;\n    let `#UserApp.13` : List Str = Array [`#UserApp.17`, `#UserApp.18`];\n    let `#UserApp.7` : List List Str = CallByName `#UserApp.fail` `#UserApp.13`;\n    let `#UserApp.12` : Str = &quot;a&quot;;\n    let `#UserApp.9` : List Str = Array [`#UserApp.12`];\n    let `#UserApp.11` : Str = &quot;b&quot;;\n    let `#UserApp.10` : List Str = Array [`#UserApp.11`];\n    let `#UserApp.8` : List List Str = Array [`#UserApp.9`, `#UserApp.10`];\n    let `#UserApp.6` : Int1 = CallByName `Bool.structuralEq` `#UserApp.7` `#UserApp.8`;\n    dec `#UserApp.8`;\n    dec `#UserApp.7`;\n    expect `#UserApp.6`;\n    let `#UserApp.5` : {} = Struct {};\n    ret `#UserApp.5`;\n\nprocedure : `Bool.structuralEq` Int1\nprocedure = `Bool.structuralEq` (`#Attr.#arg1`: List List Str, `#Attr.#arg2`: List List Str):\n    let `Bool.23` : Int1 = lowlevel Eq `#Attr.#arg1` `#Attr.#arg2`;\n    ret `Bool.23`;\n\nprocedure : `#UserApp.fail` List List Str\nprocedure = `#UserApp.fail` (`#UserApp.4`: List Str):\n    dec `#UserApp.4`;\n    let `#UserApp.15` : List [] = Array [];\n    let `#UserApp.16` : List [] = Array [];\n    let `#UserApp.14` : List List Str = Array [`#UserApp.15`, `#UserApp.16`];\n    ret `#UserApp.14`;\n\nthread &#39;main&#39; panicked at &#39;Error in alias analysis: error in module ModName(&quot;UserApp&quot;), function definition FuncName(&quot;\\x11\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x87h\\xb9Z\\xedHc\\x19&quot;), definition of value binding ValueId(13): expected type &#39;(heap_cell, bag&lt;(heap_cell,)&gt;)&#39;, found type &#39;(heap_cell, bag&lt;()&gt;)&#39;&#39;, crates/compiler/gen_llvm/src/llvm/build.rs:5744:19\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>\n<p>Not familiar with the IR but my first reading looks like it might be that the definitions <code>UserApp.15</code> and <code>UserApp.16</code> that cause problems. The type seems to be a <code>List</code> of empty lists.</p>",
        "id": 408790834,
        "sender_full_name": "Lucas Culverhouse",
        "timestamp": 1702965269
    },
    {
        "content": "<p>When I place the parens around the return type of fail to get the correct types the only meaningful diff is</p>\n<div class=\"codehilite\"><pre><span></span><code>&lt;     let `#UserApp.15` : List [] = Array [];\n&lt;     let `#UserApp.16` : List [] = Array [];\n---\n&gt;     let `#UserApp.15` : List Str = Array [];\n&gt;     let `#UserApp.16` : List Str = Array [];\n</code></pre></div>\n<p>Where the corrected types properly give <code>List Str</code> instead of this <code>List []</code> type</p>",
        "id": 408792259,
        "sender_full_name": "Lucas Culverhouse",
        "timestamp": 1702965646
    },
    {
        "content": "<p>I'm not quite sure what <code>List []</code> means as a type because I assumed <code>[]</code> is a value rather than a type.</p>",
        "id": 408792469,
        "sender_full_name": "Lucas Culverhouse",
        "timestamp": 1702965683
    },
    {
        "content": "<p>haha</p>",
        "id": 408795969,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702966354
    },
    {
        "content": "<p>That looks very wrong</p>",
        "id": 408796006,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702966361
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> or <span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> any ideas on this?</p>",
        "id": 408796055,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702966373
    },
    {
        "content": "<p>Almost certainly <code>List List Str</code> is parsed as <code>List (List) (Str)</code> and that's an unhandled error not handled in the typechecker that produces an error type, and hence the error you see</p>",
        "id": 408798513,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1702966853
    },
    {
        "content": "<p>So the outer list receives two type parameters instead of one. Is the number of generic arguments passed to a type not checked?</p>",
        "id": 408800089,
        "sender_full_name": "Lucas Culverhouse",
        "timestamp": 1702967148
    },
    {
        "content": "<p>I would guess not given this</p>",
        "id": 408801656,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1702967423
    },
    {
        "content": "<p><del>Is there any type of existing/tracking issue for this</del>  I looked through the GirHub issues an could not find any related; would it be good to open up and issue and start looking into it?</p>",
        "id": 408814457,
        "sender_full_name": "Lucas Culverhouse",
        "timestamp": 1702969609
    },
    {
        "content": "<p>Opening a new issue sounds good, can you also mention <a href=\"https://github.com/roc-lang/roc/issues/6191\">#6191</a> in the new issue? It's a similar error but with different types.</p>",
        "id": 408870012,
        "sender_full_name": "Anton",
        "timestamp": 1702978989
    },
    {
        "content": "<p>Where would types get checked for having too many arguments in the compiler pipeline? (assuming that would be desired, it might not be for some reason I am unaware of).</p>",
        "id": 409020468,
        "sender_full_name": "Lucas Culverhouse",
        "timestamp": 1703022085
    },
    {
        "content": "<p>Also, some other strange behavior I've found while looking at this. The type <code>Str Str</code> seems to be valid according to the compiler:</p>\n<div class=\"codehilite\"><pre><span></span><code>main =\n    weird : Str Str\n    weird = &quot;hello&quot;\n    Stdout.line weird\n</code></pre></div>\n<p>This compiles and prints hello, no errors. I am almost certain this is wrong, the type <code>Str Str</code> makes no sense. Doing this with a type alias, like:</p>\n<div class=\"codehilite\"><pre><span></span><code>MyStr a : Str a\nmain =\n    weird : MyStr Str\n    weird = &quot;hello&quot;\n    Stdout.line weird\n</code></pre></div>\n<p>Also compiles and runs fine.</p>",
        "id": 409022024,
        "sender_full_name": "Lucas Culverhouse",
        "timestamp": 1703022877
    },
    {
        "content": "<p>This might be related, as it should be rejected due to the incorrect number of type parameters.</p>",
        "id": 409022109,
        "sender_full_name": "Lucas Culverhouse",
        "timestamp": 1703022925
    },
    {
        "content": "<p>Yeah, looks to be all the same root error</p>",
        "id": 409022567,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703023153
    },
    {
        "content": "<blockquote>\n<p>Where would types get checked for having too many arguments in the compiler pipeline</p>\n</blockquote>\n<p>I don't know myself but I find the <a href=\"http://cursor.so\">cursor.so</a> editor useful to help me find stuff.</p>",
        "id": 409134497,
        "sender_full_name": "Anton",
        "timestamp": 1703066290
    }
]