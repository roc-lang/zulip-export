[
    {
        "content": "<p>I'm currently debugging this issue: <a href=\"https://github.com/roc-lang/roc/issues/6799\">https://github.com/roc-lang/roc/issues/6799</a></p>\n<p>To that moment I found that there's nothing was exposed to host (<code>LayoutProblem::Erroneous</code> for <code>pf..mainForHost</code> is the root cause. If the main function has invalid types, it doesn't end up in <code>host_specializations</code>), so no specializations as a result. Then, during alias analysis, we read bytes from an invalid position, expecting there's a function name, which leads to the arbitrary string in the logs <code>#\\x00\\x00\\x00\\x00\\x00\\x00\\x00z\\x87\\xceV\\x11\\xaaYs</code></p>\n<p>Shouldn't we fail even sooner when find nothing was exposed? And then again if no specializations were fond?</p>\n<p>As for the fix: should we generate fake specialization in this case? Or just skip alias analysis if no specializations were found?</p>\n<p>Aside: I don't understand most of what I just said tbh <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span> so here are some additional questions:</p>\n<ul>\n<li><code>pf..mainForHost</code> is smth added at compile-time? what's the intuition for this function?</li>\n<li>what's the difference between specialization and monomorphization? (if this question even makes sense. or maybe it's in particular abilities specialization here?)</li>\n<li>what's alias analysis?</li>\n<li>how do we use <code>morphic_lib</code> and why?</li>\n</ul>",
        "id": 447402745,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1719472107
    },
    {
        "content": "<p>I can answer some of those</p>\n<p><code>mainForHost</code> is just the main function of the platform. In the early days we called this mainForHost and for most platforms this just stuck around. It's not a special name.</p>\n<p>there is probably some technical difference between specialization and monomorphization, but we use them interchangeably. They get rid of some form of generics in some way.</p>\n<p>alias analysis is trying to insert in-place mutation where it judges that that is safe, much like how when the reference count is one at runtime, or when you have a mutable reference in rust, when the compiler can determine that there is only one \"user\" of a value at compile time, then it can turn various (mostly list and string) operations into their in-place variants. This would happen anyway at runtime because of the refcount, but now it saves a branch and potentially allows for more optimizations</p>\n<p>now, this final one is tricky. we use morphic lib (based on unpublished research that we got to play with) for alias analysis. However, it requires that we have a first-order language (no higher-order functions). That is in part what our lambda set approach is for (and it was developed by the same folks as morphic). But now that lambda sets just prove really hard in practice and we might want to - for now - go with a different approach, morphic can no longer be used either. That is sad but given * gestures widely * is probably the right move.</p>",
        "id": 447416560,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1719476722
    },
    {
        "content": "<p>I think <code>UserApp</code> and <code>mainForHost</code> I mentioned are from here: <a href=\"https://github.com/roc-lang/roc/blob/f8c6786502bc253ab202a55e2bccdcc693e549c8/crates/compiler/alias_analysis/src/lib.rs#L25-L31\">https://github.com/roc-lang/roc/blob/f8c6786502bc253ab202a55e2bccdcc693e549c8/crates/compiler/alias_analysis/src/lib.rs#L25-L31</a></p>",
        "id": 447432689,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1719481458
    },
    {
        "content": "<p>ah, those are there just for modelling of the alias analysis, they have no relation to the actual generated code. </p>\n<p>the alias analysis needs an entry point, and we can't just pick the real main because of host-exposed closures and expects (which kind of act as independent entry points for this analysis). So we bundle everything together into one fake module, and call all entry points from a fake entry point function.</p>\n<p>again, this has no effect on codegen, it's just for alias analysis</p>",
        "id": 447449675,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1719486452
    },
    {
        "content": "<p>it's a mono problem. <code>mainForHost</code> of the cli platform gets <code>main</code> from the app. <code>mainHost</code> is an entry point. But when a type mismatch is introduced in <code>main</code>, it fails monomorphization. It's as simple as</p>\n<div class=\"codehilite\"><pre><span></span><code>app [main] {\n    pf: platform &quot;https://github.com/roc-lang/basic-cli/releases/download/0.10.0/vNe6s9hWzoTZtFmNkvEICPErI9ptji_ySjicO6CkucY.tar.br&quot;,\n}\n\nmain = 42\n</code></pre></div>",
        "id": 449053239,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1720088321
    },
    {
        "content": "<p>Interesting it even gets to mono and panics there? Shouldn't it fail type checking before ever getting to mono? Type variables are confusing it somehow?</p>",
        "id": 449090739,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720100522
    },
    {
        "content": "<p>It panics during alias analysis because no specializations were resolved or smth like that. I mean, the monomorphized module passed to alias analysis has no procedures.<br>\nIt must be connected with <code>InLayout(Error)</code> but I donâ€™t understand the code yet</p>",
        "id": 449094380,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1720101561
    }
]