[
    {
        "content": "<p>I have been trying to write tests and examples for the Parser example. I was hoping to use this to demonstrate basic packages functionality. I managed to get it working ok; but came across the following <a href=\"https://github.com/roc-lang/roc/issues/4904\">issue#4904</a> when using <code>Parser.Core.{ many }</code>. I'm reasonably confident I am doing things correctly there, so there is a bug in the compiler somewhere.</p>\n<p>My idea was to write more tests/examples to demonstrate the parsers. Would it make sense to refactor this example to make the Parser into a package instead of having it's own platform? We can then have a number of different examples perhaps using the basic-cli URL package if required? In the future we could even have CI build the Parser package to provide a URL perhaps?</p>\n<p>Following is an example header using which uses basic packages functionality. It works when I include a package module declaration as below at <code>roc/examples/parser/main.roc</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"s2\">\"example\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">packages</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"ss\">cli</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"https://github.com/roc-lang/basic-cli/releases/download/0.1.2/3bKbbmgtIfOyC6FviJ9o8F8xqKutmXgjCJx3bMfVTSo.tar.br\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"ss\">parser</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"main.roc\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">imports</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">cli</span><span class=\"o\">.</span><span class=\"nc\">Stdout</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"nc\">Parser.Core</span><span class=\"o\">.</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nc\">Parser</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">parsePartial</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">buildPrimitiveParser</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">many</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">provides</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">cli</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"s2\">\"parser\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">exposes</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nc\">Parser.Core</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nc\">Parser.CSV</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nc\">Parser.Str</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nc\">Parser.Http</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">packages</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 321691505,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1673891084
    },
    {
        "content": "<p>I am pretty sure that feature simply isn't implemented yet, but I totally could be wrong. I haven't tested/look at this in a long while. So it very well could have changed.</p>",
        "id": 321691967,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1673891299
    },
    {
        "content": "<p>Note that if we made it a package, we can remove the redundant \"Parser\" in the imports.</p>",
        "id": 321691978,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1673891302
    },
    {
        "content": "<p>Yeah it works. <a href=\"https://github.com/roc-lang/roc/pull/4736\">PR#4736</a> was what inspired me to start playing with it.</p>",
        "id": 321692109,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1673891362
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> already implemented URL packages but there was some caveat I forgot about.</p>",
        "id": 321692165,
        "sender_full_name": "Anton",
        "timestamp": 1673891393
    },
    {
        "content": "<p>Yeah that makes loads of sense! The only reason it has its own platform is that, when it was written, that was the only way we could do things. But your proposed structure would be much better. And it's good for the examples to show off things like this.</p>",
        "id": 321692175,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1673891398
    },
    {
        "content": "<p>Luke if you have managed to get this working, I think it would be an excellent contribution to the repo! I'd be happy to help or review, and I'm sure others here would too.</p>",
        "id": 321692974,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1673891695
    },
    {
        "content": "<p>oh wait you said there's a compiler bug</p>",
        "id": 321693068,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1673891730
    },
    {
        "content": "<p>Can you make a PR out of your branch so that people can pull it and try to help fix it?</p>",
        "id": 321693203,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1673891791
    },
    {
        "content": "<p>I use the <code>many</code> combinator in the Http parser for headers and it works OK there</p>",
        "id": 321694147,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1673892168
    },
    {
        "content": "<p>I notice you're using <code>parsePartial</code> rather than making it parse the whole input. So I'm wondering if that doesn't work well in combination with <code>many</code>.</p>",
        "id": 321694263,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1673892236
    },
    {
        "content": "<p>Sure thing! </p>\n<p>I created a draft <a href=\"https://github.com/roc-lang/roc/pull/4906/files\">PR#4906</a> here with what I have so far. I'm heading out for dinner now, but happy to continue plugging away at it tomorrow.</p>",
        "id": 321695057,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1673892560
    },
    {
        "content": "<p>OK so <code>many</code> calls <code>manyImpl</code> which is recursive, and the recursion terminates when the parser fails. But your parser never fails. So that could be the issue.</p>",
        "id": 321695612,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1673892788
    },
    {
        "content": "<p>I suppose all parsers should fail when the input is exhausted though. But maybe that's not implemented correctly in the library.</p>",
        "id": 321695693,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1673892832
    },
    {
        "content": "<p>Anyway I'm not convinced this is a compiler issue, I think it's more likely a library issue.</p>",
        "id": 321695762,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1673892847
    },
    {
        "content": "<p>yes that's it. <code>manyImpl</code> handles all errors the same in a branch with <code>Err _ -&gt;</code>. But it should have a special case for the error where we ran out of characters to parse!</p>",
        "id": 321695935,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1673892928
    },
    {
        "content": "<p>..I think</p>",
        "id": 321695970,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1673892942
    },
    {
        "content": "<p>the only caveat I know about with packages right now is that I haven't yet implemented packages which depend on other packages - there's some more work that needs to be done to support that use case</p>",
        "id": 321719455,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1673904117
    },
    {
        "content": "<p>it might also apply to platforms which depend on packages - I forget</p>",
        "id": 321719514,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1673904138
    },
    {
        "content": "<p>but either way, applications depending directly on packages - URL or otherwise - should work fine!</p>",
        "id": 321719541,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1673904163
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> , there's actually an infinite loop in your program!<br>\nThe <code>many</code> combinator keeps recursing until the inner parser fails. But your <code>letterParser</code> does not explicitly handle the case where <code>input</code> is empty, so it actually succeeds, and returns <code>Ok { val: Other, input: [] }</code>.<br>\nThis means the inner parser never fails. It just keeps returning <code>Other</code> forever, so the <code>many</code> recursion keeps going, and the program hangs.</p>",
        "id": 321775406,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1673943808
    },
    {
        "content": "<p>Thank you, I'll keep working on these examples/tests and see if I can propose a sensible refactor based on similar libraries. <span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> does it make sense to have tests that can or should be run in CI or sometime? I'm not sure of the best way to do that. I was thinking of writing example apps and then writing <code>expect</code>s in them, which we can run <code>roc test</code> on maybe.</p>",
        "id": 321781212,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1673946003
    },
    {
        "content": "<blockquote>\n<p>@Anton does it make sense to have tests that can or should be run in CI or sometime? I'm not sure of the best way to do that. I was thinking of writing example apps and then writing expects in them, which we can run roc test on maybe.</p>\n</blockquote>\n<p>Yeah, that sounds great <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span>. We can use a similar setup like with the basic-cli repo. I'd say we probably also want a separate repo for this parser package.</p>",
        "id": 321782326,
        "sender_full_name": "Anton",
        "timestamp": 1673946383
    },
    {
        "content": "<p>We have a set of Rust tests that test every example app . Recently I added <a href=\"https://github.com/roc-lang/roc/blob/2b429d35f619ff95b6ae1976d470de4dffd2049e/crates/cli/tests/cli_run.rs#L873\">a new variant</a> that can run <code>roc check</code> on a library module like <code>Parser.Http</code> too.</p>",
        "id": 321833030,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1673963067
    },
    {
        "content": "<p>But if we're making it external then maybe it's better to follow how basic-cli does it</p>",
        "id": 321833382,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1673963165
    }
]