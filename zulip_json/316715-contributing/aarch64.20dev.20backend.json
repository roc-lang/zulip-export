[
    {
        "content": "<p>Hi! I was wondering if adding some instructions to the aarch64 development backend would be a good way to contribute.</p>\n<p>If so, I wanted to ask about a problem I’m running into. I was trying to see if I could add a <code>sub_reg64_reg64_reg64</code> function. (I’m relatively new to assembly in general, so I’m figuring a lot of this out as I go.)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[inline(always)]</span>\n<span class=\"k\">fn</span> <span class=\"nf\">sub_reg64_reg64_reg64</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"n\">buf</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">dst</span>: <span class=\"nc\">AArch64GeneralReg</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">src1</span>: <span class=\"nc\">AArch64GeneralReg</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">src2</span>: <span class=\"nc\">AArch64GeneralReg</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">inst</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ArithmeticShifted</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ShiftType</span>::<span class=\"n\">LSL</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">src2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">src1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dst</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"n\">buf</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"p\">.</span><span class=\"n\">bytes</span><span class=\"p\">());</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">//…</span>\n\n<span class=\"w\">    </span><span class=\"cp\">#[test]</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">test_sub_reg64_reg64_reg64</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">disassembler_test</span><span class=\"o\">!</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"n\">sub_reg64_reg64_reg64</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"o\">|</span><span class=\"n\">reg1</span>: <span class=\"nc\">AArch64GeneralReg</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">reg2</span>: <span class=\"nc\">AArch64GeneralReg</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">reg3</span>: <span class=\"nc\">AArch64GeneralReg</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"fm\">format!</span><span class=\"p\">(</span>\n<span class=\"w\">                </span><span class=\"s\">\"sub {}, {}, {}\"</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">reg1</span><span class=\"p\">.</span><span class=\"n\">capstone_string</span><span class=\"p\">(</span><span class=\"n\">UsesZR</span><span class=\"p\">),</span>\n<span class=\"w\">                </span><span class=\"n\">reg2</span><span class=\"p\">.</span><span class=\"n\">capstone_string</span><span class=\"p\">(</span><span class=\"n\">UsesZR</span><span class=\"p\">),</span>\n<span class=\"w\">                </span><span class=\"n\">reg3</span><span class=\"p\">.</span><span class=\"n\">capstone_string</span><span class=\"p\">(</span><span class=\"n\">UsesZR</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">),</span>\n<span class=\"w\">            </span><span class=\"n\">ALL_GENERAL_REGS</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">ALL_GENERAL_REGS</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">ALL_GENERAL_REGS</span>\n<span class=\"w\">        </span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>One of the assertions is failing:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;generic64::aarch64::tests::test_sub_reg64_reg64_reg64&#39; panicked at &#39;assertion failed: `(left == right)`\n  left: `&quot;sub x0, xzr, x0&quot;`,\n right: `&quot;neg x0, x0&quot;`&#39;, crates/compiler/gen_dev/src/generic64/aarch64.rs:1715:9\n</code></pre></div>\n<p>So it looks like the output is disassembled into <code>\"neg x0, x0\"</code>, which doesn’t equal <code>\"sub x0, xzr, x0\"</code>. But if I understand correctly, <code>neg x0, x0</code> is actually an alias for <code>sub x0, xzr, x0</code>. They assemble to the same machine code: <a href=\"https://armconverter.com/?code=sub%20x0,%20xzr,%20x0\">https://armconverter.com/?code=sub%20x0,%20xzr,%20x0</a> vs <a href=\"https://armconverter.com/?code=neg%20x0,%20x0\">https://armconverter.com/?code=neg%20x0,%20x0</a>. Is this a problem you all have run into before?</p>",
        "id": 339635583,
        "sender_full_name": "Ajai Nelson",
        "timestamp": 1677984200
    },
    {
        "content": "<p>Oh, interesting. It looks like you found an edge case in the test harness.</p>",
        "id": 339635674,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1677984269
    },
    {
        "content": "<p>It doesn't know equivalences and is just doing string comparisons.</p>",
        "id": 339635685,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1677984291
    },
    {
        "content": "<p>I guess you can add an extra conditional to that lambda. </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">reg2</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">ZeroRegister</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"neg {}, {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">reg1</span><span class=\"p\">.</span><span class=\"n\">capstone_string</span><span class=\"p\">(</span><span class=\"n\">UsesZR</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">reg3</span><span class=\"p\">.</span><span class=\"n\">capstone_string</span><span class=\"p\">(</span><span class=\"n\">UsesZR</span><span class=\"p\">),)</span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">     </span><span class=\"c1\">// old format</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 339635869,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1677984439
    },
    {
        "content": "<p>Yeah, that makes the test pass</p>",
        "id": 339636235,
        "sender_full_name": "Ajai Nelson",
        "timestamp": 1677984770
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 339636376,
        "sender_full_name": "Ajai Nelson",
        "timestamp": 1677984906
    },
    {
        "content": "<p>Do you think just that function is worth making a pull request for? I added the top-level function, but I haven't added anything to the <code>sub_reg64_reg64_reg64</code> function in <code>AArch64Assembler</code>, since I'm not sure how to test that. (Though <code>add_reg64_reg64_reg64</code> in <code>AArch64Assembler</code> is very simple, so I guess this one probably is too.)</p>",
        "id": 339636951,
        "sender_full_name": "Ajai Nelson",
        "timestamp": 1677985462
    },
    {
        "content": "<p>Actually, it causes a dead code warning if I don't add use it, so I guess I probably shouldn't make a PR without doing that?</p>",
        "id": 339637086,
        "sender_full_name": "Ajai Nelson",
        "timestamp": 1677985586
    },
    {
        "content": "<p>Yeah, shouldn't be too hard to pipe it through. Should be identical to add if I had to guess.</p>",
        "id": 339638192,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1677986618
    },
    {
        "content": "<p>Once it is piped through, it should be good for a pr.</p>",
        "id": 339638199,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1677986631
    },
    {
        "content": "<p>Testing may be a bit more complex. I think we would need to expand feature flags to enable dev-aarch64 tests separate from dev-x86_64 tests.</p>",
        "id": 339638334,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1677986747
    },
    {
        "content": "<p>Oh, I also think we need some more instructions implemented before we can run our test cases.</p>",
        "id": 339638489,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1677986885
    },
    {
        "content": "<p>The number related tests can be run with: <code>cargo test-gen-dev -- gen_num::</code></p>",
        "id": 339638500,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1677986912
    },
    {
        "content": "<p>But on aarch64, they currently will all fail because we don't have certain required instructions. <code>panicked at 'not yet implemented: jump instructions for AArch64'</code></p>",
        "id": 339638527,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1677986960
    },
    {
        "content": "<p>Anyway, pipeline it through, it can't be tested yet. I guess it would be extra valuable, if you could target the instructions need to get the test cases running, but any added instructions is useful.</p>",
        "id": 339638544,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1677987001
    },
    {
        "content": "<p>Sounds good!</p>",
        "id": 339639179,
        "sender_full_name": "Ajai Nelson",
        "timestamp": 1677987572
    }
]