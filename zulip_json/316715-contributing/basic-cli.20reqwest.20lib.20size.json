[
    {
        "content": "<p>Circling back on basic cli size. Just pulled current basic cli sizes.</p>\n<p>With the reqwest library: <code>6.7MB</code><br>\nWithout the reqwest library: <code>1.1MB</code></p>",
        "id": 402337156,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700086418
    },
    {
        "content": "<p>After that, backtraces are the next biggest contributor to bloat.</p>",
        "id": 402337249,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700086450
    },
    {
        "content": "<p>wow, is there any way to make reqwest smaller? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 402338426,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700087065
    },
    {
        "content": "<p>We could try <code>ureq</code> or similar if we can make it fit a nice API.</p>",
        "id": 402338961,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700087332
    },
    {
        "content": "<p>I think ureq is synchronous only</p>",
        "id": 402339008,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700087358
    },
    {
        "content": "<p>We only use it synchronously currently, but i guess that will change in the future? Actually, I don't think that will change for basic cli</p>",
        "id": 402339544,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700087604
    },
    {
        "content": "<p>Otherwise, maybe <code>attohttpc</code></p>",
        "id": 402339586,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700087633
    },
    {
        "content": "<p>We also could try to user <code>hyper</code> directly. Not sure how low level it actually is.</p>",
        "id": 402339954,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700087836
    },
    {
        "content": "<p>I think we'll want to use async once we have Task.map2</p>",
        "id": 402341267,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700088522
    },
    {
        "content": "<p>basic-webserver uses hyper for receiving requests and it's totally fine</p>",
        "id": 402341335,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700088565
    },
    {
        "content": "<p>haven't tried it for making requests</p>",
        "id": 402341345,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700088573
    },
    {
        "content": "<p>but seems plausible since all we do is <code>List U8</code> anyway!</p>",
        "id": 402341445,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700088611
    },
    {
        "content": "<p>Ah, fair. Was thinking that basic CLI would always be single threaded, but it may be truly async with map2</p>",
        "id": 402341678,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700088743
    },
    {
        "content": "<p>Also, I think the one called concern with hyper as an http client is that I don't think it deals with tls</p>",
        "id": 402342014,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700088931
    },
    {
        "content": "<p>Oh wait, there is <code>hyper-tls</code></p>",
        "id": 402342151,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700088989
    },
    {
        "content": "<p>So yeah, looks simple enough to try hyper directly</p>",
        "id": 402342203,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700089028
    },
    {
        "content": "<p>Are platform (in this case rust) features something that's on the table? For example if someone is making a cli that does not use networking they can save lots of binary size.</p>",
        "id": 402472532,
        "sender_full_name": "Pearce Keesling",
        "timestamp": 1700142139
    },
    {
        "content": "<p>Maybe linking with <code>—gc-sections</code> is enough?</p>",
        "id": 402512900,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1700153246
    },
    {
        "content": "<p>It’s still nice to have a small http lib for when you do use it, though</p>",
        "id": 402513100,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1700153311
    },
    {
        "content": "<p>So we totally could do something akin to rust features, but how Roc plans to distribute platforms, this is not really possible. In the Roc model, the entire platform is precompiled and distributed. So having some form of feature selection is not possible unless we either:</p>\n<ol>\n<li>Stop precompiling platforms</li>\n<li>Build a special system to enable opting into compiling a platform locally with certain features disabled</li>\n<li>Distribute 2^n binaries for each of the n features a platform has</li>\n</ol>",
        "id": 402581125,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700179843
    },
    {
        "content": "<p>Also, I'm pretty sure gc-sections won't change anything. We have a reference to the http function and it references another 5MB of code. So nothing for GC sections to do.</p>",
        "id": 402581820,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700180161
    },
    {
        "content": "<p>That is a pickle</p>\n<p>Where does the effect interpreter live, is it implemented by hand per-platform?</p>",
        "id": 402582795,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1700180610
    },
    {
        "content": "<p>Yep. Or it will once we switch to that. Currently, it is technically all generated on the roc side and more adhoc, but that is changing</p>",
        "id": 402583043,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700180712
    },
    {
        "content": "<p>23 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"316715\" href=\"/#narrow/stream/316715-contributing/topic/contributor.20coordination.20meeting\">#contributing &gt; contributor coordination meeting</a> by <span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span>.</p>",
        "id": 402589883,
        "sender_full_name": "Notification Bot",
        "timestamp": 1700183078
    },
    {
        "content": "<p>Just as a validation test, I made a basically empty rust binary (no roc involved) that uses reqwest to do a get request. That binary is 4.8MB.</p>",
        "id": 402590534,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700183368
    },
    {
        "content": "<p>Oh, with lto, it drops to 3.0MB. That's a nice gain.</p>",
        "id": 402590684,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700183436
    },
    {
        "content": "<p>Are you still thinking about using hyper? Is that much smaller?</p>",
        "id": 402591812,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700183992
    },
    {
        "content": "<p>about to test</p>",
        "id": 402592196,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700184163
    },
    {
        "content": "<p>Though I don't expect it to be much smaller, reqwest is just a wrapper for hyper</p>",
        "id": 402592238,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700184187
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/316715-contributing/topic/basic-cli.20reqwest.20lib.20size/near/402581820\">said</a>:</p>\n<blockquote>\n<p>We have a reference to the http function and it references another 5MB of code.</p>\n</blockquote>\n<p>Even when no Roc code calls the effect function?</p>",
        "id": 402592558,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1700184346
    },
    {
        "content": "<p>I may have a bad understanding of how the platform and app are linked. I thought the platform just exposed C-like functions and roc would generate code that calls them directly. But I guess there’s some sort of switch on effect type that dispatches to the right function?</p>",
        "id": 402593193,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1700184611
    },
    {
        "content": "<blockquote>\n<p>But I guess there’s some sort of switch on effect type that dispatches to the right function?</p>\n</blockquote>\n<p>Technically it isn't this yet, but it will be in the future. So I would just work under that assumption. Even without this all of the notes on precompilation apply here (plus surgical linking) and clean up is not a simple task.</p>",
        "id": 402594703,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700185408
    },
    {
        "content": "<blockquote>\n<p>Are you still thinking about using hyper?</p>\n</blockquote>\n<p>Initial tests with hyper seem promising (but I haven't wired up most of the features), I will try to update the platform as a whole.</p>",
        "id": 402594854,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700185491
    },
    {
        "content": "<p>So removing <code>reqwest</code> and directly using <code>hyper</code> saved about 700KB.</p>\n<p>Our hello world with basic-cli is now 3.0MB on my linux machine. Of that, I think 2.1MB comes from hyper, tokio, rusttls, etc to support http requests. The other 0.9MB is other libraries and rust code.</p>",
        "id": 402792854,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700261892
    },
    {
        "content": "<p>general question, does basic cli need to support http2 for web requests? Given it is just directly requesting webpages and not doing anything with keep alive, I assume that 1 vs 2 shouldn't matter much?</p>\n<p>But honestly I don't mess with web that much anymore, so not sure if I am missing something. Removing http2 save another 400KB.</p>",
        "id": 402794149,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700262462
    },
    {
        "content": "<p>I am just gonna remove http2 for now. Can be added back in later if someone has an explicit need PR now up: <a href=\"https://github.com/roc-lang/basic-cli/pull/130\">https://github.com/roc-lang/basic-cli/pull/130</a></p>",
        "id": 402798654,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700264967
    },
    {
        "content": "<p>Makes sense, this is basic-cli right. That sounds like a good candidate for more-advanced-cli</p>",
        "id": 402800815,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700266123
    },
    {
        "content": "<p>hm, this made it into 0.6.0, right? I just saw <a href=\"https://www.reddit.com/r/ProgrammingLanguages/comments/17zp4m7/comment/ka5akck/\">https://www.reddit.com/r/ProgrammingLanguages/comments/17zp4m7/comment/ka5akck/</a> and tried it out locally on macOS; when I build helloWorld.roc (which is using 0.6.0 for its platform) I'm seeing:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ du -h helloWorld\n 23M    helloWorld\n</code></pre></div>\n<p>is it a lot smaller on Linux? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 403696559,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700707958
    },
    {
        "content": "<p>Would make sense for Linux to be smaller, when building a binary, rust and friends build something a lot slimmer than for an object file</p>",
        "id": 403710354,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700713186
    },
    {
        "content": "<p>Also, have the size can be stripped away, probably debug info. Is basic cli release in debug instead of release for some reason?</p>",
        "id": 403711632,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700713710
    },
    {
        "content": "<p>Yeah, pretty sure our basic cli package is a debug build and that is the issue.</p>",
        "id": 403712009,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700713922
    },
    {
        "content": "<p>I just built from source with <code>--optimize</code> and it is <code>6.5MB</code> on macos</p>",
        "id": 403712075,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700713937
    },
    {
        "content": "<p>yep and debug is <code>23MB</code></p>",
        "id": 403712091,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700713950
    },
    {
        "content": "<p>so we need to cut a new package release that is actually an optimized build. That is the root issue.</p>",
        "id": 403712128,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700713982
    },
    {
        "content": "<p>As a note, this probably affects basic-webserver as well, so they probably both need to cut a new release that is an optimized build.</p>",
        "id": 403712536,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700714235
    },
    {
        "content": "<p>Nice pick up</p>",
        "id": 403712673,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700714318
    },
    {
        "content": "<p>Fixed in <a href=\"https://github.com/roc-lang/roc/pull/6078\">PR#6078</a></p>",
        "id": 403947682,
        "sender_full_name": "Anton",
        "timestamp": 1700824576
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/316715-contributing/topic/basic-cli.20reqwest.20lib.20size/near/403712075\">said</a>:</p>\n<blockquote>\n<p>I just built from source with <code>--optimize</code> and it is <code>6.5MB</code> on macos</p>\n</blockquote>\n<p>do you mean using <code>cargo build --release</code> on the <code>basic-cli</code> Rust host?</p>\n<p>I tried adding <code>--optimize</code> to <code>roc build</code> on macOS and it didn't make a difference for me <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 404037896,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700873599
    },
    {
        "content": "<p><code>roc build --optimize</code> but on an example that will build <code>basic-cli</code> from source which will use <code>--release</code>. this hasn't made it to the url package yet</p>",
        "id": 404044086,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700877445
    },
    {
        "content": "<p>Will require a new release with Anton's pr</p>",
        "id": 404044106,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700877472
    },
    {
        "content": "<p>I'll start building 0.6.2 after today's nightlies are up</p>",
        "id": 404088027,
        "sender_full_name": "Anton",
        "timestamp": 1700905280
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/basic-cli/releases/tag/0.6.2\">Here it is</a>.</p>",
        "id": 404111263,
        "sender_full_name": "Anton",
        "timestamp": 1700918272
    },
    {
        "content": "<p>I can't believe I didn't think of this until just now, but an obvious way to shrink the binary size here is for someone to implement http 1.1 in Roc</p>",
        "id": 404283698,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701026771
    },
    {
        "content": "<p>then basic-cli doesn't need any host libraries at all to do http, just tcp (which comes from the OS anyway)</p>",
        "id": 404283718,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701026806
    },
    {
        "content": "<p>and any http logic that isn't used by a given roc application will be dead code eliminated anyway!</p>",
        "id": 404283772,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701026848
    },
    {
        "content": "<p>http 1.1 is also ridiculously simple (http2 not so much)</p>",
        "id": 404283871,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701026934
    },
    {
        "content": "<p>I guess tls would also probably need to be in the host for now</p>",
        "id": 404283885,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701026957
    },
    {
        "content": "<p>but I'm not sure how big that is relative to all of <code>hyper</code></p>",
        "id": 404283896,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701026976
    },
    {
        "content": "<p>I wrote a HTTP 1.1 parser in Roc and it's in the repo already. Could be something to build on.</p>\n<p><a href=\"https://github.com/roc-lang/roc/blob/main/examples/parser/Parser/Http.roc\">https://github.com/roc-lang/roc/blob/main/examples/parser/Parser/Http.roc</a></p>",
        "id": 404285225,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1701028372
    },
    {
        "content": "<p>Is dynamic linking an option for something like tls? Or do platforms need to be totally static?</p>",
        "id": 404286484,
        "sender_full_name": "Pearce Keesling",
        "timestamp": 1701029542
    },
    {
        "content": "<p>they don't need to be, but I think static is the best user experience for end users of the compiled program! <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 404287540,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701030530
    },
    {
        "content": "<p>I think about 1-2MB of the 5MB of extra size is from rustls. Most of the rest is from hyper and Tokio. If we build own on http on top of the current tcp I'm not sure exactly how much we will gain. Also, if we later switch to async tcp, that might readd a lot of the costs from Tokio.</p>",
        "id": 404290298,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701032691
    },
    {
        "content": "<p>interesting, good to know!</p>",
        "id": 404294089,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701036209
    },
    {
        "content": "<p>a little off topic, but I was reading about some of the developments with WASM runtimes, and it seems a lot of these primitives are being developed into these runtimes pretty quickly, so I don't think it will be long and I can imagine a Roc platform that is almost zero overhead and provides a lot of functionality. See interface proposals like <a href=\"https://github.com/WebAssembly/wasi-http\">wasm-http</a> and <a href=\"https://github.com/WebAssembly/wasi-filesystem\">wasi-filesystem</a>. I'm keen to work on something like this, but maybe that is a Post-AoC thing.</p>",
        "id": 404297084,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1701039288
    },
    {
        "content": "<p>I mean on the order of the next few years*</p>",
        "id": 404297349,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1701039551
    }
]