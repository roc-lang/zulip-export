[
    {
        "content": "<p>G'day all, hand rolling types can be tricky sometimes. So I made a simple script using <code>roc glue</code> which prints out the fields in a struct so you can know what order they should go in.</p>\n<p>For example this type isn't necessarily obvious how it should be represented in C.</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kt\">Command</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">program</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">#</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">arg0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">...</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"n\">envs</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">#</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">key0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">key1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">key2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">...</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"n\">clearEnvs</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>So using  <a href=\"https://github.com/lukewilliamboswell/roc-glue-code-gen/pull/4\">this script in roc-glue-code-gen</a> you can do;</p>\n<div class=\"codehilite\"><pre><span></span><code>$ roc glue examples/alignment.roc examples/test/ examples/platform.roc\nðŸŽ‰ Generated type declarations in:\n\n    examples/test/\n$ cat examples/test/types.txt\n{id: (@TypeId 2), name: &quot;args&quot;}\n{id: (@TypeId 2), name: &quot;envs&quot;}\n{id: (@TypeId 1), name: &quot;program&quot;}\n{id: (@TypeId 3), name: &quot;clearEnvs&quot;}%\n</code></pre></div>\n<p>Which translates in Rust to </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[repr(C)]</span>\n<span class=\"cp\">#[derive(Debug)]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Command</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">RocList</span><span class=\"o\">&lt;</span><span class=\"n\">RocStr</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">envs</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">RocList</span><span class=\"o\">&lt;</span><span class=\"n\">RocStr</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">program</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">RocStr</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">clearEnvs</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 448212731,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719805675
    },
    {
        "content": "<p>I should probably put a roc CLI app at the top level of that repo to make this kind of thing easier to use... <span aria-label=\"idea\" class=\"emoji emoji-1f4a1\" role=\"img\" title=\"idea\">:idea:</span> not a priority RN, I'd like to finish a few other things</p>",
        "id": 448213407,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719806241
    },
    {
        "content": "<p>I wish I saw this sooner! I'll be sure to use this going forward as I'm pretty much 100% hand rolling the glue now for my roc-iced platform</p>",
        "id": 449438113,
        "sender_full_name": "tarkah",
        "timestamp": 1720241344
    }
]