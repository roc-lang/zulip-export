[
    {
        "content": "<p>I've submitted <a href=\"https://github.com/roc-lang/roc/pull/5488\">#5488</a> to <em>remove</em> Json from builtins. The plan is to break the overall change over a few PRs, so that they are a more manageable changes. This is Part 1 which essentially just renames Json to something that people won't accidentally use, but should still keep everything working as before. </p>\n<p>If anyone would like to use Json I have created a package at <a href=\"https://github.com/lukewilliamboswell/roc-json\">lukewilliamboswell/roc-json</a> which is a copy of the old Json module. I'm still working on improving Json, adding tests and features, and removing it from the builtins will also make this easier. (For a start I can use the name <code>Json</code> and break it into multiple files to improve docs and hide internal details).</p>",
        "id": 362382247,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1685521791
    },
    {
        "content": "<p>love the approach, this is awesome!!!</p>",
        "id": 362424738,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1685532064
    },
    {
        "content": "<p>I think I am stuck on the changes for Part 2. I've pushed where I am up to in this PR <a href=\"https://github.com/roc-lang/roc/pull/5543\">#5543</a>. My rust isn't great, so looking for some assistance on how to include the <code>ExampleJson.roc</code> file as a string inline in these tests. For example in mono tests I think I need to do something around <code>roc_load::load_and_monomorphize_from_str</code> in <code>crates/compiler/test_mono/src/tests.rs</code> but not really sure how to do this.</p>",
        "id": 365439234,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1686546085
    },
    {
        "content": "<p>I've started with trying to get mono tests working, the rust compiles, but then tests fail at <code>load_and_monomorphize_from_str</code> with a <code>LoadMonomorphizedError</code> and hit a panic.</p>",
        "id": 365439565,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1686546208
    },
    {
        "content": "<p>The macro to do that in Rust is <code>include_bytes!</code>. We already use it in a few places (I used it in the web REPL), so you can search for examples. You get a constant slice of u8, which is probably what you want.</p>",
        "id": 365509618,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1686565211
    },
    {
        "content": "<p>there is also <code>include_str!</code> which may be useful if you really need a string</p>",
        "id": 365514585,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1686566090
    },
    {
        "content": "<p>I've had another go at this, my idea was to include the json code by concatenating the implementation with the test. I removed the interface module header, so I feel like that should be ok. However it compiles and runs, but the test is always 'FAILED' and I'm not sure if there is any way to get additional debugging. The test 'PASSED' with the same implementation when the ExampleJson (currently name TotallyNotJson) interface module was imported as a builtin, so I think there must be something about the rust test here that is causing this issue.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[test]</span>\n<span class=\"cp\">#[cfg(any(feature = </span><span class=\"s\">\"gen-llvm\"</span><span class=\"cp\">, feature = </span><span class=\"s\">\"gen-wasm\"</span><span class=\"cp\">))]</span>\n<span class=\"k\">fn</span> <span class=\"nf\">decode_use_stdlib</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">test_code</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">indoc</span><span class=\"o\">!</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"s\">r#\"</span>\n<span class=\"s\">        app \"test\"</span>\n<span class=\"s\">            imports []</span>\n<span class=\"s\">            provides [main] to \"./platform\"</span>\n\n<span class=\"s\">        MyNum := U8 has [Decoding {decoder: myDecoder}]</span>\n\n<span class=\"s\">        myDecoder =</span>\n<span class=\"s\">            Decode.custom \\bytes, fmt -&gt;</span>\n<span class=\"s\">                when Decode.decodeWith bytes Decode.u8 fmt is</span>\n<span class=\"s\">                    {result, rest} -&gt;</span>\n<span class=\"s\">                        when result is</span>\n<span class=\"s\">                            Ok n -&gt; {result: Ok (@MyNum n), rest}</span>\n<span class=\"s\">                            Err e -&gt; {result: Err e, rest}</span>\n\n<span class=\"s\">        main =</span>\n<span class=\"s\">            when Decode.fromBytes [49, 53] json is</span>\n<span class=\"s\">                Ok (@MyNum n) -&gt; n</span>\n<span class=\"s\">                _ -&gt; 101</span>\n<span class=\"s\">        \"#</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"n\">assert_evals_to</span><span class=\"o\">!</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"{}{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">test_code</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"fm\">include_str!</span><span class=\"p\">(</span><span class=\"s\">\"ExampleJson.roc\"</span><span class=\"p\">)),</span>\n<span class=\"w\">        </span><span class=\"mi\">15</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"kt\">u8</span>\n<span class=\"w\">    </span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 368770333,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1687501486
    },
    {
        "content": "<p>do you have a branch for this?</p>",
        "id": 369267884,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1687643252
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> it's <a href=\"https://github.com/roc-lang/roc/pull/5543\">https://github.com/roc-lang/roc/pull/5543</a></p>",
        "id": 369268985,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1687643890
    }
]