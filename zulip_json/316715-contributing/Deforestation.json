[
    {
        "content": "<p>On /fast it is indicated that deforestation - elision of intermediate lists - is a goal for roc. Reading the linked paper (<a href=\"https://www.cs.tufts.edu/~nr/cs257/archive/duncan-coutts/stream-fusion.pdf\">https://www.cs.tufts.edu/~nr/cs257/archive/duncan-coutts/stream-fusion.pdf</a>) it seems like there are four things needed (for this approach):</p>\n<ol>\n<li>A new lazy list implementation they call \"streams\" that are stored as records containing a closure that gets the next element in the stream,</li>\n<li>an implementation of list operations in terms of streams and the transformation functions <code>stream</code> and <code>unstream</code>,</li>\n<li>a compiler optimization that removes the composition of stream and unstream, and</li>\n<li>a variety of compiler optimisations that do things like avoid packing/unpacking values, avoid creating and immediately calling closures, and restructure nested case (when) statements.</li>\n</ol>\n<p>Now the last two involve complicated operations on (I think) roc's intermediate representation; these seem hard. These also seem like useful optimisations to try to implement anyway.</p>\n<p>The first two, or at least the first one, seems like a draft version could be done entirely in roc. What's more, these streams seem to me to be useful as a general lazy list type in a language that is otherwise completely strict.</p>\n<p>Is there an appetite for a streams library, either simply for use in deforestation or for general use in roc?</p>",
        "id": 419102179,
        "sender_full_name": "Anne Archibald",
        "timestamp": 1706726354
    },
    {
        "content": "<p>Yeah, 4 is definitely wanted for certain other closure changing like happens a ton with tasks</p>",
        "id": 419107671,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706728418
    },
    {
        "content": "<p>As for the streams, I think our goal is to hide it 100% from user land. So end users would have no concept of streams. Just lists. Silently under the hood we would do all this streaming.</p>\n<p>That said, I'm not sure if it would be written in roc or zig or other.</p>",
        "id": 419107887,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706728505
    },
    {
        "content": "<p>I don't know, wouldn't a lazy list type be useful for users? In python I use their lazy lists (iterators) all the time. They can avoid creating huge intermediate results (imagine a video decoder that emits a lot of high-resolution frames that need processing) without relying on the language to optimise those results away. For example, I might be streaming frames from my webcam, ready to stop when a frame contains recognisable Aruco target. This is an endless stream of large items, but we could handle it with the stream version of findFirst.</p>",
        "id": 419111166,
        "sender_full_name": "Anne Archibald",
        "timestamp": 1706729728
    },
    {
        "content": "<p>that is completely valid, but we can't really make lazy streams work well with language design: now when an api needs a sequence (e.g. creating a string from bytes), do you pass in a list or a stream? it makes apis more complicated. </p>\n<p>So a stream type could (should!) exist in the ecosystem, but we don't want to include it in the language/standard library</p>",
        "id": 419114763,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706731337
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> I think the guide needs to make that more explicit. The design is not really \"list fusion\" as it is commonly understood</p>",
        "id": 419114823,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706731372
    },
    {
        "content": "<p>yeah is there something different we could link to?</p>",
        "id": 419127104,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1706736852
    },
    {
        "content": "<p>no, just something like \"eliminating intermediate values\" instead of specifically fusion</p>",
        "id": 419135208,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706740269
    },
    {
        "content": "<p>or well deforestation apparently means the same thing in the literature</p>",
        "id": 419135230,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706740284
    },
    {
        "content": "<p>yeah that was my understanding <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 419141537,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1706743162
    },
    {
        "content": "<p>but I'd like to link to something more concrete so it doesn't sound like we're trying to do something purely theoretical that's never been done in any form before</p>",
        "id": 419141649,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1706743205
    },
    {
        "content": "<p>well what we propose is just term rewriting. standard compiler stuff (inline, simplify)</p>",
        "id": 419143032,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706743886
    },
    {
        "content": "<p>What is our actual plan for composing two list operations? Will zig builtins need functions like mapReduce and all of the other many many combinations? Obviously with some things like map, we just need to chain the inner lambda, but it is less clear for more complex functions and various intermixed functions.</p>",
        "id": 419145358,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706745151
    },
    {
        "content": "<p>I wrote a quick translation of the above Coutts et al. paper: <a href=\"https://github.com/aarchiba/roc-experiments/blob/main/Streams.roc\">https://github.com/aarchiba/roc-experiments/blob/main/Streams.roc</a> [ETA: moved]</p>\n<p>I can't speak to more complicated optimisations, but they make a convincing argument that an optimiser rule that recognises and removes occurences of \\x -&gt; unstream x |&gt; stream can help. It's technically not the identity, because removing it means that an infinite stream will no longer crash with an out-of-memory error. Nevertheless, they show that if your stream functions are non-recursive you can fuse them down very cleanly once that pair has been removed everywhere.</p>\n<p>I don't know how roc's optimisation works at all, but if it operates on something like the syntax tree, it might help to have stream and unstream implemented in another language, or at least tagged for easy recognition. Certainly to achieve this kind of optimisation they should live in the compiler, one way or another. Leaving them in roc allows for the possibility that roc's hypothetically good optimiser could combine parts of their internals with their producers or consumers when they don't occur as a pair. There are also possible advantages to operations like streamReversed (List.reverse can't be stream-based, but a list can easily be read backwards into a stream). </p>\n<p>I get the impression that there is a hope that roc could very generally recognise construction followed by iteration over and then discarding of many kinds of containers?</p>",
        "id": 419322566,
        "sender_full_name": "Anne Archibald",
        "timestamp": 1706817412
    },
    {
        "content": "<p>in theory, yes, because the list api is more built into the compiler than in say haskell where you can define many of the functions efficiently in userspace (map, folds, etc)</p>",
        "id": 419328826,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706819873
    },
    {
        "content": "<p>in practice, this sort of thing is hard. Haskell has an elaborate system of (phased) rewrite rules to optimize operations on lists</p>",
        "id": 419328919,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706819902
    },
    {
        "content": "<p>we'd need something similar, but ideally it would be simpler and less fragile than that</p>",
        "id": 419328971,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706819928
    },
    {
        "content": "<p>(equality saturation promises that simpler solution, but the research isn't quite at the point yet where we can just implement it for a language as complex as roc)</p>",
        "id": 419329074,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706819965
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281543\">Folkert de Vries</span> <a href=\"#narrow/stream/316715-contributing/topic/Deforestation/near/419328971\">said</a>:</p>\n<blockquote>\n<p>we'd need something similar, but ideally it would be simpler and less fragile than that</p>\n</blockquote>\n<p>I can see that it would be difficult for the compiler to decide which would be more efficient, a sequence of list operations with the possibility of large intermediate lists but also the possibility of opportunistic mutation, or a sequence of stream operations that might or might not be fused into an efficient loop. So perhaps it makes sense to let the user decide which data structure is more efficient and convenient for their application?</p>",
        "id": 419503581,
        "sender_full_name": "Anne Archibald",
        "timestamp": 1706895463
    },
    {
        "content": "<p>In case it's of any interest to anyone, I did the experiment of implementing most of the roc list-processing functions in terms of easily fusible streams. </p>\n<p>I think that with fromList/toList/fromListReversed/toListAppend, fromDictItems/toDict/writeToDict etc. these could provide implementations of most of the operations on lists and dicts (and sets) that are as, or nearly as, efficient as the direct implementations. It would also save writing all the combinations of walkListBackwardsUntil etc. for each container type in turn.</p>\n<p>An example of where this might be less efficient would be keepIf/dropIf: if you use <code>myList |&gt; fromList |&gt; dropIf predicate |&gt; toListAppend (List.withCapacity (List.len myList))</code> then you will get unnecessary copying of elements up until the first item is dropped; after that you will be doing the necessary copying with similar efficiency in a similar loop. </p>\n<p>More minor operations that impact only a few list elements can often be handled with <code>readFromList</code> and <code>writeToList</code>, which use indices and allow opportunistic mutation. Dict operations likewise.</p>\n<p>I do think some kind of iterator concept, possibly as simple as supporting <code>next</code> or possibly a more complex ability like rust's to allow more efficient implementations of specific operations, would simplify operations on containers. The alternative seems to be implementing a huge list of (hopefully the same) transformation operations and hoping the compiler is able to elide all the intermediate containers.</p>",
        "id": 420795958,
        "sender_full_name": "Anne Archibald",
        "timestamp": 1707567794
    },
    {
        "content": "<p>Cool! Got a link we could check out?</p>",
        "id": 420818602,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1707586651
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"431893\">Brian Carroll</span> <a href=\"#narrow/stream/316715-contributing/topic/Deforestation/near/420818602\">said</a>:</p>\n<blockquote>\n<p>Cool! Got a link we could check out?</p>\n</blockquote>\n<p>Oops! Meant to point to this directly:</p>\n<p><a href=\"https://github.com/aarchiba/roc-experiments/blob/main/Stream.roc\">https://github.com/aarchiba/roc-experiments/blob/main/Stream.roc</a></p>\n<p>There is an experimental attempt to make it possible to write streams using a generator syntax, using <code>{} &lt;- Yield value</code> to mean \"yield this value next then resume with the following statements\". Unfortunately I ran into a compiler bug and don't know how to work around it, so it's half-finished (<code>Yield</code> works but <code>yieldFrom</code> doesn't). But it's here:</p>\n<p><a href=\"https://github.com/aarchiba/roc-experiments/blob/main/Generator.roc\">https://github.com/aarchiba/roc-experiments/blob/main/Generator.roc</a></p>",
        "id": 420819597,
        "sender_full_name": "Anne Archibald",
        "timestamp": 1707587475
    }
]