[
    {
        "content": "<p>I was wondering if the community is willing to consider changing our style of commits and merges. The primary issue with the current system is that we cannot use <code>git bisect</code> to isolate the source of a bug, and for a project as large and complex as a compiler, I feel that tool is an invaluable asset. As the codebase grows, it will only get harder to do RCA and fix the issues that crop up. I would like to know your opinions on two suggestions:</p>\n<ol>\n<li>Following the <strong><a href=\"https://www.conventionalcommits.org/en/v1.0.0/\">conventional commit specification</a></strong></li>\n<li>\n<p>Ensuring that all commits in PRs are <strong>self-contained</strong> and <strong>atomic</strong> (no fixup/\"merge main into branch\" commits)<br>\n<em>OR</em></p>\n</li>\n<li>\n<p>Using the <strong>Squash and merge</strong> option for PRs and having separate PRs for changes in different parts of the codebase</p>\n</li>\n</ol>",
        "id": 303163599,
        "sender_full_name": "Prajwal S N",
        "timestamp": 1665342252
    },
    {
        "content": "<p>Interesting idea. Not sure what i think about the conventional commit specification, but i definitely agree it is useful to have a clean trunk that is easy to understand and bisect. Though it is also important to make sure we keep it easy for new people to contribute to the Roc source code.</p>\n<p>I think it is very useful to make sure every commit in trunk can build and pass tests if possible.</p>\n<p>I am not sure the best way to do this with open source software that also isn't too much of a hassle for devs, new users, and reviewers. I like the idea of squashing as long as PRs are smallish. If we just switch to squashing and PRs are large, it actually will likely make bisecting worse due to just getting a gigantic diff that broke things somehow. But also, forcing smaller diffs means more reviews, more chunking of futures, more waiting on CI, and in general more hassle for devs. Not to mention GitHub has a very poor story for creating chains of PRs that are dependent on one another.</p>\n<p>Not sure where that leaves us, but i do agree that it is definitely worth investigating more and investing in.</p>",
        "id": 303179342,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665358062
    },
    {
        "content": "<p>I think a good starting point would be to specify in <code>CONTRIBUTING.md</code> that PRs should not have fixup commits. We can also include the git workflow to squash smaller commits into a single self-contained commit, so that new contributors don't find it daunting to make changes to a reviewed PR. If this is agreeable with everyone, I'll open a pull adding this!</p>",
        "id": 303201742,
        "sender_full_name": "Prajwal S N",
        "timestamp": 1665382027
    },
    {
        "content": "<p>I'd prefer to use a github ci workflow to prevent merging in fixup commits.</p>",
        "id": 303223076,
        "sender_full_name": "Anton",
        "timestamp": 1665392933
    },
    {
        "content": "<blockquote>\n<p>to squash smaller commits into a single self-contained commit, so that new contributors don't find it daunting to make changes to a reviewed PR. </p>\n</blockquote>\n<p>Can you explain why more smaller commits would make it daunting to make changes?</p>",
        "id": 303223247,
        "sender_full_name": "Anton",
        "timestamp": 1665393004
    },
    {
        "content": "<blockquote>\n<p>Can you explain why more smaller commits would make it daunting to make changes?</p>\n</blockquote>\n<p>I meant that newbies who are not familiar with git might not be aware of using <code>git rebase -i</code> to squash fixup commits with the original commit. So listing out the steps they need to follow will allow them to fix review comments, rather than abandoning the PR out of the fear that they'll mess up the commit history.</p>\n<blockquote>\n<p>I'd prefer to use a github ci workflow to prevent merging in fixup commits.</p>\n</blockquote>\n<p>My bad, by \"git workflow\" I meant the sequence of git commands to squash multiple commits into one</p>",
        "id": 303233396,
        "sender_full_name": "Prajwal S N",
        "timestamp": 1665397488
    },
    {
        "content": "<p>I think there's been a slight mixup, my \"I'd prefer to use a github ci workflow to prevent merging in fixup commits.\" was in response to \" to specify in CONTRIBUTING.md that PRs should not have fixup commits\".</p>",
        "id": 303234025,
        "sender_full_name": "Anton",
        "timestamp": 1665397793
    },
    {
        "content": "<blockquote>\n<p>I meant that newbies who are not familiar with git might not be aware of using git rebase -i to squash fixup commits with the original commit. So listing out the steps they need to follow will allow them to fix review comments, rather than abandoning the PR out of the fear that they'll mess up the commit history.</p>\n</blockquote>\n<p>Perhaps we could \"squash fixup commits with the original commit\" automatically in a CI step.</p>",
        "id": 303234193,
        "sender_full_name": "Anton",
        "timestamp": 1665397856
    },
    {
        "content": "<p>so as I see it, the upsides and downsides of the conventional commit specification:</p>\n<p>Upsides:</p>\n<ul>\n<li>commits have machine readable info</li>\n</ul>\n<p>Downsides:</p>\n<ul>\n<li>all developers spend more time than they currently do writing commit messages</li>\n<li>PR reviews for new contributors take longer due to having to coach people to follow the commit rules</li>\n<li>some number of contributors will find that this feels too bureaucratic and not fun, and makes them no longer interested in spending their free time contributing</li>\n</ul>",
        "id": 303248722,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665404073
    },
    {
        "content": "<p>overall I definitely don't think that sounds like an improvement over the status quo of letting people write commit messages however they like <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 303248807,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665404110
    },
    {
        "content": "<p>regarding bisecting, I use it all the time on the compiler (and have on other projects) and I haven't encountered merge commits being a problem <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 303251100,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665405026
    },
    {
        "content": "<p>the only problem is when a particular commit doesn't build</p>",
        "id": 303251263,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665405101
    },
    {
        "content": "<p>so given that we only merge PRs which pass CI, using squash and merge should make sure that all commits which make it into <code>main</code> do indeed build</p>",
        "id": 303251533,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665405191
    },
    {
        "content": "<p>but like Brendan noted, this has the downside that now we lose commit granularity on <code>main</code>, which makes it harder to track bugs down</p>",
        "id": 303251727,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665405251
    },
    {
        "content": "<p>I would rather keep the commit granularity and have to tell <code>git bisect</code> to skip a commit once in awhile, so I don't think should adopt squash and merge</p>",
        "id": 303251821,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665405293
    },
    {
        "content": "<p>I do like the idea of giving guidance in CONTRIBUTING.md on making commits be buildable</p>",
        "id": 303251952,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665405352
    },
    {
        "content": "<p>although I don't think we should spend time enforcing it in PR review - just let people know we'd prefer that</p>",
        "id": 303252078,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665405388
    },
    {
        "content": "<p>from an enforcement perspective, it seems like the type of thing where it would be very easy to spend more time telling people they need to follow the rules than the amount of time the rules save us in debugging</p>",
        "id": 303252414,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665405510
    },
    {
        "content": "<p>so I think just letting people know, but not trying to enforce it, seems like the best way to save ourselves the most time overall!</p>",
        "id": 303252505,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665405541
    }
]