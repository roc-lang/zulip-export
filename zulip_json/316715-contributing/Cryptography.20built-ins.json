[
    {
        "content": "<p>On the <a href=\"#narrow/stream/387892-introductions/topic/introductions/near/443395073\">introductions channel</a> <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span>  suggested that, since I have a strong mathematical background, it would be a good a idea for me to try to make a start on <a href=\"#narrow/stream/304641-ideas/topic/builtin.20cryptography\">this idea </a> to add built-in cryptography.<br>\nI have not contributed before so am likely to need a lot of help getting started.</p>",
        "id": 443790053,
        "sender_full_name": "Matthew Heath",
        "timestamp": 1718031450
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> what are the first steps here? Do we start with bcrypt and call <a href=\"https://ziglang.org/documentation/0.11.0/std/#A;std:crypto.pwhash.bcrypt\">the zig implementation</a>? Probably also need to add some plumbing to setup compiling crypto stuff to llvm IR</p>",
        "id": 443799406,
        "sender_full_name": "Anton",
        "timestamp": 1718033548
    },
    {
        "content": "<p>That's definitely an easy start. Instead of rewriting a crypto impl, just use what already exists in zig and should be fast.</p>",
        "id": 443800010,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718033690
    },
    {
        "content": "<p>are we sure we specifically want bcrypt?</p>",
        "id": 443801970,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1718034253
    },
    {
        "content": "<p>I think sha256 is the least controversial one I can think of</p>",
        "id": 443802249,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1718034340
    },
    {
        "content": "<p>and yeah I think using zig (or C, via Zig) implementations is the way to go here! <span aria-label=\"100\" class=\"emoji emoji-1f4af\" role=\"img\" title=\"100\">:100:</span></p>",
        "id": 443802250,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1718034340
    },
    {
        "content": "<p>sha256 is good for me</p>",
        "id": 443803849,
        "sender_full_name": "Anton",
        "timestamp": 1718034786
    },
    {
        "content": "<p>So in  crates/compiler/builtins/roc do we create a folder Crypt with Sha256.roc as first module?</p>",
        "id": 443804711,
        "sender_full_name": "Anton",
        "timestamp": 1718035028
    },
    {
        "content": "<p>sounds good to me!</p>",
        "id": 443856513,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1718050809
    },
    {
        "content": "<p>Would the plan be to just have a pure version of <a href=\"https://ziglang.org/documentation/0.11.0/std/src/std/crypto/sha2.zig.html#L109\"><code>Sha256.hash</code></a> or would there also be a need for the streaming versions with <code>update</code>and <code>finalResult</code>?</p>",
        "id": 443875087,
        "sender_full_name": "Matthew Heath",
        "timestamp": 1718058835
    },
    {
        "content": "<p>that’s a good question; I’d guess both</p>",
        "id": 443905672,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1718075609
    },
    {
        "content": "<p>It seems good to have SHA256 for message digest, but I think those aren’t recommended for password hashing which I expect would be a common use case</p>",
        "id": 443975327,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1718104332
    },
    {
        "content": "<p>yeah I just think that use case needs more design work to figure out which algorithm(s) to recommend, which to include for backwards compatibility, etc</p>",
        "id": 443985201,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1718107768
    },
    {
        "content": "<p>Is the process: Create issue on the main repo -&gt; create a fork -&gt;  create a branch on the fork-&gt; make the changes -&gt; create a pull request on the main repo , from the forked branch -&gt;  link the PR to the issue ?</p>",
        "id": 444331597,
        "sender_full_name": "Matthew Heath",
        "timestamp": 1718226075
    },
    {
        "content": "<p>That works</p>",
        "id": 444331751,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718226128
    },
    {
        "content": "<p>Though no need to make an issue specifically</p>",
        "id": 444331766,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718226137
    },
    {
        "content": "<p>That works. </p>\n<p>In this case I'm not sure we need an Issue though.</p>\n<p>Also you can make the changes in a fork too, not sure if everyone has write permissions to roc.</p>",
        "id": 444331805,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1718226150
    },
    {
        "content": "<p>If it is work to be done, you can just do it, but tracking in issues can be nice</p>",
        "id": 444331813,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718226155
    },
    {
        "content": "<p>Is there a concept of std libs in Roc yet? What's the difference between built-ins and platform APIs?</p>",
        "id": 444837044,
        "sender_full_name": "Albert",
        "timestamp": 1718435261
    },
    {
        "content": "<p>There are 3 current types of libraries I guess.</p>\n<ol>\n<li>Builtins. They are written or roc or zig, part of the compiler, and always available. Are trusted to be pure but have the ability to be unsafe.</li>\n<li>Roc libraries. 100% pure roc code. Can be imported by any app. May depend on being passed task builder functions to generate tasks to run.</li>\n<li>Platform libraries. Untrusted and must always be accessed through effects/task. Can be written in any language and can do essentially anything. (Note, a platform can also include pure roc code that is equivalent to a roc library)</li>\n</ol>",
        "id": 444837277,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718435473
    },
    {
        "content": "<p>Hi. Just an update that I have finally found some time to work on this at t<a href=\"https://github.com/roc-lang/roc/compare/main...MatthewJohnHeath:rocSHA\">his fork</a>,. It doesn't work currently but I think I can see what I am doing wrong</p>",
        "id": 448955069,
        "sender_full_name": "Matthew Heath",
        "timestamp": 1720043103
    }
]