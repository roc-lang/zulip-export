[
    {
        "content": "<p>Hello! I am looking to write a tree-sitter grammar, and corresponding emacs-ts-mode for the 0.1 syntax. I'm using the snapshots in roc/src/snapshots to validate my grammar.</p>\n<p>However, either i misunderstand something, or i've found an error.</p>\n<p>In 'app_header__nonempty-multiline.txt' the ~~~PARSE section contains the record-field \"pf\" twice, once freestanding, and once as part of the 'packages'. What is going on there?</p>",
        "id": 520451174,
        "sender_full_name": "kris",
        "timestamp": 1748265541
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/blob/main/src/snapshots/app_header__nonempty_multiline__commented.txt#L27\">https://github.com/roc-lang/roc/blob/main/src/snapshots/app_header__nonempty_multiline__commented.txt#L27</a></p>",
        "id": 520451350,
        "sender_full_name": "kris",
        "timestamp": 1748265587
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"781658\">@Anthony Bullard</span></p>",
        "id": 520460677,
        "sender_full_name": "Anton",
        "timestamp": 1748268004
    },
    {
        "content": "<p>i think i forgot to filter the platform out of the record fields in the IR SExpr representation</p>",
        "id": 520463134,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1748268595
    },
    {
        "content": "<p>the platform is just an index in the package record fields so that we make sure to format it first</p>",
        "id": 520463330,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1748268637
    },
    {
        "content": "<p>and can identify it in Can</p>",
        "id": 520463379,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1748268648
    },
    {
        "content": "<p>That makes sense, i'll have a look and see if i can fix it up locally. Still new to zig, but excited about both languages!</p>\n<p>My initial approach is to parse the tree-sitter output and the snapshot output and compare for equality in the grammar test suite, how realistic that is i do not yet know!</p>\n<p>For example, i would have assumed that a record_field would be part of a record, and not just listed flatly in the parent sexp.</p>\n<p>Is this intentional, or is the sexp representation not supposed to include everything?</p>",
        "id": 520469878,
        "sender_full_name": "kris",
        "timestamp": 1748270254
    },
    {
        "content": "<p>i think ideally in the SExpr it would just be an index in the fields array</p>",
        "id": 520473897,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1748271420
    },
    {
        "content": "<p>I have way too little context to know what you're refering to here.</p>\n<p>If i understand correctly, the 'packages' is not a regular record, but a special record that accepts a keyword 'platform', and the index of this kv-pair is extra information that needs to be kept in App?</p>\n<p>Is this not mixing up domains though? </p>\n<p>From my naive perspective, the parser Sexp form should map cleanly to the tree sitter parse output, and anything more complex, like keeping track of indicies of special variables should be on another level.</p>\n<p>In this case, maybe differing between record_fileld and record_platform_field or the like?</p>",
        "id": 520475912,
        "sender_full_name": "kris",
        "timestamp": 1748271986
    },
    {
        "content": "<p>it was never the intention that the Parser IR would somehow match the tree sitter grammar</p>",
        "id": 520476399,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1748272132
    },
    {
        "content": "<p>Parser IR is an Abstraxt syntax tree for parsing into a shape that benefits semantic analysis.  Tree Sitter produces a Concrete syntax tree whose sole goal is to identify regions of text for highlighting and providing information for queries</p>",
        "id": 520476603,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1748272202
    },
    {
        "content": "<p>obviously there is a lot that a ts grammar author could learn by reading and understanding the Parse IR</p>",
        "id": 520476780,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1748272248
    },
    {
        "content": "<p>Ok, i'll update my expectations accordingly!</p>\n<p>I'm happy to be able to re-use the snapshots for this** in any case, i'll just have to massage them a bit more!</p>",
        "id": 520477082,
        "sender_full_name": "kris",
        "timestamp": 1748272325
    },
    {
        "content": "<p>yep and feel free to reach out with any questions!</p>",
        "id": 520480316,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1748273192
    }
]