[
    {
        "content": "<p>Hi! I want to contribute to the zig rewrite, but I also understand the foundations need to be laid first. With my limited zig and compiler experience I won't be the one doing that (though I <strong>have</strong> started doing ziglings wich is super fun). Think others have a similar feeling. But I can't just sit on my hands, so I thought I could do:</p>\n<ul>\n<li>implement tail call elimination (know that part of the current compiler). Might be early for that <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></li>\n<li>serialization of the different IRs to do snapshot testing</li>\n<li>extending tokenization</li>\n<li>anything of smaller size where no specialized knowledge is needed, and moving slow isn't a blocker for others.<br>\nIf you can think of something, let me know.</li>\n</ul>",
        "id": 498791575,
        "sender_full_name": "Norbert Hajagos",
        "timestamp": 1739201288
    },
    {
        "content": "<p>I think working on function specialization would be a good candidate! All you need to do is, for every function in each module:</p>\n<ul>\n<li>use the function set already calculated for you during function solving to replace function args of higher-order functions with a tag union</li>\n<li>where said function args are called in the function body, replace them with a <code>when</code> expression that calls the original functions of the function set using the data in the function set</li>\n</ul>",
        "id": 498808637,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739205248
    },
    {
        "content": "<p>And that's it</p>",
        "id": 498808646,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739205251
    },
    {
        "content": "<p>I think tail call elimination can wait for now, but we'll definitely call on you when we get there</p>",
        "id": 498808753,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739205280
    },
    {
        "content": "<p>Seralizationation of IRs would also be pretty helpful!</p>",
        "id": 498808931,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739205325
    },
    {
        "content": "<p>For stuff that's non-blocking, you could definitely figure out the error reporting stuff. Until that's implemented, we'll just be debug printing all errors to the user.</p>",
        "id": 498809280,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739205414
    },
    {
        "content": "<blockquote>\n<p>Seralizationation of IRs would also be pretty helpful!</p>\n</blockquote>\n<p>Also, if you are will to write a generator or parser for an IR, that also would be really helpful for fuzzing.</p>",
        "id": 498818069,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739207812
    },
    {
        "content": "<p>The current plan seems to just be serializing to and from S-expressions</p>",
        "id": 498818396,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739207907
    },
    {
        "content": "<p>So it shouldn't be too complicated</p>",
        "id": 498818504,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739207935
    },
    {
        "content": "<p>Both are exciting! Specialization isn't something I'm familiar with. Didn't even consider how higher order functions work. Since I had a great experience contributing to the roc std lib and discovering it's inner workings, I would like to do that with specialization as well. </p>\n<p>I've sat an unhealthy amount today, so I can't be working on anything. Tomorrow I'll check the rust specialization code and where it should go in the zig codebase.</p>",
        "id": 498829372,
        "sender_full_name": "Norbert Hajagos",
        "timestamp": 1739211146
    },
    {
        "content": "<p>I wouldn't look at the Rust code very much, it's gonna look very different in the Zig compiler</p>",
        "id": 498832239,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739211950
    },
    {
        "content": "<p>I was thinking this exact same thing <span class=\"user-mention\" data-user-id=\"577599\">@Norbert Hajagos</span>!</p>\n<p>I would love to contribute to the re-write, but was similarly uncertainty of where would be helpful. Since Norbert is gonna take specialization, maybe I could look into writing a parser/generate for an IR?</p>",
        "id": 498832686,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1739212082
    },
    {
        "content": "<p>You could do that, but there are actually 2 similarly scoped compiler stages unassigned</p>",
        "id": 498834781,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739212658
    },
    {
        "content": "<p>First is function lifting, second is function solving</p>",
        "id": 498834872,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739212687
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/rfcs/blob/ayaz/compile-with-lambda-sets/0102-compiling-lambda-sets.md#function_lift\">https://github.com/roc-lang/rfcs/blob/ayaz/compile-with-lambda-sets/0102-compiling-lambda-sets.md#function_lift</a></p>",
        "id": 498835017,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739212718
    },
    {
        "content": "<p>The IR parse and generate is also helpful!</p>",
        "id": 498835401,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739212836
    },
    {
        "content": "<p>Huh... If the rust implementation isn't that relevant, do you have any good resource on this topic? Not looking for a paper, just basic stuff like why are we doing this?</p>",
        "id": 498841820,
        "sender_full_name": "Norbert Hajagos",
        "timestamp": 1739214678
    },
    {
        "content": "<p>That doc I just linked is the holy grail</p>",
        "id": 498841894,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739214698
    },
    {
        "content": "<p>Long story short, we are currently trying to move from typechecked IR to codegen-ready IR in a single, pretty complex pass</p>",
        "id": 498842113,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739214763
    },
    {
        "content": "<p>And our ability to compile lambda sets right now is just broken</p>",
        "id": 498842151,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739214777
    },
    {
        "content": "<p>where a lambda set is the set of values dynamically captured by a closure at runtime</p>",
        "id": 498842487,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739214885
    },
    {
        "content": "<p>So this multi-stage approach is all built around a consistent, robust design that transforms any possible Roc code into just concretely-typed functions and values, so we don't have to worry about lambda sets anymore</p>",
        "id": 498842560,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739214912
    },
    {
        "content": "<p>Got it!</p>",
        "id": 498843867,
        "sender_full_name": "Norbert Hajagos",
        "timestamp": 1739215332
    },
    {
        "content": "<p>Iâ€™m interested in doing function lifting!</p>",
        "id": 498845818,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1739215976
    },
    {
        "content": "<p>That leaves function-solving then, which I can start looking into.</p>\n<p>That doc is super helpful!</p>",
        "id": 498847247,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1739216427
    },
    {
        "content": "<p>Holy crap, you guys are my heroes!</p>",
        "id": 498848374,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739216800
    },
    {
        "content": "<p>That leaves every part of the pipeline assigned except for statement lowering and refcounting</p>",
        "id": 498848463,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739216834
    },
    {
        "content": "<p>An FYI for those volunteers here, those two stages are mostly gonna be copying from Rust and adapting to the Zig array-based IR storage</p>",
        "id": 498848558,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739216872
    },
    {
        "content": "<p>But that'll require reading a good bit more code</p>",
        "id": 498848696,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739216915
    },
    {
        "content": "<p>The lambda set stages you've all volunteered for just need you to understand that document</p>",
        "id": 498848765,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739216941
    },
    {
        "content": "<p>Just a note</p>",
        "id": 498849371,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739217128
    },
    {
        "content": "<p>Lower should be trivial</p>",
        "id": 498849383,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739217132
    },
    {
        "content": "<p>Basic refcounting should be pretty easy</p>",
        "id": 498849401,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739217140
    },
    {
        "content": "<p>The important refcounting optimizations likely are more complex to port, but pretty fundamental to a number of perf cases</p>",
        "id": 498849477,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739217161
    },
    {
        "content": "<p>A heads up to <span class=\"user-mention\" data-user-id=\"611722\">@Isaac Van Doren</span> if you end up picking up function lifting, the one piece I'm not sure how to implement yet in function lifting is how to handle destructures, especially top-level ones. You'll need to figure out how to handle</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">condition</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"w\">        </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">123</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nf\">|</span><span class=\"nv\">n</span><span class=\"nf\">|</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"kr\">else</span>\n<span class=\"w\">        </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">456</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nf\">|</span><span class=\"nv\">n</span><span class=\"nf\">|</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"w\"> </span><span class=\"nf\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 498849541,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739217179
    },
    {
        "content": "<p>So feel free to ask around or maybe Ayaz in particular if you can't figure that out</p>",
        "id": 498849659,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739217219
    },
    {
        "content": "<p>Alright, thanks for the heads up <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 498850123,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1739217370
    },
    {
        "content": "<p>When setting up a super basic test for function solving, I ran into a slew of zig compile errors originating in <code>base</code> modules. Is this a known issue?</p>\n<p><a href=\"https://github.com/roc-lang/roc/pull/7600\">I have a PR up</a> with fixes to these in case it's helpful!</p>",
        "id": 498907229,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1739239024
    },
    {
        "content": "<p>Zig only compiles what's being used, so those errors must've arisen from that code not being called</p>",
        "id": 498907492,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739239156
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/channel/316715-contributing/topic/contributing.20to.20the.20zig.20rewrite/near/498848463\">said</a>:</p>\n<blockquote>\n<p>That leaves every part of the pipeline assigned except for statement lowering and refcounting</p>\n</blockquote>\n<p>I don't know compilers or zig (yet), but I'll take a look at lowering <span aria-label=\"ok\" class=\"emoji emoji-1f44c\" role=\"img\" title=\"ok\">:ok:</span></p>",
        "id": 498996805,
        "sender_full_name": "Niclas Ahden",
        "timestamp": 1739276619
    },
    {
        "content": "<p>That was a fruitful discussion, It's great to see others taking the leap!</p>",
        "id": 499088046,
        "sender_full_name": "Norbert Hajagos",
        "timestamp": 1739303831
    },
    {
        "content": "<p>is parsing Roc itself mentioned here, or is that for later (just asking because looking at Zig comptime it seems like it could be used to create quite a powerful parser...)</p>",
        "id": 499110892,
        "sender_full_name": "Wizard ish",
        "timestamp": 1739313584
    },
    {
        "content": "<p>I didn't mention parsing as a volunteering option because it's being handled by two people already</p>",
        "id": 499113007,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739314596
    },
    {
        "content": "<p>Joshua and Anthony</p>",
        "id": 499113016,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739314602
    },
    {
        "content": "<p>You're right that Zig's comptime could be used to do some crazy stuff for parsing</p>",
        "id": 499113192,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739314690
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"782426\">Wizard ish</span> <a href=\"#narrow/stream/316715-contributing/topic/contributing.20to.20the.20zig.20rewrite/near/499110892\">said</a>:</p>\n<blockquote>\n<p>is parsing Roc itself mentioned here, or is that for later (just asking because looking at Zig comptime it seems like it could be used to create quite a powerful parser...)</p>\n</blockquote>\n<p>If you want to experiment with comp time and faster parsing techniques, feel free to. Once we have the fuzzer up and running, and more robust tests, we can look into trying more advanced techniques. Just want to make sure we have a stable test suite first. That said, no guarantee we will use the techniques if they make the parser too complex or hard to understand. But if it interests you, I still advise exploring.</p>",
        "id": 499119011,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739318129
    },
    {
        "content": "<p>I think experiments are interesting, but I want to stress that we want to keep the compiler readable and easy to hack on.  So let's be mindful of that before committing to more extreme forms of Wizardry here <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>  Obviously HUGE improvements would be great, but I'd like to see how performant this straight SoA/DOD approach is without (much) magic.  Parsing is also like 5% of the compute time in a compile task - reducing algorithmic complexity in the build phase is the most impactful work that can be done on overall compiler performance</p>",
        "id": 499121751,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1739319688
    }
]