[
    {
        "content": "<p>Trying to implement isApproxEq and ran into this compile error:</p>\n<p>Note: I can't derive Bool.isEq for floating-point types. That's<br>\n  because Roc's floating-point numbers cannot be compared for total<br>\n  equality - in Roc, <code>NaN</code> is never comparable to <code>NaN</code>. If a type<br>\n  doesn't support total equality, it cannot support the Eq ability!</p>\n<p>I need value == referenceValue for positive, negative infinity, +0 = -0, and exact matches.</p>\n<p>If value or reference is Nan, it should always return false.</p>\n<p>isApproxEq : { value: Frac a, referenceValue: Frac a, relativeTolerance ? Frac a, absoluteTolerance ? Frac a } -&gt; Bool<br>\nisApproxEq = \\{ value, referenceValue, relativeTolerance? 0.00001, absoluteTolerance? 0.000000001 } <br>\n    -&gt; <br>\n    if value == referenceValue then # For infinity<br>\n       Bool.true<br>\n    else<br>\n       Num.absDiff value referenceValue &lt;= absoluteTolerance + relativeTolerance * Num.abs referenceValue</p>",
        "id": 412609629,
        "sender_full_name": "Brian Teague",
        "timestamp": 1705088674
    },
    {
        "content": "<p>I need to do more research on how, Rust, Haskell, Python handle floating point equality.</p>",
        "id": 412619835,
        "sender_full_name": "Brian Teague",
        "timestamp": 1705093244
    },
    {
        "content": "<p>you can get <code>a == b</code> for floats with <code>a &gt;= b &amp;&amp; a &lt;= b</code> - it optimizes to equality behind the scenes</p>",
        "id": 412624513,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1705095695
    },
    {
        "content": "<p>isApproxEq should consider 2 inifinities as not equal</p>",
        "id": 412638277,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705103252
    },
    {
        "content": "<p>So it should just need to be <code>Num.absDiff value referenceValue &lt;= absoluteTolerance + relativeTolerance * Num.abs referenceValue</code></p>",
        "id": 412638298,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705103263
    },
    {
        "content": "<p>I think most languages return true when comparing infinity to infinity.</p>",
        "id": 412718522,
        "sender_full_name": "Brian Teague",
        "timestamp": 1705160008
    },
    {
        "content": "<p>For equality, yes (but only cause they have to to follow the ieee spec and it is the simple answer).</p>",
        "id": 412725006,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705165772
    },
    {
        "content": "<p><del>For approximately equality that is actually useful, generally no to my understanding</del></p>\n<p>Seems more things than expect default to them being equal. Actually a bit surprised. That will hide bugs in certain places.</p>",
        "id": 412725026,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705165788
    },
    {
        "content": "<p>Can we make that an optional flag that defaults to true <code>infinitiesEquivalent ? True</code></p>",
        "id": 412725756,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705166184
    },
    {
        "content": "<p>are the extra conditionals there worth it for the edge case, given that this is a numeric comparison that might be performed a lot?</p>",
        "id": 412737564,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1705176392
    },
    {
        "content": "<p>I mean if you expect infinities to be equivalent, it is required.</p>",
        "id": 412738312,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705177108
    },
    {
        "content": "<p>This should compile down to something branchless</p>",
        "id": 412738364,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705177172
    },
    {
        "content": "<p>So <code>infinitiesEquivalent</code> is just an extra boolean and.</p>",
        "id": 412738366,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705177184
    },
    {
        "content": "<p>All the float numbers will outweigh that and there should be a lot of ILP, so I wouldn't really be concerned</p>",
        "id": 412738428,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705177214
    },
    {
        "content": "<p>Though I might explictly write the branchless form in roc just to be safe</p>",
        "id": 412738439,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705177233
    },
    {
        "content": "<p>I modified the tests to match numpy's website.  The tests are passing including Infinity and NaN.<br>\nThe PR is ready for review.</p>",
        "id": 416577269,
        "sender_full_name": "Brian Teague",
        "timestamp": 1705586532
    }
]