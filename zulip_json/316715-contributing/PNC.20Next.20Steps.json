[
    {
        "content": "<p>I think that PNC should land probably tomorrow - unless Joshua takes another look and has another point of contention.  I have a stash with all examples and builtins migrated to use PNC(I moved the flag to an option that allow the user to choose a migration to apply (all, none, snake_case, and parens_and_commas).  Should I attempt to do the Tutorial as well?  Any thing else I should address as a fast follow?</p>",
        "id": 491551765,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735788830
    },
    {
        "content": "<p>The tutorial would be a good change, but a different PR would be good, yes</p>",
        "id": 491551969,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735788998
    },
    {
        "content": "<p>Oh yeah, this will all be in a separate PR for sure</p>",
        "id": 491551991,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735789028
    },
    {
        "content": "<p>I don't think there's anything that needs to be in a fast followup</p>",
        "id": 491552015,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735789060
    },
    {
        "content": "<p>Since this change will be made incrementally</p>",
        "id": 491552018,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735789071
    },
    {
        "content": "<p>But updating the builtins next would unblock deprecation of whitespace function calls</p>",
        "id": 491552100,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735789118
    },
    {
        "content": "<p>I presume you have a mental list of the steps between now and getting this into basic-(cli|webserver) releases</p>",
        "id": 491552133,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735789154
    },
    {
        "content": "<p>Happy to talk through those if you don't</p>",
        "id": 491552144,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735789164
    },
    {
        "content": "<p>But that's the main goal, after which case we do either soft deprecation via warnings or hard deprecation via removal</p>",
        "id": 491552163,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735789199
    },
    {
        "content": "<p>But I understand removal to be necessary to unblock other syntax features, so I think we should just bite that bullet</p>",
        "id": 491552224,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735789234
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/NB6zkf5bZhzx3rs6W9ViQHBs/Screenshot-2025-01-01-at-9.44.43-PM.png\">Screenshot 2025-01-01 at 9.44.43 PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/NB6zkf5bZhzx3rs6W9ViQHBs/Screenshot-2025-01-01-at-9.44.43-PM.png\" title=\"Screenshot 2025-01-01 at 9.44.43 PM.png\"><img data-original-dimensions=\"560x123\" src=\"/user_uploads/thumbnail/22008/NB6zkf5bZhzx3rs6W9ViQHBs/Screenshot-2025-01-01-at-9.44.43-PM.png/840x560.webp\"></a></div>",
        "id": 491552466,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735789491
    },
    {
        "content": "<p>Hmm... not a perfect intermediate state, but it's correct, so go for it!</p>",
        "id": 491552593,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735789601
    },
    {
        "content": "<p>Here's my checklist</p>\n<ul>\n<li>[x] <del>Land the PNC PR</del></li>\n<li>[ ] Update builtins and example in roc-lang/roc</li>\n<li>[ ] Update examples in roc-lang/examples</li>\n<li>[ ] Update tutorial</li>\n<li>[ ] Make announcement in <a class=\"stream\" data-stream-id=\"397893\" href=\"/#narrow/channel/397893-announcements\">#announcements</a> </li>\n<li>[ ] Update basic-cli / basic-webserver platforms</li>\n<li>[ ] Work with active package authors to update their packages</li>\n<li>[ ] ????</li>\n<li>[ ] Profit!!!</li>\n</ul>",
        "id": 491552649,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735789666
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/channel/316715-contributing/topic/PNC.20Next.20Steps/near/491552593\">said</a>:</p>\n<blockquote>\n<p>Hmm... not a perfect intermediate state, but it's correct, so go for it!</p>\n</blockquote>\n<p>This was done by hand editing HTML in dev tools. What's off to you?</p>",
        "id": 491552710,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735789697
    },
    {
        "content": "<p>The syntax itself</p>",
        "id": 491552721,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735789708
    },
    {
        "content": "<p>Because no new lambda syntax and SD?</p>",
        "id": 491552744,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735789733
    },
    {
        "content": "<p>Not a you thing, an evolution by discrete generations</p>",
        "id": 491552751,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735789737
    },
    {
        "content": "<p>Yeah</p>",
        "id": 491552759,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735789739
    },
    {
        "content": "<p>Ah, I'd actually be very happy with this</p>",
        "id": 491552774,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735789752
    },
    {
        "content": "<p>But I really would like to do the new lambda syntax next</p>",
        "id": 491552782,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735789764
    },
    {
        "content": "<p>I mainly dislike the odd (but correct) alignment of the parens for <code>List.map(...)</code></p>",
        "id": 491552809,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735789791
    },
    {
        "content": "<p>otherwise this looks good to me</p>",
        "id": 491552827,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735789799
    },
    {
        "content": "<p>Let me see how we would format this right now</p>",
        "id": 491552889,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735789833
    },
    {
        "content": "<p>That's why I was pushing for that weird Kotlin syntax that takes final argument callbacks out of the parens, but they don't seem to be popular, so <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 491552908,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735789851
    },
    {
        "content": "<p>Oh that's exactly how it will look after migration</p>",
        "id": 491553088,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735789987
    },
    {
        "content": "<p>Yep</p>",
        "id": 491553115,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735790006
    },
    {
        "content": "<p>Add a comma to the end of the lambda, and you get:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">credits</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"no\">List</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">songs</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">\\</span><span class=\"n\">song</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"Performed by $(song.artist)\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</code></pre></div>",
        "id": 491553205,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735790072
    },
    {
        "content": "<p>Why the double indent?</p>",
        "id": 491553242,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735790110
    },
    {
        "content": "<p>That's my fault copy/pasting</p>",
        "id": 491553249,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735790121
    },
    {
        "content": "<p>Oh, okay</p>",
        "id": 491553252,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735790126
    },
    {
        "content": "<p>To format it, I had to wrap it in a function:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">does_not_matter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">\\</span><span class=\"n\">songs</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">credits</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"no\">List</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">songs</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">\\</span><span class=\"n\">song</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"s2\">\"Performed by $(song.artist)\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">credits</span>\n</code></pre></div>",
        "id": 491553266,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735790141
    },
    {
        "content": "<p>I see</p>",
        "id": 491553272,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735790145
    },
    {
        "content": "<p>Because I was using a real file :-)</p>",
        "id": 491553315,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735790164
    },
    {
        "content": "<p>Could have done it as a snapshot but thought that would be silly</p>",
        "id": 491553335,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735790184
    },
    {
        "content": "<p>Since this will lead to breaking changes, I think it would be good to slip <a href=\"https://github.com/roc-lang/roc/issues/7448\">#7448</a> in with it. Both require updates to platforms for functionality to continue.</p>",
        "id": 491554877,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735791502
    },
    {
        "content": "<p>Also, I would advise pushing <code>[ ] Update basic-cli / basic-webserver platforms</code> right after <code>Update builtins</code> and definitely before the annoucement. Otherwise, people will read the announcement but not really be able to test anything cause basic-cli won't be updated yet.</p>",
        "id": 491554942,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735791577
    },
    {
        "content": "<p>This is just PNC migration - not a breaking change for the platform as long as they are using nightly compiler</p>",
        "id": 491599907,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735819086
    },
    {
        "content": "<p>Ah, this won't include the snake case renaming. I thought we were shipping both together.</p>",
        "id": 491611348,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735824952
    },
    {
        "content": "<p>Migrating builtins to snake_case _is_ breaking and a lot of work</p>",
        "id": 491616534,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735827456
    },
    {
        "content": "<p>Well, relative to migrating to PNC</p>",
        "id": 491616557,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735827471
    },
    {
        "content": "<p>One thing that I'm noticing in this migration that I'm not sure if we want is that crash, dbg, and try are looking like application instead of a keyword [space] expr sequence in a statement</p>",
        "id": 491616901,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735827611
    },
    {
        "content": "<p>I know that the plan is to deprecate <code>try</code> keyword once we have PNC (is that correct <span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> ), so i'm not as worried about that, but crash and dbg I don't think should look like application even if that technically works</p>",
        "id": 491617182,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735827727
    },
    {
        "content": "<p>Yes, I believe it's better to have those keywords be visually distinct</p>",
        "id": 491618441,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735828286
    },
    {
        "content": "<p>It's a formatting issue that I'll dive into before I have to go back to work <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>",
        "id": 491619109,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735828526
    },
    {
        "content": "<p>I assumed they would also transfer to PNC.</p>",
        "id": 491619126,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735828533
    },
    {
        "content": "<p>I mean they aren't distinct in today's roc.</p>",
        "id": 491619165,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735828549
    },
    {
        "content": "<p>So why make them distinct in PNC?</p>",
        "id": 491619188,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735828557
    },
    {
        "content": "<p>They of course can be colored differently by the lsp</p>",
        "id": 491619313,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735828583
    },
    {
        "content": "<p>Yeah, it's a small but important question.</p>",
        "id": 491619353,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735828598
    },
    {
        "content": "<p>Let me check return</p>",
        "id": 491619371,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735828606
    },
    {
        "content": "<p>Also, <code>dbg</code> needs to fit into method syntax pipelines.</p>",
        "id": 491619394,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735828617
    },
    {
        "content": "<p><code>.pass_to(dbg)</code> or <code>.(dbg)()</code></p>",
        "id": 491619484,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735828652
    },
    {
        "content": "<p>Ok, <code>return</code> does what I expect which is it is a distinct keyword in a statement</p>",
        "id": 491619494,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735828656
    },
    {
        "content": "<p>Yeah, return is a true keyword. <code>dbg</code> and <code>crash</code> could easily be platform functions instead as <code>dbg!</code> and <code>crash!</code>. that is why I don't think they should be too special</p>",
        "id": 491619717,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735828740
    },
    {
        "content": "<p>I don't think we want them marked as effectful do we?</p>",
        "id": 491619800,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735828779
    },
    {
        "content": "<p>That would color any otherwise pure function that uses them</p>",
        "id": 491619860,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735828802
    },
    {
        "content": "<p>Without syntax highlighting they aren't distinct as special.</p>",
        "id": 491619897,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735828807
    },
    {
        "content": "<p>I think he's just pointing out that they could be implemented as platform functions, not that they should have exclams</p>",
        "id": 491619963,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735828839
    },
    {
        "content": "<p>Since they're so simple</p>",
        "id": 491619984,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735828849
    },
    {
        "content": "<p>Sure</p>",
        "id": 491619999,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735828855
    },
    {
        "content": "<p>But is the intermediate state OK?</p>",
        "id": 491620020,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735828864
    },
    {
        "content": "<p>Where they are in the language still special keywords, but formatted like function application?</p>",
        "id": 491620067,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735828885
    },
    {
        "content": "<p>Oh, and I just noticed that Sam landed his PR removing backpassing</p>",
        "id": 491620278,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735829002
    },
    {
        "content": "<p>So....we'll see if I get around to dealing with all of those conflicts today</p>",
        "id": 491620308,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735829019
    },
    {
        "content": "<p>Yeah, sorry if my comment was confusing. Was just trying to say I think we should handle dbg and crash like normal functions. They really are normal platform functions. They just get a special exception not to require <code>!</code></p>",
        "id": 491620463,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735829088
    },
    {
        "content": "<p>Makes sense!</p>",
        "id": 491621913,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735829769
    },
    {
        "content": "<p>That actually will simplify the compiler quite a bit</p>",
        "id": 491621937,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735829786
    },
    {
        "content": "<p>Makes me wish that <code>return</code> could just be a unary op like <code>^</code> and then I don't think we would need statements at all anymore</p>",
        "id": 491622059,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735829842
    },
    {
        "content": "<p>I agree, but since <code>return</code> is only used at the start of statements, it's not that bad</p>",
        "id": 491622731,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735830131
    },
    {
        "content": "<p>Yes but now it will be the only thing requiring us to having statements</p>",
        "id": 491622843,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735830201
    },
    {
        "content": "<p>Doesn't <code>x = 123</code> also require that?</p>",
        "id": 491622877,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735830226
    },
    {
        "content": "<p>What I mean is now Statements can just be a enum of {BindingStmt, ExprStmt}</p>",
        "id": 491622971,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735830265
    },
    {
        "content": "<p>And technically it wouldn't be needed since an Expr block would just be something like a enum of {ExprOnly(expr), WithBindings(bindings: [Binding], expr: Expr)}</p>",
        "id": 491623098,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735830351
    },
    {
        "content": "<p>Sure, but I don't think a grammar of</p>\n<div class=\"codehilite\"><pre><span></span><code>(pattern &quot;=&quot; | &quot;return&quot;)? expr\n</code></pre></div>\n<p>for statements is that bad</p>",
        "id": 491623173,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735830374
    },
    {
        "content": "<p>True</p>",
        "id": 491623215,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735830408
    },
    {
        "content": "<p>We're probably on the same page here. Would love to remove it, not sure how <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 491623231,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735830416
    },
    {
        "content": "<p>And I guess <code>^</code> would eat into the strangeness budget even though (or maybe exactly because) it's cribbed from SmallTalk <span aria-label=\"tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"tears\">:tears:</span></p>",
        "id": 491623306,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735830461
    },
    {
        "content": "<blockquote>\n<p>it's cribbed from SmallTalk</p>\n</blockquote>\n<p>never would have guessed. I just thought it was something totally random.</p>",
        "id": 491627254,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735832207
    },
    {
        "content": "<p>PNC is gonna have to wait a day or two.  I pulled in <span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> 's change and now there is one snapshot that is failing in a nasty way and I gotta figure out what happened.</p>",
        "id": 491679822,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735860442
    },
    {
        "content": "<p>Is there something I'd be able to help with?</p>",
        "id": 491679873,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735860480
    },
    {
        "content": "<p>Maybe</p>",
        "id": 491679928,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735860489
    },
    {
        "content": "<p>This:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">C</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"c1\">#</span>\n<span class=\"p\">)</span><span class=\"n\">implements</span><span class=\"w\"> </span><span class=\"ss\">e</span><span class=\"p\">:</span><span class=\"n\">m</span>\n<span class=\"n\">C</span>\n</code></pre></div>\n<p>is supposed be:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">@</span><span class=\"mi\">0</span><span class=\"o\">-</span><span class=\"mi\">22</span><span class=\"w\"> </span><span class=\"n\">SpaceAfter</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"n\">Defs</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">Defs</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">tags</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">                </span><span class=\"n\">EitherIndex</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span>\n<span class=\"w\">            </span><span class=\"p\">],</span>\n<span class=\"w\">            </span><span class=\"n\">regions</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">                </span><span class=\"o\">@</span><span class=\"mi\">0</span><span class=\"o\">-</span><span class=\"mi\">20</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">],</span>\n<span class=\"w\">            </span><span class=\"n\">space_before</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">                </span><span class=\"n\">Slice</span><span class=\"o\">&lt;</span><span class=\"n\">roc_parse</span><span class=\"p\">::</span><span class=\"n\">ast</span><span class=\"p\">::</span><span class=\"n\">CommentOrNewline</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">            </span><span class=\"p\">],</span>\n<span class=\"w\">            </span><span class=\"n\">space_after</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">                </span><span class=\"n\">Slice</span><span class=\"o\">&lt;</span><span class=\"n\">roc_parse</span><span class=\"p\">::</span><span class=\"n\">ast</span><span class=\"p\">::</span><span class=\"n\">CommentOrNewline</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">            </span><span class=\"p\">],</span>\n<span class=\"w\">            </span><span class=\"n\">spaces</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[],</span>\n<span class=\"w\">            </span><span class=\"n\">type_defs</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">                </span><span class=\"n\">Ability</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                    </span><span class=\"n\">header</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">TypeHeader</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                        </span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"mi\">0</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"p\">,</span>\n<span class=\"w\">                        </span><span class=\"n\">vars</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">                            </span><span class=\"o\">@</span><span class=\"mi\">2</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"n\">SpaceAfter</span><span class=\"p\">(</span>\n<span class=\"w\">                                </span><span class=\"n\">NumLiteral</span><span class=\"p\">(</span>\n<span class=\"w\">                                    </span><span class=\"s\">\"4\"</span><span class=\"p\">,</span>\n<span class=\"w\">                                </span><span class=\"p\">),</span>\n<span class=\"w\">                                </span><span class=\"p\">[</span>\n<span class=\"w\">                                    </span><span class=\"n\">LineComment</span><span class=\"p\">(</span>\n<span class=\"w\">                                        </span><span class=\"s\">\"\"</span><span class=\"p\">,</span>\n<span class=\"w\">                                    </span><span class=\"p\">),</span>\n<span class=\"w\">                                </span><span class=\"p\">],</span>\n<span class=\"w\">                            </span><span class=\"p\">),</span>\n<span class=\"w\">                        </span><span class=\"p\">],</span>\n<span class=\"w\">                    </span><span class=\"p\">},</span>\n<span class=\"w\">                    </span><span class=\"n\">loc_implements</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"mi\">6</span><span class=\"o\">-</span><span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"n\">Implements</span><span class=\"p\">,</span>\n<span class=\"w\">                    </span><span class=\"n\">members</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">                        </span><span class=\"n\">AbilityMember</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                            </span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"mi\">17</span><span class=\"o\">-</span><span class=\"mi\">18</span><span class=\"w\"> </span><span class=\"s\">\"e\"</span><span class=\"p\">,</span>\n<span class=\"w\">                            </span><span class=\"n\">typ</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"mi\">19</span><span class=\"o\">-</span><span class=\"mi\">20</span><span class=\"w\"> </span><span class=\"n\">BoundVariable</span><span class=\"p\">(</span>\n<span class=\"w\">                                </span><span class=\"s\">\"m\"</span><span class=\"p\">,</span>\n<span class=\"w\">                            </span><span class=\"p\">),</span>\n<span class=\"w\">                        </span><span class=\"p\">},</span>\n<span class=\"w\">                    </span><span class=\"p\">],</span>\n<span class=\"w\">                </span><span class=\"p\">},</span>\n<span class=\"w\">            </span><span class=\"p\">],</span>\n<span class=\"w\">            </span><span class=\"n\">value_defs</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[],</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"o\">@</span><span class=\"mi\">21</span><span class=\"o\">-</span><span class=\"mi\">22</span><span class=\"w\"> </span><span class=\"n\">SpaceBefore</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"n\">Tag</span><span class=\"p\">(</span>\n<span class=\"w\">                </span><span class=\"s\">\"C\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">),</span>\n<span class=\"w\">            </span><span class=\"p\">[</span>\n<span class=\"w\">                </span><span class=\"n\">Newline</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">],</span>\n<span class=\"w\">        </span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">[</span>\n<span class=\"w\">        </span><span class=\"n\">Newline</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p>but comes out instead as:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"mi\">0</span><span class=\"o\">-</span><span class=\"mi\">22</span><span class=\"w\"> </span><span class=\"n\">SpaceAfter</span><span class=\"p\">(</span>\n<span class=\"w\">     </span><span class=\"n\">Defs</span><span class=\"p\">(</span>\n<span class=\"w\">         </span><span class=\"n\">Defs</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">             </span><span class=\"n\">tags</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">                 </span><span class=\"n\">EitherIndex</span><span class=\"p\">(</span><span class=\"mi\">2147483648</span><span class=\"p\">),</span>\n<span class=\"w\">             </span><span class=\"p\">],</span>\n<span class=\"w\">             </span><span class=\"n\">regions</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">                 </span><span class=\"o\">@</span><span class=\"mi\">0</span><span class=\"o\">-</span><span class=\"mi\">20</span><span class=\"p\">,</span>\n<span class=\"w\">             </span><span class=\"p\">],</span>\n<span class=\"w\">             </span><span class=\"n\">space_before</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">                 </span><span class=\"n\">Slice</span><span class=\"o\">&lt;</span><span class=\"n\">roc_parse</span><span class=\"p\">::</span><span class=\"n\">ast</span><span class=\"p\">::</span><span class=\"n\">CommentOrNewline</span><span class=\"w\">  </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">             </span><span class=\"p\">],</span>\n<span class=\"w\">             </span><span class=\"n\">space_after</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">                 </span><span class=\"n\">Slice</span><span class=\"o\">&lt;</span><span class=\"n\">roc_parse</span><span class=\"p\">::</span><span class=\"n\">ast</span><span class=\"p\">::</span><span class=\"n\">CommentOrNewline</span><span class=\"w\">  </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">             </span><span class=\"p\">],</span>\n<span class=\"w\">             </span><span class=\"n\">spaces</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[],</span>\n<span class=\"w\">             </span><span class=\"n\">type_defs</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[],</span>\n<span class=\"w\">             </span><span class=\"n\">value_defs</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">                 </span><span class=\"n\">Annotation</span><span class=\"p\">(</span>\n<span class=\"w\">                     </span><span class=\"o\">@</span><span class=\"mi\">0</span><span class=\"o\">-</span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"n\">Apply</span><span class=\"p\">(</span>\n<span class=\"w\">                         </span><span class=\"o\">@</span><span class=\"mi\">0</span><span class=\"o\">-</span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"n\">Apply</span><span class=\"p\">(</span>\n<span class=\"w\">                             </span><span class=\"o\">@</span><span class=\"mi\">0</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">Tag</span><span class=\"p\">(</span>\n<span class=\"w\">                                 </span><span class=\"s\">\"C\"</span><span class=\"p\">,</span>\n<span class=\"w\">                             </span><span class=\"p\">),</span>\n<span class=\"w\">                             </span><span class=\"p\">[</span>\n<span class=\"w\">                                 </span><span class=\"o\">@</span><span class=\"mi\">2</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"n\">SpaceAfter</span><span class=\"p\">(</span>\n<span class=\"w\">                                     </span><span class=\"n\">NumLiteral</span><span class=\"p\">(</span>\n<span class=\"w\">                                         </span><span class=\"s\">\"4\"</span><span class=\"p\">,</span>\n<span class=\"w\">                                     </span><span class=\"p\">),</span>\n<span class=\"w\">                                     </span><span class=\"p\">[</span>\n<span class=\"w\">                                         </span><span class=\"n\">LineComment</span><span class=\"p\">(</span>\n<span class=\"w\">                                             </span><span class=\"s\">\"\"</span><span class=\"p\">,</span>\n<span class=\"w\">                                         </span><span class=\"p\">),</span>\n<span class=\"w\">                                     </span><span class=\"p\">],</span>\n<span class=\"w\">                                 </span><span class=\"p\">),</span>\n<span class=\"w\">                             </span><span class=\"p\">],</span>\n<span class=\"w\">                             </span><span class=\"n\">ParensAndCommas</span><span class=\"p\">,</span>\n<span class=\"w\">                         </span><span class=\"p\">),</span>\n<span class=\"w\">                         </span><span class=\"p\">[</span>\n<span class=\"w\">                             </span><span class=\"o\">@</span><span class=\"mi\">6</span><span class=\"o\">-</span><span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"n\">Identifier</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                                 </span><span class=\"n\">ident</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"implements\"</span><span class=\"p\">,</span>\n<span class=\"w\">                             </span><span class=\"p\">},</span>\n<span class=\"w\">                             </span><span class=\"o\">@</span><span class=\"mi\">17</span><span class=\"o\">-</span><span class=\"mi\">18</span><span class=\"w\"> </span><span class=\"n\">Identifier</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                                 </span><span class=\"n\">ident</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"e\"</span><span class=\"p\">,</span>\n<span class=\"w\">                             </span><span class=\"p\">},</span>\n<span class=\"w\">                         </span><span class=\"p\">],</span>\n<span class=\"w\">                         </span><span class=\"n\">Whitespace</span><span class=\"p\">,</span>\n<span class=\"w\">                     </span><span class=\"p\">),</span>\n<span class=\"w\">                     </span><span class=\"o\">@</span><span class=\"mi\">19</span><span class=\"o\">-</span><span class=\"mi\">20</span><span class=\"w\"> </span><span class=\"n\">BoundVariable</span><span class=\"p\">(</span>\n<span class=\"w\">                         </span><span class=\"s\">\"m\"</span><span class=\"p\">,</span>\n<span class=\"w\">                     </span><span class=\"p\">),</span>\n<span class=\"w\">                 </span><span class=\"p\">),</span>\n<span class=\"w\">             </span><span class=\"p\">],</span>\n<span class=\"w\">         </span><span class=\"p\">},</span>\n<span class=\"w\">         </span><span class=\"o\">@</span><span class=\"mi\">21</span><span class=\"o\">-</span><span class=\"mi\">22</span><span class=\"w\"> </span><span class=\"n\">SpaceBefore</span><span class=\"p\">(</span>\n<span class=\"w\">             </span><span class=\"n\">Tag</span><span class=\"p\">(</span>\n<span class=\"w\">                 </span><span class=\"s\">\"C\"</span><span class=\"p\">,</span>\n<span class=\"w\">             </span><span class=\"p\">),</span>\n<span class=\"w\">             </span><span class=\"p\">[</span>\n<span class=\"w\">                 </span><span class=\"n\">Newline</span><span class=\"p\">,</span>\n<span class=\"w\">             </span><span class=\"p\">],</span>\n<span class=\"w\">         </span><span class=\"p\">),</span>\n<span class=\"w\">     </span><span class=\"p\">),</span>\n<span class=\"w\">     </span><span class=\"p\">[</span>\n<span class=\"w\">         </span><span class=\"n\">Newline</span><span class=\"p\">,</span>\n<span class=\"w\">     </span><span class=\"p\">],</span>\n<span class=\"w\"> </span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 491680470,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735860796
    },
    {
        "content": "<p>When you say \"is supposed to be\", do you mean that's the old state, or do you mean that's what you <em>personally</em> think it should be?</p>",
        "id": 491680555,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735860854
    },
    {
        "content": "<p>I think it's meant to be a Ability, but this \"expr\", even formatted makes zero sense to me at all</p>",
        "id": 491680587,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735860893
    },
    {
        "content": "<p>I didn't think you could have <code>implements</code> in the header of an annotation</p>",
        "id": 491680607,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735860910
    },
    {
        "content": "<p>I think this test isn't super useful</p>",
        "id": 491680644,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735860947
    },
    {
        "content": "<p>Here's what it supposedly is formatted:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">C</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"err\">#</span>\n<span class=\"w\">    </span><span class=\"nv\">implements</span><span class=\"w\"> </span><span class=\"nv\">e</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">m</span>\n<span class=\"kt\">C</span>\n</code></pre></div>",
        "id": 491680728,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735860994
    },
    {
        "content": "<p>Okay, that makes <em>more</em> sense, now that I've referenced the <a href=\"https://www.roc-lang.org/abilities\">ability docs</a></p>",
        "id": 491680863,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735861106
    },
    {
        "content": "<p>No, I think that your new behavior is correct</p>",
        "id": 491681010,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735861210
    },
    {
        "content": "<p>The closest logical thing would be:</p>\n<div class=\"codehilite\"><pre><span></span><code>C a  #\n    implements e : m\nC\n</code></pre></div>",
        "id": 491681014,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735861214
    },
    {
        "content": "<p>Really?</p>",
        "id": 491681027,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735861229
    },
    {
        "content": "<p>Oh, actually</p>",
        "id": 491681029,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735861234
    },
    {
        "content": "<p>So we're supposed to have two parsing formats</p>",
        "id": 491681045,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735861249
    },
    {
        "content": "<p>Because if you remove the comment/newline you get</p>\n<div class=\"codehilite\"><pre><span></span><code>C a implements e : m\nC\n</code></pre></div>",
        "id": 491681059,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735861259
    },
    {
        "content": "<p>Types have their args applied with spaces</p>",
        "id": 491681065,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735861263
    },
    {
        "content": "<p>But values have them applied with parens</p>",
        "id": 491681078,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735861273
    },
    {
        "content": "<p>Yes</p>",
        "id": 491681083,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735861279
    },
    {
        "content": "<p>So your code is parsing it like a value instead of a type</p>",
        "id": 491681092,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735861287
    },
    {
        "content": "<p>And that will remain the case after PNC</p>",
        "id": 491681096,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735861290
    },
    {
        "content": "<p>Oh, so it's the order that we look for defs then right?</p>",
        "id": 491681125,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735861321
    },
    {
        "content": "<p>That might be it</p>",
        "id": 491681172,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735861335
    },
    {
        "content": "<p>I'm looking now</p>",
        "id": 491681173,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735861337
    },
    {
        "content": "<p>It seems like if we find the a Expr::Var(\"implements\") or Pattern:Identifier(\"implements\") we should Err out with a malformed...</p>",
        "id": 491681227,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735861391
    },
    {
        "content": "<p>I'm not sure I agree, but maybe</p>",
        "id": 491681417,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735861453
    },
    {
        "content": "<p>There is logic to say <a href=\"https://github.com/roc-lang/roc/blob/91ed6a5a8e67f4e1a1255fd21f7dca3570e95202/crates/compiler/parse/src/keyword.rs#L28\">any ident that matches a keyword is blocked</a></p>",
        "id": 491681510,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735861530
    },
    {
        "content": "<p>But we don't include <code>IMPLEMENTS</code> in <code>KEYWORDS</code></p>",
        "id": 491681584,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735861568
    },
    {
        "content": "<p>I'd add that keyword and see if it breaks</p>",
        "id": 491681592,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735861577
    },
    {
        "content": "<p>Or rather, that this parses correctly</p>",
        "id": 491681603,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735861589
    },
    {
        "content": "<p>Ok, I'll try the same</p>",
        "id": 491681608,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735861591
    },
    {
        "content": "<p>But this I think is because we only parse an ability if the first expression in the expression chain is a tag</p>",
        "id": 491681651,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735861637
    },
    {
        "content": "<p>Now with parens, it will always be an Apply</p>",
        "id": 491681673,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735861656
    },
    {
        "content": "<p>Man, I'm flip-flopping over here</p>",
        "id": 491681746,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735861694
    },
    {
        "content": "<p>So this is similar to how we have to accept that <code>SomeTag(1,2)</code> is equivalent to <code>SomeTag 1 2</code> and never <code>SomeTag (1,2)</code></p>",
        "id": 491681780,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735861713
    },
    {
        "content": "<p>I think this case is testing a behavior that makes sense if PNC doesn't exist, but makes less sense in PNC land. Maybe this is crazy, but I think you should just delete this</p>",
        "id": 491681816,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735861743
    },
    {
        "content": "<p>I'm OK with it if you are.  I'll make sure that</p>\n<div class=\"codehilite\"><pre><span></span><code>C 4 #\n    implements e : m\nC\n</code></pre></div>\n<p>Give the right AST</p>",
        "id": 491681863,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735861794
    },
    {
        "content": "<p>Yeah it does - with a little swapping around of Spaces</p>",
        "id": 491682003,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735861902
    },
    {
        "content": "<p>I can rename it to not mention parens and just overwrite</p>",
        "id": 491682019,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735861918
    },
    {
        "content": "<p>Rebase complete</p>",
        "id": 491682643,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735862391
    },
    {
        "content": "<p>Now here's hoping I can get an approval before someone lands something else in the parser/formatter <span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span></p>",
        "id": 491683001,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735862569
    },
    {
        "content": "<p>Looking now</p>",
        "id": 491683207,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735862741
    },
    {
        "content": "<p>Shoot, I have a can test failure</p>",
        "id": 491683543,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735862965
    },
    {
        "content": "<p>Looks like a couple were updated by you Sam, I just gotta add the PatternAppyStyle</p>",
        "id": 491683568,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735862990
    },
    {
        "content": "<p>Okay, still reviewing</p>",
        "id": 491683659,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735863036
    },
    {
        "content": "<p>Done</p>",
        "id": 491683715,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735863086
    },
    {
        "content": "<p>I love insta</p>",
        "id": 491683726,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735863097
    },
    {
        "content": "<p>It makes life much easier and brainless</p>",
        "id": 491683865,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735863169
    },
    {
        "content": "<p>Can we move test_syntax to this please?</p>",
        "id": 491684044,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735863298
    },
    {
        "content": "<p>If you make a PR, I'll approve it</p>",
        "id": 491684082,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735863316
    },
    {
        "content": "<p>I can try sometime soon</p>",
        "id": 491684127,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735863339
    },
    {
        "content": "<p>I have like 3 other issues queued up :-)</p>",
        "id": 491684154,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735863354
    },
    {
        "content": "<p>Luckily Joshua went over this pretty good, so the review should be relatively easy</p>",
        "id": 491684237,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735863396
    },
    {
        "content": "<p>This PR is now only blocked by a failed panic check.  I added a new <code>.unwrap()</code> in the minimize binary in test_syntax during arg parsing.  I believe that is reasonable behavior (and following the local pattern).  If someone with authority to override it could take a look I would be very thankful.</p>",
        "id": 491755617,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735909690
    },
    {
        "content": "<p>I replied in the PR</p>",
        "id": 491755901,
        "sender_full_name": "Anton",
        "timestamp": 1735909844
    },
    {
        "content": "<p>Just tagged you in a comment on the line</p>",
        "id": 491756216,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735909981
    },
    {
        "content": "<p>I replaced</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">text</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">fs</span><span class=\"p\">::</span><span class=\"n\">read_to_string</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n</code></pre></div>\n<p>with</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">text</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s\">\"-\"</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">io</span><span class=\"p\">::</span><span class=\"n\">stdin</span><span class=\"p\">().</span><span class=\"n\">read_to_string</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"n\">buf</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">fs</span><span class=\"p\">::</span><span class=\"n\">read_to_string</span><span class=\"p\">(</span><span class=\"n\">input</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n</code></pre></div>",
        "id": 491756480,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735910088
    },
    {
        "content": "<p>I'm going to write a Roc program that can actually show you the panics and unwraps added in a feature branch</p>",
        "id": 491760010,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735911820
    },
    {
        "content": "<p>Actually you really just need to change the violations collection line to:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nv\">VIOLATIONS</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"k\">$(</span>cargo<span class=\"w\"> </span>clippy<span class=\"w\"> </span>--no-deps<span class=\"w\"> </span>--<span class=\"w\"> </span>-W<span class=\"w\"> </span>clippy::unwrap_used<span class=\"w\"> </span>-W<span class=\"w\"> </span>clippy::expect_used<span class=\"w\"> </span>-W<span class=\"w\"> </span>clippy::panic<span class=\"w\"> </span><span class=\"m\">2</span>&gt;<span class=\"w\"> </span>&gt;<span class=\"o\">(</span>grep<span class=\"w\"> </span>-C<span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span>-e<span class=\"w\"> </span><span class=\"s2\">\"warning: \\`panic\\`\"</span><span class=\"w\"> </span>-e<span class=\"w\"> </span><span class=\"s2\">\"warning: used\"</span><span class=\"w\"> </span>-e<span class=\"w\"> </span><span class=\"s2\">\"warning: usage of\"</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>grep<span class=\"w\"> </span>-e<span class=\"w\"> </span><span class=\"s2\">\"  --&gt; \"</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>sed<span class=\"w\"> </span><span class=\"s2\">\"s/ *--&gt; *//g\"</span><span class=\"k\">)</span><span class=\"s2\">)\"</span>\n</code></pre></div>\n<p>Then compare the number of violations</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nv\">NUM_SOURCE_VIOLATIONS</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"k\">$(</span><span class=\"nb\">echo</span><span class=\"w\"> </span><span class=\"s2\">\"</span><span class=\"nv\">$SOURCE_VIOLATIONS</span><span class=\"s2\">\"</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>wc<span class=\"w\"> </span>-l<span class=\"k\">)</span><span class=\"s2\">\"</span>\n<span class=\"nv\">NUM_TARGET_VIOLATIONS</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"k\">$(</span><span class=\"nb\">echo</span><span class=\"w\"> </span><span class=\"s2\">\"</span><span class=\"nv\">$TARGET_VIOLATIONS</span><span class=\"s2\">\"</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>wc<span class=\"w\"> </span>-l<span class=\"k\">)</span><span class=\"s2\">\"</span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"w\"> </span><span class=\"s2\">\"</span><span class=\"nv\">$SOURCE_VIOLATIONS</span><span class=\"s2\">\"</span><span class=\"w\"> </span>-gt<span class=\"w\"> </span><span class=\"s2\">\"</span><span class=\"nv\">$TARGET_VIOLATIONS</span><span class=\"s2\">\"</span><span class=\"w\"> </span><span class=\"o\">]</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">   </span>...\n<span class=\"w\">   </span><span class=\"nb\">echo</span><span class=\"w\"> </span><span class=\"s2\">\"Here are new warnings I found in the target branch:\"</span>\n<span class=\"w\">   </span>comm<span class=\"w\"> </span>-13<span class=\"w\"> </span>source_branch_dir/violations<span class=\"w\"> </span>target_branch_dir/violations\n<span class=\"k\">fi</span>\n</code></pre></div>",
        "id": 491764999,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735914258
    },
    {
        "content": "<p>That may lead to false positives from moved files (like during a refactor) but that could be an acceptable shortcoming</p>",
        "id": 491765653,
        "sender_full_name": "Anton",
        "timestamp": 1735914616
    },
    {
        "content": "<p>It would at least narrow down your search</p>",
        "id": 491766242,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735914940
    },
    {
        "content": "<p>And we could make the language have more hedging <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 491766258,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735914958
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nb\">echo</span><span class=\"w\"> </span><span class=\"s2\">\"Here are some location that **may** have introduced new violations in the target branch:\"</span>\n</code></pre></div>",
        "id": 491766358,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735915001
    },
    {
        "content": "<p>I wanted to do something much more ambitious with Roc, like using histogram diff and parsing the patch to find actual net new lines of code.  But this is a step forward I think</p>",
        "id": 491766457,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735915078
    },
    {
        "content": "<p>Agreed :)</p>",
        "id": 491766773,
        "sender_full_name": "Anton",
        "timestamp": 1735915231
    },
    {
        "content": "<p>I'll do this when I'm done with the rebase I'm working on - which will be after work today :-)</p>",
        "id": 491773685,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735918375
    }
]