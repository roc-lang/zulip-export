[
    {
        "content": "<p>Hi everyone, I've wanted to get involved in contributing to Roc recently, but I'm not a compiler dev, so instead I wanted to contribute some tooling/peripheral stuff for Roc. Things like pre-commit hooks, a github action to install Roc, maybe a Docker image, stuff that I don't think the core team would be interested in maintaining.</p>\n<p>I've made a Roc-Community organisation on GitHub (<a href=\"https://github.com/roc-community/\">https://github.com/roc-community/</a>) to house these kinds of projects and to hopefully attract some more contributors, but I realised I should check in here to make sure the core Roc team (and particularly <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span>) are okay with that. I don't want anyone thinking, for example that if they pull a Docker image from <code>roc-community</code> that they're getting an officially endorsed image, or if they have a problem with the tools that they should contact/blame the Roc developers.</p>\n<p>If anyone is unhappy with this, I can delete/deactivate the organisation and put these kinds of projects on my own GitHub account instead. Thanks :)</p>",
        "id": 338991037,
        "sender_full_name": "Hannes",
        "timestamp": 1677723234
    },
    {
        "content": "<p>Im interested to explore ideas in this direction. It might be helpful to write up a bit of a proposal with more specific details? Are you thinking things like packages? or more like core compiler work? Maybe a brainstorming discussion to consider different things. I've had similar ideas but coming from a different direction. I was trying to think about intended use cases and possible future interest groups and how to identify and meet thier needs. Like a teacher using roc to teach programming, verse an embedded engineer using roc for a controller etc. Always up for a chat if that would help. <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 338993768,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1677725439
    },
    {
        "content": "<p>Hi Luke, thanks for your interest. I can share the notes with ideas I've taken over the last few days, but they're pretty raw, I'm interested in hearing if any of them seem like they would be useful to work on.</p>\n<p>Like I said, I'm not a compiler developer, so I don't plan to contribute to the compiler much <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<p>In terms of packages, I was thinking about eventually trying to build some basic packages like datetimes and regular expressions, the kinds of things that are in the stdlib of more batteries-included languages, but those were more long-term goals.</p>\n<p>I'm coming from the Julia world, where the community has organised itself into organisations like JuliaDocs which manages the documentation generator packages and JuliaActions which manages CI configurations. These organisations are unofficial in that they don't get official support by the Julia team, but they're de-facto standards and are used by the core team, e.g. the official Julia documentation is generated by the Documenter.jl package, rather than something in the stdlib. I wasn't expecting any of the core developers to use anything in the roc-community organisation, but just to have an organisation name attached to the projects that let people know they were a community effort, rather than one person's work.</p>",
        "id": 338997726,
        "sender_full_name": "Hannes",
        "timestamp": 1677728295
    },
    {
        "content": "<p>Here's the ideas I've collected in a very raw form:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Roc Community Ideas</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<h2>Projects</h2>\n<ul>\n<li>Packaging<ul>\n<li>homebrew tap<ul>\n<li>very easy to set up</li>\n</ul>\n</li>\n<li>Nix package</li>\n<li>Deb</li>\n<li>Guix packge</li>\n<li>Arch AUR</li>\n</ul>\n</li>\n<li>Github actions<ul>\n<li>a github action to install roc<ul>\n<li>see this link for more info about writing an action in JS: <a href=\"https://github.com/actions/javascript-action\">https://github.com/actions/javascript-action</a></li>\n<li>see <code>actions/setup-python</code> repo for an example</li>\n<li>initially just install the latest nightly version, but have an option to specify a version</li>\n</ul>\n</li>\n<li>A GitHub action that's a wrapper around the Roc compiler, e.g. build and test</li>\n<li>A Github action to cache Roc stuff<ul>\n<li>Should be able to cache platforms and libraries</li>\n<li>see <a href=\"https://github.com/julia-actions/cache\">https://github.com/julia-actions/cache</a> for an example</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Pre-commit hooks<ul>\n<li>a pre-commit hook to run roc format, test, etc.</li>\n<li>Create versions of the hooks that use the Roc compiler compiled to WASM inside a JS module, this could simplify by not needing pre-commit to be able to find the roc CLI</li>\n</ul>\n</li>\n<li>A VSCode extension<ul>\n<li>See the existing extension: <a href=\"https://marketplace.visualstudio.com/items?itemName=benjamin-thomas.roc-lang-support\">https://marketplace.visualstudio.com/items?itemName=benjamin-thomas.roc-lang-support</a></li>\n<li>Start with updating the syntax highlighting</li>\n<li>Add snippets</li>\n<li>Add a formatter function</li>\n<li>Long term - add LSP support?</li>\n<li>Other editors<ul>\n<li>Emacs</li>\n<li>vi/vim/neovim?</li>\n<li>more obscure editors like kak, helix, etc</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Dockerhub image<ul>\n<li>Distros<ul>\n<li>alpine</li>\n<li>debian</li>\n<li>ubuntu? mostly just overlapping with debian</li>\n<li>arch?</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Rocup?<ul>\n<li>A rustup-style installer</li>\n<li>Would be useful for now to be able to update to the latest nightly build automatically</li>\n<li>I believe this kind of functionality is planned to be built into Roc in the future</li>\n</ul>\n</li>\n<li>Standard platforms?<ul>\n<li>If not complete pre-made platforms, then maybe some platform templates for different languages?</li>\n<li>Need to learn more about how platforms work</li>\n</ul>\n</li>\n</ul>\n<h2>Libraries</h2>\n<ul>\n<li>datetimes<ul>\n<li>See chrono library in Rust</li>\n</ul>\n</li>\n<li>regex</li>\n<li>hash functions<ul>\n<li>md5</li>\n<li>sha1</li>\n<li>sha256</li>\n</ul>\n</li>\n<li>maths<ul>\n<li>constants</li>\n<li>trig</li>\n<li>rounding</li>\n<li>complex numbers</li>\n</ul>\n</li>\n<li>parsing<ul>\n<li>CSV<ul>\n<li>See CSV example</li>\n</ul>\n</li>\n<li>JSON</li>\n<li>toml</li>\n<li>a serde kinda library?<ul>\n<li>is this even possible without macros or similar?</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>string manipulation stuff?</li>\n<li>randomisation<ul>\n<li>See this repo for a working example: <a href=\"https://github.com/JanCVanB/roc-random\">https://github.com/JanCVanB/roc-random</a></li>\n<li>need to use a seed</li>\n<li>just random numbers</li>\n<li>use different distributions? normal, poisson, etc.</li>\n<li>uuids</li>\n</ul>\n</li>\n<li>Web stuff<ul>\n<li>See cow library in OCaml</li>\n<li>Html parsing</li>\n<li>Markdown<ul>\n<li>See Commonmark specification</li>\n</ul>\n</li>\n<li>uris</li>\n<li>email validation?</li>\n<li>Not interested in building a web framework</li>\n</ul>\n</li>\n</ul>\n</div></div>",
        "id": 338997794,
        "sender_full_name": "Hannes",
        "timestamp": 1677728364
    },
    {
        "content": "<p>Lots of fun stuff. This seems like a cool idea overall with tons of projects to learn with and help push the community forward.</p>",
        "id": 339004750,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1677733722
    },
    {
        "content": "<p>Not sure about organization naming but overall seems like lots of great stuff to invest more into.</p>",
        "id": 339004784,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1677733758
    },
    {
        "content": "<p>Yeah this is great stuff to work on. I can't comment on the organisation name etc, Richard and Anton know more about that side of things.</p>",
        "id": 339006099,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1677734730
    },
    {
        "content": "<p>From your notes:</p>\n<blockquote>\n<p>a serde kinda library<br>\nis this even possible without macros or similar?</p>\n</blockquote>\n<p>We have a new language feature, implemented in the past year, called Abilities! Implementing something like serde was one of the big motivations for it. It's not well documented yet but there's an Encoding ability and a Decoding ability, and they are used in Json.roc in the repo.</p>",
        "id": 339006180,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1677734767
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"431893\">@Brian Carroll</span> Cool! I've heard of abilities but I also saw they're not documented yet, so I haven't looked into them at all so far :)</p>",
        "id": 339006474,
        "sender_full_name": "Hannes",
        "timestamp": 1677734967
    },
    {
        "content": "<p>I posted an example using a JSON URL package recently if you're interested to see it in action <a href=\"#narrow/stream/231634-beginners/topic/Json.20Package/near/338252044\">zulip thread</a></p>",
        "id": 339009552,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1677736702
    },
    {
        "content": "<p>hi <span class=\"user-mention\" data-user-id=\"508951\">@Hannes</span>, and welcome! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 339086911,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1677760723
    },
    {
        "content": "<p>I appreciate the question about organization/repo naming - honestly I agree with Evan that <code>elm-community</code> ended up not working out the way we'd hoped, so I personally wouldn't be in favor of having a <code>roc-community</code> org or repo</p>",
        "id": 339087221,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1677760809
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"508951\">Hannes</span> <a href=\"#narrow/stream/316715-contributing/topic/Roc.20Community.20organisation/near/338991037\">said</a>:</p>\n<blockquote>\n<p>I'm not a compiler dev, so instead I wanted to contribute some tooling/peripheral stuff for Roc. Things like pre-commit hooks, a github action to install Roc, maybe a Docker image, stuff that I don't think the core team would be interested in maintaining.</p>\n</blockquote>\n<p>this is really awesome to hear, because Roc could really use these things! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 339087547,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1677760904
    },
    {
        "content": "<p>one thing that would be immediately useful is a GitHub action to publish platforms</p>",
        "id": 339087734,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1677760945
    },
    {
        "content": "<p>for example, let's say I want to do a release of <a href=\"https://github.com/roc-lang/basic-cli\">https://github.com/roc-lang/basic-cli</a> - I have to do a build of its low-level implementation for:</p>\n<ul>\n<li>macOS ARM</li>\n<li>macOS Intel</li>\n<li>Linux x64</li>\n<li>Windows x64</li>\n</ul>\n<p>...and possibly more, if I want to support more than that.</p>\n<p>then, afterwards, I need to take all of those compiled binaries and put them all together in a tarball so Roc application authors can install it from one convenient URL</p>",
        "id": 339088081,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1677761059
    },
    {
        "content": "<p>a GitHub action to reduce all of those steps into one step (and which could run on all the different necessary operating systems) would be really helpful, not just for <code>basic-cli</code> today, but for platform authors in general in the future!</p>",
        "id": 339088292,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1677761120
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/316715-contributing/topic/Roc.20Community.20organisation/near/339087221\">said</a>:</p>\n<blockquote>\n<p>I appreciate the question about organization/repo naming - honestly I agree with Evan that <code>elm-community</code> ended up not working out the way we'd hoped, so I personally wouldn't be in favor of having a <code>roc-community</code> org or repo</p>\n</blockquote>\n<p>out of the loop i guess but what happened with elm-community?</p>\n<p>the only community driven gh org I know is <a href=\"https://github.com/nix-community\">https://github.com/nix-community</a> and well seems that they're doing pretty good? idk maybe it's different in lang-space</p>",
        "id": 339090837,
        "sender_full_name": "dank",
        "timestamp": 1677761868
    },
    {
        "content": "<p>more context here: <a href=\"https://elmlang.slack.com/archives/C0NLYJWSZ/p1673439727608069\">https://elmlang.slack.com/archives/C0NLYJWSZ/p1673439727608069</a></p>",
        "id": 339101602,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1677764484
    },
    {
        "content": "<p>tl;dr</p>\n<ul>\n<li>calling it <code>elm-community</code> in practice created a misperception of reputation - e.g. if you see <code>someone/csv</code>, and <code>elm-community/csv</code>, you might think \"ok, I don't know who <code>someone</code> is, but I trust the Elm community, so I'll go with the <code>elm-community</code> CSV library.\" But for all you know, <code>elm-community/csv</code> is actually made by the same <code>someone</code>, or maybe it's a different author but they didn't do as good a job as <code>someone</code> did. In either case, it's a community member making the package, but one of the community members gets a special reputational bonus just for getting their package moved into the <code>elm-community</code> repo, even though there isn't any special vetting process to ensure quality in there. (And I don't think a special vetting process would have been the solution here either.)</li>\n<li>then, because the reputational bump meant that packages in there became more likely to be considered the canonical version of a particular package (e.g. because someone said \"I'm not maintaining this anymore, so I'll move it into <code>elm-community</code> and let others take it over), over the years there have been several instances of \"this <code>elm-community</code> package used by lots of people isn't maintained anymore; will anyone volunteer to take it over?\" - as opposed to the usual process of \"if a package I use isn't maintained anymore, I can fork it under my own username and continue in the direction I think makes sense\"</li>\n<li>the previous two combine to mean that <code>elm-community</code> packages can end up being taken over by whoever happens to volunteer, but as a user of the package, you don't have any way to tell that the package is now under completely new ownership (because the org didn't change; it was the same before and after) and future releases might not be what you've come to expect from the current author(s)</li>\n</ul>",
        "id": 339104805,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1677765287
    },
    {
        "content": "<p>so overall, it seems best not to have a special org/repo whose name suggests it represents The Community; I think it's better if all community members are publishing on an equal playing field, and nobody's package gets a reputational bump by getting into the official-sounding repo <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 339105215,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1677765376
    },
    {
        "content": "<p>that said, I do think there's a separate case of packages being moved into the <code>roc-lang/</code> org, which to me means \"the people making Roc are collectively taking responsibility for actively maintaining this\" - and in that case it's appropriate for the package to take on the reputation of the Roc organization as a whole...because that is indeed who is maintaining it!</p>",
        "id": 339105532,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1677765459
    },
    {
        "content": "<p>Thanks for replying with your thoughts Richard, this is the exact kind of thing I was thinking of when I made the organisation. I won't use the organisation and instead put these kinds of projects in my own account. <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n<p>Coming from the Julia world these kinds of community projects have worked really well there, so it felt natural to me to make one for Roc. I'm trying to think about why the system has worked so well in Julia but seemingly not in the Elm community (not having used Elm before). I think some of it is specific to the Julia language where multiple dispatch encourages a few small libraries that define common interfaces like Tables.jl which is the interface used by basically all rectangular data libraries or Colors.jl which basically every package that uses colours interfaces with.</p>\n<p>I'll look into your suggestion for a github action to publish a platform, and of course if I get any of these ideas off the ground I'll share them in <a class=\"stream\" data-stream-id=\"304902\" href=\"/#narrow/stream/304902-show-and-tell\">#show and tell</a> :) Anyone reading this who's interested in sharing more ideas or contributing to any of them, free to DM me and/or <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span>, we're looking to flesh out a plan for these ideas.</p>",
        "id": 339119437,
        "sender_full_name": "Hannes",
        "timestamp": 1677768229
    },
    {
        "content": "<p>awesome, sounds good!</p>",
        "id": 339124805,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1677769450
    }
]