[
    {
        "content": "<p>a surprising benefit of the design where instead of having <code>\"number: \\(num)\"</code> automatically call <code>Num.toStr</code> behind the scenes, we do <code>\"number: \\(Num.toStr num)\"</code> explicitly - I just wrote some code that did <code>\\(Num.toStr num)</code> in three strings in a row, at which point I of course immediately refactored it to call <code>Num.toStr</code> once and then reuse that string in all three places</p>",
        "id": 405429894,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701460832
    },
    {
        "content": "<p>I've used a ton of languages where string interpolation works the other way, and it never occurred to me until just this moment how wasteful it is to create 3 duplicate strings from scratch to represent the same number <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 405430018,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701460871
    },
    {
        "content": "<p>To be fair, I think in most languages they just generate the final string and don't build a temporary at all. They have a printf type function or <code>format!</code> type function that just builds the final string with ints as inputs.</p>",
        "id": 405433996,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701462789
    },
    {
        "content": "<p>So duplicate work to convert an int to a string, but no duplication in terms of storage or potential allocations etc</p>",
        "id": 405434039,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701462820
    },
    {
        "content": "<p>Lean does this.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"number: {num}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Some number {some (2 + 3)}\"</span> <span class=\"c1\">-- \"(some 5)\"</span>\n</code></pre></div>\n<p>would work or any type where an instance of ToString exists.</p>",
        "id": 405485708,
        "sender_full_name": "Jacob",
        "timestamp": 1701489115
    },
    {
        "content": "<p>I think there is an optimization so its effectively the same as format</p>",
        "id": 405486222,
        "sender_full_name": "Jacob",
        "timestamp": 1701489274
    },
    {
        "content": "<p>I remember testing if named expressions were only called ToString once and I'm pretty sure it was (re-used?).<br>\nEDIT: Nvm! Completely wasn't paying attention to what you were saying!</p>",
        "id": 405488257,
        "sender_full_name": "Jacob",
        "timestamp": 1701489899
    }
]