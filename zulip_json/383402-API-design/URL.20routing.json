[
    {
        "content": "<p>I just thought of an interesting API design for server routing from a URL:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">Route</span><span class=\"p\">.</span><span class=\"nx\">fromUrl</span><span class=\"w\"> </span><span class=\"nx\">url</span><span class=\"w\"> </span><span class=\"o\">is</span>\n<span class=\"w\">    </span><span class=\"nx\">Get</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"users\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">username</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"c1\"># e.g. /users/rtfeldman</span>\n<span class=\"w\">    </span><span class=\"nx\">Get</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"users\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">username</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"profile\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"c1\"># e.g. /users/foo/profile</span>\n<span class=\"w\">    </span><span class=\"nx\">Get</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"search\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nx\">Dict</span><span class=\"p\">.</span><span class=\"nx\">contains</span><span class=\"w\"> </span><span class=\"nx\">params</span><span class=\"w\"> </span><span class=\"s\">\"q\"</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"c1\"># e.g. /search?q=blah</span>\n<span class=\"w\">    </span><span class=\"nx\">Post</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"register\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"c1\"># has to be exactly /register</span>\n</code></pre></div>",
        "id": 392111887,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1695214650
    },
    {
        "content": "<p>then if you need additional parsing (like for <code>Get [\"users\", userId]</code> where <code>userId</code> is an integer) you'd do that after the initial match, e.g. running <code>Num.fromStr</code> on them as necessary</p>",
        "id": 392112274,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1695214782
    },
    {
        "content": "<p>I assume that for checking such guards (is number, is number within the expected range, etc), you would create a private helper function and use the same <code>if Dict.contains .....</code> strategy with that private function. This way, you don't have to \"step into\" the match and then have no way to step back to check if a later route would match. Would that work?</p>",
        "id": 392127122,
        "sender_full_name": "Fábio Beirão",
        "timestamp": 1695219285
    },
    {
        "content": "<p>Sounds reasonable, but I would be concerned of perf. Routers get hit a lot. Even the tiniest of perf gains can help. I wonder if routers in other languages do something special to keep perf really high here. Just in general questioning if a full flat match over a list of strings will be performant. Might be fine, just questioning.</p>",
        "id": 392130917,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1695220425
    },
    {
        "content": "<p>it's a good question...I wonder if a future compiler optimization could be a good idea for <code>when</code> on a list of strings</p>",
        "id": 392139018,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1695222838
    },
    {
        "content": "<p><code>Str.split path \"/\"</code> should be fast and the substrings should all be slices, so no allocations aside from the 1 for the list itself</p>",
        "id": 392139229,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1695222900
    },
    {
        "content": "<p>and then <code>\"GET\"</code> to <code>Get</code> should be fast too</p>",
        "id": 392139324,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1695222926
    },
    {
        "content": "<p>so I think the only question would be how quickly the <code>List Str</code> can be matched up with a particular <code>when</code> branch like this, and that's what I think maybe a compiler optimization could improve in the future</p>",
        "id": 392139546,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1695222979
    },
    {
        "content": "<p>Very fair. I guess everything should be slices, so that should be pretty decent.</p>",
        "id": 392142065,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1695223694
    },
    {
        "content": "<p>*slices or clones of parts of small strings</p>",
        "id": 392142095,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1695223705
    },
    {
        "content": "<p>Honestly, the dictionary lookup may be likely to be the slowest part</p>",
        "id": 392142171,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1695223726
    },
    {
        "content": "<p>for the query?</p>",
        "id": 392146014,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1695224869
    },
    {
        "content": "<p>that could also just be a <code>List</code></p>",
        "id": 392146025,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1695224874
    },
    {
        "content": "<p>Yeah, probably should be a <code>VecMap</code></p>",
        "id": 392146786,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1695225105
    },
    {
        "content": "<p>I like how simple that router is.</p>",
        "id": 392204576,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1695242765
    }
]