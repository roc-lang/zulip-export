[
    {
        "content": "<p>Hello. For some context, my background is c#/dotnet. I am reading the docs for <code>Num.toStr</code> and I see \"Only [Frac] values will include a decimal point, and they will always include one\". This has rung a past nightmare bell in my head where we had some software that would behave differently on dev machines versus production because of Windows regional settings. On two different machines, the same pseudo-operation \"Num.toStr 5.0\" would either produce <code>5.0</code> or <code>5,0</code> depending on regional settings. Same thing for larger numbers, where you could get outputs such as <code>1.234,00</code>.</p>\n<p>I don't know enough about Roc to know if this will be a problem or not, but I haven't (yet!) encountered an explicit indication in the docs that the formatting would behave as such or such. I'll keep reading of course, but just wanted to drop this message here in case this was overlooked, or perhaps not even a problem at all.</p>",
        "id": 361287230,
        "sender_full_name": "Fábio Beirão",
        "timestamp": 1685098395
    },
    {
        "content": "<p>I guess because Roc is a pure language, that kind of region information is external state that the Roc won't have access to, so it should always be consistent.</p>",
        "id": 361306958,
        "sender_full_name": "Hannes",
        "timestamp": 1685102990
    },
    {
        "content": "<p>That would be great, as it would reduce the number of gotchas. If the user wishes for fancier formatting, then <code>Num.format</code> would be the place for that.<br>\nIf there is indeed a fixed and stable output format for <code>Num.toStr</code> then it could be stated more explicitly in the docs.</p>",
        "id": 361307949,
        "sender_full_name": "Fábio Beirão",
        "timestamp": 1685103185
    },
    {
        "content": "<p>Should there be \"Num.toLocaleStr\" that takes in a locale? Some people might want that in their app and have a way to get the locale from the platform. But I guess that's pretty complicated and would belong in a separate localization package that's not in the standard library.</p>",
        "id": 361308356,
        "sender_full_name": "Sky Rose",
        "timestamp": 1685103271
    },
    {
        "content": "<p>yeah that's what I'd like to do</p>",
        "id": 361316482,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1685105220
    },
    {
        "content": "<p>is have a separate <code>locale</code> package which takes care of that</p>",
        "id": 361316521,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1685105230
    },
    {
        "content": "<p>I think there may need to be a primitive in the standard library which that package can use though</p>",
        "id": 361316568,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1685105240
    },
    {
        "content": "<p>(e.g. a way to get the number before the decimal point, and the number after the decimal point, as integers perhaps?)</p>",
        "id": 361316967,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1685105320
    },
    {
        "content": "<p>Is that possible to do in a reasonable way with floats?</p>",
        "id": 361324548,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1685106953
    },
    {
        "content": "<p>Cause i think there are different options for the numbers after a decimal point with floats</p>",
        "id": 361324714,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1685106983
    },
    {
        "content": "<p>yeah I'm not sure exactly what the best API is there</p>",
        "id": 361377775,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1685118042
    },
    {
        "content": "<p>e.g. could try to produce a <code>U64</code> of all the digits after the decimal point, but maybe that's not what people really want</p>",
        "id": 361377899,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1685118065
    },
    {
        "content": "<p>I could see something like <code>Num.walkFracDigits</code> or something that just gives you one digit at a time as a <code>U8</code>, so you can stringify them, add punctuation, etc. I think any \"rendering numbers to a string\" function would need to do that work anyway probably</p>",
        "id": 361378244,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1685118133
    },
    {
        "content": "<p>What do you do for infinitely repeating numbers and such?</p>",
        "id": 361378799,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1685118245
    },
    {
        "content": "<p>those are truncated in the in-memory representation of the number anyway</p>",
        "id": 361379067,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1685118313
    },
    {
        "content": "<p>true, but: <code>1.40129846432481707092372958328991613128026194187651577175706828388979108268586060148663818836212158203125E-45</code> is the exact digits of an <code>F32</code>. Just imagine an <code>F64</code>.</p>",
        "id": 361380910,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1685118672
    },
    {
        "content": "<p>sure - but is that a problem? <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 361381456,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1685118808
    },
    {
        "content": "<p>kinda:</p>\n<ol>\n<li>People may accidentally write really slow code because they don't realize the ramifications of how many digits it can be and miss early stopping.</li>\n<li>You have to pick how to round off the end and there are multiple possible answers that people debate which is correct.</li>\n</ol>",
        "id": 361382554,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1685119077
    },
    {
        "content": "<p>From <a href=\"https://www.h-schmidt.net/FloatConverter/IEEE754.html\">https://www.h-schmidt.net/FloatConverter/IEEE754.html</a> an online f32 converter: </p>\n<blockquote>\n<p>I've converted a number to floating point by hand/some other method, and I get a different result. Your converter is wrong!</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>Possible, but unlikely. The conversion routines are pretty accurate (see above). Until now, checking the results always proved the other conversion less accurate. First, consider what \"correct\" means in this context - unless the conversion has no rounding error, there are two reasonable results, one slightly smaller the entered value and one slightly bigger. The best result is usually the one closer to the value that was entered, so you should check for that. Please check the actual represented value (second text line) and compare the difference to the expected decimal value while toggling the last bits.</p>\n</blockquote>\n</blockquote>",
        "id": 361383868,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1685119373
    },
    {
        "content": "<blockquote>\n<p>People may accidentally write really slow code</p>\n</blockquote>\n<p>maybe, but is that preventable if we want to give them access to enough digits to decide how they want to format them based on locale etc? <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 361385513,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1685119778
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 361391089,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1685120958
    },
    {
        "content": "<p>I haven't yet found the docs for Num.format<br>\nNaively speaking I would be okay with Num.toStr using some kind of sane but fixed standard (whatever that means, dot as decimal, two decimals, truncated..ouch so many decisions). As long as it would be explicit in the docs and always fixed. For fancier formatting, Num. format to the rescue</p>\n<p>Honestly what I'm trying to avoid is the wtfs I found in dotnet (due to my own ignorance about global implicit localization)</p>",
        "id": 361395731,
        "sender_full_name": "Fábio Beirão",
        "timestamp": 1685122119
    },
    {
        "content": "<p>It doesn't exist yet. Just an idea</p>",
        "id": 361396889,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1685122406
    },
    {
        "content": "<p>Fundamentally, I think it is wise to keep localization out of the standard library and enable it in ecosystem libraries.</p>",
        "id": 361397341,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1685122517
    },
    {
        "content": "<blockquote>\n<p>Fundamentally, I think it is wise to keep localization out of the standard library and enable it in ecosystem libraries.</p>\n</blockquote>\n<p>yeah I strongly agree - especially for a purely functional language; to the extent possible, I very much want to avoid \"the same pure function called with the same arguments returns a different answer on one system vs another\"</p>",
        "id": 361408649,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1685125552
    },
    {
        "content": "<p>either it should give the same answer or else it should crash due to system resource limitations (e.g. available memory) that existed on one system but not the other</p>",
        "id": 361408793,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1685125583
    },
    {
        "content": "<p>(which is part of the motivation for <a class=\"stream-topic\" data-stream-id=\"304641\" href=\"/#narrow/stream/304641-ideas/topic/replace.20Nat\">#ideas &gt; replace Nat</a>)</p>",
        "id": 361409252,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1685125722
    }
]