[
    {
        "content": "<p>In <a href=\"https://github.com/roc-lang/roc/blob/b1f7316fce03f64179ed183498b4daec3b91e546/crates/glue/src/RustGlue.roc\">our Rust glue</a> we have a bunch of places where we do something like <a href=\"https://github.com/roc-lang/roc/blob/b1f7316fce03f64179ed183498b4daec3b91e546/crates/glue/src/RustGlue.roc#L369\">this</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">walkWithIndex</span><span class=\"w\"> </span><span class=\"nv\">tags</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"nv\">generateEnumTags</span>\n</code></pre></div>\n<p>if <code>List.walk</code> (and the <code>WithIndex</code> variants etc) took the state as the first argument, instead of the list as the first argument, then this could have just been:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">walkWithIndex</span><span class=\"w\"> </span><span class=\"nv\">tags</span><span class=\"w\"> </span><span class=\"nv\">generateEnumTags</span>\n</code></pre></div>",
        "id": 411039045,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704298004
    },
    {
        "content": "<p>it seems like this comes up pretty often, and in retrospect <code>state, ... -&gt; state</code> fits the general pattern of pipeline-friendliness</p>",
        "id": 411039161,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704298047
    },
    {
        "content": "<p>(of having the first argument be the same type as the return value)</p>",
        "id": 411039226,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704298070
    },
    {
        "content": "<p>does anyone have thoughts one way or the other?</p>",
        "id": 411039346,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704298103
    },
    {
        "content": "<p>Usually my states for <code>walking/folding</code>  are in some zero/mempty state and as I walk trough the list I build out state. Hence moslty I construct that initial state by hand and pass in the list. I haven't reused the state after the fold, just extract the final result out of it.</p>",
        "id": 411041275,
        "sender_full_name": "Zeljko Nesic",
        "timestamp": 1704298890
    },
    {
        "content": "<p>hm, but in those cases do you build up the list using pipelines? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 411043664,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704299780
    },
    {
        "content": "<p>(or in other cases)</p>",
        "id": 411043680,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704299785
    },
    {
        "content": "<p>because if not, then argument order doesn't matter either way in those situations <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 411043710,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704299799
    },
    {
        "content": "<p>Seems nice. I also like that it reads better. <code>state |&gt; List.walk list func</code> reads like “walk the list”. With the current version it reads like “walk the state”</p>",
        "id": 411046611,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1704300944
    },
    {
        "content": "<p>On the other hand I often construct the list to walk via some series of pipelineing. Then I would need to define an intermediate variable for list. Though that might be fine in practice? Might even be good practice to separate the construction of the list and the consumption of the list, explicitly</p>",
        "id": 411047089,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1704301152
    },
    {
        "content": "<p>do you have some examples of that?</p>",
        "id": 411049105,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704301838
    },
    {
        "content": "<p>constructing the list in a pipeline and then walking it at the end, I mean</p>",
        "id": 411049135,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704301853
    },
    {
        "content": "<blockquote>\n<p>does anyone have thoughts one way or the other?</p>\n</blockquote>\n<p>I do think it would surprise the user, the collection is used as the first argument everywhere except here (if it was changed).</p>",
        "id": 411049574,
        "sender_full_name": "Anton",
        "timestamp": 1704302044
    },
    {
        "content": "<p>Sure, for example parseDraw on line 68 in this AoC solution: <a href=\"https://github.com/Subtlesplendor/roc-aoc-2023/blob/main/day2.roc\">https://github.com/Subtlesplendor/roc-aoc-2023/blob/main/day2.roc</a></p>",
        "id": 411049660,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1704302086
    },
    {
        "content": "<p>Not saying this is necessarily good style though</p>",
        "id": 411049763,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1704302135
    },
    {
        "content": "<p>I always end up using those functions with an empty state. So I end up wanting the list first.</p>",
        "id": 411050146,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704302304
    },
    {
        "content": "<p>Cause it is build up the list with some transforms and then pipe it into walk</p>",
        "id": 411050170,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704302321
    },
    {
        "content": "<p>That said, I think most of the code I have written in roc is not really representative of more complex use cases.</p>",
        "id": 411050202,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704302349
    },
    {
        "content": "<blockquote>\n<p>I do think it would surprise the user, the collection is used as the first argument everywhere except here (if it was changed).</p>\n</blockquote>\n<p>I also really agree with this one.</p>",
        "id": 411050274,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704302386
    },
    {
        "content": "<p>I think glue is about the worst case for these functions cause it is 100% about building one gigantic global buffer</p>",
        "id": 411050446,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704302470
    },
    {
        "content": "<p>I think most code does more transforms and isn't just a single state accumulator that interacts with many various lists it must walk</p>",
        "id": 411050488,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704302496
    },
    {
        "content": "<p>I would say that for now, it may just be best to define a helper function in glue that handles the arg reordering and enables pipelining.</p>",
        "id": 411050542,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704302523
    },
    {
        "content": "<p>interesting, now I notice this one function could take the place of all those <code>|&gt; List.walk</code> uses in <code>RustGlue.roc</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>Str.concatAll : Str, List Str -&gt; Str\n</code></pre></div>",
        "id": 411051397,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704302929
    },
    {
        "content": "<p>because in every case they're walking over a list and then concatenating all the strings onto the end of the string they're building up</p>",
        "id": 411051453,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704302964
    },
    {
        "content": "<p>That would make way more temporary allocations?</p>",
        "id": 411052832,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704303541
    },
    {
        "content": "<p>Cause you would do:</p>\n<div class=\"codehilite\"><pre><span></span><code>buf\n|&gt; Str.concatAll (List.map tags generateEnumTags)\n</code></pre></div>\n<p>while changing <code>generateEnumTags</code> to return a string instead of appending onto a string?</p>",
        "id": 411052970,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704303604
    },
    {
        "content": "<p>for sure, but we already do a ton of that in that script <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 411055046,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704304537
    },
    {
        "content": "<p>such as every time we append an interpolation</p>",
        "id": 411055082,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704304557
    },
    {
        "content": "<p>perf seems to be fine in that use case, and if we needed to optimize it we could always do it by hand</p>",
        "id": 411055200,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704304586
    },
    {
        "content": "<p>For sure. Just clarifying the difference. The code could be greatly simplified if allocations where ignored and we just always did a bottom up building where there was essentially no buffer except at the top level. All other levels would just be a string interpolation. (I think a decent bit of this already happened. My original code was very allocation adverse, but I think the current code is not so much)</p>",
        "id": 411058300,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704305641
    },
    {
        "content": "<p>yeah glue should end up running with bump allocation for everything, so the cost should end up being a bunch of memcpys and that's about it</p>",
        "id": 411066353,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704309063
    },
    {
        "content": "<p>Memcpys and higher memory usage, but it should never use enough memory for that to matter.</p>",
        "id": 411066633,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704309187
    },
    {
        "content": "<p>I almost always start walk with an empty state and often pipe the list in. I agree that having the state first would be surprising to the user and it seems very inconsistent with the rest of the builtins</p>",
        "id": 411084374,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1704317114
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/383402-API-Design/topic/should.20.60walk.60.20take.20the.20state.20as.20the.20first.20argument.3F/near/411043664\">said</a>:</p>\n<blockquote>\n<p>hm, but in those cases do you build up the list using pipelines? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>\n</blockquote>\n<p>Usually lists have to come from somewhere, and that is more often than not some sort of a call to outside world. a.k.a. <code>await</code> </p>\n<p>In theory if you are doing two consecutive operations on the list, in order to need list pipelined, you should be able to merge it into one. </p>\n<p>I do very often pipeline a resulting state into some sort of <code>finalize</code> function, which extracts relevant data from the state.</p>",
        "id": 411128684,
        "sender_full_name": "Zeljko Nesic",
        "timestamp": 1704344472
    }
]