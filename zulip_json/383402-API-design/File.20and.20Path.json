[
    {
        "content": "<p>I just realized there's a simple and nice solution to a longstanding annoyance: functions like <a href=\"https://www.roc-lang.org/packages/basic-cli/File#readUtf8\"><code>File.readUtf8</code></a> take a <code>Path</code>, which means in order to call them with a string you always have to do <code>Path.fromStr</code> on that string first</p>",
        "id": 410897657,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704225309
    },
    {
        "content": "<p>it's important to have those operations available on <code>Path</code>s, because you can get a <code>Path</code> from things like <a href=\"https://www.roc-lang.org/packages/basic-cli/Dir#list\"><code>Dir.list</code></a> and paths aren't necessarily valid strings (e.g. on UNIX, path can be <a href=\"https://unix.stackexchange.com/a/230299\">any sequence of nonzero bytes</a>, which is very much not necessarily valid UTF-8!)</p>",
        "id": 410897848,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704225413
    },
    {
        "content": "<p>but I just realized that we can do this to make the experience nicer:</p>\n<ul>\n<li>Move all the current exposed <code>File.roc</code> operations that take a <code>Path</code> as their first argument into <code>Path.roc</code></li>\n<li>Duplicate those back into <code>File</code> except they take <code>Str</code> as their first argument as <code>Path</code>, and now they're just convenience wrappers which do the <code>Path.fromStr</code> for you</li>\n</ul>",
        "id": 410897958,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704225460
    },
    {
        "content": "<p>now you have easy access to functions that take a <code>Str</code> for convenience, and also if you have a <code>Path</code> you can also easily call functions on those too using the <code>Path</code> module!</p>",
        "id": 410898034,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704225487
    },
    {
        "content": "<p>curious what others think (cc <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span>)</p>",
        "id": 410898146,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704225555
    },
    {
        "content": "<p>I think this would be helpful. But it could be confusing, to have two functions doing the same, so an explanation somewhere in the docs would be good.</p>",
        "id": 410906692,
        "sender_full_name": "Fabian Schmalzried",
        "timestamp": 1704230016
    },
    {
        "content": "<p>yeah, I think each of the functions could have a line at the end of its doc comment which notes its relationship to the one in the other module, and linking to that other one</p>",
        "id": 410908684,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704231125
    },
    {
        "content": "<p>I don't really follow the proposal here, specifically the following is confusing me.</p>\n<blockquote>\n<p>Duplicate those back into File except they take Str as their first argument as Path, and now they're just convenience wrappers which do the Path.fromStr for you</p>\n</blockquote>\n<p>Does this mean we would have the following? Why can't we just do this anyway and add another error tag for invalid path?</p>\n<div class=\"codehilite\"><pre><span></span><code># uses a Str instead of a Path here?\nFile.writeBytes : Str, List U8 -&gt; Task {} [FileWriteErr Path WriteErr]\n</code></pre></div>",
        "id": 410920230,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1704238137
    },
    {
        "content": "<p>oh sorry - so I'm saying we have these two:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kt\">File</span><span class=\"o\">.</span><span class=\"n\">writeBytes</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">FileWriteErr</span><span class=\"w\"> </span><span class=\"kt\">Path</span><span class=\"w\"> </span><span class=\"kt\">WriteErr</span><span class=\"p\">]</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kt\">Path</span><span class=\"o\">.</span><span class=\"n\">writeBytes</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Path</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">FileWriteErr</span><span class=\"w\"> </span><span class=\"kt\">Path</span><span class=\"w\"> </span><span class=\"kt\">WriteErr</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>so they're exactly the same except for the first argument</p>",
        "id": 410920380,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704238271
    },
    {
        "content": "<p>including error type and everything</p>",
        "id": 410920534,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704238394
    },
    {
        "content": "<p>I'm still thinking about this... but one question this makes we think of; would it be possible to use an Ability here as the argument instead of Path? Like maybe anything that is <code>toStr</code>able could be used??</p>",
        "id": 410921631,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1704239280
    },
    {
        "content": "<p>You could make a <code>toPath</code> ability that is on path, str, and list U8 theoretically.</p>",
        "id": 410921875,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704239458
    },
    {
        "content": "<p>But roc doesn't let you add an new ability to a builtin. So it doesn't really work</p>",
        "id": 410921893,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704239478
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/383402-API-Design/topic/File.20and.20Path/near/410921893\">said</a>:</p>\n<blockquote>\n<p>But roc doesn't let you add an new ability to a builtin. So it doesn't really work</p>\n</blockquote>\n<p>Is this a deliberate design decision? Is this so the dependencies are only one way and there are no cycles?</p>",
        "id": 410921985,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1704239542
    },
    {
        "content": "<p>I think deliberate design to keep abilities simple/low in power, but not really sure</p>",
        "id": 410922219,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704239733
    },
    {
        "content": "<p>we actually talked about this explicit question at some point on Zulip a long time ago, I forget where</p>",
        "id": 410933304,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704244114
    },
    {
        "content": "<p>the way to do it would be something more like making a <code>FromStr</code> builtin ability that opaque types could opt into</p>",
        "id": 410933359,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704244152
    },
    {
        "content": "<p>but the thing is, this is literally the only demand we've ever had for it, so I think it's better to go with a simpler solution for now</p>",
        "id": 410933392,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704244176
    },
    {
        "content": "<p>maybe if we accumulate a bunch of cases where it would be useful we could revisit that</p>",
        "id": 410933412,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704244186
    },
    {
        "content": "<p>but I think for now it's best to do something that works today and see how that feels</p>",
        "id": 410933425,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704244196
    },
    {
        "content": "<p>FromStr wouldn't work here. You want path to be generatable from a Str or a List U8</p>",
        "id": 410945047,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704249705
    },
    {
        "content": "<p>Cause a path doesn't need to be utf8</p>",
        "id": 410945064,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704249716
    },
    {
        "content": "<p>So I don't think there is a way to make a generic ability for this currently</p>",
        "id": 410945138,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704249740
    },
    {
        "content": "<p>Today you need either multiple separate functions or a tag</p>",
        "id": 410945370,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704249874
    }
]