[
    {
        "content": "<p>I am a bit confused by how we decode records.</p>\n<div class=\"codehilite\"><pre><span></span><code>    record :\n        state,\n        (state, Str -&gt; [Keep (Decoder state state err), Skip]),\n        (state -&gt; Result val err)\n        -&gt; Decoder state val err where state implements DecoderFormatting\n</code></pre></div>\n<p>Specifically I am confused by <code>Skip</code>. If we are decoding a record and find an unknown field, do we really want to skip it in decoding? I would assume that we would want to return an error on extraneous fields existing? Maybe with a way to explicitly skip some fields? Just a bit confused by this design.</p>",
        "id": 449747985,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720402362
    },
    {
        "content": "<p>i believe it is for unknown fields yes</p>",
        "id": 449748637,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1720402671
    },
    {
        "content": "<p>it feels like deciding whether that should error or not should be a decision of the concrete decoder</p>",
        "id": 449748714,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1720402699
    },
    {
        "content": "<p>Ah yeah, I guess that could be a config stored in the decoder state. Was thinking it might be nice to be a per record decision instead of a whole decoder decision. But I'm sure with opaque types and custom implementations, the state could be temporarily modified to enable/disable this feature.</p>",
        "id": 449748859,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720402771
    },
    {
        "content": "<p>It's configurable in Json implementation, to either skipp or fail I think.</p>",
        "id": 449749605,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720403178
    },
    {
        "content": "<p>Cool, so definitely a solved problem. Though only configurable at the whole decoder level. Cause to set it for a specific sub decoder would take adding the configuration to skip/fail to EncoderFormatting.</p>",
        "id": 449749694,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720403270
    },
    {
        "content": "<p>If that ends up being needed, it can be added later.</p>",
        "id": 449749748,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720403285
    },
    {
        "content": "<p>Related question to this api: <code>(state, Str -&gt; [Keep (Decoder state state err), Skip]),</code></p>\n<p>Record decoding requires a string field name. I guess for binary formats that don't include field names, this means we have to decode records as tuples and then map them to a record? Cause the decoder can never know field names?</p>",
        "id": 449749815,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720403347
    }
]