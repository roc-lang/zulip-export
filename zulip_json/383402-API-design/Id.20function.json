[
    {
        "content": "<p>I think roc should consider including an \"id\" function within the builtins set. it's just something that comes up now and again and I've liked having it as a builtin in other languages<br>\nit's often useful when some operation is optional, eg:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">list</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">fwd</span><span class=\"w\"> </span><span class=\"kr\">then</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"kr\">else</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">reverse</span><span class=\"p\">)</span>\n<span class=\"err\">#</span><span class=\"nv\">becomes</span>\n<span class=\"nv\">list</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">fwd</span><span class=\"w\"> </span><span class=\"kr\">then</span><span class=\"w\"> </span><span class=\"nv\">id</span><span class=\"w\"> </span><span class=\"kr\">else</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">reverse</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 411098866,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1704325454
    },
    {
        "content": "<p>this was an intentional omission actually <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 411099543,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704326003
    },
    {
        "content": "<p>I've found that in general if an identity function is desirable, it's usually a sign that an API is missing a function</p>",
        "id": 411099564,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704326029
    },
    {
        "content": "<p>if that exact code example is from real-world code, I'd be curious what the larger example looks like!</p>",
        "id": 411099638,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704326071
    },
    {
        "content": "<p>Okay, interesting.<br>\nIt is from real code, I'm writing a function that searches through a string (a bit of AOC catchup), but it needs to be able to operate forwards and backwards. There are a few places i need to reverse something or not depending on which way we are searching</p>\n<p>I've replaced the id function uses with this odd little utility</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">ifF</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">a</span>\n<span class=\"nv\">ifF</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">input</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">cond</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">f</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">cond</span><span class=\"w\"> </span><span class=\"kr\">then</span><span class=\"w\"> </span><span class=\"nv\">f</span><span class=\"w\"> </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"kr\">else</span><span class=\"w\"> </span><span class=\"nv\">input</span>\n</code></pre></div>",
        "id": 411100035,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1704326383
    },
    {
        "content": "<p>if you're up for sharing the whole code, I'd love to check it out!</p>",
        "id": 411103592,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704328217
    },
    {
        "content": "<p>Here is a big chunk of the code. I'm well aware it's messy and not pretty, but I was trying to solve it with the least iteration possible and make use of breaking out of walks to return early</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"w\"> </span><span class=\"nv\">numberNames</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">    </span><span class=\"s\">\"zero\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"s\">\"one\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"s\">\"two\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"s\">\"three\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"s\">\"four\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"s\">\"five\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"s\">\"six\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"s\">\"seven\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"s\">\"eight\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"s\">\"nine\"</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n<span class=\"nv\">nameToNum</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">str</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"s\">\"zero\"</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">        </span><span class=\"s\">\"one\"</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">        </span><span class=\"s\">\"two\"</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"w\">        </span><span class=\"s\">\"three\"</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">3</span>\n<span class=\"w\">        </span><span class=\"s\">\"four\"</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">4</span>\n<span class=\"w\">        </span><span class=\"s\">\"five\"</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">5</span>\n<span class=\"w\">        </span><span class=\"s\">\"six\"</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">6</span>\n<span class=\"w\">        </span><span class=\"s\">\"seven\"</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">7</span>\n<span class=\"w\">        </span><span class=\"s\">\"eight\"</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">8</span>\n<span class=\"w\">        </span><span class=\"s\">\"nine\"</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">9</span>\n<span class=\"w\">        </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">crash</span><span class=\"w\"> </span><span class=\"s\">\"bad\"</span>\n\n<span class=\"nv\">ifF</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">a</span>\n<span class=\"nv\">ifF</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">inp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">cond</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">f</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">cond</span><span class=\"w\"> </span><span class=\"kr\">then</span><span class=\"w\"> </span><span class=\"nv\">f</span><span class=\"w\"> </span><span class=\"nv\">inp</span><span class=\"w\"> </span><span class=\"kr\">else</span><span class=\"w\"> </span><span class=\"nv\">inp</span>\n\n<span class=\"nv\">findFirstNum</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Forward</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Backward</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">U32</span>\n<span class=\"nv\">findFirstNum</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">forward</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">rev</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">forward</span><span class=\"w\"> </span><span class=\"err\">!</span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Forward</span>\n<span class=\"w\">    </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nv\">reverse</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">needed</span>\n<span class=\"w\">    </span><span class=\"nv\">names</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">U8</span>\n<span class=\"w\">    </span><span class=\"nv\">names</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">        </span><span class=\"nv\">numberNames</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">name</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"nv\">name</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toUtf8</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">ifF</span><span class=\"w\"> </span><span class=\"nv\">rev</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">reverse</span>\n<span class=\"w\">    </span><span class=\"nv\">walker</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">rev</span><span class=\"w\"> </span><span class=\"kr\">then</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">walkBackwardsUntil</span><span class=\"w\"> </span><span class=\"kr\">else</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">walkUntil</span>\n<span class=\"w\">    </span><span class=\"nv\">finders</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">        </span><span class=\"nv\">names</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">name</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"nv\">name</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">WordFinder</span><span class=\"nf\">.</span><span class=\"nv\">fromList</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">WordFinder</span><span class=\"nf\">.</span><span class=\"nv\">startSearch</span><span class=\"w\"> </span><span class=\"nv\">str</span>\n<span class=\"w\">    </span><span class=\"nv\">num</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">        </span><span class=\"nv\">str</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">walker</span>\n<span class=\"w\">            </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">finders</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">idx</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">num</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">            </span><span class=\"nf\">\\</span><span class=\"nv\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">char</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n\n<span class=\"w\">                </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"kt\">BookKepping</span><span class=\"w\"> </span><span class=\"nv\">so</span><span class=\"w\"> </span><span class=\"nv\">we</span><span class=\"w\"> </span><span class=\"nv\">have</span><span class=\"w\"> </span><span class=\"nv\">an</span><span class=\"w\"> </span><span class=\"nv\">index</span>\n<span class=\"w\">                </span><span class=\"nv\">idx</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"nf\">.</span><span class=\"nv\">idx</span>\n<span class=\"w\">                </span><span class=\"nv\">nextState</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"err\">&amp;</span><span class=\"w\"> </span><span class=\"nv\">idx</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">idx</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"w\">                </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">char</span><span class=\"w\"> </span><span class=\"nf\">&gt;=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"nv\">x30</span><span class=\"w\"> </span><span class=\"nf\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nv\">char</span><span class=\"w\"> </span><span class=\"nf\">&lt;=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"nv\">x39</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"w\">                    </span><span class=\"kt\">Break</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"err\">&amp;</span><span class=\"w\"> </span><span class=\"nv\">num</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">char</span><span class=\"w\"> </span><span class=\"nf\">-</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"nv\">x30</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">                </span><span class=\"kr\">else</span>\n<span class=\"w\">                    </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nv\">step</span><span class=\"w\"> </span><span class=\"nv\">all</span><span class=\"w\"> </span><span class=\"nv\">our</span><span class=\"w\"> </span><span class=\"nv\">finders</span><span class=\"w\"> </span><span class=\"nv\">forward</span><span class=\"w\"> </span><span class=\"nv\">one</span>\n<span class=\"w\">                    </span><span class=\"nv\">nextFinders</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">                        </span><span class=\"nv\">state</span><span class=\"nf\">.</span><span class=\"nv\">finders</span>\n<span class=\"w\">                        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">finder</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                            </span><span class=\"kt\">WordFinder</span><span class=\"nf\">.</span><span class=\"nv\">nextStep</span><span class=\"w\"> </span><span class=\"nv\">finder</span><span class=\"w\"> </span><span class=\"nv\">char</span><span class=\"w\"> </span><span class=\"nv\">idx</span>\n\n<span class=\"w\">                    </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nv\">see</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">any</span><span class=\"w\"> </span><span class=\"nv\">matched</span>\n<span class=\"w\">                    </span><span class=\"nv\">matched</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">                        </span><span class=\"nv\">nextFinders</span>\n<span class=\"w\">                        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">walkUntil</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">NotFound</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">state2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">finder</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                            </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"kt\">WordFinder</span><span class=\"nf\">.</span><span class=\"nv\">firstMatch</span><span class=\"w\"> </span><span class=\"nv\">finder</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">                                </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">_start</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Break</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">finder</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">WordFinder</span><span class=\"nf\">.</span><span class=\"nv\">searchingFor</span><span class=\"p\">))</span>\n<span class=\"w\">                                </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Continue</span><span class=\"w\"> </span><span class=\"nv\">state2</span>\n<span class=\"w\">                    </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"kt\">If</span><span class=\"w\"> </span><span class=\"nv\">we</span><span class=\"w\"> </span><span class=\"nv\">got</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">match</span><span class=\"w\"> </span><span class=\"nv\">we</span><span class=\"w\"> </span><span class=\"nv\">can</span><span class=\"w\"> </span><span class=\"nv\">return</span><span class=\"w\"> </span><span class=\"nv\">early</span>\n<span class=\"w\">                    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">matched</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">                        </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">match</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                            </span><span class=\"nv\">matchNum</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">match</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">ifF</span><span class=\"w\"> </span><span class=\"nv\">rev</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">reverse</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">fromUtf8</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">withDefault</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">nameToNum</span>\n\n<span class=\"w\">                            </span><span class=\"kt\">Break</span><span class=\"w\"> </span><span class=\"p\">({</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"err\">&amp;</span><span class=\"w\"> </span><span class=\"nv\">num</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">matchNum</span><span class=\"w\"> </span><span class=\"p\">})</span>\n\n<span class=\"w\">                        </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Continue</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">nextState</span><span class=\"w\"> </span><span class=\"err\">&amp;</span><span class=\"w\"> </span><span class=\"nv\">finders</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">nextFinders</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nf\">.</span><span class=\"nv\">num</span>\n<span class=\"w\">    </span><span class=\"nv\">num</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toU32</span>\n\n<span class=\"nv\">getPair</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">inp</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n\n<span class=\"w\">    </span><span class=\"nv\">inp</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"nv\">strList</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">            </span><span class=\"nv\">str</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toUtf8</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"nv\">strList</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">findFirstNum</span><span class=\"w\"> </span><span class=\"kt\">Forward</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">strList</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">findFirstNum</span><span class=\"w\"> </span><span class=\"kt\">Backward</span><span class=\"p\">)</span>\n\n<span class=\"nv\">pairToNum</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">(</span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">*</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"p\">)</span>\n\n<span class=\"nv\">parse</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">str</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">getPair</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nv\">pairToNum</span>\n</code></pre></div>",
        "id": 411103684,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1704328278
    },
    {
        "content": "<p>I have a whole other chunk of code that implements a simple \"wordfinder\" that just steps along looking for matches for a specific string and keeps track of any partial matches as it goes.<br>\nbut i need to iterate through both forward and backwards, so the words I'm matching and the the output needs to be reversed</p>",
        "id": 411104484,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1704328707
    },
    {
        "content": "<p>ah! So considering <code>ifF</code> is always passed <code>List.reverse</code>, personally I'd write this function:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">reverseIf</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"nv\">a</span>\n<span class=\"nv\">reverseIf</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">list</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">shouldReverse</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">shouldReverse</span><span class=\"w\"> </span><span class=\"kr\">then</span><span class=\"w\"> </span><span class=\"nv\">list</span><span class=\"w\"> </span><span class=\"kr\">else</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">reverse</span><span class=\"w\"> </span><span class=\"nv\">list</span>\n</code></pre></div>",
        "id": 411109765,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704332168
    },
    {
        "content": "<p>then the two call sites would look like this:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">name</span>\n<span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toUtf8</span>\n<span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">reverseIf</span><span class=\"w\"> </span><span class=\"nv\">rev</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">matchNum</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">match</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">reverseIf</span><span class=\"w\"> </span><span class=\"nv\">rev</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">fromUtf8</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">withDefault</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">nameToNum</span>\n</code></pre></div>",
        "id": 411109854,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704332259
    },
    {
        "content": "<p>I like how self-descriptive <code>|&gt; reverseIf rev</code> is <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 411109963,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704332367
    },
    {
        "content": "<p>That's fair, I suppose in almost any case you would want an Id function you could probably make a more descriptive wrapper. </p>\n<p>I will take a look through some of my other functional code and see where I've used the \"Id\" function to see if there are any other use cases that would warrant it more. </p>\n<p>I do think mostly it would be cases where you are returning one of a few different transformation functions and you sometimes want to just do nothing</p>",
        "id": 411110531,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1704332876
    },
    {
        "content": "<p>I've used <code>Result.keepOks \\a -&gt; a</code> pretty frequently</p>",
        "id": 411111775,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1704333747
    },
    {
        "content": "<p>That feels like a case of maybe bad naming on our part. Cause it really should be <code>List.mapAndKeepOks</code> with a separate <code>List.keepOks</code></p>",
        "id": 411112821,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704334311
    },
    {
        "content": "<p>As a note on that, I'm a big fan of using the name List.choose for that functionality</p>",
        "id": 411113286,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1704334648
    },
    {
        "content": "<p>I guess I certainly think that mapAndKeep crosses a line of verbosity</p>",
        "id": 411113561,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1704334875
    },
    {
        "content": "<p>Yeah, I don't think <code>mapAndKeep</code> is a good name it is just being honest about functionality. I think a more common name is <code>filterMap</code>, right?</p>",
        "id": 411113705,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704335001
    },
    {
        "content": "<p>yeah it's basically filterMap except it seemed weird to have one for <code>Ok</code> but not <code>Err</code></p>",
        "id": 411113846,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704335110
    },
    {
        "content": "<p>since we have <code>keepIf</code> and <code>dropIf</code></p>",
        "id": 411113887,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704335133
    },
    {
        "content": "<p>also for autocomplete discoverability there's an argument for having it start with <code>List.map____</code></p>",
        "id": 411113967,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704335172
    },
    {
        "content": "<p>so if you start typing that it comes up in autocomplete</p>",
        "id": 411113978,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704335182
    },
    {
        "content": "<p>a lot of Roc function names are designed with autocomplete discoverability in mind</p>",
        "id": 411113990,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704335197
    },
    {
        "content": "<p>Is performance the only reason not to have it as a separate <code>List.map |&gt; List.keepOks</code> with <code>keepOks</code> being literal and essentially defaulting to the identity version?</p>\n<p>Long term if we had automatic under the hood iterators would that fix the perf as well</p>",
        "id": 411114110,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704335285
    },
    {
        "content": "<p>That's pretty compelling tbh.<br>\nMaybe just \"mapKeep\"</p>",
        "id": 411114120,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1704335288
    },
    {
        "content": "<p>Would it be possible to go fully generic and make a function like <code>List.keep Ok mylist</code> ?</p>",
        "id": 411114464,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1704335525
    },
    {
        "content": "<p>That only keeps items with that tag and returns the tag's content?</p>",
        "id": 411114488,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1704335551
    },
    {
        "content": "<p>See a pattern that's come up a few times for me is</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">mylist</span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">TagA</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">TagB</span><span class=\"w\"> </span><span class=\"s\">\"hi\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">..</span><span class=\"nv\">etc</span><span class=\"p\">]</span>\n<span class=\"nv\">mylist</span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"kt\">KeepOks</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">  </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">     </span><span class=\"kt\">TagA</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">a</span>\n<span class=\"w\">      </span><span class=\"nv\">_</span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n</code></pre></div>\n<p>And that fuction would make it way easier<br>\n(Wrote this on mobile sorry if it's not quite right <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>)</p>",
        "id": 411114950,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1704335865
    },
    {
        "content": "<p>Something like that should work, but only if that tag contains only a single field</p>",
        "id": 411118048,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704337831
    },
    {
        "content": "<p>Hmm....though you can't pattern match on variables, so nvm</p>",
        "id": 411118093,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704337861
    },
    {
        "content": "<p>Yeah that was my thought, you guys don't have some \"magic compiler functions\" that would let you check if a variable is a specific tag and then dump out the contents of that tag?</p>",
        "id": 411118305,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1704337980
    },
    {
        "content": "<p>This is probably a place where you either need reflection, some kind of inbuilt trickery, or macros</p>",
        "id": 411118474,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1704338071
    },
    {
        "content": "<p>might not feel ergonomic, but one idea would be:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kt\">List</span><span class=\"o\">.</span><span class=\"n\">keepMap</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"o\">.</span><span class=\"n\">isOk</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">elem</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">...</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kt\">List</span><span class=\"o\">.</span><span class=\"n\">dropMap</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"o\">.</span><span class=\"n\">isOk</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">elem</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">...</span>\n</code></pre></div>",
        "id": 411118618,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704338146
    },
    {
        "content": "<p>eh, but then you end up with all the <code>Ok</code> wrappers still there</p>",
        "id": 411118721,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704338183
    },
    {
        "content": "<p>Or you have to write custom ismytag functions for other tags</p>",
        "id": 411118778,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1704338220
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/383402-API-Design/topic/Id.20function/near/411114110\">said</a>:</p>\n<blockquote>\n<p>Is performance the only reason not to have it as a separate <code>List.map |&gt; List.keepOks</code> with <code>keepOks</code> being literal and essentially defaulting to the identity version?<br>\nLong term if we had automatic under the hood iterators would that fix the perf as well</p>\n</blockquote>\n<p>perf is one reason, but also it can be convenient when doing things like</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">filterMap</span><span class=\"w\"> </span><span class=\"nv\">strings</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">fromStr</span>\n</code></pre></div>",
        "id": 411118880,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704338259
    },
    {
        "content": "<p>Ah, for sure</p>",
        "id": 411121573,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704339795
    },
    {
        "content": "<p>Though if we had the working automatic iterators (again thinking long term) that would be equivalent to:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nv\">strings</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">fromStr</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">keepOks</span>\n</code></pre></div>\n<p>Not much more verbose and theoretically would be same perf.</p>",
        "id": 411216288,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704384016
    },
    {
        "content": "<p>true!</p>",
        "id": 411224963,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704386962
    }
]