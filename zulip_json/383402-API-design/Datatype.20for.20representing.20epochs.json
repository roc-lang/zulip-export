[
    {
        "content": "<p>Brought up with the <a class=\"stream-topic\" data-stream-id=\"304902\" href=\"/#narrow/channel/304902-show-and-tell/topic/roc-realworld.20initial.20exploration\">#show and tell &gt; roc-realworld initial exploration</a> discussion:</p>\n<p>What's the best backing type for storing time epochs? From the <code>chrono</code> docs for <a href=\"https://docs.rs/chrono/latest/chrono/struct.DateTime.html#method.timestamp_nanos_opt\">timestamp_nanos_opt</a>:</p>\n<blockquote>\n<p>An <code>i64</code> with nanosecond precision can span a range of ~584 years. This function returns <code>None</code> on an out of range <code>DateTime</code>.</p>\n</blockquote>\n<blockquote>\n<p>The dates that can be represented as nanoseconds are between 1677-09-21T00:12:43.145224192 and 2262-04-11T23:47:16.854775807.</p>\n</blockquote>\n<p>So except for where you're trying to use a timestamp to represent dates in history, anything in the recent past/future is totally covered with <code>i64</code>. I personally think you could use <code>u64</code> because now and forward is what we care about for app dev, but I can see usage of either.</p>\n<p>That being said, if <code>i64</code> covers almost 600 years, then using <code>i128</code> would cover any year in the past, present, or future that would ever need to be represented for anything. You'd _probably_ be safe using it to represent all datetime types and crashing on invalid years like 1 trillion BC (though even that would still be in range!).</p>",
        "id": 491628518,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735832858
    },
    {
        "content": "<p>So I'd say:</p>\n<ul>\n<li>U64 is a safe bet for any application managing timestamps for events in the modern day</li>\n<li>I64 is a good way to halve the range of U64 but get a few hundred years of backwards history (probably not as likely to be needed)</li>\n<li>I128 will cover basically all realistically representable time, so using I128 is always gonna work even if it's double the storage cost</li>\n<li>U128 should only be used if you can't use a signed int like I128 for some reason</li>\n</ul>",
        "id": 491629040,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735833119
    },
    {
        "content": "<p>I expect Roc should just use <code>I128</code> everywhere to be safe?</p>",
        "id": 491629157,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735833155
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> does this answer your question?</p>",
        "id": 491629179,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735833166
    },
    {
        "content": "<p>I think <code>I64/I128</code> is useful so you can do <code>a - b</code> without worrying about accidentally producing a negative</p>",
        "id": 491629193,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735833173
    },
    {
        "content": "<p>yeah I jut wonder about whether \"negative duration\" is a good concept to have or not</p>",
        "id": 491629274,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735833221
    },
    {
        "content": "<p>I assume it's fine, but maybe it's desirable to know it's nonnegative for some reason?</p>",
        "id": 491629302,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735833235
    },
    {
        "content": "<p>I feel like max efficiency isn't needed here so <code>I128</code> seams fine. Then it can be used datetimes and time measurements instead of splitting the ecosystem</p>",
        "id": 491629376,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735833270
    },
    {
        "content": "<p>I think we're already comfortable with \"negative duration\" because we don't measure from now, we measure from 54 years ago</p>",
        "id": 491629381,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735833273
    },
    {
        "content": "<blockquote>\n<p>yeah I jut wonder about whether \"negative duration\" is a good concept to have or not</p>\n</blockquote>\n<p>That's totally fair.</p>\n<p>If we want to use this type for datetimes, negative is needed anyway for before 1970.</p>\n<p>If it is only for time measurements, I agree that unsigned makes more sense</p>",
        "id": 491629606,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735833380
    },
    {
        "content": "<p>I'm not sure I agree that you'd want unsigned unless you wanted to save space.</p>",
        "id": 491630066,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735833616
    },
    {
        "content": "<p>Signed adds more safety (but not perfect safety, of course!) around math on the underlying epoch</p>",
        "id": 491630169,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735833659
    },
    {
        "content": "<p>And I can't think of a situation where I'd want to limit the cardinality of my times to \"1970 and later\" at the type level instead of just having a proper constraint in the DB or something</p>",
        "id": 491630362,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735833740
    },
    {
        "content": "<p>well <code>Instant</code> and <code>Duration</code> can be different in that way</p>",
        "id": 491631250,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735834137
    },
    {
        "content": "<p><code>Instant</code> should certainly be signed</p>",
        "id": 491631256,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735834141
    },
    {
        "content": "<p><code>Duration</code> I can see arguments both ways for whether it should be signed</p>",
        "id": 491631265,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735834149
    },
    {
        "content": "<p>(semantically, not thinking about performance or anything like that)</p>",
        "id": 491631283,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735834160
    },
    {
        "content": "<p>Oh, good point! I was thinking of instant for both of those words</p>",
        "id": 491631311,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735834178
    },
    {
        "content": "<p><code>Duration</code>s probably should not be negative!</p>",
        "id": 491631340,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735834191
    },
    {
        "content": "<p>So yes, <code>I128</code> for <code>Instant</code> and <code>U64</code> or <code>U128</code> (probably the latter) for <code>Duration</code></p>",
        "id": 491631463,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735834238
    },
    {
        "content": "<p>I guess eventually <code>Instant</code> will be a nominal type. Then <code>instant.elapsed(other)</code> will return a <code>Duration</code> which is a <code>U128</code> (maybe also nominal for methods like <code>.to_ms()</code>.</p>",
        "id": 491634733,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735835830
    },
    {
        "content": "<p>In a world where <code>Instant</code> is just structural <code>Duration</code> will ultimately be the same type cause users will just do <code>instant - other</code></p>",
        "id": 491634825,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735835866
    },
    {
        "content": "<p>oh I definitely think both of them should be nominal</p>",
        "id": 491636287,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735836497
    },
    {
        "content": "<p>in general for things where units matter, nominal is great for avoiding mixing up your units</p>",
        "id": 491636315,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735836511
    },
    {
        "content": "<p>like accidentally adding together two <code>Instant</code>s, which is almost certainly never what you want <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 491636354,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735836530
    },
    {
        "content": "<p>Ah yes, <code>Dec 3rd, 1994 + Jan 1st, 1970 == Dec 3rd, 1994</code></p>",
        "id": 491636611,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735836623
    },
    {
        "content": "<p>If durations can't be negative, would<code>duration_a - duration_b</code> would always return a positive number?</p>\n<p>If so, it creates a situation where the order of <code>+</code> and <code>-</code> operations with durations matters, as below.</p>\n<div class=\"codehilite\"><pre><span></span><code>a = Duration.from_ms 2\nb = Duration.from_ms 8\nc = Duration.from_ms 5\n\nexpect\n    // Fails. LHS: 5, RHS: 11\n    a + b - c == a - c + b\n</code></pre></div>",
        "id": 491647971,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1735842060
    },
    {
        "content": "<p>I'd expect it to do whatever <code>3 - 5</code> does which is presumably crash</p>",
        "id": 491648313,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735842256
    },
    {
        "content": "<p>math binops exist because doing <code>left.minus(right)</code> every time sucks, and <code>left.minus(right)?</code> every time isn't worth it either, so we just expect it to crash</p>",
        "id": 491648420,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735842336
    },
    {
        "content": "<p>But we have <code>minus_checked(...)</code> for those safety-aware cases</p>",
        "id": 491648506,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735842366
    },
    {
        "content": "<p>yeah this is true in general of unsigned integers, and it's a tradeoff that comes with the upside of guaranteeing that they're never negative</p>",
        "id": 491653242,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735844723
    },
    {
        "content": "<p>I think durations should definitely be signed. It would be a very bad user experience to compare two durations and get a crash. It's more acceptable when subtracting raw unsigned integers because you know what type you're working with and that crashing is part of the game. With a custom type, you would have no reason to expect that <code>today.minus(tomorrow)</code> would explode without reading the docs.</p>\n<p>To me a negative duration seems very intuitive and useful. It's just representing the distance and direction between two points in time.</p>",
        "id": 491691480,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1735868525
    },
    {
        "content": "<p><code>today</code> and <code>tomorrow</code> would be <code>Instant</code>s, though, not <code>Duration</code>s <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 491691510,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735868566
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"611722\">Isaac Van Doren</span> <a href=\"#narrow/channel/383402-API-design/topic/Datatype.20for.20representing.20epochs/near/491691480\">said</a>:</p>\n<blockquote>\n<p>It would be a very bad user experience to compare two durations and get a crash. It's more acceptable when subtracting raw unsigned integers because you know what type you're working with and that crashing is part of the game.</p>\n</blockquote>\n<p>this is a good point</p>",
        "id": 491691526,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735868594
    },
    {
        "content": "<p>Right, I was imagining that <code>today.minus(tomorrow)</code> would be a duration though</p>",
        "id": 491691559,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1735868610
    },
    {
        "content": "<p>the downside of it being signed is that you can't guarantee it's nonnegative, so there might be some scenarios you have more difficulty ruling out</p>",
        "id": 491691574,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735868623
    },
    {
        "content": "<p>but the downside of it being unsigned is that it might crash if you use it wrong</p>",
        "id": 491691578,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735868633
    },
    {
        "content": "<p>which is a more serious downside</p>",
        "id": 491691583,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735868638
    },
    {
        "content": "<p>I think it'd be better to expose a <code>Instant.absolute_delta(Instant) -&gt; Duration</code> and maintain unsigned <code>Duration</code>s</p>",
        "id": 491691585,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735868641
    },
    {
        "content": "<blockquote>\n<p>the downside of it being signed is that you can't guarantee it's nonnegative, so there might be some scenarios you have more difficulty ruling out</p>\n</blockquote>\n<p>It seems fine to just have to check if the duration is positive if you need to</p>",
        "id": 491691664,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1735868688
    },
    {
        "content": "<blockquote>\n<p>I think it'd be better to expose a <code>Instant.absolute_delta(Instant) -&gt; Duration</code> and maintain unsigned <code>Duration</code>s</p>\n</blockquote>\n<p>The trouble with this is that it will make adjusting dates really annoying if you actually do want a negative quantity</p>",
        "id": 491691729,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1735868752
    },
    {
        "content": "<p>Why do you need a negative quantity? You can just do <code>Instant.move_forwards(Duration) -&gt; Instant</code> and <code>Instant.move_backwards(Duration) -&gt; Instant</code></p>",
        "id": 491691843,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735868836
    },
    {
        "content": "<p>I'm approaching this from a \"cardinality first, API shape second\" and negative durations don't fit into that first box for me</p>",
        "id": 491691869,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735868877
    },
    {
        "content": "<p>Elm is big on descriptive APIs, it seems totally prudent to have a descriptive API for this stuff</p>",
        "id": 491691926,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735868905
    },
    {
        "content": "<p>Right I could do that, but that is a lot clunkier than <code>myInstant.adjust(myDuration)</code> which handles either direction</p>",
        "id": 491691945,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1735868929
    },
    {
        "content": "<p>Sure</p>",
        "id": 491691964,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735868961
    },
    {
        "content": "<p>I don't have strong feelings on it. Not the way I'd do it, but that approach works, so it's okay with me</p>",
        "id": 491692038,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735869024
    },
    {
        "content": "<p>Warning, it is very important to know when durations are negative. It is a sign that the underlying clock changed. So you need to know to throw out that data.</p>",
        "id": 491692194,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735869162
    },
    {
        "content": "<p>Yeah that's a good point</p>",
        "id": 491692224,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1735869198
    },
    {
        "content": "<p>Cause there is no guarantee to that end comes after start when doing:</p>\n<div class=\"codehilite\"><pre><span></span><code>start = Instant.now!()\nend = Instant.now!()\n</code></pre></div>",
        "id": 491692259,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735869231
    },
    {
        "content": "<p>oh that's a great point</p>",
        "id": 491697009,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735873126
    },
    {
        "content": "<p>that's enough to convince me duration should be signed <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 491697021,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735873140
    },
    {
        "content": "<p>I have a concrete use case for negative durations:<br>\nIn my work, I regularly deal with comparing multiple times, and seeing how close they are. (Specifically, \"Did the train come on time?\", comparing the scheduled time to the predicted arrival time to the time the train actually showed up.)</p>\n<p>The train could either be early or late. This would be way easier to do with signed subtraction and negative durations, rather than having unsigned durations and having to maintain a separate \"early or late\" enum.</p>",
        "id": 491698205,
        "sender_full_name": "Sky Rose",
        "timestamp": 1735874097
    },
    {
        "content": "<p>That's a great example</p>",
        "id": 491699059,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1735874872
    },
    {
        "content": "<p>That reminds me that stage monitors (displays that only the people on stage can see) will often display the amount of time remaining for a particular segment and then switch negative once a segment starts going too long.</p>",
        "id": 491699168,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1735874982
    },
    {
        "content": "<p>cool, ok it seems like Rust got this one wrong</p>",
        "id": 491700102,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735875947
    },
    {
        "content": "<p>so then the question is <code>I64</code> or <code>I128</code></p>",
        "id": 491700109,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735875954
    },
    {
        "content": "<p>If your <code>Instant</code> is <code>I128</code>, seems like the same for <code>Duration</code> only makes sense</p>",
        "id": 491700177,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735875994
    },
    {
        "content": "<p>If you don't know what to use for instant, then <code>I128</code> is 99.9999999% safe for any usage and <code>I64</code> is 99.9% safe</p>",
        "id": 491700227,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735876051
    },
    {
        "content": "<p>yeah there's always a performance argument for <code>I64</code>, which I think would mainly come up if you're storing a bunch of these in memory, like a time series or something</p>",
        "id": 491700338,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735876158
    },
    {
        "content": "<p>but maybe for use cases like that you're storing a plain integer anyway and just converting to <code>Instant</code> or <code>Duration</code> one at a time, briefly</p>",
        "id": 491700351,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735876186
    },
    {
        "content": "<p>A <code>Instant.to_i64() : Instant -&gt; Result I64 [Overflow]</code> method should be sufficient for those that want small storage, and <code>Instant.from_i64() : I64 -&gt; Instant</code> is infallible</p>",
        "id": 491700471,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735876292
    },
    {
        "content": "<p>We should default to safe unless there's a big cost</p>",
        "id": 491700477,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735876300
    },
    {
        "content": "<p>for high performance time series (trading use case) my experience is you store offsets relative to some known time, and your TS is usually fixed an intervals, so you often elide explicit intervals anyway. I would think I128 is fine in general</p>",
        "id": 491703221,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735878939
    },
    {
        "content": "<p>Re negative Durations: maybe the name \"Duration\" isn't quite right? I think what we're talking about is an \"InstantDifference\"? For me, a \"Duration\" is never negative. I can't think of a better name for this concept, but the folks here are very good in proposing alternatives...</p>",
        "id": 491947584,
        "sender_full_name": "Pit Capitain",
        "timestamp": 1736064806
    },
    {
        "content": "<p>Interesting</p>",
        "id": 492077564,
        "sender_full_name": "Anton",
        "timestamp": 1736159602
    }
]