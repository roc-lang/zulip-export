[
    {
        "content": "<p>How does the team feel about having these functions in std:</p>\n<ul>\n<li><code>Str.from_utf8 : List U8 -&gt; Result Str { err : InvalidUnicodeErr, index : U64 }</code></li>\n<li><code>Str.from_utf8_lossy : List U8 -&gt; Str</code></li>\n<li><code>Str.from_utf16 : List U16 -&gt; Result Str { err : InvalidUnicodeErr, index : U64 }</code></li>\n<li><code>Str.from_utf16_lossy : List U16 -&gt; Str</code></li>\n</ul>",
        "id": 489582492,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734474295
    },
    {
        "content": "<p>The <code>*_lossy</code> functions should replace invalid chars with the <a href=\"https://www.compart.com/en/unicode/U+FFFD\">replacement char</a></p>",
        "id": 489582572,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734474339
    },
    {
        "content": "<p>Note -- are you tacking <a href=\"https://github.com/roc-lang/roc/pull/7321\">https://github.com/roc-lang/roc/pull/7321</a></p>",
        "id": 489583218,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734474661
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Str.fromUtf8 : List U8 -&gt; Result Str [BadUtf8 { problem : Utf8ByteProblem, index : U64 }]\n</code></pre></div>",
        "id": 489583252,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734474674
    },
    {
        "content": "<p>The tag's unify nicer with other tag based errors -- for when your doing the \"just pass it up the chain\" thing</p>",
        "id": 489583396,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734474736
    },
    {
        "content": "<p>Oh yeah, the tag is good</p>",
        "id": 489583471,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734474790
    },
    {
        "content": "<p>So I'd add...</p>\n<div class=\"codehilite\"><pre><span></span><code>Str.from_utf16 : List U16 -&gt; Result Str [BadUtf16 { problem : Utf16ByteProblem, index : U64 }]\n</code></pre></div>",
        "id": 489583591,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734474849
    },
    {
        "content": "<p>Yes</p>",
        "id": 489583629,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734474871
    },
    {
        "content": "<p>I'll be quite honest: I didn't try to make the error types useful</p>",
        "id": 489583672,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734474895
    },
    {
        "content": "<p>Thanks for thinking for me</p>",
        "id": 489583685,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734474901
    },
    {
        "content": "<p>I think if Anton was here, he'd ask for a PR to merge into that PR. He's planning on making a testing release I think</p>",
        "id": 489583706,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734474910
    },
    {
        "content": "<p>Instead of lossy, do we want with replacement? Then just expose the default replacement character?</p>",
        "id": 489583720,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734474919
    },
    {
        "content": "<p>Maybe that isn't valuable or worth it, just curious. Have seen that API before</p>",
        "id": 489583783,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734474962
    },
    {
        "content": "<p>If you're opt-ing into quick and dirty... you want minimal friction</p>",
        "id": 489583827,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734474964
    },
    {
        "content": "<p>I'm just not sure what the replacement API would look like</p>",
        "id": 489583869,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734474986
    },
    {
        "content": "<p>I guess you can always use lossy and the call replace separately to change the replacement char</p>",
        "id": 489583872,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734474987
    },
    {
        "content": "<p>We definitely should expose the replacement char though</p>",
        "id": 489583887,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734474997
    },
    {
        "content": "<p>We don't have a <code>char</code> type, so what if they pass an invalid UTF-8 char?</p>",
        "id": 489583911,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734475012
    },
    {
        "content": "<p>I have to google it every time</p>",
        "id": 489583914,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734475016
    },
    {
        "content": "<p>\"\\u(FFFD)\"</p>",
        "id": 489583947,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734475042
    },
    {
        "content": "<p>Also, might as well add in utf32 while we're here?</p>",
        "id": 489583992,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734475066
    },
    {
        "content": "<p><code>Str.from_utf8_with_replacement : List U8, { replacement_char ? Str } -&gt; Str</code></p>",
        "id": 489584068,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734475084
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/383402-API-design/topic/Lossy.20unicode.20conversion.20builtins/near/489583827\">said</a>:</p>\n<blockquote>\n<p>If you're opt-ing into quick and dirty... you want minimal friction</p>\n</blockquote>\n<p>Very true. I'm happy with just lossy.</p>",
        "id": 489584143,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734475119
    },
    {
        "content": "<p>What if they call <code>Str.from_utf8_with_replacement(bytes, \"not-a-char\")</code></p>",
        "id": 489584151,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734475122
    },
    {
        "content": "<p>Yeah, let's just leave it as lossy and let them separately call <code>Str.replace</code> separately to change the character</p>",
        "id": 489584229,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734475172
    },
    {
        "content": "<p>One thought I have (unrelated to design stuff, more scheduling), is any of this going to block our current upgrade. I'd like to land the new PI basic-cli this week. I think we can just make <code>Arg : [Unix (List U16, Windows (List U16)]</code> and land the Weaver and these builtin upgrades later. </p>\n<p>If we just make an issue for these Lossy strings additions, we can track it.</p>",
        "id": 489584472,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734475309
    },
    {
        "content": "<p>So:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">from_utf8</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">BadUtf8</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">err</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Utf8ByteProblem</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">U64</span><span class=\"w\"> </span><span class=\"p\">}]</span>\n<span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">from_utf8_lossy</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span>\n<span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">from_utf16</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">U16</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">BadUtf16</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">err</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Utf16ByteProblem</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">U64</span><span class=\"w\"> </span><span class=\"p\">}]</span>\n<span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">from_utf16_lossy</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">U16</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span>\n<span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">from_utf32</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">U32</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">BadUtf32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">err</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Utf32ByteProblem</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">U64</span><span class=\"w\"> </span><span class=\"p\">}]</span>\n<span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">from_utf32_lossy</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">U32</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span>\n</code></pre></div>",
        "id": 489584482,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734475317
    },
    {
        "content": "<p>Potentially merging the error tag of it makes sense</p>",
        "id": 489584626,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734475388
    },
    {
        "content": "<p>Let's do Arg, and I'll try to get a PR for these functions by tomorrow. If I can't do it in time, we can do it later</p>",
        "id": 489584643,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734475400
    },
    {
        "content": "<p>Adding new functions isn't breaking</p>",
        "id": 489584661,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734475415
    },
    {
        "content": "<p>I feel like we should drop “Byte” from the utf16/32 error tags. It’s not just one byte for those <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 489614819,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1734494381
    },
    {
        "content": "<p>Works for me!</p>",
        "id": 489620671,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734498347
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"489294\">Agus Zubiaga</span> <a href=\"#narrow/stream/383402-API-design/topic/Lossy.20unicode.20conversion.20builtins/near/489614819\">said</a>:</p>\n<blockquote>\n<p>I feel like we should drop “Byte” from the utf16/32 error tags. It’s not just one byte for those <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>\n</blockquote>\n<p>Can we drop it off all tags?</p>",
        "id": 489806520,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734542453
    },
    {
        "content": "<p>You have a list of u8s and and index</p>",
        "id": 489806589,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734542472
    },
    {
        "content": "<p>I think anyone can figure out that is a problem with a specific byte</p>",
        "id": 489806630,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734542486
    },
    {
        "content": "<p>Though I still in the camp that if possible, we should just have a single UnicodeError</p>",
        "id": 489806703,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734542516
    },
    {
        "content": "<p>Or UtfError</p>",
        "id": 489806776,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734542529
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 489808480,
        "sender_full_name": "jan kili",
        "timestamp": 1734543095
    },
    {
        "content": "<p>For naming, I'd prefer <code>Err [InvalidUtf*]</code> over <code>Err [Utf*Error]</code> (whether it's 8/16/generic) - <code>Bad</code> is fine too.</p>",
        "id": 489808489,
        "sender_full_name": "jan kili",
        "timestamp": 1734543097
    },
    {
        "content": "<p>Good call</p>",
        "id": 489815338,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734545577
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/issues/7390\">https://github.com/roc-lang/roc/issues/7390</a></p>",
        "id": 489896317,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734590884
    },
    {
        "content": "<p>If someone could validate that issue, that'd be great</p>",
        "id": 489896347,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734590909
    },
    {
        "content": "<p>Luke and I will be getting the APIs in place for basic-cli and Weaver, respectively</p>",
        "id": 489896377,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734590932
    },
    {
        "content": "<p>Which means creating an <code>Arg := [Unix (List U8), Windows (List U16)]</code> type and just crashing on <code>Windows</code> for now. Once these are implemented, it should be a simple change to properly support 16-bit encoded strings in <code>basic-cli</code> and Weaver</p>",
        "id": 489896475,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734590995
    },
    {
        "content": "<p>Why the redundancy of Bad+Invalid in <code>[BadUtf8 { err : InvalidUtf8, index : U64 }]</code>?</p>",
        "id": 489900176,
        "sender_full_name": "jan kili",
        "timestamp": 1734592853
    },
    {
        "content": "<p>Is <code>[InvalidUtf8 { index : U64 }]</code> sufficient? (Happy to Q&amp;A in GH thread, if you'd prefer.)</p>",
        "id": 489900739,
        "sender_full_name": "jan kili",
        "timestamp": 1734593153
    },
    {
        "content": "<p>I also prefer Zulip, it's more back and forth</p>",
        "id": 489900889,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734593233
    },
    {
        "content": "<p>The error holds info about why the UTF was encoded incorrectly</p>",
        "id": 489900936,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734593264
    },
    {
        "content": "<p>It's a tag union</p>",
        "id": 489900954,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734593277
    },
    {
        "content": "<p>Ohhh I forget those sneaky invisible payloads exist, thanks.</p>",
        "id": 489901017,
        "sender_full_name": "jan kili",
        "timestamp": 1734593298
    },
    {
        "content": "<p>When I mentioned naming above, I was ignorant to these tag union(s) already existing, and they seem fine as-is. Does this issue intend to refactor <a href=\"https://github.com/roc-lang/roc/blob/main/crates/compiler/builtins/roc/Str.roc#L379-L388\">this existing pattern</a> from Problem+ByteProblem to Bad+Invalid? (Sorry if I'm bikeshedding this away from implementation concerns.)</p>\n<div class=\"codehilite\" data-code-language=\"Perl\"><pre><span></span><code><span class=\"n\">Utf8ByteProblem</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">    </span><span class=\"n\">InvalidStartByte</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">UnexpectedEndOfSequence</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">ExpectedContinuation</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">OverlongEncoding</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">CodepointTooLarge</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">EncodesSurrogateHalf</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">Utf8Problem</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">byteIndex</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">U64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">problem</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">Utf8ByteProblem</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 489901424,
        "sender_full_name": "jan kili",
        "timestamp": 1734593517
    },
    {
        "content": "<p>That PR you linked seems to want <code>[BadUtf* { problem : Utf*ByteProblem, index : U64 }]</code></p>",
        "id": 489902668,
        "sender_full_name": "jan kili",
        "timestamp": 1734594130
    },
    {
        "content": "<p>If <a href=\"https://github.com/roc-lang/roc/issues/7390\">#7390</a> intends to be ambivalent on Err structure, then please ignore everything I've said above.</p>",
        "id": 489902942,
        "sender_full_name": "jan kili",
        "timestamp": 1734594258
    },
    {
        "content": "<p>Oh yeah let's remove one level of tag nesting</p>",
        "id": 489985325,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734621418
    },
    {
        "content": "<p>It isn't needed</p>",
        "id": 489985343,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734621422
    },
    {
        "content": "<p>Directly return a <code>Result Str { byteIndex : U64, problem : Utf8ByteProblem }</code></p>",
        "id": 489985538,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734621481
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"722031\">@shua</span>  -- it's not urgent or anything... but would you be interested in tackling this? </p>\n<p>Here's the tracking issue from Sam <a href=\"https://github.com/roc-lang/roc/issues/7390\">https://github.com/roc-lang/roc/issues/7390</a></p>",
        "id": 490060138,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734647690
    },
    {
        "content": "<p>I can pick this up. Should I merge it into <a href=\"https://github.com/roc-lang/roc/pull/7321\">https://github.com/roc-lang/roc/pull/7321</a> or a separate PR?</p>",
        "id": 491131222,
        "sender_full_name": "shua",
        "timestamp": 1735431887
    },
    {
        "content": "<p>Also, would the preference be for 3 separate tag sets (<code>Utf8ByteProblem</code>, <code>Utf16ByteProblem</code>, and <code>Utf32ByteProblem</code>) or should they all just be <code>UtfDecodingProblem</code> even if some variants aren't possible for utf16/utf32?</p>",
        "id": 491131225,
        "sender_full_name": "shua",
        "timestamp": 1735431891
    },
    {
        "content": "<p>I think it's ok to merge it into your PR</p>",
        "id": 491131527,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735432260
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"722031\">shua</span> <a href=\"#narrow/channel/383402-API-design/topic/Lossy.20unicode.20conversion.20builtins/near/491131225\">said</a>:</p>\n<blockquote>\n<p>Also, would the preference be for 3 separate tag sets (<code>Utf8ByteProblem</code>, <code>Utf16ByteProblem</code>, and <code>Utf32ByteProblem</code>) or should they all just be <code>UtfDecodingProblem</code> even if some variants aren't possible for utf16/utf32?</p>\n</blockquote>\n<p>I'm not quite following this...</p>",
        "id": 491131614,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735432327
    },
    {
        "content": "<p>Is this in the Issue?</p>\n<div class=\"codehilite\"><pre><span></span><code>Str.from_utf8 : List U8 -&gt; Result Str [BadUtf8 { err : InvalidUtf8, index : U64 }]\nStr.from_utf8_lossy : List U8 -&gt; Str\nStr.from_utf16 : List U16 -&gt; Result Str [BadUtf16 { err : InvalidUtf16, index : U64 }]\nStr.from_utf16_lossy : List U16 -&gt; Str\nStr.from_utf32 : List U32 -&gt; Result Str [BadUtf32 { err : InvalidUtf32, index : U64 }]\nStr.from_utf32_lossy : List U32 -&gt; Str\n</code></pre></div>",
        "id": 491131631,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735432343
    },
    {
        "content": "<p>Ohk, maybe we should update the issue -- nvm</p>\n<p>I think I see, the tag union is inside the record right?</p>",
        "id": 491131657,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735432378
    },
    {
        "content": "<p>I'm not sure we need all the different error tags. Just <code>InvalidUtf8</code> would be ok wouldn't it?</p>",
        "id": 491131776,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735432510
    },
    {
        "content": "<p>If possible, should only be a single tag</p>",
        "id": 491131890,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735432620
    },
    {
        "content": "<p><code>InvalidUnicode</code> probably</p>",
        "id": 491131899,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735432628
    },
    {
        "content": "<p>So like this?</p>\n<div class=\"codehilite\"><pre><span></span><code>Str.from_utf8 : List U8 -&gt; Result Str [InvalidUnicode { err : [BadUtf8], index : U64 }]\nStr.from_utf8_lossy : List U8 -&gt; Str\nStr.from_utf16 : List U16 -&gt; Result Str [InvalidUnicode { err : [BadUtf16], index : U64 }]\nStr.from_utf16_lossy : List U16 -&gt; Str\nStr.from_utf32 : List U32 -&gt; Result Str [InvalidUnicode { err : [BadUtf32], index : U64 }]\nStr.from_utf32_lossy : List U32 -&gt; Str\n</code></pre></div>",
        "id": 491132005,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735432770
    },
    {
        "content": "<p>Or maybe</p>\n<div class=\"codehilite\"><pre><span></span><code>Str.from_utf8 : List U8 -&gt; Result Str [InvalidUtf8 { index : U64 }]\nStr.from_utf8_lossy : List U8 -&gt; Str\nStr.from_utf16 : List U16 -&gt; Result Str [InvalidUtf16 { index : U64 }]\nStr.from_utf16_lossy : List U16 -&gt; Str\nStr.from_utf32 : List U32 -&gt; Result Str [InvalidUtf32 { index : U64 }]\nStr.from_utf32_lossy : List U32 -&gt; Str\n</code></pre></div>",
        "id": 491132120,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735432903
    },
    {
        "content": "<p>Or </p>\n<div class=\"codehilite\"><pre><span></span><code>UnicodeErr : [\n    InvalidUtf8 U64,\n    InvalidUtf16 U64,\n    InvalidUtf32 U64,\n]\n\nStr.from_utf8 : List U8 -&gt; Result Str UnicodeErr\nStr.from_utf8_lossy : List U8 -&gt; Str\nStr.from_utf16 : List U16 -&gt; Result Str UnicodeErr\nStr.from_utf16_lossy : List U16 -&gt; Str\nStr.from_utf32 : List U32 -&gt; Result Str UnicodeErr\nStr.from_utf32_lossy : List U32 -&gt; Str\n</code></pre></div>",
        "id": 491132191,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735432959
    },
    {
        "content": "<p>I think like this:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">UnicodeProblem</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">    </span><span class=\"kt\">InvalidStartByte</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"kt\">UnexpectedEndOfSequence</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"kt\">ExpectedContinuation</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"kt\">OverlongEncoding</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"kt\">CodepointTooLarge</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"kt\">EncodesSurrogateHalf</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n\n<span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">from_utf8</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">BadUtf8</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">U64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">problem</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">UnicodeProblem</span><span class=\"w\"> </span><span class=\"p\">}]</span>\n<span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">from_utf8_lossy</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span>\n<span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">from_utf16</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">U16</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">BadUtf16</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">U64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">problem</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">UnicodeProblem</span><span class=\"w\"> </span><span class=\"p\">}]</span>\n<span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">from_utf16_lossy</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">U16</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span>\n<span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">from_utf32</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">U32</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">BadUtf32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">U64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">problem</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">UnicodeProblem</span><span class=\"w\"> </span><span class=\"p\">}]</span>\n<span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">from_utf32_lossy</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">U32</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span>\n</code></pre></div>",
        "id": 491132395,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735433216
    },
    {
        "content": "<p>This all looks good to me, assuming we're okay with providing a superset of the errors we see for all Unicode variants.</p>",
        "id": 491132601,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735433413
    },
    {
        "content": "<p>I'm not sure what they type of errors we see for UTF-8 vs 16 vs 32</p>",
        "id": 491132614,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735433438
    },
    {
        "content": "<p>It's probably better to provide the actual set of errors per encoding instead of just a single union</p>",
        "id": 491132643,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735433468
    },
    {
        "content": "<p>If we go with a single union, we should maybe aim for naming with respect to codepoints instead of just bytes? Since UTF-16 and 32 don't process bytes</p>",
        "id": 491132713,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735433524
    },
    {
        "content": "<p>My thought is: if the error set mostly overlaps, then just merge it, if not, then add separate tag unions.</p>",
        "id": 491132761,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735433570
    },
    {
        "content": "<p>So that is my default to try</p>",
        "id": 491132767,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735433575
    },
    {
        "content": "<p>If it doesnt work in practice due to disjoint errors, then make <code>Utf8Problem</code>, <code>Utf16Problem</code>, and <code>Utf32Problem</code></p>",
        "id": 491132807,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735433607
    },
    {
        "content": "<p>I don't feel strongly in opposition, though I do think it's better for API users to get <code>UTFXXProblem</code>. Either works for me</p>",
        "id": 491132925,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735433675
    },
    {
        "content": "<p>Looking at the zig standard library, errors look to be disjoint</p>",
        "id": 491133521,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735434111
    },
    {
        "content": "<p>So I think we will have a sepearate <code>Utf8Problem</code>, <code>Utf16Problem</code> and <code>Utf32Problem</code></p>",
        "id": 491133581,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735434140
    },
    {
        "content": "<p>Yep</p>",
        "id": 491133586,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735434148
    },
    {
        "content": "<p>Also, it sounds like we actually need to support <a href=\"https://simonsapin.github.io/wtf-8/#wtf-16\">wtf-8 and wtf-16</a> for windows paths.</p>",
        "id": 491134034,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735434647
    },
    {
        "content": "<p>zig does support this, but you have to explicitly tell it to how to handle the utf-16 it is given</p>",
        "id": 491134047,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735434668
    },
    {
        "content": "<p><a href=\"https://ziglang.org/documentation/0.13.0/std/#std.unicode.Surrogates\">https://ziglang.org/documentation/0.13.0/std/#std.unicode.Surrogates</a></p>",
        "id": 491134050,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735434677
    },
    {
        "content": "<p>WTF is very appropriate</p>",
        "id": 491134053,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735434680
    },
    {
        "content": "<p>An infinite hole, Windows is</p>",
        "id": 491134055,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735434686
    },
    {
        "content": "<p>Basically, is wtf is for old utf-16 that is not technically valid modern utf-16 (like windows path and js strings apparently)</p>",
        "id": 491134067,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735434717
    },
    {
        "content": "<p>probably <code>Str.from_utf16</code> should just take an extra arg and forward that to zig</p>",
        "id": 491134148,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735434770
    },
    {
        "content": "<p>I'm sure having UTF-16 is good, but it seems like we only need WTF-16 for now</p>",
        "id": 491134162,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735434797
    },
    {
        "content": "<p>Yeah, I have no idea where you would run into valid modern utf-16.</p>",
        "id": 491134179,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735434822
    },
    {
        "content": "<p>Well, do you know how this will affect <code>OsArg := [Unix (List U8), Windows (List U16)]</code>? Seems like we'll only have UTF-8 and WTF-16</p>",
        "id": 491134237,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735434862
    },
    {
        "content": "<p>Also, we can still implement UTF-16/32 in the stdlib, they won't hurt anything</p>",
        "id": 491134262,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735434900
    },
    {
        "content": "<p>correct. We will only have <code>UTF-8</code> and <code>WTF-16</code></p>",
        "id": 491134289,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735434931
    },
    {
        "content": "<p>Okay, great</p>",
        "id": 491134303,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735434948
    },
    {
        "content": "<p>Reading up on this more, it sounds like using <code>WTF-16</code> for all <code>UTF-16</code> parsing is valid (and likely required in many cases due to legacy). It just loses some performance due to adding extra checks for unpaired surrogates. So I think we should make <code>Str.from_utf16</code>, but under the hood, it will just parse <code>WTF-16</code>. According to wikipedia, most utf-16 decoders do this.</p>\n<p>I'm not sure the perf cost, but it sounds like many systems require it in general.</p>",
        "id": 491134688,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735435320
    },
    {
        "content": "<p>We could also add <code>Str.from_wtf16</code> and just alias <code>Str.from_utf16</code> in that case</p>",
        "id": 491134892,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735435483
    },
    {
        "content": "<p>If someone wants to parse WTF-16, it'd be good to not need to ask in Zulip or read what could be the 3rd docs paragraph of <code>Str.parse_utf16</code></p>",
        "id": 491134931,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735435535
    },
    {
        "content": "<p>Yeah, sounds good</p>",
        "id": 491135083,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735435667
    },
    {
        "content": "<p>eh I think just doing utf16 is fine, and then document that it's actually wtf-16</p>",
        "id": 491136449,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735436900
    },
    {
        "content": "<p>I think the likelihood that perf is a problem here is low, and I wouldn't be surprised if people chose the wrong one</p>",
        "id": 491136459,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735436922
    },
    {
        "content": "<p>leading to things almost always working, but then in super rare scenarios not working right <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 491136468,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735436938
    },
    {
        "content": "<p>as in, they choose utf-16 not realizing they need wtf-16</p>",
        "id": 491136479,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735436954
    },
    {
        "content": "<p>(and perhaps not knowing wtf-16 exists!)</p>",
        "id": 491136487,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735436960
    },
    {
        "content": "<p>edit: below is incorrect, we want the wrapping <code>BadUtf8</code> tags</p>\n<hr>\n<p>Merging suggestions from above on error api:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/383402-API-design/topic/Lossy.20unicode.20conversion.20builtins/near/491133521\">said</a>:</p>\n<blockquote>\n<p>Looking at the zig standard library, errors look to be disjoint</p>\n</blockquote>\n<p>means we want distinct <code>Utf8Problem</code>, <code>Utf16Problem</code> and <code>Utf32Problem</code> tagsets, and</p>\n<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/383402-API-design/topic/Lossy.20unicode.20conversion.20builtins/near/489985325\">said</a>:</p>\n<blockquote>\n<p>Oh yeah let's remove one level of tag nesting</p>\n</blockquote>\n<p>indicates we can remove the wrapping <code>BadUtf8</code> etc tag, leading to the following api:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">Utf8Problem</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"nf\">...</span><span class=\"w\"> </span><span class=\"p\">]</span>\n<span class=\"kt\">Utf16Problem</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"nf\">...</span><span class=\"w\"> </span><span class=\"p\">]</span>\n<span class=\"kt\">Utf32Problem</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"nf\">...</span><span class=\"w\"> </span><span class=\"p\">]</span>\n\n<span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">from_utf8</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">U64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">problem</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Utf8Problem</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">from_utf8_lossy</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span>\n<span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">from_utf16</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">U16</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">U64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">problem</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Utf16Problem</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">from_utf16_lossy</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">U16</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span>\n<span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">from_utf32</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">U32</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">U64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">problem</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Utf32Problem</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">from_utf32_lossy</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">U32</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span>\n</code></pre></div>",
        "id": 491142773,
        "sender_full_name": "shua",
        "timestamp": 1735443970
    },
    {
        "content": "<p>I think we still want a tag union, because it merges nicely with other errors when you pass them up from a callsite within a function <code>Result _ []err</code></p>",
        "id": 491142852,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735444074
    },
    {
        "content": "<p>If it's a record, then its an extra step to wrap it in a tag</p>",
        "id": 491142903,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735444102
    },
    {
        "content": "<p>And to be clear: we want <code>from_utf16</code> to actually accept wtf-16, but <code>from_utf8</code> should still only accept utf-8 <em>not</em> wtf-8?</p>",
        "id": 491142984,
        "sender_full_name": "shua",
        "timestamp": 1735444226
    },
    {
        "content": "<p>yes</p>",
        "id": 491143089,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735444352
    },
    {
        "content": "<p>I think that is correct.</p>",
        "id": 491143093,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735444357
    },
    {
        "content": "<p><code>wtf-8</code> seems to be exceptionally rare from what I can tell. So it is reasonable to just consider it malformed</p>",
        "id": 491143107,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735444380
    },
    {
        "content": "<p><code>wtf-16</code> seems to be the default for many apis on the otherhand.</p>",
        "id": 491143114,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735444394
    },
    {
        "content": "<p>yeah, that matches my understanding as well</p>",
        "id": 491143120,
        "sender_full_name": "shua",
        "timestamp": 1735444406
    },
    {
        "content": "<p>coming back to <code>wtf-8</code>, what is expected for</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">fromUtf16</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"nv\">xd800</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">  </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"a\"</span>\n<span class=\"w\">  </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">s</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">fromUtf8</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toUtf8</span><span class=\"w\"> </span><span class=\"nv\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">    </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"b\"</span>\n<span class=\"w\">    </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"c\"</span>\n</code></pre></div>\n<p>a. <code>Str.fromUtf16</code> will implement strict utf-16 (ie not wtf-16) and fail with an error about an unpaired surrogate<br>\nb. <code>Str.fromUtf16</code> will implement wtf-16, but <code>Str.fromUtf8</code> will implement strict utf-8 (ie not wtf-8), and return an error about encoding a surrogate pair<br>\nc. <code>Str.fromUtf16</code> implements wtf-16, and <code>Str.fromUtf8</code> implements (possibly a subset of) wtf-8, both accepting unpaired surrogate pair codepoints</p>",
        "id": 492391619,
        "sender_full_name": "shua",
        "timestamp": 1736285821
    },
    {
        "content": "<p>the agreement before (to make <code>from_utf16</code> actually be <code>from_wtf16</code> but leave <code>from_utf8</code> as-is) would imply \"b\" which leads to <code>Str.fromUtf8</code> and <code>Str.toUtf8</code> not being able to roundtrip</p>",
        "id": 492391787,
        "sender_full_name": "shua",
        "timestamp": 1736285884
    },
    {
        "content": "<p>we could make <code>Str.toUtf8</code> return a <code>Result Str _</code>. It seems unfortunate but if you allow <code>Str</code> to contain surrogate pair codepoints, then it cannot be encoded to standards-compliant utf-8/16/32 afaict.</p>",
        "id": 492394368,
        "sender_full_name": "shua",
        "timestamp": 1736286932
    },
    {
        "content": "<p>I'm leaning towards \"c\". I have never cared about whether my unicode encoding/decoding libraries checked for unpaired surrogate codepoints. I would mentally file it in the same category as unpaired combining characters in the input string.</p>",
        "id": 492394636,
        "sender_full_name": "shua",
        "timestamp": 1736287041
    },
    {
        "content": "<p>but maybe someone else has stronger opinions?</p>",
        "id": 492394693,
        "sender_full_name": "shua",
        "timestamp": 1736287070
    },
    {
        "content": "<p>I think the bar should be super high for <code>Str</code> to be encoded as anything other than unmodified standard utf-8, because a ton of hosts will naively convert utf8 strings to roc <code>Str</code>s</p>",
        "id": 492396019,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1736287574
    },
    {
        "content": "<p>and if we have a slightly different representation, it sounds like a major UB footgun, not to mention a potential performance problem where we have to check every utf8 string the host wants to send in, to make sure it doesn't contain any edge cases</p>",
        "id": 492396152,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1736287647
    },
    {
        "content": "<p>I guess going from valid utf-8 to roc <code>Str</code>s should remain the same. wtf-8 is a superset of utf-8 which allows encoding more codepoints than utf-8.</p>",
        "id": 492396189,
        "sender_full_name": "shua",
        "timestamp": 1736287668
    },
    {
        "content": "<p>I think we should consider our strings to be strictly utf-8 and not wtf-8</p>",
        "id": 492396373,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736287746
    },
    {
        "content": "<p>When converting wtf-16 to utf-8, I assume we need to cleanup the surrogate pairs to make it strict utf-8</p>",
        "id": 492396550,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736287819
    },
    {
        "content": "<p>So we parse wtf-16, but canonicalize to cleanly convert into uft-8. If we can't canonicalize, we fail.</p>",
        "id": 492396701,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736287904
    },
    {
        "content": "<p>Yeah, specifically _unpaired_ surrogate codepoints are an issue. We could replace them with unicode replacement character '�' or we could remove them.</p>",
        "id": 492396869,
        "sender_full_name": "shua",
        "timestamp": 1736287964
    },
    {
        "content": "<p>I think the motivating reason to accept wtf-16 is windows paths which can contain unpaired surrogate codepoints. If we replace or remove things in a path string, will windows still recognize it?</p>",
        "id": 492397118,
        "sender_full_name": "shua",
        "timestamp": 1736288083
    },
    {
        "content": "<p>I thought the point of wtf-16 is that it correctly knows how to convert unpaired surrogates into the correct Unicode code point.</p>",
        "id": 492397217,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736288142
    },
    {
        "content": "<p>Cause an unpaired surrogates means that it is actually the old ucs-2 format</p>",
        "id": 492397279,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736288164
    },
    {
        "content": "<p><del>ah, no, not as far as I understand.</del> wtf-16 is \"potentially ill-formed utf-16\".</p>\n<p>I think at least in the document, \"ucs-2\" refers to a unicode encoding which was defined _before_ unicode codepoints exceeded 0xFFFF so everything fit in 16bits and surrogate pairs were not defined nor necessary. ucs-2 and utf-16 differ from codepoints 0xD800 to 0x110000, as ucs-2 can't encode anything higher than 0xFFFF and utf-16 has those ill-formed constraints around 0xD800 to 0xDFFF.</p>\n<blockquote>\n<p>WTF-16 is sometimes used as a shorter name for <a href=\"https://simonsapin.github.io/wtf-8/#potentially-ill-formed-utf-16\">potentially ill-formed UTF-16</a>, especially in the context of systems were originally designed for <a href=\"https://simonsapin.github.io/wtf-8/#ucs-2\">UCS-2</a> and later upgraded to <a href=\"https://simonsapin.github.io/wtf-8/#utf-16\">UTF-16</a> but never enforced <a href=\"https://simonsapin.github.io/wtf-8/#well-formed\">well-formedness</a>, either by neglect or because of backward-compatibility constraints.</p>\n</blockquote>",
        "id": 492398456,
        "sender_full_name": "shua",
        "timestamp": 1736288770
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/383402-API-design/topic/Lossy.20unicode.20conversion.20builtins/near/492397217\">said</a>:</p>\n<blockquote>\n<p>I thought the point of wtf-16 is that it correctly knows how to convert unpaired surrogates into the correct Unicode code point.</p>\n</blockquote>\n<p>yes, but encoding those codepoints as utf-8 is <a href=\"https://datatracker.ietf.org/doc/html/rfc3629#section-3\">disallowed by the official standard</a></p>\n<blockquote>\n<p>The definition of UTF-8 prohibits encoding character numbers between U+D800 and U+DFFF, which are reserved for use with the UTF-16 encoding form (as surrogate pairs) and do not directly represent characters.</p>\n</blockquote>\n<p>Thus, the solution is to use a not-as-strict encoding which is the same as utf-8, except it allows encoding those codepoints. This not-as-strict encoding is wtf-8</p>",
        "id": 492400900,
        "sender_full_name": "shua",
        "timestamp": 1736289825
    },
    {
        "content": "<p>Hmm. I guess I don't fully understand wtf-16. Anyway, I would guess we want to keep strings as fully valid utf-8. So when converting from wtf-16, we would have one form of the function that uses replacement characters as necessary and another that just fails.</p>",
        "id": 492402903,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736290727
    },
    {
        "content": "<p>Okay, I think that's what I'm doing currently. <code>fromUtf16</code> and <code>fromUtf8</code> will fail if the input is not utf-16 or utf-8 respectively, while <code>fromUtf16Lossy</code> and <code>fromUtf8Lossy</code> accept a superset of utf-16 and utf-8, which replaces ill-formed sequences which cannot be encoded or codepoints which cannot be encoded as utf-8 (ie surrogates) to the unicode replacement character.</p>\n<p>This does mean that roc will not be able to work with host paths as <code>Str</code> but would rather have to work with <code>List U8</code> and fallibly convert them to <code>Str</code>.</p>",
        "id": 492596982,
        "sender_full_name": "shua",
        "timestamp": 1736377025
    },
    {
        "content": "<p>Yeah, I think a host path has to be a <code>List U8</code> or a <code>List U16</code>, I guess.</p>",
        "id": 492597285,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736377166
    },
    {
        "content": "<p>oh the joys of standards compliance</p>",
        "id": 492597486,
        "sender_full_name": "shua",
        "timestamp": 1736377254
    },
    {
        "content": "<p>host paths aren't valid anything <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 492598225,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1736377678
    },
    {
        "content": "<p>UNIX allows anything in paths other than <code>0</code> bytes, and ASCII forward slashes mean directory separators</p>",
        "id": 492598304,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1736377705
    },
    {
        "content": "<p>the spec doesn't even have anything to do with Unicode <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 492598344,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1736377731
    },
    {
        "content": "<p>Windows is similar except it's like they also ban bytes under 32 or something like that</p>",
        "id": 492598377,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1736377745
    },
    {
        "content": "<p><em>they're a valid nuisance is what they are</em> <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 492598785,
        "sender_full_name": "shua",
        "timestamp": 1736377991
    },
    {
        "content": "<p>I think WASI filesystem spec uses <code>string</code> as path values, which must be valid unicode scalar values, and they just accept that some (pathologically-named) files will be unreachable via WASI. So if WASI is considered as a host, that's at least one.</p>\n<p>edit: adding link to <a href=\"https://wa.dev/wasi:filesystem\">wasi:filesystem spec</a></p>",
        "id": 492598800,
        "sender_full_name": "shua",
        "timestamp": 1736377999
    },
    {
        "content": "<p>interesting - we might want to add WASI to <a href=\"https://github.com/roc-lang/path/blob/14b5fa518d13abb5012bcaa6809f7259e912eaeb/package/Path.roc#L24\">roc-lang/path</a></p>",
        "id": 492599040,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1736378136
    },
    {
        "content": "<p>just in case someone's following this thread: <a href=\"https://github.com/roc-lang/roc/pull/7514\">https://github.com/roc-lang/roc/pull/7514</a> has been posted and approved, but is currently blocked on some interesting CI failures <a class=\"stream-topic\" data-stream-id=\"463736\" href=\"/#narrow/channel/463736-bugs/topic/mono.20mismatch.20between.20mac.20aarch64.20and.20rest.20of.20targets\">#bugs &gt; mono mismatch between mac aarch64 and rest of targets</a></p>",
        "id": 494236953,
        "sender_full_name": "shua",
        "timestamp": 1737063338
    }
]