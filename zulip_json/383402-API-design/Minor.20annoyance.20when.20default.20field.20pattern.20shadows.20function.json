[
    {
        "content": "<p>I ran into a weird edge of the optional field design and wondered if we're aware of it. It's probably unimportant, but I thought I'd share.</p>\n<p>The context here is that I'm working on a module that exposes an API for construction an HTML element. There's some names that are used both by HTML tag names and attributes. Because of this, I was trying to write something like this simplified example:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">title</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">id</span><span class=\"w\"> </span><span class=\"err\">?</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">class</span><span class=\"w\"> </span><span class=\"err\">?</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">title</span><span class=\"w\"> </span><span class=\"err\">?</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"nv\">children</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">node</span><span class=\"w\"> </span><span class=\"s\">\"title\"</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">class</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">title</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nv\">children</span>\n</code></pre></div>\n<p>Roc doesn't accept this because the <code>title</code> name in the pattern shadows the <code>title</code> of the top-level function. There's no great options for improving this though. Removing the pattern matching means you cannot make use of default field names, and renaming either attribute or tag name because of implementation requirements would be a shame.</p>\n<p>I can workaround it by using two modules, so this is definitely a papercut and nothing blocking, but papercuts are not delightful so I thought I'd share anyway :).</p>\n<div class=\"codehilite\"><pre><span></span><code>\n</code></pre></div>",
        "id": 480118092,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1730495093
    },
    {
        "content": "<p>hm yeah <code>as</code> would fix this</p>",
        "id": 480123802,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1730498612
    },
    {
        "content": "<p>something like</p>\n<div class=\"codehilite\" data-code-language=\"OCaml\"><pre><span></span><code><span class=\"n\">title</span> <span class=\"o\">?</span> <span class=\"s2\">\"\"</span> <span class=\"k\">as</span> <span class=\"n\">t</span>\n</code></pre></div>",
        "id": 480123893,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1730498649
    },
    {
        "content": "<p>Yeah. I briefly tried this thinking it was already in the language, but it's just for <code>..</code> patterns, right?</p>",
        "id": 480124140,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1730498826
    },
    {
        "content": "<p>It used to be for more things. It existed before <code>..</code>. but I think it is pretty limited currently</p>",
        "id": 480124845,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1730499245
    },
    {
        "content": "<p>One more thing I ran into, that I think is less edge-case-y than my earlier example: I don't think there's a way to make nested default fields work. If there is I couldn't get it to work.</p>\n<p>Suppose you have the following type:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">attributes</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">aria</span><span class=\"w\"> </span><span class=\"err\">?</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">disabled</span><span class=\"w\"> </span><span class=\"err\">?</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">U8</span>\n</code></pre></div>\n<p>You can define that just fine. You can also construct values to pass to this function. But I've not found a way to get my hands on the <code>disabled</code> value in the argument, if it exists.</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">attributes</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">aria</span><span class=\"w\"> </span><span class=\"err\">?</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">disabled</span><span class=\"w\"> </span><span class=\"err\">?</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nf\">...</span>\n</code></pre></div>\n<p>This is not allowed because the default value is not a pattern and so can't contain <code>? ..</code> defaults.</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">attributes</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">aria</span><span class=\"w\"> </span><span class=\"err\">?</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nf\">...</span>\n<span class=\"nv\">attributes</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">aria</span><span class=\"w\"> </span><span class=\"err\">?</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">disabled</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nf\">...</span>\n</code></pre></div>\n<p>Both are not allowed, Roc will complain about a type mismatch for the inner record between what's requested (<code>{ disabled ? Str }</code>) and what's provided (<code>{}</code> or <code>{ disabled : Str }</code>).</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">attributes</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">attrs</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">disabled</span><span class=\"w\"> </span><span class=\"err\">?</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">attrs</span><span class=\"nf\">.</span><span class=\"nv\">aria</span>\n<span class=\"w\">    </span><span class=\"nf\">...</span>\n</code></pre></div>\n<p>Not allowed because we cannot use <code>attrs.aria</code> given <code>.aria</code> is an optional field.</p>",
        "id": 480223593,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1730557519
    }
]