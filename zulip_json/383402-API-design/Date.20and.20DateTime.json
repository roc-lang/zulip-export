[
    {
        "content": "<p>On the topic of time (<a class=\"stream-topic\" data-stream-id=\"383402\" href=\"/#narrow/channel/383402-API-design/topic/Datatype.20for.20representing.20epochs\">#API design &gt; Datatype for representing epochs</a>), in addition to Instants/Timestamps, we should have types for dates (yyyy-MM-dd) and date times (yyyy-MM-dd hh:mm:ss).</p>\n<p>I propose these be named <code>Date</code> and <code>DateTime</code>.</p>\n<p>Other possibilities for naming them are <code>PlainDate</code> and <code>PlainDateTime</code>,  or <code>LocalDate</code> and <code>LocalDateTime</code> to communicate that they don't store timezone information, but I don't think these names are helpful enough to justify the longer and less natural names.</p>",
        "id": 491697068,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1735873200
    },
    {
        "content": "<p>Is this for the standard library or for an external library?</p>",
        "id": 491697186,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735873254
    },
    {
        "content": "<p>I think they should be in the standard library given how frequently they are used. That way there can be standard conversion functions between all of the different date types.</p>",
        "id": 491697321,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1735873360
    },
    {
        "content": "<p>I agree that having them in std is a noble goal, but this is one of the first modules that would require us to really consider the philosophy of our standard library</p>",
        "id": 491697449,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735873469
    },
    {
        "content": "<p>That is, should our standard library have stuff that stays in Roc forever?</p>",
        "id": 491697472,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735873496
    },
    {
        "content": "<p>The reason why Rust is reticent to put Regex and datetime and all into <code>std</code> is because the underlying implementations for those and which library is even popular seems to change a good bit, even now over a decade after its first release as a language</p>",
        "id": 491697535,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735873555
    },
    {
        "content": "<p>Though there are plenty of languages like Python that have \"all the basics\" in their standard library</p>",
        "id": 491697598,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735873584
    },
    {
        "content": "<p>I think the safer start is to make a <code>roc-lang/datetime</code> library and develop everything there</p>",
        "id": 491697619,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735873607
    },
    {
        "content": "<p>Once that seems stable, we can consider permanently adding it to Roc</p>",
        "id": 491697646,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735873625
    },
    {
        "content": "<p>We already have a few different impls in the wild</p>\n<ol>\n<li><a href=\"https://github.com/hasnep/roc-datetimes\">https://github.com/hasnep/roc-datetimes</a></li>\n<li><a href=\"https://github.com/imclerran/Roc-IsoDate\">https://github.com/imclerran/Roc-IsoDate</a></li>\n<li>the DateTime module in basic-webserver</li>\n</ol>",
        "id": 491698050,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735873940
    },
    {
        "content": "<p>Elixir calls this <code>NaiveDateTime</code>, and their <code>DateTime</code> type has time zone info. <a href=\"https://hexdocs.pm/elixir/1.18.1/NaiveDateTime.html\">https://hexdocs.pm/elixir/1.18.1/NaiveDateTime.html</a><br>\nI don't like the name \"NaiveDateTime\" but I do like that it's harder to use than the date time with time zone, which creates a pit of success. You only use NaiveDateTime if you really know that you're working with a fictional abstract concept of time, otherwise you use the one with time zones that represents the real world.</p>",
        "id": 491698467,
        "sender_full_name": "Sky Rose",
        "timestamp": 1735874319
    },
    {
        "content": "<p>Good point. We should probably make a combined time library, since we'll want a single, common type for datetime, date, and times</p>",
        "id": 491698473,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735874325
    },
    {
        "content": "<blockquote>\n<p>I think the safer start is to make a <code>roc-lang/datetime</code> library and develop everything there<br>\nOnce that seems stable, we can consider permanently adding it to Roc</p>\n</blockquote>\n<p>Yeah that sounds reasonable. The design space for Date APIs is quite large</p>",
        "id": 491698616,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1735874454
    },
    {
        "content": "<p>time zone data also changes a lot, even if the API is stable (similar to Unicode). How to deal with time zone data is gonna be a problem for this library to solve. Even if we want datetimes to eventually be a builtin, the time zone data probably never could be moved to Roc.</p>",
        "id": 491698887,
        "sender_full_name": "Sky Rose",
        "timestamp": 1735874691
    },
    {
        "content": "<p>yeah I think the complexity level of dates, especially with time zones involved, is just way higher than <code>Instant</code> and <code>Duration</code>, which are both fairly thin wrappers around integers <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 491700233,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735876059
    },
    {
        "content": "<p>I was working on bringing my blog into a static-site platform I'm working on last week. I've blog posts in a directory prefixed with the date, as in <code>yyyy-mm-dd-name-of-the-post.md</code>, and needed to:</p>\n<ul>\n<li>Parse out the date from the path</li>\n<li>Sort my posts by date</li>\n<li>Render the dates using a custom render function</li>\n</ul>\n<p>I was loth to pull in a dependency for something so small, so I wrote some hacky <code>Str.splitOn ...</code> code to implement that.</p>\n<p>I realized that this particular time-related logic had no dependency on locales or time zone databases. I wondered how many uses are like that. There might be a design where builtins include a <code>Time</code> type that could replace my hacky code, but no functions that require a timezone database, such as conversions between <code>Time</code> and <code>Instant</code>. At that point there might no longer be a need for an external <code>time</code> package, but we would instead have a <code>locale</code> package. Either way, it makes sense to me to test out these ideas in a package first.</p>\n<p>I guess the <code>Time</code> type I'm describing here is the same as <code>NaiveDateTime</code> that sky mentioned Elixir has, but I don't think that's necessarily a bad thing. In the API documentation for <code>NaiveDateTime</code> it shows that the type implements all sorts of functions for adding intervals to a <code>NaiveDateTime</code> or getting the duration between two <code>NaiveDateTime</code>s. I'd argue it's those functions that are naive, not the type itself. We could omit those kinds of calculation functions for the Roc <code>Time</code> type, and require application authors to convert <code>Time</code> to <code>Instant</code> (using a timezone) before they can do math with it.</p>",
        "id": 491726944,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1735895272
    },
    {
        "content": "<p>That does sound useful to have NaiveDateTime available for stuff like that, but is it possible to make that easy without disincentivizing people from using the real DateTime when they really do need that correctness?</p>",
        "id": 491764479,
        "sender_full_name": "Sky Rose",
        "timestamp": 1735913995
    },
    {
        "content": "<p>I think so! If the builtin <code>Time</code>/<code>NaiveDateTime</code> type does not provide any operations that would return ambiguous results that would make it a quite a limited API. For any function that needs a timezone for an unambiguous result you'd need to make us types/functions that track timezones provided by external packages.</p>",
        "id": 491765887,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1735914743
    },
    {
        "content": "<p>that's interesting - one way to split things up could be to have a <code>Date</code> module that literally just stores month/day/year and offers an API for translating to/from strings with various formats</p>",
        "id": 491771012,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735917130
    },
    {
        "content": "<p>or like <code>Date</code> and <code>DateFormat</code> maybe</p>",
        "id": 491771033,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735917139
    },
    {
        "content": "<p>and it is just completely not concerned with time zones even a little bit</p>",
        "id": 491771057,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735917151
    },
    {
        "content": "<p>and as soon as you want to do anything with time zones, UTC, etc., including converting a <code>Date</code> to an <code>Instant</code>, there's a third-party package for that</p>",
        "id": 491771191,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735917215
    },
    {
        "content": "<p>What about supporting different calendars (Julian vs Gregorian, Hebrew calendar, Japanese years)? What about places that skipped a date (switching from Julian to Gregorian calendars skipped 11 days, and sometimes countries change which side of the international date line they're on). The builtins probably shouldn't try to do that stuff, so is it okay if the main date library can't do that?</p>",
        "id": 491771723,
        "sender_full_name": "Sky Rose",
        "timestamp": 1735917473
    },
    {
        "content": "<p>Makes me wish there was a concept of \"builtins that aren't actually builtin\", i.e., a set of abstract packages that declare (opaque/nominal) types and functions that work on them - but the language runtime does not implement them at all.  All platforms would be required to implement them (hopefully through shared crates / zig packages).  maybe some way for a platform to opt out?  Not sure...</p>",
        "id": 491774009,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735918564
    },
    {
        "content": "<p>oh I don't think any of these would use anything from the platform</p>",
        "id": 491779474,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735921308
    },
    {
        "content": "<p>the only relevant effects for any of these are \"what is the time zone set to on my OS right now?\"  and \"what is the current system time?\"</p>",
        "id": 491779555,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735921337
    },
    {
        "content": "<p>those 2 functions are platform-specific, and then the other 99.9% of the APIs (wherever they live) are just data structures and pure functions</p>",
        "id": 491779578,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735921360
    },
    {
        "content": "<p>and I think it's totally fine for those 2 functions to just live in a different module from the rest of the API</p>",
        "id": 491779613,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735921383
    },
    {
        "content": "<p>like with time I'm thinking:</p>\n<ul>\n<li><code>Duration</code> and <code>Instant</code> live in their own modules and are all pure functions and data structures (likely should be builtins)</li>\n<li>the platform exposes a separate <code>Clock</code> module with <code>Clock.now!()</code> that returns an <code>Instant</code></li>\n</ul>",
        "id": 491779692,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735921425
    },
    {
        "content": "<p>similarly, I think we can have:</p>\n<ul>\n<li><code>Request</code> and <code>Response</code> modules that are just data structures for HTTP requests and responses, totally platform-agnostic (could be builtins I suppose if we really wanted to)</li>\n<li>platform exposes a <code>Http</code> module with <code>Http.get!()</code>, <code>Http.request!()</code>, etc. that uses the platform-agnostic <code>Request</code> and <code>Response</code> modules</li>\n</ul>",
        "id": 491779908,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735921520
    },
    {
        "content": "<p>I do think it's a good idea to keep things that depend on third-party versioning out of builtins, so those can be released independently of language releases</p>",
        "id": 491780272,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735921697
    },
    {
        "content": "<p>for example, new versions of Unicode and HTTP get released periodically</p>",
        "id": 491780321,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735921731
    },
    {
        "content": "<p>so those are probably better off as packages</p>",
        "id": 491780327,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735921736
    },
    {
        "content": "<p>but there aren't new versions of UTF-8, ASCII, or units of time (milliseconds etc.) getting released periodically, so those all seem safe to include in builtins</p>",
        "id": 491780384,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735921762
    },
    {
        "content": "<p>What’s the motivation for <a href=\"http://Clock.now\">Clock.now</a>! instead of <a href=\"http://Instant.now\">Instant.now</a>! ?</p>",
        "id": 491789502,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1735926364
    },
    {
        "content": "<p>the <code>Instant</code> module should be in a platform-agnostic package (or a builtin module) that doesn't know how to do effects</p>",
        "id": 491789652,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735926454
    },
    {
        "content": "<p>I think this is a theme of how we can make nice platform-agnostic APIs without module params</p>",
        "id": 491789761,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735926499
    },
    {
        "content": "<p>e.g. <code>Path</code>, <code>Instant</code>, <code>Duration</code>, <code>Request</code>, and <code>Response</code> are all just data structures and pure functions, and none of them know how to do any effects at all, and are all completely platform-agnostic</p>",
        "id": 491789840,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735926546
    },
    {
        "content": "<p>and then <code>File</code>, <code>Clock</code>, and <code>Http</code> are platform-specific and do the actual effects, but work with those platform-agnostic data structure modules</p>",
        "id": 491789879,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735926568
    },
    {
        "content": "<p>Oh oops, I thought you had said Clock would be a built in module not platform supplied</p>",
        "id": 491789905,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1735926586
    },
    {
        "content": "<p>and then you have things which need actual effects, like <code>Bugsnag</code>, <code>Logger</code>, and <code>Pg</code>, which depend directly the platform-agnostic data structure modules, and then have initialization functions which say \"pass me me an effectful function that does the effects I need, and I'll store it and use it whenever I need to do an effect\" - which is still platform-agnostic, and accomplishes the sandboxing, capabilities, etc.</p>",
        "id": 491790043,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735926649
    },
    {
        "content": "<p>I really like this separation! Gleam does something similar where all HTTP types are in the gleam/http package. And then both client and server packages can just use that one package, while third party packages can target any of the clients/servers. This seems to have the same benefits! Love it</p>",
        "id": 491791096,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1735927189
    },
    {
        "content": "<p>I like the idea of having <code>Date</code> and <code>DateTime</code> types in the builtins so that packages can agree, and then leaving the gritty parts to external packages. I think that gets a good portion of the benefit of having dates and datetimes in the builtins without the downsides</p>",
        "id": 492223740,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1736214402
    },
    {
        "content": "<blockquote>\n<p>I'd argue it's those functions that are naive, not the type itself.</p>\n</blockquote>\n<p>Completely agree</p>",
        "id": 492225158,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1736215141
    }
]