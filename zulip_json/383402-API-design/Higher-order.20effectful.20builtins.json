[
    {
        "content": "<p>We seemed to have reached the conclusion that even with loops, we still want to have effectful counterparts of have functions like <code>List.walk</code>. I was going to include that in the Purity Inference PR, but I think we should do that separately once we have come up with the right API.</p>\n<p>Here's a starting point for the discussion.</p>\n<h2>walk</h2>\n<p>An effectful <code>List.walk!</code> function seem essential:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">walk</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"nv\">elem</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">elem</span><span class=\"w\"> </span><span class=\"nf\">=&gt;</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">=&gt;</span><span class=\"w\"> </span><span class=\"nv\">state</span>\n</code></pre></div>\n<p>...and if you're running effects, most times you probably want to stop when one fails, so we should probably also have:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">walkTry</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"nv\">elem</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">elem</span><span class=\"w\"> </span><span class=\"nf\">=&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"nv\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">=&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"nv\">err</span>\n</code></pre></div>\n<p>You can also use this to stop early even if something didn't go wrong which is useful.</p>\n<p>What about <code>walkBackwards</code>, <code>walkWithIndex</code>, <code>walkUntil</code>, <code>walkWithIndexUntl</code>, <code>walkFrom</code>, <code>walkFromUntil</code>? </p>\n<h2>forEach</h2>\n<p>It's probably going to be common to have to run an effect for each element of a <code>List</code>, so we could have:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">forEach</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{})</span><span class=\"w\"> </span><span class=\"nf\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n</code></pre></div>\n<p>In practice, a lot of effectful functions in real platforms will return <code>Result</code> which you won't want to discard, so we probably also need:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">forEachTry</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">=&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nv\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">=&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nv\">err</span>\n</code></pre></div>",
        "id": 479688636,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1730296667
    },
    {
        "content": "<h2>map</h2>\n<p>Should we have <code>List.map!</code>? At first, I thought I wouldn't perform effects while mapping a <code>List</code>, but actually some effects would fit:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">contents</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"nv\">filesToRead</span><span class=\"w\"> </span><span class=\"kt\">File</span><span class=\"nf\">.</span><span class=\"nv\">read</span><span class=\"err\">!</span>\n</code></pre></div>\n<p>but of course, <code>File.read!</code> would probably return a <code>Result</code>, so what you really want is <code>List.mapTry!</code> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 479690808,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1730297300
    },
    {
        "content": "<p>Maybe we just need the <code>_Try!</code> versions to start?</p>",
        "id": 479691268,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1730297428
    },
    {
        "content": "<p>If we did that, I would probably still keep the <code>Try</code> suffix in their names for consistency</p>",
        "id": 479691536,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1730297515
    },
    {
        "content": "<p>I honestly think we should start with only <code>forEach</code> and leave everything else to be standard recursive functions in userland until there is clear need and use cases</p>",
        "id": 479697274,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1730299160
    },
    {
        "content": "<p>Especially with the for loop proposal on the horizon which I think would remove most of the need for these functions</p>",
        "id": 479697407,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1730299201
    },
    {
        "content": "<p>Do you mean <code>forEachTry!</code>?</p>",
        "id": 479702745,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1730300611
    },
    {
        "content": "<p>I donâ€™t expect <code>forEach!</code> to be very useful in platforms like <code>basic-cli</code>, but maybe it would be for things like <code>roc-ray</code></p>",
        "id": 479703035,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1730300690
    },
    {
        "content": "<p>I personally have only had uses for <code>forEach!</code> so far</p>",
        "id": 479709997,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1730302471
    },
    {
        "content": "<p>Oh wait....I might have had errors and results.....so maybe I need the try version</p>",
        "id": 479710354,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1730302568
    },
    {
        "content": "<p>But yeah, would add both forEach variants as a starter.</p>",
        "id": 479710588,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1730302633
    },
    {
        "content": "<p>I'd like to propose we add an <code>Result.onErr!</code> so we don't need to do things like this... unless I'm missing something about how this should work in a purity inference world.</p>\n<div class=\"codehilite\"><pre><span></span><code>main! = \\{} -&gt;\n    when run! {} is\n        Ok {} -&gt; Ok {}\n        Err err -&gt; handleErr! err\n</code></pre></div>",
        "id": 481429361,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731129082
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>main! = \\{} -&gt;\n    run! {}\n    |&gt; Result.onErr! handleErr!\n</code></pre></div>",
        "id": 481429385,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731129120
    }
]