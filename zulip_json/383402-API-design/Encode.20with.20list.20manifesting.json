[
    {
        "content": "<p>I am looking at the encode and decode api rn. One thing I quite dislike is that record and tuple encoding requires manifesting a list. On top of that, the record encoder forces generating a string name, but many encoders (especially for binary formats) will never use the field name. Given the api is getting update, I was thinking it would be good to iron this out as well.</p>\n<p>Specifically these 3 functions:</p>\n<div class=\"codehilite\"><pre><span></span><code>    record : List { key : Str, value : Encoder state } -&gt; Encoder state where state implements EncoderFormatting\n    tuple : List (Encoder state fmt) -&gt; Encoder state where state implements EncoderFormatting\n    tag : Str, List (Encoder state fmt) -&gt; Encoder state where state implements EncoderFormatting\n</code></pre></div>\n<p>Can we somehow do this in a polling format where instead of manefesting the list, we load one element at a time. With that we can also separate loading the record field name from loading the record field encoder.</p>\n<p>Any thoughts?</p>",
        "id": 449749120,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720402901
    },
    {
        "content": "<p>Oh, looks like serde has answers again:</p>\n<p>add a separate method for encoding fields from encoding the wrapper type.<br>\nThen build up the record like so:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">rgb</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">serializer</span><span class=\"p\">.</span><span class=\"n\">serialize_struct</span><span class=\"p\">(</span><span class=\"s\">\"Rgb\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"n\">rgb</span><span class=\"p\">.</span><span class=\"n\">serialize_field</span><span class=\"p\">(</span><span class=\"s\">\"r\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">r</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"n\">rgb</span><span class=\"p\">.</span><span class=\"n\">serialize_field</span><span class=\"p\">(</span><span class=\"s\">\"g\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">g</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"n\">rgb</span><span class=\"p\">.</span><span class=\"n\">serialize_field</span><span class=\"p\">(</span><span class=\"s\">\"b\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"n\">rgb</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">()</span>\n</code></pre></div>\n<p>Not 100% sure how all the types work out and how this maps, but feels quite doable.</p>",
        "id": 449750833,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720403962
    },
    {
        "content": "<p>Maybe for roc, this mean that <code>Encode.record</code> would take a lambda to add fields:</p>\n<p>I noticed that we don't actually name our records unlike serde. Not sure if that is something we want to add or not. Given are types aren't nominal, it feels unimportant. Though might matter for opaque types or certain serialization formats?</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">encodeRgb</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">{</span><span class=\"nv\">r</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">g</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">size</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span>\n<span class=\"w\">    </span><span class=\"kt\">Encode</span><span class=\"nf\">.</span><span class=\"nv\">record</span><span class=\"w\"> </span><span class=\"s\">\"name?\"</span><span class=\"w\"> </span><span class=\"nv\">size</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">addField</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"nv\">state</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">addField</span><span class=\"w\"> </span><span class=\"s\">\"r\"</span><span class=\"w\"> </span><span class=\"nv\">r</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">addField</span><span class=\"w\"> </span><span class=\"s\">\"g\"</span><span class=\"w\"> </span><span class=\"nv\">g</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">addField</span><span class=\"w\"> </span><span class=\"s\">\"b\"</span><span class=\"w\"> </span><span class=\"nv\">b</span>\n</code></pre></div>",
        "id": 449751408,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720404199
    },
    {
        "content": "<p>hmm, not user that actually would typecheck. Cause each field could have a different type. So each field might need to monomorphize <code>addField</code> differently.</p>",
        "id": 449751623,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720404266
    },
    {
        "content": "<p>oh wait, this should work:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">encodeRgb</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">{</span><span class=\"nv\">r</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">g</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">size</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span>\n<span class=\"w\">    </span><span class=\"kt\">Encode</span><span class=\"nf\">.</span><span class=\"nv\">record</span><span class=\"w\"> </span><span class=\"s\">\"name?\"</span><span class=\"w\"> </span><span class=\"nv\">size</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"nv\">state</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Encode</span><span class=\"nf\">.</span><span class=\"nv\">recordField</span><span class=\"w\"> </span><span class=\"s\">\"r\"</span><span class=\"w\"> </span><span class=\"nv\">r</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Encode</span><span class=\"nf\">.</span><span class=\"nv\">recordField</span><span class=\"w\"> </span><span class=\"s\">\"g\"</span><span class=\"w\"> </span><span class=\"nv\">g</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Encode</span><span class=\"nf\">.</span><span class=\"nv\">recordField</span><span class=\"w\"> </span><span class=\"s\">\"b\"</span><span class=\"w\"> </span><span class=\"nv\">b</span>\n</code></pre></div>\n<p>Cause <code>Encode.recordField</code> can now monomorphize for each field uniquely.</p>",
        "id": 449751773,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720404336
    },
    {
        "content": "<p>That said, this api still feels off a bit. Maybe it is good though.</p>",
        "id": 449753123,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720404976
    }
]