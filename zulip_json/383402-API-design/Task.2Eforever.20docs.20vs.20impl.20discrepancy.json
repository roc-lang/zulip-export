[
    {
        "content": "<p>The docs for <code>Task.forever</code> say that it's a function that never returns, but it seems like it <em>does</em> return if the provided task returns an error. I think either the implementation should be changed to <em>actually</em> run forever (a.k.a. ignore errors), or the docs should change to say \"It will run forever unless it returns an error, at which point it quits looping\" or something to that effect. Here's the source from <code>basic-cli</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"err\">##</span><span class=\"w\"> </span><span class=\"kt\">Run</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">task</span><span class=\"w\"> </span><span class=\"nv\">that</span><span class=\"w\"> </span><span class=\"nv\">never</span><span class=\"w\"> </span><span class=\"nv\">ends</span><span class=\"nf\">.</span><span class=\"w\"> </span><span class=\"kt\">Note</span><span class=\"w\"> </span><span class=\"nv\">that</span><span class=\"w\"> </span><span class=\"nv\">this</span><span class=\"w\"> </span><span class=\"nv\">task</span><span class=\"w\"> </span><span class=\"nv\">does</span><span class=\"w\"> </span><span class=\"nv\">not</span><span class=\"w\"> </span><span class=\"nv\">return</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"nf\">.</span>\n<span class=\"nv\">forever</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">err</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"nf\">*</span><span class=\"w\"> </span><span class=\"nv\">err</span>\n<span class=\"nv\">forever</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">task</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">looper</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"nv\">task</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">InternalTask</span><span class=\"nf\">.</span><span class=\"nv\">toEffect</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Effect</span><span class=\"nf\">.</span><span class=\"nv\">map</span>\n<span class=\"w\">            </span><span class=\"nf\">\\</span><span class=\"nv\">res</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">res</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">                    </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Step</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"w\">                    </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">e</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Done</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">e</span><span class=\"p\">)</span>\n\n<span class=\"w\">    </span><span class=\"kt\">Effect</span><span class=\"nf\">.</span><span class=\"nv\">loop</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nv\">looper</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">InternalTask</span><span class=\"nf\">.</span><span class=\"nv\">fromEffect</span>\n</code></pre></div>",
        "id": 446521679,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719207657
    },
    {
        "content": "<p>I was first thinking that it would be best to keep the implementation the same, since people likely already use the function, but then I think the name is actually misleading (for the above reasons). If we keep a function with the same intended behavior, I think we should rename it to something more descriptive. Some suggestions:</p>\n<ul>\n<li><code>Task.repeatUntilFail</code></li>\n<li><code>Task.loopUntilFail</code></li>\n<li><code>Task.goUntilErr</code></li>\n</ul>\n<p>Anything better?</p>",
        "id": 446522013,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719207898
    },
    {
        "content": "<p>In the meantime,  a <code>Task.forever</code> that <em>actually</em> runs forever would be nice, but changing the signature without changing the name would mean a lot of code might break. It seems like we're still at the \"breaking stuff is fine\" stage, but I'm not sure if that would be a good idea.</p>",
        "id": 446522268,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719208038
    },
    {
        "content": "<p>All in all, I vote for two changes to the <code>Task</code> interface:<br>\n1) Create a new <code>Task.repeatUntilFail</code> function with the signature <code>Task * err -&gt; Task * err</code> that loops forever the same Task until it fails, at which point it returns.<br>\n2) Change the signature of <code>Task.forever</code> to <code>Task * * -&gt; Task * *</code> and have it loop forever, ignoring errors.</p>\n<p>Feel free to share your thoughts.</p>",
        "id": 446522605,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719208252
    },
    {
        "content": "<p>I would vote for <code>Task.repeatUntilErr</code> or <code>Task.repeatUntilError</code>. Cause it is <code>Task.err</code> that it is repeating until</p>",
        "id": 446523450,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719208793
    },
    {
        "content": "<p>That said, I also think <code>forever</code> is a fine name with the doc saying, repeats forever unless an error ocurs.</p>",
        "id": 446523635,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719208854
    },
    {
        "content": "<p>Don't have much of an opinion about a <code>Task.forever</code> that truly repeats forever. Personally, I would expect to accidentally use it when still expecting errors to fail and then be really confused.</p>",
        "id": 446523744,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719208902
    },
    {
        "content": "<p>Cause my mental model of tasks separates the success case from the error case. So I kinda always expect things to fail on any sort of error.</p>",
        "id": 446523792,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719208917
    },
    {
        "content": "<p>I'm curious, what use case did you have in mind for the function that would truly loop forever, ignoring errors? Closest thing I can come up with is something like a server or game loop, but even that I'd want to be able to stop eventually to quit.</p>",
        "id": 446526067,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1719209608
    },
    {
        "content": "<p>Yeah, I agree there isn't much of a use case.</p>",
        "id": 446526147,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719209635
    },
    {
        "content": "<p>You can always just make the error variants empty and use the \"return on error\" variant</p>",
        "id": 446526279,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719209670
    },
    {
        "content": "<p>So I guess I just propose we rename and re-document Task.forever</p>",
        "id": 446526351,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719209694
    },
    {
        "content": "<p>From this discussion, I think we should keep the current name and just update the docs to be clearer about how it works in the error case. It is true that if there are no errors it never ends, so the happy path behaviour is consistent.</p>",
        "id": 446529648,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719211012
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> then I guess the question is whether a slight improvement in function name clarity (I think <code>Task.repeatUntilErr</code> is clearer than <code>Task.forever</code>) is worth breaking existing code. I think it is worth it to get it out of the way, since this function isn't probably used too much.</p>",
        "id": 446529679,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719211034
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> do you think it is more clear but not worth the breakage, or it's not much clearer?</p>",
        "id": 446529734,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719211069
    },
    {
        "content": "<p>I'm not convinced it's any clearer. </p>\n<p>I'm always happy to break things, but in this case I think the shorter name is better.</p>",
        "id": 446529814,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719211100
    },
    {
        "content": "<p>Okay, I'll keep the name the same for now</p>",
        "id": 446529845,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719211121
    }
]