[
    {
        "content": "<p>A type I've defined in Haskell in the past is this:</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>Secret a := a\n\nwrap : a -&gt; Secret a\nwrap = \\x -&gt; @Secret x\n\nunwrap : Secret a -&gt; a\nunwrap = \\@Secret x -&gt; x\n</code></pre></div>\n<p>This is made useful by adding ability implementations so that printing <code>Secret</code> (through Inspect, Encoding, or any other way) always ensures in something like <code>&lt;secret&gt;</code> rather than whatever value is contained within.</p>\n<p>The goal here is to keep sensitive information wrapped as it gets passed around an application, and only unwrapped right before the sensitive value is used somewhere. To prevent accidents like the secret ending up in logs.</p>\n<p>I was wondering if it'd be a good idea to include a type like this in the standard library. That might help create a convention of libraries producing or consuming sensitive values automatically wrapping them in this fashion. Besides the proposed crypto module I don't know if the Roc stdlib itself has much use for a <code>Secret</code> type. But if other libraries want to communicate secrets between them it could be useful, like an environment configuration parser producing Secret-wrapped values and a databse library consuming a Secret-wrapped credential.</p>",
        "id": 478548360,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1729704814
    },
    {
        "content": "<p>I think this more or less is builtin:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">app</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">pf</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">platform</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/roc-lang/basic-cli/releases/download/0.15.0/SlwdbJ-3GR7uBWQo6zlmYWNYOxnvo8r6YABXD-45UOw.tar.br\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">pf.Stdout</span>\n\n<span class=\"kt\">Secret</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">:=</span><span class=\"w\"> </span><span class=\"nv\">a</span>\n\n<span class=\"kr\">main </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"err\">@</span><span class=\"kt\">Secret</span><span class=\"w\"> </span><span class=\"s\">\"this is my secret\"</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Inspect</span><span class=\"nf\">.</span><span class=\"nv\">toStr</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span>\n</code></pre></div>\n<p>will print:</p>\n<div class=\"codehilite\"><pre><span></span><code>&lt;opaque&gt;\n</code></pre></div>",
        "id": 478552208,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729706087
    },
    {
        "content": "<p>Any opaque type will inspect to <code>&lt;opaque&gt;</code> by default</p>",
        "id": 478552265,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729706112
    },
    {
        "content": "<p>This never got added, but I also wanted to throw the type name in the printout</p>",
        "id": 478552382,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729706151
    },
    {
        "content": "<p>I would assume that we shouldn't support it in encode. I think for most use cases it is probably better to get a type error when trying to encode an opaque type then to get a string like <code>\"&lt;opaque&gt;\"</code> in the encoded output</p>",
        "id": 478552585,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729706211
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/383402-API-design/topic/.60Secret.20a.60.20type.20in.20stdlib.3F/near/478552382\">said</a>:</p>\n<blockquote>\n<p>This never got added, but I also wanted to throw the type name in the printout</p>\n</blockquote>\n<p>I actually personally prefer not even leaking the type by default <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 478552861,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1729706297
    },
    {
        "content": "<p>Hmm, I'm not really sure the tradeoffs there. It is just for debug printing. But I guess if you call an effect in a library, someone could malicious could record the type names. But I'm not really sure what that gets them.</p>",
        "id": 478553158,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729706402
    },
    {
        "content": "<p>it's just about making details that might potentially be sensitive opt-in rather than opt-out</p>",
        "id": 478553612,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1729706512
    },
    {
        "content": "<p>it means that if you don't opt into <code>Inspect</code>, you have total peace of mind that no information is being accidentally leaked beyond \"this is some opaque type\"</p>",
        "id": 478554008,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1729706608
    },
    {
        "content": "<p>ok</p>",
        "id": 478554187,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729706653
    },
    {
        "content": "<blockquote>\n<p>I was wondering if it'd be a good idea to include a type like this in the standard library.</p>\n</blockquote>\n<p>A downside of including it in the stdlib is that then users wouldn’t be able to implement any other abilities used by their applications. But having libraries that can use the same Secret type does sound convenient.</p>",
        "id": 478554778,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1729706841
    },
    {
        "content": "<blockquote>\n<p>But having libraries that can use the same Secret type does sound convenient.</p>\n</blockquote>\n<p>Just have to pass in the functionality via module params. Also, probably is better to allow unwrapping specific secrets in a library rather than allow unwrapping every single secret that using the builtin <code>Secret</code></p>",
        "id": 478562486,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729709484
    },
    {
        "content": "<p>I think it depends a bit on what we would like to protect against.</p>\n<p>If I'm writing a module and I have some sensitive information I don't want other code to be able to read, then I can define my own <code>Secret</code>-equivalent type and not expose the <code>unwrap</code> function.</p>\n<p>The only reason I can imagine for putting <code>Secret</code> in the standard library specifically is to make exchanging sensitive data between different codebases (libraries/platform/app) safer, and restricting reading of <code>Secret</code> by libraries makes less sense to me.</p>",
        "id": 478572467,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1729713230
    },
    {
        "content": "<p>Another option to consider is to have a package with a <code>Secret</code> type in it, and see if it gets a lot of usage. That will give us the data to validate the need for something like this in the builtins.</p>\n<p>Also for future reference we've got an example which shows people how to make an opaque type with a custom Inspect impl <a href=\"https://www.roc-lang.org/examples/CustomInspect/README.html\">https://www.roc-lang.org/examples/CustomInspect/README.html</a></p>",
        "id": 478591775,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729721553
    },
    {
        "content": "<p>I'm wondering if we should rename \"opaque\" types to \"secret\" types...</p>",
        "id": 478874953,
        "sender_full_name": "Anton",
        "timestamp": 1729847533
    },
    {
        "content": "<p>Relatively few international English speakers know what opaque means</p>",
        "id": 478875129,
        "sender_full_name": "Anton",
        "timestamp": 1729847593
    },
    {
        "content": "<p>We've talked about better alternatives for opaque in the past, not sure if \"secret\" was ever suggested</p>",
        "id": 478875236,
        "sender_full_name": "Anton",
        "timestamp": 1729847632
    },
    {
        "content": "<p>Or maybe Sealed?</p>",
        "id": 478876507,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1729848015
    },
    {
        "content": "<p>Taken from sealed classes a la Kotlin</p>",
        "id": 478876568,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1729848037
    },
    {
        "content": "<p>The problem with \"secret\" IMO is that it implies you don't know that the type even exists, but you can see that it exists, just not what's inside of it</p>",
        "id": 478876698,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1729848075
    },
    {
        "content": "<p>So that makes opaque a good name, even if it's an odd word</p>",
        "id": 478876756,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1729848091
    },
    {
        "content": "<p>Private also works</p>",
        "id": 478876809,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1729848109
    },
    {
        "content": "<p>I really like <code>private</code>, it's used in many languages for this purpose (hiding the implementation details), so many people will be familiar with it. Opaque is not well know and it has a negative connotation (to me at least), something that isn't clear.</p>",
        "id": 478880663,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1729849335
    },
    {
        "content": "<p>Private sounds great!</p>",
        "id": 478906936,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1729858683
    },
    {
        "content": "<p>Opaque has a negative connotation....intriguing <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>\n<p>The main thing I think of is an opaque window (often used for privacy). So curious of the negative connotation that is somehow attached.</p>",
        "id": 478948278,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729872282
    },
    {
        "content": "<p>Oh, I guess a person being opaque is negative in connotation</p>",
        "id": 478948320,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729872303
    },
    {
        "content": "<p>Personally I think opaque is the most definitionally correct, but that may not be useful.</p>\n<p>The type is not secret/private, anyone can use it if it is exposed. The data in the type is private. That said, the type is opaque. Though you can use the type, you can't see any of the data it contains.</p>",
        "id": 478948655,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729872413
    },
    {
        "content": "<p>That’s a good point about the type itself not being private. They could be called “privacy types” to get around that, but I’m not much of a fan of that name</p>",
        "id": 478952481,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1729873851
    },
    {
        "content": "<p>Yeah, I also thought of secretive types, but that doesn't sound right either</p>",
        "id": 478953314,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729874176
    },
    {
        "content": "<p>Some suggestions from o1-preview:</p>\n<div class=\"codehilite\"><pre><span></span><code>Hidden Types\nEncapsulated Types\nBlack-Box Types\nConcealed Types\nPrivate Types\nAbstract Data Types\nHidden Implementation Types\nInterface-Only Types\nSecure Types\nInvisible Types\n</code></pre></div>",
        "id": 478955242,
        "sender_full_name": "Anton",
        "timestamp": 1729874939
    },
    {
        "content": "<p>I like black-box types</p>",
        "id": 478955271,
        "sender_full_name": "Anton",
        "timestamp": 1729874952
    },
    {
        "content": "<p>Black-box types help you debug after your program crashed <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 478955420,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1729875013
    },
    {
        "content": "<p>I'm sorry, are you saying \"black-box types\" are already a defined and known concept? A google search did not turn up anything</p>",
        "id": 478959869,
        "sender_full_name": "Anton",
        "timestamp": 1729876855
    },
    {
        "content": "<p>I was jokingly referring to these: <a href=\"https://en.wikipedia.org/wiki/Flight_recorder\">https://en.wikipedia.org/wiki/Flight_recorder</a></p>",
        "id": 478963136,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1729878205
    },
    {
        "content": "<p>Oooh <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 478963772,
        "sender_full_name": "Anton",
        "timestamp": 1729878474
    },
    {
        "content": "<p>I hadn't thought of the fact that the type itself isn't private, that's a very good point.</p>\n<p>The word \"opaque\" is frequently used figuratively, almost always negatively: e.g., to describe an unclear explanation or argument, a potentially fraudulent accounting report, or a document full of jargon, etc. Of course the word can also be neutral when describing a material.</p>\n<p>For what it's worth, my first reaction when reading \"opaque type\" was that it must be an advanced topic, and I delayed learning it. When I finally learned it, I thought: \"oh, that's actually really easy and useful!\"</p>",
        "id": 479008912,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1729905368
    },
    {
        "content": "<p>Maybe solid type (in the sense that you can't break it into its constituent parts). Or maybe boundary type (in the sense that it's the boundary between the API and the implementation).</p>",
        "id": 479009796,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1729906421
    }
]