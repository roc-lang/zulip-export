[
    {
        "content": "<p>I like where our design ended up for <code>basic-cli</code> error handling (<code>Task {} [Exit I32 Str]</code>) and I was thinking we could do something similar for <code>basic-webserver</code> - accept a <code>main</code> with any error type you like, and by default return HTTP status 500 (Internal Server Error) if any error occurs</p>",
        "id": 436375969,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714524104
    },
    {
        "content": "<p>so that way, just like in <code>basic-cli</code>, you can get up and running with no error handling and just add a <code>main : Request -&gt; Task Response []</code> annotation to enable full mandatory handling of all errors whenever you're ready</p>",
        "id": 436376042,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714524157
    },
    {
        "content": "<p>thoughts?</p>",
        "id": 436376068,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714524190
    },
    {
        "content": "<p>Hm, I don’t think it works as well for servers. In a CLI application that you’re running in a given machine, you can’t expose anything that the user doesn’t already have access to.<br>\nHowever, in a server/client context, you need to carefully control what you expose.</p>",
        "id": 436376475,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1714524565
    },
    {
        "content": "<p>It could work if you didn’t return the error to the client or if you only did so in dev mode. That said, I think this is a platform where it’s more important to encourage good error handling.</p>",
        "id": 436377089,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1714525175
    },
    {
        "content": "<p>I appreciate that point, but it's super easy to harden it for release - literally adding one type annotation <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 436378629,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714526619
    },
    {
        "content": "<p>I wonder if we can have a different handler implementation and swap it out for <code>cargo build</code> verse <code>cargo build --release</code></p>",
        "id": 436379512,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714527558
    },
    {
        "content": "<p>I've been thinking about/planning to do some cleanup and improvements for basic-webserver soon. I'm just wanting to finish cleaning up the basic-cli build process I've started on. So if we come up with a nice API, happy to make those changes too</p>",
        "id": 436380124,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714528142
    },
    {
        "content": "<p>I'd rather not make things work differently for dev vs release if we can avoid it</p>",
        "id": 436380234,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714528248
    },
    {
        "content": "<p>What about some kind of logging. Like the  <code>Task {} [Exit I32 Str]</code> could append to a logfile or something</p>",
        "id": 436380341,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714528385
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/383402-API-Design/topic/Default.20error.20handling.20in.20basic-webserver/near/436378629\">said</a>:</p>\n<blockquote>\n<p>I appreciate that point, but it's super easy to harden it for release - literally adding one type annotation <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>\n</blockquote>\n<p>I guess my point is that there are good CLI apps were this default crash behavior would be what you want forever. Whereas in a server, you really don’t want this beyond the initial experimentation stage.</p>",
        "id": 436380419,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1714528461
    },
    {
        "content": "<p>oh that's interesting - like it returns error 500 but doesn't say what the problem was, but then just logs the <code>Inspect.toStr</code> to stderr?</p>",
        "id": 436380420,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714528463
    },
    {
        "content": "<p>that sounds interesting - would basically only affect initial experimentation then, yeah?</p>",
        "id": 436380436,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714528501
    },
    {
        "content": "<p>yeah <span class=\"user-mention\" data-user-id=\"489294\">@Agus Zubiaga</span> I agree, but I'm mainly thinking about a way to improve the experience of the initial experimentation stage in a way where it's really easy to transition to production once you're ready</p>",
        "id": 436380470,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714528540
    },
    {
        "content": "<p>What I like about that is while I'm developing with localhost I can see any errors in the terminal.</p>",
        "id": 436380486,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714528557
    },
    {
        "content": "<p>It's been a surprisingly nice workflow with the latest basic-cli API that I did not expect</p>",
        "id": 436380543,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714528591
    },
    {
        "content": "<p>we could actually make that a default thing that basic-webserver does automatically</p>",
        "id": 436380552,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714528602
    },
    {
        "content": "<p>Like I've started tagging errors everywhere and it makes it so easy to see where things are broken, and experiment/iterate super quickly</p>",
        "id": 436380574,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714528628
    },
    {
        "content": "<p>Yeah, that seems like a good compromise</p>",
        "id": 436380578,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1714528629
    },
    {
        "content": "<p>so basically whenever <code>basic-webserver</code> receives a <code>Response</code> where the status code is in the 500 range, it just automatically logs to stderr whatever the response was?</p>",
        "id": 436380679,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714528741
    },
    {
        "content": "<p>and then it does the same if it gets back a <code>Task.err</code></p>",
        "id": 436380691,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714528756
    },
    {
        "content": "<p>Oh, I was thinking it would only do this for <code>Task.err</code></p>",
        "id": 436380706,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1714528779
    },
    {
        "content": "<p>I was too at first! But this comment:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/383402-API-Design/topic/Default.20error.20handling.20in.20basic-webserver/near/436380574\">said</a>:</p>\n<blockquote>\n<p>Like I've started tagging errors everywhere and it makes it so easy to see where things are broken, and experiment/iterate super quickly</p>\n</blockquote>\n<p>...wouldn't you still want that even after you start handling them gracefully? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 436380893,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714528903
    },
    {
        "content": "<p>I don’t know if that would work. Handling them gracefully might mean you won’t return a 5xx.</p>",
        "id": 436381014,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1714528983
    },
    {
        "content": "<p>I'm not sure, but I think its nice to have a catchall for unhandled cases. Is it ever valid to send a 500 deliberately??</p>",
        "id": 436381072,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714529038
    },
    {
        "content": "<p>Like maybe a downstream service failed or something??</p>",
        "id": 436381126,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714529063
    },
    {
        "content": "<p>Yeah, it can be when you know what went wrong but don’t want to expose it.</p>",
        "id": 436381132,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1714529071
    },
    {
        "content": "<p>right</p>",
        "id": 436381139,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714529080
    },
    {
        "content": "<p>for example, a \"this should never happen\" situation <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 436381145,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714529089
    },
    {
        "content": "<p>or yeah, you called out to another service and it gave an error, so you can't proceed</p>",
        "id": 436381176,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714529112
    },
    {
        "content": "<p>You could have a platform feature to log requests and responses and some logic to filter them</p>",
        "id": 436381208,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1714529161
    },
    {
        "content": "<p>true!</p>",
        "id": 436381259,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714529177
    },
    {
        "content": "<p>I mentioned 500s specifically because if gracefully handling it results in a non-500 error, I wouldn't want to see that</p>",
        "id": 436381272,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714529182
    },
    {
        "content": "<p>e.g. if it's a 403 Forbidden then I don't think I need more info logged haha</p>",
        "id": 436381285,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714529195
    },
    {
        "content": "<p>Right. I guess it might be a convenient default</p>",
        "id": 436381299,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1714529219
    },
    {
        "content": "<p>personally whenever I'm working on a server and I see a 500 my next step is to look into \"ok what happened?\" and so default logging sounds nice to me! <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 436381419,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714529310
    },
    {
        "content": "<p>Now the problem with the platform logging to stderr is that people are gonna want to log to other places such as Sentry</p>",
        "id": 436381799,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1714529689
    },
    {
        "content": "<p>I think that's something we should look into anyway, e.g. for things like this:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"489294\">Agus Zubiaga</span> <a href=\"#narrow/stream/383402-API-Design/topic/Default.20error.20handling.20in.20basic-webserver/near/436381208\">said</a>:</p>\n<blockquote>\n<p>You could have a platform feature to log requests and responses and some logic to filter them</p>\n</blockquote>\n<p>I'm not sure exactly how we should expose that</p>",
        "id": 436381971,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714529831
    },
    {
        "content": "<p>Something like this could work:</p>\n<div class=\"codehilite\"><pre><span></span><code>app [main] { pf: &quot;https://../basic-webserver&quot; }\n\nimport pf.Logging\n\nmain = \\req -&gt;\n    Logging.onWrite! \\level, message -&gt;\n        # send to Sentry\n\n    # handle request\n</code></pre></div>",
        "id": 436382167,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1714529982
    },
    {
        "content": "<p>one idea is that since you can already do that in userspace (e.g. instead of writing all your logic to return <code>Response</code>, instead return something like <code>MyCustomLoggableThing</code> and then translate that to \"first log whatever we want and then return the <code>Response</code> that <code>main</code> wants\") just offer a way to log <code>crash</code>es, e.g. <code>Str -&gt; Task Response []</code></p>",
        "id": 436382169,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714529983
    },
    {
        "content": "<p>another possibility is to allow logging hooks for all I/O too, e.g. <code>onCrash</code>, <code>onFileRead</code>, <code>onFileWrite</code>, <code>onHttpRequest</code>, etc.</p>",
        "id": 436382250,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714530037
    },
    {
        "content": "<p>since the platform is in charge of all that</p>",
        "id": 436382259,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714530045
    },
    {
        "content": "<p>so yeah I think there's some separate design work to be done there</p>",
        "id": 436382274,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714530057
    },
    {
        "content": "<p>Also instead of </p>\n<div class=\"codehilite\"><pre><span></span><code>#[no_mangle]\npub unsafe extern &quot;C&quot; fn roc_panic(msg: &amp;RocStr, _tag_id: u32) {\n    panic!(&quot;The Roc app crashed with: {}&quot;, msg.as_str());\n}\n</code></pre></div>\n<p>We might want to turn that into a 500 also and log that too.</p>",
        "id": 436382285,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714530064
    },
    {
        "content": "<p>oh yeah for sure!</p>",
        "id": 436382294,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714530072
    },
    {
        "content": "<p>also while we're at it, I'd like to change the entrypoint name from <code>main</code> to something more like <code>handleRequest</code></p>",
        "id": 436382318,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714530102
    },
    {
        "content": "<p><code>respond</code> maybe?</p>",
        "id": 436382330,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714530120
    },
    {
        "content": "<p>I like <code>respond</code>. You might not actually explicitly respond, but the platform will always respond for you <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 436382446,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1714530217
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/basic-webserver/issues/49\">https://github.com/roc-lang/basic-webserver/issues/49</a> &lt;-- made an issue just to track this thread. I don't want to lose these ideas</p>",
        "id": 436382570,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714530317
    },
    {
        "content": "<p>What if in addition to <code>respond</code>, the app provided a <code>config</code> value:</p>\n<div class=\"codehilite\"><pre><span></span><code>app [respond, config] { pf: &quot;https://../basic-webserver&quot; }\n\nrespond = \\req -&gt;\n    # handle request\n\nconfig =\n    import pf.Config\n\n    Config.default\n    |&gt; Config.port 8080\n    |&gt; Config.onLog \\req, level, message -&gt;\n        # Log to Sentry\n    |&gt; Task.ok\n\n  ```\n</code></pre></div>",
        "id": 436382581,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1714530323
    },
    {
        "content": "<p>I guess it makes the hello world a little more wordy, but I think we are going to need something like that eventually</p>",
        "id": 436382675,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1714530389
    },
    {
        "content": "<p>I'm wondering if we will need <a href=\"https://github.com/roc-lang/roc/issues/6382\">passed in allocators and context</a> though before I could make roc_panic log errors back on the HTTP response? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 436382680,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714530392
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"489294\">@Agus Zubiaga</span> what if we supported another roc app as a plugin that could be used to configure the server on startup?</p>",
        "id": 436382753,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714530463
    },
    {
        "content": "<p>So just <code>roc server.roc</code> would use default config. Or <code>roc server.roc config.roc</code> runs the configuration plugin.</p>",
        "id": 436382843,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714530515
    },
    {
        "content": "<p>Interesting. That would require a new language feature, right?</p>",
        "id": 436382863,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1714530549
    },
    {
        "content": "<p>Cause' otherwise the platform would have to compile the config app on the fly</p>",
        "id": 436382877,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1714530571
    },
    {
        "content": "<p>I don't think any new features are required. -- assuming the config is just a value or data that implements Encoding and Decoding</p>",
        "id": 436382961,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714530624
    },
    {
        "content": "<p>We could have the plugin do some setup, maybe it has extra effects or superpowers even, and then it could produce an immutable/ready only config object that is given to each request.</p>",
        "id": 436382997,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714530664
    },
    {
        "content": "<p>I don't think roc can run two apps like that</p>",
        "id": 436383047,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1714530723
    },
    {
        "content": "<p>I am almost certain I can have the webserver run one app on startup and then another for handling requests</p>",
        "id": 436383122,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714530767
    },
    {
        "content": "<p>Or is the issue the <code>roc build</code> part?</p>",
        "id": 436383141,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714530787
    },
    {
        "content": "<p>I'll need to experiment</p>",
        "id": 436383154,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714530802
    },
    {
        "content": "<p>Well, if you build <code>config.roc</code> first, then I guess <code>server.roc</code> can execute it as a command</p>",
        "id": 436383231,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1714530849
    },
    {
        "content": "<p>I was thinking the host could look at its args and if it finds a <code>config.roc</code> it <code>roc build --lib</code> that and then dynamically loads it.</p>",
        "id": 436383323,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714530929
    },
    {
        "content": "<p>ah right, that's what I meant with building it on the fly</p>",
        "id": 436383339,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1714530950
    },
    {
        "content": "<p>So the platform ships with the compiler as a lib or it has to be available in the system</p>",
        "id": 436383412,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1714530991
    },
    {
        "content": "<p>Roc cli has to be available in the system</p>",
        "id": 436383430,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714531012
    },
    {
        "content": "<p>And the plugin would use a URL release I assume</p>",
        "id": 436383441,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714531023
    },
    {
        "content": "<p>Thats interesting, but it doesn’t seem very convenient for deployment</p>",
        "id": 436383477,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1714531066
    },
    {
        "content": "<p>Or maybe I'm just overcomplicating this... we just have a second function <code>config</code> alongside <code>respond</code> like you suggested</p>",
        "id": 436383480,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714531067
    },
    {
        "content": "<p>Yeah I think I'm getting carried away with the art of the possible... just throwing ideas out there</p>",
        "id": 436383544,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714531102
    },
    {
        "content": "<p>We could maybe make platform <code>requires</code> work like module params in that they are just a record pattern. That would allow us to have optional fields, so <code>config</code> wouldn’t need to be specified if you want the default.</p>",
        "id": 436383579,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1714531167
    },
    {
        "content": "<p>That might be nicer than using a record with two functions for main.</p>",
        "id": 436383710,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714531282
    },
    {
        "content": "<p>I just noticed, from the platform side the requires currently is a record or at least </p>\n<div class=\"codehilite\"><pre><span></span><code>platform &quot;&quot;\n    requires { Model, respond, configure } { ... }\n</code></pre></div>\n<p>Wheras the app is a list</p>\n<div class=\"codehilite\"><pre><span></span><code>provides [Model, respond, configure] to web\n</code></pre></div>",
        "id": 436383821,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714531385
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/383402-API-Design/topic/Default.20error.20handling.20in.20basic-webserver/near/436383710\">said</a>:</p>\n<blockquote>\n<p>That might be nicer than using a record with two functions for main.</p>\n</blockquote>\n<p>Honestly, that seems totally fine</p>",
        "id": 436383952,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1714531509
    },
    {
        "content": "<p>Just threw a sneaky <code>Model</code> in there... it would be awesome to have some kind of in-memory cache</p>",
        "id": 436383953,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714531510
    },
    {
        "content": "<p>I really like how <code>Elm</code> implements it's <code>main</code> function. It needs to be assigned a value of type <code>Program</code>,  and the <code>Browser</code> module exports a couple different functions to create a <code>Program</code>.</p>\n<p><a href=\"https://package.elm-lang.org/packages/elm/browser/latest/Browser\">https://package.elm-lang.org/packages/elm/browser/latest/Browser</a></p>\n<p>The first function displayed is <code>sandbox</code>, and it takes the bare minimum options to construct a basic program, ideal for getting started with Elm and it's basic architecture. Next is <code>element</code>, which adds the option for the program to listen to outside events. Next is <code>document</code>, which adds the capability to perform side-effects. Finally there's <code>application</code>, which allows the program to also own page navigation.</p>\n<p>I really like how this teaches you the Elm 'platform' one concept at a time. I think it'd be great if Roc platforms could do something similar.</p>\n<p>I wonder what you think (and maybe this has been discussed before) about implementing it like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>app [main] { pf: &quot;https://../basic-webserver&quot; }\n\nmain = loggingServer { respond, onLog }\n\nrespond = \\req -&gt;\n    # handle request\n\nonLog = \\msg -&gt;\n    # log something\n</code></pre></div>",
        "id": 436459036,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1714546142
    },
    {
        "content": "<p>Interesting idea... could we achieve this using Abilities? maybe the platform requires a type that implements the <code>WebServerAbility</code>, and there are a few default implementations provided.</p>\n<p>The first might be <code>SimpleServer { respond }</code>, second might be <code>WithLogging { respond, handleLogs }</code>, etc.</p>\n<p>The platform then calls all of the functions it needs to build the record to provide to the host. Some of these may be default implementations.</p>",
        "id": 436460672,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714547332
    },
    {
        "content": "<p>I don’t know if you need different kinds of servers. You could have something like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>app [server] {...}\n\nimport pf.Http exposing [Server, Request, Response]\n\nserver : Task Server *\nserver = Http.serve! { respond }\n\nrespond : Request -&gt; Task Response *\nrespond = \\req -&gt;\n    ...\n</code></pre></div>\n<p><code>Http.serve</code> takes a record with optional fields so you can pass other config if you need to:</p>\n<div class=\"codehilite\"><pre><span></span><code>server : Task Server *\nserver = Http.serve! {\n    respond,\n    port: Env.get! &quot;PORT&quot;,\n    onLog: \\x -&gt; Cloudwatch.log x …\n}\n</code></pre></div>\n<p>If a record with optional fields isn’t enough, you can also use the builder pattern.</p>",
        "id": 436489492,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1714565398
    },
    {
        "content": "<p>yeah I'd like to move to this type of API, but it requires being able to send closures to hosts, which we can't do yet <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 436513113,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714574189
    },
    {
        "content": "<p>Folkert and I have been working on that for awhile, but it's tricky to get right</p>",
        "id": 436513246,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714574222
    },
    {
        "content": "<p>unfortunately, looks like implementing this idea runs into <a href=\"#narrow/stream/395097-compiler-development/topic/Alias.20analysis.20error.20across.20modules\">https://roc.zulipchat.com/#narrow/stream/395097-compiler-development/topic/Alias.20analysis.20error.20across.20modules</a></p>\n<blockquote>\n<p>thread 'main' panicked at crates/compiler/gen_llvm/src/llvm/build.rs:5759:19:<br>\nError in alias analysis: error in module ModName(\"UserApp\"), function definition FuncName(\"\\x0f\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\xce\\x826j\\x04j\\xb3\\xbf\"), definition of value binding ValueId(3): could not find func in module ModName(\"UserApp\") with name FuncName(\"\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x1d\\xc8\\xcdx&gt;Y\\x17\\x03\")</p>\n</blockquote>",
        "id": 436610712,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714621106
    },
    {
        "content": "<p>So to summarise the key points from above, I am going to make the following changes in a PR:</p>\n<ol>\n<li>change the name of the function provided to the platform from <code>main</code> to <code>respond</code></li>\n<li>\n<p>change the API to accept tag union of errors e.g. <code>respond : Request -&gt; Task Response [ServerErr Str]_</code>. </p>\n<ul>\n<li>When the platform see a <code>ServerErr</code> tag, it will respond with a status code of 500 and log the <code>Str</code> to stderr (not in the response). </li>\n<li>Any other unhandled errors are automatically converted to a 500 and also <code>Inspect.toStr</code> logged to stderr.</li>\n</ul>\n</li>\n<li>\n<p>attempt to convert <code>roc_panic</code> to respond with a 500 and log the stderr, instead of crashing the server</p>\n</li>\n<li>split the platform and host files into separate crates (like basic-cli)</li>\n</ol>",
        "id": 441404917,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1717056365
    },
    {
        "content": "<p>For any experienced rust people ... to implement the <code>roc_panic</code> handling I wonder if we can use <a href=\"https://doc.rust-lang.org/std/panic/fn.catch_unwind.html\">std::panic::catch_unwind</a> to wrap the call into roc. </p>\n<p>My theory is that then when <code>roc_panic</code> gets called and we <code>panic!</code> in there, that is be somewhere down the stack and this will catch that so we can handle it appropriately.</p>",
        "id": 441407558,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1717057443
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/383402-API-Design/topic/Default.20error.20handling.20in.20basic-webserver/near/441407558\">said</a>:</p>\n<blockquote>\n<p>For any experienced rust people ... to implement the <code>roc_panic</code> handling I wonder if we can use <a href=\"https://doc.rust-lang.org/std/panic/fn.catch_unwind.html\">std::panic::catch_unwind</a> to wrap the call into roc. </p>\n<p>My theory is that then when <code>roc_panic</code> gets called and we <code>panic!</code> in there, that is be somewhere down the stack and this will catch that so we can handle it appropriately.</p>\n</blockquote>\n<p>I know <span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> has looked into this for Nea!</p>",
        "id": 441435151,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717067733
    },
    {
        "content": "<p>this is dangerous in practice. Rust panics are not normally allowed to cross an FFI boundary either way. There is now a special calling convention \"C-unwind\" but even then I think the unwinding through roc code won't really work?</p>",
        "id": 441438654,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1717068933
    },
    {
        "content": "<p>I mean we could make it work technically I guess (though I have no idea how)</p>",
        "id": 441438765,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1717068969
    },
    {
        "content": "<p>hm, what should we do instead?</p>",
        "id": 441449408,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717073140
    },
    {
        "content": "<p>setjmp/longjmp?</p>",
        "id": 441449429,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717073146
    },
    {
        "content": "<p>maybe. are we sure we can skip running destructors ?</p>",
        "id": 441449544,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1717073183
    },
    {
        "content": "<p>that would just leak memory otherwise</p>",
        "id": 441449581,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1717073200
    },
    {
        "content": "<p>hm, yeah good point</p>",
        "id": 441449635,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717073223
    },
    {
        "content": "<p>this is a good argument for doing the unwinding inside the generated Roc code and having the Roc call return a Result <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 441449698,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717073255
    },
    {
        "content": "<p>(along with effect interpreters and passing in an Allocator struct)</p>",
        "id": 441449730,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717073270
    },
    {
        "content": "<p>If exceptions are truly rare, returning a result generally has worse performance characteristics. Especially if the result has to accumulate some sort of information related to the stack trace on the error case.</p>",
        "id": 441517053,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717090809
    },
    {
        "content": "<p>True exceptions with unwinding are a better trade off if we expect panics to be rare (which I think we do).</p>",
        "id": 441517103,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717090833
    },
    {
        "content": "<p>true</p>",
        "id": 441522354,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717092444
    },
    {
        "content": "<p>although I guess setjmp has a cost even if we don't end up doing the longjmp</p>",
        "id": 441522482,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717092479
    },
    {
        "content": "<p>and that cost will be higher than the Result handling cost</p>",
        "id": 441522617,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717092507
    },
    {
        "content": "<p>setjmp has a very minor cost. Just saving like 8 registers or something</p>",
        "id": 441522631,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717092511
    },
    {
        "content": "<p>Anyway, I realized that this is kinda something we can easily make an implementation detail</p>",
        "id": 441522717,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717092537
    },
    {
        "content": "<p>Always return a result to the host for a panic.</p>\n<p>Internally, we can do:</p>\n<ul>\n<li>setjmp/longjmp</li>\n<li>full exception unwinding</li>\n<li>return a result through the stack</li>\n<li>return a result through the stack that also records the entire stack trace</li>\n</ul>\n<p>We could do any of those and still just return a result to a host that represents the potential panic.</p>",
        "id": 441523013,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717092625
    },
    {
        "content": "<p>yeah that sounds awesome! <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 441528795,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717094632
    }
]