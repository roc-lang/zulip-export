[
    {
        "content": "<p>splitting off from this:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Determine.20Endianness.20for.20Implementing.20SHA-1/near/443559749\">said</a>:</p>\n<blockquote>\n<p>If you have the bytes <code>[ 0x00, 0x00, 0x00, 0x07 ]</code> as your 32 bit big endian number input, you do:</p>\n<div class=\"codehilite\"><pre><span></span><code>when bytes is\n    [b3, b2, b1, b0, ..] -&gt;\n        num = (b3 &lt;&lt; 24) |  (b3 &lt;&lt; 16) |  (b3 &lt;&lt; 8) |  b3\n</code></pre></div>\n<p>Now <code>num</code> is whatever native endian happens to be</p>\n</blockquote>",
        "id": 443599655,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717943179
    },
    {
        "content": "<p>this is unfortunate because it breaks the design goal of “Roc code gives the same answer no matter what target it’s run on”</p>",
        "id": 443599694,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717943226
    },
    {
        "content": "<p>I wonder how we can fix this without hurting performance</p>",
        "id": 443599719,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717943257
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> actually, is the bit shifting the problem? Or is it that integer byte order can be observed at all without specifying endianness?</p>",
        "id": 443600749,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717944047
    },
    {
        "content": "<p>I don't think bit shifting is giving a different answer depending on endianness here. <code>num</code> will be the same integer on any target, it's just that its unobservable in-memory representation will depend on the target</p>",
        "id": 443606113,
        "sender_full_name": "timotree",
        "timestamp": 1717946499
    },
    {
        "content": "<p>Oh, missed this thread, this is not an issue</p>",
        "id": 443611810,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717949646
    },
    {
        "content": "<p>I am explicitly receiving the bytes in big endian and then mapping them to a native endian integer. It does not exposed what native endian is</p>",
        "id": 443611841,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717949693
    },
    {
        "content": "<p>And this is how to map little to native:</p>\n<div class=\"codehilite\"><pre><span></span><code>when bytes is\n    [b0, b1, b2, b3, ..] -&gt;\n        num = (b3 &lt;&lt; 24) |  (b3 &lt;&lt; 16) |  (b3 &lt;&lt; 8) |  b3\n</code></pre></div>",
        "id": 443611866,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717949719
    },
    {
        "content": "<p>oh interesting - so it’s a way to go <em>to</em> native but then once it’s in native, nothing about native can leak?</p>",
        "id": 443632115,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717962826
    },
    {
        "content": "<p>yeah</p>",
        "id": 443633334,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717963514
    }
]