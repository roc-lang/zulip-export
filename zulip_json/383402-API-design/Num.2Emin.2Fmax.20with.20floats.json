[
    {
        "content": "<p>so in a recent Software Unscripted chat with Matt Godbolt, he noted that if <code>min</code> or <code>max</code> are given <code>NaN</code>, it's important that they always return <code>NaN</code> - we actually have a bug with this  right now, where you get a different answer depending on the order of the arguments:</p>\n<div class=\"codehilite\"><pre><span></span><code>» Num.min (0f64 / 0) 1\n\n1 : F64\n» Num.min 1 (0f64 / 0)\n\nNaN : F64\n</code></pre></div>",
        "id": 397995708,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1698028294
    },
    {
        "content": "<p>this is because we have the naive implementation that just does a conditional</p>",
        "id": 397995720,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1698028317
    },
    {
        "content": "<p>so I can see an argument for 3 different potential designs for what we should do instead of this:</p>\n<ol>\n<li>always return <code>NaN</code></li>\n<li><code>crash</code> if either argument is <code>NaN</code></li>\n<li>add an <code>implements Eq</code> constraint to <code>min</code> and <code>max</code> so you can't pass them floats anymore</li>\n</ol>",
        "id": 397995836,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1698028374
    },
    {
        "content": "<p>anyone have thoughts on which we should do?</p>",
        "id": 397995853,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1698028382
    },
    {
        "content": "<p>Definitely not 2 or 3</p>",
        "id": 397996691,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1698028795
    },
    {
        "content": "<p>I would either do 1 (most correct) or only return NaN if both are NaN (not correct but very useful in certain situations)</p>",
        "id": 397996805,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1698028835
    },
    {
        "content": "<p>But yeah, I would just do 1.</p>",
        "id": 397996837,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1698028851
    },
    {
        "content": "<p>Floats are meant explicitly to accept NaN in order to delay error handling and keep code fast. That is why I think 2 is bad.</p>",
        "id": 397996905,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1698028885
    },
    {
        "content": "<p>in defense of 3, wouldn't some of the same arguments apply here as applied when we decided not to give floats <code>Eq</code>? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 397996960,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1698028917
    },
    {
        "content": "<p>I think 3 is bad cause comparing floats is super common. For example, which is faster?</p>",
        "id": 397997017,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1698028927
    },
    {
        "content": "<p>There are lots of cases for float ordering where you really don't care if two values are basically the same. If they are basically the same, either answer is really fine. Unlike with equality where being off by a little is super common and causes issues.</p>",
        "id": 397997139,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1698029015
    },
    {
        "content": "<p>Like if 2 values are essentially equal and you call max, it really doesn't matter which value is return or if they are actually equal. So I think not the same as <code>Eq</code></p>",
        "id": 397997245,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1698029053
    },
    {
        "content": "<p>why definitely not 2?</p>",
        "id": 397997729,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1698029327
    },
    {
        "content": "<p>3 should really be an <code>implements Ord</code> constraint right? I think it's reasonable because floats don't have a total ordering. but the problem is you may get the very reasonable question \"why is there no min for floats when I can do <code>if a &lt; b then a else if b &lt; a then b else a</code>\"</p>",
        "id": 397997820,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1698029381
    },
    {
        "content": "<p>hm, interesting - we don't have <code>Ord</code> yet, but I was assuming we'd implement it for all numbers</p>",
        "id": 397997943,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1698029425
    },
    {
        "content": "<p>actually, apparently ieee 754 specifies one total ordering for floats, in which case <code>1 &lt; NaN</code> can mean something: <a href=\"https://en.wikipedia.org/wiki/IEEE_754#Total-ordering_predicate\">https://en.wikipedia.org/wiki/IEEE_754#Total-ordering_predicate</a></p>",
        "id": 397997961,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1698029436
    },
    {
        "content": "<p>so the args being <code>Num</code> would suffice there</p>",
        "id": 397997962,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1698029437
    },
    {
        "content": "<p>although I certainly think there's an argument for those being consistent - like surely if we define <code>Ord</code> for floats, then <code>Num.min</code> and <code>Num.max</code> should be available on them (or else none of them should be available)</p>",
        "id": 397998207,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1698029568
    },
    {
        "content": "<p>For 2, NaN is often expected. It means that the rest of a float computation is invalid. So you let the NaN propagate to the end like you would a result (just faster). At the end of the calculations, you handle the NaN. Crashing on NaN would ruin the usability</p>",
        "id": 397998368,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1698029653
    },
    {
        "content": "<p>well, it depends what <code>Ord</code> is. Is it a total ordering? If so then yeah, certainly min/max must be available. But if Ord is defined such that <code>a &lt; b</code> being false does not imply that <code>a &gt;= b</code> is true,  then it's a little bit more free (but at that point you probably want to have something like rust's partial Ord too)</p>",
        "id": 397998519,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1698029744
    },
    {
        "content": "<p>Also, I think it is more reasonable to define <code>min</code> and <code>max</code> on floats than to define <code>ord</code>on them.</p>",
        "id": 397998594,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1698029780
    },
    {
        "content": "<p>That said, I think they should have both (or at least <code>min</code>, <code>max</code> and <code>PartialOrd</code>)</p>",
        "id": 397998700,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1698029864
    },
    {
        "content": "<p>I definitely would prefer not to have both <code>Ord</code> and <code>PartialOrd</code> abilities in builtins <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 397998705,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1698029868
    },
    {
        "content": "<p>I think it makes sense for Rust to have them, but it doesn't seem great for Roc</p>",
        "id": 397998777,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1698029893
    },
    {
        "content": "<p>The reason <code>min</code> and <code>max</code> are more reasonable than <code>Ord</code> on floats is the potential damage that can be done. With <code>Ord</code>, you will hit cases where two floats are <code>approxEq</code>, but <code>Ord</code> gives them a strict ordering. This can lead to mistakes where a user actually wants to treat to <code>approxEq</code> floats as <code>Eq</code>, but doesn't realize that by using <code>Ord</code> everything is exact instead of approximate.</p>",
        "id": 397999050,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1698030055
    },
    {
        "content": "<p>With <code>min</code> and <code>max</code>. If two floats are <code>approxEq</code> the <code>min</code> or <code>max</code> of them will still be <code>approxEq</code>. So no harm done.</p>",
        "id": 397999108,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1698030093
    },
    {
        "content": "<p><code>min</code> and <code>max</code> don't get harmed by float values being super close but not exactly equal.</p>",
        "id": 397999224,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1698030142
    },
    {
        "content": "<p><code>Ord</code> does.</p>",
        "id": 397999245,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1698030149
    },
    {
        "content": "<p>but yeah, float sorting with <code>NaN</code> falls appart because there is no clear place to sort <code>NaNs</code> to.</p>",
        "id": 397999343,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1698030205
    },
    {
        "content": "<p>That is another case where <code>Ord</code> on floats is complicated.</p>",
        "id": 397999373,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1698030221
    },
    {
        "content": "<p>why is there no clear place? we could follow the ieee 754 standard, or come up with another one. I don't think there's a technical limitation there.</p>",
        "id": 397999444,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1698030253
    },
    {
        "content": "<p>I don't think Ord is a concern for floating points if you only allow a strict order, that is, only comparing <code>a &lt; b</code> rather than <code>a &lt;= b</code> (which is what min/max already do). I think we cannot do <code>a &lt;= b</code>-style total ordering anyway, because otherwise floats can implement Eq via Ord, which is incorrect</p>",
        "id": 397999590,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1698030353
    },
    {
        "content": "<p>There is no clear place because if you implement a userland sort using <code>&lt;</code> or <code>&gt;</code> you will get strange results when <code>NaN</code> is in a the array. It depends on if the comparisons are <code>x &lt; NaN</code> or <code>NaN &lt; x</code>.</p>",
        "id": 397999786,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1698030467
    },
    {
        "content": "<p>The only way the ieee gets a total ordering is by bitcasting to an integer (which roc doesn't allow users to do)</p>",
        "id": 397999894,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1698030494
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"454654\">Ayaz Hafiz</span> <a href=\"#narrow/stream/383402-API-Design/topic/Num.2Emin.2Fmax.20with.20floats/near/397997820\">said</a>:</p>\n<blockquote>\n<p>3 should really be an <code>implements Ord</code> constraint right? I think it's reasonable because floats don't have a total ordering. but the problem is you may get the very reasonable question \"why is there no min for floats when I can do <code>if a &lt; b then a else if b &lt; a then b else a</code>\"</p>\n</blockquote>\n<p>another way of thinking of this: if we don't support <code>Num.min</code> and <code>Num.max</code> on floats, then people will probably implement their own in the naive way and accidentally end up with the same bug we did <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 397999990,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1698030553
    },
    {
        "content": "<p>So multiple \"correct\" strict ord based sorting algorythms in roc would put <code>NaNs</code> in different places. This can even happen with the same alg if <code>NaN</code> is just in a different place in the array.</p>",
        "id": 397999995,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1698030555
    },
    {
        "content": "<p>oh yeah, I forgot that sorting requires equality, which floats don't have</p>",
        "id": 398000183,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1698030659
    },
    {
        "content": "<p>(in current Roc I mean)</p>",
        "id": 398000226,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1698030681
    },
    {
        "content": "<p>relevant previous discussion:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/304641-ideas/topic/supporting.20NaN.2FInfinity.2F-Infinity.3F/near/275915767\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>obviously <code>x &lt; NaN == NaN &lt; x</code> is unintuitive, but can we think of some specific realistic scenarios where this would cause a bug?</p>\n</blockquote>\n<p>Would this but lead to a bug in most sorting algorithms?</p>\n</blockquote>",
        "id": 398000261,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1698030705
    },
    {
        "content": "<blockquote>\n<p>oh yeah, I forgot that sorting requires equality, which floats don't have</p>\n</blockquote>\n<p>Huh, no it doesn't</p>",
        "id": 398000460,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1698030814
    },
    {
        "content": "<p>Just <code>&lt;</code> or <code>&gt;</code></p>",
        "id": 398000463,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1698030820
    },
    {
        "content": "<blockquote>\n<p>Would this but lead to a bug in most sorting algorithms?</p>\n</blockquote>\n<p>Yes, yes it would</p>",
        "id": 398000555,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1698030861
    },
    {
        "content": "<p>I mean, I guess if we want to follow the float total ordering standard, we would change all comparison operators and floats to treat them as signed integers.</p>",
        "id": 398000671,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1698030930
    },
    {
        "content": "<p>Min and max would follow that as well.</p>",
        "id": 398000703,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1698030951
    },
    {
        "content": "<p>but that sounds unexpected and probably bugged in other ways.</p>",
        "id": 398000781,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1698030972
    },
    {
        "content": "<p>a relevant consideration is that we have <code>Dec</code> for reasonableness and floats for performance</p>",
        "id": 398000919,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1698031065
    },
    {
        "content": "<p>the total ordering isn't based on casting to integers. it's the \"regular\" ordering, with negative and positive NaNs pinnned to either ends.</p>",
        "id": 398001000,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1698031106
    },
    {
        "content": "<p>Yeah, that is the same as casting to a signed integer</p>",
        "id": 398001032,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1698031130
    },
    {
        "content": "<p>so there's a case to be made that our tolerance for error-prone-ness in floats should be reduced for the sake of increasing performance, since that's kind of their whole point</p>",
        "id": 398001040,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1698031140
    },
    {
        "content": "<p>or at least their main point</p>",
        "id": 398001045,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1698031145
    },
    {
        "content": "<p>*magnitude integer</p>",
        "id": 398001085,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1698031170
    },
    {
        "content": "<p>cause  it doesn't have the twos compliment</p>",
        "id": 398001107,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1698031184
    },
    {
        "content": "<p>so yeah, sorry, a bit different</p>",
        "id": 398001116,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1698031194
    },
    {
        "content": "<p>from wikipedia:</p>\n<blockquote>\n<p>the comparison is identical to one that type puns the floating-point numbers to a sign–magnitude integer</p>\n</blockquote>",
        "id": 398001208,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1698031232
    },
    {
        "content": "<blockquote>\n<p>our tolerance for error-prone-ness in floats should be reduced for the sake of increasing performance</p>\n</blockquote>\n<p>Can you word that differently? At least as I am reading it, I think it is backwards from what I feel you are trying to say.</p>",
        "id": 398001388,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1698031341
    },
    {
        "content": "<p>haha yeah - basically error-prone APIs are more acceptable when it comes to floats</p>",
        "id": 398001743,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1698031561
    },
    {
        "content": "<p>I should go to sleep <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 398001801,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1698031576
    },
    {
        "content": "<p>Maybe I misunderstood the decision made in an earlier thread or maybe plans have since changed but I thought Roc wasn’t going to allow NaN to exist in order to avoid these sorts of issues. Any functions that could potentially return NaN would either panic or return an error if it were to happen?</p>",
        "id": 398020186,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1698043148
    },
    {
        "content": "<p><a href=\"#narrow/stream/304641-ideas/topic/supporting.20NaN.2FInfinity.2F-Infinity.3F\">https://roc.zulipchat.com/#narrow/stream/304641-ideas/topic/supporting.20NaN.2FInfinity.2F-Infinity.3F</a> Found the discussion. Not sure what conclusion was made though (I guess it was to keep NaN given it's assumed here)</p>",
        "id": 398083755,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1698067238
    },
    {
        "content": "<p>yeah exactly</p>",
        "id": 398109374,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1698074585
    },
    {
        "content": "<p>the problem was that if we don't have it in the language, there's no way to get maximum float performance - and the main point of having floats at all is performance!</p>",
        "id": 398109557,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1698074636
    }
]