[
    {
        "content": "<p>Super minor, but since sqlite changes are soon to merge, I thought I would ask a little about naming.</p>\n<ol>\n<li>What are peoples opinions on <code>Sqlite</code> vs <code>SQLite</code> when it shows up in type and module names? From what I can tell, <code>SQLite</code> is more \"official\", but I don't think it reads as well.</li>\n<li>For the error codes, I initially made them all caps to directly match the sqlite constants. So <code>NOMEM</code>, <code>INTERNAL</code>, or <code>CANTOPEN</code>. I feel like I should probably change them to <code>NoMem</code>, <code>Internal</code>, and <code>CantOpen</code>. Maybe even give them a bit color than sqlite does.</li>\n<li>For types decoded from sqlite that are optionally null. We went with <code>Nullable a : [NotNull a, Null]</code>. Is that name reasonable and our perferred way to deal with optional nulls?</li>\n</ol>",
        "id": 491203071,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735502519
    },
    {
        "content": "<ol>\n<li>We seem to be doing Http instead of HTTP and Url instead of URL, I think Roc is leaning towards making it look nicer if forcing title case doesn't hurt readability. I think it doesn't matter much, but I'd lean toward consistency with what we've got already</li>\n<li>I'm less of a C dev, so I don't have as much familiarity with these APIs, but I think the SCREAMING case is more of a relic than a useful pattern. I'd vote title case here as well, though I know some folks prefer uppercase HTTP methods</li>\n<li>For Weaver, I went for <code>Result val [NoValue]</code>  even if something like <code>[HasValue val, NoValue]</code> is more correct because we've optimized so much for Result management. I'd vote for <code>Result val [Null]</code> for that reason</li>\n</ol>",
        "id": 491214874,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735514017
    },
    {
        "content": "<p>I agree with Sam here. </p>\n<p>Though I'm not sure it's worth changing Nullable. The current impl works well and the naming seems ok to me.</p>",
        "id": 491215280,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735514418
    },
    {
        "content": "<p>+1 for Nullable, i think Result is a bad semantic there because <code>null</code> isn't  \"error-ish\" in SQL</p>",
        "id": 491216218,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735515320
    },
    {
        "content": "<ol>\n<li>I agree on <code>Sqlite</code>. I dislike acronyms being capitalized in title case. And, to us, ‚Äùsqlite\" is one atomic word, you'd never have a <code>SQSomethingElse</code>, so there shouldn't be extra word boundaries.</li>\n<li>Yeah, the capitalization is not an important part to carry over exactly. <code>NoMem</code> fits better here.</li>\n<li>Nullable is good</li>\n</ol>",
        "id": 491217499,
        "sender_full_name": "Sky Rose",
        "timestamp": 1735516567
    },
    {
        "content": "<p>I'd also like to say that... I think it's fine to leave it too. It's not easy to go back through <code>Sqlite.roc</code> and rename all the tags, and the delta here imo is pretty small.</p>\n<p>Here's the docs for the error codes <a href=\"https://www.sqlite.org/rescode.html\">https://www.sqlite.org/rescode.html</a></p>\n<div class=\"codehilite\"><pre><span></span><code>SQLITE_ABORT (4)\nSQLITE_AUTH (23)\nSQLITE_BUSY (5)\nSQLITE_CANTOPEN (14)\nSQLITE_CONSTRAINT (19)\nSQLITE_CORRUPT (11)\nSQLITE_DONE (101)\nSQLITE_EMPTY (16)\n&lt;snipped&gt;\n</code></pre></div>\n<p>And here's one place we use them in the platform</p>\n<div class=\"codehilite\"><pre><span></span><code>when code is\n    ERROR -&gt; &quot;ERROR: Sql error or missing database&quot;\n    INTERNAL -&gt; &quot;INTERNAL: Internal logic error in Sqlite&quot;\n    PERM -&gt; &quot;PERM: Access permission denied&quot;\n    ABORT -&gt; &quot;ABORT: Callback routine requested an abort&quot;\n    BUSY -&gt; &quot;BUSY: The database file is locked&quot;\n    LOCKED -&gt; &quot;LOCKED: A table in the database is locked&quot;\n    NOMEM -&gt; &quot;NOMEM: A malloc() failed&quot;\n    READONLY -&gt; &quot;READONLY: Attempt to write a readonly database&quot;\n    &lt;snipped&gt;\n</code></pre></div>",
        "id": 491218084,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735517038
    },
    {
        "content": "<p>I've approved the PR, as this is the only thing that remains... and I figure <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> may be happy to merge as is.</p>",
        "id": 491218200,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735517155
    },
    {
        "content": "<p>Sounds like we should fix the casing here</p>",
        "id": 491228592,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735526963
    },
    {
        "content": "<p>I'll leave nullable for now</p>",
        "id": 491228728,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735527077
    },
    {
        "content": "<blockquote>\n<p>i think Result is a bad semantic there because <code>null</code> isn't \"error-ish\" in SQL</p>\n</blockquote>\n<p>To add a bit of extra color. If you use nullable, you are essentially explicitly saying that you expect null and thus don't want it to be an error (probably eventually will also want to add a version that returns empty string on null). By default, if you request a Str from the roc sqlite api, it will return a result of a Str with an error of: <code>UnexpectedTypeErr : [UnexpectedType [Integer, Real, String, Bytes, Null]]</code></p>\n<p>The big caveat being that in a larger query, only the first error will be returned. Given a column of strings with a few nulls: With Nullable, you will get the list of <code>Nullable Str</code>; Without nullabe, you would get a single type error <code>UnexpectedType Null</code> for the entire query.</p>",
        "id": 491232963,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735530672
    },
    {
        "content": "<p>Also, one thing that still surprises me about sqlite by default (roc api specifically attempts to avoids this), it will autocast data if possible:</p>\n<blockquote>\n<p>The first six interfaces (_blob, _double, _int, _int64, _text, and _text16) each return the value of a result column in a specific data format. If the result column is not initially in the requested format (for example, if the query returns an integer but the sqlite3_column_text() interface is used to extract the value) then an automatic type conversion is performed.</p>\n</blockquote>",
        "id": 491233417,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735531066
    }
]