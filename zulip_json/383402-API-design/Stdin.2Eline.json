[
    {
        "content": "<p>so awhile back we <a href=\"#narrow/stream/231634-beginners/topic/Reading.20Stdin.20until.20EOT.3F\">changed <code>Stdin.line</code></a> to produce <code>[Input Str, End]</code></p>",
        "id": 434589657,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713706725
    },
    {
        "content": "<p>this makes the function a lot less helpful for learning, because this doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nv\">main</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span>Stdout.line!<span class=\"w\"> </span><span class=\"s2\">\"Type something and press Enter.\"</span>\n<span class=\"w\">    </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>Stdin.line!\n<span class=\"w\">    </span>Stdout.line!<span class=\"w\"> </span><span class=\"s2\">\"You entered: </span><span class=\"k\">$(</span>input<span class=\"k\">)</span><span class=\"s2\">\"</span>\n</code></pre></div>",
        "id": 434589672,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713706753
    },
    {
        "content": "<p>I wonder if we should revisit the original problem and reonsider the API</p>",
        "id": 434589684,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713706792
    },
    {
        "content": "<p>specifically, I'm wondering if we should solve it with two functions</p>",
        "id": 434589692,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713706801
    },
    {
        "content": "<p><code>Stdin.line</code> goes back to producing a <code>Str</code> and then we have a different <code>Stdin</code> function for reading until EOT</p>",
        "id": 434589752,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713706830
    },
    {
        "content": "<p>thoughts?</p>",
        "id": 434589756,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713706835
    },
    {
        "content": "<p>as a concrete design idea:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"c1\">## Reads bytes from stdin until a '\\n'</span>\n<span class=\"c1\">## byte is encountered, then parses</span>\n<span class=\"c1\">## all the bytes before it as utf8</span>\n<span class=\"n\">Stdin</span><span class=\"o\">.</span><span class=\"n\">line</span> <span class=\"p\">:</span> <span class=\"n\">Task</span> <span class=\"n\">Str</span> <span class=\"o\">*</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"c1\">## Reads bytes from stdin until an EOT</span>\n<span class=\"c1\">## byte is encountered, then parses</span>\n<span class=\"c1\">## all the bytes before it as utf8</span>\n<span class=\"n\">Stdin</span><span class=\"o\">.</span><span class=\"n\">eot</span> <span class=\"p\">:</span> <span class=\"n\">Task</span> <span class=\"n\">Str</span> <span class=\"o\">*</span>\n</code></pre></div>",
        "id": 434591693,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713708757
    },
    {
        "content": "<p>That sounds great!</p>",
        "id": 434593348,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1713710239
    },
    {
        "content": "<p>I don't think that works. You often have to read in small chunks (like lines), but you also need to know when the stdin stream ends</p>",
        "id": 434594555,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713711260
    },
    {
        "content": "<p>I think you fundamentally just want the end of the stream to be seen as exceptional and ignore in the normal case</p>",
        "id": 434594571,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713711285
    },
    {
        "content": "<p>ok so then we could rename the current function to like <code>Stdin.lineOrEot</code> or something?</p>",
        "id": 434594736,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713711428
    },
    {
        "content": "<p>and then reintroduce the previous <code>Stdin.line</code> design</p>",
        "id": 434594756,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713711445
    },
    {
        "content": "<p>So I would propose:</p>\n<div class=\"codehilite\"><pre><span></span><code>Stdin.line Str [StreamEnd]\n</code></pre></div>\n<p>So you can do either;</p>\n<div class=\"codehilite\"><pre><span></span><code># dont care\nIn = Stdin.line!\nStdout.line! &quot;You entered: $(in)&quot;\n\n# do care\nInRes = Stdin.line |&gt; Task.result!\nwhen inRes is\n    ...\n</code></pre></div>",
        "id": 434594766,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713711452
    },
    {
        "content": "<p>Probably with a better error message, but that general idea</p>",
        "id": 434594787,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713711479
    },
    {
        "content": "<p>to me, the main motivation of this change is to have <code>Task Str *</code> as a beginner learning tool</p>",
        "id": 434594829,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713711489
    },
    {
        "content": "<p>I don't think we want to have to teach error handling that early</p>",
        "id": 434594845,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713711506
    },
    {
        "content": "<p>or <code>Result</code></p>",
        "id": 434594856,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713711517
    },
    {
        "content": "<p>I strongly think <code>Stdin.line</code> should do the right thing and have an error type. (Or just return an union directly)</p>\n<p>We should be explicit if we make a version that crashes or just keeps returning empty input. That version should have the longer name<br>\n<code>Stdin.lineUnchecked: ...</code> or etc</p>",
        "id": 434594908,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713711600
    },
    {
        "content": "<p>Also, you can hide the error handling by making the platform handle it by default</p>",
        "id": 434595024,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713711678
    },
    {
        "content": "<p>Allow any error to be returned to the platform</p>",
        "id": 434595031,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713711688
    },
    {
        "content": "<p>It can print the error (will be a low quality message) and crash</p>",
        "id": 434595046,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713711707
    },
    {
        "content": "<p>I think that would be a better way to delay introducing error handling</p>",
        "id": 434595110,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713711736
    },
    {
        "content": "<p>Stdout.line also should really return an error. Currently I think every call to stdout in basic CLI has 2 different ways to panic in rust. That is bad ux. Random crashes that the roc developer can't control.</p>",
        "id": 434595160,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713711793
    },
    {
        "content": "<p>We don't have some form of try catch for platform panics. So any errors not given to roc are either fatal or silent without any way to change that from within roc.</p>",
        "id": 434595238,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713711854
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> why would that be true of <code>Stdin.line</code> but not <code>Stdout.line</code>?</p>",
        "id": 434595511,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713712083
    },
    {
        "content": "<p>(which can also fail)</p>",
        "id": 434595529,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713712098
    },
    {
        "content": "<p>It's true for both</p>",
        "id": 434595584,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713712151
    },
    {
        "content": "<p>I think both should return errors to roc</p>",
        "id": 434595590,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713712158
    },
    {
        "content": "<p><code>!</code> lets you easily ignore them for the most part</p>",
        "id": 434595598,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713712170
    },
    {
        "content": "<p>So the main code will still read just like a imperative program</p>",
        "id": 434595613,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713712188
    },
    {
        "content": "<p>Just will accumulate the errors.</p>",
        "id": 434595621,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713712197
    },
    {
        "content": "<p>ok so what does hello world in Roc look like in that world?</p>",
        "id": 434595688,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713712236
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"nc\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line!</span><span class=\"w\"> </span><span class=\"s2\">\"Type something and press Enter.\"</span>\n<span class=\"w\">    </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nc\">Stdin</span><span class=\"o\">.</span><span class=\"n\">line!</span>\n<span class=\"w\">    </span><span class=\"nc\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line!</span><span class=\"w\"> </span><span class=\"s2\">\"You entered: $(input)\"</span>\n</code></pre></div>",
        "id": 434595702,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713712257
    },
    {
        "content": "<p>that's a type mismatch because the errors aren't handled</p>",
        "id": 434595722,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713712273
    },
    {
        "content": "<p>Nope...one sec</p>",
        "id": 434595733,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713712284
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">mainForHost</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"nc\">Fx</span>\n<span class=\"n\">mainForHost</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">result!</span>\n<span class=\"w\">    </span><span class=\"ow\">when</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"n\">is</span>\n<span class=\"w\">        </span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"w\">        </span><span class=\"nc\">Err</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"c1\"># This could call an unsafe stderr and exit, or just use crash, or etc</span>\n<span class=\"w\">            </span><span class=\"n\">crash</span><span class=\"w\"> </span><span class=\"s2\">\"Program exited with error: $(Inspect.toStr e)\"</span>\n</code></pre></div>",
        "id": 434595974,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713712491
    },
    {
        "content": "<p>So main can return any sort of error to basic cli and it will print out an crash.</p>",
        "id": 434596017,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713712559
    },
    {
        "content": "<p>Of course, main can also choose to send no errors. In that case, it can handle there errors in a nicer way</p>",
        "id": 434596066,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713712581
    },
    {
        "content": "<p>Now everything in main has the choice to use <code>!</code> and never think about error handling if wanted</p>",
        "id": 434596083,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713712600
    },
    {
        "content": "<p>Then we can have:</p>\n<div class=\"codehilite\"><pre><span></span><code>Stdout.line: Str -&gt; Task {} [StdoutClosed]\nStderr.line: Str -&gt; Task {} [StderrClosed]\nStdin.line: Task Str [StdinClosed, StdinEndOfStream]\n</code></pre></div>\n<p>And the end user can just write your original program with <code>!</code>.<br>\nInstead of maybe getting some random rust panic, They would get a roc crash (we can pick the exact behaviour) with the message: <code>Program exited with error: StdinEndOfStream</code>.</p>",
        "id": 434596237,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713712758
    },
    {
        "content": "<p>ahh right, I remember this design!</p>",
        "id": 434596242,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713712763
    },
    {
        "content": "<p>we talked about it once, but we didn't have <code>Inspect</code> back then</p>",
        "id": 434596257,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713712779
    },
    {
        "content": "<p>so now it seems more viable <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 434596265,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713712792
    },
    {
        "content": "<p>and then if you want to guarantee you've handled all the errors in your application, all you have to do is to add this type annotation to your <code>main</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kr\">main </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n</code></pre></div>",
        "id": 434596462,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713712966
    },
    {
        "content": "<p>and then you'll get a type mismatch if any are unhandled</p>",
        "id": 434596476,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713712981
    },
    {
        "content": "<p>but if you leave off the annotation (e.g. in tutorials) or annotate it as <code>main : Task {} _</code> then it will work</p>",
        "id": 434596570,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713713059
    },
    {
        "content": "<p>hm, but in that design how do you specify exit code? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 434596582,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713713074
    },
    {
        "content": "<p>personally, I would pull the <code>I32</code> out of the api and require calling <code>Program.exit exitCode</code> or something during the error handling.</p>",
        "id": 434596590,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713713083
    },
    {
        "content": "<p>If you use the default handling, it could just exit with an exit code of <code>1</code></p>",
        "id": 434596601,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713713098
    },
    {
        "content": "<p>That said, totally could still leave the exit code in if wanted. I just removed it as personal preference.</p>",
        "id": 434596697,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713713174
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">mainForHost</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"w\"> </span><span class=\"nc\">I32</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"nc\">Fx</span>\n<span class=\"n\">mainForHost</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">result!</span>\n<span class=\"w\">    </span><span class=\"ow\">when</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"n\">is</span>\n<span class=\"w\">        </span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"n\">exitCode</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"n\">exitCode</span>\n<span class=\"w\">        </span><span class=\"nc\">Err</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"nc\">Stderr</span><span class=\"o\">.</span><span class=\"n\">lineUnchecked!</span><span class=\"w\"> </span><span class=\"s2\">\"Program exited with error: $(Inspect.toStr e)\"</span>\n<span class=\"w\">            </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 434596714,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713713203
    },
    {
        "content": "<p>actually something we could do is have the platform accept this:</p>\n<p><code>Task {} [Exit I32]*</code></p>",
        "id": 434597083,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713713594
    },
    {
        "content": "<p>That is much nicer</p>",
        "id": 434597144,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713713644
    },
    {
        "content": "<p>so if you return <code>Task.err (Exit 1)</code> then it exits with that code (just like today) but all other errors get handled in the default way</p>",
        "id": 434597148,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713713651
    },
    {
        "content": "<p>this design also makes basic-cli nicer for scripting in general!</p>",
        "id": 434597169,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713713691
    },
    {
        "content": "<p>means by default you get the \"bail out on error\" behavior, but you can easily opt into any amount of granular error handling and guarantees you like</p>",
        "id": 434597198,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713713730
    },
    {
        "content": "<p>I like not having <code>exit</code> as a <code>Task</code> because it affects control flow in a way that's otherwise reserved for <code>crash</code></p>",
        "id": 434597561,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713714050
    },
    {
        "content": "<p>I can't name a concrete downside of that, but it feels like an invariant that shouldn't be broken lightly</p>",
        "id": 434597591,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713714088
    },
    {
        "content": "<p>so I like leaving it out of the API if we can get away with it <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 434597681,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713714159
    },
    {
        "content": "<p>ok I'm game to try this design out!</p>",
        "id": 434597852,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713714338
    },
    {
        "content": "<p>This sounds perfect for basic-cli!</p>",
        "id": 434598978,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1713715066
    },
    {
        "content": "<p>Let's do it</p>",
        "id": 434601915,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713717104
    },
    {
        "content": "<p>I should have some time today to work in this change for basic-cli and to update the examples.</p>",
        "id": 434610077,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713724915
    },
    {
        "content": "<p>Ah, inconvenient place for this module imports bug to appear... I might have to hack something to get it to work.</p>\n<div class=\"codehilite\"><pre><span></span><code>── MODULE NOT IMPORTED in examples/../platform/main.roc ────────────────────────\n\nThe `Stderr` module is not imported:\n\n33│                  Stderr.line! &quot;Program exited with error: $(Inspect.toStr e)&quot;\n                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nDid you mean to import it?\n\n────────────────────────────────────────────────────────────────────────────────\n\n1 error and 2 warnings found in 23 ms\n</code></pre></div>",
        "id": 434611291,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713725947
    },
    {
        "content": "<p>Maybe can manually wrap/call the effect?</p>\n<p>Will have to be different from the regular <code>Stderr.line</code> anyway since you want to avoid errors.<br>\nAnd the new <code>Stderr.line</code> will have an error case <code>[StderrClosed]</code></p>",
        "id": 434612098,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713726660
    },
    {
        "content": "<p>Yeah, been playing with that... this bug is a bit nebulous and is proving hard to work around. I'm leaning towards just leaving the \"print error\" part out for a few days and we can add it back when Agus' PR lands which resolves this specific issue I think.</p>",
        "id": 434617881,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713732085
    },
    {
        "content": "<p>yeah can just use <code>crash</code> for now</p>",
        "id": 434618166,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713732358
    },
    {
        "content": "<p>The other wrinkle, is that to use <code>!</code> we need to have <code>Task</code> imported in the app. </p>\n<p>But if it's just <code>main = Stdout.line! \"Hello, World!\"</code> we get <code>**UNUSED IMPORT**:  Nothing from **Task** is used in this module</code> which is a different incantation of the same bug.</p>",
        "id": 434618230,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713732399
    },
    {
        "content": "<p>Well, at least that this only a Warning so it still runs</p>",
        "id": 434618288,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713732456
    },
    {
        "content": "<p>But other than a stray Warning, it's working ok.</p>\n<p>I'll update the examples.</p>\n<p>We can clean it up later to have the nicer <code>Inspect</code> printing.</p>",
        "id": 434618380,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713732528
    },
    {
        "content": "<p>oh that's funny - it's actually not a bug</p>",
        "id": 434618386,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713732531
    },
    {
        "content": "<p>Well, I guess we need builtin Task before we can resolve that</p>",
        "id": 434618414,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713732555
    },
    {
        "content": "<p>in the sense that if the only uses of <code>!</code> are trailing (which desugar to nothing) then after desugaring there really is no use of Task in the module</p>",
        "id": 434618428,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713732580
    },
    {
        "content": "<p>yeah task as builtin takes care of that nicely</p>",
        "id": 434618442,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713732597
    },
    {
        "content": "<p>For the short term (like next 24hours) experience, users may get an unused warning in the specific case where they dont use anything from Task in thier app.</p>",
        "id": 434618529,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713732650
    },
    {
        "content": "<p>yeah which seems fine</p>",
        "id": 434618543,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713732673
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/basic-cli/pull/184\">https://github.com/roc-lang/basic-cli/pull/184</a></p>",
        "id": 434621256,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713735622
    },
    {
        "content": "<p>^^ PR for the basic-cli changes... will require tomorrow's nightly to pass CI.</p>",
        "id": 434621287,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713735663
    },
    {
        "content": "<p>Looks like there may be another issue too, so I'll plug away at it until I'm reasonably confident it's just waiting on nightly for Anton</p>",
        "id": 434621299,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713735691
    },
    {
        "content": "<p>I'll also have a crack at our <a href=\"https://github.com/roc-lang/examples\">https://github.com/roc-lang/examples</a></p>",
        "id": 434621315,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713735711
    },
    {
        "content": "<p>Wait, so is <code>!</code> already released?</p>",
        "id": 434630887,
        "sender_full_name": "drew",
        "timestamp": 1713746196
    },
    {
        "content": "<p>yeah, you can use it right now!</p>",
        "id": 434630972,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713746282
    },
    {
        "content": "<p>the benefits of all-nightly releases <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 434630997,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713746295
    },
    {
        "content": "<p>no need to wait for a \"stable\" release if we don't have them <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 434631007,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713746309
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"463085\">drew</span> <a href=\"#narrow/stream/383402-API-Design/topic/Stdin.2Eline/near/434630887\">said</a>:</p>\n<blockquote>\n<p>Wait, so is <code>!</code> already released?</p>\n</blockquote>\n<p>I updated the <code>roc-wasm4</code> examples... it looks awesome with <code>!</code> suffix <span aria-label=\"hearts\" class=\"emoji emoji-2665\" role=\"img\" title=\"hearts\">:hearts:</span> <a href=\"https://github.com/lukewilliamboswell/roc-wasm4/blob/main/examples/rocci-bird.roc#L36\">https://github.com/lukewilliamboswell/roc-wasm4/blob/main/examples/rocci-bird.roc#L36</a></p>",
        "id": 434631066,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713746383
    },
    {
        "content": "<p>The other platform that will be nice boost with the <code>!</code> syntax is <a href=\"https://github.com/lukewilliamboswell/roc-ray\">roc-ray</a> for drawing graphics etc. Looking forward to upgrading to zig-12 with that too.</p>",
        "id": 434631184,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713746469
    },
    {
        "content": "<p>And I should probably make an actual release for macos/linux so people can use from just a URL. I was thinking it might be possible to do that using GH Actions somehow... I've never looked at that before, but it's just running <code>zig build</code> on the different arch's and then packaging up the <code>.a</code> files with the roc platform files.</p>",
        "id": 434631316,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713746574
    },
    {
        "content": "<p>also fwiw strong agree that <code>Stdin.line</code> shouldn’t return a tagged type. the benefits don’t outweigh the costs imo. i was very confused when i randomly saw this API two days ago.</p>",
        "id": 434631607,
        "sender_full_name": "drew",
        "timestamp": 1713746848
    },
    {
        "content": "<p>Yeah, I just changed it in <br>\n<a href=\"https://github.com/roc-lang/basic-cli/pull/184\">https://github.com/roc-lang/basic-cli/pull/184</a></p>\n<p>to <code>Stdin.line : Task Str [End]</code></p>",
        "id": 434631684,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713746911
    },
    {
        "content": "<p>instead of just <code>End</code>, we should probably make a type alias for <code>StdinErr : [IoErr, Oom, End]</code> (we can add more later)</p>",
        "id": 434631991,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713747207
    },
    {
        "content": "<p>how are task errors handled?</p>",
        "id": 434632001,
        "sender_full_name": "drew",
        "timestamp": 1713747218
    },
    {
        "content": "<p>and have it be <code>Task Str [StdinErr StdinErr]</code></p>",
        "id": 434632003,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713747221
    },
    {
        "content": "<p>can you simply ignore them?</p>",
        "id": 434632009,
        "sender_full_name": "drew",
        "timestamp": 1713747228
    },
    {
        "content": "<p>essentially yeah</p>",
        "id": 434632017,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713747239
    },
    {
        "content": "<p>but can opt in to handling, i suppose, and then it is exhastive</p>",
        "id": 434632084,
        "sender_full_name": "drew",
        "timestamp": 1713747273
    },
    {
        "content": "<p>right, give or take the OS introducing new types of errors that Roc doesn't know about yet <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 434632105,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713747294
    },
    {
        "content": "<p>nice</p>",
        "id": 434632133,
        "sender_full_name": "drew",
        "timestamp": 1713747321
    },
    {
        "content": "<p>seems like a good compromise</p>",
        "id": 434632141,
        "sender_full_name": "drew",
        "timestamp": 1713747331
    },
    {
        "content": "<p>Made an issue <a href=\"https://github.com/roc-lang/basic-cli/issues/185\">https://github.com/roc-lang/basic-cli/issues/185</a> to track this.</p>",
        "id": 434633382,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713748508
    },
    {
        "content": "<p>speaking of updates, while working on the tutorial I noticed something awkward: if <code>Stderr.line</code> can error, then gracefully handling errors (e.g. by printing a message to stderr and then doing an <code>Exit</code>) becomes pretty cumbersome because you have to do like <code>Stderr.line \"Error writing to stdout\" |&gt; Task.onErr! \\_ -&gt; Task.ok {}</code></p>",
        "id": 434643543,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713756707
    },
    {
        "content": "<p>what if instead we made it be <code>Exit I32 Str</code>?</p>",
        "id": 434643548,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713756719
    },
    {
        "content": "<p>and then the platform prints that <code>Str</code> to stderr, while automatically disregarding any errors (\"if stderr is broken, you just don't get any output, sorry\")</p>",
        "id": 434643619,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713756760
    },
    {
        "content": "<p>that's also nice in that it makes the errors even more concise to handle, because you can just say:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">Exit</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"s\">\"Error writing to stdout\"</span>\n</code></pre></div>",
        "id": 434643666,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713756809
    },
    {
        "content": "<p>instead of needing two lines, one of which is always a <code>Stderr.line!</code></p>",
        "id": 434643679,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713756825
    },
    {
        "content": "<p>also makes it harder to make the mistake of using stdout (by force of habit) instead of stderr for error reporting <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 434643735,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713756852
    },
    {
        "content": "<p>That sounds nice!</p>",
        "id": 434645053,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1713757997
    },
    {
        "content": "<p>I wonder if it would be confusing that if you do <code>Exit 0 \"success!\"</code> the message would print to stderr. The message could print to stdout if the exit code is 0, but that might encourage people to use the tag instead of just using <code>Stdout.line</code>.</p>",
        "id": 434645149,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1713758070
    },
    {
        "content": "<p>yeah that's probably fine</p>",
        "id": 434645660,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713758448
    },
    {
        "content": "<p>doing stdout for 0 makes sense to me <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 434645669,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713758456
    },
    {
        "content": "<p>I guess a counterargument would be that it's a weird edge case you could trip over, and maybe you'd want to use <code>Exit 0 \"Warning: ...\"</code> if you were translating an error into a warning and didn't want to change the exit code</p>",
        "id": 434646240,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713758873
    },
    {
        "content": "<p>I think it should always print to stderr with <code>Exit</code></p>",
        "id": 434646517,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713759090
    },
    {
        "content": "<p>stderr tends to also be used for status updates and terminal outputs for pipelined applications</p>",
        "id": 434646587,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713759128
    },
    {
        "content": "<p>I'm not really following, <code>Stderr.line</code> cant throw an error right now. Are we wanting to update the <a href=\"https://github.com/roc-lang/basic-cli/blob/86baa48085cab051a11c165264d089a01d135265/platform/src/lib.rs#L392\">rust impl</a> to return an error somehow?</p>",
        "id": 434646607,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713759158
    },
    {
        "content": "<p>yeah. <code>eprintln!</code> just crashes on errror</p>",
        "id": 434646758,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713759245
    },
    {
        "content": "<p>I guess we could handle this </p>\n<div class=\"codehilite\"><pre><span></span><code>Panics if writing to io::stderr fails.\n\nWriting to non-blocking stderr can cause an error, which will lead this macro to panic.\n</code></pre></div>",
        "id": 434646760,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713759245
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">stderr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">io</span>::<span class=\"n\">stderr</span><span class=\"p\">();</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">handle</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">stderr</span><span class=\"p\">.</span><span class=\"n\">lock</span><span class=\"p\">();</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">handle</span><span class=\"p\">.</span><span class=\"n\">write_all</span><span class=\"p\">(</span><span class=\"s\">b\"hello world\"</span><span class=\"p\">);</span>\n</code></pre></div>",
        "id": 434646789,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713759270
    },
    {
        "content": "<p>yeah exactly <span aria-label=\"100\" class=\"emoji emoji-1f4af\" role=\"img\" title=\"100\">:100:</span></p>",
        "id": 434646823,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713759301
    },
    {
        "content": "<p>in general, writing to a file descriptor can fail in various ways</p>",
        "id": 434646855,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713759320
    },
    {
        "content": "<p>and writing to stdout and to stderr is just writing data to a file descriptor</p>",
        "id": 434646872,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713759335
    },
    {
        "content": "<p>not all of those possible failure modes apply to stdout and stderr, but plenty of them do!</p>",
        "id": 434646901,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713759361
    },
    {
        "content": "<p>so in this new design, I think we should have <code>Stdin.line</code>, <code>Stdout.line</code>, and <code>Stderr.line</code> all have errors</p>",
        "id": 434646974,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713759388
    },
    {
        "content": "<p>Also, lets please make sure to either make them wrapping or descriptive of the filed descriptor they come from. <code>End</code> alone is quite unclear. <code>Stderr End</code> is much much more useful.</p>",
        "id": 434647128,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713759488
    },
    {
        "content": "<p>I'd like to try out the convention of naming those errors <code>Err</code> and just always fully qualifying them:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kt\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">StdoutErr</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"o\">.</span><span class=\"kt\">Err</span><span class=\"p\">]</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kt\">Stderr</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">StderrErr</span><span class=\"w\"> </span><span class=\"kt\">Stderr</span><span class=\"o\">.</span><span class=\"kt\">Err</span><span class=\"p\">]</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kt\">Stdin</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">StdinErr</span><span class=\"w\"> </span><span class=\"kt\">Stdin</span><span class=\"o\">.</span><span class=\"kt\">Err</span><span class=\"p\">]</span>\n</code></pre></div>",
        "id": 434647144,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713759496
    },
    {
        "content": "<p>yeah I think <code>End</code> would be part of the <code>Stdin.Err</code> tag union in this design</p>",
        "id": 434647178,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713759529
    },
    {
        "content": "<p>Sounds great!</p>",
        "id": 434647659,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713759834
    },
    {
        "content": "<p>Though I guess it only works if everything in <code>Stdin</code> has the exact same <code>Err</code> type.</p>",
        "id": 434647730,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713759860
    },
    {
        "content": "<p>yeah I can't think of any cases where that wouldn't be true! <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 434648150,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713760111
    },
    {
        "content": "<p>I thought file would be a case, but from discussion elsewhere, I guess everything is just io error there</p>",
        "id": 434648594,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713760372
    },
    {
        "content": "<p>Do we have any ideas around the specific errors here? Rust just has a big <code>std::io::ErrorKind</code> with lots of variants</p>",
        "id": 434649879,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713761186
    },
    {
        "content": "<p>So the updates I had been making were trending towards using that everywhere... but in the above API it looks like we want to tailor the tags for the specific function, and then maybe have an Other to catch the rest</p>",
        "id": 434649951,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713761250
    },
    {
        "content": "<p>yeah I think for now we can just put in a couple of them and add more later</p>",
        "id": 434649973,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713761270
    },
    {
        "content": "<p>the main thing is just switching over to the new \"shape\" if that makes sense</p>",
        "id": 434650030,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713761286
    },
    {
        "content": "<p>Also, I would like to use an <code>&lt;u8&gt;</code> for the error tag between rust and roc instead of generating glue for these if that's ok</p>",
        "id": 434650082,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713761335
    },
    {
        "content": "<p>It's just much simpler. Regenerating glue is very handraulic at the moment because it doesn't generate valid Rust and I have to manually fix things</p>",
        "id": 434650136,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713761375
    },
    {
        "content": "<p>So <code>stderrLine : Str -&gt; Effect (Result {} U8)</code> instead of  <code>stderrLine : Str -&gt; Effect (Result {} InternalStderrError)</code></p>",
        "id": 434650306,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713761474
    },
    {
        "content": "<p>as in just on the platform &lt;-&gt; host side?</p>",
        "id": 434650485,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713761574
    },
    {
        "content": "<p>not visible to application authors</p>",
        "id": 434650496,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713761579
    },
    {
        "content": "<p>correct</p>",
        "id": 434650524,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713761596
    },
    {
        "content": "<p>sure, seems reasonable! <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 434650578,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713761638
    },
    {
        "content": "<p>Actually I'm going to use a RocStr, so I can return a description of the error from Rust</p>",
        "id": 434651048,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713761911
    }
]