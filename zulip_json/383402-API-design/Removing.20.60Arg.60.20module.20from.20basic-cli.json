[
    {
        "content": "<p>I don't want to be too arrogant, but it does seem that if we're not happy with the built-in <code>Arg</code> parser in <a href=\"https://github.com/roc-lang/basic-cli\">basic-cli</a>, we can probably delete (or deprecate) it in favor of suggesting <a href=\"https://github.com/smores56/weaver\">Weaver</a>. The only function that still needs to stay is <code>Arg.list</code>, which in theory could be moved to <code>Env.args</code> if we don't want to keep a module with only a single function in it. Any thoughts? I'm definitely aware of the bus factor here, and would be happy to transfer Weaver somewhere else if desired by the community.</p>",
        "id": 437381896,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1715060219
    },
    {
        "content": "<p>Rust does have its <code>args</code> function in <a href=\"https://doc.rust-lang.org/nightly/std/env/fn.args.html\">std::env::args</a>, so there is naming precedent here</p>",
        "id": 437381986,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1715060299
    },
    {
        "content": "<p>Created a PR in basic-cli: <a href=\"https://github.com/roc-lang/basic-cli/pull/204\">https://github.com/roc-lang/basic-cli/pull/204</a></p>",
        "id": 437386040,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1715063177
    },
    {
        "content": "<p>Not arrogant at all, what's making me hesitate is that I do want an args example in the basic-cli examples but relying on weaviate may make things difficult when going through breaking Roc changes. We'd be forced to make a new weaviate release before we can make a new basic-cli release which I would like to avoid. How do you feel about directly integrating/copying weaviate in basic-cli?</p>",
        "id": 437438581,
        "sender_full_name": "Anton",
        "timestamp": 1715083672
    },
    {
        "content": "<blockquote>\n<p>We'd be forced to make a new weaviate release before we can make a new basic-cli release which I would like to avoid.</p>\n</blockquote>\n<p>+1 for preferably avoiding such kind of a dependency. I think there are some very good lessons from other language ecosystems which suggest that avoiding such dependency is probably the correct direction in this case.</p>",
        "id": 437444333,
        "sender_full_name": "Hristo",
        "timestamp": 1715085690
    },
    {
        "content": "<p>Unless Weaver and basic-cli get properly merged together, so that there isn't a separate dependency outside the official streams? In other words weave Weaver into basic-cli (I couldn't resist the wordplay, sorry <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span>)</p>",
        "id": 437448968,
        "sender_full_name": "Hristo",
        "timestamp": 1715087078
    },
    {
        "content": "<blockquote>\n<p>Unless Weaver and basic-cli get properly merged together,</p>\n</blockquote>\n<p>Yeah that's what I proposed as well :p </p>\n<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/stream/383402-API-Design/topic/Removing.20.60Arg.60.20module.20from.20basic-cli/near/437438581\">said</a>:</p>\n<blockquote>\n<p>... How do you feel about directly integrating/copying weaviate in basic-cli?</p>\n</blockquote>",
        "id": 437451611,
        "sender_full_name": "Anton",
        "timestamp": 1715087861
    },
    {
        "content": "<p>Indeed, <span class=\"user-mention\" data-user-id=\"361169\">@Anton</span>! Apologies - I missed that bit <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 437453459,
        "sender_full_name": "Hristo",
        "timestamp": 1715088406
    },
    {
        "content": "<p>All good :)<br>\nSo yeah, merging seems like the way to go!</p>",
        "id": 437459756,
        "sender_full_name": "Anton",
        "timestamp": 1715090186
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> I agree that integration is probably the way to go for the next year or two, but long term, when other platforms are being built, including other CLI platforms, then we are making it harder to code share this builder code. </p>\n<p>It feels like module params and Task as a builtin will be the best mechanism for making code like Weaver modular, and I'm worried about losing its modularity. Do you disagree?</p>",
        "id": 437477219,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1715095468
    },
    {
        "content": "<p>I thought about this as well, the weaver repo could pull in files from the basic-cli repo and make them available in a standalone package too.</p>",
        "id": 437484297,
        "sender_full_name": "Anton",
        "timestamp": 1715097734
    },
    {
        "content": "<p>whoa, I never thought of that!</p>",
        "id": 437484355,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1715097757
    },
    {
        "content": "<p>Yes, this way Weaver could have arbitrarily many improvements, which will still be based on some stable \"core\", belonging to basic-cli. If basic-cli likes any of them, they'll be introduced to it as well. Something like Weaver being a \"logical fork\" (to a certain extent) of basic-cli. This is my (possibly partially or entirely incorrect) conceptual understanding of the dependencies. Basically, the directionality is what matters there - one wouldn't want for basic-cli to be dependent on external releases even though, in theory, such dependencies could be arbitrarily forked (e.g., in case the maintainer team of said dependencies does not have time to keep them up-to-date) etc, but the messiness level associated with this approach seems unnecessarily high to me .</p>",
        "id": 437487112,
        "sender_full_name": "Hristo",
        "timestamp": 1715098623
    },
    {
        "content": "<p>Can you explain what you're suggesting here? I'm not sure what you think would be brought into Weaver besides Task-related code, implying that Weaver would copy/somehow re-export a platform in the style of basic-cli? I'm not seeing that much of a benefit if that's the case.</p>",
        "id": 438084346,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1715409008
    },
    {
        "content": "<blockquote>\n<p>Can you explain what you're suggesting here?</p>\n</blockquote>\n<p>Yeah sure, so for now the source code of the weaver package would not change. My proposal is to put those exact source files in basic-cli to avoid duplication and potential issues with breaking Roc changes. The weaver repo would basically only contain main.roc:</p>\n<div class=\"codehilite\"><pre><span></span><code>package [\n    Opt,\n    Base,\n    Cli,\n    ErrorFormatter,\n    Help,\n    Param,\n    Subcommand,\n    Validate,\n] {}\n</code></pre></div>\n<p>To make a package release of weaver, the CI workflow would fetch some files from basic-cli like Base.roc, Builder.roc, ... and create the package bundle. Over time, the weaver package could contain extra features compared to basic-cli if desired.</p>",
        "id": 438095241,
        "sender_full_name": "Anton",
        "timestamp": 1715419448
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> okay, the more I think about it, the more that seems to handle both scenarios we want to cover: <br>\n1) basic-cli users have everything built in, and can go on their merry way<br>\n2) future use of the library is safely protected by having the package published in its own repo in GitHub, and users can decide to use the library on its own if they want to use a different platform</p>",
        "id": 438101256,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1715424846
    },
    {
        "content": "<p>And this also gives us some niceties for Weaver that would otherwise take more module params than would probably be desirable:</p>\n<ul>\n<li>Stdout.line for help messages/version printing</li>\n<li>Stderr.line error reporting/usage printing</li>\n<li>TTY checking for styling toggle</li>\n<li>Args.list/Env.args pulling</li>\n</ul>",
        "id": 438101300,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1715424957
    },
    {
        "content": "<p>So the only question I have to the group is where in basic-cli should weaver go?</p>\n<ul>\n<li>under <code>Args.Opt</code>, <code>Args.Param</code>, etc.</li>\n<li>under <code>Weaver.Opt</code>, <code>Weaver.Param</code>, etc.</li>\n<li>under <code>Opt</code>, <code>Param</code>, etc.</li>\n</ul>\n<p>I vote the second option, which retains more personality than is present in any of the other modules, but I think it's fun to have these kind of things in a \"standard library\" like basic-cli</p>",
        "id": 438101439,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1715425111
    },
    {
        "content": "<p>I would personally prefer to go with <code>Args</code>, it's very self-explanatory. I expect users would have a hard time guessing what \"Weaver\" relates to, when they see it for the first time.</p>",
        "id": 438102156,
        "sender_full_name": "Anton",
        "timestamp": 1715425994
    },
    {
        "content": "<p>Yeah, fair. There may be some issues with documentation misaligning between the basic-cli files and the package, where they'll both now say <code>the Args module</code> or something to that effect. I'll see if I can reword things to be either agnostic or conscious of the dual state of the library</p>",
        "id": 438102447,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1715426321
    },
    {
        "content": "<p>Sounds good, thanks :)</p>",
        "id": 438102779,
        "sender_full_name": "Anton",
        "timestamp": 1715426752
    },
    {
        "content": "<p>I've made a commit to the <a href=\"https://github.com/roc-lang/basic-cli/pull/204\">weaver -&gt; Args PR</a>, and there are some nice benefits to usability from having the platform available, but I'm not super happy with the results.</p>\n<p>The blocker I'm facing now is in avoiding polluting the module space for basic-cli with top-level modules like <code>Opt</code> and <code>Param</code>, I've had to make the interface worse (in my opinion) for the user. Users now have to import <code>import pf.Args.Opt as Opt</code> instead of <code>import weaver.Opt</code> for pretty much everything they use. This could be circumvented in a couple ways:</p>\n<ol>\n<li>Move all user facing modules to the top level and pollute the basic-cli folder. This makes the user experience as good as with Weaver, but makes module organization worse. Internal modules like parsing could still be </li>\n<li>Combine all weaver code into the module <code>Args</code> (or maybe a couple modules). I _really_ don't like the implication of this one from a code cleanliness standpoint (read: 4k+ line module), but imports are now clean again and basic-cli isn't organizationally polluted.</li>\n<li>Accept that imports are longer at the cost of not polluting basic-cli.</li>\n</ol>\n<p>For any of these three options, anything that has nested modules runs into an unfortunate problem: imports relative to the root of the package have the name of the parent module in them, so if weaver wants imports to be <code>import weaver.Opt</code>, but basic-cli has the file in <code>platform/Args/Opt.roc</code>, then we can't just symlink a file in the weaver repo, since <code>Args.Opt</code> will import sibling modules as <code>import Args.Parser</code> and not just <code>Parser</code>. So for us to have shared files between Weaver and basic-cli, they need to get their imports find-and-replaced on distribution and testing.</p>\n<p>This change is doable, but seems to point to Weaver being embedded in basic-cli not being a \"zero-cost abstraction\", so to say. Unless there's a cleaner way to share the code, it seems much cleaner and future-proof to just have Weaver in its own repo for the time being and wait for module params for the Task management. I don't think that the concern that Weaver releases are needed for every basic-cli release/Roc language change is a big deal, since it's equally true for every other library in Roc at the moment (even important ones like roc-json).</p>\n<p>I appreciate the learning value of this code sharing experiment, but I don't think the juice is worth the squeeze.</p>",
        "id": 438165713,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1715499598
    },
    {
        "content": "<p>I want to make sure I'm keeping my mind open to finding a good solution, so if anyone wants to take a stab, I'm happy to work together on it!</p>",
        "id": 438165786,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1715499654
    },
    {
        "content": "<p>Now, given the context for this discussion comes from my proposal to remove the Args module in favor of using Weaver, if we still the in-built Args parser to be maintained so that we aren't dependent on an external package, then maybe I can take a look at getting it working again? I don't think anyone that knows about Weaver is likely to reach for it, but I understand the value of having something built-in. However, I would still personally vote that we should remove the Args module and move <code>Args.list</code> to <code>Env.args</code> (as was done in my <a href=\"https://github.com/roc-lang/basic-cli/pull/204/commits/f307ea437e8829005c0cb1276bfc518de8dfc7e2\">first commit</a> of the PR).</p>",
        "id": 438166559,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1715500560
    },
    {
        "content": "<p>Should <code>import pf.Args.Opt as Opt</code> and <code>import pf.Args.Opt</code> do the exact same thing?</p>",
        "id": 438176326,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715510973
    },
    {
        "content": "<p>Also, I think your comment on sibling module imports is a bug</p>",
        "id": 438176405,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715511034
    },
    {
        "content": "<p>the <code>Args.Parser</code> module should import <code>Args.Opt</code> with the line <code>import Opt</code></p>",
        "id": 438176457,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715511097
    },
    {
        "content": "<p>Not a bug unless I’m missing something. We just inherited this from Elm.</p>",
        "id": 438178404,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1715513286
    },
    {
        "content": "<p>Richard has some ideas for how nested modules should work, but we found some issues and determined it needed more design work.</p>",
        "id": 438178463,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1715513390
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/383402-API-Design/topic/Removing.20.60Arg.60.20module.20from.20basic-cli/near/438176457\">said</a>:</p>\n<blockquote>\n<p>the <code>Args.Parser</code> module should import <code>Args.Opt</code> with the line <code>import Opt</code></p>\n</blockquote>\n<p>We talked about doing this in the context of the changes in the proposal. The problem is that, currently, you’re able to import modules from the parent level. So what if there also was an <code>Opt</code> module there?</p>",
        "id": 438179458,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1715514513
    },
    {
        "content": "<p>We would either need to disallow this or introduce some other syntax for it. The solution wasn’t obvious so we kept the previous behavior for now.</p>",
        "id": 438179568,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1715514627
    },
    {
        "content": "<p>I think it will change in the future, though</p>",
        "id": 438179574,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1715514642
    },
    {
        "content": "<p>Not to distract from this conversation but what are the issues with making <code>import pf.Args.Opt</code> the same as <code>import pf.Args.Opt as Opt</code>? I'm assuming <code>import pf.Opt</code> is the same as <code>import pf.Opt as Opt</code>? If there's not already an existing thread on this I'll make one.</p>",
        "id": 438195560,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1715531236
    },
    {
        "content": "<p>Yeah, let's make a separate thread. It's a good discussion to have</p>",
        "id": 438195581,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1715531269
    },
    {
        "content": "<blockquote>\n<p>Users now have to import <code>import pf.Args.Opt as Opt</code> instead of <code>import weaver.Opt</code> for pretty much everything they use.</p>\n</blockquote>\n<p>This is unfortunate, but my intuition would be that it's likely not too big of an issue. I suspect that most applications will have arg parsing localized in one file, so you won't have to list this more than once.</p>",
        "id": 438195773,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1715531448
    },
    {
        "content": "<p>Yeah, it's minor, but unless the imports change how they work, it's still a downside.</p>",
        "id": 438195809,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1715531496
    },
    {
        "content": "<p>The main thing is the fact that the code can't just be symlinked from a git submodule</p>",
        "id": 438195835,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1715531522
    },
    {
        "content": "<p>Because of import differences, that I expect won't and shouldn't change</p>",
        "id": 438195893,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1715531551
    },
    {
        "content": "<p>I would be inclined to suggest what you mentioned at the end, to either fork weaver into the args implementation in basic-cli or otherwise have args in basic-cli be its own implementation. there is a large value to basic-cli having no dependencies, at least while the language is young. There is also a large value in having  basic-cli be \"batteries included\", so that users can be reasonably confident in pulling in a de-facto arg parsing library without having to audit ecosystem options. I think having weaver pull in files from basic-cli would end up a fork sooner or later, as the needs of either diverge.</p>",
        "id": 438197845,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1715533486
    },
    {
        "content": "<p>If Roc was more mature/we didn't expect a lot of ecosystem churn it may be better to have basic-cli explicitly depend on weaver and wrap Args around it.</p>",
        "id": 438197969,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1715533584
    },
    {
        "content": "<p>Yeah, that's true. In which case, even if it leads to duplication, I'll go ahead and finish cleaning up this Args update PR that copies Weaver's code in without the branding. As I add features to the package, I can port them to basic-cli. At some point we can decide to merge them if it seems like a good idea in the future</p>",
        "id": 438198009,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1715533644
    },
    {
        "content": "<p>Sound good to you?</p>",
        "id": 438198016,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1715533654
    },
    {
        "content": "<p>yeah that's what i'd be inclined to do. but definitely be sure to do what's best for you!</p>",
        "id": 438198208,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1715533838
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> when you get a chance, please re-check the <a href=\"https://github.com/roc-lang/basic-cli/pull/204\">PR</a>, it's ready for review</p>",
        "id": 438307306,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1715590132
    },
    {
        "content": "<p>Will do, thanks <span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> :)</p>",
        "id": 438308217,
        "sender_full_name": "Anton",
        "timestamp": 1715590432
    }
]