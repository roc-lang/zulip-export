[
    {
        "content": "<p>Hello everyone, great to be here. Trying to understand how Roc works with platforms and I'm pretty excited about the possibility of writing my own platform specifically with Zig.</p>\n<p>Is there any documentation on how to do this?</p>\n<p>Reading through some existing platforms, I see that there's some boilerplate around malloc and free, but I'm most confused about </p>\n<ol>\n<li>How the glue works</li>\n<li>How to export functions from the platform for use in the application</li>\n<li>What can the Roc program provide to the host platform (mainForHost?)</li>\n</ol>",
        "id": 421044747,
        "sender_full_name": "Stephen",
        "timestamp": 1707747729
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"691032\">@Stephen</span> :)</p>\n<blockquote>\n<p>Is there any documentation on how to do this?</p>\n</blockquote>\n<p>No, we're making big changes in how platforms work so we delayed writing docs for it.<br>\n<a href=\"https://github.com/lukewilliamboswell/roc-ray\">This</a> is a recent example of how you can set up a zig platform so I recommended looking at that for guidance.</p>\n<blockquote>\n<ol>\n<li>How the glue works</li>\n</ol>\n</blockquote>\n<p>Glue code allows the Roc program to talk with the platform written in Rust, Zig...<br>\nAutomatic generation of Glue code (WIP) is currently only available for Rust.</p>\n<blockquote>\n<ol start=\"2\">\n<li>How to export functions from the platform for use in the application</li>\n</ol>\n</blockquote>\n<p><a href=\"https://github.com/lukewilliamboswell/roc-ray/blob/89e3ecb628e13de0c4d0bfa3e480e332f42153d8/platform/host.zig#L166\">Example of the Zig part</a>.<br>\n<a href=\"https://github.com/lukewilliamboswell/roc-ray/blob/89e3ecb628e13de0c4d0bfa3e480e332f42153d8/platform/Effect.roc#L27\">Corresponding Roc part</a></p>\n<blockquote>\n<ol start=\"3\">\n<li>What can the Roc program provide to the host platform (mainForHost?)</li>\n</ol>\n</blockquote>\n<p>Anything your heart desires :)</p>",
        "id": 421050829,
        "sender_full_name": "Anton",
        "timestamp": 1707749303
    },
    {
        "content": "<p>I wrote this article <a href=\"https://lukewilliamboswell.github.io/roc-ray-experiment/\">https://lukewilliamboswell.github.io/roc-ray-experiment/</a> to capture some of the lessons I've learnt about platform development. Writing platforms in Zig is super fun, let me know if you have any questions.</p>",
        "id": 421115619,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1707767474
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> and <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> <br>\nI'll take a look at these <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 421119331,
        "sender_full_name": "Stephen",
        "timestamp": 1707768721
    },
    {
        "content": "<p>If I want to implement a Rust platform, how do I get started?</p>",
        "id": 442299281,
        "sender_full_name": "Albert",
        "timestamp": 1717430930
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"669503\">Albert</span> <a href=\"#narrow/stream/302903-Writing-a-platform/topic/How.20to.20write.20a.20platform/near/442299281\">said</a>:</p>\n<blockquote>\n<p>If I want to implement a Rust platform, how do I get started?</p>\n</blockquote>\n<p>All messages from this thread so far do apply to Rust as well.<br>\nAdditionally, you might be interested in the second talk by <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> from last month's <a href=\"#narrow/stream/303057-gatherings/topic/Roc.20Online.20Meetup.20May.202024/near/440594885\">meetup</a>.</p>",
        "id": 442335772,
        "sender_full_name": "Hristo",
        "timestamp": 1717438971
    },
    {
        "content": "<p>I also have a template repository for rust which has most of the parts ready to go </p>\n<p><a href=\"https://github.com/lukewilliamboswell/roc-platform-template-rust\">https://github.com/lukewilliamboswell/roc-platform-template-rust</a></p>",
        "id": 442376871,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1717450085
    },
    {
        "content": "<p>Just watched the vid. So now I understand that Roc cli/compiler has 2 jobs.</p>",
        "id": 444529660,
        "sender_full_name": "Albert",
        "timestamp": 1718302531
    },
    {
        "content": "<ol>\n<li>compile the roc app code to a shared object</li>\n<li>link the precompiled host binary to the shared object</li>\n</ol>",
        "id": 444529936,
        "sender_full_name": "Albert",
        "timestamp": 1718302563
    },
    {
        "content": "<p>which is exactly the opposite of Deno/Browser that takes JavaScript as data and run it in memory.</p>",
        "id": 444530211,
        "sender_full_name": "Albert",
        "timestamp": 1718302617
    },
    {
        "content": "<p>when the host code interacts with roc app code, the source is long gone</p>",
        "id": 444530327,
        "sender_full_name": "Albert",
        "timestamp": 1718302638
    },
    {
        "content": "<p>It's more like a FFI</p>",
        "id": 444530357,
        "sender_full_name": "Albert",
        "timestamp": 1718302644
    },
    {
        "content": "<p>so I am writing a new kind of communication software (chat + social media) that is decentralized (meaning local-first, client-first, not blockchain)</p>",
        "id": 444636914,
        "sender_full_name": "Albert",
        "timestamp": 1718349959
    },
    {
        "content": "<p>the protocol is <a href=\"https://nostr.com/\">https://nostr.com/</a></p>",
        "id": 444637096,
        "sender_full_name": "Albert",
        "timestamp": 1718350000
    },
    {
        "content": "<p>my software is <a href=\"https://blowater.app/\">https://blowater.app/</a></p>",
        "id": 444637145,
        "sender_full_name": "Albert",
        "timestamp": 1718350011
    },
    {
        "content": "<p>However, after 1.5 years of work, I have realized that the Browser platform is fundementally not friendly to local-first software</p>",
        "id": 444637260,
        "sender_full_name": "Albert",
        "timestamp": 1718350036
    },
    {
        "content": "<ol>\n<li>The network API is so old and bad. WebSocket implementation in Web API is just very bad for robust networking.</li>\n<li>The storage API (IndexedDB) is also bad and slow as hell</li>\n<li>Browser is not that safe once you have lots of extensions. But a decentralized app needs to handle private keys. Therefore, I want to build cryptogrphic APIs and key storage into the platform itself.</li>\n</ol>",
        "id": 444637344,
        "sender_full_name": "Albert",
        "timestamp": 1718350061
    },
    {
        "content": "<p>The JavaScript language is also just not a good language to implement super robust software (the client needs to handle 2GB+ data locally)</p>",
        "id": 444637521,
        "sender_full_name": "Albert",
        "timestamp": 1718350097
    },
    {
        "content": "<p>Roc looks like a super good fit for my project because</p>\n<ol>\n<li>It has the separation of platform and app at the top level of design</li>\n<li>The language itself is safer and more robust to handle data (pattern matching)</li>\n</ol>",
        "id": 444637788,
        "sender_full_name": "Albert",
        "timestamp": 1718350164
    },
    {
        "content": "<p>So, I want to implement a platform that's basically like a Browser, but using Roc for scripting, providing modern network &amp; storage APIs</p>",
        "id": 444637958,
        "sender_full_name": "Albert",
        "timestamp": 1718350204
    },
    {
        "content": "<p>along with a GUI layer</p>",
        "id": 444637988,
        "sender_full_name": "Albert",
        "timestamp": 1718350210
    },
    {
        "content": "<p>It's not a hobbyst project, I am very serious with real budget behind it</p>",
        "id": 444638350,
        "sender_full_name": "Albert",
        "timestamp": 1718350298
    },
    {
        "content": "<p>But, I don't understand Rust nor Zig enough to get started, even if <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> 's template. I need more help.</p>\n<p>For example<br>\n<a href=\"/user_uploads/22008/6OWgsSHuWbDHLvfVJqLKNhuK/image.png\">image.png</a><br>\nNow I know that <code>let out = call_the_closure(buffer);</code> will run the Roc code.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/6OWgsSHuWbDHLvfVJqLKNhuK/image.png\" title=\"image.png\"><img src=\"/user_uploads/22008/6OWgsSHuWbDHLvfVJqLKNhuK/image.png\"></a></div><p>But I don't understand </p>\n<ol>\n<li>how to add a new platform API in the Rust code.</li>\n<li>Why does the platform have Roc code as well in the platform dir? I thought platform should not have Roc at all.</li>\n</ol>",
        "id": 444638595,
        "sender_full_name": "Albert",
        "timestamp": 1718350355
    },
    {
        "content": "<p>I have been following Roc for 2 years and have watched <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> 's talks since the Elm days btw. Now Roc feels like mature enough, at least for me, to work on.</p>",
        "id": 444639946,
        "sender_full_name": "Albert",
        "timestamp": 1718350812
    },
    {
        "content": "<p>As for the GUI layer, I am thinking about something like Egui or the GPUI from Zed editor. GPUI uses Egui as well. Just need to figure out what's the best API for Roc to consume.</p>",
        "id": 444640671,
        "sender_full_name": "Albert",
        "timestamp": 1718351125
    },
    {
        "content": "<p>Egui can run on Android now, so if we can implement a Rust Egui platform for Roc, maybe Roc can run on Android as well. iOS is always another beast.</p>",
        "id": 444640896,
        "sender_full_name": "Albert",
        "timestamp": 1718351203
    },
    {
        "content": "<p>But, if we can achieve it, it's 100X better than Flutter which is a good platform with a horrible language. Dart is the worst part of Flutter in my opinion.</p>",
        "id": 444640984,
        "sender_full_name": "Albert",
        "timestamp": 1718351249
    },
    {
        "content": "<p>If this is possible and exciting to you, please let me know. I need help to get started.</p>",
        "id": 444641106,
        "sender_full_name": "Albert",
        "timestamp": 1718351288
    },
    {
        "content": "<p>I've been very motivated by the idea of a GUI platform for roc. I've done a few experiments over the last couple of years to learn more about platform development and generally explore the space. I think it'd be super cool if we had a decent GUI platform. Roc is 100% a great fit for this in my opinion.</p>\n<p>You may find Richard's <a href=\"https://docs.google.com/document/d/16qY4NGVOHu8mvInVD-ddTajZYSsFvFBvQON_hmyHGfo/edit?usp=sharing\">Action-State design proposal</a> an interesting read. It's a design for how GUIs might work in Roc (necessarily different from Elm). </p>\n<p>I've built a PoC using raylib <a href=\"https://github.com/lukewilliamboswell/roc-ray\">lukewilliamboswell/roc-ray</a>. That platform works well and there is nothing really stopping it today from being a great graphics platform. It just needs some polish, more API coverage, an upgrade to a later zig version and a release. For the GUI parts, unfortunately we would need a pure roc layout implementation, something like flutter's layout algorithm would be good I think. Thought raylib is definitely not aimed at making modern/pretty looking GUI's.</p>\n<p>The project I have been watching closely and think will be most suitable is <a href=\"https://github.com/linebender/xilem\">linebender/xilem</a> which brings together a lot of the GUI efforts from across the Rust ecosystem. They recently launched at RustNL, and there has been a lot of active development since then. I haven't had a chance to experiment with it (works been busy lately). I started early with this <a href=\"https://github.com/lukewilliamboswell/roc-masonry-experiment\">https://github.com/lukewilliamboswell/roc-masonry-experiment</a> and my plan was to upgrade that to xilem and generally clean it up -- similar to how I've cleaned up the rust template (which has the latest and greatest).</p>\n<p>One potential issue is that glue gen is still a WIP and needs to mature more. Writing types for interfacing between Roc and Rust by hand is the most reliable method, but also can be tedious. I started on <a href=\"https://github.com/lukewilliamboswell/roc-glue-code-gen\">https://github.com/lukewilliamboswell/roc-glue-code-gen</a> with the goal to work on glue, but that turned into making template repositories. Actually fixing the glue generation requires a level of rust knowledge that I don't have right now. </p>\n<p>Bit of a random collection of thoughts, but hope that helps.</p>",
        "id": 444647390,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1718353563
    },
    {
        "content": "<p>Is glue compiled to the host or to the app binary?</p>",
        "id": 444656509,
        "sender_full_name": "Albert",
        "timestamp": 1718356709
    },
    {
        "content": "<blockquote>\n<p>or the GUI parts, unfortunately we would need a pure roc layout implementation, something like flutter's layout algorithm would be good I think.</p>\n</blockquote>\n<p>Why? Is it because this approach is more cross platform? So that the host just take the pixel computed by the Roc GUI lib and draw it?</p>",
        "id": 444656740,
        "sender_full_name": "Albert",
        "timestamp": 1718356799
    },
    {
        "content": "<p><a href=\"https://opensats.org/blog/opensats-receives-additional-funding-of-dollar21m-from-startsmall\">https://opensats.org/blog/opensats-receives-additional-funding-of-dollar21m-from-startsmall</a></p>",
        "id": 444656965,
        "sender_full_name": "Albert",
        "timestamp": 1718356870
    },
    {
        "content": "<p>Jack Dorsey is bootstrapping the Nostr ecosystem with additional 5M donations, on top of 5M last year.</p>",
        "id": 444657095,
        "sender_full_name": "Albert",
        "timestamp": 1718356918
    },
    {
        "content": "<p>There is real needs to implement a simpler, safer hosting environment for micro apps</p>",
        "id": 444657209,
        "sender_full_name": "Albert",
        "timestamp": 1718356949
    },
    {
        "content": "<p>Is there a plan for helping people manage public/private keys? That sounds like a challenge for new users. Or is the idea generally that identity will be more temporary.</p>",
        "id": 444657334,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1718357002
    },
    {
        "content": "<p>Currently, with Browser apps, the private key is either stored by an extension or by the app itself which are not safe in both ways</p>",
        "id": 444657500,
        "sender_full_name": "Albert",
        "timestamp": 1718357058
    },
    {
        "content": "<p>In mobile and desktop, keys are stored by the apps</p>",
        "id": 444657525,
        "sender_full_name": "Albert",
        "timestamp": 1718357070
    },
    {
        "content": "<p>So, if you use the same key on many apps, you increase the danger of a key exposure</p>",
        "id": 444657577,
        "sender_full_name": "Albert",
        "timestamp": 1718357091
    },
    {
        "content": "<p>It's not like a blockchain that if you expose your key, you just transfer your fund as quick as possible to a new key</p>",
        "id": 444657687,
        "sender_full_name": "Albert",
        "timestamp": 1718357132
    },
    {
        "content": "<p>It's social media, if you expose your key, your identity is compromised forever</p>",
        "id": 444657745,
        "sender_full_name": "Albert",
        "timestamp": 1718357153
    },
    {
        "content": "<p>The user can generate a new key and start fresh but all the historical data is now accessible by the theft</p>",
        "id": 444657849,
        "sender_full_name": "Albert",
        "timestamp": 1718357185
    },
    {
        "content": "<p>With a Roc platform, I can minimize the attack surface</p>",
        "id": 444657918,
        "sender_full_name": "Albert",
        "timestamp": 1718357213
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"669503\">Albert</span> <a href=\"#narrow/stream/302903-Writing-a-platform/topic/How.20to.20write.20a.20platform/near/444656509\">said</a>:</p>\n<blockquote>\n<p>Is glue compiled to the host or to the app binary?</p>\n</blockquote>\n<p>Glue is a feature of the roc cli that provides all of the Roc types for a given platform. So we can write plugins that code gen the equivalent host code to interface with the platform. I.e. have a glue plugin that will code generate rust code implmentation for that specific platform. </p>\n<p>But it's a WIP and generally not very mature right now.</p>",
        "id": 444657922,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1718357215
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/302903-Writing-a-platform/topic/How.20to.20write.20a.20platform/near/444657922\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"669503\">Albert</span> <a href=\"#narrow/stream/302903-Writing-a-platform/topic/How.20to.20write.20a.20platform/near/444656509\">said</a>:</p>\n<blockquote>\n<p>Is glue compiled to the host or to the app binary?</p>\n</blockquote>\n<p>Glue is a feature of the roc cli that provides all of the Roc types for a given platform. So we can write plugins that code gen the equivalent host code to interface with the platform. I.e. have a glue plugin that will code generate rust code implmentation for that specific platform. </p>\n<p>But it's a WIP and generally not very mature right now.</p>\n</blockquote>\n<p>I still don't get it but I will learn more LOL</p>",
        "id": 444658047,
        "sender_full_name": "Albert",
        "timestamp": 1718357261
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"669503\">Albert</span> <a href=\"#narrow/stream/302903-Writing-a-platform/topic/How.20to.20write.20a.20platform/near/444657918\">said</a>:</p>\n<blockquote>\n<p>With a Roc platform, I can minimize the attack surface</p>\n</blockquote>\n<p>Having key management built-in to the platform is separated from a GUI platform</p>",
        "id": 444658163,
        "sender_full_name": "Albert",
        "timestamp": 1718357301
    },
    {
        "content": "<p>Having a GUI platform is the 1st step, then I can import the GUI platform as a library and build key management on top of it</p>",
        "id": 444658279,
        "sender_full_name": "Albert",
        "timestamp": 1718357345
    },
    {
        "content": "<p>It's like Ark forks Chromium</p>",
        "id": 444658308,
        "sender_full_name": "Albert",
        "timestamp": 1718357357
    },
    {
        "content": "<p>However, I am not sure if I should choose Rust or Zig</p>",
        "id": 444658408,
        "sender_full_name": "Albert",
        "timestamp": 1718357395
    },
    {
        "content": "<p>Rust should be safer to write considering that this platform will load arbitrary Roc code</p>",
        "id": 444658533,
        "sender_full_name": "Albert",
        "timestamp": 1718357427
    },
    {
        "content": "<p>The use case is to dynamically load remote Roc code instead of compiling into the same binary</p>",
        "id": 444658579,
        "sender_full_name": "Albert",
        "timestamp": 1718357448
    },
    {
        "content": "<p>Similar to <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> 's idea of writing editor extensions in Roc</p>",
        "id": 444658631,
        "sender_full_name": "Albert",
        "timestamp": 1718357466
    },
    {
        "content": "<p>If we do a good job, we can support both compilation mode (like electron) and dynamic mode (like browser)</p>",
        "id": 444658756,
        "sender_full_name": "Albert",
        "timestamp": 1718357515
    },
    {
        "content": "<p>Then we can get rid of both React Native and Flutter</p>",
        "id": 444658902,
        "sender_full_name": "Albert",
        "timestamp": 1718357558
    },
    {
        "content": "<p>Another approach is to write native apps using SwiftUI, or Kotlin and then use roc as a plugin. Using the same API would mean the roc parts can be identical, and defer mobile platform specific things to the platform.</p>",
        "id": 444659200,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1718357654
    },
    {
        "content": "<p>Developing the platform in a mature ecosystem like Swift will be a nice experience. I've got a template platform for Swift and it works nicely.</p>",
        "id": 444659355,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1718357702
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/302903-Writing-a-platform/topic/How.20to.20write.20a.20platform/near/444659200\">said</a>:</p>\n<blockquote>\n<p>Another approach is to write native apps using SwiftUI, or Kotlin and then use roc as a plugin. Using the same API would mean the roc parts can be identical, and defer mobile platform specific things to the platform.</p>\n</blockquote>\n<p>If I can keep 90%+ of my code in Roc and just interfacing Kotlin or Swift platforms, that's also good</p>",
        "id": 444659595,
        "sender_full_name": "Albert",
        "timestamp": 1718357764
    },
    {
        "content": "<p>I am not familiar with mobile so desktop platforms will be my 1st target. I need</p>\n<ol>\n<li>http request (which the cli platform already has)</li>\n<li>websocket</li>\n<li>GUI (very challenging)</li>\n<li>cryptography</li>\n<li>storage (like a built-in database, the SQLite demo was nice. But I might need to implement my own database on top of a KV )</li>\n</ol>\n<p>so, maybe I can start to add websocket to the CLI platform to learn</p>",
        "id": 444661823,
        "sender_full_name": "Albert",
        "timestamp": 1718358538
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> said there was no cross-platform Roc app. Can I interpret it as that if I want cross platform Roc. I can wirte the shared part as a Roc library and 2 separate Roc app that interface the platform IO and just import the Roc library?</p>",
        "id": 444662455,
        "sender_full_name": "Albert",
        "timestamp": 1718358737
    },
    {
        "content": "<p>This design force the coder to push IO/Side Effects to the most outside of the system</p>",
        "id": 444662534,
        "sender_full_name": "Albert",
        "timestamp": 1718358768
    },
    {
        "content": "<p>What about async code? Can I have async code in a Roc library because it's an effect?</p>",
        "id": 444662636,
        "sender_full_name": "Albert",
        "timestamp": 1718358805
    },
    {
        "content": "<p>If your interested in how cross-platform could work, and looking for a larger and more mature example, checkout <a href=\"https://github.com/imclerran/roc-start\">imclerran/roc-start</a>. That's a nicely written roc app that runs on all of the targets supported by basic-cli, so currently linux/macos OS and x64/arm64 ARCH. The basic-cli platform provides pre-built binaries for various OS/ARCHs so the same roc app can run on all of those without needing to change anything. Indeed, it's easy to cross-compile from a macos to build a binary for linux using just the roc cli.</p>",
        "id": 444664892,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1718359541
    },
    {
        "content": "<p>E.g <code>roc build --target=linux-x86 src/main.roc</code></p>",
        "id": 444665040,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1718359590
    },
    {
        "content": "<blockquote>\n<p>What about async code? Can I have async code in a Roc library because it's an effect?</p>\n</blockquote>\n<p>Others are welcome to correct me, but I believe that will be possible once Task is a builtin. <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> What are the blockers on that? I could not find a tracking issue.</p>",
        "id": 444715972,
        "sender_full_name": "Anton",
        "timestamp": 1718376422
    },
    {
        "content": "<p>Not just task as a built-in, needs the full effect interpreters setup.</p>\n<p>Theoretically it could be manually done today (I did it with some future testing, but it is not a nice experience)</p>",
        "id": 444727604,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718379623
    },
    {
        "content": "<p>A few random other answers:</p>\n<ol>\n<li>A platform has roc code in it cause it needs to define the API between roc and the underly language. It also is allowed to define arbitrary roc libraries.</li>\n<li>Pure roc layout logic is not required for any of this. Might be nice to have, but layout logic can be manually done or dealt with in the platform. Doing it purely in roc could help with consistency across devices. This is especially true if building multiple device specific platforms.</li>\n<li>While this project could probably be forced in current day roc, I honestly believe we are early for this project. That said, if you are willing to force it, or will to also help contribute to fixes in the compiler you need, definitely in the realm of doable.</li>\n<li>Glue generates code in the host language that helps deal with ffi from the host to the app.</li>\n</ol>",
        "id": 444730581,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718380370
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/302903-Writing-a-platform/topic/How.20to.20write.20a.20platform/near/444730581\">said</a>:</p>\n<blockquote>\n<p>A few random other answers:</p>\n<ol>\n<li>A platform has roc code in it cause it needs to define the API between roc and the underly language. It also is allowed to define arbitrary roc libraries.</li>\n<li>Pure roc layout logic is not required for any of this. Might be nice to have, but layout logic can be manually done or dealt with in the platform. Doing it purely in roc could help with consistency across devices. This is especially true if building multiple device specific platforms.</li>\n<li>While this project could probably be forced in current day roc, I honestly believe we are early for this project. That said, if you are willing to force it, or will to also help contribute to fixes in the compiler you need, definitely in the realm of doable.</li>\n<li>Glue generates code in the host language that helps deal with ffi from the host to the app.</li>\n</ol>\n</blockquote>\n<p>I guess I should just start with adding some dumb APIs to the Rust template and get a feel with Roc</p>",
        "id": 444748908,
        "sender_full_name": "Albert",
        "timestamp": 1718384887
    },
    {
        "content": "<p>Yeah..or as you said, add websockets to basic cli</p>",
        "id": 444750301,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718385337
    },
    {
        "content": "<p>What is a <code>effect interpreter</code> ?</p>",
        "id": 444946047,
        "sender_full_name": "Albert",
        "timestamp": 1718518278
    },
    {
        "content": "<p><a href=\"https://github.com/lukewilliamboswell/roc-platform-template-rust/blob/9e445264138f75477121ff6f1caf2cc1c250fdaa/platform/Stdout.roc#L2\">https://github.com/lukewilliamboswell/roc-platform-template-rust/blob/9e445264138f75477121ff6f1caf2cc1c250fdaa/platform/Stdout.roc#L2</a></p>",
        "id": 444946420,
        "sender_full_name": "Albert",
        "timestamp": 1718518679
    },
    {
        "content": "<p>This syntax <code>module [line, Err]</code> is not described in <a href=\"https://www.roc-lang.org/tutorial#modules\">https://www.roc-lang.org/tutorial#modules</a></p>",
        "id": 444946470,
        "sender_full_name": "Albert",
        "timestamp": 1718518698
    },
    {
        "content": "<p>That's the difference between <code>module [name]</code>, <code>exposes [name]</code> and <code>exposing [name]</code>?</p>",
        "id": 444946519,
        "sender_full_name": "Albert",
        "timestamp": 1718518750
    },
    {
        "content": "<p>That syntax is just a regular module <a href=\"https://www.roc-lang.org/tutorial#regular-modules\">https://www.roc-lang.org/tutorial#regular-modules</a></p>",
        "id": 444947362,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1718519497
    },
    {
        "content": "<p>Unfortunately that part of the tutorial needs some love <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 444947364,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1718519509
    },
    {
        "content": "<p>An effect interpreter is a large upgrade to roc that has been in development for some time. It will change the way the host in the platform is written and enable fully async execution of effects.</p>",
        "id": 444947424,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1718519559
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/302903-Writing-a-platform/topic/How.20to.20write.20a.20platform/near/444947364\">said</a>:</p>\n<blockquote>\n<p>Unfortunately that part of the tutorial needs some love <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>\n</blockquote>\n<p>LOL</p>",
        "id": 444947811,
        "sender_full_name": "Albert",
        "timestamp": 1718519942
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/302903-Writing-a-platform/topic/How.20to.20write.20a.20platform/near/444947424\">said</a>:</p>\n<blockquote>\n<p>An effect interpreter is a large upgrade to roc that has been in development for some time. It will change the way the host in the platform is written and enable fully async execution of effects.</p>\n</blockquote>\n<p>Is this related to that host API implementations are not async at the moment?</p>",
        "id": 444947834,
        "sender_full_name": "Albert",
        "timestamp": 1718519973
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/basic-cli/blob/307f1f91d984ac966cca75a40d403bdced1f05a6/platform/src/lib.rs#L632\">https://github.com/roc-lang/basic-cli/blob/307f1f91d984ac966cca75a40d403bdced1f05a6/platform/src/lib.rs#L632</a></p>\n<p>For example, I am looking at the http request implementation of basic cli</p>",
        "id": 444947843,
        "sender_full_name": "Albert",
        "timestamp": 1718519991
    },
    {
        "content": "<p>Is host API execution blocking at the moment?</p>",
        "id": 444947900,
        "sender_full_name": "Albert",
        "timestamp": 1718520015
    },
    {
        "content": "<p>Is there an article or design draft of  effect interpreter that I can read?</p>",
        "id": 444947919,
        "sender_full_name": "Albert",
        "timestamp": 1718520040
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/0MTNiGiZdz08Q48LR50u3KsF/image.png\">image.png</a><br>\nIs this code also the code used in the Roc compiler or written only for platform development purpose?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/0MTNiGiZdz08Q48LR50u3KsF/image.png\" title=\"image.png\"><img src=\"/user_uploads/22008/0MTNiGiZdz08Q48LR50u3KsF/image.png\"></a></div>",
        "id": 444948095,
        "sender_full_name": "Albert",
        "timestamp": 1718520206
    },
    {
        "content": "<p>Mostly for platform development, but the roc compiler uses it in some places</p>",
        "id": 444991658,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718554981
    },
    {
        "content": "<p>And yeah, lack of effect interpreters is why every effect is synchronous currently</p>",
        "id": 444991707,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718555011
    },
    {
        "content": "<p>Is parallelism also the decision of the platform?</p>",
        "id": 445055891,
        "sender_full_name": "Albert",
        "timestamp": 1718601569
    },
    {
        "content": "<p>Yes</p>",
        "id": 445057332,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718602793
    },
    {
        "content": "<p>For example, basic webserver is automatically multi threaded, but gives the requests no control over concurrency.</p>",
        "id": 445057444,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718602870
    },
    {
        "content": "<p>Long term, it will likely support better async effects, but it might never support spawning arbitrary threads</p>",
        "id": 445057468,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718602894
    },
    {
        "content": "<p>Basic CLI on the other hand is single threaded by default but plans to support spawning tasks that can run in parallel (multi threaded communication architecture unclear at the moment)</p>",
        "id": 445057539,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718602950
    },
    {
        "content": "<blockquote>\n<p>Is there an article or design draft of  effect interpreter that I can read?</p>\n</blockquote>\n<p>Do we have a google doc for this <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span>?</p>",
        "id": 445092389,
        "sender_full_name": "Anton",
        "timestamp": 1718617157
    },
    {
        "content": "<p>hm I don’t think so!</p>",
        "id": 445124642,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1718628469
    },
    {
        "content": "<p>You would really think after all of this discussion in various threads that we would have something written up.</p>",
        "id": 445160553,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718637943
    },
    {
        "content": "<p>I guess the only write up is the small summary here: <a href=\"https://www.roc-lang.org/plans\">https://www.roc-lang.org/plans</a></p>",
        "id": 445160601,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718637952
    },
    {
        "content": "<p>The name \"interpreter\" does not convey what it does under the hood</p>",
        "id": 445253640,
        "sender_full_name": "Albert",
        "timestamp": 1718674010
    },
    {
        "content": "<p>It is essentially a standard async state machine. The reason for the word \"interpreter\" is that the platform is essentially implementing an interpreter to run the state machine that executes roc code and effects.</p>",
        "id": 445258972,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718677854
    },
    {
        "content": "<p>What is the Rust representation of a Roc record in the basic-cli?</p>",
        "id": 445771910,
        "sender_full_name": "Albert",
        "timestamp": 1718866921
    },
    {
        "content": "<p>If you have the following Roc record</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">MyRecord</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nv\">age</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">I64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nv\">name</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>In rust this would be</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[repr(C)]</span>\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">MyRecord</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">age</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">roc_std</span><span class=\"p\">::</span><span class=\"n\">RocStr</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 445783063,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1718870682
    },
    {
        "content": "<p>fields are sorted alphabetically</p>",
        "id": 445783226,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1718870735
    },
    {
        "content": "<p>So I simply return a <code>RocResult&lt;MyRecord, RocError&gt;</code> in the rust platform lib?</p>",
        "id": 445788007,
        "sender_full_name": "Albert",
        "timestamp": 1718872187
    },
    {
        "content": "<p>I'm not sure what you are doing, but that looks ok to me.</p>",
        "id": 445788189,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1718872250
    },
    {
        "content": "<p>I think, that the fields are not only sorted alphabetically, but also be size in memory. If I am correct, then \"name\" will be before \"age\".</p>",
        "id": 445797520,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1718874893
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/302903-Writing-a-platform/topic/How.20to.20write.20a.20platform/near/445788189\">said</a>:</p>\n<blockquote>\n<p>I'm not sure what you are doing, but that looks ok to me.</p>\n</blockquote>\n<p>I am trying to expand the file API of the basic cli to return metadata of the file as well</p>",
        "id": 445881013,
        "sender_full_name": "Albert",
        "timestamp": 1718897412
    },
    {
        "content": "<p>It can be a useful small tool to check duplicated files</p>",
        "id": 445881175,
        "sender_full_name": "Albert",
        "timestamp": 1718897461
    },
    {
        "content": "<p>They are sorted by alignment and name.</p>\n<p><code>age</code> -&gt; <code>i64</code>, aligned to 8 bytes<br>\n<code>name</code> -&gt; <code>Str</code>, aligned to 8 bytes as well (cause it is a pointer and 2 <code>i64</code>s)</p>\n<p>So should be <code>age</code> then <code>name</code>.</p>",
        "id": 445954696,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718917959
    },
    {
        "content": "<p>Do we have a file people can check to find the alignment for a type?</p>",
        "id": 446057689,
        "sender_full_name": "Anton",
        "timestamp": 1718967182
    }
]