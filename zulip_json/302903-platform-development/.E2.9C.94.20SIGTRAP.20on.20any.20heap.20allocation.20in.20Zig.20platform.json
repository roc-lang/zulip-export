[
    {
        "content": "<p>Total shot in the dark, but <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span>, was wondering if you have encountered this while working on roc-ray when it's host was still using Zig 0.13.</p>\n<p>I've been trying to write my own host with Zig 0.13 (stealing some of your code <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>). When I try to do any kind of heap allocation from the host <code>main.zig</code>, when I run a sample application against that host it crashes on that allocation with a SIGTRAP.</p>\n<p>I've been trying to different types of allocators, different types of data allocated, different places to perform the allocation (including right at the start of <code>main</code> before calling out to Roc), noe of it seems to make a difference. I noticed that roc-ray used a GeneralPurposeAllocator as well so I was hoping you might have run into the same problem before and found a way to solve it.</p>\n<p>I tried to build that version of roc-ray myself to see if I would run into the same problem there, but ran into a problem truying to build it (it can't find libx11, probably a side-effect of me being on NixOS and no dynamic libraries being around). I'll try that again, wanted to ask if you've seen the error before first.</p>",
        "id": 477688212,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1729267750
    },
    {
        "content": "<p>worst case can try malloc from libc?</p>",
        "id": 477692027,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729269141
    },
    {
        "content": "<p>also <code>lldb</code> or <code>gdb</code> or <code>valgrind</code> is likely your friend here</p>",
        "id": 477692739,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729269398
    },
    {
        "content": "<p>Thanks! I've tried valgrind already but it didn't tell me anything. Will give <code>lldb</code> and/or <code>gdb</code> a try!</p>",
        "id": 477695946,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1729270757
    },
    {
        "content": "<p>I haven't seen this specifically, but it sounds like a familiar experience. How do you know it's related to allocation? that seems strange to me. </p>\n<p>Can you strip things back and isolate it somehow?</p>",
        "id": 477712149,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729277499
    },
    {
        "content": "<p>Thanks!</p>\n<blockquote>\n<p>How do you know it's related to allocation? that seems strange to me.</p>\n</blockquote>\n<p>Yeah, super weird. Pretty sure that's it though, the platform runs fine, creating an allocator is fine, but when I use an allocator then the line on which I do is the last one that runs.</p>",
        "id": 477714059,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1729278269
    },
    {
        "content": "<p>What is your mainForHost api? Also do you have any effects/hosted modules?</p>",
        "id": 477714369,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729278388
    },
    {
        "content": "<p>mainForHost is <code>mainForHost : Task {} I32 as Fx</code> and I have an effect module. I still see the behavior if I I don't call <code>mainForHost</code> and remove all my effects, just having an allocation happen in my <code>main.zig</code> file. I think it must be an interaction with some of the Roc helpers imported and/or linked in.</p>\n<p>Anyway, didn't mean to rope you into debugging, was just  curious if happened to know the answer of the top of your head. I'll investigate a bit more and report back if I learn anything interesting. Thank you both!</p>",
        "id": 477715815,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1729279015
    },
    {
        "content": "<p>You're using zig 0.13.0 and the builtins copied from that upgrade branch?</p>",
        "id": 477716003,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729279097
    },
    {
        "content": "<p>Therr could be an issue in there, we haven't landed and extensively used the zig 0.13 builtins.</p>",
        "id": 477716078,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729279141
    },
    {
        "content": "<p>I think I've got the helpers from the last roc-ray commit before you migrated it to rust, can double-check though.</p>",
        "id": 477716258,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1729279216
    },
    {
        "content": "<p>Sounds good. Just wanted to clarify</p>",
        "id": 477716621,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729279379
    },
    {
        "content": "<p>Yeah running through a debugger would be helpful here I think.</p>",
        "id": 477716715,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729279423
    },
    {
        "content": "<p>Ohhh, fun fact, when I run <code>dynhost</code> directly that works. But when I run an app making use of the in progress platform then I get the error. Just if I try an allocation in the Zig platform though, if I take that out the app runs fine, including the basic effects I have in place. So maybe it's a linking problem?</p>",
        "id": 477717434,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1729279722
    },
    {
        "content": "<p>It's hard to follow, there's so many different configurations for how you could have set up the host and roc. It sounds like your building a surgical host and preprocessing it, and then using the surgical linker? </p>\n<p>If you have linked roc in as a dynamic library and build an executable using zig, and it works well, but then fails later it could be a surgical linker bug.</p>",
        "id": 477718795,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729280287
    },
    {
        "content": "<p>I believe that's what I'm doing, but I'm not super familiar with all the options so I could be wrong.</p>\n<p>I build roc using <code>build --lib platform/libapp.roc --output libapp.so</code><br>\nThen I build a zig executable using <code>zig build</code>, linked to <code>libapp.so</code> and <code>libc</code>. I rename the resulting file <code>dynhost</code> and copy it into <code>platform/</code>.<br>\nThen I run <code>roc preprocess-host dynhost platform/main.roc platform/libapp.so</code>. This produces two additional files.</p>\n<p>Getting real crowded in <code>platform/</code> now with these files besides some roc modules:</p>\n<div class=\"codehilite\"><pre><span></span><code>dynhost\nlibapp.roc\nlibapp.so\nlinux-x64.rh\nmain.roc\nmetadata_linux-x64.rm\n</code></pre></div>\n<p>Then I <code>roc run</code> a platform file containing this header:</p>\n<div class=\"codehilite\"><pre><span></span><code>app [main] { pf: platform &quot;../zig-out/platform/main.roc&quot; }\n</code></pre></div>",
        "id": 477724481,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1729280757
    },
    {
        "content": "<p>Yeah, this is how you build a surgical host</p>",
        "id": 477724925,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729280954
    },
    {
        "content": "<p>The dynhost is just a normal executable.. and it runs fine? but then it fails building another app... which might suggest something fishy with surgical linking.</p>",
        "id": 477725038,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729281007
    },
    {
        "content": "<p>You can try and build a legacy host instead (or as well)</p>",
        "id": 477725111,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729281043
    },
    {
        "content": "<p>Thanks, will give it a try. And maybe I can reduce my error into a small reproducible example for a surgical linker bug report.</p>",
        "id": 477725622,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1729281268
    },
    {
        "content": "<p>With the legacy linker it worked! roc-ray again was a great example showing me how to do it. Thanks again for the help and the examples!</p>",
        "id": 477731164,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1729283767
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"477725\">Jasper Woudenberg</span> has marked this topic as resolved.</p>",
        "id": 477731512,
        "sender_full_name": "Notification Bot",
        "timestamp": 1729283934
    }
]