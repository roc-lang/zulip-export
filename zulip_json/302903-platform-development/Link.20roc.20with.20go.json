[
    {
        "content": "<p>The current way, I build roc with a go-platform is by first building roc in a <code>roc.o</code> file, and afterwards call <code>go build</code>.</p>\n<p>This has some problems. For example, it is not possible to publish the go-platform separately from the roc-application, since you always have to build the go code last.</p>\n<p>It would be nice to do it the other way around: First build the go code and afterwards link it together with roc.</p>\n<p>My only knowledge about linking is, that it combines binaries. But I don't know how it is done or what the requirements are. Until now, I only used languages, where linking was done automatically. </p>\n<p>When I naively call <code>roc build main.roc</code> (with the go-platoform), I get an error like: <code>failed to open file \"dynhost\".</code></p>\n<p>If I create this file with <code>go build -o dynhost</code>, and then run <code>roc build</code> again, I get: <code>Shared lib not found as a dependency of the executable</code>.</p>\n<p>Does anyone know, how this is possible or what terms I have to google?</p>",
        "id": 419085683,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1706720837
    },
    {
        "content": "<p>So only linux has the surgical linker currently, but it is the long term solution that Roc is betting on.</p>",
        "id": 419086089,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706720979
    },
    {
        "content": "<p>For your executable, <code>go build -o dynhost</code> is probably correct, but the app has to be changed slightly.</p>",
        "id": 419086220,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706721011
    },
    {
        "content": "<p>The go application has to be changed to dynamically link to <code>libapp.so</code> which would be a shared library that roc generates. Instead of statically linking to a <code>.o</code> file.</p>",
        "id": 419086349,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706721054
    },
    {
        "content": "<p>You can generate an empty library to link against with <code>roc gen-stub-lib</code></p>",
        "id": 419086471,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706721103
    },
    {
        "content": "<p>Or you can use a fully functional shared library with <code>roc build --lib</code></p>",
        "id": 419086503,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706721118
    },
    {
        "content": "<p>Once you have go attempting to dynamically load and depend on the roc app, the surgical linker can do the rest.</p>",
        "id": 419086662,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706721161
    },
    {
        "content": "<p>This sounds good. I only need support for linux.</p>\n<p>When I call <code>roc gen-stub-lib example/main.roc</code> (which is an example application), it creates a <code>libapp.so</code>. If I use this in go (<code>#cgo LDFLAGS: ./libapp.so -ldl</code>), then I get the errors like <code>/tmp/go-build/roc.cgo2.c:83:(.text+0x50): undefined reference to </code>roc__mainForHost_0_caller'`. It seems, that the roc function are not included.</p>\n<p>But there is no error for <code>roc__mainForHost_1_exposed_generic</code>.</p>\n<p>When I use <code>roc build --lib example/main.roc</code>, it creates a file <code>libapp.so.1.0</code>. When I use this file in go, I get the error: <code>invalid flag in #cgo LDFLAGS: ./libapp.so.1.0</code>.</p>\n<p>When I rename <code>libapp.so.1.0</code> to <code>libapp.so</code>, and use it with <code>go build -o dynhost</code>, then dynhost is created. But when I call <code>roc build example/main.roc</code>, I get the same error as in the beginning: <code>Shared lib not found as a dependency of the executable</code>.</p>",
        "id": 419089605,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1706722091
    },
    {
        "content": "<p>By the way, here is the code, but it is not presentable yet <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span>  <a href=\"https://github.com/normanjaeckel/Meier/tree/main/platform\">https://github.com/normanjaeckel/Meier/tree/main/platform</a></p>",
        "id": 419090147,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1706722262
    },
    {
        "content": "<blockquote>\n<p><code>undefined reference to roc__mainForHost_0_caller</code></p>\n</blockquote>\n<p>The symbol names did change at one point. Maybe that didn't get update for stub lib generation.</p>",
        "id": 419090249,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706722305
    },
    {
        "content": "<blockquote>\n<p>I call roc build example/main.roc, I get the same error as in the beginning: Shared lib not found as a dependency of the executable.</p>\n</blockquote>\n<p>Two more pieces. The host needs to be preprocessed...something like this:<br>\n<code>roc preprocess-host examples/main.roc</code></p>\n<p>If building locally, you need to use <code>--prebuilt-platform</code> currently. If you bundle it and upload it to a url, that flag is the default. So it should just work.</p>",
        "id": 419090934,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706722505
    },
    {
        "content": "<p><code>roc preprocess-host example/main.roc</code> also returns the error <code>Shared lib not found as a dependency of the executable</code>.</p>\n<p><code>roc build example/main.roc --prebuilt-platform</code> returns something like <code> I was expecting this file to exist:    example/../linux-x64.rh</code> which makes sense, when the first command failed.</p>",
        "id": 419091722,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1706722762
    },
    {
        "content": "<p>Are you sure that go actually linked to the shared library?</p>",
        "id": 419091808,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706722799
    },
    {
        "content": "<p>I have no idea what the term <code>shared libary</code> means or how I tell go to do something like that <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> I will google this.</p>",
        "id": 419091938,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1706722840
    },
    {
        "content": "<p>Try:</p>\n<div class=\"codehilite\"><pre><span></span><code>#cgo LDFLAGS: -L. -lapp\n</code></pre></div>",
        "id": 419092120,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706722922
    },
    {
        "content": "<p>Basically <code>-L</code> says search for libraries in the specified directory in this case <code>.</code>, but it should be whatever directory <code>libapp.so</code> is in.</p>\n<p><code>-l</code> say link to a library with some name. In this case <code>app</code> is the name.</p>",
        "id": 419092448,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706723032
    },
    {
        "content": "<p>This returns: </p>\n<div class=\"codehilite\"><pre><span></span><code>/usr/lib/go/pkg/tool/linux_amd64/link: running gcc failed: exit status 1\n/usr/bin/ld: cannot find -lapp: No such file or directory\ncollect2: error: ld returned 1 exit status\n</code></pre></div>\n<p>It returns  a similar error for <code>-llibapp</code> or <code>-libapp.so</code></p>",
        "id": 419093032,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1706723236
    },
    {
        "content": "<p>That probably means the <code>-L.</code> is wrong. The current directory according to go probably doesn't include <code>libapp.so</code>.</p>",
        "id": 419093319,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706723333
    },
    {
        "content": "<p>Ahh, I had the file in pwd. When I move the <code>libapp.so</code> file in the same directory, as the .go file, then I get a different error</p>",
        "id": 419093358,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1706723346
    },
    {
        "content": "<p>I don't have much time to look into this now, I but I can mess around with go linking on linux tonight if you don't figure it out before then. Figure out what actually is needed.</p>",
        "id": 419093522,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706723401
    },
    {
        "content": "<p>Now I get the errors, that <code>roc__mainForHost_0_caller</code> are not included.</p>",
        "id": 419093643,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1706723426
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/302903-Writing-a-platform/topic/Link.20roc.20with.20go/near/419093522\">said</a>:</p>\n<blockquote>\n<p>I don't have much time to look into this now, I but I can mess around with go linking on linux tonight if you don't figure it out before then. Figure out what actually is needed.</p>\n</blockquote>\n<p>That would be very nice. I inform you, if I find something out</p>",
        "id": 419093743,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1706723455
    },
    {
        "content": "<p>Thank you so far.</p>",
        "id": 419093795,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1706723467
    },
    {
        "content": "<p>I guess make sure you have the real library. It definitely should be defined in that. Should be in the stub lib too, but I would be a lot less surprised if that has a bug.</p>",
        "id": 419094817,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706723763
    },
    {
        "content": "<p>I thould, I did use <code>roc build --lib</code>, but probably was wrong. So here is, what I am currently doing after removing all the artifacts.</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>roc<span class=\"w\"> </span>build<span class=\"w\"> </span>--lib<span class=\"w\"> </span>--output<span class=\"w\"> </span>roc/libapp.so<span class=\"w\">  </span>example/main.roc\nmv<span class=\"w\"> </span>roc/libapp.so.1.0<span class=\"w\"> </span>roc/libapp.so\ngo<span class=\"w\"> </span>build<span class=\"w\"> </span>-o<span class=\"w\"> </span>dynhost\nroc<span class=\"w\"> </span>preprocess-host<span class=\"w\"> </span>example/main.roc\n</code></pre></div>\n<p>The last command returns <code>Shared lib not found as a dependency of the executable</code>.</p>",
        "id": 419096058,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1706724140
    },
    {
        "content": "<p>In the go file, I use <code>#cgo LDFLAGS: -L. -lapp</code></p>",
        "id": 419096188,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1706724194
    },
    {
        "content": "<p>Can you run <code>ldd</code> on the executable. I think that prints dynamic dependencies</p>",
        "id": 419097576,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706724670
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>ldd dynhost\n        linux-vdso.so.1 (0x00007ffff23e3000)\n        roc/libapp.so.1 =&gt; not found\n        libresolv.so.2 =&gt; /usr/lib/libresolv.so.2 (0x00007f75eee81000)\n        libc.so.6 =&gt; /usr/lib/libc.so.6 (0x00007f75eec9f000)\n        /lib64/ld-linux-x86-64.so.2 =&gt; /usr/lib64/ld-linux-x86-64.so.2 (0x00007f75eeebd000)\n</code></pre></div>",
        "id": 419097786,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1706724755
    },
    {
        "content": "<p>When I rename <code>roc/libapp.so</code> to <code>roc/libapp.so.1</code>, then it returns:</p>\n<div class=\"codehilite\"><pre><span></span><code>ldd dynhost\n        linux-vdso.so.1 (0x00007ffe605e0000)\n        roc/libapp.so.1 (0x00007f01a7a92000)\n        libresolv.so.2 =&gt; /usr/lib/libresolv.so.2 (0x00007f01a7a58000)\n        libc.so.6 =&gt; /usr/lib/libc.so.6 (0x00007f01a7876000)\n        libm.so.6 =&gt; /usr/lib/libm.so.6 (0x00007f01a7789000)\n        libgcc_s.so.1 =&gt; /usr/lib/libgcc_s.so.1 (0x00007f01a7764000)\n        /lib64/ld-linux-x86-64.so.2 =&gt; /usr/lib64/ld-linux-x86-64.so.2 (0x00007f01a7a9d000)\n</code></pre></div>",
        "id": 419097936,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1706724813
    },
    {
        "content": "<p>But <code>roc preprocess-host example/main.roc</code> still returns <code>Shared lib not found as a dependency of the executable</code></p>",
        "id": 419097991,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1706724833
    },
    {
        "content": "<p>Ah....our checks are too similar....</p>",
        "id": 419098007,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706724839
    },
    {
        "content": "<p>I think the surgical linker just checks for the name starting with <code>libapp</code></p>",
        "id": 419098089,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706724859
    },
    {
        "content": "<p>So not smart enough to remove the directory before it.</p>",
        "id": 419098116,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706724870
    },
    {
        "content": "<p>Next thing I tried was changing the LDFlags to: <code>LDFLAGS: -L.. -lapp</code></p>\n<p>This produces a binary with:</p>\n<div class=\"codehilite\"><pre><span></span><code>ldd dynhost\n        linux-vdso.so.1 (0x00007ffcb1d9a000)\n        libapp.so.1 =&gt; not found\n        libresolv.so.2 =&gt; /usr/lib/libresolv.so.2 (0x00007f1da79e0000)\n        libc.so.6 =&gt; /usr/lib/libc.so.6 (0x00007f1da77fe000)\n        /lib64/ld-linux-x86-64.so.2 =&gt; /usr/lib64/ld-linux-x86-64.so.2 (0x00007f1da7a1c000)\n</code></pre></div>\n<p>But I don't know why it can not find <code>libapp.so.1</code>. I copied the file from <code>libapp.so</code> to <code>libapp.so.1</code> as before, but this time, it can not find it</p>",
        "id": 419102808,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1706726620
    },
    {
        "content": "<p>For some reason, libapp.so.1  was not executable. After setting the bit, I now get</p>\n<div class=\"codehilite\"><pre><span></span><code>ldd dynhost\n        linux-vdso.so.1 (0x00007ffd4434b000)\n        libapp.so.1 =&gt; ./libapp.so.1 (0x00007f7b11c6f000)\n        libresolv.so.2 =&gt; /usr/lib/libresolv.so.2 (0x00007f7b11c35000)\n        libc.so.6 =&gt; /usr/lib/libc.so.6 (0x00007f7b1141e000)\n        libm.so.6 =&gt; /usr/lib/libm.so.6 (0x00007f7b11b48000)\n        libgcc_s.so.1 =&gt; /usr/lib/libgcc_s.so.1 (0x00007f7b11b23000)\n        /usr/lib64/ld-linux-x86-64.so.2 (0x00007f7b11c7a000)\n</code></pre></div>\n<p>But <code>roc preprocess-host main.roc</code> still returns <code>Shared lib not found as a dependency of the executable</code></p>",
        "id": 419105356,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1706727579
    },
    {
        "content": "<p>Sounds like our check may literally be for an exact match. This should be really easy to fix. Just a tiny bit of extra string processing in rust.</p>",
        "id": 419108133,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706728609
    },
    {
        "content": "<p>If you want to look into it. Probably search <code>libapp.so</code> in the linker folder.</p>",
        "id": 419108196,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706728636
    },
    {
        "content": "<p>I am already on it. It does not help, that I never wrote rust before <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span>  but I was already able to find out, how to debug print a value <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 419108357,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1706728696
    },
    {
        "content": "<p>The problem is not the <code>roc</code>-prefix, but the <code>.1</code>suffix</p>",
        "id": 419108751,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1706728842
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/blob/c63b6ca507fd401a94bde083c764e05054d9de08/crates/linker/src/elf.rs#L1024\">https://github.com/roc-lang/roc/blob/c63b6ca507fd401a94bde083c764e05054d9de08/crates/linker/src/elf.rs#L1024</a></p>\n<p>The value is <code>Some(\"libapp.so.1\")</code> but the expected value is <code>Some(\"libapp.so\")</code></p>",
        "id": 419109094,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1706728946
    },
    {
        "content": "<p>Do you know, why go adds the suffix?</p>",
        "id": 419109849,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1706729223
    },
    {
        "content": "<p>Ok. I am two steps farther. I change the line liked above to: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">Path</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">c_str</span><span class=\"p\">).</span><span class=\"n\">file_name</span><span class=\"p\">().</span><span class=\"n\">unwrap_or</span><span class=\"p\">(</span><span class=\"n\">OsStr</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"p\">)).</span><span class=\"n\">to_string_lossy</span><span class=\"p\">().</span><span class=\"n\">starts_with</span><span class=\"p\">(</span><span class=\"s\">\"libapp.so\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n</code></pre></div>\n<p>Now, <code>roc preprocess-host example/main.roc</code> creates the <code>.rh</code> and <code>.rm</code> files. And <code>roc build example/main.roc --prebuilt-platform</code>successfully builds something. But when I call <code>example/main</code>, I get </p>\n<div class=\"codehilite\"><pre><span></span><code>Segmentation fault (core dumped)\n</code></pre></div>",
        "id": 419112452,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1706730268
    },
    {
        "content": "<p>I repeated all the steps after removing all artifacts:</p>\n<div class=\"codehilite\"><pre><span></span><code>roc build --lib --output roc/libapp.so example/main.roc\nmv roc/libapp.so.1.0 roc/libapp.so\ncp roc/libapp.so roc/libapp.so.1\ngo build -o dynhost\nroc preprocess-host example/main.roc\nroc build example/main.roc --prebuilt-platform\n./example/main\n</code></pre></div>\n<p>Now, it returns: <code>./example/main: error while loading shared libraries: unexpected PLT reloc type 0x00</code></p>",
        "id": 419113148,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1706730620
    },
    {
        "content": "<p>When I change <code>go build -o dynhost</code> to <code>go build -o dynhost -buildmode=c-share</code>, then I get the <code>Segmentation fault (core dumped)</code> error. I don't know which error is closer to a correct result</p>",
        "id": 419116352,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1706732079
    },
    {
        "content": "<p>I tried the same with the <a href=\"https://github.com/roc-lang/examples/tree/main/examples/GoPlatform\">example GoPlatform</a> since it is much simpler. But I get the same error.</p>\n<p>I also used <code>patchelf --replace-needed libapp.so.1 libapp.so dynhost</code> instead of patching roc.</p>\n<p>And I looked at the dynhost generated by a zig-platform. There it also says: <code>libapp.so =&gt; not found</code>. So this does not seem to be the problem.</p>\n<p>But in the end, I always run into <code>Segmentation fault (core dumped)</code> and I don't know how to debug farther.</p>",
        "id": 419137305,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1706741178
    },
    {
        "content": "<p>It may just be that the go runtime and all it's threading fun is doing something the surgical linker doesn't handle correctly</p>",
        "id": 419138273,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706741632
    },
    {
        "content": "<p>I'll try to take a look when I have time</p>",
        "id": 419138294,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706741642
    }
]