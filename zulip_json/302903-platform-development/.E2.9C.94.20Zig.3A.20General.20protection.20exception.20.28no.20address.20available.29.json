[
    {
        "content": "<p>I ran into an memory error in a zig platform.</p>\n<p>The roc code that is running is with lukes <a href=\"https://github.com/lukewilliamboswell/roc-parser\">roc-parser</a>. The smallest example I could build is:</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>import parser.Parser exposing [many, map, sepBy]\nimport parser.String exposing [parseStr, codeunit, codeunitSatisfies]\n\npart1 : Str -&gt; Result Str _\npart1 = \\_rawInput -&gt;\n    input = \"XXX\"\n    _ = parseStr puzzleParser input\n    Err TODO\n\npuzzleParser =\n    lineParser |&gt; sepBy (codeunit 'X')\n\nlineParser =\n    many symbolParser\n\nsymbolParser =\n    codeunitSatisfies (\\c -&gt; c != 'X') |&gt; map \\_ -&gt; Other\n</code></pre></div>\n<p>When I run this, the platform crashes with the message <code>General protection exception (no address available)</code>. I don't know what that means.</p>\n<p>I also get a traceback. The top most functions are:</p>\n<div class=\"codehilite\"><pre><span></span><code>./roc_app:0:0: 0x5be3cba551d4 in #Attr_#inc_3 (roc_app)\n./roc_app:0:0: 0x5be3cba54793 in List_prepend_2cc6e6d3c5a48a76ea218c439d44b6318e7bd267419a22dcb25b258a2c06a (roc_app)\n./roc_app:0:0: 0x5be3cba531ff in Parser_82_d0954aeb42c3a999750fa5b4068c6679ed2537c3257fc7e6c4e91bdc4133ae0 (roc_app)\n./roc_app:0:0: 0x5be3cba540db in Result_map_8acb95ddb9a746c2bf4dc0f4f96ce3b3e1f1e4f2559e7641b193db1f161d1c41 (roc_app)\n</code></pre></div>\n<p>I think, it is this line from the parser package: <a href=\"https://github.com/lukewilliamboswell/roc-parser/blob/327ae1c3f59fc998390e1ce201e1f79ac53ba98f/package/Parser.roc#L360\">https://github.com/lukewilliamboswell/roc-parser/blob/327ae1c3f59fc998390e1ce201e1f79ac53ba98f/package/Parser.roc#L360</a></p>\n<p>What does <code>#Attr_#inc_3</code> mean? Can I assume, that this is from inside the builtins? </p>\n<p>It seems to have something to do with my allocator. I am using a zig allocator and not C.alloc. If I switch to C.alloc, everything works. But I don't understand what I am doing differently. I tried to set the alignment to always <code>16</code>, but this did not help.</p>\n<p>I have no idea, how to debug this further. Do you have any idea?</p>",
        "id": 486143861,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1733333061
    },
    {
        "content": "<p>One other think. I am using zig 0.13. For the builtins in my host code, I am using the builtins from this <a href=\"https://github.com/roc-lang/roc/pull/6921\">PR</a>. But I don't think that that this is relevant, since all the data is allocated inside roc and not from the platform.</p>",
        "id": 486146029,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1733333836
    },
    {
        "content": "<p>I think I found the bug. But I have to test it. I am am away for some hours. I report later</p>",
        "id": 486149110,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1733334904
    },
    {
        "content": "<p>running it with valgrind can help provide additional info</p>",
        "id": 486151812,
        "sender_full_name": "Anton",
        "timestamp": 1733335793
    },
    {
        "content": "<p>It's trying to increment a refcount</p>",
        "id": 486161153,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733339402
    },
    {
        "content": "<p>Either of the list itself or an element</p>",
        "id": 486161231,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733339422
    },
    {
        "content": "<p>Ok. I found the bug. And after I saw it, it is painful, that I even started this thread...</p>\n<p>For the zig allocator, I have to save the size of each allocation, because allocator.free() functions requires it, and roc does not provide it.</p>\n<p>Therefore I allocate a bit more memory and safe the size before the actual memory.</p>\n<p>This works for roc_alloc. But for roc_realloc, I returned the pointer to my size-value instead of the pointer to the actual memory. The fix was as simple as changing <code>return new_slice.ptr</code> to <code>return new_slice.ptr + alignment</code>.</p>",
        "id": 486189307,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1733351033
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"496321\">Oskar Hahn</span> has marked this topic as resolved.</p>",
        "id": 486189323,
        "sender_full_name": "Notification Bot",
        "timestamp": 1733351040
    },
    {
        "content": "<p>Nice. I'm glad you found it. That zig allocator is really helpful for zig platforms. <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 486200476,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733357083
    }
]