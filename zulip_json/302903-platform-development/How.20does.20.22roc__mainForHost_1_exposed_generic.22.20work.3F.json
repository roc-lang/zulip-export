[
    {
        "content": "<p>Hello experts. I'm trying to understand how to write a zig platform.<br>\nI'm able to get the zig platform example to work but I'm having troubles figuring out what is exported by roc and how to use it from zig. Basically what should I put in my main (zig) function if my main (roc) function is not just a string, but a more complex type?</p>\n<p>To start, I copied the bare minimum of types and functions from the basic cli platform to be able to write a \"hello world\" type of program with effects and tasks. So basically I copied Effect, Task, InternalTask, and Stdout and commented out most of them.</p>\n<p>My platform expects a type \"Task {} [Exit I32]_\"   as it is a copy of the basic cli platform and my main.roc program is main = Stdout.line \"test\". And my host.zig is basically the same as in the switching platforms example.</p>\n<p>After running roc build --lib and inspecting the <a href=\"http://main.so\">main.so</a> object I can see there are a few functions:</p>\n<p>roc__mainForHost_0_caller<br>\nroc__mainForHost_0_result_size<br>\nroc__mainForHost_0_size<br>\nroc__mainForHost_1_exposed<br>\nroc__mainForHost_1_exposed_size<br>\nroc__mainForHost_1_exposed_generic</p>\n<p>but how should these be used? what are their arguments and return types? Which one should I call to run the main function of my roc program?</p>\n<p>The examples I have found all have different functions. (I have looked at the travisstaloch/roc-cli-platform-zig  and lukewilliamboswell/roc-ray repos at github)</p>\n<p>Any help is much appreciated!</p>",
        "id": 435340464,
        "sender_full_name": "2uf56sqf at_duck",
        "timestamp": 1714034434
    },
    {
        "content": "<p>Hi there. I think platform development is great fun.</p>\n<p>I've written a little about it at <a href=\"https://lukewilliamboswell.github.io/roc-ray-experiment/\">https://lukewilliamboswell.github.io/roc-ray-experiment/</a></p>",
        "id": 435347766,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714037080
    },
    {
        "content": "<p>The experience can be challenging at the moment as things are undocumented and still in development, but still fun to learn and tinker with.</p>",
        "id": 435348276,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714037252
    },
    {
        "content": "<p>To answer your question more specifically you might find it helpful to generate the LLVM using something like <code>roc build --emit-llvm-ir --no-link examples/gui-counter.roc</code></p>",
        "id": 435348505,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714037337
    },
    {
        "content": "<p>Then you can see the implementation of what Roc is generating and will link with the platform prebuilt binaries. So you can see what the platform is going to recieve.</p>",
        "id": 435348615,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714037376
    },
    {
        "content": "<p>I would recommend starting with much simpler interface between roc and the zig host... like maybe a RocStr in the platform switching example.</p>",
        "id": 435349087,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714037532
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> , indeed it's a lot of fun. Thank you for taking the time to answer to me.<br>\n I have been looking at your code and the article you linked and they helped me a lot. Already took your advice and generated teh llvm-ir and that helped me get the arguments and return values (kind of... the best I can do is call almost everything *anyopaque).</p>\n<p>The thing I'm having issues is: The zig example in platforms-switching seems to suggest that the RocStr object is like an allocator or a space in memory that should be passed to roc__maingForHost... to be \"filled\" with the result of the main (roc) function and then that result is printed to stdout. Do I need to write a parser for the type my platform is returning on the zig side? this doesn't seem to be the case with other projects.<br>\nAlso, how did you decide which specific functions to call and how to use them? Do I need to make use of all of those functions or do they overlap in their functionality? </p>\n<p>Thanks again for stopping to answer these silly questions.</p>",
        "id": 435520651,
        "sender_full_name": "2uf56sqf at_duck",
        "timestamp": 1714111720
    },
    {
        "content": "<p>To me, as a beginner, the following was the key insight from <a href=\"https://lukewilliamboswell.github.io/roc-ray-experiment/#step3\">step 3</a> in Luke's article, which I think is relevant to the question here:</p>\n<blockquote>\n<p>Both of the functions in <code>ProgramForHost</code> provide a boxed representation of the app's <code>Model</code> to the host. Boxing the model stores the <code>Model</code> on the heap which enables roc to provide the host with an opaque pointer to the the <code>Model</code>.</p>\n<p>The platform is unable to know the size or shape of <code>Model</code>, as this is defined in the application and provided to the platform. The host receives a pointer to a <code>Model</code> by calling <code>init</code>, which it can then pass back to roc in a future call to <code>update</code>. This is how a roc application is able to retain the state between calls.</p>\n</blockquote>\n<p>Also, <code>*anyopaque</code> sounds like a step in the right direction, yes. But I'd let the more experienced members confirm and/or expand upon further on the topic.</p>",
        "id": 435528161,
        "sender_full_name": "Hristo",
        "timestamp": 1714115681
    },
    {
        "content": "<p>My understanding is limited, but I'll try and explain from my experience and previous zulip discussions. </p>\n<p>In future, you will be able to expose multiple functions that a host can use to call into Roc. For now, I think we only support one \"mainForHost\" function that the host can use to call Roc.</p>\n<p>The <code>roc__mainForHost_1_exposed_generic</code> takes two arguments, the first is a pointer to the return type, and the second is a pointer to the argument. It's generated by roc, so if in your <code>platform/main.roc</code> you use a different name or different type signature then the code that roc generates for that symbol may be named or behave differently. </p>\n<p>For example a <code>mainForHost: Str -&gt; U8</code> you might expect to see something like a <code>extern fn roc__mainForHost_1_exposed_generic(u8, *RocStr) void;</code></p>\n<p>Or for <a href=\"https://github.com/lukewilliamboswell/basic-ssg\">basic-ssg</a> <code>mainForHost : Args -&gt; Task {} I32</code> you will have:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"cp\">#[link_name = </span><span class=\"s\">\"roc__mainForHost_1_exposed_generic\"</span><span class=\"cp\">]</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">roc_main</span><span class=\"p\">(</span><span class=\"n\">output</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">roc_args</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">roc_app</span>::<span class=\"n\">Args</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>For now (I think the idea is for more in future) roc can only generate 1 entry-point, which is a way for the host to call into roc code. So where you want a platform to expose multiple functions to the host we do this by returning a record that contains.</p>\n<p>e.g. for roc-ray we return a record (which will generate a struct) that contains those functions. </p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kt\">ProgramForHost</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">init</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Box</span><span class=\"w\"> </span><span class=\"kt\">Model</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">[]</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">update</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Box</span><span class=\"w\"> </span><span class=\"kt\">Model</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Box</span><span class=\"w\"> </span><span class=\"kt\">Model</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">[]</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"nf\">mainForHost</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">ProgramForHost</span>\n<span class=\"nf\">mainForHost</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">init</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">update</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"kr\">var</span><span class=\"w\"> </span><span class=\"n\">model</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">anyopaque</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">undefined</span><span class=\"p\">;</span>\n\n<span class=\"kr\">extern</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">roc__mainForHost_1_exposed_generic</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">anyopaque</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">callconv</span><span class=\"p\">(.</span><span class=\"n\">C</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">void</span><span class=\"p\">;</span>\n<span class=\"kr\">extern</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">roc__mainForHost_1_exposed_size</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">callconv</span><span class=\"p\">(.</span><span class=\"n\">C</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Init Task</span>\n<span class=\"kr\">extern</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">roc__mainForHost_0_caller</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">anyopaque</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">anyopaque</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">**</span><span class=\"n\">anyopaque</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">callconv</span><span class=\"p\">(.</span><span class=\"n\">C</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">void</span><span class=\"p\">;</span>\n<span class=\"kr\">extern</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">roc__mainForHost_0_size</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">callconv</span><span class=\"p\">(.</span><span class=\"n\">C</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Update Fn</span>\n<span class=\"kr\">extern</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">roc__mainForHost_1_caller</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">anyopaque</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">anyopaque</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">anyopaque</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">callconv</span><span class=\"p\">(.</span><span class=\"n\">C</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">void</span><span class=\"p\">;</span>\n<span class=\"kr\">extern</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">roc__mainForHost_1_size</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">callconv</span><span class=\"p\">(.</span><span class=\"n\">C</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Update Task</span>\n<span class=\"kr\">extern</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">roc__mainForHost_2_caller</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">anyopaque</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">anyopaque</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">**</span><span class=\"n\">anyopaque</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">callconv</span><span class=\"p\">(.</span><span class=\"n\">C</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">void</span><span class=\"p\">;</span>\n<span class=\"kr\">extern</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">roc__mainForHost_2_size</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">callconv</span><span class=\"p\">(.</span><span class=\"n\">C</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>Now this is more complicated as the host needs a way to know the size of things to handle captures. This is basically at the limit of my knowledge on the topic, so I usually ask for assistance from <span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span>  or <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> and others far more experience with low level programming.</p>\n<p>There is at least two significant changes planned here that I am aware of, the first is support for effect interpreters (enabling platforms to run things in async), and the second is <a href=\"https://github.com/roc-lang/roc/issues/6382\">switching to passed in allocators</a>.</p>\n<p>Now the other part is how Roc calls back into the host. That is done by functions that are exposed by the host and roc will link to. These are defined in the <code>Effect.roc</code> which is a special module of hosted type and will be removed in future with the effect interpreters change.</p>\n<p>So for example, if you see a signature like <code>setWindowSize : I32, I32 -&gt; Effect {}</code> the host will need to export a symbol that looks something like this.</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"kr\">export</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">roc_fx_setWindowSize</span><span class=\"p\">(</span><span class=\"n\">width</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">height</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">callconv</span><span class=\"p\">(.</span><span class=\"n\">C</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">raylib</span><span class=\"p\">.</span><span class=\"n\">SetWindowSize</span><span class=\"p\">(</span><span class=\"n\">width</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">height</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Or for a function like <code>stdoutLine : Str -&gt; Effect (Result {} Str)</code> the host will export somethin like, </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[no_mangle]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">roc_fx_stdoutLine</span><span class=\"p\">(</span><span class=\"n\">line</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">RocStr</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">RocResult</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">RocStr</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>For the types used by roc like <code>RocStr</code> and <code>RocList</code> you can find their implementations in <a href=\"https://github.com/roc-lang/roc/tree/main/crates/compiler/builtins/bitcode/src\">the builtins bitcode for zig</a> and <a href=\"https://github.com/roc-lang/roc/tree/main/crates/roc_std/src\">the roc_std crate for rust</a>. There are efforts in various states of completion to develop bindings for other languages too like <a href=\"https://github.com/roc-lang/roc/pull/6230\">C++</a>, <a href=\"https://github.com/roc-lang/roc/blob/main/examples/nodejs-interop/native-c-api/demo.c\">C</a>, <a href=\"https://github.com/roc-lang/examples/blob/main/examples/DotNetPlatform/platform/Program.cs\">C# dotnet</a>, <a href=\"https://github.com/roc-lang/roc/blob/main/examples/swiftui/platform/host.swift\">Swift</a>. </p>\n<p>Ultimately the best solution for these types is to use <code>roc glue</code> which enables someone to write a plugin for the roc compiler (which is just a roc app), that receives a data structure of all the Roc types for a given application and can code gen the required types for that language. </p>\n<p>If you have a Rust platform for example, you wouldn't hand roll the types for your Roc code, instead using the <code>roc glue</code> plugin it will generate a <code>roc_app</code> crate with all of these for you. While glue is definitely a WIP, I have used it a lot to generate code for example in basic-webserver.</p>\n<p>The types like <code>RocStr</code> are not necessarily straightforward to use even though they may look simple. So this is why using the generated types will be a nicer experience than writing these from scratch each time. </p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">RocStr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kr\">extern</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">str_bytes</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"p\">[</span><span class=\"o\">*</span><span class=\"p\">]</span><span class=\"kt\">u8</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">str_len</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">str_capacity</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> gave <a href=\"https://drive.google.com/file/d/1uhxZ8vRJ_4a-RPccTGN8CsB5yWLjmdD2/view?usp=sharing&amp;t=2494\">a nice overview of the List</a> type and explained how Roc uses various optimisations to make these fast and efficient.</p>\n<p>In future, I hope we can have a nice library of bindings for common languages that are widely tested and well supported. But for now, we have a WIP <code>RustGlue.roc</code> spec which is useful for getting started quickly.</p>",
        "id": 435528222,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714115713
    },
    {
        "content": "<p>Also, I want to mention that I have put a fair bit of work into the <a href=\"https://github.com/lukewilliamboswell/basic-ssg\">basic-ssg</a> platform this week. My goal was to cleanly separate out all the parts into modules/crates so that it is much easier to follow how things are built, and also test some ideas before doing the same changes to basic-cli and basic-webserver. </p>\n<p>The thing I like most there is how the rust \"host\" is split out into a crate instead of in the same folder as the roc \"platform\" code. </p>\n<p>It's a nice separation, because I think it's much easier to follow how these are separately compiled into static libraries and then linked together into an archive or \"prebuilt\" binary. These prebuilt binaries are what is package into the URL <code>.tar.br</code> files for releases like with basic-cli and used by the legacy linker. </p>\n<p>The surgical linker is a little different, in that the platform is actually given a stubbed version of a application object so it can be built into a fully completed executable binary. It's then processed a little, so that when the \"real\" application object is available from the application author, we can surgically swap out just the parts needed. Hence why surgical linking is so fast, but unfortunately only available for linux I think, as macos linking is hard and windows has a bug that causes everything to segfault.</p>",
        "id": 435530019,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714116395
    },
    {
        "content": "<p>I think the best way for now to know for sure what the types of all the parameters for the generated symbols for a specific platform is to generate the LLVM IR and inspect that. The generated functions are specific to that platform and change whenever the types change, i.e. changing the type of <code>mainForHost</code> by adding new arguments or a functions in the record etc.</p>\n<p>Or if you use the exact same type for <code>mainForHost</code> as another platform, you can just copy and paste that implementation and be good to go, i.e. copy basic cli if a single <code>Task</code>suits.</p>",
        "id": 435533327,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714117703
    }
]