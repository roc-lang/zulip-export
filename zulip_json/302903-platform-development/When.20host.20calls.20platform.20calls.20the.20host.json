[
    {
        "content": "<p>In working on my static site generator platform in Zig, I've a situation Zig code calls the platform, and the platform in turns runs an effect that calls back into Zig:</p>\n<div class=\"codehilite\"><pre><span></span><code>platform main  -&gt;  exposed host main  -&gt;  platform effect\n</code></pre></div>\n<p>I'd like my zig code in <code>platform main</code> to set some state that <code>platform effect</code> can use, Ideally without having to pass it through the host code because it would make the APIs for application authors much worse.</p>\n<p>My current approach is that <code>platform main</code> writes to a global var that <code>platform effect</code> can read out of. That's going to be good enough for a long while, but will fall down if I ever introduce threads, so I'm curious if folks have ideas on what a better approach would be. Again, I'm not blocked, just curious!</p>\n<p>Two possible answers that come to mind:</p>\n<ul>\n<li>Create/use some kind of per-thread storage and have platform code store/load data from that.</li>\n<li>Is this where effect handlers are goind to come in useful? I.e., when the platform initially calls into the host it will construct effect handlers for it that will have the shared context baked in?</li>\n</ul>",
        "id": 486756989,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1733653668
    },
    {
        "content": "<p>threadlocal certainly sounds easiest! It's like a global except just for the current thread:</p>\n<p><a href=\"https://ziglang.org/documentation/master/#Thread-Local-Variables\">https://ziglang.org/documentation/master/#Thread-Local-Variables</a></p>",
        "id": 486771020,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1733665357
    },
    {
        "content": "<p>Neat!</p>",
        "id": 486776885,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1733670219
    },
    {
        "content": "<p>There is the idea, that when you call into Roc, you have to pass in the allocator and all callbacks, for effects: <a href=\"https://github.com/roc-lang/roc/issues/6382\">https://github.com/roc-lang/roc/issues/6382</a></p>\n<p>With this feature, it will be possible to have the data in the function, that calls Roc.</p>",
        "id": 486777479,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1733670710
    },
    {
        "content": "<p>I like the <code>threadlocal</code> approach for its simplicity, but I guess the 'pass allocator and callbacks to roc' approach would be nice if I want to call platform code from a green thread.</p>",
        "id": 486779473,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1733672318
    }
]