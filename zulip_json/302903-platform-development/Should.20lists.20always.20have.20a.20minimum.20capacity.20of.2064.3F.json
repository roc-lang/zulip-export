[
    {
        "content": "<p>I have been working again on re-integrating the file reading changes I made to basic cli and I was seeing some errors that really confused me. <br>\nOne thing I noticed is, if I make a list with capacity 1 in roc, when I log the internal capacity value in rust it's 64. Is this to be expected?</p>",
        "id": 490670373,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1735042874
    },
    {
        "content": "<p>Here's the impl for that function: <a href=\"https://github.com/roc-lang/roc/blob/a58b1013e756749da5c35431efde834a70a29717/crates/compiler/builtins/bitcode/src/list.zig#L353\">https://github.com/roc-lang/roc/blob/a58b1013e756749da5c35431efde834a70a29717/crates/compiler/builtins/bitcode/src/list.zig#L353</a></p>",
        "id": 490675632,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735046101
    },
    {
        "content": "<p>I think it's not working the way it's supposed to.</p>",
        "id": 490675672,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735046125
    },
    {
        "content": "<p>It has an arg called <code>capacity</code> that's passed to a <code>listReserve</code> function as <code>spare</code></p>",
        "id": 490675708,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735046151
    },
    {
        "content": "<p>And then we unconditionally increase our \"desired capacity\" by spare</p>",
        "id": 490675880,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735046257
    },
    {
        "content": "<p>So at least that is wrong. There's some casting stuff going on, which might explain how 1 (or 2?) gets to 64, but I'm not seeing</p>",
        "id": 490676069,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735046334
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/stream/302903-platform-development/topic/Should.20lists.20always.20have.20a.20minimum.20capacity.20of.2064.3F/near/490675880\">said</a>:</p>\n<blockquote>\n<p>And then we unconditionally increase our \"desired capacity\" by spare</p>\n</blockquote>\n<p>That shouldn't matter because later we use a min for the reserve size with the maxint. No issues</p>",
        "id": 490676200,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1735046408
    },
    {
        "content": "<p>Yeah I don't get it either</p>",
        "id": 490676213,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1735046418
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/blob/a58b1013e756749da5c35431efde834a70a29717/crates/compiler/test_gen/src/gen_list.rs#L3703\">https://github.com/roc-lang/roc/blob/a58b1013e756749da5c35431efde834a70a29717/crates/compiler/test_gen/src/gen_list.rs#L3703</a></p>",
        "id": 490676274,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735046473
    },
    {
        "content": "<p>This tests that <code>withCapacity</code> reserves correctly</p>",
        "id": 490676293,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735046487
    },
    {
        "content": "<p>So it sounds like something may be wrong in the FFI interaction for you?</p>",
        "id": 490676324,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735046521
    },
    {
        "content": "<p>I just did a quick test, any number less than 64 comes out as 64</p>",
        "id": 490676375,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1735046536
    },
    {
        "content": "<p>65 works fine</p>",
        "id": 490676378,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1735046542
    },
    {
        "content": "<p>66?</p>",
        "id": 490676388,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735046559
    },
    {
        "content": "<p>I'm wondering if this is some small list optimisation trickery</p>",
        "id": 490676403,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1735046568
    },
    {
        "content": "<p>I don't believe we do small list yet, only small str</p>",
        "id": 490676438,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735046593
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/stream/302903-platform-development/topic/Should.20lists.20always.20have.20a.20minimum.20capacity.20of.2064.3F/near/490676388\">said</a>:</p>\n<blockquote>\n<p>66?</p>\n</blockquote>\n<p>66 and 128 is 128</p>",
        "id": 490676452,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1735046604
    },
    {
        "content": "<p>Haha, so <code>64n + 1</code> is correct, and anything else is <code>64(n + 1)</code></p>",
        "id": 490676564,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735046666
    },
    {
        "content": "<p>Well 64 is also correct</p>",
        "id": 490676605,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1735046707
    },
    {
        "content": "<p>Yeah</p>",
        "id": 490676610,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735046715
    },
    {
        "content": "<p>It'd probably be good to get a minimal repro in this channel so we can report a bug</p>",
        "id": 490676628,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735046726
    },
    {
        "content": "<p>found it.  <br>\nThe calculateCapacity function has a bug</p>",
        "id": 490677261,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1735047133
    },
    {
        "content": "<p>Or, well I guess it has a strange choice to always make it a minimum of 64</p>",
        "id": 490677328,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1735047179
    },
    {
        "content": "<p>But maybe people are smarter than I have good reasons for deciding that 64 bytes is the smallest an array should be.</p>",
        "id": 490677392,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1735047239
    },
    {
        "content": "<p>Anyway, I guess this doesn't matter much, but it's a little confusing for people using small buffers... not that they really should be using a tiny buffer. but still, having it always read 64 bytes when I was only expecting 2, was... unexpected</p>",
        "id": 490678339,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1735047845
    },
    {
        "content": "<p>Should be a minimum of 64 bytes, not 64 items</p>",
        "id": 490706869,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735067990
    },
    {
        "content": "<p>Also, we should definitely have a way to request a specific size and not over allocate</p>",
        "id": 490706932,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735068009
    },
    {
        "content": "<p>These numbers where chosen by roughly following what Facebook does for strings that leads to best overall perf/memory use tradeoff for their fleet</p>",
        "id": 490706967,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735068047
    },
    {
        "content": "<p>That said, that has small string optimization for 0 to 24 bytes</p>",
        "id": 490706981,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735068064
    },
    {
        "content": "<p>We don't have small list for 0 to 24 bytes. That may shift the tradeoff some.</p>",
        "id": 490707001,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735068082
    },
    {
        "content": "<p>Though I don't recall if Facebook as small list or not....they may not</p>",
        "id": 490707014,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735068097
    },
    {
        "content": "<p>Anyway, it is meant to be a reasonable default, but may not be the best choice for all cases.</p>",
        "id": 490707027,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735068120
    },
    {
        "content": "<p>I'll make sure to double check the original source to see if we mixed something up.</p>",
        "id": 490707096,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735068165
    },
    {
        "content": "<p>On a really quick skim (so might be off):</p>\n<ol>\n<li>They don't have small lists, so they use a slightly different allocation capacity tradeoff</li>\n<li>For the first capacity request, they always just round to the allocator bucket size, never do bigger jumps</li>\n</ol>",
        "id": 490707629,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735068528
    },
    {
        "content": "<p>Oh actually they still do the 64 byte thing</p>",
        "id": 490707761,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735068617
    },
    {
        "content": "<p>So I think our core differences are:</p>\n<ol>\n<li>Not rounding to the allocator size (cause we don't know the allocator)</li>\n<li>On calls to reserve or with capacity, they trust the user knows exactly how many elements they want. Instead of using the growth function, they allocate exactly the required amount (rounded to the allocator bucket size)</li>\n</ol>",
        "id": 490708017,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735068802
    },
    {
        "content": "<p>So we probably should update our code to do both of those things. Even without knowing the allocator size, we probably know rough bucket sizes based on alignment and blocks.</p>",
        "id": 490708095,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735068845
    }
]