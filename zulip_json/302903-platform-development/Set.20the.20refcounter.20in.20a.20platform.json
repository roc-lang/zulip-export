[
    {
        "content": "<p>I don't fully understand the ref counter. What I am trying to do is to allocate a string in the platform and give it to roc as an function argument.</p>\n<p>When I understand it correctly, I have to allocate another usize value before the actual data. But what value do I have to use?</p>\n<p>The roc implementation uses (this code)[https://github.com/roc-lang/roc/blob/40026bf78edd22e0b3412657a7bbb879fa2bd2be/crates/compiler/builtins/bitcode/src/utils.zig#L461]. I can't read this code:</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">REFCOUNT_ONE_ISIZE</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">isize</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">math</span><span class=\"p\">.</span><span class=\"n\">minInt</span><span class=\"p\">(</span><span class=\"kt\">isize</span><span class=\"p\">);</span>\n<span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">REFCOUNT_ONE</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">@as</span><span class=\"p\">(</span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">@bitCast</span><span class=\"p\">(</span><span class=\"n\">REFCOUNT_ONE_ISIZE</span><span class=\"p\">));</span>\n</code></pre></div>\n<p>But when I print the value, I get <code>9223372036854775808</code>.  What does this number mean?</p>\n<p>When a platform gives a string with a refcount of 1 to roc, who has to deallocate it? Does roc decreases the refcount to 0 and deallocates it or does the platform has to deallocate the memory after the roc-function returns?</p>",
        "id": 418433763,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1706376549
    },
    {
        "content": "<p><code>9223372036854775808</code> means that you have a refcount of 1.</p>",
        "id": 418433879,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706376655
    },
    {
        "content": "<p>Yeah...its a bit weird</p>",
        "id": 418433928,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706376708
    },
    {
        "content": "<p>If you give something with a refcount of 1 to roc, roc will deallocate it.</p>",
        "id": 418433953,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706376723
    },
    {
        "content": "<p>Honestly, I am not actually sure if we need that oddity anymore.</p>",
        "id": 418434102,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706376887
    },
    {
        "content": "<p>It was chosen due to having the first bit set/not set is an easy to check piece of information. That said, I think we now just explicitly check if the refcount is one anyway.</p>",
        "id": 418434142,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706376934
    },
    {
        "content": "<p>I know there was talk of storing extra info in a bit of the refcount, but currently we don't so <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> Probably could be better.</p>",
        "id": 418434166,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706376962
    },
    {
        "content": "<p>Anyway, just consider the refcount to be counting form the minimum isize to the maximum isize and the numbers all work out currently.</p>",
        "id": 418434226,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706376991
    },
    {
        "content": "<p>All that said, if you have a byte slice in zig that zig controls the ownership of, there is now a nicer way to pass it into roc that can avoid any allocation.</p>",
        "id": 418434258,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706377056
    },
    {
        "content": "<p>Ok. So I just use this number.</p>\n<p>When I do so, the value does not gets deallocated automatically. Can I just deallocate it, after the roc-function returns, or do I have to check the refcount? Since the roc function is pure, I would guess, that the argument can not be stored somewhere in roc, so it should be safe to deallocate it. Is this correct?</p>",
        "id": 418434687,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1706377492
    },
    {
        "content": "<blockquote>\n<p>When I do so, the value does not gets deallocated automatically.</p>\n</blockquote>\n<p>That definitely would be a bug of some sort if the value isn't referenced in any way by the output.</p>",
        "id": 418434847,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706377678
    },
    {
        "content": "<p>do you have source I can double check?</p>",
        "id": 418434900,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706377703
    },
    {
        "content": "<p>Sorry, I added the debug-statement in <code>roc_realloc</code> instead of <code>roc_dealloc</code>.</p>\n<p>Yes, the value gets deallocated by roc.</p>",
        "id": 418434964,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1706377784
    },
    {
        "content": "<p>After this information, I think the go function to create a roc string, that we used for the false-interpreter, was wrong: <a href=\"https://github.com/ostcar/roc-examples/blob/f07c2ed105130ce0a41e066f3ac2a2e6a7a14f41/examples/false-interpreter-go/platform/main.go#L36-L43\">https://github.com/ostcar/roc-examples/blob/f07c2ed105130ce0a41e066f3ac2a2e6a7a14f41/examples/false-interpreter-go/platform/main.go#L36-L43</a></p>\n<p>The correct implementation is </p>\n<div class=\"codehilite\" data-code-language=\"Go\"><pre><span></span><code><span class=\"kd\">func</span><span class=\"w\"> </span><span class=\"nx\">rocStrFromStr</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"w\"> </span><span class=\"kt\">string</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nx\">C</span><span class=\"p\">.</span><span class=\"nx\">struct_RocStr</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// TODO: 8 only works for 64bit. Use the correct size.</span>\n<span class=\"w\">    </span><span class=\"nx\">refCountPtr</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"nx\">roc_alloc</span><span class=\"p\">(</span><span class=\"nx\">C</span><span class=\"p\">.</span><span class=\"nx\">ulong</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">8</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nx\">refCountSlice</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"nx\">unsafe</span><span class=\"p\">.</span><span class=\"nx\">Slice</span><span class=\"p\">((</span><span class=\"o\">*</span><span class=\"kt\">uint</span><span class=\"p\">)(</span><span class=\"nx\">refCountPtr</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nx\">refCountSlice</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"mi\">9223372036854775808</span><span class=\"w\"> </span><span class=\"c1\">// TODO: calculate this number from the lowest int</span>\n<span class=\"w\">    </span><span class=\"nx\">startPtr</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"nx\">unsafe</span><span class=\"p\">.</span><span class=\"nx\">Add</span><span class=\"p\">(</span><span class=\"nx\">refCountPtr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span>\n\n<span class=\"w\">    </span><span class=\"kd\">var</span><span class=\"w\"> </span><span class=\"nx\">rocStr</span><span class=\"w\"> </span><span class=\"nx\">C</span><span class=\"p\">.</span><span class=\"nx\">struct_RocStr</span>\n<span class=\"w\">    </span><span class=\"nx\">rocStr</span><span class=\"p\">.</span><span class=\"nx\">len</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"nx\">C</span><span class=\"p\">.</span><span class=\"nx\">ulong</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"nx\">rocStr</span><span class=\"p\">.</span><span class=\"nx\">capacity</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"nx\">rocStr</span><span class=\"p\">.</span><span class=\"nx\">len</span>\n<span class=\"w\">    </span><span class=\"nx\">rocStr</span><span class=\"p\">.</span><span class=\"nx\">bytes</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"nx\">C</span><span class=\"p\">.</span><span class=\"nx\">char</span><span class=\"p\">)(</span><span class=\"nx\">unsafe</span><span class=\"p\">.</span><span class=\"nx\">Pointer</span><span class=\"p\">(</span><span class=\"nx\">startPtr</span><span class=\"p\">))</span>\n\n<span class=\"w\">    </span><span class=\"nx\">dataSlice</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"nx\">unsafe</span><span class=\"p\">.</span><span class=\"nx\">Slice</span><span class=\"p\">((</span><span class=\"o\">*</span><span class=\"kt\">byte</span><span class=\"p\">)(</span><span class=\"nx\">startPtr</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"nb\">copy</span><span class=\"p\">(</span><span class=\"nx\">dataSlice</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"nb\">byte</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">))</span>\n\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nx\">rocStr</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>The old implementation was nice, since it did use the actual memory of the go-string. But a copy is necessary to add the space for the refcount.</p>",
        "id": 418435323,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1706378121
    },
    {
        "content": "<p>Assuming Go keeps a reference to the string alive somewhere a seamless slice could be used instead. Just would means that Roc will never free the string (which depending on the use case may matter).</p>",
        "id": 418435437,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706378250
    },
    {
        "content": "<p>For example, in a platform I am currently working on, I do this for a list:<br>\n<a href=\"https://github.com/bhansconnect/roc-fuzz/blob/a5e4053a1be6d0f9a9ca5cef26139230e8a81f2d/platform/host.cpp#L293-L296\">https://github.com/bhansconnect/roc-fuzz/blob/a5e4053a1be6d0f9a9ca5cef26139230e8a81f2d/platform/host.cpp#L293-L296</a></p>",
        "id": 418435453,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706378281
    },
    {
        "content": "<p>I will come back to this, as soon as I understand seamless slice <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 418435668,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1706378460
    },
    {
        "content": "<p>When I call a roc-function, that returns some heap-value, for example a RocStr. Does the platform has to check the refcount and if its 0 deallocate it?</p>",
        "id": 418436029,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1706378818
    },
    {
        "content": "<p>Yep. Otherwise, it would leak.</p>",
        "id": 418436080,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706378867
    },
    {
        "content": "<p>well, you check if it is 1. Cause if it is 1, the platform has the only reference to it.</p>",
        "id": 418436134,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706378895
    },
    {
        "content": "<p>Does the simple-webserver-platform do this? I can not find anything like this here: <a href=\"https://github.com/roc-lang/basic-webserver/blob/39853f523f9fd162ea6d9920209912fd3e478e59/platform/src/server.rs#L70C23-L89\">https://github.com/roc-lang/basic-webserver/blob/39853f523f9fd162ea6d9920209912fd3e478e59/platform/src/server.rs#L70C23-L89</a></p>\n<p>It would be nice, if roc would export a function, that accepts a pointer to any roc type, checks all the refcounts and deallocates if necessary. In other case it is hard to do it manually for complex types like a Response, that contains a lot of different heap-values.</p>\n<p>Ok. Response only has two values on the heap: <a href=\"https://github.com/roc-lang/basic-webserver/blob/39853f523f9fd162ea6d9920209912fd3e478e59/platform/InternalHttp.roc#L39\">https://github.com/roc-lang/basic-webserver/blob/39853f523f9fd162ea6d9920209912fd3e478e59/platform/InternalHttp.roc#L39</a></p>\n<p>But there could be other types, that are much more complex. Like a <code>Dict Str Str</code></p>",
        "id": 418436677,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1706379447
    },
    {
        "content": "<blockquote>\n<p>It would be nice, if roc would export a function, that accepts a pointer to any roc type, checks all the refcounts and deallocates if necessary. In other case it is hard to do it manually for complex types like a Response, that contains a lot of different heap-values.</p>\n</blockquote>\n<p>Yeah, glue is planned to support this. That said, when roc finally support exporting multiple functions, it should be easy to make a deallocate function if wanted. Just <code>MyType -&gt; {}</code> that the platform uses.</p>",
        "id": 418437124,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706379942
    },
    {
        "content": "<blockquote>\n<p>Does the simple-webserver-platform do this?</p>\n</blockquote>\n<p>Glue and rust drop functions should be dealing with it.</p>",
        "id": 418437184,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706379987
    },
    {
        "content": "<p>I have another question on this topic.</p>\n<p>I try to do something similar like the wasm4 platform. The roc code first returns a <code>Box Model</code>, and any other call to roc has this model as an argument.</p>\n<p>What do I have to do with the refcount? I have an <code>update</code>-like function. The returned model has a refcount of 1, it does not matter, what the ref count was before.</p>\n<p>Then I have a \"read\"-function, that can not manipulate the model. When I call it, the refcount get reduced by one.</p>\n<p>My current solution is, to set the refcount to 2 before calling the \"read\"-function. Is this the correct way to do it or is there another way to tell roc, not to deallocate an object?</p>",
        "id": 418502232,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1706447779
    }
]