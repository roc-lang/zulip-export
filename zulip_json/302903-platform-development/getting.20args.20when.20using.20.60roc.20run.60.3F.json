[
    {
        "content": "<p>I'm trying out writing a little platform. It's designed to be primarily ran by using a roc shebang, which I think is equivalent to using <code>roc run</code>. I noticed though that when I do, the argslist of my process contains just <code>/proc/self/fd/3</code>. Is there a way to the host can get the original args list? I'd like to get get the location of script being run so I can do file lookups relative to it, among other things.</p>\n<p>I'm on Linux using the surgical linker. The platform I'm writing is in Zig, but I don't think it's anything to do with my code, when I print args using <code>basic-cli</code> I see the same behavior. This happens both when I run the script using <code>roc run</code> and when I invoke a script directly with <code>#!/usr/bin/env roc</code> at the top.</p>",
        "id": 477528914,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1729201536
    },
    {
        "content": "<p>probably requires compiler modification, but it would be great to do so</p>",
        "id": 477534299,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729204491
    },
    {
        "content": "<p>Thanks!</p>\n<p>My original statement was incorrect, I do see the args, it's just that argv[0] is <code>/proc/self/fd/3</code>. I think that might be unavoidable given Roc has to <code>exec</code> into the binary it compiles first when doing a <code>roc run</code>. At least, I can't avoid this when doing some experiments with shell scripts <code>exec</code>-ing to each other. But I think we could expose the original script file to the host by putting it in an env variable, maybe <code>ROC_SCRIPT</code>. I'll try it out and make a PR.</p>",
        "id": 477689098,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1729268077
    },
    {
        "content": "<p>hmm...yeah</p>",
        "id": 477691697,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729269023
    },
    {
        "content": "<p>Maybe <code>fexecve</code> could work around it. Not sure where it gets the name from.</p>",
        "id": 477691756,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729269046
    },
    {
        "content": "<p>Ohhh, I'm wrong, you can specify argv[0] separate from what program you want to run!</p>",
        "id": 477698646,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1729271841
    },
    {
        "content": "<p>Oh, awesome!</p>",
        "id": 477698709,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729271871
    },
    {
        "content": "<p>We should change it to be the name of the roc file passed to <code>roc run</code>.</p>",
        "id": 477698802,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729271899
    },
    {
        "content": "<p>Yes! Taking a look.</p>",
        "id": 477700172,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1729272521
    },
    {
        "content": "<p>PR: <a href=\"https://github.com/roc-lang/roc/pull/7172\">https://github.com/roc-lang/roc/pull/7172</a></p>",
        "id": 477709006,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1729276176
    },
    {
        "content": "<p>A comment I made on the PR that probably warrants discussion:</p>\n<blockquote>\n<p>From the added tests, it looks like a script in <code>/home/myuser/Documents/myscript.roc</code> would have the relative path included along with the name, but I think we should prefer just the <a href=\"https://doc.rust-lang.org/std/path/struct.Path.html#method.file_name\">file_name</a> (a.k.a. <code>myscript.roc</code>) since that's what will be wanted to display 99% of the time.</p>\n</blockquote>",
        "id": 478135510,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1729539369
    },
    {
        "content": "<p>Thanks for taking a look at the PR! I responded to your comment:</p>\n<blockquote>\n<p>I think the relative name is important if we want to use argv[0] to look up the script location in the application.</p>\n<p>For instance, if I'm in /home/jasper and run: <code>roc ./projects/foobar/main.roc</code>, if argv[0] only tells me I'm running <code>main.roc</code>, then in the implementation of <code>main.roc</code> I can't know where the script is located, for instance to read some <code>data.json</code> file that's supposed to be next to the script file.</p>\n<p>Bash works the same way btw! Try put this script somewhere:</p>\n<p><code>bash\n#!/usr/bin/env bash\necho \"$0\"\n</code></p>\n<p>And run it from a couple different places to observe the result.</p>\n</blockquote>",
        "id": 478136618,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1729539807
    },
    {
        "content": "<p>Yeah, I think it needs to match what is passed to roc. Akin to what would be passed to bash</p>",
        "id": 478161083,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729549511
    },
    {
        "content": "<p>We could remove the <code>.roc</code> extension from it, but I think it is better taste to leave it in</p>",
        "id": 478162321,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729550041
    }
]