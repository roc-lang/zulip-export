[
    {
        "content": "<p>I'm trying to find a nice API for working with the keyboard...</p>\n<p>I've implemented this which works nicely... but it's only \"hey this key was pressed\" and doesn't really help if I want to detect say <code>Crtl-C</code> or <code>Shift-K</code> etc as I need to know if a key is being pressed which feels like a different thing. </p>\n<p>Just trying to think of something that maps nicely as a Task.</p>\n<p>Here's the raylib API functions which seem related.</p>\n<div class=\"codehilite\"><pre><span></span><code>## Get&#39;s the set of keys pressed since last time this function was called.\n## Key presses are queued until read.\ngetKeysPressed : Task (Set KeyBoardKey) *\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"c1\">/// Check if a key has been pressed once</span>\n<span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">isKeyPressed</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">KeyboardKey</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">cdef</span><span class=\"p\">.</span><span class=\"n\">IsKeyPressed</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">/// Check if a key has been pressed again (Only PLATFORM_DESKTOP)</span>\n<span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">isKeyPressedRepeat</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">KeyboardKey</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">cdef</span><span class=\"p\">.</span><span class=\"n\">IsKeyPressedRepeat</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">/// Check if a key is being pressed</span>\n<span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">isKeyDown</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">KeyboardKey</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">cdef</span><span class=\"p\">.</span><span class=\"n\">IsKeyDown</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">/// Check if a key has been released once</span>\n<span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">isKeyReleased</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">KeyboardKey</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">cdef</span><span class=\"p\">.</span><span class=\"n\">IsKeyReleased</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">/// Check if a key is NOT being pressed</span>\n<span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">isKeyUp</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">KeyboardKey</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">cdef</span><span class=\"p\">.</span><span class=\"n\">IsKeyUp</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 476478038,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728694464
    },
    {
        "content": "<p>Here is the WIP branch <a href=\"https://github.com/lukewilliamboswell/roc-ray/pull/15\">https://github.com/lukewilliamboswell/roc-ray/pull/15</a> and a demo using the arrow keys.</p>\n<p><a href=\"/user_uploads/22008/EVwXCiT5GI9lDJT6RMKSd4fn/roc-ray-4.gif\">roc-ray-4.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/EVwXCiT5GI9lDJT6RMKSd4fn/roc-ray-4.gif\" title=\"roc-ray-4.gif\"><img data-animated=\"true\" data-original-dimensions=\"903x432\" src=\"/user_uploads/thumbnail/22008/EVwXCiT5GI9lDJT6RMKSd4fn/roc-ray-4.gif/840x560-anim.webp\"></a></div>",
        "id": 476478173,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728694618
    },
    {
        "content": "<p>I think in many cases keyboard maps best to handlers like <code>onKeyPress</code> that can update the model.</p>",
        "id": 476478385,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728694828
    },
    {
        "content": "<p>I'm not sure I follow what you mean.</p>",
        "id": 476478662,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728695118
    },
    {
        "content": "<p>Something like this maybe?</p>\n<div class=\"codehilite\"><pre><span></span><code>handleKeyChange : model, (model, KeyBoardKey, [Up, Down] -&gt; model) : Task model *\n</code></pre></div>",
        "id": 476478874,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728695298
    },
    {
        "content": "<p>Yeah. Or have a task to register a key press handler (but that might be hard to get right with current roc glue).</p>",
        "id": 476478934,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728695395
    },
    {
        "content": "<p>Maybe it would be easiest to pass in the current \"state\" of the keyboard (and mouse gamepad etc) on every render?</p>\n<div class=\"codehilite\"><pre><span></span><code>render : Model, Keyboard -&gt; Task Model {}\n</code></pre></div>",
        "id": 476479672,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728696103
    },
    {
        "content": "<p>This would save a lot of <code>Task</code>s</p>",
        "id": 476479797,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728696210
    },
    {
        "content": "<p>Oh, I see raylib really doesn't model keys in a handler friendly form. It expects you to requests the key events you care about on each frame.</p>",
        "id": 476483758,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728699526
    },
    {
        "content": "<p>I feel like I would just model the raylib api directly. (though I would make a Key enum instead of using an int)</p>",
        "id": 476483773,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728699549
    },
    {
        "content": "<p>If you want to be really fancy, some sort of record builder to get a bunch of keys might be nice. But I also think direct tasks should be fine</p>",
        "id": 476483799,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728699590
    },
    {
        "content": "<p>All that said, it seems that raylib fundamentally maps all of the keys into two arrays, previousKeyState and currentKeyState. You might be able to directly pass those into roc if you wanted and handle all the checking in roc</p>",
        "id": 476483913,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728699697
    },
    {
        "content": "<p>I've seen raylib has a function to check for new key presses (pops one at a time from a stack), but it doesn't seem to have a function for key releases. My plan was to have the host pass a message to roc on key press, and also keep track of which keys are pressed. Then every frame, the host asks raylib if any of those previously pressed keys are still pressed. If not, send a key release message to roc.</p>",
        "id": 476486290,
        "sender_full_name": "Jared Cone",
        "timestamp": 1728702050
    },
    {
        "content": "<p>Ok, I've gone a bit crazy today and implemented a bunch of things for roc-ray....</p>\n<p>There's now the some common stateful things being passed in to each call to render. That reduces the number of Tasks that we need, and makes the API nicer to use for an app author. </p>\n<p>I've also implemented an effect to take a screenshot... however I think the effect is actually running first even though I place it at the end of the task chain. I suspect this is my issue because whenever I take a screenshot it's just the cleared screen. I need to investigate this further.</p>\n<p>Checkout the updated <a href=\"https://github.com/lukewilliamboswell/roc-ray/blob/main/examples/pong.roc\">pong example</a> if you're interested.</p>",
        "id": 476587084,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728806236
    },
    {
        "content": "<p>I can get almost 4,000 frames per second doing normalish things with raylib. So I thought I'd see how much drawing slows down with lots and lots of things on the screen. </p>\n<p><a href=\"https://gist.github.com/lukewilliamboswell/1867f2b495cf22b882a6114dd22bd80d\">Here's a test program</a> I wrote to try and stress test it a little. Each frame I'm generating a list of random rectangles and then drawing them.</p>\n<p>From my very unscientific testing...  my laptop runs out of memory and crashes before it gets below 60 fps.</p>\n<p>Here's a screenshot with 100,000 rectangles randomly generated on each frame.</p>\n<p><a href=\"/user_uploads/22008/mjy2wMklDbds7k4Svij9RVKC/Screenshot-2024-10-13-at-21.27.10.png\">Screenshot 2024-10-13 at 21.27.10.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/mjy2wMklDbds7k4Svij9RVKC/Screenshot-2024-10-13-at-21.27.10.png\" title=\"Screenshot 2024-10-13 at 21.27.10.png\"><img data-original-dimensions=\"1626x1678\" src=\"/user_uploads/thumbnail/22008/mjy2wMklDbds7k4Svij9RVKC/Screenshot-2024-10-13-at-21.27.10.png/840x560.webp\"></a></div>",
        "id": 476596374,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728815776
    },
    {
        "content": "<p>Just don't change to drawing circles...those tend to be a lot slower. Though raylib probably has an optimized way to draw them, so maybe not an issue</p>",
        "id": 476623110,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728840726
    },
    {
        "content": "<blockquote>\n<p>I suspect this is my issue because whenever I take a screenshot it's just the cleared screen. I need to investigate this further.</p>\n</blockquote>\n<p>You may be taking the screenshot before the screen actually renders? But not sure how all of that is wired together.</p>",
        "id": 476623132,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728840755
    },
    {
        "content": "<blockquote>\n<p>Just don't change to drawing circles...those tend to be a lot slower</p>\n</blockquote>\n<p>Can confirm they are slower <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 476643431,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728859941
    },
    {
        "content": "<p>Added utc nanos timestamp, and <span class=\"user-mention\" data-user-id=\"518883\">@Ian McLerran</span>'s <a href=\"https://github.com/imclerran/roc-isodate\">imclerran/roc-isodate</a> package works well <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> </p>\n<p><a href=\"/user_uploads/22008/pmLn3qEdb5MrpOTc3DlbnbGo/roc-ray-5.gif\">roc-ray-5.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/pmLn3qEdb5MrpOTc3DlbnbGo/roc-ray-5.gif\" title=\"roc-ray-5.gif\"><img data-animated=\"true\" data-original-dimensions=\"807x155\" src=\"/user_uploads/thumbnail/22008/pmLn3qEdb5MrpOTc3DlbnbGo/roc-ray-5.gif/840x560-anim.webp\"></a></div>",
        "id": 476644812,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728861640
    },
    {
        "content": "<p>Added Camera's and Mode2D drawing... so now you can have separate World and Screen spaces to draw to and provide better support for different screen resolutions etc. </p>\n<p><a href=\"/user_uploads/22008/dlLZlb8HOgu5mOAnx0BM-h1a/roc-ray-6.gif\">roc-ray-6.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/dlLZlb8HOgu5mOAnx0BM-h1a/roc-ray-6.gif\" title=\"roc-ray-6.gif\"><img data-animated=\"true\" data-original-dimensions=\"815x573\" src=\"/user_uploads/thumbnail/22008/dlLZlb8HOgu5mOAnx0BM-h1a/roc-ray-6.gif/840x560-anim.webp\"></a></div>",
        "id": 476677682,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728881947
    },
    {
        "content": "<p>Here's the source for this example <a href=\"https://github.com/lukewilliamboswell/roc-ray/blob/main/examples/2d_camera.roc\">https://github.com/lukewilliamboswell/roc-ray/blob/main/examples/2d_camera.roc</a></p>",
        "id": 476677719,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728881979
    },
    {
        "content": "<p>Looking to crowdsource some opinions on an idea for roc-ray....</p>\n<p>I'm considering changing the API for app authors from this</p>\n<div class=\"codehilite\"><pre><span></span><code>Program state : {\n    init : Task state {},\n    render : state, PlatformState -&gt; Task state {},\n}\n</code></pre></div>\n<p>To something more TEA-like. </p>\n<div class=\"codehilite\"><pre><span></span><code>Program state : {\n    init : Task state {},\n    update : state, PlatformState -&gt; Task state {},\n    render : state -&gt; List Elems,\n}\n\nElems : [\n    Circle { pos : Vec2, ... },\n    Rect { pos : Vec2, ... },\n    Text { pos : Vec2, text : Str, ... },\n    ...\n]\n</code></pre></div>\n<p>My main motivation is that I have been thinking about how to improve the drawing to be more efficient and avoid deeply nested chains of Tasks. This approach would allow me to batch draw Tasks to one per \"type\", and can all be done in the platform, while keeping the API across the host boundary very simple.</p>\n<p>In future if we needed more performance we can change the host API and do more efficient things without affecting any app authors.</p>\n<p>What do people think? Is this a bad idea?</p>\n<p>I haven't really investigated how this will work with multiple Camera's and Textures and 2D/3D drawing modes... but I am thinking this will make it easier because I can modify the type of <code>render</code> so that it isn't possible to mess up the order of things as an application author.</p>",
        "id": 476855106,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728942014
    },
    {
        "content": "<p>Assuming we change to purity inference and synchronous platform calls (which so the coroutines idea), I don't think you will have to worry about the cost here. I will still add a batched draw call though that can take a list of items to draw.</p>",
        "id": 476861646,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728946467
    },
    {
        "content": "<p>After writing this out... I'm not sure this is a good idea any more. I'm going to think about it some. My main concern is the ordering that raylib wants makes batching things difficult.</p>",
        "id": 476861676,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728946487
    },
    {
        "content": "<blockquote>\n<p>add a batched draw call though that can take a list of items to draw.</p>\n</blockquote>\n<p>Good idea. I can just make all the draw functions take a <code>RocList</code></p>",
        "id": 476861734,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728946526
    },
    {
        "content": "<p>I would make two versions of each raw call <code>drawCircle</code> <code>drawCircles</code>...but a list for simplicity in all cases is also fine</p>",
        "id": 476861894,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728946587
    },
    {
        "content": "<p>I think that has minimal impact anyway... from this **</p>\n<div class=\"codehilite\"><pre><span></span><code>Raylib.drawText! { text: &quot;Hello World&quot;, x: 300, y: 50, size: 40, color: Navy }\nRaylib.drawRectangle! { x: 100, y: 150, width: 250, height: 100, color: Aqua }\nRaylib.drawRectangleGradient! { x: 400, y: 150, width: 250, height: 100, top: Lime, bottom: Green }\nRaylib.drawCircle! { x: 200, y: 400, radius: 75, color: Fuchsia }\nRaylib.drawCircleGradient! { x: 600, y: 400, radius: 75, inner: Yellow, outer: Maroon }\n</code></pre></div>\n<p>to this... </p>\n<div class=\"codehilite\"><pre><span></span><code>Raylib.drawText! [{ text: &quot;Hello World&quot;, x: 300, y: 50, size: 40, color: Navy }]\nRaylib.drawRectangle! [{ x: 100, y: 150, width: 250, height: 100, color: Aqua }]\nRaylib.drawRectangleGradient! [{ x: 400, y: 150, width: 250, height: 100, top: Lime, bottom: Green }]\nRaylib.drawCircle! [{ x: 200, y: 400, radius: 75, color: Fuchsia }]\nRaylib.drawCircleGradient! [{ x: 600, y: 400, radius: 75, inner: Yellow, outer: Maroon }]\n</code></pre></div>\n<p>edit ** I'm not so sure this is minimal on performance</p>",
        "id": 476861911,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728946600
    },
    {
        "content": "<p>Maybe the List version would be less efficient if it's only used for one thing everytime, because its adding an allocated type in the middle.</p>",
        "id": 476861984,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728946653
    },
    {
        "content": "<p>That's fair. Just a ton of extra malloc and free call (but they all should be in the fast bins for single element allocations). So in practice, it should keep reusing the same memory location for all of those list with a good malloc impl</p>",
        "id": 476862056,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728946691
    },
    {
        "content": "<p>Still extra overhead, but probably fine.</p>",
        "id": 476862092,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728946705
    },
    {
        "content": "<blockquote>\n<p>change to purity inference and synchronous platform calls (which so the coroutines idea)</p>\n</blockquote>\n<p>Based on this... I'm thinking I'll just leave it. We should see how that pans out in practice.</p>",
        "id": 476862138,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728946724
    },
    {
        "content": "<p>Also -- I think I'm going to try replacing Zig with Rust for roc-ray. I've been cooking ideas, and my lack of zig experience is a bit of an challenge. I think with rust (and glue) I'll be more confident adding features quickly.</p>",
        "id": 476873300,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728955472
    },
    {
        "content": "<p>Got something minimal working in <a href=\"https://github.com/lukewilliamboswell/roc-ray/tree/spike-rust\">https://github.com/lukewilliamboswell/roc-ray/tree/spike-rust</a></p>\n<div class=\"codehilite\"><pre><span></span><code>$ git checkout spike-rust\n$ roc build --no-link examples/basic-shapes.roc\n$ cp examples/basic-shapes.o app.o\n$ cargo run\n</code></pre></div>\n<p>But I think I'm going to need to use the <code>ThreadSafeRefcountedResourceHeap</code> or something to keep track of all the resources from Raylib. Like Textures or DrawHandles</p>",
        "id": 476889620,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728963702
    },
    {
        "content": "<p>Or maybe spawn a single thread to handle all the drawing and have roc passing commands to that thread.</p>",
        "id": 476890470,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728964069
    },
    {
        "content": "<p>I spent a while poking at it. Working around rust here seems really painful. I'm guessing what we really want is effect interpreters.</p>",
        "id": 476900069,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728969422
    },
    {
        "content": "<p>Why? I don't understand the dilemma? Why is it different from basic cli or any other current platform? effect interpretters really only help with async (and raylib isn't async)</p>",
        "id": 476901018,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728970103
    },
    {
        "content": "<p>It feels more like we want good glue gen, which effect interpreters are on the other end of</p>",
        "id": 476915408,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1728975625
    },
    {
        "content": "<p>The raylib-rs library models things in a way to make everything safe... so you need to have a handle that is !Sync and !Send</p>",
        "id": 476918510,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728976424
    },
    {
        "content": "<p>Here's an example. <a href=\"https://github.com/raylib-rs/raylib-rs/blob/a170ceed3b4453c3b5287fbc049f2472d3d3425a/raylib/src/core/drawing.rs#L23\">https://github.com/raylib-rs/raylib-rs/blob/a170ceed3b4453c3b5287fbc049f2472d3d3425a/raylib/src/core/drawing.rs#L23</a></p>\n<p>You call <code>begin_drawing</code> and then get a <code>RaylibDrawHandle</code>... and you need that handle to do any drawing.</p>",
        "id": 476927004,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728978695
    },
    {
        "content": "<p>I just found the raylib::ffi crate... I think that may what we need -- it's the lower level raylib-sys crate</p>",
        "id": 476927588,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728978890
    },
    {
        "content": "<p>I got it working!! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 476931645,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728980216
    },
    {
        "content": "<p>Literally everything is <code>unsafe</code> ... but that's fine I think.</p>",
        "id": 476931673,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728980232
    },
    {
        "content": "<blockquote>\n<p>Literally everything is <code>unsafe</code></p>\n</blockquote>\n<p>This is why zig is probably a better medium for platforms a lot of the time (same as with the roc's stdlib).</p>",
        "id": 477033639,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729011816
    },
    {
        "content": "<p>If we had roc_std in zig and glue for zig then I also think zig is an excellent choice for hosts. I enjoyed working with it, but I'm more comfortable with rust at this point, and for roc-ray I really want to work with larger more complex types across the host interface and glue is really appreciated.</p>",
        "id": 477053711,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729019118
    },
    {
        "content": "<p>Makes total sense</p>",
        "id": 477054699,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729019558
    },
    {
        "content": "<p>Ok, completed the switch across to Rust... it's looking pretty nice I think. <a href=\"https://github.com/lukewilliamboswell/roc-ray\">https://github.com/lukewilliamboswell/roc-ray</a></p>\n<p>For platform and app authors the dependencies are down to roc, rust, and <code>build-essential + git</code> which is pretty nice. </p>\n<p>I realised we can use the release builds from the raylib team directly... and then just generate our own bindings from the C header files. So much simpler to work with and removes a lot of crazy (large and messy) dependencies.</p>\n<p>I haven't finished the build config for Windows... but have tested and that is also working nicely. Only set up for x64-linux and aarch64-mac because that's all I have been able to test on. Next up I'd like to investigate support for wasm/browsers.</p>",
        "id": 477180013,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729074432
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/302903-platform-development/topic/roc-ray/near/477180013\">said</a>:</p>\n<blockquote>\n<p>I realised we can use the release builds from the raylib team directly... and then just generate our own bindings from the C header files. So much simpler to work with and removes a lot of crazy (large and messy) dependencies.</p>\n</blockquote>\n<p>I'm surprised there isn't a raylib-sys or similar that is exactly that.</p>",
        "id": 477231029,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729089294
    },
    {
        "content": "<p>Normally <code>-sys</code> crates have a feature flag to just download a library instead of compile it.</p>",
        "id": 477231231,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729089346
    },
    {
        "content": "<p>That is what raylib-sys does, but it builds everything from source using Cmake which was a pain to get working reliably across different OS's.</p>",
        "id": 477246317,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729093164
    },
    {
        "content": "<p>It introduced a lot of additional dependencies and fragile config.</p>",
        "id": 477246489,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729093212
    },
    {
        "content": "<p>Question for the crowd ... I'm currently downloading the <code>libraylib.a</code> from the official releases from GH. This is working ok, but it's kind of buried in the build script. I've been thinking it's not great hitting github everytime we build, even though I cache the binary in <code>target/</code>. I'm wondering if I should instead include/vendor the raylib releases in the repository so after cloning there is no need to make any more http requests to get the files.</p>",
        "id": 477569486,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729225630
    },
    {
        "content": "<p>I'd love for the releases to have a hash or something so we know if they change. I figure if it's in the repository then it wont change under us without a PR.<br>\n<em>edit</em> -- I guess I could just hash it myself and store that with the download URL</p>",
        "id": 477569530,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729225670
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> <span class=\"user-mention\" data-user-id=\"430894\">@Dan G Knutson</span> what do you guys think?</p>",
        "id": 477569623,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729225713
    },
    {
        "content": "<p>Some people may want to use the library built from source, so I could include a flag to not copy the vendored version across and leave it up to the user then how they provide the library.</p>",
        "id": 477569925,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729225890
    },
    {
        "content": "<p>But at least the common experience is simple and reliable.</p>",
        "id": 477569948,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729225912
    },
    {
        "content": "<blockquote>\n<p>Some people may want to use the library built from source</p>\n</blockquote>\n<p>I honestly wouldn't worry about or support this currently</p>",
        "id": 477576290,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729230341
    },
    {
        "content": "<p>Caching and vendoring both sound fine</p>",
        "id": 477576327,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729230360
    },
    {
        "content": "<p>Vendoring means more downloads overall (especially if it recorded in the repro history). How large is the lib?</p>",
        "id": 477576453,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729230437
    },
    {
        "content": "<p>Lib looks decently big. Some people may prefer just do download and cache the one version they need. So I would maybe push for just caching.</p>",
        "id": 477576586,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729230535
    },
    {
        "content": "<p>Ok, took some messing around... but we now have CI set up for linux, macos and windows! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 477593741,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729236972
    },
    {
        "content": "<p>I thought it was nice being able to get the raylib source out of the repo :)</p>",
        "id": 477681706,
        "sender_full_name": "Jared Cone",
        "timestamp": 1729265670
    },
    {
        "content": "<p>First steps with Textures... literally <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> <br>\n<a href=\"/user_uploads/22008/LEM56a6OQXwb20tbMux319qs/roc-ray-7.gif\">roc-ray-7.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/LEM56a6OQXwb20tbMux319qs/roc-ray-7.gif\" title=\"roc-ray-7.gif\"><img data-animated=\"true\" data-original-dimensions=\"459x213\" src=\"/user_uploads/thumbnail/22008/LEM56a6OQXwb20tbMux319qs/roc-ray-7.gif/840x560-anim.webp\"></a></div>",
        "id": 477771244,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729311705
    },
    {
        "content": "<p>Ooh, textures! You're really filling out that API</p>",
        "id": 477773068,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1729313444
    },
    {
        "content": "<p>I've got an animated dude walking around the screen... <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span>  really great fun</p>",
        "id": 477773101,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729313501
    },
    {
        "content": "<p>Completed the raylib 2d camera core example, <a href=\"https://github.com/lukewilliamboswell/roc-ray/blob/main/examples/2d_camera.roc\">link to roc-ray implementation</a><br>\n<a href=\"/user_uploads/22008/2XAskn1j3tilMqYp8VGj_AOS/roc-ray-9.gif\">roc-ray-9.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/2XAskn1j3tilMqYp8VGj_AOS/roc-ray-9.gif\" title=\"roc-ray-9.gif\"><img data-animated=\"true\" data-original-dimensions=\"803x482\" src=\"/user_uploads/thumbnail/22008/2XAskn1j3tilMqYp8VGj_AOS/roc-ray-9.gif/840x560-anim.webp\"></a></div>",
        "id": 477886639,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729421814
    },
    {
        "content": "<p>Another example -- 2D split-screen multiplayer <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> <a href=\"https://github.com/lukewilliamboswell/roc-ray/blob/main/examples/2d_camera_split_screen.roc\">source code</a></p>\n<p>Apologies for the chaotic/erratic player movement... I can't drive a keyboard two handed <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> .</p>\n<p><a href=\"/user_uploads/22008/uBDlZ56948OokYeGXlRSqRii/roc-ray-10.gif\">roc-ray-10.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/uBDlZ56948OokYeGXlRSqRii/roc-ray-10.gif\" title=\"roc-ray-10.gif\"><img data-animated=\"true\" data-original-dimensions=\"804x472\" src=\"/user_uploads/thumbnail/22008/uBDlZ56948OokYeGXlRSqRii/roc-ray-10.gif/840x560-anim.webp\"></a></div>",
        "id": 478633507,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729746534
    },
    {
        "content": "<p>This is so cool!</p>",
        "id": 478822329,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1729817760
    },
    {
        "content": "<p>Does anyone know what happens when <code>roc_panic</code> is called? Say we have called into roc, and then roc panics.... does roc return anything from that original call? </p>\n<p>I.e. if the API is:</p>\n<div class=\"codehilite\"><pre><span></span><code>renderForHost! : Box Model, Effect.PlatformStateFromHost =&gt; Result (Box Model) Str\n</code></pre></div>\n<p>And we get a <code>roc_panic</code> during the call to <code>renderForHost!</code> does that return?</p>",
        "id": 481522082,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731210101
    },
    {
        "content": "<p>I'm guessing I need to <code>panic!</code> or something and then catch that somehow back in the place where we called into roc or something like that... but I really have no idea, just guessing.</p>",
        "id": 481522368,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731210372
    },
    {
        "content": "<p>its up to the host what panic does</p>",
        "id": 481523684,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1731211764
    },
    {
        "content": "<p>in spirit it should never return</p>",
        "id": 481523695,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1731211776
    },
    {
        "content": "<p>I'm not sure that rust panic works through ffi</p>",
        "id": 481523778,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731211832
    },
    {
        "content": "<p>Yeah, I think I just found that out the hard way</p>",
        "id": 481523802,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731211850
    },
    {
        "content": "<p>May need to do something more cursed like setjmp and longjmp</p>",
        "id": 481523803,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731211850
    },
    {
        "content": "<p>It will leak any live roc memory</p>",
        "id": 481523820,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731211873
    },
    {
        "content": "<p>This is definitely stretching the limits of my lowlevel knowledge...</p>",
        "id": 481523846,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731211908
    },
    {
        "content": "<p>Basically, I'm not sure how to get back to the point where I called into roc;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// roc might panic in this call... I can do stuff in `roc_panic` ... but I need to get back here</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">render_caller</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">model</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">state</span><span class=\"p\">);</span>\n</code></pre></div>",
        "id": 481523961,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731212005
    },
    {
        "content": "<p>Claude says it's possible... I'm going to try it</p>",
        "id": 481524071,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731212091
    },
    {
        "content": "<p>Yeah, you can do it with setjmp and longjmp</p>",
        "id": 481524115,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731212133
    },
    {
        "content": "<p>I had that same issue and <code>catch_unwind</code> seems to work for me. In <code>roc_panic</code> I simply convert the Roc panic into a Rust panic (<a href=\"https://github.com/teskje/roc-plugins-for-rust/blob/8e0ce41bfb8941c301e1ef6f3b66e0be5120fe71/src/roc_host.rs#L36\">source</a>) that I then catch at the invocation side (<a href=\"https://github.com/teskje/roc-plugins-for-rust/blob/8e0ce41bfb8941c301e1ef6f3b66e0be5120fe71/src/plugin.rs#L87\">source</a>).</p>\n<p>That seems to work for me. I can't say anything about the safety of unwinding through FFI boundaries though.</p>",
        "id": 481577354,
        "sender_full_name": "teskje",
        "timestamp": 1731256759
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nomicon/ffi.html#ffi-and-unwinding\">https://doc.rust-lang.org/nomicon/ffi.html#ffi-and-unwinding</a></p>",
        "id": 481577753,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731257079
    },
    {
        "content": "<p>Sounds like they now have partial solution allowing unwinding c++ stack frames. That said, a roc stack frame is not a c++ stack frame....so probably ub</p>",
        "id": 481578013,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731257278
    },
    {
        "content": "<p>Hm, this part:</p>\n<blockquote>\n<p>If an unwinding operation does encounter an ABI boundary that is not permitted to unwind, the behavior depends on the source of the unwinding (Rust <code>panic</code> or a foreign exception):</p>\n<ul>\n<li><code>panic</code> will cause the process to safely abort.</li>\n</ul>\n</blockquote>\n<p>makes me wonder why <code>catch_unwind</code> works for me. Seems like it should abort, but it doesn't. Maybe the nomicon is outdated here?</p>",
        "id": 481579099,
        "sender_full_name": "teskje",
        "timestamp": 1731258122
    },
    {
        "content": "<p>Ah, never mind. It was me who had an outdated Rust version :)</p>\n<div class=\"codehilite\"><pre><span></span><code>thread caused non-unwinding panic. aborting.\nfish: Job 1, &#39;cargo run&#39; terminated by signal SIGABRT (Abort)\n</code></pre></div>",
        "id": 481579585,
        "sender_full_name": "teskje",
        "timestamp": 1731258488
    },
    {
        "content": "<p>Rip....I guess it isn't ub anymore</p>",
        "id": 481579620,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731258522
    },
    {
        "content": "<p>What if you change the function abi to the <code>-unwind</code> variant and just lie to rust</p>",
        "id": 481579636,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731258542
    },
    {
        "content": "<p>That gives the old behavior (where things work but are probably UB)</p>",
        "id": 481579855,
        "sender_full_name": "teskje",
        "timestamp": 1731258698
    },
    {
        "content": "<p>May technically not be ub. Might just be that we have no unwind info, so it just dumps all the functions and leaks anything from the roc side.</p>",
        "id": 481580443,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731259142
    },
    {
        "content": "<p>Which would also be the case with setjmp/longjmp, right?</p>",
        "id": 481580842,
        "sender_full_name": "teskje",
        "timestamp": 1731259427
    },
    {
        "content": "<p>Yep</p>",
        "id": 481581050,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731259595
    },
    {
        "content": "<p>Eventually roc could theoretically generate unwind info that deals with refcounts</p>",
        "id": 481581061,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731259618
    },
    {
        "content": "<p>Since the platform also controls allocation, it seems feasible that it could keep track of all allocations performed by roc and manually free the leaked ones after a crash.</p>",
        "id": 481581616,
        "sender_full_name": "teskje",
        "timestamp": 1731260095
    },
    {
        "content": "<p>for sure</p>",
        "id": 481582702,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731261016
    },
    {
        "content": "<p>just less convenient and slower for many use cases</p>",
        "id": 481582723,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731261033
    },
    {
        "content": "<p>easiest if it works for your use case is just arena allocations</p>",
        "id": 481582749,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731261048
    },
    {
        "content": "<p>Also, the bigger problem is ensuring all resource are cleaned up more so than memory. For rust we have a solution for that in the roc std library for rust.</p>",
        "id": 481582864,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731261155
    },
    {
        "content": "<p>Oh, interesting! Can you link to that?</p>",
        "id": 481585278,
        "sender_full_name": "teskje",
        "timestamp": 1731263239
    },
    {
        "content": "<p>Library: <a href=\"https://github.com/roc-lang/roc/blob/main/crates/roc_std_heap/src/lib.rs\">https://github.com/roc-lang/roc/blob/main/crates/roc_std_heap/src/lib.rs</a></p>\n<p>Use in basic cli to automatically deal with files: <a href=\"https://github.com/roc-lang/basic-cli/blob/4048641e0067e2be35955226acd50e11eba1cf45/crates/roc_host/src/lib.rs#L34\">https://github.com/roc-lang/basic-cli/blob/4048641e0067e2be35955226acd50e11eba1cf45/crates/roc_host/src/lib.rs#L34</a></p>\n<p>This enables automatically closing files when roc frees a file object. It would also be possible to keep track of a live list or scan the entire heap during a panic to free all currently open files.</p>",
        "id": 481587497,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731264970
    },
    {
        "content": "<p>Still not the best solution, but a step closer. That plus arena allocation would let a platform fully clean up everything in roc after a panic without too much overhead.</p>",
        "id": 481587553,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731265032
    },
    {
        "content": "<p>Thanks! My current use case uses roc only to run pure functions, so I think I only need to worry about allocations. But in general it would be good to have a blessed way to handle roc crashes in platforms that want to keep going and not just exit the process.</p>",
        "id": 481589447,
        "sender_full_name": "teskje",
        "timestamp": 1731266514
    },
    {
        "content": "<p>Yeah, currently it is 100% up to the platform and only easy if arena allocations works for you.</p>",
        "id": 481589677,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731266677
    }
]