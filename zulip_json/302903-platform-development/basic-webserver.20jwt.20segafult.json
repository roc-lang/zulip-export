[
    {
        "content": "<p>Working on the JWT impl for basic-webserver, and I have a segfault I'm trying to track down. </p>\n<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> I've isolated it to the call to the following... does this look right? (I know there is a lot of context missing) .. specifically, I suspect the <code>key</code> here is being dropped at the end of this function and that is messing with the heap somehow. Is the data copied into the heap or just a reference? </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[roc_fn(name = </span><span class=\"s\">\"jwtDecodingKeyFromRsaPem\"</span><span class=\"cp\">)]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">jwtDecodingKeyFromRsaPem</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"n\">secret</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">RocStr</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">RocResult</span><span class=\"o\">&lt;</span><span class=\"n\">RocBox</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">glue_internal_jwt</span><span class=\"p\">::</span><span class=\"n\">JwtErr</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"fm\">dbg!</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">secret</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">key</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">jsonwebtoken</span><span class=\"p\">::</span><span class=\"n\">DecodingKey</span><span class=\"p\">::</span><span class=\"n\">from_rsa_pem</span><span class=\"p\">(</span><span class=\"n\">secret</span><span class=\"p\">.</span><span class=\"n\">as_bytes</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">key</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">RocResult</span><span class=\"p\">::</span><span class=\"n\">err</span><span class=\"p\">(</span><span class=\"fm\">dbg!</span><span class=\"p\">(</span><span class=\"n\">jwt_err_to_roc</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">))),</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"fm\">dbg!</span><span class=\"p\">(</span><span class=\"s\">\"IN HERE\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">heap</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">jwt_key_heap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">alloc_result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">heap</span><span class=\"p\">.</span><span class=\"n\">alloc_for</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">alloc_result</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">RocResult</span><span class=\"p\">::</span><span class=\"n\">ok</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">RocResult</span><span class=\"p\">::</span><span class=\"n\">err</span><span class=\"p\">(</span><span class=\"n\">glue_internal_jwt</span><span class=\"p\">::</span><span class=\"n\">JwtErr</span><span class=\"p\">::</span><span class=\"n\">Other</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"s\">\"Ran out of memory allocating space for DecodingKey\"</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"p\">)),</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I'm wondering if I need to tell rust not to drop this value somehow.</p>",
        "id": 467422087,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1725429189
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"395097\" href=\"/#narrow/stream/395097-compiler-development/topic/bug.20possibly.20from.20using.20threadsafe.20refcounted.20heap\">#compiler development &gt; bug possibly from using threadsafe refcounted heap</a> by <span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span>.</p>",
        "id": 467423878,
        "sender_full_name": "Notification Bot",
        "timestamp": 1725429727
    },
    {
        "content": "<p>I've tried switching to use a ManuallyDrop, but that hasn't helped.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">JWT_KEY_HEAP</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">OnceLock</span><span class=\"o\">&lt;</span><span class=\"n\">ThreadSafeRefcountedResourceHeap</span><span class=\"o\">&lt;</span><span class=\"n\">ManuallyDrop</span><span class=\"o\">&lt;</span><span class=\"n\">jsonwebtoken</span><span class=\"p\">::</span><span class=\"n\">DecodingKey</span><span class=\"o\">&gt;&gt;&gt;</span>\n</code></pre></div>",
        "id": 467424132,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1725429840
    },
    {
        "content": "<p>Link to PR <a href=\"https://github.com/roc-lang/basic-webserver/pull/72\">https://github.com/roc-lang/basic-webserver/pull/72</a> in case that helps</p>",
        "id": 467424206,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1725429865
    },
    {
        "content": "<p>The heap takes ownership of the data passed in so it definitely shouldn't get dropped. Even if it was dropped, it shouldn't segfault until attempted use at some other point in the app</p>",
        "id": 467424496,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725429999
    },
    {
        "content": "<p>My first guess would be that something is wrong with the return result type maybe the error tag specifically. But that is just a wild guess from what commonly goes wrong and can lead to segfaults</p>",
        "id": 467425201,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725430287
    },
    {
        "content": "<p>Something fishy is going on... I change the type to <code>jwtDecodingKeyFromRsaPem(secret: &amp;RocStr) -&gt; RocResult&lt;RocBox&lt;()&gt;, ()&gt;</code> and now roc is seeing an <code>err</code>, even though it's returning an <code>ok</code></p>",
        "id": 467425755,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1725430519
    },
    {
        "content": "<p>That's not surprising</p>",
        "id": 467425802,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725430545
    },
    {
        "content": "<p>That would move the tag id location</p>",
        "id": 467425866,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725430563
    },
    {
        "content": "<p>Also changed on the roc side </p>\n<div class=\"codehilite\"><pre><span></span><code>jwtDecodingKeyFromRsaPem : Str -&gt; Task InternalJwt.DecodingKey {}\n</code></pre></div>",
        "id": 467425889,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1725430580
    },
    {
        "content": "<p>Oh....hmmm <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 467425905,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725430594
    },
    {
        "content": "<p>And the decoding key is just <code>Box {}</code>, right?</p>",
        "id": 467425971,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725430637
    },
    {
        "content": "<p>Oh wait... I think I had <code>InternalJwt.DecodingKey := Box {}</code></p>",
        "id": 467426026,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1725430673
    },
    {
        "content": "<p>Maybe that should be a <code>:</code> instead of <code>:=</code></p>",
        "id": 467426082,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1725430684
    },
    {
        "content": "<p>I don't think it should make a difference here, but worth trying</p>",
        "id": 467426117,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725430704
    },
    {
        "content": "<p>Yeah, hasn't changed anything</p>",
        "id": 467426232,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1725430771
    },
    {
        "content": "<p>I did simply the type so across the host boundary it's now just <code>jwtDecodingKeyFromRsaPem : Str -&gt; Task (Box {}) {}</code></p>",
        "id": 467426279,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1725430798
    },
    {
        "content": "<p>I can take a look tomorrow. No immediate ideas on a quick skim of the PR. Does the llvm ir type look normal?</p>\n<p>Also, can you tell if it is segfaulting in rust or in roc?</p>",
        "id": 467426385,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725430835
    },
    {
        "content": "<p>Valgrind may also help here</p>",
        "id": 467426673,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725430961
    },
    {
        "content": "<h2>commit 547975849af6860837d29e8870ee9dfc34b22d78</h2>\n<div class=\"codehilite\"><pre><span></span><code>declare { [0 x i64], [1 x i64], i8, [7 x i8] } @roc_fx_jwtDecodingKeyFromRsaPem(ptr)\n\ndefine internal fastcc void @roc_fx_jwtDecodingKeyFromRsaPem_fastcc_wrapper(ptr %0, ptr %1) {\nentry:\n  %tmp = call { [0 x i64], [1 x i64], i8, [7 x i8] } @roc_fx_jwtDecodingKeyFromRsaPem(ptr %0), !dbg !330\n  store { [0 x i64], [1 x i64], i8, [7 x i8] } %tmp, ptr %1, align 8, !dbg !330\n  ret void, !dbg !330\n}\n\ndefine internal fastcc void @PlatformTasks_jwtDecodingKeyFromRsaPem_48c2caee6f1010356bbec8845a6ee45f2928c63eece16acf25dc3f84dc5f6(ptr %closure_arg_jwtDecodingKeyFromRsaPem_0, ptr %0) !dbg !272 {\nentry:\n  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %0, ptr noundef nonnull align 8 dereferenceable(24) %closure_arg_jwtDecodingKeyFromRsaPem_0, i64 24, i1 false), !dbg !273\n  ret void, !dbg !273\n}\n\ndefine internal fastcc void @PlatformTasks_task_closure_jwtDecodingKeyFromRsaPem_f752fd971dee73f4bef39e126f15a0a84437112755ca589db8702463ce739a({} %&quot;130&quot;, ptr %closure_arg_jwtDecodingKeyFromRsaPem_0, ptr %0) !dbg !329 {\nentry:\n  %result_value = alloca { [0 x i64], [1 x i64], i8, [7 x i8] }, align 8\n  call fastcc void @roc_fx_jwtDecodingKeyFromRsaPem_fastcc_wrapper(ptr %closure_arg_jwtDecodingKeyFromRsaPem_0, ptr nonnull %result_value), !dbg !330\n  call fastcc void @&quot;#Attr_#dec_2&quot;(ptr %closure_arg_jwtDecodingKeyFromRsaPem_0), !dbg !330\n  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %0, ptr noundef nonnull align 8 dereferenceable(16) %result_value, i64 16, i1 false), !dbg !330\n  ret void, !dbg !330\n}\n</code></pre></div>",
        "id": 467426680,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1725430962
    },
    {
        "content": "<p>This is the new <code>Box {}</code> version with error type of <code>{}</code>?</p>",
        "id": 467426767,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725431007
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/302903-platform-development/topic/basic-webserver.20jwt.20segafult/near/467426673\">said</a>:</p>\n<blockquote>\n<p>Valgrind may also help here</p>\n</blockquote>\n<p>Ah, good idea... I should have thought of that. I'm just on my mac trying random things. I'll switch over to the linux machine</p>",
        "id": 467426795,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1725431024
    },
    {
        "content": "<p>Yeah, llvm ir type looks good</p>",
        "id": 467426826,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725431040
    },
    {
        "content": "<p>I'm relieved to hear you say that... but also now more confused</p>",
        "id": 467427032,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1725431123
    },
    {
        "content": "<p>Here is the <a href=\"https://gist.github.com/lukewilliamboswell/4bf9a7bdda32f297b1eadc89974b9fcf\">full valgrind output</a></p>\n<p>And a snippet.</p>\n<div class=\"codehilite\"><pre><span></span><code>==118423== Conditional jump or move depends on uninitialised value(s)\n==118423==    at 0x1AE641: roc_fx_jwtDecodingKeyFromRsaPem (in /home/lb-dev/github/basic-webserver/examples/json-web-token)\n==118423==    by 0x12A873: roc__forHost_0_caller (in /home/lb-dev/github/basic-webserver/examples/json-web-token)\n==118423==    by 0x175C01: rust_main (in /home/lb-dev/github/basic-webserver/examples/json-web-token)\n==118423==    by 0x488110D: (below main) (in /nix/store/ddwyrxif62r8n6xclvskjyy6szdhvj60-glibc-2.39-5/lib/libc.so.6)\n</code></pre></div>",
        "id": 467429762,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1725432132
    },
    {
        "content": "<p>According to GPT-4o <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> </p>\n<h3>Potential Issues in Your Code</h3>\n<ol>\n<li>\n<p><strong>Uninitialized Memory in <code>RocStr</code></strong>:<br>\n   Ensure that the <code>RocStr</code> passed to the function is properly initialized. If <code>RocStr</code> is a custom type, make sure its internal data is correctly set up before being used.</p>\n</li>\n<li>\n<p><strong>Uninitialized Memory in <code>jwt_key_heap</code></strong>:<br>\n   The function <code>jwt_key_heap()</code> is called to get a heap allocator. Ensure that this allocator is properly initialized and that it doesn't return uninitialized memory.</p>\n</li>\n<li>\n<p><strong>Uninitialized Memory in <code>alloc_for</code></strong>:<br>\n   The <code>alloc_for</code> method is called on the heap allocator. Ensure that this method does not return uninitialized memory or depend on uninitialized values.</p>\n</li>\n</ol>",
        "id": 467429839,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1725432172
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> if you could have a look tomorrow that would be super. </p>\n<p>I've stripped it back to a minimal repro (commented everything else out)... and used only the most simple types <code>RocStr</code> <code>RocBox&lt;()&gt;</code> etc. I've double checked the flow and types and it all looks good to me... so I'm scratching my head a little confused how rust is returning an <code>RocResult::ok</code> but roc is getting an <code>Task.err {}</code>.</p>\n<p>I'm going to take a break and pick this back up again tomorrow. I've pushed the latest I have for debugging to that branch.</p>",
        "id": 467433620,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1725433360
    },
    {
        "content": "<p>Took a bit of a look....not seeing the issue currently.</p>",
        "id": 467993795,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725574422
    },
    {
        "content": "<p>One guess for why some of these things work in basic-cli but no here is that either <code>roc_std</code> or <code>heap.rs</code> have different versions and there is a bug.</p>",
        "id": 467993909,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725574476
    },
    {
        "content": "<p>Ohk, that makes</p>",
        "id": 467997642,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1725576014
    },
    {
        "content": "<p>Gives me some ideas to test out</p>",
        "id": 467997663,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1725576029
    },
    {
        "content": "<p>I tried using roc_std from roc-lang/roc, that hasn't helped. <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 467998651,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1725576440
    }
]