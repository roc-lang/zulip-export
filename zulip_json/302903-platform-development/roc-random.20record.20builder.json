[
    {
        "content": "<p>Needed to generate a random list of buildings for a background... Sam helped upgrade roc-random to use records builders... and now I can do this which is cool.</p>\n<div class=\"codehilite\"><pre><span></span><code>randomBuilding : Random.Generator U32 { x : F32, y : F32, width : F32, height : F32, color : Color }\nrandomBuilding =\n\n    updateY = \\values -&gt; {values &amp; y : screenHeight - 130f32 - values.height}\n\n    { Random.chain &lt;-\n        x: Random.static 0f32,\n        y: Random.static 0f32,\n        width: Random.u32 50 200 |&gt; Random.map Num.toF32,\n        height: Random.u32 100 800 |&gt; Random.map Num.toF32,\n        color: {\n            Random.chain &lt;-\n                red: Random.u32 200 240 |&gt; Random.map Num.intCast,\n                green: Random.u32 200 240 |&gt; Random.map Num.intCast,\n                blue: Random.u32 200 250 |&gt; Random.map Num.intCast,\n        } |&gt; Random.map \\{ red, green, blue } -&gt; RGBA red green blue 255,\n    }\n    |&gt; Random.map updateY\n</code></pre></div>\n<p><a href=\"/user_uploads/22008/BXmPsLW87Q3Osoo6dqOu8OKh/Screenshot-2024-10-14-at-12.51.46.png\">Screenshot 2024-10-14 at 12.51.46.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/BXmPsLW87Q3Osoo6dqOu8OKh/Screenshot-2024-10-14-at-12.51.46.png\" title=\"Screenshot 2024-10-14 at 12.51.46.png\"><img data-original-dimensions=\"1642x1226\" src=\"/user_uploads/thumbnail/22008/BXmPsLW87Q3Osoo6dqOu8OKh/Screenshot-2024-10-14-at-12.51.46.png/840x560.webp\"></a></div>",
        "id": 476653949,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728870714
    },
    {
        "content": "<p>that's cool! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 476654026,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1728870753
    },
    {
        "content": "<p>why all the <code>|&gt; Random.map Num.intCast</code>? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 476654034,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1728870761
    },
    {
        "content": "<p>feels like that shouldn't be necessary</p>",
        "id": 476654048,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1728870767
    },
    {
        "content": "<p>That's something that would be good to investigate. I think it comes down to Roc having 13? different number types, and interfaces needing to handle every one separately</p>",
        "id": 476654101,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1728870835
    },
    {
        "content": "<p>So I think it's happening because the original author didn't feel like copying the same functions 13 times</p>",
        "id": 476654148,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1728870856
    },
    {
        "content": "<p>oh ok</p>",
        "id": 476654155,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1728870860
    },
    {
        "content": "<p>yeah I think copying them is the way to go <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 476654158,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1728870865
    },
    {
        "content": "<p>Weaver is like 60% this type of code, and 40% everything else haha</p>",
        "id": 476654168,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1728870884
    },
    {
        "content": "<p>Not that it matters <em>that</em> much</p>",
        "id": 476654178,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1728870894
    },
    {
        "content": "<p>I thought it was because I'm mixing U32 and U8 for the seed/state here... but I don't fully grok it</p>",
        "id": 476654194,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728870908
    },
    {
        "content": "<p>But I can foresee ecosystem devs getting lazy in the same way</p>",
        "id": 476654195,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1728870909
    },
    {
        "content": "<p>I'll see if I can remove them</p>",
        "id": 476654217,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1728870939
    },
    {
        "content": "<p>there should be a <code>Random.u8</code>, <code>Random.i8</code>, <code>Random.u16</code>, <code>Random.i16</code>, ...etc</p>",
        "id": 476654218,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1728870946
    },
    {
        "content": "<p>so you don't have to <code>map</code> that</p>",
        "id": 476654235,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1728870950
    },
    {
        "content": "<p>There is, but that changes the state type, and I don't think we can then mix them</p>",
        "id": 476654297,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728870972
    },
    {
        "content": "<p><a href=\"https://lukewilliamboswell.github.io/roc-random/Random/#u8\">https://lukewilliamboswell.github.io/roc-random/Random/#u8</a></p>",
        "id": 476654306,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728870982
    },
    {
        "content": "<p>Oh, good point...</p>",
        "id": 476654307,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1728870982
    },
    {
        "content": "<p>Yeah, the seed is kept as the same as the generated int</p>",
        "id": 476654319,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1728871009
    },
    {
        "content": "<p>Tbh, I'm not sure why there is different state types in here</p>",
        "id": 476654341,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728871025
    },
    {
        "content": "<p>And this composition API only works if the seeds are the same</p>",
        "id": 476654343,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1728871026
    },
    {
        "content": "<p>I think it's because there is 32/16/8 bits of \"noise\"</p>",
        "id": 476654358,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728871045
    },
    {
        "content": "<p>I presume we can just make all of the seeds <code>Num *</code></p>",
        "id": 476654360,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1728871049
    },
    {
        "content": "<p>And let Roc's \"default num type\" mechanism figure it out for the user</p>",
        "id": 476654382,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1728871073
    },
    {
        "content": "<p>That would be a nice upgrade</p>",
        "id": 476654437,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728871096
    },
    {
        "content": "<p>PR <a href=\"https://github.com/roc-lang/roc/issues/2\">#2</a>, here we come</p>",
        "id": 476654456,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1728871120
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>── TYPE MISMATCH in examples/2d_camera.roc ─────────────────────────────────────\n\nSomething is off with the body of the randomBuilding definition:\n\n59│   randomBuilding : Random.Generator (Num *) { x : F32, y : F32, width : F32, height : F32, color : Color }\n60│   randomBuilding =\n61│\n62│       updateY = \\values -&gt; {values &amp; y : screenHeight - 130f32 - values.height}\n63│\n64│&gt;      { Random.chain &lt;-\n65│&gt;          x: Random.static 0f32,\n66│&gt;          y: Random.static 0f32,\n67│&gt;          width: Random.int 50 200 |&gt; Random.map Num.toF32,\n68│&gt;          height: Random.int 100 800 |&gt; Random.map Num.toF32,\n69│&gt;          color: {\n70│&gt;              Random.chain &lt;-\n71│&gt;                  red: Random.u8 200 240,\n72│&gt;                  green: Random.u8 200 240,\n73│&gt;                  blue: Random.u8 200 250,\n74│&gt;          } |&gt; Random.map \\{ red, green, blue } -&gt; RGBA red green blue 255,\n75│&gt;      }\n76│&gt;      |&gt; Random.map updateY\n\nThis Random.map call produces:\n\n    Generator U32 { … }\n\nBut the type annotation on randomBuilding says it should be:\n\n    Generator (Num *) { … }\n\n\n── TYPE MISMATCH in examples/../../roc-random/package/Random.roc ───────────────\n\nSomething is off with the body of the u8 definition:\n\n201│  u8 : U8, U8 -&gt; Generator (Num *) U8\n202│  u8 = \\x, y -&gt; betweenUnsigned x y\n                    ^^^^^^^^^^^^^^^^^^^\n\nThis betweenUnsigned call produces:\n\n    State (Int Unsigned8) -&gt; {\n        state : State (Int Unsigned8),\n        value : Int Unsigned8,\n    }\n\nBut the type annotation on u8 says it should be:\n\n    State (Num *) -&gt; {\n        state : State (Num *),\n        value : U8,\n    }\n\n────────────────────────────────────────────────────────────────────────────────\n\n2 errors and 0 warnings found in 16 ms\n</code></pre></div>\n<p>I actually.. I don't think that works either</p>",
        "id": 476654483,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728871156
    },
    {
        "content": "<p>27 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"302903\" href=\"/#narrow/stream/302903-platform-development/topic/roc-ray\">#platform development &gt; roc-ray</a> by <span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span>.</p>",
        "id": 476654492,
        "sender_full_name": "Notification Bot",
        "timestamp": 1728871176
    },
    {
        "content": "<p>Let me try</p>",
        "id": 476654493,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1728871178
    },
    {
        "content": "<p>I'm thinking we should make the 32-bit variant the default, so we can have the <code>Random.u8</code> do what you expect. But then separate out the 16/8-bit noise ones into separate modules like (Random16, Random8) so people can still use those if they need the lower noise. </p>\n<p>Then every function within a module will play nicely together.</p>",
        "id": 476654948,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728871326
    },
    {
        "content": "<p>I think that would work, but I'm not sure why leaving it generic wouldn't also work</p>",
        "id": 476655053,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1728871373
    },
    {
        "content": "<p>And it would lead to lower surface area</p>",
        "id": 476655073,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1728871386
    },
    {
        "content": "<p>I think it's probably that bug, where once you use a top-level it's type becomes fixed/specialised or something like that</p>",
        "id": 476655290,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728871474
    },
    {
        "content": "<p>Ah...</p>",
        "id": 476655341,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1728871510
    },
    {
        "content": "<p>And based on what Ayaz said, I don't expect that we'll be changing how that works any time soon</p>",
        "id": 476655401,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1728871526
    },
    {
        "content": "<p>ah yeah that's true</p>",
        "id": 476655519,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1728871573
    },
    {
        "content": "<p>separate functions seems fine though</p>",
        "id": 476655534,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1728871580
    },
    {
        "content": "<p>probably less error-prone to use too</p>",
        "id": 476655551,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1728871585
    },
    {
        "content": "<p>Because apparently the alternative is that much slower to compile</p>",
        "id": 476655605,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1728871611
    },
    {
        "content": "<p>So I think that <code>roc-random</code> is unintentionally confusing as an api. It is trying to support all of the different PCG variants with all of the various state types.</p>",
        "id": 476664409,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728875335
    },
    {
        "content": "<p>Almost no one ever wants or needs that</p>",
        "id": 476664427,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728875344
    },
    {
        "content": "<p>You really just want the recommended 64 bit version hard coded</p>",
        "id": 476664446,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728875361
    },
    {
        "content": "<p>Then you want to map from the values it returns into the various smaller integer types.</p>",
        "id": 476664474,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728875378
    },
    {
        "content": "<p>If you are generating 8 bit numbers you don't want an 8 bit internal state.</p>",
        "id": 476664518,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728875399
    },
    {
        "content": "<p>You still want the full 64 bit internal state</p>",
        "id": 476664581,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728875411
    },
    {
        "content": "<p>Even on a 32 bit system, it is probably recommended to generally use the 64 bit state. 32 bits is not actually that much randomness and both will still be quite fast. Most rngs have 256 or way more state. The most common mersenne twister has 4kb of state if I recall corectly.</p>",
        "id": 476664732,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728875498
    },
    {
        "content": "<p>Yeah, just looked at the pcg library again. For a simple pcg library, I think it is recommended to just implement either the 32bit version (which has 64 bits of state) or the 64bit version (which has 128 bits of state).</p>",
        "id": 476665709,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728875936
    },
    {
        "content": "<p>Sounds good. I've just ripped the other variants out. I'll see if I can upgrade to U64 as the state... maybe U32 is fine, considering we will have builtin Crypto module which provides better crypto, this is just for randomish numbers</p>",
        "id": 476666453,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728876291
    },
    {
        "content": "<p>U64 is a safer bet IMO</p>",
        "id": 476666646,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1728876380
    },
    {
        "content": "<p>So it is either <code>U128</code> for state with <code>U64</code> output or <code>U64</code> as state with <code>U32</code> as output. I think either is fine desktop. For embedded, 32 bit, or weaker devices, the small state runs a lot faster.</p>",
        "id": 476666806,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728876461
    },
    {
        "content": "<p>The former  is my vote</p>",
        "id": 476666905,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1728876490
    },
    {
        "content": "<p>I think the former is the better default as well.</p>",
        "id": 476666927,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728876505
    },
    {
        "content": "<p>And yes, you're right. We should go for the \"sane defaults, complex available\" route</p>",
        "id": 476666947,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1728876517
    },
    {
        "content": "<p>I think it would be fine to support both as well. But I wouldn't support any state sizes besides those two.</p>",
        "id": 476666963,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728876527
    },
    {
        "content": "<p>And just expose the U128/U64 variant under something like <code>Random</code> and U64/U32 under <code>Random.U32</code></p>",
        "id": 476667017,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1728876551
    },
    {
        "content": "<p>I think I'd like to try renaming the <code>Random.chain</code> function to <code>Random.generate</code>... just because it \"feels\" right</p>",
        "id": 476667188,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728876617
    },
    {
        "content": "<p>Messing with the documentation</p>",
        "id": 476667242,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728876643
    },
    {
        "content": "<p>I'd not vote for <code>generate</code></p>",
        "id": 476667590,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1728876793
    },
    {
        "content": "<p>There are lots of candidates, but I'd only consider ones that also work if you're <em>not</em> using a record builder</p>",
        "id": 476667652,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1728876822
    },
    {
        "content": "<p>Unless you have a cool enough name, of course</p>",
        "id": 476667677,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1728876838
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/coqc8Vasxw7fzThZFtSYC-Vi/Screenshot-2024-10-14-at-14.35.43.png\">Screenshot 2024-10-14 at 14.35.43.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/coqc8Vasxw7fzThZFtSYC-Vi/Screenshot-2024-10-14-at-14.35.43.png\" title=\"Screenshot 2024-10-14 at 14.35.43.png\"><img data-original-dimensions=\"1174x878\" src=\"/user_uploads/thumbnail/22008/coqc8Vasxw7fzThZFtSYC-Vi/Screenshot-2024-10-14-at-14.35.43.png/840x560.webp\"></a></div>",
        "id": 476667928,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728876950
    },
    {
        "content": "<p>Yeah, it might be a little confusing...</p>",
        "id": 476668006,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728876973
    },
    {
        "content": "<p>Does that need to return a generator? Couldn't it return an rgb directly?</p>",
        "id": 476668337,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728877135
    },
    {
        "content": "<p>I think record builders should be flexible enough to support that, right?</p>",
        "id": 476668380,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728877153
    },
    {
        "content": "<p>It can do either</p>",
        "id": 476668393,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1728877161
    },
    {
        "content": "<p>That said, if it generates an RGB direcltly, where does the state go?</p>",
        "id": 476668443,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728877182
    },
    {
        "content": "<p>The problem with generating values is that you don't actually generate the value in this version of the library, you generate the value and the state, yes</p>",
        "id": 476668450,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1728877191
    },
    {
        "content": "<p>Yeah, so I guess you have to build up a generator (theoretically could do that with decode)... Though I think it requires the future version of decode.</p>",
        "id": 476668583,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728877245
    },
    {
        "content": "<p>Anyway, that is a side track for now.</p>",
        "id": 476668609,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728877258
    },
    {
        "content": "<p>I think a nice record builder generator api and a separate direct api sounds great.</p>",
        "id": 476668645,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728877277
    },
    {
        "content": "<p>Also, I would save <code>Random.generate</code> for converting a <code>Generator</code> into the final value?</p>",
        "id": 476668841,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728877360
    },
    {
        "content": "<p>Would you expect <code>Random.u8</code> to generate a random <code>U8</code> between <code>Num.maxU8</code> and <code>Num.minU8</code> or would you expect it to be a function that takes an upper and lower bound? say <code>u8 : U8, U8 -&gt; Generator U8</code></p>",
        "id": 476671269,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728878456
    },
    {
        "content": "<p>The former.</p>",
        "id": 476671528,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1728878539
    },
    {
        "content": "<p>I'd usually want: </p>\n<ul>\n<li>First, a random number, <code>Random.u8</code></li>\n<li>Then maybe, a bounded number, <code>Random.boundedU8</code></li>\n</ul>",
        "id": 476671613,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1728878576
    },
    {
        "content": "<p>Ok, so both in an API then</p>",
        "id": 476671973,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728878739
    },
    {
        "content": "<p>Also, I'm super tempted to generate a list of numbers and plot these on a histogram... would you expect a uniform distribution from PCG? I'm not super familiar with these things</p>",
        "id": 476672116,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728878792
    },
    {
        "content": "<p>According to Wikipedia, <a href=\"https://en.wikipedia.org/wiki/Permuted_congruential_generator\">PCGs are equidistributed</a>, so yes</p>",
        "id": 476672257,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1728878867
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/wKzDL1OSdk5aW8y7XNVHYglI/Screenshot-2024-10-14-at-15.11.31.png\">Screenshot 2024-10-14 at 15.11.31.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/wKzDL1OSdk5aW8y7XNVHYglI/Screenshot-2024-10-14-at-15.11.31.png\" title=\"Screenshot 2024-10-14 at 15.11.31.png\"><img data-original-dimensions=\"2434x928\" src=\"/user_uploads/thumbnail/22008/wKzDL1OSdk5aW8y7XNVHYglI/Screenshot-2024-10-14-at-15.11.31.png/840x560.webp\"></a></div><p>Looks alright to me</p>",
        "id": 476672749,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728879105
    },
    {
        "content": "<p>Ok, <a href=\"https://github.com/lukewilliamboswell/roc-random/pull/10\">https://github.com/lukewilliamboswell/roc-random/pull/10</a></p>\n<p>I did a big cleanup... ran out of steam and I'll leave the upgrade to U64 state for another time. This is working well for what I need, and I spent most of my time improving the docs, examples and API so it's much easier to use. The state upgrade should be all internal so that shouldn't really affect anyone.</p>",
        "id": 476675632,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728880497
    },
    {
        "content": "<p>Yeah, I know early roc-random had a bug at least with calculating the bounds when limiting. Cause when plotted as a scatter plotted, it clearly sampled zero too much and missed the lower edge. But I think that was fixed</p>",
        "id": 476679272,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728883031
    }
]