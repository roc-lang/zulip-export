[
    {
        "content": "<p>I would like to try to make a Rust platform. Is this a good time to try or should I wait?. Are there any recent docs for how to go about making a platform other than looking at existing once?</p>",
        "id": 541206720,
        "sender_full_name": "Henrik Larsson",
        "timestamp": 1758713844
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"736800\">@Henrik Larsson</span>,</p>\n<blockquote>\n<p>Is this a good time to try or should I wait?</p>\n</blockquote>\n<p>We are planning some changes to platforms with the the new compiler but I'm not sure how big those will be <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> </p>\n<blockquote>\n<p>Are there any recent docs for how to go about making a platform other than looking at existing once?</p>\n</blockquote>\n<p>No docs for this yet, <a href=\"https://github.com/roc-lang/basic-webserver\">basic-webserver</a> and <a href=\"https://github.com/roc-lang/basic-cli\">basic-cli</a> are probably the best examples for a rust platform.</p>",
        "id": 541231473,
        "sender_full_name": "Anton",
        "timestamp": 1758720928
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"736800\">@Henrik Larsson</span> you can build a rust platform today using the existing Roc compiler toolchain. If the goal is to experiment with ideas or build a proof of concept, and you're not looking to publish releases etc then I think that's ok. </p>\n<p>There are definitely some oddeties and things to work around - but if you can fork an existing platform and make minor modifications you should be fine. I'm happy to assist a little -- though I've been really focussed on getting the new Zig compiler online. </p>\n<p>We have solid examples in basic-cli, basic-webserver, basic-ssg, or my template <a href=\"https://github.com/lukewilliamboswell/roc-platform-template-rust\">roc-platform-template-rust</a>. </p>\n<p>Another approach that side-steps a lot of challenges is letting the cargo drive the linking etc (have Roc generate an object file). A good example is <a href=\"https://github.com/lukewilliamboswell/roc-ray\">roc-ray</a>. I think this is a good option for now, it's not as nice an experience if your wanting to make a release to share with others.  </p>\n<p>We intentionally haven't published any guides or documentation because the ABI and between the host and roc is a little different with our new compiler. We redesigned it based on our experience with the goal to have something much nicer.</p>\n<p>If you are ok waiting a couple of months, I think after we've ported basic-cli etc to the new compiler we will have good examples, nice docs, and generally a much easier configuration for platform development. </p>\n<p>So I'd say it's definitely possible to build nice Rust platforms today - but it requires fairly advanced Roc knowledge and systems level rust skills. </p>\n<p>Let me know what you decide <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 541343992,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1758756182
    },
    {
        "content": "<p>Awsome. Thanks for the info. I think I will just wait and keep an eye here for progress. What are the plans for the hot code reloading. Will this be a very development focused thing or will you be able to do hot code reload in production systems also?</p>",
        "id": 541369098,
        "sender_full_name": "Henrik Larsson",
        "timestamp": 1758776090
    },
    {
        "content": "<p>We plan for the dev builds to run with an interpreter. So we should be able to make it automatically pick up changes with a flag if a user wants that.</p>",
        "id": 541370553,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1758777019
    },
    {
        "content": "<p>I don't think there are any plans for a release build to do something similar</p>",
        "id": 541370572,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1758777033
    },
    {
        "content": "<p>I think 95% of the design for hot code reloading is already implemented and in main. If you checkout the <a href=\"https://github.com/roc-lang/roc/tree/main/test/int\">Int test platform</a> that is working e2e. </p>\n<p>For hot code reloading specifically ... I think** all that remains is to implement the part where the roc cli detects the file has changed using the watcher (which I think already exists??) and the rebuilds the ModuleEnv and restarts the child host-interpreter executable. </p>\n<p>** I'm really fuzzy on how it's actually going to work</p>",
        "id": 541375517,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1758780417
    },
    {
        "content": "<p>Maybe I'm getting confused with fast dev builds -- just rebuilding/restarting the app is currently like on the order of 10's of milliseconds.</p>",
        "id": 541375807,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1758780563
    },
    {
        "content": "<p>We've thrown ideas around for something like roc-dom where instead of using inter-process communication you can stream the newly built app to a host running in the browser (for example) and then reload/restart. In theory it should be possible for the host to detect if the \"Model\" has changed and possibly re-use the old app state. </p>\n<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> forgive me if I'm butchering this explanation <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 541376012,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1758780701
    }
]