[
    {
        "content": "<p>Hi,</p>\n<p>im am trying to build a platform written in zig and preprocess is, so it can be used with <code>roc build --prebuilt-platform</code>.</p>\n<p>What I am doing is the following:</p>\n<ol>\n<li>Build an example app with <code>roc build --no-link example/main.roc</code>. This creates <code>example/main.o</code></li>\n<li>Building a stub-lib with <code>roc gen-stub-lib example/main.roc</code>. This creates <code>platform/libapp.so</code></li>\n<li>Build zig with <code>platform/host.zig</code>, <code>example/main.o</code> and <code>platform/libapp.so</code>. This creates <code>platform/dynhost</code></li>\n<li>Run the example with <code>roc run --prebuilt-platform example/main.roc</code></li>\n</ol>\n<p>This works. The app runs correctly. But if I change the code of <code>example/main.roc</code> a bit (for example changing a constant string), and rerun Step 4,  it still runs the old code.</p>\n<p>It seems, the surgical linker does not replace the roc code. Do you have an idea, what I am doing wrong?</p>\n<p>Here is the <a href=\"https://github.com/ostcar/kingfisher\">current code</a>. The steps 1-3 can be executed by calling <code>zig build preprocess</code></p>",
        "id": 430227614,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1711704519
    },
    {
        "content": "<p>When I vendor all zig dependencies, then roc can build the platform. <code>roc build example/main.roc</code> creates a <code>libapp.so</code> and <code>/tmp/host_bitcodeXXX.o</code>. When I take this files and use them instead of the results from my steps 1 and 2, then everything works.</p>\n<p>So my question is, how does roc generate this two files?</p>\n<p><code>host_bitcodeXXX.o</code> is probably not the result of <code>roc build --no-link example/main.roc</code>, but a compiled version of the roc standard lib. Is this correct? How can I create it?</p>\n<p>I don't understand, what <code>libapp.so</code> is. If I use the version created with <code>roc gen-stub-lib example/main.roc</code>, then I get the error:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: ld.lld: undefined symbol: roc__mainForHost_1_caller\nerror: ld.lld: undefined symbol: roc__mainForHost_0_caller\n</code></pre></div>\n<p>How does roc create the file <code>libapp.so</code>?</p>",
        "id": 430264126,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1711722500
    },
    {
        "content": "<p>In your linking <code>example/main.o</code> should not be part of the platform linking process.</p>",
        "id": 430304984,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711739397
    },
    {
        "content": "<blockquote>\n<p>error: ld.lld: undefined symbol: roc__mainForHost_1_caller<br>\nerror: ld.lld: undefined symbol: roc__mainForHost_0_caller</p>\n</blockquote>\n<p>Probably a bug in our stub lib generation such that it isn't propulating the right function names.</p>",
        "id": 430305114,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711739453
    },
    {
        "content": "<p>Not sure where you are seeing <code>host_bitcodeXXX.o</code> in relation to everything else here.</p>",
        "id": 430305308,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711739544
    },
    {
        "content": "<p>Anyway. simple workaround should be <code>roc build --lib example/main.roc</code>. Then use the resulting <code>libapp.so</code> instead of the one generated by <code>roc gen-stub-lib</code></p>",
        "id": 430305513,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711739648
    },
    {
        "content": "<p>Fundamentally, your goal is to build a zig app that dynamically links to a <code>libapp.so</code> that is the roc application to load.</p>",
        "id": 430305556,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711739682
    },
    {
        "content": "<p>The surgical linker will take that dynamically linked setup, add the roc code to it, and turn it into a statically linked setup.</p>",
        "id": 430305606,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711739708
    },
    {
        "content": "<p>Aside, instead of having <code>gen-stub-lib</code> we could also just require all platforms to have at least one example and use that to generate a <code>libapp.so</code> that is used for setting up <code>dynhost</code> for surgical linking. <code>gen-stub-lib</code> generates an empty shared library with a number of symbol to satisfy the host linker. Basically tricks it into thinking that it linked with areal application. <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> any thoughts on cli design around this?</p>",
        "id": 430305869,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711739836
    },
    {
        "content": "<p>When I call <code>roc build --lib example/main.roc</code> I get a file called <code>main.so.1.0</code>. When I build the host with this file, and then call <code>roc preprocess-host examples/main.roc</code>, I get the error:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;main&#39; panicked at &#39;Shared lib not found as a dependency of the executable&#39;, crates/linker/src/elf.rs:1037:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>\n<p>The same happens, if I rename the file to <code>libapp.so</code>.</p>\n<p>I am using this file by adding the following line to the <code>build.zig</code>: <code>dynhost.addObjectFile(.{ .path = \"platform/libapp.so\" });</code>. If I use the <code>libapp.so</code>, that is generated, when I use <code>roc build</code>, then it works. So there seems to be something different from the file, created with <code>roc build --lib</code> and the file created from <code>roc build</code>.</p>\n<p>I tried to find the place in the roc source, that creates the <code>libapp.so</code>, but could not find it.</p>",
        "id": 430326666,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1711751904
    },
    {
        "content": "<p>The <a href=\"#narrow/stream/231634-beginners/topic/Export.20functions.20in.20wasm-platforms/near/424855562\">tip from Brian</a> to call <code>roc build</code> with <code>ROC_PRINT_BUILD_COMMANDS=1</code> only shows the zig command, that creates the <code>dynhost</code>, but not the command, that creates the <code>libapp.so</code> or the <code>host_bitcodeXXX.o</code>.</p>\n<p>It shows me the following command:</p>\n<div class=\"codehilite\"><pre><span></span><code>zig build-exe -fPIE -rdynamic examples/hello_world/../../platform/libapp.so /tmp/host_bitcodel8mYsWfv.o examples/hello_world/../../platform/host.zig -femit-bin=examples/hello_world/../../platform/dynhost --mod glue::/home/ossi/src/roc/crates/compiler/builtins/bitcode/src/glue.zig --deps glue -lc -target native -fcompiler-rt\n</code></pre></div>\n<p>As you can see, zig is called with three sources. The <code>libapp.so</code>, the <code>host.zig</code> and a temporary file <code>host_bitcodeXXX.o</code>. When I look in my temporary directory, there are many of these files, and all are the same. Since code for the roc builtins is in a folder called <a href=\"https://github.com/roc-lang/roc/tree/main/crates/compiler/builtins/bitcode\">bitcode</a>, I guess, that this is a compiled version of the roc builtins.</p>",
        "id": 430327527,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1711752503
    },
    {
        "content": "<p>Ah yeah, <code>--lib</code> is generating a shared library with the wrong name. And I'm pretty sure name is also part of the shared library on the filesystem. We specifically look for an app library</p>",
        "id": 430328769,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711753336
    },
    {
        "content": "<p>Let me see if I can figure that out</p>",
        "id": 430328798,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711753356
    },
    {
        "content": "<p>Oh, what if you add <code>--output libapp.so</code> might get roc to also set the lib name correctly</p>",
        "id": 430329644,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711753874
    },
    {
        "content": "<p>in terms of CLI design, I like the idea of having it be a sibling flag to <code>--output</code></p>",
        "id": 430330022,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1711754103
    },
    {
        "content": "<p>like when you build the platform, you can say <code>--output</code> to specify where the compiled binary goes, and then <code>--stubs</code> to specify where the stubs go</p>",
        "id": 430330070,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1711754145
    },
    {
        "content": "<p>seems like you'd always want both, in the world where we're having hosts driving the builds</p>",
        "id": 430330147,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1711754176
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/302903-Writing-a-platform/topic/precompile.20a.20zig.20platform/near/430329644\">said</a>:</p>\n<blockquote>\n<p>Oh, what if you add <code>--output libapp.so</code> might get roc to also set the lib name correctly</p>\n</blockquote>\n<p>This does not work. I creates a file called <code>libapp.so.1.0</code>. There is this <a href=\"https://github.com/roc-lang/roc/pull/6523\">open PR</a> that might fix this. I have not tested it on that branch</p>",
        "id": 430330666,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1711754485
    },
    {
        "content": "<p>I tested it on the PR <a href=\"https://github.com/roc-lang/roc/issues/6523\">#6523</a>. On this branch, <code>roc build --lib --output libapp.so</code> creates the correct file. But the result is the same. If I build <code>dynhost</code> with that file and then call <code>roc preprocess-host examples/main.roc</code>, I get the same error as before:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;main&#39; panicked at &#39;Shared lib not found as a dependency of the executable&#39;, crates/linker/src/elf.rs:1037:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>",
        "id": 430331512,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1711754927
    },
    {
        "content": "<p>Yeah I have neglected that PR, there are some failing tests. If you rename the shared lib to libapp.so.1 does that work? I had to do that for something similar.</p>",
        "id": 430340579,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1711760544
    },
    {
        "content": "<p>What does <code>ldd</code> on <code>dynhost</code> print. Does it show <code>libapp.so</code>?</p>",
        "id": 430347094,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711764773
    },
    {
        "content": "<p>Interesting: When I build on the roc-main-branch with <code>--output libapp.so</code>, it creates the file <code>libapp.so.1.0</code>. If I build dynhost with it, <code>ldd platform/dynhost</code> shows:</p>\n<div class=\"codehilite\"><pre><span></span><code>ldd platform/dynhost\n        linux-vdso.so.1 (0x00007ffdd1586000)\n        platform/libapp.so.1 =&gt; not found\n        libc.so.6 =&gt; /usr/lib/libc.so.6 (0x000070ad8fc53000)\n</code></pre></div>\n<p>When I rename the file to <code>libapp.so.1</code> and recreate <code>dynhost</code> with it, I get:</p>\n<div class=\"codehilite\"><pre><span></span><code>        linux-vdso.so.1 (0x00007fff6ff9e000)\n        platform/libapp.so.1 (0x0000711438424000)\n        libc.so.6 =&gt; /usr/lib/libc.so.6 (0x0000711438219000)\n        libm.so.6 =&gt; /usr/lib/libm.so.6 (0x000071143812d000)\n        libgcc_s.so.1 =&gt; /usr/lib/libgcc_s.so.1 (0x0000711438108000)\n</code></pre></div>\n<p>But when I call <code>roc preprocess-host examples/main.roc</code> with that file , I still get the same error:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;main&#39; panicked at &#39;Shared lib not found as a dependency of the executable&#39;, crates/linker/src/elf.rs:1037:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>\n<p>When I use the <code>libapp.so</code>, that is created as a sideeffect of <code>roc build example/main.roc</code>, <code>ldd dynhost</code> shows:</p>\n<div class=\"codehilite\"><pre><span></span><code>        linux-vdso.so.1 (0x00007fff64934000)\n        libapp.so =&gt; not found\n        libc.so.6 =&gt; /usr/lib/libc.so.6 (0x00007f02fc00f000)\n        /lib64/ld-linux-x86-64.so.2 =&gt; /usr/lib64/ld-linux-x86-64.so.2 (0x00007f02fc360000)\n</code></pre></div>\n<p>But on this version, <code>roc preprocess-host</code> works.</p>",
        "id": 430360852,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1711778267
    },
    {
        "content": "<p>When I build <code>dynhost</code> with <code>platform/libapp.so.1.0</code> and then call <code>patchelf --replace-needed platform/libapp.so.1 libapp.so platform/dynhost</code>, I can successfully call <code>roc preprocess-host examples/main.roc</code>. It creates a <code>.rh</code> and <code>.rm</code>file.</p>\n<p>But when I call <code>roc run --prebuilt-platform examples/main.roc</code>, I get the error:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ roc run --prebuilt-platform examples/main.roc\nAn internal compiler expectation was broken.\nThis is definitely a compiler bug.\nPlease file an issue here: https://github.com/roc-lang/roc/issues/new/choose\nthread &#39;main&#39; panicked at &#39;libc::fexecve(&quot;/proc/self/fd/3&quot;, ..., ...) failed: Errno { code: 8, description: Some(&quot;Exec format error&quot;) }&#39;, crates/cli/src/lib.rs:1127:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>\n<p>With <code>roc dev --prebuilt-platform</code>, I get:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ roc dev --prebuilt-platform examples/main.roc\nError Os { code: 8, kind: Uncategorized, message: &quot;Exec format error&quot; }\n</code></pre></div>",
        "id": 430362457,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1711779788
    },
    {
        "content": "<p>I found a solution. I looked some more at the roc source code, how the file is build. With this change, everything works for me: <a href=\"https://github.com/roc-lang/roc/pull/6611\">https://github.com/roc-lang/roc/pull/6611</a></p>\n<p>With this change, <code>roc build --lib --output platform/libapp.o</code> creates the correct file (without the <code>.1.0</code> extension). <code>ldd dynhost</code> shows the correct dependency (without the <code>.1</code> extension).</p>\n<p>In the old code, there was a link to an intel issue, but the page does not exist anymore. So I can not see, why the version number was added in the past.</p>\n<p>It was added with this two PRs four years ago:</p>\n<p><a href=\"https://github.com/roc-lang/roc/commit/60c33c81c3db625bc9a1f6900ae084390897fcb4#diff-cb0f45b3acd3b8c008a44f550c0399cebe2faab5b7f08e2ddbb6d488e30aa577R150\">https://github.com/roc-lang/roc/commit/60c33c81c3db625bc9a1f6900ae084390897fcb4#diff-cb0f45b3acd3b8c008a44f550c0399cebe2faab5b7f08e2ddbb6d488e30aa577R150</a></p>\n<p><a href=\"https://github.com/roc-lang/roc/commit/b4377d4d677fe109ac5d5344c6b61c5052e86938#diff-cb0f45b3acd3b8c008a44f550c0399cebe2faab5b7f08e2ddbb6d488e30aa577R138\">https://github.com/roc-lang/roc/commit/b4377d4d677fe109ac5d5344c6b61c5052e86938#diff-cb0f45b3acd3b8c008a44f550c0399cebe2faab5b7f08e2ddbb6d488e30aa577R138</a></p>",
        "id": 430365609,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1711782824
    },
    {
        "content": "<p><a href=\"https://web.archive.org/web/20201114040821/https://software.intel.com/content/www/us/en/develop/articles/create-a-unix-including-linux-shared-library.html\">Cached intel page</a></p>",
        "id": 430375561,
        "sender_full_name": "Anton",
        "timestamp": 1711792049
    },
    {
        "content": "<p>Do we even need <code>-soname output_path</code> at all? Without it, I believe that it should default to the file name.</p>",
        "id": 430397011,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711811112
    },
    {
        "content": "<p>Let's give it a try!</p>",
        "id": 430398853,
        "sender_full_name": "Anton",
        "timestamp": 1711812746
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/302903-Writing-a-platform/topic/precompile.20a.20zig.20platform/near/430397011\">said</a>:</p>\n<blockquote>\n<p>Do we even need <code>-soname output_path</code> at all? Without it, I believe that it should default to the file name.</p>\n</blockquote>\n<p>I can confirm, that it works without the <code>-soname</code> argument. I removed it in the PR.</p>",
        "id": 430398898,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1711812792
    },
    {
        "content": "<p>I have no idea, why the tests of the PR are failing. Would it be possible from one of you to have a look?</p>",
        "id": 430398964,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1711812847
    },
    {
        "content": "<p>Sure :)</p>",
        "id": 430399861,
        "sender_full_name": "Anton",
        "timestamp": 1711813709
    },
    {
        "content": "<p>This seems to be the cause:</p>\n<div class=\"codehilite\"><pre><span></span><code>/nix/store/fzlkaj1ax7gl655blfcr6zzvml1vx3bj-binutils-2.40/bin/ld: input file &#39;/tmp/nix-shell.DO4SN3/.tmp8u8Aig/app.o&#39; is the same as output file\n</code></pre></div>",
        "id": 430405064,
        "sender_full_name": "Anton",
        "timestamp": 1711818391
    },
    {
        "content": "<p>I think, I need more basic help. I am not familiar with the roc sourcecode  or how rust-test works.</p>\n<p>I see, that the panic <a href=\"https://github.com/roc-lang/roc/blob/185262510cbec8d7caae4d50a6d424acb0df7d73/crates/repl_test/src/cli.rs#L96\">happens here</a>. But every else is a mystery to me.</p>",
        "id": 430477640,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1711892456
    },
    {
        "content": "<p>I think, I found the problem and a solution.</p>\n<p>The problem is in the repl here: <a href=\"https://github.com/roc-lang/roc/blob/c72b95de971ff7c16cfd068bb2f1fbc14cf72263/crates/repl_cli/src/cli_gen.rs#L332-L343\">https://github.com/roc-lang/roc/blob/c72b95de971ff7c16cfd068bb2f1fbc14cf72263/crates/repl_cli/src/cli_gen.rs#L332-L343</a></p>\n<p>It calls <code>link()</code> and uses <code>app_o_file</code> as input file and as output file. This was not a problem before, since the extension <code>.so.1.0</code> was added to the output file name (<code>app.o</code> -&gt; <code>app.o.so.1.0</code>). The error was visible when typing anything into the repl.</p>\n<p>So the solution was, to use another file as output.</p>\n<p>I found a similar call to <code>link()</code> here: <a href=\"https://github.com/roc-lang/roc/blob/c72b95de971ff7c16cfd068bb2f1fbc14cf72263/crates/compiler/test_gen/src/helpers/dev.rs#L212-L223\">https://github.com/roc-lang/roc/blob/c72b95de971ff7c16cfd068bb2f1fbc14cf72263/crates/compiler/test_gen/src/helpers/dev.rs#L212-L223</a></p>\n<p>I hope, it should now work</p>",
        "id": 430560787,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1711959785
    },
    {
        "content": "<p>My solution was broken. roc expects a different file extension for linux, macos and windows. So the much easier solution is to just ensure the fileextension <code>so</code> on linux.</p>\n<p>The old PR had to much unnecessary changes, that where not needed. I though, it would be cleaner to open a new one. I hope, this was ok: <a href=\"https://github.com/roc-lang/roc/pull/6614\">https://github.com/roc-lang/roc/pull/6614</a></p>",
        "id": 430575619,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1711968313
    },
    {
        "content": "<p>I don't like on this version, that the fileextension <code>so</code> is enforced, even, when another fileextension is specified. For example <code>roc build --lib --output filename.MY_EXTENSION</code> will create a file called <code>filename.so</code>.</p>\n<p>But this is the old behavior, expect <code>so.1.0</code> is replaced with <code>so</code>, which fixed my original problem.</p>\n<p>To respect the fileextension from the <code>--output</code>-attribute needs some fixes in the roc-codebase, and maybe a rethinking, what file names are expected.</p>",
        "id": 430576208,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1711968716
    },
    {
        "content": "<blockquote>\n<p>To respect the fileextension from the --output-attribute needs some fixes in the roc-codebase, and maybe a rethinking, what file names are expected.</p>\n</blockquote>\n<p>Can you make an issue for that?</p>",
        "id": 430582576,
        "sender_full_name": "Anton",
        "timestamp": 1711972854
    },
    {
        "content": "<p>Sure, <a href=\"https://github.com/roc-lang/roc/issues/6617\">here</a> it is.</p>\n<p>Thank you for mergin the PR. It makes building zig platforms with dependencies easier</p>",
        "id": 430601720,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1711981872
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"496321\">Oskar Hahn</span> has marked this topic as resolved.</p>",
        "id": 430601726,
        "sender_full_name": "Notification Bot",
        "timestamp": 1711981877
    }
]