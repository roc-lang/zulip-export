[
    {
        "content": "<p>What is the current way to create a wasm platform?</p>\n<p>For a \"normal\" platform, I know what to do to create the files for the surgical or the legacy linker. But what is needed for was wasm-platform?</p>\n<p>When I create an app and try to build it, as if the platform was there, I get the error message: <code>No host.zig file found at examples/../platform/host.zig when building wasm32 target.</code>. Is <code>host.zig</code> hardcoded?</p>\n<p>If I create the file, I get the error <code>error: wasm-ld: entry symbol not defined (pass --no-entry to suppress): _start</code>. Is the zig-command hard coded? Is there any way I could use a <code>build.zig</code>? If I just create an <code>_start</code> function, an <code>.wasm</code> file is created, but it imports functions like <code>wasi_snapshot_preview1</code>. So its not a normal <code>.wasm</code> file, but a <code>wasi</code> file.</p>",
        "id": 494916254,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1737408484
    },
    {
        "content": "<p>I think wasm is very hardcode currently</p>",
        "id": 494916398,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737408560
    },
    {
        "content": "<p>The current state is to copy an example and use zig or to use <code>--no-link</code> and the directly interact with the generated wasm</p>",
        "id": 494916474,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737408593
    },
    {
        "content": "<p>That is at least my current understanding from when I last used it.</p>",
        "id": 494916552,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737408605
    },
    {
        "content": "<p>And yeah, I think the exact build command is hard coded as well.</p>",
        "id": 494916615,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737408631
    },
    {
        "content": "<p>I would assume using <code>--no-link</code> and then having <code>build.zig</code> control all the linking would be the easiest way today</p>",
        "id": 494916657,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737408651
    },
    {
        "content": "<p>I think that is what roc-wasm4 does</p>",
        "id": 494916676,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737408660
    },
    {
        "content": "<p>But this means, there is no way to create a precompiled platform. You need to create some sort of <code>app.o</code> file and link it with the <code>host.o</code>-file to a <code>.wasm</code>file?</p>",
        "id": 494917132,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1737408835
    },
    {
        "content": "<p>I would need to mess around with the tool chain, but I don't think we have ever had working recompiled hosts for wasm</p>",
        "id": 494918516,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737409499
    },
    {
        "content": "<p>It has always been more adhoc and could use help</p>",
        "id": 494918563,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737409523
    },
    {
        "content": "<p>If I understand <code>wasm4</code> correctly, it has a <code>build.zig</code> and a <code>build_roc.zig</code>.  To build a wasm file, you call <code>build.zig</code> which calls <code>build_roc.zig</code>. <code>build_roc.zig</code> calls the roc compiler with <code>--no-link</code>. It creates an <code>app.o</code> that is used by <code>build.zig</code> to create the final wasm-file.</p>",
        "id": 494918818,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1737409644
    },
    {
        "content": "<p>If there where support for a recompiled host, it would probably work like the legacy linker. Is this correct? The platform would provide some sort of host.o file, that roc can use to link it with the app.</p>",
        "id": 494919147,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1737409786
    },
    {
        "content": "<p>This is an area that needs some love in the roc build pipeline. </p>\n<p>Here's how I do it in the wasm template <a href=\"https://github.com/lukewilliamboswell/roc-platform-template-wasi/blob/main/build.sh\">https://github.com/lukewilliamboswell/roc-platform-template-wasi/blob/main/build.sh</a></p>",
        "id": 494921151,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1737410745
    },
    {
        "content": "<p>I think steps 2&amp;3 are not currently done by roc build, but I think they should. </p>\n<p>At least this is what I remember from when I was last looking at it.</p>",
        "id": 494921286,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1737410810
    },
    {
        "content": "<p>After syntax season... I'm keen to loop back and clean up all these templates.</p>",
        "id": 494921395,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1737410877
    },
    {
        "content": "<p>I'm definitely keen to pickup the WASM platform stuff again. I'd still like to build a playground in the browser.</p>",
        "id": 494921488,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1737410914
    },
    {
        "content": "<p>Also for reference, another (slightly more modern) example I have is the js-dom experiment <a href=\"https://github.com/lukewilliamboswell/roc-experiment-js-dom\">https://github.com/lukewilliamboswell/roc-experiment-js-dom</a></p>\n<p>This uses Rust and builds both a WASI cli, and also a WASM module for the browser using wasm-pack. </p>\n<p>Using rust for WASM platforms is also a good option right now -- though it's the same limitation, there isn't a good way to pre-build the host.</p>",
        "id": 494922494,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1737411366
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/302903-platform-development/topic/How.20to.20create.20a.20wasm-platform/near/494921488\">said</a>:</p>\n<blockquote>\n<p>I'm definitely keen to pickup the WASM platform stuff again. I'd still like to build a playground in the browser.</p>\n</blockquote>\n<p>it would be super rad to have this before redoing all the tutorials for static dispatch and everything, so they could be built around being interactive! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 494923481,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737411802
    }
]