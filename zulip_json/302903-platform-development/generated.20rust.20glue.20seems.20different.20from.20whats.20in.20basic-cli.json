[
    {
        "content": "<p>I have a platform I'm trying to setup to make a property based testing framework for roc.</p>\n<p>I stubbed out the basics <a href=\"https://github.com/JRMurr/roc-pbt/tree/e553fab69018a438b41062b28f422de113df2e56\">here</a></p>\n<p>I would like to write some functions in rust that would be exposed to roc to get random strings, nums, etc. I gathered from reading some of the other platform examples i need to make <code>roc_fx_&lt;func&gt;</code> defs and add them to an <code>Effect.roc</code> file manually.</p>\n<p>The issue im running into is any of the custom effects I added seem to cause the roc app to exit when called. If i stick to \"pure\" roc the app seems to run normally. I also copied some effects from basic cli to see if was how my functions were defined but seems to have the same issue.</p>\n<p>I used <code>roc glue &lt;path to rust spec&gt; </code> to generate the glue code but one difference I'm noticing between the glue it generated and the basic cli is how <code>roc__mainForHost_xxxx</code> links are handled. </p>\n<p>The <a href=\"https://github.com/JRMurr/roc-pbt/blob/e553fab69018a438b41062b28f422de113df2e56/platform/crates/glue/roc_app/src/x86_64.rs#L31\">glue generated this</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[repr(C)]</span>\n<span class=\"cp\">#[derive(Debug)]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">RocFunction_72</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">closure_data</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">RocFunction_72</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">force_thunk</span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">roc_std</span>::<span class=\"n\">RocResult</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"k\">fn</span> <span class=\"nf\">roc__mainForHost_0_caller</span><span class=\"p\">(</span><span class=\"n\">arg0</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">closure_data</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">output</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">roc_std</span>::<span class=\"n\">RocResult</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">mem</span>::<span class=\"n\">MaybeUninit</span>::<span class=\"n\">uninit</span><span class=\"p\">();</span>\n\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">roc__mainForHost_0_caller</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">closure_data</span><span class=\"p\">.</span><span class=\"n\">as_mut_ptr</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">output</span><span class=\"p\">.</span><span class=\"n\">as_mut_ptr</span><span class=\"p\">());</span>\n\n<span class=\"w\">            </span><span class=\"n\">output</span><span class=\"p\">.</span><span class=\"n\">assume_init</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">mainForHost</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">roc_std</span>::<span class=\"n\">RocResult</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">roc__mainForHost_1_exposed_generic</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">roc_std</span>::<span class=\"n\">RocResult</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">mem</span>::<span class=\"n\">MaybeUninit</span>::<span class=\"n\">uninit</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">roc__mainForHost_1_exposed_generic</span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">.</span><span class=\"n\">as_mut_ptr</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"n\">ret</span><span class=\"p\">.</span><span class=\"n\">assume_init</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>but in <code>basic-cli</code> i see </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"cp\">#[link_name = </span><span class=\"s\">\"roc__mainForHost_1_exposed_generic\"</span><span class=\"cp\">]</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">roc_main</span><span class=\"p\">(</span><span class=\"n\">output</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"cp\">#[link_name = </span><span class=\"s\">\"roc__mainForHost_1_exposed_size\"</span><span class=\"cp\">]</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">roc_main_size</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i64</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"cp\">#[link_name = </span><span class=\"s\">\"roc__mainForHost_0_caller\"</span><span class=\"cp\">]</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">call_Fx</span><span class=\"p\">(</span><span class=\"n\">flags</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">closure_data</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">output</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"cp\">#[allow(dead_code)]</span>\n<span class=\"w\">    </span><span class=\"cp\">#[link_name = </span><span class=\"s\">\"roc__mainForHost_0_size\"</span><span class=\"cp\">]</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">size_Fx</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i64</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"cp\">#[link_name = </span><span class=\"s\">\"roc__mainForHost_0_result_size\"</span><span class=\"cp\">]</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">size_Fx_result</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i64</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Do i need to manually create some of these other extern funcs like <code>roc_main_size</code>, <code>call_Fx</code>, etc for roc to handle the effects correctly?</p>\n<p>I couldn't find any platform making tutorial docs when poking around, do any exist? If not Id be happy to document some of the process to get the basics setup once I get something working</p>",
        "id": 408270252,
        "sender_full_name": "John Murray",
        "timestamp": 1702681694
    },
    {
        "content": "<p>The docs don't exist cause we are working on a huge change (have been for a while). So documenting the process now isn't super useful.</p>",
        "id": 408272041,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702682981
    },
    {
        "content": "<p>As for the other functions there, you shouldn't need them. Glue should generate that correctly.</p>",
        "id": 408272138,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702683024
    },
    {
        "content": "<p>You will need the <code>roc_fx_*</code> function which I don't think glue will generate</p>",
        "id": 408272166,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702683059
    },
    {
        "content": "<p>Probably would need to look at your platform specifically when I am on pc to give real advice</p>",
        "id": 408272199,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702683090
    },
    {
        "content": "<p>Ahh the doc stuff makes sense.</p>\n<p>I tried to split up some of my rust code around so definitely possible I missed something during that</p>",
        "id": 408272326,
        "sender_full_name": "John Murray",
        "timestamp": 1702683194
    },
    {
        "content": "<p>Yeah, first glance on phone looks fine.</p>",
        "id": 408272508,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702683351
    },
    {
        "content": "<p>The size function isn't needed cause the size of a task i32 is know at compile time</p>",
        "id": 408272602,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702683398
    },
    {
        "content": "<p>So glue can just generate all of that statically</p>",
        "id": 408272624,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702683414
    },
    {
        "content": "<p>And the caller function labeled <code>call_Fx</code> is used in the <code>force_thunk</code> function that glue generates`</p>",
        "id": 408272688,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702683474
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"666594\">@John Murray</span> btw I'd love to include property based testing directly into <code>expect</code>! Want to chat about it sometime?</p>",
        "id": 408272846,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1702683588
    },
    {
        "content": "<p>Definitly! mostly using this as an excuse to make my own platform so would love to help out with pbt in <code>expect</code></p>",
        "id": 408272968,
        "sender_full_name": "John Murray",
        "timestamp": 1702683673
    },
    {
        "content": "<p>I'll try to take a look shortly, probably something simple. If you want to try and debug in the meantime, run with a debugger and print the stack trace when it crashes.</p>",
        "id": 408273332,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702683953
    },
    {
        "content": "<p>That will probably reveal a function with slightly off API or something</p>",
        "id": 408273390,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702683967
    },
    {
        "content": "<p>Oh, I bet this needs an explicit out param:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[no_mangle]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">roc_fx_genStr</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">RocStr</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">RocStr</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"s\">\"abc\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 408273468,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702684041
    },
    {
        "content": "<p><code>out: *mut RocStr</code></p>",
        "id": 408273495,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702684072
    },
    {
        "content": "<p>so would it be something like </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[no_mangle]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">roc_fx_genStr</span><span class=\"p\">(</span><span class=\"n\">_out</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">RocStr</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">RocStr</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">RocStr</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"s\">\"abc\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>or would i need to set out to <code>RocStr::from(\"abc\")</code>?</p>",
        "id": 408274078,
        "sender_full_name": "John Murray",
        "timestamp": 1702684527
    },
    {
        "content": "<p>Set out to that and return nothing</p>",
        "id": 408274891,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702684989
    },
    {
        "content": "<p>I updated to </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[no_mangle]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">roc_fx_genStr</span><span class=\"p\">(</span><span class=\"n\">out</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">RocStr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">out</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">RocStr</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"s\">\"abc\"</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>with this roc program to test</p>\n<div class=\"codehilite\"><pre><span></span><code>app &quot;simple&quot;\n    packages { pf: &quot;../platform/main.roc&quot; }\n    imports [\n        pf.Task.{Task},\n        pf.Generator,\n        pf.Stdout,\n    ]\n    provides [main] to pf\n\ndbge = \\x -&gt;\n    dbg x\n\n    x\n\nmain : Task {} I32\nmain =\n    val &lt;- Generator.genStr |&gt; dbge |&gt; Task.await\n    {} &lt;- Stdout.line val |&gt; dbge |&gt; Task.await\n    Task.err 0\n</code></pre></div>\n<p>and the output I have is </p>\n<div class=\"codehilite\"><pre><span></span><code>roc dev examples/simple.roc\n🔨 Rebuilding platform...\nENTERTING ROC\n[examples/simple.roc:11] x = &lt;opaque&gt;\nLEAVING ROC\nRES:(RocOk(ManuallyDrop { value: () }))\n</code></pre></div>\n<p>the last line sometimes will be something like <code>RES:(RocErr(ManuallyDrop { value: -1597949984 }))</code> were the number changes a lot.</p>\n<p>Would that imply that maybe my manual bindings for things like alloc are wrong?</p>",
        "id": 408290515,
        "sender_full_name": "John Murray",
        "timestamp": 1702693571
    },
    {
        "content": "<p>I ended up getting it to work but not using the generated glue in <code>roc_app</code> and instead using the same <code>rust_main</code> from basic cli</p>",
        "id": 408301659,
        "sender_full_name": "John Murray",
        "timestamp": 1702701395
    },
    {
        "content": "<p>I wonder what glue has wrong</p>",
        "id": 408301943,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702701610
    },
    {
        "content": "<p>I'll have to dig into that in the future</p>",
        "id": 408301965,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702701621
    },
    {
        "content": "<p>Do you think you could file a bug with the failing version</p>",
        "id": 408301978,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702701635
    },
    {
        "content": "<p>Will do!</p>",
        "id": 408301981,
        "sender_full_name": "John Murray",
        "timestamp": 1702701641
    },
    {
        "content": "<p>Not sure when I will get to it, maybe monday. About to travel, so not exactly sure my free time, but I do want to figure out what is going on here.</p>",
        "id": 408302030,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702701686
    },
    {
        "content": "<p>No rush! im unblocked for now so no worries.</p>",
        "id": 408302160,
        "sender_full_name": "John Murray",
        "timestamp": 1702701788
    },
    {
        "content": "<p>The generated glue has this as main</p>\n<div class=\"codehilite\"><pre><span></span><code>mainForHost : Task {} I32\nmainForHost = main\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">mainForHost</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">roc_std</span>::<span class=\"n\">RocResult</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">roc__mainForHost_1_exposed_generic</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">roc_std</span>::<span class=\"n\">RocResult</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">mem</span>::<span class=\"n\">MaybeUninit</span>::<span class=\"n\">uninit</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">roc__mainForHost_1_exposed_generic</span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">.</span><span class=\"n\">as_mut_ptr</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"n\">ret</span><span class=\"p\">.</span><span class=\"n\">assume_init</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>so i think uninit is only making the space for a roc result and not the actual effect which needs to be resolved?</p>",
        "id": 408302790,
        "sender_full_name": "John Murray",
        "timestamp": 1702702249
    },
    {
        "content": "<p>created <a href=\"https://github.com/roc-lang/roc/issues/6288\">https://github.com/roc-lang/roc/issues/6288</a></p>",
        "id": 408303101,
        "sender_full_name": "John Murray",
        "timestamp": 1702702463
    },
    {
        "content": "<p>Another interesting place to look it basic-webserver.</p>",
        "id": 408304162,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1702703114
    },
    {
        "content": "<p>It has a workaround to make glue generate the correct type for main</p>",
        "id": 408304176,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1702703126
    },
    {
        "content": "<p>Here is the platform main which is modified so glue will generate correctly <a href=\"https://github.com/roc-lang/basic-webserver/blob/main/platform/main-glue.roc\">https://github.com/roc-lang/basic-webserver/blob/main/platform/main-glue.roc</a></p>",
        "id": 408304313,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1702703205
    },
    {
        "content": "<p>This was a workaround Brendan provided, I am not sure how it works.</p>",
        "id": 408304364,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1702703255
    },
    {
        "content": "<p>Haha....now I remember. Thanks for posting that.</p>",
        "id": 408305682,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702704347
    },
    {
        "content": "<p>The issue is that glue sees the task and assumes that the final value is being returned. So it doesnt generate code to call the task chain.</p>",
        "id": 408305756,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702704382
    },
    {
        "content": "<p>By writing it explicitly as a function that returns a closure, we are actually specific the underlying closure type that the task truly generates</p>",
        "id": 408305782,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702704419
    },
    {
        "content": "<p>That is why the workaround functions and what is need to make glue work here as well.</p>",
        "id": 408305807,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702704438
    },
    {
        "content": "<p>For generating this glue we would need a workaround like <code>rocMainForHost : {} -&gt; ({} -&gt; Result {} I32)</code> or something like that for this example.</p>",
        "id": 408305929,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702704548
    },
    {
        "content": "<p>Or it might just be:<br>\n<code>rocMainForHost : ({} -&gt; Result {} I32)</code></p>",
        "id": 408306027,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702704632
    },
    {
        "content": "<p>Ahh that makes a lot of sense. Does the glue script not have enough introspection to know that task is opaque but it relies on effect?</p>",
        "id": 408307387,
        "sender_full_name": "John Murray",
        "timestamp": 1702705791
    },
    {
        "content": "<p>Yeah, it just doesn't have special handling for this currently</p>",
        "id": 408313165,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702710574
    },
    {
        "content": "<p>Cause effect is a special type</p>",
        "id": 408313174,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702710580
    }
]