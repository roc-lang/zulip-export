[
    {
        "content": "<p>I see mentions of \"effect interpreters\" all over the place, including the <a href=\"https://www.roc-lang.org/plans\">planned changes page</a> of the Roc website, the <a href=\"https://github.com/lukewilliamboswell/roc-platform-template-rust/blob/main/platform/Effect.roc\">Rust platform template</a>, and countless references across Zulip going back <a href=\"#narrow/channel/231634-beginners/topic/platform.20dependent.20libraries/near/318769457\">nearly 2 years ago</a>.</p>\n<p>I know this is a team with finite time and resources so I'm definitely not throwing shade here, but I have to know: what is preventing this work from moving forward?  From my very limited understanding, it seems like effect interpreters will have a significant impact on platform design and development.  Writing a platform today is already difficult without documentation, and it's made even more daunting by the fact that a mysterious feature called \"effect interpreters\" with an unknown timeline will make whatever I'm learning right now obsolete.  To be completely honest, it's a bit frustrating that something this fundamental to Roc itself hasn't settled and apparently isn't being prioritized, because we're spending lots of energy on arguably less important things like camelCase vs snake_case, function calls with spaces vs parens, etc.</p>\n<p>Maybe Zulip chatter isn't representative of the real work that happens behind the scenes, but as an outsider, these priorities feel a bit out of wack.  I apologize if my message comes across a bit strong here (although I do feel strongly about it).  I'm happy to be told that I'm wrong, that effect interpreters won't actually impact platform development <em>that much</em>, and that syntax issues actually do matter more than effect interpreters (I have seen the quote from Louis Pilfold).  I have massive respect for what you all do and there's no language that I'm more excited to use than Roc!  I'm really just trying to make sense of this issue, and see if there's anything I could do to help solve it.</p>",
        "id": 484077049,
        "sender_full_name": "Tanner Nielsen",
        "timestamp": 1732379096
    },
    {
        "content": "<p>I have a mix of answers.... let me try and give a solid explanation</p>",
        "id": 484081050,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732382416
    },
    {
        "content": "<p>I apologize if this ends up being out of order....trying to congeal the best way and order to explain this is not obvious</p>",
        "id": 484081138,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732382513
    },
    {
        "content": "<p>Firstly, what are effect interpreters:</p>\n<p>They are just state machines that enable async io. When you use async they generate stackless coroutines. This is a fancy way to say they automatically generate suspendable state machines. They run code on the main stack until they hit a <code>await</code>. Once an <code>await</code> is hit, the entire stack is washed away only leaving behind the minimal state to know what io operation to start and what continuation to run once io is complete.</p>",
        "id": 484081362,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732382693
    },
    {
        "content": "<p>From a platform perspection. effect interpreter just means that roc collapses all of its interface into a state machine like other async systems. This enables roc to play nice with other async systems.</p>",
        "id": 484081497,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732382817
    },
    {
        "content": "<p>If you look at basic webserver today, rust is async, but roc is not. As such, roc is constantly breaking the async model in ways that totally could ruin performance. If roc sleeps for 100ms, it blocks whatever thread it is on for 100ms. Effect intepretters are required to actually allow rocs io to run async. It would be a huge performance win for the current version of basic webserver. Especially when it comes to anything async that takes a while (like waiting 200ms for a web request).</p>",
        "id": 484081653,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732382986
    },
    {
        "content": "<p>Why don't we have them yet?</p>",
        "id": 484081717,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732383016
    },
    {
        "content": "<p>Well, I personally have pushed on them a few different times. So have a few other core roc contributors.</p>",
        "id": 484081734,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732383037
    },
    {
        "content": "<p>The real problem is that the run into some harsh edge cases in the type system that are non-trivial to fix.</p>",
        "id": 484081772,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732383070
    },
    {
        "content": "<p>Where these bugs happen are probably the most specialized part of the roc compiler that most people are not capable of diving into and fixing. I definitely don't have the time and energy to gain the expertise to fix these issues.</p>",
        "id": 484081877,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732383146
    },
    {
        "content": "<p>The core contributors to roc that would be most capable of fixing these issues have been really busy and have not contributed much code to roc in general for a while now (though they definitely continue to bless us with great insights into what would be required to fix these issues).</p>",
        "id": 484081947,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732383212
    },
    {
        "content": "<p>So the main issue is that no one currently is available with the expertise and time to fix these issues</p>",
        "id": 484082017,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732383251
    },
    {
        "content": "<p>On top of that, effect interpreters though important for unlocking async io just aren't that important at the current state of roc.</p>",
        "id": 484082056,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732383305
    },
    {
        "content": "<p>Most apps are not really doing anything super performance heavy today. Even basic webserver with the limitations around async runs ok.</p>",
        "id": 484082082,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732383340
    },
    {
        "content": "<p>What I do think is a failing on my part personally and something the core contributors could have done better as a whole is document and educate on the current platform interfaces.</p>",
        "id": 484082178,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732383396
    },
    {
        "content": "<p>I am probably the local expert on platform interfaces and building platforms....I have taught it to a ton of people and helped debug a ton, but I still have not documented any of it and have continued to push that off.</p>",
        "id": 484082224,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732383441
    },
    {
        "content": "<p>There is also a ton of very useful work that way more people could work on around glue generation. It could make platform development a ton easier, but it needs a lot of love. I work on platforms all the time, but roll my own glue cause glue just isnt good enough yet.</p>",
        "id": 484082317,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732383528
    },
    {
        "content": "<p>Yeah, if we as developers try to optimize for the majority of the parts of Roc that people will interface with, that's generally a good dev experience for writing simple tools (CLIs, webservers, websites, etc.) and understanding the shape of Roc. So though Roc is at a high level designed with platforms in mind, 99% of people will just be using <code>basic-cli</code>.</p>",
        "id": 484082354,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1732383565
    },
    {
        "content": "<p>I think roc is at the point that we really should promote and document a lot more of the platform development cycle. <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> has done a great job at trying to make tons of examples in this domain.</p>",
        "id": 484082430,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732383619
    },
    {
        "content": "<p>Meaning it is more useful for us to work on the parts of Roc that people will interact with in the near future, and especially with the difficulties/opaqueness of implementation that Brendan laid out above, this isn't that high of a priority.</p>",
        "id": 484082444,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1732383638
    },
    {
        "content": "<hr>\n<p>Now for the biggest kicker.... We may not need effect interpretters anymore.</p>\n<p>That comes with a big caveat. The correct statement is more so: In the medium term, recent changes around purity inference and synchronous io have enabled alternatives to effect intepretters that can be similarly performant. While we may still want effect interpretters in the long run to better interface with async systems, we may not need it for the general case of platform development.</p>",
        "id": 484082710,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732383857
    },
    {
        "content": "<p>Essentially, we now have removed a lot of the state wrangling in roc and have direct synchronous io. This originally was thought to be invalid cause pure languages without side effects need to return effects which fundamentally requires building up async io. Turns out with purity inference, you can get the benefits of both purity and simple direct synchronous io.</p>",
        "id": 484082843,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732383978
    },
    {
        "content": "<p>As such, we could, for example, setup a platform that mirrors the goroutine system where all io is synchronous in api, but under the hood is running async io due to stackful coroutines.</p>\n<p>More on this at <a class=\"stream-topic\" data-stream-id=\"303057\" href=\"/#narrow/channel/303057-gatherings/topic/Roc.20Online.20Meetup.20Nov.202024\">#gatherings &gt; Roc Online Meetup Nov 2024</a></p>",
        "id": 484082985,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732384102
    },
    {
        "content": "<p>Thanks for explaining all this Brendan <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 484083125,
        "sender_full_name": "Anton",
        "timestamp": 1732384242
    },
    {
        "content": "<p>Thanks for this Brendan, this is very insightful.  Still digesting it, but I have a few immediate questions:</p>\n<ul>\n<li>will hosted modules be more likely to stick around now that it's less clear that effect interpreters are actually needed?</li>\n<li>if/when effect interpreters are implemented, is it possible to make them opt-in?  or is it impossible to disentangle them from the application/platform interface if we were to add them?  it would be awesome if we could unblock platform dev documentation/stabilization.  I'd also be happy to help here but have been hesitant because I barely understand the current system and was under the impression that effect interpreters would change everything anyway</li>\n</ul>",
        "id": 484084508,
        "sender_full_name": "Tanner Nielsen",
        "timestamp": 1732385496
    },
    {
        "content": "<p>I think hosted will stick around (though we still want to change how linking is done)</p>",
        "id": 484086108,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732387021
    },
    {
        "content": "<p>I think effect interpretters likely would be opt in</p>",
        "id": 484086129,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732387038
    }
]