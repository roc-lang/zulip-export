[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"496321\">@Oskar Hahn</span> had a really good point in the meetup today. Instead of building coroutines and a scheduler and async io manually in zig (fun project and still could be awesome long term), we should be able to make a basic webserver equivalent platform today in go. That would give most of the benefits and be much much easier to build.</p>\n<p>I do think there are a number of things we could optimize better with a zig platform for basic webserver that deals with coroutines and etc, but just using go would probably be 80% of the gain for 10% the work.</p>\n<p>So im the medium term a coroutine based synchronous API with async io under the hood should be possible to stand up in golang. Probably should use fast http over std http, but sounds like a great idea to enable more power.</p>\n<p>On top of that assuming we can spawn gorountine from an effect, it would also enable more powerful parallelism and background processing if need.</p>\n<p>Long term multithreaded data sharing would still be more complex, but that isn't generally needed for webservers. I may switch into focusing on that.</p>",
        "id": 484112740,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732413607
    },
    {
        "content": "<p>do you have the demo from earlier today pushed anywhere? I'm curious to take a look!</p>",
        "id": 484113103,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1732413992
    },
    {
        "content": "<p>Not sure the status, but this is <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> impl <a href=\"https://github.com/bhansconnect/roc-coro-webserver\">https://github.com/bhansconnect/roc-coro-webserver</a></p>",
        "id": 484113716,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732414738
    },
    {
        "content": "<p>Yeah, that is the current impl. Very adhoc currently.</p>",
        "id": 484115084,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732416353
    },
    {
        "content": "<p>The core of coroutines, scheduling, and the event loop are set up reasonably, but not much is built on top yet</p>",
        "id": 484115144,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732416382
    },
    {
        "content": "<p>as in like other I/O operations and such?</p>",
        "id": 484115538,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1732416820
    },
    {
        "content": "<p>Yeah, and like robust http parsing, proper mapping to roc types, etc.</p>",
        "id": 484115729,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732417030
    },
    {
        "content": "<p>Though the scheduler still has a solid amount of work to do if we want to make it nice</p>",
        "id": 484115800,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732417087
    },
    {
        "content": "<p>Like it is a solid MVP, but would be a lot of work to make robust and a lot of it will include protocol level work that would just be complete with out languages/libraries. We only have slim os primitives to work with here</p>",
        "id": 484115829,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732417142
    },
    {
        "content": "<p>Then of course, it is quite unstable and buggy currently.</p>",
        "id": 484115842,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732417161
    },
    {
        "content": "<p>cool, yeah I was wondering which parts are missing...I shouldn't let myself get sniped, but building those things out sounds like a lot of fun to me <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 484116053,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1732417384
    },
    {
        "content": "<p>but I gotta stay focused on lambda sets</p>",
        "id": 484116066,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1732417406
    },
    {
        "content": "<p>we need an emoji for that...maybe <span aria-label=\"llama\" class=\"emoji emoji-1f999\" role=\"img\" title=\"llama\">:llama:</span> (llambda sets)</p>",
        "id": 484116073,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1732417426
    },
    {
        "content": "<p>I totally agree that this could be a very fun project full of a lot of depth and learning, but just doing it in ho could be 80% the gain for way less work. That could be way more valuable to the community in the short term.</p>",
        "id": 484117179,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732418684
    },
    {
        "content": "<p>Obviously building it out in zig means that even the web framework could be tailored to roc, so lots of potential perf optimizations</p>",
        "id": 484117201,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732418711
    },
    {
        "content": "<p>I think this project still could be amazing and hugely valuable to roc, this is more a comment on what might be best to prioritize</p>",
        "id": 484117212,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732418740
    },
    {
        "content": "<p>Then there is the side comment about stability and robustness. I think that it could be a long slog to get this platform robust</p>",
        "id": 484117267,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732418774
    },
    {
        "content": "<p>yeah that's fair, and it's separately cool to be like \"hey here's a way to get Roc programs running from Go!\"</p>",
        "id": 484120186,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1732422015
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> since Go compiles to static binaries, could a Go host Just Work with like <code>roc run</code> etc?</p>",
        "id": 484120631,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1732422581
    },
    {
        "content": "<p>I'm not sure, but I assume so. I assume <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> or <span class=\"user-mention\" data-user-id=\"496321\">@Oskar Hahn</span> know.</p>",
        "id": 484120718,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732422642
    },
    {
        "content": "<p>Yes, here's an example <a href=\"https://github.com/lukewilliamboswell/roc-platform-template-go\">https://github.com/lukewilliamboswell/roc-platform-template-go</a></p>",
        "id": 484120932,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732422958
    },
    {
        "content": "<p>Needs a little love for purity inference and builtin Task I think</p>",
        "id": 484120977,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732422985
    },
    {
        "content": "<p>After this mornings meetup, I'm very interested in updating this. Just focussed on basic-cli...</p>",
        "id": 484121173,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732423150
    },
    {
        "content": "<p>Does it work with the surgical linker?</p>",
        "id": 484121241,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732423200
    },
    {
        "content": "<p>I think we can make it. The current template doesn't, but I dont think it will be hard. At the time my platform knowledge was much less than now.</p>",
        "id": 484121626,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732423605
    },
    {
        "content": "<p>Why do you ask?</p>",
        "id": 484121644,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732423635
    },
    {
        "content": "<p>Just curious if something about go makes it not work with the surgical linker</p>",
        "id": 484124610,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732426512
    },
    {
        "content": "<p>I think I'm stuck with basic-cli... I might tinker with go for a bit</p>",
        "id": 484129266,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732431649
    },
    {
        "content": "<p>Yes, works with the surgical linker. </p>\n<p>You can use the kingfisher platform as an example.</p>\n<p><a href=\"https://github.com/ostcar/kingfisher/tree/main/host\">https://github.com/ostcar/kingfisher/tree/main/host</a></p>\n<p>The main.go has to be different for the surgical linker and the legacy linker. This is why I created two main-files and used build tags to decide which one to use. </p>\n<p>This is the build script, that creates all files for both linkers: <a href=\"https://github.com/ostcar/kingfisher/blob/main/build.roc\">https://github.com/ostcar/kingfisher/blob/main/build.roc</a></p>\n<p>Also have a look at this PR: <a href=\"https://github.com/ostcar/kingfisher/pull/21\">https://github.com/ostcar/kingfisher/pull/21</a></p>\n<p>This has the most up to date version of a roc stdlib in go. It specifically has a working implementation of RocList.</p>",
        "id": 484129975,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1732432436
    },
    {
        "content": "<p>I've just pushed an upgrade to purity inference for <a href=\"https://github.com/lukewilliamboswell/roc-platform-template-go/tree/main\">https://github.com/lukewilliamboswell/roc-platform-template-go/tree/main</a></p>",
        "id": 484130266,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732432798
    },
    {
        "content": "<p>Also keep in mind, that you have to use zig as a cc compiler to cross compile cgo. But this only works with zig 0.11. here is the zig issues: <a href=\"https://github.com/ziglang/zig/issues/20689\">https://github.com/ziglang/zig/issues/20689</a></p>",
        "id": 484130420,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1732432945
    },
    {
        "content": "<p>After my experience with the zig allocator, I would not use c malloc with go, but create a simple allocator in pure go. When the inline expect issue is solved, then you don't need libc, which makes linking even easier and you should get a static binary.</p>",
        "id": 484130747,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1732433351
    },
    {
        "content": "<p>Nice, for the zig thing we can add a nix flake to help with that</p>",
        "id": 484131138,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732433807
    },
    {
        "content": "<p>How would you like to upgrade the template with the surgical linking things <span class=\"user-mention\" data-user-id=\"496321\">@Oskar Hahn</span>?</p>",
        "id": 484131166,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732433861
    },
    {
        "content": "<p>Yes, I can have a look. But I have children&amp;friends <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>. I will probably need some time.</p>",
        "id": 484131547,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1732434289
    }
]