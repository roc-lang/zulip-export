[
    {
        "content": "<p>When I was trying to write a simple platform for AoC, my first idea was to provide two functions to the platform. One for part1 and another for part2. For example:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">platform</span><span class=\"w\"> </span><span class=\"s\">\"aoc\"</span>\n<span class=\"w\">    </span><span class=\"nx\">requires</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nv\">part1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">part2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"nx\">exposes</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n<span class=\"w\">    </span><span class=\"nx\">packages</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"w\">    </span><span class=\"nx\">imports</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n<span class=\"w\">    </span><span class=\"nx\">provides</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">        </span><span class=\"nx\">part1ForHost</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nx\">part2ForHost</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">]</span>\n\n<span class=\"nv\">part1ForHost</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Str</span>\n<span class=\"nv\">part1ForHost</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">part1</span>\n\n<span class=\"nv\">part2ForHost</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Str</span>\n<span class=\"nv\">part2ForHost</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">part2</span>\n</code></pre></div>\n<p>But it seems, that it is neigher possible to require two symbols, nor provide two symbols to the zig-part.</p>\n<p>Two <code>requires</code> is a Parse error:</p>\n<div class=\"codehilite\"><pre><span></span><code>Parse error was:\n\nHeader(Requires(ListStart(@68), @14))\n</code></pre></div>\n<p>I found this example in the roc repo, where an app provides more then one function, but I could not find the corresponding platform. So maybe it is possible, but I am using the wrong syntax?</p>\n<p><a href=\"https://github.com/roc-lang/roc/blob/main/crates/compiler/load_internal/tests/fixtures/build/app_with_deps/Quicksort.roc\">https://github.com/roc-lang/roc/blob/main/crates/compiler/load_internal/tests/fixtures/build/app_with_deps/Quicksort.roc</a></p>\n<p>For the second part, it seems, that only the first symbol is exported to the linker:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">platform</span><span class=\"w\"> </span><span class=\"s\">\"aoc\"</span>\n<span class=\"w\">    </span><span class=\"nx\">requires</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">solution</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"nx\">exposes</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n<span class=\"w\">    </span><span class=\"nx\">packages</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"w\">    </span><span class=\"nx\">imports</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n<span class=\"w\">    </span><span class=\"nx\">provides</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">        </span><span class=\"nx\">solutionForHost</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nx\">solution2ForHost</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">]</span>\n\n<span class=\"nv\">solutionForHost</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"p\">)</span>\n<span class=\"nv\">solutionForHost</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">solution</span>\n\n<span class=\"nv\">solution2ForHost</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"p\">)</span>\n<span class=\"nv\">solution2ForHost</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">solution</span>\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>── UNUSED DEFINITION ─────────────────────────────── days/../platform/main.roc ─\n\nsolution2ForHost is not used anywhere in your code.\n\n15│  solution2ForHost = solution\n     ^^^^^^^^^^^^^^^^\n\nIf you didn&#39;t intend on using solution2ForHost then remove it so\nfuture readers of your code don&#39;t wonder why it is there.\n\n────────────────────────────────────────────────────────────────────────────────\n\nAn internal compiler expectation was broken.\nThis is definitely a compiler bug.\nPlease file an issue here: https://github.com/roc-lang/roc/issues/new/choose\nthread &#39;&lt;unnamed&gt;&#39; panicked at &#39;Error:\n    Failed to rebuild host.zig:\n        The executed command was:\n            zig build-exe -fPIE -rdynamic days/../platform/libapp.so /tmp/host_bitcodeeuGxgAj3.o days/../platform/host.zig -femit-bin=days/../platform/dynhost --mod glue::/home/ossi/src/roc/crates/compiler/builtins/bitcode/src/glue.zig --deps glue -lc -target native -fcompiler-rt\n        stderr of that command:\n            error: ld.lld: undefined symbol: roc__solution2ForHost_1_exposed_generic\n    note: referenced by host.zig:21\n    note:               days/../platform/dynhost.o:(host.main)\n    note: did you mean: roc__solutionForHost_1_exposed_generic\n    note: defined in: days/../platform/libapp.so\n&#39;, crates/compiler/build/src/link.rs:1414:21\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\nthread &#39;main&#39; panicked at &#39;Failed to (re)build platform.: Any { .. }&#39;, crates/compiler/build/src/program.rs:1021:46\n</code></pre></div>\n<p>Is this something, that is in the scope of roc, or should there be only one exported symbol?</p>",
        "id": 404252255,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1701000845
    },
    {
        "content": "<p>it definitely should be supported, it's just not implemented yet <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 404255030,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701002883
    },
    {
        "content": "<p>Yeah, currently the only way to make that work is to return a record of functions to main, but that is a bit jank.</p>",
        "id": 404268746,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701013143
    },
    {
        "content": "<p>Also, pretty sure that the \"app\" you found is just a test for parsing and loading into the AST. So we have the parsing for this, but we haven't wired it all the way through.</p>",
        "id": 404268899,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701013284
    },
    {
        "content": "<p>Definitely a missing feature that needs to be implemented.</p>",
        "id": 404268916,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701013303
    },
    {
        "content": "<p>The easiest way for the moment (when both function should return the same type) is to use an argument. The following works perfectly:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">platform</span><span class=\"w\"> </span><span class=\"s\">\"aoc\"</span>\n<span class=\"w\">    </span><span class=\"nx\">requires</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">solution</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">Part1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Part2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"nx\">exposes</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n<span class=\"w\">    </span><span class=\"nx\">packages</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"w\">    </span><span class=\"nx\">imports</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n<span class=\"w\">    </span><span class=\"nx\">provides</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">solutionForHost</span><span class=\"p\">]</span>\n\n<span class=\"nv\">solutionForHost</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">Part1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Part2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Str</span>\n<span class=\"nv\">solutionForHost</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">part</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">part</span><span class=\"w\"> </span><span class=\"o\">is</span>\n<span class=\"w\">        </span><span class=\"nx\">Part1</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">solution</span><span class=\"w\"> </span><span class=\"nx\">Part1</span>\n<span class=\"w\">        </span><span class=\"nx\">Part2</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">solution</span><span class=\"w\"> </span><span class=\"nx\">Part2</span>\n</code></pre></div>",
        "id": 404418292,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1701093699
    },
    {
        "content": "<p>I really thought something like this would work, but apparently, roc is missing some sort of type understanding for this to work as well:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">platform</span><span class=\"w\"> </span><span class=\"s\">\"aoc\"</span>\n<span class=\"w\">    </span><span class=\"nx\">requires</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">solution</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">part1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">part2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"nx\">exposes</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n<span class=\"w\">    </span><span class=\"nx\">packages</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"w\">    </span><span class=\"nx\">imports</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n<span class=\"w\">    </span><span class=\"nx\">provides</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">solutionForHost</span><span class=\"p\">]</span>\n\n<span class=\"nv\">solutionForHost</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">Part1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Part2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Str</span>\n<span class=\"nv\">solutionForHost</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">part</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">part</span><span class=\"w\"> </span><span class=\"o\">is</span>\n<span class=\"w\">        </span><span class=\"nx\">Part1</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"nx\">solution</span><span class=\"p\">.</span><span class=\"nx\">part1</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"w\">        </span><span class=\"nx\">Part2</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"nx\">solution</span><span class=\"p\">.</span><span class=\"nx\">part2</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n</code></pre></div>",
        "id": 404448524,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701102813
    },
    {
        "content": "<p>It works for me. I copied and pasted your suggestion and adapted the app. I am not sure yet, which solution I like better:</p>\n<p><a href=\"https://github.com/ostcar/aoc2023/blob/return_two_functions/platform/main.roc\">https://github.com/ostcar/aoc2023/blob/return_two_functions/platform/main.roc</a></p>",
        "id": 404456731,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1701105518
    },
    {
        "content": "<p>interesting, wouldn't <code>roc check</code> for me, maybe I messed something else up.</p>",
        "id": 404459353,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701106505
    },
    {
        "content": "<p>I added an issue for this: <a href=\"https://github.com/roc-lang/roc/issues/6115\">https://github.com/roc-lang/roc/issues/6115</a></p>",
        "id": 404904926,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1701275349
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 404907737,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701276222
    }
]