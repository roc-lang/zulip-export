[
    {
        "content": "<p>I'm trying to understand how a platform might dynamically load a Roc app at runtime, i.e. a plugin use-case. I have limited knowledge and experience here so would appreciate any pointers to help me learn more about this. I am assuming this is how a plug-in might be built and used, though I wonder if a plug-in is just <code>.roc</code> interface files instead?</p>\n<p>I understand <code>roc build</code> compiles a Roc app into a standalone static binary. One way to use this could be Rust's <code>std::process::Command</code> and then IPC using something like <code>interprocess::local_socket</code> to send data that has been serialised between the platform and plugin. </p>\n<p>Or is there a better way? Maybe <code>roc build --lib</code> to build a C library and then use the linker somehow?</p>",
        "id": 310716046,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1668726164
    },
    {
        "content": "<p>The theoretical plan for dynamically using a roc app:</p>\n<ol>\n<li>Tell roc to build a shared/dynamic library</li>\n<li>Have the platform binary find this library (could be select in the UI, loading all in a folder, having it loaded when you do something like import a package, etc)</li>\n<li>Have the platform load the shared library</li>\n<li>Dispatch calls to the shared library and use it like a normal roc app.</li>\n</ol>\n<p>This can all be done at runtime and be dynamic.</p>",
        "id": 310717952,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1668727078
    },
    {
        "content": "<p>We already do this for our tests</p>",
        "id": 310718012,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1668727094
    },
    {
        "content": "<p>Each case is compiled to a shared library and loaded by the rust test runner.</p>",
        "id": 310718041,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1668727111
    },
    {
        "content": "<p>Cool. Thanks for that, I didn't know you could do that. I'll have a closer look.</p>",
        "id": 310719301,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1668727784
    },
    {
        "content": "<p>In rust we use: <a href=\"https://docs.rs/libloading/latest/libloading/\">https://docs.rs/libloading/latest/libloading/</a></p>",
        "id": 310719770,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1668727968
    }
]