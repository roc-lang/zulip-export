[
    {
        "content": "<p>Currently, the signature of roc_alloc is <code>(size: usize, alignment: u32) [*]u8</code> (zig syntax). </p>\n<p>The argument <code>alignment</code> is currently not used by most platforms, since most platforms just use <code>malloc</code>. And <code>malloc</code> does not have an alignment argument, but always uses the \"fundamental alignment\". I am not absolutely sure, what the fundamental alignment is, <a href=\"https://en.cppreference.com/w/cpp/types/max_align_t\">I think, it is 16 bytes</a>?</p>\n<p>In Zig, there is the function <code>allocation.alignedAlloc()</code> that takes an alignment value. But this value has to be comptime. So it can not use a variable alignment from roc. So a zig-platform has to use an alignment of 16 to support all types (for example <code>List U128</code>. </p>\n<p>My question is, is it useful for <code>roc_alloc</code> to have the argument <code>alignment</code> if neither <code>malloc</code>  nor zig can use it?</p>",
        "id": 482206558,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1731513632
    },
    {
        "content": "<p>My argument is fault. It is possible to use the argument in zig:</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"kr\">export</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">roc_alloc</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">alignment</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">*</span><span class=\"p\">]</span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kr\">var</span><span class=\"w\"> </span><span class=\"n\">mem</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">undefined</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alignment</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">mem</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">allocator</span><span class=\"p\">.</span><span class=\"n\">alignedAlloc</span><span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">catch</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">debug</span><span class=\"p\">.</span><span class=\"n\">panic</span><span class=\"p\">(</span><span class=\"s\">\"roc_alloc: OOM\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.{});</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">mem</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">allocator</span><span class=\"p\">.</span><span class=\"n\">alignedAlloc</span><span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">catch</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">debug</span><span class=\"p\">.</span><span class=\"n\">panic</span><span class=\"p\">(</span><span class=\"s\">\"roc_alloc: OOM\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.{});</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">mem</span><span class=\"p\">.</span><span class=\"n\">ptr</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 482211273,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1731514828
    },
    {
        "content": "<p>Interesting that it is comptime zig. I guess that is the normal case</p>",
        "id": 482223426,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731518460
    },
    {
        "content": "<p>Also, yeah, for simplicity, one can always fall back on 16 bytes. That said, denser allocations can be done. Saves a lot of space in arenas for example if everything is packed as tight as alignment allows</p>",
        "id": 482223556,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731518511
    },
    {
        "content": "<p>At the moment, the value of alignment is at least 8 (maybe usize, I am on a 64 system). Even for a type like <code>List U8</code>. Could/Should this be changed?</p>",
        "id": 482223796,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1731518590
    },
    {
        "content": "<p>Oh yeah, I always forget that all of our allocations are refcounted so they contain a usize....</p>",
        "id": 482227735,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731519926
    },
    {
        "content": "<p>So savings of at most 8 bytes per allocations in roc if you don't align to 16 all the time</p>",
        "id": 482227995,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731520016
    },
    {
        "content": "<p>Was there a discussion to put the ref counts to a different place? This would be an argument to do this.</p>\n<p>It's like the idea to put attributes in different arrays to get a better memory layout. It seems wrong that every roc object on the heap needs 8 bytes to save a very small number.</p>",
        "id": 482246473,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1731526692
    },
    {
        "content": "<p>refcounts need to be on the heap. That said, we could:</p>\n<ol>\n<li>allow for 32bit refcounts on 64bit systems</li>\n<li>allow for unaligned refounts (not sure if this is a good idea though might hurt perf too much, but if they are accessed in frequently it may not affect perf and would save mem)</li>\n</ol>",
        "id": 482246819,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731526816
    },
    {
        "content": "<p>Also, to be fair, most objects on the heap in roc are dynamically sized and can get quite large (list and str). Everything else tends to be on the stack.</p>",
        "id": 482246960,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731526867
    },
    {
        "content": "<p>boxing is pretty dang rare (and recursive tags are uncommon but definitely used)</p>",
        "id": 482246992,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731526877
    }
]