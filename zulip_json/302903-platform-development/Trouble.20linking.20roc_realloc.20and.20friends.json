[
    {
        "content": "<p>I am working on a platform where I compile the Roc code into a shared library and then build the final executable using cargo. Right now I can correctly access Roc functions defined in Roc, but functions like <code>roc_realloc</code> are not being linked properly:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>nm<span class=\"w\"> </span>libapp.so.1\n...\n000000000000c380<span class=\"w\"> </span>T<span class=\"w\"> </span>roc__mainForHost_1_exposed_size\n<span class=\"w\">                 </span>U<span class=\"w\"> </span>roc_panic\n<span class=\"w\">                 </span>U<span class=\"w\"> </span>roc_realloc\n000000000000f8d0<span class=\"w\"> </span>t<span class=\"w\"> </span>Str_concat_7a93171d29c34145ace0bed7f158bc6f747d259f21a8119f90767f874eb48b94\n...\n</code></pre></div>\n<p>Does anyone have ideas about what I might be doing wrong?</p>",
        "id": 425649974,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1709961293
    },
    {
        "content": "<p>Here's the <a href=\"https://github.com/isaacvando/roc-aws-lambda\">source</a></p>",
        "id": 425650855,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1709962140
    },
    {
        "content": "<p>Is the entire platform a shared library or just the roc code?</p>",
        "id": 425651911,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1709963174
    },
    {
        "content": "<p>Just the roc code</p>",
        "id": 425652025,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1709963287
    },
    {
        "content": "<p>So roc_alloc and friends should be provided by the host binary that loads the shared library</p>",
        "id": 425653208,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1709964072
    },
    {
        "content": "<p>This is where passing in an explicit allocator would make this easier. Then you just pass it in instead of dealing with linking</p>",
        "id": 425653240,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1709964105
    },
    {
        "content": "<p>In this case, you need to make sure your rust app exposes those dynamic symbols for roc to depend on.</p>",
        "id": 425653301,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1709964126
    },
    {
        "content": "<p>I'm still a Roc beginner, but my conceptual understanding of the use-case here is that (i) the actual platform that's being used to compile the Roc code into a shared library and (ii) the final executable (i.e., a \"host\" in a way), could be both viewed as platform instances conforming to the same minimal interface which includes <code>roc_realloc</code> et al.</p>\n<p>I imagine, if the implementations of <code>roc_realloc</code> et al differ semantically (in obvious - or not so much - ways) between the two platforms, this could lead to some unexpected behaviour down the line.</p>",
        "id": 425676815,
        "sender_full_name": "Hristo",
        "timestamp": 1709981645
    },
    {
        "content": "<blockquote>\n<p>In this case, you need to make sure your rust app exposes those dynamic symbols for roc to depend on.</p>\n</blockquote>\n<p>I’ll look into this, thanks!</p>",
        "id": 425695474,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1709998252
    },
    {
        "content": "<blockquote>\n<p>This is where passing in an explicit allocator would make this easier. Then you just pass it in instead of dealing with linking</p>\n</blockquote>\n<p>I’m not sure I understand this. How would this help/where would the allocator be passed?</p>",
        "id": 425695528,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1709998310
    },
    {
        "content": "<blockquote>\n<p>I imagine, if the implementations of <code>roc_realloc</code> et al differ semantically (in obvious - or not so much - ways) between the two platforms, this could lead to some unexpected behaviour down the line.</p>\n</blockquote>\n<p>There is just one platform here so that won’t be an issue.</p>",
        "id": 425695732,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1709998415
    },
    {
        "content": "<p>Instead of dealing with this linking stuff. <code>roc__mainForHost...</code> would just take a struct of function pointers as an argument.</p>",
        "id": 425705681,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1710006163
    },
    {
        "content": "<p>Ah yeah that would be cool!</p>",
        "id": 425706472,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1710006801
    },
    {
        "content": "<p>Adding <code>RUSTFLAGS=\"-C link-args=-rdynamic\"</code> did the trick! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 425706555,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1710006854
    },
    {
        "content": "<p>As a note, that will limit dead code elimination (IIRC). There are ways to specify specific symbols to expose that work better if that becomes an issue for you.</p>",
        "id": 425712633,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1710012304
    },
    {
        "content": "<p>Good to know <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span></p>",
        "id": 425717803,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1710017528
    }
]