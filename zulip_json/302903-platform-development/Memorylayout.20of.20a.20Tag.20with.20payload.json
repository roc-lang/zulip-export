[
    {
        "content": "<p>Since there is no glue for go yet, I have to translate the roc-types to go for my platform manually. I was not able to do it for a tag with payload. For example</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>MyType : [Foo Str, Bar U64]\n</code></pre></div>\n<p>I would guess, that it first contains a Number, which Tag is active and then enough bytes for the biggest type (for example 24 byte for Str on a 64bit system or 8 byte for U64).</p>\n<p>I also guess, that the type is on the stack and therefore does not need a refcount-prefix.</p>\n<p>Are my assumptions correct?</p>\n<p>For this to work in go, I have to write a <code>.h</code> file. How would you define such a type in <code>C</code> when the payload can be different types?</p>",
        "id": 418608779,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1706524990
    },
    {
        "content": "<p>Sometimes I generate the glue for rust, and then compare notes... maybe that will help?</p>",
        "id": 418610132,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1706525440
    },
    {
        "content": "<p>That helped. So the rust code looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Hash, )]</span>\n<span class=\"cp\">#[repr(u8)]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">discriminant_MyType</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">#[repr(C, align(8))]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">union</span> <span class=\"nc\">union_MyType</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">Bar</span>: <span class=\"kt\">u64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">Foo</span>: <span class=\"nc\">core</span>::<span class=\"n\">mem</span>::<span class=\"n\">ManuallyDrop</span><span class=\"o\">&lt;</span><span class=\"n\">roc_std</span>::<span class=\"n\">RocStr</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">#[repr(C)]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">MyType</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">payload</span>: <span class=\"nc\">union_MyType</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">discriminant</span>: <span class=\"nc\">discriminant_MyType</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>When I understand this correctly, then my guess was correct. But the u8 value, that tells the type, is after the value.</p>",
        "id": 418639683,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1706535941
    },
    {
        "content": "<p>Yeah, tag is at the end cause it is more likely to fit in a gap instead of requiring alignment extra bytes.</p>",
        "id": 418666264,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706543382
    },
    {
        "content": "<p>It works <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> </p>\n<p>In the <code>.h</code> file, it looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"k\">union</span><span class=\"w\"> </span><span class=\"nc\">MyTypeUnion</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">RocStr</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">long</span><span class=\"w\"> </span><span class=\"kt\">long</span><span class=\"w\"> </span><span class=\"kt\">unsigned</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">MyType</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">union</span><span class=\"w\"> </span><span class=\"nc\">MyTypeUnion</span><span class=\"w\"> </span><span class=\"n\">payload</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">unsigned</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">discriminant</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</code></pre></div>\n<p>This is not so helpful. Go converts a C-union to a byte-array, with enough space for the biggest type. So in this case <code>[24]byte</code>.</p>\n<p>The the following code was necessary, to get the actual payload:</p>\n<div class=\"codehilite\" data-code-language=\"Go\"><pre><span></span><code><span class=\"k\">switch</span><span class=\"w\"> </span><span class=\"nx\">mytype</span><span class=\"p\">.</span><span class=\"nx\">discriminant</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"k\">case</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nx\">payload</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"nx\">C</span><span class=\"p\">.</span><span class=\"nx\">struct_RocStr</span><span class=\"p\">)(</span><span class=\"nx\">unsafe</span><span class=\"p\">.</span><span class=\"nx\">Pointer</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"nx\">mytype</span><span class=\"p\">.</span><span class=\"nx\">payload</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"nx\">foo</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"nx\">rocStrRead</span><span class=\"p\">(</span><span class=\"nx\">payload</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"o\">...</span>\n\n<span class=\"k\">case</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nx\">payload</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"nx\">C</span><span class=\"p\">.</span><span class=\"nx\">longlong</span><span class=\"p\">)(</span><span class=\"nx\">unsafe</span><span class=\"p\">.</span><span class=\"nx\">Pointer</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"nx\">mytype</span><span class=\"p\">.</span><span class=\"nx\">payload</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"nx\">bar</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"nb\">uint64</span><span class=\"p\">(</span><span class=\"nx\">payload</span><span class=\"p\">)</span>\n<span class=\"w\">       </span><span class=\"o\">...</span>\n\n<span class=\"k\">default</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nb\">panic</span><span class=\"p\">(</span><span class=\"s\">\"invalid payload\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 418666298,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1706543393
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/302903-Writing-a-platform/topic/Memorylayout.20of.20a.20Tag.20with.20payload/near/418666264\">said</a>:</p>\n<blockquote>\n<p>Yeah, tag is at the end cause it is more likely to fit in a gap instead of requiring alignment extra bytes.</p>\n</blockquote>\n<p>This makes sense.</p>",
        "id": 418666785,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1706543511
    }
]