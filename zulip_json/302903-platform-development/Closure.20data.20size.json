[
    {
        "content": "<p>I'm working on a platform to write <a href=\"https://github.com/iced-rs/iced\">iced</a> applications in Roc. I've got a working MVP (see demo below), but there's a huge caveat that needs addressing before I can progress this further. I have an element type of <code>Elem message</code> where <code>message</code> is a user defined message that elements emit, which the platform passes in during <code>update</code> along w/ the user defined model to update it.  Elements like checkbox or text input require a user defined closure, such as <code>onToggle : Bool -&gt; message</code> or <code>onInput : Str -&gt; message</code>. </p>\n<p>The problem I'm facing is that the closure data stored on these fields _changes_ depending on the number of user defined elements / closures exist at compile time since the closure data seems to just be an index which references the appropriate underlying implementation. If I have &gt;i8 number of closures defined, it becomes i16, etc. I'm able to somewhat deal w/ this by using the following glue, where I define <code>closure_data</code> to be up to 8 bytes, then use the relevant <code>size</code> function to slice it down appropriately before passing it into the function.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[repr(C)]</span>\n<span class=\"cp\">#[derive(Clone, Debug)]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">RocFunction_72</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">closure_data</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">RocFunction_72</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">force_thunk</span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">RocBox</span><span class=\"o\">&lt;</span><span class=\"n\">ffi</span><span class=\"p\">::</span><span class=\"n\">c_void</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">roc__mainForHost_3_size</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">roc__mainForHost_3_caller</span><span class=\"p\">(</span>\n<span class=\"w\">                </span><span class=\"n\">arg0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">closure_data</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">output</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">RocBox</span><span class=\"o\">&lt;</span><span class=\"n\">ffi</span><span class=\"p\">::</span><span class=\"n\">c_void</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">roc__mainForHost_3_size</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">clousure_data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">closure_data</span><span class=\"p\">[</span><span class=\"o\">..</span><span class=\"n\">size</span><span class=\"p\">];</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">mem</span><span class=\"p\">::</span><span class=\"n\">MaybeUninit</span><span class=\"p\">::</span><span class=\"n\">uninit</span><span class=\"p\">();</span>\n\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">roc__mainForHost_3_caller</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">arg0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">clousure_data</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">output</span><span class=\"p\">.</span><span class=\"n\">as_mut_ptr</span><span class=\"p\">());</span>\n\n<span class=\"w\">            </span><span class=\"n\">output</span><span class=\"p\">.</span><span class=\"n\">assume_init</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>This is obviously super hacky and doesn't work when the closure data isn't the last field of the element. Is there any way to force roc to output a stable size for closure data? </p>\n<p><a href=\"/user_uploads/22008/QNxXJmOmOguN0EwH4kxZzopt/simplescreenrecorder-2024-06-27_10.08.14.mp4\">Roc + Iced demo</a></p>\n<div class=\"message_inline_image message_inline_video\"><a href=\"/user_uploads/22008/QNxXJmOmOguN0EwH4kxZzopt/simplescreenrecorder-2024-06-27_10.08.14.mp4\" title=\"Roc + Iced demo\"><video preload=\"metadata\" src=\"/user_uploads/22008/QNxXJmOmOguN0EwH4kxZzopt/simplescreenrecorder-2024-06-27_10.08.14.mp4\"></video></a></div>",
        "id": 447535770,
        "sender_full_name": "tarkah",
        "timestamp": 1719509312
    },
    {
        "content": "<p>in theory, wrapping it in a <code>Box</code> should do that, but in practice <span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> and I ran into compiler bugs when we tried that, and we haven’t solved them yet</p>",
        "id": 447565223,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1719516386
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/302903-Writing-a-platform/topic/Closure.20data.20size/near/447565223\">said</a>:</p>\n<blockquote>\n<p>in theory, wrapping it in a <code>Box</code> should do that, but in practice <span class=\"user-mention silent\" data-user-id=\"281543\">Folkert de Vries</span> and I ran into compiler bugs when we tried that, and we haven’t solved them yet</p>\n</blockquote>\n<p>So I just tried this and it seems to work, except maybe I hit the same compiler bug. The llvm-ir looks like it's doing everything correctly, but when I run the program, it seems to always invoke _one_ of the closures defined, regardless of which element I interact with. When I only have 2 elements / closures, it always invokes the first elements closure. When I have 3, the 2nd elements closure.</p>\n<p>This seems promising though, I'll continue to dig into what's going on.</p>",
        "id": 447587415,
        "sender_full_name": "tarkah",
        "timestamp": 1719523193
    },
    {
        "content": "<p>For example, here is where the closure data is boxed up in the llvm-ir. I have 2 closures defined, so it makes sense it's optimized to a <code>bool</code> representation.</p>\n<div class=\"codehilite\"><pre><span></span><code>  %call = call fastcc ptr @Box_box_e6845638e158b704aa8395d259110713932beb5d7a34137f5739ba7e3dd198(i1 false), !dbg !200\n..\n  %call21 = call fastcc ptr @Box_box_e6845638e158b704aa8395d259110713932beb5d7a34137f5739ba7e3dd198(i1 true), !dbg !200\n</code></pre></div>\n<p>Then how that closure data is handled:</p>\n<div class=\"codehilite\"><pre><span></span><code>define internal fastcc ptr @Types_59_bfa1d47a221bdaf089999196bed323c433d1a6b8c78ec612e6fa7b3e3d811(i1 %state, { ptr, {} } %&quot;#arg_closure&quot;) !dbg !151 {\nentry:\n  %result_value1 = alloca { [0 x i64], [3 x i64], i8, [7 x i8] }, align 8, !dbg !152\n  %result_value = alloca { [0 x i64], [3 x i64], i8, [7 x i8] }, align 8, !dbg !152\n  %struct_field_access_record_0 = extractvalue { ptr, {} } %&quot;#arg_closure&quot;, 0, !dbg !152\n  %call = tail call fastcc i1 @Box_unbox_cb411178cb7686889a4ee0e4b4c57e63975186dc9f1448b79e94c2721a21a2(ptr %struct_field_access_record_0), !dbg !152\n  br i1 %call, label %then_block, label %else_block, !dbg !152\n\nthen_block:                                       ; preds = %entry\n  call fastcc void @&quot;#UserApp_25_68697e959be5e5da06cc73b6f998e193cbf2d9b22efd0355a3d37129951b&quot;(i1 %state, ptr nonnull %result_value), !dbg !152\n  br label %joinpointcont, !dbg !152\n\nelse_block:                                       ; preds = %entry\n  call fastcc void @&quot;#UserApp_23_4e123451c288c52798d3df0fc84811d2d957f324242982575c70dfd6d338df&quot;(i1 %state, ptr nonnull %result_value1), !dbg !152\n  br label %joinpointcont, !dbg !152\n\njoinpointcont:                                    ; preds = %else_block, %then_block\n  %joinpointarg = phi ptr [ %result_value, %then_block ], [ %result_value1, %else_block ], !dbg !152\n  %call2 = call fastcc ptr @Box_box_7f7e162ee4345c12acb2c8dddfd129c8c9ef562ecb31841cfff13d4789ffc2(ptr nonnull %joinpointarg), !dbg !152\n  ret ptr %call2, !dbg !152\n}\n</code></pre></div>\n<p>This all looks correct <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 447596337,
        "sender_full_name": "tarkah",
        "timestamp": 1719524728
    },
    {
        "content": "<p>Wait, are you trying to fit all closure in the same static size box?</p>\n<p>Why not just allocated the space that the closure writes its data to at runtime? Could even pool them to avoid too many allocations. You just have to query the size once at startup technically.</p>",
        "id": 447639198,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719544737
    },
    {
        "content": "<p>The data will also include any captured variables which could hugely increase the size</p>",
        "id": 447639276,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719544762
    },
    {
        "content": "<p>Also, if you don't need your closure to be long lived, you can just grab stack space before loading and execution instead of allocating at all</p>",
        "id": 447639462,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719544806
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> I'm not sure I follow 100%, but the closure data is part of the <code>Elem</code> I'm returning to the platform. Notice <code>Checkbox { onToggle : Box (Bool -&gt; message) }</code></p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">Elem</span><span class=\"w\"> </span><span class=\"nv\">message</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">    </span><span class=\"kt\">Column</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Elem</span><span class=\"w\"> </span><span class=\"nv\">message</span><span class=\"p\">)),</span>\n<span class=\"w\">    </span><span class=\"kt\">Checkbox</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">label</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">isChecked</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">onToggle</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Box</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Bool</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">message</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"nf\">..</span>\n<span class=\"p\">]</span>\n</code></pre></div>\n<p>I then return an element to the platform, where I've defined 2 checkboxes (so the closure data gets optimized to become a bool).</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">view</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Model</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Elem</span><span class=\"w\"> </span><span class=\"kt\">Message</span>\n<span class=\"nv\">view</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">model</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kt\">Container</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nv\">content</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Column</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">            </span><span class=\"kt\">Text</span><span class=\"w\"> </span><span class=\"s\">\"Roc + Iced &lt;3\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"kt\">Button</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"nv\">onPress</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">IncrementCount</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"nv\">content</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Text</span><span class=\"w\"> </span><span class=\"s\">\"Pressed $(Num.toStr model.count) times\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">},</span>\n<span class=\"w\">            </span><span class=\"kt\">Checkbox</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"nv\">label</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"Foo\"</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"nv\">isChecked</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">model</span><span class=\"nf\">.</span><span class=\"nv\">fooEnabled</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"nv\">onToggle</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">box</span><span class=\"w\"> </span><span class=\"kt\">FooToggled</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">},</span>\n<span class=\"w\">            </span><span class=\"kt\">Checkbox</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"nv\">label</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"Bar\"</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"nv\">isChecked</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">model</span><span class=\"nf\">.</span><span class=\"nv\">barEnabled</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"nv\">onToggle</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">box</span><span class=\"w\"> </span><span class=\"kt\">BarToggled</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">},</span>\n<span class=\"w\">            </span><span class=\"kt\">TextInput</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"nv\">content</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">model</span><span class=\"nf\">.</span><span class=\"nv\">input</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"nv\">width</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Fixed</span><span class=\"w\"> </span><span class=\"mi\">150</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"nv\">onInput</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">box</span><span class=\"w\"> </span><span class=\"kt\">Input</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"nv\">onSubmit</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Submit</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"p\">],</span>\n<span class=\"w\">        </span><span class=\"nv\">width</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Fill</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">height</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Fill</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">centerX</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">true</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">centerY</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">true</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>However I need to box <code>message</code> before returning to the platform, so I have this map function:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Elem</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Elem</span><span class=\"w\"> </span><span class=\"nv\">b</span>\n<span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">elem</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">mapper</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">elem</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">Checkbox</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">label</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">isChecked</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">onToggle</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"kt\">Checkbox</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">label</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">isChecked</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">onToggle</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">box</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">mapper</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"nv\">unbox</span><span class=\"w\"> </span><span class=\"nv\">onToggle</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"nf\">..</span><span class=\"w\"> </span><span class=\"nv\">main</span><span class=\"nf\">.</span><span class=\"nv\">roc</span><span class=\"w\"> </span><span class=\"nf\">..</span>\n\n<span class=\"nv\">view</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Box</span><span class=\"w\"> </span><span class=\"kt\">Model</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Elem</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Box</span><span class=\"w\"> </span><span class=\"kt\">Message</span><span class=\"p\">)</span>\n<span class=\"nv\">view</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">model</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">program</span><span class=\"nf\">.</span><span class=\"nv\">view</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">unbox</span><span class=\"w\"> </span><span class=\"nv\">model</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nv\">box</span>\n</code></pre></div>\n<p>With that context in mind, I believe I've found the bug! It appears within my <code>map</code> function, <code>unbox</code> isn't getting called in the <code>llvm-ir</code>, it's simply copying the old box data pointer into the new box, so I'm left with a _nested_ box. When calling <code>mainForHost_3_caller</code> (the function for this closure), it doesn't know about the nested box (it must believe the unbox occurred) and tries to access the data pointer as <code>bool</code>, which is invalid.</p>\n<p>To workaround this, I can do the following and my boxed closures now work. Notice I read outer box data, which is a pointer to the nested box, and use the nested box, which is the what the llvm-ir is expecting (a single box around the concrete closure data). However, this will probably fail if the user calls <code>Elem.map</code> as I assume the problem will compound.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[repr(transparent)]</span>\n<span class=\"cp\">#[derive(Clone, Debug)]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">RocFunction_72</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">closure_data</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">RocBox</span><span class=\"o\">&lt;</span><span class=\"n\">ffi</span><span class=\"p\">::</span><span class=\"n\">c_void</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">RocFunction_72</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">force_thunk</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">RocBox</span><span class=\"o\">&lt;</span><span class=\"n\">ffi</span><span class=\"p\">::</span><span class=\"n\">c_void</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">roc__mainForHost_3_caller</span><span class=\"p\">(</span>\n<span class=\"w\">                </span><span class=\"n\">arg0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">closure_data</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">RocBox</span><span class=\"o\">&lt;</span><span class=\"n\">ffi</span><span class=\"p\">::</span><span class=\"n\">c_void</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">output</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">RocBox</span><span class=\"o\">&lt;</span><span class=\"n\">ffi</span><span class=\"p\">::</span><span class=\"n\">c_void</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">core</span><span class=\"p\">::</span><span class=\"n\">mem</span><span class=\"p\">::</span><span class=\"n\">MaybeUninit</span><span class=\"p\">::</span><span class=\"n\">uninit</span><span class=\"p\">();</span>\n\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">nested_box</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">RocBox</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">ffi</span><span class=\"p\">::</span><span class=\"n\">c_void</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">                </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">ptr</span><span class=\"p\">::</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">closure_data</span><span class=\"p\">.</span><span class=\"n\">deref</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">);</span>\n\n<span class=\"w\">            </span><span class=\"n\">roc__mainForHost_3_caller</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">arg0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">nested_box</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">output</span><span class=\"p\">.</span><span class=\"n\">as_mut_ptr</span><span class=\"p\">());</span>\n\n<span class=\"w\">            </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">mem</span><span class=\"p\">::</span><span class=\"n\">forget</span><span class=\"p\">(</span><span class=\"n\">nested_box</span><span class=\"p\">);</span>\n\n<span class=\"w\">            </span><span class=\"n\">output</span><span class=\"p\">.</span><span class=\"n\">assume_init</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>So it seems there's something fishy with calling <code>unbox</code> inside a closure and then <code>box</code>'ing that up. The relevant snippet from <code>Elem.map</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">onToggle</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">box</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">mapper</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"nv\">unbox</span><span class=\"w\"> </span><span class=\"nv\">onToggle</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 447856517,
        "sender_full_name": "tarkah",
        "timestamp": 1719603428
    },
    {
        "content": "<p>Yeah, I missed that the closure data was deeply nested into the model. That is an important distinction.</p>\n<p>That said, you theoretically could build a one off dynamically sized type to build out the list without any boxing.....</p>",
        "id": 447863782,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719605508
    },
    {
        "content": "<p>Honestly not sure if rust would be happy with that/what hoops you would need to jump through</p>",
        "id": 447863860,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719605526
    },
    {
        "content": "<p>Boxing is definitely easier (and honestly might be better due to how large a closure capture could become)</p>",
        "id": 447863908,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719605547
    },
    {
        "content": "<p>I've got this fully working now. The boxed closure wasn't an issue, nor was the llvm-ir incorrect, I just misunderstood what i needed to pass back to Roc.</p>\n<p>I was passing in <code>*const RocBox&lt;ffi::c_void&gt;</code> / the boxed closure data stored on the returned <code>Elem</code>. However Roc expects to receive just the closure data when invoking the closure, not the boxed closure data. So instead I pass in <code>*const ffi::c_void</code> and all is well. </p>\n<p>It seems everything is working, just a misunderstanding on my part. Between this and ensuring I properly manage refcounts, it's been quite a fun adventure to get everything working as intended. Thank you both for taking a look!</p>",
        "id": 447991488,
        "sender_full_name": "tarkah",
        "timestamp": 1719675930
    }
]