[
    {
        "content": "<p>I just created <a href=\"https://github.com/roc-lang/basic-cli/issues/270\">https://github.com/roc-lang/basic-cli/issues/270</a> when I found an issue doing some refactoring work in roc-lang/examples.  When a platform is not compatible with the current version of the language (compiler) that you are using, what is the plan of action for a user?</p>\n<p>In cases when this is the latest version, do you just roll back?  It seems undesirable to have our examples not be able to compile OOTB when using the latest version of the compiler.</p>",
        "id": 483949654,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1732293797
    },
    {
        "content": "<p>0.17.0 of basic-cli pre-release is out<br>\n<a href=\"https://github.com/roc-lang/basic-cli/releases/tag/0.17.0\">https://github.com/roc-lang/basic-cli/releases/tag/0.17.0</a></p>",
        "id": 483949925,
        "sender_full_name": "Anton",
        "timestamp": 1732293887
    },
    {
        "content": "<p>Here is the up to date version of the examples</p>",
        "id": 483950012,
        "sender_full_name": "Anton",
        "timestamp": 1732293910
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/examples/pull/220\">https://github.com/roc-lang/examples/pull/220</a></p>",
        "id": 483950027,
        "sender_full_name": "Anton",
        "timestamp": 1732293913
    },
    {
        "content": "<p>I'm still working on the next release of basic-webserver before we make everything full release</p>",
        "id": 483950092,
        "sender_full_name": "Anton",
        "timestamp": 1732293937
    },
    {
        "content": "<p>Sweet, thanks for that.  But my question overall still stands.  The developer experience around this is definitely disjointed.  Luckily I have direct access to people like you here.</p>",
        "id": 483951562,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1732294443
    },
    {
        "content": "<p>I wonder if having an unofficial platform registry that could help you find compatible versions of platforms for your compiler version would be helpful?</p>\n<p>Thinking of system that hashes the builtins of each compiler commit and creates a member lookup table for each.  Then when a registered platform creates a release it would extract builtins members used and check membership (probably would have to be a hash of the name and signature or such).  I'm sure there is more that is required for compatibility in terms of runtime semantics, but I'd have to ask:</p>\n<p>A) Does this sound feasible?<br>\nB) Does the sound valuable?<br>\nC) Would this existing create issues that we are looking to avoid at this point in the project's history?</p>",
        "id": 483953355,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1732295011
    },
    {
        "content": "<p>Relevant: <a href=\"#narrow/channel/304641-ideas/topic/roc.20release.20management/near/483953306\">https://roc.zulipchat.com/#narrow/channel/304641-ideas/topic/roc.20release.20management/near/483953306</a></p>",
        "id": 483953444,
        "sender_full_name": "jan kili",
        "timestamp": 1732295040
    },
    {
        "content": "<p>Yeah, we'd really want all platforms to be API compatible with a <code>0.1.0</code> release on the day we cut the release</p>",
        "id": 483953615,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1732295090
    },
    {
        "content": "<p>I expect it'd be okay for platforms to have a week-ish delay to polish their <code>0.0.X-rochash</code></p>",
        "id": 483953957,
        "sender_full_name": "jan kili",
        "timestamp": 1732295200
    },
    {
        "content": "<p>Once we have the 0.0.X-rochash releases we can include the version in the roc file. That should make it easy to get compatible versions for everything.</p>",
        "id": 483959181,
        "sender_full_name": "Anton",
        "timestamp": 1732297007
    },
    {
        "content": "<p>I'm sitting down now to test <a href=\"mailto:basic-cli@0.17.0\">basic-cli@0.17.0</a> + roc@TESTING + tutorial snippets that touch effects.</p>",
        "id": 484814816,
        "sender_full_name": "jan kili",
        "timestamp": 1732750372
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"462053\">@JanCVanB</span>  I'd like to merge <a href=\"https://github.com/roc-lang/roc/pull/7262\">https://github.com/roc-lang/roc/pull/7262</a> tomorrow at <time datetime=\"2024-11-29T19:00:00Z\">2024-11-29T20:00:00+01:00</time>, let me know if you find anything</p>",
        "id": 484976103,
        "sender_full_name": "Anton",
        "timestamp": 1732821534
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> Why does <a href=\"mailto:basic-cli@0.17.0\">basic-cli@0.17.0</a> require <code>main</code> instead of <code>main!</code>?</p>",
        "id": 485002448,
        "sender_full_name": "jan kili",
        "timestamp": 1732841129
    },
    {
        "content": "<p>We have bugs on the purity inference PR, so it hasn't landed yet <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 485002528,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732841200
    },
    {
        "content": "<p>Oh! Okie dokie, does that mean we now plan to not push purity-inference syntax to AoC learners?</p>",
        "id": 485002552,
        "sender_full_name": "jan kili",
        "timestamp": 1732841228
    },
    {
        "content": "<p>Yeah, I would say we've missed the window if we want people to have a good experience.</p>",
        "id": 485002572,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732841258
    },
    {
        "content": "<p>Dang, well y'all gave it a good try.</p>",
        "id": 485002636,
        "sender_full_name": "jan kili",
        "timestamp": 1732841296
    },
    {
        "content": "<p>what are the bugs? anything we could work around by intentionally removing features (temporarily, and then reintroducing them later)?</p>",
        "id": 485002644,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1732841300
    },
    {
        "content": "<p>See <a href=\"#narrow/channel/316715-contributing/topic/basic-cli.20purity.20inference/near/484113630\">https://roc.zulipchat.com/#narrow/channel/316715-contributing/topic/basic-cli.20purity.20inference/near/484113630</a></p>",
        "id": 485002736,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732841402
    },
    {
        "content": "<p>This issue strikes again <a href=\"https://github.com/roc-lang/roc/issues/6121\">https://github.com/roc-lang/roc/issues/6121</a></p>\n<blockquote>\n<p>bad exit code/segfault on exit in rust platforms</p>\n</blockquote>",
        "id": 485002811,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732841464
    },
    {
        "content": "<p>ahh that's unfortunate</p>",
        "id": 485002912,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1732841527
    },
    {
        "content": "<p>We definitely have some significant ABI bugs, which I've kind of worked around in places. Mostly with anything small that is passed by value instead of a pointer.</p>",
        "id": 485002915,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732841528
    },
    {
        "content": "<p>Maybe that is also related</p>",
        "id": 485002923,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732841538
    },
    {
        "content": "<p>I'd love to know if there was a way to fuzz this kind of thing. Our current tests don't really cover the ABI side of things, just that what we generate LLVM compiles and runs giving us the right answer</p>",
        "id": 485002962,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732841581
    },
    {
        "content": "<p>Given this, I feel that we should avoid exposing any AoC learners to post-Task syntax/tutorial/concepts/platforms, unless basic-cli can fully migrate within several hours from now. I expect some learners to start following the tutorial tomorrow.</p>",
        "id": 485003146,
        "sender_full_name": "jan kili",
        "timestamp": 1732841726
    },
    {
        "content": "<p>That could require a bit of a top-down push to guide Zulip topics and postpone certain dev work.</p>",
        "id": 485003246,
        "sender_full_name": "jan kili",
        "timestamp": 1732841779
    },
    {
        "content": "<p>yeah let's not rush it out the door with known serious ABI issues <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 485003284,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1732841805
    },
    {
        "content": "<p>Okie dokie, I'll pivot my tutorial update to not introduce purity inference but still update language around operators. This may be better in another topic, but what's the latest language around <code>!</code>? (It's an \"operator\", not a \"suffix\"?) I assume <code>try</code> and the other updates aren't affected by purity inference postponement.</p>",
        "id": 485003658,
        "sender_full_name": "jan kili",
        "timestamp": 1732842094
    },
    {
        "content": "<p>in the purity inference world, I'd just say <code>!</code> is a naming convention</p>",
        "id": 485004479,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1732842820
    },
    {
        "content": "<p>like \"names end in <code>!</code>\"</p>",
        "id": 485004487,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1732842827
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> Totally. But what language would you use about it during purity-inference-less December? (Since the tutorial can't explain the key part about <code>!</code> soon cascading upward, unless we want to say \"but it stops at <code>main</code>.\")</p>",
        "id": 485005431,
        "sender_full_name": "jan kili",
        "timestamp": 1732843642
    },
    {
        "content": "<p>And do you want the tutorial to hint towards purity inference concepts coming in the near future, like \"In an upcoming update, ...\" style? I expect that would be additional mental overhead but perhaps tactically valuable as a teaser.</p>",
        "id": 485005615,
        "sender_full_name": "jan kili",
        "timestamp": 1732843763
    },
    {
        "content": "<p>I think it's probably worth noting, yeah</p>",
        "id": 485005800,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1732843913
    },
    {
        "content": "<p>mostly as a way to stave off questions <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 485005850,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1732843927
    },
    {
        "content": "<p>could probably call it \"the <code>!</code> postfix operator\" (as opposed to the <code>!</code> prefix operator like <code>!foo</code>)</p>",
        "id": 485006112,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1732844185
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/302903-platform-development/topic/Platform.20.2F.20Language.20version.20compatibility/near/485002811\">said</a>:</p>\n<blockquote>\n<p>This issue strikes again <a href=\"https://github.com/roc-lang/roc/issues/6121\">https://github.com/roc-lang/roc/issues/6121</a></p>\n<blockquote>\n<p>bad exit code/segfault on exit in rust platforms</p>\n</blockquote>\n</blockquote>\n<p>I don't understand. This isn't a purity inference bug. This is a preexisting roc bug. We regularly disable and re-enable tests due to this bug</p>",
        "id": 485147117,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732906052
    },
    {
        "content": "<p>It was never gone</p>",
        "id": 485147209,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732906098
    },
    {
        "content": "<p>Yeah, I just mean it's currently blocking the PR because I haven't found a way to get CI to pass.</p>",
        "id": 485154871,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732910698
    },
    {
        "content": "<p>How many examples are failing? Is it just some random cli run or glue test? If so, just disable the test</p>",
        "id": 485172097,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732922645
    }
]