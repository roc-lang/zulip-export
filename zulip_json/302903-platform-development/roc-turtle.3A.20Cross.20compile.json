[
    {
        "content": "<p>I would like to continue the work on <a href=\"#narrow/channel/304902-show-and-tell/topic/roc.20turtle\">roc-turtle</a>. The next step would be, to cross compile it, so it can be used not only on linux.</p>\n<p>I have a version, that uses the legacy linker. So it should be possible, to run it on mac. But I am not able to cross compile it. When I call <code>zig build legacy -Dtarget=x86_64-macos</code> (here is the <a href=\"https://github.com/ostcar/roc-turtle/blob/main/build.zig\">build.zig</a>-file). I get the following errors: </p>\n<div class=\"codehilite\"><pre><span></span><code>error: error: unable to find framework &#39;Foundation&#39;. searched paths:  none\nerror: unable to find framework &#39;CoreServices&#39;. searched paths:  none\nerror: unable to find framework &#39;CoreGraphics&#39;. searched paths:  none\nerror: unable to find framework &#39;AppKit&#39;. searched paths:  none\nerror: unable to find framework &#39;IOKit&#39;. searched paths:  none\n</code></pre></div>\n<p>It seems, that is a problem with the zig-raylib dependency: <a href=\"https://github.com/Not-Nik/raylib-zig/issues/158\">https://github.com/Not-Nik/raylib-zig/issues/158</a></p>\n<p>I don't know, how I can go forward. Is this an error I can fix by installing some dependencies? Should I switch the gui from raylib to something even simpler?</p>\n<p>Do you have an idea how I could solve this?</p>",
        "id": 479031577,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1729930484
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> was able to make cross-compiling work in the past</p>",
        "id": 479031982,
        "sender_full_name": "Anton",
        "timestamp": 1729930870
    },
    {
        "content": "<p>I don't understand, how he is doing it. This seems to be the last version, before switching to rust. He is using the same zig-dependency as me. But I can not find anything in his build.zig related to cross compiling</p>\n<p><a href=\"https://github.com/lukewilliamboswell/roc-ray/tree/b1d1865b65e13c36f40c8d1343b27cb70136fe01\">https://github.com/lukewilliamboswell/roc-ray/tree/b1d1865b65e13c36f40c8d1343b27cb70136fe01</a></p>",
        "id": 479033648,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1729932523
    },
    {
        "content": "<p>Those are the macos frameworks. I'm on a mac so I guess I linked those into my static library. I'm not sure I got cross compiling working for raylib.</p>",
        "id": 479036129,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729934714
    },
    {
        "content": "<p>After more reading, I found the hint not to compile raylib, but to use there release binary.</p>\n<p>This works for linux, but there is a roc specific problem. For the legacy linker, I have to create <em>one</em> static library. So I have to unpack the <code>libraylib.a</code> and call <code>addObjectFile()</code> on every <code>.o</code> file. This is hacky, but it works.</p>\n<p>My problem is, that I can not unpack the <code>libraylib.a</code> file in the macos release. When I call <code>ar x libraylib.a</code> I get <code>ar: libraylib.a: file format not recognized</code>. </p>\n<p>Do you have any idea, how I get get the object files from the mac release? The release is found here: <a href=\"https://github.com/raysan5/raylib/releases\">https://github.com/raysan5/raylib/releases</a></p>",
        "id": 479120643,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1730022901
    },
    {
        "content": "<p>This is what we were using on roc-ray previously to repackage the object files for roc <code>libtool -static -o platform/macos-arm64.a zig-out/lib/*</code></p>",
        "id": 479122147,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1730024517
    },
    {
        "content": "<p>Maybe you can use that to combine the raylib release with the prebuilt host so Roc can link it in the final step?</p>",
        "id": 479122211,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1730024558
    },
    {
        "content": "<p>I don't get it. What I currently doing is extracting the <code>.o</code> files and creating a new <code>.a</code> file with them and the roc-object-file.</p>\n<p>What you are proposing is including the roc-object-file into the <code>.a</code> file. I don't understand, how this is possible.</p>\n<p>Do you know, how to either extract <code>.o</code> files with libtool or how to include a <code>.o</code> file to a <code>.a</code> file with libtool?</p>",
        "id": 479122875,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1730025258
    }
]