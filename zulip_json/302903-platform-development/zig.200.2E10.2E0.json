[
    {
        "content": "<p>I don't know how tightly integrated the zig definitions (RocStr etc.) are with the compiler.</p>\n<p>Is there a reason they use a (now very) old version of zig? If not what would be the process for upgrading it to either 0.9.0, master, or (waiting to around November) the upcoming self hosted 0.10.0 compiler?</p>\n<p>Additionally, would you accept changes to the zig definitions to use a different style/updated style? I also love to make the platform work with the zig allocator interface so you could change one line and use a different allocator for your roc code?</p>\n<p>(Theoretically would it be possible to either compile separate roc .o files with different allocator link functions or even just define/change the function pointers used so certain calls to roc [if used as a library as I asked in <a class=\"stream\" data-stream-id=\"231634\" href=\"/#narrow/stream/231634-beginners\">#beginners</a>] used different allocators?)</p>",
        "id": 296448158,
        "sender_full_name": "Arya Elfren",
        "timestamp": 1661979385
    },
    {
        "content": "<p>We're working on the 0.10 upgrade. 0.10 is not yet released. We are on the latest released version I think.</p>",
        "id": 296448534,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1661979545
    },
    {
        "content": "<p>When you say \"now very old\" what are you referring to exactly? We're on 0.9</p>",
        "id": 296448739,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1661979620
    },
    {
        "content": "<p>Maybe I'm thinking of the roc example platform?</p>",
        "id": 296449248,
        "sender_full_name": "Arya Elfren",
        "timestamp": 1661979823
    },
    {
        "content": "<p>I remember recently having to get 0.8.0 to do something in the roc repo</p>",
        "id": 296449348,
        "sender_full_name": "Arya Elfren",
        "timestamp": 1661979857
    },
    {
        "content": "<p>Maybe not</p>",
        "id": 296449399,
        "sender_full_name": "Arya Elfren",
        "timestamp": 1661979879
    },
    {
        "content": "<p>I'll double check, but what about the other suggestions?</p>",
        "id": 296449466,
        "sender_full_name": "Arya Elfren",
        "timestamp": 1661979909
    },
    {
        "content": "<p>we're working on 0.10 but it has a bunch of bugs that mean we can't upgrade yet</p>",
        "id": 296449499,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1661979933
    },
    {
        "content": "<p>we're working together with the zig devs to make sure our code builds before 0.10 is released</p>",
        "id": 296449528,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1661979949
    },
    {
        "content": "<p>There's no Zig 0.8 in the repo today. We only support a single version at a time within our repo and it's 0.9 currently.</p>",
        "id": 296449692,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1661979997
    },
    {
        "content": "<p>Maybe I'm just too used to the zig ecosystem sticking to master and saw something break.</p>",
        "id": 296449711,
        "sender_full_name": "Arya Elfren",
        "timestamp": 1661980006
    },
    {
        "content": "<p>Regarding the suggestion about the Zig allocator interface... all compiled Roc code uses a function called <code>roc_alloc</code> to allocate. A platform author can define that to work however they want. So I think we might already have the flexibility you're suggesting but in a different way, that isn't tied to Zig specifically.</p>",
        "id": 296450368,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1661980256
    },
    {
        "content": "<p>I see that, I was thinking about doing that for specific function calls (i.e. customising the allocator function used instead of always using <code>roc_alloc</code>), and updating the zig example platform to use that instead of <code>malloc</code></p>",
        "id": 296451336,
        "sender_full_name": "Arya Elfren",
        "timestamp": 1661980637
    },
    {
        "content": "<p>Yeah <code>roc_alloc</code> doesn't have to be built on top of <code>malloc</code>. You can put something else inside it if you want. But the compiled Roc code calls a function called <code>roc_alloc</code> and assumes it has a certain type signature.</p>",
        "id": 296451816,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1661980854
    },
    {
        "content": "<p>There is no way to make Roc code use an allocator with a different name or type signature.</p>",
        "id": 296451880,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1661980890
    },
    {
        "content": "<p>But the implementation can be whatever you like.</p>",
        "id": 296451912,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1661980903
    },
    {
        "content": "<p>one trick you can do there is to set a global (or threadlocal) and have <code>roc_alloc</code> do something different based on its value</p>",
        "id": 296459301,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1661984421
    },
    {
        "content": "<p>like set it right before calling the roc function</p>",
        "id": 296459393,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1661984483
    },
    {
        "content": "<p>Just have to be careful not to free something incorrectly</p>",
        "id": 296460905,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1661985314
    },
    {
        "content": "<p>Given the changing allocators and potentially longer lived data</p>",
        "id": 296460934,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1661985332
    }
]