[
    {
        "content": "<p>I've started making a new platform as the foundation of a music project I'm working on: <a href=\"https://gitlab.com/JanCVanB/roc-on\">https://gitlab.com/JanCVanB/roc-on</a></p>\n<p>Ideally, I could have my Roc <code>main</code> function return <a href=\"https://docs.rs/midly/0.5.3/midly/struct.Smf.html\">a Rust struct representation of a MIDI file (a multi-tracked series of MIDI messages)</a>, but I expect that to be very complicated to implement, due to memory mapping / boxing / whatever else I haven't learned yet about advanced platform interfaces.</p>\n<p>I've started by cheating and just writing/reading a JSON to/from disk as my app-platform interface. However, doing that with <a href=\"https://docs.rs/serde_json/latest/serde_json/\"><code>serde_json</code></a> and <a href=\"https://github.com/lukewilliamboswell/roc-json\"><code>roc-json</code></a> seems to not naively scale, currently because I can't figure out how to map tags to enums.</p>\n<p><strong><em>I'm open to any input on how to best proceed!</em></strong> What's the most straightforward way today for passing complex data to a platform? Will I be able to avoid implementing the MIDI bytes spec from scratch in a Roc library? Do you recommend avoiding <code>midly</code> (over the similar <code>midi-msg</code> crate) because of its exotic <code>u7</code>s and <code>u15</code>s, or is that a useful exercise for Roc to face?</p>",
        "id": 483598841,
        "sender_full_name": "jan kili",
        "timestamp": 1732151108
    },
    {
        "content": "<p>Cool. I think you could have Roc return one of these... or at least something close and then write something like <code>impl From&lt;roc::Midi&gt; for midly::Smf ...</code></p>",
        "id": 483599407,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732151469
    },
    {
        "content": "<p>So you can do </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">midi</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">midly</span><span class=\"p\">::</span><span class=\"n\">Smf</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rocMain</span><span class=\"p\">().</span><span class=\"n\">into</span><span class=\"p\">();</span>\n</code></pre></div>",
        "id": 483599457,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732151506
    },
    {
        "content": "<p>What can you do with a midly once you have it? does it integrate well with other libraries?</p>",
        "id": 483599594,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732151566
    },
    {
        "content": "<p>I'm currently accepting that for my use cases it makes sense to write my own midly consumer to iterate the message tracks and populate the fundsp sequencers with timed events (and possibly also forward messages to external hardware).</p>",
        "id": 483599761,
        "sender_full_name": "jan kili",
        "timestamp": 1732151681
    },
    {
        "content": "<p>The big benefit of using a (hopefully) complete/well-maintained MIDI representation crate is that I can use it as the common protocol between a variety of senders and receivers that I may plug into this system.</p>",
        "id": 483600005,
        "sender_full_name": "jan kili",
        "timestamp": 1732151832
    },
    {
        "content": "<p>Do you know of any complete examples I can adapt for the <code>From&lt;roc::ComplexDeeplyNestedStructRecordWithEnumTags&gt;</code> part?</p>",
        "id": 483600266,
        "sender_full_name": "jan kili",
        "timestamp": 1732152000
    },
    {
        "content": "<p>I'm expecting that will require a Roc library with a record type alias that looks like Smf (which I hope can leverage very-idiomatic Roc tags) and a pile of for loops in the Rust <code>impl</code>.</p>",
        "id": 483600554,
        "sender_full_name": "jan kili",
        "timestamp": 1732152183
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"462053\">@JanCVanB</span> I got carried away and build a minimal e2e demo that calls into roc and returns a <code>midly:Smf</code> struct. It doesn't do much with it, just debug prints to stdio for now. But all the parts are there and look to be working ok.</p>\n<p><a href=\"https://github.com/lukewilliamboswell/roc-on-simple\">https://github.com/lukewilliamboswell/roc-on-simple</a></p>\n<div class=\"codehilite\"><pre><span></span><code>app [main] { pf: platform &quot;../platform/main.roc&quot; }\n\nmain = \\{} -&gt; {\n    header: {\n        format: SingleTrack,\n        timing: Metrical 10,\n    },\n    tracks: [\n        [\n            { delta: 1, kind: Escape [] },\n            { delta: 2, kind: Midi { channel: 1, message: NoteOn { key: 1, vel: 2 } } },\n            { delta: 3, kind: Meta EndOfTrack },\n        ],\n    ],\n}\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>$ cargo run\n   Compiling roc-on-simple v0.1.0 (/Users/luke/Documents/GitHub/roc-on-simple)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.36s\n     Running `target/debug/roc-on-simple`\nSmf { header: Header { format: SingleTrack, timing: Metrical(u15(10)) }, tracks: [[TrackEvent { delta: u28(1), kind: Escape([]) }, TrackEvent { delta: u28(2), kind: Midi { channel: u4(1), message: NoteOn { key: u7(1), vel: u7(2) } } }, TrackEvent { delta: u28(3), kind: Meta(EndOfTrack) }]] }\n</code></pre></div>",
        "id": 483618587,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732165628
    },
    {
        "content": "<p>Note, it's dynamically linking the roc app... I need to dig in and fix our <code>--no-link</code> build pipeline if you want to make a static executable instead.</p>",
        "id": 483618837,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732165872
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/channel/302903-platform-development/topic/Advice.20for.20returning.20Rust.20a.20complex.20struct.3F/near/483618837\">said</a>:</p>\n<blockquote>\n<p>Note, it's dynamically linking the roc app... I need to dig in and fix our <code>--no-link</code> build pipeline if you want to make a static executable instead.</p>\n</blockquote>\n<p>Done <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 483664436,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732185924
    },
    {
        "content": "<p>OH WOW LUKE YOU ROC</p>",
        "id": 483734906,
        "sender_full_name": "jan kili",
        "timestamp": 1732205433
    },
    {
        "content": "<p>Thank you for getting carried away, I'm excited to dig into this today <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span></p>",
        "id": 483735147,
        "sender_full_name": "jan kili",
        "timestamp": 1732205492
    }
]