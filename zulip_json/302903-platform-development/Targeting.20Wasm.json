[
    {
        "content": "<p>Hi <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>\n<p>I’m curious about the state of targeting Wasm with Roc.</p>\n<p>I’ve looked at the following example and it seems like the <code>--target=wasm32</code> flag may be all that’s needed to get started.</p>\n<p>However, there’s a <code>host.zig</code> file in there and I’m unsure how that relates to everything.</p>\n<p><a href=\"https://github.com/roc-lang/roc/tree/641daab02c90b446d8dfad302a8c57c6dfab9f0d/examples/platform-switching/web-assembly-platform\">https://github.com/roc-lang/roc/tree/641daab02c90b446d8dfad302a8c57c6dfab9f0d/examples/platform-switching/web-assembly-platform</a></p>\n<p>Thanks in advance.</p>",
        "id": 293441852,
        "sender_full_name": "Paul Young",
        "timestamp": 1660510753
    },
    {
        "content": "<p><code>host.zig</code> there defines the platform code. So the main function in that file is ultimately what you could invoke from JS</p>",
        "id": 293441993,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1660510890
    },
    {
        "content": "<p>or anything else that you expose there</p>",
        "id": 293441997,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1660510895
    },
    {
        "content": "<p>that host could also be written in rust/c/... that targets webassembly and has a C FFI</p>",
        "id": 293442006,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1660510915
    },
    {
        "content": "<p>Just to add on here, Roc on wasm works quite well, but there really are no platforms yet. No one has built something equivalent of the elm architecture for Roc targetting wasm.</p>\n<p>I, about a month ago, wrote an emulator for a MOS6502 cpu in Roc targeting wasm. Followed along with <a href=\"https://unsafeperform.io/blog/2022-07-02-a_small_benchmark_for_functional_languages_targeting_web_browsers/\">this post</a> that was benchmarking the same solution in multiple languages. They were unable to get any examples faster than JS. Roc was able to run multiple times faster than JS. My Roc implementation is <a href=\"https://github.com/bhansconnect/functional-mos6502-web-performance/tree/master/implementations/roc-effectful\">here</a>, if you are at all interested. Feel free to reach out if you have any specific questions or want some help setting up a wasm platform.</p>",
        "id": 293443736,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1660512802
    },
    {
        "content": "<p>also, if you go down this path, <code>--target=wasm32</code> uses our wasm dev backend. it is built for fast compile times, and feature-compatible with our main llvm backend. If you runtime performance ever becomes a problem, then we can also target webassembly through llvm. (this also has feature parity with the \"normal\" backends)</p>",
        "id": 293444053,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1660513177
    },
    {
        "content": "<p>Thank you both!</p>",
        "id": 293655078,
        "sender_full_name": "Paul Young",
        "timestamp": 1660625182
    },
    {
        "content": "<p>You also need the <code>--dev</code> flag to get the Wasm development backend, right?</p>",
        "id": 293781633,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1660676585
    },
    {
        "content": "<p>Unless something changed since I worked on wasm stuff, yes. You need <code>--target=wasm32</code> and <code>--dev</code> to get the dev wasm backend</p>",
        "id": 293784616,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1660677741
    }
]