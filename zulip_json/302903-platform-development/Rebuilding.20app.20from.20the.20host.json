[
    {
        "content": "<p>The static site generation platform I'm working on has a file watcher which rebuilds the site if a source file changes. I'd also like to rebuild if the <code>main.roc</code> file which contains the build rules changes. To do that currently I'm letting the host <code>exec</code> into a fresh <code>roc run ..</code> call on <code>main.roc</code>, but this means that if there's compiler errors the file watching process will exit.</p>\n<p>I'm trying to change this logic to instead run <code>roc build --lib main.roc</code> in a spawned process, then <code>dlopen</code> the shared library roc outputs. I'm running into a problem though: <code>dlopen</code> fails saying <code>roc_alloc</code> could not be found. That sort of makes sense, <code>roc_alloc</code> is defined in the binary that's currently running and which is calling <code>dlopen</code>.</p>\n<p>From searching I've learned that the <code>-rdynamic</code> linker flag exists for this precise purpose, and I've enabled it in my <code>build.zig</code> file for the <code>linker=legacy</code> library I'm building. (I haven't had luck using the surgical linker for this platform since a while ago, so it's out of the picture). Even with <code>-rdynamic</code> set the linker error is still there.</p>\n<p>I'm still learning about linking so was hoping someone might be able to confirm/reject this hypothesis: Could it be that this is because the linking that Roc performs as part of building the final binary overrules me setting <code>rdynamic</code> on the library I build? If so, is there currently a way to tell the legacy linker it should be using the <code>rdynamic</code> option?</p>\n<p>If it doesn't work out I can go back to using the <code>exec</code> option for now, I'm just curious and looking to learn <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 497735024,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1738695319
    },
    {
        "content": "<p>If you are using <code>--lib</code> it shouldn't be using the legacy linker at all</p>",
        "id": 497765055,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738706551
    },
    {
        "content": "<p>As for <code>-rdynamic</code> my guess is that zig is helpfully garbage collecting your unused code</p>",
        "id": 497765105,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738706580
    },
    {
        "content": "<p>As such, <code>roc_alloc</code> and friends are not available</p>",
        "id": 497765141,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738706599
    },
    {
        "content": "<p>Frankly, rdynamic is kinda a hack anyway and I'm glad we plan to make more things explicit to avoid these pains</p>",
        "id": 497765243,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738706640
    },
    {
        "content": "<p>Ah yeah, it makes sense that <code>--lib</code> wouldn't be using the linker.</p>\n<p>Shouldn't zig leave <code>roc_alloc</code> alone, since it's explicitly marked as an <code>extern</code> fn and zig can't know what the artifact it produces might get linked with later?</p>",
        "id": 497766257,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1738707086
    },
    {
        "content": "<blockquote>\n<p>Frankly, rdynamic is kinda a hack anyway and I'm glad we plan to make more things explicit to avoid these pains</p>\n</blockquote>\n<p>Yeah, reading the new plans it sounds like things will be decidedly less magical in the future. Exciting times!</p>",
        "id": 497766529,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1738707211
    },
    {
        "content": "<p>When making executables extern is often a lie</p>",
        "id": 497767321,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738707574
    },
    {
        "content": "<p>Cause the executable is seen as the final thing</p>",
        "id": 497767352,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738707596
    }
]