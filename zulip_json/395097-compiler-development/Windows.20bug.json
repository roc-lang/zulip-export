[
    {
        "content": "<p>Does this error message give us any clues?? what is the <code>deserialize_solved_implementations</code> about?</p>\n<div class=\"codehilite\"><pre><span></span><code>Running `target\\debug\\roc.exe --linker=surgical .\\examples\\platform-switching\\rocLovesRust.roc`\nthread &#39;main&#39; panicked at library\\core\\src\\panicking.rs:221:5:\nunsafe precondition(s) violated: slice::from_raw_parts requires the pointer to be aligned and non-null, and the total size of the slice not to exceed `isize::MAX`\nstack backtrace:\n   0: std::panicking::begin_panic_handler\n             at /rustc/eeb90cda1969383f56a2637cbd3037bdf598841c/library\\std\\src\\panicking.rs:665\n   1: core::panicking::panic_nounwind_fmt::runtime\n             at /rustc/eeb90cda1969383f56a2637cbd3037bdf598841c/library\\core\\src\\panicking.rs:112\n   2: core::panicking::panic_nounwind_fmt\n             at /rustc/eeb90cda1969383f56a2637cbd3037bdf598841c/library\\core\\src\\panicking.rs:122\n   3: core::panicking::panic_nounwind\n             at /rustc/eeb90cda1969383f56a2637cbd3037bdf598841c/library\\core\\src\\panicking.rs:221\n   4: core::slice::raw::from_raw_parts::precondition_check\n             at /rustc/eeb90cda1969383f56a2637cbd3037bdf598841c\\library\\core\\src\\ub_checks.rs:68\n   5: core::slice::raw::from_raw_parts&lt;u64&gt;\n             at /rustc/eeb90cda1969383f56a2637cbd3037bdf598841c\\library\\core\\src\\ub_checks.rs:75\n   6: roc_serialize::bytes::deserialize_slice&lt;u64&gt;\n             at .\\crates\\compiler\\serialize\\src\\bytes.rs:35\n   7: roc_can::abilities::serialize::deserialize_solved_implementations\n             at .\\crates\\compiler\\can\\src\\abilities.rs:1199\n   8: roc_can::module::TypeState::deserialize\n             at .\\crates\\compiler\\can\\src\\module.rs:1243\n   9: roc_load::deserialize_help\n             at .\\crates\\compiler\\load\\src\\lib.rs:240\n  10: roc_load::read_cached_types\n             at .\\crates\\compiler\\load\\src\\lib.rs:266\n  11: roc_load::load\n             at .\\crates\\compiler\\load\\src\\lib.rs:37\n  12: roc_load::load_and_monomorphize\n             at .\\crates\\compiler\\load\\src\\lib.rs:143\n  13: roc_build::program::build_file\n             at .\\crates\\compiler\\build\\src\\program.rs:732\n  14: roc_cli::build\n             at .\\crates\\cli\\src\\lib.rs:920\n  15: roc::main\n             at .\\crates\\cli\\src\\main.rs:46\n  16: core::ops::function::FnOnce::call_once&lt;enum2$&lt;core::result::Result&lt;tuple$&lt;&gt;,std::io::error::Error&gt; &gt; (*)(),tuple$&lt;&gt; &gt;\n             at /rustc/eeb90cda1969383f56a2637cbd3037bdf598841c\\library\\core\\src\\ops\\function.rs:250\n  17: core::hint::black_box\n             at /rustc/eeb90cda1969383f56a2637cbd3037bdf598841c\\library\\core\\src\\hint.rs:389\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\nthread caused non-unwinding panic. aborting.\nerror: process didn&#39;t exit successfully: `target\\debug\\roc.exe --linker=surgical .\\examples\\platform-switching\\rocLovesRust.roc` (exit code: 0xc0000409, STATUS_STACK_BUFFER_OVERRUN)\n</code></pre></div>",
        "id": 476724940,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728896688
    },
    {
        "content": "<p>Apparently the issue is in <code>crates\\compiler\\serialize\\src\\bytes.rs</code></p>\n<p>Specifically in <code>deserialize_slice</code>. I've added an assert that fails.</p>\n<div class=\"codehilite\"><pre><span></span><code>assertion `left == right` failed: Misaligned pointer for type T\n  left: 4\n right: 0\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">deserialize_slice</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Copy</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">bytes</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">alignment</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">mem</span><span class=\"p\">::</span><span class=\"n\">align_of</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">mem</span><span class=\"p\">::</span><span class=\"n\">size_of</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">next_multiple_of</span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">alignment</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">byte_length</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">byte_slice</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">bytes</span><span class=\"p\">[</span><span class=\"n\">offset</span><span class=\"o\">..</span><span class=\"p\">][</span><span class=\"o\">..</span><span class=\"n\">byte_length</span><span class=\"p\">];</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Check if the pointer is properly aligned</span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">byte_slice</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">alignment</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"s\">\"Misaligned pointer for type T\"</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">slice</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">slice</span><span class=\"p\">::</span><span class=\"n\">from_raw_parts</span><span class=\"p\">(</span><span class=\"n\">byte_slice</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">slice</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">byte_length</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>But I'll need to stare at this for a while before I convince myself I can understand what is happening here. It obviously works fine on linux and macos, just failing on my windows machine.</p>",
        "id": 476736891,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728899697
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> just wondering if this might be a red-herring... do you have any intuition for what might be the issue here?</p>",
        "id": 476737959,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728899994
    },
    {
        "content": "<p>3 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"395097\" href=\"/#narrow/stream/395097-compiler-development/topic/Windows.20Surgical.20Linker.20Bug\">#compiler development &gt; Windows Surgical Linker Bug</a> by <span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span>.</p>",
        "id": 476739129,
        "sender_full_name": "Notification Bot",
        "timestamp": 1728900270
    },
    {
        "content": "<p>no this is real. The input <code>bytes</code> slice must be aligned. It may be that on windows the system allocator has a lower alignment, or that the slice is to stack memory and on windows things are placed on the stack differently (different order, types have different sizes, whatever).</p>",
        "id": 476942637,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1728983706
    },
    {
        "content": "<p>in any case, you must get the caller to provide a properly-aligned slice somehow (and panic if it is not aligned, so keep that assert in there)</p>",
        "id": 476942764,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1728983743
    },
    {
        "content": "<p>(btw I'll be in China from here on out, so, good luck, and I'll check back in in next monday)</p>",
        "id": 476942901,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1728983774
    }
]