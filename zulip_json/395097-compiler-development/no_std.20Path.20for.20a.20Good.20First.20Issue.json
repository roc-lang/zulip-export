[
    {
        "content": "<p>While working on the canonicalization rewrite, I've been trying to figure out how best to handle file paths. We want to make roc_can no_std to enforce that everything is arena-allocated for caching and performance. I started by converting all Paths to <code>&amp;'a [u8]</code> but with the recent OsArg discussion, it seems like a recipe for Windows-related bugs. </p>\n<p>Unfortunately, I'm not seeing a way to use an existing impl for Path: I found no issue to make it available no_std in the Rust repo, and no crates in the ecosystem at first glance.</p>\n<p>It seems like the solution is to add a new arena-friendly Path in <code>crates/compiler/collections</code>. It's pretty self-contained, does anyone disagree that it would be a good beginner issue? It's tricky to get right, but they should be able to copy a good bit of it from the stdlib</p>",
        "id": 490599779,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734996064
    },
    {
        "content": "<p>Im going to sound like a passenger princess saying this given that i've done almost zero contribution recently, so feel free to ignore this, but i would strongly suggest doing the simplest thing (using stdlib paths) first and then getting rid of allocations etc in subsequent passes once things are stable. one of the biggest issues IMO from an engineering perspective (and in no small part, partially my fault) is there are layers of abstraction that make the implementation hard to read and debug. I think this is a good beginner issue but having bugs here will be very painful.</p>",
        "id": 490600417,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1734996421
    },
    {
        "content": "<p>Yeah, that's fair. Okay, I can stick with Path for now and do my best to avoid allocations. It shouldn't be a huge pain to enable #![no_std] later</p>",
        "id": 490610198,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735002137
    },
    {
        "content": "<p>Though it would be nice to have it from the start to keep anyone else from doing that</p>",
        "id": 490610245,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735002175
    },
    {
        "content": "<p>FWIW I'm firmly on board with keeping Paths out of <code>can</code> - and in fact, IMO it should be as far away from the core of the compiler as possible. This way, we can avoid platform-specific behavior. e.g. I want to prevent windows-specific parsing (or <code>can</code>) problems or behavior differences.</p>",
        "id": 490684385,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1735051931
    },
    {
        "content": "<p>That said, I'm not sure <code>&amp;[u8]</code> is the right thing to use in its place</p>",
        "id": 490684434,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1735051966
    },
    {
        "content": "<p>A much better option (IMO) is to just use <code>&amp;str</code>. My bet is that we will _never_ encounter a problem that will be fixed by having the slightly more faithful Path types.</p>",
        "id": 490684535,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1735052040
    },
    {
        "content": "<p>We need some way to maintain a relationship between a file path and its module path, e.g. <code>Path.To.Module</code> and <code>src/Path/To/Module.roc</code></p>",
        "id": 490684785,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735052179
    },
    {
        "content": "<p>&amp;str can work for now</p>",
        "id": 490684883,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735052275
    },
    {
        "content": "<p>Do you happen to know what that's used for, after <code>can</code>?</p>",
        "id": 490684999,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1735052336
    },
    {
        "content": "<p>I don't think its really used after can, besides error reporting</p>",
        "id": 490685252,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735052495
    },
    {
        "content": "<p>Can't check right now, helping my mom with annual computer stuff at Xmas <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 490685284,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735052516
    },
    {
        "content": "<p>I guess an optimization we could do is to save module names in a double format at load time</p>",
        "id": 490685684,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735052766
    },
    {
        "content": "<p>AKA </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">ModuleName</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">filename</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">segments</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 490686137,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735053016
    },
    {
        "content": "<p>And then we don't have to worry about how to convert</p>",
        "id": 490686315,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735053161
    },
    {
        "content": "<p>Why would we ever be allocating new paths in can. Feels pretty unimportant to worry about their allocations and add complexity around them</p>",
        "id": 490710553,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735070772
    },
    {
        "content": "<p>Also, for a module name, I feel like we could force valid unicode. It's our language after all.</p>",
        "id": 490710563,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735070792
    },
    {
        "content": "<p>So if we really wanted, we could just convert all module names to valid utf-8 strings</p>",
        "id": 490710595,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735070825
    },
    {
        "content": "<p>yeah filenames can be invalid UTF-8 in the OS, but Roc source files have to be valid UTF-8, so any <code>module</code> would need a valid UTF-8 filename to be usable</p>",
        "id": 490714743,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735074786
    },
    {
        "content": "<p>although I guess theoretically the rest of the path could be invalid</p>",
        "id": 490714777,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735074831
    },
    {
        "content": "<p>but then as soon as we're printing out the paths for display, we have invalid Unicode so we'd be displaying the Unicode replacement character, which could be confusing</p>",
        "id": 490714848,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735074868
    },
    {
        "content": "<p>all that said, it also feels pretty free to just leave them as std Paths for now</p>",
        "id": 490714910,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735074940
    }
]