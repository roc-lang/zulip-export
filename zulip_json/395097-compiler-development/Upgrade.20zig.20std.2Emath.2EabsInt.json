[
    {
        "content": "<p>Here is an example where I'm not 100% on how we upgrade from zig 0.11.0 to 0.13.0. </p>\n<p><a href=\"https://github.com/roc-lang/roc/blob/d5db3137a3d8da46f92c31b6bf088bc495f759c2/crates/compiler/builtins/bitcode/src/dec.zig#L467\">https://github.com/roc-lang/roc/blob/d5db3137a3d8da46f92c31b6bf088bc495f759c2/crates/compiler/builtins/bitcode/src/dec.zig#L467</a></p>\n<p>Docs for the old version <br>\n<a href=\"https://ziglang.org/documentation/0.11.0/std/#A;std:math.absInt\">https://ziglang.org/documentation/0.11.0/std/#A;std:math.absInt</a></p>\n<p>Docs for the new builtin I <em>think</em> may be what we want<br>\n<a href=\"https://ziglang.org/documentation/0.13.0/#abs\">https://ziglang.org/documentation/0.13.0/#abs</a></p>\n<p>Or maybe one of these<br>\n<a href=\"https://ziglang.org/documentation/0.13.0/std/#std.math\">https://ziglang.org/documentation/0.13.0/std/#std.math</a></p>\n<h2>current</h2>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">numerator_abs_i128</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">math</span><span class=\"p\">.</span><span class=\"n\">absInt</span><span class=\"p\">(</span><span class=\"n\">numerator_i128</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">catch</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// Currently, if you try to do multiplication on i64::MIN, panic</span>\n<span class=\"w\">    </span><span class=\"c1\">// unless you're specifically multiplying by 0 or 1.</span>\n<span class=\"w\">    </span><span class=\"c1\">//</span>\n<span class=\"w\">    </span><span class=\"c1\">// Maybe we could support more cases in the future</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">denominator_i128</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">one_point_zero_i128</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">self</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">roc_panic</span><span class=\"p\">(</span><span class=\"s\">\"Decimal division overflow in numerator!\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div>\n<h2>zig 13 error</h2>\n<div class=\"codehilite\"><pre><span></span><code>/nix/store/xgga5anfp46iafhlrisqqz2b66jw2alb-zig-0.13.0/lib/std/math.zig:1:1: note: struct declared here\nconst builtin = @import(&quot;builtin&quot;);\n^~~~~\nsrc/dec.zig:1501:20: note: called from here\n    const result = @call(.always_inline, RocDec.abs, .{arg}) catch {\n                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nreferenced by:\n    comptime_1: src/main.zig:24:20\n    remaining reference traces hidden; use &#39;-freference-trace&#39; to see all reference traces\nsrc/dec.zig:467:40: error: root struct of file &#39;math&#39; has no member named &#39;absInt&#39;\n        const numerator_abs_i128 = math.absInt(numerator_i128) catch {\n                                   ~~~~^~~~~~~\n</code></pre></div>",
        "id": 453636070,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1721811128
    },
    {
        "content": "<p>Yeah, we want <code>@abs</code> here.</p>",
        "id": 453727952,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721834973
    },
    {
        "content": "<p>Instead of erroring on failure, it returns an unsigned type</p>",
        "id": 453728026,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721834989
    },
    {
        "content": "<p>So <code>i128</code> becomes a <code>u128</code></p>",
        "id": 453728076,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721835000
    },
    {
        "content": "<p>Catching the error will instead happen when we ensure the <code>u128</code> fits back into an <code>i128</code></p>",
        "id": 453728310,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721835026
    },
    {
        "content": "<p>so <code>@abs</code> follow by <code>if (value &lt; std.math.maxInt(i128)) ...</code></p>",
        "id": 453729027,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721835157
    }
]