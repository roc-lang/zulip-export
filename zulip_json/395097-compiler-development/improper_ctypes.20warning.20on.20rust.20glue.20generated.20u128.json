[
    {
        "content": "<p>Rust glue currently uses Rust's u128/i128 types to represent Roc's U128/I128 types. This causes rustc to raise a warning:</p>\n<div class=\"codehilite\"><pre><span></span><code>warning: `extern` block uses type `u128`, which is not FFI-safe\n  --&gt; src/x86_64.rs:27:50\n   |\n27 |         fn roc__mainForHost_1_exposed_generic(_: *mut u128);\n   |                                                  ^^^^^^^^^ not FFI-safe\n   |\n   = note: 128-bit integers don&#39;t currently have a known stable ABI\n   = note: `#[warn(improper_ctypes)]` on by default\n</code></pre></div>\n<p>I've noticed roc_std contains U128/I128 implementations with explicitly specified alignment. I suspect the proper fix here would be to make Rust glue use these types instead?</p>",
        "id": 480678228,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1730799703
    },
    {
        "content": "<p>I think so, I've solved a difficult bug in the past where we assumed a Roc type (don't remember which one) had the same representation as a similar Rust type but this assumption was incorrect</p>",
        "id": 480681019,
        "sender_full_name": "Anton",
        "timestamp": 1730800444
    },
    {
        "content": "<p><a href=\"#narrow/channel/395097-compiler-development/topic/str_to_u128.20segfault/near/434410692\">This one</a>?</p>",
        "id": 480681272,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1730800519
    },
    {
        "content": "<p>Either way, I'll make the change!</p>",
        "id": 480681539,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1730800592
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"625912\">Sven van Caem</span> <a href=\"#narrow/channel/395097-compiler-development/topic/improper_ctypes.20warning.20on.20rust.20glue.20generated.20u128/near/480681272\">said</a>:</p>\n<blockquote>\n<p><a href=\"#narrow/channel/395097-compiler-development/topic/str_to_u128.20segfault/near/434410692\">This one</a>?</p>\n</blockquote>\n<p>Yes, that's the one!</p>",
        "id": 480685967,
        "sender_full_name": "Anton",
        "timestamp": 1730801941
    },
    {
        "content": "<p>We may need to update llvm before you can switch that, but I don't recall fully</p>",
        "id": 480763886,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1730825722
    },
    {
        "content": "<p>I know that llvm initially got the alignment of u128 wrong, but a fix eventually landed</p>",
        "id": 480763948,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1730825752
    },
    {
        "content": "<p>I'm not sure which roc matches currently</p>",
        "id": 480763995,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1730825763
    },
    {
        "content": "<p>I've just tested it with the following function:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">Numbers</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">u128</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">U128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">i128</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">I128</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"kr\">main </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Numbers</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Numbers</span>\n<span class=\"kr\">main </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">u128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">i128</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">u128</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"nf\">*</span><span class=\"w\"> </span><span class=\"nv\">u128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">i128</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"nf\">*</span><span class=\"w\"> </span><span class=\"nv\">i128</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>it seems roc_std's <code>U128</code>/<code>I128</code> give incorrect results and Rust's <code>u128</code> and <code>i128</code> work just fine. I suppose it wasn't an oversight after all? It does mean we're stuck with the <code>improper_ctypes</code> warning though unless we choose to suppress it.</p>",
        "id": 481073738,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1730970534
    },
    {
        "content": "<p>Here's the values it fails with:</p>\n<div class=\"codehilite\"><pre><span></span><code>---- glue_cli_run::u128_i128 stdout ----\nthread &#39;glue_cli_run::u128_i128&#39; panicked at crates/glue/tests/test_glue_cli.rs:277:13:\n`roc` command had unexpected stderr: ðŸ”¨ Rebuilding platform...\nthread &#39;main&#39; panicked at src/lib.rs:24:5:\nassertion `left == right` failed\n  left: Numbers { i128: 281446803774592, u128: 922337203685477580798 }\n right: Numbers { i128: 170141183460469231731687303715884105726, u128: 340282366920938463463374607431768211454 }\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>",
        "id": 481075807,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1730971255
    },
    {
        "content": "<p>where left is the value roc returned, and right is the value that was expected</p>",
        "id": 481075936,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1730971300
    },
    {
        "content": "<p>i128 seems to be slightly different each time, but u128 seems to be the same garbage each time</p>",
        "id": 481076283,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1730971415
    },
    {
        "content": "<p>It's not a thorough test, but I'll change RustGlue back to emitting u128 instead of roc_std::U128 for now</p>",
        "id": 481076602,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1730971526
    },
    {
        "content": "<p>I think this can be fixed the next time we update llvm</p>",
        "id": 481434436,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731134406
    },
    {
        "content": "<p>Though we may also need to update our u128 alignment in general in the compiler</p>",
        "id": 481434448,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1731134433
    }
]