[
    {
        "content": "<p>Hi! I'm working with Luke on his roc-ray platform, and ran into either a bug or (more likely) a thing I don't get about roc glue.<br>\nIf I run this command:<br>\n<code>roc glue ~/path/to/roc/crates/glue/src/RustGlue.roc glue/out glue/glue.roc</code><br>\nwhere <code>glue/glue.roc</code>has this in it:</p>\n<div class=\"codehilite\"><pre><span></span><code>ThingToCheck : {\n    timestampMillis : U64,\n    frameCount : U64,\n    keys : List U64,\n    mouseButtons : List U64,\n    mousePosX : F32,\n    mousePosY : F32,\n}\n</code></pre></div>\n<p>in the output, there's different versions of ThingToCheck as a rust struct for x86, x86_64, wasm32, etc. These different structs have different orders to their fields, which I understand matters because they're <code>repr(C)</code>. For example:</p>\n<div class=\"codehilite\" data-code-language=\"//\"><pre><span></span><code>#[derive(Clone, Default, Debug, PartialEq, PartialOrd, )]\n#[repr(C)]\npub struct ThingToCheck {\n    pub frameCount: u64,\n    pub keys: roc_std::RocList&lt;u64&gt;,\n    pub mouseButtons: roc_std::RocList&lt;u64&gt;,\n    pub mousePosX: f32,\n    pub mousePosY: f32,\n    pub timestampMillis: u64,\n}\n\n// x86_64\n#[derive(Clone, Default, Debug, PartialEq, PartialOrd, )]\n#[repr(C)]\npub struct ThingToCheck {\n    pub frameCount: u64,\n    pub keys: roc_std::RocList&lt;u64&gt;,\n    pub mouseButtons: roc_std::RocList&lt;u64&gt;,\n    pub timestampMillis: u64,\n    pub mousePosX: f32,\n    pub mousePosY: f32,\n}\n</code></pre></div>\n<p>Is that expected, and should our (currently handwritten not generated) host be using <code>cfg(target_arch = \"whatever\")</code> to handle this kind of thing?</p>",
        "id": 477544218,
        "sender_full_name": "Dan G Knutson",
        "timestamp": 1729211257
    },
    {
        "content": "<p>The first one is wasm?</p>",
        "id": 477545289,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729212000
    },
    {
        "content": "<p>Or I guess x86_32.</p>",
        "id": 477545420,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729212087
    },
    {
        "content": "<p>Anyway, I think it is correct</p>",
        "id": 477545423,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729212093
    },
    {
        "content": "<p>Roc sorts by alignment first then by name</p>",
        "id": 477545433,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729212103
    },
    {
        "content": "<p>On x86_32 and wasm32, <code>u64</code> has an alignment of <code>32</code> bits</p>",
        "id": 477545493,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729212129
    },
    {
        "content": "<p>So on those targets all fields have the same alignment. Thus just alphabetical order</p>",
        "id": 477545535,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729212166
    },
    {
        "content": "<p>On x86_64, they have <code>u64</code> has <code>64</code>bit alignment. So does <code>List</code>. So they go before the <code>f32</code>s</p>",
        "id": 477545565,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729212198
    },
    {
        "content": "<p>I'm not familiar with having to think about alignment at all. Am I right to think that this means using a single handwritten version (without cfg(target_arch)) is probably going to end up broken across different compilation targets? Like the data roc gets out of the bytes passed from rust would just be arbitrarily incorrect?</p>",
        "id": 477545745,
        "sender_full_name": "Dan G Knutson",
        "timestamp": 1729212338
    },
    {
        "content": "<p>For example, given enough variety in fields, if it was sorted correctly for aarch64 it would necessarily be sorted incorrectly for an x86_64 machine.</p>",
        "id": 477545961,
        "sender_full_name": "Dan G Knutson",
        "timestamp": 1729212499
    },
    {
        "content": "<blockquote>\n<p>using a single handwritten version (without cfg(target_arch)) is probably going to end up broken across different compilation targets?</p>\n</blockquote>\n<p>Yes</p>",
        "id": 477546121,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729212611
    },
    {
        "content": "<blockquote>\n<p>aarch64 it would necessarily be sorted incorrectly for an x86_64 machine.</p>\n</blockquote>\n<p>I think these are the same though, at least that's why i just hand rolled it</p>",
        "id": 477546153,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729212635
    },
    {
        "content": "<p>I think at some point we talked about changing roc to just sort by alphabetical. Is there a reason we wouldn't do this?</p>",
        "id": 477546228,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729212680
    },
    {
        "content": "<p>ah, gotcha; it only really matters for 32 vs 64, which in practice is likely to mean wasm?</p>",
        "id": 477546266,
        "sender_full_name": "Dan G Knutson",
        "timestamp": 1729212708
    },
    {
        "content": "<p>That's my poor mans understanding</p>",
        "id": 477546340,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729212725
    },
    {
        "content": "<p>Yeah, that is a good poor mans understanding. Sometimes there can be weird exceptions, but that almost always is the difference.</p>",
        "id": 477547505,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729213546
    },
    {
        "content": "<p>thanks! that's reassuring.</p>",
        "id": 477548698,
        "sender_full_name": "Dan G Knutson",
        "timestamp": 1729214486
    }
]