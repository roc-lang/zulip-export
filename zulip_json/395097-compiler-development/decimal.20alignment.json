[
    {
        "content": "<p>Most list operations on lists of decimals will fail on x86 because of alignment <a href=\"https://github.com/roc-lang/roc/issues/6343\">https://github.com/roc-lang/roc/issues/6343</a> is an example</p>",
        "id": 418719011,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706561865
    },
    {
        "content": "<p>I can't think of a good way to fix it really</p>",
        "id": 418719063,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706561883
    },
    {
        "content": "<p>do we know what LLVM release will fix that?</p>",
        "id": 418719907,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1706562200
    },
    {
        "content": "<p>the next one I believe</p>",
        "id": 418719932,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706562216
    },
    {
        "content": "<p>I think <a href=\"https://reviews.llvm.org/D86310\">https://reviews.llvm.org/D86310</a> is the implementation. it got merged, so it should be in LLVM 18</p>",
        "id": 418721209,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706562671
    },
    {
        "content": "<p>weirdly the (mostly empty) new release notes are for llvm 19</p>",
        "id": 418721241,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706562688
    },
    {
        "content": "<p>I am not sure I follow the issue fully. Don't we just need to change our internal alignment calculations to treat Dec as a {U64, U64} and set the alignment to 8 instead of 16. So just set this to 8: <a href=\"https://github.com/roc-lang/roc/blob/dd86b11150d4d33de842bf3fdb705bcd5409be15/crates/compiler/builtins/src/bitcode.rs#L134\">https://github.com/roc-lang/roc/blob/dd86b11150d4d33de842bf3fdb705bcd5409be15/crates/compiler/builtins/src/bitcode.rs#L134</a></p>",
        "id": 418771077,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706593110
    },
    {
        "content": "<p>Maybe we need to specialize on the OS too or similar?</p>",
        "id": 418771144,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706593188
    },
    {
        "content": "<p>Cause zig thinks an i128, is aligned to 8. So does roc llvm.</p>",
        "id": 418771235,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706593260
    },
    {
        "content": "<p>So probably do all of the platforms written in rust or c or zig.</p>",
        "id": 418771250,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706593275
    },
    {
        "content": "<p>Changing that one line fixes this specific issue on my x86_64 machine and causes the EIR.roc test to pass.</p>",
        "id": 418771619,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706593606
    },
    {
        "content": "<p>Just did testing. Rust and zig both see it as an align of 8 currently on x86_64. C/C++ technically don't have a native <code>int128_t</code> but there is the compiler builtin <code>__int128_t</code> which is 16 byte aligned (that said it isn't official and is not supported on most platforms).</p>",
        "id": 418772424,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706594331
    },
    {
        "content": "<p>Given all of our platforms are in rust or zig essentially and c++ can easily work around the alignment if it has a list of I128 or list of Dec, I think we should just change that to 8.</p>",
        "id": 418772457,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706594379
    },
    {
        "content": "<p>One other note, on 32bit targets, they consider i128 to be aligned to 4 bytes, so I guess that needs to be changed as well.</p>",
        "id": 418772691,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706594523
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/issues/6467\">#6467</a></p>",
        "id": 418774874,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706596022
    },
    {
        "content": "<p>yeah the problem is how to make that consistent. We have many tests that rely on the ordering of fields. Changing the alignment on x86 but not on aarch  causes field order to be different based on the target</p>",
        "id": 418801186,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706608422
    },
    {
        "content": "<p>so now you're sprinkling <code>cfg</code>s all over our tests, right?</p>",
        "id": 418801279,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706608449
    },
    {
        "content": "<p>in terms of prioritization, I personally think it's fine to deprioritize this because if we wait for the next LLVM release (and the next Zig release which uses it) we'll just get the bugfix for free without putting any additional time into it <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 418818941,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1706615074
    },
    {
        "content": "<p>We need it anyway when we decide to properly handle 32bit systems. They aren't going to all change to align to 128bit.</p>",
        "id": 418865332,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706629202
    },
    {
        "content": "<p>I'd hope 32-bit x86 and arm use the same alignment though?</p>",
        "id": 418865511,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706629246
    },
    {
        "content": "<p>To my understanding only x86-64 is changing the alignment. 32bit X86 will still be aligned to 4. Not sure about 32bit arm I think it may have been 8.</p>",
        "id": 418865574,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706629270
    },
    {
        "content": "<p>Just double checked the llvm pr, they change both x86 and x86_64</p>",
        "id": 418866950,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706629623
    },
    {
        "content": "<p>But I think arm32 and wasm32 will still align i128 to 8 bytes.</p>",
        "id": 418867227,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706629693
    },
    {
        "content": "<blockquote>\n<p>in terms of prioritization, I personally think it's fine to deprioritize this because if we wait for the next LLVM release </p>\n</blockquote>\n<p>Yeah, I thought this would be a real quick fix to unblock someone. That and, we actually need this change either way for arm32 and wasm32.</p>",
        "id": 418870941,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706630701
    },
    {
        "content": "<p>So I just did a bunch of checking with targets from rust nightly (which has already updated for the new llvm change)</p>\n<p>Results: <a href=\"https://zig.godbolt.org/z/qd4jc7hfd\">https://zig.godbolt.org/z/qd4jc7hfd</a></p>\n<p>16 byte alignment: x86_64, x86_32, aarch64, risv64<br>\n8 byte alignment: wasm32, arm, thumb, risv32</p>\n<p>So we are definitely going to have to deal with mono test record field order changes due to alignment in the long term. Same with any other tests that assume field order is the same on all architectures. That or add some sort of dummy sorting that will always put <code>i128/u128/dec</code> before <code>i64/u64/f64</code> even if they have the same alignment (that actually might be a simpler fix for us). It could be a simple as sorting by alignment then size then name. Or just special casing those types.</p>\n<p>In general, waiting for the llvm update will not fix everything, there is at least one extra part to deal with. Thoughts?</p>",
        "id": 418936601,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706656063
    },
    {
        "content": "<p>so is llvm going to fix the rest too? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 418937720,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1706656549
    },
    {
        "content": "<p>The rest are correct</p>",
        "id": 418938300,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706656861
    },
    {
        "content": "<p>in x86 systems, the abi defines that 128bit integers are aligned to 16 bytes. Same with aarch64 and riscv64.</p>\n<p>On the other systems, it is not defined that way.</p>",
        "id": 418938403,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706656923
    },
    {
        "content": "<p>So they really just updated to match the calling convention/abi.</p>",
        "id": 418938470,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706656951
    },
    {
        "content": "<p>Also, just to clarify the abi a bit more. I pretty sure it is the case that on the 32bit targets the largest value defined is a 64bit integer. As such, anything larger is required to be a struct. So an <code>i128</code> is actually an <code>{i64, i64}</code>. Thus, it only has 8 byte alignment.</p>",
        "id": 418939639,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706657553
    },
    {
        "content": "<p>ah interesting!</p>",
        "id": 418939905,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1706657662
    },
    {
        "content": "<p>so why would we want it to be 16 on those targets? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 418939926,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1706657679
    },
    {
        "content": "<p>We don't, we would prefer it to be aligned to 8. The problem arises that are tests aren't setup for it. Currently I don't think we test on any of those targets, but when we test one day on a 32bit arm machine some tests will fail.</p>",
        "id": 418940101,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706657766
    },
    {
        "content": "<p>For example any mono test with a record that has an I64 and I128 in it</p>",
        "id": 418940131,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706657787
    },
    {
        "content": "<p>The fields might reorder</p>",
        "id": 418940147,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706657796
    },
    {
        "content": "<p>I think that's mostly fine though. Mono should not depend on the target besides the field ordering. So most of mono itself should be adequately tested on a standard machine.</p>",
        "id": 418940652,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706658093
    },
    {
        "content": "<p>ah, so just don't run mono on those targets?</p>",
        "id": 418940685,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706658113
    },
    {
        "content": "<p>yeah</p>",
        "id": 418940690,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706658119
    },
    {
        "content": "<p>well, the (standard) tests</p>",
        "id": 418940741,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706658128
    },
    {
        "content": "<p>we could make some custom ones that actually test the alignment</p>",
        "id": 418940754,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706658137
    },
    {
        "content": "<p>but also, 32-bit systems are not that powerful, why would we even build the compiler on them in CI?</p>",
        "id": 418940784,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706658155
    },
    {
        "content": "<p>Ok. Then I say lets just set these to the correct values and then wait for llvm/zig/rust to update.</p>",
        "id": 418940785,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706658156
    },
    {
        "content": "<blockquote>\n<p>but also, 32-bit systems are not that powerful, why would we even build the compiler on them in CI?</p>\n</blockquote>\n<p>True. Probably would do the same as we do for 32bit x86. Just run 32bit arm binary on a 64bit machine (I assume but am not actually sure if that is supported)</p>",
        "id": 418940846,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706658205
    },
    {
        "content": "<p>does that really test what you want to test?</p>",
        "id": 418940960,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706658272
    },
    {
        "content": "<p>cortex-m is different from cortex-a right?</p>",
        "id": 418940970,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706658279
    },
    {
        "content": "<p>maybe not in relevant ways though</p>",
        "id": 418940981,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706658293
    },
    {
        "content": "<p>It should at least test basic abi and alignment. llvm will deal with cpu specifics for us.</p>",
        "id": 418941002,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706658309
    },
    {
        "content": "<p>That said, I really don't care to build the compiler on 32bit arm. So maybe tests should just be about cross compiling being correct.</p>",
        "id": 418941044,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706658345
    },
    {
        "content": "<p>Anyway. I think we should submit this for now and just wait on llvm and such to catch up: <a href=\"https://github.com/roc-lang/roc/issues/6474\">#6474</a></p>",
        "id": 418941119,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706658379
    },
    {
        "content": "<p>yes, makes sense</p>",
        "id": 418941211,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706658445
    },
    {
        "content": "<p>never thought I'd see the day when this issue actually closed! <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span> </p>\n<p><a href=\"https://github.com/rust-lang/rust/issues/54341#issuecomment-2266649613\">https://github.com/rust-lang/rust/issues/54341#issuecomment-2266649613</a></p>",
        "id": 456138118,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1722682967
    }
]