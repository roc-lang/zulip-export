[
    {
        "content": "<p>I have spent a lot of time on making this snapshot format in a stable fashion:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"mi\">8</span>\n<span class=\"p\">(</span><span class=\"s\">\"\"\"\"\"\"\"\"</span><span class=\"p\">)</span><span class=\"nv\">f</span><span class=\"nf\">:</span><span class=\"kt\">C</span>\n<span class=\"kt\">U</span>\n</code></pre></div>\n<p>Which should format to:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"mi\">8</span>\n<span class=\"p\">(</span>\n<span class=\"s\">\"\"\"</span>\n<span class=\"s\">\"\"\"</span>\n<span class=\"w\">    </span><span class=\"s\">\"\"</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nv\">f</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">C</span>\n<span class=\"kt\">U</span>\n</code></pre></div>\n<p>But on reformat ALWAYS becomes:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"mi\">8</span>\n\n<span class=\"p\">(</span>\n<span class=\"s\">\"\"\"</span>\n<span class=\"s\">\"\"\"</span>\n<span class=\"w\">    </span><span class=\"s\">\"\"</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nv\">f</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">C</span>\n<span class=\"kt\">U</span>\n</code></pre></div>\n<p>See that extra newline?  The reason for it is complicated and has to do with ParensAround not existing in Patterns and the fact that we first parse annotation headers as an expr and translate to Pattern.  But it really only impacts this case.</p>\n<p>But what is the value of having a snapshot that tests the formatting behavior of a illegal pattern?  Should we have some way to say \"This thing we parsed actually doesn't make any sense, so we expect the formatter to fail here and shouldn't test this?\"  I think such a change would largely impact the fuzzer since it's the thing that introduced these snapshots in the first place.</p>",
        "id": 493382879,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736782903
    },
    {
        "content": "<p>My large point is we have a lot of illegal or invalid Roc syntax in test_syntax snapshots.  I think there's value in us being able to parse them, but I think we should be more aggressive in making these not part of the Parse-&gt;Format-&gt;Reformat cycle - perhaps by making them Malformed sooner?</p>",
        "id": 493383461,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736783059
    },
    {
        "content": "<p>Lastly, I really think that having test_syntax actually document invariants of what is <em>actual, valid Roc syntax</em> is just so much higher value.</p>",
        "id": 493383607,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736783103
    },
    {
        "content": "<p>And if we can't find a way to turn a fuzzer failure into a real, valid piece of Roc syntax - we should be doing something in either the fuzzer or the parser to ensure that it is marked as Malformed and therefore the fuzzer will discard such an input in the future without generating noise.</p>",
        "id": 493383949,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736783194
    },
    {
        "content": "<p>I'd like to see:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"p\">(</span>\n<span class=\"s\">\"\"\"</span>\n<span class=\"s\">\"\"\"</span>\n<span class=\"w\">    </span><span class=\"s\">\"\"</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nv\">f</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">C</span>\n</code></pre></div>\n<p>Be a TypeAnnotation(TypeHeader(Apply(Malformed, Ident(\"f\"))), Tag(\"C\")) and then have fuzzer bail out at that point</p>",
        "id": 493384553,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736783365
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"453336\">@Joshua Warner</span> <span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> I think you will have the most thoughts on this.</p>",
        "id": 493384689,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736783403
    },
    {
        "content": "<p>I guess I'll end my mini-rant on a positive note and give a potential vision of what these snapshots could be: </p>\n<blockquote>\n<p><strong>A visual guide to valid Roc syntax</strong> - from the simplest constructs to the most complex.  Showing how it can be written quickly, and how it will always look when formatted.  Documenting both the syntax of the language, as well as the formatter's style.</p>\n</blockquote>\n<p>That will then help us identify clearly what the style <em>is</em> and the principles we use when maintaining and extending it with new syntax.</p>",
        "id": 493385563,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736783650
    },
    {
        "content": "<p>And just for a laugh, here's the same example with PNC migration if we did that</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"mi\">8</span>\n<span class=\"s\">\"\"\"</span>\n<span class=\"s\">\"\"\"</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"s\">\"\"</span><span class=\"p\">,</span>\n<span class=\"p\">)(</span>\n<span class=\"w\">    </span><span class=\"nv\">f</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">C</span>\n<span class=\"kt\">U</span>\n</code></pre></div>\n<p>And with collapsed whitespace in the PNC applys:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"mi\">8</span>\n<span class=\"s\">\"\"\"</span>\n<span class=\"s\">\"\"\"</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"p\">)(</span><span class=\"nv\">f</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">C</span>\n<span class=\"kt\">U</span>\n</code></pre></div>",
        "id": 493386391,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736783875
    },
    {
        "content": "<p>Just one more thing before i go to work (and I may move this to <a class=\"stream\" data-stream-id=\"304641\" href=\"/#narrow/channel/304641-ideas\">#ideas</a> ), should this really just be a md document(or documents) with code blocks appropriately annotated?  Then it could really be what I envision above - a <strong><em>programmatically checked guide to valid Roc syntax and the canonical formatted style</em></strong>.</p>",
        "id": 493388891,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736784481
    },
    {
        "content": "<blockquote>\n<p><em>programmatically checked guide to valid Roc syntax</em></p>\n</blockquote>\n<p>That sure seems useful for the tree sitter parser and similar tools</p>",
        "id": 493389951,
        "sender_full_name": "Anton",
        "timestamp": 1736784776
    },
    {
        "content": "<p>I think so, and for people learning Roc</p>",
        "id": 493390460,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736784914
    },
    {
        "content": "<p>We could even tag the document sections and find a way to link Syntax problems with the relevant section(s) and output it with the report</p>",
        "id": 493390606,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736784958
    },
    {
        "content": "<p>Someone does something crazy like the above and they get a nice syntax error report like:</p>\n<div class=\"codehilite\"><pre><span></span><code>Syntax Error @ main.roc 12:2-12:8 -----------------------------------------\n\n(&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;) f: C\n ^----- | The problem is here\n\nIt looks like you are trying to perform function application on a string literal, but that\nis not valid Roc.  Here&#39;s some tips:\n\nUsually, you would apply an Identifier or a Tag, like this:\n\nfunc(arg)\n# Or\nTag(arg)\n\nBoth of these would format exactly the same as above.\n\nTo get more tips on syntax for function application, use `roc syntax apply`.\n\n--------------------------------------------------------------------------------------\n</code></pre></div>",
        "id": 493392222,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736785347
    },
    {
        "content": "<p>Where <code>roc syntax</code> <em>could</em> be a new subcommand in the CLI to allow the user to browse or search the syntax guide</p>",
        "id": 493393739,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736785738
    },
    {
        "content": "<p>And since this is checked in CI on every commit - this guide would always be correct for that version of the compiler.</p>",
        "id": 493394717,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736785975
    },
    {
        "content": "<p>We generate an <code>llms.txt</code> file and provide it in the tutorial <a href=\"https://github.com/roc-lang/roc/blob/070de5841617423f2f59a370b7ea8cf7bab628d6/www/content/tutorial.md?plain=1#L32\">here</a></p>",
        "id": 493434142,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736797669
    },
    {
        "content": "<p>I think a generated file would suffice here, something that's <em>reasonably</em> legible for humans and definitely for computers</p>",
        "id": 493434256,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736797699
    },
    {
        "content": "<p>What I'm talking about it a systematic inventory of valid syntax that can be tested and verified and can replace test_fmt at least the _vast_ majority of snapshots.  (They would act as snapshots)</p>",
        "id": 493434610,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736797819
    },
    {
        "content": "<p>Oh, in <em>place</em> of snapshots.</p>",
        "id": 493434672,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736797842
    },
    {
        "content": "<p>Yes</p>",
        "id": 493434692,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736797847
    },
    {
        "content": "<p>And since they would be user-facing inside of documentation, there would be context around each example, they would be valid Roc code, and not a bunch of randomly-generated non-sense</p>",
        "id": 493434828,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736797902
    },
    {
        "content": "<p>I agree that the snapshots are moving further from a set of unit test-like valid examples of Roc code and more like Eldritch horrors that get cleaned up and saved to keep us from crashing when we see them</p>",
        "id": 493434852,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736797912
    },
    {
        "content": "<p>And this is NOT saying that the fuzzer does not have value.  But in it's current way of being used it's painful</p>",
        "id": 493434857,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736797914
    },
    {
        "content": "<p>I'd like to see the fuzzer move to a generator/property-based test</p>",
        "id": 493435020,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736797969
    },
    {
        "content": "<p>I'm thinking of the Rust reference: <a href=\"https://doc.rust-lang.org/reference/introduction.html\">https://doc.rust-lang.org/reference/introduction.html</a></p>",
        "id": 493435065,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736797982
    },
    {
        "content": "<p>(I know the fuzzer technically is, but I mean generated from a specification, not from a small corpus and otherwise random text)</p>",
        "id": 493435193,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736798024
    },
    {
        "content": "<p>I think that Rust reference is a good place to start.  But I'd really like to show both the canonical form of each bit of syntax as well as the \"most terrible way to type this and it still parse right\"</p>",
        "id": 493435472,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736798115
    },
    {
        "content": "<p>And that can be our version of <code>*_formats_to</code>/<code>*_formats_same</code></p>",
        "id": 493435542,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736798139
    },
    {
        "content": "<p>That is a noble goal, but I don't know how achievable it is to make something that is a good reference resource AND good for testing</p>",
        "id": 493435599,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736798162
    },
    {
        "content": "<p>Unless it's not actually your goal to do both at once</p>",
        "id": 493435689,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736798179
    },
    {
        "content": "<p>I have a design that would make it possible to do both at once.  It's called the documentation will link in the code samples that are valid into the reference</p>",
        "id": 493435835,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736798230
    },
    {
        "content": "<p>And if we do make a CLI subcommand for it you could have a --extended flag or something and see everything that matches the search term</p>",
        "id": 493436015,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736798284
    },
    {
        "content": "<p>I feel like we could just delete any snapshots that are not helpful when making a change. They're not sacred or anything. Is this the core of your issue? trying to save or fix snapshots that are super random and strange. </p>\n<p>We've been on a mission to get fuzz clean.... parsing and canonicalisation of all the things and not crashing. </p>\n<p>Returning Malformed for something really strange sounds like a good strategy to me. </p>\n<p>I'm concerned about changing the current setup dramatically, Josh has used it to good effect finding and smashing a lot of bugs.</p>",
        "id": 493456046,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736804770
    },
    {
        "content": "<p>Yeah I just want a fuzzer thats only crashing on legit bugs</p>",
        "id": 493456421,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736804920
    },
    {
        "content": "<p>And not crazy ass syntax it got by throwing paint on the wall</p>",
        "id": 493456458,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736804935
    },
    {
        "content": "<p>So if we just make things malformed earlier (and / or canonicalize them) I think it would be better</p>",
        "id": 493456554,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736804984
    },
    {
        "content": "<p>Agree a lot of them are on the funky side. Not sure I agree they aren't legitimate bugs.</p>",
        "id": 493457763,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736805457
    },
    {
        "content": "<p>I strongly value _reliable_ software</p>",
        "id": 493457789,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736805467
    },
    {
        "content": "<p>I want to provide a 100% guarantee that using the formatter is \"safe\" - i.e. it won't change the meaning of your code or change again once formatted again, etc.</p>",
        "id": 493458035,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736805534
    },
    {
        "content": "<p>I will say, not that we'll feel the benefit for the next month or so, but the <code>roc_can</code> rewrite aims to never crash for this stuff. The parser might crash, but there will be literally zero unwraps or expects in the new canonicalization code</p>",
        "id": 493458057,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736805540
    },
    {
        "content": "<p>So if we're putting a lot of effort into fixing current <code>roc_can</code>, that may not be necessary</p>",
        "id": 493458332,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736805618
    },
    {
        "content": "<p>Ah good to know</p>",
        "id": 493458404,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736805635
    },
    {
        "content": "<p>Do you have more detail on this roc_can rewrite? What's the goal/scope/etc?</p>",
        "id": 493458473,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736805655
    },
    {
        "content": "<p>(maybe in another thread...)</p>",
        "id": 493458532,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736805676
    },
    {
        "content": "<p>Sure</p>",
        "id": 493458542,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736805680
    },
    {
        "content": "<p>I can also probably outline this at the next meetup</p>",
        "id": 493458594,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736805696
    },
    {
        "content": "<p>I'll make another thread for now</p>",
        "id": 493458624,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736805703
    },
    {
        "content": "<p>Anyway to finish my earlier thought, I want to provide that 100% guarantee, but I'd be open to alternative ways of accomplishing that</p>",
        "id": 493458657,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736805716
    },
    {
        "content": "<p>For example, we could do things like detect some of these more niche cases and just refuse to format in that case (maybe that's what you're getting at)</p>",
        "id": 493458794,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736805760
    },
    {
        "content": "<p>Ideally, that only introduces a \"local\" problem, so if you have one tiny problem in a giant file, most of the file can still be formatted properly, and it's only the top-level def with the problem that is copied verbatim from the input</p>",
        "id": 493458913,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736805809
    },
    {
        "content": "<p>Roc <em>needs</em> to be 100% reliable</p>",
        "id": 493458921,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736805811
    },
    {
        "content": "<p>Mental security is like, the whole point of this language</p>",
        "id": 493458946,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736805825
    },
    {
        "content": "<p>Yes it will be safe and only introduce a local issue where the illegal syntax does not get formatted</p>",
        "id": 493459828,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736806122
    },
    {
        "content": "<p>Cool, makes sense</p>",
        "id": 493459884,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736806142
    },
    {
        "content": "<p>This is syntax that will NOT be accepted by later stages of the compiler anywya</p>",
        "id": 493459887,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736806142
    },
    {
        "content": "<p>Yeah, that's true</p>",
        "id": 493459914,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736806153
    },
    {
        "content": "<p>Like trying to apply a string literal <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 493459945,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736806165
    },
    {
        "content": "<p>I want all valid roc syntax to be Roc solid <em>ducks</em></p>",
        "id": 493460042,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736806202
    },
    {
        "content": "<p>hey man, like, strings are functions too</p>",
        "id": 493460107,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1736806211
    },
    {
        "content": "<p>Just because the minimal example that currently hits this case is silly, doesn't mean all such examples that hit this case are silly</p>",
        "id": 493460114,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736806214
    },
    {
        "content": "<p>The term \"stringly-typed\" should not need to exist</p>",
        "id": 493460184,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736806240
    },
    {
        "content": "<p>Maybe but I’d like to focus on the actual examples that are</p>",
        "id": 493460198,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736806247
    },
    {
        "content": "<p>I've thought about an April fools joke announcement of like introducing truthiness or unchecked <code>null</code> or something like that</p>",
        "id": 493460320,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1736806289
    },
    {
        "content": "<p>A fuzzer bug should be able to be coerced into a real working code sample and still reproduce</p>",
        "id": 493460325,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736806289
    },
    {
        "content": "<p>In my experience, that quickly devolves into either:</p>\n<ul>\n<li>just fixing the bug and making the parser/formatter extra resiliant</li>\n<li>OR: disallowing some broad bit of syntax, bailing out early</li>\n</ul>",
        "id": 493460384,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736806314
    },
    {
        "content": "<p>Yes, <a href=\"https://github.com/roc-lang/roc/issues/2\">#2</a> but only bailing out at format</p>",
        "id": 493460579,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736806365
    },
    {
        "content": "<p>That could be done in format itself</p>",
        "id": 493460665,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736806392
    },
    {
        "content": "<p>For your example with multiline strings for example, I 100% agree applying a function like that is not valid - but take this as an example then:</p>\n<div class=\"codehilite\"><pre><span></span><code>&quot;&quot;&quot;abc&quot;&quot;&quot;.foo(1)(2)\n</code></pre></div>\n<p>... where foo is a curried function of some kind</p>",
        "id": 493460793,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736806439
    },
    {
        "content": "<p>I think that'll end up hitting similar problems</p>",
        "id": 493460848,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736806447
    },
    {
        "content": "<p>Now or when we have static dispatch?</p>",
        "id": 493461074,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736806534
    },
    {
        "content": "<p>That example is obviously using static dispatch</p>",
        "id": 493461116,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736806550
    },
    {
        "content": "<p>Anyway, my point is that I've found it's better to just give in and fix the problem rather than avoiding it</p>",
        "id": 493461228,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736806575
    },
    {
        "content": "<p>Avoiding it completely ends up with very complicated conditions, or very \"blunt\" / annoying conditions</p>",
        "id": 493461290,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736806597
    },
    {
        "content": "<p>I just don’t think it’s a problem. It’s invalid syntax, no?</p>",
        "id": 493461294,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736806599
    },
    {
        "content": "<p>Maybe I’m just being dull</p>",
        "id": 493461325,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736806612
    },
    {
        "content": "<p>No, it's perfectly valid syntax</p>",
        "id": 493461326,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736806612
    },
    {
        "content": "<p>Sorry not what you just put</p>",
        "id": 493461360,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736806623
    },
    {
        "content": "<p>The motivating example above</p>",
        "id": 493461373,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736806629
    },
    {
        "content": "<p>Ahh</p>",
        "id": 493461433,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736806652
    },
    {
        "content": "<p>Yeah</p>",
        "id": 493461446,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736806657
    },
    {
        "content": "<p>In that particular case it is kinda-but-not-really invalid right now</p>",
        "id": 493461487,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736806669
    },
    {
        "content": "<p>That’s what I’m talking about</p>",
        "id": 493461489,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736806669
    },
    {
        "content": "<p>That'll bail early in <code>can</code></p>",
        "id": 493461499,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736806674
    },
    {
        "content": "<p>I actually have a PR locally to refactor a bit and make that <code>malformed</code> syntax, which right now the fuzzer won't try to assert formatting conditions on</p>",
        "id": 493461607,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736806700
    },
    {
        "content": "<p>Yes and if it bails early in can, I think we can kind of punt on it in formatting</p>",
        "id": 493461615,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736806702
    },
    {
        "content": "<blockquote>\n<p>I think we can kind of punt on it in formatting</p>\n</blockquote>\n<p>Disagree</p>",
        "id": 493461641,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736806713
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453336\">Joshua Warner</span> <a href=\"#narrow/stream/395097-compiler-development/topic/Crazy.20test_syntax.20snapshots.20and.20their.20value/near/493461607\">said</a>:</p>\n<blockquote>\n<p>I actually have a PR locally to refactor a bit and make that <code>malformed</code> syntax, which right now the fuzzer won't try to assert formatting conditions on</p>\n</blockquote>\n<p>This is exactly what I’m advocating for</p>",
        "id": 493461685,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736806735
    },
    {
        "content": "<p>Ok cool</p>",
        "id": 493461744,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736806756
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 493461756,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736806763
    },
    {
        "content": "<p>Somehow we are disagreeing and agreeing at the same time. It’s probably my poor communication</p>",
        "id": 493461766,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736806767
    },
    {
        "content": "<p>Haha np. Takes two to (mis)communicate</p>",
        "id": 493461801,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736806780
    },
    {
        "content": "<p>To be clear the fuzzer is an awesome tool.</p>",
        "id": 493461844,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736806796
    },
    {
        "content": "<p>I've been pushing hard on the angle of \"just make it work\", since I've been seeing progress there recently</p>",
        "id": 493461974,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736806831
    },
    {
        "content": "<p>I just think that we need tests that give context on what they are testing, why we care, and what we want things to look like</p>",
        "id": 493461990,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736806839
    },
    {
        "content": "<p>Like 2-ish years ago I ran into a period where I got very frustrated with that approach and basically gave up for a while</p>",
        "id": 493462034,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736806855
    },
    {
        "content": "<p>I’ve read more gobbledygook fuzzer Roc than real Roc the past two weeks and I think I have PTSD</p>",
        "id": 493462121,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736806881
    },
    {
        "content": "<p>Fo real</p>",
        "id": 493462173,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736806901
    },
    {
        "content": "<p>100% on board with taking tests and changing them to make them more realistic, so long as they're still covering the same conditions</p>",
        "id": 493462194,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736806908
    },
    {
        "content": "<p>(And totally fine if that means they are now marked as 'malformed')</p>",
        "id": 493462275,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736806927
    },
    {
        "content": "<p>That makes me happy</p>",
        "id": 493462318,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736806942
    },
    {
        "content": "<p>And then we can use the best of the best in the syntax reference I’m talking about (which could be very selective and part of the tutorial)</p>",
        "id": 493462387,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736806972
    },
    {
        "content": "<p>I'm extremely excited to see all the progress on fixing these things the fuzzer is turning up, because compiler bugs are one of the biggest things holding Roc back from reaching its potential</p>",
        "id": 493462701,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1736807105
    },
    {
        "content": "<p>and fizzers that run for a long time without turning up anything give me way more confidence than anything like what we've ever had in the past!</p>",
        "id": 493462800,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1736807149
    },
    {
        "content": "<p>so I really appreciate all your efforts on wading through the gibberish to get us there! <span aria-label=\"hearts\" class=\"emoji emoji-2665\" role=\"img\" title=\"hearts\">:hearts:</span></p>",
        "id": 493462928,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1736807191
    },
    {
        "content": "<p>FWIW I don't think the fuzzer is covering any of the really \"interesting\" parts of the compiler yet (say, the solver) - where I'd define \"interesting\" as \"users often hitting compiler crashes in this area\"</p>",
        "id": 493463071,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736807254
    },
    {
        "content": "<p>But that would be my eventual goal here</p>",
        "id": 493463096,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736807268
    },
    {
        "content": "<p>Baby steps</p>",
        "id": 493463105,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736807272
    },
    {
        "content": "<p>I think my open PR merging spaces within spaces will help with some fuzzer crashes</p>",
        "id": 493463363,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736807353
    },
    {
        "content": "<p>There are some peculiarities of roc syntax that make it particularly hard to parse+format consistently</p>",
        "id": 493463830,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736807501
    },
    {
        "content": "<p>For example, multiline strings very often cause problems if they're used outside of very specific situations</p>",
        "id": 493463942,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736807528
    },
    {
        "content": "<p>Like, they're fine if you're just assigning that to a local, but if you try to do anything else with them, that requires a lot of persnickety condition checking in the formatter</p>",
        "id": 493464075,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736807579
    },
    {
        "content": "<p><code>when</code> branches are also tough</p>",
        "id": 493464194,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736807614
    },
    {
        "content": "<p>With backpassing gone, function types are [almost] the last instance where we have \"naked\" parens inside a syntax element (i.e. where there's not a starting + finishing delimiter to branch on, so we either have to do excessive backtracking or we have to de-normalize the function type parser in the context of tuple types and tag unions)</p>",
        "id": 493465219,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736807961
    },
    {
        "content": "<p>The other case I believe just being comma-separated <code>where</code> clauses</p>",
        "id": 493465282,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736807983
    },
    {
        "content": "<p>If <code>where ...</code> is the last place, is there a way to change how they look to make that not the case?</p>",
        "id": 493465434,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736808022
    },
    {
        "content": "<p>Function types are still causing problems, so <code>where ...</code> is definitely not the last place, but anyway...</p>",
        "id": 493465564,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736808078
    },
    {
        "content": "<p>The solution for function types would be to have some sort of \"introduction\" delimiter</p>",
        "id": 493465611,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736808098
    },
    {
        "content": "<p>e.g. could prefix them with <code>\\</code> or <code>fn</code></p>",
        "id": 493465627,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736808108
    },
    {
        "content": "<p>Or use PNC for types right?</p>",
        "id": 493465706,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736808127
    },
    {
        "content": "<p>Yeah, would <a class=\"stream-topic\" data-stream-id=\"304641\" href=\"/#narrow/channel/304641-ideas/topic/Using.20parens.20for.20types\">#ideas &gt; Using parens for types</a> help?</p>",
        "id": 493465751,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736808146
    },
    {
        "content": "<p>I don't think PNC helps with types</p>",
        "id": 493465768,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736808155
    },
    {
        "content": "<p>Why not?  That makes all type expressions bounded</p>",
        "id": 493465862,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736808192
    },
    {
        "content": "<p>PNC for types only changes type application, e.g. <code>List(foo)</code> instead of <code>List foo</code>. That's not the issue here.</p>",
        "id": 493465875,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736808198
    },
    {
        "content": "<p>No, it also means () around params</p>",
        "id": 493465922,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736808212
    },
    {
        "content": "<p>Ahhh yes that would help</p>",
        "id": 493465945,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736808221
    },
    {
        "content": "<p>Sorry I misunderstood</p>",
        "id": 493465959,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736808225
    },
    {
        "content": "<p>No worries</p>",
        "id": 493465974,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736808229
    },
    {
        "content": "<p>I think Sam brought that up this morning or last night</p>",
        "id": 493466044,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736808244
    },
    {
        "content": "<p>e.g. <code>(Str, Str) -&gt; Str</code> instead of <code>Str, Str -&gt; Str</code></p>",
        "id": 493466058,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736808251
    },
    {
        "content": "<p>I suggested that because it would make parsing code for devs and the compiler all very consistent</p>",
        "id": 493466150,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736808287
    },
    {
        "content": "<p>And would slot in well with zero-arg functions</p>",
        "id": 493466203,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736808306
    },
    {
        "content": "<p>Oh yeah that works nicely</p>",
        "id": 493466268,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736808336
    },
    {
        "content": "<p>Another point for Sam!</p>",
        "id": 493466684,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736808489
    },
    {
        "content": "<p>For <code>where ...</code>, I think the solution would look something like allowing parens around the <code>...</code> part, and furthermore _requiring_ cases where there are multiple implements clauses to use that parens syntax, at least if it's in a context where <code>,</code> would separate elements (e.g. in a tuple type)</p>",
        "id": 493466704,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736808500
    },
    {
        "content": "<p>Love you too</p>",
        "id": 493466710,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736808503
    },
    {
        "content": "<p>That would almost never come up in practice, so probably not much of an actual change</p>",
        "id": 493466739,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736808517
    },
    {
        "content": "<p>Or could just disallow <code>where</code> except at the top level</p>",
        "id": 493466810,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736808552
    },
    {
        "content": "<p>That seems even better actually. Not sure why you'd ever want <code>(List a where a implements Foo, List b where b implements Foo)</code> instead of just <code>(List a, List b) where a implements Foo, b implements Foo</code></p>",
        "id": 493466960,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736808618
    },
    {
        "content": "<p>The latter is my current thought for what Roc's type syntax would be. That's not a problem, right?</p>",
        "id": 493467231,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736808729
    },
    {
        "content": "<p>Technically speaking I guess there are very niche cases where that could come up, if there's a list at a higher level</p>",
        "id": 493467313,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736808769
    },
    {
        "content": "<p>e.g. a tuple of expressions, where one of the expressions is a Defs node with a type annotation</p>",
        "id": 493467505,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736808838
    },
    {
        "content": "<p>Distinguishing whether that comma means we should parse the next <code>implements</code> clause, or go up and parse the next top-level expr in the tuple is non-trivial</p>",
        "id": 493467681,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736808886
    },
    {
        "content": "<p>Wouldn’t that be bounded by the arrow?</p>",
        "id": 493467710,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736808896
    },
    {
        "content": "<p>There's not necessarily any arrow after</p>",
        "id": 493467742,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736808907
    },
    {
        "content": "<p>I think we should have implements at the tail end of an annotation always</p>",
        "id": 493467812,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736808937
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>(\n  a = 1\n  b = 2\n  foo: List a where a implements Foo,\n  bar\n)\n</code></pre></div>",
        "id": 493467978,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736808981
    },
    {
        "content": "<p>That's not fully valid syntax, but at the point where we see <code>bar</code>, we don't know that yet</p>",
        "id": 493468023,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736808997
    },
    {
        "content": "<p>And in particular we don't know whether we should start parsing <code>bar</code> as a type (to be followed by <code>implements</code> or an expr (i.e. the next element of the tuple).</p>",
        "id": 493468161,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736809044
    },
    {
        "content": "<p>Actually I take that back</p>",
        "id": 493468232,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736809065
    },
    {
        "content": "<p>So long as we require a final expr in a Defs, this is fine</p>",
        "id": 493468267,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736809077
    },
    {
        "content": "<p>That’s interesting, I hope we do</p>",
        "id": 493468521,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736809144
    },
    {
        "content": "<p>That feels like an increasingly fragile condition with statements tho</p>",
        "id": 493468578,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736809164
    },
    {
        "content": "<p>Yeah</p>",
        "id": 493468596,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736809173
    },
    {
        "content": "<p>I would actually like to not require that, syntactically</p>",
        "id": 493468642,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736809191
    },
    {
        "content": "<p>(and only validate that in <code>can</code>)</p>",
        "id": 493468671,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736809200
    },
    {
        "content": "<p>I think if you have more than a single implements, you must have parens</p>",
        "id": 493468737,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736809207
    },
    {
        "content": "<p>Here's that PR to introduce a proper TypeVar type (used in TypeHeader), and mark anything that's not a lowercase ident as Malformed in the AST. (Such things would already generate <code>can</code> errors) <a href=\"https://github.com/roc-lang/roc/pull/7511\">https://github.com/roc-lang/roc/pull/7511</a></p>",
        "id": 493614348,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736869611
    },
    {
        "content": "<p>I can review that at lunch</p>",
        "id": 493614903,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736869783
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"781658\">@Anthony Bullard</span> I hit approve... but feel free to also review</p>",
        "id": 493683369,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736894469
    }
]