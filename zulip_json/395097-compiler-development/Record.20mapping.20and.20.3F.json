[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/stream/395097-compiler-development/topic/Builtins.20to.20implement/near/462251827\">said</a>:</p>\n<blockquote>\n<p>I think with the map2-based record builders landed, there's no more need for map3 and mapN beyond map2 for Result or Task</p>\n</blockquote>\n<p>I don't think those are related to record builder at all. I think they are just convenience functions. If you have n results from separate paths you can pass them all to a single function (assuming they all end up being Ok). The most likely alternative is using <code>Result.try</code> n times and then passing the values into the function.</p>\n<p>That said, I still don't think they are needed. I think pushing for <code>Result.try</code> and eventually <code>?</code> will be a much nicer API.</p>",
        "id": 462259285,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723610156
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> I agree that we don't <em>need</em> record builders, they're just an alternative way to manage multiple Results to the ? desugaring. For example,</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">map2</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span>\n<span class=\"w\">        </span><span class=\"nv\">a</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">resultA</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">b</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">resultB</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">c</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">resultC</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"err\">?</span>\n</code></pre></div>\n<p>should be the same as</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">resultA</span><span class=\"err\">?</span>\n<span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">resultB</span><span class=\"err\">?</span>\n<span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">resultC</span><span class=\"err\">?</span>\n</code></pre></div>\n<p>But the first can be used to create a Result without the return type of the function being a Result.</p>",
        "id": 462261162,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1723610821
    },
    {
        "content": "<p>Sure, but that still is different than the mapN functions listed in the issue above.</p>",
        "id": 462261403,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723610879
    },
    {
        "content": "<p>Sure, you're right</p>",
        "id": 462261802,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1723610978
    },
    {
        "content": "<p>I wasn't trying to compare <code>?</code> to record builder. More trying to mention what the goal of the mapN functions was for.</p>",
        "id": 462261817,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723610982
    },
    {
        "content": "<p>Also, never thought of using record builder like that</p>",
        "id": 462261859,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723610993
    },
    {
        "content": "<p>Yeah, I was thinking of what you'd want to do that would use a mapN function, not something analagous to a mapN's literal usage, which isn't the same thing</p>",
        "id": 462262104,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1723611047
    },
    {
        "content": "<p>And yes, that's the glory of <span class=\"user-mention\" data-user-id=\"489294\">@Agus Zubiaga</span> 's design, it's really awesome that so much can be done with so little</p>",
        "id": 462262173,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1723611090
    },
    {
        "content": "<p>I guess it is the same as:</p>\n<div class=\"codehilite\"><pre><span></span><code>{a, b, c} =\n    {\n        a: resultA?,\n        b: resultB?,\n        c: resultC?,\n    }?\n</code></pre></div>",
        "id": 462262183,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723611110
    },
    {
        "content": "<p>I'd say you shouldn't need that last ? around the record literal, but yes</p>",
        "id": 462262285,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1723611205
    },
    {
        "content": "<p>It is actually important to require the final <code>?</code> in my opinion. Enables aggregating the error and then acting on it instead of propagating it.</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">mergedRes</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nv\">a</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">resultA</span><span class=\"err\">?</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">b</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">resultB</span><span class=\"err\">?</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">c</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">resultC</span><span class=\"err\">?</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">mergedRes</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">    </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nf\">...</span>\n<span class=\"w\">    </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nf\">...</span>\n</code></pre></div>\n<p>That said, definitely depends on exactly how we decide to desugar.</p>\n<p>Which of these two is it equivalent to:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">resultA</span><span class=\"err\">?</span>\n<span class=\"nv\">y</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">resultB</span><span class=\"err\">?</span>\n<span class=\"nv\">z</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">resultC</span><span class=\"err\">?</span>\n<span class=\"p\">{</span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nv\">a</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">b</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">c</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">z</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">`</span><span class=\"err\">?</span><span class=\"nf\">`</span><span class=\"w\"> </span><span class=\"nv\">here</span><span class=\"w\"> </span><span class=\"nv\">would</span><span class=\"w\"> </span><span class=\"nv\">be</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"kr\">type</span><span class=\"w\"> </span><span class=\"nv\">error</span><span class=\"w\"> </span><span class=\"nv\">with</span><span class=\"w\"> </span><span class=\"nv\">this</span><span class=\"w\"> </span><span class=\"nv\">desugaring</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"p\">{</span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">resultA</span><span class=\"err\">?</span>\n<span class=\"w\">    </span><span class=\"nv\">y</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">resultB</span><span class=\"err\">?</span>\n<span class=\"w\">    </span><span class=\"nv\">z</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">resultC</span><span class=\"err\">?</span>\n<span class=\"w\">    </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nv\">a</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">b</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">c</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">z</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"err\">?</span>\n</code></pre></div>\n<p>I think the second desugaring is more useful.</p>",
        "id": 462262729,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723611551
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> can you move this to another thread? This is useful discussion, but I don't want to distract from this thread's purpose. I'd do it myself, but I don't have the right perms</p>",
        "id": 462263549,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1723611784
    },
    {
        "content": "<p>So the reason why I think the second proposed behavior is wrong is because it doesn't map onto my understanding of how ? works in Rust, which is how I assume Roc intends to work. In Rust, ? returns errors to the top of the function no matter how many blocks nested you're in. The only thing that breaks this is nested closures, which are their own functions, anyway</p>",
        "id": 462264284,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1723612015
    },
    {
        "content": "<p>For sure, it definitely differs from rust. That said, I think it matches <code>!</code> today. Which is probably why I expect some differences.</p>",
        "id": 462264426,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723612095
    },
    {
        "content": "<p>Meaning that</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"p\">{</span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">resultA</span><span class=\"err\">?</span>\n<span class=\"w\">    </span><span class=\"nv\">y</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">resultB</span><span class=\"err\">?</span>\n<span class=\"w\">    </span><span class=\"nv\">z</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">resultC</span><span class=\"err\">?</span>\n<span class=\"w\">    </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nv\">a</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">b</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">c</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">z</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"err\">?</span>\n</code></pre></div>\n<p>would already have <code>x</code>, <code>y</code>, and <code>z</code> extracted from their results, not only within the scope of the record literal's block</p>",
        "id": 462264429,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1723612096
    },
    {
        "content": "<p>Okay, if this is how ! works today, I'm good with that</p>",
        "id": 462264439,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1723612112
    },
    {
        "content": "<p>! and ? should work identically IMO anyway</p>",
        "id": 462264455,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1723612131
    },
    {
        "content": "<p>I'll have to double check the impl for !, then</p>",
        "id": 462264496,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1723612181
    },
    {
        "content": "<p>Note, I'm not actually sure <code>!</code> works with records at all today. But it definitely works that way if you do something like:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">   </span><span class=\"nv\">y</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">task1</span><span class=\"err\">!</span>\n<span class=\"w\">   </span><span class=\"nv\">z</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">task2</span><span class=\"err\">!</span>\n<span class=\"w\">   </span><span class=\"p\">{</span><span class=\"nv\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">z</span><span class=\"p\">}</span>\n</code></pre></div>\n<p>In this case, <code>x</code> will be a <code>Task</code>. The outer function is not required to be a task.</p>",
        "id": 462264524,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723612202
    },
    {
        "content": "<p>Hmm</p>",
        "id": 462264620,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1723612252
    },
    {
        "content": "<p>Of course with task, in essentially all cases, you will end up merging all task together and aggregating into a single error type.</p>",
        "id": 462264682,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723612294
    },
    {
        "content": "<p>I'd posit that this is not desired, but I think having it return to the top-level function block isn't ideal because then we break how platforms that expect a <code>main : Task I32 _</code> work, since they aren't functions</p>",
        "id": 462264780,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1723612362
    },
    {
        "content": "<p>Yeah, okay, I can see the logic with your above example</p>",
        "id": 462264825,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1723612386
    },
    {
        "content": "<p>Note, the reason it works this way is cause it is super simple sugar:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">   </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">await</span><span class=\"w\"> </span><span class=\"nv\">task1</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">y</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">       </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">await</span><span class=\"w\"> </span><span class=\"nv\">task2</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">z</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">           </span><span class=\"p\">{</span><span class=\"nv\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">z</span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 462264886,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723612417
    },
    {
        "content": "<p>But ideally, you'd not have to write</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"p\">{</span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nv\">a</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">resultA</span><span class=\"err\">?</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">b</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">resultB</span><span class=\"err\">?</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">c</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">resultC</span><span class=\"err\">?</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"err\">?</span>\n</code></pre></div>\n<p>and could instead write</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">map2</span><span class=\"err\">?</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span>\n<span class=\"w\">        </span><span class=\"nv\">a</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">resultA</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">b</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">resultB</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">c</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">resultC</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>and avoid all the duplication of ?</p>",
        "id": 462265000,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1723612498
    },
    {
        "content": "<p>I think  it matches the roc viewpoint of:</p>\n<ol>\n<li>everything is an expression</li>\n<li>there are no early returns (in other words, no ifs without elses)</li>\n</ol>",
        "id": 462265003,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723612500
    },
    {
        "content": "<p>Okay, so that last point...</p>",
        "id": 462265030,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1723612520
    },
    {
        "content": "<p>Doesn't ! work like an early return? Is \"no early returns\" a core principle?</p>",
        "id": 462265065,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1723612558
    },
    {
        "content": "<p>I'm trying to think of the best wording here. Fundamentally, the real principle is there are no ifs without elses.</p>",
        "id": 462265133,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723612597
    },
    {
        "content": "<p>So maybe that is still just</p>\n<ol>\n<li>everything is an expression</li>\n</ol>",
        "id": 462265183,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723612665
    },
    {
        "content": "<p>so you have an <code>if</code> expression that always includes an else. The expression as a whole returns a value, so there is no early return technically.</p>",
        "id": 462265248,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723612697
    },
    {
        "content": "<p>I think allowing early returns is preferable for writing clean code. AFAIK we have a way to use ! in <code>when</code> and <code>if</code> statements so that you don't have to pull out intermediate vars</p>",
        "id": 462265256,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1723612704
    },
    {
        "content": "<p>I'd say that early returns are exactly an <code>if-else</code> statement with sugar</p>",
        "id": 462265278,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1723612735
    },
    {
        "content": "<p>Fair enough. As long as you have an <code>else</code> with a block that includes everything else, that is an early return kinda.</p>",
        "id": 462265318,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723612770
    },
    {
        "content": "<p>If I write </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">parse_data</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Data</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">is_empty</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">Error</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">parse</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>There's an implicit else</p>",
        "id": 462265328,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1723612784
    },
    {
        "content": "<p>But I think the core distinction is that you can't skip any blocks. You have to return through each layer of the expression tree</p>",
        "id": 462265387,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723612809
    },
    {
        "content": "<p>So <code>!</code> inside of an <code>if</code> is not early returning. It is creating a value passed as the result of the <code>if</code>. That value could then be returned, but that is not guaranteed</p>",
        "id": 462265472,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723612864
    },
    {
        "content": "<p>So everything is guaranteed to be isolated to some extent.</p>",
        "id": 462265496,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723612884
    },
    {
        "content": "<p>If I see</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nv\">tons</span><span class=\"w\"> </span><span class=\"kr\">of</span><span class=\"w\"> </span><span class=\"nv\">code</span>\n<span class=\"w\">    </span><span class=\"nv\">finalFn</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">q</span>\n\n<span class=\"nv\">z</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nv\">something</span><span class=\"w\"> </span><span class=\"nv\">with</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"kt\">I</span><span class=\"w\"> </span><span class=\"nv\">guess</span>\n</code></pre></div>\n<p>I know that <code>z</code> is guaranteed to be run. <code>x</code> is capturing the entire expression with all of that tons of code. There are no early returns. If the tons of code includes <code>!</code>, <code>x</code> is a <code>Task</code>. If the tons of code includes <code>?</code>, <code>x</code> is a <code>Result</code>. <code>x</code> may be some other type, but fundamentally, <code>x</code> is the result of some expression and then we are continuing forward.</p>",
        "id": 462265711,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723613045
    },
    {
        "content": "<p>That's what I mean by no early returns.</p>",
        "id": 462265753,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723613081
    },
    {
        "content": "<p>I can understand wanting isolation as a principle, but I think this is valid under the \"everything is an expression\" rule:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kr\">main </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">firstHalf</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">        </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Stdin</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"w\">       </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">withPrefix</span><span class=\"w\"> </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"s\">\"first half: \"</span>\n<span class=\"w\">    </span><span class=\"nv\">secondHalf</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">        </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Stdin</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"w\">       </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">withPrefix</span><span class=\"w\"> </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"s\">\"second half: \"</span>\n\n<span class=\"w\">    </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"s\">\"$(firstHalf) $(secondHalf)\"</span>\n</code></pre></div>\n<p>The problem if this works is that we lose isolation, but we get the convenience of not needing to await <code>firstHalf</code> and <code>secondHalf</code> while running things.</p>",
        "id": 462265827,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1723613150
    },
    {
        "content": "<p>So yes, in our documentation of ! and ?, I think we need to emphasize that we break the mental model of Rust for the sake of maintaining isolation</p>",
        "id": 462265953,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1723613194
    },
    {
        "content": "<p>I would not expect that code to work in Roc. Would need to be:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kr\">main </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">firstHalf</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">        </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Stdin</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"w\">        </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">withPrefix</span><span class=\"w\"> </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"s\">\"first half: \"</span>\n<span class=\"w\">    </span><span class=\"nv\">secondHalf</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">        </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Stdin</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"w\">        </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">withPrefix</span><span class=\"w\"> </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"s\">\"second half: \"</span>\n\n<span class=\"w\">    </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"s\">\"$(firstHalf!) $(secondHalf!)\"</span>\n</code></pre></div>",
        "id": 462265988,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723613240
    },
    {
        "content": "<p>Unless the thing we both seem to agree on (the current behavior is good and should be kept) is actually bad and needs to be made to follow Rust</p>",
        "id": 462265990,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1723613241
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/395097-compiler-development/topic/Record.20mapping.20and.20.3F/near/462265988\">said</a>:</p>\n<blockquote>\n<p>I would not expect that code to work in Roc. Would need to be:</p>\n<p><div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kr\">main </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">firstHalf</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">        </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Stdin</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"w\">       </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">withPrefix</span><span class=\"w\"> </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"s\">\"first half: \"</span>\n<span class=\"w\">    </span><span class=\"nv\">secondHalf</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">        </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Stdin</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"w\">       </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">withPrefix</span><span class=\"w\"> </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"s\">\"second half: \"</span>\n\n<span class=\"w\">    </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"s\">\"$(firstHalf!) $(secondHalf!)\"</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Yes, it wouldn't work with current rules, only if we changed Roc to work like Rust</p>",
        "id": 462266008,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1723613269
    },
    {
        "content": "<p>yep</p>",
        "id": 462266016,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723613277
    },
    {
        "content": "<p>But yeah, we definitely could change <code>!</code> desugaring to make that work.</p>",
        "id": 462266156,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723613387
    },
    {
        "content": "<p>It is kinda jumping up an extra scope, but that might be ok</p>",
        "id": 462266217,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723613408
    },
    {
        "content": "<p>No, unless it's really annoying to people, I prefer the isolation we get to the scope level. I think it will be really annoying to have it work the other way</p>",
        "id": 462266450,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1723613561
    },
    {
        "content": "<p>I think this just requires documentation in the tutorial</p>",
        "id": 462266461,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1723613572
    },
    {
        "content": "<p>This is definitely one of those things where working through the journey of how roc got to <code>!</code> makes the isolation feel totally normal, but obvious that is now how new users will feel. From nested closures to backpassing to <code>!</code>.</p>",
        "id": 462266523,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723613639
    },
    {
        "content": "<p>I wonder what the best way to teach this is.</p>",
        "id": 462266579,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723613662
    },
    {
        "content": "<p>Makes me also think of:</p>\n<div class=\"codehilite\"><pre><span></span><code>input = Stdin.line {}\n    |&gt; Task.mapErr! StdinErr\n</code></pre></div>\n<p>When I first saw that I was super confused. <code>!</code> felt like it was in a nonsensical place</p>",
        "id": 462266632,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723613724
    },
    {
        "content": "<p>Yeah, great similar example to bring up</p>",
        "id": 462266658,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1723613743
    },
    {
        "content": "<p>Makes perfect sense as a simple design choice once you get it</p>",
        "id": 462266671,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1723613760
    },
    {
        "content": "<p>It feels like watching Arrival haha</p>",
        "id": 462266718,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1723613767
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/stream/395097-compiler-development/topic/Record.20mapping.20and.20.3F/near/462265278\">said</a>:</p>\n<blockquote>\n<p>I'd say that early returns are exactly an <code>if-else</code> statement with sugar</p>\n</blockquote>\n<p>in Roc this is true (although in other languages it's more complicated because of things like <code>finally</code>) - we've never talked about <code>return</code> as an idea! Do you want to start a thread in <a class=\"stream\" data-stream-id=\"304641\" href=\"/#narrow/stream/304641-ideas\">#ideas</a> about it?</p>",
        "id": 462327548,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1723636008
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/395097-compiler-development/topic/Record.20mapping.20and.20.3F/near/462262183\">said</a>:</p>\n<blockquote>\n<p>I guess it is the same as:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">{</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">a</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">resultA</span><span class=\"o\">?</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">b</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">resultB</span><span class=\"o\">?</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">c</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">resultC</span><span class=\"o\">?</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"o\">?</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>an argument for not requiring the <code>}?</code> is that (as Sam noted earlier) you can already get that behavior using record builders:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"p\">.</span><span class=\"n\">map2</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span>\n<span class=\"w\">        </span><span class=\"n\">a</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">resultA</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">b</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">resultB</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">c</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">resultC</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"o\">?</span>\n</code></pre></div>",
        "id": 462339422,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1723640020
    },
    {
        "content": "<p>and I definitely agree that <code>!</code> and <code>?</code> should have the same rules</p>",
        "id": 462339474,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1723640040
    },
    {
        "content": "<p>using <code>!</code> with records seems much more common, and there I think we wouldn't want <code>}!</code> - e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Perl\"><pre><span></span><code><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">username:</span><span class=\"w\"> </span><span class=\"n\">readUsernameFromFile</span><span class=\"o\">!</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">posts:</span><span class=\"w\"> </span><span class=\"n\">getPostsFromUrl</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">url</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 462339698,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1723640120
    },
    {
        "content": "<p>I don't think anyone would expect to have to write that as:</p>\n<div class=\"codehilite\" data-code-language=\"Perl\"><pre><span></span><code><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">username:</span><span class=\"w\"> </span><span class=\"n\">readUsernameFromFile</span><span class=\"o\">!</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">posts:</span><span class=\"w\"> </span><span class=\"n\">getPostsFromUrl</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">url</span><span class=\"p\">,</span>\n<span class=\"p\">}</span><span class=\"o\">!</span>\n</code></pre></div>",
        "id": 462339760,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1723640144
    },
    {
        "content": "<p>Fair. This is mostly a question of what counts as a nested expression.</p>\n<p>As mentioned by Sam above, we could also make this work if we wanted:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kr\">main </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">firstHalf</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">        </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Stdin</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"w\">        </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">withPrefix</span><span class=\"w\"> </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"s\">\"first half: \"</span>\n<span class=\"w\">    </span><span class=\"nv\">secondHalf</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">        </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Stdin</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"w\">        </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">withPrefix</span><span class=\"w\"> </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"s\">\"second half: \"</span>\n\n<span class=\"w\">    </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"s\">\"$(firstHalf) $(secondHalf)\"</span>\n</code></pre></div>",
        "id": 462370156,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723649617
    },
    {
        "content": "<p>We just have to make the rules consistent enough that we don't confuse users too much</p>",
        "id": 462370310,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723649653
    },
    {
        "content": "<p>Also, going a step farther, what about this:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">tasks</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nv\">userTask</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nv\">username</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">readUsernameFromFile</span><span class=\"err\">!</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">posts</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">getPostsFromUrl</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"nv\">url</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"nv\">adminTask</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nv\">username</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">readUsernameFromFile</span><span class=\"err\">!</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">posts</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">getPostsFromUrl</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"nv\">url</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">secretStuff</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">readSecretAdminOnlyStuff</span><span class=\"err\">!</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">user</span><span class=\"nf\">.</span><span class=\"nv\">isAdmin</span><span class=\"w\"> </span><span class=\"nf\">...</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"nv\">username</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">posts</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">secretStuff</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">tasks</span><span class=\"nf\">.</span><span class=\"nv\">adminTask</span><span class=\"err\">!</span>\n<span class=\"w\">    </span><span class=\"nf\">...</span>\n<span class=\"kr\">else</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"nv\">username</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">posts</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">tasks</span><span class=\"nf\">.</span><span class=\"nv\">userTask</span><span class=\"err\">!</span>\n<span class=\"w\">    </span><span class=\"nf\">...</span>\n</code></pre></div>",
        "id": 462370927,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723649859
    },
    {
        "content": "<blockquote>\n<p>we could also make this work if we wanted:</p>\n</blockquote>\n<p>Yeah, I've hit that one a couple times as well. I think if that does not work it will be confusing for users who don't deeply understand ! desugaring</p>",
        "id": 462373783,
        "sender_full_name": "Anton",
        "timestamp": 1723650569
    },
    {
        "content": "<p>so the idea there would be that we automatically insert <code>Task.ok</code> at the end of the expression?</p>",
        "id": 462385587,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1723654808
    },
    {
        "content": "<p>if so, I can see that being useful but also potentially confusing in conditionals, e.g. this wouldn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">foo</span><span class=\"w\"> </span><span class=\"ow\">=</span>\n<span class=\"w\">    </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"n\">blah</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"w\">        </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">Stdin</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"w\">        </span><span class=\"kt\">Str</span><span class=\"o\">.</span><span class=\"n\">withPrefix</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"s\">\"first half: \"</span>\n<span class=\"w\">    </span><span class=\"kr\">else</span>\n<span class=\"w\">        </span><span class=\"s\">\"stuff\"</span>\n</code></pre></div>",
        "id": 462385878,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1723654923
    },
    {
        "content": "<p>because it would have to be <code>Task.ok \"stuff\"</code> since the sugar wouldn't expand to the <code>else</code> branch</p>",
        "id": 462385923,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1723654944
    },
    {
        "content": "<p>we could potentially make the rule be that if there's a <code>!</code> in one branch, we treat all the other branches as having a <code>!</code> too <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 462386001,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1723654986
    },
    {
        "content": "<p>and on those grounds apply the transformation to all of them</p>",
        "id": 462386019,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1723654993
    },
    {
        "content": "<p>That sounds reasonable</p>",
        "id": 462388073,
        "sender_full_name": "Anton",
        "timestamp": 1723655816
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/395097-compiler-development/topic/Record.20mapping.20and.20.3F/near/462385587\">said</a>:</p>\n<blockquote>\n<p>so the idea there would be that we automatically insert <code>Task.ok</code> at the end of the expression?</p>\n</blockquote>\n<p>I just realized a cool thing about this idea:</p>\n<ul>\n<li>this is a syntax sugar transformation, so it doesn't know about types</li>\n<li>therefore, if it <em>always</em> inserts a <code>Task.ok</code> at the end, that will be a problem if you already happened to have a <code>Task</code> at the end, because it would become a <code>Task (Task ...) ...</code> - which isn't what you want</li>\n<li>we could fix this by saying \"if the last thing is a task, put a <code>!</code> on it and we won't add the <code>Task.ok</code>\"</li>\n<li>I would actually consider this an improvement over the status quo, because currently the rule is \"trailing <code>!</code> is optional but doesn't do anything, but it's encouraged, although <code>roc format</code> can't enforce it one way or the other\" - and in this world, you would actually <em>have</em> to use trailing <code>!</code> when you want to return a <code>Task</code> because otherwise you'd get a type mismatch</li>\n</ul>",
        "id": 462437690,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1723681082
    },
    {
        "content": "<p>so it would eliminate the unnecessary (and unintentional, but currently unavoidable) stylistic option there</p>",
        "id": 462437760,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1723681101
    },
    {
        "content": "<p>and make the style more consistent!</p>",
        "id": 462437784,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1723681110
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/395097-compiler-development/topic/Record.20mapping.20and.20.3F/near/462385587\">said</a>:</p>\n<blockquote>\n<p>so the idea there would be that we automatically insert <code>Task.ok</code> at the end of the expression?</p>\n</blockquote>\n<p>I don't think that was the idea. I think the idea was that <code>!</code> would desugar to the outer scope.</p>",
        "id": 462440097,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723681984
    },
    {
        "content": "<p>hm, I don't follow <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 462449047,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1723686666
    },
    {
        "content": "<p>Essentially, the question was, should this code:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kr\">main </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">firstHalf</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">        </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Stdin</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"w\">        </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">withPrefix</span><span class=\"w\"> </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"s\">\"first half: \"</span>\n<span class=\"w\">    </span><span class=\"nv\">secondHalf</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">        </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Stdin</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"w\">        </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">withPrefix</span><span class=\"w\"> </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"s\">\"second half: \"</span>\n\n<span class=\"w\">    </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"s\">\"$(firstHalf) $(secondHalf)\"</span>\n</code></pre></div>\n<p>do the same as this code?</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kr\">main </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">input0</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Stdin</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"w\">    </span><span class=\"nv\">firstHalf</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">        </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">withPrefix</span><span class=\"w\"> </span><span class=\"nv\">input0</span><span class=\"w\"> </span><span class=\"s\">\"first half: \"</span>\n<span class=\"w\">    </span><span class=\"nv\">input1</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Stdin</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"w\">    </span><span class=\"nv\">secondHalf</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">        </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">withPrefix</span><span class=\"w\"> </span><span class=\"nv\">input1</span><span class=\"w\"> </span><span class=\"s\">\"second half: \"</span>\n\n<span class=\"w\">    </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"s\">\"$(firstHalf) $(secondHalf)\"</span>\n</code></pre></div>",
        "id": 462451607,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723687865
    },
    {
        "content": "<p>Many beginners expect those two pieces of code to be equivalent. It also is more similar to how <code>?</code> works in rust.</p>",
        "id": 462451661,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723687914
    },
    {
        "content": "<p>hm, I don't think beginners would write the first thing though <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 462455263,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1723690222
    },
    {
        "content": "<p>so that seems moot in this case, although maybe there's another case where it might come up?</p>",
        "id": 462455298,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1723690246
    },
    {
        "content": "<p>I would assume similar cases exist. That said, I think where a beginner is most likely to trip up would be related to conditionals and the trailing Task.ok. so your idea above seems helpful</p>",
        "id": 462465254,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723694980
    },
    {
        "content": "<p>yeah I think that idea is worth exploring!</p>",
        "id": 462532158,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1723721878
    }
]