[
    {
        "content": "<p>why do we have UB in our test suite?</p>\n<div class=\"codehilite\"><pre><span></span><code>    assert_evals_to!(&quot;Num.shiftRightBy 0b0100_0000u8 12&quot;, 0b0000_0000u8, u8);\n</code></pre></div>",
        "id": 447712480,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1719566446
    },
    {
        "content": "<p>ah this one's even better</p>\n<div class=\"codehilite\"><pre><span></span><code>    // LLVM in release mode returns 0 instead of -1 for some reason\n    if !is_llvm_release_mode {\n        assert_evals_to!(&quot;Num.shiftRightBy 0b1000_0000u8 12&quot;, 0b1111_1111u8, u8);\n    }\n</code></pre></div>\n<p>the anwer is UB: shifting by more bits than the integer has is UB in LLVM</p>",
        "id": 447712665,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1719566479
    },
    {
        "content": "<p>so I guess we need to either wrap those in a conditional that crashes if you give it too many, or do a silent modulo or something?</p>",
        "id": 447756006,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1719578305
    },
    {
        "content": "<p>well to me shifting a u8 by 12 bits has an intuitive interpretation, which is that that should just return 0. So I'd be in favor of making the behavior defined on our end and do some <code>if shift &gt; 8 then 0 else x &gt;&gt; shift</code></p>",
        "id": 447773813,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1719582157
    },
    {
        "content": "<p>that may need to be <code>&gt;= 8</code>  I always forget</p>",
        "id": 447773910,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1719582176
    },
    {
        "content": "<p>Yeah, I think a conditional to generate zero is what we should do here</p>",
        "id": 447795178,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719587041
    },
    {
        "content": "<p>Oh wait, have to be careful though</p>",
        "id": 447795294,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719587068
    },
    {
        "content": "<p>Cause this is the version of shift right that doesn't zero fill</p>",
        "id": 447795343,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719587083
    },
    {
        "content": "<p>It sign extends</p>",
        "id": 447795359,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719587088
    },
    {
        "content": "<p>Really, we probably should redo our bitshift to be based on the number type instead of based on calling the zero fill version of the method or not.</p>",
        "id": 447795642,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719587158
    },
    {
        "content": "<p>But yeah, should 100% make it deterministic.....</p>\n<p>Real question is, should a sign extending bit shift ever return zero for a negative number. Cause <code>-1</code> is <code>0b1111_1111</code>....which if you imagine shifting right by one with the sign extending, is still <code>0b1111_1111</code></p>",
        "id": 447796607,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719587395
    },
    {
        "content": "<p>I think that's what happening in the ub example above at least for non-release.....</p>",
        "id": 447796821,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719587438
    },
    {
        "content": "<p>Yeah, reading into this more online, I think the reasonably sane, but also strange answer is that signed shifting with too many bits on a negative number should become -1 and on a positive number should become 0.</p>\n<p>Zero fill/logical/unsigned shifting should become zero if over shifted.</p>",
        "id": 447798767,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719587934
    },
    {
        "content": "<p>Basically, in both cases, you should be able to just do a max with the bitwidth - 1 and shift. That should give the correct right shift answer.</p>",
        "id": 447799154,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719588024
    },
    {
        "content": "<p>Wikipedia also has a good quote on this:</p>\n<blockquote>\n<p>Shifting right by n bits on a two's complement signed binary number has the effect of dividing it by 2n, but it always rounds down (towards negative infinity). This is different from the way rounding is usually done in signed integer division (which rounds towards 0). This discrepancy has led to bugs in a number of compilers.</p>\n</blockquote>",
        "id": 447799472,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719588106
    },
    {
        "content": "<p>Personally, this is where I love zigs solution the most. Don't allow too large of a number by forcing the user to convert to the correct integer bit width. U3 for this shift</p>",
        "id": 447800469,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719588358
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/395097-compiler-development/topic/avoiding.20UB.20in.20bit.20shifts/near/447799154\">said</a>:</p>\n<blockquote>\n<p>Basically, in both cases, you should be able to just do a max with the bitwidth - 1 and shift. That should give the correct right shift answer.</p>\n</blockquote>\n<p>for shifting right that works I think. for shifting left you need to explicitly return 0 when shifting too far I think</p>",
        "id": 447801677,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1719588609
    },
    {
        "content": "<p>because <code>1 &lt;&lt; 7</code> is 128, not 0 which I'd expect for <code>1 &lt;&lt; 42</code> for instance</p>",
        "id": 447801788,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1719588632
    },
    {
        "content": "<p>Ah yeah, for right shifts</p>",
        "id": 447802177,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719588709
    }
]