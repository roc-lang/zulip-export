[
    {
        "content": "<p>should <code>3.4 + .8</code> be a valid roc expression? (issue <a href=\"https://github.com/roc-lang/roc/issues/5798\">https://github.com/roc-lang/roc/issues/5798</a>)</p>\n<p>now that we have tuples this is actually kind of weird. but maybe we need some custom error if a tuple accessor is used as a number?</p>",
        "id": 418534073,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706474363
    },
    {
        "content": "<p>I think ideally it should be a warning</p>",
        "id": 418534429,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1706474688
    },
    {
        "content": "<p>like \"we figured out what you meant, but you should really put a zero on there\"</p>",
        "id": 418534444,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1706474701
    },
    {
        "content": "<p>alternatively we could do something like how standalone tags can be considered both functions and also non-functions</p>",
        "id": 418534485,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1706474740
    },
    {
        "content": "<p>actually maybe that's the best design, and then have <code>roc format</code> quietly add a zero for you? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 418534550,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1706474766
    },
    {
        "content": "<p>I like the idea of having roc format add a 0</p>",
        "id": 418537206,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1706477244
    },
    {
        "content": "<p>I would also be happy if <code>.8</code> was just not valid syntax for a number and you always had to insert a leading zero</p>",
        "id": 418537247,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1706477282
    },
    {
        "content": "<p>I like <code>.8</code> as a warning. I wonder though if there is any risk they meant to write something like <code>a.8</code> or something so maybe format silently doing that would be a bad idea?</p>",
        "id": 418538338,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1706478269
    },
    {
        "content": "<p>The format would also have to be aware that <code>(a, b) |&gt; .1</code> is valid</p>",
        "id": 418543797,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1706483417
    },
    {
        "content": "<p>Which circles back to Folkert's original point, I just don't know if the formatter has access to that context</p>",
        "id": 418543843,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1706483496
    },
    {
        "content": "<p>it would not I think. you really need type inference</p>",
        "id": 418543899,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706483537
    },
    {
        "content": "<p>Requiring a leading digit seems to be the simplest solution</p>",
        "id": 418606089,
        "sender_full_name": "Anton",
        "timestamp": 1706524098
    },
    {
        "content": "<p>Right, but to expand on some of what was said above: <code>.0</code> is valid syntax for a function that accesses the first element of a tuple. And <code>.1</code> accesses the second element, etc.<br>\nSo to generate a good error message, we need type checking. If a record access function fits at this location, we don't want to show an error about the leading <code>0</code>, because that doesn't make sense. But if a fractional number fits the types , we do.</p>",
        "id": 418703492,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1706555881
    }
]