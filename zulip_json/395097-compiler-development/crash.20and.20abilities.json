[
    {
        "content": "<p>I guess you can't always use crash and put in a todo when abilities are involved:</p>\n<div class=\"codehilite\"><pre><span></span><code>── TYPE MISMATCH in MsgPack.roc ────────────────────────────────────────────────\n\nThis specialization of i16 is overly general:\n\n55│  encodeI16 = \\_ -&gt; crash &quot;todo&quot;\n     ^^^^^^^^^\n\nThis value is a declared specialization of type:\n\n    * -&gt; *\n\nBut the type annotation on i16 says it must match:\n\n    I16 -&gt;\n    FutureEncode.FutureEncoder state where state implements FutureEncode.FutureEncoderFormatting\n\nNote: The specialized type is too general, and does not provide a\nconcrete type where a type variable is bound to an ability.\n\nSpecializations can only be made for concrete types. If you have a\ngeneric implementation for this value, perhaps you don&#39;t need an\nability?\n\nTip: Type comparisons between an opaque type are only ever equal if\nboth types are the same opaque type. Did you mean to create an opaque\ntype by wrapping it? If I have an opaque type Age := U32 I can create\nan instance of this opaque type by doing @Age 23.\n</code></pre></div>",
        "id": 450020261,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720487143
    },
    {
        "content": "<p>hm yeah I'm not sure if that's avoidable <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 450021348,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1720487542
    },
    {
        "content": "<p>Luckily, roc is happy turning function prototypes into runtime errors:</p>\n<div class=\"codehilite\"><pre><span></span><code>encodeI16 : I16 -&gt; FutureEncoder MsgPack\n\n# No definition\n</code></pre></div>",
        "id": 450022669,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720488231
    },
    {
        "content": "<p>ha, nice!</p>",
        "id": 450022759,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1720488267
    },
    {
        "content": "<p>Trying to make sure that my gist on the new encoders is correct</p>",
        "id": 450022800,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720488304
    },
    {
        "content": "<p>hm, if that's the case, I'm kinda surprised it accepts one but not the other <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 450022806,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1720488307
    },
    {
        "content": "<p>Yeah, probably should be printing out a warning with taht</p>",
        "id": 450022828,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720488326
    },
    {
        "content": "<p>it's probably a bug that it just emits a runtime error and no warning</p>",
        "id": 450022846,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720488339
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> might know why this works <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 450022858,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1720488350
    },
    {
        "content": "<p>I guess it's because in the annotated version it's a less general type</p>",
        "id": 450022935,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1720488374
    },
    {
        "content": "<p>but it's still surprising to me that it works</p>",
        "id": 450022957,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1720488394
    },
    {
        "content": "<p>yes, that's why</p>",
        "id": 450063100,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1720501400
    },
    {
        "content": "<p>the annotation forces the type</p>",
        "id": 450063109,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1720501409
    }
]