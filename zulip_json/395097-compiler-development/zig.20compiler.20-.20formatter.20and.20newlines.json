[
    {
        "content": "<p>in the formatter we take care to make multiline things be multiline and single-line things stay single-line. I like this behavior and want to keep it; it's something I always miss with tools like rustfmt that make all newline decisions for me</p>",
        "id": 499970276,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739672737
    },
    {
        "content": "<p>but I don't like how the Rust compiler represents newline info using parse IR nodes</p>",
        "id": 499970337,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739672773
    },
    {
        "content": "<p>it didn't turn out to be nice to work with</p>",
        "id": 499970344,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739672782
    },
    {
        "content": "<p>I think a simpler design would be to scan source ranges for newlines</p>",
        "id": 499970360,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739672805
    },
    {
        "content": "<p>My thinking has always been to not have newlines/comments as part of the AST (and maybe not even in the token stream, now).</p>",
        "id": 499970485,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739672929
    },
    {
        "content": "<p>The formatter looks at the AST, sees a token id for the thing it's trying to format, then goes and looks in the source for the newlines/comments (if any) that came between that token and the one before.</p>",
        "id": 499970512,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739672974
    },
    {
        "content": "<p>sounds good!</p>",
        "id": 499970520,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739672988
    },
    {
        "content": "<p>also I think we can do the same in the parser for checking to see if tokens have a whitespace gap between them or not</p>",
        "id": 499970596,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739673040
    },
    {
        "content": "<p>My thinking is to have the parser never need to look at the underlying source</p>",
        "id": 499970627,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739673076
    },
    {
        "content": "<p>and that strategy works with source ranges being either in line/col or start byte/length</p>",
        "id": 499970635,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739673094
    },
    {
        "content": "<p>yeah it shouldn't need to - the ranges should be enough</p>",
        "id": 499970641,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739673107
    },
    {
        "content": "<p>Ahh I see - comparing the end byte of the last token to the start byte of this token</p>",
        "id": 499970698,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739673135
    },
    {
        "content": "<p>like if I see a <code>?</code> token and the preceding token has a source range that ends right in front of it</p>",
        "id": 499970700,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739673138
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 499970701,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739673138
    },
    {
        "content": "<p>then we know there's no gap</p>",
        "id": 499970705,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739673145
    },
    {
        "content": "<p>My current approach has been to explicitly put that data into the token stream, where it's needed</p>",
        "id": 499970719,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739673170
    },
    {
        "content": "<p>and we don't even need to keep around all token source ranges to do that</p>",
        "id": 499970723,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739673173
    },
    {
        "content": "<p>just the previous one and the current one</p>",
        "id": 499970729,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739673178
    },
    {
        "content": "<p>So e.g. there's OpenRound and NoSpaceOpenRound</p>",
        "id": 499970730,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739673179
    },
    {
        "content": "<p>ah so lookahead 1 byte?</p>",
        "id": 499970746,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739673197
    },
    {
        "content": "<p>For that case we do lookbehind, but same idea</p>",
        "id": 499970763,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739673217
    },
    {
        "content": "<p>gotcha, that works too!</p>",
        "id": 499970770,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739673232
    },
    {
        "content": "<p>do you think the formatter can get away with just looking at tokens?</p>",
        "id": 499970816,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739673260
    },
    {
        "content": "<p>I'd assume it would need parse IR but maybe not</p>",
        "id": 499970823,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739673272
    },
    {
        "content": "<p>We're a lot closer with braces syntax than without</p>",
        "id": 499971552,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739674003
    },
    {
        "content": "<p>Ultimately I think there are going to be cases that are annoying to handle without looking at the parse IR</p>",
        "id": 499971567,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739674032
    },
    {
        "content": "<p>(which, side node, it's an AST; let's just call it that - we have too many IRs for IR to mean something useful)</p>",
        "id": 499971588,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739674063
    },
    {
        "content": "<p>Anyway</p>",
        "id": 499971593,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739674081
    },
    {
        "content": "<p>It would be interesting to _explore_ whether the formatter could look just at the token stream. I'm betting there will be cases that make that difficult, where we'd essentially be re-implementing significant parts of the parser to run during formatting.</p>",
        "id": 499971764,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739674245
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453336\">Joshua Warner</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20formatter.20and.20newlines/near/499971764\">said</a>:</p>\n<blockquote>\n<p>It would be interesting to _explore_ whether the formatter could look just at the token stream. I'm betting there will be cases that make that difficult, where we'd essentially be re-implementing significant parts of the parser to run during formatting.</p>\n</blockquote>\n<p>This is my actual plan...</p>",
        "id": 500759482,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740006038
    },
    {
        "content": "<p>for what it's worth, I think we can simplify how the formatter thinks about newlines to just:</p>\n<ul>\n<li>it cares about preserving blank lines (that is, lines containing zero non-whitespace characters) and collapses consecutive blank lines into one</li>\n<li>it otherwise ignores newlines</li>\n</ul>",
        "id": 502101407,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740590187
    },
    {
        "content": "<p>I think this because of the \"trailing commas mean render multiline, and no trailing comma means don't\" design in conjunction with parens-and-commas</p>",
        "id": 502101603,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740590250
    },
    {
        "content": "<p>if we want a multiline function application, we can do a trailing comma to indicate multiline mode (and unlike whitespace application, the case of \"have the first arg on the same line but everything else is on a different line\" would look weird and I don't think should be supported anymore)</p>",
        "id": 502101780,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740590291
    },
    {
        "content": "<p>this makes me wonder if we should try just having the formatter manage blank lines automatically</p>",
        "id": 502101861,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740590326
    },
    {
        "content": "<p>like it just has a rule for where they do and don't go, and it puts them in accordingly</p>",
        "id": 502101910,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740590344
    },
    {
        "content": "<p>it might be annoying (I'm not sure), but at that point the only user-configurable aspect of whitespace is \"does this comma-separated thing render in single-line or multiline mode?\" and that is determined entirely by whether it has a trailing comma or not</p>",
        "id": 502101997,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740590382
    },
    {
        "content": "<p>kinda seems worth trying to me, just to see how it feels in practice?</p>",
        "id": 502102149,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740590420
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20formatter.20and.20newlines/near/502101861\">said</a>:</p>\n<blockquote>\n<p>this makes me wonder if we should try just having the formatter manage blank lines automatically</p>\n</blockquote>\n<p>I feel very strongly about my blank lines and use them significantly more than the average dev :p</p>",
        "id": 502103442,
        "sender_full_name": "Anton",
        "timestamp": 1740590809
    },
    {
        "content": "<p>I also feel as Anton does, and I believe so does <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span></p>",
        "id": 502108850,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740592414
    },
    {
        "content": "<p>Though there are some places that I think we should consider removing them that I mentioned to Luke but never firmed up enough to make a discussion about</p>",
        "id": 502109013,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740592459
    },
    {
        "content": "<p>The main one being newlines between a functions args and the first line of its body</p>",
        "id": 502109114,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740592495
    },
    {
        "content": "<p>Which now could be simplified to the rule \"no blank newlines between an opening curly brace and its body's first line\"</p>",
        "id": 502109273,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740592544
    },
    {
        "content": "<p>And maybe \"always add a newline above the return expression of a function unless the body has only one expression\"</p>",
        "id": 502109499,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740592612
    },
    {
        "content": "<p>But that one is tricky, like what about if your function ends with some <code>Stdout.line</code> calls, those aren't normal \"I'm returning something useful\" lines</p>",
        "id": 502109714,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740592670
    },
    {
        "content": "<p>I feel like if you have more then 2 blank lines they definitely should be colapsed</p>",
        "id": 502112397,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740593454
    },
    {
        "content": "<p>If you really want them....add comments</p>",
        "id": 502112421,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740593462
    },
    {
        "content": "<p>I totally see the general argument for 2 blank lines between important things for visual separation</p>",
        "id": 502112480,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740593486
    },
    {
        "content": "<p>That said, I think the formatter should manage blank lines. (Again, comments are the way to complete freedom)</p>",
        "id": 502112570,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740593521
    },
    {
        "content": "<p>If I were to write the rule it would probably 1 or 2 blank lines allowed between top levels.</p>\n<p>1 or 0 blank lines between other things.</p>\n<p>No blank lines after open brackets or before closing brackets.</p>",
        "id": 502113138,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740593699
    },
    {
        "content": "<p>Hmm...though for top level single line expression zero blank lines can be nice (like a block of constants)</p>",
        "id": 502113267,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740593748
    },
    {
        "content": "<p>What Richard described was basically what I was going to do</p>",
        "id": 502120972,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740596121
    }
]