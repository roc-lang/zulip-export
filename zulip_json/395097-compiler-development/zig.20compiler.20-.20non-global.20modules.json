[
    {
        "content": "<p>I don't think this is written down anywhere, so I wanted to write it down here!</p>",
        "id": 501220752,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740194061
    },
    {
        "content": "<p>I think we've talked in other threads about how:</p>\n<ul>\n<li>we can't type-check a module until the other modules it imports have been type-checked</li>\n<li>this is because essentially what we do to type-check imports is that we take the exposed types from the other modules and turn them into \"type annotations on the imports\" and then proceed from there</li>\n<li>obviously we can't know what the annotations should be until the other modules have finished type-checking!</li>\n</ul>",
        "id": 501220888,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740194184
    },
    {
        "content": "<p>however, this is not completely true</p>",
        "id": 501220895,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740194191
    },
    {
        "content": "<p>really, type-checking our module is only blocked on the other module until we have <em>annotations for its exposed types</em></p>",
        "id": 501220911,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740194212
    },
    {
        "content": "<p>one way we can get those is to wait until the other module is done being type-checked</p>",
        "id": 501220916,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740194224
    },
    {
        "content": "<p>however, it's also true that if the other module happens to have full type annotations (with no <code>_</code> in them) for every single one of its exposed values, then we don't need to actually type-check that module to be able to annotate its imports - because we can basically just copy/paste the annotations it explicitly wrote down!</p>",
        "id": 501220953,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740194275
    },
    {
        "content": "<p>obviously the other module still needs to be type-checked eventually in order to confirm that its types agree with one another internally, but that type-checking can be done in parallel with type-checking the module that imports them</p>",
        "id": 501221024,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740194320
    },
    {
        "content": "<p>so essentially, any module where every exposed value has a type annotation with no <code>_</code> in it is a \"non-global module\" in that it doesn't require global type inference in order to have fully-annotated exposed types</p>",
        "id": 501221076,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740194374
    },
    {
        "content": "<p>this distinction doesn't matter until we're actually doing parallelization, but once we are, I suspect it allows for a good deal more parallelization in practice</p>",
        "id": 501221176,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740194440
    },
    {
        "content": "<p>actually it might have caching implications too, come to think of it <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 501221230,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740194488
    },
    {
        "content": "<p>because if I'm one of these non-global modules, and a module I import changes its types...<em>I</em> need to have my type-checking redone, but nobody who imports me does</p>",
        "id": 501221282,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740194523
    },
    {
        "content": "<p>because my exposed types haven't changed</p>",
        "id": 501221299,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740194530
    },
    {
        "content": "<p>they're still the same annotations as before</p>",
        "id": 501221311,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740194537
    },
    {
        "content": "<p>anyway, this seems like something we should definitely try at some point, because it should be cheap to check, and in large code bases it will probably apply to 100% of modules in practice</p>",
        "id": 501221365,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740194616
    },
    {
        "content": "<p>Especially with the <code>roc format annotate</code> action, all exposed values should be annotated in healthy codebases</p>",
        "id": 501221429,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740194667
    }
]