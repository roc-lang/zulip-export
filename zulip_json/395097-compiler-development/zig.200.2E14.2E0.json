[
    {
        "content": "<p><a href=\"https://ziglang.org/download/0.14.0/release-notes.html\">https://ziglang.org/download/0.14.0/release-notes.html</a></p>",
        "id": 503495965,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1741176749
    },
    {
        "content": "<p>Roc gets a mention in the LLVM Builder API <a href=\"https://ziglang.org/download/0.14.0/release-notes.html#LLVM-Builder-API\">https://ziglang.org/download/0.14.0/release-notes.html#LLVM-Builder-API</a></p>\n<p>Big thanks to the Zig team for this <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span></p>",
        "id": 503496739,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1741176981
    },
    {
        "content": "<p>I started looking at zig 0.14.0. Looks like it should mostly be a minor update. Here is the starter list of minor complaints. I think a number of the issues can be fixed on main before even updating to 0.14.0. For example, all of the naming conflicts:</p>\n<div class=\"codehilite\"><pre><span></span><code>src/base.zig:40:5: error: duplicate union member name &#39;Int&#39;\n    Int: Int,\n    ^~~\nsrc/base.zig:48:15: note: duplicate name here\n    pub const Int = union(enum) {\n              ^~~\nsrc/base.zig:39:21: note: union declared here\npub const Literal = union(enum) {\n                    ^~~~~\nsrc/base.zig:41:5: error: duplicate union member name &#39;Float&#39;\n    Float: Float,\n    ^~~~~\nsrc/base.zig:62:15: note: duplicate name here\n    pub const Float = union(enum) {\n              ^~~~~\nsrc/base.zig:39:21: note: union declared here\npub const Literal = union(enum) {\n                    ^~~~~\nsrc/types.zig:10:5: error: duplicate union member name &#39;Int&#39;\n    Int: Int,\n    ^~~\nsrc/types.zig:17:15: note: duplicate name here\n    pub const Int = enum {\n              ^~~\nsrc/types.zig:9:23: note: union declared here\npub const Primitive = union(enum) {\n                      ^~~~~\nsrc/types.zig:11:5: error: duplicate union member name &#39;Float&#39;\n    Float: Float,\n    ^~~~~\nsrc/types.zig:30:15: note: duplicate name here\n    pub const Float = enum {\n              ^~~~~\nsrc/types.zig:9:23: note: union declared here\npub const Primitive = union(enum) {\n                      ^~~~~\nsrc/check/parse/IR.zig:1506:28: error: expected type &#39;check.parse.IR.NodeStore.TypeAnnoIdx&#39;, found &#39;check.parse.IR.NodeStore.getTypeAnno__struct_27714&#39;\n                    .ret = ret,\n                           ^~~\nsrc/check/parse/IR.zig:1503:30: note: struct declared here\n                const ret = .{ .id = store.extra_data.items[@as(usize, @intCast(node.main_token))] };\n                            ~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nsrc/check/parse/IR.zig:536:29: note: struct declared here\n    pub const TypeAnnoIdx = struct { id: u32 };\n                            ^~~~~~~~~~~~~~~~~~\nsrc/check/parse/Parser.zig:869:47: error: expected type &#39;check.parse.IR.NodeStore.Body&#39;, found &#39;check.parse.Parser.parseExprWithBp__struct_29141&#39;\n                expr = self.store.addExpr(.{ .block = body });\n                                             ~^~~~~~~~~~~~\nsrc/check/parse/Parser.zig:865:31: note: struct declared here\n                const body = .{\n                             ~^\nsrc/check/parse/IR.zig:1557:22: note: struct declared here\n    pub const Body = struct {\n                     ^~~~~~\nsrc/check/parse/tokenize.zig:810:17: error: switch on type &#39;?check.parse.tokenize.BraceKind&#39;\n        switch (last) {\n                ^~~~\nsrc/snapshot.zig:9:16: error: root source file struct &#39;std&#39; has no member named &#39;rand&#39;\nvar prng = std.rand.DefaultPrng.init(1234567890);\n               ^~~~\n/Users/bren077s/vendor/zig-0.14.0/lib/std/std.zig:1:1: note: struct declared here\npub const ArrayHashMap = array_hash_map.ArrayHashMap;\n</code></pre></div>",
        "id": 504249103,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741421538
    },
    {
        "content": "<p>Also, all deps except for zig-bootstrap (for building the new version of musl llvm) are updated. So I think we technically could update now given nothing actually depends on llvm yet.</p>",
        "id": 504249168,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741421607
    },
    {
        "content": "<p>zig-afl-kit 0.14.0: <a href=\"https://github.com/kristoff-it/zig-afl-kit/tree/zig-0.14.0\">https://github.com/kristoff-it/zig-afl-kit/tree/zig-0.14.0</a></p>",
        "id": 504249189,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741421634
    },
    {
        "content": "<p>Started a draft PR, but am headed to sleep now. Anyone feel free to push fixes to: <a href=\"https://github.com/roc-lang/roc/pull/7679\">https://github.com/roc-lang/roc/pull/7679</a></p>",
        "id": 504249448,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741421862
    },
    {
        "content": "<p>I think for the first set of errors we just nesd to lowercase the struct field name</p>",
        "id": 504252334,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741422674
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"406911\">@Andrew Kelley</span> with the zig 0.14.0 update, is this the expected behaviour and resolution?</p>\n<p>I think it is from <a href=\"https://ziglang.org/download/0.14.0/release-notes.html#toc-Remove-Anonymous-Struct-Types-Unify-Tuples\">Remove Anonymous Struct Types, Unify Tuples</a></p>\n<hr>\n<p>Initial code:</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">.{</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">extra_data</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">[</span><span class=\"nb\">@as</span><span class=\"p\">(</span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">@intCast</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">main_token</span><span class=\"p\">))]</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">.{</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"err\">@</span><span class=\"s\">\"fn\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">.{</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">region</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">emptyRegion</span><span class=\"p\">(),</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">.{</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">.{</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">lhs</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">rhs</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">};</span>\n</code></pre></div>\n<p>Error:</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">check</span><span class=\"o\">/</span><span class=\"n\">parse</span><span class=\"o\">/</span><span class=\"n\">IR</span><span class=\"p\">.</span><span class=\"n\">zig</span><span class=\"o\">:</span><span class=\"mi\">1506</span><span class=\"o\">:</span><span class=\"mi\">28</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"k\">error</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"kt\">type</span><span class=\"w\"> </span><span class=\"err\">'</span><span class=\"n\">check</span><span class=\"p\">.</span><span class=\"n\">parse</span><span class=\"p\">.</span><span class=\"n\">IR</span><span class=\"p\">.</span><span class=\"n\">NodeStore</span><span class=\"p\">.</span><span class=\"n\">TypeAnnoIdx</span><span class=\"err\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"err\">'</span><span class=\"n\">check</span><span class=\"p\">.</span><span class=\"n\">parse</span><span class=\"p\">.</span><span class=\"n\">IR</span><span class=\"p\">.</span><span class=\"n\">NodeStore</span><span class=\"p\">.</span><span class=\"n\">getTypeAnno__struct_26120</span><span class=\"err\">'</span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"p\">,</span>\n<span class=\"w\">                           </span><span class=\"o\">^~~</span>\n<span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">check</span><span class=\"o\">/</span><span class=\"n\">parse</span><span class=\"o\">/</span><span class=\"n\">IR</span><span class=\"p\">.</span><span class=\"n\">zig</span><span class=\"o\">:</span><span class=\"mi\">1503</span><span class=\"o\">:</span><span class=\"mi\">30</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">note</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"n\">declared</span><span class=\"w\"> </span><span class=\"n\">here</span>\n<span class=\"w\">                </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">.{</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">extra_data</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">[</span><span class=\"nb\">@as</span><span class=\"p\">(</span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">@intCast</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">main_token</span><span class=\"p\">))]</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"w\">                            </span><span class=\"o\">~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span>\n<span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">check</span><span class=\"o\">/</span><span class=\"n\">parse</span><span class=\"o\">/</span><span class=\"n\">IR</span><span class=\"p\">.</span><span class=\"n\">zig</span><span class=\"o\">:</span><span class=\"mi\">536</span><span class=\"o\">:</span><span class=\"mi\">29</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">note</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"n\">declared</span><span class=\"w\"> </span><span class=\"n\">here</span>\n<span class=\"w\">    </span><span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">TypeAnnoIdx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">};</span>\n</code></pre></div>\n<p>Solution 1:</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">TypeAnnoIdx</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">extra_data</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">[</span><span class=\"nb\">@as</span><span class=\"p\">(</span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">@intCast</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">main_token</span><span class=\"p\">))]</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">.{</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"err\">@</span><span class=\"s\">\"fn\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">.{</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">region</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">emptyRegion</span><span class=\"p\">(),</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">.{</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">.{</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">lhs</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">rhs</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">};</span>\n</code></pre></div>\n<p>Solution 2:</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">.{</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"err\">@</span><span class=\"s\">\"fn\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">.{</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">region</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">emptyRegion</span><span class=\"p\">(),</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">.{</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">extra_data</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">[</span><span class=\"nb\">@as</span><span class=\"p\">(</span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">@intCast</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">main_token</span><span class=\"p\">))]</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">.{</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">.{</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">lhs</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">rhs</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">};</span>\n</code></pre></div>\n<hr>\n<p>This feels like a regression in type inference. Though maybe this is expected with what is linked above (I'm not sure though). Feels odd that I can't pull a struct field into a separate constant without adding a type.</p>",
        "id": 504304959,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741459417
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> for upgrading us. I just updated everything on my system to 14 and it was a smooth experience. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 504321505,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1741470913
    },
    {
        "content": "<p>It nice having essentially no deps</p>",
        "id": 504321595,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741470964
    },
    {
        "content": "<p>makes updates easy</p>",
        "id": 504321601,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741470970
    },
    {
        "content": "<p>Did they get rid of anonymous struct inference?</p>",
        "id": 504581489,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741613319
    },
    {
        "content": "<p>I've never had a problem with this code before:</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"n\">check</span><span class=\"o\">/</span><span class=\"n\">parse</span><span class=\"o\">/</span><span class=\"n\">IR</span><span class=\"p\">.</span><span class=\"n\">zig</span><span class=\"o\">:</span><span class=\"mi\">1223</span><span class=\"o\">:</span><span class=\"mi\">24</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"k\">error</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"kt\">type</span><span class=\"w\"> </span><span class=\"err\">'</span><span class=\"n\">check</span><span class=\"p\">.</span><span class=\"n\">parse</span><span class=\"p\">.</span><span class=\"n\">IR</span><span class=\"p\">.</span><span class=\"n\">NodeStore</span><span class=\"p\">.</span><span class=\"n\">Statement</span><span class=\"err\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"err\">'</span><span class=\"n\">check</span><span class=\"p\">.</span><span class=\"n\">parse</span><span class=\"p\">.</span><span class=\"n\">IR</span><span class=\"p\">.</span><span class=\"n\">NodeStore</span><span class=\"p\">.</span><span class=\"n\">getStatement__struct_11541</span><span class=\"err\">'</span>\n<span class=\"w\">                </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">imp</span><span class=\"p\">;</span>\n<span class=\"w\">                       </span><span class=\"o\">^~~</span>\n<span class=\"n\">check</span><span class=\"o\">/</span><span class=\"n\">parse</span><span class=\"o\">/</span><span class=\"n\">IR</span><span class=\"p\">.</span><span class=\"n\">zig</span><span class=\"o\">:</span><span class=\"mi\">1222</span><span class=\"o\">:</span><span class=\"mi\">30</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">note</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"n\">declared</span><span class=\"w\"> </span><span class=\"n\">here</span>\n<span class=\"w\">                </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">imp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">.{</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"w\">                            </span><span class=\"o\">~^~~~~~~~~~~~~~~</span>\n<span class=\"n\">check</span><span class=\"o\">/</span><span class=\"n\">parse</span><span class=\"o\">/</span><span class=\"n\">IR</span><span class=\"p\">.</span><span class=\"n\">zig</span><span class=\"o\">:</span><span class=\"mi\">1783</span><span class=\"o\">:</span><span class=\"mi\">27</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">note</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"k\">union</span><span class=\"w\"> </span><span class=\"n\">declared</span><span class=\"w\"> </span><span class=\"n\">here</span>\n<span class=\"w\">    </span><span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">Statement</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">union</span><span class=\"p\">(</span><span class=\"k\">enum</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                          </span><span class=\"o\">^~~~~</span>\n<span class=\"n\">check</span><span class=\"o\">/</span><span class=\"n\">parse</span><span class=\"o\">/</span><span class=\"n\">IR</span><span class=\"p\">.</span><span class=\"n\">zig</span><span class=\"o\">:</span><span class=\"mi\">1184</span><span class=\"o\">:</span><span class=\"mi\">69</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">note</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"kt\">type</span><span class=\"w\"> </span><span class=\"n\">declared</span><span class=\"w\"> </span><span class=\"n\">here</span>\n<span class=\"w\">    </span><span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">getStatement</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">NodeStore</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">statement</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">StatementIdx</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">Statement</span><span class=\"w\"> </span><span class=\"p\">{</span>\n</code></pre></div>",
        "id": 504581579,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741613340
    },
    {
        "content": "<p>I'm not fully sure, but it seems like it. I made a comment about it above. Feels like an accidental bug, but the release notes suggests that they may have made anonymous structs(not defined inline with use) into structural instead of nominal types.</p>",
        "id": 504625418,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741622163
    },
    {
        "content": "<blockquote>\n<p>This change reworks how anonymous struct literals and tuples work.</p>\n<p>Previously, an untyped anonymous struct literal (e.g. <code>const x = .{ .a = 123 }</code>) was given an \"anonymous struct type\", which is a special kind of struct which coerces using structural equivalence. This mechanism was a holdover from before we used <a href=\"https://ziglang.org/documentation/0.14.0/#Result-Location-Semantics\">Result Location Semantics</a> as the primary mechanism of type inference. This change changes the language so that the type assigned here is a \"normal\" struct type. It uses a form of equivalence based on the AST node and the type's structure, much like a reified (@Type) type.</p>\n<p>Additionally, tuples have been simplified. The distinction between \"simple\" and \"complex\" tuple types is eliminated. All tuples, even those explicitly declared using <code>struct { ... }</code> syntax, use structural equivalence, and do not undergo staged type resolution. Tuples are very restricted: they cannot have non-auto layouts, cannot have aligned fields, and cannot have default values with the exception of comptime fields. Tuples currently do not have optimized layout, but this can be changed in the future.</p>\n<p>This change simplifies the language, and fixes some problematic coercions through pointers which led to unintuitive behavior.</p>\n</blockquote>",
        "id": 504626390,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741622331
    },
    {
        "content": "<p>solution 2 looks good</p>",
        "id": 504674525,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1741636233
    },
    {
        "content": "<p>So basically if a struct is anonymous and not assigned to a annotated var, it is giving its own type, so either create it at a usage site where it’s obvious what it’s meant to be?  Otherwise you need to be explicit?</p>",
        "id": 504688481,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741641161
    }
]