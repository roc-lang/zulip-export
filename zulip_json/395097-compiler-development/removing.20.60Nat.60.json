[
    {
        "content": "<p>I did <a href=\"https://github.com/roc-lang/roc/compare/no-nat\">some <code>Nat</code> removals</a> and realized that the implementation <a href=\"https://github.com/roc-lang/roc/blob/main/crates/compiler/builtins/roc/Dict.roc\"><code>Dict</code> uses <code>Nat</code> extensively</a>, including in the record that represents it</p>",
        "id": 397798187,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1697851686
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> if we made the record itself opaque, do you think replacing the remaining usages of <code>Nat</code> in there is feasible?</p>",
        "id": 397798439,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1697851841
    },
    {
        "content": "<p>or should we explore some way of trying to keep <code>Nat</code> around behind the scenes, and only used by <code>Dict.roc</code> internally?</p>",
        "id": 397798461,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1697851862
    },
    {
        "content": "<p>I think the record is already opaque</p>",
        "id": 397798543,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1697851906
    },
    {
        "content": "<p>Should be fine to just change everything to u64 since that is what list indices will use.</p>",
        "id": 397798609,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1697851927
    },
    {
        "content": "<p>er sorry, I mean opaque and implemented behind the scenes, like how <code>List</code> is</p>",
        "id": 397798695,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1697851992
    },
    {
        "content": "<p>like for example, this: <a href=\"https://github.com/roc-lang/roc/blob/cd7a031d09fcd0a2f95cb2933b675028cd0b7730/crates/compiler/builtins/roc/Dict.roc#L92-L111\">https://github.com/roc-lang/roc/blob/cd7a031d09fcd0a2f95cb2933b675028cd0b7730/crates/compiler/builtins/roc/Dict.roc#L92-L111</a> includes <code>dataIndices : List Nat</code></p>",
        "id": 397798719,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1697852017
    },
    {
        "content": "<p>if we change that to <code>List U64</code>, then <code>Dict</code>s will take up another 4B on the stack on 32-bit targets for no benefit</p>",
        "id": 397798739,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1697852032
    },
    {
        "content": "<p>Oh yeah, it's an index map so it stores nats....</p>",
        "id": 397798881,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1697852120
    },
    {
        "content": "<p>I mean long term we need to deal with hashing differently on 32 bit systems among other things</p>",
        "id": 397798913,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1697852142
    },
    {
        "content": "<p>I think it would be fine for now to just make this a 64bit dict implementation and add a to-do for 32bit.</p>",
        "id": 397798990,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1697852174
    },
    {
        "content": "<p>works for me! <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 397799119,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1697852270
    },
    {
        "content": "<p>Also, long term, I'm not 100% sure we want to keep dict in roc. We may want to move it to zig. I tried a few times to port the final optimizations over, but kept getting perf regressions. I think the fine details of the dict impl may be a tiny bit low level to happily map to roc, but maybe a few more builtins or simd stuff could fix that....not fully sure.</p>",
        "id": 397799268,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1697852350
    },
    {
        "content": "<p>Is the plan to remove Nat from the language entirely or just to stop using it internally?</p>",
        "id": 397799568,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1697852524
    },
    {
        "content": "<p>entirely</p>",
        "id": 397800683,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1697853188
    },
    {
        "content": "<p>well, will be used internally still like for list indices</p>",
        "id": 397800706,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1697853208
    },
    {
        "content": "<p>Interesting, what's the motivation for that?</p>",
        "id": 397800713,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1697853218
    },
    {
        "content": "<p>It is one of the only target specific parts of the language</p>",
        "id": 397800742,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1697853235
    },
    {
        "content": "<p>Without it, theoretically all roc code (aside from when panics happen) will do the exact same thing no matter the target</p>",
        "id": 397800829,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1697853280
    },
    {
        "content": "<p>This means you can just run pure roc tests once instead of once per platform</p>",
        "id": 397800858,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1697853298
    },
    {
        "content": "<p>previously discussed at <a href=\"#narrow/stream/304641-ideas/topic/replace.20Nat\">https://roc.zulipchat.com/#narrow/stream/304641-ideas/topic/replace.20Nat</a></p>",
        "id": 397800861,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1697853300
    },
    {
        "content": "<p>There were others too</p>",
        "id": 397800867,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1697853304
    },
    {
        "content": "<p><span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> yeah, that has more</p>",
        "id": 397800880,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1697853317
    },
    {
        "content": "<p>Ah yeah that sounds like a good change, cool!</p>",
        "id": 397801427,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1697853670
    },
    {
        "content": "<p>anyone know why <a href=\"https://github.com/roc-lang/roc/blob/cd7a031d09fcd0a2f95cb2933b675028cd0b7730/crates/compiler/derive/src/decoding/tuple.rs#L639\">decoding tuples uses <code>Nat</code></a>? <span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> maybe?</p>",
        "id": 397804414,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1697855764
    },
    {
        "content": "<p>looks like index into the tuple</p>",
        "id": 397804777,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1697856033
    },
    {
        "content": "<p>yep</p>",
        "id": 397806863,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1697857552
    },
    {
        "content": "<p>the choice of integer type there doesn't matter</p>",
        "id": 397806928,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1697857571
    },
    {
        "content": "<p>nice, thanks!</p>",
        "id": 397807195,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1697857768
    },
    {
        "content": "<p>got it compiling, but still plenty to do: <a href=\"https://github.com/roc-lang/roc/pull/5923\">https://github.com/roc-lang/roc/pull/5923</a></p>",
        "id": 397808846,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1697859081
    }
]