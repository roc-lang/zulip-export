[
    {
        "content": "<p>Yeah, thinks like morphic will remain slow for non allocation related reasons (though morphic also doesn't do arena allocation which maybe could help its perf a bit).</p>",
        "id": 495624055,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737687837
    },
    {
        "content": "<p>Is morphic just alias analysis?</p>",
        "id": 495624108,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737687855
    },
    {
        "content": "<p>I think morphic does analysis on uniqueness to enable inplace mutation without checking the refcount. It might also enable removing some refcount increments/decrements. That said, I don't think it currently works. I had to disable a chunk of its analysis due to causing bugs and it basically had no impact on perf for most benchmarks.</p>",
        "id": 495624315,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737687990
    },
    {
        "content": "<p>Cool, that would allow us to remove a dependency <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 495624340,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737688018
    },
    {
        "content": "<p>Once Roc works consistently, we can re-enable it</p>",
        "id": 495624369,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737688038
    },
    {
        "content": "<p>But we are definitely not there right now</p>",
        "id": 495624378,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737688046
    },
    {
        "content": "<p>This is probably the biggest roc app I know of <a href=\"https://github.com/lukewilliamboswell/roc-htmx-tailwindcss-demo\">https://github.com/lukewilliamboswell/roc-htmx-tailwindcss-demo</a></p>",
        "id": 495624471,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1737688114
    },
    {
        "content": "<p>I had one more advanced that this I was messing around with for a work project/prototype... I should probably back-port features from that into this demo.</p>",
        "id": 495624610,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1737688206
    },
    {
        "content": "<p>I think it would be great to double check with someone who understands what it is supposed to do better before just removing it.</p>\n<p>To be fair, it may be the case they we aren't leaning on it enough. Potentially more zig biultins could be using it's inplace vs not indicator at comptime. On top of that, it may not show huge gains until hit in a hot loop where removing the refcounting completely could be huge....but I don't know enough about it to be sure.</p>\n<p>From what I know of it currently, it is bugged, it really slows down compile time (all the worst compile times I have ever seen have been due to morphic), and it doesn't generally affect perf much.</p>\n<p>So that does push towards removing it assuming we can't easily fix it and make it algorithmically sound.</p>\n<p>EDIT: all that said, not trying to be mean to the morphic folks. It might be a great piece of tech we are holding wrong or that has some minor bugs that happen to lead to scary roc issues.</p>",
        "id": 495624628,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737688221
    },
    {
        "content": "<p>If you did a <code>wc -l  **/*.roc</code>, what do you get?</p>",
        "id": 495624653,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737688244
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>$ wc -l  **/*.roc\n      49 src/Controllers/Product.roc\n      50 src/Controllers/User.roc\n     130 src/Helpers.roc\n      14 src/Models/Product.roc\n      16 src/Models/Session.roc\n      12 src/Models/User.roc\n      51 src/Sql/Product.roc\n      67 src/Sql/Session.roc\n      53 src/Sql/User.roc\n      49 src/Views/Layout.roc\n    3343 src/Views/Pages.roc\n     234 src/main.roc\n    4068 total\n</code></pre></div>",
        "id": 495624690,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1737688278
    },
    {
        "content": "<p>Yeah, that's big-ish.  But I have Go lang apps that are 10k+ (and still compile in the low 100s of ms)</p>",
        "id": 495624738,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737688317
    },
    {
        "content": "<p>My other one is <code>5908 total</code></p>",
        "id": 495624790,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1737688325
    },
    {
        "content": "<p>I don't know who understands Morphic...</p>",
        "id": 495624805,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737688331
    },
    {
        "content": "<p>I'm assuming you haven't migrated this app</p>",
        "id": 495624854,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737688379
    },
    {
        "content": "<p>I'd love to see a <code>time roc build</code> on it after you do</p>",
        "id": 495624873,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737688392
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"334092\">@William Brandon</span> I think is one of the morphic authors</p>",
        "id": 495624874,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737688392
    },
    {
        "content": "<p>And I think <span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> had solid understanding of morphic at a high level at least.</p>",
        "id": 495624907,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737688424
    },
    {
        "content": "<p>They also have a <a href=\"https://dl.acm.org/doi/10.1145/3591260\">published paper</a> and <a href=\"https://www.youtube.com/watch?v=F3z39M0gdJU&amp;t=3540s\">talk</a>, but I think it is mostly on lambasets and not on the smarter inplace mutation without checking refcounts.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"F3z39M0gdJU\" href=\"https://www.youtube.com/watch?v=F3z39M0gdJU&amp;t=3540s\"><img src=\"https://uploads.zulipusercontent.net/53e2c89e7810ddaa2c8af79c1add4c72035f97e8/68747470733a2f2f692e7974696d672e636f6d2f76692f46337a33394d3067644a552f64656661756c742e6a7067\"></a></div>",
        "id": 495625059,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737688506
    },
    {
        "content": "<p>With the new pipeline design, lambda sets won't exist at that part of the compiler</p>",
        "id": 495625113,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737688553
    },
    {
        "content": "<p>Just concretely-typed first-order functions and values</p>",
        "id": 495625148,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737688563
    },
    {
        "content": "<p>Given checking a refcount is 1 is generally pretty cheap, the inplace smarts may not really ever give us gains (except in really hot mutate in place loops maybe). As opposed to lambasets which hugely help llvm understand and optimize our code.</p>",
        "id": 495625169,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737688569
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/channel/306878-off-topic/topic/Bootstrapping.20Roc.3F/near/495625148\">said</a>:</p>\n<blockquote>\n<p>Just concretely-typed first-order functions and values</p>\n</blockquote>\n<p>So happy for this.</p>",
        "id": 495625189,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737688589
    },
    {
        "content": "<p>It's more important than any other work we're doing in the next 6 months IMO</p>",
        "id": 495625213,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737688615
    },
    {
        "content": "<p>24 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"306878\" href=\"/#narrow/channel/306878-off-topic/topic/Bootstrapping.20Roc.3F\">#off topic &gt; Bootstrapping Roc?</a> by <span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span>.</p>",
        "id": 495632643,
        "sender_full_name": "Notification Bot",
        "timestamp": 1737693831
    },
    {
        "content": "<p>I like the idea of disabling (or even removing) Morphic before 0.1.0</p>",
        "id": 495632698,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737693849
    },
    {
        "content": "<p>I think it is already set to trivial analysis due to bugs. So it does the same amount of work for both debug and release builds (which is pretty minimal)</p>",
        "id": 495632759,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737693900
    },
    {
        "content": "<p>So it is kinda already disabled</p>",
        "id": 495632781,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737693913
    },
    {
        "content": "<p>right, but even in that mode it's been a source of bugs, right?</p>",
        "id": 495632798,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737693923
    },
    {
        "content": "<p>Not to my knowledge, but I'm not sure</p>",
        "id": 495632840,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737693955
    },
    {
        "content": "<p>hm, I could be misremembering then</p>",
        "id": 495632895,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737693972
    },
    {
        "content": "<p>This is all the context I have:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"c1\">// TODO(#7367): Change this back to `morphic_lib::solve`.</span>\n<span class=\"w\">        </span><span class=\"c1\">// For now, using solve_trivial to avoid bug with loops.</span>\n<span class=\"w\">        </span><span class=\"c1\">// Note: when disabling this, there was not much of a change in performance.</span>\n<span class=\"w\">        </span><span class=\"c1\">// Notably, NQueens was about 5% slower. False interpreter was 0-5% faster (depending on input).</span>\n<span class=\"w\">        </span><span class=\"c1\">// cFold and derive saw minor gains ~1.5%. rBTreeCk saw a big gain of ~4%.</span>\n<span class=\"w\">        </span><span class=\"c1\">// This feels wrong, morphic should not really be able to slow down code.</span>\n<span class=\"w\">        </span><span class=\"c1\">// Likely, noise or the bug and wrong inplace mutation lead to these perf changes.</span>\n<span class=\"w\">        </span><span class=\"c1\">// When re-enabling this, we should analysis the perf and inplace mutations of a few apps.</span>\n<span class=\"w\">        </span><span class=\"c1\">// It might be the case that our current benchmarks just aren't affected by morphic much.</span>\n</code></pre></div>",
        "id": 495632919,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737693996
    },
    {
        "content": "<p>gotcha</p>",
        "id": 495632943,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737694023
    },
    {
        "content": "<p>I don't know of any bugs since we changed it to solve_trivial</p>",
        "id": 495632973,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737694046
    },
    {
        "content": "<p>I forget, does it operate on traits?</p>",
        "id": 495632979,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737694055
    },
    {
        "content": "<p>or do we actually build an IR for it</p>",
        "id": 495632987,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737694060
    },
    {
        "content": "<p>build an ir for it</p>",
        "id": 495632996,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737694069
    },
    {
        "content": "<p>and that happens after specialization, so that's definitely a compiler perf downside <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 495633061,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737694096
    },
    {
        "content": "<p>but yeah maybe it's not urgent to actually skip that work</p>",
        "id": 495633067,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737694104
    },
    {
        "content": "<p>if there aren't bugs in the trivial solver</p>",
        "id": 495633072,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737694111
    },
    {
        "content": "<p>Given we haven't noticed any measurable perf gains from the alias analysis, I am for just ripping it out. Might be worth trying to figure out a worst case example first just to see if it every makes a meaningful difference.</p>",
        "id": 495633213,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737694212
    },
    {
        "content": "<p>Theoretically, that would be some sort of hot loop with inplace updates. One version where morphic leads to inplace mutation without checking the refcount and one that just checks the refcount. Maybe I can just recursively loop a list calling <code>List.set</code>?</p>\n<p>Even without morphic, I can probably force the inplace flag just to make sure it is getting set ignoring any potential morphic bugs.</p>",
        "id": 495633366,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737694323
    },
    {
        "content": "<p>the thing is, I just don't think we're in a position to make it reliable anytime soon</p>",
        "id": 495633480,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737694387
    },
    {
        "content": "<p>Yeah, but if it could lead to large gains, may be worth just leaving it wired up in trivial mode. If not, probably worth ripping out.</p>",
        "id": 495633526,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737694422
    },
    {
        "content": "<p>I'm just not sure it's worth the dependency, the extra IR generation, the concerns about bugs, the build time, etc.</p>",
        "id": 495633636,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737694488
    },
    {
        "content": "<p>to be able to experiment with it cheaply</p>",
        "id": 495633648,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737694495
    },
    {
        "content": "<p>because in my mind, the real question is \"can we someday have a version of it that runs reliably and quickly?\"</p>",
        "id": 495633678,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737694520
    },
    {
        "content": "<p>if we can, then sure we might as well enable that because we already know we're set up for it</p>",
        "id": 495633700,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737694547
    },
    {
        "content": "<p>but that version of it has to exist first, and right now that is a completely hypothetical future thing <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 495633768,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737694574
    },
    {
        "content": "<p>because the original authors haven't touched it in years, and none of us know how it works well enough to fix or rewrite it</p>",
        "id": 495633808,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737694608
    },
    {
        "content": "<p>so it's not like even if we were able to experimentally confirm that it was really great in some scenario, that we'd want to enable it in the compiler in general - because we know it'd just start causing bugs again</p>",
        "id": 495633869,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737694651
    },
    {
        "content": "<p>in other words, knowing that it has big benefits isn't actionable for us until we have a version that we can actually use long-term</p>",
        "id": 495633900,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737694677
    },
    {
        "content": "<p>so being able to experiment on it is almost closer to a curiosity - like \"hey, cool, someday a hypothetical future version of Morphic that we could use for real will get some benefits in this one scenario!\"</p>",
        "id": 495633994,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737694739
    },
    {
        "content": "<p>I guess if we started discovering some really big benefits it might be motivating to try to learn how it works in order to build out a real version, but that also seems like a very hypothetical scenario right now haha</p>",
        "id": 495634124,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737694805
    },
    {
        "content": "<p>Lambdasets are also from morphic, but we definitely want to keep those despite not 100% being sure we can make the compile in a reasonable about of time. Only recently with some of Ayaz's work did we feel we could compile them without bugs after a rewrite. I don't see how the rest of morphic is any different (assuming it can show similar perf gains)</p>",
        "id": 495634364,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737694886
    },
    {
        "content": "<p>oh for sure</p>",
        "id": 495634610,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737694954
    },
    {
        "content": "<p>I mean the Morphic solver specifically</p>",
        "id": 495634632,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737694970
    },
    {
        "content": "<p>the difference is that we actually understand how to do lambda sets</p>",
        "id": 495634670,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737694997
    },
    {
        "content": "<p>and we don't understand the rest of the solver</p>",
        "id": 495634674,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737695001
    },
    {
        "content": "<p>so we have problems but no way to fix them, and also no way in sight for getting to a point where we can fix them</p>",
        "id": 495634829,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737695059
    },
    {
        "content": "<p>(and also a payoff of unclear magnitude for what would definitely be a big project no matter what)</p>",
        "id": 495634875,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737695100
    },
    {
        "content": "<p>(big project being getting it to run fast and without bugs)</p>",
        "id": 495634900,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737695118
    },
    {
        "content": "<p>morphic and lambda sets are two different things</p>",
        "id": 495635053,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737695198
    },
    {
        "content": "<p>morphic is about specializing borrows</p>",
        "id": 495635066,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737695207
    },
    {
        "content": "<p>I'm not saying we should never revisit it or anything—there's a paper and a reference implementation, so it's certainly possible that we could figure out how it works someday—just that I think if we didn't have it in the compiler right now, I don't think we'd add it</p>",
        "id": 495635070,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737695210
    },
    {
        "content": "<p>lambda sets are about specializing indirect jumps</p>",
        "id": 495635103,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737695229
    },
    {
        "content": "<p>that's a cool way of putting it! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 495635130,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737695250
    },
    {
        "content": "<p>I thought both came from the morphic research?</p>",
        "id": 495635231,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737695302
    },
    {
        "content": "<p>yes but the technologies are distinct</p>",
        "id": 495635250,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737695316
    },
    {
        "content": "<p>they implemented both in the language</p>",
        "id": 495635262,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737695322
    },
    {
        "content": "<p>yes</p>",
        "id": 495635266,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737695327
    },
    {
        "content": "<p>the morphic pass in roc does nothing wrt lambda sets</p>",
        "id": 495635300,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737695347
    },
    {
        "content": "<p>it could but it doesn't</p>",
        "id": 495635359,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737695396
    },
    {
        "content": "<p>Morphic does need all functions to be first-order, and lambda sets are a way to get that</p>",
        "id": 495635435,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737695419
    },
    {
        "content": "<p>which I believe was what led the authors of Morphic to come up with the idea of lambda sets</p>",
        "id": 495635460,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737695437
    },
    {
        "content": "<p>(which turned out to be valuable on their own to us)</p>",
        "id": 495635470,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737695445
    },
    {
        "content": "<p>because of LLVM etc.</p>",
        "id": 495635484,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737695454
    },
    {
        "content": "<p>well, it doesn't need first order functions. it just guarantees full borrow specialization if you have first order functions</p>",
        "id": 495635530,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737695486
    },
    {
        "content": "<p>you can run morphic over programs with indirect jumps, that's not a problem</p>",
        "id": 495635591,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737695518
    },
    {
        "content": "<p>i would think of them as fully orthogonal</p>",
        "id": 495635644,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737695531
    },
    {
        "content": "<p>cool</p>",
        "id": 495635749,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737695603
    },
    {
        "content": "<p>Ayaz, what are your thoughts about keeping it in the code base in its current state?</p>",
        "id": 495635783,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737695629
    },
    {
        "content": "<p>i would remove it if it's possible</p>",
        "id": 495635839,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737695647
    },
    {
        "content": "<p>idk if stuff breaks</p>",
        "id": 495635842,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737695651
    },
    {
        "content": "<p>but you know my stance on simplification haha</p>",
        "id": 495635851,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737695667
    },
    {
        "content": "<p>So this is a benchmark trying to trigger morphic. So this is probably about the best possible gain from morphic in general:</p>\n<div class=\"codehilite\"><pre><span></span><code>Benchmark 1: ./check-refcount\n  Time (mean ± σ):      68.6 ms ±   0.3 ms    [User: 65.6 ms, System: 2.2 ms]\n  Range (min … max):    67.9 ms …  69.6 ms    100 runs\n\nBenchmark 2: ./no-check-refcount\n  Time (mean ± σ):      21.9 ms ±   0.6 ms    [User: 19.0 ms, System: 2.2 ms]\n  Range (min … max):    20.8 ms …  23.2 ms    100 runs\n\nSummary\n  ./no-check-refcount ran\n    3.13 ± 0.08 times faster than ./check-refcount\n</code></pre></div>\n<p>So morphic can be a big win.</p>",
        "id": 495635913,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737695711
    },
    {
        "content": "<p>Not sure what numbers could realistically come up in practice though.</p>",
        "id": 495635956,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737695751
    },
    {
        "content": "<p>The above code is from a hot loop that only calls <code>List.set</code>. One version uses morphic to be statically inplace. The other is doing refcount checks for uniqueness.</p>",
        "id": 495636054,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737695798
    },
    {
        "content": "<p>Not saying this makes morphic worth keeping, might be too slow or buggy in practice (or simply have no one to actually own and fix it up eventually).</p>",
        "id": 495636107,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737695850
    },
    {
        "content": "<p>I always just worry that ripping something like this out will make it exceptionally unlike to ever be re-added. Leaving it (even in the trivial only state), may lead to us eventually looping back to it when the language has otherwise settled, fix it up, and see nice perf gains.</p>",
        "id": 495636303,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737695991
    },
    {
        "content": "<p>But I'm a sucker for things that go fast... <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 495636447,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737696060
    },
    {
        "content": "<p>i think a helpful thing to think about would be what performance ceiling are you all comfortable for a 0.1 release</p>",
        "id": 495636502,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737696106
    },
    {
        "content": "<p>if it is a hard requirement that it is the fastest thing out there sans ref counting that is one thing</p>",
        "id": 495636578,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737696135
    },
    {
        "content": "<p>if it needs to be comparable to existing functional languages/python/other web server players/etc maybe a different story</p>",
        "id": 495636619,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737696166
    },
    {
        "content": "<p>yeah I'm definitely comfortable with our current performance for 0.1</p>",
        "id": 495636647,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737696183
    },
    {
        "content": "<p>and how important is performance relative to stability</p>",
        "id": 495636659,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737696186
    },
    {
        "content": "<p>Part of the wierd reality that we live in is that ocaml exists and is reasonably performant yet essentially no one uses it. So perf likely isn't the big selling point to most people.</p>",
        "id": 495636790,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737696256
    },
    {
        "content": "<p>I'm very not comfortable with our current stability other than the parser (thanks to its fuzzing giving a lot of confidence, and setting aside the fact that we know it's temporarily in a more volatile state at this exact moment than it had been for a long time prior)</p>",
        "id": 495636807,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737696270
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/395097-compiler-development/topic/remove.20morphic.3F/near/495636790\">said</a>:</p>\n<blockquote>\n<p>Part of the wierd reality that we live in is that ocaml exists and is reasonably performant yet essentially no one uses it. So perf likely isn't the big selling point to most people.</p>\n</blockquote>\n<p>well, 10% of the equities market relies on ocaml ;)</p>",
        "id": 495636975,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737696365
    },
    {
        "content": "<p>Another simple fact is that essentially no one who will use roc v0.1.0 will be using it for perf. They will be using it for the rest of roc with perf maybe being a nice afterthought.</p>\n<p>So yeah, always compiling without crashes/segfaults, not having cffi bugs, having good errors almost all the time, having robust features will be much much more important for v0.1.0 and likely for many releases after that.</p>",
        "id": 495637063,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737696427
    },
    {
        "content": "<p>I personally care a ton about perf, but I am the exception who would be using rust or c++ instead of roc. Most folks will come from the other side (js, python, maybe go or ocaml) instead of roc.</p>",
        "id": 495637195,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737696498
    },
    {
        "content": "<p>I don't use Ocaml because it feels like a kitchen sink language. Most of the code I read for it is a different flavor than every other example I see. It's nice, but it's somewhat C++-y in that way. Not much experience, tho</p>",
        "id": 495637207,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737696506
    },
    {
        "content": "<p>I also personally care a ton about Roc's performance <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 495637231,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737696521
    },
    {
        "content": "<p>Aside how is ocamls perf in practice? Roughly in the same grouping as go?</p>",
        "id": 495637282,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737696560
    },
    {
        "content": "<p>yes ocaml is similar to go ime</p>",
        "id": 495637306,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737696579
    },
    {
        "content": "<p>compiler perf and runtime</p>",
        "id": 495637315,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737696590
    },
    {
        "content": "<p>i will also say ime performance doesn't really matter until you are at some scale. even then, most often performance is due to IO (can be solved separately), load (can be solved separately, horizontal or vertical scaling), or algorithmically (fix it, or if you need compute, easy hack is shell out). I love that Roc keeps in mind as a priority, but at the same time I have used many python webservers and CLI apps that were fine - and I'm sure Roc will be a better experience than that from day one</p>",
        "id": 495637459,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737696671
    },
    {
        "content": "<p>Yeah, perf is normally more about how much you have to scale (so cost, but servers are cheap) rather than language implementation. That and saving energy/battery life (kinda the reverse of scale: phone, embedded).</p>",
        "id": 495637727,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737696853
    },
    {
        "content": "<p>embedded is a good point</p>",
        "id": 495637745,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737696874
    },
    {
        "content": "<p>i don't know the distribution of realtime constraints in embedded, but if you need hard realtime roc probably isn't the language</p>",
        "id": 495637803,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737696927
    },
    {
        "content": "<p>Otherwise, it is mostly design rather than language (good io scheme, good algorithm).</p>\n<p>Unless you need/want to be scrappy for some reason (like rewriting games from python to c++ so that they can simulate faster for alphazero implementation that can be trained on a single laptop). Most of the time perf is kinda optional, but nice to have a reasonable baseline for.</p>",
        "id": 495637893,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737696968
    },
    {
        "content": "<blockquote>\n<p>but if you need hard realtime roc probably isn't the language</p>\n</blockquote>\n<p>Yeah, though I guess you could theoretically make guarantees about timing due to refcounting instead of gc.</p>",
        "id": 495637965,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737697028
    },
    {
        "content": "<p>That said, a lot of embedded is not true hard realtime. I mean a lot of embedded is running linux which even in real time mode really stretches the definition of real time.</p>",
        "id": 495638013,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737697069
    },
    {
        "content": "<p>fair</p>",
        "id": 495638048,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737697083
    },
    {
        "content": "<p>As a note, morphic is still being maintained. So there is a chance we could get someone interested from their team to help us.</p>\n<p>Otherwise, yeah, probably should just rip out morphic. We don't have any idea why it is broke (could litterally just be a silly mistake in the ir we generate) and even when it does work, the core algorithm can get way too slow to be worth running during a roc build.</p>",
        "id": 495638242,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737697219
    },
    {
        "content": "<p>there are definitely bugs in the ir generation</p>",
        "id": 495639598,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737698090
    },
    {
        "content": "<p>there is at least one i remember</p>",
        "id": 495639609,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737698098
    },
    {
        "content": "<p>I am lightly looking into what it would take to remove this. I think it is only tangled into the llvm backend</p>",
        "id": 495821200,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737769130
    },
    {
        "content": "<p>That said, due to generating lots of extra specializations, it is tangled in reasonably deep. So it won't be simple to remove. That said, I would expect most of it to just be pretty manual, not necessarily hard.</p>",
        "id": 495821247,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737769170
    },
    {
        "content": "<p>I do think a solid amount of mapping exist that would be best to cleanup, but that will be harder to untangle than just removing morphic.</p>",
        "id": 495821337,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737769210
    }
]