[
    {
        "content": "<p>There seems to be an issue in the Roc REPL. It's simpler to just show it:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"err\">»</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">8</span><span class=\"n\">i8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"o\">.</span><span class=\"n\">shiftRightZfBy</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">I8</span>\n</code></pre></div>\n<p>This should return <code>62 : I8</code> instead. But surprisingly, if I use a def instead, it works fine:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"err\">»</span><span class=\"w\"> </span><span class=\"n\">num</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">8</span><span class=\"n\">i8</span>\n<span class=\"o\">-</span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">I8</span>\n\n<span class=\"err\">»</span><span class=\"w\"> </span><span class=\"n\">num</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"o\">.</span><span class=\"n\">shiftRightZfBy</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"mi\">62</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">I8</span>\n</code></pre></div>\n<p>Would you like me to open an issue on GitHub or is this known or somehow expected?</p>",
        "id": 477107602,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1729046820
    },
    {
        "content": "<p>Personally, I think the real issue filed should be to delete <code>shiftRightZfBy</code> and instead generate shift right based on if the number is signed or unsigned. I think <code>shiftRightZfBy</code> was an interesting idea, but is more confusing than useful.</p>",
        "id": 477108055,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729047028
    },
    {
        "content": "<p>Oh great, I had just started writing a message about that!</p>",
        "id": 477108113,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1729047059
    },
    {
        "content": "<p>I ran into this issue this morning because I used <code>Num.shiftRightBy</code> (I hadn't noticed there was another function), and my code worked fine until one of the inputs was a bit too high and its most significant bit was 1. For lower values, my code was equivalent to <code>n // 128</code>, but all of a sudden for large values is did something really strange. Switching to <code>Num.shiftRightZfBy</code> fixed the problem.</p>",
        "id": 477108325,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1729047164
    }
]