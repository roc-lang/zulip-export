[
    {
        "content": "<p>Currently, RustGlue.roc only generates a derived Debug implementation for RocFunction types:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[repr(C)]</span>\n<span class=\"cp\">#[derive(Debug)]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">RocFunction_65</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">   </span><span class=\"n\">closure_data</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Some thoughts on this:</p>\n<ul>\n<li>I believe <code>Clone</code> would be safe to implement and wouldn't hurt to include.</li>\n<li>An implementation for Debug, while it exists now, probably wouldn't be all that useful in its current state (printing out the raw closure capture bytes). I argue we should implement Debug manually, but have it print e.g: \"&lt;function&gt;\" like it does in the REPL so it won't stop users from viewing the rest of the contents of a data structure that also contains a function.</li>\n</ul>",
        "id": 476801979,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1728916559
    },
    {
        "content": "<p>Relatedly, generated record types currently derive <code>PartialOrd</code> and <code>Ord</code>. This allows a platform author to sort records by their fields, ranked by the order they appear in memory. Is this to allow for e.g: binary search on sorted lists of records? I thought I'd double check whether this might be a mistake, because outside of that one use-case, it seems like its behavior might be confusing to a platform author.</p>",
        "id": 476803370,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1728917023
    },
    {
        "content": "<p>And if records implementing <code>Ord</code> _is_ desired behavior, should tag unions implement it too?</p>",
        "id": 476804771,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1728917516
    },
    {
        "content": "<p>Clone is not safe. At least not today.</p>",
        "id": 476807916,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728918520
    },
    {
        "content": "<p>If you clone the raw closure capture, you may clone something refcounted. But you wouldn't increment the refcount. So roc will free it, but you will still have a reference to the old memory address</p>",
        "id": 476808080,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728918583
    },
    {
        "content": "<p>As for ord....just a convenience if the platform happens to want it. Honestly, it may not really be useful. I'm not sure of a specific use case past sorting.</p>",
        "id": 476808544,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728918754
    },
    {
        "content": "<p>I think tags and records should both be the same, but I'm not sure if that should be with or without ord</p>",
        "id": 476808601,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728918777
    },
    {
        "content": "<p>Gotcha, I think I'll leave it off for now then</p>",
        "id": 476913923,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1728975200
    }
]