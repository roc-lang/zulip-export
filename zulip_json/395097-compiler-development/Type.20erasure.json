[
    {
        "content": "<p>To get erased closures working across the board, I think we need to</p>\n<ul>\n<li>Add refcounters for erased closures in the llvm backend. I think this is straightforward, but we need to track the layout of the boxed data at the time an erased value (\"ErasedMake\") is constructed, which is not yet done.</li>\n<li>Add support for erased values in wasm backend, and dev backend. <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> do you have a sense for how difficult this would be in the dev backend? The representation of an erased value in the LLVM backend is <code>{ function_pointer, boxed_data, refcounter_function_pointer }</code>. Calling an erased closure is an indirect call to the function pointer with the boxed data (the unboxing happens on the callee site)</li>\n<li>Update the ability-specializer to not expect lambda sets unconditionally. I can take this piece.</li>\n<li>Figure out some way to incrementally turn on tests in the same way we do for gen_llvm, etc. There is a compiler flag to turn on erasure but it's not exposed to the user</li>\n</ul>",
        "id": 401528542,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1699721238
    },
    {
        "content": "<p>That shouldn't be too hard to add to the dev backend. Fundamentally just an indirect call and some pointer data twiddling.</p>",
        "id": 401528661,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1699721399
    },
    {
        "content": "<p>For the Wasm backend the <code>call_indirect</code> instruction requires a type signature for the called function.<br>\nIt's like \"call any function that takes two <code>f32</code>s and returns an <code>i32</code>\".<br>\nSo the IR will need to contain enough <code>Layout</code> info to do that. But we'll already need that just to actually pass the arguments and get the return value anyway!<br>\nThere's a bit of bookkeeping too. All indirect callees have to be listed in a table in the module. But we already support this because of <code>List.map</code> and friends, which indirectly call Roc functions from Zig.</p>",
        "id": 401593396,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1699779538
    },
    {
        "content": "<p>So I don't see any major issues.</p>",
        "id": 401593428,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1699779576
    }
]