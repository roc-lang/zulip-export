[
    {
        "content": "<p>I wanted to lay out a goal - not something we need to pursue right away, necessarily! - but rather a place I'd like us to end up when it comes to Regions</p>",
        "id": 526796372,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751461307
    },
    {
        "content": "<p>this is not about what their numbers represent (e.g. line numbers, indices, whatever) but rather how they're stored</p>",
        "id": 526796435,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751461324
    },
    {
        "content": "<p>this is also starting from Parse AST nodes - tokenization is out of scope (and decoupled from this)</p>",
        "id": 526796507,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751461345
    },
    {
        "content": "<p>so let's say we're parsing some tokens and we end up with this memory layout:</p>\n<div class=\"codehilite\"><pre><span></span><code>Idx:      0   1   2\nAST:     {…} {…} {…}\nRegions: {…} {…} {…}\n</code></pre></div>\n<p>this means we've parsed 3 AST nodes, and we have a Region for each of them</p>",
        "id": 526796654,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751461385
    },
    {
        "content": "<p>if I have an <code>Idx</code>, I can look up the AST node at that index, and also I can look up its Region</p>",
        "id": 526796714,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751461401
    },
    {
        "content": "<p>they're just stored in different arrays</p>",
        "id": 526796724,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751461405
    },
    {
        "content": "<p>now let's say I'm doing canonicalization, and - in this world, although we don't have it today!  - we have made it be the case that there is exactly 1 CIR node for each AST node. They are exactly 1-to-1.</p>\n<p>Now we've added 3 CIR nodes to the mix, one for each AST node, and memory looks like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>Idx:      0   1   2\nAST:     {…} {…} {…}\nCIR:     {…} {…} {…}\nRegions: {…} {…} {…}\n</code></pre></div>",
        "id": 526796981,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751461476
    },
    {
        "content": "<p>importantly, I didn't have to touch Regions to do this</p>",
        "id": 526797031,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751461487
    },
    {
        "content": "<p>because we made AST and CIR 1-to-1, the entire canonicalization pass was able to just look at AST nodes and make CIR nodes and then in the end we just automatically still have the property that, given an <code>Idx</code> for a CIR node, I can get its Region - even though we didn't have to do any work to copy Region info over or anything</p>",
        "id": 526797221,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751461539
    },
    {
        "content": "<p>now we get to type-checking</p>",
        "id": 526797297,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751461559
    },
    {
        "content": "<p>it's already becoming the case (although we're not there yet) that there is one CIR node per Type Var</p>",
        "id": 526797377,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751461583
    },
    {
        "content": "<p>and if we use the same indexing scheme for those, then we get:</p>\n<div class=\"codehilite\"><pre><span></span><code>Idx:      0   1   2\nAST:     {…} {…} {…}\nCIR:     {…} {…} {…}\nTypes:   {…} {…} {…}\nRegions: {…} {…} {…}\n</code></pre></div>",
        "id": 526797504,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751461614
    },
    {
        "content": "<p>again, no Region copying was necessary</p>",
        "id": 526797522,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751461619
    },
    {
        "content": "<p>we didn't need to touch it, we just introduced the types and the indices just work out that we still have the same Regions we initially set up during parsing</p>",
        "id": 526797594,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751461640
    },
    {
        "content": "<p>and when we report type mismatch error messages, we have the region info easily accessible - just take the Idx of the type (aka the type var) and go look up the region, and that's the source location</p>",
        "id": 526797769,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751461684
    },
    {
        "content": "<p>there is one more case here, which is that during type-checking, we sometimes need to introduce new types - for example, when we do a polymorphic function call, we have to copy the function's type and then mutate the copy based on how it was called (e.g. if the function was <code>Num(a), Num(a) -&gt; Num(a)</code>, we need to be able to call it using a <code>F32</code> as well as an <code>I64</code>, and each of those calls need to make a separate copy of the type so that we can infer the return value at the call site correctly)</p>",
        "id": 526798095,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751461788
    },
    {
        "content": "<p>and when we're doing that, we still want to be able to refer the regions back to the original source code point if there's an error</p>",
        "id": 526798189,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751461817
    },
    {
        "content": "<p>so at that point, we would actually finally make some new Regions, one per new type added during checking - e.g.</p>\n<div class=\"codehilite\"><pre><span></span><code>Idx:      0   1   2   3   4\nAST:     {…} {…} {…}\nCIR:     {…} {…} {…}\nTypes:   {…} {…} {…} {…} {…}\nRegions: {…} {…} {…} {…} {…}\n</code></pre></div>",
        "id": 526798236,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751461833
    },
    {
        "content": "<p>importantly, we don't need to go back and make new CIR nodes or AST nodes for this, it's just about types and regions</p>",
        "id": 526798291,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751461854
    },
    {
        "content": "<p>so this is about as memory-efficient as I think we can get things, and it's pretty simple!</p>",
        "id": 526798364,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751461887
    },
    {
        "content": "<p>there is one more <em>potential</em> trick we could do, although I'm not 100% sure it will work (but I suspect it is), which is that if we have a 1-to-1 correspondence between AST nodes and CIR nodes, and we never use AST nodes again after canonicalization...</p>",
        "id": 526798465,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751461928
    },
    {
        "content": "<p>we could just have the canonicalization pass mutate the AST nodes in-place rather than creating new CIR nodes and then discarding the old AST nodes</p>",
        "id": 526798541,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751461946
    },
    {
        "content": "<p>like I said, I'm not 100% sure we could/should do that, but it's worth noting that it's something we could try too</p>",
        "id": 526798594,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751461964
    },
    {
        "content": "<p>anyway, the main thing here (like the title of the topic says) is regions!</p>",
        "id": 526798641,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751461978
    },
    {
        "content": "<p>I think if we can organize things such that regions are laid out in memory this way, it'll make a lot of things simpler and nicer and faster</p>",
        "id": 526798708,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751462003
    },
    {
        "content": "<p>any thoughts on this welcome!</p>",
        "id": 526798725,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751462007
    },
    {
        "content": "<p>Out of curiosity:</p>\n<ol>\n<li>What of tokenization and regions?</li>\n<li>Old irs go away as we get deeper down the stack, correct?</li>\n<li>What of later passes that definitely will add nodes or make larger changes (refcounting as a simple example)?</li>\n</ol>",
        "id": 526886448,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751493954
    },
    {
        "content": "<ol>\n<li>out of scope for this; whatever we decide to do there can work just fine with this design</li>\n<li>correct, unless we're in a language server situation</li>\n<li>this works up through type checking but stops working as soon as monomorphization enters the picture <span aria-label=\"smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"smile\">:smile:</span></li>\n</ol>",
        "id": 526888940,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751495524
    },
    {
        "content": "<p>so from there on we'll need to do something else</p>",
        "id": 526888954,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751495533
    },
    {
        "content": "<p>Is it right to say the benefit here is that we reduce the size of our AST and CIR nodes by 64bits, moving that memory to the side, such that doesn't need to be touched at until we are generating error reports or debug info like s-expressions.</p>\n<p>So improving the likelihood that the IR for a module will fit completely in a smaller cache? </p>\n<p>And if we ever achieved the modify in place idea, then we would be effectively halving the memory used again.</p>",
        "id": 526889480,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751495878
    },
    {
        "content": "<p>i was actually already planning on doing the first thing here in ParseAST!</p>",
        "id": 526889750,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751496079
    },
    {
        "content": "<p>not mainly for memory savings but because i was sick of all the region extracting code we have for every node type</p>",
        "id": 526889785,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751496110
    },
    {
        "content": "<p>but this could really reduce the node size and fit way more nodes in the cache line</p>",
        "id": 526889839,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751496164
    },
    {
        "content": "<p>Is there a good way to measure/benchmark this? I'd be super interested to see the difference between our current implementation and after we make this change.</p>",
        "id": 526889956,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751496258
    },
    {
        "content": "<p>partly the benefits are reducing size of nodes, but also the lack of copying means that there's less memory traffic to/from the cache</p>",
        "id": 526891199,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751497236
    },
    {
        "content": "<p>like if I want to copy a <code>Region</code> from AST to CIR node, I need the source <code>Region</code>'s address in cache, and also the destination's address in cache</p>",
        "id": 526891247,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751497270
    },
    {
        "content": "<p>so if we can skip the copy, canonicalization doesn't need either of those in cache</p>",
        "id": 526891309,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751497298
    },
    {
        "content": "<p>so the savings in terms of cache impact during canonicalization are actually <code>@sizeOf(Region) * 2</code> per node</p>",
        "id": 526891344,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751497327
    },
    {
        "content": "<p>because the AST's <code>Region</code> can just get evicted from cache for other things and never need to be brought back in, and there is no such thing as \"CIR's Region\" to need to get brought in</p>",
        "id": 526891416,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751497378
    },
    {
        "content": "<p>is there an argument that during parsing this could cause more cache eviction of the node array since we are switching to writing to a different region (pun intended) of memory for adding the region?  i guess the same could be said of extra data</p>",
        "id": 527014017,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751553659
    },
    {
        "content": "<p>But we'll see. it'd be nice if we had a ready made benchmark set up to run when we make a change like this</p>",
        "id": 527014131,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751553687
    },
    {
        "content": "<p>Technically yes depending on usage pattern, but I would guess quite unlikely to be a problem.</p>",
        "id": 527086025,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751585161
    },
    {
        "content": "<p>I don't think so</p>",
        "id": 527089876,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751588592
    },
    {
        "content": "<p>we're writing the same total number of bytes during parsing, and it's all being written sequentially (appending to arrays) so it probably doesn't matter much whether it's split between 2 address ranges or 1</p>",
        "id": 527089905,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751588640
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/channel/395097-compiler-development/topic/regions/near/526889956\">said</a>:</p>\n<blockquote>\n<p>Is there a good way to measure/benchmark this? I'd be super interested to see the difference between our current implementation and after we make this change.</p>\n</blockquote>\n<p>Cache misses can be benchmarked like <a href=\"https://github.com/roc-lang/roc/blob/f1719b41ccd58f75174ebfcced06a0f7fab332ae/nightly_benches/benches/events_bench.rs#L64\">here</a></p>",
        "id": 527145173,
        "sender_full_name": "Anton",
        "timestamp": 1751622233
    }
]