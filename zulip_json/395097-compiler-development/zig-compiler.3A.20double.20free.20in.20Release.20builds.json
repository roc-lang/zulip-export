[
    {
        "content": "<p>This might be hard to debug. I have a sample roc file here: <a href=\"https://github.com/bhansconnect/chip8_op_test/blob/main/chip8_test_rom.roc\">https://github.com/bhansconnect/chip8_op_test/blob/main/chip8_test_rom.roc</a></p>\n<p>with a debug build of the compiler <code>roc check</code> works just fine. I have been running with <code>--verbose --no-cache</code> as well.</p>\n<p>With a release build of the compiler, it segfaults due to a double free.</p>\n<p>If i use a debug allocator in the release build to hopefully get a stack trace,  but it just hangs.</p>\n<hr>\n<p>I tried to debug this a little bit the other day.<br>\nThis is where it hangs:<br>\n<a href=\"/user_uploads/22008/2y_Y2v8wbtusQmrucmVyr5K_/Captura-de-pantalla-2025-10-15-a-las-8.33.08p.m..png\">Captura de pantalla 2025-10-15 a la(s) 8.33.08 p.m..png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/2y_Y2v8wbtusQmrucmVyr5K_/Captura-de-pantalla-2025-10-15-a-las-8.33.08p.m..png\" title=\"Captura de pantalla 2025-10-15 a la(s) 8.33.08 p.m..png\"><img data-original-content-type=\"image/png\" data-original-dimensions=\"1824x772\" src=\"/user_uploads/thumbnail/22008/2y_Y2v8wbtusQmrucmVyr5K_/Captura-de-pantalla-2025-10-15-a-las-8.33.08p.m..png/840x560.webp\"></a></div><p>Which is the same location the double free happens:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>lldb backtrace</p>\n</div><div aria-hidden=\"true\" class=\"spoiler-content\">\n<div class=\"codehilite\"><pre><span></span><code>(lldb) bt\n* thread #1, queue = 'com.apple.main-thread', stop reason = signal SIGABRT\n  * frame #0: 0x000000019282e5b0 libsystem_kernel.dylib`__pthread_kill + 8\n    frame #1: 0x0000000192868888 libsystem_pthread.dylib`pthread_kill + 296\n    frame #2: 0x000000019276e808 libsystem_c.dylib`abort + 124\n    frame #3: 0x000000019266d208 libsystem_malloc.dylib`malloc_vreport + 892\n    frame #4: 0x0000000192670f38 libsystem_malloc.dylib`malloc_report + 64\n    frame #5: 0x0000000192675db8 libsystem_malloc.dylib`___BUG_IN_CLIENT_OF_LIBMALLOC_POINTER_BEING_FREED_WAS_NOT_ALLOCATED + 76\n    frame #6: 0x0000000102947fc0 roc`mem.Allocator.rawFree at Allocator.zig:147:25 [opt]\n    frame #7: 0x0000000102947fb0 roc`mem.Allocator.free__anon_18865 at Allocator.zig:418:17 [opt] [inlined]\n    frame #8: 0x0000000102947fb0 roc`multi_array_list.MultiArrayList(gpa=mem.Allocator @ 0x0000000c1ecc43e8).deinit at multi_array_list.zig:189:21 [opt] [inlined]\n    frame #9: 0x0000000102947fa8 roc`safe_list.SafeMultiList(gpa=mem.Allocator @ 0x0000000c1ecc43e8).deinit at safe_list.zig:412:30 [opt] [inlined]\n    frame #10: 0x0000000102947fa8 roc`store.DescStore.deinit(gpa=mem.Allocator @ 0x0000000c1ecc43e8) at store.zig:1032:28 [opt] [inlined]\n    frame #11: 0x0000000102947fa8 roc`store.Store.deinit(self=0x0000000c1ecc43e8) at store.zig:121:26 [opt]\n    frame #12: 0x00000001028d707c roc`ModuleEnv.deinit(self=0x0000000c1ecc4320) at ModuleEnv.zig:137:22 [opt]\n    frame #13: 0x00000001029953d8 roc`compile_package.ModuleState.deinit(self=0x0000000c1ecc4300) at compile_package.zig:109:36 [opt] [inlined]\n    frame #14: 0x00000001029953c4 roc`compile_package.PackageEnv.deinit(self=0x0000000c1ecb4000) at compile_package.zig:192:22 [opt]\n    frame #15: 0x000000010299538c roc`compile_build.BuildEnv.deinit(self=0x000000016fdfdf20) at compile_build.zig:409:26 [opt]\n    frame #16: 0x0000000102934a94 roc`main.checkFileWithBuildEnv(allocs=&lt;unavailable&gt;, cache_config=&lt;unavailable&gt;) at main.zig:2744:27 [opt] [inlined]\n    frame #17: 0x0000000102934a84 roc`main.rocCheck(allocs=&lt;unavailable&gt;, args=cli_args.CheckArgs @ 0x000000016fdfc260) at main.zig:2819:45 [opt] [inlined]\n    frame #18: 0x0000000102934a84 roc`main.mainArgs(allocs=&lt;unavailable&gt;) at main.zig:415:40 [opt]\n    frame #19: 0x000000010293d62c roc`main.main at main.zig:365:28 [opt] [inlined]\n    frame #20: 0x000000010293d53c roc`start.callMain at start.zig:660:37 [opt] [inlined]\n    frame #21: 0x000000010293d53c roc`start.callMainWithArgs at start.zig:620:20 [opt]\n    frame #22: 0x000000010293d53c roc`start.main(c_argc=&lt;unavailable&gt;, c_argv=&lt;unavailable&gt;, c_envp=&lt;unavailable&gt;) at start.zig:635:28 [opt]\n    frame #23: 0x00000001924a9d54 dyld`start + 7184\n</code></pre></div>\n</div></div>\n<p>I'm not sure what is going on, but if I add prints to <code>ModuleEnv.deinit</code>, I can see that it is called twice in release builds, but only once in debug builds.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>release free locations</p>\n</div><div aria-hidden=\"true\" class=\"spoiler-content\">\n<div class=\"codehilite\"><pre><span></span><code>/Users/bren077s/Projects/roc/zig-out/bin/roc check --verbose --no-cache /Users/bren077s/Projects/chip8/chip8_test_rom.roc\n\n\n========== deinit ModuleEnv@16dde74b8 ==========\n/Users/bren077s/Projects/roc/src/canonicalize/ModuleEnv.zig:137:36: 0x1048eb133 in deinit (roc)\n    std.debug.dumpCurrentStackTrace(null);\n                                   ^\n/Users/bren077s/Projects/roc/src/compile/compile_build.zig:738:25: 0x10496b6bf in parseHeaderDeps (roc)\n        defer env.deinit();\n                        ^\n/Users/bren077s/Projects/roc/src/compile/compile_build.zig:470:51: 0x1049a66eb in build (roc)\n        var header_info = try self.parseHeaderDeps(root_abs);\n                                                  ^\n/Users/bren077s/Projects/roc/src/cli/main.zig:2755:24: 0x10494758f in mainArgs (roc)\n    try build_env.build(filepath);\n                       ^\n/Users/bren077s/Projects/roc/src/cli/main.zig:365:28: 0x104950b83 in main (roc)\n    const result = mainArgs(&amp;allocs, args);\n                           ^\n???:?:?: 0x1924a9d53 in ??? (???)\n???:?:?: 0x0 in ??? (???)\n\n\n========== deinit ModuleEnv@738c64320 ==========\n/Users/bren077s/Projects/roc/src/canonicalize/ModuleEnv.zig:137:36: 0x1048eb133 in deinit (roc)\n    std.debug.dumpCurrentStackTrace(null);\n                                   ^\n/Users/bren077s/Projects/roc/src/compile/compile_package.zig:109:36: 0x1049a9553 in deinit (roc)\n        if (self.env) |*e| e.deinit();\n                                   ^\n/Users/bren077s/Projects/roc/src/cli/main.zig:2744:27: 0x104947feb in mainArgs (roc)\n    defer build_env.deinit();\n                          ^\n/Users/bren077s/Projects/roc/src/cli/main.zig:365:28: 0x104950b83 in main (roc)\n    const result = mainArgs(&amp;allocs, args);\n                           ^\n???:?:?: 0x1924a9d53 in ??? (???)\n???:?:?: 0x0 in ??? (???)\nroc(36278,0x1ff214800) malloc: *** error for object 0x738810000: pointer being freed was not allocated\nroc(36278,0x1ff214800) malloc: *** set a breakpoint in malloc_error_break to debug\nzsh: abort      /Users/bren077s/Projects/roc/zig-out/bin/roc check --verbose --no-cache\n</code></pre></div>\n</div></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>debug frees</p>\n</div><div aria-hidden=\"true\" class=\"spoiler-content\">\n<div class=\"codehilite\"><pre><span></span><code>/Users/bren077s/Projects/roc/zig-out/bin/roc check --verbose --no-cache /Users/bren077s/Projects/chip8/chip8_test_rom.roc\n\n\n========== deinit ModuleEnv@16f023410 ==========\n/Users/bren077s/vendor/zig-0.14.1/lib/std/debug.zig:337:31: 0x10450fd37 in dumpCurrentStackTrace (roc)\n        writeCurrentStackTrace(stderr, debug_info, io.tty.detectConfig(io.getStdErr()), start_addr) catch |err| {\n                              ^\n/Users/bren077s/Projects/roc/src/canonicalize/ModuleEnv.zig:137:36: 0x1045af11b in deinit (roc)\n    std.debug.dumpCurrentStackTrace(null);\n                                   ^\n/Users/bren077s/Projects/roc/src/compile/compile_build.zig:738:25: 0x1046787e7 in parseHeaderDeps (roc)\n        defer env.deinit();\n                        ^\n/Users/bren077s/Projects/roc/src/compile/compile_build.zig:470:51: 0x1046ca5a7 in build (roc)\n        var header_info = try self.parseHeaderDeps(root_abs);\n                                                  ^\n/Users/bren077s/Projects/roc/src/cli/main.zig:2755:24: 0x1045e3413 in checkFileWithBuildEnv (roc)\n    try build_env.build(filepath);\n                       ^\n/Users/bren077s/Projects/roc/src/cli/main.zig:2819:45: 0x1045e205f in rocCheck (roc)\n    var check_result = checkFileWithBuildEnv(\n                                            ^\n/Users/bren077s/Projects/roc/src/cli/main.zig:415:40: 0x1046196af in mainArgs (roc)\n        .check =&gt; |check_args| rocCheck(allocs, check_args),\n                                       ^\n/Users/bren077s/Projects/roc/src/cli/main.zig:365:28: 0x10461bdc7 in main (roc)\n    const result = mainArgs(&amp;allocs, args);\n                           ^\n/Users/bren077s/vendor/zig-0.14.1/lib/std/start.zig:660:37: 0x10461c373 in main (roc)\n            const result = root.main() catch |err| {\n                                    ^\n???:?:?: 0x1924a9d53 in ??? (???)\n???:?:?: 0x0 in ??? (???)\nNo errors found in 241.6 ms for /Users/bren077s/Projects/chip8/chip8_test_rom.roc%\n</code></pre></div>\n</div></div>\n<p>Anyone have thoughts?</p>",
        "id": 545162558,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1760586551
    },
    {
        "content": "<p>I'm really not sure</p>",
        "id": 545163243,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1760586832
    },
    {
        "content": "<p>Also, of note, the error specifically comes from freeing part of the type checking state I think. The DescStore in the TypeStore. So it could also be related to something type checking specfic and not moduleenv technically.</p>",
        "id": 545163518,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1760586920
    },
    {
        "content": "<p>It's the debug vs release thing that has me a little stumped</p>",
        "id": 545163734,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1760586985
    },
    {
        "content": "<p>So I see two confusions:</p>\n<ol>\n<li>Why doesn't debug free things here? What is the delta?</li>\n<li>It isn't the entire moduleenv being double freed. just the DescStore. What is special about it?</li>\n</ol>",
        "id": 545163772,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1760586995
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> you should test gpt 5 codex high on this one</p>",
        "id": 546257521,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1761058102
    },
    {
        "content": "<p>I will :)<br>\nOn what OS did you hit the segfault, macOS?</p>",
        "id": 546272295,
        "sender_full_name": "Anton",
        "timestamp": 1761061833
    },
    {
        "content": "<p>Ok, I was able to reproduce it on macOS</p>",
        "id": 546276729,
        "sender_full_name": "Anton",
        "timestamp": 1761063070
    },
    {
        "content": "<p>Success :)</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code>❯ git diff\n<span class=\"gh\">diff --git a/src/eval/interpreter.zig b/src/eval/interpreter.zig</span>\n<span class=\"gh\">index a6e61957bb..42254a1dcf 100644</span>\n<span class=\"gd\">--- a/src/eval/interpreter.zig</span>\n<span class=\"gi\">+++ b/src/eval/interpreter.zig</span>\n<span class=\"gu\">@@ -92,6 +92,11 @@ pub const Interpreter = struct {</span>\n<span class=\"w\"> </span>        }\n<span class=\"w\"> </span>    };\n<span class=\"w\"> </span>    const Binding = struct { pattern_idx: can.CIR.Pattern.Idx, value: StackValue };\n<span class=\"gi\">+    const DefInProgress = struct {</span>\n<span class=\"gi\">+        pattern_idx: can.CIR.Pattern.Idx,</span>\n<span class=\"gi\">+        expr_idx: can.CIR.Expr.Idx,</span>\n<span class=\"gi\">+        value: ?StackValue,</span>\n<span class=\"gi\">+    };</span>\n<span class=\"w\"> </span>    allocator: std.mem.Allocator,\n<span class=\"w\"> </span>    runtime_types: *types.store.Store,\n<span class=\"w\"> </span>    runtime_layout_store: layout.Store,\n<span class=\"gu\">@@ -127,6 +132,7 @@ pub const Interpreter = struct {</span>\n<span class=\"w\"> </span>    builtins: BuiltinTypes,\n<span class=\"w\"> </span>    /// Map from module name to ModuleEnv for resolving e_lookup_external expressions\n<span class=\"w\"> </span>    imported_modules: std.StringHashMap(*const can.ModuleEnv),\n<span class=\"gi\">+    def_stack: std.array_list.Managed(DefInProgress),</span>\n\n<span class=\"w\"> </span>    pub fn init(allocator: std.mem.Allocator, env: *can.ModuleEnv, builtin_types: BuiltinTypes, imported_modules_map: ?*const std.AutoHashMap(base_pkg.Ident.Idx, can.Can.AutoImportedType)) !Interpreter {\n<span class=\"w\"> </span>        // Convert imported modules map to other_envs slice\n<span class=\"gu\">@@ -184,6 +190,7 @@ pub const Interpreter = struct {</span>\n<span class=\"w\"> </span>            .scratch_tags = try std.array_list.Managed(types.Tag).initCapacity(allocator, 8),\n<span class=\"w\"> </span>            .builtins = builtin_types,\n<span class=\"w\"> </span>            .imported_modules = std.StringHashMap(*const can.ModuleEnv).init(allocator),\n<span class=\"gi\">+            .def_stack = try std.array_list.Managed(DefInProgress).initCapacity(allocator, 4),</span>\n<span class=\"w\"> </span>        };\n<span class=\"w\"> </span>        result.runtime_layout_store = try layout.Store.init(env, result.runtime_types);\n\n<span class=\"gu\">@@ -195,6 +202,14 @@ pub const Interpreter = struct {</span>\n<span class=\"w\"> </span>        return try self.evalExprMinimal(expr_idx, roc_ops, null);\n<span class=\"w\"> </span>    }\n\n<span class=\"gi\">+    fn registerDefValue(self: *Interpreter, expr_idx: can.CIR.Expr.Idx, value: StackValue) void {</span>\n<span class=\"gi\">+        if (self.def_stack.items.len == 0) return;</span>\n<span class=\"gi\">+        var top = &amp;self.def_stack.items[self.def_stack.items.len - 1];</span>\n<span class=\"gi\">+        if (top.expr_idx == expr_idx and top.value == null) {</span>\n<span class=\"gi\">+            top.value = value;</span>\n<span class=\"gi\">+        }</span>\n<span class=\"gi\">+    }</span>\n<span class=\"gi\">+</span>\n<span class=\"w\"> </span>    pub fn startTrace(self: *Interpreter) void {\n<span class=\"w\"> </span>        _ = self;\n<span class=\"w\"> </span>    }\n<span class=\"gu\">@@ -1236,6 +1251,7 @@ pub const Interpreter = struct {</span>\n<span class=\"w\"> </span>                // Expect a closure layout from type-to-layout translation\n<span class=\"w\"> </span>                if (closure_layout.tag != .closure) return error.NotImplemented;\n<span class=\"w\"> </span>                const value = try self.pushRaw(closure_layout, 0);\n<span class=\"gi\">+                self.registerDefValue(expr_idx, value);</span>\n<span class=\"w\"> </span>                // Initialize the closure header\n<span class=\"w\"> </span>                if (value.ptr) |ptr| {\n<span class=\"w\"> </span>                    const header: *layout.Closure = @ptrCast(@alignCast(ptr));\n<span class=\"gu\">@@ -1298,7 +1314,24 @@ pub const Interpreter = struct {</span>\n<span class=\"w\"> </span>                        for (all_defs) |def_idx| {\n<span class=\"w\"> </span>                            const def = self_interp.env.store.getDef(def_idx);\n<span class=\"w\"> </span>                            if (def.pattern == cap.pattern_idx) {\n<span class=\"gi\">+                                var k: usize = self_interp.def_stack.items.len;</span>\n<span class=\"gi\">+                                while (k &gt; 0) {</span>\n<span class=\"gi\">+                                    k -= 1;</span>\n<span class=\"gi\">+                                    const entry = self_interp.def_stack.items[k];</span>\n<span class=\"gi\">+                                    if (entry.pattern_idx == cap.pattern_idx) {</span>\n<span class=\"gi\">+                                        if (entry.value) |val| {</span>\n<span class=\"gi\">+                                            return val;</span>\n<span class=\"gi\">+                                        }</span>\n<span class=\"gi\">+                                    }</span>\n<span class=\"gi\">+                                }</span>\n<span class=\"w\"> </span>                                // Found the def! Evaluate it to get the captured value\n<span class=\"gi\">+                                const new_entry = DefInProgress{</span>\n<span class=\"gi\">+                                    .pattern_idx = def.pattern,</span>\n<span class=\"gi\">+                                    .expr_idx = def.expr,</span>\n<span class=\"gi\">+                                    .value = null,</span>\n<span class=\"gi\">+                                };</span>\n<span class=\"gi\">+                                self_interp.def_stack.append(new_entry) catch return null;</span>\n<span class=\"gi\">+                                defer _ = self_interp.def_stack.pop();</span>\n<span class=\"w\"> </span>                                return self_interp.evalMinimal(def.expr, ops) catch null;\n<span class=\"w\"> </span>                            }\n<span class=\"w\"> </span>                        }\n<span class=\"gu\">@@ -1309,14 +1342,16 @@ pub const Interpreter = struct {</span>\n<span class=\"w\"> </span>                for (caps, 0..) |cap_idx, i| {\n<span class=\"w\"> </span>                    const cap = self.env.store.getCapture(cap_idx);\n<span class=\"w\"> </span>                    field_names[i] = cap.name;\n<span class=\"gd\">-                    const captured_val = resolveCapture(self, cap, roc_ops) orelse return error.NotImplemented;</span>\n<span class=\"gd\">-                    field_layouts[i] = captured_val.layout;</span>\n<span class=\"gi\">+                    const cap_ct_var = can.ModuleEnv.varFrom(cap.pattern_idx);</span>\n<span class=\"gi\">+                    const cap_rt_var = try self.translateTypeVar(self.env, cap_ct_var);</span>\n<span class=\"gi\">+                    field_layouts[i] = try self.getRuntimeLayout(cap_rt_var);</span>\n<span class=\"w\"> </span>                }\n\n<span class=\"w\"> </span>                const captures_layout_idx = try self.runtime_layout_store.putRecord(field_layouts, field_names);\n<span class=\"w\"> </span>                const captures_layout = self.runtime_layout_store.getLayout(captures_layout_idx);\n<span class=\"w\"> </span>                const closure_layout = Layout.closure(captures_layout_idx);\n<span class=\"w\"> </span>                const value = try self.pushRaw(closure_layout, 0);\n<span class=\"gi\">+                self.registerDefValue(expr_idx, value);</span>\n\n<span class=\"w\"> </span>                // Initialize header\n<span class=\"w\"> </span>                if (value.ptr) |ptr| {\n<span class=\"gu\">@@ -3321,6 +3356,7 @@ pub const Interpreter = struct {</span>\n<span class=\"w\"> </span>        self.stack_memory.deinit();\n<span class=\"w\"> </span>        self.bindings.deinit();\n<span class=\"w\"> </span>        self.active_closures.deinit();\n<span class=\"gi\">+        self.def_stack.deinit();</span>\n<span class=\"w\"> </span>        self.scratch_tags.deinit();\n<span class=\"w\"> </span>        self.imported_modules.deinit();\n<span class=\"w\"> </span>    }\n</code></pre></div>",
        "id": 546294666,
        "sender_full_name": "Anton",
        "timestamp": 1761068415
    },
    {
        "content": "<p>Can you confirm that this is a sensible fix <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span>?</p>",
        "id": 546295134,
        "sender_full_name": "Anton",
        "timestamp": 1761068567
    },
    {
        "content": "<p>I put it up in <a href=\"https://github.com/roc-lang/roc/pull/8315\">https://github.com/roc-lang/roc/pull/8315</a></p>",
        "id": 546296370,
        "sender_full_name": "Anton",
        "timestamp": 1761068937
    },
    {
        "content": "<p>A fix for a roc check fail is in the interpreter? I didn't realize roc check hit the interpreter. Interesting.</p>",
        "id": 546309589,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1761073774
    },
    {
        "content": "<p>Just ran the fix to double check. It's fixed!</p>\n<p>Color me impressed.</p>",
        "id": 546310273,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1761074024
    },
    {
        "content": "<p>yeah the interpreter runs to do compile-time evaluation of constants</p>",
        "id": 546316392,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1761076496
    },
    {
        "content": "<p>that exists already! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 546316432,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1761076513
    },
    {
        "content": "<p>crashes and dbgs and failed expects all get reported at build time as part of <code>roc check</code>'s normal output</p>",
        "id": 546316520,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1761076544
    },
    {
        "content": "<p>This was broken before compile time evaluation of constants existed (assuming that just got added with the PR shared the other day). I wonder if compile time evaluation of constants shifted the issue.</p>\n<p>Either way, awesome it is fixed</p>",
        "id": 546321328,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1761078367
    }
]