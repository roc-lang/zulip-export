[
    {
        "content": "<p>I could use some help with an error I'm running into, while working on adding the <code>Sort</code> ability.</p>\n<p>This is my branch:<br>\n<a href=\"https://github.com/roc-lang/roc/compare/main...jwoudenberg:roc:main\">https://github.com/roc-lang/roc/compare/main...jwoudenberg:roc:main</a></p>\n<p>This is the command I'm running: <code>cargo test-gen-llvm -vvv</code></p>\n<p>This is the error I get:</p>\n<div class=\"codehilite\"><pre><span></span><code>[roc_load 0.0.1] A builtin module contains a signature without implementation for `List.structuralCompare`\n</code></pre></div>\n<p>I managed to fix the error, by choosing <code>108</code> for the <code>identId</code> of <code>List.structuralCompare</code>. The error showed when I was using <code>91</code>, which is the ident of the previous entry plus one. I'm trying to find out where that 108 is coming from.</p>\n<p>Of potential interest: when I print the symbol I added for <code>structuralCompare</code>, I get this:</p>\n<div class=\"codehilite\"><pre><span></span><code>[roc_load 0.0.1] [crates/compiler/can/src/builtins.rs:114:1] Symbol::LIST_STRUCTURAL_COMPARE = `List.repeatHelp`\n</code></pre></div>\n<p>I don't know why it's thinking <code>List.repeatHelp</code> is involved.</p>\n<p>Anyone got any ideas?</p>",
        "id": 439349984,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1716033514
    },
    {
        "content": "<p>The previous error still exists, but can be worked around. But I've ran into a different error trying to implement a code generation test that I'm hoping someone recognizes :).</p>\n<p>This is the initial test I wrote (<a href=\"https://github.com/jwoudenberg/roc/commit/bdb55f43c284ff45ebe0766689f5e834f86edac5\">commit</a>):</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"o\">#</span><span class=\"p\">[</span><span class=\"n\">test</span><span class=\"p\">]</span>\n<span class=\"o\">#</span><span class=\"p\">[</span><span class=\"n\">cfg</span><span class=\"p\">(</span><span class=\"n\">any</span><span class=\"p\">(</span><span class=\"n\">feature</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"s\">\"gen-llvm\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">feature</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"s\">\"gen-dev\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">feature</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"s\">\"gen-wasm\"</span><span class=\"p\">))]</span>\n<span class=\"nf\">fn</span><span class=\"w\"> </span><span class=\"n\">compare_i64</span><span class=\"nb\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">assert_evals_to</span><span class=\"o\">!</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">indoc</span><span class=\"o\">!</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"n\">r</span><span class=\"o\">#</span><span class=\"s\">\"</span>\n<span class=\"s\">                i : I64</span>\n<span class=\"s\">                i = 1</span>\n\n<span class=\"s\">                j : I64</span>\n<span class=\"s\">                j = 2</span>\n\n<span class=\"s\">                when List.compare i j is</span>\n<span class=\"s\">                    Equals -&gt; 0</span>\n<span class=\"s\">                    GreaterThan -&gt; 1</span>\n<span class=\"s\">                    LessThan -&gt; 2</span>\n<span class=\"s\">            \"</span><span class=\"o\">#</span>\n<span class=\"w\">        </span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"mi\">2</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">i64</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Then I run it:</p>\n<div class=\"codehilite\"><pre><span></span><code>test_gen cargo test-gen-llvm gen_compare\n</code></pre></div>\n<p>It fails with this error: <code>constructor must be known in the indexable type if we are exhautiveness checking</code></p>\n<p>I'm not sure why exhaustiveness would be a problem, given the following type signature for <code>compare</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kt\">Sort</span><span class=\"w\"> </span><span class=\"n\">implements</span>\n<span class=\"w\">    </span><span class=\"n\">compare</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">LessThan</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Equal</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">GreaterThan</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"kr\">where</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">implements</span><span class=\"w\"> </span><span class=\"kt\">Sort</span>\n</code></pre></div>\n<p>One work around I tried is adding a fallback to the <code>when</code> statement:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"w\">                </span><span class=\"n\">when</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"o\">.</span><span class=\"n\">compare</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"n\">is</span>\n<span class=\"w\">                    </span><span class=\"kt\">Equals</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">                    </span><span class=\"kt\">GreaterThan</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">                    </span><span class=\"kt\">LessThan</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"w\">                    </span><span class=\"kr\">_</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">3</span>\n</code></pre></div>\n<p>This results in the error: <code>If resolving a specialization, the specialization must be known to typecheck.</code></p>\n<p>As a third option I tried to avoid using a <code>when</code> statement entirely:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"o\">#</span><span class=\"p\">[</span><span class=\"n\">test</span><span class=\"p\">]</span>\n<span class=\"o\">#</span><span class=\"p\">[</span><span class=\"n\">cfg</span><span class=\"p\">(</span><span class=\"n\">any</span><span class=\"p\">(</span><span class=\"n\">feature</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"s\">\"gen-llvm\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">feature</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"s\">\"gen-dev\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">feature</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"s\">\"gen-wasm\"</span><span class=\"p\">))]</span>\n<span class=\"nf\">fn</span><span class=\"w\"> </span><span class=\"n\">compare_i64</span><span class=\"nb\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">assert_evals_to</span><span class=\"o\">!</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">indoc</span><span class=\"o\">!</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"n\">r</span><span class=\"o\">#</span><span class=\"s\">\"</span>\n<span class=\"s\">                i : I64</span>\n<span class=\"s\">                i = 1</span>\n\n<span class=\"s\">                j : I64</span>\n<span class=\"s\">                j = 2</span>\n\n<span class=\"s\">                List.compare i j == LessThan</span>\n<span class=\"s\">            \"</span><span class=\"o\">#</span>\n<span class=\"w\">        </span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">true</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">bool</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Another error:</p>\n<div class=\"codehilite\"><pre><span></span><code>assertion `left == right` failed: (LambdaSet([], ^&lt;2861&gt;), Func([&lt;68&gt;Opaque(`Num.Num`, [65], &lt;65&gt;Opaque(`Num.Integer`, [2854], &lt;2854&gt;Opaque(`Num.Signed64`, [], &lt;2851&gt;EmptyTagUnion))),&lt;70&gt;Opaque(`Num.Num`, [65], &lt;65&gt;Opaque(`Num.Integer`, [2854], &lt;2854&gt;Opaque(`Num.Signed64`, [], &lt;2851&gt;EmptyTagUnion))),], &lt;2863=73&gt;LambdaSet([], ^&lt;2861&gt;), &lt;74&gt;[&#39;Equal&#39; , &#39;GreaterThan&#39; , &#39;LessThan&#39; , ]&lt;Any(2865)&gt;))\n  left: 0\n right: 1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>\n<p>It doesn't matter by the way if I assert against <code>false</code> instead of <code>true</code>, the error is the same.</p>\n<p>The error messages come from code in the specialization and exhaustiveness modules. I'm sort of hoping to avoid tracing the error through there, partly because I'm currently unfamiliar with that code, also because I assume the problem is with the code I wrote setting up the <code>Sort</code> ability in the PR, and not with specialization/exchaustiveness checking logic itself.</p>\n<p>One blind spot in my understanding: I don't currently understand where the <code>Num a</code> types (or other primitive types) are hooked up with an implementation of <code>Sort</code>. I've not found that for the <code>Eq</code> ability either, which is used as an example for <code>Sort</code>. Maybe that's the piece that's missing?</p>\n<p>Any ideas would be greatly appreciated, even vague ones with regards to a direction where I might take a look!</p>\n<p>cc <span class=\"user-mention\" data-user-id=\"691288\">@Ben Plotke</span></p>",
        "id": 444961603,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1718532010
    },
    {
        "content": "<p>hm, maybe <span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> or <span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> might know?</p>",
        "id": 444984072,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1718550850
    },
    {
        "content": "<p>how have you defined the implementation for compare for numbers?</p>",
        "id": 444984692,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1718551231
    },
    {
        "content": "<p>I am not sure.</p>\n<p>There's a <code>structuralCompare</code> function, and it has an implementation for int comparisons in <code>gen_llvm</code>. Comparisons for other types and other backends aren't in yet, I was hoping I might be able to test what we have before adding those.</p>\n<p>There's no explicit implementation of <code>Sort</code> in <code>Num.roc</code>, do I need to add one? There's none for <code>Eq</code> either (what I've been using as a template for this feature).</p>",
        "id": 444986817,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1718552533
    },
    {
        "content": "<blockquote>\n<p>I don't know why it's thinking <code>List.repeatHelp</code> is involved.</p>\n</blockquote>\n<p>This is probably because the numbering is out of order</p>\n<div class=\"codehilite\"><pre><span></span><code>        90 LIST_COMPARE: &quot;compare&quot;\n        unexposed 108 LIST_STRUCTURAL_COMPARE: &quot;structuralCompare&quot;\n</code></pre></div>\n<p>it should go 90-&gt;91</p>",
        "id": 444987966,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1718553321
    },
    {
        "content": "<p>I think the reason you're seeing the other error is because you have not instructed the compiler to lower calls from <code>compare</code> to <code>structuralCompare</code></p>",
        "id": 444988069,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1718553365
    },
    {
        "content": "<p><code>compare</code> has no implementation so things blow up</p>",
        "id": 444988084,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1718553377
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/pull/4290\">https://github.com/roc-lang/roc/pull/4290</a> might be helpful as a template</p>",
        "id": 444988118,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1718553404
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"454654\">Ayaz Hafiz</span> <a href=\"#narrow/stream/395097-compiler-development/topic/builtin.20contains.20a.20signature.20without.20implementation/near/444987966\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>I don't know why it's thinking <code>List.repeatHelp</code> is involved.</p>\n</blockquote>\n<p>This is probably because the numbering is out of order</p>\n<p>it should go 90-&gt;91</p>\n</blockquote>\n<p>Using 108 is the workaround for getting rid of the <code>List.repeatHelp</code> error. I had it 91 originally, and that's when the error was happening!</p>",
        "id": 444996531,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1718557987
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"454654\">Ayaz Hafiz</span> <a href=\"#narrow/stream/395097-compiler-development/topic/builtin.20contains.20a.20signature.20without.20implementation/near/444988118\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/roc-lang/roc/pull/4290\">https://github.com/roc-lang/roc/pull/4290</a> might be helpful as a template</p>\n</blockquote>\n<p>Thank you!</p>",
        "id": 444997519,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1718558586
    }
]