[
    {
        "content": "<p>I want to make this thread so I can ask for pointed feedback on the style of the formatter and any general questions about expectations around formatting</p>",
        "id": 506122812,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1742211087
    },
    {
        "content": "<p>I have this EXTREMELY OVER COMMENTED block of code.  Does this look how people could expect it to look if someone had typed this in?  I.e., should this parse and format stably? (Please ignore \\\\ for zig multiline comments)</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">stmt</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\import # Comment here</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    pkg # And here</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        .Something # Another one</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\            exposing # Still commenting</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\                [ # I really like comments</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\                    func # Commenting for life</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\                        as # Even here</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\                            function, # And here</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\                    Type # Commenting again</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\                        as # And again...</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\                            ValueCategory, # Why can't I stop?</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\                    Custom # This is getting ridiculous</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\                        .* # Even Uncle Bob is emabarrased</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\                ] # And...I'm done</span>\n<span class=\"p\">;</span>\n</code></pre></div>",
        "id": 506123179,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1742211170
    },
    {
        "content": "<p>Seems not unreasonable</p>",
        "id": 506124483,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1742211518
    },
    {
        "content": "<p>I guess the big question is:  is the principle that in a continuation where there is a comment not at end of line (and not in some collection) that we indent on the next newline and continue?</p>",
        "id": 506125021,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1742211655
    },
    {
        "content": "<p>Or should things like qualifier and identifier proceed at the same level of indent?</p>",
        "id": 506125429,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1742211754
    },
    {
        "content": "<p>The alternative would be:</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">stmt</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\import # Comment here</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    pkg # And here</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    .Something # Another one</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        exposing # Still commenting</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\            [ # I really like comments</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\                func # Commenting for life</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\                    as # Even here</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\                    function, # And here</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\                Type # Commenting again</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\                    as # And again...</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\                    ValueCategory, # Why can't I stop?</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\                Custom # This is getting ridiculous</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\                    .* # Even Uncle Bob is emabarrased</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\            ] # And...I'm done</span>\n<span class=\"p\">;</span>\n</code></pre></div>",
        "id": 506131533,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1742213251
    },
    {
        "content": "<p>I'll also write up an example with complex binops as well.  There are SO many places where comments could be inserted there</p>",
        "id": 506131871,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1742213341
    },
    {
        "content": "<p>On balance, less rightward drift seems good - but this is such an unusual situation that Iâ€™m not particularly concerned about it</p>",
        "id": 506134438,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1742213974
    },
    {
        "content": "<p>I'd push for less rightward drift whenever consistently possible, so the second example is preferable to me</p>",
        "id": 506275070,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1742250817
    },
    {
        "content": "<p>Hmm. I think it should be consistent with what we would do for a function chain</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">x</span>\n<span class=\"w\">    </span><span class=\"o\">.</span><span class=\"n\">y</span>\n<span class=\"w\">    </span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"o\">.</span><span class=\"n\">run!</span><span class=\"p\">()</span>\n</code></pre></div>\n<p>So I would vote for this:</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">stmt</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\import # Comment here</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    pkg # And here</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        .ExtraNesting # not sure this is actualy valid, but just an example of more nesting</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        .Something # Another one</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\            exposing # Still commenting</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\                [ # I really like comments</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\                    func # Commenting for life</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\                        as # Even here</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\                        function, # And here</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\                    Type # Commenting again</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\                        as # And again...</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\                        ValueCategory, # Why can't I stop?</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\                    Custom # This is getting ridiculous</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\                        .* # Even Uncle Bob is emabarrased</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\                ] # And...I'm done</span>\n<span class=\"p\">;</span>\n</code></pre></div>",
        "id": 506276391,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742251320
    },
    {
        "content": "<p>yeah I agree with that</p>",
        "id": 506277058,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1742251570
    },
    {
        "content": "<p>I don't think anyone is actually going to write comments in all these places, so I don't think the quantity of indentation really matters here</p>",
        "id": 506277153,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1742251609
    },
    {
        "content": "<p>I think what's more important is that if you put comments in a small subset of these places, it looks consistent with what we do elsewhere</p>",
        "id": 506277220,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1742251646
    },
    {
        "content": "<p>Hi, first thanks to <span class=\"user-mention\" data-user-id=\"639239\">@JRI98</span> for fixing the remaining multiline string issues that I caused.</p>\n<p>While looking at the formatter I saw the following remaining issues, that I would like to confirm before taking a shot at them:</p>\n<p>The formatter does not make sure files end in a newline. According to POSIX they should. But this will change probably all snapshots when implementing.</p>\n<p>The formatter removes everything that is malformed. I think it should just put out the original code for malformed nodes. I'm not sure how easy that is to implement, but I could imagine that it's not that easy, because I noticed the ranges of the malformed nodes is not always what I would expect.</p>",
        "id": 536179002,
        "sender_full_name": "Fabian Schmalzried",
        "timestamp": 1756194835
    },
    {
        "content": "<p>Hello. I actually ended up breaking more stuff <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span><br>\nBut I have a new PR that should finally fix it <a href=\"https://github.com/roc-lang/roc/issues/8225\">#8225</a>. It should be easier if we track if the last printed node was a multiline string.</p>\n<p>Regarding the newline at the end of the file, sounds good to me.</p>\n<p>When it comes to malformed nodes, I have thought about it before, but it is a particularity of the snapshots, because when formatting a file outside of them, the formatter doesn't change the file if it doesn't parse correctly.<br>\nWhat we could do is mimic the same behavior for snapshots and only try to format if the input parses correctly. And it has been a source of fuzz crashes in the past, when it practice they wouldn't happen outside of the snapshotting environment.</p>",
        "id": 536181433,
        "sender_full_name": "JRI98",
        "timestamp": 1756195697
    },
    {
        "content": "<p>Ok, I will leave the malformed nodes alone, just not formatting sounds way better.</p>\n<p>I will have a look at the EOF newline. Probably easy to do. I think it's best to also update the snapshot tool to include the newline as part of the source and expect it as part of the formatted output. That should reduce the changes to the snapshots.</p>",
        "id": 536184491,
        "sender_full_name": "Fabian Schmalzried",
        "timestamp": 1756196832
    }
]