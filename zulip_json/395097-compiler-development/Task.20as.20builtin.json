[
    {
        "content": "<p>I have been thinking about how we could get an intermediate step towards Task as builtin.</p>\n<p>What if we just made <code>InternalTask</code> a builtin. We could assume that all platforms will have an <code>Effects.roc</code> file. </p>\n<p>This would mean that users could write <code>main = Stdout.line! \"foo\"</code> without importing <code>pf.Task</code>, and also the platform main wouldn't need to import <code>Task</code> either I think.  </p>\n<div class=\"codehilite\"><pre><span></span><code>interface InternalTask\n    exposes [Task, fromEffect, toEffect, ok, err]\n    imports [Effect.{ Effect }]\n\nTask ok err := Effect (Result ok err)\n\nok : a -&gt; Task a *\nok = \\a -&gt; @Task (Effect.always (Ok a))\n\nerr : a -&gt; Task * a\nerr = \\a -&gt; @Task (Effect.always (Err a))\n\nfromEffect : Effect (Result ok err) -&gt; Task ok err\nfromEffect = \\effect -&gt; @Task effect\n\ntoEffect : Task ok err -&gt; Effect (Result ok err)\ntoEffect = \\@Task effect -&gt; effect\n</code></pre></div>",
        "id": 434960491,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713870869
    },
    {
        "content": "<p>I think we'd need to name it <code>Task</code> rather than <code>InternalTask</code>, but yeah that could work!</p>",
        "id": 434960641,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713870926
    },
    {
        "content": "<p>(otherwise if you write <code>Task.mapErr</code> it wouldn't work)</p>",
        "id": 434960705,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713870948
    },
    {
        "content": "<p>Ahk, in that case we would need to include all the things... like <code>loop</code>, <code>mapErr</code> etc and this would be common accross all platforms.</p>",
        "id": 434960929,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713871010
    },
    {
        "content": "<p>yeah that'll happen with the transition to builtin <code>Task</code> anyway <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 434967515,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713873347
    },
    {
        "content": "<p>I was taking a look at what is necessary to implement Task as a builtin going off of this message:<br>\n<span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/304902-show-and-tell/topic/draft.20article.20about.20!.20syntax/near/434593822\">said</a>:</p>\n<blockquote>\n<p>yeah basically task as builtin (on its own) just requires:</p>\n<ul>\n<li>add the <code>Task</code> module to builtins</li>\n<li>instead of generating <code>Effect</code> in <code>hosted</code> modules we generate <code>Task</code></li>\n<li>hosts have to update their effect implementations accordingly (basically now they'll always be dealing with a <code>Result</code>)</li>\n</ul>\n</blockquote>\n<p>If I'm understanding correctly, in the platforms we need to update <code>Effect.roc</code> to generate <code>Task</code> instead of <code>Effect</code>. This is just renaming things right?</p>\n<p>Right now the Task module uses Effect and InternalTask from the platform. What I don't understand is how this will work once the Task module no longer has access to the platform. Won't it need to know about the Task type that is defined in <code>Effect.roc</code> because it is opaque? </p>\n<p>I would appreciate other details about what needs to be done also <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 438917211,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1715826487
    },
    {
        "content": "<p>Is any generation of effectful code/tasks in hosted modules required if task is a builtin? I would have guessed it isn't but maybe im missing something</p>",
        "id": 439283409,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1715975534
    },
    {
        "content": "<p>Yeah, I think the idea is that hosted modules wouldnâ€™t generate any types, and their members could return <code>Task</code> directly.</p>",
        "id": 439304162,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1715987608
    },
    {
        "content": "<p>As for actually implementing this, yeah you could copy over the implementation of task into the standard library. You'll also want to define the <code>after</code> and so on methods in Roc source, which you can find as generated by the compiler today here <a href=\"https://github.com/roc-lang/roc/blob/main/crates/compiler/can/src/effect_module.rs\">https://github.com/roc-lang/roc/blob/main/crates/compiler/can/src/effect_module.rs</a></p>",
        "id": 439305923,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1715988993
    },
    {
        "content": "<p>Okay cool, that makes sense! I got nerd sniped by another project, but once I finish that I might try to implement this. If anyone else wants to do it before I get to it, go for it</p>",
        "id": 439479282,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1716165938
    },
    {
        "content": "<p>What would be a good way to call the functions created in <a href=\"http://effect_module.rs\">effect_module.rs</a> from the builtins? Is there already infrastructure setup to do this or will new stuff need to be put in place?</p>",
        "id": 444132539,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1718158434
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> I think we need to add you Heap implementation to the False interpreter host. It's so we can handle refcounting on the FileHandle correctly as I suspect that is causing our issue there. </p>\n<p>The added benefit is that if we remove the basic-cli tests from roc-lang/roc, at least we will have a good way to continue testing that and keep it in sync with roc.</p>",
        "id": 466129639,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724974941
    },
    {
        "content": "<p>There's probably a way to do it without all that extra ceremony, i.e. convert a <code>*mut BufReader&lt;File&gt;</code> to a <code>RocBox&lt;()&gt;</code>... but my rust foo isn't good enough yet.</p>",
        "id": 466129727,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724975002
    },
    {
        "content": "<p>I'll try it</p>",
        "id": 466130024,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724975224
    },
    {
        "content": "<p>This hasn't really helped -- <a href=\"https://github.com/roc-lang/roc/commit/fc8c46beee6c9b6ae7f54b50a322c2e6bab90390\">https://github.com/roc-lang/roc/commit/fc8c46beee6c9b6ae7f54b50a322c2e6bab90390</a></p>\n<div class=\"codehilite\"><pre><span></span><code>$ cargo test -p roc_cli cli_run::false_interpreter\n    Finished test [unoptimized + debuginfo] target(s) in 0.51s\n     Running unittests src/lib.rs (target/debug/deps/roc_cli-7e72f520dc480795)\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 4 filtered out; finished in 0.00s\n\n     Running tests/cli_run.rs (target/debug/deps/cli_run-f57f6c0a8cfd68c7)\n\nrunning 1 test\ntest cli_run::false_interpreter ... FAILED\n\nfailures:\n\n---- cli_run::false_interpreter stdout ----\nthread &#39;cli_run::false_interpreter&#39; panicked at crates/cli/tests/cli_run.rs:314:17:\n&gt; expected output to end with:\n1414\n&gt; but instead got:\n\n&gt; stderr was:\n[src/lib.rs:256:11] File::open(string) = Ok(\n    File {\n        fd: 3,\n        path: &quot;/Users/luke/Documents/GitHub/roc/examples/cli/false-interpreter/examples/sqrt.false&quot;,\n        read: true,\n        write: false,\n    },\n)\n[src/lib.rs:83:5] &amp;format!(&quot;Panic: {}&quot;, &amp;*msg) = &quot;Panic: unreachable: File.open&quot;\nApplication hit a panic: unreachable: File.open\n\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>",
        "id": 466131664,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724976285
    },
    {
        "content": "<p>At this point, I should probably figure out cargo and make that a proper rust psckage</p>",
        "id": 466132025,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724976474
    },
    {
        "content": "<p>Or at least make it downloadable from a github url</p>",
        "id": 466132082,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724976486
    },
    {
        "content": "<p>We could add it as a crate in roc-lang/roc, and then it's easy to use from there</p>",
        "id": 466132117,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724976510
    },
    {
        "content": "<p>Makes sense, because it's specific to <code>RocBox</code>.</p>",
        "id": 466132207,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724976583
    },
    {
        "content": "<p>That would work!</p>",
        "id": 466132377,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724976682
    },
    {
        "content": "<p>Oh yeah. That sounds like a good idea</p>",
        "id": 466134348,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724978077
    },
    {
        "content": "<p>I'm an a branch off from Task as builtin, I'll move it into a crate. </p>\n<p>I have fixed a couple of things up in the False platform, but haven't resolved the main issue.</p>",
        "id": 466134433,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724978136
    },
    {
        "content": "<p>I'm at the stage where I think I need to inspect the LLVM IR to see what roc is actually generating for the effect roc_fx_openFile, though I dont' fully know how to do that properly.</p>",
        "id": 466134526,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724978200
    },
    {
        "content": "<p>Should just be <code>build --emit-llvm-ir</code> then search for <code>roc_fx_openFile</code></p>",
        "id": 466134602,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724978268
    },
    {
        "content": "<p>Oh yeah, I've got that part ok... it's the knowing how to interpret the IR</p>",
        "id": 466134657,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724978287
    },
    {
        "content": "<p><span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 466134661,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724978289
    },
    {
        "content": "<p>Paste the function signature here and we can help guess</p>",
        "id": 466134806,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724978408
    },
    {
        "content": "<h2>PlatformTasks.roc</h2>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">FileHandle</span><span class=\"w\"> </span><span class=\"nf\">:=</span><span class=\"w\"> </span><span class=\"kt\">Box</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"nv\">openFile</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"kt\">FileHandle</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n</code></pre></div>\n<h2><code>lib.rs</code></h2>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">roc_fx_openFile</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">RocStr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">RocResult</span><span class=\"o\">&lt;</span><span class=\"n\">RocBox</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span>\n</code></pre></div>\n<h2>False.ll</h2>\n<div class=\"codehilite\" data-code-language=\"LLVM\"><pre><span></span><code><span class=\"k\">declare</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"m\">7</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"vg\">@roc_fx_openFile</span><span class=\"p\">(</span><span class=\"kt\">ptr</span><span class=\"p\">)</span>\n\n<span class=\"k\">define</span><span class=\"w\"> </span><span class=\"k\">internal</span><span class=\"w\"> </span><span class=\"k\">fastcc</span><span class=\"w\"> </span><span class=\"k\">void</span><span class=\"w\"> </span><span class=\"vg\">@roc_fx_openFile_fastcc_wrapper</span><span class=\"p\">(</span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%1</span><span class=\"p\">)</span>\n<span class=\"nl\">entry:</span>\n<span class=\"w\">  </span><span class=\"nv\">%tmp</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">call</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"m\">7</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"vg\">@roc_fx_openFile</span><span class=\"p\">(</span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%0</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!117</span>\n<span class=\"w\">  </span><span class=\"k\">store</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"m\">7</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nv\">%tmp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!117</span>\n<span class=\"w\">  </span><span class=\"k\">ret</span><span class=\"w\"> </span><span class=\"k\">void</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!117</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">define</span><span class=\"w\"> </span><span class=\"k\">internal</span><span class=\"w\"> </span><span class=\"k\">fastcc</span><span class=\"w\"> </span><span class=\"k\">void</span><span class=\"w\"> </span><span class=\"vg\">@PlatformTasks_task_closure_openFile_e93bf924107d8e1718c9a20bb89a13fa86198933bf2155d2785223e43180</span><span class=\"p\">({}</span><span class=\"w\"> </span><span class=\"nv\">%\"48\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%closure_arg_openFile_0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!116</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"nl\">entry:</span>\n<span class=\"w\">  </span><span class=\"nv\">%result_value</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">alloca</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"m\">7</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span>\n<span class=\"w\">  </span><span class=\"k\">call</span><span class=\"w\"> </span><span class=\"k\">fastcc</span><span class=\"w\"> </span><span class=\"k\">void</span><span class=\"w\"> </span><span class=\"vg\">@roc_fx_openFile_fastcc_wrapper</span><span class=\"p\">(</span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%closure_arg_openFile_0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"k\">nonnull</span><span class=\"w\"> </span><span class=\"nv\">%result_value</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!117</span>\n<span class=\"w\">  </span><span class=\"k\">call</span><span class=\"w\"> </span><span class=\"k\">fastcc</span><span class=\"w\"> </span><span class=\"k\">void</span><span class=\"w\"> </span><span class=\"vg\">@\"#Attr_#dec_7\"</span><span class=\"p\">(</span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%closure_arg_openFile_0</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!117</span>\n<span class=\"w\">  </span><span class=\"k\">call</span><span class=\"w\"> </span><span class=\"k\">void</span><span class=\"w\"> </span><span class=\"vg\">@llvm.memcpy.p0.p0.i64</span><span class=\"p\">(</span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"k\">noundef</span><span class=\"w\"> </span><span class=\"k\">nonnull</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span><span class=\"w\"> </span><span class=\"k\">dereferenceable</span><span class=\"p\">(</span><span class=\"m\">16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"k\">noundef</span><span class=\"w\"> </span><span class=\"k\">nonnull</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span><span class=\"w\"> </span><span class=\"k\">dereferenceable</span><span class=\"p\">(</span><span class=\"m\">16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">%result_value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"m\">16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i1</span><span class=\"w\"> </span><span class=\"k\">false</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!117</span>\n<span class=\"w\">  </span><span class=\"k\">ret</span><span class=\"w\"> </span><span class=\"k\">void</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!117</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 466135051,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724978583
    },
    {
        "content": "<p>That looks correct to me</p>",
        "id": 466137540,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724980463
    },
    {
        "content": "<p>And this looks ok too right?</p>\n<div class=\"codehilite\"><pre><span></span><code>Handle := PlatformTasks.FileHandle\n\nopen : Str -&gt; Task Handle *\nopen = \\path -&gt;\n    PlatformTasks.openFile path\n    |&gt; Task.map @Handle\n    |&gt; Task.mapErr \\{} -&gt; crash &quot;unreachable: File.open&quot;\n</code></pre></div>",
        "id": 466137822,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724980682
    },
    {
        "content": "<p>I'm running out of ideas here... I'm thinking the problem must be inside roc at this point.</p>",
        "id": 466137943,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724980766
    },
    {
        "content": "<p>Ok I've pushed the investigation stuff to <a href=\"https://github.com/roc-lang/roc/tree/builtin-task-wip\">https://github.com/roc-lang/roc/tree/builtin-task-wip</a></p>",
        "id": 466139005,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724981465
    },
    {
        "content": "<p>I didn't want to force push onto Sam's branch in case we decide we don't want to go this path.</p>",
        "id": 466139023,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724981484
    },
    {
        "content": "<p>Anton had reverted Sam's last change, and hasn't had a chance to look at this since then.</p>",
        "id": 466139049,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724981508
    },
    {
        "content": "<p>Okay, so I might have it working??</p>",
        "id": 466139120,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724981543
    },
    {
        "content": "<p>I did the AtomicU64 trick for file handle keys in a static hashmap</p>",
        "id": 466139185,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724981573
    },
    {
        "content": "<p>But when I return <code>Task U64 {}</code>, there's a segfault. When I return <code>Task {} {}</code>, it works.</p>",
        "id": 466139218,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724981603
    },
    {
        "content": "<p>Interesting... checkout the changes I made to main on <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> I fixed an issue around calling <code>main</code> in there</p>",
        "id": 466139244,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724981625
    },
    {
        "content": "<p>So I just have to figure this last issue out</p>",
        "id": 466139247,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724981631
    },
    {
        "content": "<p>you could <code>git cherry-pick e60450dc9617465e8b1223a266d59e266c362914</code> probably, I put it all in that one commit</p>",
        "id": 466139325,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724981689
    },
    {
        "content": "<p>Doing that now!</p>",
        "id": 466139649,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724981910
    },
    {
        "content": "<p>Ok, Sam's latest (commit 74f9b993887a4a8f5096b70394a0446faf61805c) on my linux x64 dev machine native (not nix)</p>\n<p>Just the false interpreter failure.</p>\n<div class=\"codehilite\"><pre><span></span><code>$ cargo test -p roc_cli\n---- cli_run::false_interpreter stdout ----\nthread &#39;cli_run::false_interpreter&#39; panicked at crates/cli/tests/cli_run.rs:261:29:\n`valgrind` exited with no exit code. valgrind stdout was: &quot;&quot;\n\nvalgrind stderr was: &quot;==42266==  If you believe this happened as a result of a stack\n==42266==  overflow in your program&#39;s main thread (unlikely but\n==42266==  possible), you can try to increase the size of the\n==42266==  main thread stack using the --main-stacksize= flag.\n==42266==  The main thread stack size used in this run was 8388608.\n&quot;\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\n\nfailures:\n    cli_run::false_interpreter\n\ntest result: FAILED. 57 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 37.77s\n</code></pre></div>",
        "id": 466141074,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724982498
    },
    {
        "content": "<p>I'll run the full test suite now, just to check everything else is ok</p>",
        "id": 466141138,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724982524
    },
    {
        "content": "<p>Oh, is this a new issue?</p>",
        "id": 466141253,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724982603
    },
    {
        "content": "<p>Like different than the one above</p>",
        "id": 466141276,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724982610
    },
    {
        "content": "<p>Yep</p>",
        "id": 466141278,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724982614
    },
    {
        "content": "<p>on which branch?</p>",
        "id": 466141300,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724982629
    },
    {
        "content": "<p>Not sure how so</p>",
        "id": 466141301,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724982630
    },
    {
        "content": "<p><a href=\"https://github.com/smores56/roc/tree/builtin-task\">https://github.com/smores56/roc/tree/builtin-task</a></p>",
        "id": 466141309,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724982641
    },
    {
        "content": "<p>The PR's branch</p>",
        "id": 466141321,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724982652
    },
    {
        "content": "<p>I think it's the same issue. I scrolled back up through my shell history and it looks the same as where we started today.</p>",
        "id": 466141617,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724982858
    },
    {
        "content": "<p>Welp</p>",
        "id": 466141626,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724982867
    },
    {
        "content": "<p>I presumed it was different because of the changes I made, I was not confident in it being different.</p>",
        "id": 466141665,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724982907
    },
    {
        "content": "<p>Well, this is consistent behaviour though. We now have two branches, with two different approaches to the platform side implementaiton and both kind of suggest an alignment bug inside roc</p>",
        "id": 466141766,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724982985
    },
    {
        "content": "<p>I haven't merged in main personally in a while</p>",
        "id": 466141800,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724983024
    },
    {
        "content": "<p>This might be the bug that Brendan already fixed for us, unless someone else has merged in for me</p>",
        "id": 466141818,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724983039
    },
    {
        "content": "<p>Let me try that</p>",
        "id": 466141821,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724983044
    },
    {
        "content": "<p>It didn't help on my other branch... I've got failures in two other test platforms though. Looks like this. </p>\n<div class=\"codehilite\"><pre><span></span><code>$ cargo test -p roc_cli interactive_effects\n&lt;---- snipped ---&gt;\nRoc standard library crashed with message\n\n    voided tag constructor is unreachable\n</code></pre></div>\n<p>What's interesting about this is that the effects platform is a zig platform. But it also currently has <code>mainForHost : Task {} []</code>. I'm going to update that and see it it changes the error message at all.</p>",
        "id": 466142304,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724983309
    },
    {
        "content": "<p>I don't exactly know how to handle roc giving the host a refcounted RocResult in zig. But I'll give it a go</p>",
        "id": 466142472,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724983419
    },
    {
        "content": "<p>Okay, I got the right crash back. Which isn't great, but it <em>should</em> be more fixable</p>",
        "id": 466142570,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724983474
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>failures:\n\n---- cli_run::false_interpreter stdout ----\nthread &#39;cli_run::false_interpreter&#39; panicked at crates/cli/tests/cli_run.rs:314:17:\n&gt; expected output to end with:\n1414\n&gt; but instead got:\n\n&gt; stderr was:\nApplication hit a panic: unreachable File.open\n\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>",
        "id": 466142588,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724983492
    },
    {
        "content": "<p>Pushed that version to the <code>builtin-task</code> branch</p>",
        "id": 466142624,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724983517
    },
    {
        "content": "<p>Yeah, this crash is really confusing me. At a quick glance to the llvm ir, it feels like the ir is correct</p>",
        "id": 466142748,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724983593
    },
    {
        "content": "<p>But nothing seems wrong with the platform or any of the types</p>",
        "id": 466142775,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724983616
    },
    {
        "content": "<p>Linux x64 native commit 9263986433531cb4c0f2d78729dbdbb706c6a5d5</p>\n<div class=\"codehilite\"><pre><span></span><code>$ cargo test -p roc_cli\n&lt;--- snip----&gt;\n---- cli_run::false_interpreter stdout ----\nthread &#39;cli_run::false_interpreter&#39; panicked at crates/cli/tests/cli_run.rs:261:29:\n`valgrind` exited with no exit code. valgrind stdout was: &quot;&quot;\n\nvalgrind stderr was: &quot;thread panicked while processing panic. aborting.\n&quot;\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\n\nfailures:\n    cli_run::false_interpreter\n\ntest result: FAILED. 57 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 38.66s\n</code></pre></div>",
        "id": 466142829,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724983669
    },
    {
        "content": "<p>Luke, are you on my latest commit?</p>",
        "id": 466142947,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724983748
    },
    {
        "content": "<p>The answer is yes</p>",
        "id": 466142962,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724983764
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>---- cli_run::false_interpreter stdout ----\nthread &#39;cli_run::false_interpreter&#39; panicked at crates/cli/tests/cli_run.rs:314:17:\n&gt; expected output to end with:\n1414\n&gt; but instead got:\nhandle id: (Err {})\n\n&gt; stderr was:\nApplication hit a panic: unreachable File.open\n\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>",
        "id": 466143008,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724983802
    },
    {
        "content": "<p>Currently, if I print out the returned <code>Result U64 {}</code> value, it returns <code>Err {}</code></p>",
        "id": 466143139,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724983888
    },
    {
        "content": "<p>And the Rust side calls <code>panic!</code> on failure, so it's not being returned</p>",
        "id": 466143296,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724983971
    },
    {
        "content": "<p><code>dbg!</code> verifies this</p>",
        "id": 466143316,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724983979
    },
    {
        "content": "<p>Yeah, feels like it should either be a bad mapping for the return type leading to roc reading the wrong memory as the returned result or a bug in roc leading to incorrect handling of the task after it is loaded</p>",
        "id": 466143640,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724984109
    },
    {
        "content": "<p>Could be the latter, but in most of my testing of this feature it was the former</p>",
        "id": 466143709,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724984140
    },
    {
        "content": "<p>Valgrind is angry <a href=\"https://gist.github.com/lukewilliamboswell/086f5cb00b923a6269fc16a2ea662104\">https://gist.github.com/lukewilliamboswell/086f5cb00b923a6269fc16a2ea662104</a></p>",
        "id": 466143725,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724984149
    },
    {
        "content": "<p>can you show the result from an optimized build as well?</p>",
        "id": 466143867,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724984193
    },
    {
        "content": "<p>Is this normal??</p>\n<div class=\"codehilite\"><pre><span></span><code>lb-dev@lb-dev:~/github/roc$ valgrind examples/cli/false-interpreter/False examples/cli/false-interpreter/examples/sqrt.false &amp;&gt; out2.txt\nAborted (core dumped)\nlb-dev@lb-dev:~/github/roc$ head out2.txt\n==71529== Memcheck, a memory error detector\n==71529== Copyright (C) 2002-2017, and GNU GPL&#39;d, by Julian Seward et al.\n==71529== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info\n==71529== Command: examples/cli/false-interpreter/False examples/cli/false-interpreter/examples/sqrt.false\n==71529==\n==71529== Conditional jump or move depends on uninitialised value(s)\n==71529==    at 0x14DAA9: ??? (in /home/lb-dev/github/roc/examples/cli/false-interpreter/False)\n==71529==    by 0x14C585: ??? (in /home/lb-dev/github/roc/examples/cli/false-interpreter/False)\n==71529==    by 0x4887B17: ??? (in /usr/lib/x86_64-linux-gnu/libc.so.6)\n==71529==    by 0x1FFEFFFBEF: ???\n</code></pre></div>",
        "id": 466144117,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724984286
    },
    {
        "content": "<p>Valgrind crashing?</p>",
        "id": 466144177,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724984311
    },
    {
        "content": "<p>Normal? no. Happens? on occasion</p>",
        "id": 466144351,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724984382
    },
    {
        "content": "<p>Here's an optimized version <a href=\"https://gist.github.com/lukewilliamboswell/ac614630e785ac6592497432031697d2\">https://gist.github.com/lukewilliamboswell/ac614630e785ac6592497432031697d2</a></p>",
        "id": 466144364,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724984388
    },
    {
        "content": "<p>So probably one of the things making valgrind angry is roc reading the wrong memory at some point leading to it seeing <code>Err {}</code> instead of the correct result from the file task</p>",
        "id": 466144805,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724984596
    },
    {
        "content": "<p>Is valgrind happy with all of the other examples? I would guess so cause you said this is the only failing test case?</p>",
        "id": 466144892,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724984646
    },
    {
        "content": "<p>I would guess this is some sort of regression with deeply nested lambdasets cause that is what makes false special (terible code with tons of copies, allocations, and lambdasets).</p>",
        "id": 466145039,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724984768
    },
    {
        "content": "<p>but not really sure at this piont</p>",
        "id": 466145064,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724984782
    },
    {
        "content": "<p>Also... <span aria-label=\"tear\" class=\"emoji emoji-1f972\" role=\"img\" title=\"tear\">:tear:</span> <code>[1]    1329912 IOT instruction  valgrind examples/cli/false-interpreter/False  &amp;&gt; out.txt</code> I can't even run valgrind on the false intrpreter from the <code>builtin-task-wip</code> branch</p>",
        "id": 466145131,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724984828
    },
    {
        "content": "<p>That's my other branch...</p>",
        "id": 466145234,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724984916
    },
    {
        "content": "<p>I've also got issues with other test platforms on that one</p>",
        "id": 466145247,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724984932
    },
    {
        "content": "<p>I'll get the proper branch, just more effort cause it is on a fork</p>",
        "id": 466145425,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724985012
    },
    {
        "content": "<p>Same on the proper branch....</p>",
        "id": 466146429,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724985497
    },
    {
        "content": "<p>Hmmmmm</p>",
        "id": 466146454,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724985518
    },
    {
        "content": "<p>let me fully clean...maybe a cached artifact or something</p>",
        "id": 466146473,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724985538
    },
    {
        "content": "<p>I think your theory of false-interpreter -&gt; unification issue could be it</p>",
        "id": 466146526,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724985580
    },
    {
        "content": "<p>In general, I feel like this is a real bug and not something false interpreter specific, but I also think that it may not be worth fixing (for this pr). It might get fixed with the future lambdaset cleanup work.</p>",
        "id": 466146695,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724985666
    },
    {
        "content": "<p>It might be a super big time sync....hard to say.</p>",
        "id": 466146737,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724985692
    },
    {
        "content": "<p>Do we have an extra level of closures in tasks now due to this change? Or is the builtin type still the same as with effect?</p>",
        "id": 466146840,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724985736
    },
    {
        "content": "<p>Literally a copy of Effect</p>",
        "id": 466146940,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724985783
    },
    {
        "content": "<p>The only difference being that we've changed to assume everything is a Result, instead of arbitrary types.</p>",
        "id": 466146958,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724985809
    },
    {
        "content": "<p>So not literally a copy of Effect, but literally a copy of Effect, if you catch my drift.</p>",
        "id": 466146976,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724985827
    },
    {
        "content": "<p>Yes, I'd like to see if fixing the lambda set issues will fix this, it feels unrelated.</p>",
        "id": 466147039,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724985858
    },
    {
        "content": "<p>If it is the only blocking test, I say table it. <span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span> this isn't something common in the wild when this goes out.</p>",
        "id": 466147287,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724986041
    },
    {
        "content": "<p>Okay, I'll disable it and let Anton know in the comments of the PR</p>",
        "id": 466147306,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724986066
    },
    {
        "content": "<p>My guess is we are holding lambdasets a little bit differently and they are breaking. There are a lot of captures and any one could be messed up. So let's look at it again when we fix up lambdasets</p>",
        "id": 466147401,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724986135
    },
    {
        "content": "<p>I'm afraid this may be related to Task as Builtin... so I'm posting here. </p>\n<p>I've been working on a PR to add support for Json Web Tokens to basic-webserver <br>\n<a href=\"https://github.com/roc-lang/basic-webserver/pull/72\">https://github.com/roc-lang/basic-webserver/pull/72</a></p>\n<p>I'm getting a random segfault using the builtin task branch. </p>\n<p>The builtin task PR is a branch on my fork, but I've made this PR on roc-lang/basic-webserver so it's easier to see -- but it's the last 2 commits and based off the builtin-task branch.</p>",
        "id": 466156294,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724991861
    },
    {
        "content": "<p>It doesn't do anything yet, just sets up the interface between roc and the host and stubs out the impl.</p>",
        "id": 466156830,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724992100
    },
    {
        "content": "<p>Yeah, I'm really hoping I've done something obviously wrong...</p>",
        "id": 466157166,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724992333
    },
    {
        "content": "<p>Ok, I might be doing something strange... built a clean version on linux and it's happy. So I must have a cache or something strange on mac. <span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span></p>",
        "id": 466157365,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724992463
    },
    {
        "content": "<p>Yeah false alarm <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> cleaned out my cargo cache and rebuilt everything and it's looking fine.</p>",
        "id": 466157566,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724992613
    },
    {
        "content": "<p>Yay</p>",
        "id": 466157605,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724992656
    },
    {
        "content": "<p>My heart</p>",
        "id": 466157692,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724992693
    },
    {
        "content": "<p>Sorry to do this to you guys.</p>",
        "id": 466157702,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724992705
    },
    {
        "content": "<p>Luckily you've already bled for this feature change, so I can't be mad</p>",
        "id": 466157742,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724992741
    },
    {
        "content": "<p>I don't think I'll be able to sleep until Anton hit's merge on that PR... <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 466157804,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724992793
    },
    {
        "content": "<p>I don't know why I keep testing things... I'm bound to find an issue.</p>",
        "id": 466157930,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724992822
    },
    {
        "content": "<p>There is something really messed up with our cargo setup for basic-webserver. </p>\n<p>I've been trying to add a single test that I can run using <code>cargo test</code> and it's complicated. I haven't been able to achieve it yet. <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 466174241,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1725000047
    },
    {
        "content": "<p>I was wanting to write a unit test for each of the JWT algorithms, but I think I'm limited to doing it all in a roc example for now which isn't ideal.</p>",
        "id": 466174310,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1725000087
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> for the <code>basic-webserver</code> task branch, there's a TODO to use a proper <code>basic-cli</code> task release for scripts/testing. Do you want to wait to prepare a release, or am I good to just cleanup everything, leave the <code>0.15-testing</code> release, and get ready for merge after approval?</p>",
        "id": 466308768,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1725036648
    },
    {
        "content": "<p>I was just about to start building basic-cli 0.15 :)</p>",
        "id": 466308914,
        "sender_full_name": "Anton",
        "timestamp": 1725036718
    },
    {
        "content": "<p>Well then!</p>",
        "id": 466309089,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1725036791
    },
    {
        "content": "<p>I'll still do everything else, we can update the final download link at that point</p>",
        "id": 466309119,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1725036808
    }
]