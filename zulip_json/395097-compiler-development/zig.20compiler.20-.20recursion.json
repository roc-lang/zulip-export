[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/395097-compiler-development/topic/casual.20conversation/near/521448522\">said</a>:</p>\n<blockquote>\n<p>For example, a list or a box should break infinite recursion and be valid:</p>\n<p><div class=\"codehilite\"><pre><span></span><code>Node a: { data: a, children: List(Node(a)) }\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>For this (and your other example), these would need to be wrapped in a nominal type, not an alias, correct? Based on <a href=\"https://github.com/roc-lang/rfcs/blob/ayaz/compile-with-lambda-sets/0101-compiling-recursive-types.md#1-recursive-types-must-have-a-explicit-point-of-recursion\">this RFC</a></p>",
        "id": 521851590,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1748901419
    },
    {
        "content": "<p>I hope not</p>",
        "id": 521851684,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1748901458
    },
    {
        "content": "<p>At least for the list one (same with box, set, dict, etc)</p>",
        "id": 521851709,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1748901469
    },
    {
        "content": "<p>For the other one, I think nominal type is reasonable and should make the rfc</p>",
        "id": 521851850,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1748901525
    },
    {
        "content": "<p>4 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"395097\" href=\"/#narrow/channel/395097-compiler-development/topic/casual.20conversation/with/373264697\">#compiler development &gt; casual conversation</a> by <span class=\"user-mention silent\" data-user-id=\"341568\">Jared Ramirez</span>.</p>",
        "id": 521852454,
        "sender_full_name": "Notification Bot",
        "timestamp": 1748901753
    },
    {
        "content": "<p>Moving this into its own topic!</p>\n<p>I’m a bit confused about what kinds of recursion are allowed and what aren’t. I’ve been working on implementing an occurs check based on this <a href=\"https://github.com/roc-lang/rfcs/blob/ayaz/compile-with-lambda-sets/0101-compiling-recursive-types.md#1-recursive-types-must-have-a-explicit-point-of-recursion\">RFC</a> — but it’s possible I misunderstood the intent there.</p>\n<p>My understanding was that, due to the issue outlined in that RFC, the problem stemmed from recursive types that are equivalent-but-not-equal, which lead to layout mismatches. I thought the proposed solution in the new compiler was to require all recursion to go through a nominal type. That seemed to be echoed in <a href=\"#narrow/channel/231634-beginners/topic/Help.20implementing.20recursive.20type.3F/with/497919873\">this Zulip thread</a> as well.</p>\n<p>I'm not taking a position on whether recursion <em>should</em> always go through nominal types — I just want to clarify what the actual rules are, so I can implement the correct behavior!</p>",
        "id": 521853366,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1748902189
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> would be the expert on this topic for sure <span aria-label=\"smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 521855075,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1748903045
    },
    {
        "content": "<p>Personally, I want to just special case list and box (special casing list by extension special cases dict and set which are implemented with list). </p>\n<p>They contain pointers (that is just part of the implementation). As such, they should always break recursion.</p>",
        "id": 521855600,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1748903312
    },
    {
        "content": "<p>So no matter the rest of the rules, I think those need special casing</p>",
        "id": 521855624,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1748903326
    },
    {
        "content": "<p>I think the only way to make it work is to have the recursion only allowed if it's defined from a nominal type</p>",
        "id": 522426077,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1749061981
    },
    {
        "content": "<blockquote>\n<p>require all recursion to go through a nominal type<br>\nthis is the way imo</p>\n</blockquote>",
        "id": 522426152,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1749062000
    },
    {
        "content": "<p>so in other words this would work:</p>\n<div class=\"codehilite\"><pre><span></span><code>Node(a) := [Node({ data: a, children: List(Node(a)) })]\n</code></pre></div>\n<p>...but the type alias version with an anonymous record wouldn't work: (the distinction being <code>:</code> vs <code>:=</code>)</p>\n<div class=\"codehilite\"><pre><span></span><code>Node(a) : { data: a, children: List(Node(a)) }\n</code></pre></div>",
        "id": 522454411,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749072328
    },
    {
        "content": "<p>i hope we have a really good error message for this</p>",
        "id": 522462595,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1749076260
    },
    {
        "content": "<p>this is going to feel surprising for functional devs</p>",
        "id": 522462628,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1749076277
    },
    {
        "content": "<p>yeah error message can be very direct</p>",
        "id": 522462802,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749076371
    },
    {
        "content": "<p>like \"hey you need to do it this other way\"</p>",
        "id": 522462820,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749076381
    },
    {
        "content": "<p>i meant that i think it should explain why. it seems arbitrary if you aren't used to thinking about memory layout</p>",
        "id": 522463063,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1749076549
    },
    {
        "content": "<p>there are good explanations without invoking memory layout. most ML family languages require names for types like these anyway</p>",
        "id": 522463535,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1749076827
    },
    {
        "content": "<p>Sure, but we aren't talking about anonymous records versus nominal. we are talking about named (via alias here) versus nominal. i think many will struggle to understand why one is boxed and one is not</p>",
        "id": 522463765,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1749076967
    },
    {
        "content": "<p>Even being called an alias, I think many will feel \"Node(a) = ...\" is naming a type</p>",
        "id": 522463843,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1749077016
    },
    {
        "content": "<p>there's actually no difference in terms of boxing</p>",
        "id": 522465871,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749078199
    },
    {
        "content": "<p>I don't know if there's an explanation concise enough to fit in an error message <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 522465910,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749078228
    },
    {
        "content": "<p>the reason for the design decision is so subtle  that nobody even realized it was a problem until people had been making Roc programs for years</p>",
        "id": 522465995,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749078294
    },
    {
        "content": "<p>the explanation is that Roc needs to know where the recursion happens and with anonymous and alias types the point is ambiguous. You need to know where recursion happens for efficiency reasons</p>",
        "id": 522466765,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1749078758
    },
    {
        "content": "<p>you could also break module isolation in implementation which solves this problem without the surface level change. but that is harder to implement</p>",
        "id": 522466814,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1749078783
    },
    {
        "content": "<p>it’s really an implementation constraint</p>",
        "id": 522466850,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1749078800
    },
    {
        "content": "<p>i guess i don't even understand it <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span><span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span><span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 522467202,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1749078950
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20recursion/near/522454411\">said</a>:</p>\n<blockquote>\n<p><code>Node(a) := [Node({ data: a, children: List(Node(a)) })]</code></p>\n</blockquote>\n<p>I <em>think</em> this would also work?</p>\n<div class=\"codehilite\"><pre><span></span><code>Node(a) := { data: a, children: List(Node(a)) }\n\nnode = @Node({ ... })\n</code></pre></div>\n<p>Since it's a List (which breaks recursion), and passes thru a nominal type</p>\n<p>Or maybe this <em>would've</em> worked with opaque types in the old compiler, but will not with nominal types in the new one? I'm not clear on exactly how nominal types will work (eg how to construct them, with an <code>@</code>?)</p>",
        "id": 522469206,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1749080179
    },
    {
        "content": "<p>I think <code>List(a)</code> and <code>Box(a)</code> should be special exceptions that don't require nominal types.</p>",
        "id": 522471659,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749081811
    },
    {
        "content": "<p>they should work with simple aliases.</p>",
        "id": 522471675,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749081823
    },
    {
        "content": "<p>Given <code>List(a)</code> and <code>Box(a)</code> are guaranteed to break recursion, I see no reason they need nominal types.</p>",
        "id": 522471819,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749081905
    },
    {
        "content": "<p>If you see <code>List(a)</code> simply don't check for recursion on the <code>a</code>.</p>",
        "id": 522471902,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749081954
    },
    {
        "content": "<p>So to the recursion checker, these two should be equivalent:</p>\n<div class=\"codehilite\"><pre><span></span><code>Node(a) : { data: a, children: List(Node(a)) }\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>Node(a) : { data: a, children: List({}) }\n</code></pre></div>",
        "id": 522471963,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749081999
    },
    {
        "content": "<p>so the current planned design, which I'm already thinking should be tweaked slightly, is that only nominal tag unions are a thing</p>",
        "id": 522474016,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749083510
    },
    {
        "content": "<p>the way those work is that I can use <code>:=</code> but only if the thing right after it is a tag union, and then it becomes nominal</p>",
        "id": 522474057,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749083544
    },
    {
        "content": "<p>and the way I refer to its variants are by fully-qualifiyng them with the name of the type, e.g. this would work:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kt\">ConsList</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">:=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Nil</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Node</span><span class=\"p\">(</span><span class=\"kt\">ConsList</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">))]</span>\n\n<span class=\"nf\">empty</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">ConsList</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"nf\">empty</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">ConsList</span><span class=\"o\">.</span><span class=\"kt\">Nil</span>\n</code></pre></div>",
        "id": 522474114,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749083590
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20recursion/near/522471963\">said</a>:</p>\n<blockquote>\n<p>So to the recursion checker, these two should be equivalent:</p>\n<div class=\"codehilite\"><pre><span></span><code>Node(a) : { data: a, children: List(Node(a)) }\n</code></pre></div>\n<p><div class=\"codehilite\"><pre><span></span><code>Node(a) : { data: a, children: List({}) }\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>yeah, re-reading the RFC it seems like this is compatible with it?</p>",
        "id": 522474968,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749084149
    },
    {
        "content": "<p>from the RFC:</p>\n<blockquote>\n<p>Types must be equal, not just equivalent.</p>\n</blockquote>\n<p>I think if the recursion in a structural type is only done through some combination of <code>List</code> and/or <code>Box</code>, then we wouldn't have the problem outlined in the RFC because reproducing that problem requires recursion through tag unions with equivalent types but different layouts</p>",
        "id": 522475065,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749084233
    },
    {
        "content": "<p>but if a <code>List</code> and a <code>Box</code> are type-compatible, then they also have the same layout</p>",
        "id": 522475089,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749084250
    },
    {
        "content": "<p>so unless I'm missing something (and again <span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> would know better than I would!) I <em>think</em> it should work?</p>",
        "id": 522475108,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749084268
    },
    {
        "content": "<p>but then again I thought the original design would work, so... <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 522475115,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749084278
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/395097-compiler-development/topic/zig.20compiler.20-.20recursion/near/522474016\">said</a>:</p>\n<blockquote>\n<p>so the current planned design, which I'm already thinking should be tweaked slightly, is that only nominal tag unions are a thing</p>\n</blockquote>\n<p>Would that hurt automatic error tag accumulation? Seems like one of the big roc features many people like</p>",
        "id": 522475143,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749084299
    },
    {
        "content": "<p>No, it doesn't work - it either must be named or the implementation needs to break module isolation when computing the points of recursion</p>",
        "id": 522475771,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1749084655
    },
    {
        "content": "<p>Really, you couldn't just blackbox all list element types when doing recursion checking. Like literally treat all <code>List(a)</code> types as <code>List({})</code>. Cause from a recursion standpoint they are the same.</p>",
        "id": 522476004,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749084831
    },
    {
        "content": "<p>They are also the same from a layout stand point.</p>",
        "id": 522476027,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749084847
    },
    {
        "content": "<p>thats not the problem though</p>",
        "id": 522476170,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1749084964
    },
    {
        "content": "<p>like you might have a larger type where there is an equivalent version where the recursion does not happen at <code>List a</code> (<code>a</code> being the anonymous type)</p>",
        "id": 522476280,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1749085031
    },
    {
        "content": "<p>then you are back to the same problem</p>",
        "id": 522476300,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1749085044
    },
    {
        "content": "<p>I don't follow. If we are only allowing recusion through nominal tags or <code>List(a)</code>, where does this other recursion get introduced in the larger type?</p>",
        "id": 522476440,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749085134
    },
    {
        "content": "<p>refer to this example in the document</p>\n<div class=\"codehilite\"><pre><span></span><code>Rec1 : [ From2 { from1 : &lt;Rec1&gt; }, End ]\nRec2 : { from1 : [ From2 &lt;Rec2&gt;, End ] }\n</code></pre></div>\n<p>now imagine this was</p>\n<div class=\"codehilite\"><pre><span></span><code>Rec1 : [ From2 { from1 : List(&lt;Rec1&gt;) }, End ]\nRec2 : List({ from1 : [ From2 &lt;Rec2&gt;, End ] })\n</code></pre></div>",
        "id": 522476753,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1749085287
    },
    {
        "content": "<p>actually, that example you could maybe make work with a special case. but there are larger types where it doesn't.</p>",
        "id": 522477095,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1749085496
    },
    {
        "content": "<p>Should be this?</p>\n<div class=\"codehilite\"><pre><span></span><code>Rec1 : [ From2 { from1 : List(&lt;Rec1&gt;) }, End ]\nRec2 : { from1 : List([ From2 &lt;Rec2&gt;, End ]) }\n</code></pre></div>",
        "id": 522477104,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749085502
    },
    {
        "content": "<p>yes</p>",
        "id": 522477372,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1749085670
    },
    {
        "content": "<p>I think this should work.</p>\n<p>If only recursion through <code>List(a)</code>, then the tag is simply a flat <code>tag</code> and <code>payload</code> with no pointers (except those in the list). As such <code>{ from1: List(Rec1) }</code> and <code>Rec2</code> will have the exact same layout.</p>\n<p>If recursion happens through any other mechanism, we are still requiring the type to be nominal. As such, you won't be able to compare them anyway.</p>",
        "id": 522478037,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749086118
    },
    {
        "content": "<p>But maybe I am missing something that would relate to multi-recusion or nested recursion via <code>List(a)</code> and <code>List(b)</code> together.</p>",
        "id": 522478272,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749086272
    },
    {
        "content": "<p>i considered this when i wrote this</p>",
        "id": 522478412,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1749086353
    },
    {
        "content": "<p>you can write out a bunch of increasing complicated examples and what they compile to and you will see it fails</p>",
        "id": 522478446,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1749086375
    },
    {
        "content": "<p>the only way i have found is the three options listed in the document. I am probably missing something, but it's also not entirely naive, and the List/Box thing doesn't solve it</p>",
        "id": 522478529,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1749086424
    },
    {
        "content": "<p>I trust you, I'm just quite surprised about List based recursion specifically. I totally understand from the recursive tag perspective that this needs one of your 3 solutions.</p>",
        "id": 522478641,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749086478
    },
    {
        "content": "<p>Actually, wait, as I think about this more, I am more convinced <code>List(a)</code> is fine. The fundamental problem discussed in the RFC is that tags, when generated in different context, can lead to different layouts. Thus, they need one of the suggested solutions. This is not true for <code>List</code>. No matter how a list is generated, it will always have the exact same layout.</p>\n<p>So I feel pretty convinced that any structural type that only have recursions via lists should be fine.</p>\n<p>For recursion via tags directly, we still need one of the 3 suggested solutions. And if you mix list recursion and direct tag recursion, you must follow tag recursion rules. So that again will use one of the 3 suggested solutions, but I think pure list recursion is a proper special case that is valid with structural types.</p>",
        "id": 522480806,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749087871
    },
    {
        "content": "<p><code>Box(a)</code> is a bit more complicated than <code>List(a)</code> in terms of rules, but also could be special cased in a similar way. <code>Box(a)</code> though requires both avoiding any sort of direct tag based recursion and being in a tag with a base case (otherwise, it is an infinite type).</p>",
        "id": 522480975,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749087978
    },
    {
        "content": "<p>I really just want <code>Node a : { val: a, children: List(Node(a)) }</code> to work as a structural type. Otherwise, I think it is bad UX for the language. We have seen a ton of beginners hit this over the years.</p>",
        "id": 522481138,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749088089
    },
    {
        "content": "<p>i don't disagree with that, but the fundamental problem is that</p>\n<div class=\"codehilite\"><pre><span></span><code>Rec1 : [ From2 { from1 : List(&lt;Rec1&gt;) }, End ]\nRec2 : { from1 : List([ From2 &lt;Rec2&gt;, End ]) }\n</code></pre></div>\n<p>still have unequal layouts</p>",
        "id": 522594431,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1749130691
    },
    {
        "content": "<p>Due to starting at different points in the recursion chain, sure, but I don't see the problem with that. If you line up the layouts by wrapping Rec1, they become the exact same layout and are comparable.</p>\n<p><code>{ from1: List(Rec1) }</code> is equivalent to <code>Rec2</code></p>\n<p>And extracting the first element from the list in a <code>Rec2</code> has the same layout as a <code>Rec1</code>.</p>\n<p>Ao once lined up in the recursion chain, they will always have identical layout.</p>\n<p>So what is the problem with that?</p>",
        "id": 522604935,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749133494
    },
    {
        "content": "<p>Even if eventually recursively the same, they are not the same without some sort of wrapping or unwrapping. That seems fine.</p>",
        "id": 522605167,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749133557
    },
    {
        "content": "<p>To check for the ability to compare, both the starting point and the recursion point have to be the same.</p>",
        "id": 522605378,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749133616
    },
    {
        "content": "<p>In terms of your rfc, those two type are not equivalent structurally recursive types without either apply some sort of wrapping or unwrapping. Once that is applied, they are guaranteed to have equivalent layouts due to List always having the same layout and tags being sorted alphabetically.</p>",
        "id": 522606688,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749133975
    },
    {
        "content": "<p>Looking concrete at:</p>\n<div class=\"codehilite\"><pre><span></span><code>val1 : { from1 : List(Rec1) }\nval1 = ...\n\nval2 : Rec2\nval2 = ...\n\nexpect val1 == val2\n</code></pre></div>\n<p>The layout of <code>val1</code> is the same as a list (3 usizes)<br>\nThe layout of <code>val2</code> is the same as a list (3 usizes)</p>\n<p>Both have a wrapper record field that does not affect layout.<br>\nBoth lists contain a tag with 2 variants (<code>From1</code> and <code>End</code>). Both tags have variant 0 containing a payout of a List (wrapped in a record). Both tags have an empty variant 1.</p>\n<p>So when the starting point is aligned, the recursive layout is guaranteed the same when using Lists as the only recursion point.</p>",
        "id": 522608941,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749134561
    },
    {
        "content": "<p>The important note here is that from the tags perspective, it is not really recursive at all. As such, there are no raw pointers introduced and the tag and payload are always stored inline.</p>",
        "id": 522610348,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749134951
    },
    {
        "content": "<p>hm, I think this case would be problematic?</p>\n<ul>\n<li>you get <code>|rec|</code> as an argument - so, it's an open record</li>\n<li>based on how you use it, it's inferred that the open record contains a field which refers to the open record (e.g. you get an element out of the list and pass it to the original function that takes <code>rec</code> as an argument)</li>\n<li>then you pass that open record to another module, which unifies it with another record in a way that adds more fields which introduce another recursion point</li>\n</ul>",
        "id": 522854025,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749249039
    },
    {
        "content": "<p>in a nominal type that couldn't happen bc they can't grow</p>",
        "id": 522854046,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749249053
    },
    {
        "content": "<p>Is that an open record specific problem?</p>",
        "id": 522868849,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749266743
    },
    {
        "content": "<p>Isnt it the same if I make some silly function that gets a value from a list and the passes it into the same function. So infinitely deep lists?</p>",
        "id": 522868873,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749266775
    },
    {
        "content": "<p>Also, multiple recursion points is fine. They just all have to be through list.</p>",
        "id": 522868917,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749266823
    }
]