[
    {
        "content": "<blockquote>\n<p>If I run <code>roc check New-List.roc</code> it kills my terminal after a while :p </p>\n</blockquote>\n<p>Turns out this is because it's trying eat all my RAM (64 GB)</p>",
        "id": 527858009,
        "sender_full_name": "Anton",
        "timestamp": 1752057323
    },
    {
        "content": "<p>Yeah, we need to implement some kind of cut-off or streaming for the problem reports</p>",
        "id": 527858200,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752057397
    },
    {
        "content": "<p>It's strange that Brendan didn't experience any issues, he's probably on macos</p>",
        "id": 527858324,
        "sender_full_name": "Anton",
        "timestamp": 1752057445
    },
    {
        "content": "<p>He mentioned that he did</p>",
        "id": 527858363,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752057458
    },
    {
        "content": "<p>He said there was thousands of errors I recall</p>",
        "id": 527858459,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752057490
    },
    {
        "content": "<p><a class=\"message-link\" href=\"/#narrow/channel/395097-compiler-development/topic/casual.20conversation/near/527224557\">#compiler development &gt; casual conversation @ ðŸ’¬</a></p>",
        "id": 527858490,
        "sender_full_name": "Anton",
        "timestamp": 1752057502
    },
    {
        "content": "<p>I meant memory issues, lots of Roc errors is ok to test our perf</p>",
        "id": 527858584,
        "sender_full_name": "Anton",
        "timestamp": 1752057536
    },
    {
        "content": "<blockquote>\n<p>60s -&gt; generating diagnostic from can (this is after my fix that made this part way way faster)</p>\n</blockquote>\n<p>Perhaps this perf fix is not yet merged in <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span>?</p>",
        "id": 527858871,
        "sender_full_name": "Anton",
        "timestamp": 1752057637
    },
    {
        "content": "<p>Ok no, looks like it's merged in <a href=\"https://github.com/roc-lang/roc/pull/7938\">https://github.com/roc-lang/roc/pull/7938</a></p>",
        "id": 527859034,
        "sender_full_name": "Anton",
        "timestamp": 1752057704
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/mV0h5DDG5GGA8nrabswLpPyq/Screenshot-2025-07-09-at-20.42.21.png\">Screenshot 2025-07-09 at 20.42.21.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/mV0h5DDG5GGA8nrabswLpPyq/Screenshot-2025-07-09-at-20.42.21.png\" title=\"Screenshot 2025-07-09 at 20.42.21.png\"><img data-original-content-type=\"image/png\" data-original-dimensions=\"1496x280\" src=\"/user_uploads/thumbnail/22008/mV0h5DDG5GGA8nrabswLpPyq/Screenshot-2025-07-09-at-20.42.21.png/840x560.webp\"></a></div>",
        "id": 527859233,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752057786
    },
    {
        "content": "<p>I killed it at 8GB</p>",
        "id": 527859251,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752057793
    },
    {
        "content": "<p><code>./zig-out/bin/roc check ~/Documents/New-List.roc</code></p>",
        "id": 527859278,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752057805
    },
    {
        "content": "<p>Hmm, could this difference in behavior be due to a recent commit?</p>",
        "id": 527859382,
        "sender_full_name": "Anton",
        "timestamp": 1752057842
    },
    {
        "content": "<p>Definitely could be</p>",
        "id": 527859455,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752057864
    },
    {
        "content": "<p>I'll try with Brendan's perf fix PR</p>",
        "id": 527859463,
        "sender_full_name": "Anton",
        "timestamp": 1752057868
    },
    {
        "content": "<p>I'm running on my PR branch which includes the module caching stuff, but other than that I can't think of any significant changes since Brendan's analysis</p>",
        "id": 527859648,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752057922
    },
    {
        "content": "<p>Could be due to zig 0.14.1 instead of 0.14.0</p>",
        "id": 527859759,
        "sender_full_name": "Anton",
        "timestamp": 1752057954
    },
    {
        "content": "<p>Running with a smaller file <a href=\"https://gist.github.com/lukewilliamboswell/532f48c70cfc3bca866c239cad291378\">https://gist.github.com/lukewilliamboswell/532f48c70cfc3bca866c239cad291378</a></p>",
        "id": 527860306,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752058145
    },
    {
        "content": "<p>Looks like maybe PackedDataSpan is an issue, or at least we exceeded the assumptions we made using that.</p>",
        "id": 527860384,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752058171
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20perf.20tracking/near/527859463\">said</a>:</p>\n<blockquote>\n<p>I'll try with Brendan's perf fix PR</p>\n</blockquote>\n<p>That gives me a panic:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread 12630 panic: reached unreachable code\n/home/username/Downloads/zig-linux-x86_64-0.14.0/lib/std/debug.zig:522:14: 0x109d64d in assert (roc)\n    if (!ok) unreachable; // assertion failure\n             ^\n/home/username/gitrepos/roc/src/check/canonicalize/NodeStore.zig:1274:33: 0x120e3fa in addExpr (roc)\n                std.debug.assert(PackedDataSpan.FunctionArgs.canFit(args.span));\n</code></pre></div>",
        "id": 527860673,
        "sender_full_name": "Anton",
        "timestamp": 1752058272
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20perf.20tracking/near/527860306\">said</a>:</p>\n<blockquote>\n<p>Running with a smaller file <a href=\"https://gist.github.com/lukewilliamboswell/532f48c70cfc3bca866c239cad291378\">https://gist.github.com/lukewilliamboswell/532f48c70cfc3bca866c239cad291378</a></p>\n</blockquote>\n<p>Oh yeah, that's my panic too :p</p>",
        "id": 527860757,
        "sender_full_name": "Anton",
        "timestamp": 1752058298
    },
    {
        "content": "<p>I added that PackedDataSpan ... but definitely wasn't thinking about mammoth files like this when I did that</p>",
        "id": 527861078,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752058419
    },
    {
        "content": "<p>That's <strong>47,028</strong> dot access expressions (<code>List.something</code>)! Each one creates a <code>e_dot_access</code> node in the CIR, and if each has arguments, it needs to store a span. This is exactly what's causing the memory explosion.</p>\n<h2>Summary</h2>\n<h3><strong>Root Cause</strong></h3>\n<ol>\n<li><strong>File Structure</strong>: The 10MB file contains ~47,000 dot access expressions (like <code>List.len</code>, <code>List.get_unsafe</code>, etc.)</li>\n<li><strong>Memory Explosion</strong>: Each dot access expression creates a <code>e_dot_access</code> node that requires storing argument spans</li>\n<li><strong>Limit Exceeded</strong>: The <code>PackedDataSpan.FunctionArgs</code> configuration (20 bits start, 12 bits length) can only handle start positions up to ~1M, but the large number of expressions causes the data structure indices to exceed this limit</li>\n</ol>",
        "id": 527861628,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752058607
    },
    {
        "content": "<p>I've got an idea</p>",
        "id": 527861813,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752058693
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/pull/7980\">https://github.com/roc-lang/roc/pull/7980</a></p>",
        "id": 527866100,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752060256
    },
    {
        "content": "<p>My idea was to stop creating new malformed nodes after a certain threshold and just re-use one node.</p>",
        "id": 527866696,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752060476
    },
    {
        "content": "<p>That doesn't seem to have completely solved our problem</p>",
        "id": 527866732,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752060491
    },
    {
        "content": "<p>I think I found another problem causing exponential growth in CIR nodes</p>",
        "id": 527871315,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752062059
    },
    {
        "content": "<p>Something strange is defintely happening somewhere. I'm using ~3GB for around 1_000_000 nodes.</p>",
        "id": 527873934,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752062915
    },
    {
        "content": "<p>Some stats <a href=\"https://gist.github.com/lukewilliamboswell/cc52a944807ef16cd357356eda438ecb\">https://gist.github.com/lukewilliamboswell/cc52a944807ef16cd357356eda438ecb</a></p>",
        "id": 527876720,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752063890
    },
    {
        "content": "<blockquote>\n<p>Total CIR nodes created: 1023040</p>\n</blockquote>\n<p>that's fascinating - so this is about 1M CIR nodes for about 1M LoC of non-comments</p>",
        "id": 527886468,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752067039
    },
    {
        "content": "<p>I would assumed a much higher average of CIR nodes per line, even with a lot of lines being just closing delimiters</p>",
        "id": 527886617,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752067089
    },
    {
        "content": "<p>or blank lines I guess</p>",
        "id": 527886667,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752067109
    },
    {
        "content": "<p>that's wild bc it suggests 16-bit indices would work for modules up to like 30-60K LoC depending on how much type instantiation was happening</p>",
        "id": 527887463,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752067365
    },
    {
        "content": "<p>After sleeping on this issue, I think I know the problem. It may be easy to fix our memory problem.</p>",
        "id": 527959235,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752092378
    },
    {
        "content": "<p>When I measured, I think I saw 3GB of RAM, which is still quite high, but nothing like 64</p>",
        "id": 527961114,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752093123
    },
    {
        "content": "<p>To fix this memory thing properly. This is what I think we need to do. </p>\n<p>Have a counter, and increment every time we push a diagnostic </p>\n<p>Once that counter hits a threshold ~10_000 errors or something</p>\n<p>We then no longer allocate any memory for new diagnostics. We use a placeholder malformed node (the same one can be re-used) that just says \"TOO MANY ERRORS\".</p>\n<p>It's a bit of a mechanical change, but I think it's necessary so we don't keep allocating strings and random things that we'll never use or need later.</p>",
        "id": 527975590,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752100360
    },
    {
        "content": "<p>Here's is an example of the culprit which is common across Can. We're allocating a new string and allocating another Node in the store. Both of these will never be needed if we have thousands of errors already. </p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"p\">.</span><span class=\"n\">crash</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">crash_stmt</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// Not valid at top-level</span>\n<span class=\"w\">    </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">string_idx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">can_ir</span><span class=\"p\">.</span><span class=\"n\">env</span><span class=\"p\">.</span><span class=\"n\">strings</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">can_ir</span><span class=\"p\">.</span><span class=\"n\">env</span><span class=\"p\">.</span><span class=\"n\">gpa</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"crash\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">region</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">parse_ir</span><span class=\"p\">.</span><span class=\"n\">tokenizedRegionToRegion</span><span class=\"p\">(</span><span class=\"n\">crash_stmt</span><span class=\"p\">.</span><span class=\"n\">region</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">can_ir</span><span class=\"p\">.</span><span class=\"n\">pushDiagnostic</span><span class=\"p\">(</span><span class=\"n\">CIR</span><span class=\"p\">.</span><span class=\"n\">Diagnostic</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">invalid_top_level_statement</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">.{</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">stmt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">string_idx</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">region</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">region</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">});</span>\n<span class=\"w\">    </span><span class=\"n\">last_type_anno</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">null</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// Clear on non-annotation statement</span>\n<span class=\"p\">},</span>\n</code></pre></div>",
        "id": 527975962,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752100638
    },
    {
        "content": "<p>I'd like some thoughts on this before I try and implement this. It's a pretty mechanical change, I guess I could start with just the counter and a just few high priority areas, then gradually implement in later PR's.</p>",
        "id": 527976234,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752100853
    },
    {
        "content": "<p>I think that's fine; lots of compilers do it, and it's not like anyone can usefully process 400K errors at once anyway <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 527976622,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752101228
    },
    {
        "content": "<p>Hmm....is that the root cause of the memory issue?</p>",
        "id": 527978682,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752102896
    },
    {
        "content": "<p>Also, arent string deduplicated? On top of that, static strings like \"crash\" we should just never allocate ever</p>",
        "id": 527978796,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752102998
    },
    {
        "content": "<p>Like we still should limit diagnostics, but I don't think it is the root cause of the 64 gb oom</p>",
        "id": 527978982,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752103146
    },
    {
        "content": "<p>Found another related issue...  we are getting Regions start at <code>0</code> and end somewhere in the middle of the file. When we slice that for our reports we utf-8 validate the whole thing, over and over again thousands of times.</p>\n<div class=\"codehilite\"><pre><span></span><code>$ wasmtime --dir=. --profile=guest zig-out/bin/roc.wasm check New-List-Cutoff_10MB.roc\nWARNING: Large region detected: start=0 end=43906 size=43906 - may cause slow UTF-8 validation\nWARNING: Large region detected: start=0 end=44523 size=44523 - may cause slow UTF-8 validation\nWARNING: Large region detected: start=0 end=50011 size=50011 - may cause slow UTF-8 validation\nWARNING: Large region detected: start=0 end=99849 size=99849 - may cause slow UTF-8 validation\nWARNING: Large region detected: start=0 end=100466 size=100466 - may cause slow UTF-8 validation\nWARNING: Large region detected: start=0 end=105954 size=105954 - may cause slow UTF-8 validation\nWARNING: Large region detected: start=0 end=155792 size=155792 - may cause slow UTF-8 validation\nWARNING: Large region detected: start=0 end=156409 size=156409 - may cause slow UTF-8 validation\nWARNING: Large region detected: start=0 end=161897 size=161897 - may cause slow UTF-8 validation\nWARNING: Large region detected: start=0 end=211735 size=211735 - may cause slow UTF-8 validation\n</code></pre></div>\n<p>This goes on for thousands of lines.</p>",
        "id": 528007344,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752127783
    },
    {
        "content": "<p>Here is a fix/workaround <a href=\"https://github.com/roc-lang/roc/pull/7995\">https://github.com/roc-lang/roc/pull/7995</a></p>",
        "id": 528011733,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752130211
    },
    {
        "content": "<p>This fixes the memory issues entirely for me. The profiling for <code>New-List-Cutoff_10MB.roc</code> looks completely normal and is no longer dominated by utf-8 validation. It runs to completion though prints out all 1,000 errors to the terminal. </p>\n<div class=\"codehilite\"><pre><span></span><code>Found 35197 error(s) and 17939 warning(s) in 21785.9 ms for New-List-Cutoff_10MB.roc.\n</code></pre></div>",
        "id": 528012039,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752130352
    },
    {
        "content": "<p>Correction .. I hit a debug assertion and it crashes. But in ReleaseSmall it runs fine. Time to track down the next issue I guess <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 528012260,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752130451
    },
    {
        "content": "<p>I'm not really for that workaround. I think we should just correct newlines to have proper region info. That or we should correct parsing to not include new lines as the starting and ending tokens for nodes that we will report diagnostic on.</p>",
        "id": 528012571,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752130596
    },
    {
        "content": "<p>This solution feels more bug prone and like it might just randomly bite us later</p>",
        "id": 528012611,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752130612
    },
    {
        "content": "<blockquote>\n<p>I'm not sure if they should be... it may have been a performance optimization</p>\n</blockquote>\n<p>Correct functionality before random performance optmizations that may or may not work.</p>",
        "id": 528012914,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752130704
    },
    {
        "content": "<p>I don't love this solution, but it's only temporary I think. It resolves the immediate memory issue, and is noisy (but not blocking) to help us track down any issues.</p>\n<p>I've also resolved the debug assertion, and added a limit on the number of warnings we print.</p>",
        "id": 528014532,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752131410
    },
    {
        "content": "<p>I'm avoiding significant changes in the Parser while <span class=\"user-mention\" data-user-id=\"781658\">@Anthony Bullard</span> works on his refactor.</p>",
        "id": 528014619,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752131447
    },
    {
        "content": "<p>I'm also totally up for giving them proper regions.</p>",
        "id": 528014683,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752131471
    },
    {
        "content": "<p>At least with this workaround, we can see the next perf issue which is our CIR diagnostics... it looks like they need the same treatment we just gave AST diagnostics. We should limit the amount we create and re-use a common malformed node after a certain number.</p>",
        "id": 528015006,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752131646
    },
    {
        "content": "<p>I would actually like to get rid of newline tokens all together</p>",
        "id": 528144967,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752174869
    },
    {
        "content": "<p>yeah what do we still use them for?</p>",
        "id": 528148647,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752176586
    },
    {
        "content": "<p>formatter heuristics?</p>",
        "id": 528148659,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752176593
    },
    {
        "content": "<p>That's all I think</p>",
        "id": 528148973,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752176729
    },
    {
        "content": "<p>The parser completely skips them, and even so sometimes they cause weird bugs (or at least the potential for bugs) in the parser</p>",
        "id": 528149095,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752176775
    },
    {
        "content": "<p>fair, although <span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> made the point that not having any control over newlines (e.g. wanting to put blank lines between some assignments and not others) would be a pain.</p>\n<p>is there some other way we could do that? e.g. use Region info in the formatter to scan for newlines between assignments and if there's more than 1 that means you want a blank line?</p>",
        "id": 528150116,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752177262
    },
    {
        "content": "<p>Newlines significant only in some particular places? It makes sense to leave them only where user can contol them for having gaps.</p>\n<p>Also, can things like if/else have a parameter <code>is_multiline</code>? It would save tokens in such places. Maybe it's an obvious idea</p>",
        "id": 528150828,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1752177562
    },
    {
        "content": "<p>Or, if parse ast and cir have the same indexes, newlines aren't needed indeed (because they're noop). It's possible to have a parrallel vector for newline gaps that will contain only indexes of the tokens after which user want to have a gap (on the other hand, u32 per gap is not that great? But this collection would have no region info so memory consumption would be 50% less)</p>",
        "id": 528164359,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1752184307
    },
    {
        "content": "<p>So I'm wondering if we should merge this workaround PR <a href=\"https://github.com/roc-lang/roc/pull/7995\">https://github.com/roc-lang/roc/pull/7995</a> I don't feel strongly about it, it was helpful to understand why we were chewing up all that memory.</p>\n<p>If we've got a solid plan to move forward with removing newlines or fixing regions then our perf/memory issue won't be a problem for long, and would only a delay our ability to use the profiler effectively until we resolve the underlying root cause.</p>\n<p>Is anyone interesting in fixing these?</p>",
        "id": 528167442,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752186275
    },
    {
        "content": "<blockquote>\n<p>is there some other way we could do that? e.g. use Region info in the formatter to scan for newlines between assignments and if there's more than 1 that means you want a blank line?</p>\n</blockquote>\n<p>The formatter already needs to look at the original source to pull out comments, so of course it can still look there to check whether there's a double (or multiple) newline and preserve that if we want.</p>",
        "id": 528169298,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752187412
    },
    {
        "content": "<p>yikes, that's how we're doing comments? <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 528169789,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752187734
    },
    {
        "content": "<p>Tell me more about that 'yikes'</p>",
        "id": 528169890,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752187801
    },
    {
        "content": "<p>It avoids a whole bunch of issues with comment tracking and placement that the parser and AST are now freed from</p>",
        "id": 528169994,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752187861
    },
    {
        "content": "<p>All that complexity is concentrated in the formatter, which is the only place that cares about this</p>",
        "id": 528170026,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752187880
    },
    {
        "content": "<p>Consistent comment tracking was probably the <a href=\"https://github.com/roc-lang/roc/issues/1\">#1</a> hardest thing to get right in the old parser</p>",
        "id": 528170141,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752187955
    },
    {
        "content": "<p>maybe I'm misremembering, but I thought the plan was going to be:</p>\n<ul>\n<li>give the tokenizer a flag where it tokenizes comments into a side table by just storing their Regions (instead of discarding them, which it would do if the flag is false)</li>\n<li>then when the formatter is going through emitting things, it can compare the current regions it's working with to those regions in the side table to figure out where the comments are and interleave them back in</li>\n</ul>",
        "id": 528171186,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752188619
    },
    {
        "content": "<p>that sounded pretty simple to me, but maybe I'm misremembering or misunderstanding something <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 528171218,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752188635
    },
    {
        "content": "<p>the yikes is just about re-tokenizing in the middle of formatting, sounds like a lot of extra processing to do</p>",
        "id": 528171289,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752188669
    },
    {
        "content": "<p>I totally agree that the way we did comments in the previous compiler should not be repeated</p>",
        "id": 528171305,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752188679
    },
    {
        "content": "<p>There's no retokenizing necessary; we're just looking at the space between tokens</p>",
        "id": 528171434,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752188743
    },
    {
        "content": "<p>(based on token regions)</p>",
        "id": 528171462,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752188751
    },
    {
        "content": "<p>Also no side-table necessary either!</p>",
        "id": 528171502,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752188766
    },
    {
        "content": "<p>I see, so I guess we're kind of assuming that the space between the tokens is all comments and/or whitespace, since those are the things we discarded</p>",
        "id": 528171662,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752188865
    },
    {
        "content": "<p>and everything else would have gotten an actual token</p>",
        "id": 528171680,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752188879
    },
    {
        "content": "<p>It's possible there are some sneaky edge-cases there with errors <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 528171815,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752188963
    },
    {
        "content": "<p>e.g. I think mismatched braces currently don't make it into the token stream</p>",
        "id": 528171850,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752188986
    },
    {
        "content": "<p>(but they should)</p>",
        "id": 528171864,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752188993
    },
    {
        "content": "<p>yeah, makes sense!</p>",
        "id": 528172039,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752189086
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> </p>\n<blockquote>\n<p>If we've got a solid plan to move forward with removing newlines</p>\n</blockquote>\n<p>Let me take a swing at this to judge how hard this will actually be...</p>",
        "id": 528172472,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752189374
    },
    {
        "content": "<p>Sounds good <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> thank you</p>",
        "id": 528172844,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752189630
    },
    {
        "content": "<p>Still a few bugs to fix up, but getting pretty close: <a href=\"https://github.com/roc-lang/roc/pull/8000\">https://github.com/roc-lang/roc/pull/8000</a></p>",
        "id": 528182677,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752197568
    },
    {
        "content": "<p>(nice round number there!)</p>",
        "id": 528182688,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752197578
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/z9_mhX76HUCJtk8OfNo1G7y0/over-8.jpg\">over-8.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/z9_mhX76HUCJtk8OfNo1G7y0/over-8.jpg\" title=\"over-8.jpg\"><img data-original-content-type=\"image/jpeg\" data-original-dimensions=\"640x640\" src=\"/user_uploads/thumbnail/22008/z9_mhX76HUCJtk8OfNo1G7y0/over-8.jpg/840x560.webp\"></a></div>",
        "id": 528182971,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752197846
    },
    {
        "content": "<p>I like this way of going much more!!!</p>",
        "id": 528187638,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752202045
    },
    {
        "content": "<p>This is a crazy histogram. What an absolutely crazy long tail</p>\n<p><a href=\"/user_uploads/22008/ZWvyLk77mviO818xcNYt9Bh9/Screenshot-2025-07-12-at-12.15.13PM.png\">Screenshot 2025-07-12 at 12.15.13â€¯PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/ZWvyLk77mviO818xcNYt9Bh9/Screenshot-2025-07-12-at-12.15.13PM.png\" title=\"Screenshot 2025-07-12 at 12.15.13â€¯PM.png\"><img data-original-content-type=\"image/png\" data-original-dimensions=\"2526x488\" src=\"/user_uploads/thumbnail/22008/ZWvyLk77mviO818xcNYt9Bh9/Screenshot-2025-07-12-at-12.15.13PM.png/840x560.webp\"></a></div>",
        "id": 528479018,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752347757
    },
    {
        "content": "<p>This is the time per call to <code>diagnosticToReport</code> for one of the mega files that takes like 2 minutes to run.</p>",
        "id": 528479052,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752347794
    },
    {
        "content": "<p>General question. Why do we make reports at all? Why don't we just stream the output diagnostics and print them right away? Why waste any allocations or memory at all building report objects?</p>",
        "id": 528479348,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752348123
    },
    {
        "content": "<p>Seems that each report is ~1KB of memory use and requires like 10 allocations and 5 frees to make.</p>",
        "id": 528479410,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752348192
    },
    {
        "content": "<p>What is that a histogram of?</p>",
        "id": 528479689,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752348457
    },
    {
        "content": "<p>Histogram of execution times of a single call to <code>diagnosticToReport</code></p>",
        "id": 528479803,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752348570
    },
    {
        "content": "<p>When checking one of my gigantic 1 million line of code files that makes a metric ton of errors</p>",
        "id": 528479851,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752348615
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/395097-compiler-development/topic/zig.20compiler.20perf.20tracking/near/528479348\">said</a>:</p>\n<blockquote>\n<p>General question. Why do we make reports at all? Why don't we just stream the output diagnostics and print them right away? Why waste any allocations or memory at all building report objects?</p>\n</blockquote>\n<p>I think what we ideally want is: </p>\n<ul>\n<li>some abstraction for how we format reports and where we output them, so we can e.g. stream to stderr or send to a language server or send to a UI in a browser or GUI app using Roc for plugins, and also we can use different formats (e.g. ANSI escape codes for terminal, html for browser, something else for editors)</li>\n<li>buffering so that we aren't doing a gazillion syscalls</li>\n<li>sorting based on module graph so that when you're rebuilding the same project over and over you don't see the same errors jumping around in terms of ordering; rather, they're stable in terms of ordering </li>\n<li>streaming, so we flush the buffers as soon as we can (and decide to)</li>\n</ul>",
        "id": 528480448,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752349364
    },
    {
        "content": "<p>so for example when writing reports to stderr I think it would be good to have an array of string buffers, one per module, and then when we decide to flush, we can do one <code>pwritev</code> to send them all to stderr in one syscall</p>",
        "id": 528480530,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752349448
    },
    {
        "content": "<p>but yeah I don't think there's any reason to make actual heap allocations for the reports, just for the string buffer so we're not making tons of tiny syscalls</p>",
        "id": 528480562,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752349490
    },
    {
        "content": "<p>I think currently we still have full source in memory, so reports don't necessarily need any allocations or strings, more just need instructions on how to render</p>",
        "id": 528480870,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752349853
    },
    {
        "content": "<p>Also, I guess I considered diagnostics the list we would sort and pass to tools and what not</p>",
        "id": 528480885,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752349868
    },
    {
        "content": "<p>So why also make a list of reports</p>",
        "id": 528480896,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752349875
    },
    {
        "content": "<p>But I guess they have richer info to pass to an lsp or something</p>",
        "id": 528480903,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752349886
    }
]