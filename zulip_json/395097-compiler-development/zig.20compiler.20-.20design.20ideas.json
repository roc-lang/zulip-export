[
    {
        "content": "<p>If we are exploring a compiler redesign in zig... I would like to try and put together some high-level design documentation to help us top-down engineer this thing. I want to look ahead at the things we know we want and need and try to plan a little for them; even if they may not be the first things we implement.</p>\n<p>To be clear -- I think it's really important to build the smallest subset of features end to end first. We can be sure we have a solid testing and debugging approach before we start adding more complexity into the mix. </p>\n<p>The key question I have at the moment is; \"what is the smallest subset of features, and why?\"</p>\n<p>I think we can figure out the overall structure, the key functions, and the interfaces between the stages.</p>\n<p>We've accumulated a lot of things that we know we want to remove, and also features we want to build... so it would be helpful to compile a summary of these.</p>\n<p>I'd like to compile a wishlist for each stage -- so we can step back and look at what we have. </p>\n<p>If you have any thoughts, or can think of things we've mentioned related to the above. Can you just drop them in this thread (even if it's just a vague dot point summary) -- and I can start putting it all together.</p>",
        "id": 497212196,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738457118
    },
    {
        "content": "<p>Put the stages into a single page... <br>\n<a href=\"/user_uploads/22008/YrRC2jymPpS0rfFMqNeeAoAS/Roc-Compiler-Stages-1-page-v1.svg\">Roc Compiler Stages 1-page v1.svg</a></p>",
        "id": 497214782,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738459803
    },
    {
        "content": "<p>As a note, for the new compiler pipeline, I think the plan is to start with only gen-llvm and the interpretter. No gen dev or gen wasm.</p>",
        "id": 497214853,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738459903
    },
    {
        "content": "<p>kk I'll update it.</p>",
        "id": 497214943,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738459986
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/avhHONQWShZTluJ9VxM8Dehg/Roc-Compiler-Stages-1-page-v2.svg\">Roc Compiler Stages 1-page v2.svg</a></p>",
        "id": 497215027,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738460066
    },
    {
        "content": "<p>As much as it wouldn't be as fast as a direct-to-WASM compiler, using LLVM for WASM gen should be fine for now</p>",
        "id": 497216300,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738461430
    },
    {
        "content": "<p>If you want compilation speed, you use the interpreter</p>",
        "id": 497216372,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738461496
    },
    {
        "content": "<p>Hmm, though I guess wasm doesn't have access to a file system, so maybe that doesn't work. Not sure.</p>",
        "id": 497216952,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738462032
    },
    {
        "content": "<p>Though theoretically it could be just like loading a bunch of js scripts, but instead of js they are roc files and converted into wasm</p>",
        "id": 497216968,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738462061
    }
]