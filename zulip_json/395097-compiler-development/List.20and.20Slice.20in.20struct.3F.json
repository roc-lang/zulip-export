[
    {
        "content": "<p>In src/build/specialize_types/IR.zig it's very common to see a <code>List</code>, <code>Slice</code>, <code>NonEmptySlice</code>,... inside the struct. Is this a zig convention?</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"c1\">/// A definition, e.g. `x = foo`</span>\n<span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">Def</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">pattern</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Pattern</span><span class=\"p\">.</span><span class=\"n\">Idx</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"c1\">/// Named variables in the pattern, e.g. `a` in `Ok a -&gt;`</span>\n<span class=\"w\">    </span><span class=\"n\">pattern_vars</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">TypedIdent</span><span class=\"p\">.</span><span class=\"n\">Slice</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">expr</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Expr</span><span class=\"p\">.</span><span class=\"n\">Idx</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">expr_type</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Type</span><span class=\"p\">.</span><span class=\"n\">Idx</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"c1\">/// todo</span>\n<span class=\"w\">    </span><span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">collections</span><span class=\"p\">.</span><span class=\"n\">SafeMultiList</span><span class=\"p\">(</span><span class=\"nb\">@This</span><span class=\"p\">());</span>\n<span class=\"w\">    </span><span class=\"c1\">/// todo</span>\n<span class=\"w\">    </span><span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">Slice</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"p\">.</span><span class=\"n\">Slice</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</code></pre></div>",
        "id": 504829459,
        "sender_full_name": "Anton",
        "timestamp": 1741696949
    },
    {
        "content": "<p>Yeah, it's for type safety and ease of use. I have definitely seen it in other zig code. Especially common for DOD types that will only ever be in lists. It's the basic way to make associated types</p>",
        "id": 504879500,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741707692
    }
]