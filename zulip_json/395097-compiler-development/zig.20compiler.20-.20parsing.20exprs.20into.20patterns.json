[
    {
        "content": "<p>this was a parsing idea I had a long time ago, and wanted to write down here because I think Zig will make it a lot easier!</p>",
        "id": 497280196,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738521655
    },
    {
        "content": "<p>we have this common pattern where the parser encounters something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>in isolation, this looks like an expression. But after parsing some more, it might turn out to be a pattern:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n</code></pre></div>",
        "id": 497280309,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738521754
    },
    {
        "content": "<p>there is a <em>ton</em> of overlap between our pattern and expr nodes</p>",
        "id": 497280326,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738521771
    },
    {
        "content": "<p>not full overlap though - <code>as</code> and <code>|</code> are only allowed in patterns, function application is only allowed in exprs, etc.</p>",
        "id": 497280357,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738521802
    },
    {
        "content": "<p>but let's suppose we ignored those differences at the parsing stage, and said we had one node type called like <code>ExprOrPattern</code> (ideally with a better name, but let's run with it for now)</p>",
        "id": 497280439,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738521848
    },
    {
        "content": "<p>and it supported <code>as</code>, <code>|</code>, function application, etc. - just a superset of all the things exprs and patterns can have</p>",
        "id": 497280456,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738521866
    },
    {
        "content": "<p>and then I believe there's a way in Zig (haven't looked into specifically how this would look) to customize the discriminant of the tag union, such that we can say both:</p>\n<ul>\n<li>here's what type of node it is (e.g. \"record destructure\" in this example)</li>\n<li>a single bit for \"this is an expr\" vs \"this is a pattern\"</li>\n</ul>",
        "id": 497280527,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738521939
    },
    {
        "content": "<p>at that point, we can have all of these nodes begin life as an expr, and then later on when we discover it's a pattern (e.g. we encounter an <code>=</code>) we just flip the bit on the node we've been working on</p>",
        "id": 497280587,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738521968
    },
    {
        "content": "<p>so we don't have to go back and reassemble anything, it just goes from being an <code>ExprOrPattern</code> with the expr bit set to the same node but with the pattern bit set</p>",
        "id": 497280611,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738521993
    },
    {
        "content": "<p>then, later on in canonicalization, we can report errors like \"you can't have <code>|</code> in an expr\" or \"you can't have function application in a pattern\"</p>",
        "id": 497280639,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738522021
    },
    {
        "content": "<p>this is separately consistent with our desire to have an error-tolerant parser</p>",
        "id": 497280648,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738522033
    },
    {
        "content": "<p>e.g. just because I have <code>as</code> in an expr where it's not allowed, that shouldn't break the formatter</p>",
        "id": 497280673,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738522045
    },
    {
        "content": "<p>the formatter should still be able to know what to do there, we just need to report an error during canonicalization of \"you can't do that here, maybe you want _________ instead?\"</p>",
        "id": 497280694,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738522071
    },
    {
        "content": "<p>so this seems like it would simplify a bunch of logic we have now around discovering later that what looked like an expr actually turned out to be a pattern</p>",
        "id": 497280758,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738522105
    },
    {
        "content": "<p>bc we wouldn't have to build a <code>Pattern</code> from an <code>Expr</code>, we just flip a bit</p>",
        "id": 497280838,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738522188
    },
    {
        "content": "<p>anyway, curious what anyone thinks of this!</p>\n<p>cc <span class=\"user-mention\" data-user-id=\"453336\">@Joshua Warner</span> <span class=\"user-mention\" data-user-id=\"781658\">@Anthony Bullard</span></p>",
        "id": 497282423,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738523425
    },
    {
        "content": "<p>Including <code>|</code> for patterns in the same parser as <code>|args| body</code> closures will cause problems</p>",
        "id": 497283535,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738524405
    },
    {
        "content": "<p>hm true</p>",
        "id": 497284474,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738525134
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> what if we changed those to <code>or</code>?</p>",
        "id": 497284484,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738525146
    },
    {
        "content": "<p>like <code>Foo or Bar(baz) -&gt;</code></p>",
        "id": 497284507,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738525161
    },
    {
        "content": "<p>seems very self-descriptive!</p>",
        "id": 497284526,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738525181
    },
    {
        "content": "<p>I'm not sure if we actually need to include <code>|</code> in the expression parser. I believe that's only used for when branches, where we can just call the expr parser with a flag saying to disallow closures, and then handle the <code>|</code> in the when branch code.</p>",
        "id": 497284759,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738525332
    },
    {
        "content": "<p>That said, I would be fine with <code>or</code></p>",
        "id": 497284784,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738525354
    },
    {
        "content": "<p>I know you would be against it more than likely Richard, but if the current <code>|</code> were replaced with <code>or</code>, then it could be repurposed to introducing a when branch and then there would be no amibiguity</p>",
        "id": 497290750,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738530305
    },
    {
        "content": "<p>Do you have thoughts here <span class=\"user-mention\" data-user-id=\"453336\">@Joshua Warner</span> ?</p>",
        "id": 497294215,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738532909
    },
    {
        "content": "<p>That does make when parsing easier.</p>",
        "id": 497294259,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738532969
    },
    {
        "content": "<p>Looks weird to my eyes tho. (Subjective opinion!)</p>",
        "id": 497294338,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738533008
    },
    {
        "content": "<p>Pretty common in ML, though</p>",
        "id": 497294362,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738533032
    },
    {
        "content": "<p>Guess which language family I’ve spent the least time using <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 497294391,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738533056
    },
    {
        "content": "<p>If pipe introduces branches, I’d have that also separate branch patterns</p>",
        "id": 497294536,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738533153
    },
    {
        "content": "<p>I wouldn’t mix pipe and or for that</p>",
        "id": 497294550,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738533172
    },
    {
        "content": "<p>Yeah, that's what other MLs do</p>",
        "id": 497294591,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738533208
    },
    {
        "content": "<p>I don’t think the pipe ambiguity will be a problem in practice here</p>",
        "id": 497294595,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738533215
    },
    {
        "content": "<p>But not Haskell (which is actually Miranda derived)</p>",
        "id": 497294610,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738533229
    },
    {
        "content": "<p>Huh; what does that use?</p>",
        "id": 497294656,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738533244
    },
    {
        "content": "<p>WSS</p>",
        "id": 497294668,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738533250
    },
    {
        "content": "<p>Or dear old friend</p>",
        "id": 497294672,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738533254
    },
    {
        "content": "<p>And to my memory (it's been a couple of years) it is NOT forgiving</p>",
        "id": 497294684,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738533270
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kr\">case</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kr\">of</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">print</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"s\">\"x: \"</span><span class=\"w\"> </span><span class=\"o\">++</span><span class=\"w\"> </span><span class=\"n\">show</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">++</span><span class=\"w\"> </span><span class=\"s\">\", y: \"</span><span class=\"w\"> </span><span class=\"o\">++</span><span class=\"w\"> </span><span class=\"n\">show</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>But</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kr\">case</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kr\">of</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">print</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"s\">\"x: \"</span><span class=\"w\"> </span><span class=\"o\">++</span><span class=\"w\"> </span><span class=\"n\">show</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">++</span><span class=\"w\"> </span><span class=\"s\">\", y: \"</span><span class=\"w\"> </span><span class=\"o\">++</span><span class=\"w\"> </span><span class=\"n\">show</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>WILL NOT parse if I remember correctly</p>",
        "id": 497294728,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738533312
    },
    {
        "content": "<p>Ahhh for some reason I thought you meant it used something else besides '|' to separate patterns</p>",
        "id": 497294926,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738533464
    },
    {
        "content": "<p>Yes that much matches my memory, given my (very limited) haskell experience</p>",
        "id": 497294987,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738533490
    }
]