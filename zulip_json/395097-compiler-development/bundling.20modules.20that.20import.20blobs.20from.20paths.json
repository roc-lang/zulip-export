[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/304641-ideas/topic/specifying.20.60glue.60.20file.20in.20package.20module/near/412834767\">said</a>:</p>\n<blockquote>\n<p>How do you build a rust glue package if it depends on <code>../../roc_std/src/lib.rs</code>?). You don't really want many copies of the same files, but might be stuck with that and versioning pains if we package src.</p>\n</blockquote>\n<p>I'm not worried at all about the \"many copies of the same files\" part when it comes to glue <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 412835100,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1705255956
    },
    {
        "content": "<p>however, this does raise a general question about what to do with <code>..</code> paths for static strings/byte lists in the context of bundling <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 412835117,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1705255989
    },
    {
        "content": "<p>I'd never thought about this scenario until now, but my immediate thought is that of course the bundle should automatically include those</p>",
        "id": 412835135,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1705256013
    },
    {
        "content": "<p>because otherwise in the general case, you download the bundle and it doesn't build</p>",
        "id": 412835146,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1705256032
    },
    {
        "content": "<p>that's no good!</p>",
        "id": 412835151,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1705256038
    },
    {
        "content": "<p>however, the paths are an interesting challenge because:</p>\n<ul>\n<li>we could rewrite them during the bundling so that what ends up in the bundle no longer uses <code>..</code> paths, and then copy the assets over to whatever path we rewrite it to. A downside of this is that today the bundling process is very simple, (just put all the relevant files in a tarball, done) which means it can be performed on systems that have <code>roc</code> installed. This design would mean giving up that potentially useful property. Also, rewriting would mean that you couldn't independently hash the original source files yourself and verify them, because the hash <code>roc</code> would generate would be against the rewritten files. Also if you looked into your cache, you'd find that the files there are different from the source files that were put into the bundle.</li>\n<li>we could instead change how file resolution works, such that (for example) <code>..</code> in these import paths gets ignored when reading out of the downloaded cache, and then copy the files over according to that rule. That would work, but now if you go into your cache and hand-edit files, some of the paths work differently than how they look like they would.</li>\n<li>we could disallow <code>..</code> in import paths, and say if you want the behavior we have in <code>RustGlue.roc</code> you have to use symlinks. This would be particularly inconvenient for application authors who have no intention of ever bundling their code, but who want to use <code>..</code> like how we are in <code>RocGlue.roc</code> today.</li>\n</ul>",
        "id": 412835644,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1705256491
    },
    {
        "content": "<p>I guess we could also disallow bundling things with <code>..</code> in their paths</p>",
        "id": 412835657,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1705256517
    },
    {
        "content": "<p>of course, a downside of that is that if you didn't get an error sooner, you might not realize you'd included one until you went to make a release, which might be an unpleasant surprise</p>",
        "id": 412835753,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1705256623
    },
    {
        "content": "<p>Yeah, so bundling the compiled asset means we dont need to deal with that. Though it guess it is plausible for this to get hit in a regular package instead of a glue specific one</p>",
        "id": 412835840,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705256706
    },
    {
        "content": "<p>yeah this has to be solved regardless of glue</p>",
        "id": 412835873,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1705256745
    },
    {
        "content": "<p>10 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"304641\" href=\"/#narrow/stream/304641-ideas/topic/specifying.20.02klzzwxh.3A0000.03.20file.20in.20package.20module\">#ideas &gt; specifying <code>glue</code> file in package module</a> by <span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span>.</p>",
        "id": 412835934,
        "sender_full_name": "Notification Bot",
        "timestamp": 1705256791
    },
    {
        "content": "<p>moved because this is a currently-unhandled edge case in the compiler <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 412835950,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1705256820
    }
]