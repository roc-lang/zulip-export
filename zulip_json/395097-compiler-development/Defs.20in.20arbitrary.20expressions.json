[
    {
        "content": "<p>in general if I indent and do <code>x = 1</code>, doesn't that always begin a def?</p>",
        "id": 482924094,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1731901857
    },
    {
        "content": "<p>That was one of the things that changed with the introduction of \"blocks/statements\" a while back</p>",
        "id": 482924217,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1731901968
    },
    {
        "content": "<p>Prior to that, it worked _inconsistently_</p>",
        "id": 482924232,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1731901981
    },
    {
        "content": "<p>That's something we can bring back in the future, but I'd want to figure out some of the oddities with that first</p>",
        "id": 482924284,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1731902038
    },
    {
        "content": "<p>e.g. I'm having a hard time understanding why someone would ever want to do:</p>\n<div class=\"codehilite\"><pre><span></span><code>x +\n   y = 1\n   y*2\n</code></pre></div>",
        "id": 482924475,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1731902165
    },
    {
        "content": "<p>I would have to go back in the git history and check - but I _think_ that was one of the cases that never worked</p>",
        "id": 482924518,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1731902209
    },
    {
        "content": "<p>I forget whether that worked in the context of an argument to a function</p>",
        "id": 482924547,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1731902236
    },
    {
        "content": "<p>(this probably deserves a separate thread...)</p>",
        "id": 482924670,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1731902335
    },
    {
        "content": "<p>8 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"395097\" href=\"/#narrow/channel/395097-compiler-development/topic/Weird.20fuzzing.20bug.20of.20the.20day\">#compiler development &gt; Weird fuzzing bug of the day</a> by <span class=\"user-mention silent\" data-user-id=\"453336\">Joshua Warner</span>.</p>",
        "id": 482924975,
        "sender_full_name": "Notification Bot",
        "timestamp": 1731902530
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453336\">Joshua Warner</span> <a href=\"#narrow/channel/395097-compiler-development/topic/Defs.20in.20arbitrary.20expressions/near/482924475\">said</a>:</p>\n<blockquote>\n<p>e.g. I'm having a hard time understanding why someone would ever want to do:</p>\n<p><div class=\"codehilite\"><pre><span></span><code>x +\n   y = 1\n   y*2\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>that's a very fair point!</p>",
        "id": 482925188,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1731902746
    },
    {
        "content": "<p>From a parsing perspective, I think the biggest question in bringing this back would be how this interacts with arguments in an apply. Can you _only_ do this on the last argument in an apply? How would you separate more arguments to the outer apply, from arguments to the last expr of the defs sequence?</p>",
        "id": 482925256,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1731902776
    },
    {
        "content": "<p>I guess the real critical thing is that defs work inside function bodies, constants, <code>expect</code>s, and <code>if</code> and <code>where</code> branches</p>",
        "id": 482925259,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1731902779
    },
    {
        "content": "<p>everything else feels non-essential</p>",
        "id": 482925325,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1731902800
    },
    {
        "content": "<p>and more of an \"ease of teaching how it works\" thing</p>",
        "id": 482925340,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1731902808
    },
    {
        "content": "<p>but seems fine overall to not support it imo</p>",
        "id": 482925355,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1731902820
    },
    {
        "content": "<blockquote>\n<p>ease of teaching how it works</p>\n</blockquote>\n<p>Yeah, that's a fair point</p>",
        "id": 482925368,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1731902824
    },
    {
        "content": "<p>like we could always consider adding support for it someday if we think it's worth it</p>",
        "id": 482925389,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1731902842
    },
    {
        "content": "<p>but for right now I would rather prioritize correctness</p>",
        "id": 482925392,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1731902850
    },
    {
        "content": "<p>of the compiler</p>",
        "id": 482925399,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1731902855
    }
]