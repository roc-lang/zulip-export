[
    {
        "content": "<p>I think we should revisit disallowing <code>==</code> on <code>F32</code> and <code>F64</code> (and therefore pattern matching on them too)</p>",
        "id": 527055762,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751568194
    },
    {
        "content": "<p>main reason is that in the static dispatch world I'm not sure if it's feasible without sacrificing other goals</p>",
        "id": 527055838,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751568234
    },
    {
        "content": "<p>in static dispatch, we need a <code>Num.equals</code> function and that's what <code>a == b</code> will desugar to</p>",
        "id": 527055907,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751568258
    },
    {
        "content": "<p>when <code>a</code> and <code>b</code> have the type <code>Num</code></p>",
        "id": 527055927,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751568266
    },
    {
        "content": "<p>the obvious type for <code>Num.equals</code> is <code>Num(a), Num(a) -&gt; Bool</code></p>",
        "id": 527055969,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751568285
    },
    {
        "content": "<p>if we need to make the type be \"not a <code>F32</code> and not a <code>F64</code> but <code>Dec</code> is okay\" then we need to make the number type system much more complicated than it is today</p>",
        "id": 527056117,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751568323
    },
    {
        "content": "<p>which I don't think is a cost that's worth the benefit of disallowing equality for floats</p>",
        "id": 527056153,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751568339
    },
    {
        "content": "<p>it would have to be strict bit equality right?</p>",
        "id": 527056310,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751568394
    },
    {
        "content": "<p>I'm setting that aside for now</p>",
        "id": 527056346,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751568414
    },
    {
        "content": "<p>it's more that we'd previously decided to disallow it, partly because it's error-prone and also because of what happens when you try to use infinity, -infinity, and NaN in dictionaries and sets</p>",
        "id": 527056438,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751568445
    },
    {
        "content": "<p>so, one idea would be:</p>\n<ul>\n<li><code>Num.equals : Num(a), Num(a) -&gt; Bool</code></li>\n<li>allow float literals in patterns</li>\n<li>if you try to put infinity, -infinity, or NaN into a dictionary or set, we just <code>crash</code></li>\n</ul>",
        "id": 527056858,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751568631
    },
    {
        "content": "<p>yeah it's goofy</p>",
        "id": 527056868,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751568635
    },
    {
        "content": "<p>yeah i kinda hate that last bullet point</p>",
        "id": 527057000,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751568682
    },
    {
        "content": "<p>I'm open to suggested alternatives haha</p>",
        "id": 527057085,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751568726
    },
    {
        "content": "<p>can we just have a hard coded prohibition on dicts and sets around prohibiting fp</p>",
        "id": 527057101,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751568730
    },
    {
        "content": "<p>it's the same problem as <code>Num.equals</code></p>",
        "id": 527057191,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751568752
    },
    {
        "content": "<p>I think that's better than handing devs a footgun</p>",
        "id": 527057201,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751568755
    },
    {
        "content": "<p>how do you represent it in the type system?</p>",
        "id": 527057204,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751568757
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> <a href=\"#narrow/channel/395097-compiler-development/topic/float.20equality.20and.20static.20dispatch/near/527057201\">said</a>:</p>\n<blockquote>\n<p>I think that's better than handing devs a footgun</p>\n</blockquote>\n<p>that's why we originally disallowed this <span aria-label=\"smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 527057247,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751568778
    },
    {
        "content": "<p>I'm not saying representing it at all.</p>",
        "id": 527057261,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751568784
    },
    {
        "content": "<p>I definitely think it's a smaller footgun with <code>crash</code>  than with it doing what happens by default with nan in dictionaries/sets</p>",
        "id": 527057313,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751568805
    },
    {
        "content": "<p>Just a hard coded \"i'm sorry dave...\"</p>",
        "id": 527057324,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751568812
    },
    {
        "content": "<p>at compile time?</p>",
        "id": 527057351,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751568820
    },
    {
        "content": "<p>Yes with a clear explanation of why</p>",
        "id": 527057376,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751568833
    },
    {
        "content": "<p>we could do a warning I guess</p>",
        "id": 527057450,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751568868
    },
    {
        "content": "<p>NaNs are relatively easy to create especially through serialization/deserialization</p>",
        "id": 527057465,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751568874
    },
    {
        "content": "<p>error seems weird, like it's a type mismatch but not a type mismatch <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 527057487,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751568886
    },
    {
        "content": "<p>Infinity not as much</p>",
        "id": 527057501,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751568890
    },
    {
        "content": "<p>i don't think it would be a type mismatch,</p>",
        "id": 527057538,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751568905
    },
    {
        "content": "<p>but at the very least a warning</p>",
        "id": 527057592,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751568922
    },
    {
        "content": "<p>the counterargument (which I do think is reasonable) is that if someone's using floats over the default of <code>Dec</code> in general, it's because their use case needs hardware-accelerated performance more than it needs footgun avoidance, and so even knowing that floats are full of footguns they are making the choice</p>",
        "id": 527057858,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751569041
    },
    {
        "content": "<p>and so blocking them from using floats in these ways is just hurting them and not really helping them</p>",
        "id": 527057877,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751569052
    },
    {
        "content": "<p>under that design philosophy, the purpose of the <code>crash</code> in dictionaries and sets would be the same as <code>crash</code> on integer overflow: if this ever happens, you have 100% for sure entered a broken state, and being loudly broken is better than being silently broken</p>",
        "id": 527058468,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751569318
    },
    {
        "content": "<p>I agree, so maybe a warning is the appropriate thing</p>",
        "id": 527058537,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751569355
    },
    {
        "content": "<p>well warning just means error that doesn't block you from running</p>",
        "id": 527060621,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751570419
    },
    {
        "content": "<p>but warnings return nonzero exit code and they're intended to convey \"you should 100% fix this at some point, but your program isn't necessarily going to crash just because you didn't fix it\"</p>",
        "id": 527060696,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751570448
    },
    {
        "content": "<p>If the assumption is floats are used presumably for performance, why not moving them out from the set of good friendly numbers that lack NaNs, Infinities and variable precision? Yes, it would break generics over usual numbers. But floats seem to be too specific</p>",
        "id": 527060705,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1751570452
    },
    {
        "content": "<p>because then you can't have like <code>my_float + my_other_float</code></p>",
        "id": 527060752,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751570474
    },
    {
        "content": "<p>that's not a realistic option <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 527060759,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751570478
    },
    {
        "content": "<p>a general theme with floats has been me trying to make them less error-prone and then gradually realizing that attempts to make them less error-prone also make them less usable for the thing they're actually good at, which is high-performance fractional math</p>",
        "id": 527060855,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751570529
    },
    {
        "content": "<p>and at this point I'm leaning towards the actual answer being \"use <code>Dec</code> if you want reliability, and if you want hardware-accelerated performance and footguns, use <code>F32</code>/<code>F64</code> and be aware that here there be dragons\"</p>",
        "id": 527060972,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751570585
    },
    {
        "content": "<p>none of the experiments we've tried to make floats less error-prone have turned out well imo</p>",
        "id": 527061023,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751570616
    },
    {
        "content": "<p>but offering a non-error-prone alternative has been great and is unaffected by what we do with floats</p>",
        "id": 527061074,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751570640
    },
    {
        "content": "<blockquote>\n<p>because then you can't have like <code>my_float + my_other_float</code>.</p>\n</blockquote>\n<p>Introduce a sister of <code>Num</code>, <code>FloatNum</code> and call it a day <span aria-label=\"smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 527061118,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1751570664
    },
    {
        "content": "<p>that doesn't work</p>",
        "id": 527061155,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751570682
    },
    {
        "content": "<p>We could have Floating point operators</p>",
        "id": 527061172,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751570693
    },
    {
        "content": "<p>numbers all need to have the base type <code>Num</code> and a different type parameter</p>",
        "id": 527061173,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751570697
    },
    {
        "content": "<p>And then they can live on an island</p>",
        "id": 527061195,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751570709
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> <a href=\"#narrow/channel/395097-compiler-development/topic/float.20equality.20and.20static.20dispatch/near/527061172\">said</a>:</p>\n<blockquote>\n<p>We could have Floating point operators</p>\n</blockquote>\n<p>yeah people love that about OCaml <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 527061211,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751570719
    },
    {
        "content": "<p>Like .+, .-, etc</p>",
        "id": 527061224,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751570727
    },
    {
        "content": "<p>i'm just exploring the spaxe</p>",
        "id": 527061253,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751570740
    },
    {
        "content": "<p>yeah I hear ya</p>",
        "id": 527061262,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751570748
    },
    {
        "content": "<p>It's clearer what you are getting into</p>",
        "id": 527061289,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751570759
    },
    {
        "content": "<p>There is rational behavior over here, and floats over there</p>",
        "id": 527061333,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751570777
    },
    {
        "content": "<p>yeah, but like another thing I'm kind of tuned into here is that we're all coming at this from a web dev perspective</p>",
        "id": 527061363,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751570795
    },
    {
        "content": "<p>in my language i tried to get around it by only having DEC64 as the number type</p>",
        "id": 527061379,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751570803
    },
    {
        "content": "<p>I'm pretty sure if there were a Roc game dev in here they'd be like \"wtf don't do that to me, I have to use floats all the damn time and I don't have a choice about it, why are you trying to make my life harder just bc I'm a game dev\"</p>",
        "id": 527061427,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751570824
    },
    {
        "content": "<p>But apparently a lot of people like to shit on DEC64 and i didn't have the time to dig into the specific claims</p>",
        "id": 527061468,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751570838
    },
    {
        "content": "<p>GPU-powered native UI applications are in the same boat; <code>F32</code> is what the GPU wants</p>",
        "id": 527061561,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751570889
    },
    {
        "content": "<p>like probably if you're making a web app, more often than not just using <code>Dec</code> everywhere is the better choice, but Roc is aimed at a broader set of use cases</p>",
        "id": 527061600,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751570905
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/395097-compiler-development/topic/float.20equality.20and.20static.20dispatch/near/527061427\">said</a>:</p>\n<blockquote>\n<p>I'm pretty sure if there were a Roc game dev in here they'd be like \"wtf don't do that to me, I have to use floats all the damn time and I don't have a choice about it, why are you trying to make my life harder just bc I'm a game dev\"</p>\n</blockquote>\n<p>Roc is going to be high perf, but game dev level performant?  i mean outside of Love2D style?</p>",
        "id": 527061605,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751570907
    },
    {
        "content": "<blockquote>\n<p>game dev</p>\n</blockquote>\n<p>yeah, I bet they love equality checks</p>",
        "id": 527061612,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1751570910
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/395097-compiler-development/topic/float.20equality.20and.20static.20dispatch/near/527061561\">said</a>:</p>\n<blockquote>\n<p>GPU-powered native UI applications are in the same boat; <code>F32</code> is what the GPU wants</p>\n</blockquote>\n<p>this is the real stickler</p>",
        "id": 527061630,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751570922
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> <a href=\"#narrow/channel/395097-compiler-development/topic/float.20equality.20and.20static.20dispatch/near/527061605\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/395097-compiler-development/topic/float.20equality.20and.20static.20dispatch/near/527061427\">said</a>:</p>\n<blockquote>\n<p>I'm pretty sure if there were a Roc game dev in here they'd be like \"wtf don't do that to me, I have to use floats all the damn time and I don't have a choice about it, why are you trying to make my life harder just bc I'm a game dev\"</p>\n</blockquote>\n<p>Roc is going to be high perf, but game dev level performant?  i mean outside of Love2D style?</p>\n</blockquote>\n<p>people make a living on Unity games written in C#, and we should be faster than that</p>",
        "id": 527061680,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751570950
    },
    {
        "content": "<p>Ok, floating equality is usually done with a fixed precision value?</p>",
        "id": 527061930,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1751571076
    },
    {
        "content": "<p>I mean, approximate equality, right? Also, warnings per equality check?</p>",
        "id": 527062223,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1751571221
    },
    {
        "content": "<p>in most languages with floats, equality compiles down to the CPU instructions for float equality, which has these semantics (as defined by the <a href=\"https://en.wikipedia.org/wiki/IEEE_754\">IEEE-754 hardware standard</a>):</p>\n<ul>\n<li><code>-0</code> and <code>0</code> are considered equal</li>\n<li><code>NaN</code> is considered unequal to everything</li>\n<li>everything else works the same way normal integer equality works</li>\n</ul>",
        "id": 527062494,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751571365
    },
    {
        "content": "<p>And in the warnings you would see \"it's an approximate equality with x tolerance. If you want bit eq, use this, if you want different tolerance so that\"</p>",
        "id": 527062514,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1751571371
    },
    {
        "content": "<p>I shouldn't have said \"warning\" earlier - let's just say \"compiler error\"</p>",
        "id": 527062536,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751571384
    },
    {
        "content": "<p>if we give a warning, or special compiler error, for using floats with equals, to me this is basically equivalent to changing how number types work without actually making the change, except much hackier</p>",
        "id": 527062702,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751571471
    },
    {
        "content": "<p>I don't think we should do it</p>",
        "id": 527062704,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751571474
    },
    {
        "content": "<p>I think a reasonable comparison is with integer addition</p>",
        "id": 527062774,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751571519
    },
    {
        "content": "<p>we don't warn you at compile-time if you do <code>a + b</code> even though that can be a runtime crash if it overflows</p>",
        "id": 527062805,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751571540
    },
    {
        "content": "<p>like we could say \"you should consider using checked addition so you can handle overflow errors properly, or saturating addition if it's ok to round off to the nearest high number\"</p>",
        "id": 527062860,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751571575
    },
    {
        "content": "<p>and force you to do that everywhere</p>",
        "id": 527062872,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751571581
    },
    {
        "content": "<p>but we who are not doing game dev or native GUI development in Roc know that this would be super annoying and make us not want to use the language, much more so than the errors it would prevent</p>",
        "id": 527062927,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751571607
    },
    {
        "content": "<p>so we wouldn't support that change</p>",
        "id": 527062951,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751571616
    },
    {
        "content": "<p>and I don't think we'd support errors for floats either if we were forced by our use case to use them all over our code base</p>",
        "id": 527062998,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751571639
    },
    {
        "content": "<p>I see. My take is that it's annoying searching for the place where two floats were compared if there was a bug. Especially in case of generic functions. But I lived like that and haven't died yet</p>",
        "id": 527064795,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1751572603
    },
    {
        "content": "<p>If we give a footgun, I think it makes sense to provide a pair of decent shoes. A linter? Does roc already have a debug assertion function?</p>",
        "id": 527066269,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1751573315
    },
    {
        "content": "<p><code>expect</code> is basically Rust's <code>debug_assert!</code></p>",
        "id": 527073696,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751577275
    },
    {
        "content": "<p>I definitely would like to never have a linter in Roc</p>",
        "id": 527073728,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751577293
    },
    {
        "content": "<p>at least not the traditional kind that looks for generic \"issues\"</p>",
        "id": 527073754,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751577307
    },
    {
        "content": "<p>as opposed to project-specific ones where the end user sets rules like \"hey we're trying to move away from Foo, so no new uses of it allowed!\"</p>",
        "id": 527073813,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751577331
    },
    {
        "content": "<p>Once the roc parser is in the wild, community driven linters will be a matter of time.<br>\nBut speaking of linter, I mean more clippy than eslint</p>",
        "id": 527074632,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1751577754
    },
    {
        "content": "<p>I understand the sentiment that linters have slipped into style checkers. As a result you have purism in the name of democracy (yes, oxymoron) and part of the team go with \"whatever\" and the other hate unreasonable rule they regularly face that mostly hinders development.</p>\n<p>But the roc linter can concentrate on heuristics of correctness and not style. So it might be a tool, not constitution.</p>",
        "id": 527078113,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1751579525
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/channel/395097-compiler-development/topic/float.20equality.20and.20static.20dispatch/near/527060752\">said</a>:</p>\n<blockquote>\n<p>because then you can't have like <code>my_float + my_other_float</code></p>\n</blockquote>\n<p>Can you explain this more? I thought with static dispatch as long as they had <code>add : F32, F32 -&gt; F32</code> then it would be ok to use <code>+</code></p>",
        "id": 527081452,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751581675
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> <a href=\"#narrow/channel/395097-compiler-development/topic/float.20equality.20and.20static.20dispatch/near/527061195\">said</a>:</p>\n<blockquote>\n<p>And then they can live on an island</p>\n</blockquote>\n<p>Is this because they're floating... thanks Dad <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 527081528,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751581740
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/channel/395097-compiler-development/topic/float.20equality.20and.20static.20dispatch/near/527060972\">said</a>:</p>\n<blockquote>\n<p>and at this point I'm leaning towards the actual answer being \"use <code>Dec</code> if you want reliability, and if you want hardware-accelerated performance and footguns, use <code>F32</code>/<code>F64</code> and be aware that here there be dragons\"</p>\n</blockquote>\n<p>I think this is a very reasonable approach. </p>\n<p>The \"there be dragons\" part is something we can also help with a lot more than in every other language where I assume these also exist.</p>",
        "id": 527081664,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751581854
    },
    {
        "content": "<p>I'm not sure about the \"help a lot more than\" -- because we're talking about runtime issues.</p>",
        "id": 527082045,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751582083
    },
    {
        "content": "<p>I only hope that dragons won't be implicit</p>",
        "id": 527084712,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1751583993
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/channel/395097-compiler-development/topic/float.20equality.20and.20static.20dispatch/near/527081452\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/channel/395097-compiler-development/topic/float.20equality.20and.20static.20dispatch/near/527060752\">said</a>:</p>\n<blockquote>\n<p>because then you can't have like <code>my_float + my_other_float</code></p>\n</blockquote>\n<p>Can you explain this more? I thought with static dispatch as long as they had <code>add : F32, F32 -&gt; F32</code> then it would be ok to use <code>+</code></p>\n</blockquote>\n<p>oh you're right, sorry - that particular example would work, but you couldn't have (for example) the number literal <code>4.2</code> going from <code>Frac(a)</code> to <code>F32</code> anymore (or else you couldn't have it for <code>Dec</code> either)</p>",
        "id": 527089981,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751588743
    },
    {
        "content": "<p>number literals rely on all of the number literals having the same nominal type - <code>Num</code> - and then only the type variables change when you use them in more specific ways</p>",
        "id": 527090008,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751588774
    },
    {
        "content": "<p>The idea of pulling <code>F32</code> and <code>F64</code> out from <code>Num</code> is an option right? They're still in the stdlib and available for use if you need performance, but you know they're not the safe default options.</p>",
        "id": 527090082,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751588853
    },
    {
        "content": "<p>We could still have special handling support for them like <code>43.0f64</code></p>",
        "id": 527090165,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751588961
    },
    {
        "content": "<p>we could, yes, and then Roc will never be a C# competitor for game dev <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 527091203,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751590075
    },
    {
        "content": "<p>or a JS competitor for cross-platorm native GUIs etc.</p>",
        "id": 527091238,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751590112
    },
    {
        "content": "<p>I think a big part of the problem here is that when I was originally thinking about it, I was thinking about it as if people are going to use floats for performance in just like one hotspot in a large code base that really needs a little extra juice</p>",
        "id": 527091304,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751590169
    },
    {
        "content": "<p>but I don't think that's right</p>",
        "id": 527091315,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751590176
    },
    {
        "content": "<p>I think it's actually more like \"my whole use case is floats, and if Roc's ergonomics around floats are terrible then I just will not use it for my use case\"</p>",
        "id": 527091336,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751590202
    },
    {
        "content": "<p>so I think a better mindset is like \"make it really really ridiculously easy to not use floats if you don't have to, but if you <em>do</em> have to, make the experience as nice as possible\"</p>",
        "id": 527091389,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751590248
    },
    {
        "content": "<p>Maybe this is a silly question.. but why are they more ergonomic in Num? Is it not casting between number types, like when adding an integer or similar?</p>",
        "id": 527091424,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751590279
    },
    {
        "content": "<p>which I do think includes crashing when a <code>NaN</code> would get inserted into a set or dict, instead of making the set or dict start quietly behaving in ludicrous ways</p>",
        "id": 527091437,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751590291
    },
    {
        "content": "<p>so like if I want to write the number <code>4.2</code>, just like that, and be able to use that exact syntax for an argument to a function that accepts a <code>Dec</code> and also a function that accepts a <code>F32</code>, then either they both need to be a <code>Num</code> nominal type (with different type parameters) or else we need a fancier type system just for numbers</p>",
        "id": 527091497,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751590365
    },
    {
        "content": "<p>Ah ofc. I forgot about the polymorphic type things.</p>",
        "id": 527091889,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751590760
    },
    {
        "content": "<p>I'm only a newish, hobbyist game dev, but my impression is games people would generally also not want exact float equality. For example, the implementation of Vec3 equals in Unity has an epsilon range</p>",
        "id": 527091906,
        "sender_full_name": "Dan G Knutson",
        "timestamp": 1751590777
    },
    {
        "content": "<p>IIRC there was some prominent bug in Minecraft related to using float equality instead of a &lt;= guard. Which is the kind of thing where the consequence is youtuber lore instead of someone losing money, but game devs get got by floats too</p>",
        "id": 527092093,
        "sender_full_name": "Dan G Knutson",
        "timestamp": 1751590923
    },
    {
        "content": "<p>yeah the problem is I've heard it's like \"sometimes you actually do want it and other times you want to avoid it\"</p>",
        "id": 527092779,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751591525
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/395097-compiler-development/topic/float.20equality.20and.20static.20dispatch/near/527061173\">said</a>:</p>\n<blockquote>\n<p>numbers all need to have the base type <code>Num</code> and a different type parameter</p>\n</blockquote>\n<p>Given anything can implement plus and such in the new compiler, is this still strictly needed?</p>",
        "id": 527093759,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751592417
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/395097-compiler-development/topic/float.20equality.20and.20static.20dispatch/near/527061561\">said</a>:</p>\n<blockquote>\n<p>GPU-powered native UI applications are in the same boat; <code>F32</code> is what the GPU wants</p>\n</blockquote>\n<p>Actually gpus really prefer bf16, tf32, or fp8. Fp32 is pretty outdated on gpus nowadays.</p>",
        "id": 527093839,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751592486
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/395097-compiler-development/topic/float.20equality.20and.20static.20dispatch/near/527091437\">said</a>:</p>\n<blockquote>\n<p>which I do think includes crashing when a <code>NaN</code> would get inserted into a set or dict, instead of making the set or dict start quietly behaving in ludicrous ways</p>\n</blockquote>\n<p>Honestly, if we are specially casing flaots anyway to do this, just ban hashing floats in general. I don't think there is a generic way in roc for a dictionary to check for this. So it has to be special cased.</p>",
        "id": 527094041,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751592638
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/395097-compiler-development/topic/float.20equality.20and.20static.20dispatch/near/527092779\">said</a>:</p>\n<blockquote>\n<p>yeah the problem is I've heard it's like \"sometimes you actually do want it and other times you want to avoid it\"</p>\n</blockquote>\n<p>I think it is 99% of the time you don't want it, but some hyper optimized code has uses.</p>",
        "id": 527094182,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751592771
    },
    {
        "content": "<p>banning floats from having hashing has the same problems as banning them from having equals</p>",
        "id": 527102884,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751601650
    },
    {
        "content": "<p>like basically if we want to have floats still be able to work with number literals but not support equals or hash, we have to change the Num hierarchy to something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kt\">F32</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Fraction</span><span class=\"p\">(</span><span class=\"kt\">Binary32</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"n\">has_nan</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Yes</span><span class=\"p\">]</span>\n<span class=\"p\">})</span>\n\n<span class=\"kt\">F32</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Dec</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Fraction</span><span class=\"p\">(</span><span class=\"kt\">Binary32</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"n\">has_nan</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">No</span><span class=\"p\">]</span>\n<span class=\"p\">})</span>\n\n<span class=\"kt\">U64</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Integer</span><span class=\"p\">(</span><span class=\"kt\">Unsigned64</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"n\">has_nan</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">No</span><span class=\"p\">]</span>\n<span class=\"p\">})</span>\n\n<span class=\"kt\">Num</span><span class=\"o\">.</span><span class=\"n\">equals</span><span class=\"w\"> </span><span class=\"kt\">:</span>\n<span class=\"w\">    </span><span class=\"kt\">Num</span><span class=\"p\">({</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">has_nan</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">No</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}),</span>\n<span class=\"w\">    </span><span class=\"kt\">Num</span><span class=\"p\">({</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">has_nan</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">No</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"w\">    </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Bool</span>\n\n<span class=\"kt\">Frac</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">has_nan</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Fraction</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"n\">has_nan</span><span class=\"p\">,</span>\n<span class=\"p\">})</span>\n\n<span class=\"kt\">Num</span><span class=\"o\">.</span><span class=\"n\">div</span><span class=\"w\"> </span><span class=\"kt\">:</span>\n<span class=\"w\">    </span><span class=\"kt\">Frac</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">has_nan</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"kt\">Frac</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">has_nan</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Frac</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">has_nan</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 527103711,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751602347
    },
    {
        "content": "<p>so the type complexity and learning curve for all numbers goes up, compile times get some amount worse because we have this extra stuff to check, and the payoff is that we have disallowed direct float equality in favor of having to do the <code>(x &gt;= y and x &lt;= y)</code> trick</p>",
        "id": 527103881,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751602494
    },
    {
        "content": "<p>How would a dict crash when used with floats?</p>",
        "id": 527105499,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751603868
    },
    {
        "content": "<p>I think it has to be some sort of special cases mechanism</p>",
        "id": 527105505,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751603881
    },
    {
        "content": "<p>I think we should just special cases this</p>",
        "id": 527105520,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751603888
    },
    {
        "content": "<p>Simply and am extra of condiction that if a hash resolves to a float create a compilation failure</p>",
        "id": 527105551,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751603918
    },
    {
        "content": "<p>Like have it just happen after resolution</p>",
        "id": 527105556,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751603925
    },
    {
        "content": "<p>That or have it crash at runtime (but compile time error is a better experience)</p>",
        "id": 527105576,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751603941
    },
    {
        "content": "<p>Like I think should just not represent it in the type system at all. Totally a special case</p>",
        "id": 527105615,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751603972
    },
    {
        "content": "<p>this is interesting: <a href=\"https://internals.rust-lang.org/t/f32-f64-should-implement-hash/5436/4\">https://internals.rust-lang.org/t/f32-f64-should-implement-hash/5436/4</a></p>",
        "id": 527183272,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751636342
    },
    {
        "content": "<p>Yeah, reading some of that thread reinforces my opinion. We should just generate a custom compile time error if someone calls <code>.hash</code> on a float.</p>\n<p>If a user wants float hashing, they should wrap the float in a custom type. The best part of this is that the special type also, can implement all the math functions and be nice enough to use.</p>",
        "id": 527187585,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751637880
    },
    {
        "content": "<p>And I think this is an odd enough edge cases that it is worth making a special error for after type resolution. I don't think it is worth truly representing in the type system.</p>",
        "id": 527188260,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751638090
    },
    {
        "content": "<p>Also, I guess if num was a more standard type instead of a magically dynamic type, this could be dealt with in pure roc by calling <code>Num.hash</code>, which would unwrap the outer type and then call <code>Frac.hash</code>, which would unwrap and call <code>F64.hash</code>, would either call <code>crash</code> or a new <code>compileTimeError</code> builtin. Frankly, you could just leave it as a header with no definition and that would technically work as a compile time error.</p>",
        "id": 527188921,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751638312
    },
    {
        "content": "<p>But I don't think num has true unwrapping of the outer type. Instead, it magically works for different multiple types.</p>",
        "id": 527189205,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751638409
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/395097-compiler-development/topic/float.20equality.20and.20static.20dispatch/near/527187585\">said</a>:</p>\n<blockquote>\n<p>Yeah, reading some of that thread reinforces my opinion. We should just generate a custom compile time error if someone calls <code>.hash</code> on a float.</p>\n</blockquote>\n<p>I'm on mobile and don't have a quick explaination, but in general I don't think we should do this</p>",
        "id": 527208108,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751646431
    },
    {
        "content": "<p>this is basically saying \"we should introduce the concept of secret type mismatches that aren't represented in the type system so you can no longer ever tell from looking at two types whether they're going to have a mismatch\"</p>",
        "id": 527208280,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751646492
    },
    {
        "content": "<p>it means things like a package can publish a new version with identical type signatures, as a patch release, and now it breaks your builds because it secretly started using hashing somewhere deep behind the scenes and you were passing it a float</p>",
        "id": 527208499,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751646564
    },
    {
        "content": "<p>Take a look at <a class=\"stream-topic\" data-stream-id=\"304641\" href=\"/#narrow/channel/304641-ideas/topic/Do.20we.20need.20Num.20anymore.3F/with/527191038\">#ideas &gt; Do we need Num anymore?</a> I think we may be able to do this more properly.</p>",
        "id": 527208600,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751646594
    },
    {
        "content": "<p>if passing a particular type to a function can cause a type mismatch, that needs to be reflected in the type.</p>",
        "id": 527208614,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751646599
    }
]