[
    {
        "content": "<p>I have lost a lot of time to incomplete pattern matches falling back to some kind of fallback behavior.  I think I'm OK if the fallback case is an <code>unreachable!()</code>, but nothing else.</p>\n<p>Please discuss. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 492202333,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736204143
    },
    {
        "content": "<p>I'm not sure what you're  saying.</p>",
        "id": 492207541,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736206045
    },
    {
        "content": "<p>Can you give an example?</p>",
        "id": 492207558,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736206050
    },
    {
        "content": "<p>Is this in canonicalization?</p>",
        "id": 492207685,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736206106
    },
    {
        "content": "<p>And parse</p>",
        "id": 492218507,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736211568
    },
    {
        "content": "<p>And fmt</p>",
        "id": 492218512,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736211570
    },
    {
        "content": "<p>you mean stop using <code>_ =&gt;</code> in <code>match</code> branches and make them all exhaustive, yeah?</p>",
        "id": 492222565,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1736213836
    },
    {
        "content": "<p>I presume so</p>",
        "id": 492222694,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736213889
    },
    {
        "content": "<p>I think this is mostly a problem when it would lead to a crash</p>",
        "id": 492222833,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736213976
    },
    {
        "content": "<p>I'm wondering what your opinion is when we want to unwrap a specific type of node, I'll get you a link</p>",
        "id": 492222916,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736214006
    },
    {
        "content": "<p>Do you think that this is a bad code pattern for checking all abilities while maintaining a single loop over all top-level types? <a href=\"https://github.com/roc-lang/roc/blob/a089cf2487d2cb5f1d977a2e01be5ab7b4de3275/crates/compiler/can/src/def.rs#L1048\">https://github.com/roc-lang/roc/blob/a089cf2487d2cb5f1d977a2e01be5ab7b4de3275/crates/compiler/can/src/def.rs#L1048</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">either_index</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">loc_defs</span><span class=\"p\">.</span><span class=\"n\">tags</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">type_index</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">either_index</span><span class=\"p\">.</span><span class=\"n\">split</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">type_def</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">loc_defs</span><span class=\"p\">.</span><span class=\"n\">type_defs</span><span class=\"p\">[</span><span class=\"n\">type_index</span><span class=\"p\">.</span><span class=\"n\">index</span><span class=\"p\">()];</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">pending_type_def</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">to_pending_type_def</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">type_def</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">scope</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">pattern_type</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">PendingTypeDef</span><span class=\"p\">::</span><span class=\"n\">Ability</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">members</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">pending_type_def</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"n\">pending_abilities_in_scope</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span>\n<span class=\"w\">                    </span><span class=\"n\">name</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span>\n<span class=\"w\">                    </span><span class=\"n\">members</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">mem</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">mem</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">).</span><span class=\"n\">collect</span><span class=\"p\">(),</span>\n<span class=\"w\">                </span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">            </span><span class=\"n\">pending_type_defs</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">pending_type_def</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 492223221,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736214169
    },
    {
        "content": "<p>The <code>if let PendingTypeDef::Ability ...</code></p>",
        "id": 492223251,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736214187
    },
    {
        "content": "<p>Similar usage of a <code>while let</code> here: <a href=\"https://github.com/roc-lang/roc/blob/a089cf2487d2cb5f1d977a2e01be5ab7b4de3275/crates/compiler/can/src/def.rs#L2560\">https://github.com/roc-lang/roc/blob/a089cf2487d2cb5f1d977a2e01be5ab7b4de3275/crates/compiler/can/src/def.rs#L2560</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">canonicalize_pending_body</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">DefOutput</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">loc_value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">loc_expr</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ast</span><span class=\"p\">::</span><span class=\"n\">Expr</span><span class=\"p\">::</span><span class=\"n\">ParensAround</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">loc_value</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">loc_value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 492223430,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736214242
    },
    {
        "content": "<p>I think it's a generally useful technique to inexhaustively check an enum when there are many variants and you only care about one or two of them</p>",
        "id": 492223528,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736214300
    },
    {
        "content": "<p>A way to get around this is to model your data more precisely to your needs, but that can be inefficient, and there are some cleanliness things that aren't worth the tradeoff</p>",
        "id": 492223735,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736214398
    },
    {
        "content": "<p>i think this might be a higher level thing where this is too much matching on variants going on in general and they should be centralized to one place or made function calls instead. i have definitely felt this before</p>",
        "id": 492226196,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1736215680
    },
    {
        "content": "<p>I definitely have a hard time figuring out how much the team likes helper functions vs. one big stream of code</p>",
        "id": 492226363,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736215772
    },
    {
        "content": "<p>Outside of the Roc compiler, I would normally pull something like <code>fn unparens_expr(Expr) -&gt; Expr</code></p>",
        "id": 492226476,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736215830
    },
    {
        "content": "<p>saying this only for the code that i have written, but i have written a lot of the code in the currrnt compiler implementation, i wouldn’t take the current patterns as definitive. a lot of what i wrote were semi poorly structured things we expected to fix and never did</p>",
        "id": 492227296,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1736216271
    },
    {
        "content": "<p>The big problem is if you add a new case to an enum, you can silently fall into some bad behavior because you don't get an exhaustiveness error</p>",
        "id": 492229524,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736217452
    },
    {
        "content": "<p>And it can feel mysterious</p>",
        "id": 492229537,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736217465
    },
    {
        "content": "<p>The joy of pattern matching is exhaustiveness checking - it's what makes ADTs delicious.</p>",
        "id": 492229618,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736217499
    },
    {
        "content": "<p><code>_ =&gt;</code> can - in a large codebase especially - make them instead miserable</p>",
        "id": 492229659,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736217530
    },
    {
        "content": "<p>I don't even mind the long functions as much</p>",
        "id": 492229739,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736217578
    },
    {
        "content": "<p>I typically only refactor into functions to share either a) long bits of code (especially if likely to change), and b) code that is repeated a LOT of times and is likely to change in the same way in the vast majority of the original code sites</p>",
        "id": 492229856,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736217638
    },
    {
        "content": "<p>FWIW in Zig I would try to always exhaust or fallthrough with <code>else =&gt; unreachable,</code> (or an error depending on the context). In Rust, I would usually strive to do the sams however I did notice certain opposition of some Rustacean to <code>_ =&gt; unreachable!()</code> or more generally assert-based programming.</p>",
        "id": 493467508,
        "sender_full_name": "Jakub Konka",
        "timestamp": 1736808839
    },
    {
        "content": "<p>Assert-based programming is the most based programming</p>",
        "id": 493470224,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736809726
    }
]