[
    {
        "content": "<p>If we're rewriting the compiler, we have an opportunity to rethink some of the less important syntaxes while we're at it. One of those is not just how hosted modules look, but whether we want to have them in the first place. It has been suggested before that we combine them into the platform's <code>main.roc</code> file, which has some pros and cons:</p>\n<h3>Pros</h3>\n<ul>\n<li>It has been nice to localize all hosted annotations to a single place to make them easy to find</li>\n<li>it's nice to have everything consistently named at the import site, e.g. always <code>import Host</code><ul>\n<li>we already have a prelude of builtins that we automatically import, we could make the \"Host\" module auto-imported within platforms for consistency</li>\n</ul>\n</li>\n</ul>\n<h3>Cons</h3>\n<ul>\n<li>we were gonna maybe use module params as the syntax for them, which are not likely to be around, we'd need a different syntax<ul>\n<li>We'd probably just put them in a record-like field next to \"requires\" and \"provides\"</li>\n</ul>\n</li>\n<li>if they're in the same file as the rest of the platform's defs, then the platform <code>main.roc</code> will start to get pretty big</li>\n</ul>",
        "id": 497178353,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738427656
    },
    {
        "content": "<p>That last reason is my biggest concern and why I think a separate module should stay around to make future large-scale platforms not difficult to manage</p>",
        "id": 497178440,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738427747
    },
    {
        "content": "<p>I think it might be nice to require the hosted module be named <code>Host.roc</code> and be in the package root folder, though, to enforce a degree of stylistic consistency that shouldn't get in anyone's way with respect to writing clean, useful code</p>",
        "id": 497178550,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738427811
    },
    {
        "content": "<p>I feel like the platform main makes reasonable sense. That file is generally empty otherwise. It makes sense for it to hold the full interface to the host.</p>",
        "id": 497178773,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738427997
    },
    {
        "content": "<p>But that isn't a very strong feeling</p>",
        "id": 497178855,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738428038
    },
    {
        "content": "<p>I wonder if there is an overall better design....</p>",
        "id": 497178864,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738428054
    },
    {
        "content": "<p>It might be nice to put those hosted annotations at the bottom of the file</p>",
        "id": 497178885,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738428073
    },
    {
        "content": "<p>Because right now, the header is maybe 5-10 lines, and then the \"connective tissue\" functions between <code>main!</code> and <code>main_for_host!</code> is the important part of the file's contents</p>",
        "id": 497178965,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738428143
    },
    {
        "content": "<p>But in this world, if the hosted annotations are in the header, now the header is like 5-10 lines followed by 50 lines of types, and then the <code>main_for_host!</code> body is buried under those</p>",
        "id": 497179012,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738428185
    },
    {
        "content": "<p>I think my concerns go away if we order the content of a platform's <code>main.roc</code> by importance, namely:</p>\n<ul>\n<li>the header</li>\n<li>the <code>main_for_host!</code> definition</li>\n<li>the potentially long list of hosted annotations</li>\n</ul>",
        "id": 497179062,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738428238
    },
    {
        "content": "<p>I think let's leave this as-is for now</p>",
        "id": 497179157,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738428288
    },
    {
        "content": "<p>the reason we ended up here was because of problems with cyclic imports otherwise</p>",
        "id": 497179182,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738428303
    },
    {
        "content": "<p>module params are an alternative way to deal with that, but I'd like to not implement module params in the new compiler, and I don't think now is the right time to re-solve that problem <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 497179228,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738428341
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"781658\">@Anthony Bullard</span> we should keep <code>hosted</code> modules, then</p>",
        "id": 497179245,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738428360
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 497179310,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738428386
    }
]