[
    {
        "content": "<p>I'm assuming it's not possible to handle implement Decode for tagged unions without some form of a macro system.  Have there been any previous discussions of this? It does feel a bit incomplete for this to be missing</p>",
        "id": 490816439,
        "sender_full_name": "Nathan Kamenchu",
        "timestamp": 1735169430
    },
    {
        "content": "<p>it's possible, we just haven't implemented it</p>",
        "id": 490816537,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735169533
    },
    {
        "content": "<p>it shouldn't need a macro system</p>",
        "id": 490816543,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735169541
    },
    {
        "content": "<p>We haven't implemented it? I thought it already worked</p>",
        "id": 490816556,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735169558
    },
    {
        "content": "<p>Just isn't implemented for the JSON decoder</p>",
        "id": 490816566,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735169570
    },
    {
        "content": "<p>I don't think we have it for Decoding</p>",
        "id": 490816586,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735169594
    },
    {
        "content": "<p>but I could be misremembering <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 490816592,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735169603
    },
    {
        "content": "<p>Oh... intriguing. I don't recall at this point. That said, we still plan to revamp the whole system.</p>",
        "id": 490816607,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735169631
    },
    {
        "content": "<p>But yeah, no macro system needed.</p>",
        "id": 490816672,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735169688
    },
    {
        "content": "<p>You have autoderive or a manual implementation. Either is fine.</p>",
        "id": 490816692,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735169718
    },
    {
        "content": "<p>It's also missing from the Ability definition</p>",
        "id": 490816781,
        "sender_full_name": "Nathan Kamenchu",
        "timestamp": 1735169791
    },
    {
        "content": "<p>Ok</p>",
        "id": 490816899,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735169929
    },
    {
        "content": "<p>Last I checked with the work to revamp decode, it was stuck on lambdaset bugs.</p>",
        "id": 490816920,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735169965
    },
    {
        "content": "<p>But we should be able to add tag decoding directly to the old decode</p>",
        "id": 490816930,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735169982
    },
    {
        "content": "<p>The compiler panics with</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;&lt;unnamed&gt;&#39; panicked at crates/compiler/mono/src/ir.rs:6257:10:\nAbility specialization is unknown. Tip: check out &lt;https://roc.zulipchat.com/#na\nrrow/stream/231634-beginners/topic/Non-Functions.20in.20Abilities/near/456068617\n&gt;: DeriveError(Underivable)\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>",
        "id": 490817135,
        "sender_full_name": "Nathan Kamenchu",
        "timestamp": 1735170209
    },
    {
        "content": "<p>I was trying out roc and decided to implement lamdera in roc by writing a platform but I've gotten stuck on sending messages over the wire.</p>",
        "id": 490817443,
        "sender_full_name": "Nathan Kamenchu",
        "timestamp": 1735170567
    },
    {
        "content": "<p>This is with a tag?</p>",
        "id": 490817478,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735170600
    },
    {
        "content": "<p>Yes that is what happens with a tag<br>\nThere's a different but similar message for Opaque types too</p>",
        "id": 490817535,
        "sender_full_name": "Nathan Kamenchu",
        "timestamp": 1735170638
    },
    {
        "content": "<p>If so, we need to add tag decoding to the ability. Then we need to add autoderive for it in the compiler.</p>",
        "id": 490817546,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735170664
    },
    {
        "content": "<p>Would be very similar to the autoderrive for encoding a tag</p>",
        "id": 490817562,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735170688
    },
    {
        "content": "<p>Trying to decode with an opaque type errors with</p>\n<div class=\"codehilite\"><pre><span></span><code>An internal compiler expectation was broken.\n\nThis is definitely a compiler bug.\n\nPlease file an issue here: &lt;https://github.com/roc-lang/roc/issues/new/choose&gt;\n\nexpected to know a specialization for `17.IdentId(2)`#`13.IdentId(4)`, but it wasn&#39;t found\n\nLocation: crates/compiler/solve/src/specialize.rs:749:29\n</code></pre></div>\n<p>But my assumption is that this is intentional</p>",
        "id": 490817820,
        "sender_full_name": "Nathan Kamenchu",
        "timestamp": 1735170979
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/395097-compiler-development/topic/Decode.20ability.20for.20tagged.20union/near/490817562\">said</a>:</p>\n<blockquote>\n<p>Would be very similar to the autoderrive for encoding a tag</p>\n</blockquote>\n<p>Should I create an issue for it? You mentioned that there is work to revamp the code<br>\nI will take a look at the compiler and try to implement an autoderive.</p>",
        "id": 490818054,
        "sender_full_name": "Nathan Kamenchu",
        "timestamp": 1735171231
    },
    {
        "content": "<p>What is reasonable API for a tag method in the <code>DeocderFormatting</code> ability?</p>",
        "id": 490988118,
        "sender_full_name": "Nathan Kamenchu",
        "timestamp": 1735303482
    },
    {
        "content": "<p>With the current decode it should be very similar to a tuple. It should just decode a string tag name before decoding the tuple fields</p>",
        "id": 491007489,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735316540
    },
    {
        "content": "<p>I assume something similar to record and tuple like<br>\n<code>tuple : state, (state, Str -&gt; [Select (Decoder state fmt), Next]), (state -&gt; Result val DecodeError) -&gt; Decoder val fmt where fmt implements DecoderFormatting</code><br>\nbut the nested decoding requirements where each variant would then need to decode a variable number of fields does feel like it may require more information like the index of the current tuple field</p>",
        "id": 491008342,
        "sender_full_name": "Nathan Kamenchu",
        "timestamp": 1735317128
    },
    {
        "content": "<p>The alternative would just be push all of that to the state</p>",
        "id": 491009291,
        "sender_full_name": "Nathan Kamenchu",
        "timestamp": 1735317800
    }
]