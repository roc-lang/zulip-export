[
    {
        "content": "<p>Like <a href=\"https://github.com/roc-lang/roc/pull/6116\">roc_dbg</a> we want expect failures to call out to a function in the platform.</p>",
        "id": 418463775,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706407875
    },
    {
        "content": "<p>The current proposed api is:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">roc_expect_failed</span><span class=\"p\">(</span><span class=\"n\">loc</span>: <span class=\"o\">*</span><span class=\"n\">RocStr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">src</span>: <span class=\"o\">*</span><span class=\"n\">RocStr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">variables</span>: <span class=\"o\">*</span><span class=\"n\">RocList</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"n\">name</span>: <span class=\"nc\">RocStr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">RocStr</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 418463790,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706407893
    },
    {
        "content": "<p>One thing that makes expect less direct than dbg is that we fundamentally only want to run all of the <code>Inspect.toStr</code> calls if the expectation actually failed.</p>\n<p>So the final code gen would be something like:</p>\n<ol>\n<li>run the conditional if success skip all the following steps</li>\n<li>write the cached location to a string</li>\n<li>grab the source and write it to a string</li>\n<li>For every symbol used by the expect expression:<br>\n    1. Write the symbol name to string (hmm, not sure what name would be used for temporaries, maybe just the actual sourced that the symbol references)<br>\n    2. <code>Inspect.toStr</code> the intermediate value.<br>\n    3. Append that to the variables list for passing to the plaftorm</li>\n<li>Call the platform expect function.</li>\n</ol>\n<p>I am not sure this will exactly be the easiest thing to pipeline all information around for and code gen for, but feel like it should be relatively reasonable. Any specific considerations around how this should be done? I just kinda feel that if I go and hack this in, it will be messier than I want it to be. Also, I guess I probably need some smart solution to avoid accidentally making IR nodes too large with extra data.</p>",
        "id": 418464124,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706408275
    },
    {
        "content": "<p>So just thought I would throw it up here first and get general opinions. I still currently feel like I never know what level of IR to instrument this kind of stuff at. Cause it feels more complicated then just desugaring, but maybe it is best to just see it as a really large desugaring (hmm...though that probably won't work for top level expects. only for mid function expects).</p>",
        "id": 418464210,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706408354
    },
    {
        "content": "<p>yeah this looks reasonable, but it's only for inline expects - top level expects only get run by <code>roc test</code>, never by the platform</p>",
        "id": 418498856,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1706445318
    },
    {
        "content": "<p>I think we should also do this with top level expects and a compiler internal platform when using the <code>roc test</code>. That way we can still remove all the memory sharing infrastructure and just rely on this for all testing.</p>\n<p>But yeah, by default, we don't want to generate anything for top level expects.</p>",
        "id": 418516006,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706459594
    }
]