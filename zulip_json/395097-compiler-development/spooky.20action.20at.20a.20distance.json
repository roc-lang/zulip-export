[
    {
        "content": "<p>I may just be missing something, but this bug is super strange: <a href=\"#narrow/stream/358903-Advent-of-Code/topic/2023.20Day.201/near/405345841\">https://roc.zulipchat.com/#narrow/stream/358903-Advent-of-Code/topic/2023.20Day.201/near/405345841</a></p>\n<p>Basically, we have a small string. It is split into a list of small strings (this is all just copying, no references or modifications). Then when joining that list back together( again, just copying small strings). Then somehow, the original string changes despite not being used at all in the joining process.</p>\n<p>Sounds to me like we may be writing to the wrong offset of the stack somewhere. Really strange.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>An Overly defensive printout with extra prints in zig builtins</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>[#UserApp] \"starting str\"<br>\n[#UserApp] \"abc\"<br>\nStr.graphemes<br>\nbefore: Str: abc, Len: 0, Cap: 9439544818968559616<br>\n0: Str: a, Len: 0, Cap: 9295429630892703744<br>\n1: Str: b, Len: 0, Cap: 9295429630892703744<br>\n2: Str: c, Len: 0, Cap: 9295429630892703744<br>\nafter: Str: abc, Len: 0, Cap: 9439544818968559616<br>\n[#UserApp] \"after Str.graphemes\"<br>\n[#UserApp] [\"a\", \"b\", \"c\"]<br>\n[#UserApp] \"abc\"<br>\n[#UserApp] \"after List.dropFirst\"<br>\n[#UserApp] [\"b\", \"c\"]<br>\n[#UserApp] \"abc\"<br>\nStr.joinWith<br>\n0: Str: b, Len: 0, Cap: 9295429630892703744<br>\n1: Str: c, Len: 0, Cap: 9295429630892703744<br>\noffest 2 out of 2<br>\n[#UserApp] \"after Str.joinWith\"<br>\n[#UserApp] \"bc\"<br>\n[#UserApp] \"abc\"<br>\n[#UserApp] \"starting str\"<br>\n[#UserApp] \"bc\"<br>\nStr.graphemes<br>\nbefore: Str: bc, Len: 0, Cap: 9367487224930631680<br>\n0: Str: b, Len: 0, Cap: 9295429630892703744<br>\n1: Str: c, Len: 0, Cap: 9295429630892703744<br>\nafter: Str: bc, Len: 0, Cap: 9367487224930631680<br>\n[#UserApp] \"after Str.graphemes\"<br>\n[#UserApp] [\"b\", \"c\"]<br>\n[#UserApp] \"bc\"<br>\n[#UserApp] \"after List.dropFirst\"<br>\n[#UserApp] [\"c\"]<br>\n[#UserApp] \"bc\"<br>\nStr.joinWith<br>\n0: Str: c, Len: 0, Cap: 9295429630892703744<br>\noffest 1 out of 1<br>\n[#UserApp] \"after Str.joinWith\"<br>\n[#UserApp] \"c\"<br>\n[#UserApp] \"c\"<br>\n[#UserApp] \"starting str\"<br>\n[#UserApp] \"c\"<br>\nStr.graphemes<br>\nbefore: Str: c, Len: 0, Cap: 9295429630892703744<br>\n0: Str: c, Len: 0, Cap: 9295429630892703744<br>\nafter: Str: c, Len: 0, Cap: 9295429630892703744<br>\n[#UserApp] \"after Str.graphemes\"<br>\n[#UserApp] [\"c\"]<br>\n[#UserApp] \"c\"<br>\n[#UserApp] \"after List.dropFirst\"<br>\n[#UserApp] []<br>\n[#UserApp] \"c\"<br>\nStr.joinWith<br>\n[#UserApp] \"after Str.joinWith\"<br>\n[#UserApp] \"\"<br>\n[#UserApp] \"\"<br>\n[#UserApp] [\"abc\", \"c\", \"\"]<br>\nDone</p>\n</div></div>\n<p>Like if this was happening with seamless slices, it would make sense to me, but this is all small strings.</p>",
        "id": 405401898,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701449768
    },
    {
        "content": "<p>Weird!<br>\nIs this entirely confined to Zig code or is there any Roc code?<br>\nDo optimizations make a difference?</p>",
        "id": 405446451,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1701469039
    },
    {
        "content": "<p>I tested both with and without <code>--optimize</code>, no change.</p>\n<p>Lines starting with <code>[#UserApp] </code> are <code>dbg</code> messages from roc. Non-prefixed lines are from zig. I was unable to see the change from the zig side. Which makes sense given zig does not have access to the variable when it theoretically changes.</p>",
        "id": 405446945,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701469359
    }
]