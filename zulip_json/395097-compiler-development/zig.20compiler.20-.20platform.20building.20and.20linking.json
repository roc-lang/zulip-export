[
    {
        "content": "<p>What is our plan for actually building and linking platforms? I feel like that story is still lacking quite a bit today.</p>\n<p>In general, what do we think the starting point should be and what do we think the end target should be?</p>\n<p>With the interpretter as our default debug interface, linking performance matters a lot less. We theoretically don't need the surgical linkers anymore. That said, the surgical linkers have another huge win in terms of dependency management. They enable us to avoid managing dependencies during linking. As a note, we can get the same thing without the surgical linker by compiling roc to a shared library. The executable will be precompiled and roc would just be a shared library that it loads.</p>\n<p>I just want to make sure we start off with the right footing here. I feel like this is an area that has potential to really hinder roc. The surgical linker is not robust. Well it does generally work, making it robust on all platforms is not clear (it should work in theory, but it might be tons of segfaults and work, also, fixing it may really hurt perf).</p>",
        "id": 497213857,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738458863
    },
    {
        "content": "<p>Especially with the focus of the zig compiler being on correctness first, I'm wondering if there is a way we could avoid the surgical linker while still making a nice experience.</p>",
        "id": 497213902,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738458927
    },
    {
        "content": "<blockquote>\n<p>we can get the same thing without the surgical linker by compiling roc to a shared library. The executable will be precompiled and roc would just be a shared library that it loads.</p>\n</blockquote>\n<p><span aria-label=\"plus\" class=\"emoji emoji-2795\" role=\"img\" title=\"plus\">:plus:</span></p>",
        "id": 497214857,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738459912
    },
    {
        "content": "<p>Note, the main cost of doing that is that you now can't distribute a single file, you now have do distribute two files (<code>./host</code> and <code>./libapp.so</code>)</p>",
        "id": 497214917,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738459953
    },
    {
        "content": "<p>Could these be limited to within the platform package though, and roc somehow link the two together to produce a single executable after <code>roc build</code>?</p>",
        "id": 497215092,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738460153
    },
    {
        "content": "<blockquote>\n<p>and roc somehow link the two together to produce a single executable after <code>roc build</code></p>\n</blockquote>\n<p>That would be the surgical linker</p>",
        "id": 497215166,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738460184
    },
    {
        "content": "<p>There's a lot of nice things about the surgical linker <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 497215197,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738460223
    },
    {
        "content": "<p>There may be some sort of simple runtime way to unpack and deal with this, but not really sure.</p>",
        "id": 497215219,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738460259
    },
    {
        "content": "<p>I guess the simplest thing is </p>\n<ol>\n<li>for production like builds -- generate an object using gen-llvm and link with a prebuilt-host that is a static library</li>\n<li>for dev loop -- use the interpreter... how does this do platform/host things? (i have a crazy idea - 1 sec)</li>\n</ol>",
        "id": 497215313,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738460353
    },
    {
        "content": "<p>I'm not worried about the interpretter for this, pretty sure I know how to make that work (basically platform -&gt; shim shared library  that loads and tags data -&gt; roc compiler loaded as a shared library to launch the interpreter).</p>",
        "id": 497215381,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738460404
    },
    {
        "content": "<blockquote>\n<p>generate an object using gen-llvm and link with a prebuilt-host that is a static library</p>\n</blockquote>\n<p>The big question is, if we do this, how do we deal with the platform dependencies?</p>",
        "id": 497215398,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738460430
    },
    {
        "content": "<p>I think the whole platform/app abstraction gives us a really nice opportunity for platform authors to provide a domain specific dev experience.</p>\n<p>Basically, I think we flip things around from the traditional roc is a compiler and drives things, to roc the compiler is a library used by the host. I'm assuming here that bundling just the parts needed for interpreting roc (parsing, typechecking etc) is very slim.</p>\n<p>A platform author like basic-cli could include the \"roc interpreter\" into it's host and bundle a separate executable in the package that conforms to some specific cli interface -- so that it can be instructed to parse an app and startup an interpreter. </p>\n<p>So running <code>roc app.roc</code> -- the roc cli simply finds the basic-cli package files in cache and then says to the basic-cli interpreter binary \"hey here's an app, go do interpreter things with it\".</p>",
        "id": 497215650,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738460734
    },
    {
        "content": "<p>The platform author then has a nice abstraction to work with, that will parse the roc code and provides a nice abstraction of the roc program, I imagine our effect interpreter like state machine or something.</p>",
        "id": 497215751,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738460864
    },
    {
        "content": "<p>The platform author can then build whatever \"interpreter\" or \"debugging\" like experience around that makes sense in their world.</p>",
        "id": 497215808,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738460906
    },
    {
        "content": "<p>So like how lua jit gets embedded into game engines? Basically you load lua as a c library and then tell to to go run a function from a file with specific args.</p>",
        "id": 497215818,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738460922
    },
    {
        "content": "<p>This works and is a nice embedded experience, but I'm not sure how we mesh it with the llvm optimized experience. Theoretically we want those to both be seamless from the app author perspective.</p>",
        "id": 497215847,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738460972
    },
    {
        "content": "<p>Maybe, I don't know anything about lua. </p>\n<p>I just <em>feel</em> like there is a use case here that gives us nice interpreter, debugging, tooling, etc and simplifies our platform things too.</p>",
        "id": 497215855,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738460990
    },
    {
        "content": "<blockquote>\n<p>but I'm not sure how we mesh it with the llvm optimized experience</p>\n</blockquote>\n<p>This is the main sticking point of that flow.</p>",
        "id": 497215918,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738461050
    },
    {
        "content": "<blockquote>\n<p>llvm optimized experience</p>\n</blockquote>\n<p>What does this mean? how does it relate to a dev loop or interpreter?</p>",
        "id": 497215969,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738461121
    },
    {
        "content": "<p>A platform has to work both with the interpreter and the llvm flow. What you have describe above only works with the interpreter and would not work with the llvm flow</p>",
        "id": 497216084,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738461229
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20platform.20building.20and.20linking/near/497215398\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>generate an object using gen-llvm and link with a prebuilt-host that is a static library</p>\n</blockquote>\n<p>The big question is, if we do this, how do we deal with the platform dependencies?</p>\n</blockquote>\n<p>You're referring to this right?</p>\n<p>Is there something different about this new world compared to current situation?</p>",
        "id": 497216198,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738461349
    },
    {
        "content": "<blockquote>\n<p>You're referring to this right?</p>\n</blockquote>\n<p>yes</p>\n<blockquote>\n<p>Is there something different about this new world compared to current situation?</p>\n</blockquote>\n<p>Not specifically, but the current solution of <code>link.rs</code> is terrible.</p>",
        "id": 497216277,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738461410
    },
    {
        "content": "<blockquote>\n<p>I'm wondering if there is a way we could avoid the surgical linker while still making a nice experience.</p>\n</blockquote>\n<p>Random idea... could we have some kind of stubbed out facade that a platform author uses. And that \"interfaces\" with an interepreted version of the roc app somehow?</p>\n<p>I made a diagram... just because I'm already looking at diagrams</p>\n<p><a href=\"/user_uploads/22008/C1pBdVDrEoOVtoHbJuvoeWwN/LLVM-Dev-interpreter-idea.svg\">LLVM Dev interpreter idea.svg</a></p>",
        "id": 497217045,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738462128
    },
    {
        "content": "<blockquote>\n<p>could we have some kind of stubbed out facade that a platform author uses</p>\n</blockquote>\n<p>This?<br>\n<span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20platform.20building.20and.20linking/near/497215381\">said</a>:</p>\n<blockquote>\n<p>I'm not worried about the interpretter for this, pretty sure I know how to make that work (basically platform -&gt; shim shared library  that loads and tags data -&gt; roc compiler loaded as a shared library to launch the interpreter).</p>\n</blockquote>",
        "id": 497217073,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738462162
    },
    {
        "content": "<p>We've gone through the process of mostly mapping out the desired workflows in that massive preprocess-host PR. </p>\n<p>It'd be good to look at those out, and try to make some simplified diagrams which shows the different ways we can use roc (dev, embedded, optimised, prebuilt host, interptreted ...)</p>",
        "id": 497217662,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738462753
    },
    {
        "content": "<p>Though, depending on where this conversation goes... the linking strategy might be very different</p>",
        "id": 497217750,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738462813
    },
    {
        "content": "<p>so here are some things that are important to me:</p>\n<ol>\n<li>It is possible when using some platforms (but not necessarily all) to run <code>roc build</code> with no arguments and have it output a single executable file which can then be distributed. This rules out designs where we do things like have the platform build an executable that loads a dylib and then <code>roc</code> only knows how to compile to dylibs.</li>\n<li>It is possible to use Roc for building plugins that get loaded into larger files. One plausible way to do this is to have <code>roc  build</code> output a dylib for some platforms (because they opted into that, not because it's the only option), and another plausible way to do it is to have some way for hosts to call a Roc interpreter at runtime.</li>\n<li>No matter what we're outputting, dev builds are fast.</li>\n<li>If the platform is looking for a compiled binary (as opposed to explicitly wanting to bundle an interpreter only), we always offer an option to give fully optimized binary. In other words, we don't say \"you asked for a compiled binary and what you got was an interpreter.\"</li>\n</ol>",
        "id": 497221313,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738466595
    },
    {
        "content": "<p>Some notes...</p>\n<ul>\n<li>No more surgical linker</li>\n<li>No more dev backends (for now)</li>\n</ul>\n<ol>\n<li><strong>Roc Build</strong> &amp; run - standalone binary</li>\n</ol>\n<p>Platform has a string for roc to build <code>lld libhost.a app.o -l raylib -l c</code></p>\n<p>Roc cli bundles a linker “lld”, and the platform gives roc a list of dynamic libraries roc should link with. We can require the platform provide an explanation of how to go get dynamic dependency to provide nice error messages.</p>\n<p>The platform should specify different build options in <code>platform.roc</code> header - NO_LINK, LINK (deps..), different options per target, use WASM_LD etc</p>\n<ol start=\"2\">\n<li><strong>Roc Dev</strong> with interpreter - build a shim <code>interpreter.o</code> and link that with the host.</li>\n</ol>\n<p>Required to use a fast dev loop with any platform. Linked once and ran multiple times. We need a away to tell the interpreter where the .roc files are to interpret, we hardcode the path to the app files when we build -- so one copy for each project.</p>\n<p>Host passes into roc a function that is used to load files… roc_load : OsStr -&gt; List U8.</p>\n<ol start=\"3\">\n<li><strong>Embedding Roc</strong> (<code>libroc</code>) – platform embeds libroc interpreter and uses it to provide an interpreted/debugging experience</li>\n</ol>\n<p>We will probably need something like this to provide the REPL, online playground… experience</p>\n<ol start=\"4\">\n<li><strong>Naked Roc</strong> produce a llvm bitcode or object file, then native toolchain drives linking</li>\n</ol>\n<p>This is the ultimate fallback where platforms can drive everything.</p>",
        "id": 497225355,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738470634
    },
    {
        "content": "<p>Just for context for others, this note list come from a call between Luke, Richard and I.</p>",
        "id": 497226033,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738471359
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20platform.20building.20and.20linking/near/497215650\">said</a>:</p>\n<blockquote>\n<p>Basically, I think we flip things around from the traditional roc is a compiler and drives things, to roc the compiler is a library used by the host. I'm assuming here that bundling just the parts needed for interpreting roc (parsing, typechecking etc) is very slim.</p>\n</blockquote>\n<p>Having this as a linking option would be super exciting to me! For Jay, the static site generator platform I'm working on, the host is essentially a dev-server, and this approach would allow that dev-server to be started even if the app doesn't compile yet. I could then show Roc compilation errors in the browser-preview of the static site being worked on instead of the terminal.</p>\n<p>Another potential usecase: an integrated full-stack platform where some of the Roc code of the app ends up in a binary used to run the server, and some ends up in a webassembly file served by the server as part of a client. The host would contain code calling <code>libroc</code> to build the full artifact that can be deployed. Similar to Jay the host might also want to offer some type of dev-server that serves a development-version of the app and shows Roc compilation errors in that browser page, similar to what Rails does.</p>",
        "id": 497240302,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1738485876
    },
    {
        "content": "<p>I talked with Andrew some more about this and realized that the (probably most common) use case of having <code>roc build</code> emit a standalone executable requires a bit more from the platform author than just having them provide a static library.</p>\n<p>specifically, we need to:</p>\n<ul>\n<li>have the platform author provide a static library (that defines <code>main</code> and is built with <a href=\"https://en.wikipedia.org/wiki/Position-independent_code\">PIE</a>) instead of an executable</li>\n<li>also have the platform author bundle a number of static libraries for the <a href=\"https://medium.com/@inferara/understanding-the-c-runtime-crt0-crt1-crti-and-crtn-40e4b34f2a62\">C runtime</a> (e.g. <code>crt0</code>, <code>crt1</code>, <code>crti</code>, and <code>crtn</code>) that their host will be using </li>\n<li>also have the platform author specify (in the <code>.roc</code> file) the order in which to link the (bundled) static and dynamic libraries, not just the dynamic ones as we'd previously discused</li>\n</ul>",
        "id": 497254354,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738499279
    },
    {
        "content": "<p>our current <code>link.rs</code> does this automatically - first it <a href=\"https://github.com/roc-lang/roc/blob/670d2550603b9bb29ab238b6ed6180778a5d107d/crates/compiler/build/src/link.rs#L857-L868\">finds the C runtime libraries</a></p>",
        "id": 497254598,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738499468
    },
    {
        "content": "<p>and then adds them into the link path:</p>\n<p><a href=\"https://github.com/roc-lang/roc/blob/670d2550603b9bb29ab238b6ed6180778a5d107d/crates/compiler/build/src/link.rs#L936-L941\">https://github.com/roc-lang/roc/blob/670d2550603b9bb29ab238b6ed6180778a5d107d/crates/compiler/build/src/link.rs#L936-L941</a></p>\n<p><a href=\"https://github.com/roc-lang/roc/blob/670d2550603b9bb29ab238b6ed6180778a5d107d/crates/compiler/build/src/link.rs#L968-L975\">https://github.com/roc-lang/roc/blob/670d2550603b9bb29ab238b6ed6180778a5d107d/crates/compiler/build/src/link.rs#L968-L975</a></p>",
        "id": 497254639,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738499511
    },
    {
        "content": "<p>the reason we need to do it like this is:</p>\n<ul>\n<li>to use <code>lld</code> to create an executable, these static c runtime libraries must be part of the final link; they can't be done in advance unless you're making a full executable (e.g. platform authors can't \"pre-link\" them like they could with surgical linking)</li>\n<li>they also must appear in a specific order relative to the static host library and the compiled roc app library (hence why we need to have platform authors specify the order)</li>\n<li>these are coupled to a particular libc version and are target-specific, so trying to bundle them into the <code>roc</code> compiler to save platform authors from needing to do this would limit what hosts are possible (because everyone would get the same c runtime for a particular target and it couldn't be customized even if they needed a later version)</li>\n</ul>",
        "id": 497254908,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738499708
    },
    {
        "content": "<p>there are some fortunate parts about this:</p>\n<ul>\n<li>it wouldn't increase host size compared to today, because the precompiled hosts already have these object files in them (just already linked instead of separate files)</li>\n<li>we get to tell <code>lld</code> to garbage-collect sections <em>after</em> doing all this, so the final output binary can be smaller than today</li>\n<li>we can probably offer a script or something to find where the c runtime libraries live on a given host author's machine, so that can be incorporated into the build scripts host authors use to prepare their host code for use with Roc</li>\n</ul>",
        "id": 497255074,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738499852
    },
    {
        "content": "<p>Yeah, that sounds about right. The big question is does that make platform dev too painful? Like how hard would it be for us to add all of these things to basic cli?</p>",
        "id": 497271380,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738514390
    },
    {
        "content": "<p>I don't think it'll be a big problem. We already want to move host building into the platform's own build system, so we can just add \"find those files and add them to the bundle\" as part of <a href=\"http://build.rs/build.zig\">build.rs/build.zig</a></p>",
        "id": 497271847,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738514788
    },
    {
        "content": "<p>so once we get that recipe set up, should be fine I think!</p>",
        "id": 497271881,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738514831
    },
    {
        "content": "<p>actually there's nothing blocking us from trying that out right now</p>",
        "id": 497272788,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738515582
    },
    {
        "content": "<p>the steps would be:</p>\n<ul>\n<li>give basic-cli a <a href=\"http://build.rs\">build.rs</a> which outputs a static library instead of an executable, along with the c runtime libs</li>\n<li>build a roc application with --no-link</li>\n<li>try running lld manually to put all those outputs together and confirm it produces a working standalone binary executable!</li>\n</ul>",
        "id": 497272938,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738515677
    },
    {
        "content": "<p>Yeah, I think the big pain is that these extra files are generally automagically found by rust and given to the linker. Even if a platform could copy the exact link command for their system by stealing from the verbose linking output, you still have to know how to find all those files in general (but we can do the work to write up the code to find these common files)</p>",
        "id": 497275150,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738517621
    },
    {
        "content": "<p>agreed!</p>",
        "id": 497275911,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738518231
    },
    {
        "content": "<p>Will it be possible to do this in other languages? For example go?</p>",
        "id": 497275920,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1738518242
    },
    {
        "content": "<p>Hmm.... I bet for a lot of compiler toolchains that are high level, they won't make this easy to do (if possible at all).....hmm</p>",
        "id": 497279585,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738521132
    },
    {
        "content": "<p>We definitely need to validate this before making final decisions. The problems of being an embedded language but trying to drive things as if we aren't embedded.</p>",
        "id": 497279611,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738521166
    },
    {
        "content": "<p>how do we do that today?</p>",
        "id": 497279616,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738521170
    },
    {
        "content": "<p>I assume we don't require the surgical linker</p>",
        "id": 497279635,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738521186
    },
    {
        "content": "<p>Does go support the legacy linker today? I'm actually not sure.</p>",
        "id": 497279645,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738521197
    },
    {
        "content": "<p>I think it may just be the surgical linker or be completely driven by golang....we should dig into this</p>",
        "id": 497279670,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738521222
    },
    {
        "content": "<p>Maybe <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> knows</p>",
        "id": 497279683,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738521236
    },
    {
        "content": "<p>Oh, I see <code>-buildmode=c-archive</code> in luke's script, so seems doable, but that might subvert go's main...so not sure how it is all wired together.</p>",
        "id": 497280351,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738521795
    },
    {
        "content": "<p>Yeah, does subvert go's main, but I think it can all be made to work. I think for a lot of platform languages, we will be doing the c hack (or more likely zig hack cause zig is more portable). So in many high level languages, they will need to compile their app to a static library without a main. Then they will need to put the main in zig or c or something low level. Finally, that can collect all of the extra special files we depend on.</p>\n<p>So subverts the other languages main, but is probably fine for the most part.</p>",
        "id": 497280675,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738522047
    },
    {
        "content": "<p>Though I'm pretty sure this subverted main was part of the reason rust basic-cli breaks with musl builds. musl doesn't have automatic init functions. So if main is subverted any sort of init is just skipped. In the case of rust, this leads to rust not having access to any cli args unless they are manaully piped in.</p>",
        "id": 497280773,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738522119
    },
    {
        "content": "<p>So I do think this system can be made to work with any language by making them a library and giving them a c/zig main function, but it definitely is a bit inconvenient on the platform dev side (luckily, it should just be setup once per language and then mostly just work)</p>",
        "id": 497280821,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738522174
    },
    {
        "content": "<p>So in summary:</p>\n<blockquote>\n<p>Will it be possible to do this in other languages? For example go?</p>\n</blockquote>\n<p>Yes, but it may require subverting main and having a c/zig shim</p>",
        "id": 497280902,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738522219
    }
]