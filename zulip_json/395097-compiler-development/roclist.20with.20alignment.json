[
    {
        "content": "<p>I'm running out of ideas for why this fails </p>\n<div class=\"codehilite\"><pre><span></span><code>    #[test]\n    fn compare_list_dec() {\n        let a = RocList::from_slice(&amp;[RocDec::from(1), RocDec::from(2)]);\n        drop(a);\n    }\n</code></pre></div>\n<p>this code gives me <code>free(): invalid pointer</code>. but from what I can observe nothing weird is going on </p>\n<div class=\"codehilite\"><pre><span></span><code>[crates/roc_std/src/roc_list.rs:781] unsafe { libc::malloc(size) } = 0x00007fe20c000b60\n[crates/roc_std/src/roc_list.rs:539] self.ptr_to_allocation() = 0x00007fe20c000b60\n[crates/roc_std/src/roc_list.rs:542] self.ptr_to_allocation() = 0x00007fe20c000b60\n[crates/roc_std/src/roc_list.rs:547] self.ptr_to_allocation() = 0x00007fe20c000b60\n[crates/roc_std/src/roc_list.rs:553] self.ptr_to_allocation() = 0x00007fe20c000b60\n[crates/roc_std/src/roc_list.rs:555] needs_dealloc = true\n[crates/roc_std/src/roc_list.rs:557] self.ptr_to_allocation() = 0x00007fe20c000b60\n[crates/roc_std/src/roc_list.rs:563] self.ptr_to_allocation() = 0x00007fe20c000b60\nend of life 0x7fe20c000b60\n[crates/roc_std/src/roc_list.rs:798] unsafe { libc::free(c_ptr) } = ()\nfree(): invalid pointer\n</code></pre></div>",
        "id": 390955370,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1694704269
    },
    {
        "content": "<p>so are there any other odd ways in which a pointer can be invalid?</p>",
        "id": 390955426,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1694704287
    },
    {
        "content": "<p>more fun</p>\n<div class=\"codehilite\"><pre><span></span><code>        #[derive(Clone)]\n        #[repr(C, align(16))]\n        struct F(u32);\n\n        #[derive(Clone)]\n        #[repr(C, align(8))]\n        struct G(u32);\n\n        let a = RocList::from_slice(&amp;[G(0), G(1)]);\n        drop(a);\n</code></pre></div>\n<p>the 8-byte alignment works fine, 16-byte alignment gives segfaults</p>",
        "id": 390955977,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1694704459
    },
    {
        "content": "<p>and it's a bug in roc_std that's just been there since forever</p>",
        "id": 390965693,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1694705149
    },
    {
        "content": "<p>Yeah, I have wanted to rewrite the roc std impl for a while. I think it is overly clever and that makes it confusing to follow. Also with seamless slices and the representation of list and str diverging some, I think it is wrong in some places.</p>",
        "id": 390978259,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1694708808
    },
    {
        "content": "<p>As for this bug...really strange that it depends on alignment even though it is just freeing through malloc/free.</p>",
        "id": 390978376,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1694708856
    },
    {
        "content": "<p>Anyway, can you run with valgrind?</p>",
        "id": 390979176,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1694709118
    },
    {
        "content": "<p>Maybe also double check we aren't generating code trying to free the decs in the list for some reason. That definitely could lead to a double free and invalid pointer.</p>",
        "id": 390979672,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1694709256
    }
]