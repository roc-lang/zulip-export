[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"722031\">@shua</span> asked a good question in GH <a href=\"https://github.com/roc-lang/roc/issues/3513#issuecomment-2508674491\">https://github.com/roc-lang/roc/issues/3513#issuecomment-2508674491</a></p>\n<p>I wanted to share here as it's easy to lose this kind of thing in the flood of GH messages.</p>\n<blockquote>\n<p>question for add/sub/mul: should we be using x86/aarch64 carry flags when implementing these? It would mean we could implement the variants like <code>add</code>/<code>addSaturated</code>/<code>addChecked</code>/<code>addWrap</code> all in asm for integers instead of calling out to bitcode. It also leads to a pretty concise <code>u128</code>/<code>i128</code> impl for <code>add</code> and <code>sub</code>.</p>\n</blockquote>",
        "id": 485164077,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732916624
    },
    {
        "content": "<p>that sounds like a great idea to me! <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span></p>",
        "id": 485165151,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1732917261
    },
    {
        "content": "<p>it looks like roc used the overflow flag in the x86 backend, but it got turned into a bitcode call while adding the aarch64 backend <a href=\"https://github.com/roc-lang/roc/pull/5824/files#diff-23699c56834955756a70ebbe1514d93b91f31073cbc15bc78a352ab70292b2c5L1376-R1385\">https://github.com/roc-lang/roc/pull/5824/files#diff-23699c56834955756a70ebbe1514d93b91f31073cbc15bc78a352ab70292b2c5L1376-R1385</a></p>\n<p>was that intended to be temporary as aarch64 was added, or was there a reason to prefer calling the bitcode over the asm implementation? Maybe <span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> remembers?</p>",
        "id": 485170990,
        "sender_full_name": "shua",
        "timestamp": 1732921600
    },
    {
        "content": "<p>It was always just done for simplicity.</p>",
        "id": 485172143,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732922707
    },
    {
        "content": "<p>Better solutions are very welcome</p>",
        "id": 485172153,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732922721
    },
    {
        "content": "<p>For checked, it may have also been done to skip making a result (though that is pretty easy to do as well)</p>",
        "id": 485172177,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732922752
    }
]