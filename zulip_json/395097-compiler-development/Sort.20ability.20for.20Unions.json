[
    {
        "content": "<p>I am working with <span class=\"user-mention\" data-user-id=\"477725\">@Jasper Woudenberg</span> on implementing the Sort ability. We were wondering, when sorting Unions, what should the behavior be when the tags are different? Jasper suggested sorting by tag index, which corresponds to alphabetical order. I was thinking we should put empty tags first, but then sorting the rest alphabetically feels inconsistent to me. Does anyone have an opinion on this?</p>\n<p>On a separate note, I was under the impression that we have a different back-end for dev builds, so I was surprised to see I could run <code>roc test someCode.roc</code> and the LLVM code gen I had written appeared to work. Does the dev build plug into LLVM? I am correct that we will only need to implement code gen for LLVM and WASM, but not the dev build?</p>",
        "id": 453041666,
        "sender_full_name": "Ben Plotke",
        "timestamp": 1721597383
    },
    {
        "content": "<p>Tags maybe shouldn't autoderive sort?</p>",
        "id": 453042078,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721597778
    },
    {
        "content": "<p>That or alphabetical is our general opinion of how to expose tags</p>",
        "id": 453042101,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721597810
    },
    {
        "content": "<p>We have 2 dev backends. One for wasm and one for native</p>",
        "id": 453042116,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721597855
    },
    {
        "content": "<p>Not auto deriving sort would definitely be easier from an implementation perspective</p>",
        "id": 453042122,
        "sender_full_name": "Ben Plotke",
        "timestamp": 1721597861
    },
    {
        "content": "<p>native dev is used in the repl by default</p>",
        "id": 453042128,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721597872
    },
    {
        "content": "<p>wasm dev in the web repl</p>",
        "id": 453042170,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721597887
    },
    {
        "content": "<p>otherwise, everything is llvm currently</p>",
        "id": 453042174,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721597892
    },
    {
        "content": "<p>Also, for the ability, I think it should autoderive at the mono level. So no need to implement in any of the backends</p>",
        "id": 453042192,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721597927
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> Thank you for taking the time to respond. Unfortunately I am now more confused. We only need to implement for LLVM, and all the other backends get it automatically?</p>",
        "id": 453042341,
        "sender_full_name": "Ben Plotke",
        "timestamp": 1721598091
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/395097-compiler-development/topic/Sort.20ability.20for.20Unions/near/453042128\">said</a>:</p>\n<blockquote>\n<p>native dev is used in the repl by default</p>\n</blockquote>\n<p>Does <code>roc dev ...</code> not run the dev build?</p>",
        "id": 453042410,
        "sender_full_name": "Ben Plotke",
        "timestamp": 1721598161
    },
    {
        "content": "<p>nope. just enables expects and dbg statements. <code>roc</code> == <code>roc dev</code></p>",
        "id": 453042549,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721598332
    },
    {
        "content": "<p>Eventually it should, but we haven't wired everything up yet</p>",
        "id": 453042568,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721598348
    },
    {
        "content": "<blockquote>\n<p>We only need to implement for LLVM, and all the other backends get it automatically?</p>\n</blockquote>\n<p>We need to implement for <code>mono</code> and all backends get it. That is the level before all backends. Same way that <code>Hash</code> or <code>Encode</code> is implemented.</p>\n<p><a href=\"https://github.com/roc-lang/roc/tree/main/crates/compiler/derive/src\">https://github.com/roc-lang/roc/tree/main/crates/compiler/derive/src</a></p>",
        "id": 453042681,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721598440
    },
    {
        "content": "<p>I think that should work, but maybe I am missing something. I guess <code>Eq</code> doesn't use derive, so maybe it is special...not sure</p>",
        "id": 453042703,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721598475
    },
    {
        "content": "<p>There's a diagram of the compiler stages at the bottom of this readme<br>\n<a href=\"https://github.com/roc-lang/roc/blob/main/crates%2FREADME.md\">https://github.com/roc-lang/roc/blob/main/crates%2FREADME.md</a></p>",
        "id": 453042819,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1721598597
    },
    {
        "content": "<p>Everything goes through mono before it splits into the dev / LLVM backends</p>",
        "id": 453042920,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1721598651
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"691288\">Ben Plotke</span> <a href=\"#narrow/stream/395097-compiler-development/topic/Sort.20ability.20for.20Unions/near/453041666\">said</a>:</p>\n<blockquote>\n<p>I am working with <span class=\"user-mention silent\" data-user-id=\"477725\">Jasper Woudenberg</span> on implementing the Sort ability. We were wondering, when sorting Unions, what should the behavior be when the tags are different? Jasper suggested sorting by tag index, which corresponds to alphabetical order. I was thinking we should put empty tags first, but then sorting the rest alphabetically feels inconsistent to me. Does anyone have an opinion on this?</p>\n</blockquote>\n<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> what would be the advantage of sorting empty tags first?</p>",
        "id": 453046052,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1721600937
    },
    {
        "content": "<p>I expect the main use for giving <code>Sort</code> to a tag union would be that it would let you put it in a data structure that relies on knowing how things are ordered (e.g. a tree)</p>",
        "id": 453046135,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1721600972
    },
    {
        "content": "<p>so the fastest thing would be beneficial there, and the fastest thing would be to go by index because it's an integer that is right there already! <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 453046189,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1721600999
    },
    {
        "content": "<p>sorting by index would be really confusing</p>",
        "id": 453051016,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1721604721
    },
    {
        "content": "<p>that would result in two different sort derivations for <code>[A U8, B U8]</code> vs <code>[B U8, A U8]</code> even though those types are equivalent</p>",
        "id": 453051065,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1721604755
    },
    {
        "content": "<p>it gets worse because in the implementation the order is not guaranteed to be consistent across module boundaries</p>",
        "id": 453051088,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1721604795
    },
    {
        "content": "<p>the benefit of sorting alphabetically is that your program semantics also do not change if you refactor the order of your tag union</p>",
        "id": 453051102,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1721604829
    },
    {
        "content": "<p>Don't we sort tags to generate the index? (Otherwise, how would platforms use tags)</p>",
        "id": 453051633,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721605395
    },
    {
        "content": "<p>Either the exception of null cases of executive types that get the null ptr directly</p>",
        "id": 453051659,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721605441
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"454654\">Ayaz Hafiz</span> <a href=\"#narrow/stream/395097-compiler-development/topic/Sort.20ability.20for.20Unions/near/453051102\">said</a>:</p>\n<blockquote>\n<p>the benefit of sorting alphabetically is that your program semantics also do not change if you refactor the order of your tag union</p>\n</blockquote>\n<p>that's a great point!</p>",
        "id": 453058583,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1721611869
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/395097-compiler-development/topic/Sort.20ability.20for.20Unions/near/453051633\">said</a>:</p>\n<blockquote>\n<p>Don't we sort tags to generate the index? (Otherwise, how would platforms use tags)<br>\nEither the exception of null cases of executive types that get the null ptr directly</p>\n</blockquote>\n<p>that's the default, but yeah like you noted - there are some optimizations we do where we no longer store a discriminant for one tag, which means the others get different indices because there's one missing compared to before</p>",
        "id": 453058697,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1721611984
    },
    {
        "content": "<p>but the \"refactoring tag payloads shouldn't change tag sort order in a distant part of the program\" is a strong argument to me; that's enough to convince me we should do it strictly alphabetically</p>",
        "id": 453058792,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1721612051
    },
    {
        "content": "<p>Sounds good</p>",
        "id": 453059340,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721612553
    },
    {
        "content": "<p>Also, alphabetically will only be minorly slower. It will be a switch (probably optimize to a lookup table or no-op) on the tag returning an alphabetic index</p>",
        "id": 453059385,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721612606
    },
    {
        "content": "<p>Thank you everyone for you responses! Alphabetical it is.</p>",
        "id": 453325445,
        "sender_full_name": "Ben Plotke",
        "timestamp": 1721709881
    }
]