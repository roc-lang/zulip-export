[
    {
        "content": "<p>I'm not sure if this is a roc issue... but I had a crack at packing two F32's into a U64 and can't quite get it to work. I've had a heap of help from different LLMs, but I'm getting a single test failure which I think may be roc related.</p>\n<p><a href=\"https://gist.github.com/lukewilliamboswell/3257ea8f5d7251a86e396b590987011c\">https://gist.github.com/lukewilliamboswell/3257ea8f5d7251a86e396b590987011c</a></p>\n<p>Just wondering if we fuzzed these functions? is it worth exploring further?</p>",
        "id": 477763806,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729304691
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>── EXPECT FAILED in platform/InternalVector2.roc ───────────────────────────────\n\nThis expectation failed:\n\n123│&gt;  expect\n124│&gt;      # Test 8: Different exponents with fractions\n125│&gt;      parts1 = { sign: Bool.false, exponent: 130, fraction: 0x00555555 }\n126│&gt;      parts2 = { sign: Bool.false, exponent: 125, fraction: 0x00AAAAAA }\n127│&gt;      num1 = Num.f32FromParts parts1\n128│&gt;      num2 = Num.f32FromParts parts2\n129│&gt;      components = { x: num1, y: num2 }\n130│&gt;      packed = pack components\n131│&gt;      unpacked = unpack packed\n132│&gt;      num1unpacked = Num.f32ToParts unpacked.x\n133│&gt;      num2unpacked = Num.f32ToParts unpacked.y\n134│&gt;      num1unpacked == parts1 &amp;&amp; num2unpacked == parts2\n\nWhen it failed, these variables had these values:\n\nparts1 : {\n    exponent : Int Unsigned8,\n    fraction : Int Unsigned32,\n    sign : Bool,\n}\nparts1 = { exponent: 130, fraction: 5592405, sign: Bool.false }\n\nparts2 : {\n    exponent : Int Unsigned8,\n    fraction : Int Unsigned32,\n    sign : Bool,\n}\nparts2 = { exponent: 125, fraction: 11184810, sign: Bool.false }\n\nnum1 : F32\nnum1 = 13.333333\n\nnum2 : F32\nnum2 = 0.3333333\n\ncomponents : {\n    x : F32,\n    y : F32,\n}\ncomponents = { x: 13.333333, y: 0.3333333 }\n\npacked : Vector2D\npacked = @Vector2D 4515609224609617237\n\nunpacked : {\n    x : F32,\n    y : F32,\n}\nunpacked = { x: 13.333333, y: 0.3333333 }\n\nnum1unpacked : {\n    exponent : Int Unsigned8,\n    fraction : Int Unsigned32,\n    sign : Bool,\n}\nnum1unpacked = { exponent: 130, fraction: 5592405, sign: Bool.false }\n\nnum2unpacked : {\n    exponent : Int Unsigned8,\n    fraction : Int Unsigned32,\n    sign : Bool,\n}\nnum2unpacked = { exponent: 125, fraction: 2796202, sign: Bool.false }\n\n\n1 failed and 10 passed in 606 ms.\n</code></pre></div>",
        "id": 477763950,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729304819
    },
    {
        "content": "<p>So the bug is the fraction of the second number</p>",
        "id": 477768162,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729308882
    },
    {
        "content": "<p>It looks that way</p>",
        "id": 477768413,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729309114
    },
    {
        "content": "<p>Oh, actually the bug is your input</p>",
        "id": 477768750,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729309434
    },
    {
        "content": "<p>Your fraction is getting truncated cause it is too large</p>",
        "id": 477768801,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729309451
    },
    {
        "content": "<p>Ahk, that's good to know</p>",
        "id": 477768808,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729309464
    },
    {
        "content": "<p>That first A should be a 2</p>",
        "id": 477768828,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729309485
    },
    {
        "content": "<p>Cause the highest bit is invalid to set in the fraction. It is bit 24</p>",
        "id": 477768836,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729309500
    },
    {
        "content": "<p>You only get 23 bits</p>",
        "id": 477768849,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729309510
    },
    {
        "content": "<p>This is where arbitrary precision ints would be really nice</p>",
        "id": 477768859,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729309524
    },
    {
        "content": "<p>It's probably worth giving this a shot over <code>RocVector2 := { x : F32, y : F32, unused : I64, unused2 : I64, unused3 : I64, unused4 : I64 }</code> eh?</p>",
        "id": 477769014,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729309644
    },
    {
        "content": "<p>Should be more efficient?</p>",
        "id": 477769021,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729309656
    },
    {
        "content": "<p>Either is probably fast enough</p>",
        "id": 477769546,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729310044
    },
    {
        "content": "<p>Ok, I'll leave it for now then. What I have now is much simpler and easy to change</p>",
        "id": 477769571,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729310072
    },
    {
        "content": "<p>Just didn't use a list of the of the wasteful one</p>",
        "id": 477769577,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729310082
    },
    {
        "content": "<p>Yeah, there's going to be lot's of extra allocations and unused space until we fix the ABI bug</p>",
        "id": 477769640,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729310160
    }
]