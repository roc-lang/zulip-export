[
    {
        "content": "<p>I made a new cor experiment to figure out if I could make a simpler model for effect interpreters to work, and to explore some of the inference changes mentioned in <a href=\"#narrow/stream/395097-compiler-development/topic/Allowing.20implicit.20cycles.20in.20the.20type.20representation\">https://roc.zulipchat.com/#narrow/stream/395097-compiler-development/topic/Allowing.20implicit.20cycles.20in.20the.20type.20representation</a></p>",
        "id": 404028472,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1700866846
    },
    {
        "content": "<p><a href=\"https://ayazhafiz.com/plts/playground/cor/compose_fx/?input=MQAgFgLhAODOBcB6RBzAlhMBXARgOgGMB7AW0QCciCBaAGwEMA7FCqxNWWLAU1kQFYALADZBAKADy0EPRDwQAbTEgVIAMoQAJkSwQAMmkbd1EciAAUAbwC%2BIagD4QUmQEoANMtUbNhg0YsaZg5O0vTunioAIkT%2B9B4AumJiACr0sADWIESZ3ORmRNLy5gpOmdluIACieSC5ZvF2jgUujVnQSbBoKCBcBATc3JpyWZnBqRkjIABUFs5TLmK03BA9WH0DQwC8IAA62a07EEQActwAHivBR6cXs2XpLgDcjx1dIABm9Gi0w3Wt45kZn9zHMFksVp9viBtjs6sFDidzpdHNckRZqmY6k8XmJOt16AB3L4reQAkYARlqNQKrXM2UpYzS9wATFT8tAWoyJtlWX8CotljIiRhobt3pQSAAlXhYWjI3ZGW4OCK7YiMCCGHitcWkaVcOUWHbkGUG5Wqc0gcEgQxGMzbAlgbiMEDG-UrDgqi2qAA%2BpRAADdWoqVv7PV6QL6MbVtV8ftwwyonZoE9bGCmbbkQGqNYweAtnklcW8dPpDMZ5IF-kyQDZprNpPMBSsS35jDDYLSETd5d4W2Weoazq1UbcQZkzi5JwWi91fP3SdXKzMQQ2wYK5-4YSOe1oN8ZzDsO1dEaOJJlYFOcXiQCQvs6FxNa8vQU2b3foSrCcSLH3-AAiAB1MB6AgAByDsAE8dDMd40HIWAVkYegSG4AB%2BP8FnDQdWi-EVzD3TCsNUA9YPgiBjmQ4xglwlY6V0VsQEA4CwMg6DLTSRDKPQwiiItA8IJw4VaIIlNeJUA8GAQiiUNaX99wAPwQ8gAH01QIECPjgqTKIsRTTFUmJ1JWP9GPY7SUMnSz8xxcgsGdW9DGU4DGE0JY7TEUAVAAPR83y-J8lUrRpbYHOdA8h2CaJ-AnVMPPDALzStY0CHAJhXLbXYaXhNADnlB0nTaa1YDi3j-K8lNfW8PcPlaZz0osd5dKUgzGCMxiEJ8RgTPMeSMCIDs0Es3T6E0IYcvJFpzCq50IB4i1Kq0OSB0a4I6qWBqa2sSb5JGsaQAmgJFt0AdZoqkAouMCLHAukAhwgFUkxVQwVTW4waQABiqdVyAggAFIhDHu54gA&amp;backend=eval&amp;options=NohEFMFsEsBdQDQG9QDcCGAbAruUAuUABwCdoA7eBUAeyNmhvIGcDhizLEJN0AjUAF0AvoLFA\">Here's the compiler</a></p>",
        "id": 404028497,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1700866858
    },
    {
        "content": "<p>The good news: I got <a href=\"https://github.com/roc-lang/roc/issues/5464\">https://github.com/roc-lang/roc/issues/5464</a> working with an effect interpreter model without lambda sets (see <a href=\"https://ayazhafiz.com/plts/playground/cor/compose_fx/?input=MQAgFgLhAODOBcB6RBzAlhMBXARgOgGMB7AW0QCciCBaAGwEMA7FCqxNWWLAU1kQFYALADZBAKADy0EPRDwQAbTEgVIAMoQAJkSwQAMmkbd1EciAAUAbwC%2BIagD4QUmQEoANMtUbNhg0YsaZg5O0vTunioAIkT%2B9B4AumJiACr0sADWIESZ3ORmRNLy5gpOmdluIACieSC5ZvF2jgUujVnQSbBoKCBcBATc3JpyWZnBqRkjIABUFs5TLmK03BA9WH0DQwC8IAA62a07EEQActwAHivBR6cXs2XpLgDcjx1dIABm9Gi0w3Wt45kZn9zHMFksVp9viBtjs6sFDidzpdHNckRZqmY6k8XmJOt16AB3L4reQAkYARlqNQKrXM2UpYzS9wATFT8tAWoyJtlWX8CotljIiRhobt3pQSAAlXhYWjI3ZGW4OCK7YiMCCGHitcWkaVcOUWHbkGUG5Wqc0gcEgQxGMzbAlgbiMEDG-UrDgqi2qAA%2BpRAADdWoqVv7PV6QL6MbVtV8ftwwyonZoE9bGCmbbkQGqNYweAtnklcW8dPpDMZ5IF-kyQDZprNpPMBSsS35jDDYLSETd5d4W2Weoazq1UbcQZkzi5JwWi91fP3SdXKzMQQ2wYK5-4YSOe1oN8ZzDsO1dEaOJJlYFOcXiQCQvs6FxNa8vQU2b3foSrCcSLH3-AAiAB1MB6AgAByDsAE8dDMd40HIWAVkYegSG4AB%2BP8FnDQdWi-EVzD3TCsNUA9YPgiBjmQ4xglwlY6V0VsQEA4CwMg6DLTSRDKPQwiiItA8IJw4VaIIlNeJUA8GAQiiUNaX99wAPwQ8gAH01QIECPjgqTKIsRTTFUmJ1JWP9GPY7SUMnSz8xxcgsGdW9DGU4DGE0JY7TEUAVAAPR83y-J8lUrRpbYHOdA8h2CaJ-AnVMPPDALzStY0CHAJhXLbXYaXhNADnlB0nTaa1YDi3j-K8lNfW8PcPlaZz0osd5dKUgzGCMxiEJ8RgTPMeSMCIDs0Es3T6E0IYcvJFpzCq50IB4i1Kq0OSB0a4I6qWBqa2sSb5JGsaQAmgJFt0AdZoqkAouMCLHAukAhwgFUkxVQwVTW4waQABiqdVyAggAFIhDHu54gA&amp;backend=eval&amp;options=NohEFMFsEsBdQDQG9QDcCGAbAruUAuUABwCdoA7eBUAeyNmhvIGcDhizLEJN0AjUAF0AvoLFA\">this playground</a>). The <a href=\"https://ayazhafiz.com/plts/playground/cor/compose_fx/?input=FAYgBAFgLlAODOAuA9Mg5gSyhArgIwDoBjAewFtkAnEogWgBsBDAOzSpuQ3nhwFN5kAVgAsANmHAA8rDCMwiMAG1gYVWADKUACYkcUADIZmvDVEpgAFAG8AvmFoA%2BMNNkBKADQq1mrUcPHLTXNHZxlGDy9VABESAMZPAF1gYAAVRngAazASLN5KcxIZBQtFZyyc9zAAUXywPPME%2BydC1ybs2GT4DDQwHiIiXl4teWyskLTM0bAAKksXaddgel4oXpx%2BweGAXjAAHRy23agSADleAA9VkOOzy7nyjNcAbifO7rAAM0YMehH6tomWVm-ws80Wy1WXx%2BYB2u3qISOpwuVycN2Rlhq5nqz1ewC6PUYAHdvqsFIDRgBGOq1QptCw5KnjdIPABM1IKsFaTMmOTZ-0KSxWsmJWBhew%2B1DIACV%2BDh6Ci9sY7o5IntSMwoEY%2BG0JeQZTx5ZZdpRZYaVWoLWAIWAjMZzDtCRBeMwwCaDasuKrLWoAD5lMAANzaStWAa93rAfsxdR131%2BvHDqmdWkTNuYqdteTA6s1zD4ixeyTx710BiMJgUQQBzLAthmcxkC0Fq1L-hMsPgdMRtwVPlb5d6RvObTRd1BWXOrinheLPT8A7JNars1BjfBQvnAVho972k3Jgsu071yRY8kWXg09x%2BLAZG%2BLsXkzrK7Bzdv95hqqJJMs-YCACIAHUIEYKAAHJOwAT10cwPgwSh4FWZhGDIXgAH5-0WCMhzab9RQsfcsOwtRDzghCoBOFCTBCPDVnpPQ2zAICQPAqCYKtdIkKojCiOIy1D0g3CRTowjUz41RDyYRDKNQto-wPAA-RDKAAfXVIhQM%2BeDpKoywlLMNTYg01Z-yYjidNQqcrILXFKBwF07yMFSQOYLRlntUA1AAPR83y-J81VrVpHZHJdQ9hxCGIAknNNPO9AKLWtE0iEgFg3PbPZaQRDBDgVR1nXaG14Di4j-K81M-R8fdPjaFz0ssD49OUwzmGMpjEN8ZhTIsBSsBITsMCsvTGC0YYcopVoLCql0oF4y1Ku0eTB0akI6uWBraxsSaFJGsawAmwJFr0QdZoqsAopMCKnAusBhygVVk1VIxVTWkxaQABmqDVKEggAFEgjHul4gA&amp;backend=ir&amp;options=NohEFMFsEsBdQDQG9QDcCGAbAruUAuUABwCdoA7eBUAeyNmhvIGcDhizLEJN0AjUAF0AvoLFA\">IR is kind of insane though</a>, 2K lines of IR for 50 lines of code (admittedly it's sparse)</p>",
        "id": 404028571,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1700866897
    },
    {
        "content": "<p>Also, <a href=\"https://ayazhafiz.com/plts/playground/cor/compose_fx/?input=MQAgKghgzg1gdAJwPYGMBQlYgG4iQBxAC4QAKXAWgD498BKEa2tNKASwHMQIB3CNgC7Fw0GN1qMapCJJFYARrQZNMYxQTQAbAKZDe-IQF4QAHQBmyALYAlbVACumoUxMA7bQA9nVNCD%2BmUJFcBNld7bUlff2iLJBs7RyFSEwQEp0jQaL8APVy8-KisrJ0hUPcEEGN3LxBUh3TQwqL-Mu0KwODQ8Lo0AG5ellAAZQEAE1CAUTMzbRQBRFQ0AHl8AElXcUUSAG0mkfHXABlQiNIRiqYV9c26ABomgBEgiIh7gF15QZB90IX0di4mhO1xIqm%2BAgqpCuGwAVCAYT0SiAge5rsYTAIkAA5TzecEHY7uMgmKCyTE4mpQHr9L77JD2ARTGZzP7LfBLBmbYS7aJ0hmEiLnMhCy7szkyeR3R7PbjvT5oYZjenzZD-TjIk4coQkEU0MFCqFioRwhFaXQa9xayqmUlMZLk3GyPkCAUgUnJDxk7GOjx0akDBUgAAKmggAjMSAQlkDqQgmk0AE9biAeBE%2BMFxFAE8EIJ6gTAItsnkSIG9DdcIHRDVbKyAABZtbRs8Q7PZjUKus4Q2QrbhS3lK-kncGQ3UgXuV%2B7RYsvd4sAEgSz8Dag0Qjsi901Ipeha36QQW7TXZK2mgo7RWqmB5o5fI3nLRfJ5PoBhD2DY71wAfTrEFcox0CpDGvEAnzA7ImiRAhrU-YlPSYGcQF9EBGkyLJckg81UhQes-wAiJ0WgpgeAbDZoLYKAQJvMCmmiAAffEO2HMxZF-f8dDIFiACIG3jJAuJ6G8GOdV1SRYpg2Pwzi3UE5oGMQ%2BCaA8JptH-JpGmiSSOI0NDmgw-ogA&amp;backend=eval&amp;options=NohEFMFsEsBdQDQG9QDcCGAbAruUAuUABwCdoA7eBUAeyNmhvIGcDhizLEJN0AjUAF0AvoLFA\">composable effect interpreters work</a></p>",
        "id": 404028627,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1700866923
    },
    {
        "content": "<p>Also for some reason the inference/propagation of type aliases is really nice (<a href=\"https://ayazhafiz.com/plts/playground/cor/compose_fx/?input=MQAgKghgzg1gdAJwPYGMBQlYgG4iQBxAC4QAKXAWgD498BKEa2tNKASwHMQIB3CNgC7Fw0GN1qMapCJJFYARrQZNMYxQTQAbAKZDe-IQF4QAHQBmyALYAlbVACumoUxMA7bQA9nVNCD%2BmUJFcBNld7bUlff2iLJBs7RyFSEwQEp0jQaL8APVy8-KisrJ0hUPcEEGN3LxBUh3TQwqL-Mu0KwODQ8Lo0AG5ellAAZQEAE1CAUTMzbRQBRFQ0AHl8AElXcUUSAG0mkfHXABlQiNIRiqYV9c26ABomgBEgiIh7gF15QZB90IX0di4mhO1xIqm%2BAgqpCuGwAVCAYT0SiAge5rsYTAIkAA5TzecEHY7uMgmKCyTE4mpQHr9L77JD2ARTGZzP7LfBLBmbYS7aJ0hmEiLnMhCy7szkyeR3R7PbjvT5oYZjenzZD-TjIk4coQkEU0MFCqFioRwhFaXQa9xayqmUlMZLk3GyPkCAUgUnJDxk7GOjx0akDBUgAAKmggAjMSAQlkDqQgmk0AE9biAeBE%2BMFxFAE8EIJ6gTAItsnkSIG9DdcIHRDVbKyAABZtbRs8Q7PZjUKus4Q2QrbhS3lK-kncGQ3UgXuV%2B7RYsvd4sAEgSz8Dag0Qjsi901Ipeha36QQW7TXZK2mgo7RWqmB5o5fI3nLRfJ5PoBhD2DY71wAfTrEFcox0CpDGvEAnzA7ImiRAhrU-YlPSYGcQF9EBGkyLJckg81UhQes-wAiJ0WgpgeAbDZoLYKAQJvMCmmiAAffEO2HMxZF-f8dDIFiACIG3jJAuJ6G8GOdV1SRYpg2Pwzi3UE5oGMQ%2BCaA8JptH-JpGmiSSOI0NDmgw-ogA&amp;backend=eval&amp;options=NohEFMFsEsBdQDQG9QDcCGAbAruUAuUABwCdoA7eBUAeyNmhvIGcDhizLEJN0AjUAF0AvoLFA\">hover over some variables here to see</a>)</p>",
        "id": 404028831,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1700867033
    },
    {
        "content": "<p>The next step is to see if this can work with lambda sets, and if so, we should probably translate the new algorithms in-place to the compiler. If anyone wants to play around with this and/or hack on it with your own experiments, let me know. The source is <a href=\"https://github.com/ayazhafiz/cor/tree/base/experiments/compose_fx\">https://github.com/ayazhafiz/cor/tree/base/experiments/compose_fx</a></p>",
        "id": 404028911,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1700867095
    },
    {
        "content": "<p>this is super exciting! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>\n<p>does it already do the \"record captures in canonicalization for type annotations\" thing that turned out to be necessary for lambda set correctness in annotations?</p>",
        "id": 404033360,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700870919
    },
    {
        "content": "<p>no, neither mutual recursion nor lambda sets are around</p>",
        "id": 404036891,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1700873050
    },
    {
        "content": "<p>For anyone interested, I've still been working on this sometimes in my free time (<a href=\"https://ayazhafiz.com/plts/playground/cor/compose_fx/?input=MQAgKghgzg1gdAJwPYGMBQlYgG4iQBxAC4QAKXAWgD498BKEa2tNKASwHMQIB3CNgC7Fw0GN1qMapCJJFYARrQZNMYxQTQAbAKZDe-IQF4QAHQBmyALYAlbVACumoUxMA7bQA9nVNCD%2BmUJFcBNld7bUlff2iLJBs7RyFSEwQEp0jQaL8APVy8-KisrJ0hUPcEEGN3LxBUh3TQwqL-Mu0KwODQ8Lo0AG5ellAAZQEAE1CAUTMzbRQBRFQ0AHl8AElXcUUSAG0mkfHXABlQiNIRiqYV9c26ABomgBEgiIh7gF15QZB90IX0di4mhO1xIqm%2BAgqpCuGwAVCAYT0SiAge5rsYTAIkAA5TzecEHY7uMgmKCyTE4mpQHr9L77JD2ARTGZzP7LfBLBmbYS7aJ0hmEiLnMhCy7szkyeR3R7PbjvT5oYZjenzZD-TjIk4coQkEU0MFCqFioRwhFaXQa9xayqmUlMZLk3GyPkCAUgUnJDxk7GOjx0akDBUgAAKmggAjMSAQlkDqQgmk0AE9biAeBE%2BMFxFAE8EIJ6gTAItsnkSIG9DdcIHRDVbKyAABZtbRs8Q7PZjUKus4Q2QrbhS3lK-kncGQ3UgXuV%2B7RYsvd4sAEgSz8Dag0Qjsi901Ipeha36QQW7TXZK2mgo7RWqmB5o5fI3nLRfJ5PoBhD2DY71wAfTrEFcox0CpDGvEAnzA7ImiRAhrU-YlPSYGcQF9EBGkyLJckg81f3-HRrRMaCmB4BsNmgtgoBAx8nyaaIAB98Q7YczFkbCANOJiACIG3jJB2J6G86OdV1SSYpgWNw0gmKvfiQEQ%2BCaA8JptH-JpGmiMSIg0NDmgw-ogA&amp;backend=ir&amp;options=NohEFMFsEsBdQDQG9QDcCGAbAruUAuUABwCdoA7eBUAeyNmhvIGcDhizLEJN0AjUAF0AvoLFA\">current playground</a>). I'm having some trouble getting lambda sets working across the board, but you'll see that most examples work (except the <a href=\"https://github.com/roc-lang/roc/issues/5464\">#5464</a> reproducer examples).</p>",
        "id": 407003754,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1702179011
    },
    {
        "content": "<p>The positive news is I think the idea of going full in to equirecursive types and not trying to track \"recursion pointers\" in the frontend IR (i.e.  before the equivalent of Roc's mono IR) is definitely the way to go</p>",
        "id": 407003812,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1702179063
    },
    {
        "content": "<p>And, I think I've found a much easier method for specializing on types than we currently use (<span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> recently talked about the annoyance of having to specialize on a per-symbol basis in the current Roc implementation, which seems unnecessary). Obviously this project is only a subset of Roc, but the <a href=\"https://github.com/ayazhafiz/cor/blob/lambda-set-impl/experiments/compose_fx/mono_lower.ml\">monomorphizer</a> and <a href=\"https://github.com/ayazhafiz/cor/blob/lambda-set-impl/experiments/compose_fx/ir_lower.ml\">IR generator</a> are each like 400 LoC even with lambda sets</p>",
        "id": 407004048,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1702179215
    },
    {
        "content": "<p>I am SO, SO HYPE about this!!!</p>",
        "id": 407008874,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1702182602
    },
    {
        "content": "<p>how are you feeling about the lambda set issues?</p>",
        "id": 407008941,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1702182624
    },
    {
        "content": "<p>tractable but tricky? Or like \"still unsure on whether the problems are even solvable\" <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 407008972,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1702182661
    },
    {
        "content": "<p>Probably tractable, but I don't really know how to solve them right now</p>",
        "id": 407012332,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1702185246
    },
    {
        "content": "<p>I've been trying to track down the latest status on effect interpreters... and this looks like the most relevant thread. </p>\n<p>Just wanted to clarify something. Is the type erasure work that <a href=\"#narrow/stream/304641-ideas/topic/Revamped.20Encode.20and.20Decode/near/450341874\">Ayaz summarised</a> and Sam was looking at related to effect interpreters? </p>\n<p>My loose understanding is that we want to upgrade and have type erasure so we can then implement effect interpreters.</p>",
        "id": 462042702,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1723534374
    },
    {
        "content": "<p>yeah, in essence:</p>\n<ul>\n<li>a <code>Task</code>-based concurrency primitive (e.g. <code>Task.map2</code> or whatever we decide to name it) which <em>actually</em> lets tasks run concurrently requires that Roc's compiler be able to support compiling arbitrary type-erased (and therefore boxed) types in order to store them in tasks</li>\n<li>effect interpreters are blocked on lambda set bugs</li>\n<li>fixing the lambda set bugs seems to require moving lambda set inference into its own pass, which will be a big project and might run into other issues (since lambda sets have run into many issues so far)</li>\n<li>to focus on unblocking things, the plan is to implement type erasure and then use it for all closures (for now) instead of lambda sets. This will make the runtime performance of all Roc programs worse, but should fix a ton of compiler bugs while unlocking <code>Task</code>-based concurrency.</li>\n<li>after landing that, we can reintroduce lambda sets as a separate pass (which is what Morphic does, and their implementation works without bugs as far as we know), and if there are bugs, we can put it behind a CLI flag or env var or something while we work them out, so they aren't blocking projects like they are today</li>\n</ul>",
        "id": 462082182,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1723547017
    },
    {
        "content": "<p>Thank you for summarising. <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 462086683,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1723548323
    },
    {
        "content": "<p>no prob, it's been top-of-mind for a long time - it'll be a huge deal for the language when we have it! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 462087291,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1723548583
    }
]