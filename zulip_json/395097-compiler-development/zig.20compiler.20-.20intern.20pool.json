[
    {
        "content": "<p>For the actual zig compiler to make IR nodes small, they store a lot of data out of band. They have <a href=\"https://github.com/ziglang/zig/blob/master/src/InternPool.zig\">InternPool</a> to manage this while giving a type safe api.</p>\n<p>Is this a pattern we want to follow in the new roc compiler? Do we want to use the zig intern pool directly in roc?</p>\n<p>Fundamentally, it enables storing unions of various sizes in a compact way out of band.</p>",
        "id": 497337363,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738562693
    },
    {
        "content": "<p>Design talked about here: <a href=\"https://youtu.be/KOZcJwGdQok?si=YjBElUxvNBhG6CwI&amp;t=1620\">https://youtu.be/KOZcJwGdQok?si=YjBElUxvNBhG6CwI&amp;t=1620</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"KOZcJwGdQok\" href=\"https://youtu.be/KOZcJwGdQok?si=YjBElUxvNBhG6CwI&amp;t=1620\"><img src=\"https://uploads.zulipusercontent.net/77c7ba4f0729f01fcb5cb34d949753b24c323046/68747470733a2f2f692e7974696d672e636f6d2f76692f4b4f5a634a774764516f6b2f64656661756c742e6a7067\"></a></div>",
        "id": 497337435,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738562744
    },
    {
        "content": "<p>That's what the Env was gonna be for, but it's trickier to ensure data stored out-of-band is present in a multithreaded environment, so I think keeping the interns in each stage is a cleaner solution for now</p>",
        "id": 497339090,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738563608
    },
    {
        "content": "<p>Eventually something like this would make sense. I expect we'd want to outline the API we want, ignoring the Zig version, and then if it turns out that our desired API matches Zig, then we'd use theirs</p>",
        "id": 497339203,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738563676
    },
    {
        "content": "<p>I don't think it needs to be global at all. I think simply having it per stage would be really good for reduce memory bloat. I would also assume in a multithreaded context that we may have an arena per thread</p>",
        "id": 497339228,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738563689
    },
    {
        "content": "<p>As noted in that talk, zig tried a few iterations before reaching this. A number of them are not type safe and I don't think those stepping stones would be worth doing while focusing on correctness. The intern pool (and maybe something simpler but similar) keeps type safety, gives you the exact struct representation you want, and saves memory. So I think it is very low cost for anything correctness and would be a nice win for design.</p>",
        "id": 497339485,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738563835
    },
    {
        "content": "<p>Not sure it would be their exact intern pool, but I assume it would be a data structure that is shared between multi IRs (not the specific instance, but the type itself).</p>",
        "id": 497339783,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738563906
    },
    {
        "content": "<p>At least per stage is good, but the current plan is per module, per stage. It avoids the worry of coordination between modules for now, and shouldn't be that hard to pull out once everything works</p>",
        "id": 497340325,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738564170
    },
    {
        "content": "<p>To beat a dead horse, there are tons of spots where we can get better performance for a low cost</p>",
        "id": 497340366,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738564192
    },
    {
        "content": "<p>But I'm trying to buy a correctness cheeseburger with all of these perf pennies on the ground</p>",
        "id": 497340460,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738564223
    },
    {
        "content": "<p>Yeah, per module, per stage</p>",
        "id": 497340507,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738564254
    },
    {
        "content": "<p>I more generally asking about the general IR design and if we plan to lean more out of band (like intern polol is) or just do large tags</p>",
        "id": 497340558,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738564282
    },
    {
        "content": "<p>Okay, same page!</p>",
        "id": 497340563,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738564284
    },
    {
        "content": "<p>Yeah, interning is a must to plan for</p>",
        "id": 497340598,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738564302
    },
    {
        "content": "<p>Basically any data that's not a number or union should be interned</p>",
        "id": 497340696,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738564334
    },
    {
        "content": "<p>cool! That is exactly what I was trying to ask</p>",
        "id": 497340940,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738564447
    },
    {
        "content": "<p>Great</p>",
        "id": 497341248,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738564592
    },
    {
        "content": "<p>I think this already what the parser is shooting for already</p>",
        "id": 497441214,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738590848
    },
    {
        "content": "<p>Ok, I watched that talk (thought it was Andrew's from 2021 originally).  I think we should be careful here if we are aiming for a straightforward compiler that is easy to debug AND easy to contribute to.  Peruse the implementation of the Intern Pool - it's not trivial (especially if/when you want to handle multi-threading) for probably 90% of potential contributors.</p>",
        "id": 497471799,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738597781
    },
    {
        "content": "<p>I don't think intern pool has to be trivial. I just think the interface to it has to be trivial</p>",
        "id": 497485379,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738601083
    },
    {
        "content": "<p>Just like we can depend on a complex implementation of a hash map that most people don't understand, I think we could depend on a complex intern pool</p>",
        "id": 497485486,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738601116
    },
    {
        "content": "<p>Clearly there is a balance, but I think API is far more important than underlying complexity for something like this. (Not saying use intern pool, but I think we should think deeply about the easiest way to store data out of band)</p>",
        "id": 497485732,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738601191
    },
    {
        "content": "<p>The problem is the intern pool has a simple interface - if you are not touching any of the interned nodes</p>",
        "id": 497517895,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738611593
    },
    {
        "content": "<p>If you do, you are right back into the mess</p>",
        "id": 497517969,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738611607
    },
    {
        "content": "<p>I have not messed with it. We likely need to spin up a prototype to see what use would look like.</p>",
        "id": 497519308,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738612172
    },
    {
        "content": "<p>That or look at concrete use in the zig compiler</p>",
        "id": 497519336,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738612185
    },
    {
        "content": "<p>InternPool started off as some very straightforward code in the compiler, which would have been a good reference I think, but at this point it might be a bit overcomplicated to use as inspiration since it implements an experimental sharding system so that it can be used in multi-threaded contexts</p>",
        "id": 497546082,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738622644
    },
    {
        "content": "<p>at its core it's essentially the same pattern as the tokenizer, parser, and other phases of the pipeline, just with some fancy hash map stuff thrown in there</p>",
        "id": 497546347,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738622766
    },
    {
        "content": "<p>a neat trick is you can use a nonexhaustive enum for indices of the intern pool, and reserve the first N indices for specific known types. then any time you want to intern a common thing, you can use an enum literal instead</p>",
        "id": 497546439,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738622825
    },
    {
        "content": "<p>so your code looks like <code>doSomething(.i32_zero)</code> and <code>.i32_zero</code> lowers to whatever intern pool index you have reserved for that value</p>",
        "id": 497546595,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738622883
    },
    {
        "content": "<p>Yeah, definitely sounds like the current intern pool would not map to the simplicity we want to start with.</p>",
        "id": 497562717,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738631744
    },
    {
        "content": "<p>I wonder if we can essentially reimplement the simple starting version that is single threaded</p>",
        "id": 497562747,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738631761
    },
    {
        "content": "<p>Otherwise, I guess we can start by storing data out of band in multiple different allocations. One for each different type (or at least size) of data. That would be a lot simpler while still avoiding tons of wasted space.</p>",
        "id": 497562906,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738631830
    },
    {
        "content": "<p>what if we just had each module have its own interns that it populated from scratch in its own thread every time?</p>",
        "id": 497563789,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738632410
    },
    {
        "content": "<p>That's what I'm currently writing</p>",
        "id": 497563822,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738632425
    },
    {
        "content": "<p>I'm starting with per module, per stage</p>",
        "id": 497563832,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738632434
    },
    {
        "content": "<p>But I think we'd actually want just per-module</p>",
        "id": 497563842,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738632445
    },
    {
        "content": "<p>yeah it duplicates work but has the best cache coherence</p>",
        "id": 497563878,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738632463
    },
    {
        "content": "<p>and is very simple <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 497563886,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738632470
    },
    {
        "content": "<p>So once I finish the Zig conversion, I'll see if I can make just per-module work. That avoids needing to copy cache data between stages</p>",
        "id": 497563953,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738632490
    },
    {
        "content": "<p>And there's no multithreading concern because a module can't have two stages worked on simultaneously</p>",
        "id": 497564018,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738632532
    },
    {
        "content": "<p>you may need to be careful that interns across pools (per module or whatever) are equivalent under comparison</p>",
        "id": 497566504,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1738634054
    },
    {
        "content": "<p>the way this is done in the current implementation is that interns per module keep a reference to a global interner that is probed upon insertion (so effectively a write-through cache)</p>",
        "id": 497566570,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1738634115
    },
    {
        "content": "<p>The parser we are working with is pretty similar to the non-type-safe iteration of what you guys built</p>",
        "id": 497567584,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738634739
    },
    {
        "content": "<p>I think we could get to the type-safe API of the intern pool there with me having more experience with comptime</p>",
        "id": 497567613,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738634760
    }
]