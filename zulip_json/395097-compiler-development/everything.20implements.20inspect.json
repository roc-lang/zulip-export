[
    {
        "content": "<p>Is there an easy way for me to tell the compiler that everything implements inspect. I want to add a debug statement in<code>Dict</code> code, but can't easily do so due to the compiler thinking that <code>k</code> and <code>v</code> don't implement inspect. Clearly <code>k</code> and <code>v</code> have to implement inspect cause everything in roc implements inspect. It would be nice to just stop all type checking when it comes to inspect and never have to write <code>where x implements Inspect</code>.</p>",
        "id": 488171534,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733945440
    },
    {
        "content": "<p>I don't know if it would work, but you could try making a <code>Vis a : a where a implements Inspect</code> type alias and wrap stuff in it</p>",
        "id": 488172104,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733945640
    },
    {
        "content": "<p>You can also write stuff using dbg, and add type annotations afterwards</p>",
        "id": 488172228,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733945667
    },
    {
        "content": "<p>Otherwise, not a thing AFAICT</p>",
        "id": 488172272,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733945681
    },
    {
        "content": "<p>we discussed this originally but if I remember right <span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> preferred having the constraint. I don't remember the exact discission anymore <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 488172465,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1733945753
    },
    {
        "content": "<p>This issue is that there are a ton of function in dict. So either I need to add the constraint or comment out the type for every single function (turns out I also need to comment out all the types in set for this to work)</p>",
        "id": 488173490,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733946054
    },
    {
        "content": "<p>I can't do it to a single function cause they are all linked by dict</p>",
        "id": 488173536,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733946067
    },
    {
        "content": "<p>And by interconnected tests and calls</p>",
        "id": 488173567,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733946078
    },
    {
        "content": "<p>So I would really like to remove the constraint in general. It is a pain in practice and would be worse for larger libraries</p>",
        "id": 488173631,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733946104
    },
    {
        "content": "<p>Being able to drop in a <code>dbg</code> without changing an entire call stack is pretty fundamental</p>",
        "id": 488174417,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733946357
    },
    {
        "content": "<p>yes, it should be sufficient to add the exception to the Rigid* cases here<br>\n<a href=\"https://github.com/roc-lang/roc/blob/0be7b3f7501501f6ced1648f9c2644560d338505/crates/compiler/solve/src/ability.rs#L681-L703\">https://github.com/roc-lang/roc/blob/0be7b3f7501501f6ced1648f9c2644560d338505/crates/compiler/solve/src/ability.rs#L681-L703</a></p>",
        "id": 488175178,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1733946604
    },
    {
        "content": "<p>Note that you'll need to promote the var to include the ability in the same way is done for FlexVar</p>",
        "id": 488175229,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1733946620
    },
    {
        "content": "<p>otherwise the derived impl will never be created (I think)</p>",
        "id": 488175257,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1733946630
    }
]