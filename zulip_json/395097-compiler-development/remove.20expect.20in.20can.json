[
    {
        "content": "<p>Currently when we have an expect, it isn't removed until all the way after mono. This has the annoying issue that the expect and conditional are separate code by that point. As such, the conditional still runs no matter what. This is clearly a waste of perf and unintended behaviour. On top of that, we eventually want to have the dev backend and wasm backend generating expects. As such, addition or removal of expects should be higher up in compilation process instead of in each individual backend.</p>\n<p>My gut feeling as that it should get removed in can around the time we desugar (maybe as part of desaguring). Anyone have other thoughts/opinions? Also, what is the best way to map a single boolean of information from the cli all the way down into can. Feels like this should be easy to do, but I think we may have multiple levels of indirection that make this quite inconvenient to do. Any tips or folks that want to take this on?</p>",
        "id": 488528927,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733963397
    },
    {
        "content": "<p>I don't think we'll be able to remove at least top-level <code>expect</code> until after type constraining because <code>expect</code> will probably be allowed to have bodies with different rules than any other expression.</p>",
        "id": 488555486,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733981495
    },
    {
        "content": "<p>As discussed in the <a href=\"#narrow/channel/304641-ideas/topic/top.20level.20.3F.20try/near/472996399\">top level ? try</a> topic, we want expect to allow top-level <code>try</code> usage.</p>",
        "id": 488555583,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733981540
    },
    {
        "content": "<p>This only needs to be for the inline expects</p>",
        "id": 488555615,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733981567
    },
    {
        "content": "<p>Guess I missed clarifying that</p>",
        "id": 488555651,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733981598
    },
    {
        "content": "<p>Currently top level expects are properly elided (though through a different mechanism)</p>",
        "id": 488555657,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733981608
    },
    {
        "content": "<p>Okay, good thing I didn't type everything in one big message.</p>",
        "id": 488555676,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733981619
    },
    {
        "content": "<p>Saved us both some time</p>",
        "id": 488555685,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733981625
    },
    {
        "content": "<p>We'll still want to give proper type errors when inline expect is used incorrectly</p>",
        "id": 488555781,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733981677
    },
    {
        "content": "<p>Let's say we desugar inline expect to something like:</p>",
        "id": 488555804,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733981701
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">condition</span><span class=\"w\"> </span><span class=\"kr\">then</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"kr\">else</span><span class=\"w\"> </span><span class=\"nv\">dbg</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">condition</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"condition failed\"</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 488555849,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733981745
    },
    {
        "content": "<p>Not sure what to put for the <code>else</code> branch, it doesn't matter as much</p>",
        "id": 488555924,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733981772
    },
    {
        "content": "<p>If <code>condition</code> is not a <code>Bool</code>, then we want to be able to say \"inline expects only work with Bool values\"</p>",
        "id": 488555968,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733981817
    },
    {
        "content": "<p>I might be misunderstanding something, let me re-read your message again</p>",
        "id": 488556041,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733981872
    },
    {
        "content": "<blockquote>\n<p>As such, addition or removal of expects should be higher up in compilation process instead of in each individual backend.</p>\n</blockquote>\n<p>This seems like your real goal, to not run the expect's condition if you're trying to optimize the expect away</p>",
        "id": 488556176,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733981974
    },
    {
        "content": "<p>So we essentially desugar to that. The issue is that it ends up becoming:</p>\n<div class=\"codehilite\"><pre><span></span><code>condition = # some expensive computation\n{} = if condition then {} else dbg (condition, &quot;condition failed&quot;)\n</code></pre></div>\n<p>We then skip emitting the expect and emit this:</p>\n<div class=\"codehilite\"><pre><span></span><code>condition = # some expensive computation\n</code></pre></div>",
        "id": 488556204,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733981997
    },
    {
        "content": "<p>I understand now</p>",
        "id": 488556269,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733982014
    },
    {
        "content": "<p>Sometimes llvm optimizes that away. A lot of the time we touch memory or call a zig builtin and llvm gives up.</p>",
        "id": 488556344,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733982066
    },
    {
        "content": "<p>Not surprising</p>",
        "id": 488556373,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733982089
    },
    {
        "content": "<p>I'm looking through the <code>roc_can</code> to see what we currently represent <code>expect</code> as</p>",
        "id": 488556492,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733982159
    },
    {
        "content": "<p>I think it is just a statement at that level</p>",
        "id": 488556536,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733982188
    },
    {
        "content": "<p>But it seems like we'd just want to pass an <code>ignore_expects</code> flag to mono and delete inline <code>expect</code>s in <a href=\"https://github.com/roc-lang/roc/blob/7495495800eb18c5fbd66e41850b3f5fa5a42fcf/crates/compiler/mono/src/ir.rs#L4280\">with_hole</a>?</p>",
        "id": 488556638,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733982250
    },
    {
        "content": "<p>By mono, the condition is a separate statement and expect just holds a symbol to load</p>",
        "id": 488556697,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733982287
    },
    {
        "content": "<p>That's surprising, but I believe you</p>",
        "id": 488556733,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733982306
    },
    {
        "content": "<p>I could be wrong, but that is what it looked like to me</p>",
        "id": 488556751,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733982324
    },
    {
        "content": "<p>I'm checking</p>",
        "id": 488556763,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733982331
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/blob/7495495800eb18c5fbd66e41850b3f5fa5a42fcf/crates/compiler/mono/src/ir.rs#L7112\">https://github.com/roc-lang/roc/blob/7495495800eb18c5fbd66e41850b3f5fa5a42fcf/crates/compiler/mono/src/ir.rs#L7112</a></p>",
        "id": 488556872,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733982393
    },
    {
        "content": "<p>So on this line, when we see an <code>expect</code>, it's represented as:</p>\n<ul>\n<li>the condition's <code>roc_can</code> expression</li>\n<li>the rest of the body's <code>roc_can</code> expression</li>\n<li>the variables to display when the expect fails</li>\n</ul>",
        "id": 488556936,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733982448
    },
    {
        "content": "<p>This match branch is where the statements are created</p>",
        "id": 488557018,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733982492
    },
    {
        "content": "<p>So this is the last place to cut everything off in one place instead of having split statements</p>",
        "id": 488557039,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733982511
    },
    {
        "content": "<p>Yep</p>",
        "id": 488557054,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733982518
    },
    {
        "content": "<p>But I'm not sure where to cut it off before this.</p>",
        "id": 488557063,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733982533
    },
    {
        "content": "<p>In the pipeline, we've got</p>\n<ul>\n<li>parse</li>\n<li>canonicalize</li>\n<li>type check</li>\n<li>specialize</li>\n<li>codegen</li>\n</ul>",
        "id": 488557092,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733982556
    },
    {
        "content": "<p>We need to type check, and then right after that this is what's called</p>",
        "id": 488557110,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733982576
    },
    {
        "content": "<p>So it seems like the right move is to chop it off here</p>",
        "id": 488557126,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733982591
    },
    {
        "content": "<p>I just think it should be before codegen. Cause backends should not need to decide to elide expects</p>",
        "id": 488557130,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733982598
    },
    {
        "content": "<p>So right at conversion from can to mono. That sounds fine</p>",
        "id": 488557196,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733982622
    },
    {
        "content": "<p>Just need to pipeline the right info here</p>",
        "id": 488557226,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733982652
    },
    {
        "content": "<p>I agree that <code>monomorphization</code> doesn't mean \"specialize AND ALSO delete expects if this flag was passed\"</p>",
        "id": 488557228,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733982653
    },
    {
        "content": "<p>Would you be happy with adding a 4th field to the <code>Expr::Expect</code> that's called <code>ignored</code>?</p>",
        "id": 488557267,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733982682
    },
    {
        "content": "<p>I feel like this should be part of the environment or similar. It will be one value for all expects</p>",
        "id": 488557292,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733982712
    },
    {
        "content": "<p>Which feels like we're still having mono do the work of deleting dead code, but then it's not reading from the environment</p>",
        "id": 488557324,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733982723
    },
    {
        "content": "<p>What you just suggested would be my actual vote</p>",
        "id": 488557360,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733982734
    },
    {
        "content": "<p>My most recent suggestion is a way to avoid having mono need to be \"directly\" compiler flag-aware</p>",
        "id": 488557395,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733982774
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/395097-compiler-development/topic/remove.20expect.20in.20can/near/488557196\">said</a>:</p>\n<blockquote>\n<p>So right at conversion from can to mono. That sounds fine</p>\n</blockquote>\n<p>Oh, I see that we're in agreement</p>",
        "id": 488557520,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733982854
    },
    {
        "content": "<p>I'll make an issue?</p>",
        "id": 488557541,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733982873
    },
    {
        "content": "<p>Also, just to clarify, I'm just being pragmatic. It needs to be somewhere before mono. Probably should be after type checking so that types won't change between debug and release due to removing expects.</p>",
        "id": 488557621,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733982953
    },
    {
        "content": "<p>We'd need some other compiler phase to do that</p>",
        "id": 488557696,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733982987
    },
    {
        "content": "<p>And I just think we need to get a bool there somehow (may want to make the bool a two element enum, but same idea)</p>",
        "id": 488557697,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733982988
    },
    {
        "content": "<p>oh, is type check on mono?</p>",
        "id": 488557721,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733983015
    },
    {
        "content": "<p>I really don't know these parts of the compiler</p>",
        "id": 488557739,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733983027
    },
    {
        "content": "<p>I thought mono was after unification and was just about generating many specializations, but that is probably wrong?</p>",
        "id": 488557778,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733983058
    },
    {
        "content": "<p>To my understanding:</p>\n<ul>\n<li>canonicalization is the last place we reorder/add/remove AST nodes and set warnings</li>\n<li>type checking just determines the type of each AST node and saves those types in the relevant type variables, no AST changes are made</li>\n<li>mono converts to mono IR from the same AST created after canonicalization and uses the type-checked type variables to determine layout for symbols</li>\n</ul>",
        "id": 488557910,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733983132
    },
    {
        "content": "<p>If we do it in canonicalization, we can't do type-checking (unless we added a <code>UselessExpect</code> ast node, type checked it just like inline expects, and then ignored in in mono)</p>",
        "id": 488557966,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733983180
    },
    {
        "content": "<p>We can't remove anything during typechecking</p>",
        "id": 488557977,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733983189
    },
    {
        "content": "<p>So this is literally the first <em>and</em> last place to do it</p>",
        "id": 488558058,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733983207
    },
    {
        "content": "<p>That said, we will eventually need something that does inlining and constant evaluation</p>",
        "id": 488558141,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733983250
    },
    {
        "content": "<p>That compiler phase could also decide to remove dbg's and expect's</p>",
        "id": 488558227,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733983278
    },
    {
        "content": "<p>Theoretically, you could remove it all the way at the top of canonicalization.</p>",
        "id": 488558262,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733983297
    },
    {
        "content": "<blockquote>\n<p>inlining and constant evaluation</p>\n</blockquote>\n<p>I think that is expected to run on mono right before the backends run</p>",
        "id": 488558297,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733983318
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/channel/395097-compiler-development/topic/remove.20expect.20in.20can/near/488557966\">said</a>:</p>\n<blockquote>\n<p>If we do it in canonicalization, we can't do type-checking (unless we added a <code>UselessExpect</code> ast node, type checked it just like inline expects, and then ignored in in mono)</p>\n</blockquote>\n<p>Sounds like you'd like something like this?</p>",
        "id": 488558302,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733983321
    },
    {
        "content": "<p>Actually, as I am thinking about this more, I think we should remove it before typechecking and allow the type to change</p>",
        "id": 488558419,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733983375
    },
    {
        "content": "<p>A better name would be <code>IgnoredExpect</code> or something like that</p>",
        "id": 488558421,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733983376
    },
    {
        "content": "<p>I think the type will almost never change, but if it does, it should be a compiler optimization due to removing an unnecessary constraint.</p>",
        "id": 488558479,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733983411
    },
    {
        "content": "<p>eh, but that mean if you always build with <code>--optimize</code> and then remove that flag at some point, you code my suddenly have a type error... so nvm to the above idea</p>",
        "id": 488558579,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733983466
    },
    {
        "content": "<p>I guess another option is to put a pass after mono that deletes expects along with the node that generates their conditionals.</p>",
        "id": 488558668,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733983531
    },
    {
        "content": "<p>but that just feels like extra hassle</p>",
        "id": 488558754,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733983567
    },
    {
        "content": "<p>The long term with canonicalization is to cache some artifact that is parsed, canonicalized, and partially typecheck in a way that doesn't ever need to be recalculated unless there are code changes or you use a different Roc version</p>",
        "id": 488558760,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733983569
    },
    {
        "content": "<p>I see the more-than-single responsibility aspect of <code>mono</code> as a performance optimization. We don't to read over the entire AST 40 times, this seems like an unfortunate side effect of that</p>",
        "id": 488558868,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733983651
    },
    {
        "content": "<p>But we can add a TODO or something that says if we add such a compiler pass, we can move this conditional deletion of inline expects to that pass</p>",
        "id": 488558934,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733983684
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/issues/7348\">https://github.com/roc-lang/roc/issues/7348</a></p>",
        "id": 488560625,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733984748
    },
    {
        "content": "<p>as it happens, <span class=\"user-mention\" data-user-id=\"489294\">@Agus Zubiaga</span> and I have been working on just such a pass for lambda sets! <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 488563394,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1733986380
    },
    {
        "content": "<p>so yeah we can make sure to drop inline <code>expect</code> (when it's an optimized build) when we convert from canonical IR to the new IR that we're working on that will later get turned into our current <code>mono</code> IR</p>",
        "id": 488563463,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1733986424
    },
    {
        "content": "<p>i wonder if there’s an easier method to this - for example, what if you desugared the entire expect call to a closure and called that at the expect site? for example</p>\n<p>expect foo == bar</p>\n<p>becomes</p>\n<p>#call_expect expect_1 {..closure data}</p>\n<p>expect_1 = \\{..locals} -&gt; expect foo == bar</p>\n<p>Now it is trivial to remove the #call_expect calls in prod build and the rest is DCEd</p>",
        "id": 488568340,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1733988913
    }
]