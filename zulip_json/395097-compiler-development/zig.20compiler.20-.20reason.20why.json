[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20spike/near/497101907\">said</a>:</p>\n<blockquote>\n<p>Long story short, Richard proposed moving to Zig while we're rewriting so much of the compiler</p>\n</blockquote>\n<p>I may have missed the message, but is there a more developed explanation about the move from Rust to Zig? As it is an important decision, I would be very interested to understand it more deeply.</p>",
        "id": 497400566,
        "sender_full_name": "Ghislain",
        "timestamp": 1738580697
    },
    {
        "content": "<p>yeah I should write something up</p>",
        "id": 497417867,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738585032
    },
    {
        "content": "<p>I wrote something up! <a href=\"https://gist.github.com/rtfeldman/77fb430ee57b42f5f2ca973a3992532f\">https://gist.github.com/rtfeldman/77fb430ee57b42f5f2ca973a3992532f</a></p>\n<p>happy to answer any questions about it</p>",
        "id": 497561240,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738630791
    },
    {
        "content": "<blockquote>\n<p>While we're at it, we also want to convert it to use <a href=\"https://en.wikipedia.org/wiki/Recursive_descent_parser\">recursive descent</a>; it was originally written using <a href=\"https://bodil.lol/parser-combinators/\">parser combinators</a></p>\n</blockquote>\n<p>Aren't parser combinators just a particular way to do recursive descent?</p>",
        "id": 497561714,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1738631057
    },
    {
        "content": "<p>Maybe technically, but not in practice in terms of what the end code looks like and how readable it is (note, I personally am not a fan of parser combinators for anything medium sized or bigger. So I personally find it less readable for something like roc, but I'm sure some others disagree).</p>",
        "id": 497562023,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738631277
    },
    {
        "content": "<p>That’s funny. I was taught RD via Parser Combinators</p>",
        "id": 497569057,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738635646
    },
    {
        "content": "<p>But I never went to college, and wasn’t interested in compilers until I started doing FP</p>",
        "id": 497569098,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738635680
    },
    {
        "content": "<p>I haven’t seen “traditional” recursive descent work in an FP language (yet!). I think combinators make that feasible for FP.</p>",
        "id": 497569605,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738636005
    },
    {
        "content": "<p>I guess maybe it could be reasonable with the state monad? I only have minimal Haskell experience tho.</p>",
        "id": 497569667,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738636044
    },
    {
        "content": "<p>I thought Chakras parser was very readable, but it was at least a step function more simple than Rocs grammar</p>",
        "id": 497569844,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738636155
    },
    {
        "content": "<blockquote>\n<p>Clearly, if you want to join in the long tradition of successful compilers that have been rewritten at some point, you can pick whatever target language suits you.</p>\n</blockquote>\n<p>For some reason rewriting for purposes of self hosting has always sat in a different bucket in my head than other total rewrites. So It's very interesting to realize that so many compilers have been completely rewritten and it really does make it seem like a much more reasonable of a thing to do.</p>",
        "id": 497571775,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1738637386
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20reason.20why/near/497561240\">said</a>:</p>\n<blockquote>\n<p>I wrote something up! <a href=\"https://gist.github.com/rtfeldman/77fb430ee57b42f5f2ca973a3992532f\">https://gist.github.com/rtfeldman/77fb430ee57b42f5f2ca973a3992532f</a></p>\n</blockquote>\n<p>Richard, can I share this link in the Elm slack? There's a \"language-implementation\" channel, and I'm sure the folks there would be very interested.</p>",
        "id": 497714866,
        "sender_full_name": "Pit Capitain",
        "timestamp": 1738688566
    },
    {
        "content": "<p>sure!</p>",
        "id": 497734750,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738695214
    },
    {
        "content": "<blockquote>\n<p>I wrote something up! <a href=\"https://gist.github.com/rtfeldman/77fb430ee57b42f5f2ca973a3992532f\">https://gist.github.com/rtfeldman/77fb430ee57b42f5f2ca973a3992532f</a></p>\n</blockquote>\n<p>This is on the front page of hacker news <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 497763305,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1738705813
    },
    {
        "content": "<p>At <a href=\"https://github.com/roc-lang/roc/issues/3\">#3</a></p>",
        "id": 497763918,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1738706066
    },
    {
        "content": "<p>welp, I guess the cat is out of the bag now <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 497766270,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738707093
    },
    {
        "content": "<p>Glad to know we already rewrote it</p>",
        "id": 497772450,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1738709784
    },
    {
        "content": "<p>comments, for posterity: <a href=\"https://news.ycombinator.com/item?id=42935516\">https://news.ycombinator.com/item?id=42935516</a></p>",
        "id": 497772805,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738709966
    },
    {
        "content": "<p>Mostly positive vibes. A number of debates on rust compile times and rust vs zig vs c++ for safety. A surprising number of questions on parser combinators vs recursive descent. A few PNC haters.</p>",
        "id": 497773878,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738710429
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/D0efXvXC5g6B-uDO5TwGT02H/Screenshot-2025-02-04-at-3.06.08PM.png\">your wish is granted!</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/D0efXvXC5g6B-uDO5TwGT02H/Screenshot-2025-02-04-at-3.06.08PM.png\" title=\"your wish is granted!\"><img data-original-content-type=\"image/png\" data-original-dimensions=\"1674x720\" src=\"/user_uploads/thumbnail/22008/D0efXvXC5g6B-uDO5TwGT02H/Screenshot-2025-02-04-at-3.06.08PM.png/840x560.webp\"></a></div>",
        "id": 497773882,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738710431
    },
    {
        "content": "<p>I thought it was funny that one commenter was like \"I like what I'm reading about this language except I can't stand the backslash for lambda syntax\" and then someone else responded \"you're in luck, that syntax has changed!\" and then someone else responded \"I hate that it's <em>not</em> a backslash anymore\"</p>",
        "id": 497774052,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738710512
    },
    {
        "content": "<p>never change, Internet <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 497774083,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738710527
    },
    {
        "content": "<p>Yeah, saw that too.</p>",
        "id": 497774155,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738710565
    },
    {
        "content": "<p>High quality opinions</p>",
        "id": 497774191,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738710580
    },
    {
        "content": "<p>Also, I think the first reply to the \"you're in luck\" comment was just \"Booooo\"</p>",
        "id": 497774268,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738710607
    },
    {
        "content": "<p>all the people with good opinions are busy hacking instead of reading hn</p>",
        "id": 497774300,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738710628
    },
    {
        "content": "<p>btw I updated the wording around compile times - I mistakenly thought the \"1-2 second compile times\" was for the entire 300K LoC Zig code base all at once, but actually it was more like 4-5 seconds for rebuilding a subset; the 1-2 second build time was what Andrew mentioned <em>we</em> should be able to maintain for Roc's compiler, even as it gets big, and even with the current Zig compiler (and none of Zig's dev backend or incremental recompiles having landed yet; they are WIP but not ready for general use yet) - it's just that right now getting those numbers might require using build commands which manually exclude some of our code base.</p>\n<p>Zig's goal is to make all of that automatic, so that with any luck by the time our Zig code base gets big we're still seeing 1-2 second rebuilds (or faster) without having to issue any special commands, but status quo is that as the code base gets bigger, we might need to pass slightly different CLI args when building or running tests to filter out parts of the code base we aren't working on currently <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 497778731,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738712917
    },
    {
        "content": "<p>also <span class=\"user-mention\" data-user-id=\"406911\">@Andrew Kelley</span> graciously offered to help if we're ever seeing more than 1-2 seconds in our dev rebuild loop, and safe to say he knows all the tricks! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 497779806,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738713495
    },
    {
        "content": "<p>Hey vague follower of roc but fan of some of the ideas,  the podcast and the general community / didactic qualities of the project communication.  I'm stoked to see what comes from the rewrite in zig -- fast compile times for the win!!</p>\n<p>In the sprit of learning -- there's a reference to abilities vs static dispatch in the why roc write up -- Im a person who completely doesn't understand how the various dynamic dispatch mechanisms became so prevalent and a fanboy for the phrase \"static dispatch\" in general -- so preferring it to something else sounds great to me!!</p>\n<p>Buy I'm also not familiar with abilities and not fully understanding the context of what that particular tradeoff bullet point is talking about.  I'd love to see this part of the why roc argument explained and expanded further ay some point  (doesn't have to be here and now -- but on podcast or any other channel) - I'd like to hear whether the explanation generally aligns with my own general sensibilities about static dispatch (or whether this is really more about the weeds of compiler development).</p>",
        "id": 497780247,
        "sender_full_name": "Ben Cohen",
        "timestamp": 1738713685
    },
    {
        "content": "<p>Abilities are equivalent to traits in rust if that helps with understanding.</p>",
        "id": 497782634,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738714824
    },
    {
        "content": "<p>Static dispatch gets us the same thing but in a very different form.</p>",
        "id": 497782666,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738714842
    },
    {
        "content": "<p>perfect example of why one of the use cases I <em>do not</em> trust LLMs for is summarizing (e.g. meetings, blog posts, etc.) - this one summarized the gist as \"Richard is rewriting Roc's compiler in Roc\" which is wrong on basically every level.</p>\n<p><a href=\"/user_uploads/22008/Yt4OqbDmlUTLkUtGGTXolNfk/Screenshot-2025-02-05-at-10.57.47AM.png\">Screenshot 2025-02-05 at 10.57.47 AM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/Yt4OqbDmlUTLkUtGGTXolNfk/Screenshot-2025-02-05-at-10.57.47AM.png\" title=\"Screenshot 2025-02-05 at 10.57.47 AM.png\"><img data-original-content-type=\"image/png\" data-original-dimensions=\"1180x232\" src=\"/user_uploads/thumbnail/22008/Yt4OqbDmlUTLkUtGGTXolNfk/Screenshot-2025-02-05-at-10.57.47AM.png/840x560.webp\"></a></div>",
        "id": 497963000,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738781962
    },
    {
        "content": "<p>Literally missed the key point</p>",
        "id": 497963170,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738782010
    },
    {
        "content": "<p>Yeah and also acts like I'm solo authoring the code, which is almost exactly the opposite of what's actually happening.</p>",
        "id": 497963222,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738782028
    },
    {
        "content": "<p>the Rust compiler started out as just me, but so far the Zig compiler has a bunch of contributors but <em>not</em> me (yet!)</p>",
        "id": 497963293,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738782055
    },
    {
        "content": "<p>also, if I told myself in 2013 that this would happen in 2025 I never would have guessed it <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> </p>\n<p><a href=\"/user_uploads/22008/-AVdfJwnlaBuLq11yVZPkEz1/Screenshot-2025-02-05-at-11.01.34AM.png\">Screenshot 2025-02-05 at 11.01.34 AM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/-AVdfJwnlaBuLq11yVZPkEz1/Screenshot-2025-02-05-at-11.01.34AM.png\" title=\"Screenshot 2025-02-05 at 11.01.34 AM.png\"><img data-original-content-type=\"image/png\" data-original-dimensions=\"516x150\" src=\"/user_uploads/thumbnail/22008/-AVdfJwnlaBuLq11yVZPkEz1/Screenshot-2025-02-05-at-11.01.34AM.png/840x560.webp\"></a></div>",
        "id": 497963511,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738782132
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20reason.20why/near/497963000\">said</a>:</p>\n<blockquote>\n<p>perfect example of why one of the use cases I <em>do not</em> trust LLMs for is summarizing (e.g. meetings, blog posts, etc.) - this one summarized the gist as \"Richard is rewriting Roc's compiler in Roc\" which is wrong on basically every level.</p>\n</blockquote>\n<p>I believe that does not come from a current top model, but yeah hallucination is definitely not solved</p>",
        "id": 497965030,
        "sender_full_name": "Anton",
        "timestamp": 1738782502
    },
    {
        "content": "<p>more generally, I like LLMs a lot for use cases where I can verify their outputs - e.g. they generate some code instead of my writing it by hand, but I can read what they generated and see if it's doing what I want (and then make changes if it's not)</p>",
        "id": 497965795,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738782856
    },
    {
        "content": "<p>with a summary, I'm trusting the LLM's output as a source of truth because I didn't read the whole thing and therefore have no way to verify the accuracy of the summary (and fix it if there are problems)</p>",
        "id": 497965874,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738782888
    },
    {
        "content": "<p>leading to scenarios like the above, where anyone who reads that summary takes away the exact wrong thing but has no way to find out that this happened without reading the full thing instead of the LLM summary <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 497966068,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738782953
    },
    {
        "content": "<p>also for what it's worth I wouldn't call that mistake a hallucination</p>",
        "id": 497966226,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738783003
    },
    {
        "content": "<p>the gist does talk about self-hosting a lot, and it does mention how I originally authored the (beginning of the original Rust) code base, so all the things it's claiming are present in the text and weren't made up out of thin air, it just didn't present them correctly</p>",
        "id": 497966532,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738783097
    },
    {
        "content": "<p>I wrote probably too long of a reply here to a simple question on lobsters, but thought others might find my answer interesting: <a href=\"https://lobste.rs/s/0jknbl/roc_rewrites_compiler_zig#c_zt8qdn\">https://lobste.rs/s/0jknbl/roc_rewrites_compiler_zig#c_zt8qdn</a></p>",
        "id": 498027178,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738812055
    },
    {
        "content": "<p>My AI summary: Brendan thinks we'll have a perfect compiler, saying \"We are going to write the compiler flawlessly in a new langauge with no issues at all.\"</p>",
        "id": 498027298,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738812143
    },
    {
        "content": "<p>Also, at this point, I think a lot of the hacker news thread has really devolved to many people complaining just to complain</p>",
        "id": 498029052,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738813347
    },
    {
        "content": "<p>I'm gonna chat with Loris about our reasoning and the history of how we got here etc. on Zig Showtime next Monday! <a href=\"https://x.com/croloris/status/1887569862219731198\">https://x.com/croloris/status/1887569862219731198</a></p>",
        "id": 498188370,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738867370
    },
    {
        "content": "<p>it'll be live on Twitch in case anyone wants to hang out</p>",
        "id": 498188391,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738867377
    },
    {
        "content": "<blockquote>\n<p>the techyap-sphere<br>\n“double citizenship”: Rust in the sheets (the compiler), Zig in the streets (the stdlib)</p>\n</blockquote>\n<p><span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></p>",
        "id": 498192475,
        "sender_full_name": "jan kili",
        "timestamp": 1738868909
    },
    {
        "content": "<p>It is probably very difficult, if not impossible to estimate when the rewrite and then the release 0.1.0 will be completed or is it more of a progressive/incremental switch from rust to zig?. 300k LOC contains so much of valuable knowledge from the previous years that have been incorporated into the project. Are we talking about a year or several years? I have no idea because compilers are not my area of expertise. Nevertheless thank you for your time and energy to develop roc, i'm very much looking forward to the new compiler and then the first numbered release! Very exciting!</p>",
        "id": 498360596,
        "sender_full_name": "Nikolaus Wettstein",
        "timestamp": 1738940659
    },
    {
        "content": "<p>I'm hoping the new version will be many less lines of code.</p>",
        "id": 498380462,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738946207
    },
    {
        "content": "<p>Also, it is a full switch and not incremental. Though we hope to get a slim slice of the compiler and then slowly expand</p>",
        "id": 498380547,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738946235
    },
    {
        "content": "<p>Timelines are exceptionally hard in open source.</p>",
        "id": 498380601,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738946258
    },
    {
        "content": "<p>Anyone can disappear (or show up) for any number of reasons.</p>",
        "id": 498380724,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738946291
    },
    {
        "content": "<p>Thank you for your answer!</p>",
        "id": 498481384,
        "sender_full_name": "Nikolaus Wettstein",
        "timestamp": 1739002781
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/395097-compiler-development/topic/zig.20compiler.20-.20reason.20why/near/498188370\">said</a>:</p>\n<blockquote>\n<p>I'm gonna chat with Loris about our reasoning and the history of how we got here etc. on Zig Showtime next Monday! <a href=\"https://x.com/croloris/status/1887569862219731198\">https://x.com/croloris/status/1887569862219731198</a></p>\n</blockquote>\n<p>Richard's going live!</p>",
        "id": 498826943,
        "sender_full_name": "jan kili",
        "timestamp": 1739210427
    },
    {
        "content": "<p>The recording is up on YouTube </p>\n<p><a href=\"https://youtu.be/WU45hNi_s7Y\">https://youtu.be/WU45hNi_s7Y</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"WU45hNi_s7Y\" href=\"https://youtu.be/WU45hNi_s7Y\"><img src=\"https://uploads.zulipusercontent.net/42a9ee8953be7b55758a502a6d7dc7a3cf83b2c6/68747470733a2f2f692e7974696d672e636f6d2f76692f57553435684e695f7337592f64656661756c742e6a7067\"></a></div>",
        "id": 498852263,
        "sender_full_name": "Loris Cro",
        "timestamp": 1739218058
    }
]