[
    {
        "content": "<p>I'd like to upgrade the roc_cli tests to use snapshots... because I'm going a bit crazy chasing minor changes. Is it ok to use <a href=\"https://rust-exercises.com/advanced-testing/02_snapshots/00_intro\">https://rust-exercises.com/advanced-testing/02_snapshots/00_intro</a> which describes the use of the <a href=\"https://docs.rs/insta/latest/insta/\">insta</a> library?</p>",
        "id": 475682204,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728424964
    },
    {
        "content": "<p>Ah, actually it looks like we are already using it elsewhere... I'm going to give it a go</p>",
        "id": 475682335,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728425025
    },
    {
        "content": "<p>sounds good to me! I've liked <code>insta</code> in the places we've used it <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 475682767,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1728425156
    },
    {
        "content": "<p>I think it's going to dramatically simplify that test module too which is super nice</p>",
        "id": 475684082,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728425554
    },
    {
        "content": "<p>Should the snapshots be getting checked for diffs in CI?</p>",
        "id": 526494031,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751321695
    },
    {
        "content": "<p>It seems to be a common source of merge conflicts</p>",
        "id": 526494071,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751321722
    },
    {
        "content": "<p>We should be checking these in the PR review</p>",
        "id": 526494089,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751321739
    },
    {
        "content": "<p>aren't they already checked for diffs? or what do you mean?</p>",
        "id": 526494161,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1751321785
    },
    {
        "content": "<p>They are checked for any diffs in CI</p>",
        "id": 526494192,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751321804
    },
    {
        "content": "<p>And they are also easy to get merge conflicts</p>",
        "id": 526494219,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751321820
    },
    {
        "content": "<p>I'm not sure it's a big problem or anything... just fishing for ideas/opinions</p>",
        "id": 526494274,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751321852
    },
    {
        "content": "<p>I actually would love to just give them a naming convention that's enforced, like \"if the snapshot's name ends with <code>_err2</code> then it should report 2 errors , and similar with like <code>_warn2err5</code> etc.\" and we enforce that in ci</p>",
        "id": 526495776,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751322848
    },
    {
        "content": "<p>basically so if you make a change that causes snapshots to change the number of errors or warnings being reported, that's a CI failure</p>",
        "id": 526495873,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751322909
    },
    {
        "content": "<p>Do we want fuzz crashes and the like in snapshot tests?</p>",
        "id": 526495887,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751322917
    },
    {
        "content": "<p>I'm wondering if we should be maintaining a smaller number of higher quality snapshots, as opposed to the shotgun we currently have</p>",
        "id": 526496035,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751322975
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/channel/395097-compiler-development/topic/snapshot.20tests/near/526495776\">said</a>:</p>\n<blockquote>\n<p>I actually would love to just give them a naming convention that's enforced, like \"if the snapshot's name ends with <code>_err2</code> then it should report 2 errors , and similar with like <code>_warn2err5</code> etc.\" and we enforce that in ci</p>\n</blockquote>\n<p>I'm thinking of taking this idea a little further... adding \"tags\" or similar flags we can use in the <code>META</code> section to express the intent for the snapshot.</p>",
        "id": 526496428,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751323214
    },
    {
        "content": "<p>One issue I know I want to fix is we print the Idx for patterns and type vars etc... except this isnt stable. If we change the number of nodes etc we get a really noisy diff. </p>\n<p>I want to change the s-expressions to use Regions I think as the unifying thing as that is stable. So the type vars etc still use idx's under the hood but when displaying they lookup the region for the referenced node and use that.</p>",
        "id": 526496971,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751323612
    },
    {
        "content": "<p>I think those will still change quite a bit when the node structure changes</p>",
        "id": 526500454,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751326043
    },
    {
        "content": "<p>Maybe I didn't explain it very well. I've made the change and I think it looks much nicer.</p>\n<h1>SOURCE</h1>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>module [foo]\n\nfoo : Str\nfoo = \"one\"\n</code></pre></div>\n<h1>CANONICALIZE</h1>\n<div class=\"codehilite\" data-code-language=\"Clojure\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nf\">can-ir</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"nf\">d-let</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"nf\">p-assign</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"mf\">4.1-4.4</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">ident</span><span class=\"w\"> </span><span class=\"s\">\"foo\"</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"nf\">e-string</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"mf\">4.7-4.12</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"nf\">e-literal</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"mf\">4.8-4.11</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">string</span><span class=\"w\"> </span><span class=\"s\">\"one\"</span><span class=\"p\">)))</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"nf\">annotation</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"mf\">4.1-4.4</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"nf\">declared-type</span>\n<span class=\"w\">                </span><span class=\"p\">(</span><span class=\"nf\">ty</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"mf\">3.7-3.10</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">name </span><span class=\"s\">\"Str\"</span><span class=\"p\">))))))</span>\n</code></pre></div>\n<h1>TYPES</h1>\n<div class=\"codehilite\" data-code-language=\"Clojure\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nf\">inferred-types</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"nf\">defs</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"nf\">d-assign</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"mf\">4.1-4.4</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">type</span><span class=\"w\"> </span><span class=\"s\">\"Str\"</span><span class=\"p\">)))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"nf\">expressions</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"nf\">expr</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"mf\">4.7-4.12</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">type</span><span class=\"w\"> </span><span class=\"s\">\"Str\"</span><span class=\"p\">))))</span>\n</code></pre></div>",
        "id": 526500836,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751326352
    },
    {
        "content": "<p>Now we don't have any node id's. I think this will reduce the noise a lot.</p>",
        "id": 526500945,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751326439
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"341568\">@Jared Ramirez</span> in the TYPES section above, would <code>d-assign</code> be clearer as <code>pattern</code>?</p>",
        "id": 526501599,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751326956
    },
    {
        "content": "<p>Or even <code>patt</code></p>",
        "id": 526501625,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751326974
    },
    {
        "content": "<p>Imo pattern of or d-pat is clearer</p>",
        "id": 526501693,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1751327024
    },
    {
        "content": "<p>I like <code>patt</code> it's the same length as <code>expr</code> so everything lines up.</p>",
        "id": 526501759,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751327079
    },
    {
        "content": "<p>I also have a todo in there for this: sometimes it's nice to print out the type var IDs and the entire type store when debugging. This definitely should not be committed but it would be cool if there was a way to easily enable that with a flag.</p>",
        "id": 526501789,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1751327103
    },
    {
        "content": "<p><code>d-pat</code> would be similar, but we already have <code>defs</code> as the parent, so maybe we don't need the <code>d-</code> prefix</p>",
        "id": 526501794,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751327105
    },
    {
        "content": "<p>Should be trivial to add a flag to debug print the type store. We have <code>--verbose</code> on the snapshot tool already.</p>",
        "id": 526501859,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751327153
    },
    {
        "content": "<p>ptrn? patt is fine tho</p>",
        "id": 526501889,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1751327178
    },
    {
        "content": "<p>Also what do you think of flattening it out and removing the <code>type</code> as well?</p>",
        "id": 526502001,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751327272
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Clojure\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nf\">inferred-types</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"nf\">defs</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"nf\">d-assign</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"mf\">4.1-4.4</span><span class=\"w\"> </span><span class=\"s\">\"Str\"</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"nf\">expressions</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"nf\">expr</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"mf\">4.7-4.12</span><span class=\"w\"> </span><span class=\"s\">\"Str\"</span><span class=\"p\">)))</span>\n</code></pre></div>",
        "id": 526502021,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751327291
    },
    {
        "content": "<p>Nvm I remembered we are using the parens for attributes, only region info is displayed without enclosing  parens because it's so obvious.</p>",
        "id": 526502255,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751327498
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"453336\">@Joshua Warner</span> this should also make the side-by-side HTML version your working on much easier I think.</p>",
        "id": 526502629,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751327805
    },
    {
        "content": "<p>And it's magical... we're back to diffs in PR's that are related to the changes <span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span> <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 526504208,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751328785
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/395097-compiler-development/topic/snapshot.20tests/near/526495887\">said</a>:</p>\n<blockquote>\n<p>Do we want fuzz crashes and the like in snapshot tests?</p>\n</blockquote>\n<p>I think we definitely should keep them. They are minimal repros for bugs that were not caught elsewhere.</p>",
        "id": 526517229,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751339963
    },
    {
        "content": "<p>Unless snapshot tests take too long (which I don't think should ever happen), we should keep as many as possible, especially small ones that reproduce issues we find</p>",
        "id": 526517319,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751340034
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> did you have any thoughts on my upper bound perf idea? I mentioned you in the snapshot summary PR</p>",
        "id": 526517381,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751340083
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/395097-compiler-development/topic/snapshot.20tests/near/526496428\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/channel/395097-compiler-development/topic/snapshot.20tests/near/526495776\">said</a>:</p>\n<blockquote>\n<p>I actually would love to just give them a naming convention that's enforced, like \"if the snapshot's name ends with <code>_err2</code> then it should report 2 errors , and similar with like <code>_warn2err5</code> etc.\" and we enforce that in ci</p>\n</blockquote>\n<p>I'm thinking of taking this idea a little further... adding \"tags\" or similar flags we can use in the <code>META</code> section to express the intent for the snapshot.</p>\n</blockquote>\n<p>That's a good idea.</p>",
        "id": 526517398,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751340109
    },
    {
        "content": "<p>Once the reference counting pass gets added to the snapshots, the exact position of the incs and decs is definitely important. <a href=\"https://github.com/roc-lang/roc/blob/main/crates/compiler/test_mono/generated/closure_in_list.txt\">Example</a></p>",
        "id": 526574305,
        "sender_full_name": "Anton",
        "timestamp": 1751365120
    },
    {
        "content": "<p>Yes, though those are maybe better tested with valgrind and running code.... That said, having both is totally reasonable</p>",
        "id": 526631427,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751382819
    },
    {
        "content": "<p>Can you explain how the newly introduced (<a href=\"https://github.com/roc-lang/roc/issues/7949\">#7949</a>) EXPECTED sections work in the snapshots <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span>? I've been unable to make <code>zig build snapshot</code> fail by modifying the EXPECTED sections in .md snapshot files, which is unexpected :p</p>",
        "id": 527509063,
        "sender_full_name": "Anton",
        "timestamp": 1751903441
    },
    {
        "content": "<p><code>zig build test</code> verifies them</p>",
        "id": 527522668,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751908134
    },
    {
        "content": "<p><code>zig build snapshot</code> still just regenerates all the stuff under them; my thinking was that <code>zig build snapshot</code> should always succeed, and then <code>zig build test</code> is responsible for detecting and reporting failures</p>",
        "id": 527522770,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751908172
    },
    {
        "content": "<p>Alright, sounds good</p>",
        "id": 527523561,
        "sender_full_name": "Anton",
        "timestamp": 1751908497
    }
]