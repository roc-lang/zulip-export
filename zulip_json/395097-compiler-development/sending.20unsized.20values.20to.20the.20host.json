[
    {
        "content": "<p>building on the discussion with <span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> <span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> from the meetup today - I think probably the way forward is the thing we talked about earlier, namely:</p>\n<ul>\n<li>require that anything sent to the host has a size that the host can know statically</li>\n<li>this means if you want to send a closure or type variable, the platform module has to explicitly <code>Box</code> it (and we just pay the perf penalty for now, since obviously boxing needs to be supported regardless)</li>\n<li>you get a compile-time error if you're trying to send anything with statically unknown size (statically unknown to the host, that is - e.g. a closure or type variable, or a data structure that contains either of those)</li>\n</ul>",
        "id": 464911616,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724542317
    },
    {
        "content": "<p>assuming that's the design, then I <em>think</em> it should be possible for the platform to say to the application that the application needs to provide something that looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">init</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"kt\">[]</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">handleRequest</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Request</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"kt\">Response</span><span class=\"w\"> </span><span class=\"kt\">[]</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 464911706,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724542395
    },
    {
        "content": "<p>and I thought about how unification could work and I think it might actually be kinda straightforward</p>",
        "id": 464911718,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724542436
    },
    {
        "content": "<p>basically in constraint gen, create a Function constraint where <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> is the argument type - e.g. pretend the function has this type:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">init</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"kt\">[]</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">handleRequest</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Request</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"kt\">Response</span><span class=\"w\"> </span><span class=\"kt\">[]</span><span class=\"p\">,</span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n</code></pre></div>",
        "id": 464911769,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724542469
    },
    {
        "content": "<p>and then create another constraint as if we're calling the function passing <code>main</code> as the argument</p>",
        "id": 464911775,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724542486
    },
    {
        "content": "<p>so if I have a <code>main</code> with this type:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">init</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"kt\">MySharedServerState</span><span class=\"w\"> </span><span class=\"kt\">[]</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">handleRequest</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">MySharedServerState</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Request</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"kt\">Response</span><span class=\"w\"> </span><span class=\"kt\">[]</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>...it should successfully unify with that \"argument\"</p>",
        "id": 464911799,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724542524
    },
    {
        "content": "<p>then from there we could add constraints similar to the ones we have today for the app-defined concrete types (e.g. <code>Model</code>) except that they're set to be Equal to the type variables in this \"function\"</p>",
        "id": 464911906,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724542681
    },
    {
        "content": "<p>so then after solving finishes, we have resolved <code>Variable</code>s for the type variables, just like we do today</p>",
        "id": 464911954,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724542711
    },
    {
        "content": "<p>but without the application author having to declare them in a special way</p>",
        "id": 464911958,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724542724
    },
    {
        "content": "<p>and then from there everything can proceed the same way it does today</p>",
        "id": 464911962,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724542738
    },
    {
        "content": "<p>unless I'm missing something, it seems like that should work - but of course I could always be missing something! <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 464911972,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724542760
    },
    {
        "content": "<p>I don't follow the type checking part. What is the the function solving? Type checking for basic webserver works today and it uses those types.</p>",
        "id": 464914143,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724544109
    },
    {
        "content": "<p>It has an explicit function to go from <code>state</code> to <code>Box state</code> for sending to the platform.</p>",
        "id": 464914500,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724544203
    },
    {
        "content": "<p>Also, boxing is fine, but I prefer the current system of telling the platform the size of things (sadly doesn't really work with nested data).... So boxing is probably more reasonable I guess.</p>",
        "id": 464914664,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724544269
    },
    {
        "content": "<p>this all sounds good but i don’t follow how it solves the problem of different value locations in structs? unless you’re not intending to solve that here</p>",
        "id": 464915218,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1724544575
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"454654\">Ayaz Hafiz</span> <a href=\"#narrow/stream/395097-compiler-development/topic/sending.20unsized.20values.20to.20the.20host/near/464915218\">said</a>:</p>\n<blockquote>\n<p>this all sounds good but i don’t follow how it solves the problem of different value locations in structs? unless you’re not intending to solve that here</p>\n</blockquote>\n<p>basically disallow anything that would move around (so, unboxed closures and unboxed type variables)</p>",
        "id": 464915591,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724544752
    },
    {
        "content": "<p>if they have to be in a <code>Box</code>, then the host statically knows how big that is</p>",
        "id": 464915722,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724544792
    },
    {
        "content": "<p>and that's recursively true, e.g. you can't send anything that contains an unboxed closure or type variable</p>",
        "id": 464915738,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724544821
    },
    {
        "content": "<p>so unless I'm missing something, that means any struct that goes to the host will have a fixed field order that never varies by application</p>",
        "id": 464915786,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724544852
    },
    {
        "content": "<p>and it's up to the platform to figure out how to make that happen</p>",
        "id": 464915788,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724544862
    },
    {
        "content": "<p>the idea being that long-term we <em>at least</em> need this to work, so for now we can make it a restriction and make it work</p>",
        "id": 464915797,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724544884
    },
    {
        "content": "<p>and then in the future if we find a way to relax the restriction, then cool</p>",
        "id": 464915803,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724544894
    },
    {
        "content": "<p>maybe it ends up being important, maybe this restriction is fine indefinitely, but either way it's a path forward that unblocks effect interpreters among other things <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 464915831,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724544926
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/395097-compiler-development/topic/sending.20unsized.20values.20to.20the.20host/near/464914143\">said</a>:</p>\n<blockquote>\n<p>I don't follow the type checking part. What is the the function solving? Type checking for basic webserver works today and it uses those types.<br>\nIt has an explicit function to go from <code>state</code> to <code>Box state</code> for sending to the platform.</p>\n</blockquote>\n<p>sorry, relevant distinction from the conversation that I didn't say explicitly here - the idea is that instead of having this concept of <a href=\"https://github.com/roc-lang/basic-webserver/blob/1518c411d298b2c523212a92bcc3e98a753099da/platform/main.roc#L2\"><code>Model</code></a> - that is, a special concrete type that the platform specifies which the application has to provide - instead the platform asks the application for <em>literally</em> a record with lowercase type variables like <code>state</code> in it</p>",
        "id": 464915988,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724545094
    },
    {
        "content": "<p>the <code>Model</code> design is more learning curve for application authors (compared to the docs being literally \"application author, give me a normal record of this type and we're all set\") and it blocks a future design where we just have one entrypoint and the app doesn't have to specify what it's sending the platform (which currently <a href=\"https://github.com/roc-lang/basic-webserver/blob/1518c411d298b2c523212a92bcc3e98a753099da/examples/sqlite3.roc#L1\">is needed to tell the platform about the app's <code>Model</code> type</a>)</p>",
        "id": 464916122,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724545273
    },
    {
        "content": "<p>I know it's a little off topic, but is this a big change? Any chance we could roll it into Builtin Task change? that would save another round of releases and that's the only change that requires coordination with the platforms I'm tracking for a while.</p>",
        "id": 464916551,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724545773
    },
    {
        "content": "<p>I think this should be separate</p>",
        "id": 464916659,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724545893
    },
    {
        "content": "<p>it might not end up being a big code change, but the design space is a minefield and we've had plenty of \"go partway down the road before realizing it's not going to work out...and then start over\" in this area <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 464916748,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724545956
    },
    {
        "content": "<p>Oh, got it... Ok</p>",
        "id": 464916762,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724545974
    },
    {
        "content": "<p>No worries, I'm just thinking about the work to coordinate releases and upgrade platforms. It's not a problem, just thought it might be easy to include it while we are at it.</p>",
        "id": 464916846,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724546090
    },
    {
        "content": "<p>Aside, I was originally thinking this was related to the bug in contributing with tags passed to the host expanding</p>",
        "id": 464916850,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724546096
    },
    {
        "content": "<p>ah no, unrelated!</p>",
        "id": 464916962,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724546237
    },
    {
        "content": "<p>I think there are still a couple unresolved things here. One is that the <code>state</code> type is unsized until the application is compiled, right? So unless that is boxed as well, you need to somehow manage potential field reorders. Another is that in order to do this, you must make sure that any reachable values (closures, etc) are boxed - and so you need to perform an analysis somehow to determine how \"far\" in the program you must box values accordingly.</p>",
        "id": 464945510,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1724564176
    },
    {
        "content": "<p>yeah I agree with both points: <code>state</code> would have to be boxed, and we'd need to do some special pass over the final type of the platform-host boundary to generate that error - but since it would just be for one type signature in the entire program, I think it should be pretty quick?</p>",
        "id": 464991347,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724583233
    },
    {
        "content": "<p>well it's not just one final pass, you must make sure that everything in the program that can reach a value exposed to the host is correctly boxed, right?</p>",
        "id": 465024880,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1724601107
    },
    {
        "content": "<p>or else have some layer between the app and the host that walks the type and boxes it appropriately</p>",
        "id": 465024928,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1724601126
    },
    {
        "content": "<p>I feel like we can just ban the dynamically sized types in the platform api and force the platform author to deal with it as they see fit. Avoid requiring some sort of automatic boxing pass and either have the platform author expose the <code>Box</code> to the end users or box it themselves</p>",
        "id": 465031317,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724608079
    },
    {
        "content": "<p>In most cases, it will just be shallow boxing of a single type</p>",
        "id": 465031372,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724608111
    },
    {
        "content": "<p>For:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nv\">init</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"p\">[],</span>\n<span class=\"w\">    </span><span class=\"nv\">handleRequest</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Request</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"kt\">Response</span><span class=\"w\"> </span><span class=\"p\">[],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>If we allow exposing more than one value to the platform, the final api would be:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">init</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Box</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n\n<span class=\"nv\">handleRequest</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Box</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"kt\">Request</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"kt\">Response</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n</code></pre></div>\n<p><span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> requires being able to expose multiple values to the host, but it is by far the simplest host api and we should definitely support it in the long term.</p>\n<p>Sadly, today, we can only expose a single value to the host.<br>\nSo today, that api would need to be:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nv\">init</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Box</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">[],</span>\n<span class=\"w\">    </span><span class=\"nv\">handleRequest</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Box</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Box</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Request</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"kt\">Response</span><span class=\"w\"> </span><span class=\"p\">[]),</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 465031601,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724608322
    },
    {
        "content": "<p>Oh, though, I think we also need to box all of the tasks cause they are technically functions:</p>\n<p>So the required api today to avoid all unsized types going to the platform would be</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nv\">init</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Box</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Box</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">[]),</span>\n<span class=\"w\">    </span><span class=\"nv\">handleRequest</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Box</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Box</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Request</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Box</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"kt\">Response</span><span class=\"w\"> </span><span class=\"p\">[])),</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>To get this api, we would just ban unboxed functions and unboxed type variables from being passed to the platform api.</p>",
        "id": 465031746,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724608456
    },
    {
        "content": "<p>sure, but that’s not a trivial task</p>",
        "id": 465033111,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1724609840
    },
    {
        "content": "<p>like you need to make sure that every value that is potentially reachable is boxed</p>",
        "id": 465033136,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1724609867
    },
    {
        "content": "<p>Is this only a hard problem cause types aren't required to be specified? Like if we require a type for the platform api, doesn't this just become a single traversal of the type?</p>",
        "id": 465033559,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724610178
    },
    {
        "content": "<p>I'm probably thinking too naively, but I think we could require that the platform api is type in a way such that this becomes relatively easy to deal with.</p>",
        "id": 465033643,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724610254
    },
    {
        "content": "<p>if you have some closure <code>f</code> deep down in your call stack that makes its way into a data structure given to the host, you need to know to somehow box that closure. for example</p>\n<div class=\"codehilite\"><pre><span></span><code>hostExposed = { value: 1, f: makeF {} }\n\nmakeF = if Bool.true then make1 {} else make2 {}\n\nmake1 = \\{} -&gt;\n  v = 1\n  \\u -&gt; u + v\n\nmake2 = \\u -&gt; u\n</code></pre></div>\n<p>here you have to know that make1 needs to be boxed, or somehow box it before you give it to the host</p>",
        "id": 465044694,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1724621866
    },
    {
        "content": "<p>so the algorithm I was thinking of wouldn't allow functions passed to the host to return unboxed functions.</p>\n<p>specifically, the idea would be that in this design the platform sends a total of exactly 1 value to the host (so, \"one entrypoint\") but of course it can be a record, tuple, etc. That 1 value's type may contain only the following (after expanding type aliases):</p>\n<ul>\n<li>Builtin opaque types (<code>Str</code>, <code>List</code>, <code>Box</code>, numbers, etc.) - if any userspace opaque type is encountered, it's an error.</li>\n<li>Collections of any of these allowed types (e.g. records, tuples, lists, etc.) with the exception of <code>[]</code>, which is disallowed based on other discussions</li>\n<li>Lowercase type variables if and only if they are inside a <code>Box</code></li>\n<li>Functions, with the following additional restrictions:<ul>\n<li>the function may only accept and return one of these allowed types</li>\n<li>each of its arguments and return types is checked to make sure that if it contains a function anywhere inside its type, that function is inside a <code>Box</code></li>\n</ul>\n</li>\n</ul>",
        "id": 465046986,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724624699
    },
    {
        "content": "<p>so in this design, the above example would give an error because <code>makeF</code> returns an unboxed function</p>",
        "id": 465047017,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724624748
    },
    {
        "content": "<p>edit: the following is incorrect; I missed something, which Brendan pointed out below</p>\n<p>note that it's drawing a distinction between whether a function <em>happens</em> to close over anything (since that can only be knowable after the application has been compiled, and the whole point of this is to get a layout that's statically knowable regardless of what the application's code is), but rather it's crudely assuming that:</p>\n<ul>\n<li>if it's a top-level function (that is, provided directly in the record or something; not returned by another function) then of course it wouldn't have been able to capture anything</li>\n<li>all other functions might capture, so require that they are boxed</li>\n</ul>",
        "id": 465047097,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724624854
    },
    {
        "content": "<p>I think this could be done in one pass because the recursive \"verify that this type is allowed\" function can take one argument for whether any encountered functions must be boxed, and then when you recurse on function args and return value, you just set that to true</p>",
        "id": 465047155,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724624894
    },
    {
        "content": "<p>Top level can still capture in roc:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">  </span><span class=\"nv\">myCapture</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">callSomething</span><span class=\"w\"> </span><span class=\"mi\">123</span>\n<span class=\"w\">  </span><span class=\"nf\">\\</span><span class=\"nv\">abc</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">       </span><span class=\"nf\">...</span>\n</code></pre></div>",
        "id": 465047370,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724625218
    },
    {
        "content": "<p>x is a top level function with a capture. Thus needs to be boxed</p>",
        "id": 465047377,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724625235
    },
    {
        "content": "<p>ahh good point, I forgot about that</p>",
        "id": 465047428,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724625275
    },
    {
        "content": "<p>I guess it's fine if all functions have to be boxed since the host will just hold onto those forever anyway</p>",
        "id": 465047457,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724625329
    },
    {
        "content": "<p>so you have to annotate makeF as returning a box explicitly?</p>",
        "id": 465054004,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1724630756
    },
    {
        "content": "<p>not just annotate it, literally use the <code>Box</code> builtin to wrap it! <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 465054626,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724631036
    },
    {
        "content": "<p>Basically, roc enforces the types, but the platform author has to actually ensure things are boxed explicitly.</p>\n<p>So like the platform might accept a <code>makeF</code> from the app, but it would expose a wrapped version to the underlying host:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">hostExposed</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">I64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">f</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Box</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">I64</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">I64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"nv\">hostExposed</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">appExposed</span><span class=\"nf\">.</span><span class=\"nv\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">f</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Box</span><span class=\"nf\">.</span><span class=\"nv\">box</span><span class=\"w\"> </span><span class=\"nv\">appExposed</span><span class=\"nf\">.</span><span class=\"nv\">f</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"nv\">appExposed</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">I64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">f</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">I64</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">I64</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"nv\">appExposed</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">f</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">makeF</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"nv\">makeF</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">I64</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">I64</span><span class=\"p\">)</span>\n<span class=\"nv\">makeF</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">true</span><span class=\"w\"> </span><span class=\"kr\">then</span><span class=\"w\"> </span><span class=\"nv\">make1</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"kr\">else</span><span class=\"w\"> </span><span class=\"nv\">make2</span>\n\n<span class=\"nv\">make1</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">I64</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">I64</span><span class=\"p\">)</span>\n<span class=\"nv\">make1</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">  </span><span class=\"nv\">v</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">  </span><span class=\"nf\">\\</span><span class=\"nv\">u</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">u</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"nv\">v</span>\n\n<span class=\"nv\">make2</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">I64</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">I64</span>\n<span class=\"nv\">make2</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">u</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">u</span>\n</code></pre></div>",
        "id": 465055684,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724631687
    },
    {
        "content": "<p>i wonder if there’s a simpler solution for the developer than making them write a function that walks the data structure and maps the values to boxed values. if the app has a host-opaque type then you have to always box that on the app side somehow</p>",
        "id": 465056329,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1724632317
    },
    {
        "content": "<p>I think for most constructions the amount of nesting here will be pretty shallow. So the required boxing will be minimal and easy to do in the platform. No need to do it on the app side I think.</p>",
        "id": 465056720,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724632699
    },
    {
        "content": "<p>Like going from this app api:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nv\">init</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"p\">[],</span>\n<span class=\"w\">    </span><span class=\"nv\">handleRequest</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Request</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"kt\">Response</span><span class=\"w\"> </span><span class=\"p\">[],</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>To this platform host api:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nv\">init</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Box</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Box</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">[]),</span>\n<span class=\"w\">    </span><span class=\"nv\">handleRequest</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Box</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Box</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Request</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Box</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"kt\">Response</span><span class=\"w\"> </span><span class=\"p\">[])),</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>is not too bad.</p>",
        "id": 465056757,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724632773
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">hostExposed</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nv\">init</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Box</span><span class=\"nf\">.</span><span class=\"nv\">box</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">app</span><span class=\"nf\">.</span><span class=\"nv\">init</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"kt\">Box</span><span class=\"nf\">.</span><span class=\"nv\">box</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"nv\">handleRequest</span><span class=\"nf\">:</span>\n<span class=\"w\">        </span><span class=\"kt\">Box</span><span class=\"nf\">.</span><span class=\"nv\">box</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">boxedState</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">request</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"kt\">Box</span><span class=\"nf\">.</span><span class=\"nv\">unbox</span><span class=\"w\"> </span><span class=\"nv\">boxedState</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">app</span><span class=\"nf\">.</span><span class=\"nv\">handleRequest</span><span class=\"w\"> </span><span class=\"nv\">request</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Box</span><span class=\"nf\">.</span><span class=\"nv\">box</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 465056769,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724632798
    },
    {
        "content": "<p>So none of the boxing is exposed to the app author at all.</p>",
        "id": 465056993,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724633007
    },
    {
        "content": "<p>That said, for some complex tree based apis like an action state setup, probably would want to expose boxing to the application author. Otherwise, the entire data structure before being passed to the platform has to be walked with many pieces getting boxed.</p>",
        "id": 465057078,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724633077
    },
    {
        "content": "<p>so my reason for liking this proposed design - for now, at least - is that:</p>\n<ul>\n<li>no matter what we do in the future, all of this has to work at a minimum - e.g. there isn't a conceivable design where you <em>couldn't</em> send boxed functions to the host - so there's no wasted effort in getting it working in this way</li>\n<li>assuming my proposed algorithm is as straightforward to implement as it seems to be, it doesn't seem to be too much effort to get working</li>\n<li>it would unblock effect interpreters as well as letting us remove the <code>Model</code> concept (which would unblock other things)</li>\n<li>in the future, we can always relax the restrictions as nonbreaking changes</li>\n</ul>",
        "id": 465057325,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724633300
    },
    {
        "content": "<blockquote>\n<p>it would unblock effect interpreters</p>\n</blockquote>\n<p>That's awesome! Is this something that could be tested today?</p>",
        "id": 465057665,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724633528
    },
    {
        "content": "<p>Folkert and I tried to get it working, but ran into errors related to lambda sets - which Ayaz's proof-of-concept (which I believe Sam has either started implementing in the compiler or is planning to soon!) should solve</p>",
        "id": 465059384,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724634963
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/395097-compiler-development/topic/sending.20unsized.20values.20to.20the.20host/near/465059384\">said</a>:</p>\n<blockquote>\n<p>Folkert and I tried to get it working, but ran into errors related to lambda sets - which Ayaz's proof-of-concept (which I believe Sam has either started implementing in the compiler or is planning to soon!) should solve</p>\n</blockquote>\n<p>I'm still reading through our current impl and comparing to Ayaz's new proof of concept. I'll be making a big push over labor day weekend since I have no plans the whole weekend!</p>",
        "id": 465093143,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724653416
    },
    {
        "content": "<p>I am not sure, if I understand this new concept. <span class=\"user-mention\" data-user-id=\"489294\">@Agus Zubiaga</span> <a href=\"#narrow/stream/302903-platform-development/topic/Tasks.2FEffects.20with.20.60Model.60/near/467899424\">explained  here</a> that a <code>Model</code> would be a <code>type variable</code>. It would be possible to write something like <code>updateModel : model -&gt; Task model []</code>.</p>\n<p>Is this correct?</p>\n<p>How would this typecheck? For example if you have something like:</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>Model : U64\nupdateModel : model -&gt; Task model []\n</code></pre></div>\n<p>How would it be possible, that <code>updateModel \"foo\"</code> would throw a type error?</p>\n<p>My current problem is, that I want to do something like</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>Model: a\nupdateModel : Model-&gt; Task {} []\n</code></pre></div>\n<p>There is currently no syntax in roc to express that. Will that be possible with this change? (It does not matter for me, if I have to use a Box).</p>",
        "id": 467911730,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1725553009
    },
    {
        "content": "<p>To my understanding, the goal is to allow this in the platform api with the host:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">updateModel</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Box</span><span class=\"w\"> </span><span class=\"nv\">model</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Box</span><span class=\"w\"> </span><span class=\"nv\">model</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n</code></pre></div>\n<p>Both type variables and functions will be allowed to be passed to the host as along as they are boxed.</p>",
        "id": 467949428,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725561663
    },
    {
        "content": "<p>You then could expose something like this to the app:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">update</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">model</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"nv\">model</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n</code></pre></div>\n<p>Your platform <code>updateModel</code> function would just deal with all of the boxing.</p>",
        "id": 467949941,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725561766
    },
    {
        "content": "<p>Whatever the user picks for the model would just work in this case.</p>",
        "id": 467950009,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725561782
    },
    {
        "content": "<p>If you need multiple functions with the same <code>model</code> type variable, you would need to use a tuple or record to link the type variables together.</p>",
        "id": 467950141,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725561812
    },
    {
        "content": "<p>For example. You might expose this to the app:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">Funcs</span><span class=\"w\"> </span><span class=\"nv\">model</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nv\">init</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"nv\">model</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n<span class=\"w\">    </span><span class=\"nv\">update</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">model</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"nv\">model</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 467950376,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725561861
    },
    {
        "content": "<p>The paired host type with boxing would be:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">Funcs</span><span class=\"w\"> </span><span class=\"nv\">model</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nv\">init</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Box</span><span class=\"w\"> </span><span class=\"p\">({}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Box</span><span class=\"w\"> </span><span class=\"nv\">model</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">[])</span>\n<span class=\"w\">    </span><span class=\"nv\">update</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Box</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Box</span><span class=\"w\"> </span><span class=\"nv\">model</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Box</span><span class=\"w\"> </span><span class=\"nv\">model</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">[])</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>All the boxing avoids the host dealing with any unsized types.</p>",
        "id": 467950679,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725561921
    },
    {
        "content": "<p>Does that make sense <span class=\"user-mention\" data-user-id=\"496321\">@Oskar Hahn</span>?</p>",
        "id": 467950830,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725561953
    },
    {
        "content": "<p>Ahh. Thank you. That makes sens. I think I missed the part, that this is only possible in the platform. (Of cause it is)</p>\n<p>Is it correct, that with this change, Tasks can be defined anywhere in the platform, not only in the <code>hosted module</code>? So the <code>hosted modules</code> will not be needed anymore?</p>\n<p>And what do you think is the timeframe? More like builtin tasks (around halve a year) or more like effect interpreter (around two years).</p>",
        "id": 467961061,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1725564326
    },
    {
        "content": "<blockquote>\n<p>Tasks can be defined anywhere in the platform, not only in the <code>hosted module</code>?</p>\n</blockquote>\n<p>I think hosted will still be needed. I think removing it would be an orthogonal problem to this.</p>\n<blockquote>\n<p>And what do you think is the timeframe? More like builtin tasks (around halve a year) or more like effect interpreter (around two years).</p>\n</blockquote>\n<p>I would assume more like builtin task, but I'm really not sure.</p>",
        "id": 467984987,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725570671
    }
]