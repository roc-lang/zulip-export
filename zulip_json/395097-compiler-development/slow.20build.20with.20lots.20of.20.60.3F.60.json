[
    {
        "content": "<p>Continuing from <a class=\"message-link\" href=\"/#narrow/channel/395097-compiler-development/topic/casual.20conversation/near/522887294\">#compiler development &gt; casual conversation @ ðŸ’¬</a>  <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> </p>\n<p>long_15 is for <code>roc build</code> on this code:</p>\n<div class=\"codehilite\"><pre><span></span><code>app [main!] { cli: platform &quot;https://github.com/roc-lang/basic-cli/releases/download/0.19.0/Hj-J_zxz7V9YurCSTFcFdu6cQJie4guzsPMUi5kBYUk.tar.br&quot; }\n\nimport cli.Stdout\nimport cli.Arg exposing [Arg]\n\nmain! : List Arg =&gt; Result {} _\nmain! = |_args|\n    Stdout.line!(&quot;1&quot;)?\n    Stdout.line!(&quot;2&quot;)?\n    Stdout.line!(&quot;3&quot;)?\n    Stdout.line!(&quot;4&quot;)?\n    Stdout.line!(&quot;5&quot;)?\n    Stdout.line!(&quot;6&quot;)?\n    Stdout.line!(&quot;7&quot;)?\n    Stdout.line!(&quot;8&quot;)?\n    Stdout.line!(&quot;9&quot;)?\n    Stdout.line!(&quot;10&quot;)?\n    Stdout.line!(&quot;11&quot;)?\n    Stdout.line!(&quot;12&quot;)?\n    Stdout.line!(&quot;13&quot;)?\n    Stdout.line!(&quot;14&quot;)?\n    Stdout.line!(&quot;15&quot;)\n</code></pre></div>\n<p>20 is the same thing with 5 more <code>Stdout.line!</code> calls. The flamegraph for 15 looks normal but for 20 it looks off. It spends a lot of time in handle_mm_fault though so that may be what is going wrong.</p>\n<p><a href=\"/user_uploads/22008/udfXIsM1VF3pz94TyoXmrfNx/flamegraph_long_15.svg\">flamegraph_long_15.svg</a><br>\n<a href=\"/user_uploads/22008/vmc-DEtTV4MJyWdqVjnWRawa/flamegraph_long_20.svg\">flamegraph_long_20.svg</a></p>",
        "id": 523083520,
        "sender_full_name": "Anton",
        "timestamp": 1749472972
    },
    {
        "content": "<p>The potential call explosion does seem clear from the 15 flamegraph.</p>",
        "id": 523250638,
        "sender_full_name": "Anton",
        "timestamp": 1749548962
    },
    {
        "content": "<p>Based on the heaptrack data; deep recursion looks likely <br>\n<a href=\"/user_uploads/22008/c2cwK0XqjWngOet3CWwA5BhG/heaptrack_15vs20.png\">heaptrack_15vs20.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/c2cwK0XqjWngOet3CWwA5BhG/heaptrack_15vs20.png\" title=\"heaptrack_15vs20.png\"><img data-original-content-type=\"image/png\" data-original-dimensions=\"1184x466\" src=\"/user_uploads/thumbnail/22008/c2cwK0XqjWngOet3CWwA5BhG/heaptrack_15vs20.png/840x560.webp\"></a></div>",
        "id": 523255346,
        "sender_full_name": "Anton",
        "timestamp": 1749550515
    },
    {
        "content": "<p>I'll see if ftrace can give me some nice stats</p>",
        "id": 523255377,
        "sender_full_name": "Anton",
        "timestamp": 1749550527
    },
    {
        "content": "<p>uftrace tells a very different and more plausible story than the flamegraph:</p>\n<div class=\"codehilite\"><pre><span></span><code># uftrace diff\n#  [0] base: uftrace.data       (from uftrace record --filter roc_* ./target/debug/roc build temp_long_15.roc)\n#  [1] diff: uftrace20.data/    (from uftrace record --filter roc_* ./target/debug/roc build temp_long_20.roc)\n#\n    Total time     Self time         Calls   Function\n   ===========   ===========   ===========   ====================\n    +13.007  m     +0.084 us            +0   roc_build::program::build_file\n    +13.007  m     +0.497 us            +0   roc_cli::build\n    +13.007  m    +14.717 us            +0   roc::main\n    +13.007  m     +0.385 us            +0   roc_load::load\n    +13.007  m     +0.218 us            +0   roc_load::load_and_monomorphize\n    +13.007  m    +23.707 us            +0   roc_load_internal::file::load_single_threaded\n    +13.007  m     -1.656 us            +0   roc_load_internal::file::load\n    +13.007  m    +39.427 us            +0   roc_load_internal::file::state_thread_step\n    +13.007  m   +101.288 us            +0   roc_load_internal::file::update\n    +13.007  m     +2.436 us            +0   roc_mono::inc_dec::insert_inc_dec_operations\n    +13.007  m     +4.556 us            +0   roc_mono::inc_dec::insert_inc_dec_operations_proc\n    +13.007  m    +10.585  s      +4571136   roc_mono::inc_dec::insert_refcount_operations_stmt\n     +7.007  m     +2.716  s     +11681792   roc_mono::inc_dec::insert_refcount_operations_stmt::_{{closure}}\n     +5.042  m    +16.057  s     +65704457   core::hash::BuildHasher::hash_one\n     +5.015  m     +4.405  s     +67737523   core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash\n     +4.053  m   +190.553 ms      +2031656   _&lt;core::iter::adapters::rev::Rev&lt;I&gt;&gt;::fold\n     +4.053  m     +1.089  s      +2031656   core::iter::traits::double_ended::DoubleEndedIterator::rfold\n     +4.048  m    +10.363  s     +65700970   _&lt;roc_module::symbol::Symbol&gt;::hash\n     +4.027  m    +59.520  s     +135469517   _&lt;wyhash::traits::WyHash&gt;::write\n     +4.026  m     +8.766  s     +131405247   core::hash::Hasher::write_u32\n     +3.027  m     +9.369  s      +5079040   roc_mono::inc_dec::insert_refcount_operations_binding\n     +3.013  m     +4.815  s     +27426891   hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key\n     +2.048  m     +1.880  s     +11681792   roc_mono::inc_dec::SymbolRcTypes::get\n     +2.046  m     +3.340  s     +14222412   hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert\n     +2.046  m     +1.857  s     +23363644   std::collections::hash::set::HashSet&lt;T,S&gt;::contains\n     +2.022  m     +5.588  s     +65704262   core::hash::impls::_&lt;impl core::hash::Hash for u32&gt;::hash\n     +2.015  m     +5.469  s     +65700985   _&lt;core::num::nonzero::NonZero&lt;u32&gt;&gt;::hash\n     +2.010  m   +234.683 ms      +1524052   bumpalo::collections::vec::Vec&lt;T&gt;::from_iter_in\n     +2.009  m   +831.661 ms      +1524247   _&lt;bumpalo::collections::vec::Vec&lt;T&gt;&gt;::extend\n     +2.004  m     +1.001  m     +135469517   wyhash::functions::wyhash_core\n     +2.002  m   +714.215 ms      +9651156   std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert\n     +1.059  m   +337.363 ms      +2038914   _&lt;core::iter::adapters::map::Map&lt;I,F&gt;&gt;::next\n     +1.059  m     +8.820  s     +51200480   _&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::clone\n     +1.059  m   +117.193 ms      +1020568   core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once\n     +1.057  m   +393.806 ms      +5586944   roc_mono::inc_dec::RefcountEnvironment::add_symbol\n     +1.056  m   +607.791 ms      +5586944   roc_mono::inc_dec::RefcountEnvironment::add_symbol_with\n     +1.049  m     +8.621  s     +51200480   _&lt;hashbrown::raw::RawTable&lt;T,A&gt;&gt;::clone\n     +1.047  m   +102.891 ms      +1015828   bumpalo::collections::collect_in::CollectIn::collect_in\n     +1.047  m    +83.509 ms      +1015828   _&lt;bumpalo::collections::vec::Vec&lt;T&gt;&gt;::from_iter_in\n     +1.045  m   +547.355 ms      +5588649   core::iter::traits::iterator::Iterator::collect\n     +1.044  m     +1.318  s      +5586949   _&lt;std::collections::hash::set::HashSet&lt;T,S&gt;&gt;::from_iter\n     +1.043  m     +1.095  s      +7110656   roc_mono::inc_dec::RefcountEnvironment::get_symbol_rc_type\n     +1.043  m     +1.366  s      +5586949   _&lt;hashbrown::set::HashSet&lt;T,S,A&gt;&gt;::extend\n     +1.041  m     +1.801  s      +5586964   _&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::extend\n     +1.039  m   +590.532 ms      +6096312   _&lt;core::iter::adapters::map::Map&lt;I,F&gt;&gt;::fold\n     +1.036  m   +532.162 ms      +6603467   core::iter::traits::iterator::Iterator::for_each\n     +1.030  m     +2.694  s     +14222412   hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot\n     +1.024  m     +4.486  s     +54755838   _&lt;hashbrown::raw::RawTable&lt;T,A&gt;&gt;::drop\n     +1.022  m   +412.975 ms      +2539520   _&lt;roc_mono::inc_dec::RefcountEnvironment&gt;::clone\n     +1.022  m    +21.982  s     +44698317   hashbrown::raw::RawTable&lt;T,A&gt;::find\n     +1.022  m   +401.394 ms      +5079495   _&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::clone\n     +1.020  m   +705.180 ms      +9144322   std::collections::hash::map::HashMap&lt;K,V,S&gt;::get\n     +1.019  m     +6.564  s     +54755838   hashbrown::raw::RawTableInner::drop_inner_table\n     +1.019  m     +1.780  s      +9144437   hashbrown::map::HashMap&lt;K,V,S,A&gt;::get\n     +1.015  m     +1.023  s     +28901461   _&lt;hashbrown::raw::RawTable&lt;T,A&gt;&gt;::clone_from_spec\n     +1.014  m     +8.608  s      +2539575   hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl\n     +1.013  m    +25.222  s     +270939034   _&lt;core::slice::iter::Chunks&lt;T&gt;&gt;::next\n     +1.010  m   +438.165 ms      +5079040   roc_mono::inc_dec::RefcountEnvironment::consume_rc_symbol\n     +1.010  m     +2.412  s     +36570443   hashbrown::raw::RawTable&lt;T,A&gt;::get\n     +1.008  m   +443.216 ms      +4063252   _&lt;core::iter::adapters::filter::Filter&lt;I,P&gt;&gt;::fold\n     +1.005  m   +943.156 ms      +3047424   roc_mono::inc_dec::RefcountEnvironment::borrowed_usages\n     +1.004  m   +475.935 ms      +2539520   core::ptr::drop_in_place&lt;roc_mono::inc_dec::RefcountEnvironment&gt;\n     +1.003  m   +374.460 ms      +2031616   roc_mono::inc_dec::RefcountEnvironment::consume_symbol\n     +1.002  m     +1.004  s     +21333133   hashbrown::raw::RawTable&lt;T,A&gt;::reserve\n     +1.001  m   +467.025 ms      +3555368   core::iter::adapters::filter::filter_fold::_{{closure}}\n     +1.001  m     +5.078  s      +8175857   hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash\n     +1.000  m   +268.364 ms      +2539520   core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;roc_mono::ir::JoinPointId,std::collections::hash::set::HashSet&lt;roc_module::symbol::Symbol,core::hash::BuildHasherDefault&lt;wyhash::traits::WyHash&gt;&gt;,core::hash::BuildHasherDefault&lt;wyhash::traits::WyHash&gt;&gt;&gt;\n     +1.000  m   +234.728 ms      +2539520   core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;roc_mono::ir::JoinPointId,std::collections::hash::set::HashSet&lt;roc_module::symbol::Symbol,core::hash::BuildHasherDefault&lt;wyhash::traits::WyHash&gt;&gt;,core::hash::BuildHasherDefault&lt;wyhash::traits::WyHash&gt;&gt;&gt;\n</code></pre></div>",
        "id": 523320081,
        "sender_full_name": "Anton",
        "timestamp": 1749569845
    },
    {
        "content": "<p>I'm going to see if I can reproduce this with a simple platform, basic-cli may cause a bunch of distractions when debugging.</p>",
        "id": 523320463,
        "sender_full_name": "Anton",
        "timestamp": 1749569966
    },
    {
        "content": "<p>Reproduction with simple platform <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span><br>\nThe list argument is key, even though it is unused! It does not happen with <code>myargs = 5</code> or <code>{}</code>, but it does also happen with <code>\"\"</code>.</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">app</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">main</span><span class=\"o\">!</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">pf</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">platform</span><span class=\"w\"> </span><span class=\"s\">\"../test-platform-effects-zig/main.roc\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"nx\">import</span><span class=\"w\"> </span><span class=\"nx\">pf</span><span class=\"p\">.</span><span class=\"nx\">Effect</span>\n\n<span class=\"nx\">main</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"nx\">main</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"p\">{}</span><span class=\"o\">|</span>\n<span class=\"w\">    </span><span class=\"nv\">myargs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n<span class=\"w\">    </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">wrapper</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"nx\">myargs</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">is</span>\n<span class=\"w\">        </span><span class=\"nx\">Ok</span><span class=\"nf\">(he) -&gt;</span><span class=\"w\"> </span><span class=\"nx\">Effect</span><span class=\"p\">.</span><span class=\"nx\">put_line</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"nx\">Inspect</span><span class=\"p\">.</span><span class=\"nx\">to_str</span><span class=\"p\">(</span><span class=\"nx\">he</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"nx\">Err</span><span class=\"nf\">(e) -&gt;</span><span class=\"w\"> </span><span class=\"nx\">Effect</span><span class=\"p\">.</span><span class=\"nx\">put_line</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"nx\">Inspect</span><span class=\"p\">.</span><span class=\"nx\">to_str</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">))</span>\n\n<span class=\"nx\">wrapper</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"nx\">_args</span><span class=\"o\">|</span>\n<span class=\"w\">    </span><span class=\"nx\">Effect</span><span class=\"p\">.</span><span class=\"nx\">foo_line</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"1\"</span><span class=\"p\">)</span><span class=\"o\">?</span>\n<span class=\"w\">    </span><span class=\"nx\">Effect</span><span class=\"p\">.</span><span class=\"nx\">foo_line</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"2\"</span><span class=\"p\">)</span><span class=\"o\">?</span>\n<span class=\"w\">    </span><span class=\"nx\">Effect</span><span class=\"p\">.</span><span class=\"nx\">foo_line</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"3\"</span><span class=\"p\">)</span><span class=\"o\">?</span>\n<span class=\"w\">    </span><span class=\"nx\">Effect</span><span class=\"p\">.</span><span class=\"nx\">foo_line</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"4\"</span><span class=\"p\">)</span><span class=\"o\">?</span>\n<span class=\"w\">    </span><span class=\"nx\">Effect</span><span class=\"p\">.</span><span class=\"nx\">foo_line</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"5\"</span><span class=\"p\">)</span><span class=\"o\">?</span>\n<span class=\"w\">    </span><span class=\"nx\">Effect</span><span class=\"p\">.</span><span class=\"nx\">foo_line</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"6\"</span><span class=\"p\">)</span><span class=\"o\">?</span>\n<span class=\"w\">    </span><span class=\"nx\">Effect</span><span class=\"p\">.</span><span class=\"nx\">foo_line</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"7\"</span><span class=\"p\">)</span><span class=\"o\">?</span>\n<span class=\"w\">    </span><span class=\"nx\">Effect</span><span class=\"p\">.</span><span class=\"nx\">foo_line</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"8\"</span><span class=\"p\">)</span><span class=\"o\">?</span>\n<span class=\"w\">    </span><span class=\"nx\">Effect</span><span class=\"p\">.</span><span class=\"nx\">foo_line</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"9\"</span><span class=\"p\">)</span><span class=\"o\">?</span>\n<span class=\"w\">    </span><span class=\"nx\">Effect</span><span class=\"p\">.</span><span class=\"nx\">foo_line</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"10\"</span><span class=\"p\">)</span><span class=\"o\">?</span>\n<span class=\"w\">    </span><span class=\"nx\">Effect</span><span class=\"p\">.</span><span class=\"nx\">foo_line</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"11\"</span><span class=\"p\">)</span><span class=\"o\">?</span>\n<span class=\"w\">    </span><span class=\"nx\">Effect</span><span class=\"p\">.</span><span class=\"nx\">foo_line</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"12\"</span><span class=\"p\">)</span><span class=\"o\">?</span>\n<span class=\"w\">    </span><span class=\"nx\">Effect</span><span class=\"p\">.</span><span class=\"nx\">foo_line</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"13\"</span><span class=\"p\">)</span><span class=\"o\">?</span>\n<span class=\"w\">    </span><span class=\"nx\">Effect</span><span class=\"p\">.</span><span class=\"nx\">foo_line</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"14\"</span><span class=\"p\">)</span><span class=\"o\">?</span>\n<span class=\"w\">    </span><span class=\"nx\">Effect</span><span class=\"p\">.</span><span class=\"nx\">foo_line</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"15\"</span><span class=\"p\">)</span><span class=\"o\">?</span>\n<span class=\"w\">    </span><span class=\"nx\">Effect</span><span class=\"p\">.</span><span class=\"nx\">foo_line</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"16\"</span><span class=\"p\">)</span><span class=\"o\">?</span>\n<span class=\"w\">    </span><span class=\"nx\">Effect</span><span class=\"p\">.</span><span class=\"nx\">foo_line</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"17\"</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 523342958,
        "sender_full_name": "Anton",
        "timestamp": 1749577950
    },
    {
        "content": "<p>Using <code>myargs = []</code> instead of <code>myargs = 0</code> leads to 73628 more calls of <code>roc_mono::inc_dec::insert_refcount_operations_stmt</code></p>",
        "id": 523346727,
        "sender_full_name": "Anton",
        "timestamp": 1749579354
    },
    {
        "content": "<p>Wow....crazy <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 523348672,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749580099
    },
    {
        "content": "<p>I wonder what we are scanning over that explodes like that</p>",
        "id": 523350593,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749580837
    },
    {
        "content": "<p>Or recursiving over</p>",
        "id": 523350671,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749580857
    },
    {
        "content": "<p>is this still doing the closure thing?</p>",
        "id": 523387917,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1749598690
    },
    {
        "content": "<p>where Effect is a continuation monad</p>",
        "id": 523387933,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1749598696
    },
    {
        "content": "<p>if so, that's probably why</p>",
        "id": 523387942,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1749598701
    },
    {
        "content": "<p>Ah yeah, I thought it didn't have closures, but probably has repeat calls to <code>Result.try</code></p>",
        "id": 523393503,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749602761
    },
    {
        "content": "<p>Otherwise, it is a gigantic nested when is</p>",
        "id": 523393516,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749602777
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"454654\">Ayaz Hafiz</span> <a href=\"#narrow/channel/395097-compiler-development/topic/slow.20build.20with.20lots.20of.20.60.3F.60/near/523387917\">said</a>:</p>\n<blockquote>\n<p>is this still doing the closure thing?</p>\n</blockquote>\n<p>Yeah it's using closures, but do you know why that would result in a massive difference depending on the type of myargs?</p>",
        "id": 523620277,
        "sender_full_name": "Anton",
        "timestamp": 1749667885
    },
    {
        "content": "<p>Lists are refcount</p>",
        "id": 523620625,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749668034
    },
    {
        "content": "<p>Ints and records are not</p>",
        "id": 523620661,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749668046
    },
    {
        "content": "<p>And all values are being nestedly captured for each closure</p>",
        "id": 523620704,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749668061
    },
    {
        "content": "<p>Still really should not explode like that....feels exponential...probably a bad algorithm.</p>",
        "id": 523620776,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749668093
    },
    {
        "content": "<p>Thanks Brendan :)<br>\nOn a further simplified example I did find it was repeating the same lengthy \"recursive walk\" multiple times so memoization is possible</p>",
        "id": 523620798,
        "sender_full_name": "Anton",
        "timestamp": 1749668105
    },
    {
        "content": "<p>Ah, makes sense</p>",
        "id": 523620861,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749668132
    },
    {
        "content": "<p>I know how I want to solve this, I'm currently entangled in a web of algorithmic and lifetime complexity <span aria-label=\"web\" class=\"emoji emoji-1f578\" role=\"img\" title=\"web\">:web:</span> <span aria-label=\"smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 523994978,
        "sender_full_name": "Anton",
        "timestamp": 1749839096
    },
    {
        "content": "<p>The optimizations I tried where either not significant or resulted in wrong reference counts when running all tests. Let's make sure to write unit tests for complicated functions in the new compiler :p <br>\nI'm going to give it one more day to see if I can skip work for unused variables.</p>",
        "id": 524079400,
        "sender_full_name": "Anton",
        "timestamp": 1749924164
    },
    {
        "content": "<p>Did you try changing the desugaring to use when is instead of result.try (assuming it is currently using result.try)?</p>",
        "id": 524080992,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749925975
    },
    {
        "content": "<p>No, not yet, that's a good idea. I'll explore that for a bit.</p>",
        "id": 524239612,
        "sender_full_name": "Anton",
        "timestamp": 1750075110
    },
    {
        "content": "<p>Turns out they are actually using when. It goes: TrySuffix &gt; LowLevelTry &gt; Try &gt;  <a href=\"https://github.com/roc-lang/roc/blob/bba2103882a8124f3887da6adaaa44cf2b728c3e/crates/compiler/mono/src/ir.rs#L5934\">When</a>.  Earlier I was looking at the IR after specialization and it wasn't clear to me that the problematic IR came from when expressions.</p>",
        "id": 524245024,
        "sender_full_name": "Anton",
        "timestamp": 1750076831
    },
    {
        "content": "<p>I like the overview we get of the output all phases with the snapshots in the new compiler, it requires substantial effort to get that output for some phases from the old compiler.</p>",
        "id": 524250071,
        "sender_full_name": "Anton",
        "timestamp": 1750078385
    },
    {
        "content": "<p>Interesting.... So this isn't from nested closures</p>",
        "id": 524280044,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1750087243
    },
    {
        "content": "<p>it's due to nested joins:</p>\n<div class=\"codehilite\"><pre><span></span><code>procedure : `#UserApp.wrapper!` [C {}, C {}]\nprocedure = `#UserApp.wrapper!` (`#UserApp.7`: List []):\n    joinpoint `#UserApp.70` `#UserApp.66`:\n        joinpoint `#UserApp.58` `#UserApp.54`:\n            joinpoint `#UserApp.46` `#UserApp.42`:\n                joinpoint `#UserApp.34` `#UserApp.30`:\n                    joinpoint `#UserApp.22` `#UserApp.18`:\n                        let `#UserApp.17` : Str = &quot;6&quot;;\n                        let `#UserApp.16` : [C {}, C {}] = CallByName `pf.Effect.foo_line!` `#UserApp.17`;\n                        ret `#UserApp.16`;\n                    in\n                    let `#UserApp.29` : Str = &quot;5&quot;;\n                    let `#UserApp.21` : [C {}, C {}] = CallByName `pf.Effect.foo_line!` `#UserApp.29`;\n                    let `#UserApp.26` : U8 = 1i64;\n                    let `#UserApp.27` : U8 = GetTagId `#UserApp.21`;\n                    let `#UserApp.28` : Int1 = lowlevel Eq `#UserApp.26` `#UserApp.27`;\n                    if `#UserApp.28` then\n                        let `#UserApp.19` : {} = UnionAtIndex (Id 1) (Index 0) `#UserApp.21`;\n                        jump `#UserApp.22` `#UserApp.19`;\n                    else\n                        let `#UserApp.20` : {} = UnionAtIndex (Id 0) (Index 0) `#UserApp.21`;\n                        let `#UserApp.25` : [C {}, C {}] = TagId(0) `#UserApp.20`;\n                        ret `#UserApp.25`;\n                in\n                let `#UserApp.41` : Str = &quot;4&quot;;\n                let `#UserApp.33` : [C {}, C {}] = CallByName `pf.Effect.foo_line!` `#UserApp.41`;\n                let `#UserApp.38` : U8 = 1i64;\n                let `#UserApp.39` : U8 = GetTagId `#UserApp.33`;\n                let `#UserApp.40` : Int1 = lowlevel Eq `#UserApp.38` `#UserApp.39`;\n                if `#UserApp.40` then\n                    let `#UserApp.31` : {} = UnionAtIndex (Id 1) (Index 0) `#UserApp.33`;\n                    jump `#UserApp.34` `#UserApp.31`;\n                else\n                    let `#UserApp.32` : {} = UnionAtIndex (Id 0) (Index 0) `#UserApp.33`;\n                    let `#UserApp.37` : [C {}, C {}] = TagId(0) `#UserApp.32`;\n                    ret `#UserApp.37`;\n            in\n            let `#UserApp.53` : Str = &quot;3&quot;;\n            let `#UserApp.45` : [C {}, C {}] = CallByName `pf.Effect.foo_line!` `#UserApp.53`;\n            let `#UserApp.50` : U8 = 1i64;\n            let `#UserApp.51` : U8 = GetTagId `#UserApp.45`;\n            let `#UserApp.52` : Int1 = lowlevel Eq `#UserApp.50` `#UserApp.51`;\n            if `#UserApp.52` then\n                let `#UserApp.43` : {} = UnionAtIndex (Id 1) (Index 0) `#UserApp.45`;\n                jump `#UserApp.46` `#UserApp.43`;\n            else\n                let `#UserApp.44` : {} = UnionAtIndex (Id 0) (Index 0) `#UserApp.45`;\n                let `#UserApp.49` : [C {}, C {}] = TagId(0) `#UserApp.44`;\n                ret `#UserApp.49`;\n        in\n        let `#UserApp.65` : Str = &quot;2&quot;;\n        let `#UserApp.57` : [C {}, C {}] = CallByName `pf.Effect.foo_line!` `#UserApp.65`;\n        let `#UserApp.62` : U8 = 1i64;\n        let `#UserApp.63` : U8 = GetTagId `#UserApp.57`;\n        let `#UserApp.64` : Int1 = lowlevel Eq `#UserApp.62` `#UserApp.63`;\n        if `#UserApp.64` then\n            let `#UserApp.55` : {} = UnionAtIndex (Id 1) (Index 0) `#UserApp.57`;\n            jump `#UserApp.58` `#UserApp.55`;\n        else\n            let `#UserApp.56` : {} = UnionAtIndex (Id 0) (Index 0) `#UserApp.57`;\n            let `#UserApp.61` : [C {}, C {}] = TagId(0) `#UserApp.56`;\n            ret `#UserApp.61`;\n    in\n    let `#UserApp.77` : Str = &quot;1&quot;;\n    let `#UserApp.69` : [C {}, C {}] = CallByName `pf.Effect.foo_line!` `#UserApp.77`;\n    let `#UserApp.74` : U8 = 1i64;\n    let `#UserApp.75` : U8 = GetTagId `#UserApp.69`;\n    let `#UserApp.76` : Int1 = lowlevel Eq `#UserApp.74` `#UserApp.75`;\n    if `#UserApp.76` then\n        let `#UserApp.67` : {} = UnionAtIndex (Id 1) (Index 0) `#UserApp.69`;\n        jump `#UserApp.70` `#UserApp.67`;\n    else\n        let `#UserApp.68` : {} = UnionAtIndex (Id 0) (Index 0) `#UserApp.69`;\n        let `#UserApp.73` : [C {}, C {}] = TagId(0) `#UserApp.68`;\n        ret `#UserApp.73`;\n</code></pre></div>",
        "id": 524284149,
        "sender_full_name": "Anton",
        "timestamp": 1750088626
    },
    {
        "content": "<p>It's <a href=\"https://github.com/roc-lang/roc/blob/bba2103882a8124f3887da6adaaa44cf2b728c3e/crates/compiler/mono/src/inc_dec.rs#L745\">this loop</a> specifically.</p>",
        "id": 524288536,
        "sender_full_name": "Anton",
        "timestamp": 1750089971
    },
    {
        "content": "<p>Alright, I was able to hack together a fix for my specific problematic file as proof of concept :)<br>\nI should be able to turn this proof of concept into a proper fix <span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span></p>",
        "id": 524505413,
        "sender_full_name": "Anton",
        "timestamp": 1750184075
    },
    {
        "content": "<p>Congrats <span class=\"user-mention\" data-user-id=\"361169\">@Anton</span>  <span aria-label=\"sparkler\" class=\"emoji emoji-1f387\" role=\"img\" title=\"sparkler\">:sparkler:</span></p>",
        "id": 524622662,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1750214886
    },
    {
        "content": "<p>what was the issue?</p>",
        "id": 524628653,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1750220972
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/blob/bba2103882a8124f3887da6adaaa44cf2b728c3e/crates/compiler/mono/src/inc_dec.rs#L745\">This loop</a> does expensive fixed point iteration even when all variables that could potentially be reference counted are unused.</p>",
        "id": 524662730,
        "sender_full_name": "Anton",
        "timestamp": 1750238171
    },
    {
        "content": "<p>I made a tool so that I can understand how the recursion iterates over the code :)<br>\n<a href=\"/user_uploads/22008/3vc_tjOomXLKLunXgomT3Gv4/debug_tool.mp4\">debug_tool.mp4</a></p>\n<div class=\"message_inline_image message_inline_video\"><a href=\"/user_uploads/22008/3vc_tjOomXLKLunXgomT3Gv4/debug_tool.mp4\" title=\"debug_tool.mp4\"><video preload=\"metadata\" src=\"/user_uploads/22008/3vc_tjOomXLKLunXgomT3Gv4/debug_tool.mp4\"></video></a></div>",
        "id": 524734118,
        "sender_full_name": "Anton",
        "timestamp": 1750260678
    },
    {
        "content": "<p>This is awesome.  I want to know how you built it!</p>",
        "id": 524757705,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750269550
    },
    {
        "content": "<p>Here is the source code <a href=\"/user_uploads/22008/pxTNiaX7f71iTzrpVmseT2Lq/index.html\">index.html</a></p>",
        "id": 525003928,
        "sender_full_name": "Anton",
        "timestamp": 1750410145
    },
    {
        "content": "<p>I used the regular Claude web interface to start, for js you can have a live preview on the side so that is very useful. This was my initial back and forth with claude: <a href=\"https://claude.ai/share/7ff2aacf-b7a5-40ad-839c-46b0e70b1882\">https://claude.ai/share/7ff2aacf-b7a5-40ad-839c-46b0e70b1882</a></p>",
        "id": 525004483,
        "sender_full_name": "Anton",
        "timestamp": 1750410360
    },
    {
        "content": "<p>Claude servers were overloaded so then I switched to the latest gemini pro 2.5 (free on <a href=\"https://aistudio.google.com\">https://aistudio.google.com</a>). I don't think it has the same live js preview, so I had to a bunch of manual copy, paste and run. In between I did some good old fashion human brain debugging and that's it :)</p>",
        "id": 525004961,
        "sender_full_name": "Anton",
        "timestamp": 1750410552
    },
    {
        "content": "<p>From several past experiments, I've found vanilla js to improve things a lot. Models can have a difficult time fixing React errors, but they often default to React if you don't specify what to use.</p>",
        "id": 525005547,
        "sender_full_name": "Anton",
        "timestamp": 1750410818
    },
    {
        "content": "<p>I've had good experiences using Elm. Though I haven't built anything substantial with it, mostly just smaller demo things.</p>",
        "id": 525005753,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1750410903
    },
    {
        "content": "<p>Good to know, I should give roc htmx a try as well :)</p>",
        "id": 525006186,
        "sender_full_name": "Anton",
        "timestamp": 1750411072
    },
    {
        "content": "<p>status update: I'm trying to achieve a more ambitious improvement then earlier, doing less work for unused variables is pretty easy. I'm now also trying to prevent work for vars after their last use. There is a way to this with a lot of reasonably simple code changes but I'm trying to see if I can make it work with a lot less code changes.</p>\n<p>This nested joinpoint case is very common in current Roc and blows up 2^n so it's worth spending some time on in my opinion.</p>\n<p>I believe we still plan on doing perceus refcounting in the new compiler <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span>?</p>",
        "id": 525387761,
        "sender_full_name": "Anton",
        "timestamp": 1750703311
    },
    {
        "content": "<p>for sure!</p>",
        "id": 525401247,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1750709486
    },
    {
        "content": "<p>It is done <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"fireworks\" class=\"emoji emoji-1f386\" role=\"img\" title=\"fireworks\">:fireworks:</span> <span aria-label=\"partying face\" class=\"emoji emoji-1f973\" role=\"img\" title=\"partying face\">:partying_face:</span> <a href=\"https://github.com/roc-lang/roc/pull/7884\">PR#7884</a><br>\n<a href=\"/user_uploads/22008/GOlwsin29VBQSV8x06zSSlie/fix_comparison_plot.png\">fix_comparison_plot.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/GOlwsin29VBQSV8x06zSSlie/fix_comparison_plot.png\" title=\"fix_comparison_plot.png\"><img data-original-content-type=\"image/png\" data-original-dimensions=\"775x512\" src=\"/user_uploads/thumbnail/22008/GOlwsin29VBQSV8x06zSSlie/fix_comparison_plot.png/840x560.webp\"></a></div>",
        "id": 526120196,
        "sender_full_name": "Anton",
        "timestamp": 1751042550
    },
    {
        "content": "<p>wooooooooow, amazing <span class=\"user-mention\" data-user-id=\"361169\">@Anton</span>!!!</p>",
        "id": 526123818,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751043933
    },
    {
        "content": "<p>great job <span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> '</p>",
        "id": 526132034,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751047598
    },
    {
        "content": "<p>Wait....but I thought the goal of all graphs was to go up and to the right.....</p>",
        "id": 526183234,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751092921
    },
    {
        "content": "<p><span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span> Congrats on fixing this <span class=\"user-mention\" data-user-id=\"361169\">@Anton</span></p>",
        "id": 526183259,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751092942
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/395097-compiler-development/topic/slow.20build.20with.20lots.20of.20.60.3F.60/near/526183234\">said</a>:</p>\n<blockquote>\n<p>Wait....but I thought the goal of all graphs was to go up and to the right.....</p>\n</blockquote>\n<p>I should have plotted the speedup % :p</p>",
        "id": 526191164,
        "sender_full_name": "Anton",
        "timestamp": 1751101948
    }
]