[
    {
        "content": "<p>I'm trying to fix a bug in module params where the lambda sets are empty for functions passed through params. </p>\n<p>I know the function types are being unified because I get accurate type errors if they don't match, and I can even see the lambda sets being unioned properly by adding some logging in <code>solve</code>. However, when <code>mono</code> is computing the layout, the set comes up empty from the perspective of the imported module. So I must be missing something between <code>solve</code> and <code>mono</code>.</p>\n<p>How do unioned lambda sets \"propagate\" from the importer module subs to the importee's? I know we copy exposed types from the modules we import, but this is the opposite, right? The module passing the function (and adding it to the lambda set) is the one that imports, and I guess at some point we must union all of them?</p>",
        "id": 459739129,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1723314320
    },
    {
        "content": "<p>they don't propagate that way</p>",
        "id": 459822261,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1723352495
    },
    {
        "content": "<p>there is no cross-module sharing of types</p>",
        "id": 459822294,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1723352504
    },
    {
        "content": "<p>are you instantiating the imported module with the correct types/values from the importee when you try to compile it?</p>",
        "id": 459822577,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1723352586
    },
    {
        "content": "<p>if you can share a concrete example of where things are breaking down it might help</p>",
        "id": 459822684,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1723352614
    },
    {
        "content": "<p>Sure. Here's a silly but simple example:</p>\n<div class=\"codehilite\" data-code-language=\"F#\"><pre><span></span><code><span class=\"k\">module</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">addAndDouble</span><span class=\"o\">]</span>\n\n<span class=\"n\">addAndDouble</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">I64</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">I64</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">I64</span>\n<span class=\"n\">addAndDouble</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span>\n</code></pre></div>\n<p>and an app that uses it:</p>\n<div class=\"codehilite\" data-code-language=\"F#\"><pre><span></span><code><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">main</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">pf</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">platform</span><span class=\"w\"> </span><span class=\"s\">\"./platform/main.roc\"</span><span class=\"w\"> </span><span class=\"o\">}</span>\n\n<span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">TestParam</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\">  </span><span class=\"o\">}</span>\n\n<span class=\"n\">main</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"nn\">Num</span><span class=\"p\">.</span><span class=\"n\">toStr</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"nn\">TestParam</span><span class=\"p\">.</span><span class=\"n\">addAndDouble</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This typechecks and if I change <code>add</code> in the app to something that wouldn't compile, I get type errors:</p>\n<div class=\"codehilite\"><pre><span></span><code>Something is off with the params provided by this import:\n\n3â”‚  import TestParam { add: \\a, b -&gt; &quot;$(a) + $(b)&quot;  }\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis is the type I inferred:\n\n    { add : Str, Str -&gt; Str }\n\nHowever, TestParam expects:\n\n    { add : I64, I64 -&gt; Int Signed64 }\n</code></pre></div>\n<p>In my branch, <code>mono</code> extends the procs in the module with params with one more argument for the params record, and that seems to work properly for simple values. </p>\n<p>However, when I pass a function, the layout for <code>add</code> (in <code>TestParam</code>) has an empty lambda set:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Function</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"p\">[</span>\n<span class=\"w\">        </span><span class=\"n\">InLayout</span><span class=\"p\">(</span><span class=\"n\">I64</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">InLayout</span><span class=\"p\">(</span><span class=\"n\">I64</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">],</span>\n<span class=\"w\">    </span><span class=\"n\">LambdaSet</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">set</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[],</span><span class=\"w\">  </span><span class=\"c1\">// &lt;----</span>\n<span class=\"w\">        </span><span class=\"n\">args</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">            </span><span class=\"n\">InLayout</span><span class=\"p\">(</span><span class=\"n\">I64</span><span class=\"p\">),</span>\n<span class=\"w\">            </span><span class=\"n\">InLayout</span><span class=\"p\">(</span><span class=\"n\">I64</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"p\">],</span>\n<span class=\"w\">        </span><span class=\"n\">ret</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">InLayout</span><span class=\"p\">(</span><span class=\"n\">I64</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">representation</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">InLayout</span><span class=\"p\">(</span><span class=\"n\">VOID</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">full_layout</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">InLayout</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"mi\">31</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"n\">InLayout</span><span class=\"p\">(</span><span class=\"n\">I64</span><span class=\"p\">),</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p>By adding some logging in <code>unify</code> (for <code>#UserApp</code>), I can see that <code>add</code> lambda sets are unioned properly:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">[</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">unify</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">unify</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">1888</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">first</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">80</span><span class=\"p\">,</span><span class=\"w\">   </span><span class=\"c1\">// &lt;--- #UserApp's version of add</span>\n<span class=\"w\">    </span><span class=\"n\">first_desc</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">LambdaSet</span><span class=\"p\">(</span><span class=\"n\">LambdaSet</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">solved</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">UnionLabels</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">labels_start</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">225</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">values_start</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">235</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_marker</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">PhantomData</span><span class=\"o\">&lt;</span><span class=\"n\">roc_module</span><span class=\"p\">::</span><span class=\"n\">symbol</span><span class=\"p\">::</span><span class=\"n\">Symbol</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">recursion_var</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">unspecialized</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">SubsSlice</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">ambient_function</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">2901</span><span class=\"w\"> </span><span class=\"p\">}),</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">none</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">second</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">2882</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// &lt;--- TestParam's add typ</span>\n<span class=\"w\">    </span><span class=\"n\">second_desc</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">LambdaSet</span><span class=\"p\">(</span><span class=\"n\">LambdaSet</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">solved</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">UnionLabels</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">labels_start</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">223</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">values_start</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">232</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_marker</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">PhantomData</span><span class=\"o\">&lt;</span><span class=\"n\">roc_module</span><span class=\"p\">::</span><span class=\"n\">symbol</span><span class=\"p\">::</span><span class=\"n\">Symbol</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">recursion_var</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">unspecialized</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">SubsSlice</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">149</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">ambient_function</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">2877</span><span class=\"w\"> </span><span class=\"p\">}),</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Mark</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">mode</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">EQ</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n<span class=\"p\">[</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">unify</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">unify</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">1888</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">new_lambda_set</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">LambdaSet</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"n\">LambdaSet</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">solved</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">UnionLabels</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">length</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\">  </span><span class=\"c1\">// &lt;-----</span>\n<span class=\"w\">            </span><span class=\"n\">labels_start</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">226</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">values_start</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">236</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">_marker</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">PhantomData</span><span class=\"o\">&lt;</span><span class=\"n\">roc_module</span><span class=\"p\">::</span><span class=\"n\">symbol</span><span class=\"p\">::</span><span class=\"n\">Symbol</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"n\">recursion_var</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">unspecialized</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">SubsSlice</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"n\">ambient_function</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">2901</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p>However, this is on <code>#UserApp</code>'s side. From my limited understanding, I thought that the problem was that this unioned lambda set never makes it to <code>TestParam</code>'s side, but I guess you're saying this is not how it works?</p>\n<p><span class=\"user-mention silent\" data-user-id=\"454654\">Ayaz Hafiz</span> <a href=\"#narrow/stream/395097-compiler-development/topic/Lambda.20set.20.22propagation.22/near/459822294\">said</a>:</p>\n<blockquote>\n<p>there is no cross-module sharing of types</p>\n</blockquote>",
        "id": 459883092,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1723376363
    },
    {
        "content": "<p>I don't understand what's the mechanism by which the importer lambdas make to the importee's lambda set. If I pass <code>{ add }</code> to <code>Test.addAndDouble</code> as an explicit arg (instead of params), I can see that the lambda set in its layout is indeed not empty. How does that work?</p>",
        "id": 459883957,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1723377201
    },
    {
        "content": "<p>My guess was that there must be somewhere in <code>load</code> where these are copied from the solve output of <code>#UserApp</code> to eventually make it to the <code>mono</code> <code>Env</code> of <code>Test</code>, but I might be thinking about it wrong</p>",
        "id": 459884539,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1723377780
    },
    {
        "content": "<blockquote>\n<p>I don't understand what's the mechanism by which the importer lambdas make to the importee's lambda set. If I passÂ <code>{ add }</code>Â toÂ <code>Test.addAndDouble</code>Â as an explicit arg (instead of params), I can see that the lambda set in its layout is indeed not empty. How does that work?</p>\n</blockquote>\n<p>To your first sentence, i think no such mechanism currently exists. As to the second question, that works because when we specialize the app module, we insert a request to specialize <code>TestParam.addAndDouble</code> with the add function (this is in a variable called <code>needed_specializations</code> I believe). The <code>TestParam</code> module is later specialized, and this function is seen as needing specialization</p>",
        "id": 459949264,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1723414502
    },
    {
        "content": "<p>The way I would think about it is, in an example like</p>\n<div class=\"codehilite\"><pre><span></span><code># B.roc\naddAndDouble : (I64 -&gt; I64), I64, I64 -&gt; I64\naddAndDouble = \\f, a, b -&gt;\n    2 * add a b\n\n# App.roc\nadd = \\a, b -&gt; a + b\nmain = B.addAndDouble add 2 3\n</code></pre></div>\n<p><code>addAndDouble</code> is actually generic over the exact function <code>f</code> it takes in. Let's call that function <code>_a</code>, then the type of <code>addAndDouble</code> is really <code>forall _a. (I64 -[_a]-&gt; I64), I64, I64 -&gt; I64</code></p>",
        "id": 459949398,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1723414661
    },
    {
        "content": "<p>when we see <code>B.addAndDouble add 2 3</code> in App.roc we know okay we actually need a specialization of <code>B.addAndDouble</code> with type <code>(I64 -[App.add]-&gt; I64), I64, I64 -&gt; I64</code>. That requirement gets added to needed_specializations. Whenever B.roc is compiled, we pull out the required specialization of <code>B.addAndDouble</code> and compile it</p>",
        "id": 459949497,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1723414756
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/blob/9fc6dccb9f67f265dc0f162a32fb95c1717f4075/crates/compiler/mono/src/ir.rs#L8504-L8521\">https://github.com/roc-lang/roc/blob/9fc6dccb9f67f265dc0f162a32fb95c1717f4075/crates/compiler/mono/src/ir.rs#L8504-L8521</a></p>",
        "id": 459949578,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1723414818
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/blob/9fc6dccb9f67f265dc0f162a32fb95c1717f4075/crates/compiler/mono/src/ir.rs#L3059-L3062\">https://github.com/roc-lang/roc/blob/9fc6dccb9f67f265dc0f162a32fb95c1717f4075/crates/compiler/mono/src/ir.rs#L3059-L3062</a></p>",
        "id": 459949602,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1723414856
    },
    {
        "content": "<p>With module params you're taking a step up from the function, and I think it must now be the case that a mechanism is needed to instantiate the module as a whole with the values passed to it</p>",
        "id": 459949852,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1723414964
    },
    {
        "content": "<p>Oh, I see</p>",
        "id": 459949868,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1723414976
    },
    {
        "content": "<p>Thatâ€™s very clarifying</p>",
        "id": 459949960,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1723415003
    },
    {
        "content": "<p>It might be easier to lower module params to be an extra parameter on functions or something before doing the rest of the compilation pipeline. That might eliminate the need for any changes in later stages entirely</p>",
        "id": 459950056,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1723415039
    },
    {
        "content": "<p>Earlier than mono?</p>",
        "id": 459950108,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1723415062
    },
    {
        "content": "<p>I have thought about doing an earlier pass, but I thought it might bad for perf</p>",
        "id": 459950123,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1723415083
    },
    {
        "content": "<p>Itâ€™ll probably be easier to get right, though</p>",
        "id": 459950172,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1723415111
    },
    {
        "content": "<p>yeah it'll be much simpler, you'll be lowering to a form that already exists rather than adding a new case</p>",
        "id": 459950247,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1723415132
    },
    {
        "content": "<p>Do you think that'd be ok for perf? All modules with params and those that call into module with params would have to go through it</p>",
        "id": 459950831,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1723415551
    },
    {
        "content": "<p>The current approach is sure riddled with tricky cases I spent a ton of time to get right <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 459950955,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1723415725
    },
    {
        "content": "<p>I'm definitely tempted to simplify it</p>",
        "id": 459950964,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1723415737
    },
    {
        "content": "<p>i would do it the easiest way and worry about perf later tbh. my general learning from a project like Roc is that the biggest perf wins are surprising and even though the only way to have the best perf is to optimize to the limit, the 80-90% wins will surprise you and i don't think this will be one of them</p>",
        "id": 459952167,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1723416675
    },
    {
        "content": "<p>yeah, that sounds right</p>",
        "id": 459954795,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1723417815
    },
    {
        "content": "<p>I bet I can skip a lot of decls by gathering an array of indexes that I need to touch in the earlier stages</p>",
        "id": 459954957,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1723417894
    },
    {
        "content": "<p>I'll give this approach a try tomorrow! If it works, module params would be much less invasive in the compiler, and I'd be more confident about the impl</p>",
        "id": 459955056,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1723418016
    },
    {
        "content": "<p>I wish I had brough this up earlier, but I guess I learned a bunch of stuff <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 459955140,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1723418071
    }
]