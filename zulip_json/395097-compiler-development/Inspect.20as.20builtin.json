[
    {
        "content": "<p>I have a <a href=\"https://github.com/roc-lang/roc/pull/5747\">PR</a> for making <code>Inspect</code> a builtin - it's getting this:</p>\n<div class=\"codehilite\"><pre><span></span><code>---- gen_records::optional_field_destructure_module stdout ----\nthread &#39;gen_records::optional_field_destructure_module&#39; panicked at &#39;wasm-ld: error: unknown file type: /tmp/nix-shell.zczC9A/.tmpxRLGKA/test_11934200539654871657.a\n\nThis can happen if multiple tests have the same input string&#39;, crates/compiler/test_gen/src/helpers/llvm.rs:505:13\nstack backtrace:\n   0: rust_begin_unwind\n             at /rustc/90c541806f23a127002de5b4038be731ba1458ca/library/std/src/panicking.rs:578:5\n   1: core::panicking::panic_fmt\n             at /rustc/90c541806f23a127002de5b4038be731ba1458ca/library/core/src/panicking.rs:67:14\n   2: test_gen::helpers::llvm::compile_to_wasm_bytes\n   3: test_gen::helpers::llvm::assert_wasm_evals_to_help\n   4: core::ops::function::FnOnce::call_once\n   5: core::ops::function::FnOnce::call_once\n             at /rustc/90c541806f23a127002de5b4038be731ba1458ca/library/core/src/ops/function.rs:250:5\n</code></pre></div>\n<p>anyone recognize this error?</p>",
        "id": 383933352,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1691755466
    },
    {
        "content": "<p>the hint of \"This can happen if multiple tests have the same input string\" doesn't seem likely, since I didn't change any test names</p>",
        "id": 383933483,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1691755489
    },
    {
        "content": "<p>separately from that test failure, </p>\n<p>when I run <code>roc check examples/inspect-logging.roc</code> it passes, but <code>roc build</code> on it now panics with:</p>\n<blockquote>\n<p>'more argument symbols than arguments (according to the layout) for <code>Set.walk</code>', crates/compiler/mono/src/ir.rs:3967:35</p>\n</blockquote>\n<p>or sometimes:</p>\n<blockquote>\n<p>'more argument symbols than arguments (according to the layout) for <code>List.walk</code>', crates/compiler/mono/src/ir.rs:3967:35</p>\n</blockquote>\n<p><code>roc build</code> succeeded on it when <code>Inspect</code> was in userpsace; it only started failing when I moved it into a builtin</p>",
        "id": 383933793,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1691755549
    },
    {
        "content": "<p><code>wasm-ld: error: unknown file type</code> is a common flaky error on nix apple silicon, I've restarted the workflow</p>",
        "id": 383936984,
        "sender_full_name": "Anton",
        "timestamp": 1691756202
    },
    {
        "content": "<p>It passed :)</p>",
        "id": 383945479,
        "sender_full_name": "Anton",
        "timestamp": 1691757615
    },
    {
        "content": "<p>nice, thanks! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 383956819,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1691759521
    },
    {
        "content": "<p>ok, so then there's just the <code>roc build</code> panic <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 383956942,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1691759535
    },
    {
        "content": "<p>so <a href=\"https://github.com/roc-lang/roc/pull/5747\">https://github.com/roc-lang/roc/pull/5747</a> passes now. Looking ahead to the next step, these are all goals:</p>\n<ul>\n<li>have <code>Inspect.inspect</code> take <code>*</code> rather than something with the <code>Inspect</code> ability</li>\n<li>have <code>Inspect</code> be auto-derived for everything but opaque types</li>\n<li>make it so if you add <code>implements Inspect</code> to your opaque type, it automatically gives you the <code>Inspect</code> of the wrapped type (e.g. <code>Email := Str implements [Inspect]</code> makes <code>Email</code> have the same <code>Inspect</code> as a <code>Str</code>)</li>\n</ul>",
        "id": 385020272,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1692082574
    },
    {
        "content": "<p>it's straightforward to have it be auto-derived for everything except opaque types, and then have opaque types be able to opt into it by just adding <code>implements [Inspect]</code> because that's basically how <code>Encoding</code> works, except this would auto-derive for functions too (which is straightforward)</p>",
        "id": 385020508,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1692082639
    },
    {
        "content": "<p>the tricky part is having <code>Inspect.inspect</code> take <code>*</code> and still return something (namely, <code>\"&lt;opaque&gt;\"</code> or something like that) for opaque types that don't have <code>Inspect</code></p>",
        "id": 385020595,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1692082670
    },
    {
        "content": "<p>because it still needs to use their <code>Inspect</code> implementations if they actually have one</p>",
        "id": 385020671,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1692082684
    },
    {
        "content": "<p>one idea is that we have <code>Inspect.inspect</code> be implemented as a <code>RunLowLevel</code> operation which looks at the specialized type, checks if it has the <code>Inspect</code> ability (somehow - I don't actually know if that's possible after specialization, but I assume if anyone knows it's <span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span>), calls the appropriate ability member if it does have the ability, and then if it doesn't have the ability, defaults to <code>\"&lt;opaque&gt;\"</code> because we know that's what it has to be if it doesn't have the <code>Inspect</code> ability</p>",
        "id": 385021459,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1692082920
    },
    {
        "content": "<p>does that sound like a viable approach? Is there a better one?</p>",
        "id": 385021530,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1692082931
    },
    {
        "content": "<p>i think the best approach is implementing Inspect.inspect to be solved and code-gened in mono as any other function and ability member would. adding an auto-derived for every type would give resolution of the correct implementation for free.</p>",
        "id": 385337773,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1692161241
    },
    {
        "content": "<p>as in, make the type of <code>Inspect.inspect</code>'s argument have an ability constraint?</p>",
        "id": 385432666,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1692181738
    },
    {
        "content": "<p>I'm not sure how that strategy would be able to distinguish between \"this opaque type has been marked as <code>implements Inspect</code> and therefore we should auto derive an implementation that shows its internal contents\" and \"this opaque type has not been marked as <code>implements Inspect</code> and so we should still auto-derive an implementation, but this time the implementation does not reveal any internals of the opaque type\"</p>",
        "id": 385433188,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1692181909
    },
    {
        "content": "<p>why wouldn't it be able to distinguish that? we already have that for all other abilities with opaques and structural types</p>",
        "id": 385469956,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1692194516
    },
    {
        "content": "<p>we do? huh!</p>",
        "id": 385481406,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1692197714
    },
    {
        "content": "<p>so just to be clear, this can work?</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">Foo</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"w\"> </span><span class=\"nx\">implements</span><span class=\"w\"> </span><span class=\"nx\">Inspect</span>\n<span class=\"nx\">Bar</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"nx\">Str</span>\n\n<span class=\"nv\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">Inspect</span><span class=\"p\">.</span><span class=\"nx\">inspect</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">@Foo</span><span class=\"w\"> </span><span class=\"s\">\"blah\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\"># foo = \"blah\"</span>\n<span class=\"nv\">bar</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">Inspect</span><span class=\"p\">.</span><span class=\"nx\">inspect</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">@Bar</span><span class=\"w\"> </span><span class=\"s\">\"blah\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\"># bar = \"&lt;opaque&gt;\"</span>\n</code></pre></div>\n<p>...with <code>Inspect.inspect</code>'s argument having an <code>Inspect</code> constraint?</p>",
        "id": 385481695,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1692197807
    },
    {
        "content": "<p>I don't see why not</p>",
        "id": 385490339,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1692200419
    },
    {
        "content": "<p>well great! haha</p>",
        "id": 385506831,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1692206273
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> ok I added it to the obligation checker here: <a href=\"https://github.com/roc-lang/roc/pull/5775/files#diff-e91d42161e55644e56ab4625459a2e71ac01628a9ff67c0f030c0ff1db9bf3ab\">https://github.com/roc-lang/roc/pull/5775/files#diff-e91d42161e55644e56ab4625459a2e71ac01628a9ff67c0f030c0ff1db9bf3ab</a> - and also in that (draft) PR I added some <code>derive_key</code> stuff...but the obligation checker part just says \"there's an implementation there\" as far as I can tell, but it doesn't say where</p>",
        "id": 387789573,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1693273680
    },
    {
        "content": "<p>so I'm not sure where to put that, given that (as I understand it) the <code>derive_key</code> part is for when someone writes <code>implements</code> on the opaque type they're defining in order to opt into the derivation that actually renders the internals of the opaque type...or is that the ad-hoc one which gets rendered if they don't write <code>implements</code> at all?</p>",
        "id": 387789752,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1693273770
    },
    {
        "content": "<p>take a look at adding to <a href=\"https://github.com/roc-lang/roc/blob/263fb5632f8b73703d4362648f1e7115f893342b/crates/compiler/solve/src/specialize.rs#L614\">https://github.com/roc-lang/roc/blob/263fb5632f8b73703d4362648f1e7115f893342b/crates/compiler/solve/src/specialize.rs#L614</a></p>",
        "id": 387796888,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1693277843
    },
    {
        "content": "<p>specifically opaques without a specific inspect impl should fall into <a href=\"https://github.com/roc-lang/roc/blob/263fb5632f8b73703d4362648f1e7115f893342b/crates/compiler/solve/src/specialize.rs#L663-L664\">https://github.com/roc-lang/roc/blob/263fb5632f8b73703d4362648f1e7115f893342b/crates/compiler/solve/src/specialize.rs#L663-L664</a> if you update <code>builtin_module_with_unlisted_ability_impl</code></p>",
        "id": 387888691,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1693317676
    }
]