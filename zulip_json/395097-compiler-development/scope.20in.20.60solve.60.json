[
    {
        "content": "<p>so <code>solve</code> has its own <a href=\"https://github.com/roc-lang/roc/blob/d917c7daf13bb50850e872bab006ba5c7b1c23a9/crates/compiler/solve/src/solve/scope.rs#L4\"><code>Scope</code></a> that's distinct from the one we have during canonicalization</p>",
        "id": 388631238,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1693619357
    },
    {
        "content": "<p>it looks like entries only ever get added to it via <a href=\"https://github.com/roc-lang/roc/blob/d917c7daf13bb50850e872bab006ba5c7b1c23a9/crates/compiler/solve/src/solve.rs#L1807C23-L1807C23\"><code>from_def_types</code></a></p>",
        "id": 388631436,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1693619469
    },
    {
        "content": "<p>which in turn looks like it gets all of its info from constraints that were generated earlier</p>",
        "id": 388631654,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1693619579
    },
    {
        "content": "<p>I'm interested in this because during solving we run <code>clone</code> on <code>scope</code> in various places, and I'm wondering if that's really necessary, or if there's some way we could have put the right <code>Variable</code> inside the <code>Let</code> earlier on (e.g. during canonicalization) such that it wouldn't need to be looked up later</p>",
        "id": 388631917,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1693619716
    },
    {
        "content": "<p>in other words, it seems like solving is redoing some of the work canonicalization has already done (figuring out what a given lookup refers to in the context of the scope) and it's doing a bunch of hash table cloning in the process</p>",
        "id": 388632078,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1693619803
    },
    {
        "content": "<p>so I wonder if we could prevent all that cloning by storing the associated variable right when we create the <code>Lookup</code> constraint itself, for example</p>",
        "id": 388632141,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1693619846
    }
]