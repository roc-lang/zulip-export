[
    {
        "content": "<p>So, I'm not fully sure what is going wrong, but I feel like my mental model for combining tags isn't working. Currently, <a href=\"https://github.com/roc-lang/basic-webserver/pull/61\">my sqlite PR</a> isn't working due to breaking during compilation and it seems to be due to tag combining. Fundamentally, I have some errors that are innate to interacting with sql in various ways and some that would be user defined. I am trying to use them together in a flat union instead of adding extra unnecessary layers.</p>\n<p>So for the sqlite result decoder, we have the base error:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">SqlDecodeErr</span><span class=\"w\"> </span><span class=\"nv\">err</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">FieldNotFound</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">SqlError</span><span class=\"w\"> </span><span class=\"kt\">Code</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">]</span><span class=\"nv\">err</span>\n<span class=\"kt\">SqlDecode</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">err</span><span class=\"w\"> </span><span class=\"nf\">:=</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Stmt</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">SqlDecodeErr</span><span class=\"w\"> </span><span class=\"nv\">err</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>Then it is used with various other error types and attempted to be merged together.<br>\nFor example, if you query for exactly 1 result, it adds two more possible errors:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">RowCountErr</span><span class=\"w\"> </span><span class=\"nv\">err</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">NoRowsReturned</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">TooManyRowsReturned</span><span class=\"p\">]</span><span class=\"nv\">err</span>\n</code></pre></div>\n<p>So then in the full function call, we add some layers of nesting to build of the full tag as <code>SqlDecodeErr (RowCountErr err)</code>.</p>\n<p>This leads to the function type I would want to write:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">decodeExactlyOneRow</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Stmt</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">SqlDecode</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">err</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">SqlDecodeErr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">RowCountErr</span><span class=\"w\"> </span><span class=\"nv\">err</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>Sadly, this fails to check. Cause the input <code>err</code> type does not know about the <code>RowCountErr</code>s. Roc will not expand the tag. So it is a type mismatch with unexpected types:</p>\n<div class=\"codehilite\"><pre><span></span><code>The argument is an anonymous function of type:\n\n    a -&gt; Task a [\n        SqlError InternalSql.SqliteErrCode …,\n        TooManyRowsReturned,\n    ]\n\nBut this function needs its 2nd argument to be:\n\n    a -&gt; Task a [SqlError Code …, …]err\n</code></pre></div>\n<p>So I have to type the input error type the same as the output error type to force roc to allow them to unify happily:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">decodeExactlyOneRow</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Stmt</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">SqlDecode</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">RowCountErr</span><span class=\"w\"> </span><span class=\"nv\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">SqlDecodeErr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">RowCountErr</span><span class=\"w\"> </span><span class=\"nv\">err</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>This now passes roc check, but fails to compile:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;&lt;unnamed&gt;&#39; panicked at crates/compiler/mono/src/ir.rs:6124:9:\nassertion failed: unspecialized.is_empty()\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>\n<hr>\n<p>My general questions are:</p>\n<ol>\n<li>should this work?</li>\n<li>If not, is there a similar solution that would enable this sort of error merging/propagation? I am trying to make this work like <code>Task</code> usually does where all of the various error types just merge.</li>\n<li>If no to both of the above, how would we expect and api like this to be written.</li>\n</ol>",
        "id": 456079737,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1722652765
    },
    {
        "content": "<p>Have you tried making the error tag union here an open union?</p>\n<div class=\"codehilite\"><pre><span></span><code>    a -&gt; Task a [\n        SqlError InternalSql.SqliteErrCode …,\n        TooManyRowsReturned,\n    ]*\n</code></pre></div>\n<p>I don't think it should be necessary, but that could be a type bug</p>",
        "id": 456109449,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1722664618
    },
    {
        "content": "<p>I'm not sure how to make it open given it is generated from merging tags.</p>\n<p>It is a <code>SqlDecodeErr (RowCountErr err)</code></p>\n<p>If I substitute types, that is a <code>[FieldNotFound Str, SqlError Code Str]([NoRowsReturned, TooManyRowsReturned]err)</code></p>",
        "id": 456115613,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1722668975
    },
    {
        "content": "<p>I think </p>\n<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/395097-compiler-development/topic/combining.20tags/near/456079737\">said</a>:</p>\n<blockquote>\n<p>This leads to the function type I would want to write:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">decodeExactlyOneRow</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Stmt</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">SqlDecode</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">err</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">SqlDecodeErr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">RowCountErr</span><span class=\"w\"> </span><span class=\"nv\">err</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>Sadly, this fails to check. [...] So I have to type the input error type the same as the output error type to force roc to allow them to unify happily:</p>\n<p><div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">decodeExactlyOneRow</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Stmt</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">SqlDecode</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">RowCountErr</span><span class=\"w\"> </span><span class=\"nv\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">SqlDecodeErr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">RowCountErr</span><span class=\"w\"> </span><span class=\"nv\">err</span><span class=\"p\">))</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I think the compiler is correct here; in general, a type alias means essentially \"inline this type wherever you see the alias,\" and looking at the type signatures after inlining reveals the problem:</p>\n<div class=\"codehilite\" data-code-language=\"Perl\"><pre><span></span><code><span class=\"n\">Stmt</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SqlDecode</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"nn\">err</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Task</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">SqlDecodeErr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">RowCountErr</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">))</span>\n<span class=\"c1\"># after inlining the type aliases:</span>\n<span class=\"n\">Stmt</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SqlDecode</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"nn\">err</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Task</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">FieldNotFound</span><span class=\"w\"> </span><span class=\"n\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SqlError</span><span class=\"w\"> </span><span class=\"n\">Code</span><span class=\"w\"> </span><span class=\"n\">Str</span><span class=\"p\">][</span><span class=\"n\">NoRowsReturned</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">TooManyRowsReturned</span><span class=\"p\">]</span><span class=\"n\">err</span>\n</code></pre></div>\n<p>so after inlining, we can see that in <code>SqlDecode a err</code> the <code>err</code> is referring to \"all the other tags in the error union <em>except</em> <code>[FieldNotFound Str, SqlError Code Str][NoRowsReturned, TooManyRowsReturned]</code>\" because that's what <code>[...]err</code> means.</p>",
        "id": 456142371,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1722686497
    },
    {
        "content": "<p>Here's inlining the other one:</p>\n<div class=\"codehilite\" data-code-language=\"Perl\"><pre><span></span><code><span class=\"n\">Stmt</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SqlDecode</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">RowCountErr</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Task</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">SqlDecodeErr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">RowCountErr</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">))</span>\n<span class=\"c1\"># after inlining the type aliases:</span>\n<span class=\"n\">Stmt</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SqlDecode</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">NoRowsReturned</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">TooManyRowsReturned</span><span class=\"p\">]</span><span class=\"nn\">err</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Task</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">FieldNotFound</span><span class=\"w\"> </span><span class=\"n\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SqlError</span><span class=\"w\"> </span><span class=\"n\">Code</span><span class=\"w\"> </span><span class=\"n\">Str</span><span class=\"p\">][</span><span class=\"n\">NoRowsReturned</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">TooManyRowsReturned</span><span class=\"p\">]</span><span class=\"n\">err</span>\n</code></pre></div>",
        "id": 456142408,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1722686515
    },
    {
        "content": "<p>I'm a little surprised that one type-checks; I'd expect it to have to be:</p>\n<div class=\"codehilite\" data-code-language=\"Perl\"><pre><span></span><code><span class=\"n\">Stmt</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SqlDecode</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">SqlDecodeErr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">RowCountErr</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Task</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">SqlDecodeErr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">RowCountErr</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">))</span>\n</code></pre></div>",
        "id": 456142535,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1722686617
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> and <span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> probably have a more accurate mental model than I do of how these are unifying though <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 456142819,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1722686865
    },
    {
        "content": "<p>The second one checks. <code>SqlDecode</code> adds a <code>SqlDecodeErr</code> internally</p>",
        "id": 456184195,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1722701813
    },
    {
        "content": "<p>That said, even though it type checks it crashes the compiler.</p>",
        "id": 456184232,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1722701828
    },
    {
        "content": "<p>I think this is a bug</p>",
        "id": 456186813,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1722702962
    },
    {
        "content": "<p>pretty sure the first version should work</p>",
        "id": 456186843,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1722702969
    },
    {
        "content": "<p>are type variable for tags open or closed? Is there anyway to control that?</p>\n<p>Also, Richard, I think the original type should work cause <code>SqlDecode a err</code> is a lambda with the final lambda doing: <code>(Stmt -&gt; Task a (SqlDecodeErr err))</code>. Since output tags are supposed to be open. This should return Task with an open tag output.</p>\n<p>Oh, does the open tag in return types work if the tag is nested in another type. Like <code>I32 -&gt; [Even, Odd]</code> will return an open tag. Will <code>I32 -&gt; Task [Even, Odd] ...</code> return an open tag?</p>",
        "id": 456192221,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1722705616
    },
    {
        "content": "<p>A little update on this. The crash is due to an error with an empty tag in it. Apparently roc requires that to be typed or crash:</p>\n<p>Builder func:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">intDecoder</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">I64</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">SqlDecode</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">FailedToDecodeInteger</span><span class=\"w\"> </span><span class=\"nv\">err</span><span class=\"p\">]</span><span class=\"kt\">UnexpectedTypeErr</span><span class=\"p\">)</span>\n<span class=\"nv\">intDecoder</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">cast</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">decoder</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">val</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">val</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">            </span><span class=\"kt\">Integer</span><span class=\"w\"> </span><span class=\"nv\">i</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">cast</span><span class=\"w\"> </span><span class=\"nv\">i</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">mapErr</span><span class=\"w\"> </span><span class=\"kt\">FailedToDecodeInteger</span>\n<span class=\"w\">            </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">toUnexpectedTypeErr</span><span class=\"w\"> </span><span class=\"nv\">val</span>\n</code></pre></div>\n<p>I64 case. This crashes if the type isn't specified. I think it is due to <code>[]</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">i64</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">SqlDecode</span><span class=\"w\"> </span><span class=\"kt\">I64</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">FailedToDecodeInteger</span><span class=\"w\"> </span><span class=\"p\">[]]</span><span class=\"kt\">UnexpectedTypeErr</span>\n<span class=\"nv\">i64</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">intDecoder</span><span class=\"w\"> </span><span class=\"kt\">Ok</span>\n</code></pre></div>",
        "id": 456363165,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1722793108
    },
    {
        "content": "<p>I guess I am calling <code>mapErr</code> on a <code>Result I64 []</code>. Not sure what that is expected to do.</p>",
        "id": 456363344,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1722793154
    }
]