[
    {
        "content": "<p>Taking on my <a href=\"https://github.com/roc-lang/roc/issues/7302\">first issue</a> in the IR phase and some of what happens in the decision_tree is hard to parse out.  Can someone give a high level understanding of what we are trying to do here.  Much appreciated!</p>",
        "id": 486220792,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733370428
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> and <span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> would probably be best able to describe what the decision tree does at a high level</p>",
        "id": 486284224,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1733398615
    },
    {
        "content": "<p>the decision tree algorithm comes from<br>\n<a href=\"http://moscova.inria.fr/~maranget/papers/ml05e-maranget.pdf\">http://moscova.inria.fr/~maranget/papers/ml05e-maranget.pdf</a></p>",
        "id": 486367900,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1733422691
    },
    {
        "content": "<p>There's a ton of indirection because of the low level of the IR so it's very tricky to see what it's doing at the moment - we did a bad job making it easy to debug</p>",
        "id": 486368003,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1733422729
    },
    {
        "content": "<p>I believe there are some debug helpers to print out the state of the decision tree, at least there were a couple years ago</p>",
        "id": 486368059,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1733422749
    },
    {
        "content": "<p>The idea is to compile a <code>when</code> expression to an \"efficient\" tree of checks to perform to decide what branch to take</p>",
        "id": 486368307,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1733422831
    },
    {
        "content": "<p>For example, suppose you have the expression</p>\n<div class=\"codehilite\"><pre><span></span><code>x: [A [X, Y, Z], B [X, Y, Z]]\nwhen x is\n  A X -&gt; foo1\n  A Z -&gt; foo2\n  B Z -&gt; foo3\n  _ -&gt; foo4\n</code></pre></div>\n<p>you want to compile this down to the \"efficient\" pattern</p>\n<div class=\"codehilite\"><pre><span></span><code>branch = when ~constructor(x) is # ~constructor is a fake function that returns the head constructor, i.e. A or B\n  A -&gt;\n    when ~constructor(~payload(x, 0)) is # ~payload(t, n) is a fake function that returns the tag payload at index n\n      X -&gt; 1\n      Y -&gt; 2\n      Z -&gt; 4\n  B -&gt;\n    when ~constructor(~payload(x, )) is\n      X -&gt; 4\n      Y -&gt; 4\n      Z -&gt; 3\n\nwhen branch is\n  1 -&gt; foo1\n  2 -&gt; foo2\n  3 -&gt; foo3\n  4 -&gt; foo4\n</code></pre></div>",
        "id": 486369003,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1733423097
    },
    {
        "content": "<p>Ok, I'm trying to figure out why the Can AST (for some when branches) seems to be coming out in mono_ir as something VERY different in some cases</p>",
        "id": 486376225,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733425818
    },
    {
        "content": "<p>do you have an example?</p>",
        "id": 486391362,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1733431919
    },
    {
        "content": "<p>Yes I do: <a href=\"https://github.com/roc-lang/roc/issues/7302\">https://github.com/roc-lang/roc/issues/7302</a></p>",
        "id": 486391499,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733431974
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span>  Here you can see the output of the raw branches: <a href=\"https://github.com/gamebox/aoc-2024/blob/main/day3/puzzle2/output.txt\">https://github.com/gamebox/aoc-2024/blob/main/day3/puzzle2/output.txt</a></p>",
        "id": 486402558,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733436924
    },
    {
        "content": "<p>With better output, you'll see first the raw branch, and then each flattened branch followed by the word \"FLATTENED:\"</p>",
        "id": 486403585,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733437422
    },
    {
        "content": "<p>is the example reducable</p>",
        "id": 486417113,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1733444597
    }
]