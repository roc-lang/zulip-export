[
    {
        "content": "<p>I don't know if this would fix some of our woes with recursive types or not, but I've been thinking about our representation, which tries to convert implicit type cycles into explicit type cycles (ie a transformation from equirecursive to isorecursive types in the literature). Dealing with isorecursive types in printing types/generating code is super useful, but I also wonder if the source of most of our problems is because of that transformation</p>",
        "id": 401631984,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1699813769
    },
    {
        "content": "<p>What we could do instead is go full-in on the implicit cyclic representations. So, we would get rid of any explicit <code>occurs</code> checks, and always unify types when we begin to compare them (this is safe because our checker is non-backtracking), rather than after the point we determine that they are equivalent (as we currently do)</p>",
        "id": 401632093,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1699813877
    },
    {
        "content": "<p>Printing types becomes more annoying, but right now if we miss a recursion point the printer stack overflows anyway</p>",
        "id": 401632105,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1699813905
    },
    {
        "content": "<p>Code-generation of layouts also becomes more difficult, but the layout-interner operates on type variables anyway, so it should automatically cache layouts of the implicit recursion points (though, at that point, we would explicitly need to insert a recursion pointer in the memory layout, so this is a bit tricky)</p>",
        "id": 401632191,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1699814004
    },
    {
        "content": "<p>If this works <a href=\"#narrow/stream/395097-compiler-development/topic/Recursive.20Types.20with.20List\">https://roc.zulipchat.com/#narrow/stream/395097-compiler-development/topic/Recursive.20Types.20with.20List</a> would also trivially work</p>",
        "id": 401632206,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1699814032
    },
    {
        "content": "<p>Might be an interesting thing to try at some point</p>",
        "id": 401632255,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1699814046
    },
    {
        "content": "<p>wouldn't that also speed up type checking if it worked?</p>",
        "id": 401634172,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1699816127
    },
    {
        "content": "<p>possibly yeah</p>",
        "id": 401641301,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1699824168
    },
    {
        "content": "<p>yeah this sounds really interesting</p>",
        "id": 401641382,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1699824272
    },
    {
        "content": "<p>if nothing else, it sounds like a really nice simplification of the type checker</p>",
        "id": 401642293,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1699825437
    },
    {
        "content": "<p>and printing types would get more complex, but that's not a troublesome area of the code base anyway...seems like a great trade to make that part of the code base more complex in order to make the really tricky part simpler</p>",
        "id": 401642369,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1699825521
    },
    {
        "content": "<p>i don’t actually know why there’s a recursive type representation/occurs check in the current impl. is that just a holdover from the initial elm port?</p>",
        "id": 401643551,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1699826672
    },
    {
        "content": "<p>that's definitely where we originally got it! <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 401643681,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1699826874
    },
    {
        "content": "<p>honestly this sounds to me like a better thing to try next than boxing closures</p>",
        "id": 401658456,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1699838091
    },
    {
        "content": "<p>because it might mean we don't end up needing to do that after all, but even if not—if it works, I suspect it'll improve both the code base and performance anyway, so we'll be glad to have it and can then proceed boxing closures anyway</p>",
        "id": 401658553,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1699838144
    },
    {
        "content": "<p>well, I don't actually know if this works, it's just a thought. And we have a few other problems with lambda sets that are unrelated to recursive types specifically. So I'm not sure - if someone has the opportunity to spike it out, definitely useful though</p>",
        "id": 401673827,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1699844606
    },
    {
        "content": "<p>I really want to figure out how to make this work. Here's a request for help. Consider we have the following function</p>\n<div class=\"codehilite\"><pre><span></span><code>mapper = \\l, f -&gt; when l is\n  Nil -&gt; Nil\n  Cons x xs -&gt; Cons (f x) (mapper xs f)\n</code></pre></div>\n<p>It's clear that the inferred type for <code>l</code> is <code>&lt;t&gt; = [Nil, Cons a &lt;t&gt;]</code>. Now, the question is, can we find an algorithm that can efficiently \"see\" that <code>&lt;t&gt;</code> is recursive during or right after inference?</p>\n<p>As is it, the unification would proceed as</p>\n<div class=\"codehilite\"><pre><span></span><code>l = tvar_0 (tvar = type variable)\nl ~ Nil = [Nil]a\nl ~ Cons x xs = [Nil, Cons a b]c; xs has type c\nmapper xs f =&gt; typeof&lt;xs&gt; = typeof&lt;l&gt; =&gt; c = typeof&lt;l&gt;\n=&gt; typeof&lt;l&gt; = [Nil, Cons a b]&lt;typeof l&gt;\n</code></pre></div>\n<p>But we don't yet explicitly see that &lt;typeof l&gt; is recursive in itself. The obvious solution is to perform an occurs check at this point, but this is not efficient.</p>\n<p>Can we do this efficiently?</p>",
        "id": 403304007,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1700543351
    },
    {
        "content": "<p>some ideas from GPT-4:</p>\n<blockquote>\n<p>Structure Sharing in Unification: By employing structure sharing in the unification algorithm, you can avoid redundant traversals of type structures. When two type variables unify, they can share the same structure, reducing the need for repeated checks.<br>\n   Efficient Occurs Check: Implementing an efficient occurs check can significantly improve performance. This could involve optimizations such as:<br>\n       Path Compression: During unification, flatten the structure of type variables to minimize the depth of the tree.<br>\n       Tail Recursion Optimization: Make the occurs check tail-recursive if possible, to reduce stack usage.<br>\n   Incremental Unification: Instead of performing a full unification pass at every step, you can incrementally update the type information as you traverse the structure. This reduces the overall computational load.<br>\n   Caching Results: Cache intermediate results during unification and type checking. If you encounter a type structure you've already processed, you can reuse the cached results instead of recomputing.<br>\n   Detecting Recursion Early: Analyze the structure of the function and its parameters to identify potential recursion early in the process. For instance, in your example, the recursive call to mapper within itself is a strong hint of recursive types.<br>\n   Graph-based Representations: Representing types as graphs rather than as tree structures can make it easier to detect cycles (indicative of recursion) efficiently.<br>\n   Lazy Evaluation: In some cases, using lazy evaluation strategies in your type inference algorithm can defer processing until necessary, reducing immediate computational overhead.</p>\n</blockquote>",
        "id": 403304585,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700543750
    },
    {
        "content": "<p>\"Efficient Occurs Check\" - thanks, just make it efficient, good call <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 403304660,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700543796
    },
    {
        "content": "<p>hm, here's an idea: can we potentially benefit from knowing that there's a restricted set of places where recursion can validly occur?</p>",
        "id": 403304917,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700543995
    },
    {
        "content": "<p>for example, what if we just did an occurs check on the ext var of the tag union at the end there?</p>",
        "id": 403304994,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700544016
    },
    {
        "content": "<p>eh I guess it could just as easily be in one of the tags</p>",
        "id": 403305014,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700544036
    },
    {
        "content": "<p>yeah that's what we do today</p>",
        "id": 403305086,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1700544111
    },
    {
        "content": "<p>Im just trying to figure out if there's a better way</p>",
        "id": 403305149,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1700544133
    },
    {
        "content": "<p>I realized we have to have at least a flag that tells us if a type is recursive, during unification. otherwise there's just no way to reliably generate code that needs to be boxed in certain places</p>",
        "id": 403305191,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1700544177
    },
    {
        "content": "<p>but figuring out where to place the flag is super hard</p>",
        "id": 403305213,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1700544192
    },
    {
        "content": "<p>like when to try to detect it you mean?</p>",
        "id": 403305233,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700544209
    },
    {
        "content": "<p>yes</p>",
        "id": 403305449,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1700544347
    },
    {
        "content": "<p>not a direct answer, but I could ask Stephanie Weirich if she could introduce us to someone who might have more experience with the problem (e.g. OCaml devs)</p>",
        "id": 403306613,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700545113
    },
    {
        "content": "<p>ok I want to try to lay out some thoughts on this one, maybe it will help</p>",
        "id": 403499147,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700618735
    },
    {
        "content": "<p>the goal is to have some way of saying (I guess on <code>Content</code>?) whether a given type is known to be recursive, and we want to set that during unification, such that by the time solving is done we just have that information going into mono</p>",
        "id": 403499274,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700618790
    },
    {
        "content": "<p>the <code>occurs</code> strategy would be to, at certain points, walk through all the different variables in the type and see if any of them refer to the original type itself, and then recursively do that for all the variables until we either run out of things to recurse on or detect that the original type refers to itself.</p>\n<p>this works, but is slow.</p>",
        "id": 403499439,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700618875
    },
    {
        "content": "<p>another idea would be to track the set of all the variables each variable references, including transitively, as we go</p>",
        "id": 403499779,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700619059
    },
    {
        "content": "<p>but that also sounds slow (maybe even slower)</p>",
        "id": 403499826,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700619098
    },
    {
        "content": "<p>yeah</p>",
        "id": 403500598,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1700619402
    },
    {
        "content": "<p>I think it's helpful to work out of this example, just based on first principles.</p>\n<div class=\"codehilite\"><pre><span></span><code>mapper = \\l, f -&gt; when l is\n  Nil -&gt; Nil\n  Cons x xs -&gt; Cons (f x) (mapper xs f)\n</code></pre></div>\n<p>In more detail, let's consider what it takes to infer the type of <code>l</code> here.</p>\n<div class=\"codehilite\"><pre><span></span><code>1. `l` is introduced. Give it some type variable `v1`.\n2. We encounter `Nil` and `Cons x xs` matched against `l`. Suppose typeof&lt;Nil&gt; = [Nil] and typeof&lt;Cons x xs&gt; = [Cons v2 v3]. Then we set v1 = [Nil, Cons v2 v3]\n3. We encounter `mapper xs f`. This induces the constraint `v3 = v1`. So now we have v1 = [Nil, Cons v2 v1].\n</code></pre></div>\n<p>This type is correct but what we'd like is to note at that point that we should store somewhere (e.g. a lookaside table) that v1 is recursive in itself</p>",
        "id": 403501113,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1700619621
    },
    {
        "content": "<p>For what it's worth,</p>\n<blockquote>\n<p>the occurs strategy would be to, at certain points, walk through all the different variables in the type and see if any of them refer to the original type itself, and then recursively do that for all the variables until we either run out of things to recurse on or detect that the original type refers to itself.</p>\n</blockquote>\n<p>Is what we currently do, but only for tag unions. And it's half baked. So we could add it to more places but i'm not sure that scales. For example, we 'd need to also add it to be able to infer something like <code>X : (Str, List X)</code> as recursive properly. And I'm sure there are more cases like this.</p>",
        "id": 403501306,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1700619716
    },
    {
        "content": "<p>we currently do that during unification?</p>",
        "id": 403501439,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700619767
    },
    {
        "content": "<p>yes</p>",
        "id": 403501448,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1700619774
    },
    {
        "content": "<p>for tags only</p>",
        "id": 403501476,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1700619788
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"454654\">Ayaz Hafiz</span> <a href=\"#narrow/stream/395097-compiler-development/topic/Allowing.20implicit.20cycles.20in.20the.20type.20representation/near/403305191\">said</a>:</p>\n<blockquote>\n<p>I realized we have to have at least a flag that tells us if a type is recursive, during unification. otherwise there's just no way to reliably generate code that needs to be boxed in certain places</p>\n</blockquote>\n<p>just to check my understanding: does this mean the original idea at the top of this thread can't work?</p>",
        "id": 403502065,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700620038
    },
    {
        "content": "<p>for Roc's compilation strategy, i don't think it can</p>",
        "id": 403503086,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1700620488
    },
    {
        "content": "<p>although i just had an idea. maybe it only matters to mark the recursion points during specialization (monomorphization)</p>",
        "id": 403503134,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1700620516
    },
    {
        "content": "<p>since at that point you must traverse the full types anyway</p>",
        "id": 403503160,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1700620529
    },
    {
        "content": "<p>the problem is you can end up with duplicate specializations, potentially exponentially many</p>",
        "id": 403503225,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1700620563
    },
    {
        "content": "<p>but maybe that's not a problem in practice?</p>",
        "id": 403503262,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1700620571
    },
    {
        "content": "<p>what if we actually mutated the subs during specialization when doing that?</p>",
        "id": 403503353,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700620624
    },
    {
        "content": "<p>like we're about to traverse a type, we see that we've never checked whether it's recursive or not, so we check that during the current specialization and then mark it in the subs so future specializations don't need to check again</p>",
        "id": 403503778,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700620817
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"454654\">Ayaz Hafiz</span> <a href=\"#narrow/stream/395097-compiler-development/topic/Allowing.20implicit.20cycles.20in.20the.20type.20representation/near/403503225\">said</a>:</p>\n<blockquote>\n<p>the problem is you can end up with duplicate specializations, potentially exponentially many</p>\n</blockquote>\n<p>hm, why would checking for recursion during specialization cause <em>more</em> specializations? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 403503931,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700620902
    },
    {
        "content": "<p>Because consider for example we have that mapper function, but it's a more complex type <code>[Cons a {x: b}, Nil]</code>, and we need to specialize it twice. The first time we specialize it, it's because it's called with a type <code>b = [Cons a {x : b}, Nil]</code>.  But the second time we specialize it, it's because it's called with a type that had the determined recursion point in a different place, like <code>c = [Cons a (c = {x: b}), Nil]</code>. Since the specialization of <code>mapper</code> is determined by the caller, and the callers can be disjoint from each other, we can't adjust this.</p>\n<p>This is the advantage of finding the recursion points up-front. If we found the recursion point in the generalized <code>mapper</code> definition, then each specialization would also inherit that recursion point during unification.</p>",
        "id": 403505513,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1700621617
    },
    {
        "content": "<p>also, don't we need to check for this during unification for error reporting?</p>\n<p>e.g. <code>X : { y : X }</code> needs to report an error at compile time, and I'm not sure how we could know to do that without doing the work of answering the question of whether it's a (valid) recursive type</p>",
        "id": 403505563,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700621635
    },
    {
        "content": "<p>I guess that's just limited to type alias declarations though</p>",
        "id": 403505669,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700621677
    },
    {
        "content": "<p>and opaque type definitions</p>",
        "id": 403505689,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700621689
    },
    {
        "content": "<p>yeah. type definitions are the easy version, cuz we can always add the recursion marker at that time</p>",
        "id": 403505749,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1700621713
    },
    {
        "content": "<p>nominal types make it easy</p>",
        "id": 403505757,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1700621719
    },
    {
        "content": "<p>nominal even in the sense of aliases. \"Explicitly typed\"</p>",
        "id": 403505786,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1700621738
    },
    {
        "content": "<p>because they tell you where the recursion (and hence where you should compile as boxed) should happen</p>",
        "id": 403505896,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1700621772
    },
    {
        "content": "<p>so going back to your example of calling with two specializations - what I was suggesting earlier is that the first specialization would essentially do what the occurs check during unification would do</p>",
        "id": 403506495,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700622046
    },
    {
        "content": "<p>such that by the end of the specialization we'd have a generalized answer</p>",
        "id": 403506656,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700622096
    },
    {
        "content": "<p>hm but I guess that doesn't work because the specialization wouldn't have access to the original variables during specialization <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 403506919,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700622168
    },
    {
        "content": "<p>What if the first specialization makes it so that <code>[Cons a {x: b}, Nil]</code> is specialized to <code>[Cons Int {x: self}, Nil]</code>? You need to roll the changes back, and now you've lost the markers right?</p>",
        "id": 403506957,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1700622182
    },
    {
        "content": "<p>I wonder how OCaml does this</p>",
        "id": 403669335,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700689421
    },
    {
        "content": "<p>because no matter how often people use polymorphic variants, having them in the language at all means you have to do this analysis</p>",
        "id": 403669404,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700689445
    },
    {
        "content": "<p>and OCaml's compiler has a good reputation for performance, so either <code>occurs</code> is not that expensive in practice (although that would surprise me) or else maybe they found something else that works</p>",
        "id": 403669458,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700689488
    },
    {
        "content": "<p>FWIW I think polymorphic variants are usually used pretty sparingly in OCaml code. The general wisdom is that polymorphic variants produce less efficient compiled code. I haven't heard anything about impacting compile times, but there might be a similar philosophy where you're trading speed for flexibility.</p>",
        "id": 403675479,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1700692790
    },
    {
        "content": "<p>yeah the thing is that just because they exist in the language at all, this analysis has to happen</p>",
        "id": 403677134,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700693859
    },
    {
        "content": "<p>how often they're used only affects how often the analysis comes back with the answer being yes vs no, but it's the same amount of work to get the answer either way</p>",
        "id": 403677192,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700693891
    },
    {
        "content": "<p>I asked how OCaml does this and got some answers: <a href=\"https://twitter.com/rtfeldman/status/1727443546897252521\">https://twitter.com/rtfeldman/status/1727443546897252521</a></p>",
        "id": 403677414,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700694032
    },
    {
        "content": "<p>this one is interesting, but if it's correct, it's not something we could do: <a href=\"https://twitter.com/welltypedwitch/status/1727449171207074289\">https://twitter.com/welltypedwitch/status/1727449171207074289</a></p>",
        "id": 403677571,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700694100
    },
    {
        "content": "<p>it didn't occur to me that OCaml could get away with not having that info once type checking is done, but maybe they can?</p>",
        "id": 403677606,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700694119
    },
    {
        "content": "<p>I'm pretty sure this is a non-problem for OCaml. Inference of recursive types is not really the issue (that part is easy, just eagerly unify all types you compared). Figuring out where recursive types \"are recursive\" is the problem, and OCaml doesn't have that issue because it boxes ~everything (so codegen doesn't need to care about where the point of recursion happens). At least that's my understanding</p>",
        "id": 403679847,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1700695445
    },
    {
        "content": "<p>Put another way, the problem for us is that during code generation you must translate a structural type to an equivalent nominal type.</p>",
        "id": 403679868,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1700695472
    },
    {
        "content": "<p>unrelated, but fwiw OCaml doesn't support recursive types of the form <code>X : (X, List X)</code> in general. See <a href=\"https://caml.inria.fr/pub/docs/oreilly-book/html/book-ora209.html\">https://caml.inria.fr/pub/docs/oreilly-book/html/book-ora209.html</a></p>",
        "id": 403679918,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1700695515
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/395097-compiler-development/topic/Allowing.20implicit.20cycles.20in.20the.20type.20representation/near/403677571\">said</a>:</p>\n<blockquote>\n<p>this one is interesting, but if it's correct, it's not something we could do: <a href=\"https://twitter.com/welltypedwitch/status/1727449171207074289\">https://twitter.com/welltypedwitch/status/1727449171207074289</a></p>\n</blockquote>\n<p>I'm pretty sure this description is <a href=\"#narrow/stream/395097-compiler-development/topic/Allowing.20implicit.20cycles.20in.20the.20type.20representation/near/401632093\">https://roc.zulipchat.com/#narrow/stream/395097-compiler-development/topic/Allowing.20implicit.20cycles.20in.20the.20type.20representation/near/401632093</a>. I think by \"reference\" they mean \"are these two type variables equivalent\", which is the standard way to infer recursive types</p>",
        "id": 403680115,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1700695669
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"454654\">Ayaz Hafiz</span> <a href=\"#narrow/stream/395097-compiler-development/topic/Allowing.20implicit.20cycles.20in.20the.20type.20representation/near/403679918\">said</a>:</p>\n<blockquote>\n<p>unrelated, but fwiw OCaml doesn't support recursive types of the form <code>X : (X, List X)</code> in general. See <a href=\"https://caml.inria.fr/pub/docs/oreilly-book/html/book-ora209.html\">https://caml.inria.fr/pub/docs/oreilly-book/html/book-ora209.html</a></p>\n</blockquote>\n<p>just checking, but was this meant to be <code>X : (Str, List X)</code> or similar? I don't think <code>X : (X, ...)</code> is possible in general <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 403684830,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700699102
    },
    {
        "content": "<p>Right, thanks for the clarification</p>",
        "id": 403689016,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1700702651
    },
    {
        "content": "<p>I wonder if it's possible somehow to make <code>occurs</code> cheap <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 403769442,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700738611
    },
    {
        "content": "<p>like by trying to arrange it such that everything we're checking is already in cache</p>",
        "id": 403769476,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700738624
    },
    {
        "content": "<p>here's an idea: what if during unification we record in <code>Content</code> whether a type is concrete? That should be super cheap.</p>\n<p>Then we do an <code>occurs</code> check except it short-circuits on concrete types because we know they're either not recursive or else they're nominal and therefore we already know where they recurse</p>",
        "id": 403808554,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700752662
    },
    {
        "content": "<p>maybe that would cheaply reduce the number of occurs checks low enough to be fast in practice?</p>",
        "id": 403808656,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700752689
    },
    {
        "content": "<p>v1 is concrete in <a href=\"#narrow/stream/395097-compiler-development/topic/Allowing.20implicit.20cycles.20in.20the.20type.20representation/near/403501113\">https://roc.zulipchat.com/#narrow/stream/395097-compiler-development/topic/Allowing.20implicit.20cycles.20in.20the.20type.20representation/near/403501113</a>. How do you detect the recursion point there?</p>",
        "id": 403808815,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1700752758
    },
    {
        "content": "<p>ugh I'm on mobile and the link doesn't work - what's something I can search for to see where that is? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 403809337,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700752934
    },
    {
        "content": "<p>My message from Nov21 in this thread that starts with I think it's helpful to work out of this example, just based on first principles.</p>",
        "id": 403810128,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1700753213
    },
    {
        "content": "<p>hm, yeah fair point <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 403811117,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700753565
    },
    {
        "content": "<p>so I guess part of the challenge is that the last unification, <code>v1 = v3</code>, is isolated and doesn't \"realize\" the implication that it just created a loop</p>",
        "id": 403814241,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700754803
    },
    {
        "content": "<p>I wonder if there's some (typically small) set of variables we could keep track of that are \"potentially recursive\" and then use simd to check them 4 at a time every time we resolve an equals constraint?</p>",
        "id": 403814516,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700754929
    },
    {
        "content": "<p>but maybe everything is potentially recursive as far as we can tell</p>",
        "id": 403814580,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700754962
    },
    {
        "content": "<p>so I guess one of the questions is \"when to check\" right?</p>",
        "id": 403817642,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700756072
    },
    {
        "content": "<p>(I realize I'm catching up on a lot of questions you've probably already thought of, appreciate the patience <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span>)</p>",
        "id": 403817703,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700756104
    },
    {
        "content": "<p>it seems like if we tried to do a full check after resolving every eq constraint, that would be what worse than if we just did one pass at the end, before mono</p>",
        "id": 403818268,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700756359
    },
    {
        "content": "<p>although I guess that depends a lot on cache behavior</p>",
        "id": 403818403,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700756410
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/395097-compiler-development/topic/Allowing.20implicit.20cycles.20in.20the.20type.20representation/near/403817642\">said</a>:</p>\n<blockquote>\n<p>so I guess one of the questions is \"when to check\" right?</p>\n</blockquote>\n<p>yeah</p>",
        "id": 403824870,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1700759329
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"454654\">Ayaz Hafiz</span> <a href=\"#narrow/stream/395097-compiler-development/topic/Allowing.20implicit.20cycles.20in.20the.20type.20representation/near/403503134\">said</a>:</p>\n<blockquote>\n<p>although i just had an idea. maybe it only matters to mark the recursion points during specialization (monomorphization)</p>\n</blockquote>\n<p>so what if we started with this, and then whenever we detect a recursion point during specialization, we go look up the name of the function we're specializing, look up its unspecializd type and canonical IR, and then do a check of that whole function looking for recursion points and writing them down in subs.</p>\n<p>That way, if any future specializations run into this, they will all use the same one.</p>",
        "id": 403967665,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700832363
    },
    {
        "content": "<p>the theory would be that this wouldn't come up often in practice, so doing extra work (but only 1 extra pass per recursion point, not N of them) would be fine in practice</p>",
        "id": 403967881,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700832436
    },
    {
        "content": "<blockquote>\n<p>whenever we detect a recursion point during specialization, we go look up the name of the function we're specializing, look up its unspecializd type and canonical IR, and then do a check of that whole function looking for recursion points and writing them down in subs.</p>\n</blockquote>\n<p>I'm not sure that this gets us much. Like, if there are specializations that force the recursion point to occur in a different place, then we still require another specialization - and now we may have two places in the type that we need to Box, instead of just one</p>",
        "id": 404027980,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1700866484
    },
    {
        "content": "<p>But I agree we should do this. More specializations has only the downside of more code to generate, and you can bound the number of specializations by using an explicit type annotation</p>",
        "id": 404028191,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1700866658
    }
]