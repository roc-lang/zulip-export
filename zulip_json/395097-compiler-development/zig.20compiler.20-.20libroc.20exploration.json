[
    {
        "content": "<p>I would like to throw some ideas around for <code>libroc</code> -- specifically for the usecase of embedding roc. </p>\n<p>I've discussed some of these usecases previously, but for the sake of discussion -- let's say I'm building a roc playground. I'd like to build a WASM module that runs in the browser. It accepts roc source code and the name of a top level ident e.g. <code>main!</code> and any arguments. The playground then uses <code>libroc</code> to parse, typecheck, and interpret the program. The platform is simple and the only effect available is <code>print!</code> which the playground uses to append to a textarea.</p>\n<p>From this example I have a few questions...</p>\n<ul>\n<li>How does roc load modules in a WASM vm? <ul>\n<li><code>libroc</code> probably needs to abstracts the file system and not be calling OS syscalls directly.</li>\n<li>Roc's \"module loader\" should probably take some function that it uses to load files e.g. soemthing like <code>Str -&gt; Result (List U8) [NotFound]</code> (using roc syntax). </li>\n<li>then for our WASM playground, we could have the \"files\" in small UI text editors in the browser, and JS can pass use those in as required.</li>\n</ul>\n</li>\n<li>How does <code>libroc</code> expose the API for working with the compiler stages.<ul>\n<li>Is there a function for calling <code>parse</code>, <code>check_types</code>, <code>interpret</code> and passing the IR between these stages?</li>\n<li>Are the IR's easy to work with? maybe these are serialised and deserialised to a common format somehow?</li>\n</ul>\n</li>\n<li>Could <code>libroc</code> be a Zig package? or should it be a C library?</li>\n<li>Does the <code>libroc</code> compile nicely to WASM 32-bit target?</li>\n<li>Does <code>libroc</code> have an interpreter in it? or does the playground just have a canonicalised IR and need to do it's own interpreting? What about builtin things like working with <code>Dec</code> or <code>Dict</code>?</li>\n</ul>\n<p>Does this use case sound reasonable? Is there anything obvious here I'm missing?</p>",
        "id": 497300237,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738537464
    },
    {
        "content": "<p>There is a lot here that is new to me, so I would appreciate any feedback. I may be off on a random tangent hallucinating ways to doing things.</p>",
        "id": 497300615,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738537777
    },
    {
        "content": "<p>hm, so I just realized that actually <code>libroc</code> might be the wrong way to think about this <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 497300779,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738537890
    },
    {
        "content": "<p>I don't think we'd want to produce a single library for this</p>",
        "id": 497300802,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738537912
    },
    {
        "content": "<p>rather, I think we'd want to have the platform be able to build a custom library which includes both the interpreter <em>and</em> the platform-specific entrypoint functions</p>",
        "id": 497300896,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738537972
    },
    {
        "content": "<p>hmm</p>",
        "id": 497300941,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738538026
    },
    {
        "content": "<p>actually maybe it doesn't matter after all, nm it can work either way</p>",
        "id": 497300983,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738538042
    },
    {
        "content": "<p>I assume it would be a zig/c library that can compile to wasm (or any other target). It also would be exposed by the roc executable if you load it as a shared library (assuming we can make it work).</p>",
        "id": 497301340,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738538345
    },
    {
        "content": "<p>I am assuming it will be how the shim works. The shim will load the roc compiler as a shared library and launch the interpreter. So It will directly use libroc (I guess that forces it to be a cffi library)</p>",
        "id": 497301376,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738538397
    },
    {
        "content": "<p>Lol, is this the library version of inception?</p>",
        "id": 497301459,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738538443
    },
    {
        "content": "<p>Its a really nice technique to bundle roc with libroc assuming it works (I feel like I have seen this before, but not sure it works on all platforms)</p>",
        "id": 497303059,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738539712
    },
    {
        "content": "<p>ok so let's say there's a <code>libroc</code> which exposes a C function which:</p>\n<ul>\n<li>accepts the binary contents of the app module to run (e.g. the bytes found in <code>main.roc</code>, or if it's wasm, some bytes in memory)</li>\n<li>accepts the usual struct of function pointers for the allocator etc</li>\n<li>accepts the Roc argument as a pointer (aside: I think we decided elsewhere that we were going to always have the Roc functions accept a single arg from the host as a pointer, and then tuple them up if desired, in order to simplify the ABI - right?)</li>\n<li>accepts a pointer to the return value, which the roc function will populate</li>\n</ul>",
        "id": 497303071,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738539716
    },
    {
        "content": "<blockquote>\n<p>accepts the binary contents of the app module to run (e.g. the bytes found in <code>main.roc</code>, or if it's wasm, some bytes in memory)</p>\n</blockquote>\n<p>Not this. It will get the file data by calling <code>roc_load</code> which will be in the struct of function pointers with the allocator. Cause it will need <code>roc_load</code> anyway to load other files.</p>",
        "id": 497303318,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738539837
    },
    {
        "content": "<p>and then it also accepts a function pointer which takes a path and returns the source bytes associated with that path, or an error if they couldn't be read</p>",
        "id": 497303360,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738539845
    },
    {
        "content": "<p>yeah <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> seems necessary to allow loading other modules</p>",
        "id": 497303436,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738539906
    },
    {
        "content": "<p>and I guess we could say give me a starting point path and I'll go look it up in there, but kinda seems like unnecessary indirection</p>",
        "id": 497303463,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738539929
    },
    {
        "content": "<p>Yeah, just need the function, shouldn't need <code>main.roc</code> cause you can use the function to get <code>main.roc</code></p>",
        "id": 497303469,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738539934
    },
    {
        "content": "<p>but that works too, sure</p>",
        "id": 497303480,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738539941
    },
    {
        "content": "<blockquote>\n<p>and I guess we could say give me a starting point path and I'll go look it up in there, but kinda seems like unnecessary indirection</p>\n</blockquote>\n<p>I think we need this for the shim</p>",
        "id": 497303502,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738539956
    },
    {
        "content": "<p>Cause the shim will get compiled once, but <code>main.roc</code> source may change between calls</p>",
        "id": 497303567,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738539975
    },
    {
        "content": "<p>ah sure</p>",
        "id": 497303572,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738539982
    },
    {
        "content": "<p>ok fair enough!</p>",
        "id": 497303575,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738539986
    },
    {
        "content": "<p>anyway, so then the other piece of this is getting help from glue to correctly translate the Roc args and return value to/from the host language</p>",
        "id": 497303646,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738540060
    },
    {
        "content": "<blockquote>\n<p>aside: I think we decided elsewhere that we were going to always have the Roc functions accept a single arg from the host as a pointer, and then tuple them up if desired, in order to simplify the ABI - right?</p>\n</blockquote>\n<p>I would rather fix c abi, but either is ultimately fine.</p>\n<p>For <code>libroc</code> I think it should take a list of tags to specify the types and a list of pointers to specify the args.</p>",
        "id": 497303706,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738540085
    },
    {
        "content": "<p>The shim would deal with filling in that information (maps stadard cffi like we use with llvm to this interpreter form). Otherwise, the platform author is required to fill in the info if they want to use libroc directly.</p>",
        "id": 497303738,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738540124
    },
    {
        "content": "<p>Taking types as a list separate from the actual args avoids the nesting problem where you have to box everything. Instead it can use the flat representation, but have a nested spec that explains the underlying type layout.</p>",
        "id": 497303900,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738540257
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/395097-compiler-development/topic/zig.20compiler.20-.20libroc.20exploration/near/497303706\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>aside: I think we decided elsewhere that we were going to always have the Roc functions accept a single arg from the host as a pointer, and then tuple them up if desired, in order to simplify the ABI - right?</p>\n</blockquote>\n<p>I would rather fix c abi, but either is ultimately fine.</p>\n</blockquote>\n<p>we can always do that later and relax the restriction, but this is astronomically easier to make correct <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 497304228,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738540524
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/395097-compiler-development/topic/zig.20compiler.20-.20libroc.20exploration/near/497303706\">said</a>:</p>\n<blockquote>\n<p>For <code>libroc</code> I think it should take a list of tags to specify the types and a list of pointers to specify the args.</p>\n</blockquote>\n<p>hm, so what's the benefit of this compared to using glue to just generate the correct calls? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 497304326,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738540587
    },
    {
        "content": "<p>a downside is the runtime validation on every call</p>",
        "id": 497304339,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738540604
    },
    {
        "content": "<p>Would <code>libroc</code> allow for it to be fully embeddable?  I.e., could the control be inverted?</p>",
        "id": 497305755,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738541462
    },
    {
        "content": "<p>Yes, that is exactly the plan. Fully embedded and control inverted</p>",
        "id": 497307136,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738542511
    },
    {
        "content": "<p>So not necessarilly any glue when using libroc</p>",
        "id": 497307143,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738542518
    },
    {
        "content": "<p>In my mind, using libroc directly should be as nice as using embedded python or Lua interpreters.</p>",
        "id": 497307318,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738542647
    },
    {
        "content": "<p>That would be awesome, would make it easier to make my Love2D for Roc port...</p>",
        "id": 497307460,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738542741
    },
    {
        "content": "<p>Been doing Love2D with my daughter for a month, and while I don't mind Lua, I like Roc <em>a lot</em> more. :-)</p>",
        "id": 497307498,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738542780
    },
    {
        "content": "<p>In a perfect world for libroc, I don't even need a <code>main.roc</code>. I can load any module and call onto it directly and even run a string of roc code directly.</p>",
        "id": 497307664,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738542910
    },
    {
        "content": "<p>hm, I don't think that works</p>",
        "id": 497309348,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738544222
    },
    {
        "content": "<p>it's more common than not for a <code>module</code> to refer to package shorthands like <code>cli.</code></p>",
        "id": 497309383,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738544252
    },
    {
        "content": "<p>to know what those resolve to, you have to have loaded a <code>main.roc</code></p>",
        "id": 497309387,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738544261
    },
    {
        "content": "<p>Assuming we want to eventually enable this:</p>\n<blockquote>\n<p>In my mind, using libroc directly should be as nice as using embedded python or Lua interpreters.</p>\n</blockquote>\n<p>I think something more dynamic is required</p>",
        "id": 497309458,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738544306
    },
    {
        "content": "<p>so that could only possibly work in the specific scenario where I'm loading a <code>module</code> which only imports other local <code>module</code>s and none of them ever tries to <code>import</code> from any package whatsoever</p>",
        "id": 497309459,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738544308
    },
    {
        "content": "<p>Though maybe it needs to be at the package boundary, not sure</p>",
        "id": 497309479,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738544331
    },
    {
        "content": "<p>Like I should be able to load some random roc library and call code in it</p>",
        "id": 497309494,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738544344
    },
    {
        "content": "<p>it seems like in practice ~100% of use cases for this will want a package</p>",
        "id": 497309498,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738544348
    },
    {
        "content": "<p>sure, that's fine</p>",
        "id": 497309503,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738544355
    },
    {
        "content": "<p>well, except for the restrictions we have on host-exposed functions <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 497309526,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738544382
    },
    {
        "content": "<p>like closures have to be boxed</p>",
        "id": 497309530,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738544385
    },
    {
        "content": "<p>I assume all closures in the interpretter will be boxed, so that should be fine</p>",
        "id": 497309617,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738544417
    },
    {
        "content": "<p>hmmm interesting</p>",
        "id": 497309651,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738544447
    },
    {
        "content": "<p>I think they have to be cause we won't have run any form of specialization</p>",
        "id": 497309675,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738544479
    },
    {
        "content": "<p>yeah for sure, I'm just trying to think of the layout implications</p>",
        "id": 497309684,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738544491
    },
    {
        "content": "<p>in the non-<code>libroc</code> case</p>",
        "id": 497309702,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738544504
    },
    {
        "content": "<p>I'm gonna put it on the other thread haha</p>",
        "id": 497309710,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738544511
    },
    {
        "content": "<p>I'm very glad. I brought this whole topic up... <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 497309771,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738544534
    },
    {
        "content": "<p>yeah I guess loading any package or app should work</p>",
        "id": 497309828,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738544591
    },
    {
        "content": "<p>and then once you've loaded it, you can call anything in any of its exposed modules</p>",
        "id": 497309837,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738544604
    },
    {
        "content": "<p>but I still don't think that affects this:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20calling.20roc/near/497309295\">said</a>:</p>\n<blockquote>\n<p>in other words, <code>libroc</code> can expose a function which is exactly the same interface as <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> except for 3 extra arguments:</p>\n<ol>\n<li>The path to main.roc</li>\n<li>The function to go from a path to a .roc file to its source bytes</li>\n<li>The name of the entrypoint function within main.roc that I want to call</li>\n</ol>\n</blockquote>",
        "id": 497309912,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738544646
    },
    {
        "content": "<p>for reference, the <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> was referring to:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20calling.20roc/near/497308928\">said</a>:</p>\n<blockquote>\n<p>Normal platforms only see a single interface. That interface is:</p>\n<blockquote>\n<h3>Platform -&gt; Roc standard FFI</h3>\n<ol>\n<li>A pointer to write the return data to</li>\n<li>A record of function pointers (only allocators functions and <code>roc_load</code>)</li>\n<li>N pointers, one for each arg.</li>\n</ol>\n</blockquote>\n<p>That is all they see period. Anything libroc is an implementation detail and not exposed to the platform.</p>\n</blockquote>",
        "id": 497309941,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738544680
    },
    {
        "content": "<p>Via libroc, I should be able to call a function with a type variable. So that requires specifying the type somehow</p>",
        "id": 497309952,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738544695
    },
    {
        "content": "<p>ahh interesting</p>",
        "id": 497309979,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738544712
    },
    {
        "content": "<p>ok yeah that's something hosts can't do</p>",
        "id": 497309986,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738544718
    },
    {
        "content": "<p>but seems reasonable to do when loading a package or something at runtime</p>",
        "id": 497309996,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738544729
    },
    {
        "content": "<p><span aria-label=\"100\" class=\"emoji emoji-1f4af\" role=\"img\" title=\"100\">:100:</span></p>",
        "id": 497310012,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738544739
    },
    {
        "content": "<p>cool, that makes sense to me then! <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 497310019,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738544745
    },
    {
        "content": "<p>btw I do think in general that if I'm embedding Roc into a larger program, I'm going to want to use glue to generate the bindings anyway</p>",
        "id": 497310077,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738544773
    },
    {
        "content": "<p>just because that makes it easier to get the types right</p>",
        "id": 497310087,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738544792
    },
    {
        "content": "<p>That's fair, though the interpreter has to get types right somehow without glue. So it can't be that bad to use</p>",
        "id": 497310149,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738544865
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20libroc.20exploration/near/497309952\">said</a>:</p>\n<blockquote>\n<p>Via libroc, I should be able to call a function with a type variable. So that requires specifying the type somehow</p>\n</blockquote>\n<p>Is this definitely something we want to support? would this be used for building a REPL or similar thing around <code>libroc</code>?</p>\n<p>I thought the \"interface\" of a roc program was defined in the platform's <code>main.roc</code> file with the exposed entry-points. (and anything crossing the roc-host boundary has a fixed known size and concrete type)</p>",
        "id": 497310527,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738545174
    },
    {
        "content": "<p>If we don't support it, I don't think there is much of a point to supporting the libroc use case. Just use the standard flow instead.</p>",
        "id": 497310643,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738545261
    },
    {
        "content": "<p>When embedding Lua or python, one of the huge gains is the dynamic ability to interact with anything</p>",
        "id": 497310664,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738545282
    },
    {
        "content": "<p>Python makes this possible by making everything a pyobject. That encodes all of the type info.</p>",
        "id": 497310875,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738545444
    },
    {
        "content": "<p>I think something similar will be needed for the repl flow. At any breakpoint in the repl, I should be able to query a variable for all methods it has and then call one. That call might have a type variable in it.</p>",
        "id": 497311000,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738545546
    },
    {
        "content": "<p>I should be able to return from the repl to the platform at any point. Then the platform should be able to do something with the object I return (whatever type it may be).</p>",
        "id": 497311044,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738545601
    },
    {
        "content": "<p>I highly suggest playing around with embedded Lua or python. There is a lot of flexibility (though often also verbosity in generating objects of specific tagged types)</p>",
        "id": 497311118,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738545640
    },
    {
        "content": "<p>I thought I'd make a PR to get some feedback <br>\n<a href=\"https://github.com/roc-lang/roc/pull/7575\">https://github.com/roc-lang/roc/pull/7575</a></p>",
        "id": 497622256,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738662796
    },
    {
        "content": "<p>I personally wouldn't setup a libroc now. I think libroc will be tailored around the interpreter and cut out a lot of the rest of the compiler. So don't really want random stuff going in now before we know exactly what it needs.</p>",
        "id": 497712471,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738687885
    },
    {
        "content": "<p>Especially given libroc is more an experimental idea than something we know will work out.</p>",
        "id": 497712531,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738687910
    },
    {
        "content": "<p>Probably will naturally get setup when trying to hook up the first platform to the interpreter and that will probably lead to first a static config and then a lot of learnings</p>",
        "id": 497712771,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738687970
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> <a href=\"https://github.com/roc-lang/roc/pull/7575#discussion_r1941595335\">said</a></p>\n<blockquote>\n<p>If we make a full featured lib roc, we should probably make <code>main.zig</code> strictly build roc via the same interfaces as <code>libroc</code>. That ensures they stay in sync.</p>\n</blockquote>\n<blockquote>\n<p>That said, I'm not sold we want a full featured lib roc. I think we likely want a super small shim lib roc that only has the ability to interact with the intepreter.</p>\n</blockquote>\n<p>Is there any reason we wouldn't want a full featured libroc?</p>\n<p>I assumed we would implement the cli, repl, formatter, LSP etc using it.</p>",
        "id": 497744158,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738698624
    },
    {
        "content": "<p>In my mind, Libroc is a c library. Those would all just be zig libraries and part of the regular code base (with only the exception being the lsp I guess).</p>",
        "id": 497746189,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738699297
    },
    {
        "content": "<p>Even for the lsp, it would not use Libroc with the proposed plan. It would work like glue where the compiler is the platform</p>",
        "id": 497746317,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738699336
    },
    {
        "content": "<p>And the compiler loads a shared library that is the lsp (or runs it via the interpreter)</p>",
        "id": 497746385,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738699365
    },
    {
        "content": "<blockquote>\n<p>Libroc is a c library</p>\n</blockquote>\n<p>Even if it's just a super simple implementation. I was thinking of making a platform/host example of fully embedding roc using rust/zig.</p>\n<p>I was thinking I could start on things like the playground, or LSP, even if most of it is stubbed out... so we can get a feeling for how it will all come together in future.</p>",
        "id": 497766201,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738707063
    }
]