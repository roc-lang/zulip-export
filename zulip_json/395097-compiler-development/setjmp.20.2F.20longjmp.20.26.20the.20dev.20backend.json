[
    {
        "content": "<p>it looks like setjmp/longjmp is very simple actually</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;stdlib.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;stdio.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;setjmp.h&gt;</span>\n\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"kt\">jmp_buf</span><span class=\"w\"> </span><span class=\"n\">env</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">;</span>\n\n<span class=\"w\">  </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">setjmp</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"i = %d</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">);</span>\n\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n\n<span class=\"w\">  </span><span class=\"n\">longjmp</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>then we get the following (relevant) assembly </p>\n<div class=\"codehilite\"><pre><span></span><code>0000000000201e20 &lt;main&gt;:\n  201e20:   55                      push   rbp\n  201e21:   48 89 e5                mov    rbp,rsp\n  201e24:   53                      push   rbx\n  201e25:   48 81 ec c8 00 00 00    sub    rsp,0xc8\n  201e2c:   48 8d bd 30 ff ff ff    lea    rdi,[rbp-0xd0]\n  201e33:   e8 48 05 00 00          call   202380 &lt;__setjmp&gt;\n  201e38:   89 c3                   mov    ebx,eax\n  201e3a:   48 8d 3d 8f e3 ff ff    lea    rdi,[rip+0xffffffffffffe38f]        # 2001d0 &lt;xdigits-0xb0&gt;\n  201e41:   31 c0                   xor    eax,eax\n  201e43:   89 de                   mov    esi,ebx\n  201e45:   e8 61 05 00 00          call   2023ab &lt;printf&gt;\n  201e4a:   85 db                   test   ebx,ebx\n  201e4c:   75 16                   jne    201e64 &lt;main+0x44&gt;\n  201e4e:   48 8d bd 30 ff ff ff    lea    rdi,[rbp-0xd0]\n  201e55:   be 02 00 00 00          mov    esi,0x2\n  201e5a:   e8 f9 04 00 00          call   202358 &lt;_longjmp&gt;\n  201e5f:   67 0f b9 40 01          ud1    eax,DWORD PTR [eax+0x1]\n  201e64:   31 ff                   xor    edi,edi\n  201e66:   e8 be 04 00 00          call   202329 &lt;exit&gt;\n  201e6b:   67 0f b9 40 01          ud1    eax,DWORD PTR [eax+0x1]\n\n0000000000202380 &lt;__setjmp&gt;:\n  # note: the stack pointer is not updated here. most functions would do something like\n  # 2023ab:   48 81 ec d8 00 00 00    sub    rsp,0xd8\n\n  # save relevant registers. Apparently r8 ..= r11 are volatile and don&#39;t need to be stored?\n  202380:   48 89 1f                mov    QWORD PTR [rdi],rbx # store the env argument in the rdi register\n  202383:   48 89 6f 08             mov    QWORD PTR [rdi+0x8],rbp # base pointer\n  202387:   4c 89 67 10             mov    QWORD PTR [rdi+0x10],r12\n  20238b:   4c 89 6f 18             mov    QWORD PTR [rdi+0x18],r13\n  20238f:   4c 89 77 20             mov    QWORD PTR [rdi+0x20],r14\n  202393:   4c 89 7f 28             mov    QWORD PTR [rdi+0x28],r15\n  # the stack pointer after the jump. I&#39;m not totally sure yet why the +0x8 is there\n  # (or really why +8, and not +0x10 or anything else).\n  202397:   48 8d 54 24 08          lea    rdx,[rsp+0x8]\n  20239c:   48 89 57 30             mov    QWORD PTR [rdi+0x30],rdx\n  # the actual jump address \n  2023a0:   48 8b 14 24             mov    rdx,QWORD PTR [rsp]\n  2023a4:   48 89 57 38             mov    QWORD PTR [rdi+0x38],rdx\n  # set the return value (rax register) to 0\n  2023a8:   31 c0                   xor    eax,eax\n  2023aa:   c3                      ret\n\n0000000000202358 &lt;_longjmp&gt;:\n  # again no stack pointer update\n\n  # I believe what this achieves is to always store something nonzero\n  # so that the setjmp call &quot;returns&quot; nonzero when it is jumped to\n  202358:   31 c0                   xor    eax,eax\n  20235a:   83 fe 01                cmp    esi,0x1\n  20235d:   11 f0                   adc    eax,esi\n  # edi stores the env. here we read back all of the registers\n  20235f:   48 8b 1f                mov    rbx,QWORD PTR [rdi]\n  202362:   48 8b 6f 08             mov    rbp,QWORD PTR [rdi+0x8]\n  202366:   4c 8b 67 10             mov    r12,QWORD PTR [rdi+0x10]\n  20236a:   4c 8b 6f 18             mov    r13,QWORD PTR [rdi+0x18]\n  20236e:   4c 8b 77 20             mov    r14,QWORD PTR [rdi+0x20]\n  202372:   4c 8b 7f 28             mov    r15,QWORD PTR [rdi+0x28]\n  202376:   48 8b 67 30             mov    rsp,QWORD PTR [rdi+0x30]\n  # jump to right after the original `setjmp` call.\n  20237a:   ff 67 38                jmp    QWORD PTR [rdi+0x38]\n</code></pre></div>\n\n<p>so, we just need a way to put that <code>jmp_buf env</code> in global memory, and then a way to retrieve that value when a longjmp is needed (i.e. in roc_panic)</p>",
        "id": 377638371,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1690042271
    },
    {
        "content": "<p>nice! <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 377640678,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1690043006
    },
    {
        "content": "<p>that would unblock using the dev backend in <code>roc repl</code> and <code>roc test</code>, right?</p>",
        "id": 377640778,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1690043040
    },
    {
        "content": "<p>it's a big step for sure</p>",
        "id": 377640869,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1690043061
    },
    {
        "content": "<p>we still need <code>map2</code> and some other builtins too</p>",
        "id": 377640892,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1690043070
    },
    {
        "content": "<p>What is the plan for using <code>setjmp</code>/<code>longjmp</code>? Recover from a crash at the boundary with a host? <span aria-label=\"happy\" class=\"emoji emoji-1f600\" role=\"img\" title=\"happy\">:happy:</span></p>",
        "id": 377652151,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1690046909
    },
    {
        "content": "<p>basically</p>",
        "id": 377657135,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1690048898
    },
    {
        "content": "<p>for the repl and tests, for the dev backend we need something to return control to the host when a roc_panic happens</p>",
        "id": 377657246,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1690048939
    },
    {
        "content": "<p>By the way</p>\n<div class=\"codehilite\"><pre><span></span><code>  i = setjmp(env);\n</code></pre></div>\n<p>Though widely supported, this is undefined behaviour.<br>\nOfficially you're only allowed to immediately branch based on the return value (or fully ignore it), but not to store it anywhere. (<a href=\"https://en.cppreference.com/w/c/program/setjmp\">source</a>) So if there is any data we want to keep between the <code>longjump</code> and the <code>setjmp</code> we'd need to set aside one more global variable for it.</p>\n<p>Not sure whether we care, though <span aria-label=\"angel\" class=\"emoji emoji-1f47c\" role=\"img\" title=\"angel\">:angel:</span> . I am not aware of any C targets where this does not work <em>in practice</em>, even though strictly speaking it is UB.</p>",
        "id": 377685526,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1690062881
    },
    {
        "content": "<p>ah, yes. I knew this, but just copied an example from the internet (it was from a university course, too). But luckily, there is no UB in assembly</p>",
        "id": 377821428,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1690115142
    },
    {
        "content": "<blockquote>\n<p>But luckily, there is no UB in assembly</p>\n</blockquote>\n<p><span aria-label=\"100\" class=\"emoji emoji-1f4af\" role=\"img\" title=\"100\">:100:</span> !!</p>",
        "id": 377822485,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1690115405
    },
    {
        "content": "<p>I've been working through the errors to try and get zig builtins tests working on Windows and I've hit a bit of a snag I think with setjmp/longjmp. It's not entirely related to this thread, but posting here as it may be related. </p>\n<p>Basically I'm currently getting the following error and not sure how to resolve this. </p>\n<div class=\"codehilite\"><pre><span></span><code>lld-link: error: undefined symbol: setjmp\n&gt;&gt;&gt; referenced by C:\\Users\\bosyl\\Documents\\GitHub\\roc\\crates\\compiler\\builtins\\bitcode\\src\\main.zig:242\n&gt;&gt;&gt;               src\\zig-cache\\o\\e65f97141b821227497b14c04e9fd551\\test.obj:(__roc_force_setjmp)\n\nlld-link: error: undefined symbol: longjmp\n&gt;&gt;&gt; referenced by C:\\Users\\bosyl\\Documents\\GitHub\\roc\\crates\\compiler\\builtins\\bitcode\\src\\main.zig:245\n&gt;&gt;&gt;               src\\zig-cache\\o\\e65f97141b821227497b14c04e9fd551\\test.obj:(__roc_force_longjmp)\nerror: LLDReportedFailure\n</code></pre></div>\n<p>The related code is in <code>crates\\compiler\\builtins\\bitcode\\src\\main.zig</code> I think with </p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"c1\">// Utils continued - SJLJ</span>\n<span class=\"c1\">// For tests (in particular test_gen), roc_panic is implemented in terms of</span>\n<span class=\"c1\">// setjmp/longjmp. LLVM is unable to generate code for longjmp on AArch64 (https://github.com/roc-lang/roc/issues/2965),</span>\n<span class=\"c1\">// so instead we ask Zig to please provide implementations for us, which is does</span>\n<span class=\"c1\">// (seemingly via musl).</span>\n<span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"kr\">extern</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">setjmp</span><span class=\"p\">([</span><span class=\"o\">*</span><span class=\"n\">c</span><span class=\"p\">]</span><span class=\"kt\">c_int</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">c_int</span><span class=\"p\">;</span>\n<span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"kr\">extern</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">longjmp</span><span class=\"p\">([</span><span class=\"o\">*</span><span class=\"n\">c</span><span class=\"p\">]</span><span class=\"kt\">c_int</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">c_int</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">noreturn</span><span class=\"p\">;</span>\n<span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"kr\">extern</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">_setjmp</span><span class=\"p\">([</span><span class=\"o\">*</span><span class=\"n\">c</span><span class=\"p\">]</span><span class=\"kt\">c_int</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">c_int</span><span class=\"p\">;</span>\n<span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"kr\">extern</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">_longjmp</span><span class=\"p\">([</span><span class=\"o\">*</span><span class=\"n\">c</span><span class=\"p\">]</span><span class=\"kt\">c_int</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">c_int</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">noreturn</span><span class=\"p\">;</span>\n<span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"kr\">extern</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">sigsetjmp</span><span class=\"p\">([</span><span class=\"o\">*</span><span class=\"n\">c</span><span class=\"p\">]</span><span class=\"kt\">c_int</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">c_int</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">c_int</span><span class=\"p\">;</span>\n<span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"kr\">extern</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">siglongjmp</span><span class=\"p\">([</span><span class=\"o\">*</span><span class=\"n\">c</span><span class=\"p\">]</span><span class=\"kt\">c_int</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">c_int</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">noreturn</span><span class=\"p\">;</span>\n<span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"kr\">extern</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">longjmperror</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"kt\">void</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Zig won't expose the externs (and hence link correctly) unless we force them to be used.</span>\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">__roc_force_setjmp</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">*</span><span class=\"n\">c</span><span class=\"p\">]</span><span class=\"kt\">c_int</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">callconv</span><span class=\"p\">(.</span><span class=\"n\">C</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">c_int</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">setjmp</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">__roc_force_longjmp</span><span class=\"p\">(</span><span class=\"n\">a0</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">*</span><span class=\"n\">c</span><span class=\"p\">]</span><span class=\"kt\">c_int</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a1</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">c_int</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">callconv</span><span class=\"p\">(.</span><span class=\"n\">C</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">noreturn</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">longjmp</span><span class=\"p\">(</span><span class=\"n\">a0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a1</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>My question, how do I ensure zig links in something with these on Windows?</p>",
        "id": 378680789,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1690353660
    },
    {
        "content": "<p>Figured a workaround that seems to work, all the tests pass now <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> </p>\n<div class=\"codehilite\"><pre><span></span><code>fn roc_setjmp_windows_stub(it: [*c]c_int) callconv(.C) c_int {\n    _ = it;\n    return 0;\n}\n\nfn roc_longjmp_windows_stub(a0: [*c]c_int, a1: c_int) callconv(.C) noreturn {\n    _ = a0;\n    _ = a1;\n    std.os.exit(1);\n}\n\ncomptime {\n    if (builtin.os.tag == .windows) {\n        @export(roc_longjmp_windows_stub, .{ .name = &quot;longjmp&quot;, .linkage = .Strong });\n        @export(roc_setjmp_windows_stub, .{ .name = &quot;setjmp&quot;, .linkage = .Strong });\n    }\n}\n</code></pre></div>",
        "id": 378687546,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1690355532
    },
    {
        "content": "<p>I'm getting close with this <a href=\"https://github.com/roc-lang/roc/pull/5699\">https://github.com/roc-lang/roc/pull/5699</a></p>",
        "id": 378947956,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1690406229
    },
    {
        "content": "<p>on x86_64 linux, anyway</p>",
        "id": 378947988,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1690406240
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> is your work related to Windows at all? I'm just wondering if there is anything I can/should do to assist here.</p>",
        "id": 378975019,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1690419538
    },
    {
        "content": "<p>eventually, maybe. but I suspect there are other dev backend tests that fail too right now</p>",
        "id": 379032273,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1690442103
    },
    {
        "content": "<p>maybe try <code>cargo nextest-gen-dev --no-fail-fast</code> and see what happens on main today</p>",
        "id": 379032629,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1690442194
    }
]