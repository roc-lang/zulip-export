[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"496321\">@Oskar Hahn</span> left some helpful comments on the zig template upgrade, one of which I found interesting and wanted to ask about.</p>\n<blockquote>\n<p>Currently, libc is also needed for the inline-expect. But there is the plan to solve inline-expect the same way then dbg. If this is implemented, then a zig-roc-binary would not need libc and could be statically linked.</p>\n</blockquote>\n<p>Do we have plans/any issues to track this work? </p>\n<p>I assume the idea is that the platform provides a <code>roc_expect</code> effect that gets called when we hit an inline expectation.</p>",
        "id": 484000800,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732314133
    },
    {
        "content": "<p>Yes</p>",
        "id": 484007971,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732318230
    },
    {
        "content": "<p>I filed an issue for it a long while back</p>",
        "id": 484007987,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732318240
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/issues/6930\">https://github.com/roc-lang/roc/issues/6930</a></p>",
        "id": 484008251,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732318427
    },
    {
        "content": "<p>Just looking at that change... it looks like we should at least put the effect into basic-cli and basic-webserver etc so it's ready for this change in future, even if it's not used currently. </p>\n<blockquote>\n<p>Update all platforms to have <code>roc_expect_failed</code> with the api: <code>fn roc_expect_failed(loc: *RocStr, src: *RocStr, variables: *RocList&lt;{name: RocStr, value: RocStr}&gt;)</code>.</p>\n</blockquote>\n<p>Are we happy with this name still? I kind of like the idea of just <code>roc_expect</code> but don't mind the longer version.</p>",
        "id": 484017283,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732324291
    },
    {
        "content": "<p>Original proposal <a href=\"#narrow/channel/395097-compiler-development/topic/roc_expect_failed/near/418463775\">https://roc.zulipchat.com/#narrow/channel/395097-compiler-development/topic/roc_expect_failed/near/418463775</a></p>",
        "id": 484017448,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732324410
    },
    {
        "content": "<p>I think it's clearer with the longer name - like this only gets called when an expectation fails</p>",
        "id": 484017464,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1732324423
    },
    {
        "content": "<p>I'm thinking I'll add it into the purity inference PR... unless you would prefer a separate PR for it?</p>",
        "id": 484017612,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732324531
    },
    {
        "content": "<p>That will save merge conflicts when we land that</p>",
        "id": 484017630,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732324545
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/basic-cli/pull/271\">https://github.com/roc-lang/basic-cli/pull/271</a></p>",
        "id": 484018406,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732325090
    },
    {
        "content": "<p>Ad it to purity inference?</p>",
        "id": 484020186,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732326651
    },
    {
        "content": "<p>^^^ this PR is based of the purity-inference branch in basic-cli and is a PR to merge back into that.</p>",
        "id": 484020235,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732326691
    },
    {
        "content": "<p>As opposed to the main branch</p>",
        "id": 484020245,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732326703
    },
    {
        "content": "<p>I'm a little lost, no one has done the work in the compiler to use expect this way</p>",
        "id": 484020275,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732326723
    },
    {
        "content": "<p>I think that will be a medium sized lift. More work than debug was</p>",
        "id": 484020313,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732326737
    },
    {
        "content": "<p>I wouldn't expect it to be ready for a while.</p>",
        "id": 484020320,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732326749
    },
    {
        "content": "<p>Yeah, but adding into the host means that when we do it won't be a breaking change/easier to test.</p>",
        "id": 484020327,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732326757
    },
    {
        "content": "<p>I'm starting to think the dbg, expect and passed in allocators is my highest priority over new syntax or build pipeline stuff</p>",
        "id": 484020344,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732326784
    },
    {
        "content": "<p>Oh, just adding the effect to the host now ....sure, though wouldn't be surprised if the API changes while implementing, but could add it</p>",
        "id": 484020360,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732326804
    },
    {
        "content": "<p>It just has a big impact on the platform development, and there are things I want to do with roc-ray and this stuff is really holding us back</p>",
        "id": 484020367,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732326811
    },
    {
        "content": "<p>Got it</p>",
        "id": 484020378,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732326827
    },
    {
        "content": "<p>Makes sense</p>",
        "id": 484020381,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732326830
    },
    {
        "content": "<p>Yeah, I hope the API doesn't change too much... this may be too premature</p>",
        "id": 484020453,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732326882
    },
    {
        "content": "<blockquote>\n<p>I think that will be a medium sized lift. More work than debug was</p>\n</blockquote>\n<p>Where in the compiler is all this work? Is it mostly backend/code gen related?</p>",
        "id": 484020481,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732326920
    },
    {
        "content": "<p>Looking at the linked PRs would help</p>",
        "id": 484028045,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732333796
    },
    {
        "content": "<p>Some of it is in ripping out a lot of test infra and runtime loading that deals with expect today</p>",
        "id": 484028099,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732333819
    },
    {
        "content": "<p>Some is in the pipeline of how expect is lowered</p>",
        "id": 484028116,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732333846
    },
    {
        "content": "<p>Code gen is where this bottoms out but should be relatively minimal</p>",
        "id": 484028129,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732333864
    },
    {
        "content": "<p>When you are talking about the API of these functions:</p>\n<p>The current API for dbg is:</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">roc_dbg</span><span class=\"p\">(</span><span class=\"n\">loc</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">RocStr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">msg</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">RocStr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">RocStr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">callconv</span><span class=\"p\">(.</span><span class=\"n\">C</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">void</span>\n</code></pre></div>\n<p>When I remember correctly, then the third argument was added in December 2023. The idea was, that it was added as a third argument, so it is backward compatible. But the order should change after AoC2023.</p>\n<p>So I think some API changes are very likely and therefore it is not helpful to add the functions to the platform at the moment.</p>",
        "id": 484040399,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1732346063
    },
    {
        "content": "<p>I tired to remove the stuff needed for the inline expect from my <a href=\"https://github.com/ostcar/roc-aoc-platform/blob/aad81884030f831d210c9ece70f81a637acc1c74/host/host.zig#L183-L202\">aoc-platform</a> and I can confirm, that without it, libc is not needed and you get a statically linked binary:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ roc build days/day01.roc\n0 errors and 0 warnings found in 307 ms\n while successfully building:\n\n    days/day01\n\n$ ldd days/day01\n        statically linked\n</code></pre></div>",
        "id": 484057720,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1732362078
    },
    {
        "content": "<p>What is needed for inline expect today? Why does it need libc?</p>",
        "id": 484075729,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732377920
    },
    {
        "content": "<p>As far as I know, it needs <a href=\"https://github.com/ostcar/roc-aoc-platform/blob/0fea9d1d1617d2657c2177ce4f76e7dc11c9d0dc/host/host.zig#L183-L185\">shm_open, mmap and getppid</a></p>",
        "id": 484078208,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1732380131
    },
    {
        "content": "<p>Yes, if I do not export <code>roc_getppid</code>, <code>roc_mmap</code> or <code>roc_shm_open</code>, inline expect does not work. And I don't know how to implement them manually.</p>",
        "id": 484078447,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1732380350
    },
    {
        "content": "<p>Ah</p>",
        "id": 484080702,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732382148
    },
    {
        "content": "<p>Yeah I guess those need libc or direct os system calls....but libc is the easy way</p>",
        "id": 484080752,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732382164
    },
    {
        "content": "<p>Forgot about those primitives. Yeah, they would get removed with these changes</p>",
        "id": 484080762,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732382183
    },
    {
        "content": "<p>Made a start on this change <a href=\"https://github.com/roc-lang/roc/pull/7256\">https://github.com/roc-lang/roc/pull/7256</a></p>\n<p>I have no idea how big this change will be... but figured I'd give it a go. </p>\n<p>So far I've got to this point... looks to be calling my low level (from llvm) and passing in some values I hardcoded in Can. I need to figure out how to thread the source and location in from Parse to Can, it looks a bit different than how Dbg does things.</p>\n<p>Also, no idea why this \"traps\"... probably need to run on linux and/or use a debugger to figure that out. </p>\n<div class=\"codehilite\"><pre><span></span><code>$ cargo run -- test examples/platform-switching/rocLovesZig.roc\nFinished dev [unoptimized + debuginfo] target(s) in 0.58s\n     Running `target/debug/roc test examples/platform-switching/rocLovesZig.roc`\n[HOW DO WE GET SOURCE TO CAN?] HOW DO WE GET SOURCE TO CAN? = TODO IMPLEMENT ME!\nTrace/BPT trap: 5\n</code></pre></div>",
        "id": 484848551,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732775381
    }
]