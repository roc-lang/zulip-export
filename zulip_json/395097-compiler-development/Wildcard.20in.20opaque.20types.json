[
    {
        "content": "<p>Should it be possible to use a wildcard inside an opaque type? This feels like something I should be able to do. I understand I can use a type variable, but that seems unnecessary.</p>\n<div class=\"codehilite\"><pre><span></span><code>module [Custom]\n\nCustom := {\n    number : Frac *\n}\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>── WILDCARD NOT ALLOWED HERE in example.roc ────────────────────────────────────\n\nThe definition of Custom includes a wildcard (*) type variable:\n\n4│      number : Frac *\n                      ^\n\nOpaque type definitions may not use wildcard (*) type variables. Only\nnamed type variables are allowed.\n</code></pre></div>",
        "id": 491532710,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735769726
    },
    {
        "content": "<p>I think we should just remove wildcards and make this whole class of edge cases disappear</p>",
        "id": 491532790,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735769816
    },
    {
        "content": "<p>And then the answer is that you need to use a variable, because that ensures that all type cardinality is exposed outside of types</p>",
        "id": 491532824,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735769873
    },
    {
        "content": "<p>Otherwise, the usage of <code>Custom</code> sans type args doesn't always mean that <code>Custom</code> is a static type</p>",
        "id": 491532891,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735769922
    },
    {
        "content": "<p>Which seems like a trust issue</p>",
        "id": 491532897,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735769930
    },
    {
        "content": "<p>Even without removing wildcards, I still think you should need to write</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">Custom</span><span class=\"w\"> </span><span class=\"nv\">frac</span><span class=\"w\"> </span><span class=\"nf\">:=</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nv\">number</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Frac</span><span class=\"w\"> </span><span class=\"nv\">frac</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>and use it as <code>Custom *</code> or <code>Custom _</code> or <code>Custom frac</code></p>",
        "id": 491532932,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735769996
    },
    {
        "content": "<p>I've currently just used a concrete type <code>F32</code>, and expect my API consumers to convert to that. Minor inconvenience if they have a <code>Dec</code> or <code>F64</code></p>",
        "id": 491532986,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735770024
    },
    {
        "content": "<p>That's probably fine</p>",
        "id": 491532998,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735770040
    },
    {
        "content": "<p>Why not F64? Seems constrictive to use the smaller float type</p>",
        "id": 491533011,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735770065
    },
    {
        "content": "<p>I want a floating value in the range <code>0-1</code></p>",
        "id": 491533023,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735770086
    },
    {
        "content": "<p>I definitely don't need an <code>F64</code> precision</p>",
        "id": 491533038,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735770097
    },
    {
        "content": "<p>Oh, yeah, makes sense</p>",
        "id": 491533052,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735770116
    }
]