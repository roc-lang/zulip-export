[
    {
        "content": "<p>Im somewhat embarrassed to ask but could someone please give me a short, informal explanation<br>\non the concept and role of <a href=\"https://github.com/roc-lang/roc/blob/main/crates/compiler/types/src/subs.rs\">Subs</a> ?</p>",
        "id": 425774825,
        "sender_full_name": "Miilyn",
        "timestamp": 1710078542
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"231634\" href=\"/#narrow/stream/231634-beginners/topic/Learning.20about.20the.20.02klzzwxh.3A0000.03.20type.2E\">#beginners &gt; Learning about the <code>Subs</code> type.</a> by <span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span>.</p>",
        "id": 425776783,
        "sender_full_name": "Notification Bot",
        "timestamp": 1710080089
    },
    {
        "content": "<p>nothing to be embarrassed about, it's a great question! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 425776802,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710080101
    },
    {
        "content": "<p><code>Subs</code> is short for \"substitutions\"</p>",
        "id": 425776814,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710080108
    },
    {
        "content": "<p>I like to think of it as a type information database</p>",
        "id": 425776824,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710080121
    },
    {
        "content": "<p>each entry into it is a <code>Variable</code> (which could have also been called <code>TypeId</code> if we were thinking of it as a database)</p>",
        "id": 425776848,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710080141
    },
    {
        "content": "<p>and then that <code>Variable</code> maps to a <code>Content</code> (essentially the \"value\" part of the key-value pair in the database)</p>",
        "id": 425776857,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710080156
    },
    {
        "content": "<p>a very important part of it is that values can be \"symlinks\"</p>",
        "id": 425776906,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710080174
    },
    {
        "content": "<p>in other words, \"this type maps to whatever this other type is\"</p>",
        "id": 425776910,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710080183
    },
    {
        "content": "<p>so if you have like</p>\n<div class=\"codehilite\"><pre><span></span><code>x = y\ny = z\nz = blah\n</code></pre></div>",
        "id": 425776937,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710080203
    },
    {
        "content": "<p>then we know that:</p>\n<ul>\n<li>the type of <code>x</code> is the same as whatever the type  of <code>y</code> is</li>\n<li>the type of <code>y</code> is the same as whatever the type  of <code>z</code> is</li>\n<li>the type of <code>z</code> is the same as whatever the type  of <code>blah</code> is</li>\n</ul>",
        "id": 425776986,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710080244
    },
    {
        "content": "<p>but the symlinks get collapsed automatically</p>",
        "id": 425776999,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710080257
    },
    {
        "content": "<p>so for example here, whenever we ask \"hey what's the type of <code>x</code>?\" we don't want to jump through all those hops through <code>y</code> and <code>z</code> to get to \"oh, <code>x</code> has the same type as <code>blah</code>\"</p>",
        "id": 425777071,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710080285
    },
    {
        "content": "<p>so instead we compress it in the database to just say <code>x</code> has the same type as <code>blah</code> - like that's what we symlink <code>x</code> directly to</p>",
        "id": 425777096,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710080314
    },
    {
        "content": "<p>this happens during type inference</p>",
        "id": 425777101,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710080319
    },
    {
        "content": "<p>we make sure that we never have more than 1 \"symlink hop\"</p>",
        "id": 425777121,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710080340
    },
    {
        "content": "<p>this keeps type inference fast</p>",
        "id": 425777128,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710080343
    },
    {
        "content": "<p>Yes, exactly. So it's also considered a crucial part of <strong>Canonicalization</strong>, right?</p>",
        "id": 425777136,
        "sender_full_name": "Miilyn",
        "timestamp": 1710080350
    },
    {
        "content": "<p>canonicalization happens before all of this</p>",
        "id": 425777143,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710080359
    },
    {
        "content": "<p>canonicalization basically goes around and creates a new <code>Variable</code> (aka <code>TypeId</code>) for everything we're going to do type inference on (e.g. every expression, every pattern, etc.)</p>",
        "id": 425777213,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710080405
    },
    {
        "content": "<p>but it doesn't actually do anything with them yet, it just sort of hands out the IDs</p>",
        "id": 425777238,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710080430
    },
    {
        "content": "<p>then after canonicalization, we have constraint generation, which generates a <code>Constraint</code> data structure which describes how each of the <code>Variable</code>s relates to each other (e.g. \"x has the same type as y\" is a constraint, or maybe \"foo is a <code>Str</code>\" because we had <code>foo = \"...\"</code> and we know that string literals have the type <code>Str</code>)</p>",
        "id": 425777299,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710080479
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/395097-compiler-development/topic/Learning.20about.20the.20.60Subs.60.20type.2E/near/425777096\">said</a>:</p>\n<blockquote>\n<p>so instead we compress it in the database to just say <code>x</code> has the same type as <code>blah</code> - like that's what we symlink <code>x</code> directly to</p>\n</blockquote>\n<p>Is that \"deduplication\" of types related to what you and Ayaz were talking about on the podcast in regards to \"lambda set defunctionalization\" ?</p>",
        "id": 425777332,
        "sender_full_name": "Miilyn",
        "timestamp": 1710080517
    },
    {
        "content": "<p>and then finally we have the \"solving\" step, where we go through and take the initial <code>Subs</code> (which just has a bunch of uninitialized <code>Variable</code>s in it) and iterate through all the constraints to apply them to the <code>Subs</code></p>",
        "id": 425777381,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710080528
    },
    {
        "content": "<p>such that at the end of solving, we have a complete <code>Subs</code> type database and can ask it \"hey what's the type of this <code>Variable</code> I have here?\" and it can always answer that question correctly</p>",
        "id": 425777396,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710080546
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"699204\">Miilyn</span> <a href=\"#narrow/stream/395097-compiler-development/topic/Learning.20about.20the.20.60Subs.60.20type.2E/near/425777332\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/395097-compiler-development/topic/Learning.20about.20the.20.60Subs.60.20type.2E/near/425777096\">said</a>:</p>\n<blockquote>\n<p>so instead we compress it in the database to just say <code>x</code> has the same type as <code>blah</code> - like that's what we symlink <code>x</code> directly to</p>\n</blockquote>\n<p>Is that \"deduplication\" of types related to what you and Ayaz were talking about on the podcast in regards to \"lambda set defunctionalization\" ?</p>\n</blockquote>\n<p>not really - it's called a union-find data structure, and type checkers that use Hindley-Milner type inference (like Roc, Elm, Haskell, etc. do) basically all use it</p>",
        "id": 425777458,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710080597
    },
    {
        "content": "<p>regardless of whether they have lambda sets</p>",
        "id": 425777463,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710080604
    },
    {
        "content": "<p>Ok, I will have to digest and do further research from here.<br>\nIt's a wonderful starting point, Im super grateful. Thank you for generously taking the time to explain.</p>",
        "id": 425777908,
        "sender_full_name": "Miilyn",
        "timestamp": 1710080892
    },
    {
        "content": "<p>happy to help! <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 425777995,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710080977
    },
    {
        "content": "<p>I learned a lot from this thread <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span>, thanks!</p>",
        "id": 425791768,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1710093580
    },
    {
        "content": "<p>Me too</p>",
        "id": 425801797,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1710101372
    },
    {
        "content": "<p>I think Ayaz started on a longer guide for compiler internals <a href=\"https://github.com/roc-lang/roc/blob/main/crates/compiler/DESIGN.md\">https://github.com/roc-lang/roc/blob/main/crates/compiler/DESIGN.md</a></p>",
        "id": 425801897,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1710101443
    },
    {
        "content": "<p>It would be good to flesh that out if anyone is doing research and learns something. Im sure even a few dot points would be helpful for the next person.</p>",
        "id": 425802108,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1710101634
    },
    {
        "content": "<p>That doc could definitely use some love, but also feel free to ask any questions here anytime!</p>",
        "id": 426846751,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1710551321
    }
]