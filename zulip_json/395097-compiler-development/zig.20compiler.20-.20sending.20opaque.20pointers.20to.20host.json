[
    {
        "content": "<p>we currently have a special way to send polymorphic types: you declare a special concrete type in the application module (<code>Model</code> is the classic example of this) and then this ends up being an opaque pointer (<code>void*</code>) in the host</p>",
        "id": 520308134,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1748192346
    },
    {
        "content": "<p>this solves the problem of needing to send things to the host whose size varies based on the application</p>",
        "id": 520308260,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1748192418
    },
    {
        "content": "<p>but this was always intended to be a stopgap until we figured out a way to offer an API like what Elm does, which is based on normal type variables and has essentially no learning curve for users</p>",
        "id": 520308333,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1748192503
    },
    {
        "content": "<p>I finally thought of a way to do this!</p>",
        "id": 520308585,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1748192718
    },
    {
        "content": "<p>so the goal would be to have a platform which asks the application to provide something of this type:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">init</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">(()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">model</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"n\">update</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">event</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">event</span><span class=\"p\">))),</span>\n<span class=\"w\">    </span><span class=\"n\">view</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Elem</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">)),</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 520308686,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1748192802
    },
    {
        "content": "<p>the platform would get this from the application, and then convert it to the following before sending it to the host:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">main_for_host</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">init</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">(()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"n\">update</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">Box</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">Box</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"p\">(()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">)))),</span>\n<span class=\"w\">    </span><span class=\"n\">view</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">Box</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Elem</span><span class=\"p\">(</span><span class=\"nb\">Box</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">)))</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 520308847,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1748192920
    },
    {
        "content": "<p>the basic idea here is that all functions and type variables that get sent to the host must be wrapped in a <code>Box</code>, which gives them a statically knowable size and makes the ABI boundary easy to get right</p>",
        "id": 520308920,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1748192979
    },
    {
        "content": "<p>the host can't statically know the type that's inside the box - e.g. when we generate the glue, the host will see it as essentially a <code>Box&lt;void&gt;</code> and it has no way to look inside it to see what's in there because the host knows nothing about its size or shape</p>",
        "id": 520309055,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1748193078
    },
    {
        "content": "<p>but that's fine, because the point of these is that the host doesn't need to; the host obtains the value from Roc and then all it ever does with that value is pass it back to Roc later at the appropriate time</p>",
        "id": 520309143,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1748193131
    },
    {
        "content": "<p>an obvious downside of this design is that it requires boxing at the boundary</p>",
        "id": 520309192,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1748193171
    },
    {
        "content": "<p>I think (but don't know for sure) that we can optimize <code>Box.map()</code> to avoid unboxing and re-boxing, such that in <code>update</code> in there, we only end up allocating a single <code>model</code> in practice for the life of the program, and then updating that one in-place many times</p>",
        "id": 520309335,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1748193285
    },
    {
        "content": "<p><code>event</code> (named <code>msg</code> in Elm) would need boxing every time, but they should be very small allocations, so hopefully that's ok in practice</p>",
        "id": 520309378,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1748193333
    },
    {
        "content": "<p>the functions themselves would be inside a <code>Box</code>, but since they'd be top-level functions with no captures, they wouldn't actually be on the heap; they'd basically be function pointers plus a refcount that's always hardcoded to the special \"immortal\" refcount</p>",
        "id": 520309499,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1748193430
    },
    {
        "content": "<p>so assuming all that's true, it should result in:</p>\n<ul>\n<li>an ergonomic API for application authors</li>\n<li>a simple compilation model</li>\n<li>an amount of runtime overhead that is small enough that it's likely insignificant in practice</li>\n</ul>",
        "id": 520309655,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1748193538
    },
    {
        "content": "<p>and then we don't need any new language features, we just have errors if you try to define a platform which sends functions to the host that contain type variables or functions that aren't wrapped in a <code>Box</code></p>",
        "id": 520309777,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1748193612
    },
    {
        "content": "<p>a nice thing about this design is that it means if the perf is a problem in practice, we haven't closed the door to making it more flexible in the future somehow (e.g. allowing unboxed type variables to be passed to the host) - although note that Folkert and I spent months trying to get that to work correctly and reliably, and ended up giving up.</p>\n<p>it's not impossible, but it's so astronomically difficult that I'm very convinced we should not attempt it unless the vastly simpler \"box at the boundary\" design hits performance problems in practice</p>",
        "id": 520309949,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1748193751
    },
    {
        "content": "<p>anyway, that seems like the way to go for the new compiler...any thoughts welcome on the subject!</p>",
        "id": 520310002,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1748193802
    },
    {
        "content": "<p>Yeah. I thought we already agreed on doing this. Specifically that everything going to the host must be concrete or behind a pointer. So <code>List model</code> should also be fine.</p>",
        "id": 520311037,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1748194682
    },
    {
        "content": "<blockquote>\n<p>I think (but don't know for sure) that we can optimize <code>Box.map()</code> to avoid unboxing and re-boxing, such that in <code>update</code> in there, we only end up allocating a single <code>model</code> in practice for the life of the program, and then updating that one in-place many times</p>\n</blockquote>\n<p>Probably not quite without invasive transforms that  would require deep analysis, but minimizing cost should definitely be doable. Specific making sure the write back is correct is the hard part. Cause you may make the new struct in a subfunction that still has access to the original struct. So inplace mutations would be problematic. But we definitely can reduce a couple of copies</p>",
        "id": 520311177,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1748194809
    },
    {
        "content": "<p>we agreed on it for closures but I don't remember it in the context of type variables...but either way, seems like the way to go! <span aria-label=\"smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 520312825,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1748196230
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/395097-compiler-development/topic/zig.20compiler.20-.20sending.20opaque.20pointers.20to.20host/near/520311177\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>I think (but don't know for sure) that we can optimize <code>Box.map()</code> to avoid unboxing and re-boxing, such that in <code>update</code> in there, we only end up allocating a single <code>model</code> in practice for the life of the program, and then updating that one in-place many times</p>\n</blockquote>\n<p>Probably not quite without invasive transforms that  would require deep analysis, but minimizing cost should definitely be doable. Specific making sure the write back is correct is the hard part. Cause you may make the new struct in a subfunction that still has access to the original struct. So inplace mutations would be problematic. But we definitely can reduce a couple of copies</p>\n</blockquote>\n<p>yeah one way I think this could work well in practice is:</p>\n<ul>\n<li>we code gen a special version of <code>Box.map</code> for the specific case where it's given an <code>a -&gt; b</code> function that doesn't change the input and output type</li>\n<li>in that version, if the refcount is 1, then we pass the closure a pointer to the struct which the closure can mutate in-place, and there is no write-back</li>\n<li>that reduces the hard part to \"how do we detect that the struct on the stack inside the closure is unique?\" - previously Morphic would have done this, but we could make use of the fact that the pointer we'll have will be to an address with a refcount right in front of it (bc it's pointing to the memory inside the <code>Box</code>) which means we can look at that refcount to determine uniqueness. This would require an extra <code>Layout</code> for like a \"refcounted struct\" but I believe it could work!</li>\n</ul>",
        "id": 520328083,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1748209034
    },
    {
        "content": "<p>Sure, but in most cases, you aren't guaranteed to finish reading the struct before trying to edit it.</p>\n<p>In practice, I assume the function would be like this:</p>\n<ol>\n<li>No matter the refcount, if the struct is large, pass by constant reference. So just pass a pointer to the data</li>\n<li>read the data and create a new version on the stack</li>\n<li>if the refcount is 1, write back to the original box.</li>\n</ol>",
        "id": 520345501,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1748225004
    },
    {
        "content": "<p>hm, could be</p>",
        "id": 520347074,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1748226057
    }
]