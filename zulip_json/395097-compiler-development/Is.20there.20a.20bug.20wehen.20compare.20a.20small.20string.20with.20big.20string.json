[
    {
        "content": "<p>I am looking at the zig implementation of RocStr and I am not sure, if there is a bug: <a href=\"https://github.com/roc-lang/roc/blob/be827982478bdbe74e90c6b3517fa3aecedf020c/crates/compiler/builtins/bitcode/src/str.zig#L186-L192\">https://github.com/roc-lang/roc/blob/be827982478bdbe74e90c6b3517fa3aecedf020c/crates/compiler/builtins/bitcode/src/str.zig#L186-L192</a></p>\n<p>The code assumes, that when the <code>len</code> of two strings are different, then the strings are not equal. But I am not sure, if this is true.</p>\n<p>If a platform returns a shot string like \"hello world\", but it does not return it as a short string. Instead, it returns it on the heap with <code>{ptr: 0x123, len: 11, cap: 11}</code> and this string gets compared in the roc code with the short string \"hello world\" (on the stack), then the len is (probably) unequal, but the strings should be the same.</p>",
        "id": 412808168,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1705232759
    },
    {
        "content": "<p>Check how the len method works.</p>",
        "id": 412823170,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1705245558
    },
    {
        "content": "<p>It's implemented differently for long and short strings.</p>",
        "id": 412823196,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1705245582
    },
    {
        "content": "<p>You could write a Zig test for it if you want to confirm.</p>",
        "id": 412823340,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1705245719
    },
    {
        "content": "<p>Both representations of the \"hello world\" string have the same length value. Otherwise one of them would have to be wrong.<br>\nFor the short string, the length is contained in a single byte at the end. Maybe you are assuming the length of a short string is always 23 but that's not true.</p>",
        "id": 412825421,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1705247423
    },
    {
        "content": "<p>Its capacity is 23 though</p>",
        "id": 412825637,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1705247624
    },
    {
        "content": "<p>You are right and I am sorry.</p>\n<p>I mixed up <code>self.len()</code> with <code>self.length</code>.</p>\n<p>I tried to write a test, but was not able to run it. I tried <code>zig test str.zig</code>, but it returned:</p>\n<div class=\"codehilite\"><pre><span></span><code>zig test str.zig\nerror: ld.lld: undefined symbol: getppid\n    note: referenced by utils.zig:36 ([...]crates/compiler/builtins/bitcode/src/utils.zig:36)\n    note:               [...]crates/compiler/builtins/bitcode/zig-cache/o/cb65059fe56dcfc1943415367f0a74a4/test.o:(roc_getppid)\nerror: ld.lld: undefined symbol: mmap\n    note: referenced by utils.zig:47 ([...]crates/compiler/builtins/bitcode/src/utils.zig:47)\n    note:               [...]crates/compiler/builtins/bitcode/zig-cache/o/cb65059fe56dcfc1943415367f0a74a4/test.o:(roc_mmap)\nerror: ld.lld: undefined symbol: shm_open\n    note: referenced by utils.zig:44 ([...]crates/compiler/builtins/bitcode/src/utils.zig:44)\n    note:               [...]crates/compiler/builtins/bitcode/zig-cache/o/cb65059fe56dcfc1943415367f0a74a4/test.o:(roc_shm_open)\n</code></pre></div>\n<p>How would you run it?</p>",
        "id": 412958114,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1705325578
    },
    {
        "content": "<p>In CI we use <code>zig build test</code> like <a href=\"https://github.com/roc-lang/roc/blob/main/crates/compiler/builtins/bitcode/run-tests.sh\">here</a>.</p>",
        "id": 412960821,
        "sender_full_name": "Anton",
        "timestamp": 1705326441
    },
    {
        "content": "<p>Nothing to be sorry for, it's good to get stuck in and question things!<br>\nYou have to run the tests through the build script. So don't pass the filename. Instead run all the tests. But then I think you can filter by test name with some option.</p>",
        "id": 412961051,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1705326503
    }
]