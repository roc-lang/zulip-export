[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/channel/395097-compiler-development/topic/casual.20conversation/near/523198291\">said</a>:</p>\n<blockquote>\n<p>we just make an \"interpolated string\" can IR node type</p>\n</blockquote>\n<p>So I spent a bit of time thinking about this and trying different things. After a while I realised we could use a <code>Expr.Span</code> here to represent both simple and complex interpolated strings, and only copy the bytes from our source into the module env string interner once.  </p>\n<p>Not sure if this is the best way to do it, but it seems to be working nicely. I've lumped the change in with my WIP Can PR if you want to see the snapshots and how it looks <a href=\"https://github.com/roc-lang/roc/pull/7820\">https://github.com/roc-lang/roc/pull/7820</a></p>\n<p>Here is the Can IR representation.</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"w\">    </span><span class=\"c1\">// A single segment of a string literal</span>\n<span class=\"w\">    </span><span class=\"c1\">// a single string may be made up of a span sequential segments</span>\n<span class=\"w\">    </span><span class=\"c1\">// for example if it was split across multiple lines</span>\n<span class=\"w\">    </span><span class=\"n\">str_segment</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">StringLiteral</span><span class=\"p\">.</span><span class=\"n\">Idx</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"c1\">// A string is combined of one or more segments, some of which may be interpolated</span>\n<span class=\"w\">    </span><span class=\"c1\">// An interpolated string contains one or more non-string_segment's in the span</span>\n<span class=\"w\">    </span><span class=\"n\">str</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Expr</span><span class=\"p\">.</span><span class=\"n\">Span</span><span class=\"p\">,</span>\n</code></pre></div>\n<p>And here is a demo from one of the snapshots showing it in action. </p>\n<div class=\"codehilite\"><pre><span></span><code>~~~META\ndescription=Simple string interpolation\ntype=expr\n~~~SOURCE\n&quot;Hello ${name}!&quot;\n~~~PROBLEMS\nCANONICALIZE: ident_not_in_scope\n~~~TOKENS\nStringStart(1:1-1:2),StringPart(1:2-1:8),OpenStringInterpolation(1:8-1:10),LowerIdent(1:10-1:14),CloseStringInterpolation(1:14-1:15),StringPart(1:15-1:16),StringEnd(1:16-1:17),EndOfFile(1:17-1:17),\n~~~PARSE\n(string (1:1-1:17)\n    (string_part (1:2-1:8) &quot;Hello &quot;)\n    (ident (1:10-1:14) &quot;&quot; &quot;name&quot;)\n    (string_part (1:15-1:16) &quot;!&quot;))\n~~~FORMATTED\nNO CHANGE\n~~~CANONICALIZE\n(string\n    (literal &quot;Hello &quot;)\n    (runtime_error (1:4-1:4) &quot;RUNTIME ERROR ident_not_in_scope&quot;)\n    (literal &quot;!&quot;))\n~~~END\n</code></pre></div>\n<p>Never mind the Can region info, I haven't got that reporting correctly.</p>",
        "id": 523542934,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1749642661
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/pull/7849\">#7849</a> -- DRAFT PR to make a start on type declarations and annotations. I've left a few questions in there <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span></p>",
        "id": 525117694,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1750466406
    },
    {
        "content": "<p>I'll take a look!</p>",
        "id": 525117711,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1750466449
    },
    {
        "content": "<p>the snapshot looks good to me!</p>",
        "id": 525117758,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750466529
    },
    {
        "content": "<p>To convince myself this is behaving correctly, I've continued to shave the yak. It's now another mammoth PR that implements most of can for type declarations, type annotations, and type aliases. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<p>I'm just polishing it now, but will push the latest draft up soon.</p>",
        "id": 525199845,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1750578106
    },
    {
        "content": "<p>I've pushed everything up to <a href=\"https://github.com/roc-lang/roc/pull/7849\">https://github.com/roc-lang/roc/pull/7849</a></p>\n<p>I will review again tomorrow and aim to merge what is already there (instead of adding more).</p>",
        "id": 525204596,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1750586104
    },
    {
        "content": "<p>Quick question: Currently the parsed AST put everything wrapped in <code>()</code> into a tuple node. In the event of a 1 element tuple, should canonicalization reinterpret that as just parenthesis and type the CIR node as the type of the single element?</p>",
        "id": 527037760,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1751560834
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"341568\">Jared Ramirez</span> <a href=\"#narrow/stream/395097-compiler-development/topic/zig.20compiler.20-.20canonicalization/near/527037760\">said</a>:</p>\n<blockquote>\n<p>Quick question: Currently the parsed AST put everything wrapped in <code>()</code> into a tuple node. In the event of a 1 element tuple, should canonicalization reinterpret that as just parenthesis and type the CIR node as the type of the single element?</p>\n</blockquote>\n<p>yes</p>",
        "id": 527042643,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751562723
    },
    {
        "content": "<p>a 1-tuple === parenthesized expr</p>",
        "id": 527042691,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751562742
    },
    {
        "content": "<p>and probably not needed in can strictly</p>",
        "id": 527042771,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751562780
    },
    {
        "content": "<p>Okay cool! Since Can is where we create/assign type vars, I think this makes sense to do there. But if anyone feels otherwise lmk!</p>",
        "id": 527052020,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1751566709
    },
    {
        "content": "<blockquote>\n<p>a 1-tuple === parenthesized expr</p>\n</blockquote>\n<p>this equality operator tells so much <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 527052190,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1751566807
    },
    {
        "content": "<p>Similarly, <code>()</code> parses into an empty tuple, so I think this should this be a can error? Something along the lines of <code>invalid blah, if you want to represent \"nothing\", use  {}</code>?</p>",
        "id": 527052639,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1751566964
    },
    {
        "content": "<p>yep <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 527055584,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751568122
    },
    {
        "content": "<p><code>()</code> should only be used in the types of 0-argument fns</p>",
        "id": 527055610,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751568131
    },
    {
        "content": "<p>e.g. <code>my_fn! : () =&gt; Str</code></p>",
        "id": 527055643,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751568144
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"584248\">Kiryl Dziamura</span> <a href=\"#narrow/stream/395097-compiler-development/topic/zig.20compiler.20-.20canonicalization/near/527052190\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>a 1-tuple === parenthesized expr</p>\n</blockquote>\n<p>this equality operator tells so much <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>\n</blockquote>\n<p>I am a TC-39 Delegate <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 527055767,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751568197
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"781658\">@Anthony Bullard</span> every time I hear you say that I can't help but imagine TC-39 is the name of a Star Wars droid, and your it's owner. </p>\n<p>Like, hey guys I own this badass K-2 droid.</p>",
        "id": 527083117,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751582788
    }
]