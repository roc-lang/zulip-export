[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453336\">Joshua Warner</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20spike/near/500301669\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> the reason I'd like not to just directly have a header/statements is I want this to be able to directly parse individual expressions both for testing and for repl evaluation</p>\n</blockquote>\n<p>Okay, then what's the best way to:</p>\n<ul>\n<li>parse just the headers, finding declared packages (and ideally save the parse position)</li>\n<li>parse a header and then a list of statements for canonicalization</li>\n</ul>",
        "id": 500302241,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739843357
    },
    {
        "content": "<p><a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/500302241\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"395097\" href=\"/#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20spike/with/497101907\">#compiler development &gt; zig compiler - spike</a> by <span class=\"user-mention silent\" data-user-id=\"453336\">Joshua Warner</span>.</p>",
        "id": 500305714,
        "sender_full_name": "Notification Bot",
        "timestamp": 1739845359
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span>  Why do you need to just parse the header? My intent would be to make parsing fast enough that parsing the whole file is plenty fast.</p>",
        "id": 500305829,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739845442
    },
    {
        "content": "<p>We'd want to parse just the header of the root <code>main.roc</code> of each app/package/platform to get their dep packages to discover the file trees of each package</p>",
        "id": 500305952,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739845504
    },
    {
        "content": "<p>But if it's  fast enough to just parse the whole thing, then no need</p>",
        "id": 500305977,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739845519
    },
    {
        "content": "<p>Also, if we persist said list of imported packages in the <code>CanIR</code>, then we can just pull it from the cache and keep around the <code>CanIR</code> until later</p>",
        "id": 500306074,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739845578
    },
    {
        "content": "<p>Cool. We can explore that optimization in the future. that does add a non-trivial amount of complexity though so I'd like to do the simple thing for now</p>",
        "id": 500306334,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739845748
    },
    {
        "content": "<p>Yeah, totally agreed</p>",
        "id": 500306475,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739845815
    },
    {
        "content": "<p>Ok, I think this test should get you going:</p>\n<div class=\"codehilite\"><pre><span></span><code>test &quot;canonicalize&quot; {\n    const source =\n        \\\\app [name] { pf: platform &quot;main.roc&quot; }\n        \\\\\n        \\\\name = &quot;Luke&quot;\n    ;\n\n    var parse_ir = parse.parse(std.testing.allocator, source);\n    var can_ir = IR.init(std.testing.allocator);\n    parse_ir.store.emptyScratch();\n    canonicalize(&amp;can_ir, &amp;parse_ir, std.testing.allocator);\n}\n</code></pre></div>",
        "id": 500311917,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739849867
    },
    {
        "content": "<p>The primary problem with the test you posted is just that module headers are not currently supported... and the particular way error recovery happens right now is looping forever (whoops!), which made that harder than expected to figure out.</p>",
        "id": 500312026,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739849936
    },
    {
        "content": "<p>(whoops left some debug stuff in; now removed)</p>",
        "id": 500312068,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739849970
    },
    {
        "content": "<p>Okay, this is a good start!</p>",
        "id": 500313484,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739850992
    },
    {
        "content": "<p>If I wanted to start looking at intern'ing for symbols in the tokenizer - is there an existing structure you're expecting that data to go into?</p>",
        "id": 500316848,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739853147
    },
    {
        "content": "<p>The interners in the <code>ModuleEnv</code> <a href=\"https://github.com/roc-lang/roc/blob/26f9416929aa0cd52ca732fc533b4a94a690de04/src/base/ModuleEnv.zig#L22\">https://github.com/roc-lang/roc/blob/26f9416929aa0cd52ca732fc533b4a94a690de04/src/base/ModuleEnv.zig#L22</a></p>",
        "id": 500317024,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739853283
    },
    {
        "content": "<p>Ideally, we'd put text in the \"right\" bucket:</p>\n<ul>\n<li>idents in <code>Ident.Store</code></li>\n<li>tag names and type names (e.g. the <code>List</code> of <code>List a</code>) in <code>TagName.Store</code></li>\n<li>field names in <code>FieldName.Store</code></li>\n<li>string literals in <code>StringLiteral.Store</code></li>\n</ul>",
        "id": 500317205,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739853402
    },
    {
        "content": "<p>But if that turns out to be difficult/not possible to do consistently during tokenization, then maybe we reduce down to just <code>Ident.Store</code></p>",
        "id": 500317249,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739853433
    },
    {
        "content": "<p>I can split lower and upper idents, that's about it.</p>",
        "id": 500317386,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739853545
    },
    {
        "content": "<p>I figured</p>",
        "id": 500317394,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739853551
    },
    {
        "content": "<p>At the layer of hashing, do they need to be in separate buckets?</p>",
        "id": 500317413,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739853577
    },
    {
        "content": "<p>Not sure what you mean by the layer of hashing</p>",
        "id": 500317425,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739853595
    },
    {
        "content": "<p>I think we should just make 2 buckets, <code>upper_idents</code> and <code>lower_idents</code></p>",
        "id": 500317504,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739853636
    },
    {
        "content": "<p>I'm thinking we can do something like:</p>\n<ul>\n<li>Have everything in the same bucket (indexable in the same index space)</li>\n<li>Tokenizer just throws everything in there and gets back an id, which it passes to the parser</li>\n<li>The parser receives that id, knows more about how it's used, and can wrap that in a safe wrapper type - FieldNameIdx, TagNameIdx, IdentNameIdx, etc</li>\n</ul>",
        "id": 500317624,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739853724
    },
    {
        "content": "<p>That works!</p>",
        "id": 500317653,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739853741
    },
    {
        "content": "<p>We'd want those IDs to be <em>pretty much</em> as granular as possible, within reason</p>",
        "id": 500317715,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739853792
    },
    {
        "content": "<p>Can you expand on that? Do you mean for the purpose of types? Or is it beneficial to have the id space be compact?</p>",
        "id": 500317757,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739853833
    },
    {
        "content": "<p>Which should mean:</p>\n<ul>\n<li>Ident.Idx</li>\n<li>ModuleName.Idx</li>\n<li>TagName.Idx</li>\n<li>FieldName.Idx</li>\n<li>TypeName.Idx</li>\n<li>TypeVarName.Idx</li>\n</ul>",
        "id": 500317823,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739853851
    },
    {
        "content": "<p>For the purpose of types</p>",
        "id": 500317832,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739853861
    },
    {
        "content": "<p>Using a single bucket makes the most sense</p>",
        "id": 500317845,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739853871
    },
    {
        "content": "<p>I'm not actually sure how much benefit there is for having these distinct types compared to just <code>LowerIdent.Idx</code> and <code>UpperIdent.Idx</code></p>",
        "id": 500318384,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739854233
    },
    {
        "content": "<p>The <code>TagName</code> and <code>FieldName</code> stuff is an artifact from the <code>specialize_types</code> prototype from <span class=\"user-mention\" data-user-id=\"489294\">@Agus Zubiaga</span></p>",
        "id": 500318408,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739854258
    },
    {
        "content": "<p>I think we can just start with a single <code>SmallStringInterner</code> that we have <code>UpperIndex.Idx</code> and <code>LowerIdent.Idx</code> both point into</p>",
        "id": 500318536,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739854329
    },
    {
        "content": "<p>In Ident.Store:</p>\n<div class=\"codehilite\"><pre><span></span><code>pub fn insert(self: *Store, ident: Ident, region: Region, problems: *std.ArrayList(Problem)) Idx {\n</code></pre></div>\n<p>... I'm a little worried about the overhead of alloc'ing an ArrayList of Problem for every ident.</p>\n<p>I'm also somewhat concerned at doing the interning in the tokenizer based on this Ident type, since these:</p>\n<div class=\"codehilite\"><pre><span></span><code>/// Attributes of the identifier such as if it is effectful, ignored, or reassignable.\nattributes: Attributes,\n</code></pre></div>\n<p>... are things we don't really know at this point in compiling and I'm hesitant to create a lie; I think that'll lead to issues down the road.</p>\n<p>Furthermore:</p>\n<div class=\"codehilite\"><pre><span></span><code>/// Problems with the identifier\n/// e.g. if it has two underscores in a row\n/// or if it starts with a lowercase then it shouldn&#39;t be `lowerCamelCase`, it must be `snake_case`\nproblems: Problems,\n</code></pre></div>\n<p>These are things that IMO should be reported as diagnostics in the tokenizer, and none of the rest of the compiler should really need to track (or care about at all).</p>\n<p>I'm thinking instead I'd like to do interning on a lower-level type that _only_ represents the text, giving a simple intern'd string id (u32) and nothing else.</p>\n<p>Thoughts <span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> / <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> ?</p>",
        "id": 500555197,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739935629
    },
    {
        "content": "<p>I assumed the point of passing in problems like that would be to just have one for the whole pass that gets passed around, and each call may or may not push problems onto it</p>",
        "id": 500556931,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739936826
    },
    {
        "content": "<p>(as opposed to allocating a new one each time)</p>",
        "id": 500556944,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739936842
    },
    {
        "content": "<p>Possibly</p>",
        "id": 500557221,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739937047
    },
    {
        "content": "<p>But given what's currently in <code>Problems</code>, I don't see why the design would warrant that</p>",
        "id": 500557315,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739937115
    },
    {
        "content": "<p>There is no need to dynamically allocate these. and the ones that are there right now probably ought to be just tokenizer diagnostics.</p>",
        "id": 500557409,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739937153
    },
    {
        "content": "<p>So I guess, the question is what might be in there in the future that would justify this?</p>",
        "id": 500557420,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739937170
    },
    {
        "content": "<p>I expect there was some discussion about this that I just was not part of and want to make sure I'm not missing anything</p>",
        "id": 500557448,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739937204
    },
    {
        "content": "<p>I don't think we've really discussed it in any detail. Sam has just been developing these data types and structures as a best effort based on what we know so far, so we have something to start with. We expect them to evolve a lot as we go.</p>",
        "id": 500559362,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739938412
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/500556931\">said</a>:</p>\n<blockquote>\n<p>I assumed the point of passing in problems like that would be to just have one for the whole pass that gets passed around, and each call may or may not push problems onto it</p>\n</blockquote>\n<p>This</p>",
        "id": 500559771,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739938705
    },
    {
        "content": "<p>The reason I put the problems as a mutable reference was so that you knew as a caller that your problems on the Ident would be reported on interning</p>",
        "id": 500559818,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739938764
    },
    {
        "content": "<p>It prevents someone from forgetting to intern the problems</p>",
        "id": 500559828,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739938780
    },
    {
        "content": "<p>We could alternatively pass the problem reference to the Ident.Store, but that gets us closer to pointer jungle</p>",
        "id": 500559901,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739938807
    },
    {
        "content": "<p>So this seems less tangled from bird's eye view</p>",
        "id": 500559917,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739938821
    },
    {
        "content": "<p>Minor note, this may be the wanted type for storing problems: <a href=\"https://ziglang.org/documentation/master/std/#std.BoundedArray\">https://ziglang.org/documentation/master/std/#std.BoundedArray</a></p>",
        "id": 500560128,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739938960
    },
    {
        "content": "<p>Do you think we're just going with UpperString and LowerString for interners, or are we having all the different variants?</p>",
        "id": 500560150,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739938972
    },
    {
        "content": "<p>as opposed to slices and counts or growing arraylists</p>",
        "id": 500560178,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739938986
    },
    {
        "content": "<p>What's the use case for some later compiler stage knowing that an identifier has a subsequent_underscores problem? That should have already been reported in the tokenizer.</p>",
        "id": 500561784,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739940173
    },
    {
        "content": "<p>So we can report that to the user as a warning?</p>",
        "id": 500561986,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739940311
    },
    {
        "content": "<p>I'm not sure why we store a list of problems in the Ident though</p>",
        "id": 500562090,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739940385
    },
    {
        "content": "<blockquote>\n<p>What's the use case for some later compiler stage knowing that an identifier has a subsequent_underscores problem?</p>\n</blockquote>\n<p>I think the goal is to collect all problems and then dispatch in one place to decide exactly how everything is reported to the end users.</p>",
        "id": 500562102,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739940402
    },
    {
        "content": "<p>I thought all the Problems would be stored in the ModuleEnv</p>",
        "id": 500562103,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739940403
    },
    {
        "content": "<p>I'm guessing this field can be removed, because we store all the problems in ModuleEnv</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"c1\">/// Problems with the identifier</span>\n<span class=\"c1\">/// e.g. if it has two underscores in a row</span>\n<span class=\"c1\">/// or if it starts with a lowercase then it shouldn't be `lowerCamelCase`, it must be `snake_case`</span>\n<span class=\"n\">problems</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Problems</span><span class=\"p\">,</span>\n</code></pre></div>",
        "id": 500562160,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739940466
    },
    {
        "content": "<p>Makes sense</p>",
        "id": 500562657,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739940794
    },
    {
        "content": "<p>How is this intended to work?</p>\n<div class=\"codehilite\"><pre><span></span><code>/// Identifier attributes such as if it is effectful, ignored, or reassignable packed into 3-bits.\npub const Attributes = packed struct(u3) {\n    effectful: bool,\n    ignored: bool,\n    reassignable: bool,\n};\n</code></pre></div>",
        "id": 500562665,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739940805
    },
    {
        "content": "<p>Those are things that will be different for different instantiations of the same identifier</p>",
        "id": 500562675,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739940823
    },
    {
        "content": "<p>e.g. the same name used in as different local variables in two different functions</p>",
        "id": 500562690,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739940840
    },
    {
        "content": "<p>This is a very good point...</p>",
        "id": 500562743,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739940852
    },
    {
        "content": "<p>Actually</p>",
        "id": 500562774,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739940890
    },
    {
        "content": "<p>I guess reassignable would be the <code>_</code> suffix, effectful would be the <code>!</code> suffix, and ignored would be the <code>_</code> prefix?</p>",
        "id": 500562781,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739940901
    },
    {
        "content": "<p>Maybe that is actually a textual property of the identifier</p>",
        "id": 500562798,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739940911
    },
    {
        "content": "<p>The tokenizer will actually know those already, so we can just pass those in pre-computed</p>",
        "id": 500563083,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739941164
    },
    {
        "content": "<p>Easy enough</p>",
        "id": 500563088,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739941167
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453336\">Joshua Warner</span> <a href=\"#narrow/stream/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/500562798\">said</a>:</p>\n<blockquote>\n<p>Maybe that is actually a textual property of the identifier</p>\n</blockquote>\n<p>This was the plan yes</p>",
        "id": 500567333,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739944125
    },
    {
        "content": "<p>How do those attributes apply to things like uppercase idents, field names, etc?</p>",
        "id": 500569825,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739945612
    },
    {
        "content": "<p>They don't, which is part of the reason why they used to be separate</p>",
        "id": 500570203,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739945822
    },
    {
        "content": "<p>But it seems to be cheap enough to just set the attributes to all false, AKA zero, and leave them in there</p>",
        "id": 500570270,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739945873
    },
    {
        "content": "<p>However, if those attributes are easier to parse unilaterally, then having them for non idents, e.g. for ignored field names in record builders, they'll just get ignored</p>",
        "id": 500570670,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739946111
    },
    {
        "content": "<p>Ok cool</p>",
        "id": 500572694,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739947157
    },
    {
        "content": "<p>Initial PR for integrating interning in the tokenizer: <a href=\"https://github.com/roc-lang/roc/pull/7624\">https://github.com/roc-lang/roc/pull/7624</a></p>",
        "id": 500572731,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739947171
    },
    {
        "content": "<p>PR for parsing the new <code>match</code> expression and some more patterns: <a href=\"https://github.com/roc-lang/roc/pull/7626\">https://github.com/roc-lang/roc/pull/7626</a></p>",
        "id": 500890397,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740061251
    },
    {
        "content": "<p>Make sure to keep an eye on this test, as it is the \"everything implemented right now\" test:</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"k\">test</span><span class=\"w\"> </span><span class=\"s\">\"Syntax grab bag\"</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"n\">moduleFmtsSame</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\app [main!] { pf: platform \"../basic-cli/platform.roc\" }</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\import pf.Stdout</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\add_one_oneline = |num| if num 2 else 5</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\add_one = |num| {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    other = 1</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    if num {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        dbg some_func()</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        0</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    } else {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        other</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    }</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\}</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\match_time = |a| {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    match a {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        Blue -&gt; 47,</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        Green -&gt; 19,</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        Red -&gt; 12,</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        lower -&gt; 1,</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        [1, 2, 3, .. as rest] -&gt; 123,</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        3.14 -&gt; 314,</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    }</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\}</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\main! = |_| {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    world = \"World\"</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    number = 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    tag = Blue</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    tag_with_payload = Ok(number)</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    interpolated = \"Hello, ${world}\"</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    list = [add_one(number), 456, 789]</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    Stdout.line!(interpolated)?</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    Stdout.line!(\"How about ${Num.toStr(number)} as a string?\")</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\}</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Let me know if anything looks wrong here.</p>",
        "id": 500890713,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740061310
    },
    {
        "content": "<p>I'll try to get Tags with payloads and record patterns parsing this afternoon (and probably Tuple patterns)</p>",
        "id": 500891297,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740061420
    },
    {
        "content": "<p>My plan after that is Type decls and Type annotations</p>",
        "id": 500891401,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740061443
    },
    {
        "content": "<p>And then the hard stuff - Tuples, Records, and BinOps</p>",
        "id": 500891562,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740061461
    },
    {
        "content": "<p>If someone needs/wants something done sooner (like other headers), let me know - or feel free to put in a PR yourself and send it to me!</p>",
        "id": 500891757,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740061500
    },
    {
        "content": "<p>The hold-up with Records is I am going to have to refactor Body/Block to be just another type of expression and not it's own distinct type of Node</p>",
        "id": 500892173,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740061576
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"453336\">@Joshua Warner</span> remind me, did we decide to implement a NoSpaceColon token that will be required for (expression) Record Fields?</p>",
        "id": 500892705,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740061695
    },
    {
        "content": "<p>I think Record Fields in type annotations can be more forgiving</p>",
        "id": 500892815,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740061720
    },
    {
        "content": "<p>I think the only real alternative would be something more drastic like inline type annotations which has been ruled out in the past by Richard</p>",
        "id": 500893312,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740061838
    },
    {
        "content": "<p>what if we made <code>match</code> consistent with <code>if</code> and have it just use curly braces instead of a special <code>-&gt;</code> and <code>,</code> thing?</p>",
        "id": 500906611,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740065161
    },
    {
        "content": "<p>e.g. instead of this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">match_time</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">a</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">Blue</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">47</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">Green</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">19</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">Red</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">rest</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">123</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"mf\">3.14</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">314</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 500906650,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740065164
    },
    {
        "content": "<p>...we do this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">match_time</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">a</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">Blue</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">47</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"n\">Green</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">19</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"n\">Red</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">rest</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">123</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"mf\">3.14</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">314</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 500906734,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740065191
    },
    {
        "content": "<p>seems like it's just as easy to read, it's one less piece of syntax to learn, and if you want a multiline branch you're already all set up with the curly braces</p>",
        "id": 500906869,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740065228
    },
    {
        "content": "<p>it always annoys me in Rust having to switch back and forth between <code>,</code> and <code>{</code> <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 500908336,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740065619
    },
    {
        "content": "<p>Hmm... I guess it is just a bit less distinct, but once you have mutiline blocks is common anyway</p>",
        "id": 500911256,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740066345
    },
    {
        "content": "<p>Also, will lead to more common fake record syntax</p>",
        "id": 500911392,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740066366
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"781658\">@Anthony Bullard</span> I think we do want NoSpaceColon for now. We can always have the parser accept either token in cases where it’s not ambiguous.</p>",
        "id": 500916684,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1740067692
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"781658\">@Anthony Bullard</span> how about we try the \"no arrows\" style above (as in, we just parse a pattern followed by an expression, and the formatter always chooses to put braces around that expression, just like with <code>if</code>) but if someone puts in <code>-&gt;</code> or <code>=&gt;</code> or <code>,</code> we treat them like semicolons (warn, and then the formatter drops them)</p>",
        "id": 500926367,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740070297
    },
    {
        "content": "<p>That’s syntax is great!</p>",
        "id": 500931332,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1740071656
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/500908336\">said</a>:</p>\n<blockquote>\n<p>it always annoys me in Rust having to switch back and forth between <code>,</code> and <code>{</code> <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>\n</blockquote>\n<p>I also hate this</p>",
        "id": 500931372,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1740071670
    },
    {
        "content": "<p>Hmm, I'm a little worried about ambiguities without -&gt; or similar</p>",
        "id": 500931963,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1740071835
    },
    {
        "content": "<p><code>Blue { foo }</code> could either be <code>Blue -&gt; {foo:foo}</code>, or it could be <code>Blue {foo}</code> (i.e. a tag with a record pattern)... and then we need to keep parsing to find out what the branch body is.</p>",
        "id": 500932247,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1740071933
    },
    {
        "content": "<p>Actually no, it's not the first thing. (brain fart)</p>",
        "id": 500932785,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1740072116
    },
    {
        "content": "<p>It's ambiguous between <code>{foo}</code> being the body and <code>{foo}</code> being a record pattern with the body to come later.</p>",
        "id": 500932934,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1740072156
    },
    {
        "content": "<p>You can keep going with that logic indefinitely</p>",
        "id": 500932976,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1740072170
    },
    {
        "content": "<p>Err actually wait nvm ignore me; that'd be <code>Blue{(foo})</code><br>\nEDIT, nope: <code>Blue({foo})</code></p>",
        "id": 500933057,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1740072194
    },
    {
        "content": "<p><span aria-label=\"man facepalming\" class=\"emoji emoji-1f926-200d-2642\" role=\"img\" title=\"man facepalming\">:man_facepalming:</span></p>",
        "id": 500933071,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1740072198
    },
    {
        "content": "<p>beautifully cursed brackets <code>{(})</code></p>",
        "id": 500934603,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740072635
    },
    {
        "content": "<p>I like that the syntax requires the braces so that you never have to decide if they should be included or not</p>",
        "id": 500935395,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1740072911
    },
    {
        "content": "<p>It's a bit inconsistent with lambdas because it's still optional there</p>",
        "id": 500935734,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1740073022
    },
    {
        "content": "<p>but I think I prefer it remains optional</p>",
        "id": 500935788,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1740073040
    },
    {
        "content": "<p>To remain optional would just be?</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">match_time</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">a</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">match</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"no\">Blue</span><span class=\"w\"> </span><span class=\"mi\">47</span>\n<span class=\"w\">        </span><span class=\"no\">Green</span><span class=\"w\"> </span><span class=\"mi\">19</span>\n<span class=\"w\">        </span><span class=\"no\">Red</span><span class=\"w\"> </span><span class=\"mi\">12</span>\n<span class=\"w\">        </span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">        </span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"n\">rest</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"mi\">123</span>\n<span class=\"w\">        </span><span class=\"mi\">3</span><span class=\"o\">.</span><span class=\"mi\">14</span><span class=\"w\"> </span><span class=\"mi\">314</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 500937586,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740073701
    },
    {
        "content": "<p>yeah, that's what I think it should be</p>",
        "id": 500937612,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740073711
    },
    {
        "content": "<p>but then the formatter adds braces for clarity</p>",
        "id": 500937631,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740073717
    },
    {
        "content": "<p>it's conceptually simple: you just alternate patterns and expressions, that's it</p>",
        "id": 500937668,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740073730
    },
    {
        "content": "<p>but not in lambdas</p>",
        "id": 500937683,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1740073736
    },
    {
        "content": "<p>(the formatter doesn't add braces)</p>",
        "id": 500937713,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1740073746
    },
    {
        "content": "<p>right, just in <code>match</code></p>",
        "id": 500937730,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740073753
    },
    {
        "content": "<p><code>match { 1 2 1 2 1 2 }</code> would technically be valid <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 500937776,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740073772
    },
    {
        "content": "<p>at least from a parsing perspective</p>",
        "id": 500937806,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740073786
    },
    {
        "content": "<p>with <code>1</code>s being patterns and <code>2</code>s being expressions</p>",
        "id": 500937809,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740073788
    },
    {
        "content": "<p>that might be nice too for typing speed</p>",
        "id": 500937815,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1740073790
    },
    {
        "content": "<p>yeah that's the symmetry with <code>if</code></p>",
        "id": 500937827,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740073797
    },
    {
        "content": "<p>where like <code>if True False else True</code> is valid</p>\n<p>edit: was originally <code>if True False True</code> - forgot the <code>else</code>!</p>",
        "id": 500937889,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740073809
    },
    {
        "content": "<p>but the formatter adds braces for clarity</p>",
        "id": 500937911,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740073817
    },
    {
        "content": "<p><code>if True False True</code> how is this valid?</p>",
        "id": 500937953,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740073833
    },
    {
        "content": "<p>so if you want to take the shortcut when typing, you can</p>",
        "id": 500937958,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740073833
    },
    {
        "content": "<p>No else of else if</p>",
        "id": 500937971,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740073839
    },
    {
        "content": "<p>oops, fixed!</p>",
        "id": 500937991,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740073846
    },
    {
        "content": "<p>ah</p>",
        "id": 500938013,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740073852
    },
    {
        "content": "<p>I kinda hate the lack of grouping in all of this, but I guess the formatter readds it, so maybe ok</p>",
        "id": 500938132,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740073887
    },
    {
        "content": "<p>in general the theme is \"braces are never required, but the formatter may add them\"</p>",
        "id": 500938155,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740073893
    },
    {
        "content": "<p>That said, I'm really not a fan of same line things without grouping</p>",
        "id": 500938181,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740073902
    },
    {
        "content": "<p>we could soft enforce them with a warning</p>",
        "id": 500938212,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1740073915
    },
    {
        "content": "<p>could, but probably unnecessary</p>",
        "id": 500938291,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740073932
    },
    {
        "content": "<p>Even</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"no\">True</span>\n<span class=\"w\">    </span><span class=\"no\">False</span>\n</code></pre></div>\n<p>and </p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"no\">True</span><span class=\"w\"> </span><span class=\"no\">False</span>\n</code></pre></div>\n<p>Feel like they shouldn't be allowed.</p>",
        "id": 500938301,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740073936
    },
    {
        "content": "<p>I like the conceptual simplicity though - braces are a special case of expressions</p>",
        "id": 500938352,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740073958
    },
    {
        "content": "<p>I know</p>",
        "id": 500938390,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740073968
    },
    {
        "content": "<p>so anywhere you're using them as an expression, you could of course omit them</p>",
        "id": 500938413,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740073977
    },
    {
        "content": "<p>But feels like conceptional simplicity being traded for allowing messy code</p>",
        "id": 500938450,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740073993
    },
    {
        "content": "<p>Extra symbols and splitting things up can definitely help with readability</p>",
        "id": 500938514,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740074018
    },
    {
        "content": "<p>I hear that, but there's all sorts of messy code you can write if you don't use the formatter <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 500938522,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740074023
    },
    {
        "content": "<p>and I think we could reasonably add a warning if it seems like people are actually doing it in practice</p>",
        "id": 500938560,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740074037
    },
    {
        "content": "<p>my assumption is that they wouldn't</p>",
        "id": 500938616,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740074047
    },
    {
        "content": "<p>idk...a lot of people like being terse way too much</p>",
        "id": 500938668,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740074067
    },
    {
        "content": "<p>but yeah, probably just a limited few</p>",
        "id": 500938690,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740074076
    },
    {
        "content": "<p>I like the idea of allowing a lot of common mistakes to parse/run, but still discourage them with a warning, and have the formatter fix them automatically</p>",
        "id": 500938881,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1740074143
    },
    {
        "content": "<p>it's the best of both worlds</p>",
        "id": 500938942,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1740074163
    },
    {
        "content": "<p>As long as the formatter never fails and can format all bad code consistently</p>",
        "id": 500947538,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740077170
    },
    {
        "content": "<p>So basically I should just remove the need for the arrow, and in the formatter force braces?</p>",
        "id": 500973906,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740087542
    },
    {
        "content": "<p>And remove the need for commas? <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span></p>",
        "id": 500973935,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740087560
    },
    {
        "content": "<p>I personally think we should keep commas between branches</p>",
        "id": 500973992,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740087592
    },
    {
        "content": "<p>As it is an unbounded list of things</p>",
        "id": 500974069,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740087606
    },
    {
        "content": "<p>Lists, Tuples, Record Fields, Function Args, Lambda Args, Exposes items, package entries, they all require <code>,</code> between the \"items\"</p>",
        "id": 500974201,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740087671
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453336\">Joshua Warner</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/500916684\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> I think we do want NoSpaceColon for now. We can always have the parser accept either token in cases where it’s not ambiguous.</p>\n</blockquote>\n<p>How then are we going to distinguish between a record or a block starting with a type annotation with backtracking?</p>",
        "id": 500974400,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740087751
    },
    {
        "content": "<p>Should this be spun out into an ideas thread? <a class=\"message-link\" href=\"/#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/500906611\">#compiler development &gt; zig compiler - parser @ 💬</a> </p>\n<p>I feel like we should put together some larger examples. My concern is the strangeness budget with removing the arrows which seem to be pretty universal in other languages. Not saying I couldn't get used to it, but just not sure discussion in the middle of a parser thread really meets our usual standard for these things.</p>",
        "id": 500976825,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1740088747
    },
    {
        "content": "<p>The braces on a single line look a little strange to me <code>{ 4 }</code> ... I like the braces for multiple lines though.</p>",
        "id": 500977241,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1740088883
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> <a href=\"#narrow/stream/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/500974201\">said</a>:</p>\n<blockquote>\n<p>Lists, Tuples, Record Fields, Function Args, Lambda Args, Exposes items, package entries, they all require <code>,</code> between the \"items\"</p>\n</blockquote>\n<p>yeah, but <code>switch</code> statements don't, and when they're all on different lines, it just feels to me like a chore that doesn't add value</p>",
        "id": 500977577,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740089013
    },
    {
        "content": "<p>this does make me realize the formatter could add missing commas in lists and records though! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 500977746,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740089068
    },
    {
        "content": "<p>I'm not sure if these are formative ideas, or decisions from our BDFN</p>",
        "id": 500977919,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1740089147
    },
    {
        "content": "<p>fair point on starting a thread about <code>-&gt;</code> in <code>match</code>, I'll write one up later</p>",
        "id": 500978088,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740089204
    },
    {
        "content": "<p>mainly I just saw the example code, thought \"oh we definitely don't need commas\" and then thought I'd mention that idea while I was at it - but it does deserve its own thread</p>",
        "id": 500978216,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740089258
    },
    {
        "content": "<p>the formatter being able to add missing commas in lists and records (and tuples!) is just an observation about a convenience we could add</p>",
        "id": 500978403,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740089322
    },
    {
        "content": "<p>not a syntax change, just error recovery</p>",
        "id": 500978454,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740089338
    },
    {
        "content": "<p>I think we could do the same here</p>",
        "id": 500979395,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740089696
    },
    {
        "content": "<p>Allow commas, but not require</p>",
        "id": 500979419,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740089704
    },
    {
        "content": "<p>And the formatter add them</p>",
        "id": 500979438,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740089711
    },
    {
        "content": "<p>This is what is currently implemented:</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"k\">test</span><span class=\"w\"> </span><span class=\"s\">\"Syntax grab bag\"</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"n\">moduleFmtsSame</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\app [main!] { pf: platform \"../basic-cli/platform.roc\" }</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\import pf.Stdout</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\add_one_oneline = |num| if num 2 else 5</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\add_one = |num| {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    other = 1</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    if num {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        dbg some_func()</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        0</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    } else {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        dbg 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        other</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    }</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\}</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\match_time = |a| match a {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    Blue { 47 },</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    Green { 19 },</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    Red { 12 },</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    lower { 1 },</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    [1, 2, 3, .. as rest] { 123 },</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    3.14 { 314 },</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\}</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\main! = |_| {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    world = \"World\"</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    number = 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    tag = Blue</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    tag_with_payload = Ok(number)</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    interpolated = \"Hello, ${world}\"</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    list = [add_one(number), 456, 789]</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    Stdout.line!(interpolated)?</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    Stdout.line!(\"How about ${Num.toStr(number)} as a string?\")</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\}</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 500979460,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740089723
    },
    {
        "content": "<p>I can't as a human parse the branches without at least the commas</p>",
        "id": 500979522,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740089752
    },
    {
        "content": "<p><code>switch</code> gets away without them because it has <code>case</code> keyword before each branch</p>",
        "id": 500979605,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740089772
    },
    {
        "content": "<p>And usually in C-like languages <code>:</code> between the \"pattern\" and the block (and also many times a near-mandatory <code>break;</code> statements at the end of a case block.)</p>",
        "id": 500979739,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740089832
    },
    {
        "content": "<p>Sometimes syntax that is unnecessary for machine parsing is very much necessary for human visual parsing</p>",
        "id": 500979934,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740089896
    },
    {
        "content": "<p>To your point though Richard, I think we at a point where for machine parsing there is no need for commas in ANY collection-like syntactic construct</p>",
        "id": 500980072,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740089954
    },
    {
        "content": "<p>They are there for the humans :-)</p>",
        "id": 500980089,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740089962
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/500906611\">said</a>:</p>\n<blockquote>\n<p>what if we made <code>match</code> consistent with <code>if</code> and have it just use curly braces instead of a special <code>-&gt;</code> and <code>,</code> thing?</p>\n</blockquote>\n<p>I made a PR for realword to see what this looks like <a href=\"https://github.com/rtfeldman/roc-realworld/pull/1\">https://github.com/rtfeldman/roc-realworld/pull/1</a></p>",
        "id": 500982143,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1740090803
    },
    {
        "content": "<p>It's based on <span class=\"user-mention\" data-user-id=\"781658\">@Anthony Bullard</span>'s current implementation of match above. I'm not sure if the commas are optional but I included them.</p>",
        "id": 500982205,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1740090834
    },
    {
        "content": "<p>I really like with zig how adding the comma lets the formatter know to make it multi-line or not... if we can borrow that feature I think that would be nice.</p>",
        "id": 500982296,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1740090863
    },
    {
        "content": "<p>I think I missed a couple of matches ... I'll add those (done)</p>",
        "id": 500982471,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1740090944
    },
    {
        "content": "<p>From making this PR.. I would say removing <code>-&gt;</code> and just using braces feels good. </p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">match</span><span class=\"w\"> </span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">query!</span><span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"no\">Ok</span><span class=\"p\">(</span><span class=\"o\">[</span><span class=\"n\">row</span><span class=\"o\">]</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"no\">Article</span><span class=\"o\">.</span><span class=\"n\">fromRow</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"no\">Ok</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"no\">Ok</span><span class=\"p\">(</span><span class=\"o\">[]</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"no\">Err</span><span class=\"p\">(</span><span class=\"no\">NotFound</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"no\">Err</span><span class=\"p\">(</span><span class=\"n\">db_err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"no\">Err</span><span class=\"p\">(</span><span class=\"no\">InternalErr</span><span class=\"p\">(</span><span class=\"n\">db_err</span><span class=\"o\">.</span><span class=\"n\">inspect</span><span class=\"p\">()))</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 500983735,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1740091476
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> <a href=\"#narrow/stream/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/500979438\">said</a>:</p>\n<blockquote>\n<p>And the formatter add them</p>\n</blockquote>\n<p>we could, I just don't see a benefit <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 500986361,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740092611
    },
    {
        "content": "<p>if we're already adding braces on every branch, it's super clear where each one begins and ends</p>",
        "id": 500986422,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740092640
    },
    {
        "content": "<p>to put it another way, I don't see why <code>},</code> is a better delimiter for every branch than just <code>}</code></p>",
        "id": 500986544,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740092689
    },
    {
        "content": "<p>That's fair</p>",
        "id": 500986656,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740092738
    },
    {
        "content": "<p>Pushed a change to make commas optional, and not included in the formatted output</p>",
        "id": 500987084,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740092922
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>match_time = |a| match a {\n    Blue { 47 }\n    Green { 19 }\n    Red { 12 }\n    lower { 1 }\n    [1, 2, 3, .. as rest] { 123 }\n    3.14 { 314 }\n}\n</code></pre></div>",
        "id": 500987193,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740092981
    },
    {
        "content": "<p>I made <a href=\"#narrow/channel/304641-ideas/topic/.60match.60.20without.20.60-.3E.60\">#ideas &gt; &#96;match&#96; without &#96;-&gt;&#96;</a> to discuss the design question!</p>",
        "id": 500988087,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740093362
    },
    {
        "content": "<p>Tuple patterns are implemented in my PR, thought I'd get records done also in this little 30 minute stretch - but I hit a weird bug trying to fix an obvious tokenizer bug.</p>\n<p><span class=\"user-mention\" data-user-id=\"453336\">@Joshua Warner</span> Currently when we read a <code>(</code>, we have whether we emit a NoSpaceOpenRound or OpenRound token flipped from how it should be.  But when I fixed that, we get an infinite loop.  These are impossible to debug in Zig with print debugging because the output with <code>std.debug.print</code> just never gets flushed.  Could you take a look at that sometime?  Not a blocker or high priority, but should be fixed I think</p>",
        "id": 500991375,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740095005
    },
    {
        "content": "<p>Here's the currently implemented syntax...focusing on solely match here:</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"k\">test</span><span class=\"w\"> </span><span class=\"s\">\"Syntax grab bag\"</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"n\">statementFmtsSame</span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"c1\">// This is a made-up function that doesn't actually exist :-)</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\match_time = |a| match a {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    Blue { 47 }</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    Green { 19 }</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    Red { 12 }</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    lower { 1 }</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    [1, 2, 3, .. as rest] { 123 }</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    3.14 { 314 }</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    (1, 2, 3) { 123 }</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\}</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 500991629,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740095129
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"781658\">@Anthony Bullard</span> I repro'd one infinite loop at least, and doing this works for me:</p>\n<div class=\"codehilite\"><pre><span></span><code>diff --git a/src/check/parse/Parser.zig b/src/check/parse/Parser.zig\nindex 5ba9d25af4..aec25d5179 100644\n--- a/src/check/parse/Parser.zig\n+++ b/src/check/parse/Parser.zig\n@@ -577,7 +577,7 @@ pub fn parseExpr(self: *Parser) IR.NodeStore.ExprIdx {\n     if (expr) |e| {\n         var expression = e;\n         // Check for an apply...\n-        if (self.peek() == .OpenRound) {\n+        if (self.peek() == .NoSpaceOpenRound) {\n             const scratch_top = self.store.scratch_exprs.items.len;\n             self.advance();\n             while (self.peek() != .CloseRound) {\ndiff --git a/src/check/parse/tokenize.zig b/src/check/parse/tokenize.zig\nindex c831a5ef7a..e1e180aab7 100644\n--- a/src/check/parse/tokenize.zig\n+++ b/src/check/parse/tokenize.zig\n@@ -992,7 +992,7 @@ pub const Tokenizer = struct {\n                 &#39;(&#39; =&gt; {\n                     self.cursor.pos += 1;\n                     self.stack.append(.Round) catch exitOnOom();\n-                    self.output.pushTokenNormal(if (sp) .NoSpaceOpenRound else .OpenRound, start, 1);\n+                    self.output.pushTokenNormal(if (sp) .OpenRound else .NoSpaceOpenRound, start, 1);\n                 },\n                 &#39;[&#39; =&gt; {\n                     self.cursor.pos += 1;\n</code></pre></div>",
        "id": 501019019,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1740112263
    },
    {
        "content": "<p>The trick I've taken to doing to debug hanging tests is:</p>\n<ul>\n<li><code>zig build test</code></li>\n<li>(wait for it to hang in the test)</li>\n<li>hit ctrl+Z</li>\n<li><code>pgrep -lf test</code> to find the name of the test binary running: something like <code>5107 /Users/joshw/src/github.com/roc-lang/roc/.zig-cache/o/05e8b24ea2f7133aef9cb6aa47b421e7/test --listen=-</code></li>\n<li>From there I can either run that binary myself, attaching lldb to the process, etc.</li>\n</ul>\n<p>I assume there must be a better way to do this tho. Maybe <span class=\"user-mention\" data-user-id=\"406911\">@Andrew Kelley</span> knows some tricks?</p>",
        "id": 501019251,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1740112410
    },
    {
        "content": "<p>I think you are right about the debugging process.  I guess I need to improve my lldb skills. (Or just set up DAP in my Neovim)</p>",
        "id": 501084994,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740138125
    },
    {
        "content": "<p>And I'm going to add the above patch to my PR</p>",
        "id": 501085144,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740138181
    },
    {
        "content": "<p>Current syntax supported in my latest PR:</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"k\">test</span><span class=\"w\"> </span><span class=\"s\">\"Syntax grab bag\"</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"n\">moduleFmtsSame</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\app [main!] { pf: platform \"../basic-cli/platform.roc\" }</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\import pf.Stdout</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\add_one_oneline = |num| if num 2 else 5</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\add_one = |num| {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    other = 1</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    if num {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        dbg some_func()</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        0</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    } else {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        dbg 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        other</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    }</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\}</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\match_time = |a| match a {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    Blue | Green | Red -&gt; {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        x = 12</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        x</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    }</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    lower -&gt; 1</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    \"foo\" -&gt; 100</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    \"foo\" | \"bar\" -&gt; 200</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    [1, 2, 3, .. as rest] -&gt; 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    [1, 2 | 5, 3, .. as rest] -&gt; 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    3.14 -&gt; 314</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    3.14 | 6.28 -&gt; 314</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    (1, 2, 3) -&gt; 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    (1, 2 | 5, 3) -&gt; 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    {foo: 1, bar: 2} -&gt; 12</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    {foo: 1, bar: 2 | 7} -&gt; 12</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\}</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\main! = |_| {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    world = \"World\"</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    number = 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    tag = Blue</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    tag_with_payload = Ok(number)</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    interpolated = \"Hello, ${world}\"</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    list = [add_one(number), 456, 789]</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    Stdout.line!(interpolated)?</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    Stdout.line!(\"How about ${Num.toStr(number)} as a string?\")</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\}</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 501128397,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740151206
    },
    {
        "content": "<p>^ UPDATED THE ABOVE</p>",
        "id": 501204022,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740181202
    },
    {
        "content": "<p>Only thing left in patterns is Tags with payloads</p>",
        "id": 501204103,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740181239
    },
    {
        "content": "<p>Can we move to =&gt; for match? Seemed like <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> was pushing for that, but I may be mistaken</p>",
        "id": 501204105,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740181242
    },
    {
        "content": "<p>Oh yeah! Also</p>",
        "id": 501204115,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740181252
    },
    {
        "content": "<p>....?</p>",
        "id": 501204155,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740181280
    },
    {
        "content": "<p><code>.. as rest</code> might need to be allowable, but I think we were trying to prefer <code>..rest</code></p>",
        "id": 501204156,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740181281
    },
    {
        "content": "<p>Oh</p>",
        "id": 501204164,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740181292
    },
    {
        "content": "<p>Ok, so <code>as</code> is dead?</p>",
        "id": 501204176,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740181301
    },
    {
        "content": "<p>No, which is a problem...</p>",
        "id": 501204185,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740181312
    },
    {
        "content": "<p>And are we 100% on fat arrows for match?</p>",
        "id": 501204188,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740181313
    },
    {
        "content": "<p>No</p>",
        "id": 501204193,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740181318
    },
    {
        "content": "<p>I would prefer landing the current diff and iterating on it later :)</p>",
        "id": 501204196,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1740181320
    },
    {
        "content": "<p>Good idea</p>",
        "id": 501204231,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740181324
    },
    {
        "content": "<p>Yeah</p>",
        "id": 501204238,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740181324
    },
    {
        "content": "<p>I've already implemented 5 syntaxes for match <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 501204250,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740181336
    },
    {
        "content": "<p>I thought I might spend a couple hours today tinkering with the Parse IR and see if I can make it generate an SExpr for a snapshot.</p>",
        "id": 501204269,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1740181368
    },
    {
        "content": "<p>We actually probably don't want to support <code>..&lt;pattern&gt;</code> in record destructs because we already have <code>.. as &lt;ident&gt;</code> and there shouldn't be two ways to do the same thing</p>",
        "id": 501204341,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740181435
    },
    {
        "content": "<p>Wait <code>..</code> is followed by a pattern?</p>",
        "id": 501204571,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740181564
    },
    {
        "content": "<p>That doesn't seem right...</p>",
        "id": 501204580,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740181568
    },
    {
        "content": "<p>Yeah, I agree</p>",
        "id": 501204598,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740181583
    },
    {
        "content": "<p>I think we should use <code>..&lt;ident&gt;</code> in both lists and records</p>",
        "id": 501204603,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740181584
    },
    {
        "content": "<p>Well, if we support that in records, then we can do <code>{ foo: 123, ..rest }</code> and also <code>{ foo: 123, .. as rest }</code></p>",
        "id": 501204650,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740181616
    },
    {
        "content": "<p>Gotta go eat dinner, I'll try to pop back on and take care of that conflict</p>",
        "id": 501204677,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740181627
    },
    {
        "content": "<p>Maybe we can put a warning on the second</p>",
        "id": 501204684,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740181633
    },
    {
        "content": "<p>I would rather just remove the second</p>",
        "id": 501204696,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740181641
    },
    {
        "content": "<p>There is no advantage to it</p>",
        "id": 501204705,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740181649
    },
    {
        "content": "<p>Agreed, except for the fact that there's now a specific use of <code>as</code> that doesn't work</p>",
        "id": 501204737,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740181675
    },
    {
        "content": "<p>I actually haven't even implemented Record Pattern rest</p>",
        "id": 501204743,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740181680
    },
    {
        "content": "<p>Which is?</p>",
        "id": 501204785,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740181686
    },
    {
        "content": "<p><code>as</code> is usually </p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">AsPattern</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">pattern</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Pattern</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">ident</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Ident</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">region</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Region</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n</code></pre></div>",
        "id": 501204921,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740181723
    },
    {
        "content": "<p>But it can't be just <code>Pattern</code> anymore</p>",
        "id": 501205017,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740181734
    },
    {
        "content": "<p>If you can make it work though, go for it</p>",
        "id": 501205057,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740181757
    },
    {
        "content": "<p>Yeah, I removed this in my PR and made <code>as</code> a part of rest</p>",
        "id": 501208491,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740184090
    },
    {
        "content": "<p>My PR is rebased and ready for review</p>",
        "id": 501209751,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740185065
    },
    {
        "content": "<p>Next up for me is Type Annotations and Declarations</p>",
        "id": 501209771,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740185080
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/stream/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/501204105\">said</a>:</p>\n<blockquote>\n<p>Can we move to =&gt; for match? Seemed like <span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> was pushing for that, but I may be mistaken</p>\n</blockquote>\n<p>let's do it for now just to address the parsing ambiguity on <code>Ok(a) if a-&gt;b-&gt;c</code></p>",
        "id": 501214241,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740188491
    },
    {
        "content": "<p>No parsing ambiguity as I haven't even implemented record access / static dispatch, let alone -&gt; (which we should have a name for)</p>",
        "id": 501216785,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740190490
    },
    {
        "content": "<p><span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 501216791,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740190498
    },
    {
        "content": "<p>But I can put it with my current change, which actually I tried to sneak into the last PR but was too late</p>",
        "id": 501216836,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740190525
    },
    {
        "content": "<p>(Tags with payload patterns)</p>",
        "id": 501216844,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740190532
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"781658\">@Anthony Bullard</span> you may need to rebase any PR's, we just merged a change that changed a few things across the compiler</p>",
        "id": 501216862,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1740190555
    },
    {
        "content": "<p>I have no outstanding PRs, but thanks I'll rebase now!</p>",
        "id": 501216910,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740190570
    },
    {
        "content": "<p>Did we land interning?</p>",
        "id": 501216917,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740190575
    },
    {
        "content": "<p>Yes</p>",
        "id": 501216932,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740190589
    },
    {
        "content": "<p>Holy hell, 8 commits?</p>",
        "id": 501216942,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740190597
    },
    {
        "content": "<p>Josh landed a primitive version</p>",
        "id": 501216945,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740190601
    },
    {
        "content": "<p>Ok, I've rebased....I'm holding on to my seat as I rebase</p>",
        "id": 501216950,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740190612
    },
    {
        "content": "<p>I'm currently trying to figure out how to get the top-level nodes out of the parse AST</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"k\">test</span><span class=\"w\"> </span><span class=\"s\">\"example s-expr\"</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">source</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\module []</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\foo = \"bar\"</span>\n<span class=\"w\">    </span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kr\">var</span><span class=\"w\"> </span><span class=\"n\">arena</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">heap</span><span class=\"p\">.</span><span class=\"n\">ArenaAllocator</span><span class=\"p\">.</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">testing</span><span class=\"p\">.</span><span class=\"n\">allocator</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">defer</span><span class=\"w\"> </span><span class=\"n\">arena</span><span class=\"p\">.</span><span class=\"n\">deinit</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kr\">var</span><span class=\"w\"> </span><span class=\"n\">env</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">base</span><span class=\"p\">.</span><span class=\"n\">ModuleEnv</span><span class=\"p\">.</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">arena</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kr\">var</span><span class=\"w\"> </span><span class=\"n\">parse_ast</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">env</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">testing</span><span class=\"p\">.</span><span class=\"n\">allocator</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">source</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">defer</span><span class=\"w\"> </span><span class=\"n\">parse_ast</span><span class=\"p\">.</span><span class=\"n\">deinit</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kr\">var</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">parse_ast</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">nodes</span><span class=\"p\">.</span><span class=\"n\">iterIndices</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">iter</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">node</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">debug</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.{</span><span class=\"n\">parse_ast</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">getStatement</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)});</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 501216953,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1740190614
    },
    {
        "content": "<p>Use parse_ast.store.getFile(), and then follow on from there</p>",
        "id": 501216973,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740190641
    },
    {
        "content": "<p>The file will have the header and statements, and if you read the types it should be easy to figure out what store method to use to get children</p>",
        "id": 501217000,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740190674
    },
    {
        "content": "<p>I can talk later if you need help</p>",
        "id": 501217004,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740190680
    },
    {
        "content": "<p>Actually, look at fmt.zig</p>",
        "id": 501217063,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740190699
    },
    {
        "content": "<p>From <code>formatFile</code> on</p>",
        "id": 501217067,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740190704
    },
    {
        "content": "<p>We need mental institutionalization, not just help</p>",
        "id": 501217076,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740190719
    },
    {
        "content": "<p>Your code should be similar in how you walk the AST</p>",
        "id": 501217077,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740190719
    },
    {
        "content": "<p>BTW I'm currently reworking string tokenizing to make a little more sense</p>",
        "id": 501217080,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1740190723
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/501217076\">said</a>:</p>\n<blockquote>\n<p>We need mental institutionalization, not just help</p>\n</blockquote>\n<p>Some more than others :-)</p>",
        "id": 501217094,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740190736
    },
    {
        "content": "<p>I have a 4-year-old</p>",
        "id": 501217106,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740190745
    },
    {
        "content": "<p>*You have a 4-year-old and mental problems</p>",
        "id": 501217126,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740190768
    },
    {
        "content": "<p><code>thread 12285665 panic: reached unreachable code</code> --- <span aria-label=\"man facepalming\" class=\"emoji emoji-1f926-200d-2642\" role=\"img\" title=\"man facepalming\">:man_facepalming:</span></p>",
        "id": 501217337,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1740190967
    },
    {
        "content": "<p>I shouldn't be allowed to touch these things</p>",
        "id": 501217353,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1740190988
    },
    {
        "content": "<p>Errr</p>",
        "id": 501217358,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740190995
    },
    {
        "content": "<p>What’s the sourxe</p>",
        "id": 501217360,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740190998
    },
    {
        "content": "<p>And your code</p>",
        "id": 501217368,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740191002
    },
    {
        "content": "<p>And the error?</p>",
        "id": 501217377,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740191012
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span></p>",
        "id": 501217419,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740191043
    },
    {
        "content": "<p>See your DM's</p>",
        "id": 501217459,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1740191065
    },
    {
        "content": "<p>omg I didn’t take a screenshot of it, but Apple Intelligence summarized the notifications in this channel as “Anthony has mental problems; Luke panicked”</p>",
        "id": 501217505,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1740191122
    },
    {
        "content": "<p>Fair</p>",
        "id": 501217592,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1740191177
    },
    {
        "content": "<p>That’s one way to make me read Zulip</p>",
        "id": 501217616,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1740191199
    },
    {
        "content": "<p>More crazy talk, got it</p>",
        "id": 501217637,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740191223
    },
    {
        "content": "<p>I think it’s a fair summary</p>",
        "id": 501217796,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740191336
    },
    {
        "content": "<p>nobody else here knows it, but Agus went HAM on the recent Zed release, it was really impressive!</p>",
        "id": 501218056,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740191561
    },
    {
        "content": "<p>Big W for Zed</p>",
        "id": 501218077,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1740191591
    },
    {
        "content": "<p>people who joined after him probably assume he's been at Zed for years based on that <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 501218079,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740191592
    },
    {
        "content": "<p>We are thankful for your efforts! It's been powering my collab with Luke for the last week or two</p>",
        "id": 501218097,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740191608
    },
    {
        "content": "<p>Cant say if this has improved productivity...</p>",
        "id": 501218121,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1740191639
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"k\">test</span><span class=\"w\"> </span><span class=\"s\">\"Syntax grab bag\"</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"n\">moduleFmtsSame</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\app [main!] { pf: platform \"../basic-cli/platform.roc\" }</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\import pf.Stdout</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\Map a b : List(a), (a -&gt; b) -&gt; List(b)</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\Foo : (Bar, Baz)</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\Some a : { foo : Ok(a), bar : Something }</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\Maybe a : [Some(a), None]</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\SomeFunc a : Maybe(a), a -&gt; Maybe(a)</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\add_one_oneline = |num| if num 2 else 5</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\add_one : (U64 -&gt; U64)</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\add_one = |num| {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    other = 1</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    if num {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        dbg some_func()</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        0</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    } else {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        dbg 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        other</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    }</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\}</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\match_time = |a| match a {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    Blue | Green | Red -&gt; {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        x = 12</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        x</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    }</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    lower -&gt; 1</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    \"foo\" -&gt; 100</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    \"foo\" | \"bar\" -&gt; 200</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    [1, 2, 3, .. as rest] -&gt; 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    [1, 2 | 5, 3, .. as rest] -&gt; 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    3.14 -&gt; 314</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    3.14 | 6.28 -&gt; 314</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    (1, 2, 3) -&gt; 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    (1, 2 | 5, 3) -&gt; 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    { foo: 1, bar: 2, ..rest } -&gt; 12</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    { foo: 1, bar: 2 | 7 } -&gt; 12</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    Ok(123) -&gt; 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    Ok(Some(dude)) -&gt; dude</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    TwoArgs(\"hello\", Some(\"world\")) -&gt; 1000</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\}</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\main! : List(String) -&gt; Result({}, _)</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\main! = |_| {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    world = \"World\"</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    number = 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    tag = Blue</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    tag_with_payload = Ok(number)</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    interpolated = \"Hello, ${world}\"</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    list = [add_one(number), 456, 789]</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    Stdout.line!(interpolated)?</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    Stdout.line!(\"How about ${Num.toStr(number)} as a string?\")</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\}</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Syntax supported with my latest parser+formatter PR</p>",
        "id": 501416943,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740350415
    },
    {
        "content": "<p>Next up:  Record literal expressions</p>",
        "id": 501416992,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740350486
    },
    {
        "content": "<p>After that: BinOps ( <span aria-label=\"scared\" class=\"emoji emoji-1f628\" role=\"img\" title=\"scared\">:scared:</span> )</p>",
        "id": 501417055,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740350525
    },
    {
        "content": "<p>for binops, is Pratt Parsing on your radar already?</p>",
        "id": 501422456,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740355440
    },
    {
        "content": "<p>you've mentioned it</p>",
        "id": 501423805,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740356541
    },
    {
        "content": "<p>I'll read up on it</p>",
        "id": 501423808,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740356546
    },
    {
        "content": "<p><a href=\"https://matklad.github.io/2020/04/13/simple-but-powerful-pratt-parsing.html\">https://matklad.github.io/2020/04/13/simple-but-powerful-pratt-parsing.html</a></p>",
        "id": 501425246,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740357739
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453336\">Joshua Warner</span> <a href=\"#narrow/stream/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/501019251\">said</a>:</p>\n<blockquote>\n<p>The trick I've taken to doing to debug hanging tests is:</p>\n<ul>\n<li><code>zig build test</code></li>\n<li>(wait for it to hang in the test)</li>\n<li>hit ctrl+Z</li>\n<li><code>pgrep -lf test</code> to find the name of the test binary running: something like <code>5107 /Users/joshw/src/github.com/roc-lang/roc/.zig-cache/o/05e8b24ea2f7133aef9cb6aa47b421e7/test --listen=-</code></li>\n<li>From there I can either run that binary myself, attaching lldb to the process, etc.</li>\n</ul>\n<p>I assume there must be a better way to do this tho. Maybe <span class=\"user-mention silent\" data-user-id=\"406911\">Andrew Kelley</span> knows some tricks?</p>\n</blockquote>\n<p>That workflow seems reasonable to me. Is there a way you can imagine it being improved with some zig tooling changes?</p>",
        "id": 501431212,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1740362460
    },
    {
        "content": "<p>Couple thoughts: (1) It would be convenient if the binary name was stable so I don’t need to do the ctrl+z switcheroo. Or perhaps it could print the full path of the currently running binary. (2) it would be useful for the runner to do something like print the test name that’s running (perhaps after some minimum timeout). (3) it could also be useful to be able to run only a single test via passing the name of that test on the command line (or perhaps the name of the file, if the test is anonymous)</p>",
        "id": 501431927,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1740362962
    },
    {
        "content": "<p>(1) you can get if you drop down into zig build-exe CLI with <code>-femit-bin=foobar</code><br>\n(2) you can get with <code>--verbose</code><br>\n(3) is <code>--test-filter</code> with the direct CLI, and you can introduce a -D build option into your build script and set the test filter there</p>\n<p>if you combine (1) and (2) you can get what you want I think</p>\n<p>one more random tip, always delete the <code>--listen=-</code> arg when running manually, unless you want to speak the Build Runner Protocol</p>",
        "id": 501449867,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1740375361
    },
    {
        "content": "<p>so to be clear you can use --verbose to get the <code>zig build-exe</code>  or <code>zig test</code> command, then you can copy paste that, delete <code>--listen=-</code> add <code>-femit-bin=foobar</code> and then you have yourself the desired workflow</p>",
        "id": 501449976,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1740375425
    },
    {
        "content": "<p>as for <code>--test-filter</code> note that the filter is applied very early, so you can use this when doing large refactorings to only test a subset of unit tests even if the rest of your app is not compiling</p>",
        "id": 501450039,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1740375471
    },
    {
        "content": "<p>I'm running into a spot where Zig just doesn't enjoy passing functions.  I <em>want</em> to have this helper:</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">parseCollection</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">Parser</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kr\">comptime</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">type</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">end_token</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Token</span><span class=\"p\">.</span><span class=\"n\">Tag</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">scratch</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">ArrayList</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">parser</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">Parser</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">ExpectError</span><span class=\"o\">!</span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">scratch_top</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">scratch</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">peek</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">end_token</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">scratch</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">parser</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"k\">catch</span><span class=\"w\"> </span><span class=\"n\">exitOnOom</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(.</span><span class=\"n\">Comma</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">catch</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"k\">break</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"n\">end_token</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">catch</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">ExpectError</span><span class=\"p\">.</span><span class=\"n\">expected_not_found</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">scratch_top</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Since that exact kind of code happens at least 19 times in the parser.  But if one of the parsers takes an argument, I understand I need to create a new top-level function that can be called with zero args here (calling the real function with a specific value for it's arg).  But when you have recursion, usually the function is parametric on that argument, so we need to be able to call the correct parser when we recurse.  Like this:</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">parser</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">Parser</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">IR</span><span class=\"p\">.</span><span class=\"n\">NodeStore</span><span class=\"p\">.</span><span class=\"n\">PatternIdx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alternatives</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">alternatives_allowed</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">parsePatternWithAlts</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"n\">parsePatternNoAlts</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>But no matter what I do, that gives me the following error:</p>\n<div class=\"codehilite\"><pre><span></span><code>check/parse/Parser.zig:449:58: error: value with comptime-only type &#39;fn (*check.parse.Parser) check.parse.IR.NodeStore.PatternIdx&#39; depends on runtime control flow\n    const parser: fn (*Parser) IR.NodeStore.PatternIdx = if (alternatives == .alternatives_allowed) parsePatternWithAlts else parsePatternNoAlts;\n                                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n</code></pre></div>\n<p>I guess i don't understand the argument here.  The type of <code>parser</code> is always the same, and can be verified correctly at comptime.  So why is this not allowed?</p>",
        "id": 501563172,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740408481
    },
    {
        "content": "<p>Now obviously if we went with <a href=\"#narrow/channel/304641-ideas/topic/.E2.9C.94.20.60or.60.20instead.20of.20.60.7C.60.20in.20.60when.60.20branches\">#ideas &gt; ✔ &#96;or&#96; instead of &#96;|&#96; in &#96;when&#96; branches</a>  (or one of the similar proposals) then this problem goes away because there is no longer contention between pattern alternatives and <code>|...|</code> lambda args.</p>",
        "id": 501563559,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740408572
    },
    {
        "content": "<p>let's just try that</p>",
        "id": 501564550,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740408792
    },
    {
        "content": "<p>if we don't like <code>or</code> for alternatives in practice, we can always reconsider, but it seems like a reasonable design in its own right</p>",
        "id": 501564671,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740408816
    },
    {
        "content": "<p>If you are OK with it, I will do it</p>",
        "id": 501565532,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740409020
    },
    {
        "content": "<p>go for it</p>",
        "id": 501567961,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740409542
    },
    {
        "content": "<p>worst-case scenario is that we find out we don't like it, which would justify the more involved implementation</p>",
        "id": 501568180,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740409591
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"781658\">@Anthony Bullard</span> I wonder if instead of a function pointer, you could do a comptime enum for all the collection variants? Or perhaps you can pass in the desired return type as comptime, and you call ::parse() on that?</p>",
        "id": 501580605,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1740412534
    },
    {
        "content": "<p>The issue is that a function is a comptime only type</p>",
        "id": 501588338,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740414046
    },
    {
        "content": "<p>You want to use a function pointer if the value can change at runtime</p>",
        "id": 501588416,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740414064
    },
    {
        "content": "<p>Zig does not have first class functions or lambdas or closures</p>",
        "id": 501588523,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740414086
    },
    {
        "content": "<p>I think the original code just needs <code>*const fn ...</code></p>",
        "id": 501588693,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740414123
    },
    {
        "content": "<p>I think you're gonna have a better time if you always pass functions comptime unless you're doing the vtable pattern</p>",
        "id": 501661702,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1740436125
    },
    {
        "content": "<p>the optimizer will definitely have a better time</p>",
        "id": 501661719,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1740436134
    },
    {
        "content": "<p>also I recognize this is more of a functional/imperative preference thing, but I reworked a contributor's code that used that parser function pointer pattern in zig's parser to simply not do that, and felt like the result was better. yeah it technically is less DRY</p>",
        "id": 501661934,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1740436207
    },
    {
        "content": "<p>anyway the comptime suggestion is irrelevant to that though</p>",
        "id": 501662046,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1740436257
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/501588693\">said</a>:</p>\n<blockquote>\n<p>I think the original code just needs <code>*const fn ...</code></p>\n</blockquote>\n<p>Interesting .. why did I think that Zig did not support function pointers?  I think moving towards <code>or</code> for pattern alternation will make a lot of things clearer in OUR grammar anyway, open up more places where it can be used, and also make this code a lot easier to understand.</p>",
        "id": 501669313,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740438506
    },
    {
        "content": "<p>yeah like in my mind both are totally reasonable options as an end user, just with some different tradeoffs, and since we've only tried one but have an implementation reason to try out the other, seems like a fine excuse to try it out and see how we like it in practice</p>",
        "id": 501670675,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740438941
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/pull/7638\">#7638</a> Parsing Records and Tuples</p>",
        "id": 501789905,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740485531
    },
    {
        "content": "<p>Support syntax:</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"k\">test</span><span class=\"w\"> </span><span class=\"s\">\"Syntax grab bag\"</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"n\">moduleFmtsSame</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\app [main!] { pf: platform \"../basic-cli/platform.roc\" }</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\import pf.Stdout</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\Map a b : List(a), (a -&gt; b) -&gt; List(b)</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\Foo : (Bar, Baz)</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\Some a : { foo : Ok(a), bar : Something }</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\Maybe a : [Some(a), None]</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\SomeFunc a : Maybe(a), a -&gt; Maybe(a)</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\add_one_oneline = |num| if num 2 else 5</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\add_one : (U64 -&gt; U64)</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\add_one = |num| {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    other = 1</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    if num {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        dbg some_func()</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        0</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    } else {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        dbg 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        other</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    }</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\}</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\match_time = |a| match a {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    Blue | Green | Red -&gt; {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        x = 12</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        x</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    }</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    lower -&gt; 1</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    \"foo\" -&gt; 100</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    \"foo\" | \"bar\" -&gt; 200</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    [1, 2, 3, .. as rest] -&gt; 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    [1, 2 | 5, 3, .. as rest] -&gt; 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    3.14 -&gt; 314</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    3.14 | 6.28 -&gt; 314</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    (1, 2, 3) -&gt; 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    (1, 2 | 5, 3) -&gt; 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    { foo: 1, bar: 2, ..rest } -&gt; 12</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    { foo: 1, bar: 2 | 7 } -&gt; 12</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    Ok(123) -&gt; 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    Ok(Some(dude)) -&gt; dude</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    TwoArgs(\"hello\", Some(\"world\")) -&gt; 1000</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\}</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\main! : List(String) -&gt; Result({}, _)</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\main! = |_| {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    world = \"World\"</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    number = 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    tag = Blue</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    tag_with_payload = Ok(number)</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    interpolated = \"Hello, ${world}\"</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    list = [add_one(number), 456, 789]</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    # New!</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    record = { foo: 123, bar: \"Hello\", baz: tag, qux: Ok(world), punned }</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    # New!</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    tuple = (123, \"World\", tag, Ok(world), (nested, tuple), [1, 2, 3])</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    Stdout.line!(interpolated)?</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    Stdout.line!(\"How about ${Num.toStr(number)} as a string?\")</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\}</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 501790004,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740485554
    },
    {
        "content": "<p>Next up: BinOps (via Pratt Parsing)</p>",
        "id": 501790373,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740485638
    },
    {
        "content": "<p>(Note: I will come back to replace <code>|</code> with <code>or</code>, I want to push the supported syntax forward right now, and I think that BinOps are just critical to getting that done)</p>",
        "id": 501790614,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740485690
    },
    {
        "content": "<p>After BinOps, I think you should be able to parse some simple programs</p>",
        "id": 501790832,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740485742
    },
    {
        "content": "<p>That unit test looks familiar :)</p>",
        "id": 501927468,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1740525149
    },
    {
        "content": "<p>BinOps have landed (in my <a href=\"https://github.com/roc-lang/roc/pull/7638\">PR</a>) - using Pratt Parsing which was <em>soooooo</em> easy (thanks <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> ):</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"k\">test</span><span class=\"w\"> </span><span class=\"s\">\"Syntax grab bag\"</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"n\">moduleFmtsSame</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\app [main!] { pf: platform \"../basic-cli/platform.roc\" }</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\import pf.Stdout</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\Map a b : List(a), (a -&gt; b) -&gt; List(b)</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\Foo : (Bar, Baz)</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\Some a : { foo : Ok(a), bar : Something }</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\Maybe a : [Some(a), None]</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\SomeFunc a : Maybe(a), a -&gt; Maybe(a)</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\add_one_oneline = |num| if num 2 else 5</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\add_one : (U64 -&gt; U64)</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\add_one = |num| {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    other = 1</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    if num {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        dbg some_func()</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        0</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    } else {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        dbg 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        other</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    }</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\}</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\match_time = |a| match a {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    Blue | Green | Red -&gt; {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        x = 12</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        x</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    }</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    lower -&gt; 1</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    \"foo\" -&gt; 100</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    \"foo\" | \"bar\" -&gt; 200</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    [1, 2, 3, .. as rest] -&gt; 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    [1, 2 | 5, 3, .. as rest] -&gt; 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    3.14 -&gt; 314</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    3.14 | 6.28 -&gt; 314</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    (1, 2, 3) -&gt; 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    (1, 2 | 5, 3) -&gt; 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    { foo: 1, bar: 2, ..rest } -&gt; 12</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    { foo: 1, bar: 2 | 7 } -&gt; 12</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    Ok(123) -&gt; 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    Ok(Some(dude)) -&gt; dude</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    TwoArgs(\"hello\", Some(\"world\")) -&gt; 1000</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\}</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\expect blah == 1</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\main! : List(String) -&gt; Result({}, _)</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\main! = |_| {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    world = \"World\"</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    number = 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    expect blah == 1</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    tag = Blue</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    return tag</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    crash \"Unreachable!\"</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    tag_with_payload = Ok(number)</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    interpolated = \"Hello, ${world}\"</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    list = [add_one(number), 456, 789]</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    record = { foo: 123, bar: \"Hello\", baz: tag, qux: Ok(world), punned }</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    tuple = (123, \"World\", tag, Ok(world), (nested, tuple), [1, 2, 3])</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    bin_op_result = Err(foo) ?? 12 &gt; 5 * 5 or 13 + 2 &lt; 5 and 10 - 1 &gt;= 16 or 12 &lt;= 3 / 5</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    Stdout.line!(interpolated)?</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    Stdout.line!(\"How about ${Num.toStr(number)} as a string?\")</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\}</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\expect {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    foo = 1</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    blah = 1</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    blah == foo</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\}</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 502052100,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740577968
    },
    {
        "content": "<p>This test for the binops may also be helpful for people to correct any precedence or associativity errors I may have made:</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"k\">test</span><span class=\"w\"> </span><span class=\"s\">\"BinOp omnibus\"</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">expr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"Err(foo) ?? 12 &gt; 5 * 5 or 13 + 2 &lt; 5 and 10 - 1 &gt;= 16 or 12 &lt;= 3 / 5\"</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">expr_sloppy</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"Err(foo)??12&gt;5*5 or 13+2&lt;5 and 10-1&gt;=16 or 12&lt;=3/5\"</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">formatted</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"((((Err(foo) ?? 12) &gt; (5 * 5)) or (((13 + 2) &lt; 5) and ((10 - 1) &gt;= 16))) or (12 &lt;= (3 / 5)))\"</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"n\">exprFmtsSame</span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">no_debug</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"n\">exprFmtsTo</span><span class=\"p\">(</span><span class=\"n\">expr_sloppy</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">expr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">no_debug</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"n\">exprFmtsTo</span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">formatted</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">debug_binop</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"n\">exprFmtsTo</span><span class=\"p\">(</span><span class=\"n\">expr_sloppy</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">formatted</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">debug_binop</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 502052834,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740578168
    },
    {
        "content": "<p>Not that the <code>()</code>-laden <code>formatted</code> variable is using a debug flag in the formatter to show the boundaries of the individual operations (until we have full SExpr IR support here)</p>",
        "id": 502053011,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740578226
    },
    {
        "content": "<p>Anthony, I'm gonna have to break your legs</p>",
        "id": 502107884,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740592122
    },
    {
        "content": "<p>You're going too fast</p>",
        "id": 502107904,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740592127
    },
    {
        "content": "<p>Drastic actions :p</p>",
        "id": 502108692,
        "sender_full_name": "Anton",
        "timestamp": 1740592358
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/stream/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/502107904\">said</a>:</p>\n<blockquote>\n<p>You're going too fast</p>\n</blockquote>\n<p>I’m only doing this an hour (or two) a day!  I’ve felt like I’m moving at a glacial pace, so thanks for the pick-me-up</p>",
        "id": 502115334,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740594415
    },
    {
        "content": "<p>But don’t feel bad - adding expect, crash, and return statements is causing a lot of problems</p>",
        "id": 502116274,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740594696
    },
    {
        "content": "<p>If there's problems from requiring return to not have statements after, then feel free to make the canonicalize code handle it</p>",
        "id": 502118212,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740595275
    },
    {
        "content": "<p>I presume that's not the main issue, though</p>",
        "id": 502118259,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740595285
    },
    {
        "content": "<p>No I haven’t figured it out, hit it right before work so I’ll find out tonight or in the morning</p>",
        "id": 502120447,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740595959
    },
    {
        "content": "<p>oh yeah canonicalize should definitely handle that imo <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 502128800,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740598553
    },
    {
        "content": "<p>Updated the syntax for my PR above to include expect, crash, and return</p>",
        "id": 502167473,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740614186
    },
    {
        "content": "<p>I think import exposing and the rest of the headers should be next</p>",
        "id": 502167511,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740614218
    },
    {
        "content": "<p>And then we need to talk about static dispatch and record access</p>",
        "id": 502167547,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740614237
    },
    {
        "content": "<p>I want to treat it similar to binop, but not being a binop</p>",
        "id": 502167595,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740614272
    },
    {
        "content": "<p>It's &lt;expr&gt;&lt;apply args&gt;&lt;try suffix&gt;&lt;dot access&gt;&lt;binop....&gt; in terms of (not real) binding power</p>",
        "id": 502167690,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740614321
    },
    {
        "content": "<p>Or maybe try suffix goes last...</p>",
        "id": 502167708,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740614342
    },
    {
        "content": "<p>Do we want to support <code>some_fn(arg1)?.static_dispatch_method()?.next_static_dispatch_method()?.record_field</code>?</p>",
        "id": 502167772,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740614389
    },
    {
        "content": "<p>That code looks like it should be valid</p>",
        "id": 502167914,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740614431
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/502167914\">said</a>:</p>\n<blockquote>\n<p>That code looks like it should be valid</p>\n</blockquote>\n<p>And it is so....</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"k\">test</span><span class=\"w\"> </span><span class=\"s\">\"Syntax grab bag\"</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"n\">moduleFmtsSame</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\app [main!] { pf: platform \"../basic-cli/platform.roc\" }</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\import pf.Stdout</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\Map a b : List(a), (a -&gt; b) -&gt; List(b)</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\Foo : (Bar, Baz)</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\Some a : { foo : Ok(a), bar : Something }</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\Maybe a : [Some(a), None]</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\SomeFunc a : Maybe(a), a -&gt; Maybe(a)</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\add_one_oneline = |num| if num 2 else 5</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\add_one : (U64 -&gt; U64)</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\add_one = |num| {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    other = 1</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    if num {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        dbg some_func()</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        0</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    } else {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        dbg 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        other</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    }</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\}</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\match_time = |a| match a {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    Blue | Green | Red -&gt; {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        x = 12</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        x</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    }</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    lower -&gt; 1</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    \"foo\" -&gt; 100</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    \"foo\" | \"bar\" -&gt; 200</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    [1, 2, 3, .. as rest] -&gt; 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    [1, 2 | 5, 3, .. as rest] -&gt; 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    3.14 -&gt; 314</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    3.14 | 6.28 -&gt; 314</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    (1, 2, 3) -&gt; 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    (1, 2 | 5, 3) -&gt; 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    { foo: 1, bar: 2, ..rest } -&gt; 12</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    { foo: 1, bar: 2 | 7 } -&gt; 12</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    Ok(123) -&gt; 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    Ok(Some(dude)) -&gt; dude</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    TwoArgs(\"hello\", Some(\"world\")) -&gt; 1000</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\}</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\expect blah == 1</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\main! : List(String) -&gt; Result({}, _)</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\main! = |_| {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    world = \"World\"</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    number = 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    expect blah == 1</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    tag = Blue</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    return tag</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    crash \"Unreachable!\"</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    tag_with_payload = Ok(number)</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    interpolated = \"Hello, ${world}\"</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    list = [add_one(number), 456, 789]</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    record = { foo: 123, bar: \"Hello\", baz: tag, qux: Ok(world), punned }</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    tuple = (123, \"World\", tag, Ok(world), (nested, tuple), [1, 2, 3])</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    bin_op_result = Err(foo) ?? 12 &gt; 5 * 5 or 13 + 2 &lt; 5 and 10 - 1 &gt;= 16 or 12 &lt;= 3 / 5</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    # NEW!!!</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    static_dispatch_style = some_fn(arg1)?.static_dispatch_method()?.next_static_dispatch_method()?.record_field?</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    Stdout.line!(interpolated)?</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    Stdout.line!(\"How about ${Num.toStr(number)} as a string?\")</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\}</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\expect {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    foo = 1</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    blah = 1</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    blah == foo</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\}</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 502187744,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740625906
    },
    {
        "content": "<p>I forgot I have unary ops (easy), and record updaters and record builders.  What are the current status and agreed-upon syntax for them?  The same as in the current alpha?</p>",
        "id": 502188080,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740626110
    },
    {
        "content": "<p>Yeah I think there's no change to Record Builder</p>",
        "id": 502188119,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1740626136
    },
    {
        "content": "<p>Are we doing something with <code>..</code> for record update?</p>",
        "id": 502188286,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740626263
    },
    {
        "content": "<p>See <a href=\"https://github.com/roc-lang/roc/issues/7091\">https://github.com/roc-lang/roc/issues/7091</a></p>",
        "id": 502188298,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1740626275
    },
    {
        "content": "<p>Ah...ok, so it's like List rest</p>",
        "id": 502188371,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740626303
    },
    {
        "content": "<p>Or it's parent Issue <a href=\"https://github.com/roc-lang/roc/issues/7106\">https://github.com/roc-lang/roc/issues/7106</a> \"Syntax Changes\"</p>",
        "id": 502188377,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1740626307
    },
    {
        "content": "<p>Oooo, the ellipsis keyword!  Almost forgot about that!</p>",
        "id": 502188408,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740626333
    },
    {
        "content": "<p>Ok, I'll make sure this all gets done</p>",
        "id": 502188436,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740626358
    },
    {
        "content": "<p>That'll leave me with Custom Types and the replacement syntax for abilities</p>",
        "id": 502188463,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740626385
    },
    {
        "content": "<p>Do you have the issue handy for that?  Or is there one?</p>",
        "id": 502188475,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740626395
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/issues/7458\">https://github.com/roc-lang/roc/issues/7458</a></p>",
        "id": 502188546,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1740626421
    },
    {
        "content": "<p>I guess I just look at the static dispatch doc...</p>",
        "id": 502188554,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740626426
    },
    {
        "content": "<p>And this is the doc for Custom Types...</p>\n<p><a href=\"https://docs.google.com/document/d/10OFeNl9KAYAErajE0Wio4AAR66yM2u13bku0mTUawVk/edit?tab=t.0\">https://docs.google.com/document/d/10OFeNl9KAYAErajE0Wio4AAR66yM2u13bku0mTUawVk/edit?tab=t.0</a></p>",
        "id": 502188907,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740626687
    },
    {
        "content": "<p>If there has been any meaningful changes to this proposal (the thread had no concrete takeaways that were scannable), let me know</p>",
        "id": 502189052,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740626776
    },
    {
        "content": "<p>I'm wondering if we still need the <code>*</code> in <code>module [User.*, SomethingElse, …etc]</code>.  Didn't we discuss somewhere that fields in a Custom Record would always be public.</p>",
        "id": 502189647,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1740627129
    },
    {
        "content": "<p>for nominal types, the only one we're going to support is tag unions (not records or tuples after all)</p>",
        "id": 502190388,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740627570
    },
    {
        "content": "<p>and they do still need the <code>.*</code> syntax for making the tags optionally public</p>",
        "id": 502190430,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740627593
    },
    {
        "content": "<p>That should be the only use of <code>*</code> then. Because we're going to remove it from types and use a variable instead. <a href=\"https://github.com/roc-lang/roc/issues/7451\">https://github.com/roc-lang/roc/issues/7451</a></p>",
        "id": 502191126,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1740628048
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/502191126\">said</a>:</p>\n<blockquote>\n<p>That should be the only use of <code>*</code> then. Because we're going to remove it from types and use a variable instead. <a href=\"https://github.com/roc-lang/roc/issues/7451\">https://github.com/roc-lang/roc/issues/7451</a></p>\n</blockquote>\n<p>PR for this: <a href=\"https://github.com/roc-lang/roc/pull/7642\">https://github.com/roc-lang/roc/pull/7642</a></p>",
        "id": 502293446,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740665399
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/502293446\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/502191126\">said</a>:</p>\n<blockquote>\n<p>That should be the only use of <code>*</code> then. Because we're going to remove it from types and use a variable instead. <a href=\"https://github.com/roc-lang/roc/issues/7451\">https://github.com/roc-lang/roc/issues/7451</a></p>\n</blockquote>\n<p>PR for this: <a href=\"https://github.com/roc-lang/roc/pull/7642\">https://github.com/roc-lang/roc/pull/7642</a></p>\n</blockquote>\n<p>Added <code>...</code> expression to the above</p>",
        "id": 502295952,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740666031
    },
    {
        "content": "<p>Update from the above PR:</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"k\">test</span><span class=\"w\"> </span><span class=\"s\">\"Syntax grab bag\"</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"n\">moduleFmtsSame</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\app [main!] { pf: platform \"../basic-cli/platform.roc\" }</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\import pf.Stdout</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\Map a b : List(a), (a -&gt; b) -&gt; List(b)</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\Foo : (Bar, Baz)</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\Some a : { foo : Ok(a), bar : Something }</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\Maybe a : [Some(a), None]</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\SomeFunc a : Maybe(a), a -&gt; Maybe(a)</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\add_one_oneline = |num| if num 2 else 5</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\add_one : (U64 -&gt; U64)</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\add_one = |num| {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    other = 1</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    if num {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        dbg some_func()</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        0</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    } else {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        dbg 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        other</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    }</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\}</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\match_time = |a| match a {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    Blue | Green | Red -&gt; {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        x = 12</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        x</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    }</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    lower -&gt; 1</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    \"foo\" -&gt; 100</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    \"foo\" | \"bar\" -&gt; 200</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    [1, 2, 3, .. as rest] -&gt; 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    [1, 2 | 5, 3, .. as rest] -&gt; 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    3.14 -&gt; 314</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    3.14 | 6.28 -&gt; 314</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    (1, 2, 3) -&gt; 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    (1, 2 | 5, 3) -&gt; 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    { foo: 1, bar: 2, ..rest } -&gt; 12</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    { foo: 1, bar: 2 | 7 } -&gt; 12</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    Ok(123) -&gt; 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    Ok(Some(dude)) -&gt; dude</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    TwoArgs(\"hello\", Some(\"world\")) -&gt; 1000</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\}</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\expect blah == 1</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\main! : List(String) -&gt; Result({}, _)</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\main! = |_| {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    world = \"World\"</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    number = 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    expect blah == 1</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    tag = Blue</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    return tag</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    # NEW!!!</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    ...</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    match_time(...)</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    crash \"Unreachable!\"</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    tag_with_payload = Ok(number)</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    interpolated = \"Hello, ${world}\"</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    list = [add_one(number), 456, 789]</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    record = { foo: 123, bar: \"Hello\", baz: tag, qux: Ok(world), punned }</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    tuple = (123, \"World\", tag, Ok(world), (nested, tuple), [1, 2, 3])</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    bin_op_result = Err(foo) ?? 12 &gt; 5 * 5 or 13 + 2 &lt; 5 and 10 - 1 &gt;= 16 or 12 &lt;= 3 / 5</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    static_dispatch_style = some_fn(arg1)?.static_dispatch_method()?.next_static_dispatch_method()?.record_field?</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    Stdout.line!(interpolated)?</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    Stdout.line!(\"How about ${Num.toStr(number)} as a string?\")</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\}</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\expect {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    foo = 1</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    blah = 1</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    blah == foo</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\}</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 502296229,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740666097
    },
    {
        "content": "<p>Ok... so what should be happening with malformed nodes? </p>\n<p>For example say I have a roc file that is literally</p>\n<div class=\"codehilite\"><pre><span></span><code>modZZZ [foo]\n\nfoo = 1\n</code></pre></div>\n<p>I have a malformed header here and so expect there to be an error pushed into the list of Diagnostics and a malformed node added to the AST. </p>\n<p>Now if I want to format this AST ... what should happen when I get to this point? </p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">getHeader</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">NodeStore</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">header</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">HeaderIdx</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">Header</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">nodes</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">@enumFromInt</span><span class=\"p\">(</span><span class=\"n\">header</span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"k\">switch</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">tag</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">app_header</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">module_header</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">debug</span><span class=\"p\">.</span><span class=\"n\">panic</span><span class=\"p\">(</span><span class=\"s\">\"Expected a valid header tag, got {s}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.{</span><span class=\"nb\">@tagName</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">tag</span><span class=\"p\">)});</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>We call <code>getHeader</code> and then it blows up because we don't have a malformed node.</p>\n<p>Maybe we might actually want to add a malformed node here... so I gave that a try. Heres a PR that does that for just the header <a href=\"https://github.com/roc-lang/roc/pull/7672\">https://github.com/roc-lang/roc/pull/7672</a></p>\n<p>Am I on the right track?</p>",
        "id": 504004831,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1741331587
    },
    {
        "content": "<p>Side note -- I think I found a memory leak in the error diagnostics here by accident. </p>\n<div class=\"codehilite\"><pre><span></span><code>$ zig build snapshot\nwarning: file /Users/luke/Documents/GitHub/roc/src/snapshots/003.txt: contained 1 errors, skipping\ninfo: processed 2 snapshots in 2 ms.\nerror(gpa): memory address 0x102928700 leaked:\n/Users/luke/zig-macos-aarch64-0.13.0/lib/std/array_list.zig:1081:62: 0x102873d1f in ensureTotalCapacityPrecise (snapshot)\n                const new_memory = try allocator.alignedAlloc(T, alignment, new_capacity);\n                                                             ^\n/Users/luke/zig-macos-aarch64-0.13.0/lib/std/array_list.zig:1058:51: 0x1028628e3 in ensureTotalCapacity (snapshot)\n            return self.ensureTotalCapacityPrecise(allocator, better_capacity);\n                                                  ^\n/Users/luke/zig-macos-aarch64-0.13.0/lib/std/array_list.zig:1111:41: 0x102847daf in addOne (snapshot)\n            try self.ensureTotalCapacity(allocator, newlen);\n                                        ^\n/Users/luke/zig-macos-aarch64-0.13.0/lib/std/array_list.zig:848:49: 0x10281b687 in append (snapshot)\n            const new_item_ptr = try self.addOne(allocator);\n                                                ^\n/Users/luke/Documents/GitHub/roc/src/check/parse/Parser.zig:121:28: 0x1028462ef in pushMalformed__anon_11980 (snapshot)\n    self.diagnostics.append(self.gpa, .{\n                           ^\n/Users/luke/Documents/GitHub/roc/src/check/parse/Parser.zig:943:38: 0x10281a103 in parseExprWithBp (snapshot)\n            return self.pushMalformed(IR.NodeStore.ExprIdx, .unexpected_token);\n                                     ^\n</code></pre></div>",
        "id": 504006160,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1741331654
    },
    {
        "content": "<p>This is a great question for <span class=\"user-mention\" data-user-id=\"453336\">@Joshua Warner</span> since he designed the malformed node system.  Ideally it would just be something aggressive like (MALFORMED &lt;tag&gt;)</p>",
        "id": 504128827,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741363199
    },
    {
        "content": "<p>Need some alignment on syntax supported in exposes/exposing list(both in headers and in imports)</p>\n<ul>\n<li>lower and upper idents obviously</li>\n<li>they can have alias using <code>as</code> (?)</li>\n<li>they can have a <code>.</code> with either <code>*</code> or curlies around a comma separated list of lower and upper idents</li>\n<li>Can Those ^ have aliases?</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><code>import SomeModule exposing [\n    lowerIdent!,\n    UpperIdent,\n    something as something_else, # ???\n    Foo.*,\n    Bar.{ fn_one, fn_two },\n    Baz.{ fn_one as function_one, fn_two as function_two }, #???\n]\n</code></pre></div>",
        "id": 504129851,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741363475
    },
    {
        "content": "<p>And are there differences worth worrying about between headers and imports?</p>",
        "id": 504129910,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741363497
    },
    {
        "content": "<p>(At least for parsing)</p>",
        "id": 504129926,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741363502
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> since you are the keeper of the syntax :-)</p>",
        "id": 504129953,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741363513
    },
    {
        "content": "<p>Those last two don't exist anymore, right?</p>",
        "id": 504146799,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741368624
    },
    {
        "content": "<p>also <code>.*</code> should not be allowed in imports</p>",
        "id": 504148933,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1741369350
    },
    {
        "content": "<p>only in the specific case of a module header that's exposing a nominal tag union</p>",
        "id": 504149019,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1741369383
    },
    {
        "content": "<p>You're thinking of glob exposes for custom unions, Anthony</p>",
        "id": 504149027,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741369386
    },
    {
        "content": "<p>Probably. I think I forgot custom types became a tag union rather than a record</p>",
        "id": 504160731,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741373055
    },
    {
        "content": "<p>So</p>\n<div class=\"codehilite\"><pre><span></span><code>import SomeModule exposing [\n    lowerIdent!,\n    UpperIdent,\n    something as something_else,\n]\n</code></pre></div>\n<p>And </p>\n<div class=\"codehilite\"><pre><span></span><code>module exposing [\n    lowerIdent!,\n    UpperIdent,\n    something as something_else,\n    Foo.*,\n]\n</code></pre></div>",
        "id": 504161180,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741373201
    },
    {
        "content": "<p>I think I’ll parse the same and let Can throw an error on .* in an import</p>",
        "id": 504161296,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741373233
    },
    {
        "content": "<p>That all looks right to me, except for <code>module exposing [a as b]</code>, not sure if that's planned for support</p>",
        "id": 504163199,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741373863
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> <a href=\"#narrow/stream/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/504128827\">said</a>:</p>\n<blockquote>\n<p>This is a great question for <span class=\"user-mention silent\" data-user-id=\"453336\">Joshua Warner</span> since he designed the malformed node system.  Ideally it would just be something aggressive like (MALFORMED &lt;tag&gt;)</p>\n</blockquote>\n<p>Yep this is exactly what I was thinking</p>",
        "id": 504163460,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1741373946
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/504163199\">said</a>:</p>\n<blockquote>\n<p>That all looks right to me, except for <code>module exposing [a as b]</code>, not sure if that's planned for support</p>\n</blockquote>\n<p>If it's not, it should :-)</p>",
        "id": 504213180,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741395217
    },
    {
        "content": "<p>Renaming on expose? Why?</p>",
        "id": 504213383,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741395326
    },
    {
        "content": "<p>Feels like that is a sign the function was simply named wrong</p>",
        "id": 504213394,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741395338
    },
    {
        "content": "<p>It's not uncommon to encounter a situation where more than one import exposes a function/type that has the same name that you may want to use without namespacing</p>",
        "id": 504213525,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741395412
    },
    {
        "content": "<p>But now that I think of it, maybe that mostly disappears with SD</p>",
        "id": 504213546,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741395428
    },
    {
        "content": "<p>I think of multiple types having a map function for instance</p>",
        "id": 504213571,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741395447
    },
    {
        "content": "<p>Ok, so the only different thing available here is the .* syntax in headers</p>",
        "id": 504213679,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741395502
    },
    {
        "content": "<p>It would make SD more complicated than \"the module needs a function named xyz\" to allow renaming two things to the same name in the same module</p>",
        "id": 504213695,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741395513
    },
    {
        "content": "<p>Man that seems like such a silly thing to have to create a new node type for</p>",
        "id": 504213699,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741395517
    },
    {
        "content": "<p>And besides that, there's no value to doing it there besides at the module name</p>",
        "id": 504213720,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741395539
    },
    {
        "content": "<p>So I vote actively not adding that feature</p>",
        "id": 504213740,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741395546
    },
    {
        "content": "<p>My specific comment is rename on <code>exposing</code>. Rename on <code>import</code> makes sense to me</p>",
        "id": 504213744,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741395548
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/504213699\">said</a>:</p>\n<blockquote>\n<p>Man that seems like such a silly thing to have to create a new node type for</p>\n</blockquote>\n<p>copium</p>",
        "id": 504213775,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741395572
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/504213744\">said</a>:</p>\n<blockquote>\n<p>My specific comment is rename on <code>exposing</code>. Rename on <code>import</code> makes sense to me</p>\n</blockquote>\n<p>I agree with you on the header</p>",
        "id": 504213776,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741395573
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/504213775\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/504213699\">said</a>:</p>\n<blockquote>\n<p>Man that seems like such a silly thing to have to create a new node type for</p>\n</blockquote>\n<p>copium</p>\n</blockquote>\n<p><span aria-label=\"stuck out tongue closed eyes\" class=\"emoji emoji-1f61d\" role=\"img\" title=\"stuck out tongue closed eyes\">:stuck_out_tongue_closed_eyes:</span></p>",
        "id": 504213792,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741395588
    },
    {
        "content": "<p>the benefit is to avoid shadowing</p>",
        "id": 504238388,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1741412682
    },
    {
        "content": "<p>let's say I have a module named <code>Parser</code> and I want to expose <code>Parser.str</code> but I also want to use the name <code>str</code> all over the place in <code>Parser.roc</code></p>",
        "id": 504238435,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1741412717
    },
    {
        "content": "<p><code>as</code> in the module header's <code>exposing</code> means I can locally name it <code>inner_str</code> (or whatever) and then expose <code>inner_str as str</code> so everyone outside the module gets the nice name of <code>Parser.str</code> but inside <code>Parser.roc</code> I still get to use the name <code>str</code> for argument names etc.</p>",
        "id": 504238517,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1741412768
    },
    {
        "content": "<p>I guess</p>",
        "id": 504239881,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741413877
    },
    {
        "content": "<p>I feel like that is rare</p>",
        "id": 504239888,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741413882
    },
    {
        "content": "<p>And if you really need it, you can make <code>Parser.roc</code> that reexports things form <code>InnerParser.roc</code></p>",
        "id": 504239920,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741413911
    },
    {
        "content": "<p>No strong feels, just feel unnecessary.</p>",
        "id": 504239940,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741413938
    },
    {
        "content": "<p>I feel like, reading <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> 's message, that I should implement <code>as</code> in exposing</p>",
        "id": 504286797,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741447731
    },
    {
        "content": "<p>I think I can parse a <code>crash</code> at the top level.. but not in a def. </p>\n<p>This blows up because it makes that a malformed node</p>\n<div class=\"codehilite\"><pre><span></span><code>module []\n\nthing =\n    crash &quot;something&quot;\n</code></pre></div>\n<p>But this is fine</p>\n<div class=\"codehilite\"><pre><span></span><code>module []\n\ncrash &quot;something&quot;\n</code></pre></div>",
        "id": 504322439,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1741471635
    },
    {
        "content": "<p>Actually I think it's the same for <code>expect</code> and <code>return</code> too</p>",
        "id": 504322731,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1741471867
    },
    {
        "content": "<p>That shouldn't break, yes, but I think in this case it's looking for braces</p>",
        "id": 504323646,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741472667
    },
    {
        "content": "<p>Which I think is good, because it keeps statement-only behaviors from working as expressions</p>",
        "id": 504323668,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741472700
    },
    {
        "content": "<p>Though a proper error message would be nice</p>",
        "id": 504323685,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741472708
    },
    {
        "content": "<p>I thought we decided those wouldn't have braces -- edit err parens <code>(</code>?</p>",
        "id": 504323784,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1741472767
    },
    {
        "content": "<p>Interesting... so this parses correctly</p>\n<div class=\"codehilite\"><pre><span></span><code>module []\n\nfoo = { crash &quot;something&quot; }\n</code></pre></div>\n<p>But the formatter removes the braces <code>{</code>, and then it blows up</p>",
        "id": 504323902,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1741472872
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/channel/304641-ideas/topic/.60if.60.20condition.20pattern.20match/near/502677490\">said</a>:</p>\n<blockquote>\n<p>here is a concrete proposal that I'm happy with. If anyone would rather we didn't do this, please say why!</p>\n<ol>\n<li>Change the way <code>?? return \"\"</code> formats to have the formatter add braces so it becomes <code>?? { return \"\" }</code> and same with <code>crash</code>. No changes to the semantics of anything involved in this; it's purely to address the concern over it being not visually obvious enough what the code does.</li>\n<li>Introduce <code>if Ok(path) = paths.first() {</code> pattern matching. We explored a bunch of alternatives and this still feels like the best solution to the problem at the top of the thread.</li>\n</ol>\n<p>that's it, no other changes. Both of these are addressing specific ergonomics concerns with the status quo, and are not trying to go back to the drawing board and reconsider everything.</p>\n</blockquote>",
        "id": 504323909,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741472881
    },
    {
        "content": "<p>Okay, I was changing remembered history in bias of my preferences</p>",
        "id": 504323964,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741472903
    },
    {
        "content": "<p>Classic</p>",
        "id": 504323967,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741472905
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/504323902\">said</a>:</p>\n<blockquote>\n<p>Interesting... so this parses correctly</p>\n<div class=\"codehilite\"><pre><span></span><code>module []\n\nfoo = { crash &quot;something&quot; }\n</code></pre></div>\n<p>But the formatter removes the braces <code>{</code>, and then it blows up</p>\n</blockquote>\n<p>This is my fault. Kind of. Crash is a statement but not an expression right now, and statements are only parsed in the top level and inside of blocks</p>\n<p>But the formatter removes the curlies form single statement blocks - assuming they are just an expression</p>",
        "id": 504329762,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741477734
    },
    {
        "content": "<p>The only way to resolve this in the parser would be to lookup what kind of statement is in the single statement blocks to ensure it is a Expr</p>",
        "id": 504329810,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741477792
    },
    {
        "content": "<p>But I can’t push anything today due to a day long outage by Comcast in near-west Chicago</p>",
        "id": 504329870,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741477824
    },
    {
        "content": "<p>It's alg. I'm just noting things as I find them.</p>\n<p>I'm often not sure if its me, the parser impl  or what the intended syntax is. </p>\n<p>It's not urgent or anything.</p>",
        "id": 504330258,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1741478223
    },
    {
        "content": "<p>I've just been looping with the fuzzer and fixing bugs one by one in <a href=\"https://github.com/roc-lang/roc/pull/7672\">https://github.com/roc-lang/roc/pull/7672</a></p>\n<p>I'm not 100% my approach is right so I'm just keeping it in draft until I get some feedback or we have a clear direction for handling errors. </p>\n<p>I'm just picking the first fuzz crash, fixing that and making a snapshot test for it, then moving on to the next. </p>\n<p>I'm expecting there will be changes required and happy to do that later. But I figure it doesn't hurt to just keep going for now.</p>",
        "id": 504437200,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1741558404
    },
    {
        "content": "<p>I just noticed we have two different <code>Region</code> types. One has indexes into the token buffer, so token indexes. The other has indexes into the source code bytes.</p>\n<p>Should we rename one of these, e.g. <code>TRegion</code> or something to reflect it's spanning the tokens instead?</p>",
        "id": 504967134,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1741730755
    },
    {
        "content": "<p>The other idea I have, is to move the Region that indexes tokens, under Token.. so it's a <code>Token.Region</code> instead</p>",
        "id": 504967424,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1741730845
    },
    {
        "content": "<p>It would be nice to unify them, yes. I think the other suggestion from <span class=\"user-mention\" data-user-id=\"453336\">@Joshua Warner</span> was to make <code>Region</code> be a <code>Node.Idx</code>. That would allow us to use half the memory (we only need one u32 value instead of a start and end that are both u32), though some diagnostics might need to store more <code>Region</code>s when they refer to complex regions.</p>",
        "id": 504969797,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741731714
    },
    {
        "content": "<p>At the very least, I agree that renaming one of the two <code>Region</code>s in our codebase would mitigate some confusion.</p>",
        "id": 504969926,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741731754
    },
    {
        "content": "<blockquote>\n<p>I think the other suggestion from @Joshua Warner was to make <code>Region</code> be a <code>Node.Idx</code>.</p>\n</blockquote>\n<p>Does this work in general? Won't a region in the parser be a range of tokens rather than a single token?</p>",
        "id": 504973322,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741732733
    },
    {
        "content": "<p>Like the region of an expression will include many many tokens</p>",
        "id": 504973382,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741732754
    },
    {
        "content": "<p>Yes, it would hold many tokens</p>",
        "id": 504974161,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741733024
    },
    {
        "content": "<p>The tradeoff is that we can store everything we need a <code>Region</code> to do, which is display/highlight code for diagnostics, in 32 bits</p>",
        "id": 504974370,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741733070
    },
    {
        "content": "<p>But at the cost of needing the parse AST to figure out what a <code>Region</code> refers to</p>",
        "id": 504974458,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741733093
    },
    {
        "content": "<p>If there is a tradeoff here, I lean towards keeping it brain dead simple for now... until we have a working compiler</p>",
        "id": 504974664,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1741733134
    },
    {
        "content": "<p>Agreed</p>",
        "id": 504974681,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741733140
    },
    {
        "content": "<p>Though they both seem simple to me</p>",
        "id": 504974713,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741733155
    },
    {
        "content": "<p><del>Option 1: two <code>Region</code> types, <code>Region = { start: u32, len: u32 }</code> and refers to a slice of the source code, <code>TokenRegion</code> is separate for the tokenizer</del></p>",
        "id": 504974966,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741733227
    },
    {
        "content": "<p>Okay, looking now at the <code>Parse.IR.Region</code> type, they can definitely be the same thing</p>",
        "id": 504975345,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741733342
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"c1\">/// The first and last token consumed by a Node</span>\n<span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">Region</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">start</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">TokenIdx</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">end</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">TokenIdx</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n</code></pre></div>\n<p><a href=\"https://github.com/roc-lang/roc/blob/13c5152cb736d7d46a599fe4624e4ddd58d8a1a5/src/check/parse/IR.zig#L100\">defined here</a></p>",
        "id": 504975419,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741733372
    },
    {
        "content": "<p>I think we should either use <code>Region = Parse.IR.Region</code> or <code>Region = Node.Idx</code></p>",
        "id": 504975733,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741733499
    },
    {
        "content": "<p>Both of them assume that tokenizing/parsing has happened, but unless we either:</p>\n<ul>\n<li>keep a copy of each source file of memory, or</li>\n<li>trust that the contents of the source file haven't changed between the initial parse and the reporting of diagnostics</li>\n</ul>\n<p>Even the <code>Region = { start: u32, len: u32 }</code> solution is fragile to source-code changes</p>",
        "id": 504976163,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741733658
    },
    {
        "content": "<p><del>If we get diagnostics, we could rip out the relevant text before closing the file</del> Nvm, late stages might have diagnostics...was just thinking about tokenize and parse diagnostics</p>",
        "id": 504976290,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741733720
    },
    {
        "content": "<p>What about diagnostics (which I'm using interchangeably with errors/warnings) for type errors?</p>",
        "id": 504976363,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741733754
    },
    {
        "content": "<p>yep</p>",
        "id": 504976369,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741733757
    },
    {
        "content": "<p>I think we just reopen the file and if it changed, oh well</p>",
        "id": 504976464,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741733785
    },
    {
        "content": "<p>Yeah, not worth making our compiler more memory-bloated to handle this</p>",
        "id": 504976519,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741733810
    },
    {
        "content": "<p>Also, keeping original source ranges enables use to just drop the tokenized buffer. So I lean towards that.</p>",
        "id": 504976569,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741733834
    },
    {
        "content": "<p>The plan was to just tokenize/parse a second time</p>",
        "id": 504976628,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741733865
    },
    {
        "content": "<p>If we do that, then we can use a single u32</p>",
        "id": 504976654,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741733875
    },
    {
        "content": "<p>The start offset to tokenize/parse from?</p>",
        "id": 504976752,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741733897
    },
    {
        "content": "<p>The <code>Parse.IR.Store.Node.Idx</code></p>",
        "id": 504976798,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741733917
    },
    {
        "content": "<p>Oh, and just assume that reparsing will generate the exact same node. Then from the node get the start and end token and from those get the region start and end bytes</p>",
        "id": 504976902,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741733962
    },
    {
        "content": "<p>Yep!</p>",
        "id": 504976916,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741733966
    },
    {
        "content": "<p>I don't believe that would be much harder than the current approach, and neither solution is implemented yet since error rendering is entirely untouched</p>",
        "id": 504977066,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741734013
    },
    {
        "content": "<p>Just trying to think about the implications of llvm debug info generation (and interpreter single stepping and printing surrounding context).</p>",
        "id": 504977108,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741734026
    },
    {
        "content": "<p>The interpreter would probably want to keep a parse AST for every file, or even the source of the file at time of interpretation</p>",
        "id": 504977310,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741734078
    },
    {
        "content": "<p>For llvm debug info means that we will reparse every single file (but this reduce max memory requirement of the compiler and llvm is really just for optimized builds so reparsing should be really cheap).</p>",
        "id": 504977333,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741734088
    },
    {
        "content": "<p>I was suggesting to <span class=\"user-mention\" data-user-id=\"453336\">@Joshua Warner</span> that we used to parse just the header of files when looking for package dependencies, and he said \"I'm hoping parsing is so fast that we don't need to worry about partial parsing\"</p>",
        "id": 504977549,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741734161
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/504977310\">said</a>:</p>\n<blockquote>\n<p>The interpreter would probably want to keep a parse AST for every file, or even the source of the file at time of interpretation</p>\n</blockquote>\n<p>Yeah, quite possibly. Though don't want to ruin memory use due to a single gigantic file. So might want to reload only if needed. Cause execution flow doesn't need any line info, only repl and debug flows.</p>",
        "id": 504977566,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741734168
    },
    {
        "content": "<p>I think parsing can be super fast</p>",
        "id": 504977578,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741734173
    },
    {
        "content": "<p>yeah, all sounds reasonable</p>",
        "id": 504977616,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741734189
    },
    {
        "content": "<p>I'll be really curious to bench parsing against the rust compiler</p>",
        "id": 504977654,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741734199
    },
    {
        "content": "<p>Benchmarking of just parsing and also eventually typechecking as well would be awesome to see side-by-side!</p>",
        "id": 504977757,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741734238
    },
    {
        "content": "<p>Yeah, full <code>roc check</code> flow once it is working</p>",
        "id": 504977968,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741734307
    },
    {
        "content": "<blockquote>\n<p>since error rendering is entirely untouched</p>\n</blockquote>\n<p>That's not entirely true anymore</p>",
        "id": 504978071,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1741734345
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/blob/13c5152cb736d7d46a599fe4624e4ddd58d8a1a5/src/problem.zig#L82\">https://github.com/roc-lang/roc/blob/13c5152cb736d7d46a599fe4624e4ddd58d8a1a5/src/problem.zig#L82</a></p>",
        "id": 504978164,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1741734371
    },
    {
        "content": "<p>Good to know!</p>",
        "id": 504980854,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741735441
    },
    {
        "content": "<p>Holy cow</p>",
        "id": 505145073,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741788760
    },
    {
        "content": "<p>Don't have enough time right now to read all of this, but I have a new PR that gets us down the path towards multiline and commented code formatting: <a href=\"https://github.com/roc-lang/roc/pull/7695\">https://github.com/roc-lang/roc/pull/7695</a></p>\n<p>Here's a preview of the supported syntax:</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"n\">moduleFmtsSame</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\app [main!] { pf: platform \"../basic-cli/platform.roc\" }</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\... # Elided for clarity and terseness - I love that this is parsed as valid code :-)</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\main! : List(String) -&gt; Result({}, _)</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\main! = |_| {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    world = \"World\"</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    number = 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    expect blah == 1</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    tag = Blue</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    return tag</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    ...</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    match_time(...)</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    crash \"Unreachable!\"</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    tag_with_payload = Ok(number)</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    interpolated = \"Hello, ${world}\"</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    list = [</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        add_one(number), # Comment one</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        456, # Comment two</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        789, # Comment three</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    ]</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    record = { foo: 123, bar: \"Hello\", baz: tag, qux: Ok(world), punned }</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    tuple = (123, \"World\", tag, Ok(world), (nested, tuple), [1, 2, 3])</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    multiline_tuple = (</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        123,</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        \"World\",</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        tag1,</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        Ok(world), # This one has a comment</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        (nested, tuple),</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        [1, 2, 3],</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    )</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    bin_op_result = Err(foo) ?? 12 &gt; 5 * 5 or 13 + 2 &lt; 5 and 10 - 1 &gt;= 16 or 12 &lt;= 3 / 5</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    static_dispatch_style = some_fn(arg1)?.static_dispatch_method()?.next_static_dispatch_method()?.record_field?</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    Stdout.line!(interpolated)?</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    Stdout.line!(\"How about ${Num.toStr(number)} as a string?\")</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\}</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\expect {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    foo = 1 # This should work too</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    blah = 1</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    blah == foo</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\}</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n</code></pre></div>",
        "id": 505145279,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741788818
    },
    {
        "content": "<p>From here it'll be pretty mechanical</p>",
        "id": 505145353,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741788837
    },
    {
        "content": "<p>I need to add a function to get comments at the start of a multiline construct, and do some massaging of the comment to collapse excessive newlines</p>",
        "id": 505145585,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741788879
    },
    {
        "content": "<p>And of course adopt my new <code>formatCollection</code> function in about 12 places, adjusting some bad Region calculations along the way</p>",
        "id": 505145717,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741788909
    },
    {
        "content": "<p>The hardest part will definitely be the headers more than likely</p>",
        "id": 505145922,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741788962
    },
    {
        "content": "<p>And at the end I'll try to incorporate \"trailing comma multiline forcing\"</p>",
        "id": 505147728,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741789351
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/504977757\">said</a>:</p>\n<blockquote>\n<p>Benchmarking of just parsing and also eventually typechecking as well would be awesome to see side-by-side!</p>\n</blockquote>\n<p>I'm also interested in this as well (obviously), but it won't be quite a fair fight since the grammar is in many ways much easier to parse now without WSS</p>",
        "id": 505148289,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741789472
    },
    {
        "content": "<p>And also, we are tokenizing before parsing now</p>",
        "id": 505148346,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741789488
    },
    {
        "content": "<p>I don't think it needs to be fair. Part of the rewrite of the compiler was improving the grammar</p>",
        "id": 505174762,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741794512
    },
    {
        "content": "<p>It is just important to remember that it is a multifaceted comparison, not just rust vs zig or DOD vs not or etc.</p>",
        "id": 505174971,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741794552
    },
    {
        "content": "<p>Cause at the end of the day, users will care about the compiler perf and won't particularly care about any of those other details.</p>",
        "id": 505175162,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741794587
    },
    {
        "content": "<p>These are only super preliminary numbers... I'm really hoping I didn't mess anything up. I don't think I did, but the numbers feel too good to be true:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>M1 Mac</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"w\"> </span>hyperfine<span class=\"w\"> </span>-N<span class=\"w\"> </span>-w<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"w\"> </span>-r<span class=\"w\"> </span><span class=\"m\">30</span><span class=\"w\"> </span>--prepare<span class=\"w\"> </span><span class=\"s1\">'sync &amp;&amp; sudo purge'</span><span class=\"w\"> </span><span class=\"s2\">\"roc format /tmp/old\"</span><span class=\"w\"> </span><span class=\"s2\">\"./zig-out/bin/roc format /tmp/new\"</span>\nBenchmark<span class=\"w\"> </span><span class=\"m\">1</span>:<span class=\"w\"> </span>roc<span class=\"w\"> </span>format<span class=\"w\"> </span>/tmp/old\n<span class=\"w\">  </span>Time<span class=\"w\"> </span><span class=\"o\">(</span>mean<span class=\"w\"> </span>±<span class=\"w\"> </span>σ<span class=\"o\">)</span>:<span class=\"w\">     </span><span class=\"m\">298</span>.2<span class=\"w\"> </span>ms<span class=\"w\"> </span>±<span class=\"w\">   </span><span class=\"m\">0</span>.7<span class=\"w\"> </span>ms<span class=\"w\">    </span><span class=\"o\">[</span>User:<span class=\"w\"> </span><span class=\"m\">257</span>.4<span class=\"w\"> </span>ms,<span class=\"w\"> </span>System:<span class=\"w\"> </span><span class=\"m\">38</span>.8<span class=\"w\"> </span>ms<span class=\"o\">]</span>\n<span class=\"w\">  </span>Range<span class=\"w\"> </span><span class=\"o\">(</span>min<span class=\"w\"> </span>…<span class=\"w\"> </span>max<span class=\"o\">)</span>:<span class=\"w\">   </span><span class=\"m\">297</span>.0<span class=\"w\"> </span>ms<span class=\"w\"> </span>…<span class=\"w\"> </span><span class=\"m\">299</span>.6<span class=\"w\"> </span>ms<span class=\"w\">    </span><span class=\"m\">30</span><span class=\"w\"> </span>runs\n\nBenchmark<span class=\"w\"> </span><span class=\"m\">2</span>:<span class=\"w\"> </span>./zig-out/bin/roc<span class=\"w\"> </span>format<span class=\"w\"> </span>/tmp/new\n<span class=\"w\">  </span>Time<span class=\"w\"> </span><span class=\"o\">(</span>mean<span class=\"w\"> </span>±<span class=\"w\"> </span>σ<span class=\"o\">)</span>:<span class=\"w\">      </span><span class=\"m\">25</span>.7<span class=\"w\"> </span>ms<span class=\"w\"> </span>±<span class=\"w\">   </span><span class=\"m\">0</span>.2<span class=\"w\"> </span>ms<span class=\"w\">    </span><span class=\"o\">[</span>User:<span class=\"w\"> </span><span class=\"m\">18</span>.3<span class=\"w\"> </span>ms,<span class=\"w\"> </span>System:<span class=\"w\"> </span><span class=\"m\">6</span>.6<span class=\"w\"> </span>ms<span class=\"o\">]</span>\n<span class=\"w\">  </span>Range<span class=\"w\"> </span><span class=\"o\">(</span>min<span class=\"w\"> </span>…<span class=\"w\"> </span>max<span class=\"o\">)</span>:<span class=\"w\">    </span><span class=\"m\">25</span>.0<span class=\"w\"> </span>ms<span class=\"w\"> </span>…<span class=\"w\">  </span><span class=\"m\">26</span>.2<span class=\"w\"> </span>ms<span class=\"w\">    </span><span class=\"m\">30</span><span class=\"w\"> </span>runs\n\nSummary\n<span class=\"w\">  </span>./zig-out/bin/roc<span class=\"w\"> </span>format<span class=\"w\"> </span>/tmp/new<span class=\"w\"> </span>ran\n<span class=\"w\">   </span><span class=\"m\">11</span>.62<span class=\"w\"> </span>±<span class=\"w\"> </span><span class=\"m\">0</span>.12<span class=\"w\"> </span><span class=\"nb\">times</span><span class=\"w\"> </span>faster<span class=\"w\"> </span>than<span class=\"w\"> </span>roc<span class=\"w\"> </span>format<span class=\"w\"> </span>/tmp/old\n</code></pre></div>\n</div></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>X86 Linux</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"w\"> </span>hyperfine<span class=\"w\"> </span>--prepare<span class=\"w\"> </span><span class=\"s1\">'sync; echo 3 | sudo tee /proc/sys/vm/drop_caches'</span><span class=\"w\"> </span>-w<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"w\"> </span>-r<span class=\"w\"> </span><span class=\"m\">30</span><span class=\"w\"> </span><span class=\"s2\">\"./target/release/roc format /tmp/old\"</span><span class=\"w\"> </span><span class=\"s2\">\"./zig-out/bin/roc format /tmp/new\"</span>\nBenchmark<span class=\"w\"> </span><span class=\"m\">1</span>:<span class=\"w\"> </span>./target/release/roc<span class=\"w\"> </span>format<span class=\"w\"> </span>/tmp/old\n<span class=\"w\">  </span>Time<span class=\"w\"> </span><span class=\"o\">(</span>mean<span class=\"w\"> </span>±<span class=\"w\"> </span>σ<span class=\"o\">)</span>:<span class=\"w\">     </span><span class=\"m\">585</span>.9<span class=\"w\"> </span>ms<span class=\"w\"> </span>±<span class=\"w\">  </span><span class=\"m\">59</span>.5<span class=\"w\"> </span>ms<span class=\"w\">    </span><span class=\"o\">[</span>User:<span class=\"w\"> </span><span class=\"m\">431</span>.7<span class=\"w\"> </span>ms,<span class=\"w\"> </span>System:<span class=\"w\"> </span><span class=\"m\">152</span>.9<span class=\"w\"> </span>ms<span class=\"o\">]</span>\n<span class=\"w\">  </span>Range<span class=\"w\"> </span><span class=\"o\">(</span>min<span class=\"w\"> </span>…<span class=\"w\"> </span>max<span class=\"o\">)</span>:<span class=\"w\">   </span><span class=\"m\">453</span>.3<span class=\"w\"> </span>ms<span class=\"w\"> </span>…<span class=\"w\"> </span><span class=\"m\">713</span>.7<span class=\"w\"> </span>ms<span class=\"w\">    </span><span class=\"m\">30</span><span class=\"w\"> </span>runs\n\nBenchmark<span class=\"w\"> </span><span class=\"m\">2</span>:<span class=\"w\"> </span>./zig-out/bin/roc<span class=\"w\"> </span>format<span class=\"w\"> </span>/tmp/new\n<span class=\"w\">  </span>Time<span class=\"w\"> </span><span class=\"o\">(</span>mean<span class=\"w\"> </span>±<span class=\"w\"> </span>σ<span class=\"o\">)</span>:<span class=\"w\">      </span><span class=\"m\">85</span>.0<span class=\"w\"> </span>ms<span class=\"w\"> </span>±<span class=\"w\">   </span><span class=\"m\">2</span>.1<span class=\"w\"> </span>ms<span class=\"w\">    </span><span class=\"o\">[</span>User:<span class=\"w\"> </span><span class=\"m\">46</span>.0<span class=\"w\"> </span>ms,<span class=\"w\"> </span>System:<span class=\"w\"> </span><span class=\"m\">37</span>.8<span class=\"w\"> </span>ms<span class=\"o\">]</span>\n<span class=\"w\">  </span>Range<span class=\"w\"> </span><span class=\"o\">(</span>min<span class=\"w\"> </span>…<span class=\"w\"> </span>max<span class=\"o\">)</span>:<span class=\"w\">    </span><span class=\"m\">82</span>.8<span class=\"w\"> </span>ms<span class=\"w\"> </span>…<span class=\"w\">  </span><span class=\"m\">92</span>.3<span class=\"w\"> </span>ms<span class=\"w\">    </span><span class=\"m\">30</span><span class=\"w\"> </span>runs\n\n<span class=\"w\">  </span>Warning:<span class=\"w\"> </span>Statistical<span class=\"w\"> </span>outliers<span class=\"w\"> </span>were<span class=\"w\"> </span>detected.<span class=\"w\"> </span>Consider<span class=\"w\"> </span>re-running<span class=\"w\"> </span>this<span class=\"w\"> </span>benchmark<span class=\"w\"> </span>on<span class=\"w\"> </span>a<span class=\"w\"> </span>quiet<span class=\"w\"> </span>system<span class=\"w\"> </span>without<span class=\"w\"> </span>any<span class=\"w\"> </span>interferences<span class=\"w\"> </span>from<span class=\"w\"> </span>other<span class=\"w\"> </span>programs.\n\nSummary\n<span class=\"w\">  </span>./zig-out/bin/roc<span class=\"w\"> </span>format<span class=\"w\"> </span>/tmp/new<span class=\"w\"> </span>ran\n<span class=\"w\">    </span><span class=\"m\">6</span>.89<span class=\"w\"> </span>±<span class=\"w\"> </span><span class=\"m\">0</span>.72<span class=\"w\"> </span><span class=\"nb\">times</span><span class=\"w\"> </span>faster<span class=\"w\"> </span>than<span class=\"w\"> </span>./target/release/roc<span class=\"w\"> </span>format<span class=\"w\"> </span>/tmp/old\n</code></pre></div>\n</div></div>",
        "id": 505822544,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742025462
    },
    {
        "content": "<p>Note, the old compiler does have a big disadvantage that it is way larger and loads slower. That said, this is parsing and formatting 100 files with ~1000 lines (24kb each), so I don't think load time should be a big factor.</p>",
        "id": 505822683,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742025580
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>more stats via poop</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>Note: this is with a hot cache unlike hyperfine</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>Benchmark<span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"m\">11</span><span class=\"w\"> </span>runs<span class=\"o\">)</span>:<span class=\"w\"> </span>./target/release/roc<span class=\"w\"> </span>format<span class=\"w\"> </span>/tmp/old\n<span class=\"w\">  </span>measurement<span class=\"w\">          </span>mean<span class=\"w\"> </span>±<span class=\"w\"> </span>σ<span class=\"w\">            </span>min<span class=\"w\"> </span>…<span class=\"w\"> </span>max<span class=\"w\">           </span>outliers<span class=\"w\">         </span>delta\n<span class=\"w\">  </span>wall_time<span class=\"w\">           </span>468ms<span class=\"w\"> </span>±<span class=\"w\"> </span><span class=\"m\">16</span>.5ms<span class=\"w\">     </span>447ms<span class=\"w\"> </span>…<span class=\"w\">  </span>493ms<span class=\"w\">          </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">0</span>%<span class=\"o\">)</span><span class=\"w\">        </span><span class=\"m\">0</span>%\n<span class=\"w\">  </span>peak_rss<span class=\"w\">            </span>424MB<span class=\"w\"> </span>±<span class=\"w\"> </span><span class=\"m\">53</span>.6KB<span class=\"w\">     </span>424MB<span class=\"w\"> </span>…<span class=\"w\">  </span>424MB<span class=\"w\">          </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"m\">18</span>%<span class=\"o\">)</span><span class=\"w\">        </span><span class=\"m\">0</span>%\n<span class=\"w\">  </span>cpu_cycles<span class=\"w\">         </span><span class=\"m\">1</span>.65G<span class=\"w\">  </span>±<span class=\"w\"> </span><span class=\"m\">58</span>.9M<span class=\"w\">     </span><span class=\"m\">1</span>.59G<span class=\"w\">  </span>…<span class=\"w\"> </span><span class=\"m\">1</span>.81G<span class=\"w\">           </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">9</span>%<span class=\"o\">)</span><span class=\"w\">        </span><span class=\"m\">0</span>%\n<span class=\"w\">  </span>instructions<span class=\"w\">       </span><span class=\"m\">3</span>.06G<span class=\"w\">  </span>±<span class=\"w\"> </span><span class=\"m\">4</span>.56K<span class=\"w\">     </span><span class=\"m\">3</span>.06G<span class=\"w\">  </span>…<span class=\"w\"> </span><span class=\"m\">3</span>.06G<span class=\"w\">           </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">0</span>%<span class=\"o\">)</span><span class=\"w\">        </span><span class=\"m\">0</span>%\n<span class=\"w\">  </span>cache_references<span class=\"w\">   </span><span class=\"m\">53</span>.4M<span class=\"w\">  </span>±<span class=\"w\"> </span><span class=\"m\">1</span>.36M<span class=\"w\">     </span><span class=\"m\">51</span>.1M<span class=\"w\">  </span>…<span class=\"w\"> </span><span class=\"m\">55</span>.1M<span class=\"w\">           </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">0</span>%<span class=\"o\">)</span><span class=\"w\">        </span><span class=\"m\">0</span>%\n<span class=\"w\">  </span>cache_misses<span class=\"w\">       </span><span class=\"m\">5</span>.09M<span class=\"w\">  </span>±<span class=\"w\">  </span>137K<span class=\"w\">     </span><span class=\"m\">4</span>.84M<span class=\"w\">  </span>…<span class=\"w\"> </span><span class=\"m\">5</span>.30M<span class=\"w\">           </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">0</span>%<span class=\"o\">)</span><span class=\"w\">        </span><span class=\"m\">0</span>%\n<span class=\"w\">  </span>branch_misses<span class=\"w\">      </span><span class=\"m\">6</span>.94M<span class=\"w\">  </span>±<span class=\"w\"> </span><span class=\"m\">1</span>.69M<span class=\"w\">     </span><span class=\"m\">5</span>.48M<span class=\"w\">  </span>…<span class=\"w\"> </span><span class=\"m\">11</span>.7M<span class=\"w\">           </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">9</span>%<span class=\"o\">)</span><span class=\"w\">        </span><span class=\"m\">0</span>%\nBenchmark<span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"m\">57</span><span class=\"w\"> </span>runs<span class=\"o\">)</span>:<span class=\"w\"> </span>./zig-out/bin/roc<span class=\"w\"> </span>format<span class=\"w\"> </span>/tmp/new\n<span class=\"w\">  </span>measurement<span class=\"w\">          </span>mean<span class=\"w\"> </span>±<span class=\"w\"> </span>σ<span class=\"w\">            </span>min<span class=\"w\"> </span>…<span class=\"w\"> </span>max<span class=\"w\">           </span>outliers<span class=\"w\">         </span>delta\n<span class=\"w\">  </span>wall_time<span class=\"w\">          </span><span class=\"m\">87</span>.2ms<span class=\"w\"> </span>±<span class=\"w\"> </span><span class=\"m\">2</span>.76ms<span class=\"w\">    </span><span class=\"m\">83</span>.1ms<span class=\"w\"> </span>…<span class=\"w\"> </span><span class=\"m\">93</span>.1ms<span class=\"w\">          </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">0</span>%<span class=\"o\">)</span><span class=\"w\">        </span>⚡-<span class=\"w\"> </span><span class=\"m\">81</span>.4%<span class=\"w\"> </span>±<span class=\"w\">  </span><span class=\"m\">1</span>.0%\n<span class=\"w\">  </span>peak_rss<span class=\"w\">            </span>901KB<span class=\"w\"> </span>±<span class=\"w\">    </span><span class=\"m\">0</span><span class=\"w\">       </span>901KB<span class=\"w\"> </span>…<span class=\"w\">  </span>901KB<span class=\"w\">          </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">0</span>%<span class=\"o\">)</span><span class=\"w\">        </span>⚡-<span class=\"w\"> </span><span class=\"m\">99</span>.8%<span class=\"w\"> </span>±<span class=\"w\">  </span><span class=\"m\">0</span>.0%\n<span class=\"w\">  </span>cpu_cycles<span class=\"w\">          </span>172M<span class=\"w\">  </span>±<span class=\"w\"> </span><span class=\"m\">10</span>.3M<span class=\"w\">      </span>155M<span class=\"w\">  </span>…<span class=\"w\">  </span>191M<span class=\"w\">           </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">0</span>%<span class=\"o\">)</span><span class=\"w\">        </span>⚡-<span class=\"w\"> </span><span class=\"m\">89</span>.6%<span class=\"w\"> </span>±<span class=\"w\">  </span><span class=\"m\">1</span>.0%\n<span class=\"w\">  </span>instructions<span class=\"w\">        </span>321M<span class=\"w\">  </span>±<span class=\"w\">  </span><span class=\"m\">940</span><span class=\"w\">       </span>321M<span class=\"w\">  </span>…<span class=\"w\">  </span>321M<span class=\"w\">           </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">0</span>%<span class=\"o\">)</span><span class=\"w\">        </span>⚡-<span class=\"w\"> </span><span class=\"m\">89</span>.5%<span class=\"w\"> </span>±<span class=\"w\">  </span><span class=\"m\">0</span>.0%\n<span class=\"w\">  </span>cache_references<span class=\"w\">   </span><span class=\"m\">2</span>.94M<span class=\"w\">  </span>±<span class=\"w\">  </span>103K<span class=\"w\">     </span><span class=\"m\">2</span>.76M<span class=\"w\">  </span>…<span class=\"w\"> </span><span class=\"m\">3</span>.13M<span class=\"w\">           </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">0</span>%<span class=\"o\">)</span><span class=\"w\">        </span>⚡-<span class=\"w\"> </span><span class=\"m\">94</span>.5%<span class=\"w\"> </span>±<span class=\"w\">  </span><span class=\"m\">0</span>.7%\n<span class=\"w\">  </span>cache_misses<span class=\"w\">       </span><span class=\"m\">1</span>.95K<span class=\"w\">  </span>±<span class=\"w\">  </span><span class=\"m\">536</span><span class=\"w\">      </span><span class=\"m\">1</span>.42K<span class=\"w\">  </span>…<span class=\"w\"> </span><span class=\"m\">4</span>.87K<span class=\"w\">           </span><span class=\"m\">7</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"m\">12</span>%<span class=\"o\">)</span><span class=\"w\">        </span>⚡-100.0%<span class=\"w\"> </span>±<span class=\"w\">  </span><span class=\"m\">0</span>.7%\n<span class=\"w\">  </span>branch_misses<span class=\"w\">      </span><span class=\"m\">1</span>.15M<span class=\"w\">  </span>±<span class=\"w\">  </span>176K<span class=\"w\">      </span>875K<span class=\"w\">  </span>…<span class=\"w\"> </span><span class=\"m\">1</span>.49M<span class=\"w\">           </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">0</span>%<span class=\"o\">)</span><span class=\"w\">        </span>⚡-<span class=\"w\"> </span><span class=\"m\">83</span>.4%<span class=\"w\"> </span>±<span class=\"w\">  </span><span class=\"m\">6</span>.4%\n</code></pre></div>\n</div></div>",
        "id": 505822703,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742025602
    },
    {
        "content": "<p>Aside, despite using 99% less memory to parse a file, I am still stunned how much memory we use. In an allocation tracking profiler, I see ~10x memory usage compared to source file size.... Actually, that makes a lot of sense. All tokens take up 12bytes. Which is ~10x more than the single byte a token takes up in the original source file.</p>",
        "id": 505822955,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742025769
    },
    {
        "content": "<p>I guess this is way we may not want to store the tag or length of tokens. Saves a ton of memory and retokenizing is theoretically super fast.</p>",
        "id": 505823058,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742025849
    },
    {
        "content": "<p>Also cc <span class=\"user-mention\" data-user-id=\"406911\">@Andrew Kelley</span> cause I know you were interesting in what perf numbers we get with the new compiler. As said, very preliminary numbers, but the parse to format loop looks to be 5 to 10x faster with 500x less memory usage.</p>",
        "id": 505823158,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742025957
    },
    {
        "content": "<p>Ah, I think I found some of the discrepancy. The old compiler has extra checks to ensure that formatting is stable and not bugged. I need to disable those and see what cost savings it gets.</p>",
        "id": 505823853,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742026548
    },
    {
        "content": "<p>Ok, disabled all the extra reformatting and validation logic. So both codebases are just doing their parse to format loop. So should be more apples to apples now. We are still 3 to 5x faster with the new compiler (and 200x less memory).</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>M1 Mac</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>hyperfine<span class=\"w\"> </span>-N<span class=\"w\"> </span>-w<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"w\"> </span>-r<span class=\"w\"> </span><span class=\"m\">30</span><span class=\"w\"> </span>--prepare<span class=\"w\"> </span><span class=\"s1\">'sync &amp;&amp; sudo purge'</span><span class=\"w\"> </span><span class=\"s2\">\"roc format /tmp/old\"</span><span class=\"w\"> </span><span class=\"s2\">\"./zig-out/bin/roc format /tmp/new\"</span>\nBenchmark<span class=\"w\"> </span><span class=\"m\">1</span>:<span class=\"w\"> </span>roc<span class=\"w\"> </span>format<span class=\"w\"> </span>/tmp/old\n<span class=\"w\">  </span>Time<span class=\"w\"> </span><span class=\"o\">(</span>mean<span class=\"w\"> </span>±<span class=\"w\"> </span>σ<span class=\"o\">)</span>:<span class=\"w\">     </span><span class=\"m\">123</span>.8<span class=\"w\"> </span>ms<span class=\"w\"> </span>±<span class=\"w\">   </span><span class=\"m\">0</span>.6<span class=\"w\"> </span>ms<span class=\"w\">    </span><span class=\"o\">[</span>User:<span class=\"w\"> </span><span class=\"m\">97</span>.7<span class=\"w\"> </span>ms,<span class=\"w\"> </span>System:<span class=\"w\"> </span><span class=\"m\">22</span>.8<span class=\"w\"> </span>ms<span class=\"o\">]</span>\n<span class=\"w\">  </span>Range<span class=\"w\"> </span><span class=\"o\">(</span>min<span class=\"w\"> </span>…<span class=\"w\"> </span>max<span class=\"o\">)</span>:<span class=\"w\">   </span><span class=\"m\">122</span>.8<span class=\"w\"> </span>ms<span class=\"w\"> </span>…<span class=\"w\"> </span><span class=\"m\">125</span>.0<span class=\"w\"> </span>ms<span class=\"w\">    </span><span class=\"m\">30</span><span class=\"w\"> </span>runs\n\nBenchmark<span class=\"w\"> </span><span class=\"m\">2</span>:<span class=\"w\"> </span>./zig-out/bin/roc<span class=\"w\"> </span>format<span class=\"w\"> </span>/tmp/new\n<span class=\"w\">  </span>Time<span class=\"w\"> </span><span class=\"o\">(</span>mean<span class=\"w\"> </span>±<span class=\"w\"> </span>σ<span class=\"o\">)</span>:<span class=\"w\">      </span><span class=\"m\">25</span>.8<span class=\"w\"> </span>ms<span class=\"w\"> </span>±<span class=\"w\">   </span><span class=\"m\">1</span>.0<span class=\"w\"> </span>ms<span class=\"w\">    </span><span class=\"o\">[</span>User:<span class=\"w\"> </span><span class=\"m\">18</span>.5<span class=\"w\"> </span>ms,<span class=\"w\"> </span>System:<span class=\"w\"> </span><span class=\"m\">6</span>.6<span class=\"w\"> </span>ms<span class=\"o\">]</span>\n<span class=\"w\">  </span>Range<span class=\"w\"> </span><span class=\"o\">(</span>min<span class=\"w\"> </span>…<span class=\"w\"> </span>max<span class=\"o\">)</span>:<span class=\"w\">    </span><span class=\"m\">25</span>.2<span class=\"w\"> </span>ms<span class=\"w\"> </span>…<span class=\"w\">  </span><span class=\"m\">30</span>.9<span class=\"w\"> </span>ms<span class=\"w\">    </span><span class=\"m\">30</span><span class=\"w\"> </span>runs\n\n<span class=\"w\">  </span>Warning:<span class=\"w\"> </span>Statistical<span class=\"w\"> </span>outliers<span class=\"w\"> </span>were<span class=\"w\"> </span>detected.<span class=\"w\"> </span>Consider<span class=\"w\"> </span>re-running<span class=\"w\"> </span>this<span class=\"w\"> </span>benchmark<span class=\"w\"> </span>on<span class=\"w\"> </span>a<span class=\"w\"> </span>quiet<span class=\"w\"> </span>system<span class=\"w\"> </span>without<span class=\"w\"> </span>any<span class=\"w\"> </span>interferences<span class=\"w\"> </span>from<span class=\"w\"> </span>other<span class=\"w\"> </span>programs.\n\nSummary\n<span class=\"w\">  </span>./zig-out/bin/roc<span class=\"w\"> </span>format<span class=\"w\"> </span>/tmp/new<span class=\"w\"> </span>ran\n<span class=\"w\">    </span><span class=\"m\">4</span>.79<span class=\"w\"> </span>±<span class=\"w\"> </span><span class=\"m\">0</span>.18<span class=\"w\"> </span><span class=\"nb\">times</span><span class=\"w\"> </span>faster<span class=\"w\"> </span>than<span class=\"w\"> </span>roc<span class=\"w\"> </span>format<span class=\"w\"> </span>/tmp/old\n</code></pre></div>\n</div></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>X86 Linux</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>hyperfine<span class=\"w\"> </span>--prepare<span class=\"w\"> </span><span class=\"s1\">'sync; echo 3 | sudo tee /proc/sys/vm/drop_caches'</span><span class=\"w\"> </span>-w<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"w\"> </span>-r<span class=\"w\"> </span><span class=\"m\">30</span><span class=\"w\"> </span><span class=\"s2\">\"./target/release/roc format /tmp/old\"</span><span class=\"w\"> </span><span class=\"s2\">\"./zig-out/bin/roc format /tmp/new\"</span>\nBenchmark<span class=\"w\"> </span><span class=\"m\">1</span>:<span class=\"w\"> </span>./target/release/roc<span class=\"w\"> </span>format<span class=\"w\"> </span>/tmp/old\n<span class=\"w\">  </span>Time<span class=\"w\"> </span><span class=\"o\">(</span>mean<span class=\"w\"> </span>±<span class=\"w\"> </span>σ<span class=\"o\">)</span>:<span class=\"w\">     </span><span class=\"m\">305</span>.8<span class=\"w\"> </span>ms<span class=\"w\"> </span>±<span class=\"w\">  </span><span class=\"m\">12</span>.1<span class=\"w\"> </span>ms<span class=\"w\">    </span><span class=\"o\">[</span>User:<span class=\"w\"> </span><span class=\"m\">144</span>.9<span class=\"w\"> </span>ms,<span class=\"w\"> </span>System:<span class=\"w\"> </span><span class=\"m\">160</span>.3<span class=\"w\"> </span>ms<span class=\"o\">]</span>\n<span class=\"w\">  </span>Range<span class=\"w\"> </span><span class=\"o\">(</span>min<span class=\"w\"> </span>…<span class=\"w\"> </span>max<span class=\"o\">)</span>:<span class=\"w\">   </span><span class=\"m\">293</span>.8<span class=\"w\"> </span>ms<span class=\"w\"> </span>…<span class=\"w\"> </span><span class=\"m\">345</span>.9<span class=\"w\"> </span>ms<span class=\"w\">    </span><span class=\"m\">30</span><span class=\"w\"> </span>runs\n\nBenchmark<span class=\"w\"> </span><span class=\"m\">2</span>:<span class=\"w\"> </span>./zig-out/bin/roc<span class=\"w\"> </span>format<span class=\"w\"> </span>/tmp/new\n<span class=\"w\">  </span>Time<span class=\"w\"> </span><span class=\"o\">(</span>mean<span class=\"w\"> </span>±<span class=\"w\"> </span>σ<span class=\"o\">)</span>:<span class=\"w\">      </span><span class=\"m\">84</span>.4<span class=\"w\"> </span>ms<span class=\"w\"> </span>±<span class=\"w\">   </span><span class=\"m\">1</span>.3<span class=\"w\"> </span>ms<span class=\"w\">    </span><span class=\"o\">[</span>User:<span class=\"w\"> </span><span class=\"m\">44</span>.7<span class=\"w\"> </span>ms,<span class=\"w\"> </span>System:<span class=\"w\"> </span><span class=\"m\">38</span>.6<span class=\"w\"> </span>ms<span class=\"o\">]</span>\n<span class=\"w\">  </span>Range<span class=\"w\"> </span><span class=\"o\">(</span>min<span class=\"w\"> </span>…<span class=\"w\"> </span>max<span class=\"o\">)</span>:<span class=\"w\">    </span><span class=\"m\">82</span>.9<span class=\"w\"> </span>ms<span class=\"w\"> </span>…<span class=\"w\">  </span><span class=\"m\">88</span>.8<span class=\"w\"> </span>ms<span class=\"w\">    </span><span class=\"m\">30</span><span class=\"w\"> </span>runs\n\n<span class=\"w\">  </span>Warning:<span class=\"w\"> </span>Statistical<span class=\"w\"> </span>outliers<span class=\"w\"> </span>were<span class=\"w\"> </span>detected.<span class=\"w\"> </span>Consider<span class=\"w\"> </span>re-running<span class=\"w\"> </span>this<span class=\"w\"> </span>benchmark<span class=\"w\"> </span>on<span class=\"w\"> </span>a<span class=\"w\"> </span>quiet<span class=\"w\"> </span>system<span class=\"w\"> </span>without<span class=\"w\"> </span>any<span class=\"w\"> </span>interferences<span class=\"w\"> </span>from<span class=\"w\"> </span>other<span class=\"w\"> </span>programs.\n\nSummary\n<span class=\"w\">  </span>./zig-out/bin/roc<span class=\"w\"> </span>format<span class=\"w\"> </span>/tmp/new<span class=\"w\"> </span>ran\n<span class=\"w\">    </span><span class=\"m\">3</span>.63<span class=\"w\"> </span>±<span class=\"w\"> </span><span class=\"m\">0</span>.15<span class=\"w\"> </span><span class=\"nb\">times</span><span class=\"w\"> </span>faster<span class=\"w\"> </span>than<span class=\"w\"> </span>./target/release/roc<span class=\"w\"> </span>format<span class=\"w\"> </span>/tmp/old\n</code></pre></div>\n</div></div>",
        "id": 505824596,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742027184
    },
    {
        "content": "<p>And detailed stats with poop still look great (this is with hot cache unlike the commands above).</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>stats</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>poop<span class=\"w\"> </span><span class=\"s2\">\"./target/release/roc format /tmp/old\"</span><span class=\"w\"> </span><span class=\"s2\">\"./zig-out/bin/roc format /tmp/new\"</span>\nBenchmark<span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"m\">29</span><span class=\"w\"> </span>runs<span class=\"o\">)</span>:<span class=\"w\"> </span>./target/release/roc<span class=\"w\"> </span>format<span class=\"w\"> </span>/tmp/old\n<span class=\"w\">  </span>measurement<span class=\"w\">          </span>mean<span class=\"w\"> </span>±<span class=\"w\"> </span>σ<span class=\"w\">            </span>min<span class=\"w\"> </span>…<span class=\"w\"> </span>max<span class=\"w\">           </span>outliers<span class=\"w\">         </span>delta\n<span class=\"w\">  </span>wall_time<span class=\"w\">           </span>173ms<span class=\"w\"> </span>±<span class=\"w\"> </span><span class=\"m\">25</span>.7ms<span class=\"w\">     </span>159ms<span class=\"w\"> </span>…<span class=\"w\">  </span>303ms<span class=\"w\">          </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">7</span>%<span class=\"o\">)</span><span class=\"w\">        </span><span class=\"m\">0</span>%\n<span class=\"w\">  </span>peak_rss<span class=\"w\">            </span>195MB<span class=\"w\"> </span>±<span class=\"w\"> </span><span class=\"m\">63</span>.1KB<span class=\"w\">     </span>195MB<span class=\"w\"> </span>…<span class=\"w\">  </span>195MB<span class=\"w\">          </span><span class=\"m\">6</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"m\">21</span>%<span class=\"o\">)</span><span class=\"w\">        </span><span class=\"m\">0</span>%\n<span class=\"w\">  </span>cpu_cycles<span class=\"w\">          </span>573M<span class=\"w\">  </span>±<span class=\"w\"> </span><span class=\"m\">17</span>.3M<span class=\"w\">      </span>553M<span class=\"w\">  </span>…<span class=\"w\">  </span>630M<span class=\"w\">           </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">3</span>%<span class=\"o\">)</span><span class=\"w\">        </span><span class=\"m\">0</span>%\n<span class=\"w\">  </span>instructions<span class=\"w\">        </span>991M<span class=\"w\">  </span>±<span class=\"w\"> </span><span class=\"m\">32</span>.9K<span class=\"w\">      </span>991M<span class=\"w\">  </span>…<span class=\"w\">  </span>991M<span class=\"w\">           </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">0</span>%<span class=\"o\">)</span><span class=\"w\">        </span><span class=\"m\">0</span>%\n<span class=\"w\">  </span>cache_references<span class=\"w\">   </span><span class=\"m\">19</span>.3M<span class=\"w\">  </span>±<span class=\"w\">  </span>532K<span class=\"w\">     </span><span class=\"m\">18</span>.3M<span class=\"w\">  </span>…<span class=\"w\"> </span><span class=\"m\">20</span>.7M<span class=\"w\">           </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">3</span>%<span class=\"o\">)</span><span class=\"w\">        </span><span class=\"m\">0</span>%\n<span class=\"w\">  </span>cache_misses<span class=\"w\">       </span><span class=\"m\">1</span>.51M<span class=\"w\">  </span>±<span class=\"w\"> </span><span class=\"m\">61</span>.0K<span class=\"w\">     </span><span class=\"m\">1</span>.36M<span class=\"w\">  </span>…<span class=\"w\"> </span><span class=\"m\">1</span>.64M<span class=\"w\">           </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">3</span>%<span class=\"o\">)</span><span class=\"w\">        </span><span class=\"m\">0</span>%\n<span class=\"w\">  </span>branch_misses<span class=\"w\">      </span><span class=\"m\">2</span>.18M<span class=\"w\">  </span>±<span class=\"w\">  </span>488K<span class=\"w\">     </span><span class=\"m\">1</span>.62M<span class=\"w\">  </span>…<span class=\"w\"> </span><span class=\"m\">3</span>.50M<span class=\"w\">           </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">0</span>%<span class=\"o\">)</span><span class=\"w\">        </span><span class=\"m\">0</span>%\nBenchmark<span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"m\">56</span><span class=\"w\"> </span>runs<span class=\"o\">)</span>:<span class=\"w\"> </span>./zig-out/bin/roc<span class=\"w\"> </span>format<span class=\"w\"> </span>/tmp/new\n<span class=\"w\">  </span>measurement<span class=\"w\">          </span>mean<span class=\"w\"> </span>±<span class=\"w\"> </span>σ<span class=\"w\">            </span>min<span class=\"w\"> </span>…<span class=\"w\"> </span>max<span class=\"w\">           </span>outliers<span class=\"w\">         </span>delta\n<span class=\"w\">  </span>wall_time<span class=\"w\">          </span><span class=\"m\">87</span>.8ms<span class=\"w\"> </span>±<span class=\"w\"> </span><span class=\"m\">2</span>.87ms<span class=\"w\">    </span><span class=\"m\">82</span>.4ms<span class=\"w\"> </span>…<span class=\"w\"> </span><span class=\"m\">94</span>.4ms<span class=\"w\">          </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">0</span>%<span class=\"o\">)</span><span class=\"w\">        </span>⚡-<span class=\"w\"> </span><span class=\"m\">49</span>.2%<span class=\"w\"> </span>±<span class=\"w\">  </span><span class=\"m\">4</span>.0%\n<span class=\"w\">  </span>peak_rss<span class=\"w\">            </span>889KB<span class=\"w\"> </span>±<span class=\"w\">    </span><span class=\"m\">0</span><span class=\"w\">       </span>889KB<span class=\"w\"> </span>…<span class=\"w\">  </span>889KB<span class=\"w\">          </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">0</span>%<span class=\"o\">)</span><span class=\"w\">        </span>⚡-<span class=\"w\"> </span><span class=\"m\">99</span>.5%<span class=\"w\"> </span>±<span class=\"w\">  </span><span class=\"m\">0</span>.0%\n<span class=\"w\">  </span>cpu_cycles<span class=\"w\">          </span>173M<span class=\"w\">  </span>±<span class=\"w\"> </span><span class=\"m\">10</span>.9M<span class=\"w\">      </span>156M<span class=\"w\">  </span>…<span class=\"w\">  </span>199M<span class=\"w\">           </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">0</span>%<span class=\"o\">)</span><span class=\"w\">        </span>⚡-<span class=\"w\"> </span><span class=\"m\">69</span>.9%<span class=\"w\"> </span>±<span class=\"w\">  </span><span class=\"m\">1</span>.1%\n<span class=\"w\">  </span>instructions<span class=\"w\">        </span>321M<span class=\"w\">  </span>±<span class=\"w\">  </span><span class=\"m\">949</span><span class=\"w\">       </span>321M<span class=\"w\">  </span>…<span class=\"w\">  </span>321M<span class=\"w\">           </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">0</span>%<span class=\"o\">)</span><span class=\"w\">        </span>⚡-<span class=\"w\"> </span><span class=\"m\">67</span>.6%<span class=\"w\"> </span>±<span class=\"w\">  </span><span class=\"m\">0</span>.0%\n<span class=\"w\">  </span>cache_references<span class=\"w\">   </span><span class=\"m\">3</span>.02M<span class=\"w\">  </span>±<span class=\"w\"> </span><span class=\"m\">95</span>.1K<span class=\"w\">     </span><span class=\"m\">2</span>.85M<span class=\"w\">  </span>…<span class=\"w\"> </span><span class=\"m\">3</span>.30M<span class=\"w\">           </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">0</span>%<span class=\"o\">)</span><span class=\"w\">        </span>⚡-<span class=\"w\"> </span><span class=\"m\">84</span>.3%<span class=\"w\"> </span>±<span class=\"w\">  </span><span class=\"m\">0</span>.8%\n<span class=\"w\">  </span>cache_misses<span class=\"w\">       </span><span class=\"m\">2</span>.10K<span class=\"w\">  </span>±<span class=\"w\"> </span><span class=\"m\">1</span>.15K<span class=\"w\">     </span><span class=\"m\">1</span>.32K<span class=\"w\">  </span>…<span class=\"w\"> </span><span class=\"m\">9</span>.53K<span class=\"w\">           </span><span class=\"m\">6</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"m\">11</span>%<span class=\"o\">)</span><span class=\"w\">        </span>⚡-<span class=\"w\"> </span><span class=\"m\">99</span>.9%<span class=\"w\"> </span>±<span class=\"w\">  </span><span class=\"m\">1</span>.1%\n<span class=\"w\">  </span>branch_misses<span class=\"w\">      </span><span class=\"m\">1</span>.17M<span class=\"w\">  </span>±<span class=\"w\">  </span>183K<span class=\"w\">      </span>896K<span class=\"w\">  </span>…<span class=\"w\"> </span><span class=\"m\">1</span>.61M<span class=\"w\">           </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">0</span>%<span class=\"o\">)</span><span class=\"w\">        </span>⚡-<span class=\"w\"> </span><span class=\"m\">46</span>.2%<span class=\"w\"> </span>±<span class=\"w\">  </span><span class=\"m\">6</span>.7%\n</code></pre></div>\n</div></div>",
        "id": 505824651,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742027237
    },
    {
        "content": "<p>And we haven't even looked at SIMD yet!</p>",
        "id": 505824666,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1742027257
    },
    {
        "content": "<p>Also, about half of execution time is spent in tokenizing, quarter in parsing, and quarter in formatting.</p>",
        "id": 505824777,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742027315
    },
    {
        "content": "<p>wowwww, this is great!</p>",
        "id": 505846553,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1742043999
    },
    {
        "content": "<p>I'm personally excited that half is tokenizing - means the simd style might actually have a benefit beyond being fun to try implementing <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 505846622,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1742044065
    },
    {
        "content": "<p>RIIZ <span aria-label=\"high voltage\" class=\"emoji emoji-26a1\" role=\"img\" title=\"high voltage\">:high_voltage:</span></p>",
        "id": 505846933,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1742044274
    },
    {
        "content": "<p>are we missing any parsing features that might make it apples-to-oranges?</p>",
        "id": 505847208,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1742044471
    },
    {
        "content": "<p>(aside from deprecated things not needing to be parsed of course)</p>",
        "id": 505847246,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1742044517
    },
    {
        "content": "<p>or is parsing feature-complete at this point?</p>",
        "id": 505847275,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1742044545
    },
    {
        "content": "<p>We definitely aren't at parity in terms of edge cases, error handling, and comments, but the syntax grab bag looked featureful enough that it seemed worth testing:<br>\n<a href=\"https://github.com/roc-lang/roc/blob/327647a6161b96d06f6524ee393ab675c2fc1335/src/fmt.zig#L938\">https://github.com/roc-lang/roc/blob/327647a6161b96d06f6524ee393ab675c2fc1335/src/fmt.zig#L938</a></p>",
        "id": 505857740,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742052227
    },
    {
        "content": "<p>Extra note, with a tiny bit of allocation tuning (initCapacity instead of starting empty), we can get another ~9% faster. Not allocating and copying during tokenization by allocating a large array can make tokenization 1.5x faster.</p>",
        "id": 505877686,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742066578
    },
    {
        "content": "<p>That said, this is with overallocating to ensure space for all tokens...might not be worth it memory wise. Really depends on average number of characters per token as to what the default should be. And that depends on how many comments someone has among other things like variable name length.</p>",
        "id": 505877816,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742066662
    },
    {
        "content": "<p>I didn't realize this thing I'm writing is THAT fast</p>",
        "id": 506120260,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1742210439
    },
    {
        "content": "<p>I haven't even optimized for performance besides the memory-locality stuff</p>",
        "id": 506120350,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1742210460
    },
    {
        "content": "<p>I would love to see us do SIMD tokenization</p>",
        "id": 506120531,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1742210512
    },
    {
        "content": "<p>Let's hope we can get similar speed-ups in the more compute heavy parts of the compiler!</p>",
        "id": 506120672,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1742210545
    },
    {
        "content": "<p>You can really see the advantages of the SoA architecture in the HUGE delta in cache misses.  That's three orders of magnitude fewer!</p>",
        "id": 506122564,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1742211025
    },
    {
        "content": "<p>Yeah, simply using less memory and allocating less does a metric ton.</p>\n<p>The old compiler does ~30x more allocations (presumably of many tiny IR nodes). I'm actually a bit surprised it is so bad in the old compiler. I thought we put all that stuff in arenas, but apparently tons of stuff is not in the arenas. Then as you mention, DOD + SOA leads to way less memory usage in general which equates to way more cache hits.</p>\n<p>And yeah, we have room for many optimizations.</p>",
        "id": 506205219,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742229269
    },
    {
        "content": "<p>In the old compiler, Defs has a bunch of Vecs that are not in the arenas</p>",
        "id": 506213561,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1742231349
    },
    {
        "content": "<p>In fact, I'm pretty confident that was a memory leak</p>",
        "id": 506213643,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1742231371
    },
    {
        "content": "<p>The new parser currently expects this syntax:</p>\n<div class=\"codehilite\"><pre><span></span><code>Map a b : List(a), (a -&gt; b) -&gt; List(b)\n</code></pre></div>\n<p>... but with PNC I would expect that to be:</p>\n<div class=\"codehilite\"><pre><span></span><code>Map(a, b) : List(a), (a -&gt; b) -&gt; List(b)\n</code></pre></div>\n<p>... no?</p>",
        "id": 506861816,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1742435966
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/505823158\">said</a>:</p>\n<blockquote>\n<p>Also cc <span class=\"user-mention silent\" data-user-id=\"406911\">Andrew Kelley</span> cause I know you were interesting in what perf numbers we get with the new compiler. As said, very preliminary numbers, but the parse to format loop looks to be 5 to 10x faster with 500x less memory usage.</p>\n</blockquote>\n<p>very cool, thanks for sharing!</p>",
        "id": 507071945,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1742503729
    },
    {
        "content": "<p>FWIW, part of the difference there is we're actually parsing a different (simpler) language now</p>",
        "id": 507072187,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1742503797
    },
    {
        "content": "<p>I like to think that there's a relationship between syntax being simpler for the computer and also being simpler for the human to parse</p>",
        "id": 507072666,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1742503972
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453336\">Joshua Warner</span> <a href=\"#narrow/stream/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/507072187\">said</a>:</p>\n<blockquote>\n<p>FWIW, part of the difference there is we're actually parsing a different (simpler) language now</p>\n</blockquote>\n<p>Yeah, it is a whole mix of things. I would guess the biggest gain is in terms of memory usage and allocations. The sheer amount of data being generated and processed by the old compiler almost certainly is the bottleneck. Even if we changed the grammar, I would expect the allocations, data movement, and cache misses to dominate.</p>",
        "id": 507086371,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742509559
    },
    {
        "content": "<p>After <a href=\"https://github.com/roc-lang/roc/pull/7695\">#7695</a> lands, this shows all of the syntax that will be parsed and formatted correctly (in this exact style):</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"n\">moduleFmtsSame</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\# This is a module comment!</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\app [main!] { pf: platform \"../basic-cli/platform.roc\" }</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\import pf.Stdout exposing [line!, write!]</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\import # Comment after import keyword</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    pf # Comment after qualifier</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        .StdoutMultiline # Comment after ident</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        exposing [ # Comment after exposing open</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\            line!, # Comment after exposed item</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\            write!, # Another after exposed item</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        ] # Comment after exposing close</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\import pkg.Something exposing [func as function, Type as ValueCategory, Custom.*]</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\import BadName as GoodName</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\import</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    BadNameMultiline</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        as</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        GoodNameMultiline</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\Map a b : List(a), (a -&gt; b) -&gt; List(b)</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\MapML # Comment here</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    a # And here</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    b # And after the last arg</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        : # And after the colon</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\            List( # Inside Tag args</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\                a, # After tag arg</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\            ),</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\            (a -&gt; b) -&gt; # After arrow</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\                List( # Inside tag args</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\                    b,</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\                ) # And after the type decl</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\Foo : (Bar, Baz)</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\FooMultiline : ( # Comment after pattern tuple open</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    Bar, # Comment after pattern tuple item</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    Baz, # Another after pattern tuple item</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\) # Comment after pattern tuple close</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\Some a : { foo : Ok(a), bar : Something }</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\SomeMl a : { # After record open</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    foo : Ok(a), # After field</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    bar : Something, # After last field</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\}</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\SomeMultiline a : { # Comment after pattern record open</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    foo # After field name</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        : # Before field anno</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\            Ok(a), # Comment after pattern record field</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    bar : Something, # Another after pattern record field</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\} # Comment after pattern record close</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\Maybe a : [Some(a), None]</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\MaybeMultiline a : [ # Comment after tag union open</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    Some(a), # Comment after tag union member</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    None, # Another after tag union member</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\] # Comment after tag union close</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\SomeFunc a : Maybe(a), a -&gt; Maybe(a)</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\add_one_oneline = |num| if num 2 else 5</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\add_one : (U64 -&gt; U64)</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\add_one = |num| {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    other = 1</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    if num {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        dbg # After debug</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\            some_func() # After debug expr</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        0</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    } else {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        dbg 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        other</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    }</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\}</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\match_time = |</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    a, # After arg</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    b,</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\| # After args</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    match a {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        Blue | Green | Red -&gt; {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\            x = 12</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\            x</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        }</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        Blue # After pattern in alt</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        | # Before pattern in alt</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\            Green</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        | Red # After alt pattern</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\            -&gt; {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\                x = 12</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\                x</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\            }</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        lower # After pattern comment</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\            -&gt; 1</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        \"foo\" -&gt; # After arrow comment</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\            100</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        \"foo\" | \"bar\" -&gt; 200</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        [1, 2, 3, .. as rest] # After pattern comment</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\            -&gt; # After arrow comment</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\                123 # After branch comment</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        # Just a random comment</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        [1, 2 | 5, 3, .. as rest] -&gt; 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        [</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\            1,</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\            2 | 5,</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\            3,</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\            .. # After DoubleDot</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\                as # Before alias</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\                    rest, # After last pattern in list</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        ] -&gt; 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        3.14 -&gt; 314</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        3.14 | 6.28 -&gt; 314</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        (1, 2, 3) -&gt; 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        (1, 2 | 5, 3) -&gt; 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        { foo: 1, bar: 2, ..rest } -&gt; 12</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        { # After pattern record open</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\            foo # After pattern record field name</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\                : # Before pattern record field value</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\                    1, # After pattern record field</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\            bar: 2,</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\            .. # After spread operator</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\                rest, # After last field</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        } -&gt; 12</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        { foo: 1, bar: 2 | 7 } -&gt; 12</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\            foo: 1,</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\            bar: 2 | 7, # After last record field</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        } -&gt; 12</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        Ok(123) -&gt; 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        Ok(Some(dude)) -&gt; dude</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        TwoArgs(\"hello\", Some(\"world\")) -&gt; 1000</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    }</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\expect # Comment after expect keyword</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    blah == 1 # Comment after expect statement</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\main! : List(String) -&gt; Result({}, _)</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\main! = |_| { # Yeah I can leave a comment here</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    world = \"World\"</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    number = 123</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    expect blah == 1</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    tag = Blue</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    return # Comment after return keyword</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        tag # Comment after return statement</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    # Just a random comment!</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    ...</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    match_time(</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        ..., # Single args with comment</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    )</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    some_func(</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        dbg # After debug</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\            42, # After debug expr</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    )</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    crash # Comment after crash keyword</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        \"Unreachable!\" # Comment after crash statement</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    tag_with_payload = Ok(number)</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    interpolated = \"Hello, ${world}\"</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    list = [</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        add_one(</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\            dbg # After dbg in list</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\                number, # after dbg expr as arg</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        ), # Comment one</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        456, # Comment two</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        789, # Comment three</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    ]</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    record = { foo: 123, bar: \"Hello\", baz: tag, qux: Ok(world), punned }</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    tuple = (123, \"World\", tag, Ok(world), (nested, tuple), [1, 2, 3])</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    multiline_tuple = (</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        123,</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        \"World\",</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        tag1,</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        Ok(world), # This one has a comment</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        (nested, tuple),</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        [1, 2, 3],</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    )</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    bin_op_result = Err(foo) ?? 12 &gt; 5 * 5 or 13 + 2 &lt; 5 and 10 - 1 &gt;= 16 or 12 &lt;= 3 / 5</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    static_dispatch_style = some_fn(arg1)?.static_dispatch_method()?.next_static_dispatch_method()?.record_field?</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    Stdout.line!(interpolated)?</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    Stdout.line!(</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        \"How about ${ # Comment after string interpolation open</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\            Num.toStr(number) # Comment after string interpolation expr</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\        } as a string?\",</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    )</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\} # Comment after top-level decl</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\expect {</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    foo = 1 # This should work too</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    blah = 1</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\    blah == foo</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\}</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n</code></pre></div>",
        "id": 508487815,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1743074275
    },
    {
        "content": "<p>One of the next things that need to be done is to start transcribing the builtins to the v0.1 syntax.  Where should they live?  I'll start doing that and finishing the parser by parsing <code>hosted</code>, <code>platform</code>, and <code>package</code> headers</p>",
        "id": 508489791,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1743074908
    },
    {
        "content": "<p>Preferably, we would make the old compiler able to migrate them to the new syntax</p>",
        "id": 508525348,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743083849
    },
    {
        "content": "<p>That would ensure folks have an easy way to migrate when the zig compiler comes out</p>",
        "id": 508525443,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743083877
    },
    {
        "content": "<p>It also makes it easier to benchmark against the old compiler if they both support the exact same syntax</p>",
        "id": 508525601,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743083907
    },
    {
        "content": "<p>I’be been working on a syntax migration tool in the old compiler, and it’s getting reasonably close. I’d say we should just use that tool to auto-translate the builtins and anything else we want to migrate, with a focus on improving the tool and rerunning it rather than doing hand fix ups to the migrated code</p>",
        "id": 508545840,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1743088483
    },
    {
        "content": "<p>100% agree</p>",
        "id": 508562595,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743092126
    },
    {
        "content": "<p>9 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"304641\" href=\"/#narrow/channel/304641-ideas/topic/Needed.20Function.20signature.20and.20lambda.20expr.20change/with/510927622\">#ideas &gt; Needed Function signature and lambda expr change</a> by <span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span>.</p>",
        "id": 510942868,
        "sender_full_name": "Notification Bot",
        "timestamp": 1744120824
    },
    {
        "content": "<p>Reading through the Static Dispatch document for the 27th time, am I right to understand that <code>where</code> are only a part of a function's type?</p>",
        "id": 511946558,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744581659
    },
    {
        "content": "<p>The where is saying that a function uses variables that have constraints</p>",
        "id": 511946609,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1744581715
    },
    {
        "content": "<p>This is just a parsing question, actually</p>",
        "id": 511946663,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1744581735
    },
    {
        "content": "<p>You can also use them in aliases</p>",
        "id": 511946674,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1744581749
    },
    {
        "content": "<p>Yes, but it would only appear as part of the type annotation of a function type?</p>",
        "id": 511946686,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744581757
    },
    {
        "content": "<p>We haven't ironed out the links there</p>",
        "id": 511946690,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1744581760
    },
    {
        "content": "<p>Oh yeah, and in aliases</p>",
        "id": 511946693,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744581766
    },
    {
        "content": "<p>I think I'll just be implementing them as part of function types for now</p>",
        "id": 511946703,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744581777
    },
    {
        "content": "<p>But if anyone (<em>ahem</em> <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> ) has a nice summary of the overall plan here (as well as changes in syntax), please let me know</p>",
        "id": 511946736,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744581818
    },
    {
        "content": "<p>We want to be able to say <code>sort_list : List(a) -&gt; List(a) where Sortable(a)</code></p>",
        "id": 511946743,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1744581825
    },
    {
        "content": "<p>Though <code>a.Sortable</code> was also thrown around</p>",
        "id": 511946792,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1744581843
    },
    {
        "content": "<p>So starting with just functions is fine for now</p>",
        "id": 511946811,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1744581858
    },
    {
        "content": "<p>Yeah, I think the big issue is the current syntax - outside of aliases - is likely going to cause some parsing issues</p>",
        "id": 511946820,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744581864
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">Dict</span><span class=\"nf\">.</span><span class=\"nv\">insert</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Dict</span><span class=\"w\"> </span><span class=\"nv\">k</span><span class=\"w\"> </span><span class=\"nv\">v</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">k</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">v</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Dict</span><span class=\"w\"> </span><span class=\"nv\">k</span><span class=\"w\"> </span><span class=\"nv\">v</span>\n<span class=\"w\">    </span><span class=\"kr\">where</span><span class=\"w\"> </span><span class=\"nv\">k</span><span class=\"nf\">.</span><span class=\"kt\">Hash</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">k</span><span class=\"nf\">.</span><span class=\"kt\">Eq</span>\n\n<span class=\"kt\">Hash</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">a</span>\n<span class=\"w\">    </span><span class=\"kr\">where</span>\n<span class=\"w\">        </span><span class=\"nv\">a</span><span class=\"nf\">.</span><span class=\"nv\">hash</span><span class=\"p\">(</span><span class=\"nv\">hasher</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">hasher</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"nv\">hasher</span><span class=\"nf\">.</span><span class=\"kt\">Hasher</span><span class=\"p\">,</span>\n</code></pre></div>\n<p>I'm actually wondering if I should attach these instead to annotations and type definitions</p>",
        "id": 511946975,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744581996
    },
    {
        "content": "<p>Because this being used inside of an aggregate type would be .... complicated</p>",
        "id": 511946995,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744582025
    },
    {
        "content": "<p>Just thinking out loud here...</p>\n<p>so today we have</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"no\">Hasher</span><span class=\"w\"> </span><span class=\"n\">implements</span>\n<span class=\"w\">    </span><span class=\"n\">add_bytes</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">List</span><span class=\"w\"> </span><span class=\"no\">U8</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">where</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">implements</span><span class=\"w\"> </span><span class=\"no\">Hasher</span>\n<span class=\"w\">    </span><span class=\"n\">add_u8</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">U8</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">where</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">implements</span><span class=\"w\"> </span><span class=\"no\">Hasher</span>\n<span class=\"w\">    </span><span class=\"n\">add_u16</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">U16</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">where</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">implements</span><span class=\"w\"> </span><span class=\"no\">Hasher</span>\n<span class=\"w\">    </span><span class=\"n\">add_u32</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">U32</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">where</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">implements</span><span class=\"w\"> </span><span class=\"no\">Hasher</span>\n<span class=\"w\">    </span><span class=\"n\">add_u64</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">U64</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">where</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">implements</span><span class=\"w\"> </span><span class=\"no\">Hasher</span>\n<span class=\"w\">    </span><span class=\"n\">add_u128</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">U128</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">where</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">implements</span><span class=\"w\"> </span><span class=\"no\">Hasher</span>\n<span class=\"w\">    </span><span class=\"n\">complete</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"no\">U64</span><span class=\"w\"> </span><span class=\"n\">where</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">implements</span><span class=\"w\"> </span><span class=\"no\">Hasher</span>\n</code></pre></div>\n<p>and I think we would have with v0.1</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"no\">Hasher</span><span class=\"w\"> </span><span class=\"ss\">a</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">where</span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">add_bytes</span><span class=\"p\">(</span><span class=\"no\">List</span><span class=\"w\"> </span><span class=\"no\">U8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">add_u8</span><span class=\"p\">(</span><span class=\"no\">U8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">add_u16</span><span class=\"p\">(</span><span class=\"no\">U16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">add_u32</span><span class=\"p\">(</span><span class=\"no\">U32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">add_u64</span><span class=\"p\">(</span><span class=\"no\">U64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">add_u128</span><span class=\"p\">(</span><span class=\"no\">U128</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">complete</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"no\">U64</span>\n</code></pre></div>\n<p>Does that look correct?</p>",
        "id": 511947669,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744582623
    },
    {
        "content": "<p>And that allows for us to then have something like:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"c1\"># In `Dict.roc`</span>\n<span class=\"n\">insert</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"no\">Dict</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"no\">Dict</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"n\">v</span>\n<span class=\"w\">    </span><span class=\"n\">where</span>\n<span class=\"w\">        </span><span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">Hash</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">Eq</span><span class=\"p\">,</span>\n\n<span class=\"c1\"># In `Str.roc`</span>\n<span class=\"nb\">hash</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"no\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">Hash</span><span class=\"o\">.</span><span class=\"n\">Hasher</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"no\">Hash</span><span class=\"o\">.</span><span class=\"n\">Hasher</span>\n<span class=\"nb\">hash</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"o\">...</span><span class=\"c1\"># Implementation</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># In `Hash.roc`</span>\n<span class=\"no\">Hash</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">a</span>\n<span class=\"w\">        </span><span class=\"n\">where</span>\n<span class=\"w\">            </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"n\">hasher</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">hasher</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">hasher</span><span class=\"o\">.</span><span class=\"n\">Hasher</span><span class=\"p\">,</span>\n<span class=\"no\">Hasher</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">a</span>\n<span class=\"w\">    </span><span class=\"n\">where</span>\n<span class=\"w\">        </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">add_bytes</span><span class=\"p\">(</span><span class=\"no\">List</span><span class=\"w\"> </span><span class=\"no\">U8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">add_u8</span><span class=\"p\">(</span><span class=\"no\">U8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">add_u16</span><span class=\"p\">(</span><span class=\"no\">U16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">add_u32</span><span class=\"p\">(</span><span class=\"no\">U32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">add_u64</span><span class=\"p\">(</span><span class=\"no\">U64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">add_u128</span><span class=\"p\">(</span><span class=\"no\">U128</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">complete</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"no\">U64</span>\n</code></pre></div>",
        "id": 511947839,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744582782
    },
    {
        "content": "<p>And then a <code>Dict(Str, Str)</code> is valid (assuming similar is implemented for Eq)</p>",
        "id": 511948117,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744582996
    },
    {
        "content": "<p>So each clause in a where is one of:</p>\n<ol>\n<li>LowerIdent, NoSpaceDotLowerIdent, NoSpaceOpenParen, &lt;type args&gt;, CloseParens, OpArrow, &lt;type arg&gt;</li>\n<li>LowerIdent, NoSpaceDotUpperIdent</li>\n</ol>",
        "id": 511948491,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744583291
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> <a href=\"#narrow/stream/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/511946558\">said</a>:</p>\n<blockquote>\n<p>Reading through the Static Dispatch document for the 27th time, am I right to understand that <code>where</code> are only a part of a function's type?</p>\n</blockquote>\n<p>Yep</p>",
        "id": 511950918,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744585131
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> <a href=\"#narrow/stream/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/511947669\">said</a>:</p>\n<blockquote>\n<p>Just thinking out loud here...</p>\n<p>so today we have</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"no\">Hasher</span><span class=\"w\"> </span><span class=\"n\">implements</span>\n<span class=\"w\">    </span><span class=\"n\">add_bytes</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">List</span><span class=\"w\"> </span><span class=\"no\">U8</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">where</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">implements</span><span class=\"w\"> </span><span class=\"no\">Hasher</span>\n<span class=\"w\">    </span><span class=\"n\">add_u8</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">U8</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">where</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">implements</span><span class=\"w\"> </span><span class=\"no\">Hasher</span>\n<span class=\"w\">    </span><span class=\"n\">add_u16</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">U16</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">where</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">implements</span><span class=\"w\"> </span><span class=\"no\">Hasher</span>\n<span class=\"w\">    </span><span class=\"n\">add_u32</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">U32</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">where</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">implements</span><span class=\"w\"> </span><span class=\"no\">Hasher</span>\n<span class=\"w\">    </span><span class=\"n\">add_u64</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">U64</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">where</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">implements</span><span class=\"w\"> </span><span class=\"no\">Hasher</span>\n<span class=\"w\">    </span><span class=\"n\">add_u128</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">U128</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">where</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">implements</span><span class=\"w\"> </span><span class=\"no\">Hasher</span>\n<span class=\"w\">    </span><span class=\"n\">complete</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"no\">U64</span><span class=\"w\"> </span><span class=\"n\">where</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">implements</span><span class=\"w\"> </span><span class=\"no\">Hasher</span>\n</code></pre></div>\n<p>and I think we would have with v0.1</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"no\">Hasher</span><span class=\"w\"> </span><span class=\"ss\">a</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">where</span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">add_bytes</span><span class=\"p\">(</span><span class=\"no\">List</span><span class=\"w\"> </span><span class=\"no\">U8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">add_u8</span><span class=\"p\">(</span><span class=\"no\">U8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">add_u16</span><span class=\"p\">(</span><span class=\"no\">U16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">add_u32</span><span class=\"p\">(</span><span class=\"no\">U32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">add_u64</span><span class=\"p\">(</span><span class=\"no\">U64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">add_u128</span><span class=\"p\">(</span><span class=\"no\">U128</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">complete</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"no\">U64</span>\n</code></pre></div>\n<p>Does that look correct?</p>\n</blockquote>\n<p>Yep</p>",
        "id": 511950960,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744585180
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> <a href=\"#narrow/stream/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/511946975\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">Dict</span><span class=\"nf\">.</span><span class=\"nv\">insert</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Dict</span><span class=\"w\"> </span><span class=\"nv\">k</span><span class=\"w\"> </span><span class=\"nv\">v</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">k</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">v</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Dict</span><span class=\"w\"> </span><span class=\"nv\">k</span><span class=\"w\"> </span><span class=\"nv\">v</span>\n<span class=\"w\">    </span><span class=\"kr\">where</span><span class=\"w\"> </span><span class=\"nv\">k</span><span class=\"nf\">.</span><span class=\"kt\">Hash</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">k</span><span class=\"nf\">.</span><span class=\"kt\">Eq</span>\n\n<span class=\"kt\">Hash</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">a</span>\n<span class=\"w\">    </span><span class=\"kr\">where</span>\n<span class=\"w\">        </span><span class=\"nv\">a</span><span class=\"nf\">.</span><span class=\"nv\">hash</span><span class=\"p\">(</span><span class=\"nv\">hasher</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">hasher</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"nv\">hasher</span><span class=\"nf\">.</span><span class=\"kt\">Hasher</span><span class=\"p\">,</span>\n</code></pre></div>\n<p>I'm actually wondering if I should attach these instead to annotations and type definitions</p>\n</blockquote>\n<p>Hash looks to be defined wrong. I think it would be <code>a.hash(hasher) -&gt; hasher</code>. That or it needs to be defined differently to be module based instead of standard static dispatch.</p>",
        "id": 511951159,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744585308
    },
    {
        "content": "<p>The other way to define it would be <code>module(a).hash(hasher, a) -&gt; hasher</code></p>",
        "id": 511951249,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744585364
    },
    {
        "content": "<p>What does the module(a) buy us over just a?</p>",
        "id": 511952220,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744586119
    },
    {
        "content": "<p>Is that for when the argument of type <code>a</code> is not the first arg (in the \"receiver\" position)?</p>",
        "id": 511953079,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744586876
    },
    {
        "content": "<p>Yes</p>",
        "id": 511957349,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744590331
    },
    {
        "content": "<p>Need for decode</p>",
        "id": 511957360,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744590339
    },
    {
        "content": "<p>Cause decode is <code>List(U8) -&gt; a</code></p>",
        "id": 511957373,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744590350
    },
    {
        "content": "<p>Probably will a decoding format as well or something like that</p>",
        "id": 511957476,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744590392
    },
    {
        "content": "<p>Decode a : a where a.decode(List(U8)) -&gt; a<br>\nEncode a : a where a.encode(a) -&gt; List(U8)</p>",
        "id": 512137795,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744651973
    },
    {
        "content": "<p>How would that definition of decode work? You won't have <code>a</code> if you are trying to decode an <code>a</code>.</p>\n<p>I think it has to be<br>\nDecode a : a where module(a).decode(List(U8)) -&gt; a</p>",
        "id": 512156983,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744658580
    },
    {
        "content": "<p>Sorry</p>",
        "id": 512158316,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744659063
    },
    {
        "content": "<p>I was just typing out syntax</p>",
        "id": 512158339,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744659069
    },
    {
        "content": "<p>That wasn’t meant to be real (or actually submitted)</p>",
        "id": 512158377,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744659082
    },
    {
        "content": "<p>The PR for parsing and formatting is here: <a href=\"https://github.com/roc-lang/roc/pull/7745\">https://github.com/roc-lang/roc/pull/7745</a></p>",
        "id": 512443897,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744768257
    },
    {
        "content": "<p>My absolute rough draft, first take re-implementation of Hash.roc from the builtins based on all of the syntax for v0.1 that is available today:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">[</span>\n<span class=\"w\">    </span><span class=\"no\">Hash</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"no\">Hasher</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">hash_list</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">hash_unordered</span><span class=\"p\">,</span>\n<span class=\"o\">]</span>\n\n<span class=\"n\">import</span><span class=\"w\"> </span><span class=\"no\">Num</span><span class=\"w\"> </span><span class=\"n\">exposing</span><span class=\"w\"> </span><span class=\"o\">[</span>\n<span class=\"w\">    </span><span class=\"no\">U8</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"no\">U16</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"no\">U32</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"no\">U64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"no\">U128</span><span class=\"p\">,</span>\n<span class=\"o\">]</span>\n\n<span class=\"c1\">## A value that can be hashed.</span>\n<span class=\"no\">Hash</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">a</span>\n<span class=\"w\">    </span><span class=\"n\">where</span>\n<span class=\"w\">        </span><span class=\"c1\">## Hashes a value into a [Hasher].</span>\n<span class=\"w\">        </span><span class=\"c1\">## Note that [hash] does not produce a hash value itself; the hasher must be</span>\n<span class=\"w\">        </span><span class=\"c1\">## [complete]d in order to extract the hash value.</span>\n<span class=\"w\">        </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"n\">hasher</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">hasher</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">hasher</span><span class=\"o\">.</span><span class=\"n\">Hasher</span><span class=\"p\">,</span>\n\n<span class=\"c1\">## Describes a hashing algorithm that is fed bytes and produces an integer hash.</span>\n<span class=\"c1\">##</span>\n<span class=\"c1\">## The [Hasher] ability describes general-purpose hashers. It only allows</span>\n<span class=\"c1\">## emission of 64-bit unsigned integer hashes. It is not suitable for</span>\n<span class=\"c1\">## cryptographically-secure hashing.</span>\n<span class=\"no\">Hasher</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">a</span>\n<span class=\"w\">    </span><span class=\"n\">where</span>\n<span class=\"w\">        </span><span class=\"c1\">## Adds a list of bytes to the hasher.</span>\n<span class=\"w\">        </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">add_bytes</span><span class=\"p\">(</span><span class=\"no\">List</span><span class=\"p\">(</span><span class=\"no\">U8</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span>\n\n<span class=\"w\">        </span><span class=\"c1\">## Adds a single U8 to the hasher.</span>\n<span class=\"w\">        </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">add_u8</span><span class=\"p\">(</span><span class=\"no\">U8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span>\n\n<span class=\"w\">        </span><span class=\"c1\">## Adds a single U16 to the hasher.</span>\n<span class=\"w\">        </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">add_u16</span><span class=\"p\">(</span><span class=\"no\">U16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span>\n\n<span class=\"w\">        </span><span class=\"c1\">## Adds a single U32 to the hasher.</span>\n<span class=\"w\">        </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">add_u32</span><span class=\"p\">(</span><span class=\"no\">U32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span>\n\n<span class=\"w\">        </span><span class=\"c1\">## Adds a single U64 to the hasher.</span>\n<span class=\"w\">        </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">add_u64</span><span class=\"p\">(</span><span class=\"no\">U64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span>\n\n<span class=\"w\">        </span><span class=\"c1\">## Adds a single U128 to the hasher.</span>\n<span class=\"w\">        </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">add_u128</span><span class=\"p\">(</span><span class=\"no\">U128</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span>\n\n<span class=\"w\">        </span><span class=\"c1\">## Completes the hasher, extracting a hash value from its</span>\n<span class=\"w\">        </span><span class=\"c1\">## accumulated hash state.</span>\n<span class=\"w\">        </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">complete</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"no\">U64</span><span class=\"p\">,</span>\n\n<span class=\"c1\">## Adds a list of [Hash]able elements to a [Hasher] by hashing each element.</span>\n<span class=\"n\">hash_list</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">hasher</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">List</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">hasher</span>\n<span class=\"w\">    </span><span class=\"n\">where</span>\n<span class=\"w\">        </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">Hash</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">hasher</span><span class=\"o\">.</span><span class=\"n\">Hasher</span><span class=\"p\">,</span>\n<span class=\"n\">hash_list</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">hasher</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lst</span><span class=\"o\">|</span>\n<span class=\"w\">    </span><span class=\"n\">lst</span><span class=\"o\">.</span><span class=\"n\">walk</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">hasher</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"n\">accum_hasher</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">elem</span><span class=\"o\">|</span>\n<span class=\"w\">            </span><span class=\"n\">elem</span><span class=\"o\">.</span><span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"n\">accum_hasher</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">)</span>\n\n<span class=\"no\">HashFunction</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">hasher</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">hasher</span><span class=\"w\"> </span><span class=\"n\">where</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">Hash</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">hasher</span><span class=\"o\">.</span><span class=\"n\">Hasher</span>\n<span class=\"no\">HashWalker</span><span class=\"w\"> </span><span class=\"n\">container</span><span class=\"w\"> </span><span class=\"n\">elem</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">hasher</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">container</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">HashFunction</span><span class=\"p\">(</span><span class=\"n\">elem</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">hasher</span>\n<span class=\"w\">    </span><span class=\"n\">where</span>\n<span class=\"w\">        </span><span class=\"n\">elem</span><span class=\"o\">.</span><span class=\"n\">Hash</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">hasher</span><span class=\"o\">.</span><span class=\"n\">Hasher</span><span class=\"p\">,</span>\n\n<span class=\"c1\">## Adds a container of [Hash]able elements to a [Hasher] by hashing each element.</span>\n<span class=\"c1\">## The container is iterated using the walk method passed in.</span>\n<span class=\"c1\">## The order of the elements does not affect the final hash.</span>\n<span class=\"n\">hash_unordered</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">hasher</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">container</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">HashWalker</span><span class=\"p\">(</span><span class=\"n\">container</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">elem</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">hasher</span>\n<span class=\"w\">    </span><span class=\"n\">where</span>\n<span class=\"w\">        </span><span class=\"n\">elem</span><span class=\"o\">.</span><span class=\"n\">Hash</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">hasher</span><span class=\"o\">.</span><span class=\"n\">Hasher</span><span class=\"p\">,</span>\n<span class=\"n\">hash_unordered</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">hasher</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">container</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">walk</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">acc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">walk</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">container</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"n\">accum</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">elem</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">                </span><span class=\"c1\"># Note, we intentionally copy the hasher in every iteration.</span>\n<span class=\"w\">                </span><span class=\"c1\"># Having the same base state is required for unordered hashing.</span>\n<span class=\"w\">                </span><span class=\"n\">elem</span>\n<span class=\"w\">                </span><span class=\"o\">.</span><span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"n\">hasher</span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"o\">.</span><span class=\"n\">complete</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"n\">next_accum</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">accum</span><span class=\"o\">.</span><span class=\"n\">add_wrap</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">next_accum</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">accum</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"c1\"># we don't want to lose a bit of entropy on overflow, so add it back in.</span>\n<span class=\"w\">                </span><span class=\"n\">next_accum</span><span class=\"o\">.</span><span class=\"n\">add_wrap</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"n\">next_accum</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">hasher</span><span class=\"o\">.</span><span class=\"n\">add_u64</span><span class=\"p\">(</span><span class=\"n\">acc</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>\n</code></pre></div>",
        "id": 512446070,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744769629
    },
    {
        "content": "<p>If that looks correct to everyone, I'll add a snapshot for it</p>",
        "id": 512446198,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744769710
    },
    {
        "content": "<p>I assume <code>a.add_u8(U8) -&gt; hasher,</code> should be <code>a.add_u8(U8) -&gt; a,</code> same for other functions in <code>Hasher</code></p>\n<p>Also, is it now <code>Hash(a)</code> and <code>Hasher(a)</code> instead of <code>Hash a</code> and <code>Hasher a</code></p>\n<p><code>(hasher, b, (hasher, a -&gt; hasher) -&gt; hasher)</code> could use a anlias to be less confusing. That or at least change the name <code>b</code> to <code>container</code> and <code>a</code> to <code>elem</code>.</p>\n<hr>\n<p>Yeah, looks roughly correct.</p>",
        "id": 512447247,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744770336
    },
    {
        "content": "<p>Also, I wonder if we need a better way to apply aliases. <code>hasher.Hasher,</code> doesn't look good.</p>",
        "id": 512447350,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744770388
    },
    {
        "content": "<p>Like it doesn't feel like it is saying that <code>hasher</code> implements the <code>Hasher</code> ability. I wonder if it would be clearer to just do <code>Hasher(hasher)</code> or something similar....not sure</p>",
        "id": 512447417,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744770434
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span>, do we have any plans on fixing byte hashing for static dispatch? As in, a <code>List U8</code> will by default hash via <code>hash_list</code> instead <code>add_bytes</code>. As such, it leaves a lot of performance on the table by default.</p>",
        "id": 512447559,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744770524
    },
    {
        "content": "<p>Really in a perfect world, all number types would hash via <code>add_bytes</code> and only complex types would use <code>hash_list</code> that walks an element at a time.</p>",
        "id": 512447609,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744770566
    },
    {
        "content": "<p>hm, I'm not familiar with the distinction <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 512450719,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1744772520
    },
    {
        "content": "<p>I assume <code>hash_list</code> is hashing each byte individually, which of course is suboptimal</p>",
        "id": 512450811,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1744772564
    },
    {
        "content": "<p>but what does <code>add_bytes</code> do?</p>",
        "id": 512450822,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1744772576
    },
    {
        "content": "<p>Yeah, <code>hash_list</code> is the one element at a time thing</p>",
        "id": 512454125,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744774602
    },
    {
        "content": "<p>And <code>add_bytes</code> leaves it up to the hasher and thus can run way faster algorithms</p>",
        "id": 512454148,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744774620
    },
    {
        "content": "<p>The issue is that we cannot specialize hash on <code>List U8</code> only on <code>List a</code>. So we get stuck hashing <code>List U8</code> with <code>hash_list</code> unless a user manually overrides it in a custom type hash implementation.</p>",
        "id": 512454293,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744774689
    },
    {
        "content": "<p>As an aside, theoretically for most structural types the best hashing would be to hash like <code>add_bytes</code> but to mask out the padding, but that is another level of complexity to even orchestrate.</p>",
        "id": 512454479,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744774813
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/512447247\">said</a>:</p>\n<blockquote>\n<p>I assume <code>a.add_u8(U8) -&gt; hasher,</code> should be <code>a.add_u8(U8) -&gt; a,</code> same for other functions in <code>Hasher</code></p>\n<p>Also, is it now <code>Hash(a)</code> and <code>Hasher(a)</code> instead of <code>Hash a</code> and <code>Hasher a</code></p>\n<p><code>(hasher, b, (hasher, a -&gt; hasher) -&gt; hasher)</code> could use a anlias to be less confusing. That or at least change the name <code>b</code> to <code>container</code> and <code>a</code> to <code>elem</code>.</p>\n<hr>\n<p>Yeah, looks roughly correct.</p>\n</blockquote>\n<p>I fixed the couple of things that were obviously wrong, and made some type aliases to make <code>list_unordered</code>'s signature readable.</p>\n<p>Currently a Type Header still uses space separated args.  Did this change <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> ?</p>",
        "id": 512525388,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744801711
    },
    {
        "content": "<p>This is why it would be very nice if there were a Grammar specification - outside of the implementation in the parser - that we could use to track the parser's compliance (and therefore completion)</p>",
        "id": 512525583,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744801768
    },
    {
        "content": "<p>As good as Zulip is, trying to find the answer to every such question is very difficult</p>",
        "id": 512525742,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744801811
    },
    {
        "content": "<p>In <a class=\"message-link\" href=\"/#narrow/channel/304641-ideas/topic/.E2.9C.94.20Using.20parens.20for.20types/near/499544093\">#ideas &gt; ✔ Using parens for types @ 💬</a>  we decided to use parens for type arguments in the annotation itself, but no real direction of type alias headers</p>",
        "id": 512526476,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744802035
    },
    {
        "content": "<p>good question! I think we should match what patterns do</p>",
        "id": 512546569,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1744808196
    },
    {
        "content": "<p>so for example:</p>\n<div class=\"codehilite\" data-code-language=\"Perl\"><pre><span></span><code><span class=\"n\">Alias</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">...</span>\n</code></pre></div>",
        "id": 512546760,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1744808248
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/512454293\">said</a>:</p>\n<blockquote>\n<p>The issue is that we cannot specialize hash on <code>List U8</code> only on <code>List a</code>. So we get stuck hashing <code>List U8</code> with <code>hash_list</code> unless a user manually overrides it in a custom type hash implementation.</p>\n</blockquote>\n<p>ah, yeah static dispatch doesn't actually help with this; the <code>List</code> type is still in the <code>List</code> module.</p>",
        "id": 512548870,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1744808802
    },
    {
        "content": "<p>Good point!  The <code>hash_list</code> function should be in the list module</p>",
        "id": 512549038,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744808849
    },
    {
        "content": "<p>And ok on the change to type alias headers</p>",
        "id": 512549072,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744808861
    },
    {
        "content": "<p>I can do that real quick before work</p>",
        "id": 512549110,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744808871
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/512454479\">said</a>:</p>\n<blockquote>\n<p>As an aside, theoretically for most structural types the best hashing would be to hash like <code>add_bytes</code> but to mask out the padding, but that is another level of complexity to even orchestrate.</p>\n</blockquote>\n<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> we could make it so that all the non-pointers in structural types get hashed using <code>add_bytes</code>. They should all end up right next to each other anyway because of alignment, and we can't do better than that because we need to chase the pointers anyway (and not include the addresses in the hash)</p>",
        "id": 512549263,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1744808908
    },
    {
        "content": "<p>And then we need:</p>\n<ol>\n<li>Whatever we call <code>[-2, 0, 2].map(.abs().sub(1))</code>. Tearoffs?</li>\n<li><code>var</code> statements</li>\n<li><code>for</code> statements</li>\n</ol>",
        "id": 512549803,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744809049
    },
    {
        "content": "<p>And then v0.1 parsing will be complete</p>",
        "id": 512550021,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744809113
    },
    {
        "content": "<p>Obviously the formatter will need quite a bit of iteration to dial in the style over time</p>",
        "id": 512550127,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744809131
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> have we ever finalized the syntax and semantics for a) Tearoffs and b) local function application in a static dispatch chain?</p>",
        "id": 512550351,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744809202
    },
    {
        "content": "<p>a) let's hold off on that for now. I'd like to see how often people actually want to reach for it in practice once we have static dispatch. Might turn out to not be worth doing.<br>\nb) yeah, we settled on <code>a-&gt;b</code> in <a href=\"#narrow/stream/304641-ideas/topic/static.20dispatch.20-.20pass_to.20alternative\">https://roc.zulipchat.com/#narrow/stream/304641-ideas/topic/static.20dispatch.20-.20pass_to.20alternative</a></p>",
        "id": 512553926,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1744810184
    },
    {
        "content": "<p>more specifically:</p>\n<ul>\n<li><code>a-&gt;b(1, 2)-&gt;c(3, 4)</code> desugars to <code>c(b(a, 1, 2), 3, 4)</code></li>\n<li>you can omit <code>()</code> from these when there are no extra args to pass, so for example you can do <code>-&gt;Ok</code> instead of <code>-&gt;Ok()</code>, and <code>4-&gt;hours-&gt;ago!</code> instead of <code>4-&gt;hours()-&gt;ago!()</code></li>\n<li>the parser should accept either style, but then the formatter should remove <code>()</code>s that are used after <code>-&gt;</code></li>\n</ul>",
        "id": 512555187,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1744810504
    },
    {
        "content": "<p>Just to clarify about b - We decided on <code>-&gt;</code> for local dispatch / \"Arrow calls\", but there was some suggestion (not really touched upon) that <code>match</code> clauses would drop <code>-&gt;</code>.  Is that a thing?</p>",
        "id": 512555768,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744810647
    },
    {
        "content": "<p>Well, this change was a <em>tad</em> more difficult than I expected - it creates some contention with a plain applied Tag expression.  Have to make statements differentiate between top-level and  inside of a block.</p>",
        "id": 512561881,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744812230
    },
    {
        "content": "<p>So I'll try to finish it tomorrow morning :-)</p>",
        "id": 512562025,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744812254
    },
    {
        "content": "<p>Now off to writing AI Agents...</p>",
        "id": 512562065,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744812268
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> <a href=\"#narrow/stream/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/512555768\">said</a>:</p>\n<blockquote>\n<p>Just to clarify about b - We decided on <code>-&gt;</code> for local dispatch / \"Arrow calls\", but there was some suggestion (not really touched upon) that <code>match</code> clauses would drop <code>-&gt;</code>.  Is that a thing?</p>\n</blockquote>\n<p>we decided to use <code>=&gt;</code> with <code>match</code> for now</p>",
        "id": 512593796,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1744820207
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/512562065\">said</a>:</p>\n<blockquote>\n<p>Now off to writing AI Agents...</p>\n</blockquote>\n<p>Cool, what are you working on specifically?</p>",
        "id": 512598312,
        "sender_full_name": "Anton",
        "timestamp": 1744821436
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/512549263\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/512454479\">said</a>:</p>\n<blockquote>\n<p>As an aside, theoretically for most structural types the best hashing would be to hash like <code>add_bytes</code> but to mask out the padding, but that is another level of complexity to even orchestrate.</p>\n</blockquote>\n<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> we could make it so that all the non-pointers in structural types get hashed using <code>add_bytes</code>. They should all end up right next to each other anyway because of alignment, and we can't do better than that because we need to chase the pointers anyway (and not include the addresses in the hash)</p>\n</blockquote>\n<p>Ah yeah, structural types without pointers can do what I said when in a list. If you have pointers, you need to do things an element at a time</p>",
        "id": 512631676,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744826715
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/stream/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/512598312\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/512562065\">said</a>:</p>\n<blockquote>\n<p>Now off to writing AI Agents...</p>\n</blockquote>\n<p>Cool, what are you working on specifically?</p>\n</blockquote>\n<p>Wish I could be specific, but let’s just exploration around UI Generation when the UI is not created from source code</p>",
        "id": 512647573,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744829257
    },
    {
        "content": "<p>Type alias header using parens for args: <a href=\"https://github.com/roc-lang/roc/pull/7749\">https://github.com/roc-lang/roc/pull/7749</a></p>",
        "id": 512802359,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744889070
    },
    {
        "content": "<p>My next steps:</p>\n<ol>\n<li>Move <code>match</code> clauses to using fat arrow <code>=&gt;</code></li>\n<li>Implement \"arrow calls\" as described in <a class=\"message-link\" href=\"/#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/512555187\">#compiler development &gt; zig compiler - parser @ 💬</a> </li>\n<li>Implement <code>var</code> statements</li>\n<li>Implement <code>for</code> construct</li>\n</ol>\n<p>I'll probably do 1 &amp; 2 in a single PR, hopefully by EOW.<br>\nThen 3 &amp; 4 should be relatively straightforward so I'm hoping to have everything done before the next contributor meet up.</p>",
        "id": 512803775,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744889549
    },
    {
        "content": "<p>Move match clauses to fat arrow: <a href=\"https://github.com/roc-lang/roc/pull/7751\">https://github.com/roc-lang/roc/pull/7751</a></p>",
        "id": 513012977,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744973766
    },
    {
        "content": "<p>Parse and format \"Local dispatch arrow calls\": <a href=\"https://github.com/roc-lang/roc/pull/7780\">https://github.com/roc-lang/roc/pull/7780</a></p>",
        "id": 517360040,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1746969039
    },
    {
        "content": "<p>Parse and format <code>var</code> and <code>for</code> statements: <a href=\"https://github.com/roc-lang/roc/pull/7783\">https://github.com/roc-lang/roc/pull/7783</a></p>",
        "id": 517556671,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1747058390
    },
    {
        "content": "<p>Unless something has been missed, the above should <em>functionally</em> complete the parser, parse IR, and formatter for the v0.1 syntax</p>",
        "id": 517557143,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1747058465
    },
    {
        "content": "<p>yoooooooo <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span><span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span><span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span></p>",
        "id": 517559510,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1747058884
    },
    {
        "content": "<p>now to find something difficult to work on <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 517560804,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1747059100
    },
    {
        "content": "<p>(and i want to make it very clear that the formatter style is still a WIP but it works, is stable, and loses no information)</p>",
        "id": 517561108,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1747059148
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/505824596\">said</a>:</p>\n<blockquote>\n<p>Ok, disabled all the extra reformatting and validation logic. So both codebases are just doing their parse to format loop. So should be more apples to apples now. We are still 3 to 5x faster with the new compiler (and 200x less memory).</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>M1 Mac</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>hyperfine<span class=\"w\"> </span>-N<span class=\"w\"> </span>-w<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"w\"> </span>-r<span class=\"w\"> </span><span class=\"m\">30</span><span class=\"w\"> </span>--prepare<span class=\"w\"> </span><span class=\"s1\">'sync &amp;&amp; sudo purge'</span><span class=\"w\"> </span><span class=\"s2\">\"roc format /tmp/old\"</span><span class=\"w\"> </span><span class=\"s2\">\"./zig-out/bin/roc format /tmp/new\"</span>\nBenchmark<span class=\"w\"> </span><span class=\"m\">1</span>:<span class=\"w\"> </span>roc<span class=\"w\"> </span>format<span class=\"w\"> </span>/tmp/old\n<span class=\"w\">  </span>Time<span class=\"w\"> </span><span class=\"o\">(</span>mean<span class=\"w\"> </span>±<span class=\"w\"> </span>σ<span class=\"o\">)</span>:<span class=\"w\">     </span><span class=\"m\">123</span>.8<span class=\"w\"> </span>ms<span class=\"w\"> </span>±<span class=\"w\">   </span><span class=\"m\">0</span>.6<span class=\"w\"> </span>ms<span class=\"w\">    </span><span class=\"o\">[</span>User:<span class=\"w\"> </span><span class=\"m\">97</span>.7<span class=\"w\"> </span>ms,<span class=\"w\"> </span>System:<span class=\"w\"> </span><span class=\"m\">22</span>.8<span class=\"w\"> </span>ms<span class=\"o\">]</span>\n<span class=\"w\">  </span>Range<span class=\"w\"> </span><span class=\"o\">(</span>min<span class=\"w\"> </span>…<span class=\"w\"> </span>max<span class=\"o\">)</span>:<span class=\"w\">   </span><span class=\"m\">122</span>.8<span class=\"w\"> </span>ms<span class=\"w\"> </span>…<span class=\"w\"> </span><span class=\"m\">125</span>.0<span class=\"w\"> </span>ms<span class=\"w\">    </span><span class=\"m\">30</span><span class=\"w\"> </span>runs\n\nBenchmark<span class=\"w\"> </span><span class=\"m\">2</span>:<span class=\"w\"> </span>./zig-out/bin/roc<span class=\"w\"> </span>format<span class=\"w\"> </span>/tmp/new\n<span class=\"w\">  </span>Time<span class=\"w\"> </span><span class=\"o\">(</span>mean<span class=\"w\"> </span>±<span class=\"w\"> </span>σ<span class=\"o\">)</span>:<span class=\"w\">      </span><span class=\"m\">25</span>.8<span class=\"w\"> </span>ms<span class=\"w\"> </span>±<span class=\"w\">   </span><span class=\"m\">1</span>.0<span class=\"w\"> </span>ms<span class=\"w\">    </span><span class=\"o\">[</span>User:<span class=\"w\"> </span><span class=\"m\">18</span>.5<span class=\"w\"> </span>ms,<span class=\"w\"> </span>System:<span class=\"w\"> </span><span class=\"m\">6</span>.6<span class=\"w\"> </span>ms<span class=\"o\">]</span>\n<span class=\"w\">  </span>Range<span class=\"w\"> </span><span class=\"o\">(</span>min<span class=\"w\"> </span>…<span class=\"w\"> </span>max<span class=\"o\">)</span>:<span class=\"w\">    </span><span class=\"m\">25</span>.2<span class=\"w\"> </span>ms<span class=\"w\"> </span>…<span class=\"w\">  </span><span class=\"m\">30</span>.9<span class=\"w\"> </span>ms<span class=\"w\">    </span><span class=\"m\">30</span><span class=\"w\"> </span>runs\n\n<span class=\"w\">  </span>Warning:<span class=\"w\"> </span>Statistical<span class=\"w\"> </span>outliers<span class=\"w\"> </span>were<span class=\"w\"> </span>detected.<span class=\"w\"> </span>Consider<span class=\"w\"> </span>re-running<span class=\"w\"> </span>this<span class=\"w\"> </span>benchmark<span class=\"w\"> </span>on<span class=\"w\"> </span>a<span class=\"w\"> </span>quiet<span class=\"w\"> </span>system<span class=\"w\"> </span>without<span class=\"w\"> </span>any<span class=\"w\"> </span>interferences<span class=\"w\"> </span>from<span class=\"w\"> </span>other<span class=\"w\"> </span>programs.\n\nSummary\n<span class=\"w\">  </span>./zig-out/bin/roc<span class=\"w\"> </span>format<span class=\"w\"> </span>/tmp/new<span class=\"w\"> </span>ran\n<span class=\"w\">    </span><span class=\"m\">4</span>.79<span class=\"w\"> </span>±<span class=\"w\"> </span><span class=\"m\">0</span>.18<span class=\"w\"> </span><span class=\"nb\">times</span><span class=\"w\"> </span>faster<span class=\"w\"> </span>than<span class=\"w\"> </span>roc<span class=\"w\"> </span>format<span class=\"w\"> </span>/tmp/old\n</code></pre></div>\n</div></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>X86 Linux</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>hyperfine<span class=\"w\"> </span>--prepare<span class=\"w\"> </span><span class=\"s1\">'sync; echo 3 | sudo tee /proc/sys/vm/drop_caches'</span><span class=\"w\"> </span>-w<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"w\"> </span>-r<span class=\"w\"> </span><span class=\"m\">30</span><span class=\"w\"> </span><span class=\"s2\">\"./target/release/roc format /tmp/old\"</span><span class=\"w\"> </span><span class=\"s2\">\"./zig-out/bin/roc format /tmp/new\"</span>\nBenchmark<span class=\"w\"> </span><span class=\"m\">1</span>:<span class=\"w\"> </span>./target/release/roc<span class=\"w\"> </span>format<span class=\"w\"> </span>/tmp/old\n<span class=\"w\">  </span>Time<span class=\"w\"> </span><span class=\"o\">(</span>mean<span class=\"w\"> </span>±<span class=\"w\"> </span>σ<span class=\"o\">)</span>:<span class=\"w\">     </span><span class=\"m\">305</span>.8<span class=\"w\"> </span>ms<span class=\"w\"> </span>±<span class=\"w\">  </span><span class=\"m\">12</span>.1<span class=\"w\"> </span>ms<span class=\"w\">    </span><span class=\"o\">[</span>User:<span class=\"w\"> </span><span class=\"m\">144</span>.9<span class=\"w\"> </span>ms,<span class=\"w\"> </span>System:<span class=\"w\"> </span><span class=\"m\">160</span>.3<span class=\"w\"> </span>ms<span class=\"o\">]</span>\n<span class=\"w\">  </span>Range<span class=\"w\"> </span><span class=\"o\">(</span>min<span class=\"w\"> </span>…<span class=\"w\"> </span>max<span class=\"o\">)</span>:<span class=\"w\">   </span><span class=\"m\">293</span>.8<span class=\"w\"> </span>ms<span class=\"w\"> </span>…<span class=\"w\"> </span><span class=\"m\">345</span>.9<span class=\"w\"> </span>ms<span class=\"w\">    </span><span class=\"m\">30</span><span class=\"w\"> </span>runs\n\nBenchmark<span class=\"w\"> </span><span class=\"m\">2</span>:<span class=\"w\"> </span>./zig-out/bin/roc<span class=\"w\"> </span>format<span class=\"w\"> </span>/tmp/new\n<span class=\"w\">  </span>Time<span class=\"w\"> </span><span class=\"o\">(</span>mean<span class=\"w\"> </span>±<span class=\"w\"> </span>σ<span class=\"o\">)</span>:<span class=\"w\">      </span><span class=\"m\">84</span>.4<span class=\"w\"> </span>ms<span class=\"w\"> </span>±<span class=\"w\">   </span><span class=\"m\">1</span>.3<span class=\"w\"> </span>ms<span class=\"w\">    </span><span class=\"o\">[</span>User:<span class=\"w\"> </span><span class=\"m\">44</span>.7<span class=\"w\"> </span>ms,<span class=\"w\"> </span>System:<span class=\"w\"> </span><span class=\"m\">38</span>.6<span class=\"w\"> </span>ms<span class=\"o\">]</span>\n<span class=\"w\">  </span>Range<span class=\"w\"> </span><span class=\"o\">(</span>min<span class=\"w\"> </span>…<span class=\"w\"> </span>max<span class=\"o\">)</span>:<span class=\"w\">    </span><span class=\"m\">82</span>.9<span class=\"w\"> </span>ms<span class=\"w\"> </span>…<span class=\"w\">  </span><span class=\"m\">88</span>.8<span class=\"w\"> </span>ms<span class=\"w\">    </span><span class=\"m\">30</span><span class=\"w\"> </span>runs\n\n<span class=\"w\">  </span>Warning:<span class=\"w\"> </span>Statistical<span class=\"w\"> </span>outliers<span class=\"w\"> </span>were<span class=\"w\"> </span>detected.<span class=\"w\"> </span>Consider<span class=\"w\"> </span>re-running<span class=\"w\"> </span>this<span class=\"w\"> </span>benchmark<span class=\"w\"> </span>on<span class=\"w\"> </span>a<span class=\"w\"> </span>quiet<span class=\"w\"> </span>system<span class=\"w\"> </span>without<span class=\"w\"> </span>any<span class=\"w\"> </span>interferences<span class=\"w\"> </span>from<span class=\"w\"> </span>other<span class=\"w\"> </span>programs.\n\nSummary\n<span class=\"w\">  </span>./zig-out/bin/roc<span class=\"w\"> </span>format<span class=\"w\"> </span>/tmp/new<span class=\"w\"> </span>ran\n<span class=\"w\">    </span><span class=\"m\">3</span>.63<span class=\"w\"> </span>±<span class=\"w\"> </span><span class=\"m\">0</span>.15<span class=\"w\"> </span><span class=\"nb\">times</span><span class=\"w\"> </span>faster<span class=\"w\"> </span>than<span class=\"w\"> </span>./target/release/roc<span class=\"w\"> </span>format<span class=\"w\"> </span>/tmp/old\n</code></pre></div>\n<p></div></div><br>\n</p>\n</blockquote>\n<p>I'm going on the Changelog podcast tomorrow, and it occurred to me that it would be cool to be able to talk about redoing these benchmarks now that we have a feature-complete parser and formatter!</p>",
        "id": 522219349,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1748986744
    },
    {
        "content": "<p>would be sweet to be able to have not only a comparison with the old compiler, but also something like \"we can now parse the equivalent of _____ lines of code per second\"</p>",
        "id": 522219426,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1748986779
    },
    {
        "content": "<p>I won't have time between now and then, but if anyone has time to run those benchmarks, would be great to have them! would be awesome to inspire some people to get involved if they're interested in helping out with a performance-focused compiler <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 522219621,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1748986861
    },
    {
        "content": "<p>i would love to see those numbers as well!  i don't have a lot of time at the moment but i'd love to brag about how much better we've made things</p>",
        "id": 522224680,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1748989140
    },
    {
        "content": "<p>if the existing benchmarks hold up it's 3.9M LOC/s</p>",
        "id": 522228899,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1748990871
    },
    {
        "content": "<p>oh and that's parse and formatting across 100 files</p>",
        "id": 522229182,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1748991000
    },
    {
        "content": "<p>That portends wonderful things for the LS as well</p>",
        "id": 522229431,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1748991097
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> <a href=\"#narrow/stream/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/522228899\">said</a>:</p>\n<blockquote>\n<p>if the existing benchmarks hold up it's 3.9M LOC/s</p>\n</blockquote>\n<p>is that for parse <em>and</em> format?</p>",
        "id": 522232548,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1748992787
    },
    {
        "content": "<p>or just parse</p>",
        "id": 522232564,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1748992793
    },
    {
        "content": "<p>It says parse and format loop</p>",
        "id": 522232643,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1748992836
    },
    {
        "content": "<p>which means that includes at least a couple hundred sys calls for reading and writing files</p>",
        "id": 522232732,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1748992883
    },
    {
        "content": "<p>correct me if that's wrong <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span></p>",
        "id": 522232746,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1748992893
    },
    {
        "content": "<p>Yeah, parse and format. If I recall correctly, only about 20% is formatting....</p>",
        "id": 522235665,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1748994588
    },
    {
        "content": "<p>I probably could pull more updated numbers. Biggest caveat being I don't have real meaningful source code in both old and new parser syntax. Last time I was using a modified syntax grab bag which is not that much like real world code.</p>",
        "id": 522235748,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1748994655
    },
    {
        "content": "<p>Could Claude generate some realistic source code?</p>",
        "id": 522235797,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1748994688
    },
    {
        "content": "<p>I know we wanted to make the old parser auto update, but feature like abilities make the standard library fail to port over.</p>",
        "id": 522235800,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1748994693
    },
    {
        "content": "<p>is the rust compiler v0.1 migrator finished?</p>",
        "id": 522235813,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1748994699
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"453336\">@Joshua Warner</span></p>",
        "id": 522235830,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1748994710
    },
    {
        "content": "<p>I think it is mostly there but has edge cases and clearly can't handle things like abilities.</p>",
        "id": 522235849,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1748994724
    },
    {
        "content": "<p>we could try to just find a number of source files in different projects that succeed</p>",
        "id": 522235858,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1748994727
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> when do you need the numbers by?</p>",
        "id": 522235891,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1748994756
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/522219349\">said</a>:</p>\n<blockquote>\n<p>I'm going on the Changelog podcast tomorrow...</p>\n</blockquote>",
        "id": 522235957,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1748994802
    },
    {
        "content": "<p>I think we can give the existing numbers as showing at least the order of magnitude</p>",
        "id": 522236040,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1748994847
    },
    {
        "content": "<p>and caveat it</p>",
        "id": 522236050,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1748994852
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> noon Pacific is when the recording starts</p>",
        "id": 522236900,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1748995360
    },
    {
        "content": "<p>Just testing the formatter now to see if I can get more meaningful code migrated (like some of the builtins).</p>\n<p>Definitely a few pieces missing for migration:</p>\n<ol>\n<li>abilities (no fix cause they just don't exist)</li>\n<li>wildcard types (those can just become an abitrary letter)</li>\n<li>pizza op (that should be able to turn into static dispatch)</li>\n</ol>\n<p>I still will try to manually convert some things and see how it goes.</p>",
        "id": 522245681,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749000815
    },
    {
        "content": "<p>hmm...something also definitely goes wrong with closures and braces.</p>",
        "id": 522246128,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749001114
    },
    {
        "content": "<p>Also <span class=\"user-mention\" data-user-id=\"781658\">@Anthony Bullard</span>, found a parser bug. This definitely should parse:</p>\n<div class=\"codehilite\"><pre><span></span><code>expect {\n    foo : U32\n    foo = 1 # This should work too\n    blah = 1\n    blah == foo\n}\n</code></pre></div>\n<p>Specifically the <code>foo : U32</code> line breaks parsing.</p>",
        "id": 522247113,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749001713
    },
    {
        "content": "<p>surprising that it doesn't</p>",
        "id": 522247287,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1749001826
    },
    {
        "content": "<p>i thought i had a similar test</p>",
        "id": 522247325,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1749001847
    },
    {
        "content": "<p>is it the U32?</p>",
        "id": 522247335,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1749001854
    },
    {
        "content": "<p>I don't think so. I hit it with <code>List(a)</code> first.</p>",
        "id": 522247540,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749001980
    },
    {
        "content": "<p>Some reason it seems to expect the <code>expect</code> to end right after that line.</p>",
        "id": 522247565,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749001999
    },
    {
        "content": "<p>ah it must think it's a record literal</p>",
        "id": 522247780,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1749002132
    },
    {
        "content": "<p>that shouldn't happen. i check for this and bail out of a record and parse it as a block</p>",
        "id": 522247840,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1749002178
    },
    {
        "content": "<p>I can take a look in the morning but that's the best i can do</p>",
        "id": 522247878,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1749002200
    },
    {
        "content": "<p>Yeah, I don't need it fixed, just noting it</p>",
        "id": 522247901,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749002215
    },
    {
        "content": "<p>ok sorry about that</p>",
        "id": 522247957,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1749002251
    },
    {
        "content": "<p>i'll add the above as a snapshot and makes sure it parses</p>",
        "id": 522247979,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1749002268
    },
    {
        "content": "<p>One other question for you, does the new zig compiler attempt to parse thing like <code>List a</code> and convert to <code>List(a)</code>?</p>",
        "id": 522248022,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749002298
    },
    {
        "content": "<p>I don't think we should try to do that honestly</p>",
        "id": 522248966,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749002821
    },
    {
        "content": "<p>I think the amount of complexity wouldn't be worth it, considering LLMs can now do that sort of migration well enough <span aria-label=\"smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 522249004,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749002848
    },
    {
        "content": "<p>and I remember a conversation where we discussed that if we knew the new parser didn't need to support whitespace application at all, it would significantly simplify several areas</p>",
        "id": 522249073,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749002890
    },
    {
        "content": "<p>yeah no white space application at all</p>",
        "id": 522249139,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1749002939
    },
    {
        "content": "<p>love the idea of parsing the stdlib as a point of comparison btw! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 522249552,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749003225
    },
    {
        "content": "<p>Yeah, just was curious cause in the half migrated list.roc file I have it has some cases where it doesn't seem to care about <code>List a</code> but others where it does care....no idea why.</p>",
        "id": 522250571,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749003933
    },
    {
        "content": "<blockquote>\n<p>love the idea of parsing the stdlib as a point of comparison btw!</p>\n</blockquote>\n<p>Yeah, just not sure if I can port the stdlib in time to get meaningful numbers. Theoretically an llm might be able to help, but they definitely don't know roc currently.</p>",
        "id": 522251019,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749004238
    },
    {
        "content": "<p>Doesn't have to be a fully functional port, but at least needs to parse and format.</p>",
        "id": 522251072,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749004269
    },
    {
        "content": "<p>ah yeah I guess we don't have an equivalent of <a href=\"https://www.roc-lang.org/builtins/llms.txt\">https://www.roc-lang.org/builtins/llms.txt</a> for the new syntax</p>",
        "id": 522251085,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749004278
    },
    {
        "content": "<p>could try giving it some basic examples but maybe not enough</p>",
        "id": 522251108,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749004296
    },
    {
        "content": "<p>or like tests in the source code maybe?</p>",
        "id": 522251123,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749004305
    },
    {
        "content": "<p>Oh, one other parser bug found. The new parser doesn't understand doc comments <code>## ...</code></p>",
        "id": 522251917,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749004838
    },
    {
        "content": "<p>that's super easy to add. i thought the tokenizer handled that</p>",
        "id": 522251975,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1749004879
    },
    {
        "content": "<p>we definitely don't have a concept of a doc comment in the parser because the parser doesn't know about comments at all</p>",
        "id": 522252072,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1749004962
    },
    {
        "content": "<p>Ah yeah, fair</p>",
        "id": 522252123,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749004995
    },
    {
        "content": "<p>either way should be very straight forward</p>",
        "id": 522252157,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1749005019
    },
    {
        "content": "<p>there's a function called chompTrivia that handles it i believe</p>",
        "id": 522252203,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1749005047
    },
    {
        "content": "<p>in the tokenizer</p>",
        "id": 522252220,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1749005055
    },
    {
        "content": "<p>Also, to note, I think it is may just be the formatting that needs to be fixed. Outputs <code># # ...</code></p>",
        "id": 522252919,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749005510
    },
    {
        "content": "<p>we may need to start keeping doc comments (although not regular ones) around for parsing so we can parse their markdown but yeah</p>",
        "id": 522253049,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749005598
    },
    {
        "content": "<p>Hmm, looks like we are missing record destructuring in the new syntax:<br>\n<code>{ start, end, step } = rec</code><br>\n<code>expr_unexpected_token, at token OpAssign at ...</code></p>",
        "id": 522262574,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749011581
    },
    {
        "content": "<p>And maybe missing guards on match statements.<br>\n<code>[x, .. as rest] if x == delimiter =&gt;</code><br>\n<code>expr_unexpected_token, at token OpFatArrow at ...</code></p>",
        "id": 522263269,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749012040
    },
    {
        "content": "<p>Ok, so I ported over List.roc. I think it is a reasonably representative file for well documented roc code. It is about ~800 LOC and ~800 lines of comments/blank/bracket only.<br>\nThe new version is about 100 lines of brackets more than the old version. That said, total byte count is pretty similar. I padded the old roc file with an extra comment to make them the exact same number of bytes.</p>\n<p>All numbers on M1 mac</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Formatting 1000 files that are all List.roc</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>3.2x faster<br>\n1000x less memory</p>\n<hr>\n<p>460ms total<br>\n65% of time is reading files, tokenize, and parse<br>\nSo...<br>\n~1,600,000 lines parsed  in ~300ms (~5 million lines per second)<br>\n~800,000 lines of actual code parsed (~2.5 million lines of code per second)</p>\n<p>Note, many lines of code are still really short, so it may not be the most representative.</p>\n<hr>\n<p>Raw times:</p>\n<div class=\"codehilite\"><pre><span></span><code>Benchmark 1: ./roc-rust format old-list/\n  Time (mean ± σ):      1.498 s ±  0.037 s    [User: 1.200 s, System: 0.245 s]\n  Range (min … max):    1.438 s …  1.574 s    10 runs\n\nBenchmark 2: ./roc-zig format new-list/\n  Time (mean ± σ):     464.9 ms ±   6.1 ms    [User: 374.0 ms, System: 86.1 ms]\n  Range (min … max):   457.4 ms … 475.4 ms    10 runs\n\nSummary\n  ./roc-zig format new-list/ ran\n    3.22 ± 0.09 times faster than ./roc-rust format old-list/\n</code></pre></div>\n</div></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Formatting List.roc single file with 1000x the body size</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>3.6x faster<br>\n6x less memory</p>\n<hr>\n<p>390ms total<br>\n65% of time is reading files, tokenize, and parse<br>\nSo...<br>\n~1,600,000 lines parsed  in ~250ms (~6.4 million lines per second)<br>\n~800,000 lines of actual code parsed (~3.2 million lines of code per second)</p>\n<p>Note, many lines of code are still really short, so it may not be the most representative.</p>\n<hr>\n<p>Raw times:</p>\n<div class=\"codehilite\"><pre><span></span><code>Benchmark 1: ./roc-rust format Old-List.roc\n  Time (mean ± σ):      1.384 s ±  0.018 s    [User: 1.182 s, System: 0.165 s]\n  Range (min … max):    1.357 s …  1.421 s    10 runs\n\nBenchmark 2: ./roc-zig format New-List.roc\n  Time (mean ± σ):     384.9 ms ±  10.9 ms    [User: 305.3 ms, System: 60.0 ms]\n  Range (min … max):   372.3 ms … 400.2 ms    10 runs\n\nSummary\n  ./roc-zig format New-List.roc ran\n    3.59 ± 0.11 times faster than ./roc-rust format Old-List.roc\n</code></pre></div>\n</div></div>\n<p>Also, definitely room for more gains like making chomptrivia faster.</p>",
        "id": 522266799,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749014248
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> here are some rough numbers just based on <code>List.roc</code>.</p>\n<p>Clearly we leak memory with every new file in the old rust compiler.</p>\n<p>Also, big numbers that matter:<br>\n~3 to 4x faster than rust compiler (parse and format combined)<br>\n~2 to 3 millions lines of code parsed per second<br>\n~5 to 6 millions lines per second when including comments, bracket only, and blank lines</p>",
        "id": 522267073,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749014436
    },
    {
        "content": "<blockquote>\n<p>making chomptrivia faster</p>\n</blockquote>\n<p>Nice, sounds like a fun project <span aria-label=\"racecar\" class=\"emoji emoji-1f3ce\" role=\"img\" title=\"racecar\">:racecar:</span></p>",
        "id": 522267878,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1749014993
    },
    {
        "content": "<p>Yeah, chomp trivia and string interning are the two things that stick out most.</p>",
        "id": 522268422,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749015307
    },
    {
        "content": "<p>The plan is to do some SIMD stuff there? It sounds like it might be a really contained side project. Would it be too early to explore that now?</p>",
        "id": 522268618,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1749015409
    },
    {
        "content": "<p>Someone could definitely do this now if they are interested.</p>",
        "id": 522269380,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749015860
    },
    {
        "content": "<p>I had an initial stab at it... <a href=\"https://github.com/roc-lang/roc/pull/7815\">https://github.com/roc-lang/roc/pull/7815</a> </p>\n<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> can you share your <code>List.roc</code> file so I can test this.</p>",
        "id": 522282841,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1749021465
    },
    {
        "content": "<p>I don't know enough about SIMD to really review your implementation <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> but it looks good to me, thank you for adding tests to check correctness!</p>",
        "id": 522325660,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1749034105
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/522262574\">said</a>:</p>\n<blockquote>\n<p>Hmm, looks like we are missing record destructuring in the new syntax:<br>\n<code>{ start, end, step } = rec</code><br>\n<code>expr_unexpected_token, at token OpAssign at ...</code></p>\n</blockquote>\n<p>Can you share the overall file and I'll add it as a snapshot that I can fill in gaps.  To be clear, this is supposed to be supported.  I can see from even syntax grab bag (and verified by looking at Parser.parseStmt) that I must have just forgotten to look for OpenCurly and OpenSquare in the statement position to check them being used as a pattern before sending it over to parseExpr.</p>",
        "id": 522327314,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1749034637
    },
    {
        "content": "<p>And the match guards were also just for some reason not on my check list</p>",
        "id": 522327419,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1749034676
    },
    {
        "content": "<p>the Changelog episode recording went great, and I used the numbers in it - thanks for doing those <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> and thanks for getting the parser and formatter to the point where we could actually compile a whole builtin module with them <span class=\"user-mention\" data-user-id=\"781658\">@Anthony Bullard</span>! <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span></p>",
        "id": 522466615,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749078673
    },
    {
        "content": "<p>episode should be out in a week or two</p>",
        "id": 522466628,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749078684
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> I ran it on a folder with 1000 copies of this file<br>\n<a href=\"/user_uploads/22008/sv6AHKywaGY_sylPtBrceLmq/file_1.roc\">file_1.roc</a></p>",
        "id": 522471072,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749081513
    },
    {
        "content": "<p>and a version of it that just duplicated the body 1000 times</p>",
        "id": 522471131,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749081560
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/HUEdGmz489ctTJCID5KuYvck/New-List.roc\">New-List.roc</a></p>",
        "id": 522471158,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749081581
    },
    {
        "content": "<blockquote>\n<p>Can you share the overall file and I'll add it as a snapshot that I can fill in gaps.</p>\n</blockquote>\n<p>I ended up removing everything that caused a problem in order to get it compiling.... I can try to find and re-add all the things that broke the tokenizer/parser. Might not have time to do so tonight though. Should just be the two issues I mentioned above and then many commented out type annotations.</p>",
        "id": 522471515,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749081740
    },
    {
        "content": "<p>This is good. Thank you. I'm currently rewriting a bunch of things. I've been experimenting with the LLM workflow, and it's amazing how useful but also unhelpful the AI can be. It gives code that looks pretty good but can be totally useless. I'm rebuilding my test cases to ensure it's working correctly.</p>",
        "id": 522471735,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1749081862
    },
    {
        "content": "<blockquote>\n<p>Might not have time to do so tonight though</p>\n</blockquote>\n<p>Actually, I am confused on what day it is. I should have time tonight, don't have time tomorrow night. I'll try to skim through the file and re-add the various pieces I had to remove.</p>",
        "id": 522472486,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749082408
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"781658\">@Anthony Bullard</span> I think this file should work for your snapshot test. Also, beyond just making parse, definitely needs some formatting cleanup.<br>\nEdit: newer version of file with another fix.<br>\n<a href=\"/user_uploads/22008/UNMXULNfklsoT0CzAok4LY9c/List.roc\">List.roc</a></p>",
        "id": 522479982,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749087310
    },
    {
        "content": "<p>For example:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">walk_backwards_help</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">list</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">index_plus_one</span><span class=\"o\">|</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">index_plus_one</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">        </span><span class=\"n\">state</span>\n<span class=\"w\">            </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"no\">Num</span><span class=\"o\">.</span><span class=\"n\">sub_wrap</span><span class=\"p\">(</span><span class=\"n\">index_plus_one</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"n\">next_state</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">get_unsafe</span><span class=\"p\">(</span><span class=\"n\">list</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"p\">))</span>\n\n<span class=\"w\">                </span><span class=\"n\">walk_backwards_help</span><span class=\"p\">(</span><span class=\"n\">list</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">next_state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 522480068,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749087345
    },
    {
        "content": "<p>I keep remembering ...oh, and one more thing for this.... In the new compiler we don't allow <code>_intionally_named_but_ignored</code>. It has to just be <code>_</code>. Was this intentional? I like named ignored variables, but maybe not everyone does and we decided to remove it?</p>",
        "id": 522489818,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749093478
    },
    {
        "content": "<p>I think its meant to be the same, i.e. <code>_named_ignored_thing</code> is still valid. It's probably just been overlooked/not implemented yet.</p>",
        "id": 522490287,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1749093789
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/522268618\">said</a>:</p>\n<blockquote>\n<p>The plan is to do some SIMD stuff there? It sounds like it might be a really contained side project. Would it be too early to explore that now?</p>\n</blockquote>\n<p>I followed the updates and PR on this, but I think it's too early for SIMD, I would not add serious complexity to code that is still expected to change and not a bottleneck.</p>",
        "id": 522741734,
        "sender_full_name": "Anton",
        "timestamp": 1749203077
    },
    {
        "content": "<p>I agree. It was fun to explore a little, but turned out to be a little more complicated than I thought.</p>",
        "id": 522743137,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1749203569
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/stream/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/522741734\">said</a>:</p>\n<blockquote>\n<p>I followed the updates and PR on this, but I think it's too early for SIMD, I would not add serious complexity to code that is still expected to change and not a bottleneck.</p>\n</blockquote>\n<p>Luckily, chomp trivia is not still expected to change and is a bottleneck.</p>",
        "id": 522790968,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749220431
    },
    {
        "content": "<p>It also is such a small chunk of code that it would be trivial to switch back if we need</p>",
        "id": 522791067,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749220458
    },
    {
        "content": "<p>I think small localized optimizations like this should be totally fine.</p>",
        "id": 522791169,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749220487
    },
    {
        "content": "<p>I say this more in terms of, people should feel free to explore optimizations and we should definitely accept them if they are small and self contained. Don't want to block that energy.</p>",
        "id": 522791681,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749220624
    },
    {
        "content": "<p>I agree, I forgot that this was about <code>chompTrivia</code> specifically</p>",
        "id": 522797594,
        "sender_full_name": "Anton",
        "timestamp": 1749222463
    },
    {
        "content": "<p>For the bottleneck I was thinking about parsing not being a bottleneck in compilation but yeah small, self-contained and not expected to change sounds good</p>",
        "id": 522800362,
        "sender_full_name": "Anton",
        "timestamp": 1749223470
    },
    {
        "content": "<p>Yeah, for dev with an interpreter, will be interesting to see the bottlenecks</p>",
        "id": 522801180,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749223777
    },
    {
        "content": "<p>Also, I guess formatting a ton of files is another workflow we want to be super fast</p>",
        "id": 522801303,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749223817
    },
    {
        "content": "<p>But yeah, in general I agree</p>",
        "id": 522801375,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749223840
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/522466615\">said</a>:</p>\n<blockquote>\n<p>the Changelog episode recording went great, and I used the numbers in it - thanks for doing those <span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> and thanks for getting the parser and formatter to the point where we could actually compile a whole builtin module with them <span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span>! <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span></p>\n</blockquote>\n<p>Can't wait to see it myself!</p>",
        "id": 522980342,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1749392825
    },
    {
        "content": "<p>I've noticed we don't parse tuple patterns... are these planned but just not implemented yet?</p>\n<h1>Analysis from Claude</h1>\n<p>The parser only looks for pattern assignments when it sees a <code>LowerIdent</code> token. For tuple patterns starting with <code>(</code>, it falls through to the default case where it parses an expression statement instead of a pattern assignment.</p>\n<p>To fix this, we would need to:</p>\n<ol>\n<li>Add a case for <code>.OpenRound</code> and <code>.NoSpaceOpenRound</code> in <code>parseStmtByType</code> </li>\n<li>Try to parse a pattern, then check if it's followed by <code>OpAssign</code></li>\n<li>If so, create a <code>.decl</code> statement with the pattern</li>\n</ol>\n<p>However, this approach has a problem: we'd need to look ahead quite a bit to determine if we have a pattern assignment vs just a tuple expression. A better approach might be to:</p>\n<ol>\n<li>In the default case (where expressions are parsed), after parsing an expression, check if it's followed by <code>OpAssign</code></li>\n<li>If so, try to convert the expression to a pattern (or report an error if it can't be converted)</li>\n<li>Then parse the RHS and create a <code>.decl</code> statement</li>\n</ol>\n<p>This is likely why the current parser implementation only supports simple identifier patterns in assignments - handling complex patterns requires either significant lookahead or the ability to convert expressions to patterns after parsing.</p>\n<p>The snapshot shows this limitation clearly - tuple \"patterns\" are being parsed as tuple expressions, leading to the \"expr_unexpected_token\" error when the parser encounters the <code>=</code> sign.</p>\n<h2>Snapshot</h2>\n<p>I thought these would be supported, but I think they haven't been implemented in the Parser yet </p>\n<div class=\"codehilite\"><pre><span></span><code>~~~META\ndescription=Tuple pattern matching tests\ntype=expr\n~~~SOURCE\n{\n\n    # Simple tuple destructuring\n    (x, y) = (1, 2)\n\n    # Nested tuple patterns\n    ((a, b), (c, d)) = ((10, 20), (30, 40))\n\n    # Mixed patterns with literals\n    (first, second, third) = (100, 42, 200)\n\n    # Tuple with string and tag patterns\n    (name, string, boolean) = (&quot;Alice&quot;, &quot;fixed&quot;, True)\n\n    # Tuple with list pattern\n    (list, hello) = ([1, 2, 3], &quot;hello&quot;)\n\n    {}\n}\n</code></pre></div>",
        "id": 524998040,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1750407890
    },
    {
        "content": "<p>check the syntax grab bag snapshot</p>",
        "id": 525099923,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750451332
    },
    {
        "content": "<p>that's all of the implemented syntax</p>",
        "id": 525099931,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750451340
    },
    {
        "content": "<p>if tuples aren't there i think it was an oversight</p>",
        "id": 525099945,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750451351
    },
    {
        "content": "<p>I think it is specifically for pattern matching that they aren't implemented.</p>",
        "id": 525104893,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1750454546
    },
    {
        "content": "<p>I mentioned this a while ago in this thread when porting List.roc over</p>",
        "id": 525104922,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1750454563
    },
    {
        "content": "<p>should be trivial to fix, but it would be MUCH easier for all of this if decls started with a keyword <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 525105733,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750455069
    },
    {
        "content": "<p>Like <code>let</code>? What are you thinking</p>",
        "id": 525107861,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1750456407
    },
    {
        "content": "<p>yeah</p>",
        "id": 525107869,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750456415
    },
    {
        "content": "<p>this is how we end up with nice syntax: we do the thing that's nicer for the end user but harder for the compiler authors <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 525109274,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1750457464
    },
    {
        "content": "<p>oh totally!  not suggesting we SHOULD</p>",
        "id": 525109654,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750457760
    },
    {
        "content": "<p>just stating the simple fact that patterns in decls with no keywords that are almost indistinguishable from a expr of the same shape until you find the equal sign is complicated specifically for things like lists and tuples</p>",
        "id": 525109833,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750457882
    },
    {
        "content": "<p>with a record i know after two tokens</p>",
        "id": 525109872,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750457906
    },
    {
        "content": "<p>ah for sure!</p>",
        "id": 525109939,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1750457955
    },
    {
        "content": "<p>but lists and tuples patterns can mean a theoretically unbounded lookahead</p>",
        "id": 525109943,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750457958
    },
    {
        "content": "<p>What do you think of Claude's suggestion </p>\n<blockquote>\n<p>handling complex patterns requires either significant lookahead or the ability to convert expressions to patterns after parsing.</p>\n</blockquote>\n<p>Could we convert it from an expression to pattern in Can?</p>",
        "id": 525110343,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1750458245
    },
    {
        "content": "<p>possibly</p>",
        "id": 525111563,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750459291
    },
    {
        "content": "<p>FWIW I’d actually like to have the same underlying ast nodes be reused for exprs and patterns</p>",
        "id": 525111617,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1750459339
    },
    {
        "content": "<p>but i think it would be a pain, but i can look at it</p>",
        "id": 525111623,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750459345
    },
    {
        "content": "<p>That way we don’t have to convert (only verify)</p>",
        "id": 525111644,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1750459361
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453336\">Joshua Warner</span> <a href=\"#narrow/stream/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/525111617\">said</a>:</p>\n<blockquote>\n<p>FWIW I’d actually like to have the same underlying ast nodes be reused for exprs and patterns</p>\n</blockquote>\n<p>there'd have to be near perfect symmetry between them for me to roll that way. i can take a look at that tomorrow</p>",
        "id": 525111712,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750459413
    },
    {
        "content": "<p>it would unlock some nice characteristics</p>",
        "id": 525111727,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750459427
    },
    {
        "content": "<p>really removing the need for lookahead at all</p>",
        "id": 525111736,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750459438
    },
    {
        "content": "<p>the only issue i can think of off top is alternates</p>",
        "id": 525112265,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750459898
    },
    {
        "content": "<p>There’s not a perfect symmetry, but it’s close enough to be useful IMO. The only alternative is allowing conversions, which I think will end up being a bit costly from a perf perspective</p>",
        "id": 525112286,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1750459912
    },
    {
        "content": "<p>like <code>Foo(1 | 2)</code></p>",
        "id": 525112301,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750459927
    },
    {
        "content": "<p>Alternates can’t occur in expr position anyway (at the start of a statement)</p>",
        "id": 525112324,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1750459945
    },
    {
        "content": "<p>yeah but i wouldn't want to underfit the node to support something for this kind of pattern that's also used for exprs</p>",
        "id": 525112409,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750460026
    },
    {
        "content": "<p>Oh to be clear I’m taking about the internal node types being shared, not the types exposed to the rest of the compiler</p>",
        "id": 525112452,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1750460074
    },
    {
        "content": "<p>i mean all nodes internally are identical</p>",
        "id": 525112486,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750460105
    },
    {
        "content": "<p>Right, but expressions and patterns should use the same node type IDs ￼</p>",
        "id": 525112521,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1750460140
    },
    {
        "content": "<p>We can then translate them into different public e￼numeration types, depending on the context</p>",
        "id": 525112549,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1750460162
    },
    {
        "content": "<p>it's just the different tags and how those tags affect the interpretation of the data and extra data</p>",
        "id": 525112556,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750460165
    },
    {
        "content": "<p>Yep, so the same internal tags, but different external enumerations ￼</p>",
        "id": 525112580,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1750460188
    },
    {
        "content": "<p>so all use expr ids</p>",
        "id": 525112593,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750460200
    },
    {
        "content": "<p>but you get / set with specific functions for pattern or expr?</p>",
        "id": 525112606,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750460217
    },
    {
        "content": "<p>I was matching we would also have a pattern ID that sneaky uses the same ID space as expression IDs</p>",
        "id": 525112626,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1750460226
    },
    {
        "content": "<p>Sneakily</p>",
        "id": 525112637,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1750460234
    },
    {
        "content": "<p>they all have the same address space</p>",
        "id": 525112655,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750460253
    },
    {
        "content": "<p>they are all just integer offsets into a single array list</p>",
        "id": 525112683,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750460275
    },
    {
        "content": "<p>Errrr… right, I forgot about that.</p>",
        "id": 525112714,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1750460298
    },
    {
        "content": "<p>so this shouldn't be two hard at all</p>",
        "id": 525112746,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750460332
    },
    {
        "content": "<p>I guess the only critical thing then is making sure that if you were to take a pattern ID and cast it to an expression ID, then decoded as an expression, it should “just work”</p>",
        "id": 525112767,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1750460348
    },
    {
        "content": "<p>yes</p>",
        "id": 525112778,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750460359
    },
    {
        "content": "<p>actually that might not be that much work</p>",
        "id": 525112816,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750460401
    },
    {
        "content": "<p>(famous last words)</p>",
        "id": 525112828,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750460410
    },
    {
        "content": "<p>Naturally, these code paths to convert to the external types will act as correctness assertions on the purse parser ￼algorithms that are deciding what is and is not a valid expression (or pattern)</p>",
        "id": 525112875,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1750460433
    },
    {
        "content": "<p>Yeah hopefully</p>",
        "id": 525112886,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1750460443
    },
    {
        "content": "<p>lol dictating the word parser is impossibrl</p>",
        "id": 525112907,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1750460464
    },
    {
        "content": "<p>wow you are right!</p>",
        "id": 525113005,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750460547
    },
    {
        "content": "<p>just tried myself</p>",
        "id": 525113016,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750460554
    },
    {
        "content": "<p>Does the parser currently support multiple patterns in <code>match</code>? ie <code>A | B =&gt; ...</code></p>",
        "id": 526679633,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1751402304
    },
    {
        "content": "<p>The type looks like in <code>parse/AST.zig</code> looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">MatchBranch</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">pattern</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Pattern</span><span class=\"p\">.</span><span class=\"n\">Idx</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">body</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Expr</span><span class=\"p\">.</span><span class=\"n\">Idx</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">region</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">TokenizedRegion</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>So I'm guessing either it's not yet implemented, or when we parse we split <code>A</code> and <code>B</code> into their own branches pointing to the same expr?</p>",
        "id": 526679811,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1751402404
    },
    {
        "content": "<p>I did think about that. I haven't implemented it (or at least not deliberately) in my PR</p>",
        "id": 526682920,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751403989
    },
    {
        "content": "<p>My guess is we'll split that into multiple branches... but the Parser should be where that is done I think. Actually I'm not sure...</p>",
        "id": 526683112,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751404073
    },
    {
        "content": "<p>We dont want to desugar in this version of the compiler so we probably need a different approach to ha dle this.</p>",
        "id": 526684659,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751404839
    },
    {
        "content": "<p>In CIR, it has a span. Can the parse AST do the same?</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">Branch</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">patterns</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Match</span><span class=\"p\">.</span><span class=\"n\">BranchPattern</span><span class=\"p\">.</span><span class=\"n\">Span</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"p\">...</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 526685286,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1751405164
    },
    {
        "content": "<p>I think so, it's a fair change to the parser. We may want to wait until after <span class=\"user-mention\" data-user-id=\"781658\">@Anthony Bullard</span> has done his thing before we change it.</p>",
        "id": 526687975,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751406608
    },
    {
        "content": "<p>seems like higher-order function type annotations don't parse without parens right now <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<p>this parses:</p>\n<div class=\"codehilite\"><pre><span></span><code>foo : ((Str -&gt; Str) -&gt; Str)\n</code></pre></div>\n<p>...but without the outer parens, this fails to parse:</p>\n<div class=\"codehilite\"><pre><span></span><code>foo : (Str -&gt; Str) -&gt; Str\n</code></pre></div>",
        "id": 527314831,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751765514
    },
    {
        "content": "<p>that's definitely a bug</p>",
        "id": 527316390,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751768006
    },
    {
        "content": "<p>if you add a snapshot for it i'll fix it</p>",
        "id": 527316399,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751768025
    },
    {
        "content": "<p>thanks! I pushed a repro snapshot to <a href=\"https://github.com/roc-lang/roc/pull/7955\"><code>higher-order-annotations</code></a></p>",
        "id": 527318195,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751770859
    },
    {
        "content": "<p>I think we may have just hit an exciting-ish point in parser fuzzing. The fuzzer isn't failing on super short edge cases anymore. Instead, it is now via forcing a stack overflow...at least that is my assumption based on the input.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p><code>zig build repro-parse -- -b MHt7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7ezA= -v</code></p>\n</div></div>",
        "id": 532591896,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1754249980
    },
    {
        "content": "<p>amazing!!!</p>",
        "id": 532592402,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1754250314
    },
    {
        "content": "<p>Oh exciting indeed. But this raises the question: right now the parser is recursive by design. How should we handle these kinds of situations? Would a randomly defined recursion limit like 256 be fine? Because I can't imagine this happening in usual code <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 532593350,
        "sender_full_name": "JRI98",
        "timestamp": 1754250972
    },
    {
        "content": "<p>ideally we'd make it stack-safe by using a heap-allocated stack instead of the call stack</p>",
        "id": 532594013,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1754251471
    },
    {
        "content": "<p>That was my second option. Fuzzing can really find the edge cases</p>",
        "id": 532594611,
        "sender_full_name": "JRI98",
        "timestamp": 1754251885
    },
    {
        "content": "<p>That looks like token wise it's just 4 tokens so I think it would be a tokenization issue</p>",
        "id": 532897283,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1754394062
    },
    {
        "content": "<p>And i thought the chomping of chars in a ident was in a tight loop, not recursion...</p>",
        "id": 532897348,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1754394088
    },
    {
        "content": "<p>That's the base 64 that appears to be just 4 tokens. The actual input is a boatload of open curlies.</p>",
        "id": 532936488,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1754406421
    },
    {
        "content": "<p>... which leads to the stack overflow you'd expect - </p>\n<div class=\"codehilite\"><pre><span></span><code>...\n    frame #10300: 0x00000001001003a4 repro-parse`Parser.parseStmtByType(self=0x000000016fdfa400, statementType=in_body) at Parser.zig:1214:36\n    frame #10301: 0x000000010014662c repro-parse`Parser.parseStmt(self=0x000000016fdfa400) at Parser.zig:922:36\n    frame #10302: 0x000000010013f854 repro-parse`Parser.parseBlock(self=0x000000016fdfa400, start=17) at Parser.zig:2791:45\n    frame #10303: 0x0000000100130bcc repro-parse`Parser.parseExprWithBp(self=0x000000016fdfa400, min_bp=&#39;\\0&#39;) at Parser.zig:1948:43\n    frame #10304: 0x000000010011d588 repro-parse`Parser.parseExpr(self=0x000000016fdfa400) at Parser.zig:1718:36\n    frame #10305: 0x00000001001003a4 repro-parse`Parser.parseStmtByType(self=0x000000016fdfa400, statementType=in_body) at Parser.zig:1214:36\n    frame #10306: 0x000000010014662c repro-parse`Parser.parseStmt(self=0x000000016fdfa400) at Parser.zig:922:36\n    frame #10307: 0x000000010013f854 repro-parse`Parser.parseBlock(self=0x000000016fdfa400, start=16) at Parser.zig:2791:45\n    frame #10308: 0x0000000100130bcc repro-parse`Parser.parseExprWithBp(self=0x000000016fdfa400, min_bp=&#39;\\0&#39;) at Parser.zig:1948:43\n    frame #10309: 0x000000010011d588 repro-parse`Parser.parseExpr(self=0x000000016fdfa400) at Parser.zig:1718:36\n    frame #10310: 0x00000001001003a4 repro-parse`Parser.parseStmtByType(self=0x000000016fdfa400, statementType=in_body) at Parser.zig:1214:36\n    frame #10311: 0x000000010014662c repro-parse`Parser.parseStmt(self=0x000000016fdfa400) at Parser.zig:922:36\n    frame #10312: 0x000000010013f854 repro-parse`Parser.parseBlock(self=0x000000016fdfa400, start=15) at Parser.zig:2791:45\n    frame #10313: 0x0000000100130bcc repro-parse`Parser.parseExprWithBp(self=0x000000016fdfa400, min_bp=&#39;\\0&#39;) at Parser.zig:1948:43\n    frame #10314: 0x000000010011d588 repro-parse`Parser.parseExpr(self=0x000000016fdfa400) at Parser.zig:1718:36\n    frame #10315: 0x00000001001003a4 repro-parse`Parser.parseStmtByType(self=0x000000016fdfa400, statementType=in_body) at Parser.zig:1214:36\n    frame #10316: 0x000000010014662c repro-parse`Parser.parseStmt(self=0x000000016fdfa400) at Parser.zig:922:36\n    frame #10317: 0x000000010013f854 repro-parse`Parser.parseBlock(self=0x000000016fdfa400, start=14) at Parser.zig:2791:45\n    frame #10318: 0x0000000100130bcc repro-parse`Parser.parseExprWithBp(self=0x000000016fdfa400, min_bp=&#39;\\0&#39;) at Parser.zig:1948:43\n    frame #10319: 0x000000010011d588 repro-parse`Parser.parseExpr(self=0x000000016fdfa400) at Parser.zig:1718:36\n...\n</code></pre></div>",
        "id": 532936590,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1754406448
    },
    {
        "content": "<p>I have a fix for this, basically using a nesting counter that decrements every time we enter parsing an expression (and increments on a defer) - throwing a new Error when we try to decrement when already at zero</p>",
        "id": 533076999,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1754478075
    },
    {
        "content": "<p>I put the value for now at 128, that would probably need to vary based on platform/arch</p>",
        "id": 533077076,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1754478102
    },
    {
        "content": "<p>I can put up a PR for it, and you can give me feedback</p>",
        "id": 533077137,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1754478120
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/pull/8166\">https://github.com/roc-lang/roc/pull/8166</a></p>",
        "id": 533078257,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1754478510
    },
    {
        "content": "<p>Yeah as a temporary solution it should work</p>",
        "id": 533121467,
        "sender_full_name": "JRI98",
        "timestamp": 1754492191
    },
    {
        "content": "<p>But I don't think this only relates to expressions. Pattern parsing is also recursive and I can imagine the fuzzer finding an example for it</p>",
        "id": 533122224,
        "sender_full_name": "JRI98",
        "timestamp": 1754492432
    },
    {
        "content": "<p>Constructed manually:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>module []<br>\nx=match l{p>\n</div></div>",
        "id": 533122782,
        "sender_full_name": "JRI98",
        "timestamp": 1754492612
    },
    {
        "content": "<p>Type annotations parsing too (example here needs to be extended as it is too big for Zulip):</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>module []<br>\nFoo : A(A(A(A(A(A(A(A(A(A(A(A(A(A(A(A(A(A(A(A(A(A(A(A(A(A(A(A(A(A(A(A(A(A(A(A(A(A(A(A(A(A(A(A(A(A(A(A(A(A(A(A(A(A(A(...</p>\n</div></div>",
        "id": 533125702,
        "sender_full_name": "JRI98",
        "timestamp": 1754493508
    },
    {
        "content": "<p>Yeah, I know in the long term we don't want arbitrary limits like this, but they definitely work for the short and probably medium term.</p>",
        "id": 533175167,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1754512294
    },
    {
        "content": "<p>Yeah good call out <span class=\"user-mention\" data-user-id=\"639239\">@JRI98</span> i hadn't went all the way through with this change, just wanted to see if we feel comfortable with this approach for solving this general problem for at least the medium term</p>",
        "id": 533180517,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1754514889
    },
    {
        "content": "<p>The other options, at least in Zig, are much higher effort</p>",
        "id": 533180563,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1754514911
    },
    {
        "content": "<p>And higher in complexity</p>",
        "id": 533180580,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1754514922
    },
    {
        "content": "<p>Agree. And if we can get the fuzzer to a passing state like already happens with the tokenizer, we could maybe execute shorter runs for PRs. I don't know how feasible this would be though</p>",
        "id": 533183346,
        "sender_full_name": "JRI98",
        "timestamp": 1754516419
    },
    {
        "content": "<p>Probably less effort to run the fuzzer for a few mins than to build our rust compiler in nix <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 533187424,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1754519361
    },
    {
        "content": "<p>With this PR on my M1 Pro mac book i got three crashes in 5 minutes</p>",
        "id": 533187515,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1754519435
    },
    {
        "content": "<p>We had the rust fuzzer running in CI for a little while there, so I think that's something we would like to do again.</p>",
        "id": 533187516,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1754519435
    },
    {
        "content": "<p>We'd need to get fuzz clean first <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 533187555,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1754519464
    },
    {
        "content": "<p>haven't had time to look at the crashes yet though</p>",
        "id": 533187569,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1754519475
    },
    {
        "content": "<p>i think until the work in my dead PR is done, the fuzzer will have issues</p>",
        "id": 533187596,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1754519497
    },
    {
        "content": "<p>The parser has some cracks around differentiating blocks/record exprs/record patterns</p>",
        "id": 533187644,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1754519536
    },
    {
        "content": "<p>And for some reason parses a module with a number after the header successfully</p>",
        "id": 533187689,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1754519575
    },
    {
        "content": "<p>i just don't have the time to go super deep right now</p>",
        "id": 533187724,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1754519587
    },
    {
        "content": "<p>I wonder if <span class=\"user-mention\" data-user-id=\"639239\">@JRI98</span> would be interested in helping with that PR? It's definitely the direction we want to go right? It needs someone familiar with the Parser to execute the refactor.</p>",
        "id": 533187773,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1754519603
    },
    {
        "content": "<p>Just trying to start the conversation about solving specifically the stack overflow on the above PR</p>",
        "id": 533187814,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1754519622
    },
    {
        "content": "<p>I'd be happy to talk someone through the high level design</p>",
        "id": 533187849,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1754519641
    },
    {
        "content": "<p>With the \"Untyped nodes\" solution</p>",
        "id": 533187882,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1754519660
    },
    {
        "content": "<p>Currently I don't really have the bandwidth for big refactors. But when <a href=\"https://github.com/roc-lang/roc/issues/8166\">#8166</a> is merged, I could look at the fuzzer crashes that come after it</p>",
        "id": 533188442,
        "sender_full_name": "JRI98",
        "timestamp": 1754520000
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20parser/near/533187689\">said</a>:</p>\n<blockquote>\n<p>And for some reason parses a module with a number after the header successfully</p>\n</blockquote>\n<p>Like this?</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>module []\n\n0\n</code></pre></div>",
        "id": 533189642,
        "sender_full_name": "JRI98",
        "timestamp": 1754520857
    },
    {
        "content": "<p>If it is that, <a href=\"https://github.com/roc-lang/roc/issues/8167\">#8167</a> should fix it. The parser was accepting expressions as top level statements</p>",
        "id": 533190930,
        "sender_full_name": "JRI98",
        "timestamp": 1754521806
    },
    {
        "content": "<p>I think the plan was to never have the fuzzer in ci. Or at least to never have it block ci.</p>",
        "id": 533193906,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1754524201
    },
    {
        "content": "<p>It is the kind of failure that we simply want to report but never block on.</p>",
        "id": 533193929,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1754524218
    },
    {
        "content": "<p>There was a good talk about this a while back by I think one of the tiger beetle folks. It's actually what inspired the design of our current fuzzing setup</p>",
        "id": 533194018,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1754524302
    },
    {
        "content": "<p>This one I think: <a href=\"https://www.hytradboi.com/2025/c222d11a-6f4d-4211-a243-f5b7fafc8d79-rocket-science-of-simulation-testing\">https://www.hytradboi.com/2025/c222d11a-6f4d-4211-a243-f5b7fafc8d79-rocket-science-of-simulation-testing</a></p>",
        "id": 533194085,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1754524372
    },
    {
        "content": "<p>should i assume that with no comments on my PR I should be good to go ahead and move forward with the nesting counter strategy for patterns and type annotations as well?</p>",
        "id": 533202866,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1754530589
    },
    {
        "content": "<p>i think with that and removing expressions being valid at top-level (which was not intended), We should be as clean as we can be fuzz wise until Untyped Nodes refactor lands</p>",
        "id": 533202937,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1754530642
    },
    {
        "content": "<p>After the previous changes, the fuzzer found an example that triggers memory leaks, caused by the parser now returning the recursion error and not cleaning up in this case.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>zig build repro-parse -- -b bW9kdWxlIFtdCgpmID0gfHwgewogICAgY3Jhc2s1MkxmckAJCS4wMzdvODYtDQkJbTA4bW9kdWxlIFtNeVJldWx0LkVyfGssIGlzX29rXQoKTXllIVJlc3VsdChvaywgZXJyKSA6PSBbT2sob3JyKV0KCm9rIDogb2sgLT4gTXlSZXN1bHQob2ssIF8pCkMoYSwgYiwpIDogKGEsIGIsKQpEKGEsIGIsKSA6IEMoYSwgYiwpCkUgOiB7IGEgOiBTdHIsIGIgOiBTdHIsIH0KRiA6IFtBLCBCLF0KCmcgOiBlIC0+IGUgd2hlcmUg7/////////8pLkEsIG1vYm1sZShlKS5CLAoKIEIsXQoKZyA6IGUgLT4gZSB3aGVyZSDv/////////zEyOiB4LCBoMTM6IHsgaDEzISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhIQaQISEKCk15UmVzdWx0KG9rLCBlcnIpIDo9IFtPayghISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISgoJioiKickISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISFST0xPISEhISEhRAAhISEhISEhISEhISEhISEJISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhb2R1bGUg//9jp7O24A1bZm9vXQpmZmZmZmaaZmZmZmZmZmZmZmZmZmZmZmZmb0BAQEBvZIAAAABAIUBAQEBAOQBAQEBAyBRAQKJSAAAABEBoIGxAQHdbQEBAQDxAQEBAQECiUgAAAARAaCBsQEB3W0BAQEA8QEBvAEBAQEDIFEBAolH/82igbEBAd1tAQEBAPEBAQEBvZCEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISFoIHJlc3VsdGR7X3wgCiDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OwKTXlS -v</p>\n</div></div>\n<p>PR <a href=\"https://github.com/roc-lang/roc/issues/8170\">#8170</a> fixes it but someone please double check that it is fine.</p>",
        "id": 533271733,
        "sender_full_name": "JRI98",
        "timestamp": 1754565436
    },
    {
        "content": "<p>Here is the followup PR that adds the counter check to type annos, patterns, and statements: <a href=\"https://github.com/roc-lang/roc/pull/8171\">https://github.com/roc-lang/roc/pull/8171</a></p>",
        "id": 533274723,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1754566569
    },
    {
        "content": "<p>I closed <a href=\"https://github.com/roc-lang/roc/pull/7897\">#7897</a> since it'll be easier just to play the same work on a new branch given the refactor of putting parse into a new top-level directory inside of src</p>",
        "id": 533276312,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1754567194
    },
    {
        "content": "<p><span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span><br>\n<a href=\"/user_uploads/22008/BkS-r-tAFWCfLlnbADurFFO8/Screenshot-2025-08-07-at-15.49.02.png\">Screenshot 2025-08-07 at 15.49.02.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/BkS-r-tAFWCfLlnbADurFFO8/Screenshot-2025-08-07-at-15.49.02.png\" title=\"Screenshot 2025-08-07 at 15.49.02.png\"><img data-original-content-type=\"image/png\" data-original-dimensions=\"2400x290\" src=\"/user_uploads/thumbnail/22008/BkS-r-tAFWCfLlnbADurFFO8/Screenshot-2025-08-07-at-15.49.02.png/840x560.webp\"></a></div>",
        "id": 533309260,
        "sender_full_name": "JRI98",
        "timestamp": 1754578161
    },
    {
        "content": "<p>I found one crash in a local run but it is an easy fix related to unstable formatting. But looking good, finally green <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 533309348,
        "sender_full_name": "JRI98",
        "timestamp": 1754578196
    },
    {
        "content": "<p>No failures on 15 million runs?  I'll take it!</p>",
        "id": 533310419,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1754578540
    },
    {
        "content": "<p>After this PR that should be it <a href=\"https://github.com/roc-lang/roc/issues/8172\">#8172</a></p>",
        "id": 533311098,
        "sender_full_name": "JRI98",
        "timestamp": 1754578749
    },
    {
        "content": "<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> huge milestone!</p>",
        "id": 533319003,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1754581452
    },
    {
        "content": "<p>Would it be useful to run fuzzing on spare hardware? I’ve got some 9950Xs and Macs that I’d happily fuzz Roc 24/7 on if it’d be helpful</p>",
        "id": 533359647,
        "sender_full_name": "Niclas Ahden",
        "timestamp": 1754598747
    },
    {
        "content": "<p>I don't think it is particularly needed, but wouldn't hurt. GitHub lets us kick off runners pretty much 24/7 if we want. Given we find so many failures currently, I set the cadence and totally run time pretty short. I can amp it up to run for a lot longer or more frequently.</p>",
        "id": 533369923,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1754604691
    },
    {
        "content": "<p>Also, I don't recall for sure, but I think fuzzing may not really work right on Mac currently or that maybe it works but only we debug builds....don't recall exactly. It is an issue when dealing with afl++ and zig coverage instrumentation.</p>",
        "id": 533370017,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1754604758
    },
    {
        "content": "<p>I also have my i9 Mac Mini (2018) that has linux on it that I could do the same</p>",
        "id": 533382542,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1754614929
    },
    {
        "content": "<p>It seems to run fine on my Mac</p>",
        "id": 533382612,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1754615013
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"w\">        </span><span class=\"c1\">// Work around instrumentation bugs on mac without giving up perf on linux.</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">optimize</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">.</span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">tag</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">macos</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">Debug</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">ReleaseSafe</span><span class=\"p\">,</span>\n</code></pre></div>",
        "id": 533387574,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1754620113
    },
    {
        "content": "<p>Actually, may not matter. I think zig-afl-kit consumes it as llvm bitcode. So it should be able to optimize it.</p>",
        "id": 533387659,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1754620200
    },
    {
        "content": "<p>Not sure if it misses any zig optimizations, but it shouldn't miss any llvm optimization I think</p>",
        "id": 533387846,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1754620366
    },
    {
        "content": "<p>Ran the fuzzer overnight on my M1 Pro Macbook, no crashes after 9 hours (29M Execs)!</p>\n<p><a href=\"/user_uploads/22008/osbQ25b6evZaKI2bREgB28-q/Screenshot-2025-08-08-at-5.31.29-AM.png\">Screenshot 2025-08-08 at 5.31.29 AM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/osbQ25b6evZaKI2bREgB28-q/Screenshot-2025-08-08-at-5.31.29-AM.png\" title=\"Screenshot 2025-08-08 at 5.31.29 AM.png\"><img data-original-content-type=\"image/png\" data-original-dimensions=\"1260x1090\" src=\"/user_uploads/thumbnail/22008/osbQ25b6evZaKI2bREgB28-q/Screenshot-2025-08-08-at-5.31.29-AM.png/840x560.webp\"></a></div>",
        "id": 533438367,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1754649135
    },
    {
        "content": "<p>Roc's fuzzer found one but it is related to unstable formatting and those are simple to fix <a href=\"https://github.com/roc-lang/roc/issues/8174\">#8174</a></p>",
        "id": 533439971,
        "sender_full_name": "JRI98",
        "timestamp": 1754649859
    },
    {
        "content": "<p>You found a new one on main?</p>",
        "id": 533443508,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1754651418
    },
    {
        "content": "<p>This is using the fuzzer based on main</p>",
        "id": 533443525,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1754651433
    },
    {
        "content": "<p>Just a small number of hangs that are basically all some around a string of 10,000+ <code>{</code>s or other brace right after each other (and unclosed)</p>",
        "id": 533443667,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1754651499
    },
    {
        "content": "<p>It must have been random luck</p>",
        "id": 533444961,
        "sender_full_name": "JRI98",
        "timestamp": 1754652059
    },
    {
        "content": "<p>btw this is super random but I know we talked back in...January? about wanting a column width constraint on the formatter so that we could solve the problem of docs on the website overflowing dynamic width and creating horizontal scrollbars</p>\n<p>I learned about <code>@container</code> in CSS which apparently makes it possible to do this in pure CSS, so that appears to be unnecessary anymore! <span aria-label=\"smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 533445254,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1754652192
    },
    {
        "content": "<p>TIL that Rust already does the \"don't distinguish between patterns, types, and exprs in parsing; treat them all the same in the AST and then categorize them in the subsequent pass\" thing - and for the same reasons!</p>\n<blockquote>\n<p>Rather than trying to keep the categories separately in the syntax, use the same surface syntax to express all three, and categorize later, during semantic analysis. </p>\n</blockquote>\n<p><a href=\"https://matklad.github.io/2025/08/09/zigs-lovely-syntax.html\">https://matklad.github.io/2025/08/09/zigs-lovely-syntax.html</a></p>",
        "id": 533676210,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1754859534
    },
    {
        "content": "<p>It's really not hard for Rust or Zig. they have keywords for everything and no ambiguity with parsing blocks vs struct literals vs struct patterns vs type annos</p>",
        "id": 533681912,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1754866808
    },
    {
        "content": "<p>if in Roc, decls and type decls had keyword introduction, and annos were inline it wouldn't be needed. But then it really wouldn't be Roc anymore, it'd virtually be gleam syntactically.</p>",
        "id": 533682057,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1754866948
    },
    {
        "content": "<p>Actually keywords for bindings and (anonymous) records having a sigil is all that would be required.  Annos could stay the way they are since type annos are only on a single named binding and type decls are required to start with an UpperIdent.</p>",
        "id": 533682200,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1754867133
    },
    {
        "content": "<p>(also you could have no sigil for records if blocks used do..end syntax which i won't rehash)</p>",
        "id": 533682289,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1754867251
    },
    {
        "content": "<p>I mainly just found it interesting that we're not moving towards a novel AST design; there's already a mainstream language doing it <span aria-label=\"smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 533682571,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1754867622
    },
    {
        "content": "<p>And here i thought we were innovating <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 533684067,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1754869499
    }
]