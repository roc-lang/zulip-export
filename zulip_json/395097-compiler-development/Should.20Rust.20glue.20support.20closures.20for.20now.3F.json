[
    {
        "content": "<p>My rewrite of RustGlue.roc is nearing feature parity with old Rust glue (only missing NullableUnwrapped tag unions and closures). I heard closures exposed to the platform are soon to become type-erased closures, which would simplify its glue code a lot (I'm not even sure the glue platform supplies enough information to correctly generate glue code for them at the moment). Would it be better to leave closures unimplemented for now until those changes hit?</p>",
        "id": 492533923,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1736351861
    },
    {
        "content": "<blockquote>\n<p>My rewrite of RustGlue.roc is nearing feature parity with old Rust glue</p>\n</blockquote>\n<p>Awesome :)</p>",
        "id": 492536230,
        "sender_full_name": "Anton",
        "timestamp": 1736352547
    },
    {
        "content": "<blockquote>\n<p>I heard closures exposed to the platform are soon to become type-erased closures</p>\n</blockquote>\n<p>Can you link to that?</p>",
        "id": 492536264,
        "sender_full_name": "Anton",
        "timestamp": 1736352560
    },
    {
        "content": "<p>I remember <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> mentioning it a while back in dms, I'll see if I can find anything</p>",
        "id": 492536890,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1736352769
    },
    {
        "content": "<p>Hm, I'm only finding talk of replacing lambda sets with erased closures entirely (before ayaz cracked lambda sets and that plan was reverted). Perhaps a misunderstanding on my part then</p>",
        "id": 492537739,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1736353069
    },
    {
        "content": "<p>This idea from <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> may alter things though: <a href=\"#narrow/channel/316715-contributing/topic/projects/near/491614327\">https://roc.zulipchat.com/#narrow/channel/316715-contributing/topic/projects/near/491614327</a></p>",
        "id": 492538375,
        "sender_full_name": "Anton",
        "timestamp": 1736353288
    },
    {
        "content": "<p>It does sound like it yeah!</p>",
        "id": 492539189,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1736353541
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> maybe you could weigh in on this? <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 492539305,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1736353570
    },
    {
        "content": "<p>See <a href=\"https://github.com/roc-lang/roc/issues/6985\">https://github.com/roc-lang/roc/issues/6985</a></p>\n<p>We needed type erasure for <code>Task.map2</code>... which I assume may no longer be require with purity inference??</p>\n<p><span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> do we still need type erasure? It's also the only way to pass functions over the host boundary I thought.</p>",
        "id": 492542194,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736354547
    },
    {
        "content": "<p>I wonder why that would be the case?  Wouldn't we really only need that for application-defined types?</p>",
        "id": 492542540,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736354656
    },
    {
        "content": "<p>Like generics would need to be type-erased sure</p>",
        "id": 492542635,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736354691
    },
    {
        "content": "<p>But I wouldn't think a <code>Str =&gt; {}</code> would need that</p>",
        "id": 492542688,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736354711
    },
    {
        "content": "<p>I don't think the glue revamp really affects this. At least not now. Long term, we will need to expose roc c abi functions to increase the refcounts of closure captures. I'm not sure if we need to expose anything to call the closure. Oh actually I think we plan to box the closures. That may actually simplify things and mean their refcounting works the same as box</p>",
        "id": 492546619,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736355441
    },
    {
        "content": "<p>I think type erasure would only be needed if we want many different shaped functions to fit in the same shaped hole.</p>\n<p>I think this would be equally needed/equally not needed in the purity inference world.</p>\n<p>We still want a map2 shaped solution to enable parallel execution (though I guess we could do a more raw thread style solution). Also, given results are not lazy like task, it definitely has to be shaped differently. For that to work, either we need type erasure, we need to box all the inputs and outputs, or we need to make the parallel executions all be <code>{} =&gt; {}</code> (only inputs are captures and outputs have to be through channels or some other mechanism).</p>",
        "id": 492548208,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736355835
    },
    {
        "content": "<p>I guess that PI, kinda leans us towards a go style solution. Threads and channels with minimal extra orchestration.</p>",
        "id": 492548598,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736355943
    },
    {
        "content": "<p>That would not need type erasure.</p>",
        "id": 492548719,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736355965
    },
    {
        "content": "<p>Still needs the ability to call closures.</p>",
        "id": 492548772,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736355985
    },
    {
        "content": "<p>And refcount them</p>",
        "id": 492548814,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736355998
    },
    {
        "content": "<p>I still kinda own type erasure, but I'm trying to prioritize the re-canning work for now. Once we have the new compiler pipeline at least mostly ready, I can coordinate with Ayaz to see how accurate the plan in his <a href=\"https://github.com/roc-lang/rfcs/blob/main/0012-type-erasure.md\">type erasure proposal</a> is for implementation, and then jump on that if we need it</p>",
        "id": 492568178,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736363424
    },
    {
        "content": "<p>It sounds like the current approach to exposing Roc closures to the platform will stay the same, at least for the foreseeable future? If so, I'll see if I can make any headway improving rust glue's support for them.</p>",
        "id": 492569637,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1736364046
    },
    {
        "content": "<p>Yeah</p>",
        "id": 492585759,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736371014
    },
    {
        "content": "<p>Can someone help me update the issue please? <a href=\"https://github.com/roc-lang/roc/issues/6985\">https://github.com/roc-lang/roc/issues/6985</a></p>",
        "id": 492594174,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736375463
    },
    {
        "content": "<p>If we no longer need it, then it'd be good to add the context and close. Or maybe state that it needs further design review/discussion and we can close and make a new one in future.</p>",
        "id": 492594264,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736375523
    },
    {
        "content": "<p>Yeah, I think it needs further discussion. Really depends how roc decides to support concurrency in the future. There are paths that don't need it, but it is unclear what path will be recommended.</p>",
        "id": 492595859,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736376394
    }
]