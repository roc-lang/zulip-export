[
    {
        "content": "<p>In our CIR we currently have this... which I think isn't quite right.</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"c1\">/// A declaration of a new type - whether an alias or a new nominal nominal type</span>\n<span class=\"c1\">///</span>\n<span class=\"c1\">/// Only valid at the top level of a module</span>\n<span class=\"n\">s_type_decl</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">header</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">CIR</span><span class=\"p\">.</span><span class=\"n\">TypeHeader</span><span class=\"p\">.</span><span class=\"n\">Idx</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">anno</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">CIR</span><span class=\"p\">.</span><span class=\"n\">TypeAnno</span><span class=\"p\">.</span><span class=\"n\">Idx</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">where</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">CIR</span><span class=\"p\">.</span><span class=\"n\">WhereClause</span><span class=\"p\">.</span><span class=\"n\">Span</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">region</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Region</span><span class=\"p\">,</span>\n<span class=\"p\">},</span>\n</code></pre></div>\n<p>In my understanding both <code>Foo : ...</code> and <code>Foo := ...</code> are statements. They are both type declarations. One is an Alias Type delcaration, and the other is a Nominal Type declaration. </p>\n<p>I could imagine a future where people default to refer to these as;</p>\n<ol>\n<li>Nominal Type Declaration becomes \"that's a Type declaration\" </li>\n<li>Alias Type Declaration becomes \"that's a Alias declaration\" </li>\n</ol>\n<p>I'm wondering, how should we represent the nominal types in our CIR? Currently I think the <code>s_type_decl</code> is being used for Aliases because that is all we have implemented so far. Should we make another separate variant to distinguish between these two, or maybe a flag <code>is_alias</code> or similar in this variant?</p>",
        "id": 527090606,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751589395
    },
    {
        "content": "<p>that's how we do it in the Rust version of the compiler but I'm not thrilled with how it has worked out</p>",
        "id": 527091173,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751590023
    },
    {
        "content": "<p>I'd rather we just had <code>.s_alias_decl</code> and <code>.s_nominal_decl</code> or something like that</p>",
        "id": 527091180,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751590036
    },
    {
        "content": "<p>This is somewhat related, but can nominal tag union be open/extensible? In particular, are these allowed?</p>\n<div class=\"codehilite\"><pre><span></span><code>Color := [Red, Green, Blue]*\nColor other := [Red, Green, Blue]other\n\nOtherColor : [Purple]\nColor := [Red, Green, Blue]OtherColor\n</code></pre></div>",
        "id": 527308792,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1751755795
    },
    {
        "content": "<p>I didn't think that was permitted</p>",
        "id": 527310583,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751758763
    },
    {
        "content": "<p>Maybe it would be useful though. I really dont know</p>",
        "id": 527310608,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751758799
    },
    {
        "content": "<p>I think this would be allowed:</p>\n<div class=\"codehilite\"><pre><span></span><code>Color other := [Red, Green, Blue]other\n\nOtherColor : [Purple]\n\nMixedColor : Color(OtherColor)\n</code></pre></div>\n<p>At least I see no reason it wouldn't be allowed off the top of my head....but I may be missing something</p>",
        "id": 527310772,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751759068
    },
    {
        "content": "<p>I'm not arguing  for or against!</p>\n<p>When checking types of nominal tag unions, if the above examples are <em>not allowed</em>, then we can really easily check if a tag (eg <code>Blue</code> or <code>Yellow</code>) is a member of the closed tag set and raise a diagnostic in Can if not. But if the above <em>is allowed</em>, then we have to check the tag membership in type-checking (so we can fully expand any extensible types)</p>",
        "id": 527310776,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1751759069
    },
    {
        "content": "<p>This on the other hand:</p>\n<div class=\"codehilite\"><pre><span></span><code>Color := [Red, Green, Blue]*\n</code></pre></div>\n<p>Would just be equivalent to:</p>\n<div class=\"codehilite\"><pre><span></span><code>Color := [Red, Green, Blue]\n</code></pre></div>",
        "id": 527310805,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751759111
    },
    {
        "content": "<p>no, nominal tag unions can't be extended</p>",
        "id": 527314005,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751764053
    },
    {
        "content": "<p>this is actually very important!</p>",
        "id": 527314007,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751764057
    },
    {
        "content": "<p>if we allow them to be extensible, then they don't solve <a href=\"https://github.com/roc-lang/rfcs/pull/1\">https://github.com/roc-lang/rfcs/pull/1</a> and we have that problem again</p>",
        "id": 527314027,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751764078
    },
    {
        "content": "<p>Ooo okay, good to know.</p>",
        "id": 527314151,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1751764279
    },
    {
        "content": "<p>we could allow some special syntax sugar for them, that's just sort of like \"let me copy and paste that for you\" e.g.</p>\n<div class=\"codehilite\"><pre><span></span><code>Color := [Red, Green, Blue, ..OtherColor]\n\nOtherColor : [Purple]\n</code></pre></div>",
        "id": 527314168,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751764304
    },
    {
        "content": "<p>That will make validating nominal tags easier then!</p>",
        "id": 527314171,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1751764306
    },
    {
        "content": "<p>but <code>..a</code> would need to be disallowed</p>",
        "id": 527314175,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751764313
    },
    {
        "content": "<p>extension variables in nominal tag unions must be compile errors</p>",
        "id": 527314192,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751764329
    },
    {
        "content": "<p>Cool. Can nominal records be extensible?</p>",
        "id": 527314296,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1751764496
    },
    {
        "content": "<p>also no</p>",
        "id": 527314346,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751764580
    },
    {
        "content": "<p>How is </p>\n<div class=\"codehilite\"><pre><span></span><code>OtherColor : [Purple]\nColor := [Red, Green, Blue, ..OtherColor]\n</code></pre></div>\n<p>Different from:</p>\n<div class=\"codehilite\"><pre><span></span><code>OtherColor : [Purple]\nAbstractColor(a) := [Red, Green, Blue, ..a]\n\nColor : AbstractColor(OtherColor)\n</code></pre></div>",
        "id": 527315816,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751767158
    },
    {
        "content": "<p>the problem is allowing the type variable:</p>\n<div class=\"codehilite\"><pre><span></span><code>AbstractColor(a) := [Red, Green, Blue, ..a]\n</code></pre></div>\n<p>now you can write functions where the type's layout at runtime varies based on the arguments you pass to that function</p>",
        "id": 527315898,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751767247
    },
    {
        "content": "<p>Are we permitting nominal records? I thought the intent was just Tags for now</p>",
        "id": 527320308,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751774199
    },
    {
        "content": "<p>Or maybe that was only specifically recursive types must be tags.</p>",
        "id": 527320639,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751774563
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/395097-compiler-development/topic/nominal.20type.20declaration.20statements.20-.20how.20to.20represent.3F/near/527315898\">said</a>:</p>\n<blockquote>\n<p>the problem is allowing the type variable:</p>\n<div class=\"codehilite\"><pre><span></span><code>AbstractColor(a) := [Red, Green, Blue, ..a]\n</code></pre></div>\n<p>now you can write functions where the type's layout at runtime varies based on the arguments you pass to that function</p>\n</blockquote>\n<p>Ah yeah, I guess it essential makes the extension types not nominal which kinda defeats the whole point of making the type nominal in the first place.</p>",
        "id": 527322540,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751777490
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/channel/395097-compiler-development/topic/nominal.20type.20declaration.20statements.20-.20how.20to.20represent.3F/near/527320308\">said</a>:</p>\n<blockquote>\n<p>Are we permitting nominal records? I thought the intent was just Tags for now</p>\n</blockquote>\n<p>I'd love to know the answer to this... is this valid 0.1 syntax? </p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kt\">ImaginaryNumber</span><span class=\"w\"> </span><span class=\"kt\">:=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">real</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">F64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">imag</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">F64</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 527609164,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751954305
    },
    {
        "content": "<p>Last this was discussed, I think the decision was to start simple and require a wrapper tag:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">ImaginaryNumber</span><span class=\"w\"> </span><span class=\"nf\">:=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Wrapper</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">real</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">F64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">imag</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">F64</span><span class=\"w\"> </span><span class=\"p\">}]</span>\n</code></pre></div>\n<p>Not sure if any opinions have changed though.</p>",
        "id": 527610020,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751954740
    },
    {
        "content": "<p>Definitely an <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> question</p>",
        "id": 527610054,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751954758
    },
    {
        "content": "<p>Would be bice to learn why nominal types feature cant be just a \"uniqueness\" wrapper around any type. Like if there was a special tag <code>Unique</code> so <code>Id : Unique(U64)</code></p>",
        "id": 527610658,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1751955090
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"584248\">@Kiryl Dziamura</span>  <a class=\"message-link\" href=\"/#narrow/channel/304641-ideas/topic/custom.20types/near/481023599\">#ideas &gt; custom types @ 💬</a>  It was originally the Custom Types proposal... and we subsequently renamed them to \"nominal types\" because that was what everyone called them anyway</p>",
        "id": 527611139,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751955379
    },
    {
        "content": "<p>So I think the only reason is just we are starting simple and only implementing Tag unions to start with...</p>",
        "id": 527611533,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751955618
    },
    {
        "content": "<p>There's a huge amount of discussion to recall though, and as I learn more and implement things I keep revisiting these discussions and learning more about them each time.</p>",
        "id": 527611628,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751955682
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/channel/395097-compiler-development/topic/nominal.20type.20declaration.20statements.20-.20how.20to.20represent.3F/near/527609164\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/channel/395097-compiler-development/topic/nominal.20type.20declaration.20statements.20-.20how.20to.20represent.3F/near/527320308\">said</a>:</p>\n<blockquote>\n<p>Are we permitting nominal records? I thought the intent was just Tags for now</p>\n</blockquote>\n<p>I'd love to know the answer to this... is this valid 0.1 syntax? </p>\n<p><div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kt\">ImaginaryNumber</span><span class=\"w\"> </span><span class=\"kt\">:=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">real</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">F64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">imag</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">F64</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>we had definitely planned it at some point. I was talking with <span class=\"user-mention\" data-user-id=\"341568\">@Jared Ramirez</span> about implementation challenges but I don't remember where we ended up. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 527668529,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751975680
    },
    {
        "content": "<p>Yeah, since I wrote that comment, I (re)discovered the Custom-Types proposal and linked that just above.</p>",
        "id": 527668763,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751975750
    },
    {
        "content": "<p>Richard and I discussed how nominal wrappers for all types (beyond just tag unions) and that convo ended with something similar to how opaque types currently work:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kr\">module</span><span class=\"w\"> </span><span class=\"nn\">X</span><span class=\"w\"> </span><span class=\"n\">exposes</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"kt\">Color</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">//</span><span class=\"w\"> </span><span class=\"n\">transparent</span>\n<span class=\"w\">  </span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ImaginaryNumber</span><span class=\"w\"> </span><span class=\"o\">//</span><span class=\"w\"> </span><span class=\"n\">opaque</span>\n<span class=\"w\">  </span><span class=\"p\">]</span>\n\n<span class=\"kt\">Color</span><span class=\"w\"> </span><span class=\"kt\">:=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Red</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Green</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Blue</span><span class=\"p\">]</span>\n<span class=\"nf\">green</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">Color</span><span class=\"o\">.</span><span class=\"kt\">Green</span>\n\n<span class=\"kt\">ImaginaryNumber</span><span class=\"w\"> </span><span class=\"kt\">:=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">real</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">F64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">imag</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">F64</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"nf\">number</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">ImaginaryNumber</span><span class=\"o\">.</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">real</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">imag</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"kt\">Point</span><span class=\"w\"> </span><span class=\"kt\">:=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"kt\">F64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">F64</span><span class=\"w\"> </span><span class=\"p\">)</span>\n<span class=\"nf\">point</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">Point</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">2.0</span><span class=\"p\">)</span>\n\n<span class=\"kt\">UserId</span><span class=\"w\"> </span><span class=\"kt\">:=</span><span class=\"w\"> </span><span class=\"kt\">Dec</span>\n<span class=\"nf\">userId</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">UserId</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"mi\">384618</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>But then, to pull a value out of the nominal type, you would do:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">getColor</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Color</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Red</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Green</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Blue</span><span class=\"p\">]</span>\n<span class=\"nf\">getColor</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"kt\">Color</span><span class=\"p\">(</span><span class=\"n\">inner</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">inner</span>\n</code></pre></div>",
        "id": 527694766,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1751982463
    },
    {
        "content": "<p>Related to nominal records though, what we can't do is access record fields without unwrapping the type:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kt\">ImaginaryNumber</span><span class=\"w\"> </span><span class=\"kt\">:=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">real</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">F64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">imag</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">F64</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"nf\">number</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">ImaginaryNumber</span><span class=\"o\">.</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">real</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">imag</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"nf\">x</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"o\">.</span><span class=\"n\">real</span><span class=\"w\"> </span><span class=\"o\">//</span><span class=\"w\"> </span><span class=\"kt\">Can't</span><span class=\"w\"> </span><span class=\"kr\">do</span>\n\n<span class=\"nf\">x</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">match</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\">  </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"kt\">ImaginaryNumber</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"ow\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">real</span><span class=\"w\"> </span><span class=\"o\">//</span><span class=\"w\"> </span><span class=\"kt\">Can</span><span class=\"w\"> </span><span class=\"kr\">do</span>\n</code></pre></div>\n<p>Without introducing something akin to type classes</p>",
        "id": 527695502,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1751982652
    },
    {
        "content": "<p>ahh right, that was it</p>",
        "id": 527698175,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751983311
    },
    {
        "content": "<p>accessing fields was the problem</p>",
        "id": 527698203,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751983318
    },
    {
        "content": "<p>Can we just use nominal type static dispatch to make it work....or at least make it mostly work?</p>",
        "id": 527715633,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751987516
    },
    {
        "content": "<p><code>number.real()</code> calls static dispatch to unwrap the type and get the <code>real</code> field.</p>",
        "id": 527715871,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751987579
    },
    {
        "content": "<p>Clearly not quite as nice</p>",
        "id": 527715951,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751987599
    },
    {
        "content": "<p>Yeah, you could do</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">real</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"kt\">ImaginaryNumber</span><span class=\"p\">(</span><span class=\"n\">inner</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">inner</span><span class=\"o\">.</span><span class=\"n\">real</span>\n\n<span class=\"o\">//</span><span class=\"w\"> </span><span class=\"kr\">then</span><span class=\"w\"> </span><span class=\"n\">later</span>\n\n<span class=\"nf\">num</span><span class=\"o\">.</span><span class=\"n\">real</span><span class=\"nb\">()</span>\n</code></pre></div>",
        "id": 527718856,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1751988411
    },
    {
        "content": "<p>or even:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">inner</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"kt\">ImaginaryNumber</span><span class=\"p\">(</span><span class=\"n\">inner</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">inner</span>\n\n<span class=\"o\">//</span><span class=\"w\"> </span><span class=\"kr\">then</span><span class=\"w\"> </span><span class=\"n\">later</span>\n\n<span class=\"nf\">num</span><span class=\"o\">.</span><span class=\"n\">inner</span><span class=\"nb\">()</span><span class=\"o\">.</span><span class=\"n\">real</span>\n</code></pre></div>",
        "id": 527719012,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1751988454
    },
    {
        "content": "<p>Depends on how much you want to expose of the type's internals i guess</p>",
        "id": 527719098,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1751988474
    },
    {
        "content": "<p>I guess we just need an <code>@property</code> decorator... <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 527719655,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751988641
    },
    {
        "content": "<p>We need a pitchfork emoji</p>",
        "id": 527723752,
        "sender_full_name": "Anton",
        "timestamp": 1751989874
    },
    {
        "content": "<p>How should this work with imported transparent nominal types?</p>\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"c1\">// styles/Color.roc</span>\n<span class=\"nx\">module</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">    </span><span class=\"nx\">Color</span><span class=\"p\">(</span><span class=\"nx\">RGB</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">RGBA</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">...)</span>\n<span class=\"p\">]</span>\n\n<span class=\"nx\">Color</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">    </span><span class=\"nx\">RGB</span><span class=\"p\">(</span><span class=\"nx\">U8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">U8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">U8</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"nx\">RGBA</span><span class=\"p\">(</span><span class=\"nx\">U8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">U8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">U8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Dec</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"nx\">Named</span><span class=\"p\">(</span><span class=\"nx\">Str</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"nx\">Hex</span><span class=\"p\">(</span><span class=\"nx\">Str</span><span class=\"p\">),</span>\n<span class=\"p\">]</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"c1\">// MyModule.roc</span>\n\n<span class=\"k\">import</span><span class=\"w\"> </span><span class=\"nx\">styles</span><span class=\"p\">.</span><span class=\"nx\">Color</span><span class=\"w\"> </span><span class=\"kr\">as</span><span class=\"w\"> </span><span class=\"nx\">CC</span>\n\n<span class=\"nx\">blue1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">CC</span><span class=\"p\">.</span><span class=\"nx\">RGB</span>\n<span class=\"nx\">blue1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">CC</span><span class=\"p\">.</span><span class=\"nx\">RGB</span><span class=\"p\">(</span><span class=\"mf\">0</span><span class=\"p\">,</span><span class=\"mf\">0</span><span class=\"p\">,</span><span class=\"mf\">255</span><span class=\"p\">)</span>\n\n<span class=\"c1\">// or</span>\n\n<span class=\"nx\">blue2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">CC</span><span class=\"p\">.</span><span class=\"nx\">RGB</span>\n<span class=\"nx\">blue2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">CC</span><span class=\"p\">.</span><span class=\"nx\">Color</span><span class=\"p\">.</span><span class=\"nx\">RGB</span><span class=\"p\">(</span><span class=\"mf\">0</span><span class=\"p\">,</span><span class=\"mf\">0</span><span class=\"p\">,</span><span class=\"mf\">255</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Here, can you access the <code>RGB</code> constructor directly with <code>CC.RGB</code>? Or do you have to do <code>CC.Color.RGB</code>?</p>",
        "id": 527974467,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1752099548
    },
    {
        "content": "<p><code>CC.Color.RGB</code></p>",
        "id": 527974528,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752099598
    },
    {
        "content": "<p>but if you did <code>import styles.Color as CC exposing [Color]</code> then <code>Color.RGB</code> should work</p>",
        "id": 527974583,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752099636
    },
    {
        "content": "<p>so it's about the type being in scope vs not</p>",
        "id": 527974596,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752099642
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/channel/395097-compiler-development/topic/nominal.20type.20declaration.20statements.20-.20how.20to.20represent.3F/near/527723752\">said</a>:</p>\n<blockquote>\n<p>We need a pitchfork emoji</p>\n</blockquote>\n<p>I got you a few options:</p>\n<p><img alt=\":pitchfork:\" class=\"emoji\" src=\"https://avatars.zulip.com/22008/emoji/images/44ce787c.png\" title=\"pitchfork\"><br>\n<img alt=\":what:\" class=\"emoji\" src=\"https://avatars.zulip.com/22008/emoji/images/e38f0b11.gif\" title=\"what\"> <br>\n<img alt=\":dead:\" class=\"emoji\" src=\"https://avatars.zulip.com/22008/emoji/images/9e50e0d1.png\" title=\"dead\"> </p>\n<p>And we still have:<br>\n<img alt=\":thinkies:\" class=\"emoji\" src=\"https://avatars.zulip.com/22008/emoji/images/9055c9eb.png\" title=\"thinkies\"> <br>\n<img alt=\":facepalm:\" class=\"emoji\" src=\"https://avatars.zulip.com/22008/emoji/images/e3a10b56.png\" title=\"facepalm\"> <br>\n<img alt=\":rip-intense:\" class=\"emoji\" src=\"https://avatars.zulip.com/22008/emoji/images/06f26bfa.png\" title=\"rip-intense\"></p>",
        "id": 527993728,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752116765
    }
]