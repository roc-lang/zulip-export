[
    {
        "content": "<p>I think we should add a CI test that builds the compiler for a WASM target -- to ensure we maintain this as an option for embedding roc in future. </p>\n<p>Currently we can't build for WASM due to using realpath, but it's only in a few places -- in coordinate I think. </p>\n<p>I've somewhat isolated those using a (very average) abstraction, but it would be good to sort this out now because it might get painful later to change. </p>\n<p>Is this something anyone would like to look at?</p>",
        "id": 506605792,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1742343650
    },
    {
        "content": "<p>Wasm in this case should be <code>wasm32-freestanding-none</code>?</p>",
        "id": 506611688,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742346857
    },
    {
        "content": "<p>Or are we targetting <code>wasm32-wasi-musl</code> and something like <a href=\"https://wasmer.io/posts/introducing-the-wasmer-js-sdk\">wasmer js sdk</a></p>",
        "id": 506612031,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742347020
    },
    {
        "content": "<p>I'm not sure. For embedding the roc compiler in WASM -- we would need a way to provide things like files etc.</p>\n<p>I guess we could compile to WASI... </p>\n<p>My concern is that we add more features over time and it becomes harder to embed the compiler in a WASM context.</p>",
        "id": 506612113,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1742347066
    },
    {
        "content": "<p>I'm not sure we need to fully abstract things like files now, but we at least want to isolate those somehow.</p>",
        "id": 506612209,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1742347104
    },
    {
        "content": "<p>If the goal is the web repl, we don't need files at all.</p>",
        "id": 506612212,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742347106
    },
    {
        "content": "<p>Yeah, I can imagine things like REPL or interpreter running in WASM</p>",
        "id": 506612246,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1742347128
    },
    {
        "content": "<p>Though I guess it might be nice to import from github via the web repl</p>",
        "id": 506612249,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742347130
    },
    {
        "content": "<p>Or even the formatter, or eventual LSP maybe.</p>",
        "id": 506612288,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1742347149
    },
    {
        "content": "<p>Anyway, I think we have to work via <code>wasm32-freestanding-none</code> if we want to run in the browser with no dependencies. In that case, roc won't be an executable at all. It will be a library and js will have to fill in filesystem hooks.</p>",
        "id": 506612351,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742347197
    },
    {
        "content": "<p>Yeah, not sure how we do that. Or would that just be libroc?</p>",
        "id": 506612437,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1742347222
    },
    {
        "content": "<p>Yeah, we probably want to make a <code>root.zig</code> and a library form of roc.</p>",
        "id": 506612519,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742347275
    },
    {
        "content": "<p>Looks likes all issues today are around filesystems and time measurement</p>",
        "id": 506612578,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742347318
    },
    {
        "content": "<p>Oh, though timing is for the cli, so it won't be in the library at all</p>",
        "id": 506612710,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742347390
    },
    {
        "content": "<p>So yeah, I think it is just either making the library level not interact with the filesystem (assume all data is already loaded), or make it abstract away the filesystem (likely nicer and more flexible).</p>",
        "id": 506612761,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742347429
    },
    {
        "content": "<p>So shouldn't be too bad</p>",
        "id": 506612776,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742347441
    },
    {
        "content": "<p>Yeah, it was the filesystem and also specifically our use of \"paths\" that I'm concerned about</p>",
        "id": 506612895,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1742347490
    },
    {
        "content": "<p>I guess porting the formatter to the filesystem api, making a dummy filesystem for wasm (can be totally unimplemented), and adding wasm to ci, would at least stop any new problematic code from being created.</p>",
        "id": 506613489,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742347776
    },
    {
        "content": "<p>Yeah something like that was what I was thinking.</p>",
        "id": 506613620,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1742347823
    },
    {
        "content": "<p>Though I'm not sure what the right api to cut for wasm is. Like can the current api reasonably be implemented in a browser?</p>",
        "id": 506613736,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742347881
    },
    {
        "content": "<p>The API for the (internal) compiler functionality?</p>",
        "id": 506613929,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1742347965
    },
    {
        "content": "<p>Like load and typecheck this roc module? or format this file?</p>",
        "id": 506614004,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1742348021
    },
    {
        "content": "<p>The file api. Cause we expect that it will be implemented in the browser by js</p>",
        "id": 506616189,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742349259
    },
    {
        "content": "<p>We might want to seriously consider getting <code>roc check</code> and <code>roc format</code> working in the browser now. That likely will help with a lot of pain that would come later.</p>",
        "id": 527991199,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752114178
    },
    {
        "content": "<p>I was literally just thinking about posting this also</p>",
        "id": 527992358,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752115472
    },
    {
        "content": "<p>I was thinking about moving our Filesystem abstraction into a toplevel file called <code>io.zig</code> and isolating all IO must go through that.</p>",
        "id": 527992393,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752115509
    },
    {
        "content": "<p>And to prove to myself it works, I was going to make a WASM build of the compiler</p>",
        "id": 527992411,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752115533
    },
    {
        "content": "<p>I was thinking WASI for ease of use, but WASM should be doable also</p>",
        "id": 527992431,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752115548
    },
    {
        "content": "<p>yeah WASM seems best</p>",
        "id": 527992486,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752115621
    },
    {
        "content": "<p>e.g. for <code>roc repl</code> and the playground</p>",
        "id": 527992490,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752115625
    },
    {
        "content": "<p>WASI feels like a leaky abstraction we shouldn't need to depend on</p>",
        "id": 527992508,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752115638
    },
    {
        "content": "<p>It's easy to build a WASI binary though and share a <code>.wasm</code> file that anyone could run using a WASI runner like wasmer etc</p>",
        "id": 527992539,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752115682
    },
    {
        "content": "<p>I was just thinking for validating the implementation, not adding a new compile target or setting up anything in CI</p>",
        "id": 527992559,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752115706
    },
    {
        "content": "<p>Though... I wonder how hard it would be to parse S-expressions in JS land ... <img alt=\":think-smart:\" class=\"emoji\" src=\"https://avatars.zulip.com/22008/emoji/images/c22f7861.png\" title=\"think-smart\"></p>",
        "id": 527992622,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752115779
    },
    {
        "content": "<blockquote>\n<p>not adding a new compile target or setting up anything in CI</p>\n</blockquote>\n<p>We definitely should setup a build once it works so it doesn't regress.</p>",
        "id": 527992642,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752115795
    },
    {
        "content": "<p>And yeah, wasmer as a starter target so you don't have to mock all the api's sounds reasonable, but doesn't wasi just give you standard io primitives, so it won't guarantee all io goes through io.zig?</p>",
        "id": 527992670,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752115835
    },
    {
        "content": "<p>It doesn't guarantee that everything foes through io.zig, but it would ensure everything is working. To prevent regressions I was thinking a simple lint or script that looks for anything <code>std.io</code>, <code>std.fs</code>, <code>std.posix</code> etc that isn't in <code>src/io.zig</code> and fails CI</p>",
        "id": 527992771,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752115953
    },
    {
        "content": "<p>I don't think it is just std io. But that is the core of it.</p>",
        "id": 527992843,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752116036
    },
    {
        "content": "<p>Yeah, I think we're on the same page.</p>",
        "id": 527992910,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752116093
    },
    {
        "content": "<p>also threading and I believe atomics and mutex and such.</p>",
        "id": 527992912,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752116096
    },
    {
        "content": "<p>Also I've wondered if there's good debug tooling out there in WASM land that might help us understand / isolate memory issues and the like.</p>",
        "id": 527992978,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752116152
    },
    {
        "content": "<p>Anyway, yeah, cut it however you like. I still think. any new supported target should be added here 100%:<br>\n<a href=\"https://github.com/roc-lang/roc/blob/c3f320e58be57d21e12ccc82246ff738cb647f91/.github/workflows/ci_zig.yml#L139-L148\">https://github.com/roc-lang/roc/blob/c3f320e58be57d21e12ccc82246ff738cb647f91/.github/workflows/ci_zig.yml#L139-L148</a></p>",
        "id": 527993015,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752116181
    },
    {
        "content": "<blockquote>\n<p>debug tooling in wasm land</p>\n</blockquote>\n<p>In our company we work on wasm obfuscator in rust. Recently we came across a super subtle bug in memory obfuscation in prod builds. Turned out we missed an operation in memory encryption on wasm pages boundaries. It was a needle in haystack. A week of work of three developers. The only thing helped us is reproduction in debug build (we had to randomize obfuscation seed in a loop till bug is reproduced) so we kept only memory obfuscation. We had a pretty readable wat and just stepped trough the bug. I'm sure dwarf could also help but we found the root cause sooner.<br>\nLong story short we didn't find anything meaningful that could help us with memory analysis of wasm. Only browser devtools. But we're tied to browser environment with gluecode in js so we didn't have many options to explore.</p>",
        "id": 528048587,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1752143203
    }
]