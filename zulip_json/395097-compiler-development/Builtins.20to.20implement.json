[
    {
        "content": "<p>Just looking at the pinned task <a href=\"https://github.com/roc-lang/roc/issues/664\">https://github.com/roc-lang/roc/issues/664</a></p>\n<p>I've added a couple of related PRs. Just have a couple of questions.</p>\n<ol>\n<li>Do we still want all the <code>parseI16</code>, <code>parseDec</code> ... etc functions or might this be covered somewhere else? </li>\n<li>How would we implement something like <code>parseF32</code>, do we just pick a standard like IEEE 754, or perhaps defer to zig's <a href=\"https://ziglang.org/documentation/master/std/#std.fmt.parse_float.parseFloat\">std.fmt.parseFloat</a> implementation?</li>\n<li>Do we still want all of the Result.map&lt;N&gt; combinations?</li>\n<li>For <code>Str.dropPrefix</code> and <code>Str.dropSuffix</code> these should be implemented using a zig builtin also right?</li>\n</ol>\n<p>Otherwise I think will be of the builtins completed -- so we're close.</p>",
        "id": 462251593,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1723606294
    },
    {
        "content": "<p>I think with the map2-based record builders landed, there's no more need for map3 and mapN beyond map2 for Result or Task</p>",
        "id": 462251827,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1723606480
    },
    {
        "content": "<p>For 2 and 3, I'd defer to Zig, yes. I trust Andrew + team to make good decisions here on behavior and performance.</p>",
        "id": 462252431,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1723607016
    },
    {
        "content": "<p>For 1, I think these are useful, and I'm not sure how to implement them in a third-party package without unnecessary allocations, so having them as builtins seems like the move.</p>",
        "id": 462252520,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1723607074
    },
    {
        "content": "<p>So yes, the map2's are still good, the mapN's are not needed, and everything else can be done with zig (ideally with zig builtins).</p>",
        "id": 462252794,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1723607317
    },
    {
        "content": "<p>I think the prefix and suffix stuff could be implemented in roc, but zig is also fine. All it is is a sublist + equality followed by a potential second sublist. Just need to be careful around unicode to avoid costs of checking the entire string, but that should be doable with some sort of unchecked Str.fromUtf8</p>",
        "id": 462256949,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723609401
    },
    {
        "content": "<p>Yeah, I think we still need parse functions. Probably would have an API that returns a value plus the rest of the string after parsing.</p>",
        "id": 462257104,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723609454
    },
    {
        "content": "<p>Those I would defer to zig for simplicity</p>",
        "id": 462257112,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723609468
    },
    {
        "content": "<p>Oh wait, those parse functions aren't parse functions at all.....</p>",
        "id": 462257280,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723609557
    },
    {
        "content": "<p>I don't think we want this:<br>\n<code>parseI16 : List U8, Endi, Nat -&gt; Result I16 [ NotEnoughBytes ]*</code></p>",
        "id": 462257446,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723609593
    },
    {
        "content": "<p>I think we want something like<br>\n<code>Str.parseI16 : Str -&gt; Result { val: I16, rest: Str } [WhatEverErrorsParsingCanProduce (invalid format? Not a number? Out of bound?)]</code></p>\n<p>Maybe also want it on List U8 which assumes parsing from ASCII.</p>",
        "id": 462258041,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723609736
    }
]