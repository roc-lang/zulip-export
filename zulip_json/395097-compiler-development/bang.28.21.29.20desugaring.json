[
    {
        "content": "<p>Just want to double check, this should work eventually, right?</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kr\">main </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"kt\">Arg</span><span class=\"nf\">.</span><span class=\"nv\">list</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">dropFirst</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">mapTry</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toU8</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">fromResult</span><span class=\"err\">!</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">sum</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">total</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"Sum of numbers: $(Num.toStr total)\"</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span>\n</code></pre></div>\n<p>Or do we not plan to allow <code>!</code> in pipes? I would assume it should be allowed.</p>",
        "id": 454729244,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1722232338
    },
    {
        "content": "<p>It's discussed in <a href=\"https://docs.google.com/document/d/1mTEZlOKqtMonmVsIGEC1A9ufs1TQHhVgZ52Vn-13GeU/edit?usp=sharing\">the Proposal: Chaining Syntax</a> in section Pipelines.</p>",
        "id": 454733597,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722234065
    },
    {
        "content": "<p>I would expect what you have written to desguar to effectively the following (simplified)</p>\n<div class=\"codehilite\"><pre><span></span><code>main =\n    Arg.list! {}\n    |&gt; List.dropFirst 1\n    |&gt; List.mapTry Str.toU8Checked\n    |&gt; Task.fromResult!\n    |&gt; List.sum\n    |&gt; \\total -&gt; &quot;Sum of numbers: $(Num.toStr total)&quot;\n    |&gt; Stdout.line!\n\nmain =\n    Task.await (Arg.list {}) \\answer1 -&gt;\n        Task.await\n            (\n                answer1\n                |&gt; List.dropFirst 1\n                |&gt; List.mapTry Str.toU8Checked\n                |&gt; Task.fromResult\n            )\n            \\answer2 -&gt;\n                answer2\n                    |&gt; List.sum\n                    |&gt; \\total -&gt; &quot;Sum of numbers: $(Num.toStr total)&quot;\n                    |&gt; Stdout.line\n</code></pre></div>",
        "id": 454733992,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722234242
    },
    {
        "content": "<p>Makes sense. Not sure what is missing today, but I guess it is a reasonable bug case.</p>",
        "id": 454734483,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1722234456
    },
    {
        "content": "<p>relatively minimal</p>",
        "id": 454734503,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1722234461
    },
    {
        "content": "<p>It should work today</p>",
        "id": 454734665,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722234528
    },
    {
        "content": "<p>I'll make an issue while I have it open</p>",
        "id": 454734674,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722234535
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/basic-cli/issues/234\">https://github.com/roc-lang/basic-cli/issues/234</a></p>",
        "id": 454734791,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722234595
    },
    {
        "content": "<p>I’ll take a look today</p>",
        "id": 454734881,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1722234619
    },
    {
        "content": "<p>Also, it can be cut to be a bit more minimal:</p>\n<div class=\"codehilite\"><pre><span></span><code>main =\n    Arg.list! {}\n    |&gt; List.len\n    |&gt; Num.toStr\n    |&gt; Stdout.line!\n</code></pre></div>",
        "id": 454734998,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1722234670
    },
    {
        "content": "<p>Ah, have you tried to change the indentation?</p>",
        "id": 454735066,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1722234714
    },
    {
        "content": "<p>Add one space to each pipe, does it help?</p>",
        "id": 454735167,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1722234745
    },
    {
        "content": "<p>yeah, this works:</p>\n<div class=\"codehilite\"><pre><span></span><code>main =\n    Arg.list! {}\n        |&gt; List.len\n        |&gt; Num.toStr\n        |&gt; Stdout.line!\n</code></pre></div>",
        "id": 454735220,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1722234771
    },
    {
        "content": "<p>So <code>!</code> requires extra tabbing currently...interesting.</p>",
        "id": 454735278,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1722234797
    },
    {
        "content": "<p>With the more nested version, it is still broken:</p>\n<div class=\"codehilite\"><pre><span></span><code>main =\n    Arg.list! {}\n        |&gt; List.dropFirst 1\n        |&gt; List.mapTry Str.toU8\n        |&gt; Task.fromResult!\n            |&gt; List.sum\n            |&gt; \\total -&gt; &quot;Sum of numbers: $(Num.toStr total)&quot;\n            |&gt; Stdout.line!\n</code></pre></div>",
        "id": 454735431,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1722234859
    },
    {
        "content": "<p>Yeah, it’s a known bug in parser. I assume it will go away with <span class=\"user-mention\" data-user-id=\"453336\">@Joshua Warner</span> refactoring, but will give it another look today anyway</p>",
        "id": 454735486,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1722234874
    },
    {
        "content": "<p>I just tested with the block changes -- it's still there</p>",
        "id": 454735865,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722235001
    },
    {
        "content": "<p>I'm not so sure it's a bug. I think it's a deliberate design choice/tradeoff we made. </p>\n<p>Might be worth coming up with ideas to improve the experience here. </p>\n<p>But could be tricky if it doesnt even parse I guess.</p>",
        "id": 454736181,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722235142
    },
    {
        "content": "<p>But the suffix shouldn’t break parsing. If the pipeline operator is expected to be on the same indent level - it’s expected to work in each case</p>",
        "id": 454736567,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1722235301
    },
    {
        "content": "<p>I think it's a bug - it should work without indentation!</p>",
        "id": 454736998,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1722235478
    },
    {
        "content": "<p>and we talked in some other thread about how the formatter shouldn't indent it in this scenario</p>",
        "id": 454737088,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1722235521
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/395097-compiler-development/topic/bang.28!.29.20desugaring/near/454735865\">said</a>:</p>\n<blockquote>\n<p>I just tested with the block changes -- it's still there</p>\n</blockquote>\n<p>Please ignore this comment. </p>\n<p>The error message we see is from Can, so it's definitely possible this is fixed, or the parsing parts in Josh's work.</p>\n<p>I'm running off my stale memory of this issue. Need to dig a bit more before I comment next time.</p>",
        "id": 454744967,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722238121
    },
    {
        "content": "<p>Just tested this on the current main (after my block parsing PR landed), and the syntax tree at least looks correct to me:</p>\n<div class=\"codehilite\"><pre><span></span><code>main =\n    Arg.list! {}\n    |&gt; List.dropFirst 1\n    |&gt; List.mapTry Str.toU8\n    |&gt; Task.fromResult!\n    |&gt; List.sum\n    |&gt; \\total -&gt; &quot;Sum of numbers: $(Num.toStr total)&quot;\n    |&gt; Stdout.line!\n</code></pre></div>\n<p>(which is to say, it parses fine and gives a sequence of exprs joined by pizza operators, all at the same level... does that sound right?)</p>\n<p>That's not true prior to my PR (just checked that as well) - it used to choke on the first pizza operator. So there was definitely an improvement here.</p>",
        "id": 454981268,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1722299590
    },
    {
        "content": "<p>I _think_ that's what you were saying Luke; just wanted to make it explicit / make sure we're on the same page...</p>",
        "id": 454981306,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1722299612
    },
    {
        "content": "<p>Thank you, yes that's what I was trying to say.</p>",
        "id": 455015772,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722312186
    }
]