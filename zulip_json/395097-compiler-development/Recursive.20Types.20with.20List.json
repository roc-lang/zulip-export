[
    {
        "content": "<p>What would it take to make each of these two types work?</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">Node</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">Branch</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"nx\">Node</span><span class=\"p\">)]</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">Node</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"nx\">Node</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Fundamentally, I think both of these should be valid. Also, both of them are semi-common issues that users have hit in various cases.<br>\nWould these me something that I could just dive into? How complex is the code? Any general thought on path forward/how to implement?</p>",
        "id": 401011988,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1699472658
    },
    {
        "content": "<p>Do we know what the specific issue is?</p>",
        "id": 401013270,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1699473268
    },
    {
        "content": "<p>I'm actually kind of surprised at least the tag case doesn't work</p>",
        "id": 401013293,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1699473280
    },
    {
        "content": "<p>Oh wait.... Is this just never allowed in roc because it would mean that an end user could create a reference cycle which would break roc automatic memory management?</p>",
        "id": 401013294,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1699473280
    },
    {
        "content": "<p>How could they create a reference cycle? I think since the language is pure and eager it's impossible to create a cycle</p>",
        "id": 401013387,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1699473321
    },
    {
        "content": "<p>Oh yeah, would end up creating a copy in the case I was thinking it would cycle...nvm</p>",
        "id": 401013708,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1699473471
    },
    {
        "content": "<p>For <code>Node : (Str, List Node)</code>, we say that it needs to be a tag (which in my opinion is wrong, List should count as a break and make that valid)</p>",
        "id": 401014115,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1699473633
    },
    {
        "content": "<p><code>Node : [Branch Str (List Node)]</code> -&gt; Actually, this works. I think I had messed something else up when testing before.</p>",
        "id": 401014199,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1699473662
    },
    {
        "content": "<p>Ok. So then I guess the target feature would be allow recursive types if either</p>\n<ol>\n<li>They are through tags</li>\n<li>They are through List (given Dict is based on List, it should also be covered)</li>\n</ol>",
        "id": 401014865,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1699473855
    },
    {
        "content": "<p>And 1 already works.</p>",
        "id": 401014898,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1699473872
    },
    {
        "content": "<p>I wonder if this is mostly just a case of making the type checker more lax.</p>",
        "id": 401014928,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1699473887
    },
    {
        "content": "<p>yeah I also thought this already worked</p>",
        "id": 401015030,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1699473933
    },
    {
        "content": "<p>but apparently not!</p>",
        "id": 401015033,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1699473935
    },
    {
        "content": "<p>yeah, the fix for the tuple case should be pretty straightforward</p>",
        "id": 401022944,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1699477491
    },
    {
        "content": "<p>I guess this probably doesn't work either, right? </p>\n<div class=\"codehilite\"><pre><span></span><code>W : List W\n</code></pre></div>",
        "id": 401023038,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1699477536
    },
    {
        "content": "<p>but that should pass as well (poor man's linked list)</p>",
        "id": 401023060,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1699477550
    },
    {
        "content": "<p>(or, poor man's natural number)</p>",
        "id": 401023082,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1699477562
    },
    {
        "content": "<p>Cool. I'll look into it. Hopefully it is just a matter of allowing more things in some sort of recursive check or something</p>",
        "id": 401027803,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1699479680
    },
    {
        "content": "<p>You'll probably want to look where <a href=\"https://github.com/roc-lang/roc/blob/5fed22405b347707b59fc3ac7608e1e7bb2068e4/crates/compiler/can/src/def.rs#L3282-L3290\">https://github.com/roc-lang/roc/blob/5fed22405b347707b59fc3ac7608e1e7bb2068e4/crates/compiler/can/src/def.rs#L3282-L3290</a><br>\n is being called in that file, and update the branches that lead to the call site</p>",
        "id": 401028316,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1699479940
    },
    {
        "content": "<p>Although, this may end up being trickier than it seems</p>",
        "id": 401028336,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1699479951
    },
    {
        "content": "<p>Because changing the restriction is easy, but then the type-checker also needs to be updated to support recursion in a position that's not a recursive tag union</p>",
        "id": 401028418,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1699479982
    },
    {
        "content": "<p>Yep</p>",
        "id": 401028511,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1699480040
    }
]