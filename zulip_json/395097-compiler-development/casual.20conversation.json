[
    {
        "content": "<p><span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span> </p>\n<div class=\"codehilite\"><pre><span></span><code>error: implementation of `FnOnce` is not general enough\n    --&gt; crates/compiler/gen_llvm/src/llvm/build.rs:5735:5\n     |\n...\n     |\n     = note: closure with signature `fn(&amp;&#39;2 [BasicMetadataValueEnum&lt;&#39;_&gt;]) -&gt; CallSiteValue\n     = note: ...but it actually implements `FnOnce&lt;(&amp;&#39;2 [BasicMetadataValueEnum&lt;&#39;_&gt;],)&gt;`,\n</code></pre></div>",
        "id": 373264697,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1688746325
    },
    {
        "content": "<p>can't you wrap it in another closure to fix this?</p>",
        "id": 373265211,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1688746422
    },
    {
        "content": "<p>also where did the return type go on the bottom line?</p>",
        "id": 373265331,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1688746443
    },
    {
        "content": "<p>i don't know.. it's the classic thing where you have a parameter like</p>\n<div class=\"codehilite\"><pre><span></span><code>build_foo : FnOnce(Something&lt;&#39;ctx&gt;) -&gt; Other&lt;&#39;ctx&gt;,\n</code></pre></div>\n<p>and feed it</p>\n<div class=\"codehilite\"><pre><span></span><code>|something| env.builder.build_whatever(something)\n</code></pre></div>\n<p>and the inference breaks down over higher-rank lifetimes so you just need to explicitly type it as</p>\n<div class=\"codehilite\"><pre><span></span><code>|something: Something&lt;&#39;ctx&gt;| env.builder.build_whatever(something)\n</code></pre></div>",
        "id": 373266112,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1688746595
    },
    {
        "content": "<p>the fix is simple but it's unfortunate the error message is poor</p>",
        "id": 373266164,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1688746614
    },
    {
        "content": "<p>\"Ã¦graphs: Acyclic E-graphs for Efficient Optimization in a Production Compiler\" <a href=\"https://vimeo.com/843540328\">https://vimeo.com/843540328</a></p>",
        "id": 373740611,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1688920086
    },
    {
        "content": "<p>fyi we just upgraded main to rust 1.67. upgrading should be seamless, but you may see some longer build times</p>",
        "id": 374062927,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689016715
    },
    {
        "content": "<p>also a <code>cargo clean</code> may save ~100gb on your system</p>",
        "id": 374062963,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689016725
    },
    {
        "content": "<p>function erasure is ready for review: <a href=\"https://github.com/roc-lang/roc/pull/5576\">https://github.com/roc-lang/roc/pull/5576</a></p>",
        "id": 374747950,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1689196951
    },
    {
        "content": "<p>Random question, is the intent to use this instead of lambda sets? I.e. this helps remove a complex area of the compiler that was responsible for bugs? Just not entirely understanding why here. I don't need to know, but it looks cool and I'm  interested.</p>",
        "id": 374758092,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1689201210
    },
    {
        "content": "<p>it's an alternative to compiling functions to lambda sets but it won't get rid of them. We need type-erasure (for values and functions) in order to support Map2, so it will at least be used for that. But we could also eventually use it for dev builds, since type-erased functions are faster to compiler, or for <code>roc check</code>, since lambda sets are not important for type checking.</p>",
        "id": 374763758,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1689204148
    },
    {
        "content": "<p>also they're more amenable to on-disk caching!</p>",
        "id": 374763845,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1689204225
    },
    {
        "content": "<p>(for dev builds)</p>",
        "id": 374763856,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1689204231
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_mir_transform/src/large_enums.rs\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_mir_transform/src/large_enums.rs</a></p>\n<p>would be cool to consider this. we do this already in the llvm backend but it could be generalzied</p>",
        "id": 375622784,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1689452908
    },
    {
        "content": "<p><a href=\"https://github.com/wolfpld/tracy/\">https://github.com/wolfpld/tracy/</a> h/t <span class=\"user-mention\" data-user-id=\"406911\">@Andrew Kelley</span></p>",
        "id": 376437853,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1689704178
    },
    {
        "content": "<p>also the goated <a href=\"https://github.com/janestreet/magic-trace\">https://github.com/janestreet/magic-trace</a></p>",
        "id": 376438462,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1689704339
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> &amp; Josh (unsure of your last name, sorry), since we briefly talked about how much logic was in <a href=\"http://file.rs\">file.rs</a> I thought you might get a kick out of how many lines this file is in zig: <a href=\"https://github.com/ziglang/zig/blob/master/src/Sema.zig\">https://github.com/ziglang/zig/blob/master/src/Sema.zig</a></p>",
        "id": 376472675,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1689713954
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"453336\">@Joshua Warner</span></p>",
        "id": 376472906,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1689714029
    },
    {
        "content": "<p>that's awesome <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 376472931,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1689714038
    },
    {
        "content": "<p>when people complain about this, I usually say something to the effect of, \"they're good lines, Brent\"</p>",
        "id": 376473392,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1689714233
    },
    {
        "content": "<p>(reference to <a href=\"https://knowyourmeme.com/memes/theyre-good-dogs-brent\">https://knowyourmeme.com/memes/theyre-good-dogs-brent</a>)</p>",
        "id": 376473492,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1689714258
    },
    {
        "content": "<p>That GitHub link makes the mobile app crash so I am gonna guess it's quite large <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 376476941,
        "sender_full_name": "Pearce Keesling",
        "timestamp": 1689715563
    },
    {
        "content": "<p>you should see <a href=\"https://github.com/microsoft/TypeScript/blob/main/src/compiler/checker.ts\">https://github.com/microsoft/TypeScript/blob/main/src/compiler/checker.ts</a></p>",
        "id": 376480508,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1689717060
    },
    {
        "content": "<p><span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span> <br>\nMakes me long for FORTH a little. For example, the infamous IOCCC submission <a href=\"https://www.ioccc.org/1992/buzzard.2.c\">buzzard.2</a>'s ~60 lines of C source code is <a href=\"https://www.ioccc.org/1992/buzzard.2.design\">essentially all you need</a> to bootstrap a language runtime.</p>",
        "id": 376482649,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1689718002
    },
    {
        "content": "<p>it was inevitable of course: I have submitted a patch to llvm <a href=\"https://reviews.llvm.org/D155944\">https://reviews.llvm.org/D155944</a></p>",
        "id": 377279362,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689942025
    },
    {
        "content": "<p>no idea what the status of the C api is actually, and what the chances are of that being accepted, but long term we will absolutely need guaranteed tail calls</p>",
        "id": 377279570,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689942061
    },
    {
        "content": "<p><a href=\"https://twitter.com/lemire/status/1683560952027815936\">https://twitter.com/lemire/status/1683560952027815936</a></p>",
        "id": 378255974,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1690228468
    },
    {
        "content": "<p>Wow.... That took way way way longer than it should have to happen</p>",
        "id": 378263014,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1690230749
    },
    {
        "content": "<p>More power to the compiler, probably at the cost of more hardware register contention. But compilers are almost certainly good enough and code complex enough that this will be a gain.</p>",
        "id": 378263320,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1690230896
    },
    {
        "content": "<p>that they're all caller saved is super sweet. hopefully will make compilers go faster too, less time for the register allocator to run</p>",
        "id": 378278071,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1690233446
    },
    {
        "content": "<p>some cool ideas here about data type representation <a href=\"https://inria.hal.science/hal-04165615/document\">https://inria.hal.science/hal-04165615/document</a> needs some iteration I think to make it really usable, but it's a good start</p>",
        "id": 379315578,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1690497153
    },
    {
        "content": "<p>in recent rust versions, you can use <code>OnceLock</code> instead of <code>lazy_static!</code></p>\n<div class=\"codehilite\"><pre><span></span><code>    // globally cache the temporary directory\n    static TEMP_DIR: OnceLock&lt;tempfile::TempDir&gt; = OnceLock::new();\n    let temp_dir = TEMP_DIR.get_or_init(|| tempfile::tempdir().unwrap());\n</code></pre></div>\n<p>it's not always the most ergonomic approach (and <code>LazyLock</code>, the stdlib name for this thing, is an unstable feature, so may make it in at some point) but in many cases this works quite well and does not require any dependencies</p>",
        "id": 382189020,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1691253884
    },
    {
        "content": "<p>(from what I can read, the cost runtime cost is the same)</p>",
        "id": 382189077,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1691253910
    },
    {
        "content": "<p>someone is picking up the rust custom allocators work <a href=\"https://shift.click/blog/allocator-trait-talk/\">https://shift.click/blog/allocator-trait-talk/</a></p>\n<p>not holding my breath for quick progress there, but it's good that someone is working on it</p>",
        "id": 382666732,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1691420985
    },
    {
        "content": "<p>does anyone know if there is a technical reason for allocating from high to low addresses? It appears quite common, but I'd like to know if that is just a custom or that there are good technical reasons for it</p>",
        "id": 383303272,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1691590884
    },
    {
        "content": "<p>do you mean on the stack or the heap? on the heap maybe just because of memory regions?</p>",
        "id": 383308840,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1691591813
    },
    {
        "content": "<p>I assume it's because the stack allocates the other way</p>",
        "id": 383309663,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1691591936
    },
    {
        "content": "<p>I mean heap-like things. E.g. an arena allocator</p>",
        "id": 383309673,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1691591938
    },
    {
        "content": "<p>like the stack and the heap can't both use the same strategy, unless one of them is set up to start right where the other one ends, but to do that you'd need to know the exact size of the stack</p>",
        "id": 383309931,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1691591977
    },
    {
        "content": "<p>which I think maybe requires a syscall or something, and/or may not always be supported on all OSes?</p>",
        "id": 383310035,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1691591992
    },
    {
        "content": "<p>well yes when you have some other region growing from the other side you need to make a choice</p>",
        "id": 383310071,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1691591997
    },
    {
        "content": "<p>but what if you didn't? is there still a reason to perfer starting at the end and growing down?</p>",
        "id": 383310239,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1691592017
    },
    {
        "content": "<p>None that I can think of.</p>",
        "id": 383319945,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1691593520
    },
    {
        "content": "<p>must just be convenience then</p>",
        "id": 383320622,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1691593631
    },
    {
        "content": "<p>as in, the thing I could copy-paste went high-to-low, so that is just what it does now</p>",
        "id": 383320760,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1691593655
    },
    {
        "content": "<p>looks like making valgrind work on Apple Silicon is...really difficult! <span aria-label=\"astonished\" class=\"emoji emoji-1f632\" role=\"img\" title=\"astonished\">:astonished:</span></p>\n<p><a href=\"https://github.com/LouisBrunner/valgrind-macos/issues/56#issuecomment-1651811069\">https://github.com/LouisBrunner/valgrind-macos/issues/56#issuecomment-1651811069</a></p>",
        "id": 383828555,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1691731421
    },
    {
        "content": "<p>good talk about performance of the Carbon compiler</p>\n<p><a href=\"https://www.youtube.com/watch?v=ZI198eFghJk\">https://www.youtube.com/watch?v=ZI198eFghJk</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"ZI198eFghJk\" href=\"https://www.youtube.com/watch?v=ZI198eFghJk\"><img src=\"https://uploads.zulipusercontent.net/0d9111ca1650d1e5824e03d7e5a6603366c635c5/68747470733a2f2f692e7974696d672e636f6d2f76692f5a49313938654667684a6b2f64656661756c742e6a7067\"></a></div>",
        "id": 385928237,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1692368626
    },
    {
        "content": "<p>modeling the semantics (including checking) as an IR sounds very interesting</p>",
        "id": 386050947,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1692425131
    },
    {
        "content": "<p>really want to read the source</p>",
        "id": 386050967,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1692425147
    },
    {
        "content": "<p>How does Roc's reference counting with cycles? I am wondering, since I am fascinated with ORC, the way Nim did it. Does Roc do it at all at the given moment? Thanks for your answers :)</p>",
        "id": 386205013,
        "sender_full_name": "ShalokShalom",
        "timestamp": 1692524525
    },
    {
        "content": "<p>Roc does not deal with cycles, because cycles are impossible to introduce in an immutable language like Roc, since to create a cycle you must create then mutate a value.</p>",
        "id": 386228596,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1692541789
    },
    {
        "content": "<p>small correction: immutable and strict language. Laziness in haskell can also create cycles</p>",
        "id": 386228690,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1692541850
    },
    {
        "content": "<p>that first operator in Carbon's source code <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span> </p>\n<p><a href=\"/user_uploads/22008/LUvWU8evRqdt2uZ2s1QZaZ5C/Screen-Shot-2023-08-23-at-9.24.24-AM.png\">Screen-Shot-2023-08-23-at-9.24.24-AM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/LUvWU8evRqdt2uZ2s1QZaZ5C/Screen-Shot-2023-08-23-at-9.24.24-AM.png\" title=\"Screen-Shot-2023-08-23-at-9.24.24-AM.png\"><img src=\"/user_uploads/22008/LUvWU8evRqdt2uZ2s1QZaZ5C/Screen-Shot-2023-08-23-at-9.24.24-AM.png\"></a></div>",
        "id": 386868589,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1692797194
    },
    {
        "content": "<p>this is from <a href=\"https://youtu.be/ZI198eFghJk?t=2830\">https://youtu.be/ZI198eFghJk?t=2830</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"ZI198eFghJk\" href=\"https://youtu.be/ZI198eFghJk?t=2830\"><img src=\"https://uploads.zulipusercontent.net/0d9111ca1650d1e5824e03d7e5a6603366c635c5/68747470733a2f2f692e7974696d672e636f6d2f76692f5a49313938654667684a6b2f64656661756c742e6a7067\"></a></div>",
        "id": 386868681,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1692797228
    },
    {
        "content": "<p>That is just normal c++, right?</p>",
        "id": 386881614,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1692800416
    },
    {
        "content": "<p>Shift and assign</p>",
        "id": 386881651,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1692800426
    },
    {
        "content": "<p>oh well that's no fun <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 386881804,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1692800470
    },
    {
        "content": "<p>I think the last time I wrote a whole C++ program was over 20 years ago <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 386881912,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1692800502
    },
    {
        "content": "<p>We realize that we're getting older when we look at our children... and at our old code <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 387066113,
        "sender_full_name": "Pit Capitain",
        "timestamp": 1692881343
    },
    {
        "content": "<p>Yesterday I have updated an Elm file that hasn't been touched for over 7 years!</p>",
        "id": 387136977,
        "sender_full_name": "Zeljko Nesic",
        "timestamp": 1692900120
    },
    {
        "content": "<p>I wish I still had that RPG I wrote in c++ I wrote all those years ago...I'm sure I could spot some undefined behavior in it today <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 387140715,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1692901335
    },
    {
        "content": "<p>very interesting!</p>\n<p><a href=\"https://arxiv.org/pdf/2107.01250.pdf\">https://arxiv.org/pdf/2107.01250.pdf</a></p>",
        "id": 387175007,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1692918955
    },
    {
        "content": "<p>this is a cool tip if we ever want to start testing big-endian targets in CI: <a href=\"https://twitter.com/burntsushi5/status/1695483429997945092\">https://twitter.com/burntsushi5/status/1695483429997945092</a></p>\n<p>(I'm fine with not officially supporting them as targets yet)</p>",
        "id": 387449871,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1693075780
    },
    {
        "content": "<p>I'll just leave this here <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span> </p>\n<div class=\"codehilite\"><pre><span></span><code>PS C:\\Users\\bosyl\\Documents\\GitHub\\roc&gt; .\\target\\release\\roc.exe run ..\\basic-cli\\examples\\hello-world.roc\nð¨ Rebuilding platform...\nwarning: ignoring debug info with an invalid version (0) in app\nHello, World!\n</code></pre></div>",
        "id": 388266173,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1693466987
    },
    {
        "content": "<p>First time I've been able to get that working.</p>",
        "id": 388266978,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1693467314
    },
    {
        "content": "<p>I packaged <code>basic-cli</code> for Windows and uploaded the binary <a href=\"https://github.com/lukewilliamboswell/basic-cli/releases/tag/0.5.0\">in the Github release</a>. Not sure if this is a bad idea to share like this... </p>\n<div class=\"codehilite\"><pre><span></span><code>PS C:\\Users\\bosyl\\Documents\\GitHub\\basic-cli&gt; ..\\roc\\target\\release\\roc.exe run .\\examples\\hello-world.roc\nDownloading https://github.com/lukewilliamboswell/basic-cli/releases/download/0.5.0/Dt_L3PF3VAAxtLzxXZ-g9nBp0Gzo6tbTevSep1SdDeQ.tar.br\n    into C:\\Users\\bosyl\\AppData\\Roaming\\Roc\\packages\n\nwarning: ignoring debug info with an invalid version (0) in app\nHello, World!\n</code></pre></div>",
        "id": 388268147,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1693467833
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>app &quot;hello-world&quot;\n    packages { pf: &quot;https://github.com/lukewilliamboswell/basic-cli/releases/download/0.5.0/Dt_L3PF3VAAxtLzxXZ-g9nBp0Gzo6tbTevSep1SdDeQ.tar.br&quot; }\n    imports [pf.Stdout, pf.Task.{ Task }]\n    provides [main] to pf\n\nmain : Task {} I32\nmain =\n    Stdout.line &quot;Hello, World!&quot;\n</code></pre></div>",
        "id": 388268393,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1693467918
    },
    {
        "content": "<p>There are still a lot of issues here, other examples I've tried will build and run but not print anything... but at least this is a start. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 388270761,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1693468891
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/P2ja6_irJRpyPNg3pr6Jk3fX/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/P2ja6_irJRpyPNg3pr6Jk3fX/image.png\" title=\"image.png\"><img src=\"/user_uploads/22008/P2ja6_irJRpyPNg3pr6Jk3fX/image.png\"></a></div><p>I don't think the exe is code signed, so that can be a hurdle with SmartScreen <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 388321831,
        "sender_full_name": "FÃ¡bio BeirÃ£o",
        "timestamp": 1693487622
    },
    {
        "content": "<p>Ahh Windows <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span><br>\n<a href=\"/user_uploads/22008/IRas7L_66XCPj5PmpbWz9feT/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/IRas7L_66XCPj5PmpbWz9feT/image.png\" title=\"image.png\"><img src=\"/user_uploads/22008/IRas7L_66XCPj5PmpbWz9feT/image.png\"></a></div><p>What I did is I used the Windows Sandbox to get a clean windows version, downloaded the Exe. Went to the properties and clicked Unblock (due to it being downloaded from the internet) and then just double clicked the exe file.</p>",
        "id": 388322284,
        "sender_full_name": "FÃ¡bio BeirÃ£o",
        "timestamp": 1693487750
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/qvWgQnaUKiR68B_HP9h8udEW/image.png\">image.png</a><br>\nRunning it in powershell also yields no output</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/qvWgQnaUKiR68B_HP9h8udEW/image.png\" title=\"image.png\"><img src=\"/user_uploads/22008/qvWgQnaUKiR68B_HP9h8udEW/image.png\"></a></div>",
        "id": 388322524,
        "sender_full_name": "FÃ¡bio BeirÃ£o",
        "timestamp": 1693487821
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> let me know if you need help with testing Windows stuff. I have Windows 10 on one machine and Windows 11 on another.</p>",
        "id": 388322639,
        "sender_full_name": "FÃ¡bio BeirÃ£o",
        "timestamp": 1693487856
    },
    {
        "content": "<p>I'm surprised the cli doesn't even print anything. <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 388406039,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1693516018
    },
    {
        "content": "<p>this is wild - I can't believe that nibble mask works, those numbers look so random! But it totally does - I tried it out.</p>\n<p><a href=\"https://lemire.me/blog/2017/07/10/pruning-spaces-faster-on-arm-processors-with-vector-table-lookups/\">https://lemire.me/blog/2017/07/10/pruning-spaces-faster-on-arm-processors-with-vector-table-lookups/</a></p>",
        "id": 388899693,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1693798594
    },
    {
        "content": "<p>Linux Torvalds on mmap vs buffered reading in Linux: <a href=\"https://lkml.iu.edu/hypermail/linux/kernel/0802.0/1496.html\">https://lkml.iu.edu/hypermail/linux/kernel/0802.0/1496.html</a></p>",
        "id": 388999681,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1693836326
    },
    {
        "content": "<p>I'm confused whether this is specific to the linux kernel, or more general for \"programs running on linux\"</p>",
        "id": 389001741,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1693836918
    },
    {
        "content": "<p>also interesting: <a href=\"https://stackoverflow.com/a/260188\">https://stackoverflow.com/a/260188</a></p>",
        "id": 389029035,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1693847229
    },
    {
        "content": "<p>I watched a few YouTube tutorials on interactive rebasing, and cherry-picking and I have to admit... I wish I had done that sooner! So simple, and would have saved me a lot of time. Learnt a few nice tricks along the way. <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 389153336,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1693908788
    },
    {
        "content": "<p>This is something that when I started using Fork (<a href=\"https://git-fork.com/\">https://git-fork.com/</a>) just became so much clearer to me. Unfortunately doesn't have a linux port, only Windows and Mac</p>",
        "id": 389154050,
        "sender_full_name": "FÃ¡bio BeirÃ£o",
        "timestamp": 1693908932
    },
    {
        "content": "<p>I'm just wondering, should the zig tests pass on MacOS? I get the below errors which  seem strange to me <code>thread 11673296 panic: incorrect alignment</code></p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Aarch64ZigTestError</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>192-168-1-105:bitcode luke$ pwd<br>\n/Users/luke/Documents/GitHub/roc/crates/compiler/builtins/bitcode<br>\n192-168-1-105:bitcode luke$ zig build test<br>\nTest [4/153] dec.test \"fromStr: empty\"... thread 11673296 panic: incorrect alignment<br>\n/Users/luke/Documents/GitHub/roc/crates/compiler/builtins/bitcode/src/libc/musl/memcpy.zig:41:32: 0x104f850b3 in libc.musl.memcpy.fallback_memcpy (test)<br>\n        var s4 = @alignCast(4, s);<br>\n                               ^<br>\n/Users/luke/Documents/GitHub/roc/crates/compiler/builtins/bitcode/src/libc.zig:31:31: 0x104fc4e83 in libc.memcpy (test)<br>\n            return musl.memcpy(dest, src, len);<br>\n                              ^<br>\n/Users/luke/Documents/GitHub/roc/crates/compiler/builtins/bitcode/src/str.zig:56:9: 0x104fb6ed3 in str.RocStr.init (test)<br>\n        @memcpy(result.asU8ptrMut(), bytes_ptr, length);<br>\n        ^<br>\n/Users/luke/Documents/GitHub/roc/crates/compiler/builtins/bitcode/src/dec.zig:755:30: 0x104f8674b in dec.test \"fromStr: empty\" (test)<br>\n    var roc_str = RocStr.init(\"\", 0);<br>\n                             ^<br>\n/nix/store/1jsz44m30pxqzll6s641cxsibzbpvjmx-zig-0.9.1/lib/zig/std/special/test_runner.zig:80:28: 0x104fc6f8f in std.special.main (test)<br>\n        } else test_fn.func();<br>\n                           ^<br>\n/nix/store/1jsz44m30pxqzll6s641cxsibzbpvjmx-zig-0.9.1/lib/zig/std/start.zig:551:22: 0x1050289b3 in std.start.callMain (test)<br>\n            root.main();<br>\n                     ^<br>\n/nix/store/1jsz44m30pxqzll6s641cxsibzbpvjmx-zig-0.9.1/lib/zig/std/start.zig:495:12: 0x104fc8a43 in std.start.callMainWithArgs (test)<br>\n    return @call(.{ .modifier = .always_inline }, callMain, .{});<br>\n           ^<br>\n/nix/store/1jsz44m30pxqzll6s641cxsibzbpvjmx-zig-0.9.1/lib/zig/std/start.zig:460:12: 0x104fc896f in std.start.main (test)<br>\n    return @call(.{ .modifier = .always_inline }, callMainWithArgs, .{ @intCast(usize, c_argc), c_argv, envp });<br>\n           ^<br>\n???:?:?: 0x1a1ebff27 in ??? (???)<br>\n???:?:?: 0xab71ffffffffffff in ??? (???)<br>\nerror: the following test command crashed:<br>\n/Users/luke/Documents/GitHub/roc/crates/compiler/builtins/bitcode/zig-cache/o/00a242709486f6fe0044878fa17186a4/test /nix/store/1jsz44m30pxqzll6s641cxsibzbpvjmx-zig-0.9.1/bin/zig<br>\nThe following command exited with error code 1:<br>\n/nix/store/1jsz44m30pxqzll6s641cxsibzbpvjmx-zig-0.9.1/bin/zig test /Users/luke/Documents/GitHub/roc/crates/compiler/builtins/bitcode/src/main.zig -lc --cache-dir /Users/luke/Documents/GitHub/roc/crates/compiler/builtins/bitcode/zig-cache --global-cache-dir /Users/luke/.cache/zig --name test <br>\nerror: the following build command failed with exit code 1:<br>\n/Users/luke/Documents/GitHub/roc/crates/compiler/builtins/bitcode/zig-cache/o/1d46ff7b08d826ee45715195b67b4b10/build /nix/store/1jsz44m30pxqzll6s641cxsibzbpvjmx-zig-0.9.1/bin/zig /Users/luke/Documents/GitHub/roc/crates/compiler/builtins/bitcode /Users/luke/Documents/GitHub/roc/crates/compiler/builtins/bitcode/zig-cache /Users/luke/.cache/zig test</p>\n</div></div>",
        "id": 389160936,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1693911106
    },
    {
        "content": "<p><a href=\"https://gist.github.com/lukewilliamboswell/e5753ace4acab836def53a28aacd0611\">gist with errors and correct alignment</a></p>",
        "id": 389161142,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1693911177
    },
    {
        "content": "<p>that is weird. strings have a refcount, so the alignment should always be 8?</p>",
        "id": 389162225,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1693911549
    },
    {
        "content": "<p><a href=\"https://dl.acm.org/doi/pdf/10.1145/3243176.3243195\">https://dl.acm.org/doi/pdf/10.1145/3243176.3243195</a> has some wild RC numbers:</p>\n<ul>\n<li>Swift apparently uses 30 bits to store their reference counts</li>\n<li>The paper says \"[our implementation] reduces the number of bits per counter from 30 bits to 14 bits,<br>\nwhich is more than enough for RC. Many Java programs need only<br>\n7 bits, and we observe similar behavior in our Swift programs\"</li>\n</ul>",
        "id": 389395020,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1693998423
    },
    {
        "content": "<p>How many do we use?</p>",
        "id": 389396507,
        "sender_full_name": "Anton",
        "timestamp": 1693999006
    },
    {
        "content": "<p>Same number of bits as a pointer. So 64 or 32.</p>",
        "id": 389405089,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1694001963
    },
    {
        "content": "<p>We increase the alignment on many heap data structures because of the refcount. Like Str bytes for example.</p>",
        "id": 389405508,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1694002098
    },
    {
        "content": "<p>The github web vscode editor (press '.' key on a repo's page) works well now. In the past I always had issues with commit signing but that seems to have been fixed :) Handy for when you quickly want to make small changes to multiple files.</p>",
        "id": 389489104,
        "sender_full_name": "Anton",
        "timestamp": 1694022401
    },
    {
        "content": "<p>Woah....never knew that was a feature</p>",
        "id": 389489524,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1694022586
    },
    {
        "content": "<p><a href=\"https://buttondown.email/hillelwayne/archive/github-has-too-many-hidden-features/\">https://buttondown.email/hillelwayne/archive/github-has-too-many-hidden-features/</a></p>",
        "id": 389490630,
        "sender_full_name": "Zeljko Nesic",
        "timestamp": 1694022985
    },
    {
        "content": "<p><code>Dec</code> is now the default type for fractional values. This may cause breakage in some cases. Also I suspect there are still a bunch of missing functions for Dec that are used in practice. The quick fix is to explicitly make literals of the f64 type, like <code>3.14f64</code></p>",
        "id": 390918200,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1694694207
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span>  If you aren't looking into Dec sin/cos impl, I may look into it. Sounds like an interesting side project. I have always wondered how they are implemented in software.</p>",
        "id": 390983490,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1694710660
    },
    {
        "content": "<p>I'm not working on that, and don't plan to</p>",
        "id": 390984790,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1694711114
    },
    {
        "content": "<p>yessss that's awesome!</p>",
        "id": 390992011,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1694714015
    },
    {
        "content": "<p>very interesting reference counting technique, just published in 2021! <a href=\"https://dl.acm.org/doi/10.1145/3453483.3454060\">https://dl.acm.org/doi/10.1145/3453483.3454060</a></p>",
        "id": 391140445,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1694776216
    },
    {
        "content": "<p>direct link to paper: <a href=\"https://dl.acm.org/doi/pdf/10.1145/3453483.3454060\">https://dl.acm.org/doi/pdf/10.1145/3453483.3454060</a></p>",
        "id": 391140590,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1694776276
    },
    {
        "content": "<p>progress on aarch64 dev backend (elf only though)</p>\n<p>this is gen_num</p>\n<div class=\"codehilite\"><pre><span></span><code>     Summary [  64.943s] 144 tests run: 19 passed, 125 failed, 709 skipped\n</code></pre></div>\n<p>now just needs a lot more instructions, but the scaffolding works</p>",
        "id": 391215709,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1694795393
    },
    {
        "content": "<p>also the rust library we use has very limited options for macho relocations. it's not clear whether that is fundamental or whether they've just not implemented it yet</p>",
        "id": 391215841,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1694795430
    },
    {
        "content": "<p>also the dev backend repl just got merged, so on x86 linux, the repl should now be much faster!</p>",
        "id": 391226658,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1694798848
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> and I got it to work on macos too now, and fixed some other issues. Now there  is some bug with branches that went unnoticed on x86 and then we'll have almost all of gen_num working already. (still some float stuff and 128-bit stuff to do)</p>",
        "id": 391372112,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1694867156
    },
    {
        "content": "<p>yoooooooooo</p>",
        "id": 391404780,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1694886834
    },
    {
        "content": "<p>Amazing work, you two!</p>",
        "id": 391412061,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1694892228
    },
    {
        "content": "<p>I just discovered Agner Fog's <a href=\"https://agner.org/optimize/\">optimization resources page</a> (which is <em>incredible</em> btw) has <a href=\"https://agner.org/optimize/calling_conventions.pdf\">a comprehensive explanation of calling conventions</a> on all the major OSes <span aria-label=\"exploding head\" class=\"emoji emoji-1f92f\" role=\"img\" title=\"exploding head\">:exploding_head:</span></p>",
        "id": 391414263,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1694893932
    },
    {
        "content": "<p>That page continues to gain content. Yeah, it is pretty great</p>",
        "id": 391418627,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1694897618
    },
    {
        "content": "<p>I've generated an object file from a test using e.g. <code>ROC_DEV_WRITE_OBJ=1 cargo nextest-gen-dev add_checked_dec</code> and then built this into an executable using <code>zig build-exe /var/folders/48/39th9k0n0wdcj18k3yhm_g5c0000gn/T/app.o crates/compiler/builtins/bitcode/builtins-aarch64.ll something.zig</code>. Note the <code>ROC_DEV_WRITE_OBJ</code> flags roc to write out the object file and print the location of the file.</p>\n<p>But when I run step through the file from <code>test_main</code> it seems to never get into the <code>#UserApp_main_482528569654279254</code>. Instead it branches off at <code>0x100000804 &lt;+52&gt;:  b.ne   0x100000850</code> and then returns successfully without calling the actual test code I'm interested in I think. </p>\n<div class=\"codehilite\"><pre><span></span><code>(lldb) target create &quot;something&quot;\nCurrent executable set to &#39;/Users/luke/Documents/GitHub/roc/something&#39; (arm64).\n(lldb) b test_main\nBreakpoint 1: where = something`test_main, address = 0x00000001000007d0\n(lldb) r\nProcess 12932 launched: &#39;/Users/luke/Documents/GitHub/roc/something&#39; (arm64)\nProcess 12932 stopped\n* thread #1, stop reason = breakpoint 1.1\n    frame #0: 0x00000001000007d0 something`test_main\nsomething`test_main:\n-&gt;  0x1000007d0 &lt;+0&gt;:  sub    sp, sp, #0x60             ; =0x60\n    0x1000007d4 &lt;+4&gt;:  str    x30, [sp, #0x58]\n    0x1000007d8 &lt;+8&gt;:  str    x29, [sp, #0x50]\n    0x1000007dc &lt;+12&gt;: add    x29, sp, #0x50            ; =0x50\n(lldb) disassemble --frame\nsomething`test_main:\n-&gt;  0x1000007d0 &lt;+0&gt;:   sub    sp, sp, #0x60             ; =0x60\n    0x1000007d4 &lt;+4&gt;:   str    x30, [sp, #0x58]\n    0x1000007d8 &lt;+8&gt;:   str    x29, [sp, #0x50]\n    0x1000007dc &lt;+12&gt;:  add    x29, sp, #0x50            ; =0x50\n    0x1000007e0 &lt;+16&gt;:  ldr    x17, [x17]\n    0x1000007e4 &lt;+20&gt;:  stur   x8, [x29, #-0x8]\n    0x1000007e8 &lt;+24&gt;:  stur   x17, [x29, #-0x10]\n    0x1000007ec &lt;+28&gt;:  ldur   x0, [x29, #-0x10]\n    0x1000007f0 &lt;+32&gt;:  bl     0x100000770               ; roc_setjmp\n    0x1000007f4 &lt;+36&gt;:  stur   x0, [x29, #-0x20]\n    0x1000007f8 &lt;+40&gt;:  stur   x1, [x29, #-0x18]\n    0x1000007fc &lt;+44&gt;:  ldur   x17, [x29, #-0x20]\n    0x100000800 &lt;+48&gt;:  cmp    x17, #0x0                 ; =0x0\n    0x100000804 &lt;+52&gt;:  b.ne   0x100000850               ; &lt;+128&gt;\n    0x100000808 &lt;+56&gt;:  stur   x17, [x29, #-0x10]\n    0x10000080c &lt;+60&gt;:  bl     0x100000920               ; #UserApp_main_482528569654279254\n</code></pre></div>\n<p>I suspect it might be because I have the type of <code>RocCallResult.value</code> wrong?   </p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">@import</span><span class=\"p\">(</span><span class=\"s\">\"std\"</span><span class=\"p\">);</span>\n\n<span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">RocCallResult</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kr\">extern</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">tag</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">error_msg</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">value</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n\n<span class=\"kr\">extern</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">test_main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">callconv</span><span class=\"p\">(.</span><span class=\"n\">C</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">RocCallResult</span><span class=\"p\">;</span>\n\n<span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">test_main</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">debug</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s\">\"done {}</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.{</span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">});</span>\n\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 391462640,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1694931668
    },
    {
        "content": "<p>This is the test that I am trying to investigate</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[test]</span>\n<span class=\"cp\">#[cfg(any(feature = </span><span class=\"s\">\"gen-llvm\"</span><span class=\"cp\">, feature = </span><span class=\"s\">\"gen-wasm\"</span><span class=\"cp\">, feature = </span><span class=\"s\">\"gen-dev\"</span><span class=\"cp\">))]</span>\n<span class=\"k\">fn</span> <span class=\"nf\">add_checked_dec</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">assert_evals_to</span><span class=\"o\">!</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">indoc</span><span class=\"o\">!</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"s\">r#\"</span>\n<span class=\"s\">            Num.addChecked 2.0dec 4.0dec == Ok 6.0dec</span>\n<span class=\"s\">            \"#</span>\n<span class=\"w\">        </span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"kc\">true</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"kt\">bool</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 391462766,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1694931776
    },
    {
        "content": "<p>I'm pretty convinced this is my set-up and nothing to do with the test failing, tried the same method on a good test and had the same issue. <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 391465048,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1694933989
    },
    {
        "content": "<p>on aarch at the moment we don't use all of the rocresult stuff. instead I call/break on <code>extern fn roc__main_1_exposed() callconv(.C) u128;\n</code></p>",
        "id": 391468526,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1694937242
    },
    {
        "content": "<p>the issue here is something with how the return value is passed. it is too big to fit into registers, and we allocate stack space wrong: it overwrites the stored frame pointer and link register. that's how far I got last night</p>",
        "id": 391468686,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1694937362
    },
    {
        "content": "<p>on the pi at least I've got all of gen_num now <a href=\"https://github.com/roc-lang/roc/pull/5824\">https://github.com/roc-lang/roc/pull/5824</a></p>",
        "id": 391516101,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1694961087
    },
    {
        "content": "<p>weird thing: if you use the github UI to rebase a PR then the commits are unverified</p>",
        "id": 391861844,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1695113363
    },
    {
        "content": "<p>but if you e.g. adjust the readme from the ui then the commit is verified (at least it used to be)</p>",
        "id": 391861902,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1695113379
    },
    {
        "content": "<p>Yeah, I noticed that. No idea why. Can rebase a second time locally and that should verify the commits, but kinda defeats the purpose of the GitHub you button.</p>",
        "id": 391928554,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1695134711
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> and <span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> re Windows, I think there is still a couple of issues which are causing most of the test failures. I suspect the issue is in strings and lists. It's a little slow making progress with the tests running slowly due to issues with caching on windows.</p>",
        "id": 391992098,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1695156261
    },
    {
        "content": "<p>About the \"issues with caching\", do you mean locally or on CI?</p>",
        "id": 392072085,
        "sender_full_name": "Anton",
        "timestamp": 1695200344
    },
    {
        "content": "<p>Locally, when you run tests on windows it looks like zig has to rebuild the builtins and link the app every time</p>",
        "id": 392075801,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1695201657
    },
    {
        "content": "<p>we know the cause of these issues right?</p>\n<ul>\n<li>we use zig in a tempdir, which means nothing gets cached between builds. The solution is to have a tempdir per thread, not per test, so after the first test most zig stuff is cached</li>\n<li>we know that there is a segfault when rust tries to deallocate strings/lists that were allocated by a zig builtin.</li>\n</ul>",
        "id": 392122386,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1695217978
    },
    {
        "content": "<p>For a test which returns <code>RocResult::ok(RocDec::from(6))</code> what would the equivalent zig type be? I'm having trouble tracking down something related in our builtins. I.e. </p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">RocCallResult</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kr\">extern</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">tag</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">error_msg</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">value</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">RocResultOrSomething</span><span class=\"o\">??</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n</code></pre></div>",
        "id": 392408788,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1695338004
    },
    {
        "content": "<p>I think this has done the trick</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">RocCallResult</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kr\">extern</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">tag</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">error_msg</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">value</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">RocResult</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n\n<span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">RocDec</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kr\">extern</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">num</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">i128</span><span class=\"p\">,</span>\n\n<span class=\"w\">    </span><span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">addWithOverflow</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">RocDec</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">other</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">RocDec</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">WithOverflow</span><span class=\"p\">(</span><span class=\"n\">RocDec</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kr\">var</span><span class=\"w\"> </span><span class=\"n\">answer</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">i128</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">undefined</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">overflowed</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">@addWithOverflow</span><span class=\"p\">(</span><span class=\"kt\">i128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">num</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">other</span><span class=\"p\">.</span><span class=\"n\">num</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">answer</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">.{</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">RocDec</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">num</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">answer</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">has_overflowed</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">overflowed</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">RocResultTag</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">enum</span><span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">RocErr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">RocOk</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n\n<span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">RocResultPayload</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kr\">extern</span><span class=\"w\"> </span><span class=\"k\">union</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">ok</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">RocDec</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">err</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n\n<span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">RocResult</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kr\">extern</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">payload</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">RocResultPayload</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">tag</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">RocResultTag</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n</code></pre></div>",
        "id": 392410831,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1695339291
    },
    {
        "content": "<p>glad you figured something out.</p>",
        "id": 392410976,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1695339387
    },
    {
        "content": "<p>I have encountered a load-bearing <code>dbg!</code> in my Rust code - the program does something differently depending on whether I do a <code>dbg!(list.len())</code> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 392883287,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1695604114
    },
    {
        "content": "<p>Probably means you are forcing the optimizer to not remove code</p>",
        "id": 392884663,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1695604895
    },
    {
        "content": "<p>relatedly: anyone who has valgrind set up want to pair on a <code>basic-webserevr</code> bug sometime? <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 392884678,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1695604904
    },
    {
        "content": "<p>I'm also seeing fun stuff like if I remove an <code>if Bool.false then</code> things work differently, so some UB somewhere seems likely to blame</p>",
        "id": 392884745,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1695604928
    },
    {
        "content": "<p>Rust achievement unlocked:</p>\n<div class=\"codehilite\"><pre><span></span><code>= note: import resolution is stuck, try simplifying macro imports\n</code></pre></div>",
        "id": 393086485,
        "sender_full_name": "Anton",
        "timestamp": 1695667985
    },
    {
        "content": "<p>This was during the upgrade to rust 1.72. I'm done for today, if anyone else wants to take a stab at fixing the import resolution error, by my guest :)<br>\n<a href=\"https://github.com/roc-lang/roc/pull/5856\">https://github.com/roc-lang/roc/pull/5856</a></p>",
        "id": 393087246,
        "sender_full_name": "Anton",
        "timestamp": 1695668258
    },
    {
        "content": "<p>Important sidenote: this error pops up during <code>cargo test --release --no-run</code></p>",
        "id": 393088035,
        "sender_full_name": "Anton",
        "timestamp": 1695668506
    },
    {
        "content": "<p>Just a note, clippy seems to be messing up the readability of a lot of the indoc tests.</p>",
        "id": 393093562,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1695670274
    },
    {
        "content": "<p>I don't know how to fix the import resolution so I'm going to upgrade to rust 1.71.1 first and not let clippy autofix things :p</p>",
        "id": 393196438,
        "sender_full_name": "Anton",
        "timestamp": 1695720738
    },
    {
        "content": "<p>this could be really useful when we get to writing a debugger for <code>roc</code>! <a href=\"https://www.timdbg.com/posts/writing-a-debugger-from-scratch-part-1/\">https://www.timdbg.com/posts/writing-a-debugger-from-scratch-part-1/</a></p>",
        "id": 393495994,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1695823202
    },
    {
        "content": "<p>til <a href=\"https://en.wikipedia.org/wiki/X86_debug_register\">https://en.wikipedia.org/wiki/X86_debug_register</a></p>",
        "id": 393607322,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1695871502
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/395097-compiler-development/topic/Casual.20Conversation/near/393495994\">said</a>:</p>\n<blockquote>\n<p>this could be really useful when we get to writing a debugger for <code>roc</code>! <a href=\"https://www.timdbg.com/posts/writing-a-debugger-from-scratch-part-1/\">https://www.timdbg.com/posts/writing-a-debugger-from-scratch-part-1/</a></p>\n</blockquote>\n<p>I am keeping my eyes peeled waiting for when it is time for writing the debugger.<br>\n<span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> when will that be?</p>",
        "id": 393669092,
        "sender_full_name": "Rasheed Starlet",
        "timestamp": 1695895212
    },
    {
        "content": "<p>no concrete plans yet, but there's nothing blocking it as far as I know! Is it something you're interested in working on?</p>",
        "id": 393676210,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1695897628
    },
    {
        "content": "<p>Yes but I donât have the technical know how to take on that task yet, It would take me some time to level up before.</p>",
        "id": 393698630,
        "sender_full_name": "Rasheed Starlet",
        "timestamp": 1695902929
    },
    {
        "content": "<p><a href=\"#narrow/stream/395097-compiler-development/topic/casual.20conversation/near/393697825\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"395097\" href=\"/#narrow/stream/395097-compiler-development/topic/yes.20but.20I.20don.E2.80.99t.20have.20the.20technical.20know.20how.20to.20pick.20on.20su.2E.2E.2E\">#compiler development &gt; yes but I donât have the technical know how to pick on su...</a> by <span class=\"user-mention silent\" data-user-id=\"652645\">Rasheed Starlet</span>.</p>",
        "id": 393698848,
        "sender_full_name": "Notification Bot",
        "timestamp": 1695902980
    },
    {
        "content": "<p>I think we would first need good debug info generation before we would be interested in our own debugger</p>",
        "id": 393741741,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1695912517
    },
    {
        "content": "<p>Like our code should work well with a regular debugger first</p>",
        "id": 393741812,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1695912540
    },
    {
        "content": "<p>I'm doing a Software Unscripted episode with Matt Godbolt and he said \"we should absolutely get Roc on Godbolt\"</p>",
        "id": 393917592,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1695988964
    },
    {
        "content": "<p>also he tried the nightly on a fresh Ubuntu install and when he put \"hello world\" into the repl and got a panic about missing a dynamic library</p>",
        "id": 393918456,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1695989287
    },
    {
        "content": "<p>Hmm, we do test every nightly's repl on ubuntu, but this is github's workflow runner ubuntu so its dependencies are different. I happen to have a clean ubuntu vm so I'll try to reproduce.</p>",
        "id": 393919572,
        "sender_full_name": "Anton",
        "timestamp": 1695989761
    },
    {
        "content": "<p>I was able to reproduce it, I'll make an issue for the error and another one to test nightlies on all kinds of docker containers to mimic fresh installs.</p>",
        "id": 393921083,
        "sender_full_name": "Anton",
        "timestamp": 1695990381
    },
    {
        "content": "<p>awesome! I relayed this to him (we just finished recording) and he asked if there's something he can quickly <code>apt-get install</code> to fix it <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 393929540,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1695993549
    },
    {
        "content": "<p>I'll look at it right now</p>",
        "id": 393933232,
        "sender_full_name": "Anton",
        "timestamp": 1695994837
    },
    {
        "content": "<p>The amount of time that would be saved if the \"No such file or directory\" actually told you what file or dir it was looking for... :p</p>",
        "id": 393933577,
        "sender_full_name": "Anton",
        "timestamp": 1695994988
    },
    {
        "content": "<p>one of my coworkers who has been helping me with getting Roc incorporated into certain parts of the build just started trying it out, and DM'd me a bunch of questions for things he ran into as a beginner, followed by:</p>\n<blockquote>\n<p>Richard, what have you done, now I just want to Roc(k) hahaha</p>\n</blockquote>",
        "id": 393934214,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1695995204
    },
    {
        "content": "<p>we made a good thing! <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 393934675,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1695995391
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/395097-compiler-development/topic/Casual.20Conversation/near/393934675\">said</a>:</p>\n<blockquote>\n<p>we made a good thing! <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>\n</blockquote>\n<p>that people love</p>",
        "id": 393935456,
        "sender_full_name": "Rasheed Starlet",
        "timestamp": 1695995643
    },
    {
        "content": "<blockquote>\n<p>awesome! I relayed this to him (we just finished recording) and he asked if there's something he can quickly <code>apt-get install</code> to fix it <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>\n</blockquote>\n<p>I'm not sure what part of this script fixes the issue but it does :p I'll look into a less bloated fix later.</p>\n<div class=\"codehilite\"><pre><span></span><code>wget https://apt.llvm.org/llvm.sh\nchmod +x llvm.sh\nsudo ./llvm.sh 13\n</code></pre></div>\n<p><code>sudo apt install llvm-13</code> does not work btw</p>",
        "id": 393946211,
        "sender_full_name": "Anton",
        "timestamp": 1695999017
    },
    {
        "content": "<p>it might be missing certain features? what features are enabled for their official builds seems very random</p>",
        "id": 393946535,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1695999127
    },
    {
        "content": "<p>why is cargo slow, you ask? well maybe because they just casually perform many small allocations in a recent PR? </p>\n<p><a href=\"https://github.com/rust-lang/cargo/pull/12751/files\">https://github.com/rust-lang/cargo/pull/12751/files</a></p>\n<p>it's just really weird to read that code?! it's so easy to remove most of those allocations</p>",
        "id": 393975350,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1696008328
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/stream/395097-compiler-development/topic/Casual.20Conversation/near/393946211\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>awesome! I relayed this to him (we just finished recording) and he asked if there's something he can quickly <code>apt-get install</code> to fix it <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>\n</blockquote>\n<p>I'm not sure what part of this script fixes the issue but it does :p I'll look into a less bloated fix later.</p>\n<div class=\"codehilite\"><pre><span></span><code>wget https://apt.llvm.org/llvm.sh\nchmod +x llvm.sh\nsudo ./llvm.sh 13\n</code></pre></div>\n<p><code>sudo apt install llvm-13</code> does not work btw</p>\n</blockquote>\n<p>Thanks! I'm surprised llvm isn't statically compiled into the <code>roc</code> binary though <span aria-label=\"face with raised eyebrow\" class=\"emoji emoji-1f928\" role=\"img\" title=\"face with raised eyebrow\">:face_with_raised_eyebrow:</span></p>",
        "id": 393976645,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1696008843
    },
    {
        "content": "<p>also surprising: I believe he's on x64, and ran into this in the repl...but the latest Linux x64 nightly should use the dev backend in the repl, not LLVM! <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 393976779,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1696008898
    },
    {
        "content": "<p>Doesn't matter the backend? Probably still loads the same shared libraries</p>",
        "id": 393979815,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1696010285
    },
    {
        "content": "<p>Though maybe somehow it failed to the load the dev backend generated shared library for the repl.</p>",
        "id": 393979857,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1696010308
    },
    {
        "content": "<p>Also, yeah, llvm can't be dynamic. Otherwise we would see way way more versioning issues, right?</p>",
        "id": 393979983,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1696010355
    },
    {
        "content": "<p>I would certainly think so! <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 393980059,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1696010387
    },
    {
        "content": "<p>Yeah, I think it's something the llvmsh script installs, not llvm itself</p>",
        "id": 393983446,
        "sender_full_name": "Anton",
        "timestamp": 1696011843
    },
    {
        "content": "<blockquote>\n<p>Though maybe somehow it failed to the load the dev backend generated shared library for the repl.</p>\n</blockquote>\n<p>Yes indeed</p>",
        "id": 393983740,
        "sender_full_name": "Anton",
        "timestamp": 1696011972
    },
    {
        "content": "<p>This is interesting: <a href=\"https://github.com/simd-everywhere/simde\">https://github.com/simd-everywhere/simde</a></p>",
        "id": 394008736,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1696023943
    },
    {
        "content": "<p>Nice :)</p>",
        "id": 394066229,
        "sender_full_name": "Anton",
        "timestamp": 1696064335
    },
    {
        "content": "<blockquote>\n<p>Yeah, I think it's something the llvmsh script installs, not llvm itself</p>\n</blockquote>\n<p>Alright, found it, ld was missing, this can be fixed on Ubuntu with:</p>\n<div class=\"codehilite\"><pre><span></span><code>sudo apt install binutils\n</code></pre></div>",
        "id": 394104641,
        "sender_full_name": "Anton",
        "timestamp": 1696098430
    },
    {
        "content": "<p>I've added this to the linux getting started as well:<br>\n<a href=\"https://github.com/roc-lang/roc/pull/5872\">https://github.com/roc-lang/roc/pull/5872</a></p>",
        "id": 394105460,
        "sender_full_name": "Anton",
        "timestamp": 1696098968
    },
    {
        "content": "<p>Does anyone know if it should be possible to import URL packages in the platform main file just like an app? I haven't been able to get it working. I'm getting errors like</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;main&#39; panicked at &#39;[Qualified(&quot;json&quot;, json.Core)] not in {} &#39;, crates/compiler/load_internal/src/file.rs:2211:25\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>",
        "id": 395333326,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1696629034
    },
    {
        "content": "<p>it should be, but I remember there's some bug with it from way back <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 395347063,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1696639152
    },
    {
        "content": "<p>might need to vendor it for now as a workaround</p>",
        "id": 395347093,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1696639173
    },
    {
        "content": "<p><a href=\"https://twitter.com/VictorTaelin/status/1710766199288570079\">https://twitter.com/VictorTaelin/status/1710766199288570079</a> I saw the discussion about compiling Elm and making fast graphics apps and thought maybe this be relevant to Roc.</p>",
        "id": 395502488,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1696749607
    },
    {
        "content": "<p>Fascinating. It would be cool to have Victor Taelin on Software Unscripted <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span></p>",
        "id": 395650628,
        "sender_full_name": "Anton",
        "timestamp": 1696841936
    },
    {
        "content": "<p>What does the alignment mean in this function on a RocList <code>pub fn decref(self: RocList, alignment: u32) void</code>?</p>",
        "id": 395850427,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1696932954
    },
    {
        "content": "<p>Alignment is a memory loading concept. In aggregate data, it tends to be the size of the largest thing in the aggregate.</p>",
        "id": 395902785,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1696949964
    },
    {
        "content": "<p>This ended up being a good mini talk on why llvm is often a pain: <a href=\"https://youtu.be/g1qF9LZOoFE?si=7tifU78yyT1K2ZZy\">https://youtu.be/g1qF9LZOoFE?si=7tifU78yyT1K2ZZy</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"g1qF9LZOoFE\" href=\"https://youtu.be/g1qF9LZOoFE?si=7tifU78yyT1K2ZZy\"><img src=\"https://uploads.zulipusercontent.net/0978bfd248a915274a76066c6586e500b9b0aa2a/68747470733a2f2f692e7974696d672e636f6d2f76692f67317146394c5a4f6f46452f64656661756c742e6a7067\"></a></div>",
        "id": 395904685,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1696950489
    },
    {
        "content": "<p>yes fun talk!</p>",
        "id": 395910009,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1696952170
    },
    {
        "content": "<p>wow, I had largely given up hope that this would ever land! <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<p><a href=\"https://reviews.llvm.org/D86310\">https://reviews.llvm.org/D86310</a></p>",
        "id": 396144198,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1697048751
    },
    {
        "content": "<p>Wow yeah, nice</p>",
        "id": 396167911,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1697060014
    },
    {
        "content": "<p>Trying to compile from main and I think there may be something up with the nix configuration. I haven't seen this before.</p>\n<div class=\"codehilite\"><pre><span></span><code>192-168-1-105:roc luke$ nix develop\n192-168-1-105:roc luke$ cargo build --release --locked\n   Compiling roc_repl_wasm v0.0.1 (/Users/luke/Documents/GitHub/roc/crates/repl_wasm)\nerror: failed to run custom build command for `roc_repl_wasm v0.0.1 (/Users/luke/Documents/GitHub/roc/crates/repl_wasm)`\n\nCaused by:\n  process didn&#39;t exit successfully: `/Users/luke/Documents/GitHub/roc/target/release/build/roc_repl_wasm-ba13b2d4af2101b5/build-script-build` (exit status: 101)\n  --- stdout\n  cargo:rerun-if-changed=build.rs\n  cargo:rerun-if-changed=src/repl_platform.c\n\n  --- stderr\n  thread &#39;main&#39; panicked at &#39;Output {\n      status: ExitStatus(\n          unix_wait_status(\n              256,\n          ),\n      ),\n      stdout: &quot;&quot;,\n      stderr: &quot;wasm-ld: error: Unknown attribute kind (86) (Producer: &#39;LLVM16.0.6&#39; Reader: &#39;LLVM 13.0.1&#39;)\\n&quot;,\n  }&#39;, crates/repl_wasm/build.rs:48:5\n  note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>",
        "id": 396606610,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1697255217
    },
    {
        "content": "<p>Looks like you are still pulling in new zig from when you used the updated llvm branch?</p>",
        "id": 396608724,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1697256778
    },
    {
        "content": "<p>Or something newer in your stack</p>",
        "id": 396608733,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1697256786
    },
    {
        "content": "<p>That or a cached file that was built when you were on an updated branch....something along these lines</p>",
        "id": 396608759,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1697256819
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> <code>cargo clean</code> did the job!</p>",
        "id": 396616690,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1697261319
    },
    {
        "content": "<p>from <a href=\"https://nibblestew.blogspot.com/2023/10/the-road-to-hell-is-paved-with-good.html\">https://nibblestew.blogspot.com/2023/10/the-road-to-hell-is-paved-with-good.html</a></p>\n<div class=\"codehilite\"><pre><span></span><code>module;\n#include&lt;evil.h&gt;\nexport module I_AM_A_DEFINE_GOOD_LUCK_FINDING_OUT_WHERE_I_COME_FROM;\n</code></pre></div>\n<p>sometimes I really wonder what is happens behind the C++ committee doors</p>",
        "id": 397407364,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1697679419
    },
    {
        "content": "<p>Really interesting presentation from Modular/Mojo developers: <a href=\"https://www.modular.com/blog/mojo-llvm-2023\">https://www.modular.com/blog/mojo-llvm-2023</a></p>\n<p>Clever how the surface syntax almost immediately desugars to an MLIR. The slides on JIT architecture are super interesting too, especially the idea regarding shipping packages with bytecode for eval</p>",
        "id": 397517619,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1697725515
    },
    {
        "content": "<p>I thought their ideas of taking control of more llvm passes and then running llvm in parallel on a per function level is quite intriguing</p>",
        "id": 397519836,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1697726184
    },
    {
        "content": "<p>How to work around the beast of llvm</p>",
        "id": 397520025,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1697726245
    },
    {
        "content": "<p>apparently part of how bun is so fast! <a href=\"https://github.com/simdutf/simdutf\">https://github.com/simdutf/simdutf</a></p>",
        "id": 397791275,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1697847357
    },
    {
        "content": "<p>and nodejs!</p>",
        "id": 397791839,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1697847775
    },
    {
        "content": "<p>ooo <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span>  <a href=\"https://twitter.com/__protected/status/1715693892933153144\">https://twitter.com/__protected/status/1715693892933153144</a></p>",
        "id": 397847222,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1697891854
    },
    {
        "content": "<p>at the end of that thread are links to papers, including: <a href=\"https://2023.splashcon.org/details/splash-2023-oopsla/47/Getting-into-the-Flow-Towards-Better-Type-Error-Messages-for-Constraint-Based-Type-I\">https://2023.splashcon.org/details/splash-2023-oopsla/47/Getting-into-the-Flow-Towards-Better-Type-Error-Messages-for-Constraint-Based-Type-I</a></p>",
        "id": 397847661,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1697892361
    },
    {
        "content": "<p>Is there anyone online who has an apple silicon Mac and is able to test something for me? I have a graphical \"hello world\" in <a href=\"https://gist.github.com/lukewilliamboswell/acac5b641ac4b93ff2c1979eecfb6b54\">this gist</a>  and am interested to know if it works for others or if there are issues. It should be a prebuilt-package so <em>just work</em>, as you need the latest zig to re-build the platform. Next step is to figure out what I need to cross-compile to various platforms so I can pre-build those object/archive files too.</p>",
        "id": 397933504,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1697970457
    },
    {
        "content": "<p>Oh, it should spit out a <code>zigimg.png</code> file in the local directory where you run it from using <code>roc run test.roc</code></p>",
        "id": 397933582,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1697970519
    },
    {
        "content": "<p>I can try it in 15 min</p>",
        "id": 397942219,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1697978615
    },
    {
        "content": "<p>\"just worked\" for me!</p>",
        "id": 397942968,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1697979309
    },
    {
        "content": "<p><a href=\"https://dl.acm.org/doi/pdf/10.1145/3607858\">https://dl.acm.org/doi/pdf/10.1145/3607858</a></p>",
        "id": 398088207,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1698068606
    },
    {
        "content": "<p>that trick to also store the color of an RBTree in the pointer (because you only need one bit for the node type) is cool</p>",
        "id": 398088523,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1698068699
    },
    {
        "content": "<p>you want very flexible niches on the one hand, on the other hand we need to generate code (and maybe also debuginfo) for that and that is hard</p>",
        "id": 398088672,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1698068742
    },
    {
        "content": "<p>Yeah I agree. The codegen is painful, both to implement and debug</p>",
        "id": 398090255,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1698069169
    },
    {
        "content": "<p>I feel like there must be some fundamental theorem that shows optimal-niche-finding is np-complete. it feels the same as instruction selection.</p>",
        "id": 398090374,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1698069208
    },
    {
        "content": "<p>Maybe useful to us at some point:<br>\n<a href=\"https://www.npopov.com/2023/10/22/How-to-reduce-LLVM-crashes.html\">https://www.npopov.com/2023/10/22/How-to-reduce-LLVM-crashes.html</a></p>",
        "id": 398129021,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1698082011
    },
    {
        "content": "<p>I've got another build of basic-graphics <a href=\"https://gist.github.com/lukewilliamboswell/bacf63b0d65fa284733cd3b5d1213dfc\">gist of example here</a>; I think I have managed to include in the bundle a build for for the following targets:</p>\n<ul>\n<li>linux-x64</li>\n<li>macOS-arm64</li>\n<li>macOS-x64 </li>\n</ul>\n<p><del>Just wondering if anyone could test this for me? and let me know if you have any issues. </del></p>\n<p>I would like to clean up the API a fair bit, but hoping I have all the parts together and working now.</p>\n<p>EDIT: It does't work on Linux, I need to do more work to make that just work.</p>",
        "id": 398580048,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1698279067
    },
    {
        "content": "<p>I think weâll check in the language server in. Please review it or merge here: <a href=\"https://github.com/roc-lang/roc/pull/5937\">https://github.com/roc-lang/roc/pull/5937</a></p>",
        "id": 398580139,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1698279145
    },
    {
        "content": "<p>Also, the first CI job appears done in the details page, but the status check didnât update. <span class=\"user-mention\" data-user-id=\"361169\">@Anton</span>  any ideas?</p>",
        "id": 398580185,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1698279176
    },
    {
        "content": "<p>Needed some tweaking to get the tests running on my current macos machine; fixed here: <a href=\"https://github.com/roc-lang/roc/pull/5938\">https://github.com/roc-lang/roc/pull/5938</a></p>\n<p>If folks have thoughts on whether we should go for the <code>xcode-select --print-path</code> approach instead, that'd be useful.</p>",
        "id": 398596837,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1698290528
    },
    {
        "content": "<p>lots of sweet stuff in here, but at the end he notes that you can make 32 bit pointers that Just Work on a 64-bit system, which immediately makes sense, but which had never actually occurred to me! <a href=\"https://www.youtube.com/watch?v=H8THRznXxpQ\">https://www.youtube.com/watch?v=H8THRznXxpQ</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"H8THRznXxpQ\" href=\"https://www.youtube.com/watch?v=H8THRznXxpQ\"><img src=\"https://uploads.zulipusercontent.net/ce7ec0b2e4e37c7488de1e5aae5bbc4d9a9526ca/68747470733a2f2f692e7974696d672e636f6d2f76692f48385448527a6e587870512f64656661756c742e6a7067\"></a></div>",
        "id": 400180694,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1699033655
    },
    {
        "content": "<p>Oh I watched that video a few weeks ago but never got as far as that 32-bit trick! Will rewatch it. I've been taking his course since the start, enjoying it.</p>",
        "id": 400183522,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1699034751
    },
    {
        "content": "<p>Wow yeah so memory addresses are virtual and you can force them to be under 2^32 for your process as long as you don't actually use more than 4GB. Crazy.<br>\nSo you could shrink all pointers in your data structures from 64 to 32 and fit more stuff in cache.<br>\nI never heard of this before and suddenly I think it's weird that more people don't do it!</p>",
        "id": 400185529,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1699035615
    },
    {
        "content": "<p>Do you guys know that rust has not small string optimization at all? It also can't ever have small string optimization due to how it defines its apis. Vec guarentees that it is always heap allocated. And String guaretees it can always seamlessly convert to a Vec without copying any data. As such String must also be heap allocated.</p>",
        "id": 400776986,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1699374914
    },
    {
        "content": "<p>I guess the main arguments are:</p>\n<ol>\n<li>SSO means that Strings and Vecs are not seamless in conversion/representation.</li>\n<li>Most cases where SSO is a huge win are also the cases where <code>&amp;str</code> is a huge win. So SSO is often not actually used/needed.</li>\n<li>Most other SSO use cases are constants where it doesn't matter anyway.</li>\n<li>SSO is an extra often unpredictable branch.</li>\n<li>SSO can always be done in userland if someone finds a case where they really need it.</li>\n</ol>",
        "id": 400778290,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1699375359
    },
    {
        "content": "<p>Make me wonder how our perf would be affect if we dropped SSO and instead only had seamless slices. That said, <code>&amp;str</code> should be strictly higher perf than seamless slices, so maybe that wouldn't map to Roc in the same way.</p>",
        "id": 400778602,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1699375475
    },
    {
        "content": "<p>Cause <code>&amp;str</code> is in the type system and avoids runtime checks. It also doesn't have to deal with any sort of refcount.</p>",
        "id": 400778666,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1699375510
    },
    {
        "content": "<p>Really old and long threads on this:</p>\n<ul>\n<li><a href=\"https://internals.rust-lang.org/t/short-string-optimization/8436\">https://internals.rust-lang.org/t/short-string-optimization/8436</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/20198\">https://github.com/rust-lang/rust/issues/20198</a></li>\n</ul>",
        "id": 400778772,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1699375551
    },
    {
        "content": "<p>The <a href=\"https://github.com/roc-lang/roc/blob/main/getting_started/macos_apple_silicon.md\">https://github.com/roc-lang/roc/blob/main/getting_started/macos_apple_silicon.md</a> states that we do not yet support MacOS 13, is this still true?</p>",
        "id": 400837831,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1699402442
    },
    {
        "content": "<p>Oh, that is outdated now that we updated zig</p>",
        "id": 400839057,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1699403156
    },
    {
        "content": "<p>I'll fix that</p>",
        "id": 400902524,
        "sender_full_name": "Anton",
        "timestamp": 1699435072
    },
    {
        "content": "<p>Semi-big development update: we're going to halt development on lambda sets for now, in favor of getting boxed closures to work across the board, so that we can unblock development on effect interpreters.</p>",
        "id": 400996668,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1699466483
    },
    {
        "content": "<p>this means closures will be heap-allocated, which unfortunately means worse runtime performance. However, this is actually something we want to try to speed up dev builds in the long term anyway (that is, heap allocating closures), so switching to having them all work that way will give us more data points about the runtime cost in practice as well as some idea of the effect on compile times</p>",
        "id": 400997701,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1699466782
    },
    {
        "content": "<p>I bet that was a tough call, sounds wise to move things forward.<br>\nDoes the boxed closure contain a function pointer or a tag union or both?</p>",
        "id": 401004532,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1699469600
    },
    {
        "content": "<p>just function pointer</p>",
        "id": 401008137,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1699471043
    },
    {
        "content": "<p>maybe we could keep the current functionality behind a flag like <code>--experimental-closures</code> or something, to make it easier to compare perf impact and compile times with and without</p>",
        "id": 401008289,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1699471100
    },
    {
        "content": "<p>Ok, where's the captured data stored?</p>",
        "id": 401008870,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1699471357
    },
    {
        "content": "<p>Is it a box containing a structure of function pointer and data?</p>",
        "id": 401009157,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1699471463
    },
    {
        "content": "<p>yeah exactly</p>",
        "id": 401010436,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1699471986
    },
    {
        "content": "<p>I hope llvm can still inline them ok.</p>",
        "id": 401012127,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1699472729
    },
    {
        "content": "<p>Actually, itâs a bit more efficient than that. instead of boxing the pointer, itâs stored as a fat pointer. A boxed closure is a three-word record - one for the pointer, one for the closure data (or NULL), one for the ref counter function (or NULL). I have more details in <a href=\"https://www.notion.so/rwx/Type-Erasure-a3ed13ef1305422eba00dbda026e52b3?pvs=4\">https://www.notion.so/rwx/Type-Erasure-a3ed13ef1305422eba00dbda026e52b3?pvs=4</a></p>",
        "id": 401012250,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1699472772
    },
    {
        "content": "<p>Also, just curious, why this over still keeping our static dispatch with a switch statement, but with just boxing the data. I thought mostly the data was the issue, not the function pionters.</p>",
        "id": 401012293,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1699472792
    },
    {
        "content": "<p>We still end up needing the effective equivalent of lambda sets in that case</p>",
        "id": 401012490,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1699472886
    },
    {
        "content": "<p>ah. ok.</p>",
        "id": 401012583,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1699472935
    },
    {
        "content": "<p>Also, for the refcounter function, is it a function that could be called by the host to increment the refcount of all closure captures such that the host can call the same closure multiple times?</p>",
        "id": 401012841,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1699473074
    },
    {
        "content": "<p>I think it could be, but I haven't fully thought that through. The host would need to manage the lifetime though</p>",
        "id": 401013163,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1699473235
    },
    {
        "content": "<p>If you have any friends working on type theories or PL PhDs, would appreciate if you share this with them: <a href=\"https://github.com/roc-lang/roc/issues/5969\">https://github.com/roc-lang/roc/issues/5969</a></p>",
        "id": 401078200,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1699507190
    },
    {
        "content": "<p><a href=\"https://abseil.io/docs/cpp/atomic_danger#performance-considerations\">https://abseil.io/docs/cpp/atomic_danger#performance-considerations</a> very interesting</p>",
        "id": 401460615,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1699666522
    },
    {
        "content": "<p>just use mutexes I guess. that should keep things simple in nea</p>",
        "id": 401460640,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1699666546
    },
    {
        "content": "<p><a href=\"https://blog.rust-lang.org/2023/11/09/parallel-rustc.html\">https://blog.rust-lang.org/2023/11/09/parallel-rustc.html</a></p>\n<p>we should try and see if this helps our project</p>",
        "id": 401484939,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1699683798
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/X99nGAfgBCCpn_ZMwTNzr7Ct/IMG_3540.jpeg\">IMG_3540.jpeg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/X99nGAfgBCCpn_ZMwTNzr7Ct/IMG_3540.jpeg\" title=\"IMG_3540.jpeg\"><img src=\"/user_uploads/22008/X99nGAfgBCCpn_ZMwTNzr7Ct/IMG_3540.jpeg\"></a></div>",
        "id": 401485251,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1699684087
    },
    {
        "content": "<p>this is actually really surprising to me, especially with the heavy multi-pass LLVM backend. i guess part of it might be explained by Rust trait selection/method selection being pretty involved. But itâs something we should be mindful of-right now all inference in our compiler is single pass, intentionally, and making it multi pass could have effects like this</p>",
        "id": 401485345,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1699684203
    },
    {
        "content": "<p>It just sounds like they manage to run more llvm threads at the same time cause other stuff finishes sooner, right?</p>",
        "id": 401495195,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1699694193
    },
    {
        "content": "<p>So that is why llvm is faster</p>",
        "id": 401495208,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1699694217
    },
    {
        "content": "<p>i mean in principle the unit of parallelism between the front end and backend should be the same though</p>",
        "id": 401520006,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1699716948
    },
    {
        "content": "<p>Pretty sure this is why it is faster 8 instead of 1 thread generating llvm ir at the boundary of frontend and backend</p>\n<blockquote>\n<p>Eight of the LLVM threads start at the same time. This is because the eight \"rustc\" threads create the LLVM IR for eight codegen units in parallel. (For seven of those threads that is the only work they do in the back-end.) After that, the staircase effect returns because only one \"rustc\" thread does LLVM IR generation while seven or more LLVM threads are active. If the number of threads used by the front-end was changed to 16 the staircase shape would disappear entirely, though in this case the final execution time would barely change.</p>\n</blockquote>",
        "id": 401528942,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1699721712
    },
    {
        "content": "<p><a href=\"https://utcc.utoronto.ca/~cks/space/blog/programming/GoModulesAndDomainExpiry\">https://utcc.utoronto.ca/~cks/space/blog/programming/GoModulesAndDomainExpiry</a></p>\n<blockquote>\n<p>Let me be clear that this is a hard problem in general and no one has a good answer to it</p>\n</blockquote>\n<p>or at least no one <em>had</em> a good answer to it... <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 401607017,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1699789584
    },
    {
        "content": "<p>(to be fair, we also don't have a solution for URL-based packages to the problem of \"the domain expired or got taken over and now I don't have a good way to notify people about where the new package lives)</p>",
        "id": 401607131,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1699789702
    },
    {
        "content": "<p>but we do have a good answer to the security problems, and not just \"any new owner of your package's URL has limited scope for being malicious\" or \"in theory they can't publish a new version (with malicious code) and have it automatically picked up by current users, because existing users will stick with the current version until they specifically update (new users of the package are not so lucky)\"</p>",
        "id": 401607182,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1699789786
    },
    {
        "content": "<p>very interesting issue with the derived eq implementation here</p>\n<p><a href=\"https://github.com/rust-lang/rust/issues/117800\">https://github.com/rust-lang/rust/issues/117800</a></p>\n<p>in this case changing the codegen gave a 10% speedup</p>\n<p><a href=\"https://github.com/bevyengine/bevy/pull/10519\">https://github.com/bevyengine/bevy/pull/10519</a></p>",
        "id": 401932411,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1699950800
    },
    {
        "content": "<p>really interesting real-world comparison of monomorphization and dictionary passing for parametric polymorphism </p>\n<p><a href=\"https://planetscale.com/blog/generics-can-make-your-go-code-slower\">https://planetscale.com/blog/generics-can-make-your-go-code-slower</a></p>",
        "id": 401977453,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1699965459
    },
    {
        "content": "<p>Is this glue issue an easy fix? <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> do you know?<br>\n<a href=\"/user_uploads/22008/ZTaUPWOzLkFuHlOESevP6jfh/Screenshot-2023-11-15-at-12.43.29.png\">Screenshot-2023-11-15-at-12.43.29.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/ZTaUPWOzLkFuHlOESevP6jfh/Screenshot-2023-11-15-at-12.43.29.png\" title=\"Screenshot-2023-11-15-at-12.43.29.png\"><img src=\"/user_uploads/22008/ZTaUPWOzLkFuHlOESevP6jfh/Screenshot-2023-11-15-at-12.43.29.png\"></a></div>",
        "id": 402111797,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700012645
    },
    {
        "content": "<p>My work around is to delete the broken parts, but it's really fickle and is breaking CI for the webserver. I haven't figure out a good way to resolve for all the architectures</p>",
        "id": 402111905,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700012700
    },
    {
        "content": "<p>Probably easy to fix</p>",
        "id": 402111952,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700012716
    },
    {
        "content": "<p>I'm generating using <code>roc glue ../roc/crates/glue/src/RustGlue.roc platform/glue2 platform/main-command-glue.roc</code></p>",
        "id": 402111972,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700012724
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/basic-webserver/pull/3\">https://github.com/roc-lang/basic-webserver/pull/3</a></p>",
        "id": 402112034,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700012754
    },
    {
        "content": "<p>I'm not seeing the error. How do I trigger it?</p>",
        "id": 402112869,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700013101
    },
    {
        "content": "<p>I guess it's only happening on CI machines then?? <a href=\"https://github.com/roc-lang/basic-webserver/actions/runs/6871760208/job/18689150356\">https://github.com/roc-lang/basic-webserver/actions/runs/6871760208/job/18689150356</a></p>",
        "id": 402113219,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700013265
    },
    {
        "content": "<p>that</p>",
        "id": 402113333,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700013317
    },
    {
        "content": "<p>If you regenerate the glue using this command <code>roc glue ../roc/crates/glue/src/RustGlue.roc platform/glue2 platform/main-command-glue.roc</code> then in glue2 folder rust analyser should complain</p>",
        "id": 402113336,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700013318
    },
    {
        "content": "<p>that's an interesting discepancy between aarch64 and x86_64</p>",
        "id": 402113363,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700013336
    },
    {
        "content": "<p>cool. I'll fix that</p>",
        "id": 402113375,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700013343
    },
    {
        "content": "<p>Also, what is the difference between <code>glue</code> and <code>command_glue</code>? <code>command_glue</code> doesn't look like it is fully generated with regular glue commands?</p>",
        "id": 402114231,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700013687
    },
    {
        "content": "<p>looks modified</p>",
        "id": 402114244,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700013692
    },
    {
        "content": "<p>Yeah, so that is another workaround. If you run glue, it doesn't generate any of the types for the Command module.</p>",
        "id": 402114519,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700013771
    },
    {
        "content": "<p>ah, yeah, fun</p>",
        "id": 402114594,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700013792
    },
    {
        "content": "<p>I think it is because the mainForHost is <code>mainForHost : Request -&gt; Task Response []</code> and neither <code>Request</code> or <code>Response</code> include anything to do with <code>Command</code> module</p>",
        "id": 402114689,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700013823
    },
    {
        "content": "<p>It feels like it is the same issue as <a href=\"https://github.com/roc-lang/roc/issues/5477\">https://github.com/roc-lang/roc/issues/5477</a> just manifested in a different form. That not all the types are available or something</p>",
        "id": 402114944,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700013909
    },
    {
        "content": "<p>can you try with the <code>rocresult-traits</code> branch that I just pushed?</p>",
        "id": 402116857,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700014609
    },
    {
        "content": "<p>So far looks good. Just pushed to CI</p>",
        "id": 402117757,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700014941
    },
    {
        "content": "<p>That worked <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> thank you</p>",
        "id": 402118061,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700015050
    },
    {
        "content": "<p>Morphic reference implementation source code: <a href=\"https://zenodo.org/records/7712285\">https://zenodo.org/records/7712285</a> (a 6.6gb download because it's a docker image)</p>\n<blockquote>\n<p>This repository contains a compressed docker image file, containing the artifact for the PLDI 2023 paper \"Better Defunctionalization through Lambda Set Specialization.\"  To use this artifact,first decompress the file (using <code>tar</code> or an archiving program like 7zip), and then use <code>docker load</code> to load up the decompressed docker image.  Information for reproducing the results from our PLDI paper is available in README.md files in the 'morphic/' and 'LSSIsabelle/' directories inside the Docker image. Note! the Docker archive must be decompressed and then loaded with 'docker load' (<em>not</em> 'docker import', as our archive does not use squashed layers).</p>\n</blockquote>",
        "id": 402321047,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700079774
    },
    {
        "content": "<p>Loading this tarball into docker is heavy</p>",
        "id": 402359540,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1700097881
    },
    {
        "content": "<p>Anybody else able to load it? Im getting open /var/lib/docker/tmp/docker-import-143820044/repositories: no such file or directory</p>",
        "id": 402361545,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1700098981
    },
    {
        "content": "<p>Oh I didn't gunzip</p>",
        "id": 402361806,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1700099125
    },
    {
        "content": "<p>What tooling do we need to compile a platform? Specifically if someone new was wanting to work with basic-webserver do they only need rust's <code>cargo</code> and a roc nightly?</p>",
        "id": 402374896,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700105494
    },
    {
        "content": "<p>That sounds correct</p>",
        "id": 402394328,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700115716
    },
    {
        "content": "<p>having lots of fun with my web server that never allocates</p>\n<div class=\"codehilite\"><pre><span></span><code>memory allocation of 97165916604719789682: bytes failed\n</code></pre></div>",
        "id": 403344468,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1700560778
    },
    {
        "content": "<p>Today I learned you can also use <code>&gt;</code> to quote on zulip, just like on github.<br>\nNo need for the triple backticks with <code>quote</code></p>",
        "id": 404009258,
        "sender_full_name": "Anton",
        "timestamp": 1700852132
    },
    {
        "content": "<p>Are there any plans to roll <a href=\"https://github.com/roc-lang/basic-webserver/tree/main/platform/src/roc_fn\">roc_fn</a> into glue? I found that a really useful tool for basic-webserver. Would it be a good idea to copy it across into basic-cli too?</p>",
        "id": 404020500,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700860501
    },
    {
        "content": "<p>Oh, was that written manually and not generated by glue? I thought that was part of folkerts new glue work.</p>",
        "id": 404021118,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700861031
    },
    {
        "content": "<p>that is the plan yes</p>",
        "id": 404021357,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1700861219
    },
    {
        "content": "<p>I found the solution to <a href=\"https://github.com/roc-lang/roc/issues/6088\">#6088</a> using the <a href=\"http://cursor.so\">cursor.so</a> editor, I described the problem, told it where to start looking and it found the bug :)<br>\nDefinitely an easy bug but I'm still impressed.</p>",
        "id": 404095007,
        "sender_full_name": "Anton",
        "timestamp": 1700908781
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> and I have been investigating issues with slow tests on Windows and have posted <a href=\"https://discord.com/channels/605571803288698900/1107801545652838400/1177937261367660554\">a question on the Zig discord</a>. Basically we have identified that linking a dynamic library using zig build-lib is much slower than we expected -- 1,793ms vs 81ms.</p>",
        "id": 404103760,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700912694
    },
    {
        "content": "<p>issue <a href=\"https://github.com/ziglang/zig/issues/18123\">https://github.com/ziglang/zig/issues/18123</a></p>",
        "id": 404174113,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1700955662
    },
    {
        "content": "<p>ooh, virus scanner sounds interesting</p>",
        "id": 404174524,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700956079
    },
    {
        "content": "<p>yeah maybe try playing around with that</p>",
        "id": 404175873,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1700957213
    },
    {
        "content": "<p>but I'm sceptical, we clearly see zig rebuilding that mingw stuff</p>",
        "id": 404175908,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1700957231
    },
    {
        "content": "<p>if it helps, Andrew noted that:</p>\n<blockquote>\n<p>it's expected for the first time linking a dynamic lib against libc on windows to take a while to build the assets<br>\nthe cache namespace is determined by the zig version, target, and some other CLI flags</p>\n</blockquote>",
        "id": 404175982,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700957301
    },
    {
        "content": "<p>Llvm is so fun... <span aria-label=\"crying cat\" class=\"emoji emoji-1f63f\" role=\"img\" title=\"crying cat\">:crying_cat:</span><br>\n<a href=\"https://twitter.com/DrawsMiguel/status/1729021572395286744?t=Jv1_8zERJt6Nb0qwp-_oGg&amp;s=19\">https://twitter.com/DrawsMiguel/status/1729021572395286744?t=Jv1_8zERJt6Nb0qwp-_oGg&amp;s=19</a></p>",
        "id": 404465764,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701108860
    },
    {
        "content": "<p>Also, good read: <a href=\"https://muxup.com/2023q4/storing-data-in-pointers\">https://muxup.com/2023q4/storing-data-in-pointers</a></p>",
        "id": 404471802,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701111253
    },
    {
        "content": "<p>another fun read, on simd tricks <a href=\"https://mcyoung.xyz/2023/11/27/simd-base64/\">https://mcyoung.xyz/2023/11/27/simd-base64/</a></p>",
        "id": 404733017,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1701211797
    },
    {
        "content": "<p>it's long but good, and a cool look at the state of <code>std::simd</code></p>",
        "id": 404733095,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1701211817
    },
    {
        "content": "<p>though I tried it on some other code and ... I'm confused  and certainly from a code size standpoint can do better myself</p>",
        "id": 404733134,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1701211836
    },
    {
        "content": "<p>How do we go from a region to a line number?</p>",
        "id": 405475734,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701484625
    },
    {
        "content": "<p>Oh, I found <code>LineInfo</code>, I think I figured this out.</p>",
        "id": 405478913,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701486278
    },
    {
        "content": "<p>The backlog of things I want to work on keeps growing. I think I'm gonna need a bigger whiteboard to track this:<br>\n<a href=\"/user_uploads/22008/tfGMo4wosS05qYv3pp5TOIct/PXL_20231206_164511901.MP.jpg\">tasks.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/tfGMo4wosS05qYv3pp5TOIct/PXL_20231206_164511901.MP.jpg\" title=\"tasks.jpg\"><img src=\"/user_uploads/22008/tfGMo4wosS05qYv3pp5TOIct/PXL_20231206_164511901.MP.jpg\"></a></div>",
        "id": 406345493,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701881230
    },
    {
        "content": "<p>ME now: Why are my roc apps ooming???</p>\n<p>ME an hour ago: disabled refcounting in the roc compiler for testing something.</p>",
        "id": 406364925,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701888253
    },
    {
        "content": "<p>Does anyone know what <code>dynhost.pdb</code> is, and where I might find it? I have generated a binary for Windows using <code>--profiling</code> and am running it in the debugger. Without using profiling I haven't seen this file requested before. I can still disassemble and step though the binary without it, but I'm guess this has more information related to the source.</p>",
        "id": 407436465,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1702374759
    },
    {
        "content": "<p>it's where the debug info lives</p>",
        "id": 407436920,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1702374936
    },
    {
        "content": "<p>Is there a way to generate it?</p>",
        "id": 407437043,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1702374967
    },
    {
        "content": "<p>we don't have a way to do it I think. it should be the same one as for the host?</p>",
        "id": 407437412,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1702375105
    },
    {
        "content": "<p>in other words, when the host gets compiled, it should spit out this file for itself too (zig/rust/ect should). maybe you can just rename it and use that?</p>",
        "id": 407437476,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1702375131
    },
    {
        "content": "<p>Just saw a link to the inko programming language. Interesting idea on memory management. All values have one owner. When the owner goes out of scope it is dropped. Default is move semantics when assigning to a new variable and such (to keep all values having exactly one owner). You can make as many references to a value as you want (mutable and immutable). If an object is freed and references are used later (maybe if they exist at all), it will crash.</p>\n<p>So doubling down on everything has exactly one owner like you usually get in rust via ownership and borrowing, but without complex tracking. No need to rc or GC. Some minor tracking to crash at runtime for use after free.</p>\n<p><a href=\"https://inko-lang.org/\">https://inko-lang.org/</a></p>",
        "id": 409443687,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703183663
    },
    {
        "content": "<p>Trying to be like rust but a lot less complex and faster compiler times, but for that tradeoff, they lose some compile time guarantees and add runtime crashes. And then also a lot less runtime overhead than languages with rc or GC....not a tradeoff I would make, bit interesting to see</p>",
        "id": 409443950,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703183766
    },
    {
        "content": "<p>I met its author at the rust meetup here, but we did not have a lot if time to discuss details . Would be interesting sometime</p>",
        "id": 409449682,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1703186000
    },
    {
        "content": "<p>(they are funded by nlnet, which also funds my nea work)</p>",
        "id": 409449710,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1703186011
    },
    {
        "content": "<p>Today I learned about Rust's <a href=\"https://doc.rust-lang.org/beta/unstable-book/compiler-flags/sanitizer.html\">sanitizer</a>. If miri helped us find bugs, this may be useful as well.</p>",
        "id": 410469665,
        "sender_full_name": "Anton",
        "timestamp": 1703877944
    },
    {
        "content": "<p>miri can't really handle programs that aren't written to be run with miri; it is very limited</p>",
        "id": 410474019,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1703880814
    },
    {
        "content": "<p>e.g. as soon as you do some <code>extern fn</code> thing it just gives up</p>",
        "id": 410474033,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1703880832
    },
    {
        "content": "<p>so an actual sanitizer is probably much more useful for us</p>",
        "id": 410474110,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1703880885
    },
    {
        "content": "<p>is that a thing in Rust? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 410474259,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1703881001
    },
    {
        "content": "<blockquote>\n<p>is that a thing in Rust? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> </p>\n</blockquote>\n<p>Well, yes, I linked to the sanitizer earlier <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>. But perhaps I misunderstand your question.</p>",
        "id": 410529667,
        "sender_full_name": "Anton",
        "timestamp": 1703929552
    },
    {
        "content": "<p>ohh I thought based on the miri comment that the link used miri too!</p>",
        "id": 410542596,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1703939655
    },
    {
        "content": "<p>I think we should add a \"Developing Platforms\" guide for the website, and include discussion or summary about the current state of things. </p>\n<p>After our plugin meeting earlier this morning, I had the thought that it would be helpful to communicate some of the known issues (like glue being in-development) and what the plan/vision is. I can draft something if this would be helpful. </p>\n<p>In future we can update this guide when platform development is more mature.</p>",
        "id": 411279922,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1704412157
    },
    {
        "content": "<p>sounds good! I think there may be other informational things floating around - maybe ask in channel?</p>",
        "id": 411280392,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704412500
    },
    {
        "content": "<p>and yeah I'll publish it this weekend probably</p>",
        "id": 411282795,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704413576
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/395097-compiler-development/topic/Casual.20Conversation/near/411282795\">said</a>:</p>\n<blockquote>\n<p>and yeah I'll publish it this weekend probably</p>\n</blockquote>\n<p>The Strings language reference <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 411282930,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1704413643
    },
    {
        "content": "<p>yeah, that one <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 411285116,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704414566
    },
    {
        "content": "<blockquote>\n<p>The Strings language reference</p>\n</blockquote>\n<p>The examples repo has sort of become a place for both examples and more in-depth explainers as well, should we just put it there? It's useful for users to have just one place they need to go to to find the answers to their questions.</p>",
        "id": 411341175,
        "sender_full_name": "Anton",
        "timestamp": 1704449794
    },
    {
        "content": "<p>interesting, although I think the language reference should really go on <a href=\"http://roc-lang.org\">roc-lang.org</a> rather than in a repo</p>",
        "id": 411344132,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704450543
    },
    {
        "content": "<p>The examples are on <a href=\"http://roc-lang.org\">roc-lang.org</a> at <a href=\"http://www.roc-lang.org/examples\">www.roc-lang.org/examples</a> :)</p>",
        "id": 411345098,
        "sender_full_name": "Anton",
        "timestamp": 1704450894
    },
    {
        "content": "<p>Perhaps we can find a better name instead of \"examples\", but I don't think we should further split up our \"knowledge libraries\", we already have the tutorial, docs, examples, faq, website pages and everything spread out on zulip and github.</p>",
        "id": 411346352,
        "sender_full_name": "Anton",
        "timestamp": 1704451416
    },
    {
        "content": "<p>maybe we could just add lang ref entries in the same sidebar as the buildin modules</p>",
        "id": 411366506,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704459848
    },
    {
        "content": "<p>and maybe this string reference could go at the top of the <code>Str</code> module</p>",
        "id": 411366537,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704459868
    },
    {
        "content": "<p>I want to have separate articles on things like how conditionals and pattern matching and such work, which don't fit into any particular builtin module, so I think we need more than just those - but maybe they can be located in the same place</p>",
        "id": 411366650,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704459934
    },
    {
        "content": "<blockquote>\n<p>and maybe this string reference could go at the top of the <code>Str</code> module</p>\n</blockquote>\n<p>Yeah, that's a good spot for it, I do think we should then do something like add a ToC at the top, or collapse the headers by default. Scrolling to search for information is annoying.</p>",
        "id": 411367657,
        "sender_full_name": "Anton",
        "timestamp": 1704460486
    },
    {
        "content": "<blockquote>\n<p>I want to have separate articles on things like how conditionals and pattern matching and such work, which don't fit into any particular builtin module, so I think we need more than just those - but maybe they can be located in the same place</p>\n</blockquote>\n<p>One option is to to give these articles their own space and to combat fragmentation; create a powerful search page on the website that can search through faq, examples repo, articles, tutorial, zulip and github. The one-stop page for Roc knowledge :)</p>",
        "id": 411368504,
        "sender_full_name": "Anton",
        "timestamp": 1704460902
    },
    {
        "content": "<p>I think it makes sense to have at least these things separated:</p>\n<ul>\n<li>tutorial</li>\n<li>examples</li>\n<li>documentation</li>\n</ul>\n<p>as a reader, I have different motivations for wanting to view each of those, and I would prefer to have them separate</p>",
        "id": 411369055,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704461171
    },
    {
        "content": "<p>I think if we have some documentation that only exists in examples, that's a bug <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 411369118,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704461204
    },
    {
        "content": "<p>I can see arguments for and against having all the language docs (both builtin modules and also the rest of the language reference) in the same place, but I like the idea of trying out having both in one place</p>",
        "id": 411369195,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704461245
    },
    {
        "content": "<blockquote>\n<p>as a reader, I have different motivations for wanting to view each of those</p>\n</blockquote>\n<p>I agreed with this at first but then I thought I could definitely see a user searching through all three (tutorial, examples, docs) to learn about a specific concept in Roc.</p>",
        "id": 411376326,
        "sender_full_name": "Anton",
        "timestamp": 1704464007
    },
    {
        "content": "<blockquote>\n<p>I like the idea of trying out having both in one place</p>\n</blockquote>\n<p>It does seem like that would require substantial remodeling of <a href=\"http://roc-lang.org/builtins\">roc-lang.org/builtins</a> to make it well integrated.</p>",
        "id": 411377213,
        "sender_full_name": "Anton",
        "timestamp": 1704464407
    },
    {
        "content": "<p>Finally got around to the new rob pike talk about what go got right and wrong. This stuck out a ton: <a href=\"https://youtu.be/yE5Tpp2BSGw?si=aSKCgRkpGb-Ugk9c&amp;t=2166\">https://youtu.be/yE5Tpp2BSGw?si=aSKCgRkpGb-Ugk9c&amp;t=2166</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"yE5Tpp2BSGw\" href=\"https://youtu.be/yE5Tpp2BSGw?si=aSKCgRkpGb-Ugk9c&amp;t=2166\"><img src=\"https://uploads.zulipusercontent.net/cd985490be549e2262ac7e78c21b80ea6b1c5dc3/68747470733a2f2f692e7974696d672e636f6d2f76692f79453554707032425347772f64656661756c742e6a7067\"></a></div><p>Huge change that Rob really wishes that they had done: default int type should be an arbitrary sized int type. Of course, you can still have sized integer types with that.</p>",
        "id": 411832166,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704755415
    },
    {
        "content": "<p>interesting - the first benefit he mentioned was \"security\" - which I assume is because Go has wrapping overflow by default</p>",
        "id": 411833988,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704756445
    },
    {
        "content": "<p>I don't really understand what he's proposing <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n<p>I guess something along the lines of \"when doing any arithmetic operation, on overflow upcast to arbitrary int and try again\" but Go is statically typed - so what happens to the integer after that?</p>",
        "id": 411834240,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704756598
    },
    {
        "content": "<p>he says \"you just don't think about integer overflow anymore\"</p>",
        "id": 411834379,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704756663
    },
    {
        "content": "<p>like what happens if I have a struct with a u8 in it, I take it out and multiply it by a gazillion and then try to put it back?</p>",
        "id": 411834441,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704756713
    },
    {
        "content": "<p>seems like just kicking the overflow can down the road? <span aria-label=\"face with raised eyebrow\" class=\"emoji emoji-1f928\" role=\"img\" title=\"face with raised eyebrow\">:face_with_raised_eyebrow:</span></p>",
        "id": 411834496,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704756730
    },
    {
        "content": "<p>He is just saying that the default <code>int</code> type would be an arbitrary precision int that never overflows</p>",
        "id": 411836590,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704758021
    },
    {
        "content": "<p>Probably would use 1 but to signify if It is a pointer to the real int or just an int stored locally on the stack.</p>",
        "id": 411836668,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704758056
    },
    {
        "content": "<p>You would still get overflow if you use the <code>uint8</code> type.</p>",
        "id": 411836737,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704758106
    },
    {
        "content": "<p>His point is just about changing the default to something safer and without overflow</p>",
        "id": 411836759,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704758127
    },
    {
        "content": "<p>Just looking at some things for <code>roc docs</code> and I'm wondering what we should use for the platform name? Currently we could use the <code>platform \"name\" ...</code> but under the module params proposal that changes to the following which no longer includes a string in the module header. </p>\n<div class=\"codehilite\"><pre><span></span><code>platform package [Stdout, Stdin, echo, read]\n    requires [main]\n    provides [mainForHost] to &quot;prebuilt-hosts/&quot;\n    packages [\n        Foo, Bar, Baz from &quot;https://â¦&quot;,\n        Something as Smt from &quot;https://â¦&quot;,\n    ]\n    hosts [\n        echo : Str -&gt; Task {} [],\n        read : Task Str [],\n    ]\n</code></pre></div>",
        "id": 411845963,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1704762646
    },
    {
        "content": "<p>The root path is usually something like <code>platform/main.roc</code> which isn't very descriptive</p>",
        "id": 411846035,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1704762699
    },
    {
        "content": "<p>I kinda wonder if we should have an overall name on the page at all</p>",
        "id": 411857179,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704770146
    },
    {
        "content": "<p>as opposed to just a list of modules, and possibly some customizable introductory text (e.g. the doc comment for the package module)</p>",
        "id": 411857250,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704770195
    },
    {
        "content": "<p>I don't mind if we dont, I guess the main thing I was wanting was to be able to include doc comments in the platform module which don't currently generate</p>",
        "id": 411857896,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1704770679
    },
    {
        "content": "<p>I noticed there was an issue for <a href=\"https://github.com/roc-lang/roc/issues/5712\">displaying platform name in docs</a>, I went down a rabbit hole looking into making a PR for that.</p>",
        "id": 411857942,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1704770735
    },
    {
        "content": "<blockquote>\n<p>Finally got around to the new rob pike talk about what go got right and wrong.</p>\n</blockquote>\n<p>My key takeaway so far is that Roc needs a fun cartoon mascot <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 411861326,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1704773350
    },
    {
        "content": "<p><a href=\"https://www.youtube.com/watch?v=PgUsmO0YyQc&amp;list=PLCiAikFFaMJrgFrWRKn0-1EI3gVZLQJtJ\">https://www.youtube.com/watch?v=PgUsmO0YyQc&amp;list=PLCiAikFFaMJrgFrWRKn0-1EI3gVZLQJtJ</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"PgUsmO0YyQc\" href=\"https://www.youtube.com/watch?v=PgUsmO0YyQc&amp;list=PLCiAikFFaMJrgFrWRKn0-1EI3gVZLQJtJ\"><img src=\"https://uploads.zulipusercontent.net/03ca56e4199f3bc41b01129bae011ac9cf86edfa/68747470733a2f2f692e7974696d672e636f6d2f76692f506755736d4f30597951632f64656661756c742e6a7067\"></a></div>",
        "id": 411864135,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1704775871
    },
    {
        "content": "<p>Eisenberg is so good at explaining the modal extension</p>",
        "id": 411864149,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1704775886
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"611722\">Isaac Van Doren</span> <a href=\"#narrow/stream/395097-compiler-development/topic/Casual.20Conversation/near/411861326\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Finally got around to the new rob pike talk about what go got right and wrong.</p>\n</blockquote>\n<p>My key takeaway so far is that Roc needs a fun cartoon mascot <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>\n</blockquote>\n<p>DALL-E thinks it should be a total bad boy:<br>\n<a href=\"/user_uploads/22008/FWHeh_N6gRMJYkPOQ878RvoS/roc-mascot.png\">roc-mascot.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/FWHeh_N6gRMJYkPOQ878RvoS/roc-mascot.png\" title=\"roc-mascot.png\"><img src=\"/user_uploads/22008/FWHeh_N6gRMJYkPOQ878RvoS/roc-mascot.png\"></a></div>",
        "id": 412026735,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1704841402
    },
    {
        "content": "<p>Rocco the rockinâ Roc mascot <span aria-label=\"guitar\" class=\"emoji emoji-1f3b8\" role=\"img\" title=\"guitar\">:guitar:</span><span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 412035061,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1704845526
    },
    {
        "content": "<p>this rules hahahaha</p>",
        "id": 412039331,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704847318
    },
    {
        "content": "<p>or Rocky? After all, Roc was created in Philadelphia</p>",
        "id": 412039390,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704847328
    },
    {
        "content": "<p>Rocky is good too</p>",
        "id": 412044342,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1704849868
    },
    {
        "content": "<p>Thereâs always the option to make the mascot a bird made of rocks</p>",
        "id": 412044396,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1704849904
    },
    {
        "content": "<p>I'm looking for help to find a name for a concept... most roc platforms will generate an executable, so <code>roc build</code> on your application and you have a program you can execute. </p>\n<p>Some platforms are different and they are for making a plugin, so <code>roc build</code> produces a library instead which will ultimately be loaded and used by another program. </p>\n<p>Is this a fair distinction between two use cases? are there others? What would be good names for these? Executable Platforms and Embedding Platforms?</p>",
        "id": 412248785,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1704935196
    },
    {
        "content": "<p>I'm trying to research what I can to collect infromation for a guide on platform development</p>",
        "id": 412249141,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1704935429
    },
    {
        "content": "<ul>\n<li><code>roc build</code> <a href=\"https://github.com/roc-lang/basic-cli\">basic-cli</a> produces executable</li>\n<li><code>roc build</code> <a href=\"https://github.com/roc-lang/basic-webserver\">basic-webserver</a> produces executable</li>\n<li><code>roc build --lib</code> <a href=\"https://github.com/alexpyattaev/roc-plugin-example\">roc-plugin-example</a> produces dynamic library</li>\n<li><code>roc build --no-link</code> <a href=\"https://github.com/bhansconnect/roc-fuzz\">roc-fuzz</a> produces static library</li>\n<li><code>roc build --no-link</code> <a href=\"https://github.com/lukewilliamboswell/roc-wasm4\">roc-wasm4</a> produces static library</li>\n</ul>",
        "id": 412250829,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1704936637
    },
    {
        "content": "<p>Concept-wise I would not use the word \"plugin\" to describe non-application artifact.</p>",
        "id": 412517130,
        "sender_full_name": "Zeljko Nesic",
        "timestamp": 1705055396
    },
    {
        "content": "<p>This is a new one, I added an extra Task and it fixed an error in alias analysis. <a href=\"https://github.com/lukewilliamboswell/roc-wasm4/blob/8eb900bddbe2cd49c12b0dab8227eee09e3e1d7f/examples/rocci-bird.roc#L266-L268\">https://github.com/lukewilliamboswell/roc-wasm4/blob/8eb900bddbe2cd49c12b0dab8227eee09e3e1d7f/examples/rocci-bird.roc#L266-L268</a></p>\n<p>In this specific case, <code>N</code> Tasks is fine, <code>N + 1</code> is broken, but <code>N + 2</code> is fine again.</p>",
        "id": 412887960,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705295984
    },
    {
        "content": "<p>Nice to have a workaround for this one :)</p>",
        "id": 412919606,
        "sender_full_name": "Anton",
        "timestamp": 1705312029
    },
    {
        "content": "<p>I'm taking some time off and will be back on the 26th of January <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span><br>\nI'll check my mentions and direct messages on zulip once a day for urgent stuff.</p>",
        "id": 413014639,
        "sender_full_name": "Anton",
        "timestamp": 1705344980
    },
    {
        "content": "<p>Enjoy yourself!</p>",
        "id": 413015319,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1705345367
    },
    {
        "content": "<p>enjoy! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 413017929,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1705346729
    },
    {
        "content": "<p>If I read this correctly:</p>\n<p>Error, expected type \"nothing\", found type \"complicated nothing\"</p>\n<blockquote>\n<p>expected type '()', found type 'union { ((),), ((),) }'</p>\n</blockquote>",
        "id": 413049936,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705364522
    },
    {
        "content": "<p>Hello, I'm checking in on Roc progress and I see it's able to build the compiler on Windows now which is awesome. Is the roc compiler itself able to work on Windows yet?</p>",
        "id": 417137087,
        "sender_full_name": "Jared Cone",
        "timestamp": 1705883433
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> would know a lot better, but it looks like we are getting close to enabling all the codegen tests: <a href=\"https://github.com/roc-lang/roc/issues/6408\">#6408</a></p>",
        "id": 417137261,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705883554
    },
    {
        "content": "<p>I've been using roc on Windows. All the LLVM tests pass now as of last night. <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> There is at least one bug with the surgical linker on Windows so you have to use <code>--linker=legacy</code>. Most of the current platforms have been developed without support for Windows, so there is a bit of work to upgrade them and test them out. The roc-wasm4 platform works really well though, and I've not had any issues with my zig platforms. I think we might want to track down and fix the surgical linker before we make a release?? though it hasn't been discussed yet.</p>",
        "id": 417139438,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1705884718
    },
    {
        "content": "<p>Am I using this arg right?</p>\n<div class=\"codehilite\"><pre><span></span><code>d:\\External\\Roc&gt;target\\debug\\deps\\roc build --linker=legacy Roctris\\Roctris.roc\n\nthread &#39;main&#39; has overflowed its stack\n</code></pre></div>",
        "id": 417148594,
        "sender_full_name": "Jared Cone",
        "timestamp": 1705891609
    },
    {
        "content": "<p>Yes that looks right. What platform is roctris using? Ive had similar issues using basic cli</p>",
        "id": 417151461,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1705893823
    },
    {
        "content": "<p>It's a custom CLI platform from before the CLI example was a thing. Yea I get the same error when typing any expression into the repl</p>",
        "id": 417157634,
        "sender_full_name": "Jared Cone",
        "timestamp": 1705898728
    },
    {
        "content": "<p>Can try a release build. Otherwise, getting rust to dump a back trace may help.</p>",
        "id": 417160497,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705900930
    },
    {
        "content": "<p>Definitely something fishy going on. Here I'm telling it to build an empty file:</p>\n<div class=\"codehilite\"><pre><span></span><code>d:\\External\\Roc&gt;target\\debug\\deps\\roc Roctris\\Roctris.roc\nâ[36mââ MISSING HEADER in Roctris\\Roctris.roc ââââââââââââââââââââââââââââââââââââââââ[0m\n\nI am expecting a header, but got stuck here:\n\nâ[36m1â[0mâ[36mââ[0m\n    â[31m^â[0m\n\nI am expecting a module keyword next, one of â[32minterfaceâ[0m, â[32mappâ[0m, â[32mpackageâ[0m\nor â[32mplatformâ[0m.\n</code></pre></div>",
        "id": 417163113,
        "sender_full_name": "Jared Cone",
        "timestamp": 1705903186
    },
    {
        "content": "<p>Different error when building with release:</p>\n<div class=\"codehilite\"><pre><span></span><code>d:\\External\\Roc&gt;target\\release\\deps\\roc build Roctris\\Roctris.roc\nð¨ Rebuilding platform...\nAn internal compiler expectation was broken.\nThis is definitely a compiler bug.\nPlease file an issue here: https://github.com/roc-lang/roc/issues/new/choose\nthread &#39;&lt;unnamed&gt;&#39; panicked at &#39;Error:\n    Failed to rebuild src/main.rs:\n        The executed command was:\n            rustup run nightly-2023-05-28 cargo build --bin host\n        stderr of that command:\n            error: toolchain &#39;nightly-2023-05-28-x86_64-pc-windows-msvc&#39; is not installed\n&#39;, crates\\compiler\\build\\src\\link.rs:1414:21\nstack backtrace:\n   0: std::panicking::begin_panic_handler\n             at /rustc/eb26296b556cef10fb713a38f3d16b9886080f26/library\\std\\src\\panicking.rs:593\n   1: core::panicking::panic_fmt\n             at /rustc/eb26296b556cef10fb713a38f3d16b9886080f26/library\\core\\src\\panicking.rs:67\n   2: roc_build::link::preprocess_host_wasm32\n   3: roc_build::link::rebuild_host\n   4: roc_build::program::build_file\n   5: &lt;anstyle::style::StyleDisplay as core::fmt::Display&gt;::fmt\n   6: &lt;anstyle::style::StyleDisplay as core::fmt::Display&gt;::fmt\n   7: std::sys::windows::thread::impl$0::new::thread_start\n</code></pre></div>",
        "id": 417164620,
        "sender_full_name": "Jared Cone",
        "timestamp": 1705904205
    },
    {
        "content": "<p>First issue looks to be just bad color codes for the terminal</p>",
        "id": 417165487,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705904781
    },
    {
        "content": "<p>Second looks to be a real error. I think windows requires nightly currently for some rust stuff</p>",
        "id": 417165510,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705904801
    },
    {
        "content": "<p>If you can share your platform impl and that app I could have a look?</p>",
        "id": 417170811,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1705908157
    },
    {
        "content": "<p>some cool debugger tricks here <a href=\"https://www.youtube.com/watch?v=PorfLSr3DDI&amp;list=WL&amp;index=1\">https://www.youtube.com/watch?v=PorfLSr3DDI&amp;list=WL&amp;index=1</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"PorfLSr3DDI\" href=\"https://www.youtube.com/watch?v=PorfLSr3DDI&amp;list=WL&amp;index=1\"><img src=\"https://uploads.zulipusercontent.net/371908bca78ef74d643572d12572b93a75f3afb6/68747470733a2f2f692e7974696d672e636f6d2f76692f506f72664c5372334444492f64656661756c742e6a7067\"></a></div>",
        "id": 417271256,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1705941766
    },
    {
        "content": "<p>is there an up-to-date example C platform?</p>",
        "id": 417359979,
        "sender_full_name": "Jared Cone",
        "timestamp": 1705978577
    },
    {
        "content": "<p><code>examples/platform-switching/c-platform/host.c</code> should be</p>",
        "id": 417360464,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1705978826
    },
    {
        "content": "<p>Have we ever discussed having fuzzing within roc, maybe using something like <code>expect</code>? How might something like this work in the future?</p>",
        "id": 417374691,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1705988122
    },
    {
        "content": "<p>I know it was discuss at some point, but no idea where currently. We also discussed property based testing some.</p>",
        "id": 417374780,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705988172
    },
    {
        "content": "<p>Probably a nice property based testing framework will be more useful to most users. Given roc is a safe language fuzzing should be less needed except for low level internals testing. Though both are useful and can be used together to some extent.</p>",
        "id": 417374828,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705988227
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"666594\">@John Murray</span> did you make any progress with <a href=\"#narrow/stream/302903-Writing-a-platform/topic/platform.20effect.20function.20calling.20roc.20closure/near/408637991\">this line of effort</a>?</p>",
        "id": 417375255,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1705988578
    },
    {
        "content": "<p>Hmm...I think I could modify the roc fuzz platform to make a nice property based testing setup with multiple tests.</p>\n<p>Of course baking it into roc would be best. Cause then you don't need a platform at all.</p>",
        "id": 417376157,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705989232
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/395097-compiler-development/topic/Casual.20Conversation/near/417375255\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"666594\">John Murray</span> did you make any progress with <a href=\"#narrow/stream/302903-Writing-a-platform/topic/platform.20effect.20function.20calling.20roc.20closure/near/408637991\">this line of effort</a>?</p>\n</blockquote>\n<p>Not much, ran into some issues with having the platform call arbitrary roc closures.</p>\n<p>I think integration into roc would be the best approach imo</p>",
        "id": 417423544,
        "sender_full_name": "John Murray",
        "timestamp": 1706008513
    },
    {
        "content": "<p>One thing that is a bit sad is that fuzzing tools are not easier to setup and use. In a perfect world, all property testing tools would be based off of a fuzzing engine. Cause fuzzing uses coverage in the actual source code to explore inputs better.</p>\n<p>Like property tests will never generate a proper gzip header (without explicit user guidance), but a fuzzer will.</p>\n<p>That said, property testing is faster and generally doesn't store a bunch of data to disk. Fuzzing has to build a corpus to run well.</p>",
        "id": 417489775,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706029388
    },
    {
        "content": "<p>I thought this was really cool <a href=\"https://ziglang.org/news/announcing-donor-bounties/\">https://ziglang.org/news/announcing-donor-bounties/</a></p>",
        "id": 417598042,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1706086252
    },
    {
        "content": "<p>huh, interesting idea!</p>",
        "id": 417646820,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1706103425
    },
    {
        "content": "<p>Feels off to me. Sure, they spend the donations on paying contributors, but the money isn't going to the specific person who fixes the bounty. That person may not be on zigs payroll at all.</p>",
        "id": 417676962,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706112290
    },
    {
        "content": "<p>So it's kinda like. If you fixes this bug, you also make us money.</p>",
        "id": 417677099,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706112324
    },
    {
        "content": "<p>It's not about bugs, it's about features. I see it like this: if I want to spend some of my free time to implement something for a cool project, then I  might as well make the project some money by implementing a bounty. If I spend my time that means I like the project, therefore I would be happy if the project would have more funding (even if I don't get any of it).</p>",
        "id": 418046257,
        "sender_full_name": "Fabian Schmalzried",
        "timestamp": 1706177355
    },
    {
        "content": "<p>I totally get that.</p>\n<p>Maybe it is more of a problem with how they worded/presented it. By talking about how the money is going towards paying contributors, it makes it sound like people who fix the issue or add the new feature will get some part of the value. They are contributors after all. This is only true if that person happens to be on zigs payroll<br>\n So I would label it as misleading at best. Not any sort of mal intent, but as a company donating, I think it would be easy to miss that point.</p>",
        "id": 418107096,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706197264
    },
    {
        "content": "<p>I'm interested in how this turns out. How the whole zig community is reacting to this and if there even will be a significant amount of bounties.</p>",
        "id": 418279728,
        "sender_full_name": "Fabian Schmalzried",
        "timestamp": 1706277275
    },
    {
        "content": "<p>For sure</p>",
        "id": 418299366,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706283366
    },
    {
        "content": "<p>Hi, I have been conversing with <span class=\"user-mention\" data-user-id=\"686843\">@GordonBGood</span> on the Elm Discourse and got onto the subject of how Roc optimizes away imutables and copying values sometimes by directly modifying structures on the heap. I have also been reading the papers on how this is implemented in Lean4 which seems to have quite a sophisticated implementation of it.<br>\nI was hoping to compare with the code for Roc.<br>\nGrepping the source I found this: <a href=\"https://github.com/roc-lang/roc/blob/main/crates/vendor/morphic_lib/src/api.rs#L176\">https://github.com/roc-lang/roc/blob/main/crates/vendor/morphic_lib/src/api.rs#L176</a><br>\nWhich comments on it, but isn't the implementation.<br>\nSorry, I am not a Rust programmer so not sure how to find my way around... Can anyone point me to where the implementation is? Hoping there are maybe some comments I can read too to understand how it works, or failing that any docs or other sources I can consult (like a GitHub Issue or Pull Request)?<br>\nThanks - first post here. I thought maybe I should post this in #beginners since I cannot even really claim that level of Roc ability!</p>",
        "id": 418317688,
        "sender_full_name": "Rupert Smith",
        "timestamp": 1706289313
    },
    {
        "content": "<p>I have only a limited knowledge but I'll share what I can!</p>\n<p>This is not really in just one place. There are some aspects in the compiler and some in the standard library built-in functions.</p>\n<p>The built-ins are easier to follow. Search for <code>isUnique</code> in the Zig code in this directory:<br>\n<a href=\"https://github.com/roc-lang/roc/tree/main/crates%2Fcompiler%2Fbuiltins%2Fbitcode%2Fsrc\">https://github.com/roc-lang/roc/tree/main/crates%2Fcompiler%2Fbuiltins%2Fbitcode%2Fsrc</a><br>\n(And if you're wondering how/why we use both Zig and Rust, look in the FAQ!)</p>\n<p>One of the compiler features is reuse of allocations. Search for the <code>Reuse</code> variant of the monomorphic IR in <code>crates/compiler/mono</code></p>",
        "id": 418341271,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1706298332
    },
    {
        "content": "<p><a href=\"https://github.com/WebAssembly/WASI/tree/main/preview2#wasi-preview-2\">https://github.com/WebAssembly/WASI/tree/main/preview2#wasi-preview-2</a></p>\n<p>Looks like WASI Preview 2 just launched. This will be fun to play with. <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 418358944,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1706307568
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"686997\">@Rupert Smith</span> our implementation is now based on the one in Koka, but before that we basically implemented the Lean4 strategy. The current approach is better for algebraic data types, but has some nasty edge cases for our built-in lists and strings. So we'll need to move to more of a hybrid of the two systems. </p>\n<p>the core of our logic is in <code>crates/compiler/mono/src/inc_dec.rs</code> and some related modules in the same folder like <a href=\"http://reset_reuse.rs\">reset_reuse.rs</a>.</p>",
        "id": 418361501,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706309116
    },
    {
        "content": "<p>this is all based on a bunch of papers that I think are good for getting the ideas (going from the paper to an implementation is really hard though, so that's why it is very helpful that the lean and koka sources are available).</p>",
        "id": 418361537,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706309155
    },
    {
        "content": "<p><a href=\"https://arxiv.org/pdf/1908.05647.pdf\">https://arxiv.org/pdf/1908.05647.pdf</a><br>\n<a href=\"https://www.microsoft.com/en-us/research/uploads/prod/2020/11/perceus-tr-v1.pdf\">https://www.microsoft.com/en-us/research/uploads/prod/2020/11/perceus-tr-v1.pdf</a><br>\n<a href=\"https://www.microsoft.com/en-us/research/uploads/prod/2021/11/flreuse-tr.pdf\">https://www.microsoft.com/en-us/research/uploads/prod/2021/11/flreuse-tr.pdf</a><br>\n<a href=\"https://www.microsoft.com/en-us/research/uploads/prod/2023/05/fbip.pdf\">https://www.microsoft.com/en-us/research/uploads/prod/2023/05/fbip.pdf</a></p>\n<p>are the papers in chronological order</p>",
        "id": 418361677,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706309258
    },
    {
        "content": "<p>(we like these papers, have read them already, and are always happy to talk about them)</p>",
        "id": 418361957,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706309416
    },
    {
        "content": "<p>Thanks for the help - now I got some more papers to read!</p>",
        "id": 418403229,
        "sender_full_name": "Rupert Smith",
        "timestamp": 1706347484
    },
    {
        "content": "<p>Interesting that all these papers are in the last 3 years - I might have thought this to have been a significant research area in FP in the 90s, whem computers were slower and had way less memory. I guess we didn't have the compiler infrastructure (LLVM etc) that we do now, and also a lot of research focussed on the theory side. MLton was highly optimised and never did this? But then ML did have mutation so I guess not needed.</p>\n<p>The authors of the \"counting immutable beans\" paper suggest that their work is only scratching the surface of what ought to be possible.</p>\n<p>Although, looking at the bilbiographies I see work by Hoffman in 2000 referenced and lots of other stuff around that time. I guess its just a topic that has come back for another round of consideration.</p>",
        "id": 418403679,
        "sender_full_name": "Rupert Smith",
        "timestamp": 1706347907
    },
    {
        "content": "<p>it's an old idea, but does not work in most languages because it is so easy to create RC cycles: in languages with mutation it is trivial (java, ocaml) and in haskell laziness relies on cyclic values. So in most PL tradictions RC just did not make sense</p>",
        "id": 418449542,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706392837
    },
    {
        "content": "<p>until we got some pure, strict languages</p>",
        "id": 418449553,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706392844
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> raised a good point in <a href=\"https://github.com/roc-lang/basic-webserver/issues/23\">https://github.com/roc-lang/basic-webserver/issues/23</a></p>\n<p>Specifically the part about</p>\n<blockquote>\n<p>We need to implement the Body and Buf trait on RocList type. That will enable us to hand the roc list off to hyper with hyper reading directly from the list. Again, no need to copy data or reallocate. The implementation should be pretty simple and the same as would be done for a vector of bytes in rust.</p>\n</blockquote>\n<p>I was thinking maybe we should add this to <code>RustGlue.roc</code> for the benefit of all. Brendan pointed out that <code>Buf</code> and <code>Body</code> are hyper specific, but maybe there is a generic rust trait that would be more suitable.</p>",
        "id": 418460301,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1706403899
    },
    {
        "content": "<p>Looks like we get <code>Buf</code> through <a href=\"https://docs.rs/hyper/latest/hyper/body/trait.Buf.html#impl-Buf-for-Cursor%3CT%3E\">Cursor</a>. To get <a href=\"https://doc.rust-lang.org/nightly/std/io/struct.Cursor.html\">Cursor</a> just requires <a href=\"https://doc.rust-lang.org/nightly/std/convert/trait.AsRef.html\">AsRef&lt;[u8]&gt;</a> which we should be able to implement in general.</p>",
        "id": 418460551,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706404193
    },
    {
        "content": "<p>So that is at least part of the story with just a builtin trait</p>",
        "id": 418460595,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706404205
    },
    {
        "content": "<p>I can add an issue for this if we want to update RustGlue to generate this</p>",
        "id": 418460627,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1706404264
    },
    {
        "content": "<p>I think I understand the idea enough to write up an issue</p>",
        "id": 418460644,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1706404283
    },
    {
        "content": "<p>Huh, apparently inline expectations always run even if they aren't checked: <a href=\"https://github.com/roc-lang/roc/issues/6456\">https://github.com/roc-lang/roc/issues/6456</a></p>",
        "id": 418525670,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706467642
    },
    {
        "content": "<p>they are also not implemented in the repl/dev backend. bit of a shame</p>",
        "id": 418528484,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706469878
    },
    {
        "content": "<p>can someone one aarch64 figure out what LLVM is actually complaining about here </p>\n<p><a href=\"https://github.com/roc-lang/roc/actions/runs/7711240861/job/21016231307?pr=6463\">https://github.com/roc-lang/roc/actions/runs/7711240861/job/21016231307?pr=6463</a></p>\n<p>it works fine on all the other targets, so it's odd</p>",
        "id": 418847115,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706624986
    },
    {
        "content": "<p>I can run it locally, would it be helpful if I provide the IR file? or I can dig into the problem on my own but it will be very ineffective I think</p>\n<p>anyway, let me check, maybe I can do smth about it. at least I already reproduced the problem. it's clear that it's an inconsistency between the expected return type and the actual one</p>",
        "id": 418849706,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1706625674
    },
    {
        "content": "<p>it helped:</p>\n<div class=\"codehilite\"><pre><span></span><code>pub fn powC(arg1: RocDec, arg2: RocDec) callconv(.C) i128 {\n    return @call(.always_inline, RocDec.pow, .{ arg1, arg2 }).num;\n}\n</code></pre></div>\n<p>should I create a pr?</p>",
        "id": 418863340,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1706628638
    },
    {
        "content": "<p>let me check how that affects x86 real quick</p>",
        "id": 418863473,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706628675
    },
    {
        "content": "<p>that works, I'll just amend my commit and force push that. thanks for looking!</p>",
        "id": 418864133,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706628850
    },
    {
        "content": "<p>how do we validate that this fix is correct? <a href=\"https://github.com/roc-lang/roc/pull/6476\">https://github.com/roc-lang/roc/pull/6476</a> it adjusts some CSS, I'm assuming it's correct but actually have no idea</p>",
        "id": 419134902,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706740153
    },
    {
        "content": "<p>I'll take a look at it tonight</p>",
        "id": 419141479,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1706743135
    },
    {
        "content": "<p>What is our recommendation for one off error types?</p>\n<p>In this specific case, I am implementing <code>TryFrom</code> to go from a <code>target_lexicon::Triple</code> to a <code>roc_target::Target</code>. <code>target_lexicon</code> has tons of triples we don't support. So the error type would literally just be a single element enum if I create a full error type. Just <code>UnsupportedTriple</code>.</p>",
        "id": 419181497,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706768564
    },
    {
        "content": "<p>I guess since there is only one possible failure, I could also just implement it with <code>Err(())</code></p>",
        "id": 419181693,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706768737
    },
    {
        "content": "<p>If you make a single variant enum then it's equivalent to <code>()</code> but at least there's an informative name in the source code. And it's easy to extend later if needed.<br>\nI think that's our recommendation at work for Elm and Haskell code.</p>",
        "id": 419212354,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1706782034
    },
    {
        "content": "<p>True. Wish I had roc tag unions in rust.</p>\n<p>Just feels kinda strange to make a one off super specific error enum. But I guess it doesn't hurt anything that it exists.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">TargetFromTripleError</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">TripleUnsupported</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 419274542,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706802261
    },
    {
        "content": "<p>SIMD is wild: decoding a bunch of UTF-8 bytes faster than memcpy, and that's only using 128-bit SIMD</p>\n<p><a href=\"https://twitter.com/mitchellh/status/1754645531312435584\">https://twitter.com/mitchellh/status/1754645531312435584</a></p>",
        "id": 419956933,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1707181821
    },
    {
        "content": "<p>I remember chatting with someone who is working on future CPUs and also in memory mini CPU like devices. He made a big complaint about memcpys being horridly slow compared to how fast it could be.</p>",
        "id": 419957579,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1707182282
    },
    {
        "content": "<p>I heard there was some plan to do dedicated CPU instructions for memcpy in some mainstream chips</p>",
        "id": 419966801,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1707188666
    },
    {
        "content": "<p>like intel or arm or something</p>",
        "id": 419966809,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1707188677
    },
    {
        "content": "<p>Intel has <code>rep mov</code></p>",
        "id": 419966846,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1707188718
    },
    {
        "content": "<p>With the right CPU and extensions for microcode, I think it tends to be a reasonable speed. That said, a number of CPUs it is worse than the generic simd versions</p>",
        "id": 419966878,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1707188755
    },
    {
        "content": "<p>I would assume arm has an equivalent</p>",
        "id": 419966943,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1707188805
    },
    {
        "content": "<p>I think risc v has a generic use the largest simd you have then let me deal with the little bit of leftover bytes type vector instructions.</p>",
        "id": 419966965,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1707188842
    },
    {
        "content": "<blockquote>\n<p>The CPUID feature \"ERMS\", \"Enhanced REP MOVSB\", means you should use <code>rep movsb</code> for any memory copy that's at least 128 bytes. The CPUID feature \"FSRM\", \"Fast Short REP MOVSB\", implies ERMS and additionally means that you should use <code>rep movsb</code> for any memory copy, even if it's shorter than 128 bytes.</p>\n</blockquote>\n<p>This is starting with ice lake where rep mov should be pretty competitive but still isn't always the best on Intel.</p>",
        "id": 419967578,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1707189309
    },
    {
        "content": "<p>From a stack overflow post they suggest that a fully optimized and prefecthed sse2 memcopy can still be ~25% faster for large memory copies. That said it is decently old and theoretically rep.mov should be even better now. That said sse will be consistent across CPUs, rep mov will not, so I think a lot of implementations defensively use sse.</p>",
        "id": 419968459,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1707189924
    },
    {
        "content": "<p>Digging around a bit more, depending on exact CPU, small memcpys (which is most memcpys) that use <code>rep mov</code> could have anywhere from 7 to 50ish cycle of startup latency. For something that is under let's say 64 bytes, it will generally still be way faster to just use 8 byte wide mov operations that target registers or similar.</p>\n<p>This is also why the advice is to avoid memcpys if you know the size (and it is small). The cost of looping for something like this can be pretty darn heavy.</p>",
        "id": 419969258,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1707190449
    },
    {
        "content": "<p>branch mispredictions strike again</p>",
        "id": 419969374,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1707190559
    },
    {
        "content": "<p>Not just that, but like the actual number of extra instructions between the memory movement instructions. Each cycle might load 8 instructions. Those 8 instructions might be check, conditional jump, load, store, inc counter, jump to top, 2 unused after loop instructions.</p>\n<p>Instead it could be 4 load and 4 store operations for the entire copy if the move is 32 bytes and copied with registers.</p>",
        "id": 419969664,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1707190774
    },
    {
        "content": "<p>Loop unrolling of course helps some with this, but then you hit the branch misprediction issues more due to the loop running so few times.</p>",
        "id": 419969796,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1707190844
    },
    {
        "content": "<p><span aria-label=\"star\" class=\"emoji emoji-2b50\" role=\"img\" title=\"star\">:star:</span> Achievement unlocked</p>\n<div class=\"codehilite\"><pre><span></span><code>Panicked during a panic. Aborting\n</code></pre></div>",
        "id": 420310520,
        "sender_full_name": "Anton",
        "timestamp": 1707328762
    },
    {
        "content": "<p>Welcome to the club <span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span></p>",
        "id": 420310710,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1707328826
    },
    {
        "content": "<p><a href=\"https://www.bazhenov.me/posts/2024-02-performance-roulette/\">https://www.bazhenov.me/posts/2024-02-performance-roulette/</a></p>",
        "id": 421779285,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1708053000
    },
    {
        "content": "<p>Related to trying to deal with stuff like this: <a href=\"https://github.com/llvm/llvm-project/blob/main/bolt/README.md\">https://github.com/llvm/llvm-project/blob/main/bolt/README.md</a></p>",
        "id": 421792896,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1708061464
    },
    {
        "content": "<p>So they updated one of the examples in the Mojo vs Rust blog and this is actually a really useful footgun in rust to know of:</p>\n<p>In Rust, this is not a tail recursive function:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">recursive</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kt\">usize</span><span class=\"p\">){</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">stuff</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">with_capacity</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">stuff</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"n\">recursive</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><a href=\"https://rust.godbolt.org/z/7q3os1fsq\">https://rust.godbolt.org/z/7q3os1fsq</a></p>",
        "id": 421968928,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1708138821
    },
    {
        "content": "<p>Another reason why rust is not really a true functional language (despite having many functional features). If you do a lot of true functional programming patterns you may hit cases like this that blow up.</p>",
        "id": 421968965,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1708138856
    },
    {
        "content": "<p>Essentially, the drop function for the <code>Vec</code> is run at the end of the scope. This means that it runs after the recursive call.</p>",
        "id": 421969020,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1708138903
    },
    {
        "content": "<p>As such, the function can't have TCO.</p>",
        "id": 421969025,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1708138911
    },
    {
        "content": "<p>Interesting :)</p>",
        "id": 421998509,
        "sender_full_name": "Anton",
        "timestamp": 1708163719
    },
    {
        "content": "<p>wow, I never thought about that!</p>",
        "id": 422006021,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1708171134
    },
    {
        "content": "<p><a href=\"https://zed.dev/blog/we-have-to-start-over\">https://zed.dev/blog/we-have-to-start-over</a> really resonates with me!</p>",
        "id": 422026247,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1708188154
    },
    {
        "content": "<p>I'd like to try out the llvm interpreter <a href=\"https://llvm.org/docs/CommandGuide/lli.html\">lli</a> to help me debug something. Does anybody here have experience with it?</p>",
        "id": 422035891,
        "sender_full_name": "Anton",
        "timestamp": 1708197168
    },
    {
        "content": "<p>interesting comment about crate features and CLI parsing edge cases from the author of <code>clap</code> <a href=\"https://lobste.rs/s/nqootu/sudo_rs_dependencies_when_less_is_better#c_zzvxru\">https://lobste.rs/s/nqootu/sudo_rs_dependencies_when_less_is_better#c_zzvxru</a></p>",
        "id": 425685788,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1709990390
    },
    {
        "content": "<p>What does expect-fx do exactly?</p>",
        "id": 426165501,
        "sender_full_name": "Anton",
        "timestamp": 1710260642
    },
    {
        "content": "<p>When implemented, it will allow you to mock effects so that you can run an expect on an effectful function</p>",
        "id": 426165708,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1710260692
    },
    {
        "content": "<p>Thanks Brendan :)</p>",
        "id": 426165791,
        "sender_full_name": "Anton",
        "timestamp": 1710260715
    },
    {
        "content": "<p>slight correction: the idea is for that one to run the real effects</p>",
        "id": 426169517,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710261755
    },
    {
        "content": "<p>for integration tests and such</p>",
        "id": 426169543,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710261763
    },
    {
        "content": "<p>So regular expect will be extended to mocking effects?</p>",
        "id": 426169828,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1710261850
    },
    {
        "content": "<p><a href=\"https://docs.google.com/document/d/110MwQi7Dpo1Y69ECFXyyvDWzF4OYv1BLojIm08qDTvg/edit?usp=sharing\">https://docs.google.com/document/d/110MwQi7Dpo1Y69ECFXyyvDWzF4OYv1BLojIm08qDTvg/edit?usp=sharing</a> under \"Simulation Tests\"</p>",
        "id": 426187841,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710267715
    },
    {
        "content": "<p>I think we need a separate keyword for that</p>",
        "id": 426187964,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710267751
    },
    {
        "content": "<p>the proposal uses <code>expect-sim</code></p>",
        "id": 426187974,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710267755
    },
    {
        "content": "<p>Ah yeah</p>",
        "id": 426188616,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1710267989
    },
    {
        "content": "<p>I'm seeing this error <code>thread 'test::lookup_clone_result' panicked at 'misaligned pointer dereference: address must be a multiple of 0x8 but is 0x16dc05d74', crates/repl_expect/src/app.rs:57:45</code>. on this PR <a href=\"https://github.com/roc-lang/roc/pull/6586\">https://github.com/roc-lang/roc/pull/6586</a> but I'm pretty sure it is unrelated. (when I run <code>cargo test</code> locally on my mac, I've pushed to CI to see if that is just my setup)</p>\n<p>Also, I wasn't sure if I should have committed all the glue/tests/fixtures/. Would appreciate if someone could confirm if that is the correct thing to do when they are changed.</p>",
        "id": 426453554,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1710379358
    },
    {
        "content": "<p>Is anyone familar with <code>glue/tests/fixtures</code> able to comment on <a href=\"https://github.com/roc-lang/roc/pull/6586\">https://github.com/roc-lang/roc/pull/6586</a> please?</p>\n<p>There were a bunch of files generated and I'm not sure if they should be committed. This is the header from one of them</p>\n<div class=\"codehilite\"><pre><span></span><code># â ï¸ READ THIS BEFORE MODIFYING THIS FILE! â ï¸\n#\n# This file is a fixture template. If the file you&#39;re looking at is\n# in the fixture-templates/ directory, then you&#39;re all set - go ahead\n# and modify it, and it will modify all the fixture tests.\n#\n# If this file is in the fixtures/ directory, on the other hand, then\n# it is gitignored and will be overwritten the next time tests run.\n</code></pre></div>",
        "id": 426665789,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1710471824
    },
    {
        "content": "<p>I'm guessing I should remove these from the PR and update our gitignore so these aren't included</p>",
        "id": 426665868,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1710471855
    },
    {
        "content": "<p>Yeah, Don't commit them.</p>",
        "id": 426666620,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1710472412
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/395097-compiler-development/topic/Casual.20Conversation/near/426453554\">said</a>:</p>\n<blockquote>\n<p>I'm seeing this error <code>thread 'test::lookup_clone_result' panicked at 'misaligned pointer dereference: address must be a multiple of 0x8 but is 0x16dc05d74', crates/repl_expect/src/app.rs:57:45</code>. on this PR <a href=\"https://github.com/roc-lang/roc/pull/6586\">https://github.com/roc-lang/roc/pull/6586</a> but I'm pretty sure it is unrelated. (when I run <code>cargo test</code> locally on my mac, I've pushed to CI to see if that is just my setup)</p>\n</blockquote>\n<p>I'm seeing this on my M1 mac too, but haven't seen it hit on CI.</p>",
        "id": 426766132,
        "sender_full_name": "Jonathan Schear",
        "timestamp": 1710516136
    },
    {
        "content": "<p>ah, looks like its logged here: <a href=\"https://github.com/roc-lang/roc/issues/6100\">https://github.com/roc-lang/roc/issues/6100</a> (it passes when running with <code>--release</code> (oof))</p>",
        "id": 426767737,
        "sender_full_name": "Jonathan Schear",
        "timestamp": 1710516597
    },
    {
        "content": "<p><a href=\"https://kobzol.github.io/rust/rustc/2024/03/15/rustc-what-takes-so-long.html\">https://kobzol.github.io/rust/rustc/2024/03/15/rustc-what-takes-so-long.html</a></p>\n<p>slightly more detailed benchmarks of what part of compilation takes so long in rust</p>",
        "id": 426890416,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1710595034
    },
    {
        "content": "<p>looks familiar! <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span><br>\n<a href=\"/user_uploads/22008/Ugl--A-QdFcoL-ulD3eNJ-Ux/share_5249400518627343545.png\">share_5249400518627343545.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/Ugl--A-QdFcoL-ulD3eNJ-Ux/share_5249400518627343545.png\" title=\"share_5249400518627343545.png\"><img src=\"/user_uploads/22008/Ugl--A-QdFcoL-ulD3eNJ-Ux/share_5249400518627343545.png\"></a></div>",
        "id": 426895875,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710599464
    },
    {
        "content": "<p>I remain very confused why nobody on the Rust team is even talking about doing a direct to machine code backend</p>",
        "id": 426895990,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710599566
    },
    {
        "content": "<p>that and linking are where all the compilation time goes!</p>",
        "id": 426896027,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710599617
    },
    {
        "content": "<p>Most surprising part of that article to me was how much work the rust frontend must do in release builds.</p>",
        "id": 426899398,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1710602458
    },
    {
        "content": "<p>I expected the release and dev full compilation builds to be more starkly different due to llvm eating way way more time.</p>",
        "id": 426899430,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1710602493
    },
    {
        "content": "<p>Instead we have llvm going from ~70% to ~80%</p>",
        "id": 426899488,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1710602524
    },
    {
        "content": "<p>I guess to be fair, he said it was using the default 16 different units. So llvm could be running on up to 16 threads. So if it was single threaded it would be a lot slower.</p>",
        "id": 426899863,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1710602845
    },
    {
        "content": "<p>yeah that makes sense <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 426900013,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710602968
    },
    {
        "content": "<p>Found a good article on the backend code gen units. Apparently incremental builds set code gen units to 256. So really break up crates in hopes of making compilation able to cache more work: <a href=\"https://nnethercote.github.io/2023/07/11/back-end-parallelism-in-the-rust-compiler.html\">https://nnethercote.github.io/2023/07/11/back-end-parallelism-in-the-rust-compiler.html</a></p>",
        "id": 426900144,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1710603057
    },
    {
        "content": "<p>Interesting</p>",
        "id": 426900458,
        "sender_full_name": "Anton",
        "timestamp": 1710603307
    },
    {
        "content": "<p>yeah that's what <span class=\"user-mention\" data-user-id=\"516570\">@matklad</span> was telling me - more, smaller crates improves caching</p>",
        "id": 426900494,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710603348
    },
    {
        "content": "<p><a href=\"https://twitter.com/mitchellh/status/1769143787862049013\">https://twitter.com/mitchellh/status/1769143787862049013</a></p>\n<p>I don't think LLVM automatically bit-packs booleans (let alone tag unions) does it?</p>",
        "id": 427090287,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710674283
    },
    {
        "content": "<p>no you'd have to do that yourself</p>",
        "id": 427100463,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1710677026
    },
    {
        "content": "<p>there is <code>repr(packed)</code> which might do some amount of packing ?</p>",
        "id": 427100610,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1710677056
    },
    {
        "content": "<p>I thought that just meant no alignment padding</p>",
        "id": 427106846,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710678815
    },
    {
        "content": "<p>really interesting read about debuggers and libc! <a href=\"https://www.brendangregg.com/blog/2024-03-17/the-return-of-the-frame-pointers.html\">https://www.brendangregg.com/blog/2024-03-17/the-return-of-the-frame-pointers.html</a></p>",
        "id": 427144433,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710688853
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/395097-compiler-development/topic/Casual.20Conversation/near/426900494\">said</a>:</p>\n<blockquote>\n<p>yeah that's what <span class=\"user-mention silent\" data-user-id=\"516570\">matklad</span> was telling me - more, smaller crates improves caching</p>\n</blockquote>\n<p>That's kinda surprising. If every crate is split into 256 pieces, you would think that small crate size wouldn't matter. At least not much.</p>",
        "id": 427160919,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1710693119
    },
    {
        "content": "<p>well in the sense of like - as opposed to having big crates with lots of modules</p>",
        "id": 427161415,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710693243
    },
    {
        "content": "<p>because things are cached at the level of crates and not modules, so more crates means a higher % of the build that's cached</p>",
        "id": 427161545,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710693280
    },
    {
        "content": "<p>Sure, but assuming they are actually able to split into fine grain enough pieces (with incremental compilation having a goal of 256 pieces per crate), you would think that most things are split well enough to have decent incremental compilation. Cause even if you have 1024 functions in your crate, that is only compiling 4 functions per code gen unit. So a small change only has to recompile 4 functions (and things that depend on those 4 functions). I guess any crate 256 functions or less means function level caching and dependency graph.</p>",
        "id": 427164890,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1710694165
    },
    {
        "content": "<p>I wonder how many functions the average crate actually is.</p>",
        "id": 427165222,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1710694242
    },
    {
        "content": "<p>Good rant: <a href=\"http://danluu.com/slow-device/\">danluu.com/slow-device/</a></p>\n<p>Only skilled it so far. I'll have to give it a more detailed read later.</p>",
        "id": 427739574,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1710859705
    },
    {
        "content": "<blockquote>\n<p>[...] a lot of forums are now inaccessible to people who don't have enough wealth to buy a device with effectively infinite CPU.</p>\n</blockquote>\n<p>Interesting post, this is not something I've deeply thought about before.</p>",
        "id": 427747246,
        "sender_full_name": "Anton",
        "timestamp": 1710861483
    },
    {
        "content": "<p>I think <a href=\"#narrow/stream/304641-ideas/topic/design.20for.20a.20Roc.20forum/near/423225836\">this proposed forum design</a> should do very well on those benchmarks! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 427757534,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710863940
    },
    {
        "content": "<p>Wow, very interesting read. <br>\nI think about this very time I use a language server <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>. Like this should be able to run on the worst device imaginable, it's actually one of the reasons I started working on developer tooling, seeing that many folks would find some of these tools impossible to use because of their \"everyone has a fast PC\" design.</p>\n<p>On that, I can confidently say rocls runs comfortably on my laptop in its power saving mode with the CPU limited to 800mhz, but we can definitely improve caching to make that even better.</p>",
        "id": 427818509,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1710885558
    },
    {
        "content": "<p><a href=\"https://davidlattimore.github.io/posts/2024/03/18/wild-linker-march-update.html\">https://davidlattimore.github.io/posts/2024/03/18/wild-linker-march-update.html</a> cool rust linker stuff</p>",
        "id": 427876426,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1710923892
    },
    {
        "content": "<p>Finally working on roc again. Continuing my changes to how we handle targets. I am now super deep in letting the types guide me. Very much type error driven development. Kinda satisfying, but also such a gigantic footprint.</p>",
        "id": 428048767,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1710989169
    },
    {
        "content": "<p>Also, I really want to remove target from type checking only flows. It shouldn't be needed, but ends up being required cause uses farther down the compiler need it. Might reorchestrate that. Would require passing it in later instead of storing it in a bunch of types. May not be worth it, but want to look into it more.</p>",
        "id": 428048944,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1710989357
    },
    {
        "content": "<p>that makes sense!</p>",
        "id": 428098793,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1711017732
    },
    {
        "content": "<blockquote>\n<p>yeah that's what @matklad was telling me - more, smaller crates improves caching</p>\n</blockquote>\n<p>Not exactly: this is not as much about the _size_ of the crate, as about the topology of crate graph. If you have one thousand tiny crates which are linearly dependent on each other, this is more or less the same as one giant crate.</p>\n<p>On the other hand, if you have a sort-of start topology with 1 central crate, and 10 mutually-independent supporting crates, than that's great for incremental. </p>\n<p>Topology &gt; Size</p>",
        "id": 428120387,
        "sender_full_name": "matklad",
        "timestamp": 1711025321
    },
    {
        "content": "<p>sure, I meant smaller just in the sense of breaking up a larger crate to be more granular necessarily means making it smaller</p>",
        "id": 428135228,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1711029514
    },
    {
        "content": "<p>I think we should make the <code>--linker=legacy</code> the default option for Windows for now as we know we have a surgical linker bug that segfaults. <span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> what do you think?</p>",
        "id": 428251120,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1711075156
    },
    {
        "content": "<p>well we never really investigated that bug right? on the other hand, using the legacy linker as the default might be pragmatic for now</p>",
        "id": 428374546,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1711127014
    },
    {
        "content": "<p>I'm not opposed to it, anyway</p>",
        "id": 428374563,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1711127020
    },
    {
        "content": "<p>Cranelift Rust frontend putting up some impressive improvements: <a href=\"https://www.williballenthin.com/post/rust-compilation-time/\">https://www.williballenthin.com/post/rust-compilation-time/</a></p>",
        "id": 429088632,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1711206642
    },
    {
        "content": "<p>Good read on bash pipes, benchmarking, and zig: <a href=\"https://mtlynch.io/zig-extraneous-build/\">https://mtlynch.io/zig-extraneous-build/</a></p>\n<p>Shows a very easy benchmarking mistake to make with pipes.</p>",
        "id": 429151765,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711254981
    },
    {
        "content": "<blockquote>\n<p>It turns out that all commands in a bash pipeline start at the same time.</p>\n</blockquote>\n<p>Weird...</p>",
        "id": 429322409,
        "sender_full_name": "Anton",
        "timestamp": 1711357511
    },
    {
        "content": "<p>yeah this is fun</p>\n<div class=\"codehilite\"><pre><span></span><code>$ time $(sleep 1 | sleep 1)\n\nreal    0m1.020s\nuser    0m0.002s\nsys 0m0.006s\n</code></pre></div>",
        "id": 429322605,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1711357570
    },
    {
        "content": "<p>I'm surprised more people don't know this. Pipe can only store like 4k characters by default. The inputting app will get stuck on IO if the next isn't processing fast enough.</p>\n<p>Also, you want them all to start at the same time so that it runs faster as a whole without eating all your memory buffering.</p>\n<p>This is also why you can pipe through a programming like tee and see live output.</p>",
        "id": 429420852,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711376788
    },
    {
        "content": "<p>this is sweet! <a href=\"https://coredumped.dev/2024/03/25/bump-allocation-up-or-down/\">https://coredumped.dev/2024/03/25/bump-allocation-up-or-down/</a></p>",
        "id": 429441587,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1711381072
    },
    {
        "content": "<p>Not sure if anyone here has read more details of the new apple hardware vulnerability, but I hate how nice things that make CPUs faster are almost always the source of security vulnerabilities: <a href=\"https://gofetch.fail/\">https://gofetch.fail/</a></p>",
        "id": 429530482,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711410766
    },
    {
        "content": "<p>In this case, this vulnerability was fully explored on apple hardware, but probably also affects the newest intel hardware.</p>",
        "id": 429530516,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711410795
    },
    {
        "content": "<p>It probably will also affect other new hardware if they don't make changes/fixes. Apple was just ahead of the game on adding data dependent memory prefetchers to their cpus (part of the reason why the apple M chips are so fast)</p>",
        "id": 429530572,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711410841
    },
    {
        "content": "<p>Basically when they load a cache line, they check it for things that look like pointers. If they find one, they prefetch it. Huge gain when loading a linked list for example.</p>",
        "id": 429530676,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711410898
    },
    {
        "content": "<p>That said, I don't know how much this vulnerability matters. It has to be exploited by a process running locally on your machine. If an attacker has a process running locally on your machine, you are probably already screwed.</p>",
        "id": 429530729,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711410946
    },
    {
        "content": "<p><a href=\"https://blog.rust-lang.org/inside-rust/2024/03/26/this-development-cycle-in-cargo-1.78.html\">https://blog.rust-lang.org/inside-rust/2024/03/26/this-development-cycle-in-cargo-1.78.html</a> has some cool ideas for testing the styling of compiler output with svgs</p>",
        "id": 429748653,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1711491328
    },
    {
        "content": "<p>whoooa, apparently Windows APIs are going UTF-8 by default! <span aria-label=\"astonished\" class=\"emoji emoji-1f632\" role=\"img\" title=\"astonished\">:astonished:</span> </p>\n<p><a href=\"https://stackoverflow.com/questions/70201846/windows-11-default-api-and-utf-encoding/70263105#70263105\">https://stackoverflow.com/questions/70201846/windows-11-default-api-and-utf-encoding/70263105#70263105</a></p>",
        "id": 429751501,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1711493106
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/395097-compiler-development/topic/Casual.20Conversation/near/429530482\">said</a>:</p>\n<blockquote>\n<p>Not sure if anyone here has read more details of the new apple hardware vulnerability, but I hate how nice things that make CPUs faster are almost always the source of security vulnerabilities: <a href=\"https://gofetch.fail/\">https://gofetch.fail/</a></p>\n</blockquote>\n<p>Wow that exploit is fascinating: <a href=\"https://youtu.be/klhDbLV4Los?si=5Gc8RZf1B98aGV6o\">https://youtu.be/klhDbLV4Los?si=5Gc8RZf1B98aGV6o</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"klhDbLV4Los\" href=\"https://youtu.be/klhDbLV4Los?si=5Gc8RZf1B98aGV6o\"><img src=\"https://uploads.zulipusercontent.net/3ac543f533c1b18bf7a0229642f221cf4965b805/68747470733a2f2f692e7974696d672e636f6d2f76692f6b6c6844624c56344c6f732f64656661756c742e6a7067\"></a></div>",
        "id": 429819169,
        "sender_full_name": "Fabian Schmalzried",
        "timestamp": 1711532757
    },
    {
        "content": "<p>I've been wanting a thing to help me print debug parser issues. I've been using snapshot tests which are great, but don't quite seem to be enough. </p>\n<p>So I started threading a boolean through the parser functions and didn't really stop to think if that was a good idea. It started as a helper so I could pass in from the top of a module and then I could print debug for just that modules information. Just wondering if this would be useful to keep around, or if I shouldn't include in a PR -- there's a lot of parser functions and when you touch one it kind of explodes to all of them.</p>",
        "id": 430020109,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1711615546
    },
    {
        "content": "<p>I figure something like this might be optimised out of any release build if it is a constant <code>false</code> value and there was nothing using it.</p>",
        "id": 430020318,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1711615629
    },
    {
        "content": "<p>For example I can do something like the following and it will only print out for the modules where I have passed in <code>true</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">print_debug</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">dbg!</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">result</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>Probably a bad idea, but it was the only way I could think to do this.</p>",
        "id": 430021889,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1711616233
    },
    {
        "content": "<p>A constant would be better. Optimizing away a parameter that is passed deep down the stack can happen but is unlikely.</p>",
        "id": 430092495,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711639322
    },
    {
        "content": "<p>Id recommend an env var or something</p>",
        "id": 430136261,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1711649309
    },
    {
        "content": "<p>Check out roc_debug_flags and their uses elsewhere in the codebase</p>",
        "id": 430136344,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1711649330
    },
    {
        "content": "<p>I just learned about <code>RUSTFLAGS=\"-A warnings\" cargo check</code> and I am SO HAPPY</p>",
        "id": 430424032,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1711837210
    },
    {
        "content": "<p>it's <code>cargo check</code> but where it doesn't print warnings, only errors</p>",
        "id": 430424040,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1711837223
    },
    {
        "content": "<p>achievement unlocked: new Rust compiler error I've never seen before <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> </p>\n<p><a href=\"/user_uploads/22008/aU7KDlftts1kCRn9TbFx9y_o/Screenshot-2024-03-31-at-12.41.37AM.png\">Screenshot-2024-03-31-at-12.41.37AM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/aU7KDlftts1kCRn9TbFx9y_o/Screenshot-2024-03-31-at-12.41.37AM.png\" title=\"Screenshot-2024-03-31-at-12.41.37AM.png\"><img src=\"/user_uploads/22008/aU7KDlftts1kCRn9TbFx9y_o/Screenshot-2024-03-31-at-12.41.37AM.png\"></a></div>",
        "id": 430445412,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1711860146
    },
    {
        "content": "<p>Is it just me or am I looking at the same line twice:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">-## This means the #U64 this function returns can always be safely converted to #I64 or #I32, depending on the target.</span>\n<span class=\"gi\">+## This means the #U64 this function returns can always be safely converted to #I64 or #I32, depending on the target.</span>\n</code></pre></div>",
        "id": 430495777,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711908264
    },
    {
        "content": "<p>yeah? unless there is some whitespace difference?</p>",
        "id": 430495829,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1711908331
    },
    {
        "content": "<p>Ah, extra space at the end of the line.</p>",
        "id": 430495855,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711908359
    },
    {
        "content": "<p>I'm trying to run the fuzzer for the parser and a bit stuck with rust; does anyone have any pointers?</p>\n<div class=\"codehilite\"><pre><span></span><code>10:43:02 ~/Documents/GitHub/roc/crates/compiler/test_syntax/fuzz optional-unit-assign $ cargo +nightly fuzz run -j2 fuzz_expr -- -dict=../parse/fuzz/dict.txt\nerror: failed to parse manifest at `/Users/luke/Documents/GitHub/roc/crates/compiler/test_syntax/fuzz/Cargo.toml`\n\nCaused by:\n  error inheriting `version` from workspace root manifest&#39;s `workspace.package.version`\n\nCaused by:\n  `workspace.package.version` was not defined\n</code></pre></div>",
        "id": 430682050,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1712015113
    },
    {
        "content": "<p>Figured it out, and found my first bug <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> with the fuzzer.</p>",
        "id": 430689391,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1712020354
    },
    {
        "content": "<p>Fuzzers are good at finding the same bug in many ways, so be a bit careful with that.</p>",
        "id": 430691746,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712021689
    },
    {
        "content": "<p>Does the surgical linker require position independent executables(pie) as input?</p>",
        "id": 430823461,
        "sender_full_name": "Anton",
        "timestamp": 1712073567
    },
    {
        "content": "<p>I would need to think about this more. That just means the executable can be loaded to anywhere in memory. That shouldn't strictly matter, but it probably does. My default thought is definitely yes.</p>",
        "id": 430834337,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712077074
    },
    {
        "content": "<p>I'm finally starting to look at the big refcounting change for lists again. Where we need to pass the element dec functions into list functions so that when a list is free, all of the elements are decremented. Instead of doing recursive increfs and decrefs that kill performance everywhere.</p>\n<p>I am so glad that llvm ir is strongly typed. Makes it list out all of the function signature mismatches for me. That said, still have hundreds of tests to fix....will be a journey.</p>",
        "id": 431428737,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712280499
    },
    {
        "content": "<p><code>PASS [   0.665s] test_gen::test_gen gen_list::basic_int_list_len</code><br>\nFirst heart beat. Got a super basic test passing. Now just to wire everything else up....</p>",
        "id": 431430478,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712281745
    },
    {
        "content": "<p>~70 passing gen_list tests and ~130 failing.... What is that 35% passing. Not bad for most functions not being wired yet.</p>",
        "id": 431430576,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712281822
    },
    {
        "content": "<p>yooooooo I am SO HYPE for this change!!!</p>",
        "id": 431433663,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712283857
    },
    {
        "content": "<p>Will probably be slow progress with mem leaks and segfaults, but pushing it forward</p>",
        "id": 431435348,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712285276
    },
    {
        "content": "<p>This is actually going surprisingly fast (though I have only touched the llvm backend so far).</p>\n<p>gen_list: <code>208 tests run: 183 passed, 25 failed</code></p>\n<p>All failures are now segfaults. Most are probably from <a class=\"stream-topic\" data-stream-id=\"395097\" href=\"/#narrow/stream/395097-compiler-development/topic/Host.20Refcounting\">#compiler development &gt; Host Refcounting</a> and rust not knowing how to free refcounted lists.</p>",
        "id": 431545183,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712329130
    },
    {
        "content": "<p>I'm just wondering what is going on with CI for this PR <a href=\"https://github.com/roc-lang/roc/pull/6587\">https://github.com/roc-lang/roc/pull/6587</a></p>",
        "id": 433013170,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1712980924
    },
    {
        "content": "<p>It needed a new release of basic-cli, the bundle is made now, so I expect we'll be able to merge it today</p>",
        "id": 433034209,
        "sender_full_name": "Anton",
        "timestamp": 1713001940
    },
    {
        "content": "<p>basic-cli also typically uses nightly Roc, but in this case we needed to use the branch, so I had to make some changes for that.</p>",
        "id": 433034584,
        "sender_full_name": "Anton",
        "timestamp": 1713002339
    },
    {
        "content": "<p>Ahk, thank you. I wasn't sure. I thought it might be stuck or something.</p>",
        "id": 433039081,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713007080
    },
    {
        "content": "<p>Does anyone know what could be causing this error in CI?</p>\n<div class=\"codehilite\"><pre><span></span><code>error: cvt doesn&#39;t compile for this platform yet\n  --&gt; /Users/m1ci/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cvt-0.1.2/src/lib.rs:22:9\n   |\n22 |         compile_error!(&quot;cvt doesn&#39;t compile for this platform yet&quot;);\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: could not compile `cvt` (lib) due to previous error\n</code></pre></div>",
        "id": 433100060,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713066383
    },
    {
        "content": "<p>Or more specifically, how do we resolve something like this? </p>\n<p>It seems like something that shouldn't have passed CI the first time, and not a flake. </p>\n<p>I think it's unrelated to the parser/can changes on my chaining syntax PR.</p>",
        "id": 433101759,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713068310
    },
    {
        "content": "<p>I'm investigating <a href=\"https://github.com/roc-lang/roc/issues/6641\">#6641</a>, and I'm curious why macros like <code>skip_second</code> are macros when they could be functions - I've only verified that for <code>skip_second</code> but it looks like its true for others like <code>and</code> and <code>between</code>. Wouldn't it be faster to compile a regular function? And any runtime performance loss from could be replicated with <code>#[inline(always)]</code>.</p>",
        "id": 433171171,
        "sender_full_name": "Jackson Wambolt",
        "timestamp": 1713134130
    },
    {
        "content": "<p>this _might_ be a renmant of the earlier parser where we wanted to use functions but that caused the rust compiler to just grind to a halt</p>",
        "id": 433171245,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1713134183
    },
    {
        "content": "<p>so if using a function now just works I'd say go for it!</p>",
        "id": 433171254,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1713134201
    },
    {
        "content": "<p>the original problem was that types got too large but both the rust compiler and our parser implementation have improved in the meantime</p>",
        "id": 433171297,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1713134271
    },
    {
        "content": "<p>Awesome, I'll see which ones can be replaced and if it compiles faster now I'll submit a PR</p>",
        "id": 433171363,
        "sender_full_name": "Jackson Wambolt",
        "timestamp": 1713134331
    },
    {
        "content": "<p>I think functions are preferable it they are not slower (so if compile time stays the same that's also fine)</p>",
        "id": 433171409,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1713134380
    },
    {
        "content": "<p>yeah exactly</p>",
        "id": 433171783,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713134730
    },
    {
        "content": "<p>a lot of those used to be functions and then the rust type checker was giving \"recursion limit reached\" errors</p>",
        "id": 433171798,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713134757
    },
    {
        "content": "<p>the solution was to replace them with macros so that they didn't participate in type checking as functions</p>",
        "id": 433171849,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713134777
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> on what OS are you running this? Based <a href=\"https://github.com/badboy/cvt/blob/45d62f6f298a69bab6cd573c73eee2d13b7a37af/src/lib.rs#L22\">on the relevant source</a> it should work on macos, linux and windows...</p>",
        "id": 433242175,
        "sender_full_name": "Anton",
        "timestamp": 1713173385
    },
    {
        "content": "<p>See CI in <a href=\"https://github.com/roc-lang/roc/pull/6634\">this PR</a></p>",
        "id": 433244055,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713173946
    },
    {
        "content": "<p>I've investigated a bit and I can't figure out why it doesn't work on my mac.</p>",
        "id": 433244207,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713174000
    },
    {
        "content": "<p>It fails when building for wasm so the relevant source code makes sense at least. There were some changes to dependencies in that PR so I think cvt is now accidentally included in the wasm build and the cvt functionality doesn't make sense for wasm.</p>",
        "id": 433246683,
        "sender_full_name": "Anton",
        "timestamp": 1713174751
    },
    {
        "content": "<p>Ohk, so adding the error macros or test utils might be causing it?</p>",
        "id": 433246842,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713174812
    },
    {
        "content": "<p>Yeah, I expect one of them has cvt as a dependency</p>",
        "id": 433246904,
        "sender_full_name": "Anton",
        "timestamp": 1713174838
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>[package]\nname = &quot;roc_error_macros&quot;\ndescription = &quot;Provides macros for consistent reporting of errors in Roc&#39;s rust code.&quot;\n\nauthors.workspace = true\nedition.workspace = true\nlicense.workspace = true\nversion.workspace = true\n\n[dependencies]\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>[package]\nname = &quot;roc_test_utils&quot;\ndescription = &quot;Utility functions used all over the code base.&quot;\n\nauthors.workspace = true\nedition.workspace = true\nlicense.workspace = true\nversion.workspace = true\n\n[dependencies]\npretty_assertions.workspace = true\nremove_dir_all.workspace = true\n\n[dev-dependencies]\n</code></pre></div>",
        "id": 433247165,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713174913
    },
    {
        "content": "<p>It may be further down the dependency tree, remove_dir_all probably does not make sense for wasm</p>",
        "id": 433247412,
        "sender_full_name": "Anton",
        "timestamp": 1713174990
    },
    {
        "content": "<p>Yeah so it's definitely <code>remove_dir_all</code></p>\n<div class=\"codehilite\"><pre><span></span><code>[target.&#39;cfg(not(windows))&#39;.dependencies]\ncvt = &quot;0.1.1&quot;\nlibc = &quot;0.2&quot;\n</code></pre></div>",
        "id": 433247682,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713175083
    },
    {
        "content": "<p>I can probably do without that macro if that would be the easiest solution</p>",
        "id": 433247895,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713175154
    },
    {
        "content": "<p>Just compare strings normally. It's just to show pretty colors for the snapshots</p>",
        "id": 433247940,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713175175
    },
    {
        "content": "<p>I'm just using this <code>`use roc_test_utils::assert_multiline_str_eq;</code></p>",
        "id": 433248110,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713175218
    },
    {
        "content": "<p>We could also split some test_utils off into test_utils_no_wasm, there we can put all the dir stuff in.</p>",
        "id": 433248454,
        "sender_full_name": "Anton",
        "timestamp": 1713175329
    },
    {
        "content": "<p>Merged the changes from <a href=\"https://github.com/roc-lang/roc/pull/6643\">https://github.com/roc-lang/roc/pull/6643</a> and that fixes the issue above. <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 433254878,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713177495
    },
    {
        "content": "<p>It looks like glue has regressed somehow, or at least there is a bug in module imports which prevents us from generating the glue types for roc-wasm4.</p>\n<div class=\"codehilite\"><pre><span></span><code>$ roc glue ../roc/crates/glue/src/ZigGlue.roc platform/glue/ platform/main-glue.roc\n\nââ MODULE NOT IMPORTED in ../roc/crates/glue/src/../platform/Types.roc âââââââââ\n\nThe `TypeId` module is not imported:\n\n37â          id = TypeId.fromU64 index\n                  ^^^^^^^^^^^^^^\n\nDid you mean to import it?\n</code></pre></div>",
        "id": 434550008,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713664389
    },
    {
        "content": "<p>I found a workaround by just copying the opaque type in directly.</p>",
        "id": 434550128,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713664510
    },
    {
        "content": "<p>Just discovered that using <code>dbg</code> statements can mess with <code>!</code> suffixes... needs further investigation.</p>",
        "id": 435095063,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713924890
    },
    {
        "content": "<p>Can you make an issue for that?</p>",
        "id": 435156021,
        "sender_full_name": "Anton",
        "timestamp": 1713953454
    },
    {
        "content": "<p>Can do. I'll also fix it, hopefully soon</p>",
        "id": 435157127,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713953924
    },
    {
        "content": "<p>Looking at timing of our compilation, almost all of the frontend time is spent in \"Other\". do we know what that is likely to be? Is it mono? Something else?</p>\n<p>Ex:</p>\n<div class=\"codehilite\"><pre><span></span><code>            0.036 ms   Read .roc file from disk\n            0.045 ms   Parse header\n            0.147 ms   Parse body\n            1.059 ms   Canonicalize\n            0.000 ms   Constrain\n            1.395 ms   Solve\n            0.058 ms   Find Specializations\n            1.337 ms   Make Specializations (Pass 0)\n            0.170 ms   Make Specializations (Pass 1)\n            0.030 ms   Make Specializations (Pass 2)\n           15.413 ms   Other\n</code></pre></div>",
        "id": 435953972,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1714365958
    },
    {
        "content": "<p>make specializations is mono</p>",
        "id": 436146245,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1714427407
    },
    {
        "content": "<p>might be coordination overhead, especially if there are multiple mono passes</p>",
        "id": 436146311,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1714427437
    },
    {
        "content": "<p>Even our basic <code>rocLovesZig</code> example where main is just a string spends most of the time in other across essentially all modules. Though I guess it is compiling all of the standard library.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>timings</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\"><pre><span></span><code>Here&#39;s how long each module took to compile:\n\n    Bool\n            0.000 ms   Read .roc file from disk\n            0.000 ms   Parse header\n            0.098 ms   Parse body\n            0.144 ms   Canonicalize\n            0.000 ms   Constrain\n            0.020 ms   Solve\n            0.013 ms   Find Specializations\n            0.010 ms   Make Specializations\n            1.003 ms   Other\n\n            1.289 ms   Total\n\n    #Derived_gen\n            0.000 ms   Read .roc file from disk\n            0.000 ms   Parse header\n            0.000 ms   Parse body\n            0.000 ms   Canonicalize\n            0.000 ms   Constrain\n            0.000 ms   Solve\n            0.001 ms   Find Specializations\n            0.005 ms   Make Specializations\n            0.000 ms   Other\n\n            0.000 ms   Total\n\n    Str\n            0.000 ms   Read .roc file from disk\n            0.000 ms   Parse header\n            0.580 ms   Parse body\n            0.796 ms   Canonicalize\n            0.000 ms   Constrain\n            0.076 ms   Solve\n            0.053 ms   Find Specializations\n            0.023 ms   Make Specializations\n            4.636 ms   Other\n\n            6.164 ms   Total\n\n    Dict\n            0.000 ms   Read .roc file from disk\n            0.000 ms   Parse header\n            2.035 ms   Parse body\n            3.452 ms   Canonicalize\n            0.000 ms   Constrain\n            0.247 ms   Solve\n            0.226 ms   Find Specializations\n            0.039 ms   Make Specializations\n            4.616 ms   Other\n\n           10.615 ms   Total\n\n    List\n            0.000 ms   Read .roc file from disk\n            0.000 ms   Parse header\n            1.550 ms   Parse body\n            2.359 ms   Canonicalize\n            0.000 ms   Constrain\n            0.136 ms   Solve\n            0.140 ms   Find Specializations\n            0.030 ms   Make Specializations\n            0.995 ms   Other\n\n            5.209 ms   Total\n\n\n            0.021 ms   Read .roc file from disk\n            0.015 ms   Parse header\n            0.503 ms   Parse body\n            0.044 ms   Canonicalize\n            0.000 ms   Constrain\n            0.415 ms   Solve\n            0.017 ms   Find Specializations\n            0.068 ms   Make Specializations\n           13.683 ms   Other\n\n           14.766 ms   Total\n\n    Num\n            0.000 ms   Read .roc file from disk\n            0.000 ms   Parse header\n            0.605 ms   Parse body\n            1.051 ms   Canonicalize\n            0.000 ms   Constrain\n            0.185 ms   Solve\n            0.150 ms   Find Specializations\n            0.042 ms   Make Specializations\n            0.622 ms   Other\n\n            2.656 ms   Total\n\n    Result\n            0.000 ms   Read .roc file from disk\n            0.000 ms   Parse header\n            0.087 ms   Parse body\n            0.098 ms   Canonicalize\n            0.000 ms   Constrain\n            0.044 ms   Solve\n            0.030 ms   Find Specializations\n            0.006 ms   Make Specializations\n            1.042 ms   Other\n\n            1.306 ms   Total\n\n    #UserApp\n            0.036 ms   Read .roc file from disk\n            0.028 ms   Parse header\n            0.002 ms   Parse body\n            0.044 ms   Canonicalize\n            0.000 ms   Constrain\n            0.516 ms   Solve\n            0.005 ms   Find Specializations\n            0.034 ms   Make Specializations\n           13.651 ms   Other\n\n           14.317 ms   Total\n\n    Decode\n            0.000 ms   Read .roc file from disk\n            0.000 ms   Parse header\n            0.130 ms   Parse body\n            0.181 ms   Canonicalize\n            0.000 ms   Constrain\n            0.210 ms   Solve\n            0.009 ms   Find Specializations\n            0.006 ms   Make Specializations\n            4.937 ms   Other\n\n            5.475 ms   Total\n\n    Inspect\n            0.000 ms   Read .roc file from disk\n            0.000 ms   Parse header\n            0.454 ms   Parse body\n            0.634 ms   Canonicalize\n            0.000 ms   Constrain\n            0.267 ms   Solve\n            0.034 ms   Find Specializations\n            0.017 ms   Make Specializations\n            5.733 ms   Other\n\n            7.139 ms   Total\n\n    Box\n            0.000 ms   Read .roc file from disk\n            0.000 ms   Parse header\n            0.039 ms   Parse body\n            0.100 ms   Canonicalize\n            0.000 ms   Constrain\n            0.017 ms   Solve\n            0.032 ms   Find Specializations\n            0.011 ms   Make Specializations\n            1.074 ms   Other\n\n            1.273 ms   Total\n\n    Encode\n            0.000 ms   Read .roc file from disk\n            0.000 ms   Parse header\n            0.095 ms   Parse body\n            0.261 ms   Canonicalize\n            0.000 ms   Constrain\n            0.178 ms   Solve\n            0.010 ms   Find Specializations\n            0.017 ms   Make Specializations\n            2.596 ms   Other\n\n            3.156 ms   Total\n\n    Set\n            0.000 ms   Read .roc file from disk\n            0.000 ms   Parse header\n            0.349 ms   Parse body\n            0.539 ms   Canonicalize\n            0.000 ms   Constrain\n            0.185 ms   Solve\n            0.037 ms   Find Specializations\n            0.017 ms   Make Specializations\n           10.311 ms   Other\n\n           11.438 ms   Total\n\n    Hash\n            0.000 ms   Read .roc file from disk\n            0.000 ms   Parse header\n            0.133 ms   Parse body\n            0.152 ms   Canonicalize\n            0.000 ms   Constrain\n            0.025 ms   Solve\n            0.011 ms   Find Specializations\n            0.012 ms   Make Specializations\n            5.887 ms   Other\n\n            6.219 ms   Total\n\n (note, total time ~20ms)\n</code></pre></div>\n</div></div>",
        "id": 436147073,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1714427800
    },
    {
        "content": "<p>Oh, I think I see.</p>\n<p>We are measuring time spent waiting on dependencies as part of compiling a module<br>\nList: 5.2ms<br>\nDict (which depends on list): 10.6ms with 4.6ms other<br>\nSet (which depends on dict): 11.4ms with 10.3ms other</p>\n<p>UserApp depends on everything else but is just a string and super trivial. So it has <code>14.317 ms</code> total and <code>13.651 ms</code> for other. I think the <code>13.651 ms</code> was waiting on all deps.</p>",
        "id": 436147703,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1714428069
    },
    {
        "content": "<p>yeah that makes sense. the earlier phases cannot really be parallelized across the entire dependency graph, and even mono cannot really be, so the wall time for a single module is likely to be much higher than the actual work done for it</p>",
        "id": 436148950,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1714428574
    },
    {
        "content": "<p>It the process of updating roc-json to the latest basic-cli release I've discovered a strange compiler bug I think. Haven't tracked down what the issue is, but have been able to isolate it to the <code>package/Option.roc</code> module.</p>\n<div class=\"codehilite\"><pre><span></span><code>$ RUST_BACKTRACE=1 roc test package/Option.roc\nthread &#39;main&#39; panicked at /Users/luke/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bumpalo-3.14.0/src/lib.rs:1854:5:\nout of memory\nstack backtrace:\n   0: rust_begin_unwind\n             at /rustc/cc66ad468955717ab92600c770da8c1601a4ff33/library/std/src/panicking.rs:595:5\n   1: core::panicking::panic_fmt\n             at /rustc/cc66ad468955717ab92600c770da8c1601a4ff33/library/core/src/panicking.rs:67:14\n   2: bumpalo::oom\n   3: roc_repl_eval::eval::addr_to_ast\n   4: roc_repl_eval::eval::struct_to_ast\n   5: roc_repl_expect::get_values\n   6: roc_repl_expect::run::render_expect_failure\n   7: roc_cli::test\n   8: roc::main\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\n</code></pre></div>",
        "id": 436158839,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714432778
    },
    {
        "content": "<p>It's only the last two <code>expect</code>s in that file that have this issue.</p>",
        "id": 436159061,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714432892
    },
    {
        "content": "<p>Is there any particular reason we use a <code>host.c</code> in basic-cli and build that using clang, and then link using ld to get a prebuilt binary when \"rebuilding platform\"? Im wondering if I could replace this with another crate to produce the static library using just cargo?</p>",
        "id": 436253264,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714477771
    },
    {
        "content": "<p>In the (near) future I'm hoping to remove this rebuilding platform from the cli, and so the platform needs to producs the prebuilt binary / static library itself.</p>",
        "id": 436253491,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714477847
    },
    {
        "content": "<p>yeah context is here: <a href=\"https://users.rust-lang.org/t/error-when-compiling-linking-with-o-files/49635/5\">https://users.rust-lang.org/t/error-when-compiling-linking-with-o-files/49635/5</a></p>",
        "id": 436254190,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714478091
    },
    {
        "content": "<p>basically host.c is a workaround way to get a .o executable out of Rust, because apparently there's no way to convince pure rust to compile an executable into a .o file</p>",
        "id": 436254575,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714478227
    },
    {
        "content": "<p>or at least that's the only way we were able to figure out how to do it in that forum <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 436254692,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714478275
    },
    {
        "content": "<p>Ok nice, thats good to know. Though we've since added support for using archives <code>.a</code> and cargo happily produces them with staticlib crates, so we could do it all with cargo now I think.</p>",
        "id": 436321918,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714498130
    },
    {
        "content": "<p>IIRC, the problem isn't producing a <code>.a/o</code> it's that the <code>.a/o</code> needs to contain everything to generate the executable. I don't think cargo is willing to put a <code>main</code> function in a <code>.a</code>.</p>\n<p>But please double check.</p>",
        "id": 436322345,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1714498283
    },
    {
        "content": "<p>It is, here's an exMple <a href=\"https://github.com/lukewilliamboswell/basic-ssg/blob/8a11665efa2074b65a71a966d3ecde8d30b9ba9a/crates/host/src/lib.rs#L127\">https://github.com/lukewilliamboswell/basic-ssg/blob/8a11665efa2074b65a71a966d3ecde8d30b9ba9a/crates/host/src/lib.rs#L127</a></p>\n<p>Though the issue then is using that library in a bin crate that also has a main, in which case there is duplicate symbols called main. </p>\n<p>I'm not suggesting the way Its currently written in basic-ssg is the right way, because I think that was a mistake. But I think it's possible. So I am thinking we might be able to have another crate that depends on the core library and just adds a main fn, similar to how its done in <a href=\"http://main.rs\">main.rs</a></p>",
        "id": 436323167,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714498586
    },
    {
        "content": "<p>I'm working on <a href=\"https://github.com/roc-lang/roc/issues/6414\">https://github.com/roc-lang/roc/issues/6414</a>, and have removed the platform rebuilding from roc. </p>\n<p>I would like to clarify the best approach for dealing with our internal tests. </p>\n<p>One approach I can think of is to include a script alongside each platform called <code>build.roc</code> and when we run any of the tests, we first run this script which is responsible for rebuilding the host. </p>\n<p>For most platforms, this is as simple as running <code>zig build-lib -lc host.c</code> to produce a c-archive and then running <code>mv libhost.a macos-arm64.a</code> to rename it for the current architecture.</p>\n<p>This removes a significant amount of host rebuilding logic from the compiler.</p>\n<p>Alternatively we could leave the current rebuilding host functionality, and rewire it so that it is called before running a test to ensure we have the prebuilt binaries available.</p>",
        "id": 436460056,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714546913
    },
    {
        "content": "<p>This is the WIP PR <a href=\"https://github.com/roc-lang/roc/pull/6696\">https://github.com/roc-lang/roc/pull/6696</a></p>",
        "id": 436461427,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714547924
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/395097-compiler-development/topic/Casual.20Conversation/near/436460056\">said</a>:</p>\n<blockquote>\n<p>One approach I can think of is to include a script alongside each platform called <code>build.roc</code> and when we run any of the tests, we first run this script which is responsible for rebuilding the host. </p>\n</blockquote>\n<p>I think if the tests are in Rust it'll be best if we keep that logic in Rust, as like a test helper function</p>",
        "id": 436490850,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714566223
    },
    {
        "content": "<p>otherwise we get into situations like \"the actual problem was that the .roc file to build the test's platform didn't run because <em>that</em> .roc file's platform was broken because of an in-progress change to the current compiler code base...\"</p>",
        "id": 436490965,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714566277
    },
    {
        "content": "<p>No I think this is just for the cli tests where we have a platform and app.</p>",
        "id": 436550343,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714587667
    },
    {
        "content": "<p>Where we currently build the host anyway, except the logic to do that is in the compiler.</p>\n<p>I think we could remove all of that logic from the compiler.</p>",
        "id": 436550674,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714587795
    },
    {
        "content": "<p>Yeah, this is planned, but never completed: <a href=\"https://github.com/roc-lang/roc/issues/6037\">https://github.com/roc-lang/roc/issues/6037</a></p>",
        "id": 436554373,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1714589344
    },
    {
        "content": "<p>Ahk, thank you Brendan. I'll carry on.</p>",
        "id": 436561327,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714592493
    },
    {
        "content": "<p>I have no major thought on if the build script should be in roc vs in whatever the native language would use. I guess I prefer native language if possible so the platforms feel more familiar to people who use the host language. That said, a lot of the platforms are super tiny and some languages like c/c++ don't have clear build tooling. Also can't just use a bash script due to eventually needing to support Windows. So that pushes for <code>build.roc</code> for simple consistency.</p>",
        "id": 436562256,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1714592897
    },
    {
        "content": "<p>do you mean in tests in the roc-lang/roc repo specifically? Or for other projects?</p>",
        "id": 436564953,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714594084
    },
    {
        "content": "<p>personally I have no preference on what other projects want to use (if they want to use build.roc, great!)</p>",
        "id": 436564978,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714594100
    },
    {
        "content": "<p>Roc repo specifically</p>",
        "id": 436564980,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1714594102
    },
    {
        "content": "<p>Other projects can do whatever they want</p>",
        "id": 436564991,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1714594111
    },
    {
        "content": "<p>I guess I should also be more granular, come to think of it</p>",
        "id": 436565032,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714594129
    },
    {
        "content": "<p>I think it's also fine in roc-lang/roc's examples/ folder</p>",
        "id": 436565054,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714594137
    },
    {
        "content": "<p>to use build.roc</p>",
        "id": 436565063,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714594140
    },
    {
        "content": "<p>actually I guess it's probably fine to try out build.roc in the roc-lang/roc tests too and see if it's a problem in practice</p>",
        "id": 436565173,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714594192
    },
    {
        "content": "<p>Fundamentally, roc no longer builds the host. It is up to the host to decide how it will get built. Roc will essentially run as if <code>--prebuilt-playform</code> is always true.</p>",
        "id": 436565180,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1714594194
    },
    {
        "content": "<p>we can always change to something else if it's not working out well</p>",
        "id": 436565195,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714594198
    },
    {
        "content": "<p>Also, thinking about this more, I think I actually like forcing everything to be <code>build.roc</code>. Then I don't need to figure out the build script/command. always just <code>roc build.roc</code></p>",
        "id": 436565379,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1714594269
    },
    {
        "content": "<p>For the roc examples specifically</p>",
        "id": 436565427,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1714594297
    },
    {
        "content": "<p>For the changes I'm working on to remove the platform rebuilding... I've hit a problem now where I need glue gen to build the platforms, but to gen glue I need to be able to build platforms. It's a vicious cycle. </p>\n<p>So I think the best approach is to make a release of the glue platform just like any other platform. We could a URL for the glue platform in the GH releases.  </p>\n<p>TBH I've been thinking about this for other reasons anyway. Currently whenever I use glue elsewhere I have to have roc repository cloned locally to reference the platform which isn't ideal.</p>",
        "id": 436589888,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714606350
    },
    {
        "content": "<p>seems reasonable to me! <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 436590978,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714606996
    },
    {
        "content": "<p>I hadn't  realised how big of a change this is. I apologise in advance for how large this PR is going to be. I'm trying to keep it reasonable, but I'm also trying to clean things up as I go and leave it in a better state.</p>",
        "id": 436624532,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714631208
    },
    {
        "content": "<p>For example, I've had to touch all of the roc_cli tests and update the platform implementations</p>",
        "id": 436624636,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714631260
    },
    {
        "content": "<p>no worries!</p>",
        "id": 436668222,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714647969
    },
    {
        "content": "<p>Does file ingesting work with the new syntax?</p>",
        "id": 436844866,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714727301
    },
    {
        "content": "<p>I'll log an issue because I think it's broken</p>",
        "id": 436845060,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714727401
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/issues/6710\">https://github.com/roc-lang/roc/issues/6710</a></p>",
        "id": 436847470,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714728428
    },
    {
        "content": "<p>In the space of about 15-30mins I was able to update <strong>roc-json</strong>, <strong>roc-parser</strong>, <strong>roc-ansi</strong>, and <strong>roc-random</strong> to use the new syntax. Super quick and painless upgrade. Thank you <span class=\"user-mention\" data-user-id=\"489294\">@Agus Zubiaga</span> for putting the effort in to make that possible.</p>",
        "id": 436848100,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714728694
    },
    {
        "content": "<p>According to <a href=\"https://github.com/roc-lang/roc/pull/6658#issue-2255059371\">https://github.com/roc-lang/roc/pull/6658#issue-2255059371</a>, file ingestion should look like <code>import \"data.json\" as data : List U8</code></p>",
        "id": 436848883,
        "sender_full_name": "JRI98",
        "timestamp": 1714729021
    },
    {
        "content": "<p>Oh neat, just missing the type annotation causes that issue then.</p>",
        "id": 436849093,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714729101
    },
    {
        "content": "<p>I'll update the issue</p>",
        "id": 436849108,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714729107
    },
    {
        "content": "<p>Ah, interesting. Wasnât the annotation already mandatory in the old syntax? I guess we can make it optional and have it behave as if you wrote:</p>\n<div class=\"codehilite\"><pre><span></span><code>import &quot;data.json&quot; as data : _\n</code></pre></div>",
        "id": 436859632,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1714733429
    },
    {
        "content": "<p>I agree we should have a nicer error message if we donât, though</p>",
        "id": 436860351,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1714733710
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"489294\">Agus Zubiaga</span> <a href=\"#narrow/stream/395097-compiler-development/topic/casual.20conversation/near/436859632\">said</a>:</p>\n<blockquote>\n<p>Ah, interesting. Wasnât the annotation already mandatory in the old syntax? I guess we can make it optional and have it behave as if you wrote:</p>\n<p><div class=\"codehilite\"><pre><span></span><code>import &quot;data.json&quot; as data : _\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I think that's what we should do, yeah!</p>",
        "id": 436860490,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714733766
    },
    {
        "content": "<p>I like the type annotation being optional here, because type annotations are optional for all other values <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 436860512,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714733786
    },
    {
        "content": "<p>Hm, this is not as easy as I thought. The way solve <a href=\"https://github.com/roc-lang/roc/blob/bbb54b4cc9e2ff34409b64ffc913346a013bf2b4/crates/compiler/solve/src/solve.rs#L1333\">works</a> for ingested files means that:</p>\n<div class=\"codehilite\"><pre><span></span><code>import &quot;data.json&quot; as data : _\n</code></pre></div>\n<p>is effectively the same as:</p>\n<div class=\"codehilite\"><pre><span></span><code>import &quot;data.json&quot; as data : List U8\n</code></pre></div>\n<p>Instead, I think we want <code>data</code> to be inferred as <code>Str</code> or <code>List U8</code> from usage.</p>",
        "id": 437157183,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1714937634
    },
    {
        "content": "<p>agreed!</p>",
        "id": 437157659,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714938068
    },
    {
        "content": "<p>and then give a compile error if it infers to neither of those</p>",
        "id": 437157674,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714938097
    },
    {
        "content": "<p>would you like help doing that?</p>",
        "id": 437157694,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714938120
    },
    {
        "content": "<p>Yeah, I'll probably need some because I don't have any experience in this part of the compiler.</p>",
        "id": 437157769,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1714938152
    },
    {
        "content": "<p>ok cool</p>",
        "id": 437157792,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714938181
    },
    {
        "content": "<p>I'd say we should do it in 2 parts then</p>",
        "id": 437157799,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714938187
    },
    {
        "content": "<p>like make one PR to enable the functionality if you write out the annotation</p>",
        "id": 437157813,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714938206
    },
    {
        "content": "<p>and then we can do the inference separately</p>",
        "id": 437157819,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714938214
    },
    {
        "content": "<p>I'd like to use this feature in the live coding on Tuesday <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 437157852,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714938234
    },
    {
        "content": "<p>(even if it doesn't do inference yet)</p>",
        "id": 437157921,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714938263
    },
    {
        "content": "<p>Cool! I'll make a PR with the first part today.</p>",
        "id": 437157929,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1714938272
    },
    {
        "content": "<p>If it's ok, I'd like to continue working on params before shifting focus to the inference part</p>",
        "id": 437157958,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1714938303
    },
    {
        "content": "<p>unless you think it's gonna be really easy</p>",
        "id": 437157980,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1714938321
    },
    {
        "content": "<p>it might be easy but might also have surprises haha</p>",
        "id": 437158079,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714938376
    },
    {
        "content": "<p>so leaving it for later seems fine!</p>",
        "id": 437158088,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714938384
    },
    {
        "content": "<p>Made an <a href=\"https://github.com/roc-lang/roc/issues/6716\">issue</a> for the second part</p>",
        "id": 437158417,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1714938591
    },
    {
        "content": "<p>Here's the PR for the first part: <a href=\"https://github.com/roc-lang/roc/pull/6717\">https://github.com/roc-lang/roc/pull/6717</a></p>",
        "id": 437159635,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1714939611
    },
    {
        "content": "<p>Separately, I am also going to improve the parsing error messages for imports</p>",
        "id": 437159657,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1714939648
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> do the CI machines have roc on their PATH?</p>",
        "id": 438201491,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1715537027
    },
    {
        "content": "<p>I think we should make a repository called \"rfcs\" or something similar to keep design documents of the sort typically shared in ideas. I used to do it in Notion, and I know Richard sometimes does them in Google Docs, but for me at least writing in google docs is quite laborious. It would also be good to centralize this. Any thoughts?</p>",
        "id": 438221615,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1715558591
    },
    {
        "content": "<p>yeah I totally agree! Someone talked about this at some point in the past but I don't know how much progress was actually made on it <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 438225813,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1715562976
    },
    {
        "content": "<p>iâm just gonna make it</p>",
        "id": 438226025,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1715563218
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> do the CI machines have roc on their PATH?</p>\n</blockquote>\n<p>No, I expect that would lead to tricky bugs with unexpected different versions</p>",
        "id": 438300450,
        "sender_full_name": "Anton",
        "timestamp": 1715587957
    },
    {
        "content": "<p>Ok, well I've been converting the platforms to build using roc as the scripting language. Maybe we should use bash instead then? I think Roc is nicer for the scripting, and will be even better soon with builtin Task and we can move a bunch of duplicate logic into a package.</p>",
        "id": 438312448,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1715591580
    },
    {
        "content": "<p>I don't see how bash fixes anything</p>",
        "id": 438313695,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715591978
    },
    {
        "content": "<p>We could build the compiler first and add roc to the path at the start of the CI workflow</p>",
        "id": 438313765,
        "sender_full_name": "Anton",
        "timestamp": 1715592003
    },
    {
        "content": "<p>Don't you require calling roc to proprecess platforms and what not</p>",
        "id": 438313828,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715592016
    },
    {
        "content": "<p>So even if you don't do <code>roc build.roc</code>, you still have a call to roc in the equivalent <code>build.sh</code> script</p>",
        "id": 438313913,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715592041
    },
    {
        "content": "<p>So either way, the user has to build roc and add it to the path (or make it otherwise accessible)</p>",
        "id": 438313955,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715592058
    },
    {
        "content": "<blockquote>\n<p>We could build the compiler first and add roc to the path at the start of the CI workflow</p>\n</blockquote>\n<p>Yeah, I think we should do that for the e2e tests.</p>",
        "id": 438314037,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715592084
    },
    {
        "content": "<p>Well the current approach is that each test will rebuild the platform when running the example. So it doesn't really use roc as a separate fork or child process or anything.</p>",
        "id": 438317548,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1715593149
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/stream/395097-compiler-development/topic/casual.20conversation/near/438313765\">said</a>:</p>\n<blockquote>\n<p>We could build the compiler first and add roc to the path at the start of the CI workflow</p>\n</blockquote>\n<p>I'll have a crack at doing that.</p>",
        "id": 438317627,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1715593187
    },
    {
        "content": "<p>it's really cool how many people in <a class=\"stream\" data-stream-id=\"231634\" href=\"/#narrow/stream/231634-beginners\">#beginners</a> are looking to make their own platforms <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 439622868,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1716227378
    },
    {
        "content": "<p>Yeah, I think it's kind of a novel spark that creates opportunities</p>",
        "id": 439623675,
        "sender_full_name": "Anton",
        "timestamp": 1716227646
    },
    {
        "content": "<p>really interesting article about summing floats: <a href=\"https://orlp.net/blog/taming-float-sums/\">https://orlp.net/blog/taming-float-sums/</a></p>",
        "id": 440711433,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1716727868
    },
    {
        "content": "<p>Oh, I have a fun tidbit with floating point summation.</p>\n<p>Floating point sum reductions (same thing as the summation) happen in machine learning quite often. In a neutral net that I was debugging, I noticed that one ml framework had significantly less accurate results for the neural net as a whole. After digging into the network, I realized that the results deviated the most when reaching a reduction. I originally assumed the framework was cutting corners in reduction in the name of performance. It wasn't. Turns out that the framework actually had the most accurate floating point reductions. So a more numerically accurate floating point reduction made the neural network as a whole noticeably less accurate. Why? The neural net was trained with a less accurate reduction and had optimized the weights for a less accurate reduction.</p>",
        "id": 440714741,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1716731428
    },
    {
        "content": "<p>I wonder if we should make <code>List.sum</code> do some of this</p>",
        "id": 440727666,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1716744330
    },
    {
        "content": "<p>Definitely could. Though if floats are for speed, I don't think we should really care about summation accuracy. If anything, I would argue for dumb simd and more speed instead of accuracy.</p>",
        "id": 440730500,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1716747419
    },
    {
        "content": "<p>yeah I was thinking the same <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 440733876,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1716751209
    },
    {
        "content": "<p>On <a href=\"https://github.com/lukewilliamboswell/roc-htmx-playground/commit/efd9fc125f52b62820173ba26621b20519f1050c\">this commit in roc-htmx-playground</a></p>\n<p>I got the following... 30 seconds to build on my M2 macbook</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"w\">    </span>Code<span class=\"w\"> </span>Generation\n<span class=\"w\">         </span><span class=\"m\">5737</span>.190<span class=\"w\"> </span>ms<span class=\"w\">   </span>Generate<span class=\"w\"> </span>final<span class=\"w\"> </span>IR<span class=\"w\"> </span>from<span class=\"w\"> </span>Mono<span class=\"w\"> </span>IR\n<span class=\"w\">        </span><span class=\"m\">16199</span>.271<span class=\"w\"> </span>ms<span class=\"w\">   </span>Generate<span class=\"w\"> </span>object\n\n<span class=\"w\">        </span><span class=\"m\">21936</span>.461<span class=\"w\"> </span>ms<span class=\"w\">   </span>Total\n\nFinished<span class=\"w\"> </span>compilation<span class=\"w\"> </span>and<span class=\"w\"> </span>code<span class=\"w\"> </span>gen<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"m\">28207</span><span class=\"w\"> </span>ms\n\nProduced<span class=\"w\"> </span>a<span class=\"w\"> </span>app.o<span class=\"w\"> </span>file<span class=\"w\"> </span>of<span class=\"w\"> </span>size<span class=\"w\"> </span><span class=\"m\">999952</span>\n\nFinished<span class=\"w\"> </span>linking<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"m\">1115</span><span class=\"w\"> </span>ms\n\n<span class=\"m\">0</span><span class=\"w\"> </span>errors<span class=\"w\"> </span>and<span class=\"w\"> </span><span class=\"m\">13</span><span class=\"w\"> </span>warnings<span class=\"w\"> </span>found<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"m\">29325</span><span class=\"w\"> </span>ms\n</code></pre></div>",
        "id": 442138106,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1717384263
    },
    {
        "content": "<p>And <a href=\"https://github.com/lukewilliamboswell/roc-htmx-playground/commit/9c719f33c556787ce6d17b5375c44be9772582a3\">this commit </a> is even slower and now has a runtime crash...</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;tokio-runtime-worker&#39; panicked at &#39;The Roc app crashed with: Erroneous: Expr::Call&#39;, src/lib.rs:46:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>    Code Generation\n        13051.603 ms   Generate final IR from Mono IR\n        35184.772 ms   Generate object\n\n        48236.376 ms   Total\n\nFinished compilation and code gen in 66731 ms\n\nProduced a app.o file of size 965568\n\nFinished linking in 4643 ms\n\n0 errors and 13 warnings found in 71376 ms\n</code></pre></div>",
        "id": 442140562,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1717385996
    },
    {
        "content": "<p>These aren't optimised builds...  just running with <code>$ DB_PATH=test.db roc --time src/main.roc</code></p>",
        "id": 442140724,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1717386117
    },
    {
        "content": "<p>Trying to figure out what's causing this... I think I'm going backwards <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> <br>\n<code>0 errors and 6 warnings found in 179487 ms</code> &lt;-- 180 seconds</p>",
        "id": 442144765,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1717389163
    },
    {
        "content": "<p>Looks to be mac specific. With my (tiny) linux server <br>\n<code>0 errors and 6 warnings found in 3671 ms</code></p>",
        "id": 442150281,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1717391845
    },
    {
        "content": "<p>Ok, so I've now got it working normally <code>0 errors and 6 warnings found in 2853 ms</code></p>\n<p>I've got no idea what was causing that. </p>\n<p>I cleaned basically every cache I could find. Upgraded my MacOS version, updated all the packages I could find, and rebuilt roc and roc_ls from latest main using nix.</p>",
        "id": 442201415,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1717407828
    },
    {
        "content": "<p>wow super weird</p>",
        "id": 442306280,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717432217
    },
    {
        "content": "<p>Yeah, I was a little worried for a bit. I suspect I had done something strange like built roc from a branch somewhere or there was some combination of things in caches. Glad it's back to normal.</p>",
        "id": 442381541,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1717451798
    },
    {
        "content": "<p>Actually, I think it's still a problem. It's like every time I compile my app it gets a bit slower, and slower to build.</p>",
        "id": 442410312,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1717463374
    },
    {
        "content": "<p>hm, what's really odd about that is that we don't currently store anything on disk during builds</p>",
        "id": 442417158,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717466460
    },
    {
        "content": "<p>well, I guess there are changes in between these builds, right?</p>",
        "id": 442417208,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717466476
    },
    {
        "content": "<p>Yes.</p>",
        "id": 442417658,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1717466636
    },
    {
        "content": "<p>Any cache's in particular I should experiment with?</p>",
        "id": 442417941,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1717466759
    },
    {
        "content": "<p>so it's possible that it's something pathological about the source code itself</p>",
        "id": 442417993,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717466768
    },
    {
        "content": "<p>like it might not be related to the state of the computer itself</p>",
        "id": 442418019,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717466781
    },
    {
        "content": "<p>since we've seen (and fixed) pathological cases in the past</p>",
        "id": 442418075,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717466815
    },
    {
        "content": "<p>I definitely \"fixed\" it when I rebuilt everything, and it was fine on my linux server. I'll keep playing with it and see if I can find any correlations between things.</p>",
        "id": 442418318,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1717466913
    },
    {
        "content": "<p>I am doing a lot with Tasks in basic-webserver, so it could be something related to nesting those maybe.</p>",
        "id": 442418494,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1717466992
    },
    {
        "content": "<p>I think I know what the issue might be. The language server looks to be hogging all the CPU</p>",
        "id": 442421504,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1717468340
    },
    {
        "content": "<p>If I turn it off I'm back down to a more normal <code>0 errors and 0 warnings found in 18753 ms</code></p>",
        "id": 442421624,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1717468408
    },
    {
        "content": "<p>yikes, that's still a ton of time though!</p>",
        "id": 442425027,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717470004
    },
    {
        "content": "<p>that's for <code>roc check</code>?</p>",
        "id": 442425038,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717470007
    },
    {
        "content": "<p>That's roc build. Check is sitting around 1800 ms</p>",
        "id": 442425732,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1717470350
    },
    {
        "content": "<p>someone is having some more ambitious ideas about rust compiler performance, finally <a href=\"https://docs.google.com/document/d/1pE3UV-LUQnZyJCjcL6Kl5RBlj7VVk1Q3EXQmvn43w0I/edit\">https://docs.google.com/document/d/1pE3UV-LUQnZyJCjcL6Kl5RBlj7VVk1Q3EXQmvn43w0I/edit</a></p>\n<p>a Software Unscripted episode with matklad is one of the references</p>",
        "id": 442471546,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1717489634
    },
    {
        "content": "<p>I haven't actually listen to this yet, but I was told it is good and plan to listen later. Thought it would be a good share: <a href=\"https://learn.microsoft.com/en-us/shows/Seth-Juarez/Anders-Hejlsberg-on-Modern-Compiler-Construction\">https://learn.microsoft.com/en-us/shows/Seth-Juarez/Anders-Hejlsberg-on-Modern-Compiler-Construction</a></p>",
        "id": 443149844,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717704159
    },
    {
        "content": "<p>Two other interesting reads. Mojo is testing new areas related to simple ownership (or at least more automatic and less explicit)</p>\n<ul>\n<li><a href=\"https://www.modular.com/blog/what-ownership-is-really-about-a-mental-model-approach\">https://www.modular.com/blog/what-ownership-is-really-about-a-mental-model-approach</a></li>\n<li><a href=\"https://www.modular.com/blog/deep-dive-into-ownership-in-mojo\">https://www.modular.com/blog/deep-dive-into-ownership-in-mojo</a></li>\n</ul>",
        "id": 443206135,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717733404
    },
    {
        "content": "<p>Found a new class of bug I think <code>Roc app crashed with: voided tag constructor is unreachable</code> <a href=\"https://github.com/lukewilliamboswell/roc-htmx-playground/commit/a0852625d36152ce37f8b0490a48c2359177931d\">commit</a></p>",
        "id": 443243403,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1717749996
    },
    {
        "content": "<p>I think i have a functional (but ugly) implementation of borrow inference that seems to pass all of our tests <a href=\"https://github.com/roc-lang/roc/pull/6849\">https://github.com/roc-lang/roc/pull/6849</a></p>\n<p>that needs some cleanups, but hopefully this'll fix a bunch of performance problems</p>",
        "id": 447812778,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1719591328
    },
    {
        "content": "<p>I've been helping <span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> with the builtin-task changes. </p>\n<p>We were experiencing some hard to track down bugs on basic-cli... which we suspect are from rust glue generated code in <code>roc_app</code>. </p>\n<p>So we used a PR on <a href=\"https://github.com/lukewilliamboswell/roc-platform-template-zig/pull/3\">roc-platform-template-zig</a> to test the implementation instead. It looks like task as builtin is good to go. <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> </p>\n<p>We had issues not that long ago with the glue types in basic-cli when implementing the API changes just before SYCL. I had removed a lot of them around that time. </p>\n<p>Sam and I have been working on removing the remaining few glue types in <a href=\"https://github.com/roc-lang/basic-cli/pull/221\">#221</a> and replacing these with roc_std or hand rolled rust types. This should eliminate this as a significant variable for debugging, and hopefully even eliminate the bug and unlock builtin task.</p>",
        "id": 448105037,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719745968
    },
    {
        "content": "<p>amazing!!!</p>",
        "id": 448108996,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1719748862
    },
    {
        "content": "<p>It turns out that Tasks aren't super hard to implement because there's nothing going on under the hood, really, it's just a lambda returns a result. They just happen to work <em>very well</em> as a contract for IO management, which we can enforce for free using opaque types!</p>",
        "id": 448109291,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1719749050
    },
    {
        "content": "<p>I've been upgrading platforms for Task as a builtin... and just couldn't wait to test out <strong>platform independent packages</strong> (even though we don't quite have module params yet). </p>\n<p>They work <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> and it's super <span aria-label=\"cool\" class=\"emoji emoji-1f192\" role=\"img\" title=\"cool\">:cool:</span>  </p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nf\">/</span><span class=\"nv\">package</span><span class=\"nf\">/</span><span class=\"nv\">main</span><span class=\"nf\">.</span><span class=\"nv\">roc</span>\n<span class=\"nv\">package</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">    </span><span class=\"kt\">ReversePrint</span>\n<span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nf\">/</span><span class=\"nv\">package</span><span class=\"nf\">/</span><span class=\"kt\">ReversePrint</span><span class=\"nf\">.</span><span class=\"nv\">roc</span>\n<span class=\"kn\">module</span><span class=\"w\"> </span><span class=\"err\">[</span><span class=\"nc\">line</span><span class=\"p\">]</span>\n\n<span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">b</span>\n<span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">msg</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">echo</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">reversed</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">        </span><span class=\"nv\">msg</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toUtf8</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">reverse</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">fromUtf8</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">withDefault</span><span class=\"w\"> </span><span class=\"s\">\"BAD UTF8\"</span>\n\n<span class=\"w\">    </span><span class=\"nv\">echo</span><span class=\"w\"> </span><span class=\"nv\">reversed</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nv\">example</span><span class=\"w\"> </span><span class=\"nv\">application</span>\n<span class=\"nv\">app</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nv\">pf</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">platform</span><span class=\"w\"> </span><span class=\"s\">\"platform/main.roc\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nv\">test</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"package/main.roc\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">pf.Stdout</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">test.ReversePrint</span>\n\n<span class=\"kr\">main </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">ReversePrint</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"s\">\"Roc loves Zig\"</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span>\n</code></pre></div>\n<p>And we get \"Roc loves Zig\" reversed <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> </p>\n<div class=\"codehilite\"><pre><span></span><code>$ roc test.roc\nð¨ Rebuilding platform...\ngiZ sevol coR\nRuntime: 0.027ms\n</code></pre></div>",
        "id": 448223501,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719810800
    },
    {
        "content": "<p>That's awesome! I can't wait to rewrite roc-pg with Task as a builtin and params</p>",
        "id": 448422610,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1719863332
    },
    {
        "content": "<p>This is a <a href=\"https://github.com/roc-lang/roc/pull/6859\">WIP PR</a> to replace cli flagÂ <code>--prebuilt-platform</code>Â withÂ <code>--build-host</code>. </p>\n<p>It's a bit of a different direction to effectively remove platform rebuilding from the cli for end users. </p>\n<p>Still only a draft -- there's a few tests failing and some linux things to fix. </p>\n<p>I'm also trying to add some documentation in the build pipeline and refactor as much as I can.</p>",
        "id": 448592222,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719922701
    },
    {
        "content": "<p>Just wondering if anyone with Nix experience can look at this and has any intuition for what is causing this to break in CI? It works for me locally <a href=\"https://github.com/roc-lang/basic-cli/actions/runs/9769507618/job/26969069029?pr=194\">https://github.com/roc-lang/basic-cli/actions/runs/9769507618/job/26969069029?pr=194</a></p>",
        "id": 448724925,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719964493
    },
    {
        "content": "<p>Actually -- I haven't tried running it in the shell yet. I'll do that</p>",
        "id": 448724982,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719964540
    },
    {
        "content": "<p>Ok, I can repro... now to try and learn nix</p>",
        "id": 448725057,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719964569
    },
    {
        "content": "<p>ChatGPT to the rescue <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 448726452,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719965462
    },
    {
        "content": "<p>Possibly quick question: anyone know why <code>AnnotatedBody</code>s exist in the AST, instead of being separate type def + <code>Body</code>? What's the intuition behind why those are paired up?</p>",
        "id": 448984456,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1720058959
    },
    {
        "content": "<p>I dont know sorry.</p>",
        "id": 448986770,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720060568
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> might remember? Thatâs a super old node <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 449073009,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1720095119
    },
    {
        "content": "<p>I think that's for making can easier, and possibly error message generation too?</p>",
        "id": 449073161,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1720095171
    },
    {
        "content": "<p>so, it was convenient at the time</p>",
        "id": 449073261,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1720095220
    },
    {
        "content": "<p>if there's good reasons to refactor that now, then if we can keep generating good error messages I don't think there is a reason not to do that refactor</p>",
        "id": 449073378,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1720095257
    },
    {
        "content": "<p>just a note, <code>AnnotatedBody</code> is the only way to define a type annotation for a variable right now</p>",
        "id": 449383424,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1720207868
    },
    {
        "content": "<p>A good high-level introduction into lambda sets (roc was mentioned! <img alt=\":roc:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/22008/emoji/images/18217.png\" title=\"roc\"> )<br>\n<a href=\"https://www.youtube.com/watch?v=CYcf02fTE8E\">https://www.youtube.com/watch?v=CYcf02fTE8E</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"CYcf02fTE8E\" href=\"https://www.youtube.com/watch?v=CYcf02fTE8E\"><img src=\"https://uploads.zulipusercontent.net/5ac807d3ee23fff2b40323ac30ad12f017b6b4b8/68747470733a2f2f692e7974696d672e636f6d2f76692f43596366303266544538452f64656661756c742e6a7067\"></a></div>",
        "id": 449718925,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1720385246
    },
    {
        "content": "<p>woah, Mae Milano is one of the authors of the paper and Morphic. I already knew her by this brilliant talk: <a href=\"https://www.youtube.com/watch?v=Mc3tTRkjCvE\">https://www.youtube.com/watch?v=Mc3tTRkjCvE</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"Mc3tTRkjCvE\" href=\"https://www.youtube.com/watch?v=Mc3tTRkjCvE\"><img src=\"https://uploads.zulipusercontent.net/8a34180b6b13013998eecbe68f56deb3a81f364a/68747470733a2f2f692e7974696d672e636f6d2f76692f4d63337454526b6a4376452f64656661756c742e6a7067\"></a></div>",
        "id": 449719441,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1720385638
    },
    {
        "content": "<p>yes that strangeloop talk is on my list of talks to watch before giving a talk: on a second (or more) watch you start to notice some of the timing and structure that makes it so good while it treats a bunch of hard technical subject matter</p>",
        "id": 449721135,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1720386298
    },
    {
        "content": "<p>Been working with a lot of retail distribution data lately, and there is one distribution center owned by UNFI called UNFI ROC (Rocklin, CA) - always makes me think of this community</p>",
        "id": 449766207,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1720411140
    },
    {
        "content": "<p>Sponsorship opportunity? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 449766246,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1720411170
    },
    {
        "content": "<p>hahahaha</p>",
        "id": 449766268,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1720411183
    },
    {
        "content": "<p>Maybe they could provide yohgurt for the next meetup</p>",
        "id": 449766360,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720411209
    },
    {
        "content": "<p>I will say the retail supply chain could use a lot of love in terms of software products, so totally maybe</p>",
        "id": 449766389,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1720411235
    },
    {
        "content": "<p>Ironically, I'm currently staring at Roc code that attempts to improve the situation in supply chain management</p>",
        "id": 449766507,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720411299
    },
    {
        "content": "<p>Not sure it will help UNFI though</p>",
        "id": 449766531,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720411313
    },
    {
        "content": "<p>Well, if your code makes yogurt...</p>",
        "id": 449767860,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1720412146
    },
    {
        "content": "<p>we should chat haha</p>",
        "id": 449767877,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1720412160
    },
    {
        "content": "<p>So not that it is particularly meaningful, but I finally have actually committed to llvm. I have a single commit that adds like 10 lines to expose and mlir c API that I wanted for debugging.</p>",
        "id": 449984335,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720473442
    },
    {
        "content": "<p>How quick is their release cycle? Will you be able to use it anytime soon without building LLVM from source?</p>",
        "id": 449984468,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1720473495
    },
    {
        "content": "<p>My job builds llvm from source, so should be pulled in for our weekly update. Otherwise, llvm releases like every 6 months</p>",
        "id": 449984711,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720473592
    },
    {
        "content": "<p>For a concrete date Sept 3rd is the planned next llvm release.</p>",
        "id": 449984952,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720473674
    },
    {
        "content": "<p>And they don't cut from main until July 23rd so my or will make it in.</p>",
        "id": 449985100,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720473722
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/395097-compiler-development/topic/casual.20conversation/near/449766507\">said</a>:</p>\n<blockquote>\n<p>Ironically, I'm currently staring at Roc code that attempts to improve the situation in supply chain management</p>\n</blockquote>\n<p>The Italian guide dude from the SYCL Conf from the Zig crew that we sat down had actually worked on supply chain models software. Maybe he can give you some directions.</p>",
        "id": 450018138,
        "sender_full_name": "Zeljko Nesic",
        "timestamp": 1720486482
    },
    {
        "content": "<p>Does anyone know how the benchmarks work? I'm trying to figure out how/where they get built for the run in CI</p>",
        "id": 450070855,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720504398
    },
    {
        "content": "<p>Found it. <code>crates/cli_utils/src/bench_utils.rs</code></p>",
        "id": 450073330,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720505171
    },
    {
        "content": "<p>It looks like <code>roc build --bundle</code> doesn't pick up and include any windows binaries even if they exist. <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 450333326,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720581646
    },
    {
        "content": "<p>Found the issue, easy fix -- need to add <code>.lib</code>as a recognised legacy host file type</p>",
        "id": 450334126,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720581923
    },
    {
        "content": "<p>Does anyone know how to find a rust dependency that is using Tcp? I've got basic-ssg building on Windows -- but when I go to link it there are a bunch of missing symbols that all look related to Tcp.</p>",
        "id": 450344475,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720587338
    },
    {
        "content": "<p>I suspect I might need to turn a feature off on a dependency using a feature flag.</p>",
        "id": 450344540,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720587366
    },
    {
        "content": "<p><code>cargo-tree</code> can be a good place to start</p>",
        "id": 450344543,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1720587367
    },
    {
        "content": "<p>It's built in to <code>cargo</code> now</p>",
        "id": 450344560,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1720587383
    },
    {
        "content": "<p>I've narrowed my issue down to definitely just a missing library when linking on Windows</p>",
        "id": 450345947,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720587989
    },
    {
        "content": "<p>Does this look like an issue I should report? </p>\n<div class=\"codehilite\"><pre><span></span><code>Listening on &lt;http://localhost:8000&gt;\n2024-07-12T07:21:16Z GET /dashboard\nthread &#39;tokio-runtime-worker&#39; panicked at &#39;The Roc app crashed with: Can&#39;t create record with improper layout&#39;, src/lib.rs:46:5\n</code></pre></div>",
        "id": 450896207,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720768953
    },
    {
        "content": "<p>I know what caused the issue, at least in the roc source code. </p>\n<p>It should have been this</p>\n<div class=\"codehilite\"><pre><span></span><code>baseWithBody = \\content, navBar -&gt; Generated.Pages.baseWithBody {\n        content,\n        navBarRtl: navBar,\n        headerRtl,\n        isWhiteBackground: Bool.true,\n    }\n</code></pre></div>\n<p>But instead I was doing this</p>\n<div class=\"codehilite\"><pre><span></span><code>baseWithBody = \\content, navBar -&gt; Generated.Pages.baseWithBody {\n        content,\n        navBar,\n        headerRtl,\n        isWhiteBackground: Bool.true,\n    }\n</code></pre></div>\n<p>Roc turns this into a runtime error and happily <code>roc build</code>s and outputs the built file -- which means I don't pick this up until it panics at runtime.</p>\n<p>But because roc returns Warnings as a non-zero exit code I've been ignoring the exit code and just checking the app was built. I probably need to revisit this strategy.</p>\n<p>I'd love a way to say, don't <code>roc build</code> if there are any errors. I think this should be the dafault actually.</p>",
        "id": 450899955,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720770264
    },
    {
        "content": "<blockquote>\n<p>I'd love a way to say, don't <code>roc build</code> if there are any errors. I think this should be the dafault actually.</p>\n</blockquote>\n<p>I've had this thought as well and mentioned it on zulip before but I can't find the conversation anymore...<br>\nI'd say the problem is that we want both ways to be discoverable and want the user to be aware if their command ignores errors or not.</p>",
        "id": 450927978,
        "sender_full_name": "Anton",
        "timestamp": 1720778731
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/issues/6637\">https://github.com/roc-lang/roc/issues/6637</a></p>",
        "id": 450928519,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720778890
    },
    {
        "content": "<p>I think after we land the rebuild host changes that are almost done, this will be the next step. There's just been a lot of preparation to get to this point and enable ^^&amp;</p>",
        "id": 450928717,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720778960
    },
    {
        "content": "<p>I wonder if we can improve upon the name <code>run</code> to make it obvious that it runs even with errors, some suggestions:</p>\n<ul>\n<li>force-run</li>\n<li>run-anyway</li>\n<li>run-with-errors</li>\n<li>risky-run</li>\n</ul>",
        "id": 450929514,
        "sender_full_name": "Anton",
        "timestamp": 1720779213
    },
    {
        "content": "<p>Well in that issue we have</p>\n<blockquote>\n<ul>\n<li>NoteÂ <code>roc run</code>Â andÂ <code>roc dev</code>Â commands removed as redundant</li>\n</ul>\n</blockquote>",
        "id": 450930114,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720779423
    },
    {
        "content": "<p>I don't think we need it anymore -- if we want to be able to pipe input into just roc, or run without any arguments, we otherwise would be back in the situation of having multiple alternative ways to run a script if we keep <code>run</code> subcommand.</p>",
        "id": 450930218,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720779461
    },
    {
        "content": "<blockquote>\n<p>NoteÂ <code>roc run</code>Â andÂ <code>roc dev</code>Â commands removed as redundant</p>\n</blockquote>\n<p>Oh ok, I assumed it was still there given the \"run workflow\" title. I'll read through the whole thing in a bit</p>",
        "id": 450934819,
        "sender_full_name": "Anton",
        "timestamp": 1720780691
    },
    {
        "content": "<blockquote>\n<p>I'd love a way to say, don't <code>roc build</code> if there are any errors. I think this should be the dafault actually.</p>\n</blockquote>\n<p>Ok, so looking at the issue, this is already the plan...</p>",
        "id": 450956507,
        "sender_full_name": "Anton",
        "timestamp": 1720786896
    },
    {
        "content": "<p>intriguing!</p>\n<p><a href=\"https://github.com/nicholassm/disruptor-rs?tab=readme-ov-file\">https://github.com/nicholassm/disruptor-rs?tab=readme-ov-file</a></p>\n<blockquote>\n<p>The library also supports pinning threads on cores to avoid latency induced by context switching.</p>\n</blockquote>",
        "id": 451210828,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1720896285
    },
    {
        "content": "<p>whooooooa</p>\n<p><a href=\"https://github.com/mazeppa-dev/mazeppa\">https://github.com/mazeppa-dev/mazeppa</a></p>",
        "id": 451384161,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1720994020
    },
    {
        "content": "<p>this is absolutely wild</p>\n<blockquote>\n<p>The lambda normalizer also shows us how to incarnate higher-order functions into a first-order language. In Mazeppa, we cannot treat functions as values, but it does not mean that we cannot simulate them! By performing a metasystem transition, we can efficiently implement higher-order functions in a first-order language. Along with defunctionalization and closure conversion, this technique can be used for compilation of higher-order languages into efficient first-order code.</p>\n</blockquote>",
        "id": 451384944,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1720994868
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> <span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> imagine if we could adopt this for <code>--optimize</code> and use it to defunctionalize instead of lambda sets, then use heap-allocated closures in dev builds</p>",
        "id": 451385036,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1720994952
    },
    {
        "content": "<p>I wonder if it's guaranteed to defunctionalize fully <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 451385187,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1720995097
    },
    {
        "content": "<p>real question is whether they've solved the problems we have. e.g. is it efficient/possible to perform the analysis on a per-module basis?</p>",
        "id": 451385273,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1720995168
    },
    {
        "content": "<p>we can spin a cool story about lambda sets just ignoring the practical problems we face as a production language</p>",
        "id": 451385290,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1720995193
    },
    {
        "content": "<p>if it's only for optimize builds, maybe it's ok if it's whole-program only?</p>",
        "id": 451385359,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1720995244
    },
    {
        "content": "<p>I really think programs just get too big for that to be a practical solution long-term</p>",
        "id": 451385387,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1720995295
    },
    {
        "content": "<p>without being able to parallelize? or do incrementally with caching?</p>",
        "id": 451385713,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1720995669
    },
    {
        "content": "<p>yeah here the details start to matter, and I wonder if they have run into that sort of problem with their implementation</p>",
        "id": 451385787,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1720995746
    },
    {
        "content": "<p>caching etc could go a long way though, but I think that only gets investigated once performance problems come up</p>",
        "id": 451385829,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1720995817
    },
    {
        "content": "<p>sure haha</p>",
        "id": 451386057,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1720996034
    },
    {
        "content": "<p>but the idea of having one process that does all of these and more is pretty intriguing:</p>\n<ul>\n<li>defunctionalization</li>\n<li>deforestation</li>\n<li>partial evaluation</li>\n</ul>",
        "id": 451386684,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1720996768
    },
    {
        "content": "<p>Interesting / amusing bug -- if you name an Effect <code>tmpDir</code> roc won't expose it for some reason.</p>",
        "id": 451696834,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1721114918
    },
    {
        "content": "<p>Hmmm, having trouble getting an effect that just returns a string to work <code>someTmpDir : Effect Str</code></p>",
        "id": 451697689,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1721115210
    },
    {
        "content": "<p>Like, I'm not going crazy here right? This should be possible?</p>\n<div class=\"codehilite\"><pre><span></span><code># Effect.roc\nsomeTmpDir : Effect Str\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code># Dir.roc\ntmpDir : Task Str []_\ntmpDir =\n    Effect.someTmpDir\n    |&gt; Effect.map Ok\n    |&gt; InternalTask.fromEffect\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>$ roc build --no-link examples/hello-world.roc\n0 errors and 0 warnings found in 116 ms\n while successfully building:\n\n    examples/hello-world.o\n$ objdump -t examples/hello-world.o | grep &quot;roc_fx_someDir&quot;\n$\n</code></pre></div>",
        "id": 451698100,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1721115355
    },
    {
        "content": "<p>Ok, not going insane, misspelled something</p>",
        "id": 451701326,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1721116617
    },
    {
        "content": "<p>I've been seeing this bug a fair bit today. I thought I might log an issue for it as it's really strange <br>\n<a href=\"https://github.com/roc-lang/roc/issues/6913\">https://github.com/roc-lang/roc/issues/6913</a></p>\n<p>Basically, <code>expect</code> is failing for values which should be equal.</p>",
        "id": 452286519,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1721292130
    },
    {
        "content": "<p>I love that a release includes a hash of all the files. </p>\n<p>I just checked if I needed to update the glue platform package as it's been a while -- re-generated the bundle and it's got an identical hash. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 452553188,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1721389336
    },
    {
        "content": "<p>I'm thinking about the chain of <code>alloca</code> related issues. cc: <span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span></p>\n<p>With our joinpoints, we guarantee that everything that lives for multiple iterations is explicitly passed to the jump expression. As such, anything that is alloca'ed in the middle of the loop created by the joinpoint should be safe to have it's alloca be part of the entry block. Correct?</p>\n<p>It' just that at the jump instruction, we have to copy out of any temporary allocas and into the allocas for the joinpoint. Otherwise, we may run into mutation bugs where the the the next run of loop mutate values that became joinpoint args.</p>\n<p>I think that is roughly correct.</p>\n<hr>\n<p>If so, I think that means we can hoist all allocas period to the entry block. Then cleanup jointpoints/jumps and hopefully have fixed a number of bugs.</p>",
        "id": 452910757,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721516892
    },
    {
        "content": "<p>context <a href=\"https://github.com/roc-lang/roc/issues/6434\">#6434</a></p>",
        "id": 452910759,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721516914
    },
    {
        "content": "<p>So turns out I should have tried to fix this a long time ago. Turned out to be pretty easy:</p>\n<p><a href=\"https://github.com/roc-lang/roc/issues/6916\">#6916</a> is ready for review</p>",
        "id": 452938772,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721536022
    },
    {
        "content": "<p>Also, this cut a whole minute off of <code>1brc</code> in roc. <code>llvm</code> really does optimize better with all allocas in the entry block.</p>\n<div class=\"codehilite\"><pre><span></span><code>Benchmark 1: ./1brc data/measurements_1_000_000_000.txt\n  Time (mean Â± Ï):     118.589 s Â±  0.643 s    [User: 116.121 s, System: 1.720 s]\n  Range (min â¦ max):   118.009 s â¦ 119.280 s    3 runs\n\nBenchmark 2: ./1brc-old data/measurements_1_000_000_000.txt\n  Time (mean Â± Ï):     188.869 s Â±  3.279 s    [User: 186.282 s, System: 1.635 s]\n  Range (min â¦ max):   185.188 s â¦ 191.478 s    3 runs\n\nSummary\n  ./1brc data/measurements_1_000_000_000.txt ran\n    1.59 Â± 0.03 times faster than ./1brc-old data/measurements_1_000_000_000.txt\n</code></pre></div>",
        "id": 452943703,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721539119
    },
    {
        "content": "<p>Also, most of the flamegraph is now allocating for <code>RocList::extend_from_slice</code> So platform primitives instead of roc itself.</p>",
        "id": 452999318,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721575963
    },
    {
        "content": "<p>This may not help at all, but on the refactor-host branch of basic-webserver I was able to get a working executable by using zig within the nix shell, and compiling my app using <code>--no-link</code>. </p>\n<div class=\"codehilite\"><pre><span></span><code>zig build-exe ./target/release/libhost.a  app.o -lc -lunwind -fstrip\n</code></pre></div>\n<p>This is a workaround for the linux musl and linking issue, that I doubt is really bothering anyone, but sharing just in case. </p>\n<p>I suspect our linking issue with basic-cli may be related to <code>-lunwind</code> which isn't included by default in our roc linker flags. I'll try and test that more later.</p>",
        "id": 453548044,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1721776202
    },
    {
        "content": "<p><code>libunwind</code> looks to be a dependency of the <code>backtrace</code> crate</p>",
        "id": 453548271,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1721776362
    },
    {
        "content": "<p>So assuming the numbers in this repo are correct (which I expect them to be), we apparently shouldn't be using linear search anymore. We should be using monobound binary search: <a href=\"https://github.com/scandum/binary_search/\">https://github.com/scandum/binary_search/</a></p>\n<p>This is thinking about the many cases in the compiler where for small maps, we attempt to use vec map and linear searching. Hmm, though that doesn't take into account the cost of keeping the list sorted so you can binary search.</p>",
        "id": 453987097,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721923301
    },
    {
        "content": "<p>since we use <code>VecMap</code> in so many places, might not be a big effort to swap its implementation for something which does that, and just see what happens</p>",
        "id": 453993175,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1721924384
    },
    {
        "content": "<p>True</p>",
        "id": 453995798,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721924912
    },
    {
        "content": "<p>We just landed task as builtin...didn't we...That is probably why my code using task suddenly broke on main?</p>",
        "id": 454893215,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1722273283
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>ââ UNRECOGNIZED NAME in ../sorting/builtin.roc âââââââââââââââââââââââââââââââââ\n\nNothing is named `Task` in this scope.\n\n56â&gt;      Stdout.line!\n57â&gt;          (\n58â&gt;              if testSort answrlst then\n59â&gt;                  &quot;List sorted correctly!&quot;\n60â&gt;              else\n61â&gt;                  &quot;Failure in sorting list!!!&quot;\n62â&gt;          )\n\nDid you mean one of these?\n\n    Hash\n    main\n    List\n    U8\n\nââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ\n</code></pre></div>",
        "id": 454893313,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1722273309
    },
    {
        "content": "<p>No, it's not on main yet or in TESTING</p>",
        "id": 454894824,
        "sender_full_name": "Anton",
        "timestamp": 1722273628
    },
    {
        "content": "<p>Ah I know what this is, you need to add <code>exposing [Task]</code></p>",
        "id": 454894970,
        "sender_full_name": "Anton",
        "timestamp": 1722273663
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> did you add a exposing Task suffix to your import?</p>",
        "id": 454895002,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1722273668
    },
    {
        "content": "<p>Interesting. Why is that needed today but not yesterday (or a few days ago, don't have exact bisect)</p>",
        "id": 454895133,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1722273721
    },
    {
        "content": "<p>It was due to fixes around <code>!</code> but I did not get to the bottom of it myself</p>",
        "id": 454895405,
        "sender_full_name": "Anton",
        "timestamp": 1722273785
    },
    {
        "content": "<p>Yes, I think it was caused by <a href=\"https://github.com/roc-lang/roc/pull/6868\">PR#6868</a></p>",
        "id": 454895736,
        "sender_full_name": "Anton",
        "timestamp": 1722273855
    },
    {
        "content": "<p>I guess once we have task as built-in this will be fixed cause task will be automatically imported.</p>",
        "id": 454909235,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1722276448
    },
    {
        "content": "<p>Yup</p>",
        "id": 454909263,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1722276457
    },
    {
        "content": "<p>I ran into this exact issue yesterday and was confused (using testing releases). I don't think the docs / tutorial mentions the need to use exposing [Task] or maybe I didn't look hard enough</p>",
        "id": 454949586,
        "sender_full_name": "Musab Nazir",
        "timestamp": 1722287098
    },
    {
        "content": "<p>We only just merged that change, and I don't think anyone realised it would impact the imports in this way. The Task as builtin change is basically ready and will eliminate this entirely. We just are going through the process to make sure that is well tested before making anither breaking change and new release.</p>",
        "id": 454951606,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722287736
    },
    {
        "content": "<p>When Task is a builtin there wont be any need to import it manually, it will be automatically available in every app.</p>",
        "id": 454951796,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722287802
    },
    {
        "content": "<p>Good info and visualization on how memory really should be accessed if you want to maximize throughput: <a href=\"https://blog.mattstuchlik.com/2024/07/21/fastest-memory-read.html\">https://blog.mattstuchlik.com/2024/07/21/fastest-memory-read.html</a></p>",
        "id": 455194395,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1722365396
    },
    {
        "content": "<p>Theoretically would also be a more optimal way to do large <code>List.map</code> operations assuming the mapping function is simple enough (too expensive of a mapping function and doing more complex memory loading may actually hurt a lot).</p>",
        "id": 455194625,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1722365473
    },
    {
        "content": "<p>someone suggested using large pages somewhere for basically the same effect with less effort</p>",
        "id": 455194718,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1722365515
    },
    {
        "content": "<p>How do large pages fix the issue? I thought the core problem was needing multiple memory streams to increase memory load throughput and keep the load buffer full.</p>",
        "id": 455195881,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1722365970
    },
    {
        "content": "<p>Maybe this is a completely crazy idea... but LLVM bitcode isn't specific to an os/arch and is basically an IR. Right?</p>\n<p>Is there any reason why a platform host couldn't be a LLVM bitcode file? So platform authors provide that one <code>generic-llvm.bc</code> or something and then roc can build and link targeting anything supported by LLVM. </p>\n<p>It woudn't be compiled into machine code already, so it would be much slower than just linking, and probably much larger. But maybe it provides a more flexibility or is a good option for some use-cases?</p>",
        "id": 455777291,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722555524
    },
    {
        "content": "<p>Versioning is a problem (no guarantee that llvm 16 ir will load with llvm 17). Also wouldn't work with dev backends.</p>",
        "id": 455779300,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1722556748
    },
    {
        "content": "<p>So it could work then? We could version the file, like <code>generic_llvm_18_1_8.bc</code>.</p>\n<p>Even is this only worked for slower optimised builds, it might be useful, particularly for e.g. getting support for various long tail of targets.</p>",
        "id": 455785783,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722558596
    },
    {
        "content": "<p>The most immediate use case I can think of is for WASM/WASI targets.</p>",
        "id": 455785976,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722558631
    },
    {
        "content": "<p>Cant we just use wasm LD?</p>",
        "id": 455789794,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1722559711
    },
    {
        "content": "<p>Avoid the error and problems of merging llvm ir directly?</p>",
        "id": 455789869,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1722559733
    },
    {
        "content": "<p>3 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"395097\" href=\"/#narrow/stream/395097-compiler-development/topic/glue.20generation.20error\">#compiler development &gt; glue generation error</a> by <span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span>.</p>",
        "id": 456138433,
        "sender_full_name": "Notification Bot",
        "timestamp": 1722683256
    },
    {
        "content": "<p>We can generate some \"interesting\" types:</p>\n<blockquote>\n<p>expected type 'union { (union { ((),), ((heap_cell,),), (), ((heap_cell,), union { (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), () }), (), ((),), () },), ((heap_cell, bag&lt;(heap_cell,)&gt;),) }', found type 'union { (union { ((),), ((heap_cell,),), ((heap_cell,), union { (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), () }), ((),) },), ((heap_cell, bag&lt;(heap_cell,)&gt;),) }'</p>\n</blockquote>",
        "id": 456372876,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1722797434
    },
    {
        "content": "<p>Is this the work of the alias analysis, lambda sets? I imagine this is what is happening in the \"Specialise\" stage of the compiler.</p>",
        "id": 456400920,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722811593
    },
    {
        "content": "<p>And thinking about Jasper's comment the other day, could this be represented in Roc style syntax, or is this completely something different?</p>",
        "id": 456400943,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722811653
    },
    {
        "content": "<blockquote>\n<p>Is this the work of the alias analysis, lambda sets?</p>\n</blockquote>\n<p>I think it is related. Like it happens for all types that unify, lambdasets being one of them. I think this specific error may come from morphic related code? Caues I think it use things like <code>bag&lt;(heap_cell,)&gt;</code>. Theoretically you could represent this as a roc style tag union, but I don't think that would erally be helpful.</p>\n<p>As a note, this is generating from basic webserver with sqlite. I ported the todos example over. Using the query function twice in different contexts seems to be leading to this somehow. If I comment out either the <code>createTodo</code> path or the <code>listTodos</code> path, it seems to fix things. I am very much not sure what all is going on/the real issue. I think the first type has extra empty <code>()</code> values. Maybe something should be collapsing those together? Cause <code>union { (), () }</code> is probably the same thing as <code>union { () }</code> (assuming this are raw unions.</p>\n<p>PR here: <a href=\"https://github.com/roc-lang/basic-webserver/pull/61\">https://github.com/roc-lang/basic-webserver/pull/61</a><br>\nWith repro command being <code>roc build.roc &amp;&amp; roc examples/todos.roc</code> if any has a chance to take a look/a guess at the issues.</p>",
        "id": 456432891,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1722830388
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> just curious if you have any thoughts or comments on the above. Specifically around alias analysis union simplification and if it is valid. Like are we missing a canonicalization step here that would lead to all the <code>()</code> in the union merging into a single <code>()</code>. I'm not sure the semantics expected here.</p>",
        "id": 456662166,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1722879320
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> just curious if you have any idea about the above.</p>",
        "id": 456984266,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1722993390
    },
    {
        "content": "<p>() are units</p>",
        "id": 456985365,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1722994306
    },
    {
        "content": "<p>there's probably a way to simplify it, but simplifying it is also likely covering up a bug</p>",
        "id": 456985419,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1722994330
    },
    {
        "content": "<p>i would run the IR checker - that will point to an issue if there is one earlier on, which i suspect there is</p>",
        "id": 456985441,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1722994352
    },
    {
        "content": "<p>I think it crashes before check mono ir runs. That or it passes and then gets to this failure anyway.</p>",
        "id": 456985465,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1722994386
    },
    {
        "content": "<p>there should be a mono IR check pass that runs before alias analysis (morphic). this is a panic in morphic</p>",
        "id": 456985496,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1722994431
    },
    {
        "content": "<p>I would check roc_debug_flags, i think its ROC_CHECK_IR_AFTER_SPECIALIZATION or something</p>",
        "id": 456985565,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1722994450
    },
    {
        "content": "<p>Ok. I'll double check when I get the chance. I'm pretty sure I ran it with <code>ROC_CHECK_MONO_IR</code> and it still got to the error above and crashed.</p>",
        "id": 456985620,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1722994511
    },
    {
        "content": "<p>Should we enable these env vars in CI when doing <code>cargo test</code> without <code>--release</code> to catch any bugs that may otherwise go undetected?</p>\n<div class=\"codehilite\"><pre><span></span><code>ROC_VERIFY_RIGID_LET_GENERALIZED\nROC_VERIFY_OCCURS_ONE_RECURSION\nROC_CHECK_MONO_IR\n</code></pre></div>",
        "id": 457059140,
        "sender_full_name": "Anton",
        "timestamp": 1723021996
    },
    {
        "content": "<p>That sounds like a great idea!</p>",
        "id": 457180497,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723057984
    },
    {
        "content": "<p>After reading the descriptions of the  verify flags (in crates/compiler/debug_flags/src/lib.rs), I ended up enabling only ROC_CHECK_MONO_IR (<a href=\"https://github.com/roc-lang/roc/pull/6976\">PR#6976</a>)</p>",
        "id": 459504148,
        "sender_full_name": "Anton",
        "timestamp": 1723216893
    },
    {
        "content": "<p>Oh, we do have a mono ir failure here:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>check failure</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\"><pre><span></span><code>Full source: procedure `pf.Sqlite.87` (`pf.Sqlite.464`):\n    let `pf.Sqlite.865` : [C [C [], C Str, C Str [C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C ], C U8], C List Str] = TagId(1) `pf.Sqlite.464`;\n    ret `pf.Sqlite.865`;\nIR PROBLEMS FOUND:\nââ SYMBOL LAYOUT DOESN&#39;T MATCH ITS USE âââââââââââââââââââââââââââââââââââââââââ\n\nin 87 : (List Str) -&gt;\n[C [C [], C Str, C , C Str [C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C ], C , C U8, C ], C List Str] ((niche\n{}))\n\n0â  procedure `pf.Sqlite.87` (`pf.Sqlite.464`):\n1â&gt;     let `pf.Sqlite.865` : [C [C [], C Str, C Str [C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C ], C U8], C List Str] = TagId(1) `pf.Sqlite.464`;\n2â      ret `pf.Sqlite.865`;\n\nSqlite.865 defined here with layout\n[C [C [], C Str, C Str [C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C ], C U8], C List Str]\n\n1â      let `pf.Sqlite.865` : [C [C [], C Str, C Str [C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C ], C U8], C List Str] = TagId(1) `pf.Sqlite.464`;\n2â&gt;     ret `pf.Sqlite.865`;\n\nSqlite.865 used as a return value here with layout\n[C [C [], C Str, C , C Str [C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C ], C , C U8, C ], C List Str]\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>\n</code></pre></div>\n</div></div>",
        "id": 459596873,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723248016
    },
    {
        "content": "<p>The type difference is this:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code>[\n<span class=\"w\"> </span>   C [\n<span class=\"w\"> </span>       C [],\n<span class=\"w\"> </span>       C Str,\n<span class=\"gd\">-       C ,</span>\n<span class=\"w\"> </span>       C Str [C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C , C ],\n<span class=\"gd\">-       C ,</span>\n<span class=\"w\"> </span>       C U8,\n<span class=\"gd\">-       C</span>\n<span class=\"w\"> </span>   ],\n<span class=\"w\"> </span>   C List Str\n]\n</code></pre></div>",
        "id": 459597200,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723248278
    },
    {
        "content": "<p>Just saw someone share this collection of \"Resources for Amateur Compiler Writers\". I haven't dug into them yet, but thought I'd pass it on anyway!<br>\n<a href=\"https://c9x.me/compile/bib/\">https://c9x.me/compile/bib/</a></p>",
        "id": 462610186,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1723745736
    },
    {
        "content": "<p>I just tried IDA free for the first time, it is definitely the best assembly debugger I have ever used<br>\n<a href=\"/user_uploads/22008/q5OKxtPhBMtzB3xwSBkULdzO/Screenshot-from-2024-08-16-20-39-28.png\">IDA-screenshot</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/q5OKxtPhBMtzB3xwSBkULdzO/Screenshot-from-2024-08-16-20-39-28.png\" title=\"IDA-screenshot\"><img data-original-dimensions=\"4968x2701\" src=\"/user_uploads/thumbnail/22008/q5OKxtPhBMtzB3xwSBkULdzO/Screenshot-from-2024-08-16-20-39-28.png/840x560.webp\"></a></div>",
        "id": 462839096,
        "sender_full_name": "Anton",
        "timestamp": 1723833762
    },
    {
        "content": "<p>Wow, that's basically exactly what we want</p>",
        "id": 462839190,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1723833811
    },
    {
        "content": "<p>That's a lot like gdb tui mode</p>",
        "id": 462841390,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723834827
    },
    {
        "content": "<p>TIL gdb has a TUI: <a href=\"https://dev.to/irby/making-gdb-easier-the-tui-interface-15l2\">https://dev.to/irby/making-gdb-easier-the-tui-interface-15l2</a></p>",
        "id": 462841787,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1723835007
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"361169\">@Anton</span>  Have you tried Cutter?</p>",
        "id": 462864407,
        "sender_full_name": "Zeljko Nesic",
        "timestamp": 1723847055
    },
    {
        "content": "<p>Wow, cutter looks very clean, definitely going to try that out</p>",
        "id": 462951931,
        "sender_full_name": "Anton",
        "timestamp": 1723881742
    },
    {
        "content": "<p>The debugger is in beta and crashes easily on the binary I'm testing it with, it definitely has potential though!</p>",
        "id": 462962732,
        "sender_full_name": "Anton",
        "timestamp": 1723889643
    },
    {
        "content": "<p>I am once again reminded how fast memcpy is for giant chunks of data.</p>\n<p>I was looking at basic webserver and the cost of always copying the request and response bodies. Cause currently it always copies the input and output data from rust vectors into roc lists and back.</p>\n<p>Did some testing of echoing with a large payload (~100KB).</p>\n<p>Raw rust, fully async but still manifesting the fully body into bytes (aka avoid streaming in the request body):<br>\n<code>787482 requests in 20.10s, 72.66GB read</code></p>\n<p>Roc with <code>spawn_blocking</code> and copying all inputs and outputs between rust vector and roc lists:<br>\n<code>627501 requests in 20.00s, 57.90GB read</code></p>\n<p>So 2 extra copies of all bytes only costs ~20% loss in overall perf. Still a hefty loss, but I was expecting a lot more.</p>\n<p>Note: if we also constrain rust to use <code>spawn_blocking</code> it takes a ~4% perf hit:<br>\n<code>755249 requests in 20.10s, 69.69GB read</code></p>",
        "id": 463918324,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724206869
    },
    {
        "content": "<p>See if you can try copying 1MB of data back and forth and see how much of penalty does it take! :)</p>",
        "id": 464179762,
        "sender_full_name": "Zeljko Nesic",
        "timestamp": 1724277650
    },
    {
        "content": "<p>I mean the process as a whole gets slower but the ratio is roughly the same.</p>\n<p>raw rust without <code>spawn_blocking</code>:<br>\n<code>69261 requests in 20.08s, 63.86GB read</code></p>\n<p>roc:<br>\n<code>58514 requests in 20.08s, 53.95GB read</code></p>\n<p>Roc is ~15% slower in overall perf.</p>",
        "id": 464196840,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724284758
    },
    {
        "content": "<p>What is this post?? <a href=\"https://github.com/roc-lang/roc/issues/7027#issuecomment-2309494585\">https://github.com/roc-lang/roc/issues/7027#issuecomment-2309494585</a></p>\n<p>Concerning, it looks like spam/malware</p>",
        "id": 465099591,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724656215
    },
    {
        "content": "<p>I want to \"Report Content\"</p>",
        "id": 465099643,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724656244
    },
    {
        "content": "<p>I hid it, you should probably report it</p>",
        "id": 465099661,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724656255
    },
    {
        "content": "<p>Their only contribution I can publically see on Github is 3 hours ago: <a href=\"https://github.com/TerraFirmaCraft/TerraFirmaCraft/issues/2772\">https://github.com/TerraFirmaCraft/TerraFirmaCraft/issues/2772</a></p>",
        "id": 465099783,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724656318
    },
    {
        "content": "<p>Reported</p>",
        "id": 465099849,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724656330
    },
    {
        "content": "<p>Terrafirmacraft...that's a throwback</p>",
        "id": 465104171,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724657472
    },
    {
        "content": "<p>Password protected to evade malware scanners, sneaky...</p>",
        "id": 465114620,
        "sender_full_name": "Anton",
        "timestamp": 1724660203
    },
    {
        "content": "<p>1023 unread messages in ideas :p</p>",
        "id": 466190044,
        "sender_full_name": "Anton",
        "timestamp": 1725005218
    },
    {
        "content": "<p>Howdy</p>",
        "id": 466190153,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1725005240
    },
    {
        "content": "<p>We can summarize, but there was a good amount of useful convo</p>",
        "id": 466190374,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1725005279
    },
    {
        "content": "<p>Mainly about purity inference, super cool idea, no perfect way to do it</p>",
        "id": 466190515,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1725005297
    },
    {
        "content": "<blockquote>\n<p>We can summarize, but there was a good amount of useful convo</p>\n</blockquote>\n<p>Nah, I can't break my reading everything streak :p</p>",
        "id": 466193451,
        "sender_full_name": "Anton",
        "timestamp": 1725005836
    },
    {
        "content": "<p>That's dedication</p>",
        "id": 466193491,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1725005851
    },
    {
        "content": "<p>Well, we'll be happy to get your input on everything</p>",
        "id": 466193532,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1725005867
    },
    {
        "content": "<p>These are extremely important discussions!</p>",
        "id": 466193557,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1725005876
    },
    {
        "content": "<p>Always fun to remember just how much perf is often left on the table: <a href=\"/user_uploads/22008/kSxE6mBK7iNfHL-VOpoEfg-f/41b1ca8f-ae9e-4406-9c07-0a99fc0f35bf.jpg\">41b1ca8f-ae9e-4406-9c07-0a99fc0f35bf.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/kSxE6mBK7iNfHL-VOpoEfg-f/41b1ca8f-ae9e-4406-9c07-0a99fc0f35bf.jpg\" title=\"41b1ca8f-ae9e-4406-9c07-0a99fc0f35bf.jpg\"><img data-original-dimensions=\"4080x3072\" src=\"/user_uploads/thumbnail/22008/kSxE6mBK7iNfHL-VOpoEfg-f/41b1ca8f-ae9e-4406-9c07-0a99fc0f35bf.jpg/840x560.webp\"></a></div>",
        "id": 467311003,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725381996
    },
    {
        "content": "<p>I'm assuming this is from a matmul or similar op.</p>",
        "id": 467312231,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725382291
    },
    {
        "content": "<p>How do I fix a snapshot failure like this? I made a completely unrelated change (as far as I can tell) and now this is failing...</p>\n<p><a href=\"/user_uploads/22008/l4r1zWio-vB2ks22lPf1-gJL/Screenshot-2024-09-04-at-21.39.20.png\">Screenshot-2024-09-04-at-21.39.20.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/l4r1zWio-vB2ks22lPf1-gJL/Screenshot-2024-09-04-at-21.39.20.png\" title=\"Screenshot-2024-09-04-at-21.39.20.png\"><img data-original-dimensions=\"1748x752\" src=\"/user_uploads/thumbnail/22008/l4r1zWio-vB2ks22lPf1-gJL/Screenshot-2024-09-04-at-21.39.20.png/840x560.webp\"></a></div>",
        "id": 467505617,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1725449985
    },
    {
        "content": "<p>looks like there's a newline at the end of the line in the source file, and maybe it got saved and your editor automatically trimmed it off?</p>",
        "id": 467505895,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1725450027
    },
    {
        "content": "<p>that used to happen to me all the time, but I edited the tests in question to no longer need a trailing newline</p>",
        "id": 467506072,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1725450063
    },
    {
        "content": "<p>Do I modify the error report maybe?</p>",
        "id": 467506179,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1725450091
    },
    {
        "content": "<p>Why would it have a blank space on the end?</p>",
        "id": 467506226,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1725450104
    },
    {
        "content": "<p>Hmm... it shouldn't have one there from what I can tell. </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">reflow</span><span class=\"p\">(</span><span class=\"s\">\"Tip: Learn more about builtins in the tutorial:</span><span class=\"se\">\\n\\n</span><span class=\"s\">&lt;https://www.roc-lang.org/tutorial#builtin-modules&gt;\"</span><span class=\"p\">),</span>\n</code></pre></div>",
        "id": 467506626,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1725450200
    },
    {
        "content": "<p>I think the reflow can put one there based on the terminal width</p>",
        "id": 467507614,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1725450444
    },
    {
        "content": "<p>although I agree that would be strange in this case haha</p>",
        "id": 467507847,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1725450495
    },
    {
        "content": "<p>I'm just going to leave that for now and come back to it later... in the build-host PR / rebuild-platform branch I've managed to remove all references to basic-cli from roc (aside from the scripts for building the website) now.</p>",
        "id": 467508669,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1725450717
    },
    {
        "content": "<p>I've migrated the tests we want to keep onto other test platforms.</p>",
        "id": 467508791,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1725450741
    },
    {
        "content": "<p>Scale of waste is mind boggling to me sometimes. I get the computers are fast, so a company can make a ton of money well also wasting a ton, but it just feels wrong to me.</p>\n<blockquote>\n<p>15,000 requests/second! That's what I just got out of that $220/month EPYC 48-core hobby box from Hetzner running a basic Rails 8 scaffold MessagesController#show loading a single record from the DB with no caching of any kind. Hot diggity!</p>\n</blockquote>\n<p>jitted multithreaded ruby using sqlite as a local database... on a modern high end bare metal server with 48 cores.... only getting 15k requests per second.</p>\n<p>Basic webserver still has wasted copies and is missing the effect interpreter to enable full async. Yet it can do 120k requests per second on 4 cores of my m1 Mac.</p>\n<p>So 30k per core vs 300 per core.</p>\n<p>Obviously an apples to oranges comparison to some extent. But the rough scale is real.</p>\n<hr>\n<p>Related aside: shouldn't ruby have async and await that turns this into just waiting on the network card? Shouldn't this still be able to saturate the network card for something so simple? Is Ruby with rails all blocking io?</p>",
        "id": 468263631,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725648047
    },
    {
        "content": "<p>My company primarily runs a Ruby on Rails monolith, tell me about it... <span aria-label=\"smiling face with tear\" class=\"emoji emoji-1f972\" role=\"img\" title=\"smiling face with tear\">:smiling_face_with_tear:</span></p>",
        "id": 468263884,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1725648117
    },
    {
        "content": "<p><a href=\"https://www.wjwh.eu/posts/2020-12-28-ruby-fiber-scheduler-c-extension.html\">https://www.wjwh.eu/posts/2020-12-28-ruby-fiber-scheduler-c-extension.html</a></p>",
        "id": 468264998,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1725648367
    },
    {
        "content": "<p>It seems like Ruby 3.0 onwards does async IO automatically, but we run Ruby 2.7 because any company using something so outdated as Rails will avoid the cost of upgrading things whenever possible</p>",
        "id": 468265529,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1725648451
    },
    {
        "content": "<p>Hahaha, this is deeply relatable. I just started on a codebase with a few hundred thousand lines of nightmarish PHP. <br>\nWe have pages that take over 10 seconds to load because they query all 250k users on the database to display a stat.</p>\n<p>I can promise you, nobody has any idea how many requests per second we manage.... But I can also promise it ain't good <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 470775816,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1726530488
    },
    {
        "content": "<p>Does the LLVM Ir </p>\n<div class=\"codehilite\"><pre><span></span><code>define void @roc__mainForHost_1_exposed_generic(ptr %0) !dbg !21\n</code></pre></div>\n<p>Look right for a platform with API?</p>\n<div class=\"codehilite\"><pre><span></span><code>mainForHost : Str -&gt; Str\n</code></pre></div>",
        "id": 471642810,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1726816668
    },
    {
        "content": "<p>That would take a RocStr and mutate it right?</p>",
        "id": 471642905,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1726816692
    },
    {
        "content": "<p>No, I think we would take two pointers for that</p>",
        "id": 471710968,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726834060
    },
    {
        "content": "<p>How does <code>try</code>/<code>?</code> work? Is this a correct desugar?</p>\n<div class=\"codehilite\"><pre><span></span><code>y = try x\ny + 1\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>when x is\n  Error e -&gt; Error e\n  Ok y -&gt; y + 1\n</code></pre></div>\n<p>or does it wrap the continuation in the Ok constructor?</p>",
        "id": 473000400,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1727402840
    },
    {
        "content": "<p>We're going with <code>return</code></p>",
        "id": 473000432,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1727402871
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">    </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">e</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">return</span><span class=\"w\"> </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">e</span>\n<span class=\"w\">    </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"nv\">y</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 473000511,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1727402917
    },
    {
        "content": "<p>kk thanks</p>",
        "id": 473000513,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1727402922
    },
    {
        "content": "<p>This works with the continuation monad well</p>",
        "id": 473000545,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1727402953
    },
    {
        "content": "<p>Returning early from the continuation will return to the parent function's return value immediately, since the parent function doesn't do anything after calling the continuation</p>",
        "id": 473000679,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1727403026
    },
    {
        "content": "<p>It all just fits together</p>",
        "id": 473000680,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1727403031
    },
    {
        "content": "<p>sorry I'm not sure I follow that piece</p>",
        "id": 473002250,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1727404103
    },
    {
        "content": "<p>wouldn't the early return immediately pass the result value to the next continuation in the chain? if you return to the parent function wouldn't that break the sequence of continuations?</p>",
        "id": 473002312,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1727404167
    },
    {
        "content": "<p>Is <code>zstd</code> a dependency for using a roc nightly on intel macos? I'm trying to setup a GH runner and it's given me an error like</p>\n<div class=\"codehilite\"><pre><span></span><code>dyld[4651]: Library not loaded: /usr/local/opt/zstd/lib/libzstd.1.dylib\n  Referenced from: &lt;4E33E9A3-ECE7-3A94-90F3-D55423A81AF9&gt; /Users/runner/work/roc-ray/roc-ray/roc_nightly/roc\n  Reason: tried: &#39;/usr/local/opt/zstd/lib/libzstd.1.dylib&#39; (no such file), &#39;/System/Volumes/Preboot/Cryptexes/OS/usr/local/opt/zstd/lib/libzstd.1.dylib&#39; (no such file), &#39;/usr/local/opt/zstd/lib/libzstd.1.dylib&#39; (no such file), &#39;/usr/local/lib/libzstd.1.dylib&#39; (no such file), &#39;/usr/lib/libzstd.1.dylib&#39; (no such file, not in dyld cache)\n/Users/runner/work/_temp/97a43c70-cd5c-446e-a653-669d45f49f87.sh: line 1:  4651 Abort trap: 6           ./roc_nightly/roc version\n</code></pre></div>\n<p>Trying different things to resolve it. Just noticed nothing about it in our Getting Started guide <a href=\"https://www.roc-lang.org/install/macos_x86_64\">https://www.roc-lang.org/install/macos_x86_64</a></p>",
        "id": 477318684,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729121320
    },
    {
        "content": "<p>I think so: <a href=\"https://github.com/roc-lang/roc/pull/7008\">https://github.com/roc-lang/roc/pull/7008</a></p>",
        "id": 477319577,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1729121870
    },
    {
        "content": "<p>hm... that doesn't appear to have helped</p>",
        "id": 477320165,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729122263
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Run ./roc_nightly/roc version\n\ndyld[2644]: Library not loaded: /usr/local/opt/zstd/lib/libzstd.1.dylib\n  Referenced from: &lt;4E33E9A3-ECE7-3A94-90F3-D55423A81AF9&gt; /Users/runner/work/roc-ray/roc-ray/roc_nightly/roc\n  Reason: tried: &#39;/usr/local/opt/zstd/lib/libzstd.1.dylib&#39; (no such file), &#39;/System/Volumes/Preboot/Cryptexes/OS/usr/local/opt/zstd/lib/libzstd.1.dylib&#39; (no such file), &#39;/usr/local/opt/zstd/lib/libzstd.1.dylib&#39; (no such file), &#39;/usr/local/lib/libzstd.1.dylib&#39; (no such file), &#39;/usr/lib/libzstd.1.dylib&#39; (no such file, not in dyld cache)\n/Users/runner/work/_temp/e7c7fbc1-dcab-4aba-8b61-ee456c77d93c.sh: line 1:  2644 Abort trap: 6           ./roc_nightly/roc version\n</code></pre></div>",
        "id": 477320182,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729122280
    },
    {
        "content": "<p>Yeah I goofed up... got confused between Arm64 and x64 <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 477321103,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729122948
    },
    {
        "content": "<p>I think we've managed to break the <code>--no-link</code> build pipeline sometime recently... I used to be able to do this.</p>\n<div class=\"codehilite\"><pre><span></span><code> $ roc build --no-link --emit-llvm-ir examples/simple.roc\nLegacy linking failed: Failed to find any legacy linking files; I need one of these three paths to exist:\n    examples/../platform/macos-arm64.a\n    examples/../platform/macos-arm64.o\n    examples/../platform/libhost.a\n</code></pre></div>",
        "id": 483612882,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732161272
    },
    {
        "content": "<p>I didn't think this was --rebuild-host PR... but that's probably the most likely candidate</p>",
        "id": 483612922,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732161316
    },
    {
        "content": "<p>Yeah. No link should turn off all the host stuff</p>",
        "id": 483614179,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732162241
    },
    {
        "content": "<p>Almost certainly the rebuild host pr</p>",
        "id": 483614190,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732162250
    },
    {
        "content": "<p>PR to fix this<br>\n<a href=\"https://github.com/roc-lang/roc/pull/7236\">https://github.com/roc-lang/roc/pull/7236</a></p>",
        "id": 483619861,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732166709
    },
    {
        "content": "<p>QQ: Is there any particular reason why there are two phases to canonicalization? (desugaring, and then conversion to can::Expr/etc)</p>",
        "id": 483829065,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1732245616
    },
    {
        "content": "<p>I'm wondering if it'd be crazy to try to combine those...</p>",
        "id": 483829425,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1732245882
    },
    {
        "content": "<p>There's a comment on this already</p>",
        "id": 483829571,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1732245983
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/blob/22423ca98bef41e2f55ae54e11c632bd0610c241/crates/compiler/can/src/module.rs#L265\">https://github.com/roc-lang/roc/blob/22423ca98bef41e2f55ae54e11c632bd0610c241/crates/compiler/can/src/module.rs#L265</a></p>",
        "id": 483829604,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1732246022
    },
    {
        "content": "<p>Oho well that sounds very fixable</p>",
        "id": 483829647,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1732246057
    },
    {
        "content": "<p>I've wanted to move precedence/associativity handling into the parser anyway</p>",
        "id": 483829686,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1732246080
    },
    {
        "content": "<p>If you can do that cleanly, I think that's a good improvement!</p>",
        "id": 483835648,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1732250310
    },
    {
        "content": "<p>ooo, using <a href=\"https://matklad.github.io/2020/04/13/simple-but-powerful-pratt-parsing.html\">Pratt parsing</a>? <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 483838371,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1732252177
    },
    {
        "content": "<blockquote>\n<p>Not only does it send your mind into MÃ¶beus-shaped hamster wheel, it also handles associativity and precedence!</p>\n</blockquote>\n<p><span aria-label=\"zany face\" class=\"emoji emoji-1f92a\" role=\"img\" title=\"zany face\">:zany_face:</span></p>",
        "id": 483840720,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732254018
    },
    {
        "content": "<p>Yeah that looks roughly right</p>",
        "id": 483841045,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1732254275
    },
    {
        "content": "<p>I've written basically that ~5 times now. Every time I need to either look up how exactly it's done, and/or spend hours debugging.</p>",
        "id": 483841108,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1732254318
    },
    {
        "content": "<p>Mobeus-shaped hamster wheel indeed</p>",
        "id": 483841117,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1732254330
    },
    {
        "content": "<blockquote>\n<p>send your mind into MÃ¶beus-shaped hamster wheel</p>\n</blockquote>\n<blockquote>\n<p>spend hours debugging</p>\n</blockquote>\n<p>That does not sound like something we want <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 483873455,
        "sender_full_name": "Anton",
        "timestamp": 1732268972
    },
    {
        "content": "<p>Well the great thing is that once it works you never have to touch it again</p>",
        "id": 483931341,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1732288329
    },
    {
        "content": "<p>it's basically the gold standard for how to efficiently resolve precedence without needing a separate pass later, and lots of compilers use it</p>",
        "id": 483944360,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1732292208
    },
    {
        "content": "<p>Or .... Just have simple precedence that is easy to parse like uiua.</p>",
        "id": 483945939,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732292667
    },
    {
        "content": "<p>Not a real suggestion if you want your language to read normal</p>",
        "id": 483945978,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732292681
    },
    {
        "content": "<p>But it does point to how bad binary ops and precedence are</p>",
        "id": 483946077,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732292710
    },
    {
        "content": "<p>In my own language I was working on, I didn't have bin/unary ops and let the user decide the precedence through function call.  Was that principal or laziness?  I'll let you make the call</p>",
        "id": 483951938,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1732294571
    },
    {
        "content": "<p>fiiiiiiinally<br>\n<a href=\"/user_uploads/22008/VbzkNTbGcD2h5-JFdJe5P0Rh/Screenshot-2024-11-30-at-9.12.36PM.png\">Screenshot 2024-11-30 at 9.12.36â¯PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/VbzkNTbGcD2h5-JFdJe5P0Rh/Screenshot-2024-11-30-at-9.12.36PM.png\" title=\"Screenshot 2024-11-30 at 9.12.36â¯PM.png\"><img data-original-dimensions=\"884x1776\" src=\"/user_uploads/thumbnail/22008/VbzkNTbGcD2h5-JFdJe5P0Rh/Screenshot-2024-11-30-at-9.12.36PM.png/840x560.webp\"></a></div>",
        "id": 485438679,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1733019187
    },
    {
        "content": "<p>We have DOCS!!!!</p>",
        "id": 485438692,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733019213
    },
    {
        "content": "<p>I need a bunch of cleanup before it's ready for a PR, but it actually works end to end now</p>",
        "id": 485438696,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1733019218
    },
    {
        "content": "<p>(for those who haven't been following along, this resolves the extremely longstanding issue where if you expose a type alias of a type from another module - such as <code>Http.Request : InternalHttp.Request</code> in this example) it would render as nothing - which is why the <a href=\"https://www.roc-lang.org/packages/basic-cli/Http\">Http docs today</a> are not very helpful <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 485438804,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1733019315
    },
    {
        "content": "<p>Great! <span aria-label=\"star struck\" class=\"emoji emoji-1f929\" role=\"img\" title=\"star struck\">:star_struck:</span></p>",
        "id": 485443699,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1733024404
    },
    {
        "content": "<p>Hey, would anyone a little more familiar with the inner workings of the compiler be able to suggest how I could get types for the tag completions I just added to the language server?<br>\nCurrently I get the tag names from the subs <code>tag_names</code> field</p>\n<p>Initially as an experiment I just tried to brute force it by iterating every variable entry in the current module subs looking for Tags<br>\nBut that approach didn't seem to find many of the tags that exist in <code>tag_names</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"n\">subs</span><span class=\"p\">.</span><span class=\"n\">variables</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">flat_map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">var1</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">subs2</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">var1</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">()).</span><span class=\"n\">content</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">();</span>\n<span class=\"w\">                    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                        </span><span class=\"n\">Content</span><span class=\"p\">::</span><span class=\"n\">Structure</span><span class=\"p\">(</span><span class=\"n\">structure</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">structure</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                            </span><span class=\"n\">FlatType</span><span class=\"p\">::</span><span class=\"n\">FunctionOrTagUnion</span><span class=\"p\">(</span><span class=\"n\">names</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ext</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">subs</span><span class=\"p\">.</span><span class=\"n\">get_subs_slice</span><span class=\"p\">(</span><span class=\"n\">names</span><span class=\"p\">).</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">filter_map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                                    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">label</span><span class=\"p\">.</span><span class=\"n\">as_ident_str</span><span class=\"p\">().</span><span class=\"n\">starts_with</span><span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                                        </span><span class=\"c1\">// let type_str = SubsFmtFlatType()</span>\n<span class=\"w\">                                        </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">CompletionItem</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                                            </span><span class=\"n\">label</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">label</span><span class=\"p\">.</span><span class=\"n\">as_ident_str</span><span class=\"p\">().</span><span class=\"n\">to_string</span><span class=\"p\">(),</span>\n<span class=\"w\">                                            </span><span class=\"n\">kind</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">CompletionItemKind</span><span class=\"p\">::</span><span class=\"n\">ENUM</span><span class=\"p\">),</span>\n<span class=\"w\">                                            </span><span class=\"n\">documentation</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">lsp_types</span><span class=\"p\">::</span><span class=\"n\">Documentation</span><span class=\"p\">::</span><span class=\"nb\">String</span><span class=\"p\">(</span>\n<span class=\"w\">                                                </span><span class=\"n\">format_var_type</span><span class=\"p\">(</span>\n<span class=\"w\">                                                    </span><span class=\"n\">ext</span><span class=\"p\">.</span><span class=\"n\">var</span><span class=\"p\">(),</span>\n<span class=\"w\">                                                    </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">subs2</span><span class=\"p\">,</span>\n<span class=\"w\">                                                    </span><span class=\"n\">module_id</span><span class=\"p\">,</span>\n<span class=\"w\">                                                    </span><span class=\"n\">interns</span><span class=\"p\">,</span>\n<span class=\"w\">                                                </span><span class=\"p\">),</span>\n<span class=\"w\">                                            </span><span class=\"p\">)),</span>\n<span class=\"w\">                                            </span><span class=\"o\">..</span><span class=\"nb\">Default</span><span class=\"p\">::</span><span class=\"n\">default</span><span class=\"p\">()</span>\n<span class=\"w\">                                        </span><span class=\"p\">})</span>\n<span class=\"w\">                                    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                                        </span><span class=\"nb\">None</span>\n<span class=\"w\">                                    </span><span class=\"p\">}</span>\n<span class=\"w\">                                </span><span class=\"p\">});</span>\n<span class=\"w\">                                </span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"w\">                            </span><span class=\"p\">}</span>\n<span class=\"w\">                            </span><span class=\"n\">FlatType</span><span class=\"p\">::</span><span class=\"n\">TagUnion</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ext</span><span class=\"p\">)</span>\n<span class=\"w\">                            </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">FlatType</span><span class=\"p\">::</span><span class=\"n\">RecursiveTagUnion</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ext</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"p\">.</span><span class=\"n\">iter_from_subs</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">subs</span><span class=\"p\">).</span><span class=\"n\">filter_map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">var</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                                    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">label</span><span class=\"p\">.</span><span class=\"n\">as_ident_str</span><span class=\"p\">().</span><span class=\"n\">starts_with</span><span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                                        </span><span class=\"c1\">// let type_str = SubsFmtFlatType()</span>\n<span class=\"w\">                                        </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">CompletionItem</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                                            </span><span class=\"n\">label</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">label</span><span class=\"p\">.</span><span class=\"n\">as_ident_str</span><span class=\"p\">().</span><span class=\"n\">to_string</span><span class=\"p\">(),</span>\n<span class=\"w\">                                            </span><span class=\"n\">kind</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">CompletionItemKind</span><span class=\"p\">::</span><span class=\"n\">ENUM</span><span class=\"p\">),</span>\n<span class=\"w\">                                            </span><span class=\"n\">documentation</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">lsp_types</span><span class=\"p\">::</span><span class=\"n\">Documentation</span><span class=\"p\">::</span><span class=\"nb\">String</span><span class=\"p\">(</span>\n<span class=\"w\">                                                </span><span class=\"n\">format_var_type</span><span class=\"p\">(</span>\n<span class=\"w\">                                                    </span><span class=\"n\">ext</span><span class=\"p\">.</span><span class=\"n\">var</span><span class=\"p\">(),</span>\n<span class=\"w\">                                                    </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">subs2</span><span class=\"p\">,</span>\n<span class=\"w\">                                                    </span><span class=\"n\">module_id</span><span class=\"p\">,</span>\n<span class=\"w\">                                                    </span><span class=\"n\">interns</span><span class=\"p\">,</span>\n<span class=\"w\">                                                </span><span class=\"p\">),</span>\n<span class=\"w\">                                            </span><span class=\"p\">)),</span>\n<span class=\"w\">                                            </span><span class=\"o\">..</span><span class=\"nb\">Default</span><span class=\"p\">::</span><span class=\"n\">default</span><span class=\"p\">()</span>\n<span class=\"w\">                                        </span><span class=\"p\">})</span>\n<span class=\"w\">                                    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                                        </span><span class=\"nb\">None</span>\n<span class=\"w\">                                    </span><span class=\"p\">}</span>\n<span class=\"w\">                                </span><span class=\"p\">});</span>\n<span class=\"w\">                                </span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"w\">                            </span><span class=\"p\">}</span>\n<span class=\"w\">                            </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[],</span>\n<span class=\"w\">                        </span><span class=\"p\">},</span>\n\n<span class=\"w\">                        </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[],</span>\n<span class=\"w\">                    </span><span class=\"p\">}</span>\n<span class=\"w\">                </span><span class=\"p\">})</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">collect</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"c1\">//we have to collect so that we can release the lock</span>\n</code></pre></div>\n<p>How can I go from tag_names to types? or maybe where should I add in the compiler some way of saving the tag unions that exist so i can use them later in the completion?</p>",
        "id": 485547497,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733116657
    },
    {
        "content": "<p>If you see this error</p>\n<div class=\"codehilite\"><pre><span></span><code>Please file an issue here: &lt;https://github.com/roc-lang/roc/issues/new/choose&gt;\nInvalid decimal for float literal = 1e10. This should be a type error!\nLocation: crates/compiler/mono/src/ir/literal.rs:115:25\n</code></pre></div>\n<p>Is this in dev-backend... or a Can related issue?</p>",
        "id": 488749259,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734054008
    },
    {
        "content": "<p>inbetween the two in mono</p>",
        "id": 488750027,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734054597
    },
    {
        "content": "<p>rocdec from str failed</p>",
        "id": 488750117,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734054638
    },
    {
        "content": "<p>it doesn't understand <code>e</code> I guess</p>",
        "id": 488750122,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734054644
    },
    {
        "content": "<p>Apparently my new version of the false interpreter found a bug in drop specialization.</p>",
        "id": 489040575,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734224616
    },
    {
        "content": "<p>Failing in a debug assert</p>",
        "id": 489040586,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734224628
    },
    {
        "content": "<p>I was hoping to just update and land this change quickly, not to round about debug a bunch of things due to the update (I guess it at least proves the value of having false interpreter as a test case)</p>",
        "id": 489040649,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734224665
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"463199\">@J.Teeuwissen</span> any chance you can look at <a href=\"https://github.com/roc-lang/roc/actions/runs/12334298533/job/34424325103?pr=7369\">the failure here</a>?</p>\n<p>It is a debug assert being hit in drop specialization. Can be reproed on the <a href=\"https://github.com/roc-lang/roc/tree/fix-false\">fix-false branch</a> on any target with <code>cargo test -p roc_cli -- false_</code></p>",
        "id": 489041882,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734225947
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/395097-compiler-development/topic/casual.20conversation/near/489041882\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"463199\">J.Teeuwissen</span> any chance you can look at <a href=\"https://github.com/roc-lang/roc/actions/runs/12334298533/job/34424325103?pr=7369\">the failure here</a>?</p>\n<p>It is a debug assert being hit in drop specialization. Can be reproed on the <a href=\"https://github.com/roc-lang/roc/tree/fix-false\">fix-false branch</a> on any target with <code>cargo test -p roc_cli -- false_</code></p>\n</blockquote>\n<p>Opened pr that should fix this specific issue: <a href=\"https://github.com/roc-lang/roc/pull/7376\">https://github.com/roc-lang/roc/pull/7376</a><br>\nI haven't touched Roc in a while, i suggest checking/testing the changes thoroughly ;)</p>",
        "id": 489078599,
        "sender_full_name": "J.Teeuwissen",
        "timestamp": 1734264078
    },
    {
        "content": "<p>Does this error message mean anything to anyone? for context, it's a <a href=\"https://github.com/roc-lang/basic-cli/actions/runs/12403271262/job/34626411898\">CI failure</a> in basic-cli after upgrading hyper and removing \"ring\" and replacing with \"aws-lc-sys\"  crate. Only failing in macOS-13 -- passes everywhere else.</p>\n<div class=\"codehilite\"><pre><span></span><code>cargo:warning=In file included from /Users/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-lc-sys-0.24.0/aws-lc/crypto/fipsmodule/bcm.c:150:\n  cargo:warning=In file included from /Users/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-lc-sys-0.24.0/aws-lc/crypto/fipsmodule/rand/urandom.c:69:\n  cargo:warning=/nix/store/hmchx96ysd0h19p7kx0w12pljkbp30j3-Libsystem-1238.60.2/include/CommonCrypto/CommonRandom.h:35:9: error: unknown type name &#39;CCCryptorStatus&#39;\n  cargo:warning=typedef CCCryptorStatus CCRNGStatus;\n  cargo:warning=        ^\n  cargo:warning=In file included from /Users/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-lc-sys-0.24.0/aws-lc/crypto/fipsmodule/bcm.c:150:\n  cargo:warning=/Users/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aws-lc-sys-0.24.0/aws-lc/crypto/fipsmodule/rand/urandom.c:394:42: error: use of undeclared identifier &#39;kCCSuccess&#39;\n  cargo:warning=  if (CCRandomGenerateBytes(out, len) == kCCSuccess) {\n  cargo:warning=                                         ^\n  cargo:warning=2 errors generated.\n</code></pre></div>",
        "id": 489865752,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734568288
    },
    {
        "content": "<p>I tried adding <code>CoreFoundation</code> do the nix flake... but that didn't help</p>\n<div class=\"codehilite\" data-code-language=\"Nix\"><pre><span></span><code><span class=\"ss\">darwinInputs</span> <span class=\"o\">=</span> <span class=\"k\">with</span> pkgs<span class=\"p\">;</span>\n    lib<span class=\"o\">.</span>optionals stdenv<span class=\"o\">.</span>isDarwin\n    <span class=\"p\">(</span><span class=\"k\">with</span> pkgs<span class=\"o\">.</span>darwin<span class=\"o\">.</span>apple_sdk<span class=\"o\">.</span>frameworks<span class=\"p\">;</span> <span class=\"p\">[</span>\n        Security\n        CoreFoundation\n    <span class=\"p\">]);</span>\n</code></pre></div>",
        "id": 489865867,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734568343
    },
    {
        "content": "<p>It's part of libsystem...that feels relevant...but not really sure</p>",
        "id": 489866035,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734568454
    },
    {
        "content": "<p>Also, looks to be part of libc in rust? <a href=\"https://concoct-rs.github.io/viewbuilder/libc/type.CCRNGStatus.html\">https://concoct-rs.github.io/viewbuilder/libc/type.CCRNGStatus.html</a></p>",
        "id": 489866148,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734568557
    },
    {
        "content": "<p>37 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"395097\" href=\"/#narrow/channel/395097-compiler-development/topic/bug.3A.20Outstanding.20references.20to.20the.20derived.20module\">#compiler development &gt; bug: Outstanding references to the derived module</a> by <span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span>.</p>",
        "id": 491142067,
        "sender_full_name": "Notification Bot",
        "timestamp": 1735443201
    },
    {
        "content": "<p>Do we have a syntax for extending a union twice:</p>\n<p>I have</p>\n<div class=\"codehilite\"><pre><span></span><code>Tag1: [A]\nTag2: [B]\n</code></pre></div>\n<p>I want the sum of those two and <code>C</code><br>\nSo:</p>\n<div class=\"codehilite\"><pre><span></span><code>Tag3: [C]Tag1,Tag2\n</code></pre></div>\n<p>But that is invalid syntax. Do we have a way to do this?</p>",
        "id": 491204734,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735503966
    },
    {
        "content": "<p>Maybe <code>([C]Tag1)Tag2</code>?</p>",
        "id": 491204874,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735504091
    },
    {
        "content": "<p>Looks like that probably should work but we parse it wrong:</p>\n<div class=\"codehilite\"><pre><span></span><code>ââ INVALID_EXTENSION_TYPE in examples/../platform/Sqlite.roc âââââââââââââââââââ\n\nThis record extension type is invalid:\n\n50â  Tag3 : ([C]Tag1)Tag2\n                     ^^^^\n\nNote: A record extension variable can only contain a type variable or\nanother record.\n\n\nââ INVALID_EXTENSION_TYPE in examples/../platform/Sqlite.roc âââââââââââââââââââ\n\nThis tag union extension type is invalid:\n\n50â  Tag3 : ([C]Tag1)Tag2\n                ^^^^\n\nNote: A tag union extension variable can only contain a type variable\nor another tag union.\n</code></pre></div>",
        "id": 491205356,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735504550
    },
    {
        "content": "<p>Note that the first error is a <code>record</code> extension</p>",
        "id": 491205407,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735504567
    },
    {
        "content": "<p>I thought I saw someone was proposing a spread type syntax for this?</p>",
        "id": 491207353,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735506484
    },
    {
        "content": "<p>There is. Just needs to be implemented.</p>",
        "id": 491207743,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735506846
    },
    {
        "content": "<p>Was wondering if something works today.</p>",
        "id": 491207749,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735506853
    },
    {
        "content": "<p>Is anyone interested to review <span class=\"user-mention\" data-user-id=\"453336\">@Joshua Warner</span>'s PR <a href=\"https://github.com/roc-lang/roc/pull/7431\">https://github.com/roc-lang/roc/pull/7431</a></p>\n<blockquote>\n<p>This is a fairly significant refactor, where we introduce a strongly-normalizing intermediate representation from which we actually generate the output in the formatter.</p>\n</blockquote>",
        "id": 491216444,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735515541
    },
    {
        "content": "<p>I think his idea is good and any potential (unforeseen negative) impact limited to the formatter.</p>",
        "id": 491216546,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735515636
    },
    {
        "content": "<p>Ohâ¦..</p>",
        "id": 491223879,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735522690
    },
    {
        "content": "<p><span aria-label=\"melting face\" class=\"emoji emoji-1fae0\" role=\"img\" title=\"melting face\">:melting_face:</span></p>",
        "id": 491223882,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735522694
    },
    {
        "content": "<p>I feel like half of my PNC change is going up in smoke <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 491223904,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735522716
    },
    {
        "content": "<p>And this is what I was working on right now</p>",
        "id": 491224175,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735522979
    },
    {
        "content": "<p>But more seriously I wish this design could work well with some sort of line width constraints (if it does and I missed it somehow i apologize), me and Richard were talking about that for better formatting of docs code blocks than what we have today</p>",
        "id": 491224293,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735523074
    },
    {
        "content": "<p>I think I just need to talk to Joshua about this</p>",
        "id": 491224463,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735523223
    },
    {
        "content": "<blockquote>\n<p>I wish this design could work well with some sort of line width constraints</p>\n</blockquote>\n<p>Yep, this has been on my mind</p>",
        "id": 491228171,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1735526555
    },
    {
        "content": "<p>When I've floated that previously (and seen it discussed separately), I think Richard has been somewhat against it</p>",
        "id": 491228217,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1735526610
    },
    {
        "content": "<p>There's probably a happy medium where there aren't dramatic changes from how things operate today, but line-length constraints / adjustments really only operate on the fringes / fix up some of the edge cases</p>",
        "id": 491228312,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1735526696
    },
    {
        "content": "<blockquote>\n<p>I feel like half of my PNC change is going up in smoke</p>\n</blockquote>\n<p>Oh noes! I definitely didn't intend to interfere.</p>",
        "id": 491228352,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1735526751
    },
    {
        "content": "<p>I think we'd want line length constraints that can be applied to type signatures for docs generation, but otherwise are ignored</p>",
        "id": 491228417,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735526790
    },
    {
        "content": "<p>yeah exactly <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 491228424,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735526805
    },
    {
        "content": "<p>in other words, have the line width be configurable, and have <code>roc format</code> set it to infinity, but set it to different numbers when generating docs</p>",
        "id": 491228449,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735526830
    },
    {
        "content": "<p>Because line length constraints in code just tend to force awkward breaking up of lines that need to be longer than the arbitrary limit</p>",
        "id": 491228477,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735526872
    },
    {
        "content": "<p>FWIW for normal formatting, I've been thinking of experimenting with soft line _width_ constraints rather than line length constraints - i.e. not counting indentation against you</p>",
        "id": 491228740,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1735527095
    },
    {
        "content": "<p>That avoids some kinds of awkward breaking when code is at a high indent level</p>",
        "id": 491228820,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1735527161
    },
    {
        "content": "<p>That also happens to be somewhat easier to implement</p>",
        "id": 491229002,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1735527312
    },
    {
        "content": "<p>Thinking about the docs use-case a bit more, a few things come to mind:</p>",
        "id": 491229109,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1735527405
    },
    {
        "content": "<ul>\n<li>Is one fixed limit for docs actually sufficient? Is it really ideal for docs to have the same width regardless of the width of the browser window?</li>\n</ul>",
        "id": 491229159,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1735527474
    },
    {
        "content": "<ul>\n<li>What if the user is on mobile? I'm not sure how practical / helpful that is - but having that look nice when someone's reading the tutorial on their phone after having clicked a hackernews link sounds good.</li>\n</ul>",
        "id": 491229239,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1735527535
    },
    {
        "content": "<p>The \"simple\" solution of just having everything authored to fit a reasonably narrow viewport (i.e. manually insert newlines to force multi-line representations in the formatter) feels not _terrible_.</p>",
        "id": 491229482,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1735527720
    },
    {
        "content": "<p>The big thing that tends to blow line length limits accidentally in roc code would be comments, and I don't know if there's an easy solution for that.</p>",
        "id": 491229559,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1735527764
    },
    {
        "content": "<p>Currently, the type signatures in docs have a max width about 600px wide even on really wide screens. So type signatures can get narrower than that, but are pretty much the same size on desktop and most mobile views</p>",
        "id": 491229562,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735527765
    },
    {
        "content": "<p>Why are type signatures special here?</p>",
        "id": 491229616,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1735527818
    },
    {
        "content": "<p>Because that's the thing we display in docs</p>",
        "id": 491229674,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735527845
    },
    {
        "content": "<p>Besides code examples, which I wouldn't expect to get special formatting</p>",
        "id": 491229691,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735527863
    },
    {
        "content": "<p>I'd just have those have <code>horizontal-scroll: auto</code></p>",
        "id": 491229702,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735527880
    },
    {
        "content": "<p>On formatting comments: since doc comments are markdown, any group of lines that doesn't have an empty line between its lines can be treated as a giant, single line and wrapped based on the word lengths. But I think normal comments just need to be left as-is</p>",
        "id": 491229894,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735528019
    },
    {
        "content": "<p>And why not just do line wrapping in the browser?</p>",
        "id": 491230011,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1735528110
    },
    {
        "content": "<p>I mean, just let the browser do that</p>",
        "id": 491230023,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1735528119
    },
    {
        "content": "<p>That seems not terrible?</p>",
        "id": 491230029,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1735528127
    },
    {
        "content": "<p>It may look a little weird if there's a very long type decl, but it'll copy-paste just fine</p>",
        "id": 491230134,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1735528208
    },
    {
        "content": "<p>For function types, we do let the browser do line wrapping after forcing multilining on long types</p>",
        "id": 491230318,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735528368
    },
    {
        "content": "<p>I think it would be less readable if we didn't force multilining</p>",
        "id": 491230340,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735528386
    },
    {
        "content": "<p>A good way to see this is to compare <code>List.walk</code> in the search results vs. its main section in the <code>List</code> module</p>",
        "id": 491230364,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735528412
    },
    {
        "content": "<p>Or maybe <code>List.walkFrom</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">walkFrom</span><span class=\"w\"> </span><span class=\"nf\">:</span>\n<span class=\"w\">    </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"nv\">elem</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"kt\">U64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nv\">state</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"nv\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">elem</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">state</span>\n</code></pre></div>\n<p>vs.</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">walkFrom</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"nv\">elem</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">U64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">elem</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">state</span>\n</code></pre></div>",
        "id": 491230495,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735528508
    },
    {
        "content": "<p>Or on a small width, <code>List.walkFromUntil</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">walkFromUntil</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"nv\">elem</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">U64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"nv\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">elem</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"kt\">Continue</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Break</span>\n<span class=\"w\">    </span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">state</span>\n</code></pre></div>",
        "id": 491230632,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735528634
    },
    {
        "content": "<p>It's <em>fine</em>, but I think were better with proper multilining</p>",
        "id": 491230649,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735528657
    },
    {
        "content": "<p>But donât those same reasons also apply to the source code?</p>",
        "id": 491230763,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1735528731
    },
    {
        "content": "<p>Why is the developer ok with that super long type in the source but not ok when itâs in docs?</p>",
        "id": 491230780,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1735528755
    },
    {
        "content": "<p>Because the developer can decide to break up a long def with a newline. Just putting a newline in the middle will make Roc multiline it for you</p>",
        "id": 491231008,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735528929
    },
    {
        "content": "<p>But you can also decide to leave it more legible as a single line</p>",
        "id": 491231020,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735528947
    },
    {
        "content": "<p>This lets people choose for themselves in wide display environments how to display their signatures</p>",
        "id": 491231041,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735528977
    },
    {
        "content": "<p>But the docs online are always narrow</p>",
        "id": 491231048,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735528985
    },
    {
        "content": "<p>So keeping them in a single line and autowrapping leads to potentially many <code>List.walkFromUntil</code>s</p>",
        "id": 491231088,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735529038
    },
    {
        "content": "<p>I personally don't feel that strongly about this, I don't think it matters that much</p>",
        "id": 491231138,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735529055
    },
    {
        "content": "<p>I think I agree with your logic there, but to me it more strongly indicates the formatting should adapt to the viewport in all situations where thatâs possible.</p>",
        "id": 491279126,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1735563279
    },
    {
        "content": "<p>Eg in the editor with LSP, it would ideally be possible to do a âview-onlyâ reformat or something, where the on-disk version has longer lines</p>",
        "id": 491279390,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1735563460
    },
    {
        "content": "<p>Or maybe this is done at âgit checkoutâ time: code is formatted to your preference when checked out, and formatted back to some generic standard when committed. Pretty sure hooks for that sort of thing do already exist.</p>",
        "id": 491279530,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1735563556
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453336\">Joshua Warner</span> <a href=\"#narrow/stream/395097-compiler-development/topic/casual.20conversation/near/491279126\">said</a>:</p>\n<blockquote>\n<p>I think I agree with your logic there, but to me it more strongly indicates the formatting should adapt to the viewport in all situations where thatâs possible.</p>\n</blockquote>\n<p>I understand in theory, but having spent years with formatters that do and don't enforce line width, I've found that the line width enforcement is frequently annoying and almost never helpful.</p>",
        "id": 491285226,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735567036
    },
    {
        "content": "<p>for example, sometimes I have two lines that are doing things that are very similar, and will be easier to understand if they are side by side and formatted the same way - so the similarities between them are visually obvious - but one happens to call functions with slightly longer names, causing the formatter to make it multiline.</p>",
        "id": 491285389,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735567123
    },
    {
        "content": "<p>I've wasted a bunch of time trying to coax line-width-enforcing formatters to not make my code harder to read, and I've wasted zero time doing that with formatters that don't enforce it</p>",
        "id": 491285559,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735567214
    },
    {
        "content": "<p>the difference is that when there is a hard width cap, like in types in docs, if there's going to be wrapping anyway, it's better if we can apply a wrapping algorithm that looks nicer than the browser default of just word wrapping without taking into account indentation, whether an entire type should now render as multiline, etc <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 491285761,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735567324
    },
    {
        "content": "<p>I think we're mostly agreeing :)</p>",
        "id": 491286202,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1735567577
    },
    {
        "content": "<p>The same view-width logic applies to my editor (I run it full screen and I'm not reducing the font size - so it's not getting any wider). I would love my editor to have nicer line wrapping behavior that's guided by a language server. Or alternatively, an easy git config to format my code to some line limit on checkout (supposing it's somehow perfectly invertable).</p>\n<p>The practical difference there is in difficulty. Docs (in theory) have one width across all users. Editor config is often unique-ish for each user.</p>",
        "id": 491286721,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1735567875
    },
    {
        "content": "<p>I would add tho that many times I've come across a docs site that looked silly because of how much it restricted the content width, and I've gone into the browser inspector and removed that width constraint while I read.</p>",
        "id": 491286863,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1735567944
    },
    {
        "content": "<p>(which is to say, I would push back a bit on the notion that 600px is great for everyone)</p>",
        "id": 491286881,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1735567964
    },
    {
        "content": "<p>Here's an idea: ship the formatter as a wasm binary in the browser that will dynamically re-format lines to match whatever the real display width is :)</p>",
        "id": 491286939,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1735568011
    },
    {
        "content": "<p>oh I was thinking we'd pick a few different breakpoints and render each of them</p>",
        "id": 491292065,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735570904
    },
    {
        "content": "<p>then CSS could hide all but one of them depending on browser width</p>",
        "id": 491292089,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735570918
    },
    {
        "content": "<p>Interesting!</p>",
        "id": 491292282,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1735571006
    },
    {
        "content": "<p>That's definitely lighter-weight, in terms of what we ship to the browser, so probably better.</p>",
        "id": 491292317,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1735571026
    },
    {
        "content": "<p>Not as much fun tho :)</p>",
        "id": 491292328,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1735571034
    },
    {
        "content": "<p>(I like it!)</p>",
        "id": 491292406,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1735571056
    },
    {
        "content": "<p>Deliciously constrained</p>",
        "id": 491292453,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1735571089
    },
    {
        "content": "<p>Ok, anyway, with that in mind: yes, I think this \"Node\" refactor for the formatter that I've been working on could be updated to (optionally) do line-length limits</p>",
        "id": 491295193,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1735572522
    },
    {
        "content": "<p>That's not high on my priority list right now, but happy to provide some guidance if someone else wanted to tackle that</p>",
        "id": 491295250,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1735572550
    },
    {
        "content": "<p>that's awesome! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 491305490,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735578005
    },
    {
        "content": "<p>I'm working on migrating my blog to the Roc-based static site generator I'm working on. I was doing some styling and trying to figure out the best approach to display code snippets on mobile.</p>\n<p>Rewriting the code snippets to have very short line widths is one approach. The thing is, while that means you don't have to scroll horizontally anymore, I think it creates a different flavor of poor readability where even simple expressions need to be broken across multiple lines.</p>\n<p>One approach that I'm wondering if others have tried before (haven't ran into this myself): Suppose code snippets on mobile are replaced with an icon, that when pressed open the snippet full screen, in landscape mode. The user presses the code example, flips their phone, then only needs to scroll vertically.</p>\n<p>In a brief experiment, I get a line width of about 65 characters with reasonble fontsize that way. I believe 50-70 characters or about 10 words per line is considered about ideal for readability of regular text, so if main-body width is around 50-70 characters on a big screen, then 65-character wide examples will look great on the big screen too, at least typographically speaking.</p>\n<p>Plus, if we can have a simple rule like \"code examples should have a max linewidth of 65\", and the result is the code is readable _and_ looks like same across different screen sizes, that creates a pretty nice experience writing code examples, because what-you-see-is-what-you-get.</p>",
        "id": 491382784,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1735635733
    },
    {
        "content": "<p>Interested to know if anyone has any ideas what could be causing this bug? </p>\n<p><a href=\"https://github.com/roc-lang/roc/issues/7461\">https://github.com/roc-lang/roc/issues/7461</a></p>",
        "id": 491847088,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735967377
    },
    {
        "content": "<p>I've been trying to isolate it and make a minimal repro. Been hacking code out and deleting things.</p>",
        "id": 491847101,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735967397
    },
    {
        "content": "<p>It's not related to the platform at all... this is just the package and compiler</p>",
        "id": 491847343,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735967592
    },
    {
        "content": "<p>I found even more code to cull out... it's pretty small now</p>",
        "id": 491847695,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735967969
    },
    {
        "content": "<p>Down to 1 file <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 491848129,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735968451
    },
    {
        "content": "<p>I assume this line was meant to be removed before merging a PR: <a href=\"https://github.com/roc-lang/roc/blame/main/crates/compiler/fmt/src/def.rs#L434\">https://github.com/roc-lang/roc/blame/main/crates/compiler/fmt/src/def.rs#L434</a></p>\n<p>cc: <span class=\"user-mention\" data-user-id=\"781658\">@Anthony Bullard</span></p>",
        "id": 491885085,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736004273
    },
    {
        "content": "<p>Was really confused when I formated a file and it became:</p>\n<div class=\"codehilite\"><pre><span></span><code>WTF???\nWTF???\napp [main] { pf: platform &quot;platform/main.roc&quot; }\n\n...\n</code></pre></div>",
        "id": 491885106,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736004303
    },
    {
        "content": "<p>Hah, I had that too :)</p>",
        "id": 491885139,
        "sender_full_name": "Anton",
        "timestamp": 1736004356
    },
    {
        "content": "<p>Yes, I have a PR to remove</p>",
        "id": 491885240,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736004414
    },
    {
        "content": "<p>I'm so sorry</p>",
        "id": 491885246,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736004422
    },
    {
        "content": "<p>I thought someone would catch it in code review</p>",
        "id": 491885265,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736004432
    },
    {
        "content": "<p>Because I obviously missed it</p>",
        "id": 491885267,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736004437
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/pull/7464\">https://github.com/roc-lang/roc/pull/7464</a></p>",
        "id": 491885276,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736004446
    },
    {
        "content": "<p>The Ubuntu fuzzer is my enemy</p>",
        "id": 491885355,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736004487
    },
    {
        "content": "<p>We probably should just force a merge and worry about the fuzzing issue separately</p>",
        "id": 491885369,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736004503
    },
    {
        "content": "<p>Clearly removing the println is correct</p>",
        "id": 491885380,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736004521
    },
    {
        "content": "<p>For some reason I keep hitting it</p>",
        "id": 491885417,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736004576
    },
    {
        "content": "<p>If you have the perms to force merge, feel free</p>",
        "id": 491885514,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736004627
    },
    {
        "content": "<p>cc: <span class=\"user-mention\" data-user-id=\"453336\">@Joshua Warner</span> Another fuzzing failure: <a href=\"https://github.com/roc-lang/roc/actions/runs/12610505189/job/35147114059\">https://github.com/roc-lang/roc/actions/runs/12610505189/job/35147114059</a></p>",
        "id": 491885561,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736004678
    },
    {
        "content": "<p>Not sure if it is a new regression that slipped in or something older that just took a while for the fuzzer to happen upon.</p>",
        "id": 491885597,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736004711
    },
    {
        "content": "<p>I'd like to get the crash report and debug myself</p>",
        "id": 491885788,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736004892
    },
    {
        "content": "<p>Since it <em>may</em> have come from the PNC change</p>",
        "id": 491885792,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736004901
    },
    {
        "content": "<p>Also did we meant to always allow this kind of syntax?</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nv\">some_field</span><span class=\"err\">?</span>\n<span class=\"w\">    </span><span class=\"s\">\"\"\"</span>\n<span class=\"s\">    \"\"\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 491885834,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736004952
    },
    {
        "content": "<p>To destructure an optional?</p>",
        "id": 491885876,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736004964
    },
    {
        "content": "<p>I don't see why that wouldn't work as silly as it looks</p>",
        "id": 491885919,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736005012
    },
    {
        "content": "<p>Ok, then I have to figure out why my change to <code>??</code> doesn't like</p>\n<div class=\"codehilite\"><pre><span></span><code>{\n    some_field??\n    &quot;&quot;&quot;\n    &quot;&quot;&quot;,\n}\n</code></pre></div>",
        "id": 491885960,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736005070
    },
    {
        "content": "<p>Might be PNC. failing input: <code>((@Y)@Y)((@Y)@Y)</code></p>",
        "id": 491886014,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736005104
    },
    {
        "content": "<p>Formats to <code>(@Y) @Y((@Y) @Y)</code> which is a different ast</p>",
        "id": 491886061,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736005163
    },
    {
        "content": "<p>So yeah, probably a new failure case</p>",
        "id": 491886086,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736005199
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> You mean for the new fuzzer bug?</p>",
        "id": 491886186,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736005294
    },
    {
        "content": "<p>This is hard to parse for my human eyes</p>",
        "id": 491886272,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736005343
    },
    {
        "content": "<p>I would think this should be a PNC apply with the result of the whitespace application of <code>@Y @Y</code> as the func and then result of the whitespace application of <code>@Y @Y</code> as the first arg, so just <code>(@Y @Y)(@Y @Y)</code></p>",
        "id": 491886430,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736005499
    },
    {
        "content": "<p>Of after migration to PNC <code>(@Y(@Y))(@Y(@Y))</code></p>",
        "id": 491886488,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736005556
    },
    {
        "content": "<p>Minimization is <code>((Y)Y)()</code></p>",
        "id": 491886613,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736005674
    },
    {
        "content": "<p><code>(Y Y)()</code> or migrated <code>(Y(Y))()</code> should be the formatted</p>",
        "id": 491886808,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736005837
    },
    {
        "content": "<p>Just a formatting error, parses correctly. Iâll put the fix in with my current PR</p>",
        "id": 491887283,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736006264
    },
    {
        "content": "<p>I have a fix for this.  It was super simple</p>",
        "id": 491901634,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736018866
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/pull/7467\">https://github.com/roc-lang/roc/pull/7467</a></p>",
        "id": 491905489,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736022510
    },
    {
        "content": "<p>Can someone try repro this bug for me? </p>\n<p><a href=\"https://github.com/roc-lang/roc/issues/7461#issuecomment-2571475674\">https://github.com/roc-lang/roc/issues/7461#issuecomment-2571475674</a></p>",
        "id": 491927922,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736044161
    },
    {
        "content": "<p>Just copy that file and </p>\n<div class=\"codehilite\"><pre><span></span><code>$ cargo run -- test bug.roc\n</code></pre></div>",
        "id": 491927927,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736044177
    },
    {
        "content": "<p>Sam hasn't been able to repro</p>",
        "id": 491927933,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736044194
    },
    {
        "content": "<p>Iâll try in a few</p>",
        "id": 491928159,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736044398
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> Repro'd on my m1 mac:</p>\n<div class=\"codehilite\"><pre><span></span><code>â¯ RUST_BACKTRACE=1 ../roc/target/debug/roc test bug.roc\nthread &#39;main&#39; panicked at crates/compiler/mono/src/reset_reuse.rs:1244:42:\nExpected symbol to have a layout. It should have been inserted in the environment already.\nstack backtrace:\n   0: rust_begin_unwind\n             at /rustc/25ef9e3d85d934b27d9dada2f9dd52b1dc63bb04/library/std/src/panicking.rs:647:5\n   1: core::panicking::panic_fmt\n             at /rustc/25ef9e3d85d934b27d9dada2f9dd52b1dc63bb04/library/core/src/panicking.rs:72:14\n   2: core::panicking::panic_display\n             at /rustc/25ef9e3d85d934b27d9dada2f9dd52b1dc63bb04/library/core/src/panicking.rs:196:5\n   3: core::panicking::panic_str\n             at /rustc/25ef9e3d85d934b27d9dada2f9dd52b1dc63bb04/library/core/src/panicking.rs:171:5\n   4: core::option::expect_failed\n             at /rustc/25ef9e3d85d934b27d9dada2f9dd52b1dc63bb04/library/core/src/option.rs:1988:5\n   5: expect&lt;&amp;roc_mono::reset_reuse::LayoutOption&gt;\n             at /rustc/25ef9e3d85d934b27d9dada2f9dd52b1dc63bb04/library/core/src/option.rs:894:21\n   6: get_symbol_layout\n             at /Users/anthonybullard/Development/roc/crates/compiler/mono/src/reset_reuse.rs:1244:9\n   7: insert_reset_reuse_operations_stmt\n             at /Users/anthonybullard/Development/roc/crates/compiler/mono/src/reset_reuse.rs:444:41\n   8: insert_reset_reuse_operations_stmt\n             at /Users/anthonybullard/Development/roc/crates/compiler/mono/src/reset_reuse.rs:516:36\n   9: insert_reset_reuse_operations_stmt\n             at /Users/anthonybullard/Development/roc/crates/compiler/mono/src/reset_reuse.rs:213:36\n  10: insert_reset_reuse_operations_stmt\n             at /Users/anthonybullard/Development/roc/crates/compiler/mono/src/reset_reuse.rs:516:36\n  11: insert_reset_reuse_operations_stmt\n             at /Users/anthonybullard/Development/roc/crates/compiler/mono/src/reset_reuse.rs:757:39\n  12: insert_reset_reuse_operations_stmt\n             at /Users/anthonybullard/Development/roc/crates/compiler/mono/src/reset_reuse.rs:516:36\n  13: insert_reset_reuse_operations_stmt\n             at /Users/anthonybullard/Development/roc/crates/compiler/mono/src/reset_reuse.rs:757:39\n  14: insert_reset_reuse_operations_stmt\n             at /Users/anthonybullard/Development/roc/crates/compiler/mono/src/reset_reuse.rs:516:36\n  15: insert_reset_reuse_operations_stmt\n             at /Users/anthonybullard/Development/roc/crates/compiler/mono/src/reset_reuse.rs:516:36\n  16: insert_reset_reuse_operations_stmt\n             at /Users/anthonybullard/Development/roc/crates/compiler/mono/src/reset_reuse.rs:213:36\n  17: insert_reset_reuse_operations_stmt\n             at /Users/anthonybullard/Development/roc/crates/compiler/mono/src/reset_reuse.rs:516:36\n  18: insert_reset_reuse_operations_stmt\n             at /Users/anthonybullard/Development/roc/crates/compiler/mono/src/reset_reuse.rs:213:36\n  19: insert_reset_reuse_operations_proc\n             at /Users/anthonybullard/Development/roc/crates/compiler/mono/src/reset_reuse.rs:82:20\n  20: insert_reset_reuse_operations\n             at /Users/anthonybullard/Development/roc/crates/compiler/mono/src/reset_reuse.rs:44:24\n  21: update\n             at /Users/anthonybullard/Development/roc/crates/compiler/load_internal/src/file.rs:2921:21\n  22: state_thread_step\n             at /Users/anthonybullard/Development/roc/crates/compiler/load_internal/src/file.rs:1765:25\n  23: {closure#1}\n             at /Users/anthonybullard/Development/roc/crates/compiler/load_internal/src/file.rs:2104:23\n  24: {closure#0}&lt;roc_load_internal::file::load_multi_threaded::{closure_env#1}, core::result::Result&lt;roc_load_internal::file::LoadResult, roc_load_internal::file::LoadingProblem&gt;&gt;\n             at /Users/anthonybullard/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-utils-0.8.16/src/thread.rs:163:65\n  25: call_once&lt;core::result::Result&lt;roc_load_internal::file::LoadResult, roc_load_internal::file::LoadingProblem&gt;, crossbeam_utils::thread::scope::{closure_env#0}&lt;roc_load_internal::file::load_multi_threaded::{closure_env#1}, core::result::Result&lt;roc_load_internal::file::LoadResult, roc_load_internal::file::LoadingProblem&gt;&gt;&gt;\n             at /rustc/25ef9e3d85d934b27d9dada2f9dd52b1dc63bb04/library/core/src/panic/unwind_safe.rs:272:9\n  26: do_call&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;crossbeam_utils::thread::scope::{closure_env#0}&lt;roc_load_internal::file::load_multi_threaded::{closure_env#1}, core::result::Result&lt;roc_load_internal::file::LoadResult, roc_load_internal::file::LoadingProblem&gt;&gt;&gt;, core::result::Result&lt;roc_load_internal::file::LoadResult, roc_load_internal::file::LoadingProblem&gt;&gt;\n             at /rustc/25ef9e3d85d934b27d9dada2f9dd52b1dc63bb04/library/std/src/panicking.rs:554:40\n  27: ___rust_try\n  28: try&lt;core::result::Result&lt;roc_load_internal::file::LoadResult, roc_load_internal::file::LoadingProblem&gt;, core::panic::unwind_safe::AssertUnwindSafe&lt;crossbeam_utils::thread::scope::{closure_env#0}&lt;roc_load_internal::file::load_multi_threaded::{closure_env#1}, core::result::Result&lt;roc_load_internal::file::LoadResult, roc_load_internal::file::LoadingProblem&gt;&gt;&gt;&gt;\n             at /rustc/25ef9e3d85d934b27d9dada2f9dd52b1dc63bb04/library/std/src/panicking.rs:518:19\n  29: catch_unwind&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;crossbeam_utils::thread::scope::{closure_env#0}&lt;roc_load_internal::file::load_multi_threaded::{closure_env#1}, core::result::Result&lt;roc_load_internal::file::LoadResult, roc_load_internal::file::LoadingProblem&gt;&gt;&gt;, core::result::Result&lt;roc_load_internal::file::LoadResult, roc_load_internal::file::LoadingProblem&gt;&gt;\n             at /rustc/25ef9e3d85d934b27d9dada2f9dd52b1dc63bb04/library/std/src/panic.rs:142:14\n  30: scope&lt;roc_load_internal::file::load_multi_threaded::{closure_env#1}, core::result::Result&lt;roc_load_internal::file::LoadResult, roc_load_internal::file::LoadingProblem&gt;&gt;\n             at /Users/anthonybullard/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-utils-0.8.16/src/thread.rs:163:18\n  31: load_multi_threaded\n             at /Users/anthonybullard/Development/roc/crates/compiler/load_internal/src/file.rs:2040:29\n  32: load\n             at /Users/anthonybullard/Development/roc/crates/compiler/load_internal/src/file.rs:1550:35\n  33: load\n             at /Users/anthonybullard/Development/roc/crates/compiler/load/src/lib.rs:39:5\n  34: load_and_monomorphize\n             at /Users/anthonybullard/Development/roc/crates/compiler/load/src/lib.rs:143:11\n  35: test\n             at /Users/anthonybullard/Development/roc/crates/cli/src/lib.rs:586:27\n  36: main\n             at /Users/anthonybullard/Development/roc/crates/cli/src/main.rs:83:17\n  37: call_once&lt;fn() -&gt; core::result::Result&lt;(), std::io::error::Error&gt;, ()&gt;\n             at /rustc/25ef9e3d85d934b27d9dada2f9dd52b1dc63bb04/library/core/src/ops/function.rs:250:5\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\n</code></pre></div>",
        "id": 491928519,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736044798
    },
    {
        "content": "<p>Ok, good to know... maybe it's only on Mac somehow. <span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> must have been using a linux machine</p>",
        "id": 491928580,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736044833
    },
    {
        "content": "<p>Maybe add a format! in that expect and see what the symbol is</p>",
        "id": 491928626,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736044901
    },
    {
        "content": "<p>That's not getting a layout inserted</p>",
        "id": 491928634,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736044913
    },
    {
        "content": "<p>&lt;-- <em>Does not know anything about mono</em></p>",
        "id": 491928684,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736044932
    },
    {
        "content": "<p>Yea've I've tried that. It doesn't give me much more info. I'm not sure how to get any more detail than just a symbol number</p>",
        "id": 491928689,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736044937
    },
    {
        "content": "<p>Are the symbols interned?</p>",
        "id": 491928699,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736044949
    },
    {
        "content": "<p>Looks like it, there's a MutSet of them</p>",
        "id": 491928728,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736044993
    },
    {
        "content": "<p>Adding a <code>format!</code> in there I can get</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;main&#39; panicked at crates/compiler/mono/src/reset_reuse.rs:1244:42:\nExpected symbol `bug.60` to have a layout. It should have been inserted in the environment already.\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>",
        "id": 491928730,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736044994
    },
    {
        "content": "<p>Maybe print that out as well</p>",
        "id": 491928736,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736045002
    },
    {
        "content": "<p>Actually that's not useful</p>",
        "id": 491928838,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736045074
    },
    {
        "content": "<p>This part of the compiler is harder for me to follow... it's like peering into the dark</p>",
        "id": 491929044,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736045298
    },
    {
        "content": "<p>You could instrument all of the calls to <code>Symbol::new</code> and see what kind of thing goes in, and the symbol that comes out</p>",
        "id": 491929156,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736045432
    },
    {
        "content": "<p>But this looks like something for Brendan to chew on much more effectively</p>",
        "id": 491929182,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736045486
    },
    {
        "content": "<p>It's so easy for it to go away too</p>",
        "id": 491929190,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736045502
    },
    {
        "content": "<p>Yep, I was on Linux</p>",
        "id": 491929473,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736045832
    },
    {
        "content": "<p>I want to force merge: <a href=\"https://github.com/roc-lang/roc/pull/7466\">https://github.com/roc-lang/roc/pull/7466</a></p>\n<p>It just updates the benchmarks to PI, PNC, and snake_case.</p>\n<p>It is failing for 2 reasons:</p>\n<ol>\n<li>fuzzer is failing (definitely not caused by this PR)</li>\n<li>The benchmark job is failing due to nQueens. That said, looking at the perf overall, I think we should merge it. Mostly perf is a wash. 2 examples are 3% faster. nQueens regressed by 1.5%. Feels mostly to be noise.</li>\n</ol>\n<p>any concerns?</p>",
        "id": 491931890,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736048749
    },
    {
        "content": "<p>Sounds good to me <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 491932288,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736049201
    },
    {
        "content": "<p>merged! <span aria-label=\"boom\" class=\"emoji emoji-1f4a5\" role=\"img\" title=\"boom\">:boom:</span></p>",
        "id": 491933064,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1736050104
    },
    {
        "content": "<p>I've got a couple of hours free... I'm going to poke at PR's and CI and try and land a bunch of things.</p>",
        "id": 492004682,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736116719
    },
    {
        "content": "<p>I'd like to finish the <code>examples/</code> folder cleanup, and then start on removing <code>Task</code> from the builtins and tests</p>",
        "id": 492004713,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736116758
    },
    {
        "content": "<p>You are hot on the trigger Luke!</p>",
        "id": 492005289,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736117286
    },
    {
        "content": "<p>I'll have to land these fuzzer fixes on a new PR :-P</p>",
        "id": 492005296,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736117298
    },
    {
        "content": "<p>It's a lesser of two evils, we're only going to give ourselves grief trying to keep Task around. The sooner we transition things across we can eliminate a lot of known bugs and rough edges.</p>",
        "id": 492005350,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736117370
    },
    {
        "content": "<p>Love it, it's probably for the best</p>",
        "id": 492005370,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736117396
    },
    {
        "content": "<p>This part has become larger than I expected</p>",
        "id": 492005420,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736117409
    },
    {
        "content": "<p>I have about a 400 file collection of updating almost all idents to snake_case idents</p>",
        "id": 492011732,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736123656
    },
    {
        "content": "<p>I have a couple tests left to fix, but we can actually maybe update everything at once</p>",
        "id": 492011753,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736123683
    },
    {
        "content": "<p>I don't know if it's worth breaking up into multiple PRs</p>",
        "id": 492011788,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736123728
    },
    {
        "content": "<p>Seems difficult to avoid breaking everything</p>",
        "id": 492011818,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736123756
    },
    {
        "content": "<p>I guess we could do one builtin module at a time?</p>",
        "id": 492011868,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736123768
    },
    {
        "content": "<p>Once I get tests passing, I'll see what I can do to break this up</p>",
        "id": 492012920,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736124684
    },
    {
        "content": "<p>I don't follow the logic of breaking it up. Is that to make it easier to roll back?</p>",
        "id": 492014331,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736125886
    },
    {
        "content": "<p>I'd rather not break it up, I just read the lack of response as people being unhappy with a big change.</p>",
        "id": 492014597,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736126061
    },
    {
        "content": "<p>I was getting in my head.</p>",
        "id": 492014602,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736126068
    },
    {
        "content": "<p>I'll keep it as is</p>",
        "id": 492014607,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736126081
    },
    {
        "content": "<p>Pull off the band-aid!</p>",
        "id": 492014621,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736126101
    },
    {
        "content": "<p>Okay, go team</p>",
        "id": 492014641,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736126114
    },
    {
        "content": "<p>Then people can just migrate!</p>",
        "id": 492014916,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736126374
    },
    {
        "content": "<p>Some handsome feller added a tool to make it easy</p>",
        "id": 492014996,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736126420
    },
    {
        "content": "<p>I think he looks more like Quasimodo, but agree to disagree</p>",
        "id": 492015030,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736126451
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> to clarify, this is basically upgrading all the Builtins to <code>snake_case</code> right? not doing the sneaky Can case change thing in the background?</p>",
        "id": 492015191,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736126602
    },
    {
        "content": "<p>Nope, just me manually updating every camelCase ident I found to snake_case</p>",
        "id": 492015210,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736126629
    },
    {
        "content": "<p>Some notes:</p>\n<ul>\n<li>I also changed the default entry point from <code>mainForHost</code> to <code>main_for_host</code></li>\n<li>I added parens where easy, but not in all of our string-based tests, that would have been hell</li>\n</ul>",
        "id": 492015289,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736126684
    },
    {
        "content": "<p>But it does include all the builtins</p>",
        "id": 492015294,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736126688
    },
    {
        "content": "<p>Yes</p>",
        "id": 492015296,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736126691
    },
    {
        "content": "<p>That's why it's 400 gosh darn files</p>",
        "id": 492015320,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736126711
    },
    {
        "content": "<p>It's a bandaid that covers your whole body</p>",
        "id": 492015335,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736126723
    },
    {
        "content": "<p>I'm all in favor of this as one big bandaid. I want to start migrating my packages to snake case, but hesitant to do so until I can migrate everything all at once.</p>",
        "id": 492015511,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1736126845
    },
    {
        "content": "<p>Seems like ? is broken with the new PNC change:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kn\">module</span><span class=\"w\"> </span><span class=\"err\">[]</span>\n\n<span class=\"nv\">println</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">=&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nv\">_</span>\n\n<span class=\"nv\">print_something</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">println</span><span class=\"err\">!</span><span class=\"p\">(</span><span class=\"s\">\"Hello, world!\"</span><span class=\"p\">)</span><span class=\"err\">?</span>\n\n<span class=\"w\">    </span><span class=\"kt\">Ok</span><span class=\"p\">({})</span>\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>â¯ roc check test.roc\nââ UNKNOWN OPERATOR in test.roc ââââââââââââââââââââââââââââââââââââââââââââââââ\n\nThis looks like an operator, but it&#39;s not one I recognize!\n\n6â      println!(&quot;Hello, world!&quot;)?\n                                 ^\n\nI have no specific suggestion for this operator, see\nhttps://www.roc-lang.org/tutorial#operator-desugaring-table for the\nfull list of operators in Roc.â\n</code></pre></div>",
        "id": 492139747,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736181427
    },
    {
        "content": "<p>So you are saying it just doesnât work with PNC?  Or doesnât work at all</p>",
        "id": 492139997,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736181505
    },
    {
        "content": "<p>PNC</p>",
        "id": 492140203,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736181576
    },
    {
        "content": "<p>It works with spaces</p>",
        "id": 492140215,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736181579
    },
    {
        "content": "<p>This makes sense. The parsing logic for question mark suffixes needs to be moved to the same spot as weâre handling pnc args</p>",
        "id": 492140683,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736181720
    },
    {
        "content": "<p>Iâll put that in with my refactor Iâm working on right now</p>",
        "id": 492140983,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736181813
    },
    {
        "content": "<p>Moving PncApply to its own expr node</p>",
        "id": 492141050,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736181838
    },
    {
        "content": "<p>Just upgrading basic-cli... there is only one external dependency on another package. <code>roc-json</code> in one example. </p>\n<p>I think we should remove that... well actually move it to the roc-json repo.</p>\n<p>This will make future breaking changes easier.</p>",
        "id": 492397008,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736288036
    },
    {
        "content": "<p>I agree with this. We can just have an example using <code>roc-json</code> on the website or in <code>examples</code></p>",
        "id": 492397140,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736288099
    },
    {
        "content": "<p>Seemingly, the last CI test failure in the <code>snake_case</code> change is that we are failing to generate the docs for <code>basic-cli</code> to host on the website.</p>",
        "id": 492411139,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736295185
    },
    {
        "content": "<p>In <code>basic-webserver</code>, we generate and host them in the <code>basic-webserver</code> repo</p>",
        "id": 492411156,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736295206
    },
    {
        "content": "<p>But presumably for outdated reasons, we generate the docs for <code>basic-cli</code> in the compiler repo and host them with the main website</p>",
        "id": 492411201,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736295241
    },
    {
        "content": "<p>Luke made a good point that this may be something we want because it lets us host multiple versions of the docs</p>",
        "id": 492411261,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736295260
    },
    {
        "content": "<p>For an old and a new version of <code>basic-cli</code></p>",
        "id": 492411273,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736295271
    },
    {
        "content": "<p>But I think we should just generate the docs for <code>basic-cli</code> in its own repo and host them there, as we do for <code>basic-webserver</code>. Any objections?</p>",
        "id": 492411325,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736295302
    },
    {
        "content": "<p>I think we need to figure out a better solution long term, but that works for now</p>",
        "id": 492411652,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736295484
    },
    {
        "content": "<p>Yes, to confirm, <code>basic-webserver</code> only <a href=\"https://github.com/roc-lang/basic-webserver/blob/8c95d6e9d41aa93bc5b7dd205f83dfa721f90b87/README.md?plain=1#L6\">hosts docs for main</a>, but <code>basic-cli</code> <a href=\"https://github.com/roc-lang/basic-cli/blob/2b8b01da7f6e4070e377bb773e629b03c66e31c8/README.md?plain=1#L16\">hosts for a few versions</a></p>",
        "id": 492411715,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736295517
    },
    {
        "content": "<p>I wonder if we could just commit the html files into the repo under a folder structure... </p>\n<div class=\"codehilite\"><pre><span></span><code>www/\n- 0.16.0/\n- 0.17.0/\n</code></pre></div>\n<p>I'm not sure if this is compatible with GH pages...</p>",
        "id": 492411962,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736295685
    },
    {
        "content": "<p>I think it is compatible</p>",
        "id": 492411979,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736295701
    },
    {
        "content": "<p>Then we don't need all the CI magic (and complications) in all the different repos</p>",
        "id": 492411994,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736295715
    },
    {
        "content": "<p>It's a bit handraulic, when making a release, but brain dead simple and easy to manage.</p>",
        "id": 492412100,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736295769
    },
    {
        "content": "<p>We'd want some script to make that process easier</p>",
        "id": 492412106,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736295771
    },
    {
        "content": "<p>Do we want to block updating Roc by changing this process, or are we okay with just stealing the <code>basic-webserver</code> code for now and doing that later?</p>",
        "id": 492412159,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736295813
    },
    {
        "content": "<p>Can we test the idea in something else like weaver or roc-json?</p>",
        "id": 492412380,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736295957
    },
    {
        "content": "<p>If it's reliable to host the static site versions this way, I'd lean towards removing the build stuff from roc's CI and just point at the basic-cli repo docs like webserver</p>",
        "id": 492412500,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736296018
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/basic-cli/pull/306\">https://github.com/roc-lang/basic-cli/pull/306</a></p>",
        "id": 492412654,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736296100
    },
    {
        "content": "<p>I use a similar workflow in <code>Weaver</code></p>",
        "id": 492412696,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736296128
    },
    {
        "content": "<p>Yeah, I just tried that... even making a test release in basic-cli but we cant without a new testing release of roc</p>",
        "id": 492412714,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736296141
    },
    {
        "content": "<p><a href=\"https://github.com/smores56/weaver/blob/main/.github/workflows/generate-docs.yaml\">https://github.com/smores56/weaver/blob/main/.github/workflows/generate-docs.yaml</a></p>",
        "id": 492412716,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736296142
    },
    {
        "content": "<p>So my idea above was just to do it manually (locally), and we can side-step all the CI madness when making/testing breaking changes like this</p>",
        "id": 492412754,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736296164
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/basic-cli/pull/305/files#diff-fcd4ffb682977fbcdc5e8a679eed82aa4ed2729be1ccb722f002e74be853fb35\">https://github.com/roc-lang/basic-cli/pull/305/files#diff-fcd4ffb682977fbcdc5e8a679eed82aa4ed2729be1ccb722f002e74be853fb35</a></p>\n<p>Here's where I tried the same thing... pushed it into the snake_case PR</p>",
        "id": 492412864,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736296210
    },
    {
        "content": "<p>Give me 5, I'll try it in roc-json -- I might need to read up on GH Pages</p>",
        "id": 492412941,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736296254
    },
    {
        "content": "<p>Okay, sounds good!</p>",
        "id": 492412995,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736296282
    },
    {
        "content": "<p>slight bump -- apparently the latest roc nightly isn't passing all test in roc-json <a href=\"https://github.com/lukewilliamboswell/roc-json/actions/runs/12661819172/job/35285690202?pr=43\">https://github.com/lukewilliamboswell/roc-json/actions/runs/12661819172/job/35285690202?pr=43</a> <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 492414201,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736296991
    },
    {
        "content": "<p>We must have fixed something recently</p>",
        "id": 492414224,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736297013
    },
    {
        "content": "<p>Does this test look like the actual is correct now?</p>\n<div class=\"codehilite\"><pre><span></span><code>ââ EXPECT FAILED in package/Json.roc âââââââââââââââââââââââââââââââââââââââââââ\n\nThis expectation failed:\n\n657â&gt;  # Test decode of F32\n658â&gt;  expect\n659â&gt;      actual : DecodeResult F32\n660â&gt;      actual = Str.toUtf8 &quot;12.34e-5&quot; |&gt; Decode.fromBytesPartial utf8\n661â&gt;      numStr = actual.result |&gt; Result.map Num.toStr\n662â&gt;\n663â&gt;      Result.withDefault numStr &quot;&quot; == &quot;0.00012339999375399202&quot;\n\nWhen it failed, these variables had these values:\n\nactual : DecodeResult F32\nactual = { rest: [], result: Ok 0.0001234 }\n\nnumStr : Result Str DecodeError\nnumStr = Ok &quot;0.0001234&quot;\n\n\n1 failed and 111 passed in 1252 ms.\n</code></pre></div>",
        "id": 492414321,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736297060
    },
    {
        "content": "<p>It looks like we've lost a lot of precision maybe when converting to Str?</p>",
        "id": 492414336,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736297078
    },
    {
        "content": "<p>Or somehow storing the F32 so it encode/decodes correctly</p>",
        "id": 492414411,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736297121
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> do you have any thoughts on this?</p>",
        "id": 492414532,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736297182
    },
    {
        "content": "<p>Oh, this is just the zig update</p>",
        "id": 492414621,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736297281
    },
    {
        "content": "<p>F32 now prints with the minimal digits necessary to be the correct number</p>",
        "id": 492414673,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736297297
    },
    {
        "content": "<p>Interestingly the <code>F64</code> one is still fine</p>\n<div class=\"codehilite\"><pre><span></span><code># Test decode of F64\nexpect\n    actual : DecodeResult F64\n    actual = Str.toUtf8 &quot;12.34e-5&quot; |&gt; Decode.fromBytesPartial utf8\n    numStr = actual.result |&gt; Result.map Num.toStr\n\n    Result.withDefault numStr &quot;&quot; == &quot;0.0001234&quot;\n</code></pre></div>",
        "id": 492414688,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736297308
    },
    {
        "content": "<p>Before it was printing tons of unnecessary/incorrect precision</p>",
        "id": 492414696,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736297314
    },
    {
        "content": "<p>A message was moved from this topic to <a class=\"stream-topic\" data-stream-id=\"304641\" href=\"/#narrow/channel/304641-ideas/topic/casual.20conversation\">#ideas &gt; casual conversation</a> by <span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span>.</p>",
        "id": 492417386,
        "sender_full_name": "Notification Bot",
        "timestamp": 1736299027
    },
    {
        "content": "<blockquote>\n<p>Do we want to block updating Roc by changing this process, or are we okay with just stealing the <code>basic-webserver</code> code for now and doing that later?</p>\n</blockquote>\n<p>Can we keep the docs for 0.18.0, 0.17.0 etc. available? They don't need to be rebuild every time, they use a docs.tar.gz that's in the release assets, so it should not create issues with breaking changes  in Roc</p>",
        "id": 492470353,
        "sender_full_name": "Anton",
        "timestamp": 1736330402
    },
    {
        "content": "<p>I pinged you but you haven't seen it yet <span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> <a href=\"https://github.com/roc-lang/basic-cli/pull/307\">https://github.com/roc-lang/basic-cli/pull/307</a></p>",
        "id": 492470734,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736330506
    },
    {
        "content": "<p>That PR includes the docs in the repo</p>\n<div class=\"codehilite\"><pre><span></span><code>docs/\n- 0.17.0/\n- 0.18.0/\n</code></pre></div>",
        "id": 492470921,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736330561
    },
    {
        "content": "<p>Ok, I'm going to merge that, configure and deploy the Pages site, and update the README</p>",
        "id": 492471416,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736330745
    },
    {
        "content": "<p>Ok, docs live at <br>\n<a href=\"https://roc-lang.github.io/basic-cli/\">https://roc-lang.github.io/basic-cli/</a><br>\n<a href=\"https://roc-lang.github.io/basic-cli/0.17.0/\">https://roc-lang.github.io/basic-cli/0.17.0/</a><br>\n<a href=\"https://roc-lang.github.io/basic-cli/0.18.0/\">https://roc-lang.github.io/basic-cli/0.18.0/</a></p>",
        "id": 492471676,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736330850
    },
    {
        "content": "<p>I'll check if I can forward the old links with netlify</p>",
        "id": 492472591,
        "sender_full_name": "Anton",
        "timestamp": 1736331169
    },
    {
        "content": "<p>This might just be a WIP thing... <span class=\"user-mention\" data-user-id=\"781658\">@Anthony Bullard</span> </p>\n<p>I am updating basic-webserver and used <code>--migrate</code> and noticed this</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"c1\"># default --migrate gives, but this looked a little confusing</span>\n<span class=\"n\">try</span><span class=\"p\">(</span><span class=\"no\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line!</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"$(datetime) $(Inspect.to_str(req.method)) $(req.uri)\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># works, but has the dreaded interrobang</span>\n<span class=\"no\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line!</span><span class=\"sc\">?(</span><span class=\"s2\">\"$(datetime) $(Inspect.to_str(req.method)) $(req.uri)\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># what I expected, but doesn't compile right now</span>\n<span class=\"no\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line!</span><span class=\"p\">(</span><span class=\"s2\">\"$(datetime) $(Inspect.to_str(req.method)) $(req.uri)\"</span><span class=\"p\">)?</span>\n</code></pre></div>",
        "id": 492597891,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736377477
    },
    {
        "content": "<p>I might fix it accidentally in the Task removal, we'll see once I finish updating the code</p>",
        "id": 492597959,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736377517
    },
    {
        "content": "<p>But yep, that's broken for me</p>",
        "id": 492597975,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736377527
    },
    {
        "content": "<p>My PR that's open right now fixes this</p>",
        "id": 492598085,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736377587
    },
    {
        "content": "<p>Ahk... I might just wait for that to land in main, it looks virtually done</p>",
        "id": 492598221,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736377677
    },
    {
        "content": "<p>Yeah, some guy is giving me a hard time in the review, but it'll get merged soon</p>",
        "id": 492598419,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736377773
    },
    {
        "content": "<p>Just tell me who, I'll beat him up for you</p>",
        "id": 492598443,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736377789
    },
    {
        "content": "<p>He looks like a Smore</p>",
        "id": 492598458,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736377798
    },
    {
        "content": "<p>And likes name-based puns</p>",
        "id": 492598507,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736377817
    },
    {
        "content": "<p>We need a smore or marshmellow emoji</p>",
        "id": 492598513,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736377823
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/N9_q8rx_pmyKkEh6xHJbfPt1/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/N9_q8rx_pmyKkEh6xHJbfPt1/image.png\" title=\"image.png\"><img data-original-dimensions=\"500x500\" src=\"/user_uploads/thumbnail/22008/N9_q8rx_pmyKkEh6xHJbfPt1/image.png/840x560.webp\"></a></div><p>Just put this in the custom emojis</p>",
        "id": 492598554,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736377849
    },
    {
        "content": "<p>Is that gen-llvm failure genuine?</p>",
        "id": 492598597,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736377884
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Run cargo nextest-gen-llvm --release --no-fail-fast --locked -E &quot;package(test_gen) - test(gen_str::str_append_scalar)&quot;\nerror: failed to run `rustc` to learn about target-specific information\n\nCaused by:\n  process didn&#39;t exit successfully: `/Users/username1/.cargo/bin/sccache /Users/username1/.rustup/toolchains/1.77.2-x86_64-apple-darwin/bin/rustc - --crate-name ___ --print=file-names --crate-type bin --crate-type rlib --crate-type dylib --crate-type cdylib --crate-type staticlib --crate-type proc-macro --print=sysroot --print=split-debuginfo --print=crate-name --print=cfg` (exit status: 2)\n  --- stderr\n  sccache: error: Timed out waiting for server startup\nerror: command `/Users/username1/.rustup/toolchains/1.77.2-x86_64-apple-darwin/bin/cargo test --no-run --message-format json-render-diagnostics --package test_gen --release --locked` exited with code 101\nError: Process completed with exit code 101.\n</code></pre></div>",
        "id": 492598613,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736377894
    },
    {
        "content": "<p>It's passed everything else except the fuzzer... so looks good to merge</p>",
        "id": 492598724,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736377938
    },
    {
        "content": "<p>What is this on <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> ?</p>",
        "id": 492598755,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736377970
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/actions/runs/12679852096/job/35340490822?pr=7480\">https://github.com/roc-lang/roc/actions/runs/12679852096/job/35340490822?pr=7480</a></p>",
        "id": 492598772,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736377983
    },
    {
        "content": "<p>Your PR \"Move PNC apply to separate Expr/Pattern variant\"</p>",
        "id": 492598777,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736377985
    },
    {
        "content": "<p>I don't know how to parse that error?</p>",
        "id": 492598906,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736378052
    },
    {
        "content": "<p>Does that seem like something likely from my PR if all the other tests pass?</p>",
        "id": 492598924,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736378065
    },
    {
        "content": "<p>It looks odd to me also</p>",
        "id": 492598955,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736378085
    },
    {
        "content": "<p>FWIW I took a brief look at your replies on that PR <span class=\"user-mention\" data-user-id=\"781658\">@Anthony Bullard</span>. Made sense to me. I can re-review after work today, but no concerns with going ahead and merging if you want to maintain momentum</p>",
        "id": 492599043,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736378138
    },
    {
        "content": "<p>I think we can either ignore it or restart the run... I lean towards merging now, and we can follow up if needed</p>",
        "id": 492599118,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736378164
    },
    {
        "content": "<p><img alt=\":smores:\" class=\"emoji\" src=\"https://avatars.zulip.com/22008/emoji/images/cdbc1121.png\" title=\"smores\"></p>",
        "id": 492599134,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736378178
    },
    {
        "content": "<p>I can get started on the platform migrations then</p>",
        "id": 492599136,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736378181
    },
    {
        "content": "<p>There ya go</p>",
        "id": 492599138,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736378182
    },
    {
        "content": "<p>OW!</p>",
        "id": 492599171,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736378201
    },
    {
        "content": "<p>Forgive me, I'm merging it</p>",
        "id": 492599213,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736378233
    },
    {
        "content": "<p>And restarting the refcount PR in CI so we can see that's still ready to go (and also confirm the PNC change was a non-issue)</p>",
        "id": 492599266,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736378276
    },
    {
        "content": "<p>What would you say is better for where we're currently at?</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"c1\"># THIS?</span>\n<span class=\"n\">cwd</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"no\">Env</span><span class=\"o\">.</span><span class=\"n\">cwd!</span><span class=\"p\">({})</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"no\">Result</span><span class=\"o\">.</span><span class=\"n\">map_err</span><span class=\"p\">(\\</span><span class=\"no\">CwdUnavailable</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"no\">Exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"Unable to read current working directory\"</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">try</span>\n\n<span class=\"c1\"># OR THIS?</span>\n<span class=\"n\">cwd</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"no\">Result</span><span class=\"o\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"no\">Env</span><span class=\"o\">.</span><span class=\"n\">cwd!</span><span class=\"p\">({}),</span>\n<span class=\"w\">        </span><span class=\"p\">\\</span><span class=\"no\">CwdUnavailable</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"no\">Exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"Unable to read current working directory\"</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">)?</span>\n\n<span class=\"c1\"># OR EVEN??</span>\n<span class=\"n\">cwd</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"no\">Env</span><span class=\"o\">.</span><span class=\"n\">cwd!</span><span class=\"p\">({})</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"no\">Result</span><span class=\"o\">.</span><span class=\"n\">map_err?</span><span class=\"p\">(\\</span><span class=\"no\">CwdUnavailable</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"no\">Exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"Unable to read current working directory\"</span><span class=\"p\">))</span>\n</code></pre></div>",
        "id": 492600621,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736379088
    },
    {
        "content": "<p>I'm leaning towards the second because it feels closest to the PNC vision despite not having static dispatch to chain it</p>",
        "id": 492600765,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736379180
    },
    {
        "content": "<p>The second is the syntax I used for the recent experiment in <a class=\"stream-topic\" data-stream-id=\"463736\" href=\"/#narrow/channel/463736-bugs/topic/Compiler.20panic.20for.20naming.20mismatch.20between.20type.20def.20and.20use\">#bugs &gt; Compiler panic for naming mismatch between type def and use</a></p>",
        "id": 492600802,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736379206
    },
    {
        "content": "<p>The first is also nice, in that the chain is clearer.</p>",
        "id": 492600968,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736379287
    },
    {
        "content": "<p>Though it's not quite the point of your example, this case is specifically handled by binop ?:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">cwd</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"kt\">Env</span><span class=\"nf\">.</span><span class=\"nv\">cwd</span><span class=\"err\">!</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"err\">?</span><span class=\"w\"> </span><span class=\"nf\">|</span><span class=\"kt\">CwdUnavailable</span><span class=\"nf\">|</span>\n<span class=\"w\">        </span><span class=\"kt\">Exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"Unable to read current working directory\"</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 492601468,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736379581
    },
    {
        "content": "<p>I think it's relevant here because the problematic cases are function calls with only a couple args in my eyes</p>",
        "id": 492601668,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736379674
    },
    {
        "content": "<p>I think this helps with that</p>",
        "id": 492601682,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736379683
    },
    {
        "content": "<p>Minor thing... but I don't think <code>--migrate</code> catches idents in import with <code>as</code> e.g.</p>\n<div class=\"codehilite\"><pre><span></span><code>import &quot;todos.html&quot; as todoHtml : List U8\n</code></pre></div>",
        "id": 492603442,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736380520
    },
    {
        "content": "<p>It doesn't for me either</p>",
        "id": 492603486,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736380534
    },
    {
        "content": "<p>Is that not a pattern?</p>",
        "id": 492603687,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736380630
    },
    {
        "content": "<p>It's probably something special, then</p>",
        "id": 492603819,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736380692
    },
    {
        "content": "<p>Just upgrading the basic-cli snake_case builtins PR to PNC now</p>",
        "id": 492607666,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736382880
    },
    {
        "content": "<p>Can you run it on <code>basic-webserver</code>'s build.roc while you're at it?</p>",
        "id": 492607903,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736383025
    },
    {
        "content": "<p>I have tested basic-webserver locally and it works well.</p>",
        "id": 492608036,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736383088
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">main</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">=&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nv\">_</span>\n<span class=\"nv\">main</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">args</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n\n<span class=\"w\">    </span><span class=\"nv\">parsed_args</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">        </span><span class=\"kt\">Cli</span><span class=\"nf\">.</span><span class=\"nv\">parse_or_display_message</span><span class=\"p\">(</span><span class=\"nv\">cli_parser</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">args</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Arg</span><span class=\"nf\">.</span><span class=\"nv\">to_os_raw</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">try</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">on_err</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">message</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Exit</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"nv\">message</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 492608064,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736383105
    },
    {
        "content": "<p>That <code>try</code> statement is not PNC'ed</p>",
        "id": 492608079,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736383120
    },
    {
        "content": "<p>I haven't been removing all try's. It's just messy for longer chains.</p>",
        "id": 492608104,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736383143
    },
    {
        "content": "<p>I guess here we could... my heuristic has been -- if it's going to be a chain in SD then leave it for now</p>",
        "id": 492608139,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736383170
    },
    {
        "content": "<p>Fine by me, but we might need to make another pass when whitespace calling is removed, since I think that'll happen before static dispatch is ready</p>",
        "id": 492608288,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736383263
    },
    {
        "content": "<p>Though I may be wrong on that</p>",
        "id": 492608296,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736383269
    },
    {
        "content": "<p>I expect that's the case because static dispatch is hard to implement, and <code>\\args -&gt;</code> going to <code>|args|</code> is easy to implement</p>",
        "id": 492608323,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736383292
    },
    {
        "content": "<p>I guess we can just cut a few testing releases and keep these breaking platform PRs in sync and do an actual release once we get <code>|args|</code> and <code>${interpolation}</code> etc</p>",
        "id": 492608472,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736383406
    },
    {
        "content": "<p>It's easier to update them as we go, but does look a bit strange being in this intermediate state -- so we probably don't want to do a full release with what we currently have</p>",
        "id": 492608491,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736383425
    },
    {
        "content": "<p>I don't have a strong opinion, do whatever is easy</p>",
        "id": 492608546,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736383448
    },
    {
        "content": "<p>We don't even need testing releases with the nix CI's, we just land the breaking change in roc main and we're good to go</p>",
        "id": 492608648,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736383526
    },
    {
        "content": "<p>Even without static dispatch... these examples are looking really nice!</p>",
        "id": 492608798,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736383639
    },
    {
        "content": "<p>So much talking on Zulip lately. Have to skim tons of things cause I don't have the time to keep up.</p>",
        "id": 492787374,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736446367
    },
    {
        "content": "<p>same</p>",
        "id": 492789034,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1736446892
    },
    {
        "content": "<p>A good sign, even if it has its drawbacks</p>",
        "id": 492789267,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736446970
    },
    {
        "content": "<p>yeah, I'm a big fan <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 492790775,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1736447452
    },
    {
        "content": "<p>26 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"395097\" href=\"/#narrow/channel/395097-compiler-development/topic/checking.20doc.20comments\">#compiler development &gt; checking doc comments</a> by <span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span>.</p>",
        "id": 492834772,
        "sender_full_name": "Notification Bot",
        "timestamp": 1736463164
    },
    {
        "content": "<p>I'm presuming that <code>foo_!</code> is how we'd represent a re-assignable effectful closure. Or would it be <code>foo!_</code>?</p>",
        "id": 492846785,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736468600
    },
    {
        "content": "<p><code>foo!_</code></p>",
        "id": 492846911,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736468659
    },
    {
        "content": "<p>I'm okay with that</p>",
        "id": 492846923,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736468667
    },
    {
        "content": "<p>Or just don't have reassignable effectful closures....who needs that</p>",
        "id": 492849509,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736470041
    },
    {
        "content": "<p>Generally I'd agree, but you never know</p>",
        "id": 492849619,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736470089
    },
    {
        "content": "<p>I don't actually feel that strongly against it. I could see building up a lazy computation with a for loop</p>",
        "id": 492855989,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736473326
    },
    {
        "content": "<p>14 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"395097\" href=\"/#narrow/channel/395097-compiler-development/topic/roc-json.20compiler.20bug\">#compiler development &gt; roc-json compiler bug</a> by <span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span>.</p>",
        "id": 493061217,
        "sender_full_name": "Notification Bot",
        "timestamp": 1736568235
    },
    {
        "content": "<p>What should a IgnoredValue field desugar / canonicalize to? e.g.</p>\n<div class=\"codehilite\"><pre><span></span><code>{ _name: 123 }\n</code></pre></div>\n<p>I ask because I have a test that triggers this panic: <a href=\"https://github.com/roc-lang/roc/blob/10ea93e838d290beda1da5ca2bf3c9c1fb53e6e0/crates/compiler/can/src/expr.rs#L2109\">https://github.com/roc-lang/roc/blob/10ea93e838d290beda1da5ca2bf3c9c1fb53e6e0/crates/compiler/can/src/expr.rs#L2109</a></p>\n<p>But it looks to me like desugaring doesn't remove IgnoredValue fields at all: <a href=\"https://github.com/roc-lang/roc/blob/10ea93e838d290beda1da5ca2bf3c9c1fb53e6e0/crates/compiler/can/src/desugar.rs#L1272\">https://github.com/roc-lang/roc/blob/10ea93e838d290beda1da5ca2bf3c9c1fb53e6e0/crates/compiler/can/src/desugar.rs#L1272</a></p>",
        "id": 493066871,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736574085
    },
    {
        "content": "<p>Those are used for record builders</p>",
        "id": 493067731,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736574979
    },
    {
        "content": "<p>Ideally, an IgnoredValue field would be a runtime error outside of a record builder</p>",
        "id": 493067753,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736575019
    },
    {
        "content": "<p>So we should probably emit one at that site</p>",
        "id": 493067779,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736575051
    },
    {
        "content": "<p>That you linked</p>",
        "id": 493067784,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736575058
    },
    {
        "content": "<p>Regarding PNC... my muscle memory definitely hasn't caught up yet. I'm really glad we have the <code>--migrate</code> flag, because I'm finding I write a lot of code before I realise, and then it's easy to just fix it up. </p>\n<p>I assume at some point it will be natural to add the <code>(</code> <code>)</code> but for now it's taking mental effort to remember.</p>",
        "id": 493163833,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736665729
    },
    {
        "content": "<p>I'm WFH today, so should have time between things to poke at PR's etc. Let me know if you need anything.</p>",
        "id": 493679392,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736892442
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/channel/395097-compiler-development/topic/casual.20conversation/near/493679392\">said</a>:</p>\n<blockquote>\n<p>I'm WFH today, so should have time between things to poke at PR's etc. Let me know if you need anything.</p>\n</blockquote>\n<p>Got anything with Chocolate?</p>",
        "id": 493679442,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736892476
    },
    {
        "content": "<p>I'm still waiting for those Red Bulls</p>",
        "id": 493679507,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736892493
    },
    {
        "content": "<p>Not offering emotional support today, sorry <span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span></p>",
        "id": 493679577,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736892535
    },
    {
        "content": "<p>Did we accidentally or deliberately remove the <code>todos.roc</code> example from basic-cli? ... (I'm probably the guilty one)... I can't remember</p>",
        "id": 494273098,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1737082498
    },
    {
        "content": "<p>Oh nvm, I think it's just <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> added <code>todos.db</code> for the sqlite example...</p>",
        "id": 494273242,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1737082589
    },
    {
        "content": "<p>All good</p>",
        "id": 494273254,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1737082597
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>[crates/compiler/mono/src/reset_reuse.rs:1244:9] symbol = `temp.64`\n[crates/compiler/mono/src/reset_reuse.rs:1244:9] symbol = `temp.data2`\n[crates/compiler/mono/src/reset_reuse.rs:1244:9] symbol = `temp.orientation_str`\n[crates/compiler/mono/src/reset_reuse.rs:1244:9] symbol = `temp.56`\n[crates/compiler/mono/src/reset_reuse.rs:1244:9] symbol = `temp.54`\n[crates/compiler/mono/src/reset_reuse.rs:1244:9] symbol = `temp.name_str`\n[crates/compiler/mono/src/reset_reuse.rs:1244:9] symbol = `temp.64`\n[crates/compiler/mono/src/reset_reuse.rs:1244:9] symbol = `temp.58`\n</code></pre></div>\n<p>Are the numbered symbols like temp.58 for variables that we make ourselves like during desugaring or something like that?</p>",
        "id": 495565793,
        "sender_full_name": "Anton",
        "timestamp": 1737658233
    },
    {
        "content": "<p>I think so, that or also in Can I assume.</p>",
        "id": 495582073,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1737664974
    },
    {
        "content": "<p>I think they are also for all intermediates when we breakdown expressions, but would need to double check that.</p>",
        "id": 495621157,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737685871
    },
    {
        "content": "<p>Sometimes yes</p>",
        "id": 495621179,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737685887
    },
    {
        "content": "<p>They can get generated in mono</p>",
        "id": 495621193,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737685900
    },
    {
        "content": "<p>Basically anywhere an ident would be used but we don't have a user-defined one</p>",
        "id": 495621219,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737685919
    },
    {
        "content": "<p>We generate a new one with a numeric name since that isn't syntactically valid</p>",
        "id": 495621289,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737685938
    },
    {
        "content": "<p>If we always converted <code>if</code> statements to <code>when bool is 1 -&gt; ...; _ -&gt; ...</code> there wouldn't be a perf drop, would there?</p>",
        "id": 495953603,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737886126
    },
    {
        "content": "<p>I'd expect it to always be the same perf or better</p>",
        "id": 495953611,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737886133
    },
    {
        "content": "<p>That should help us simplify our IR if we can get away with it</p>",
        "id": 495953631,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737886150
    },
    {
        "content": "<p>We already do this in <a href=\"https://github.com/roc-lang/roc/blob/3f09235d6afcf4fde3861e6546f521004d6de8b0/crates/compiler/mono/src/ir.rs#L1484\">mono/src/ir.rs</a>, so I'm gonna roll with it</p>",
        "id": 495954951,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737887294
    },
    {
        "content": "<p>should be the same perf, although we can give nicer error messages for type mismatches if we know it was an <code>if</code> compared to a <code>when</code></p>",
        "id": 495967933,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737898392
    },
    {
        "content": "<p>Fair</p>",
        "id": 495967954,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737898426
    },
    {
        "content": "<p>and that relies on constraint gen knowing it was an <code>if</code> compared to a <code>when</code>, and constraint gen (currently) does a separate pass over the canonical IR</p>",
        "id": 495967966,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737898438
    },
    {
        "content": "<p>I'm thinking about post typechecking, on the <code>build/</code> side of things</p>",
        "id": 495968038,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737898465
    },
    {
        "content": "<p>oh that's fine then</p>",
        "id": 495968043,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737898472
    },
    {
        "content": "<p>Yeah, great</p>",
        "id": 495968048,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737898478
    },
    {
        "content": "<p>incidentally, I think we can potentially do it differently someday (where we generate constraints at the same time as making the canonical IR) but it's tricky because order of constraints matters, and we need them to be sorted by dependencies (e.g. first constrain functions whose types don't depend on other functions, etc.) - right now, doing the constraint pass after canonicalization (and sorting the canonical IR) takes care of that, but if we wanted to do (constrain + canonicalize) at the same time, then we'd need to have the ability to sort the constraints separately after the fact</p>",
        "id": 495968105,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737898544
    },
    {
        "content": "<p>since we don't know the dependency order until after canonicalization has completely finished</p>",
        "id": 495968113,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737898556
    },
    {
        "content": "<p>so I don't think now is the right time to do that since it might break things if we get it wrong <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 495968165,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737898571
    },
    {
        "content": "<p>It seems like the lesson of the moment is to do everything in separate passes for greater likelihood of correctness</p>",
        "id": 495968183,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737898591
    },
    {
        "content": "<p>yeah</p>",
        "id": 495968191,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737898603
    },
    {
        "content": "<p>and then in the future we can experiment with incrementally combining things to see if they make that one step faster while maintaining correctness</p>",
        "id": 495968218,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737898629
    },
    {
        "content": "<p>but yeah, correctness is the name of the game!</p>",
        "id": 495968255,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737898671
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/channel/395097-compiler-development/topic/casual.20conversation/near/495968183\">said</a>:</p>\n<blockquote>\n<p>It seems like the lesson of the moment is to do everything in separate passes for greater likelihood of correctness</p>\n</blockquote>\n<p>This is also echoed by <a href=\"https://nanopass.org/index.html\">nanopass</a></p>",
        "id": 496097553,
        "sender_full_name": "Anton",
        "timestamp": 1737976829
    },
    {
        "content": "<p>is there any docs/papers on how tags are inferred? it seems like they break the fundamental unification rule of not allowing type variables to be solved to a type containing themself.</p>",
        "id": 496110842,
        "sender_full_name": "emma",
        "timestamp": 1737981099
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span></p>",
        "id": 496112312,
        "sender_full_name": "Anton",
        "timestamp": 1737981518
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"871424\">@emma</span> the topic in literature is \"polymorphic variants\", roc takes a combination of approaches</p>",
        "id": 496140670,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737989481
    },
    {
        "content": "<p>Can you elaborate on the unification rule you're describing? I'm not sure I follow the problem fully</p>",
        "id": 496140771,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737989511
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/stream/395097-compiler-development/topic/casual.20conversation/near/496097553\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/channel/395097-compiler-development/topic/casual.20conversation/near/495968183\">said</a>:</p>\n<blockquote>\n<p>It seems like the lesson of the moment is to do everything in separate passes for greater likelihood of correctness</p>\n</blockquote>\n<p>This is also echoed by <a href=\"https://nanopass.org/index.html\">nanopass</a></p>\n</blockquote>\n<p>This makes some sense, but generally nano pass compilers are measurably very slow. I think it is better to make reasonably sized passes than nano passes. But perf depends on a lot of things. So leaning toward the simplest first makes the most sense.</p>",
        "id": 496166816,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737996061
    },
    {
        "content": "<p>For a long time I've wanted to try to \"nanopass, but use some compiler magic to merge passes and make it fast\"</p>",
        "id": 496456053,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738116013
    },
    {
        "content": "<p>Seems like the <a href=\"https://github.com/roc-lang/roc/pull/7130\">auto-annotate type signatures</a> PR is ready to merge. Anyone against doing that now? I don't think it will interfere with the release process we're working on right now</p>",
        "id": 496525784,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738149978
    },
    {
        "content": "<p>Let's hold that for 24 hours to be safe</p>",
        "id": 496526915,
        "sender_full_name": "Anton",
        "timestamp": 1738150359
    },
    {
        "content": "<p>Frank Pfenning and co with yet another banger <a href=\"https://blog.sigplan.org/2025/01/29/parametric-subtyping-for-structural-parametric-polymorphism/\">https://blog.sigplan.org/2025/01/29/parametric-subtyping-for-structural-parametric-polymorphism/</a></p>",
        "id": 496703723,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1738219469
    },
    {
        "content": "<p>Where do you find these papers? Conferences?</p>",
        "id": 496705126,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738220281
    },
    {
        "content": "<p>used to track but too lazy now. found it on a forum</p>",
        "id": 496705201,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1738220314
    },
    {
        "content": "<p>Which forum?</p>",
        "id": 496705254,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738220356
    },
    {
        "content": "<p>I think I could replace some doomscrolling with this kind of info</p>",
        "id": 496705276,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738220378
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/A-t-RlwmOY__kXOW_mOoeDaq/image.png\">image.png</a><br>\nooph</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/A-t-RlwmOY__kXOW_mOoeDaq/image.png\" title=\"image.png\"><img data-original-content-type=\"image/png\" data-original-dimensions=\"542x64\" src=\"/user_uploads/thumbnail/22008/A-t-RlwmOY__kXOW_mOoeDaq/image.png/840x560.webp\"></a></div>",
        "id": 497301490,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1738538480
    },
    {
        "content": "<p>Weâve been talking</p>",
        "id": 497301514,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738538504
    },
    {
        "content": "<p>i love yappers ngl</p>",
        "id": 497301533,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1738538519
    },
    {
        "content": "<p>Itâs almost like deciding to rewrite the compiler sparks a lot of convo</p>",
        "id": 497301584,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738538534
    },
    {
        "content": "<p>crazy thought</p>",
        "id": 497301596,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1738538549
    },
    {
        "content": "<p>My plan is to hang in there as long as possible... and hopefully I'll learn the dark arts of roc's compiler internals by osmosis -- reading all the discussion and seeing the PR's roll in.</p>",
        "id": 497301654,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738538618
    },
    {
        "content": "<p>Man, I'm glad we have the rest of the team for the low-level stuff. I never had a good introduction to it and it still feels like black magic. I look forward to reading lots of PRs that might educate me!</p>",
        "id": 497303490,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738539949
    },
    {
        "content": "<p>Me too buddy, me too</p>",
        "id": 497304414,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738540678
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/Ay08P0iRKWGEn6H_ZzTUjv1c/3489a045-b487-43da-b4c6-48ab2b961b0b.png\">3489a045-b487-43da-b4c6-48ab2b961b0b.png</a><br>\nlol I was caught up on all threads yesterday, this has gotta be some kind of record in here <span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span><span aria-label=\"saluting face\" class=\"emoji emoji-1fae1\" role=\"img\" title=\"saluting face\">:saluting_face:</span><span aria-label=\"popcorn\" class=\"emoji emoji-1f37f\" role=\"img\" title=\"popcorn\">:popcorn:</span></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/Ay08P0iRKWGEn6H_ZzTUjv1c/3489a045-b487-43da-b4c6-48ab2b961b0b.png\" title=\"3489a045-b487-43da-b4c6-48ab2b961b0b.png\"><img data-original-content-type=\"image/png\" data-original-dimensions=\"720x1600\" src=\"/user_uploads/thumbnail/22008/Ay08P0iRKWGEn6H_ZzTUjv1c/3489a045-b487-43da-b4c6-48ab2b961b0b.png/840x560.webp\"></a></div>",
        "id": 497482196,
        "sender_full_name": "jan kili",
        "timestamp": 1738600199
    },
    {
        "content": "<p>Wait.... <a class=\"stream\" data-stream-id=\"395097\" href=\"/#narrow/channel/395097-compiler-development\">#compiler development</a> is a different color for different people....that bugs me.</p>",
        "id": 497515771,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738610831
    },
    {
        "content": "<p>It's red for me, green for Jan, looks to be lavender for ayaz.</p>",
        "id": 497515944,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738610891
    },
    {
        "content": "<p>Itâs greyish brown for me</p>",
        "id": 497527933,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1738615551
    },
    {
        "content": "<p>light purple</p>",
        "id": 497528041,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738615583
    },
    {
        "content": "<p>Same color as <a class=\"stream\" data-stream-id=\"231634\" href=\"/#narrow/channel/231634-beginners\">#beginners</a> but slightly brighter</p>",
        "id": 497528348,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1738615707
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"454654\">Ayaz Hafiz</span> <a href=\"#narrow/channel/395097-compiler-development/topic/casual.20conversation/near/496140670\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"871424\">emma</span> the topic in literature is \"polymorphic variants\", roc takes a combination of approaches</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> apologies for the very late reply - I'm aware of the term \"polymorphic variants\" but I haven't found any (simple) descriptions of how it gets implemented on top of typical HM systems - it seems to be hard to fit into the usual unification rules. Do you know if theres any good explanations of how roc or other languages implement it?</p>",
        "id": 497910678,
        "sender_full_name": "emma",
        "timestamp": 1738766870
    },
    {
        "content": "<p>there are a ton of papers from Leijen etc. but I don't know how interpretable they might be. Daan Leijenâs âExtensible recordsâ paper is the simplest approach I know of, and is similar to the approach Elm/Roc use. I'll give a short description of the mechanism in Roc, feel free to ask for elaboration if it's confusing or incomplete. The approach for records is to bind a type variable to a record that unifies freely; for example the callÂ <code>(fun r -&gt; r.x) {x: 1, y: 1}</code>Â types the function asÂ <code>{x: a}b -&gt; a</code>Â (whereÂ <code>b</code>Â is free) and the record asÂ <code>{x: int, y: int}c</code>Â (whereÂ <code>c</code>Â is free);Â <code>{x: a}b ~ {x: int, y: int}c</code>Â yieldsÂ <code>b = {y: int}d, c = {}d</code>Â (whereÂ <code>d</code>Â is fresh).<br>\nThe approach for variants is the dual. That is, an expressionÂ <code> `A 1 = `B \"foo\" </code> types the LHS and RHS asÂ <code>[A int]a</code>Â andÂ <code>[B str]b</code>Â respectively, the constraintÂ <code>[A int]a ~ [B str]b</code>Â then solvesÂ <code>a = [B str]c, b = [A int]c</code>Â and both the LHS and RHS have typeÂ <code>[A int, B str]c</code>. However, a functionÂ <code>[A, B]a -&gt; {}</code>Â is materially different thanÂ <code>[A, B] -&gt; {}</code>Â - if you have a pattern match over the input on the former, you always need a catch-all branch, whereas a pattern match on the latter only needs a branch forÂ <code>A</code>Â andÂ <code>B</code>. To handle this, Roc selectively removes the remaining unbound variable (<code>a</code> in <code>[A, B]a</code> above) depending on the usage pattern of the variable, for example if it is used in an pattern match without a catch-all branch.</p>",
        "id": 497912244,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1738767262
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"871424\">@emma</span> Poly. variant implementation in Fir may be useful: <a href=\"https://github.com/fir-lang/fir\">https://github.com/fir-lang/fir</a> it's basically \"A Polymorphic Type System for Extensible Records and Variants\" except it doesn't have \"absent\" constraints (yet, at least). I use them for error values and exceptions: <a href=\"https://osa1.net/posts/2025-01-18-fir-error-handling.html\">https://osa1.net/posts/2025-01-18-fir-error-handling.html</a></p>",
        "id": 497921897,
        "sender_full_name": "osa1",
        "timestamp": 1738769758
    },
    {
        "content": "<p>We also had a discussion here with <span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> on variants and some of the counter intuitive type checking with rows, that may also be helpful. (gotta run now so can't find the thread, sorry)</p>",
        "id": 497922614,
        "sender_full_name": "osa1",
        "timestamp": 1738769929
    },
    {
        "content": "<p>Ok yall this might just be sleep deprivation talking but what do yall think about a C++ concepts / rewriting rules feature in Roc</p>",
        "id": 498253242,
        "sender_full_name": "Wizard ish",
        "timestamp": 1738898898
    },
    {
        "content": "<p>That is to say, we have a way to say âif this expression is well formed, then for some other expression we can derive its meaningâ</p>",
        "id": 498253281,
        "sender_full_name": "Wizard ish",
        "timestamp": 1738898951
    },
    {
        "content": "<p>I'm not understanding. Could you give an example?</p>",
        "id": 498253523,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738899103
    },
    {
        "content": "<p>So, like, basically auto functors</p>",
        "id": 498253683,
        "sender_full_name": "Wizard ish",
        "timestamp": 1738899210
    },
    {
        "content": "<p>So, if we have a function f on x to y, we can apply f to Maybe x without specifying that it is a map</p>",
        "id": 498253781,
        "sender_full_name": "Wizard ish",
        "timestamp": 1738899257
    },
    {
        "content": "<p>Basically, allowing code to be fully modular (a more complex structure can always be used in place of a simpler one)</p>",
        "id": 498253965,
        "sender_full_name": "Wizard ish",
        "timestamp": 1738899376
    },
    {
        "content": "<p>So this is a combo of Ocaml's module functors and Zig's \"everything is a struct\", right?</p>",
        "id": 498254492,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738899807
    },
    {
        "content": "<p>Essentially, yes</p>",
        "id": 498254617,
        "sender_full_name": "Wizard ish",
        "timestamp": 1738899900
    },
    {
        "content": "<p>(From what I know of these)</p>",
        "id": 498254690,
        "sender_full_name": "Wizard ish",
        "timestamp": 1738899961
    },
    {
        "content": "<p>I think we've so far been successful in reducing the complexity of features in Roc to basically flavors of functions and values (values being sum or product types) with some light desugaring thrown on top. This comes with the recent push to remove proper typeclasses in the form of abilities and module params, since the simpler Roc without them can still be as productive as necessary</p>",
        "id": 498254728,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738899964
    },
    {
        "content": "<p>I think adding a feature like that would be cool and I can definitely think of places we could get use out of it</p>",
        "id": 498254764,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738899984
    },
    {
        "content": "<p>But I'm not sure how much we can do with that which we can't do today</p>",
        "id": 498254785,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738900011
    },
    {
        "content": "<p>And it would now be in my eyes the most complex feature in Roc</p>",
        "id": 498254804,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738900027
    },
    {
        "content": "<p>So that's a pretty high bar to hit, unless we can justify its addition</p>",
        "id": 498254821,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738900046
    },
    {
        "content": "<p>So I'd love to see some patterns we think this could help with in Roc apps</p>",
        "id": 498254840,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738900070
    },
    {
        "content": "<p>Hmmmm yeah a simple type system is definitely better</p>",
        "id": 498254965,
        "sender_full_name": "Wizard ish",
        "timestamp": 1738900144
    },
    {
        "content": "<p>I didn't expect zig to be so similar to Roc. If zig did not exist and we made a low-level language starting from our Roc experience, we could have ended up very close to zig :)</p>",
        "id": 498406221,
        "sender_full_name": "Anton",
        "timestamp": 1738954182
    },
    {
        "content": "<p><span aria-label=\"exploding head\" class=\"emoji emoji-1f92f\" role=\"img\" title=\"exploding head\">:exploding_head:</span> that's delightful to hear, now I may actually try learning it!</p>",
        "id": 498406784,
        "sender_full_name": "jan kili",
        "timestamp": 1738954433
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/stream/395097-compiler-development/topic/casual.20conversation/near/498406221\">said</a>:</p>\n<blockquote>\n<p>I didn't expect zig to be so similar to Roc. If zig did not exist and we made a low-level language starting from our Roc experience, we could have ended up very close to zig :)</p>\n</blockquote>\n<p>What makes you say this? Just curious. I wouldn't consider them very similar, but I guess it depends on which aspect you re comparing.</p>",
        "id": 498412516,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738956591
    },
    {
        "content": "<p>error union, try, switch, compiled, likes to go fast, type inference, structs are similar to records, no shadowing, generics, snake_case variables, PascalCase types, likes to keep it simple</p>",
        "id": 498493266,
        "sender_full_name": "Anton",
        "timestamp": 1739013561
    },
    {
        "content": "<p>saw the switching to zig thing, very cool, very very cool. Also nice that it's happening right in the repo next to the existing code. I'll keep an eye out, been needing an excuse to write some zig. I come to you now at the turn of the tide.</p>",
        "id": 498519175,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1739035283
    },
    {
        "content": "<p>good to see you Lucas :)</p>",
        "id": 498519499,
        "sender_full_name": "Anton",
        "timestamp": 1739035557
    },
    {
        "content": "<p>nice to see you too Anton. My Aiken side quest was fruitful and it got the niche adoption it needed to last haha. New gig is compiler stuff for this language called compact that compiles to zero knowledge circuits.</p>",
        "id": 498519740,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1739035705
    },
    {
        "content": "<blockquote>\n<p>zero knowledge circuits</p>\n</blockquote>\n<p>Can you define this? Or link to it?</p>",
        "id": 498520011,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739035921
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> this kind of thing<br>\n<a href=\"https://eprint.iacr.org/2019/953.pdf\">https://eprint.iacr.org/2019/953.pdf</a><br>\n<a href=\"https://coingeek.com/how-plonk-works-part-1/\">https://coingeek.com/how-plonk-works-part-1/</a></p>",
        "id": 498520425,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1739036267
    },
    {
        "content": "<p>Interesting, I've forgotten the details of how zero knowledge proofs work but I do remember that I thought it was cool <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 498524425,
        "sender_full_name": "Anton",
        "timestamp": 1739039494
    },
    {
        "content": "<p>I just locally added a <code>.ignore</code> file that ignores the crates directory. So nice to have helix only seeing the new compiler and limited files.</p>",
        "id": 498557884,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739068689
    },
    {
        "content": "<p>Yeah, I'm happy only opening the src/ directory in Neovim</p>",
        "id": 498609088,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1739115284
    },
    {
        "content": "<p>I keep editing build and ci files which are outside of src</p>",
        "id": 498618946,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739122932
    },
    {
        "content": "<p>Seems like a lot of people are excited to contribute because of the accessibility of a rewrite! You love to see it</p>",
        "id": 498810023,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739205605
    },
    {
        "content": "<p>Is there even a syntax planned to allow making custom tags for custom unions usable within the same module in the way that you can <code>import exposing [Result.[Ok, Err]]</code>?</p>",
        "id": 498877719,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739226651
    },
    {
        "content": "<p>Trying to figure out if/how canonicalization scope should handle that</p>",
        "id": 498877766,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739226673
    },
    {
        "content": "<p>I think the answer is no right now</p>",
        "id": 498877789,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739226683
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"453336\">@Joshua Warner</span> do you have a plan for how the compiler post-parsing will know the \"region\" for some entity?</p>",
        "id": 499163334,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739344718
    },
    {
        "content": "<p>Will it be a pair of token IDs, a start and an end index into the source file, or a line and a column?</p>",
        "id": 499163424,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739344768
    },
    {
        "content": "<p>Or is that info not expected to last past parsing/maybe formatting in this compiler</p>",
        "id": 499163481,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739344786
    },
    {
        "content": "<p>Iâve gone back and forth on that</p>",
        "id": 499258534,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739373168
    },
    {
        "content": "<p>I would say probably not separate line/col numbers</p>",
        "id": 499258658,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739373198
    },
    {
        "content": "<p>The simplest of course is probably a pair of byte offsets</p>",
        "id": 499259049,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739373295
    },
    {
        "content": "<p>The possibly compelling alternative would be to use a node id for a parser node - thatâs a single u32 that can be mapped back to a precise source range when needed, and is smaller that the u32 pair needed for a byte range</p>",
        "id": 499259465,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739373404
    },
    {
        "content": "<p>When someone runs <code>roc check Module.roc</code> and <code>Module.roc</code> is not the root of its package, or at least not the only file in the package, which set of diagnostics do we want to show them?</p>\n<ul>\n<li>Only errors for that file, ignoring those from other files</li>\n<li>Only errors for that file and its dependencies</li>\n<li>All errors from the package</li>\n</ul>\n<p>It seems pretty easy to do the last one, and I'm not sure if someone would want the other cases, though maybe I'd understand the second one. It also shouldn't be that hard to implement.</p>",
        "id": 501342330,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740291780
    },
    {
        "content": "<p>Also, we currently allow setting an alternative package main file using a query fragment in the package download URL, and I don't think there's a need for that anymore. Anyone opposed to me removing that?</p>",
        "id": 501360486,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740306153
    },
    {
        "content": "<p>I think it's one of the first two</p>",
        "id": 501372912,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740315831
    },
    {
        "content": "<p>one way to think about this is \"if I want a particular set of outputs, is there any possible way to convince the compiler to give them to me?\"</p>",
        "id": 501372975,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740315862
    },
    {
        "content": "<p>Yep</p>",
        "id": 501372984,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740315869
    },
    {
        "content": "<p>there's certainly already a way to say \"give me all the errors from the package\"</p>",
        "id": 501372995,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740315882
    },
    {
        "content": "<p>namely, give <code>roc check</code> the package's root module directly</p>",
        "id": 501373001,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740315896
    },
    {
        "content": "<p>so then the question is, if I say \"I want <code>roc check</code> to check just this one file\" - do I also want it to give me the errors from its dependencies, or not?</p>",
        "id": 501373026,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740315925
    },
    {
        "content": "<p>The decision between the first two in my mind is \"if we give only the errors for a single module even if its deps are wrong, then is that correct?\"</p>",
        "id": 501373040,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740315931
    },
    {
        "content": "<p>yeah</p>",
        "id": 501373044,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740315937
    },
    {
        "content": "<p>I can see arguments either way <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 501373052,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740315942
    },
    {
        "content": "<p>like \"I know about those, I'm not working on them right now\" vs. \"I want to know if this thing completely works\"</p>",
        "id": 501373070,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740315956
    },
    {
        "content": "<p>Lets say my module imports something that's malformed. We won't report two errors, so it'll look like my usage is correct even if the thing I imported is broken</p>",
        "id": 501373118,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740315970
    },
    {
        "content": "<p>Doing just the current file and nothing else should be easier to implement actually</p>",
        "id": 501373157,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740316021
    },
    {
        "content": "<p>Because we'd have to analyze the dep tree for \"this modules and its deps\"</p>",
        "id": 501373182,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740316045
    },
    {
        "content": "<p>We <em>naively</em> can't use the toposorted module list because its sorted over all modules</p>",
        "id": 501373203,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740316070
    },
    {
        "content": "<p>I'll ignore implementation for now</p>",
        "id": 501373261,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740316107
    },
    {
        "content": "<p>Yeah, not sure</p>",
        "id": 501373278,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740316133
    },
    {
        "content": "<p>I'll default to just the current module for now to avoid bikeshedding</p>",
        "id": 501373295,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740316158
    },
    {
        "content": "<p>And we can do the option of \"my module and its deps\" later since it's more work but not obviously the right option</p>",
        "id": 501373337,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740316201
    },
    {
        "content": "<p>The big thing for me is that I think it should fully check the single module if possible</p>",
        "id": 501389452,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740328111
    },
    {
        "content": "<p>This means it must know all of the types of the imports</p>",
        "id": 501389473,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740328129
    },
    {
        "content": "<p>I don't think it needs to recursively check all dependencies even things that aren't used.</p>",
        "id": 501389552,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740328203
    },
    {
        "content": "<p>Yes, I think we should do typechecking and all for at least the module and its deps. I'm just suggesting that we only report the errors for that module</p>",
        "id": 501413736,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740347866
    },
    {
        "content": "<p>yeah the work for sure has to be done regardless</p>",
        "id": 501413848,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740347942
    },
    {
        "content": "<p>I think it could be confusing if we don't show errors from other modules</p>",
        "id": 501413864,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740347960
    },
    {
        "content": "<p>out of curiosity, what is the theoretical / computational model that Roc's type system uses?</p>",
        "id": 501415162,
        "sender_full_name": "Wizard ish",
        "timestamp": 1740348943
    },
    {
        "content": "<p>There's some notes here <a href=\"https://github.com/roc-lang/roc/blob/c72993c7519188698937bcc359d15e5b032ebe78/crates/compiler/solve/src/solve.rs#L44\">https://github.com/roc-lang/roc/blob/c72993c7519188698937bcc359d15e5b032ebe78/crates/compiler/solve/src/solve.rs#L44</a></p>",
        "id": 501415390,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1740349114
    },
    {
        "content": "<p>My understanding it that it's very similar to HM</p>",
        "id": 501415404,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1740349137
    },
    {
        "content": "<p>Also see <a href=\"https://github.com/roc-lang/rfcs/blob/ayaz/compile-with-lambda-sets/0102-compiling-lambda-sets.md\">https://github.com/roc-lang/rfcs/blob/ayaz/compile-with-lambda-sets/0102-compiling-lambda-sets.md</a></p>",
        "id": 501415425,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1740349162
    },
    {
        "content": "<p>This is a new architecture that <span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> laid out to solve our issues with compiling Lambda Sets</p>",
        "id": 501415445,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1740349187
    },
    {
        "content": "<p>That RFCS repository has a lot of gold in there</p>",
        "id": 501415529,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1740349228
    },
    {
        "content": "<p>My first pass at implementing the <a href=\"https://github.com/roc-lang/roc/blob/main/src/coordinate.zig\">coordinate</a> logic has just been merged in (<a href=\"https://github.com/roc-lang/roc/pull/7625\">PR</a>), meaning that the main thrust of the work to typecheck or build a module (and its deps) is put together, outside of running the code with the interpreter/LLVM. I'm sure there are some bugs in the impl, but we'll want to get something basic working for canonicalization and import resolution to work said bugs out, so those stages are my next project.</p>\n<p>As a side benefit, I was able to remove most of the <code>refAllDeclsRecursive</code> calls from our <a href=\"https://github.com/roc-lang/roc/blob/main/src/test.zig\">testing entrypoint</a>.</p>",
        "id": 502967303,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740990657
    },
    {
        "content": "<p>So... argument order. I tend to write functions with \"stuff to focus on\" near the front of the arg list, and \"needed context\" near the end of the arg list. This is the Roc way to do it, and usually the Rust way as well. But in Zig, the allocator seems to usually get passed first (or second after the method target). What's the right pattern here?</p>",
        "id": 503153647,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741049209
    },
    {
        "content": "<p>Yeah, zig's default is allocator first</p>",
        "id": 503153951,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741049411
    },
    {
        "content": "<p>I would lean towargs following that convention</p>",
        "id": 503153968,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741049421
    },
    {
        "content": "<p>So I would say env/allocator first (and I assume env stores the allocator so you never need both)</p>",
        "id": 503153999,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741049452
    },
    {
        "content": "<p>But ultimately it is pretty minor, it is more important we aim to be consistent than which choice we pick</p>",
        "id": 503154027,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741049470
    },
    {
        "content": "<p>But just the allocator? A lot of our functions in the Rust-based compiler use <code>env</code> and <code>arena</code>. Would it be better to do <code>(gpa, important, other, env)</code> or <code>(gpa, env, important, other)</code>?</p>",
        "id": 503154030,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741049472
    },
    {
        "content": "<p>Yeah, I was gonna vote we put the <code>gpa</code> in the <code>env</code> to make it less of a pain to use unmanaged lists, and then convert the <code>Safe(Multi)List</code> types to unmanaged</p>",
        "id": 503154082,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741049510
    },
    {
        "content": "<p>I personally would lean to <code>env, gpa, important, other</code>. It feels most conventionally correct.</p>",
        "id": 503154097,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741049520
    },
    {
        "content": "<p>But yaeh, I would put gpa in the env</p>",
        "id": 503154169,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741049543
    },
    {
        "content": "<p>Then you only need to pass around local arenas (which I think will be relatively rare)</p>",
        "id": 503154193,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741049560
    },
    {
        "content": "<p>Okay, sounds good</p>",
        "id": 503154217,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741049579
    },
    {
        "content": "<p>On the above discussion, here's a PR for cleanup: <a href=\"https://github.com/roc-lang/roc/pull/7657\">https://github.com/roc-lang/roc/pull/7657</a></p>\n<ul>\n<li>Prefer passing the <code>std.mem.Allocator</code> as the first argument to functions</li>\n<li>Put the <code>gpa: std.mem.Allocator</code> in <code>base.ModuleEnv</code> and prefer that for passing around the <code>Allocator</code><ul>\n<li>the <code>ModuleEnv</code> should be used enough to usually be in the L1 cache, meaning the double indirection of <code>ir.env.gpa</code> shouldn't be expensive</li>\n</ul>\n</li>\n<li>Prefer <code>ArrayListUnmanaged</code> over <code>ArrayList</code> (same for all list-backed collections) since it avoids storing a pointer to the <code>Allocator</code> in every collection<ul>\n<li>Not enforced for testing collections/buffers</li>\n</ul>\n</li>\n<li>Use Andrew Kelley's suggestion for catching OOM errors by capturing the <code>Allocator.Error</code> instead of discarding it, this should prevent us from accidentally over/under-catching errors</li>\n</ul>\n<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> please take a look if you get a chance</p>",
        "id": 503176806,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741061923
    },
    {
        "content": "<p>It's extremely mechanical as PRs come, but it's 32 files, so no pressure if you don't have time</p>",
        "id": 503176851,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741061965
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> what's the strategy for avoiding <code>for (items) |item| item.deinit()</code> deeper in our data types? Making an arena just for that collection, or making a top-level arena that gets passed around, or something else?</p>",
        "id": 503178585,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741062868
    },
    {
        "content": "<p>Depends on the specific use case. One option is definitely to just use an arena for the items if they never grow and that is reasonable. Another option would be to flatten things out more. That way instead of a list of lists, you have a list of slices and then a second list of data.</p>\n<p>I think flattening is what would make most sense for <code>exposed_idents</code>. Cause exposed_idents is a static slice of data essentially. So instead of nesting you would have a larger context <code>ollections.SafeList(Ident.Idx)</code>. Then you would have each ModuleImport include <code>exposed_idents</code> as a Slice into the list.</p>",
        "id": 503181195,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741064400
    },
    {
        "content": "<p>slice being two <code>u32</code>s, not a zig slice</p>",
        "id": 503181337,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741064453
    },
    {
        "content": "<p>Thinking about that latest video from Andrew, that makes sense</p>",
        "id": 503181371,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741064480
    },
    {
        "content": "<p>Yeah, it is exactly that pattern</p>",
        "id": 503181478,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741064533
    },
    {
        "content": "<p>Do we want to support two imports of the same external module in a single module? Feels like yes or no, it doesn't matter much. It feels like there's not much of a reason to want that except for only exposing some ident in a more narrow scope. At least at the top level, I don't see it being much besides a fragmentation in imports that makes reading harder. Could we maybe put warnings on subsequent imports at the top level?</p>",
        "id": 503215249,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741079632
    },
    {
        "content": "<p>That's my current plan until we decide otherwise</p>",
        "id": 503215273,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741079641
    },
    {
        "content": "<p>I'm being reminded by the parsed AST that we can do <code>import Foo as AliasedFoo</code>, and that might be useful to allow two of.</p>",
        "id": 503215758,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741079788
    },
    {
        "content": "<p>I'll forgo the warning for now to trim complexity and therefore implementation time</p>",
        "id": 503215810,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741079807
    },
    {
        "content": "<p>yeah I agree with that plan!</p>\n<p>I think it makes sense to treat imports like declarations: shadowing is a warning</p>",
        "id": 503257566,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1741092279
    },
    {
        "content": "<p>(and multiples is fine as long as they're in non overlapping scopes)</p>",
        "id": 503257640,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1741092304
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/channel/395097-compiler-development/topic/casual.20conversation/near/503176806\">said</a>:</p>\n<blockquote>\n<p>On the above discussion, here's a PR for cleanup: <a href=\"https://github.com/roc-lang/roc/pull/7657\">https://github.com/roc-lang/roc/pull/7657</a></p>\n<ul>\n<li>Prefer passing the <code>std.mem.Allocator</code> as the first argument to functions</li>\n<li>Put the <code>gpa: std.mem.Allocator</code> in <code>base.ModuleEnv</code> and prefer that for passing around the <code>Allocator</code><ul>\n<li>the <code>ModuleEnv</code> should be used enough to usually be in the L1 cache, meaning the double indirection of <code>ir.env.gpa</code> shouldn't be expensive</li>\n</ul>\n</li>\n<li>Prefer <code>ArrayListUnmanaged</code> over <code>ArrayList</code> (same for all list-backed collections) since it avoids storing a pointer to the <code>Allocator</code> in every collection<ul>\n<li>Not enforced for testing collections/buffers</li>\n</ul>\n</li>\n<li>Use Andrew Kelley's suggestion for catching OOM errors by capturing the <code>Allocator.Error</code> instead of discarding it, this should prevent us from accidentally over/under-catching errors</li>\n</ul>\n<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> please take a look if you get a chance</p>\n</blockquote>\n<p>I wish I had built my change on top of this....</p>",
        "id": 503410476,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741143329
    },
    {
        "content": "<p>Have a bad merge/rebase now?</p>",
        "id": 503410574,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741143378
    },
    {
        "content": "<p>It's not gonna be too bad, just tedious.  I'll probably just checkout my copy of all of these and fix the errors by hand</p>",
        "id": 503410652,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741143416
    },
    {
        "content": "<p>I touched most of the <code>append</code> calls</p>",
        "id": 503410684,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741143424
    },
    {
        "content": "<p>And removed a ton of them</p>",
        "id": 503410712,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741143434
    },
    {
        "content": "<p>Make sure to check my comment on your PR</p>",
        "id": 503410736,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741143442
    },
    {
        "content": "<p>That solution really doesn't work</p>",
        "id": 503410865,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741143494
    },
    {
        "content": "<p>Those items aren't in scratch anymore</p>",
        "id": 503410884,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741143501
    },
    {
        "content": "<p>I could get rid of the iterator completely honestly, and would do that over returning a slice over the extra data</p>",
        "id": 503411023,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741143586
    },
    {
        "content": "<p>That's what I wrote, right?</p>",
        "id": 503411256,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741143681
    },
    {
        "content": "<p>The <code>*Iter</code> functions just create an <code>Iter</code> around an <code>ArrayList</code> of the <code>extra_data</code></p>",
        "id": 503411333,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741143716
    },
    {
        "content": "<p>And you want it to be typed ids</p>",
        "id": 503411398,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741143730
    },
    {
        "content": "<p>So you can make that happen by making the desired slice into the <code>UnmanagedArrayList</code> and calling <code>@ptrCast</code> to change the <code>[]const u32</code> into <code>[]const StatementIdx</code></p>",
        "id": 503411486,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741143775
    },
    {
        "content": "<p>That would look like this in usage:</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"w\">            </span><span class=\"kr\">var</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">@as</span><span class=\"p\">(</span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">@intCast</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">annos</span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"p\">.</span><span class=\"n\">start</span><span class=\"p\">));</span>\n<span class=\"w\">            </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">annos</span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"p\">.</span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">annos</span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">ann</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">TypeAnnoIdx</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">ast</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">extra_data</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"w\">                </span><span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">formatTypeAnno</span><span class=\"p\">(</span><span class=\"n\">an</span><span class=\"p\">);</span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">annos</span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                    </span><span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">pushAll</span><span class=\"p\">(</span><span class=\"s\">\", \"</span><span class=\"p\">);</span>\n<span class=\"w\">                </span><span class=\"p\">}</span>\n<span class=\"w\">                </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>over the current</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"w\">            </span><span class=\"kr\">var</span><span class=\"w\"> </span><span class=\"n\">anno_iter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">ast</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">typeAnnoIter</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">annos</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">anno_iter</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">an</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">formatTypeAnno</span><span class=\"p\">(</span><span class=\"n\">an</span><span class=\"p\">);</span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">annos</span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                    </span><span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">pushAll</span><span class=\"p\">(</span><span class=\"s\">\", \"</span><span class=\"p\">);</span>\n<span class=\"w\">                </span><span class=\"p\">}</span>\n<span class=\"w\">                </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 503411510,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741143787
    },
    {
        "content": "<p>I literally made the change in my editor for expressions and everything compiled</p>",
        "id": 503411520,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741143791
    },
    {
        "content": "<p>I'm sorry, but I'm not sure why those are desirable over </p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"w\">            </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">ast</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">typeAnnoSlice</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">annos</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">an</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">formatTypeAnno</span><span class=\"p\">(</span><span class=\"n\">an</span><span class=\"p\">);</span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">annos</span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                    </span><span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">pushAll</span><span class=\"p\">(</span><span class=\"s\">\", \"</span><span class=\"p\">);</span>\n<span class=\"w\">                </span><span class=\"p\">}</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 503411655,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741143864
    },
    {
        "content": "<p>Sorry, I misread the code you wrote.  I'm literally was trying to avoid slices here at all</p>",
        "id": 503411661,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741143869
    },
    {
        "content": "<p>I'm not sure why you'd want to, the Zig compiler works with slices really well</p>",
        "id": 503411682,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741143889
    },
    {
        "content": "<p>Well the first option doesn't create a struct of any sort if that's what we are optimizing for</p>",
        "id": 503411699,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741143900
    },
    {
        "content": "<p>I'm optimizing for <code>for (items) |item|</code> working well in Zig</p>",
        "id": 503411752,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741143928
    },
    {
        "content": "<p>And it's more terse than the other options</p>",
        "id": 503411859,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741143978
    },
    {
        "content": "<p>If you have reason to believe that is truly faster, then I will do it</p>",
        "id": 503411864,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741143979
    },
    {
        "content": "<p>I think it's more terse and at least as performant, if not <em>sketchy maybe</em> faster</p>",
        "id": 503411915,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741144014
    },
    {
        "content": "<p>The iterator needs to do math and casting every time between number types</p>",
        "id": 503411964,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741144035
    },
    {
        "content": "<p>A slice doesn't seem to have those problems</p>",
        "id": 503411980,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741144043
    },
    {
        "content": "<p>Ok, I just wish that kind of feedback could have came on the first PR - whose purpose was to get such feedback so I applied something everyone was on-board with before doing it everywhere.</p>\n<p>But luckily this is largely a mechanical change - maybe I could even make it comptime and reduce the number of unique functions I have to maintain here</p>",
        "id": 503412194,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741144153
    },
    {
        "content": "<p>I'll do the change for you if you want</p>",
        "id": 503412211,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741144167
    },
    {
        "content": "<p>I'm happy to</p>",
        "id": 503412215,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741144169
    },
    {
        "content": "<p>No worries</p>",
        "id": 503412221,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741144173
    },
    {
        "content": "<p>I'm already doing a rebase</p>",
        "id": 503412233,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741144179
    },
    {
        "content": "<p>I can get rid of two struct defs and hopefully 7-8 functions</p>",
        "id": 503412307,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741144205
    },
    {
        "content": "<p>And about 8 type aliases</p>",
        "id": 503412338,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741144227
    },
    {
        "content": "<p>It'll cut about 60 LOC</p>",
        "id": 503412365,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741144246
    },
    {
        "content": "<p>yeet</p>",
        "id": 503412372,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741144252
    },
    {
        "content": "<p>The problem I had with slices won't affect me here</p>",
        "id": 503412392,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741144266
    },
    {
        "content": "<p>I didn't think about that before and was worried about slices in general - but that's only an issue when we are appending to them (and they can resize and invalidate pointers)</p>",
        "id": 503412457,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741144307
    },
    {
        "content": "<p>makes sense</p>",
        "id": 503412477,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741144320
    },
    {
        "content": "<p>I'll have that change (and merge conflicts addressed) in the morning</p>",
        "id": 503412645,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741144387
    },
    {
        "content": "<p>Yeah, not going to try to comptime it.  it really won't save much code since Idxs and DataSpans aren't Generic.  I'd have to write a complicated comptime block that seems too clever by half</p>",
        "id": 503414188,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741145187
    },
    {
        "content": "<p>I'll just replace the Iter functions with Slice functions and remove the Iterator and IdIterator structs and the type aliases</p>",
        "id": 503414237,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741145220
    },
    {
        "content": "<p>Ok, this is done</p>",
        "id": 503496292,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741176845
    },
    {
        "content": "<p>Do y'all already have a plan for how to do type inference w/ multiple static dispatch? (the planned replacement for abilities). I looked into how koka does it, and it leaves a lot to be desired.</p>",
        "id": 504117365,
        "sender_full_name": "Jared",
        "timestamp": 1741360109
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> what's multiple static dispatch?</p>",
        "id": 504147905,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1741369022
    },
    {
        "content": "<p>I may have misinterpreted this line<br>\n<a href=\"/user_uploads/22008/IcP3Bea4WCvrX8guTDve_sxL/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/IcP3Bea4WCvrX8guTDve_sxL/image.png\" title=\"image.png\"><img data-original-content-type=\"image/png\" data-original-dimensions=\"1780x162\" src=\"/user_uploads/thumbnail/22008/IcP3Bea4WCvrX8guTDve_sxL/image.png/840x560.webp\"></a></div>",
        "id": 504149407,
        "sender_full_name": "Jared",
        "timestamp": 1741369518
    },
    {
        "content": "<p>I figured it meant koka-style \"there are multiple functions in scope with the same name, and we use type inference to determine which one to use\". It's a way of doing ability-like or typeclass-like behavior</p>",
        "id": 504149592,
        "sender_full_name": "Jared",
        "timestamp": 1741369574
    },
    {
        "content": "<p>If we see <code>x.foo(a, b, c)</code>. We query the type of <code>x</code>. When then load the module that type is from and call <code>ModuleOf(x).foo(x, a, b, c)</code></p>",
        "id": 504156711,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741371831
    },
    {
        "content": "<p>x must get specialized to a concrete type for this dispatch to work.</p>",
        "id": 504156894,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741371882
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> we actually plan to allow multiple custom types per module, though a single one per module is preferred</p>",
        "id": 504156967,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741371912
    },
    {
        "content": "<p>Sure, that is unrelated to my comment though.</p>",
        "id": 504157025,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741371933
    },
    {
        "content": "<p>So it's a module lookup paired with a type lookup</p>",
        "id": 504157066,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741371950
    },
    {
        "content": "<p>Type doesn't really matter (past finding the module) cause we don't have namespaces within modules. So the module + function name is a unique identifier. Of course can still get a type mismatch if you use the wrong custom type.</p>",
        "id": 504157280,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741372015
    },
    {
        "content": "<p>yep</p>",
        "id": 504157386,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741372045
    },
    {
        "content": "<p>yeah so \"if we see x, we query the type of x\", if implemented in the koka way, <em>really</em> restricts things in an annoying way. For example, in koka, if you have</p>\n<div class=\"codehilite\"><pre><span></span><code>fun x(y) {\n   y.z() + 2\n}\n</code></pre></div>\n<p>if there are two <code>z</code> functions available, one returning an <code>int</code> and one returning a <code>string</code>, you would think that this should be inferrable because the return value is being used as an <code>int</code>. But koka chokes on this, requiring you to add an annotation or disambiguate the z with a prefix. imo this forfeits one of the key benefits of hindley-milner-style type inference, namely that the \"order\" of expressions doesn't matter, all information is essentially considered \"at once\".</p>",
        "id": 504158689,
        "sender_full_name": "Jared",
        "timestamp": 1741372436
    },
    {
        "content": "<p>I've been thinking about how to implement something like this for my own language, and I think the route I'll take is, if you see a <code>z</code> that is ambiguous, just give it a type variable, and let inference continue. At the end of inference, find all the type variables that were created in this manner, and then use the type information that resulted from the inference to disambiguate.</p>",
        "id": 504158907,
        "sender_full_name": "Jared",
        "timestamp": 1741372496
    },
    {
        "content": "<p>We'd infer the type of that function as</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"no\">Num</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">where</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">z</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"no\">Num</span><span class=\"w\"> </span><span class=\"n\">a</span>\n<span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">y</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">z</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 504159064,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741372536
    },
    {
        "content": "<p>In that <code>y.z()</code> is inferred as <code>y where y.z() -&gt; b</code> and then <code>b</code> is constrained to some number type <code>Num a</code> because of the addition</p>",
        "id": 504159349,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741372618
    },
    {
        "content": "<p>ok and if there's later in that function something that makes the type of y concrete, you then do the module lookup to satisfy the \"where\" bound?</p>",
        "id": 504159547,
        "sender_full_name": "Jared",
        "timestamp": 1741372678
    },
    {
        "content": "<p>Yes</p>",
        "id": 504159620,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741372688
    },
    {
        "content": "<p>solid</p>",
        "id": 504159649,
        "sender_full_name": "Jared",
        "timestamp": 1741372697
    },
    {
        "content": "<p>does <code>where y.z() -&gt; Num a</code> mean <code>where ModuleOf(y).z(y) -&gt; Num a</code>?</p>",
        "id": 504159780,
        "sender_full_name": "Jared",
        "timestamp": 1741372747
    },
    {
        "content": "<p>Basically</p>",
        "id": 504159835,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741372769
    },
    {
        "content": "<p>yeah that's a neat solution</p>",
        "id": 504159891,
        "sender_full_name": "Jared",
        "timestamp": 1741372788
    },
    {
        "content": "<p>It means \"in the module where the custom type <code>y</code> is defined, there needs to be a function <code>z</code> that returns a type that unifies with <code>Num a</code>, and the function <code>z</code> needs to take a <code>y</code> as the first and only arg\"</p>",
        "id": 504160053,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741372830
    },
    {
        "content": "<p>We discussed what you're calling multiple dispatch a little bit and it got ruled out for ambiguity reasons</p>",
        "id": 504160131,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741372858
    },
    {
        "content": "<p>custom type means \"nominal type\", as opposed to structural, I imagine?</p>",
        "id": 504160567,
        "sender_full_name": "Jared",
        "timestamp": 1741373008
    },
    {
        "content": "<p>Yep</p>",
        "id": 504160588,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741373015
    },
    {
        "content": "<p>this does mean you would be able to have multi-type traits, but that seems like a reasonable sacrifice</p>",
        "id": 504160764,
        "sender_full_name": "Jared",
        "timestamp": 1741373070
    },
    {
        "content": "<p>Also, you can explicitly do <code>module(y).foo(...)</code>. This is needed for things like <code>decode</code> where the type is not an arg.</p>",
        "id": 504160927,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741373128
    },
    {
        "content": "<p>In this case <code>y</code> is a type variable.</p>",
        "id": 504161004,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741373153
    },
    {
        "content": "<p>Not a regular variable</p>",
        "id": 504161024,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741373160
    },
    {
        "content": "<p>Is anyone doing some collaborative coding, like pairing or ensemble programming while working on the compiler? I had tried to do some work on the rust compiler, but never quite found a foothold in the codebase. It seems like now might be a good time to get back into it, since things are smaller and a little more well-thought-out</p>",
        "id": 506621818,
        "sender_full_name": "Trevor Settles",
        "timestamp": 1742352510
    },
    {
        "content": "<p>There definitely has been some. That said, less so recently (just the ebb and flow as folks getting busy). That said, I'm sure we can make more time for it.</p>",
        "id": 506624235,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742353926
    },
    {
        "content": "<p>This weekend I'll do a session or two!</p>",
        "id": 506632942,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1742359462
    },
    {
        "content": "<p>Ok, cool. Thanks for the info!  I'm coming back from vacation on Saturday, so I'll check them</p>",
        "id": 506633655,
        "sender_full_name": "Trevor Settles",
        "timestamp": 1742359918
    },
    {
        "content": "<p>I'm in the middle of a move interstate, so my availability for roc has dropped off a little this week. I'm definitely keen for more collaborative coding. <span class=\"user-mention\" data-user-id=\"479378\">@Trevor Settles</span> happy to spend time with you or anyone else interested, and sharing what I know about things. </p>\n<p>Now is a great time to get involved with the new zig compiler work. There are lots of parts that are basically just stubbed out with a TODO or placeholder waiting for someone to give it some love. </p>\n<p>If there isn't a draft PR then you can probably assume it's not being looked at or worked on by someone else. </p>\n<p>I think for anyone who wants to help -- getting involved by reviewing PR's and leaving comments, contributing ideas to discussions, and reading the code/making PR's are all really helpful.</p>",
        "id": 506635699,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1742360979
    },
    {
        "content": "<p>And if you want specific feature work, we can carve our a specific chunk for you, big or small</p>",
        "id": 506635807,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1742361028
    },
    {
        "content": "<p>Hello everyone, my name is Reed Harston.<br>\nI just came here from the Zig Showtime interview about the compiler rewrite.<br>\nRoc looks interesting, and Iâd like to try it, but I donât have any projects right now that seem like a good fit. But as soon as Richard said Zig people are welcome to come pitch in without even using Roc I paused the video and came right here. <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>\n<p>I wonât have time right now to really dig into development, but Iâd love to help out so I was thinking about jumping in and commenting on PRs and the like, and it turns out that just two message ago Luke said that would be helpful, so I plan on starting there.</p>\n<p>Glad to be here and I look forward to getting to know you.</p>",
        "id": 506874025,
        "sender_full_name": "Reed Harston",
        "timestamp": 1742442568
    },
    {
        "content": "<p>Welcome to the club! We'd love to get any help on PRs or anything</p>",
        "id": 506874515,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1742442907
    },
    {
        "content": "<p>Awesome <span class=\"user-mention\" data-user-id=\"890690\">@Reed Harston</span>, any feedback on PRs are very welcome. I'm a zig noob and have been having a blast learning as I go. It's a different vibe from Rust, but so far it's been really great. I'm super excited for the builtin fuzzing features.</p>",
        "id": 506890192,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1742452903
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/channel/395097-compiler-development/topic/casual.20conversation/near/506632942\">said</a>:</p>\n<blockquote>\n<p>This weekend I'll do a session or two!</p>\n</blockquote>\n<p>Anyone interested in an ad-hoc contributor meeting this weekend? Chat current status. Chat what could use support. Chat what is needed to unblock various work. Also, I'll show off tracy for profiling.</p>",
        "id": 507099154,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742516832
    },
    {
        "content": "<p>I'd love to if the timing works out!</p>",
        "id": 507099697,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1742517153
    },
    {
        "content": "<p><a href=\"https://www.when2meet.com/?29672150-cuT6d\">https://www.when2meet.com/?29672150-cuT6d</a></p>",
        "id": 507099939,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742517296
    },
    {
        "content": "<p>Would love to join but Iâll be out of town</p>",
        "id": 507116229,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1742526238
    },
    {
        "content": "<p>Ping for a few folks to see if they have interest in joining/availability to add: <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> <span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> <span class=\"user-mention\" data-user-id=\"479378\">@Trevor Settles</span> <span class=\"user-mention\" data-user-id=\"781658\">@Anthony Bullard</span> <span class=\"user-mention\" data-user-id=\"453336\">@Joshua Warner</span></p>",
        "id": 507351946,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742585285
    },
    {
        "content": "<p>Would like to join if possible, but very hard to know ahead of time if any particular time slot works</p>",
        "id": 507352984,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1742585663
    },
    {
        "content": "<p>Sorry, I'd love to but not available at all this weekend. In the middle of moving house (like the actual moving part).</p>",
        "id": 507360047,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1742588362
    },
    {
        "content": "<p>lets do <time datetime=\"2025-03-22T17:30:00Z\">2025-03-22T10:30:00-07:00</time> cc: <span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> <span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span></p>",
        "id": 507404625,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742614046
    },
    {
        "content": "<p>Should we do a Google Meet or something?</p>",
        "id": 507471712,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1742664691
    },
    {
        "content": "<p><a href=\"https://meet.jit.si/moderated/672e6cc127f67c355ac33a6c800ab60136fe27de5db001bed534ad2d2e3ee02d\">https://meet.jit.si/moderated/672e6cc127f67c355ac33a6c800ab60136fe27de5db001bed534ad2d2e3ee02d</a></p>",
        "id": 507471961,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742664860
    },
    {
        "content": "<p>There in a minute!</p>",
        "id": 507472186,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1742665034
    },
    {
        "content": "<p>are lurkers allowed?</p>",
        "id": 507472520,
        "sender_full_name": "Loris Cro",
        "timestamp": 1742665253
    },
    {
        "content": "<p>sure!</p>",
        "id": 507472662,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1742665332
    },
    {
        "content": "<p>Sorry y'all!  I've been super heads down the past couple of weeks with a major work project and family stuff</p>",
        "id": 507989755,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1742900329
    },
    {
        "content": "<p>But <span aria-label=\"hi\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"hi\">:hi:</span>  I'll try to catch up sometime soon</p>",
        "id": 507989816,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1742900347
    },
    {
        "content": "<p>No need to apologize :)</p>",
        "id": 507999814,
        "sender_full_name": "Anton",
        "timestamp": 1742903209
    },
    {
        "content": "<p>Ugh, using bash for anything mildly complex is such a disaster</p>",
        "id": 513037759,
        "sender_full_name": "Anton",
        "timestamp": 1744984819
    },
    {
        "content": "<p>Yep. Thatâs what Python is for. <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 513039704,
        "sender_full_name": "Reed Harston",
        "timestamp": 1744985565
    },
    {
        "content": "<p>Or Swift even. It does a good job at simple single file scripts.</p>",
        "id": 513039820,
        "sender_full_name": "Reed Harston",
        "timestamp": 1744985611
    },
    {
        "content": "<p>Roc can do it too :) but I was just modifying an existing bash script that I thought was going to be a quick fix :p</p>",
        "id": 513040016,
        "sender_full_name": "Anton",
        "timestamp": 1744985685
    },
    {
        "content": "<p>Oh, yeah. Nothing ever seems to be quick in a bash script.</p>",
        "id": 513040107,
        "sender_full_name": "Reed Harston",
        "timestamp": 1744985728
    },
    {
        "content": "<blockquote>\n<p>Ugh, using bash for anything mildly complex is such a disaster</p>\n</blockquote>\n<p>Lol; at my last company we had a script called <a href=\"http://deploy.sh\">deploy.sh</a> (the name of the entrypoint, but there were probably 100+ files involved). It was IIRC 25k+ lines.</p>",
        "id": 513050638,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1744989606
    },
    {
        "content": "<p>The only place Iâve worked where bash was reasonable was Google.  They have so much tooling around it itâs pretty nice</p>",
        "id": 513099382,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1745011332
    },
    {
        "content": "<p>But usually, if you are making an array, you should probably use a real PL</p>",
        "id": 513099407,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1745011355
    },
    {
        "content": "<p>100% agree</p>",
        "id": 513103739,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1745014033
    },
    {
        "content": "<p>I was very impressed at how functional and usable that script was, despite all the problems</p>",
        "id": 513103765,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1745014053
    },
    {
        "content": "<p>Now that I have used python a lot more, I feel less and less confident that anyone should use it. Like bash, convenient in the small. But to go to medium, you really need type checking and python type checking is slow and pretty buggy. Yes it has tons of libraries and scales farther than bash, but it kinda really sucks except in super interactive notebook style flows. And even in that case you often get stuck when you realize that production requires leaving the interactive flow and then you want fast type checking and what not.</p>",
        "id": 513109790,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1745018592
    },
    {
        "content": "<p>So I guess I put python minorly ahead of bash, but a lot less far ahead than one would hope.</p>",
        "id": 513109832,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1745018631
    },
    {
        "content": "<p>yeah i litterally just had a discussion about how python is essentially the C(++) of scripting languages, it just had things piled on top of it until it barely works anymore</p>",
        "id": 513121291,
        "sender_full_name": "Wizard ish",
        "timestamp": 1745028531
    },
    {
        "content": "<p>And at the same time, this is part of the reason it is so successful</p>",
        "id": 513122470,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1745029459
    },
    {
        "content": "<p>Yeah, it may be the C++ of scripting languages <em>but</em> it is the C++ of scripting languages <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 513122912,
        "sender_full_name": "Wizard ish",
        "timestamp": 1745029854
    },
    {
        "content": "<p>Yep</p>",
        "id": 513130048,
        "sender_full_name": "Reed Harston",
        "timestamp": 1745034832
    },
    {
        "content": "<p>I like it. Iâd never seen that before.</p>",
        "id": 513130092,
        "sender_full_name": "Reed Harston",
        "timestamp": 1745034843
    },
    {
        "content": "<p>The funny thing is, at work the two languages we use are C++ and Python. Just those two.</p>",
        "id": 513130111,
        "sender_full_name": "Reed Harston",
        "timestamp": 1745034865
    },
    {
        "content": "<p>Almost everything at my work is c++ or python. Though we have a ton of mojo too.</p>",
        "id": 513131099,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1745035561
    },
    {
        "content": "<p>Ooh, first time Iâve met someone that has used Mojo. And professionally! What have you thought of it so far? Live up to its promises?</p>",
        "id": 513169253,
        "sender_full_name": "Reed Harston",
        "timestamp": 1745068794
    },
    {
        "content": "<p>I knows itâs designed for accelerating the AI work being done in Python, but I wonder if anybody has started using it for anything else theyâre doing in Python but want to be fasted.</p>",
        "id": 513169410,
        "sender_full_name": "Reed Harston",
        "timestamp": 1745068921
    },
    {
        "content": "<blockquote>\n<p>Ooh, first time Iâve met someone that has used Mojo.</p>\n</blockquote>\n<p>Brendan works there :)</p>",
        "id": 513170369,
        "sender_full_name": "Anton",
        "timestamp": 1745069629
    },
    {
        "content": "<p>I guess I need to catch up on the community. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 513184944,
        "sender_full_name": "Reed Harston",
        "timestamp": 1745080217
    },
    {
        "content": "<p>Actually, I think I did know that. <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 513184965,
        "sender_full_name": "Reed Harston",
        "timestamp": 1745080238
    },
    {
        "content": "<p>this is the SIMD-powered lexing strategy (based on simdjson) that I want to try out someday for Roc: <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>\n<p><a href=\"https://lobste.rs/s/2ydd6d/deus_lex_machina_releasing_new\">https://lobste.rs/s/2ydd6d/deus_lex_machina_releasing_new</a></p>",
        "id": 513185848,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1745080818
    },
    {
        "content": "<p>except without the AVX-512 part <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 513185879,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1745080857
    },
    {
        "content": "<p>Will be very cool to see</p>",
        "id": 513187094,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1745081771
    },
    {
        "content": "<p>And tinker with</p>",
        "id": 513187103,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1745081780
    },
    {
        "content": "<p>honestly python is just so... python the moment I hear that a language has \"whitespace sensitive syntax\", I can't deal with it, even something like NIM</p>",
        "id": 513224342,
        "sender_full_name": "Wizard ish",
        "timestamp": 1745113554
    },
    {
        "content": "<p>except for haskell</p>",
        "id": 513224360,
        "sender_full_name": "Wizard ish",
        "timestamp": 1745113562
    },
    {
        "content": "<p>because it has (that might be overstating it given that it never works) a way to write syntax in a way that is whitespace agnostic</p>",
        "id": 513224405,
        "sender_full_name": "Wizard ish",
        "timestamp": 1745113593
    },
    {
        "content": "<p>wait oh no, it has RValues and LValues? <a href=\"https://en.cppreference.com/w/cpp/language/value_category\">C++ flashbacks</a></p>",
        "id": 513224511,
        "sender_full_name": "Wizard ish",
        "timestamp": 1745113683
    },
    {
        "content": "<p>although frankly i should learn nim</p>",
        "id": 513224727,
        "sender_full_name": "Wizard ish",
        "timestamp": 1745113858
    },
    {
        "content": "<p>I think whitespace sensitive syntax is totally fine</p>",
        "id": 513225981,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1745114838
    },
    {
        "content": "<p>I think tabs verse spaces leads to some issues, but it is generally more readable</p>",
        "id": 513226001,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1745114854
    },
    {
        "content": "<p>Iâve had multiple issues at work where we release a Python script to production and then a certain flow is broken because of a white space issue and our testing did catch it because we didnât hit that flow or something.</p>\n<p>Yes there that flagged an area to improve our process, and we did, but it still is frustrating that it was possible at all for that to get out into production because to the human eye everything looked right, but only because the tabs were the right width to match the spaces on the other lines.</p>",
        "id": 513230703,
        "sender_full_name": "Reed Harston",
        "timestamp": 1745118720
    },
    {
        "content": "<p>(There were two files that had a nearly identical section of code and when one was edited that section was copied to the other file. But one file used tabs and the other used spaces. Why? Ask someone from 5 years ago. I wish I knew. When I pasted it over everything looked right, and I happened to test the file that was right, and not the one that was wrong. Yes, user error. I havenât done that again!)</p>",
        "id": 513230918,
        "sender_full_name": "Reed Harston",
        "timestamp": 1745118895
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"890690\">Reed Harston</span> <a href=\"#narrow/stream/395097-compiler-development/topic/casual.20conversation/near/513230703\">said</a>:</p>\n<blockquote>\n<p>Iâve had multiple issues at work where we release a Python script to production and then a certain flow is broken because of a white space issue and our testing did catch it because we didnât hit that flow or something.</p>\n<p>Yes there that flagged an area to improve our process, and we did, but it still is frustrating that it was possible at all for that to get out into production because to the human eye everything looked right, but only because the tabs were the right width to match the spaces on the other lines.</p>\n</blockquote>\n<p>That should be easy to catch with any longer or type checker for python.</p>",
        "id": 513231203,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1745119131
    },
    {
        "content": "<p>Also, not saying it is a good state, but definitely manageable.</p>",
        "id": 513231231,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1745119167
    },
    {
        "content": "<p>But this is where I definitely prefer mojo (though it is young and needs other support) but it can be compiled and fully type checked and etc.</p>",
        "id": 513231304,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1745119205
    },
    {
        "content": "<p>Part of our process improvement for Python includes linters run in Jenkins when we push changes.<br>\nWe didnât have anything before because all our Python is written by C++ firmware developers that write their code like it is C with classes. So you can imagine the state of our Python. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 513236127,
        "sender_full_name": "Reed Harston",
        "timestamp": 1745122963
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/channel/395097-compiler-development/topic/casual.20conversation/near/513170369\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Ooh, first time Iâve met someone that has used Mojo.</p>\n</blockquote>\n<p>Brendan works there :)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> curious what part of Mojo you work on. Mojo is my <a href=\"https://github.com/roc-lang/roc/issues/1\">#1</a> upcoming language of interest. Hugely impressed with what it can do already. You guys have been doing magic (<span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>).</p>",
        "id": 513254773,
        "sender_full_name": "Romain Lepert",
        "timestamp": 1745139576
    },
    {
        "content": "<p>I don't work on mojo at all, just work with it some. I initially worked mostly on the graph compiler (compiles ai models down to kernels). Now I work at the max framework level helping build out the tools we use to write models. Compilers are all c++. Frameworks are all python. Kernels are all mojo. I interact with everything to some extent, but mostly python lately.</p>",
        "id": 513337677,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1745208379
    },
    {
        "content": "<p>Looking at <span class=\"user-mention\" data-user-id=\"341568\">@Jared Ramirez</span>'s PR I can see a few comments like this... which I assume is because we have that lint to ensure all top-level decls have a comment. </p>\n<p>Would it be possible to not require that where it's just re-exporting something from another file? I think Zig's language server/editor integration? picks up the referenced comments -- and just appends the additional comment.</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"c1\">/// Type Desc</span>\n<span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">Desc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"p\">.</span><span class=\"n\">Descriptor</span><span class=\"p\">;</span>\n\n<span class=\"w\"> </span><span class=\"c1\">/// Type Rank</span>\n<span class=\"w\"> </span><span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">Rank</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"p\">.</span><span class=\"n\">Rank</span><span class=\"p\">;</span>\n\n<span class=\"w\"> </span><span class=\"c1\">/// Type Mark</span>\n<span class=\"w\"> </span><span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">Mark</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"p\">.</span><span class=\"n\">Mark</span><span class=\"p\">;</span>\n</code></pre></div>",
        "id": 517766720,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1747124489
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/aERPRd6izmZZ-WcSjAAXtbJd/Screenshot-2025-05-13-at-18.23.47.png\">Screenshot 2025-05-13 at 18.23.47.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/aERPRd6izmZZ-WcSjAAXtbJd/Screenshot-2025-05-13-at-18.23.47.png\" title=\"Screenshot 2025-05-13 at 18.23.47.png\"><img data-original-content-type=\"image/png\" data-original-dimensions=\"1510x676\" src=\"/user_uploads/thumbnail/22008/aERPRd6izmZZ-WcSjAAXtbJd/Screenshot-2025-05-13-at-18.23.47.png/840x560.webp\"></a></div><p>I do like the way Jared has done it here.</p>",
        "id": 517767365,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1747124662
    },
    {
        "content": "<p>I'll see if I can easily add an exception for re-exports</p>",
        "id": 517767581,
        "sender_full_name": "Anton",
        "timestamp": 1747124726
    },
    {
        "content": "<blockquote>\n<p>I do like the way Jared has done it here.</p>\n</blockquote>\n<p>It's not clear to me what generalized means though</p>",
        "id": 517767871,
        "sender_full_name": "Anton",
        "timestamp": 1747124798
    },
    {
        "content": "<p>All times Iâve seen an attempt to enforce doc comments via tooling, it has devolved in exactly this way</p>",
        "id": 517813866,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1747138492
    },
    {
        "content": "<p>Iâm very skeptical of the cost/benefit tradeoff here</p>",
        "id": 517813978,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1747138527
    },
    {
        "content": "<p>In the old compiler we had nothing to encourage comments, and so we had very few comments. In the new compiler we force comments on pub things and we have decent comments in a lot of places and some redundant ones. I feel like it's already working, how do you see this devolving?</p>",
        "id": 517817463,
        "sender_full_name": "Anton",
        "timestamp": 1747139441
    },
    {
        "content": "<blockquote>\n<p>and so we had very few comments</p>\n</blockquote>\n<p>And a lot of cases where I felt \"I have no idea what this thing is\".</p>",
        "id": 517818559,
        "sender_full_name": "Anton",
        "timestamp": 1747139729
    },
    {
        "content": "<p>In my experience, things start off great, and then the percentage of low-value comments creeps up and up until theyâre the cast majority of comments</p>",
        "id": 517860159,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1747149696
    },
    {
        "content": "<p>Hmm... <img alt=\":thinkies:\" class=\"emoji\" src=\"https://avatars.zulip.com/22008/emoji/images/9055c9eb.png\" title=\"thinkies\"></p>",
        "id": 517860801,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1747149863
    },
    {
        "content": "<p>Sound plausible.</p>",
        "id": 517860889,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1747149896
    },
    {
        "content": "<p>I still think this test/trail is well worth it given the experience of the rust compiler.</p>",
        "id": 517860950,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1747149916
    },
    {
        "content": "<p>FWIW, there were very few comments in the Rust unify/subs code, and there were many places where I think they would have been helpful.</p>\n<p>I can see how we'll likely end up with many self-describing comments like above with the <code>pub</code> enforcement, but I would guess the total number of <em>good</em> comments will be higher than without</p>",
        "id": 517877457,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1747154343
    },
    {
        "content": "<p>Encouraging good comments is IMO much more about carrot than stick</p>",
        "id": 517878791,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1747154740
    },
    {
        "content": "<p>What's a good carrot in this case?</p>",
        "id": 517878923,
        "sender_full_name": "Anton",
        "timestamp": 1747154765
    },
    {
        "content": "<p>Being really appreciative of someone going out of their way to document things well, for one</p>",
        "id": 517879083,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1747154813
    },
    {
        "content": "<p>Gentle prodding on the code review is good, to try to encourage that. But imo itâs really important that itâs actually a person making that code review comment rather than a bot. Itâs much more likely people will respect and listen to a person.</p>",
        "id": 517879405,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1747154912
    },
    {
        "content": "<blockquote>\n<p>Itâs much more likely people will respect and listen to a person.</p>\n</blockquote>\n<p>That is true but it's also hard to review consistently with different people.</p>",
        "id": 517879828,
        "sender_full_name": "Anton",
        "timestamp": 1747155041
    },
    {
        "content": "<p>One alternative approach that comes to mind is a small checklist that shows up when you make a PR in github:</p>\n<ul>\n<li>I added tests where needed</li>\n<li>I added comments where needed</li>\n</ul>",
        "id": 517880014,
        "sender_full_name": "Anton",
        "timestamp": 1747155104
    },
    {
        "content": "<p>A gentle reminder</p>",
        "id": 517880148,
        "sender_full_name": "Anton",
        "timestamp": 1747155135
    },
    {
        "content": "<blockquote>\n<p>I added comments where needed</p>\n</blockquote>\n<p>Below this one we could provide a collapsible list with all pub functions that you added but did not provide a comment for. So they have an easy overview without a hard reject mechanism.</p>",
        "id": 517880578,
        "sender_full_name": "Anton",
        "timestamp": 1747155271
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/channel/395097-compiler-development/topic/casual.20conversation/near/517766720\">said</a>:</p>\n<blockquote>\n<p>Would it be possible to not require that where it's just re-exporting something from another file?</p>\n<p><div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"c1\">/// Type Desc</span>\n<span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">Desc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"p\">.</span><span class=\"n\">Descriptor</span><span class=\"p\">;</span>\n\n<span class=\"w\"> </span><span class=\"c1\">/// Type Rank</span>\n<span class=\"w\"> </span><span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">Rank</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"p\">.</span><span class=\"n\">Rank</span><span class=\"p\">;</span>\n\n<span class=\"w\"> </span><span class=\"c1\">/// Type Mark</span>\n<span class=\"w\"> </span><span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">Mark</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"p\">.</span><span class=\"n\">Mark</span><span class=\"p\">;</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Done :) <a href=\"https://github.com/roc-lang/roc/pull/7790\">PR#7790</a></p>",
        "id": 518818981,
        "sender_full_name": "Anton",
        "timestamp": 1747488331
    },
    {
        "content": "<p>Oh no :p <br>\n<a href=\"/user_uploads/22008/3m0GAsGJWwpjJKjN9lTJ3Tu-/zig_dependency_graph.png\">zig_dependency_graph.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/3m0GAsGJWwpjJKjN9lTJ3Tu-/zig_dependency_graph.png\" title=\"zig_dependency_graph.png\"><img data-original-content-type=\"image/png\" data-original-dimensions=\"6821x1979\" src=\"/user_uploads/thumbnail/22008/3m0GAsGJWwpjJKjN9lTJ3Tu-/zig_dependency_graph.png/840x560.webp\"></a></div>",
        "id": 518842753,
        "sender_full_name": "Anton",
        "timestamp": 1747506759
    },
    {
        "content": "<p>This actually looks relatively one direction and decent....though base is definitely a bit sketch as a super aggregator</p>",
        "id": 518843769,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1747507354
    },
    {
        "content": "<p>How to make llvm compile at a reasonable speed (from one of my coworkers who works on mojo): <a href=\"https://youtu.be/6Ro6XTHAffY?si=iBPwdfjcA8hKqUQG\">https://youtu.be/6Ro6XTHAffY?si=iBPwdfjcA8hKqUQG</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"6Ro6XTHAffY\" href=\"https://youtu.be/6Ro6XTHAffY?si=iBPwdfjcA8hKqUQG\"><img src=\"https://uploads.zulipusercontent.net/9d8dc746ef6e7213bffef0c8fa09edc9a973fc0d/68747470733a2f2f692e7974696d672e636f6d2f76692f36526f36585448416666592f6d7164656661756c742e6a7067\"></a></div>",
        "id": 518928982,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1747580133
    },
    {
        "content": "<p>I put up a slightly improved version of the import graph on <a href=\"https://anton-4.github.io/roc-compiler-vis/zig_dependency_graph.png\">https://anton-4.github.io/roc-compiler-vis/zig_dependency_graph.png</a><br>\nIt's updated once a day based on the roc repo :)</p>\n<div class=\"message_inline_image\"><a href=\"https://anton-4.github.io/roc-compiler-vis/zig_dependency_graph.png\"><img src=\"https://uploads.zulipusercontent.net/accaa7eafcff52605581c5f12742fefaec3af2ca/68747470733a2f2f616e746f6e2d342e6769746875622e696f2f726f632d636f6d70696c65722d7669732f7a69675f646570656e64656e63795f67726170682e706e67\"></a></div>",
        "id": 519183408,
        "sender_full_name": "Anton",
        "timestamp": 1747677338
    },
    {
        "content": "<p>is this done by generating Mermaid from the dependency graph?</p>",
        "id": 519185248,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1747677789
    },
    {
        "content": "<p>I use graphviz based on grepped imports: <a href=\"https://github.com/Anton-4/roc-compiler-vis/blob/main/.github/workflows/publish_every_day.yml\">https://github.com/Anton-4/roc-compiler-vis/blob/main/.github/workflows/publish_every_day.yml</a></p>",
        "id": 519334181,
        "sender_full_name": "Anton",
        "timestamp": 1747732519
    },
    {
        "content": "<p>Should we upgrade our rust version? </p>\n<p>I was trying to run typos (like in CI) and were running an older version of rustc with our <code>rust-toolchain.toml</code> </p>\n<div class=\"codehilite\"><pre><span></span><code>$ cargo install typos-cli --version 1.32.0\n    Updating crates.io index\nerror: cannot install package `typos-cli 1.32.0`, it requires rustc 1.80 or newer, while the currently active rustc version is 1.77.2\n`typos-cli 1.28.2` supports rustc 1.75\n</code></pre></div>",
        "id": 519483166,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1747779431
    },
    {
        "content": "<p>I say go for it</p>",
        "id": 519484220,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1747780073
    },
    {
        "content": "<p>Should be pretty minimal</p>",
        "id": 519484232,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1747780081
    },
    {
        "content": "<p>I'm happy to poke at it. I'll wait for <span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> who may have ideas. I think we're just following the upgrade guide the toml file.</p>",
        "id": 519484437,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1747780182
    },
    {
        "content": "<p>In CI I remove rust-toolchain.toml before I install typos, that makes it work. Upgrading rust can come with some serious clippy work but with today's AI assistance that may go smooth, you're welcome to give it a try.</p>",
        "id": 519560765,
        "sender_full_name": "Anton",
        "timestamp": 1747818417
    },
    {
        "content": "<p>You can also install typos outside nix (and outside the roc repo) locally , that may be the easiest way.</p>",
        "id": 519562342,
        "sender_full_name": "Anton",
        "timestamp": 1747818880
    },
    {
        "content": "<p>It's nice that by encouraging code to be pure it is also easier and faster to test it <img alt=\":roc:\" class=\"emoji\" src=\"https://avatars.zulip.com/22008/emoji/images/5f42d943.png\" title=\"roc\"></p>",
        "id": 520942158,
        "sender_full_name": "Anton",
        "timestamp": 1748453191
    },
    {
        "content": "<p>I remember that my professor deducted me a ton of points on the exam for my first programming (java) college course. Not because my solution was incorrect, but because I didn't put stuff in classes. Ironically, now I am working on a programming language without any classes, full circle, haha :p</p>",
        "id": 520944620,
        "sender_full_name": "Anton",
        "timestamp": 1748454090
    },
    {
        "content": "<p>He did also end up teaching me functional programming in a different course, so that's an acceptable redemption arc :)</p>",
        "id": 520944740,
        "sender_full_name": "Anton",
        "timestamp": 1748454126
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"341568\">@Jared Ramirez</span> I noticed your explanation about the occurs check and not using Mark, I thought that looked good. You're switching back to use Mark, why is that? I'm just curious.</p>",
        "id": 521387455,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1748649527
    },
    {
        "content": "<p>Yeah, I kinda went back and forth on it. I think using Marks will have slight better performance (though it may be negligible), and I figured if it was done that way in the rust compiler, there was probably a reason.</p>",
        "id": 521398601,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1748658846
    },
    {
        "content": "<p>I was also gonna see what Richard thought when he reviews it! I kept the âcovert to use Marksâ change isolated in a commit, which can easily be dropped if the original way sans Marks is preferred</p>",
        "id": 521398723,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1748658970
    },
    {
        "content": "<p>I have an idea, which I'm not sure has precedent - what if we counted the number of transitive unifications we'd done for a given type (e.g. we visit a canonical IR node and kick off a unification of it and some other type; all the unifications resulting from that original, before we move on to the next canonical IR node, would be \"transitive\" here) and if that count is under some threshold, then all occurs checks are no-ops</p>",
        "id": 521406916,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1748665825
    },
    {
        "content": "<p>so the idea there would be that the occurs checks are there to catch infinite types, which are a rare but very serious error case</p>",
        "id": 521407000,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1748665870
    },
    {
        "content": "<p>rare bc it's a very uncommon mistake to make, and serious bc it hangs the compiler by default (unless there's an occurs check to detect that we're stuck in an infinite loop)</p>",
        "id": 521407043,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1748665916
    },
    {
        "content": "<p>so the idea would be that if we're stuck in an infinite loop, our iteration count will exceed the threshold, and if we're not stuck in an infinite loop, then it very rarely will, and so it's much cheaper to skip the checks</p>",
        "id": 521407140,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1748665972
    },
    {
        "content": "<p>this would have a perf cost in the case where we do actually have an infinite type, but I think that's totally fine bc it comes up so rarely in practice</p>",
        "id": 521407182,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1748666017
    },
    {
        "content": "<p>(plus the perf cost would probably only be paid for that one type in the whole build, so likely still wouldn't be noticeable)</p>",
        "id": 521407246,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1748666060
    },
    {
        "content": "<p>thoughts?</p>",
        "id": 521407249,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1748666064
    },
    {
        "content": "<p>So like we have a counter and every time we recurse in unify, we increment it, then if we exceed the threshold we do a full occurs check?</p>",
        "id": 521407651,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1748666430
    },
    {
        "content": "<p>I think weâd have to reset/decrement the count for each recursive branch (eg if count = 1 at the start of a function, we recurse to unify args 1, weâd have to reset the count back to 1 before unifying args 2). This is how tracking seen variables in a regular occurs check works though, so I think that should be fine</p>",
        "id": 521407944,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1748666572
    },
    {
        "content": "<p>Thinking more, I wonder if we couldnât combine unify and occurs check. We could track seen variables in unification and check on each recursive call if weâve already seen this var</p>",
        "id": 521410350,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1748668759
    },
    {
        "content": "<p>yeah, my thinking was just that we could avoid checking the variables at all in the very common case where there aren't any infinite types</p>",
        "id": 521432857,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1748689592
    },
    {
        "content": "<p>since incrementing a counter and checking if it's over a threshold is so cheap it's basically free</p>",
        "id": 521432873,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1748689618
    },
    {
        "content": "<p>One thing, to double check. Can we make sure that this checker allows infinite recursion through indirection? Also through non tag types. And multiple aliases</p>\n<p>The old version had really annoying edge cases</p>",
        "id": 521448454,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1748702685
    },
    {
        "content": "<p>For example, a list or a box should break infinite recursion and be valid:</p>\n<div class=\"codehilite\"><pre><span></span><code>Node a: { data: a, children: List(Node(a)) }\n</code></pre></div>",
        "id": 521448522,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1748702753
    },
    {
        "content": "<p>And by multiple type alias recursion, I mean things like:</p>\n<div class=\"codehilite\"><pre><span></span><code>Wrapper a : { data: a, next: Inner(a) }\nInner a : [ Next: Wrapper(a), None ]\n</code></pre></div>",
        "id": 521448751,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1748702895
    },
    {
        "content": "<p>yeah definitely need to allow those cases!</p>",
        "id": 521448752,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1748702895
    },
    {
        "content": "<p>Yeah, just want to make sure they get thought about early in case it matters to design</p>",
        "id": 521448771,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1748702920
    },
    {
        "content": "<p>I know this is a common beginner trip currently</p>",
        "id": 521448796,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1748702942
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"341568\">@Jared Ramirez</span> would be some good cases to add tests for! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 521456654,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1748708951
    },
    {
        "content": "<p>Interesting approach to compiler backend construction: <a href=\"https://arxiv.org/pdf/2505.22610\">https://arxiv.org/pdf/2505.22610</a></p>",
        "id": 521768952,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1748876284
    },
    {
        "content": "<p>Are we planning on limiting Roc source to ASCII? </p>\n<p>Can I have idents or fields in records that are using a wider set of characters?</p>",
        "id": 522490692,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1749094084
    },
    {
        "content": "<p>For context I was looking at Richard's WIP PR </p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"c1\">// Then sort by name (ascending)</span>\n<span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">lhs_str</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">env</span><span class=\"p\">.</span><span class=\"n\">idents</span><span class=\"p\">.</span><span class=\"n\">getText</span><span class=\"p\">(</span><span class=\"n\">lhs</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">);</span>\n<span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">rhs_str</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">env</span><span class=\"p\">.</span><span class=\"n\">idents</span><span class=\"p\">.</span><span class=\"n\">getText</span><span class=\"p\">(</span><span class=\"n\">rhs</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">);</span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">mem</span><span class=\"p\">.</span><span class=\"n\">order</span><span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lhs_str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rhs_str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">lt</span><span class=\"p\">;</span>\n</code></pre></div>",
        "id": 522490908,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1749094254
    },
    {
        "content": "<p>But I guess this wouldn't mind what encoding is used... it's just using the raw bytes.</p>",
        "id": 522490974,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1749094288
    },
    {
        "content": "<p>Idents are currently ascii-only in the new compiler, and I think the intent is to keep it that way unless/until thereâs a strong signal otherwise</p>",
        "id": 522491153,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1749094415
    },
    {
        "content": "<p>I see the implementation in tokenize</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">chompIdentGeneral</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">Cursor</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kr\">var</span><span class=\"w\"> </span><span class=\"n\">valid</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">pos</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">buf</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">pos</span><span class=\"p\">];</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"s\">'a'</span><span class=\"w\"> </span><span class=\"k\">and</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"s\">'z'</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">or</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"s\">'A'</span><span class=\"w\"> </span><span class=\"k\">and</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"s\">'Z'</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">or</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"s\">'0'</span><span class=\"w\"> </span><span class=\"k\">and</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"s\">'9'</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">or</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s\">'_'</span><span class=\"w\"> </span><span class=\"k\">or</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s\">'!'</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">pos</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"mh\">0x80</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">valid</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">pos</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"k\">break</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">valid</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 522491434,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1749094596
    },
    {
        "content": "<p>yeah I think it's reasonable to consider non-ASCII in the future, but even assuming we want to support it, it's enough of a project that I don't think we need it for 0.1.0</p>",
        "id": 522493782,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749096138
    },
    {
        "content": "<p>My roc-math package has constants like Ï and function arguments like Î¸, but I think I'm the only one who's used them before <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 522496699,
        "sender_full_name": "Hannes",
        "timestamp": 1749098149
    },
    {
        "content": "<p>I've been merging changes and generally going ham on our WIP Can PR <a href=\"https://github.com/roc-lang/roc/pull/7806\">https://github.com/roc-lang/roc/pull/7806</a>. </p>\n<p>It's back to compiling and tests passing now... but I've definitely missed a heap of things. I can already see things that I've missed between my \"fixes\" and merge conflicts.</p>\n<p>I'm going to take my time going back through all changes and clean it up so we can merge it hopefully this weekend sometime.</p>",
        "id": 522871865,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1749271034
    },
    {
        "content": "<p>Random tip; merging multiple <code>Stdout.line</code> into one can drastically reduce your build times! So like this:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"w\">    </span><span class=\"nx\">Stdout</span><span class=\"p\">.</span><span class=\"nx\">line</span><span class=\"o\">!</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"s\">\"\"\"</span>\n<span class=\"s\">        Testing Tcp module functions...</span>\n<span class=\"s\">        Note: These tests require a TCP server running on localhost:8085</span>\n<span class=\"s\">        You can start one with: ncat -e `which cat` -l 8085</span>\n\n<span class=\"s\">        \"\"\"</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"o\">?</span>\n</code></pre></div>\n<p>Instead of</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"w\">    </span><span class=\"nx\">Stdout</span><span class=\"p\">.</span><span class=\"nx\">line</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"Testing Tcp module functions...\"</span><span class=\"p\">)</span><span class=\"o\">?</span>\n<span class=\"w\">    </span><span class=\"nx\">Stdout</span><span class=\"p\">.</span><span class=\"nx\">line</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"Note: These tests require a TCP server running on localhost:8085\"</span><span class=\"p\">)</span><span class=\"o\">?</span>\n<span class=\"w\">    </span><span class=\"nx\">Stdout</span><span class=\"p\">.</span><span class=\"nx\">line</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"You can start one with: ncat -e `which cat` -l 8085\"</span><span class=\"p\">)</span><span class=\"o\">?</span>\n<span class=\"w\">    </span><span class=\"nx\">Stdout</span><span class=\"p\">.</span><span class=\"nx\">line</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"p\">)</span><span class=\"o\">?</span>\n</code></pre></div>",
        "id": 522887294,
        "sender_full_name": "Anton",
        "timestamp": 1749292321
    },
    {
        "content": "<p>Doing this for all subsequent <code>Stdout.line</code> in <a href=\"https://github.com/roc-lang/basic-cli/blob/main/tests/tcp.roc\">tests/tcp.roc</a> reduced build time from 9315 ms to 728 ms!</p>",
        "id": 522887355,
        "sender_full_name": "Anton",
        "timestamp": 1749292426
    },
    {
        "content": "<p>Splitting lots of <code>?</code> calls over multipe functions also helps a lot</p>",
        "id": 522888394,
        "sender_full_name": "Anton",
        "timestamp": 1749293881
    },
    {
        "content": "<p>Makes sense</p>",
        "id": 522900996,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749308697
    },
    {
        "content": "<p>Way less closures for llvm to deal with</p>",
        "id": 522901012,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749308708
    },
    {
        "content": "<p>Or hmm....actually with the old tasks it makes sense.....surprising now that it makes much of a difference</p>",
        "id": 522901061,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749308739
    },
    {
        "content": "<p>Would be great to see a profile of the compiler before and after</p>",
        "id": 522901094,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749308772
    },
    {
        "content": "<p>Also</p>\n<blockquote>\n<p>from 9315 ms to 728 ms!</p>\n</blockquote>\n<p>Feels like a bug or file system caching or something else crazy....bug is my biggest guess.</p>",
        "id": 522902504,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749310556
    },
    {
        "content": "<p>just too high of a delta</p>",
        "id": 522902526,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749310567
    },
    {
        "content": "<p>so I'm curious</p>",
        "id": 522902530,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749310571
    },
    {
        "content": "<p>I'll try to profile later today :)</p>",
        "id": 522902564,
        "sender_full_name": "Anton",
        "timestamp": 1749310613
    },
    {
        "content": "<p>Hmm, addr2line is being used after recording the flamegraph and it's taking its time... it's also single threaded <span aria-label=\"graveyard\" class=\"emoji emoji-1faa6\" role=\"img\" title=\"graveyard\">:graveyard:</span> <br>\nI've never had that before, could be caused by our perf issue <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 522911621,
        "sender_full_name": "Anton",
        "timestamp": 1749321322
    },
    {
        "content": "<p>Addr2line, generally isn't fast, but it taking forever could mean essentially infinite recursion</p>",
        "id": 522911674,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749321388
    },
    {
        "content": "<p>It's still going :p I'm just going to make a simpler reproducer on Monday</p>",
        "id": 522914553,
        "sender_full_name": "Anton",
        "timestamp": 1749325324
    },
    {
        "content": "<p>I've been putting together as much as I can for this Can PR but I have some architectural questions.</p>",
        "id": 522953173,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1749369402
    },
    {
        "content": "<p>The type store currently holds a reference to the ModuleEnv, however I feel like  it should live in the ModuleEnv so we can make fresh variables in Can, and later solve them. </p>\n<p>Where should the type store live?</p>",
        "id": 522953176,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1749369405
    },
    {
        "content": "<p>I have gone with Can IR owning the type store. It seems to be working ok for now.</p>",
        "id": 522967330,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1749376457
    },
    {
        "content": "<p>Type store in module env makes sense! Probably better than specifically can IR</p>",
        "id": 522967401,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1749376521
    },
    {
        "content": "<p>But not sure it matters too much</p>",
        "id": 522967420,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1749376539
    },
    {
        "content": "<p>yeah can should not be making fresh type variables in this design</p>",
        "id": 522971582,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749381547
    },
    {
        "content": "<p>rather, we should reuse can idx to be var, and initialize the types store with a capacity of at least the highest can idx</p>",
        "id": 522971631,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749381627
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/395097-compiler-development/topic/casual.20conversation/near/522971631\">said</a>:</p>\n<blockquote>\n<p>rather, we should reuse can idx to be var, and initialize the types store with a capacity of at least the highest can idx</p>\n</blockquote>\n<p>this was exactly what i was expecting</p>",
        "id": 522973361,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1749383938
    },
    {
        "content": "<p>I've been going ham on the Can PR <span class=\"user-mention\" data-user-id=\"781658\">@Anthony Bullard</span> </p>\n<p>It's probably past the point where I should stop and get some feedback. Maybe even worth merging now (it's passed all the CI checks)??</p>\n<p>I feel like most of my effort has been on the fringes and infrastructure like SExpr stuff that I understand, and I haven't really touched core Can implementation things, aside from copying Anthony's lead I think.</p>\n<p>I've got another day tomorrow I can probably spend hacking on this, so if anyone is able to skim through and give me any pointers that would be appreciated.</p>",
        "id": 522974455,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1749385208
    },
    {
        "content": "<p>i will take a look today Luke</p>",
        "id": 522974895,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1749385824
    },
    {
        "content": "<p>sorry i've been so busy</p>",
        "id": 522974904,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1749385836
    },
    {
        "content": "<p>Thank you <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 522975038,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1749386000
    },
    {
        "content": "<p>I started refactoring Can a little now I'm getting my head around what is going on there. It's such a massive thing I feel like some module structure for the API will help in the long run. </p>\n<p>I've been trying different things out, and I'm basically just rolling with what I think is nicest. I figure if there are any concerns I'm happy to change it back etc. </p>\n<p>One change is instead of calling it <code>IR</code> I started calling it <code>CIR</code> short for Can IR. It just helps a lot to qualify things, particularly when we are mixing both Parser IR and Can IR in some places.</p>",
        "id": 523050202,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1749459166
    },
    {
        "content": "<p>I'm really tempted to refactor and update Parser in a similar way, move Node and NodeStore out into separate files and rename to <code>PIR</code>. But I can wait until I get some feedback on these Can changes.</p>",
        "id": 523050373,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1749459242
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/channel/395097-compiler-development/topic/casual.20conversation/near/522971631\">said</a>:</p>\n<blockquote>\n<p>rather, we should reuse can idx to be var, and initialize the types store with a capacity of at least the highest can idx</p>\n</blockquote>\n<p>I think we might need to initialize some fresh vars as well â for Can nodes that need more than 1 var. Like a <code>tag</code> needs the tag union var &amp; an extensibility var, and we can't use the Can Idx for both. Though very possible I'm missing something</p>",
        "id": 523189818,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1749516736
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/channel/395097-compiler-development/topic/casual.20conversation/near/522967401\">said</a>:</p>\n<blockquote>\n<p>Type store in module env makes sense! Probably better than specifically can IR</p>\n</blockquote>\n<p>I just realised I misread this comment when you wrote it Sam, and understood it to mean the opposite. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<p>Thinking about this more, I agree it needs to live in the ModuleEnv as that is where things should be that outlive any particular compiler stage IR.</p>\n<p>Hatching plans with <span class=\"user-mention\" data-user-id=\"341568\">@Jared Ramirez</span>  to move it, but needs some coordination to update the type_store a little as it currently holds a pointer to ModuleEnv.</p>",
        "id": 523190596,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1749517504
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"341568\">Jared Ramirez</span> <a href=\"#narrow/channel/395097-compiler-development/topic/casual.20conversation/near/523189818\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/channel/395097-compiler-development/topic/casual.20conversation/near/522971631\">said</a>:</p>\n<blockquote>\n<p>rather, we should reuse can idx to be var, and initialize the types store with a capacity of at least the highest can idx</p>\n</blockquote>\n<p>I think we might need to initialize some fresh vars as well â for Can nodes that need more than 1 var. Like a <code>tag</code> needs the tag union var &amp; an extensibility var, and we can't use the Can Idx for both. Though very possible I'm missing something</p>\n</blockquote>\n<p>ah, so my thinking there was that we just make empty can slots</p>",
        "id": 523191542,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749518261
    },
    {
        "content": "<p>in other words, let's say we have a can node that needs 3 vars - instead of that can node getting 1 slot and then we make 2 extra vars for it, we just give it 3 can slots</p>",
        "id": 523191584,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749518300
    },
    {
        "content": "<p>it might sound like it's wasting memory, but my thinking is that the alternative is to spend the same amount of memory writing down which type vars they need</p>",
        "id": 523191631,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749518356
    },
    {
        "content": "<p>and the advantage of this is that if you zero out the empty can slots, it becomes bidirectional; not only can you go from any given Can Idx to a type var, you can also take any given type var and get back to the Can Idx where it came from</p>",
        "id": 523191724,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749518433
    },
    {
        "content": "<p>which in turn means (I think) that we could avoid propagating region info through to type checking, and still get error messages that map back to source</p>",
        "id": 523191775,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749518473
    },
    {
        "content": "<p>because you can go from the type var that had the mismatch back to the original source via the Can IR node</p>",
        "id": 523191826,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749518518
    },
    {
        "content": "<p>(that might not turn out to work in all cases though, I'm not sure yet haha)</p>",
        "id": 523191838,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749518529
    },
    {
        "content": "<p>aside -- should the Can IR nodes have region info? only some do at the moment, and it was something I was looking at yesterday. I've threaded things through for the sexpr to display that for those nodes that do.</p>",
        "id": 523191912,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1749518608
    },
    {
        "content": "<p>Everything all the way down the stack should have region info</p>",
        "id": 523192581,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749519116
    },
    {
        "content": "<p>Important for debug info with llvm</p>",
        "id": 523192597,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749519126
    },
    {
        "content": "<p>another aside -- what about desugured nodes? do they inherit region info</p>",
        "id": 523192849,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1749519317
    },
    {
        "content": "<p>Also Re desugaring... should we have a similar to rust, single pass that runs before Can, or should we be doing that desugaring as we go through the Parse IR</p>",
        "id": 523192906,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1749519369
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/395097-compiler-development/topic/casual.20conversation/near/523192849\">said</a>:</p>\n<blockquote>\n<p>another aside -- what about desugured nodes? do they inherit region info</p>\n</blockquote>\n<p>Yes</p>",
        "id": 523192927,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749519387
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/395097-compiler-development/topic/casual.20conversation/near/523192906\">said</a>:</p>\n<blockquote>\n<p>Also Re desugaring... should we have a similar to rust, single pass that runs before Can, or should we be doing that desugaring as we go through the Parse IR</p>\n</blockquote>\n<p>I think this was discussed a bit, and the decision was likely we should just start with a new pass just for desugaring, but at the same time, if it is trivial to do on a different IR, that is also fine.</p>",
        "id": 523193023,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749519459
    },
    {
        "content": "<p>I want to skip desugaring for now</p>",
        "id": 523193171,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749519608
    },
    {
        "content": "<p>as in, don't desugar anything - just keep it around as a first-class thing for later passes to deal with separately</p>",
        "id": 523193190,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749519621
    },
    {
        "content": "<p>How do we handle string interpolation then?</p>",
        "id": 523193284,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1749519714
    },
    {
        "content": "<p>Here is my naive attempt at that in Can...</p>\n<div class=\"codehilite\"><pre><span></span><code>description=Simple string interpolation\n type=expr\n ~~~SOURCE\n &quot;Hello ${name}!&quot;\n ~~~PROBLEMS\n NIL\n ~~~TOKENS\n StringStart(1:1-1:2),StringPart(1:2-1:8),OpenStringInterpolation(1:8-1:10),LowerIdent(1:10-1:14),CloseStringInterpolation(1:14-1:15),StringPart(1:15-1:16),StringEnd(1:16-1:17),EndOfFile(1:17-1:17),\n ~~~PARSE\n\n\n (string (1:1-1:17)\n    (string_part (1:2-1:8) &quot;Hello &quot;)\n    (ident (1:10-1:14) &quot;&quot; &quot;name&quot;)\n    (string_part (1:15-1:16) &quot;!&quot;))\n ~~~FORMATTED\n NO CHANGE\n ~~~CANONICALIZE\n (call\n    (lookup (ident &quot;Str.concat&quot;))\n    (call\n        (lookup (ident &quot;Str.concat&quot;))\n        (str &quot;Hello &quot;)\n        (lookup (ident &quot;name&quot;)))\n    (str &quot;!&quot;))\n ~~~END\n</code></pre></div>",
        "id": 523193336,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1749519763
    },
    {
        "content": "<p>Basically, de-sugared the interpolation into multiple <code>Str.concat</code> calls (that I imagine exist).</p>",
        "id": 523193393,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1749519799
    },
    {
        "content": "<p>we just make an \"interpolated string\" can IR node type</p>",
        "id": 523198291,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749524421
    },
    {
        "content": "<p>one reason for doing that is so that if there's an error message later (e.g. a type mismatch) we can do better than referring to Str.concat calls that aren't in the code</p>",
        "id": 523198358,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749524471
    },
    {
        "content": "<p>bc we'll still know it was interpolation, so we can just put that directly in the error message</p>",
        "id": 523198383,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749524491
    },
    {
        "content": "<p>In the same vein as the above ^^ should we make a node for Binop instead of desugaring to a call to <code>Num.add</code> etc</p>",
        "id": 523523253,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1749635782
    },
    {
        "content": "<p>Yep</p>",
        "id": 523586482,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749655570
    },
    {
        "content": "<p>Or maybe a node per binop type in the end cause tags are cheap</p>",
        "id": 523586668,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1749655622
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"453336\">@Joshua Warner</span> <span class=\"user-mention\" data-user-id=\"781658\">@Anthony Bullard</span>  -- any objections to me refactoring the <code>Node</code> and <code>NodeStore</code> out of the parser IR and into their own files (in the <code>src/check/parse</code> directory). </p>\n<p>I think it helps clarify the abstraction a little more, basically the Store is a lower level abstraction for good memory/cache efficiency etc, and the IR is the higher level representation of the AST with helpers for parsing.</p>",
        "id": 523650329,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1749682474
    },
    {
        "content": "<p>Also, we wen't back and forth a little over what to call the IR, but settled on IR instead of AST (I think because it's just another IR in the overall compiler pipeline)... </p>\n<p>Does anyone have any objections to using <code>PIR</code> for Parser IR?</p>",
        "id": 523650536,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1749682598
    },
    {
        "content": "<p>Maybe it's a little OCD or something, but I like fully qualifying the types and having a short and clear distinction between the parser and can types is helpful.</p>",
        "id": 523650620,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1749682668
    },
    {
        "content": "<p>Err, why not just AST? Thatâs the much more standard name for this.</p>",
        "id": 523650630,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1749682677
    },
    {
        "content": "<p>Calling everything an IR does make things sound uniform, but that also heavily dilutes the meaning of that term.</p>",
        "id": 523650712,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1749682713
    },
    {
        "content": "<p>I don't mind using <code>AST</code></p>",
        "id": 523650722,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1749682721
    },
    {
        "content": "<p>It's literally our concrete syntax right?</p>",
        "id": 523650772,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1749682747
    },
    {
        "content": "<p>No, it is actually abstract(er)! (Than the old âastâ was)</p>",
        "id": 523650830,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1749682791
    },
    {
        "content": "<p>In the process of refacatoring the <code>NodeStore</code> out into it's own file... I'd like to ziggify the types a little using nesting... so instead of <code>PatternRecordFieldIdx</code> we have <code>Pattern.RecordField.Idx</code>, and <code>getPatternRecordField</code> becomes <code>Pattern.RecordField.get</code> etc</p>",
        "id": 523651031,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1749682883
    },
    {
        "content": "<p>I know what I'm proposing is a little like moving the deckchairs on the titanic, and kind of pointless ... but I'm really enjoying these features of Zig and I think it helps to establish the patterns we want to use elsewhere.</p>",
        "id": 523651497,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1749683185
    },
    {
        "content": "<p>Not sure I fully understand how Pattern.RecordField.get would work?</p>",
        "id": 523653071,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1749684259
    },
    {
        "content": "<p>I think I need to see that in context</p>",
        "id": 523653100,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1749684293
    },
    {
        "content": "<p>Is there a particular reason we are using a struct instead of an enum for index types in the parser? </p>\n<p>e.g. <code>pub const BodyIdx = struct { id: u32 };</code> instead of <code>pub const BodyIdx = enum(u32) { _ };</code></p>\n<p>We use both in different places. From what I can tell it seems the enum approach is preferable, but I'm not sure if there was a specific reason we did this. I assume it was just the first thing we thought of at the time and it would be ok to use the enum.</p>",
        "id": 523663152,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1749690882
    },
    {
        "content": "<p>i don't personally think it matters</p>",
        "id": 523663231,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1749690932
    },
    {
        "content": "<p>the size of it is what matters and the ergonomics</p>",
        "id": 523663265,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1749690943
    },
    {
        "content": "<p>Ok, thank you. As far as I can tell this is about the only difference.</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">.{</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">crash</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">.{</span>\n<span class=\"w\">    </span><span class=\"c1\">// using the struct approach</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">expr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">.{</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">lhs</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">region</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">region</span><span class=\"p\">,</span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">};</span>\n\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">.{</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">crash</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">.{</span>\n<span class=\"w\">    </span><span class=\"c1\">// using the enum approach</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">expr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">@enumFromInt</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">lhs</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">region</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">region</span><span class=\"p\">,</span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">};</span>\n</code></pre></div>",
        "id": 523663466,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1749691103
    },
    {
        "content": "<p>yep</p>",
        "id": 523664925,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1749692356
    },
    {
        "content": "<p>i prefer the former, but don't care that much</p>",
        "id": 523664939,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1749692371
    },
    {
        "content": "<p>I've been making these changes, and have found many places where one would work better, and other places where the other works better. <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> </p>\n<p>I don't feel particularly strong about it either, but I'm a far way through making all the Idx's use the enum approach. I'll keep going and see how it looks.</p>",
        "id": 523671616,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1749699231
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"341568\">@Jared Ramirez</span> mentioned he is ready to wire up the type vars properly in Can. </p>\n<p>I think we should merge my gigantic Can PR that I've been working against so he has a more mature structure to work with.</p>\n<p>I've been in a move fast and break things / refactor mode so theres a lot of improvements there, but all low technical risk as I'm mostly fleshing out the new Can stage and wiring everything up so we have snapshots with diagnostic errors and region info etc (along with some very primitive Can analysis).</p>",
        "id": 523861888,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1749782353
    },
    {
        "content": "<p>Brief update on progress with Can. </p>\n<p>Improved the snapshots reporting so they should now display all the problems, and print out useful information. Haven't got region info, but for now just seeing the source is useful to understand where the issue is.</p>\n<div class=\"codehilite\"><pre><span></span><code>~~~SOURCE\napp [main!] { pf: platform &quot;../basic-cli/platform.roc&quot; }\n\nimport pf.Stdout\n\nmain! = |_| Stdout.line!(&quot;Hello, world!&quot;)\n~~~PROBLEMS\nCANONICALIZE: ident_not_in_scope &quot;Stdout.line!&quot;\nCANONICALIZE: can_lambda_not_implemented &quot;|_| Stdout.line!(...&quot;\n</code></pre></div>\n<p>For hello world we are almost there.. just need to figure out the final details on lambdas. I'm not sure if we should have a lambda <code>Expr</code> variant in the Can IR or if there is some analysis we should be doing here to make it something else. We could have just missed that variant when translating from rust.</p>\n<div class=\"codehilite\"><pre><span></span><code>~~~CANONICALIZE\n(can_ir\n    (top_level_defs\n        (def\n            &quot;let&quot;\n            (pattern (5:1-5:6)\n                (assign (5:1-5:6) (ident &quot;main!&quot;)))\n            (expr (5:9-5:42) (runtime_error (5:9-5:42) &quot;can_lambda_not_implemented&quot;))\n            &quot;#0&quot;)))\n</code></pre></div>\n<p>All the Can nodes have regions information now, and they display correctly in our SExpr snapshots. </p>\n<p>I've implemented most of the <code>Expr</code>, <code>Pattern</code>, and <code>Statment</code> handling in the <code>NodeStore</code> now, theres a few nodes here and there that need to store things in <code>extra_data</code> but I figure we will do that as we get to them. It should be mush easier now to implement the analysis logic without thinking too much about the low-level store.</p>",
        "id": 523892937,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1749802021
    },
    {
        "content": "<p>We've discussed it before previously I think... but should we consider having a constants file somewhere where we keen magic hardcoded numbers that configure the compiler?</p>\n<p>I was looking at <span class=\"user-mention\" data-user-id=\"341568\">@Jared Ramirez</span> PR's for unify and the <code>max_depth_before_occurs</code> variable made me think of it. </p>\n<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> can you remember talking about this<br>\n?</p>",
        "id": 523911930,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1749808690
    },
    {
        "content": "<p>yes, I was thinking this too</p>",
        "id": 523954348,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749823705
    },
    {
        "content": "<p>I like the name <code>limits.zig</code></p>",
        "id": 523954375,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749823715
    },
    {
        "content": "<p>and putting it at the top level dir so everything can access it (and it shouldn't import anything)</p>",
        "id": 523954470,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1749823743
    },
    {
        "content": "<p>When debugging the rust compiler, note that you need to comment out <a href=\"https://github.com/roc-lang/roc/blob/bba2103882a8124f3887da6adaaa44cf2b728c3e/Cargo.toml#L240\">this line</a> to see local vars with lldb or gdb</p>",
        "id": 524318349,
        "sender_full_name": "Anton",
        "timestamp": 1750100891
    },
    {
        "content": "<p>I'm tracking the implementation of Scope is not quite correct. I discussed with Richard the intended design to accomodate <code>var</code> and shadowing and I intend on revisiting that next.</p>",
        "id": 524607796,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1750201009
    },
    {
        "content": "<p>Heads up that Iâm starting work on basic type solving, now that we have basic type variable generation in Can. Just positing for viz!</p>",
        "id": 524799678,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1750292136
    },
    {
        "content": "<p>I'm experimenting with some additions to my .rules file. I thought I'd made a PR to share. I might give it a week or so and see if I feel like tweaking it. </p>\n<p><a href=\"https://github.com/roc-lang/roc/pull/7845\">https://github.com/roc-lang/roc/pull/7845</a></p>\n<p>So far it's been good. I find the agents are much quicker at finding the relevant information for a task.</p>",
        "id": 525005586,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1750410834
    },
    {
        "content": "<p>Cool stuff, can you try mentioning the Glossary.md file? It has a lot of links and Roc compiler specific terms too, I would expect it to be helpful.</p>",
        "id": 525005943,
        "sender_full_name": "Anton",
        "timestamp": 1750410976
    },
    {
        "content": "<p>The Glossary is a very useful resource, and it's getting better all the time <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 525006529,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1750411242
    },
    {
        "content": "<p>Are type declarations only valid at the top-level? (I'm reasonably sure they are valid everywhere) but I figured I'd clarify. I'm going to leave the type_decl in statement positions as a TODO for now.</p>",
        "id": 525112209,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1750459846
    },
    {
        "content": "<p>they're valid everywhere, yeah</p>",
        "id": 525117834,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1750466669
    },
    {
        "content": "<p>type decls are valid everywhere??</p>",
        "id": 525118840,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750468166
    },
    {
        "content": "<p>i've never seen that before outside the top level</p>",
        "id": 525118862,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750468199
    },
    {
        "content": "<p>Define a type decl?</p>\n<p>Do we mean:<br>\n1</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"no\">SomeType</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"no\">InnerType</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>2</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"no\">SomeAlias</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"no\">InnerType</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>3</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"no\">SomeType</span>\n<span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"no\">InnerType</span>\n</code></pre></div>",
        "id": 525119023,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1750468495
    },
    {
        "content": "<p>1 and 2</p>",
        "id": 525119041,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750468513
    },
    {
        "content": "<p>I could see 2 being valid anywhere....though a bit strange.... 1 sounds pretty crazy given we anchor static dispatch to the module and it would just generally be odd to define a named type within a scope in roc.</p>",
        "id": 525119112,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1750468603
    },
    {
        "content": "<p>Why do we want the everywhere? I feel like that only makes sense if we allow nested modules or other more intense scoping of some form.</p>",
        "id": 525119138,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1750468641
    },
    {
        "content": "<p>it's mostly to avoid having an arbitrary restriction in the language</p>",
        "id": 525120041,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1750470124
    },
    {
        "content": "<p>like yeah you can just use them wherever, no special rules</p>",
        "id": 525120047,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1750470130
    },
    {
        "content": "<p>Fair enough</p>",
        "id": 525120057,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1750470151
    },
    {
        "content": "<p>I can't wait to see the use of an opaque type that is defined in a function and returned.</p>",
        "id": 525120074,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1750470196
    },
    {
        "content": "<p>i don't even know what that could do</p>",
        "id": 525120088,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750470236
    },
    {
        "content": "<p>it would not be very useful <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 525120089,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1750470236
    },
    {
        "content": "<p>seems like a footgun</p>",
        "id": 525120102,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750470266
    },
    {
        "content": "<p>I think it literally could only be used if it also was returned with functions that can use the type</p>",
        "id": 525120108,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1750470274
    },
    {
        "content": "<p>wouldn't that mean that the type would have to live outside the scope of the function ?</p>",
        "id": 525121558,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750472711
    },
    {
        "content": "<p>Not sure, but it does sound complicated to reason about at a minimum</p>",
        "id": 525121866,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1750473269
    },
    {
        "content": "<p>heh, these are fair points</p>",
        "id": 525123142,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1750475610
    },
    {
        "content": "<p>maybe we should just disallow it for 0.1.0 and revisit later</p>",
        "id": 525123146,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1750475620
    },
    {
        "content": "<p>Yeah, based on trying to implement it, my vote is to restrict to top level for now. It seems strange having type decls in Scope</p>",
        "id": 525123244,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1750475795
    },
    {
        "content": "<p>Type decls inside a function could be useful for making sure you understand the type of some intermediate variable - e.g. like a type assertion</p>",
        "id": 525125969,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1750479658
    },
    {
        "content": "<p>for that purpose, you'd need to use 1+3 or 2+3 (i.e. together with a value defined)</p>",
        "id": 525126009,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1750479709
    },
    {
        "content": "<p>3 is fine, it's 1 and 2 that are a problem, and more 1 than 2</p>",
        "id": 525150300,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750501153
    },
    {
        "content": "<p>is there a thread with the current work plan or smth like that for coordination? I'm trying to get into zig rewrite but don't understand current goals and workflow. just don't know where to start at. I see <code>src/README.md</code>, it implies loads of work to be done, but nothing really specific. maybe there are some shortcuts to avoid redundant job?<br>\ne.g. I see records canonicalization isn't implemented yet. I assume there's a way to adapt rust implementation, but not sure if there an agreement on best practices. shortly, what's the rule of thumb for the rewrite?</p>",
        "id": 525391428,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1750704946
    },
    {
        "content": "<p>I would say the rule of thumb is to coordinate via zulip, let people know what you are up to by making Draft PRs etc.</p>\n<p>I've been focussing on implementing more of Can along with the s-expressions for debugging and making nice error reports.</p>\n<p>Anthony is currently looking at the Builtins I think. </p>\n<p>Jared has been hooking the first parts of type unification.</p>\n<p>Richard has been laying the foundation for runtime representations so we can evaluating things using the interpreter.</p>\n<p>I was thinking about looking at either how do we fuzz Can or start using the cache for single modules, next.</p>\n<p>There's a mountain of unimplemented or hacked together things though in Can. Records haven't been touched. When (now <code>match</code>) hasn't been touched. There's many error reports that we can bring across from the rust implementation.</p>\n<p>I've been picking a snapshot that represents a real bit of roc code and seeing what I can do to get it working end to end, and letting that take me on a yak shaving adventure.  </p>\n<p>I wouldn't recommend doing anything in the build (or later) stages yet. I think the immediate goal is getting a basic interpreter going that we have high confidence is working correctly.</p>",
        "id": 525419583,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1750720484
    },
    {
        "content": "<p>I've been noodling around with adding a secondary output file for snapshot tests - an html file with a more interactive version of the snapshot, with things like hovering over tokens or ranges in the snapshot output causing the corresponding source range in the input to be highlighted (and visa-versa). My thinking is that we'd always generate these .html files next to the existing snapshots but have them git-ignored to avoid bloating the repo. We can also start to integrate some of the debugging/visualization tools for various compiler passes into this html output. Thoughts?</p>",
        "id": 525441537,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1750740763
    },
    {
        "content": "<p>Love it</p>",
        "id": 525442282,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1750741401
    },
    {
        "content": "<p>One of the s-expression changes I've been thinking about, is should we be displaying the node_idx on each node? We have some nodes that reference other nodes (for example a pattern for a declaration). I could imagine hovering over a reference like that, and it highlights the s-expression node being referenced.</p>",
        "id": 525442498,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1750741610
    },
    {
        "content": "<p>Oooh, yeah!</p>",
        "id": 525442523,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1750741633
    },
    {
        "content": "<p>For this reason I've ben thinking of making all node_idx's use a common formatting like <code>#12</code> (I think this is similar to what we had in the rust debug IR formats)</p>",
        "id": 525442586,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1750741699
    },
    {
        "content": "<p>Initial version of that, only adding this new fanciness for the TOKENS section: <a href=\"https://github.com/roc-lang/roc/pull/7864\">https://github.com/roc-lang/roc/pull/7864</a></p>",
        "id": 525443687,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1750742651
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/2ie13F0Xpa3v-vNCY6M-6ArV/demo-html-snapshots.gif\">demo-html-snapshots.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/2ie13F0Xpa3v-vNCY6M-6ArV/demo-html-snapshots.gif\" title=\"demo-html-snapshots.gif\"><img data-animated=\"true\" data-original-content-type=\"image/gif\" data-original-dimensions=\"1254x700\" src=\"/user_uploads/thumbnail/22008/2ie13F0Xpa3v-vNCY6M-6ArV/demo-html-snapshots.gif/840x560-anim.webp\"></a></div>",
        "id": 525444079,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1750743018
    },
    {
        "content": "<p>We have flags on the snapshot tool like <code>--verbose</code> ... we could include others like <code>--html</code> or <code>--watch</code>.</p>\n<p>Maybe that loads a single web app that then has all the snapshots</p>",
        "id": 525444435,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1750743360
    },
    {
        "content": "<p>The renderToHtml for Reports renders using the standardised css classes we want</p>",
        "id": 525444476,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1750743396
    },
    {
        "content": "<p>The s-expressions could have a <code>renderToHtml</code> helper too instead of the plain text version</p>",
        "id": 525444503,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1750743429
    },
    {
        "content": "<p>Anyway, there's a lot of different directions we could go with this. Great fun.</p>",
        "id": 525444536,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1750743469
    },
    {
        "content": "<p>I'm going to work on binop tokens -&gt; CIR mapping if it's ok</p>",
        "id": 525489363,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1750761946
    },
    {
        "content": "<p>sounds good! We decided to have binops represented directly in CIR rather than desugaring them to function calls</p>",
        "id": 525557452,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1750783283
    },
    {
        "content": "<p>the idea is that it will simplify having error messages trace back to what was originally in the source code</p>",
        "id": 525557576,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1750783322
    },
    {
        "content": "<p>nice! that's exactly what I was about to ask</p>",
        "id": 525557643,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1750783348
    },
    {
        "content": "<p>(as opposed to converting them to a Call node which then has to record \"was I called via a binop, and if so which one?\" which has the same information but with more redundancy and memory usage)</p>",
        "id": 525557710,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1750783373
    },
    {
        "content": "<p>what's the key difference between ast and cir then?</p>",
        "id": 525557905,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1750783448
    },
    {
        "content": "<p>one critical difference is that lookups have all been resolved to other CIR indices instead of using strings</p>\n<p>another important one is that we've organized everything so that type variables map 1-to-1 with CIR indices, whereas they certainly do not map 1-to-1 with AST nodes <span aria-label=\"smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 525558273,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1750783567
    },
    {
        "content": "<p>oh yeah we also have translated <code>=</code> into either declare or reassign, depending on whether there was a previous declaration under the same name made with <code>var</code></p>",
        "id": 525558575,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1750783690
    },
    {
        "content": "<p>Is this valid in 0.1 syntax?</p>\n<div class=\"codehilite\"><pre><span></span><code>checkNumber = |num| {\n    if num &lt; 0 then\n        &quot;negative&quot;\n    else if num == 0 then\n        &quot;zero&quot;\n    else if num &gt; 100 then\n        &quot;large&quot;\n    else\n        &quot;positive&quot;\n}\n</code></pre></div>",
        "id": 525679024,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1750846368
    },
    {
        "content": "<p>Figured it out ...</p>\n<div class=\"codehilite\"><pre><span></span><code>module [checkNumber]\n\ncheckNumber = |num| {\n    if num &lt; 0 {\n        &quot;negative&quot;\n    } else if num == 0 {\n        &quot;zero&quot;\n    } else if num &gt; 100 {\n        &quot;large&quot;\n    } else {\n        &quot;positive&quot;\n    }\n}\n</code></pre></div>",
        "id": 525680338,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1750846860
    },
    {
        "content": "<p>i think we need to reevaluate this syntax a bit</p>",
        "id": 525702704,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750854866
    },
    {
        "content": "<p>not when using blocks, but when using expressions after any condition</p>",
        "id": 525702774,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750854898
    },
    {
        "content": "<p>I think it should be fine to omit the brackets there</p>",
        "id": 525713748,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1750858281
    },
    {
        "content": "<p>like this should work</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">num</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">        </span><span class=\"s\">\"negative\"</span>\n<span class=\"w\">    </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">num</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">        </span><span class=\"s\">\"zero\"</span>\n<span class=\"w\">    </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">num</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">100</span>\n<span class=\"w\">        </span><span class=\"s\">\"large\"</span>\n<span class=\"w\">    </span><span class=\"k\">else</span>\n<span class=\"w\">        </span><span class=\"s\">\"positive\"</span>\n</code></pre></div>",
        "id": 525713848,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1750858310
    },
    {
        "content": "<p>there's a separate question of whether the formatter should insert brackets</p>",
        "id": 525713951,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1750858338
    },
    {
        "content": "<p>but I think it simplifies the rules of the language to not require brackets there</p>",
        "id": 525714006,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1750858352
    },
    {
        "content": "<p>and I think it would actually be nice to be able to do like</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">things</span><span class=\"p\">.</span><span class=\"n\">is_empty</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 525714160,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1750858395
    },
    {
        "content": "<p>Yeah, I'd like to avoid brackets when possible</p>",
        "id": 525715184,
        "sender_full_name": "Anton",
        "timestamp": 1750858704
    },
    {
        "content": "<p>I think in a lot of cases the squirly-less syntax is unreadable, especially without newline / indent</p>",
        "id": 525715187,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750858705
    },
    {
        "content": "<p>Onelining is not a must for me, they do easily become hard to read</p>",
        "id": 525715545,
        "sender_full_name": "Anton",
        "timestamp": 1750858806
    },
    {
        "content": "<p>I find myself wanting to put parens around the condition if I don't use squirlies</p>",
        "id": 525715573,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750858816
    },
    {
        "content": "<p>And it's on oneline</p>",
        "id": 525715653,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750858838
    },
    {
        "content": "<p>same here, except if there's already a closing paren from a function call</p>",
        "id": 525716156,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1750859013
    },
    {
        "content": "<p>e.g.</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">things</span><span class=\"p\">.</span><span class=\"n\">is_empty</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>vs.</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">condition</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>vs.</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">condition</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 525716207,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1750859032
    },
    {
        "content": "<p>first 2 look fine to me, and I don't think this is necessary:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">things</span><span class=\"p\">.</span><span class=\"n\">is_empty</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 525716282,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1750859056
    },
    {
        "content": "<p>as an aside, something I've wondered about is whether we  should use curly braces like we use trailing commas - as an indicator of whether the formatter should use newlines</p>",
        "id": 525716420,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1750859099
    },
    {
        "content": "<p>e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">fn</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">arg</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">fn</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">arg</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 525716505,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1750859119
    },
    {
        "content": "<p>if there are curlies we always do multiline</p>",
        "id": 525716539,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1750859128
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">things</span><span class=\"o\">.</span><span class=\"n\">is_empty</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">things</span><span class=\"o\">.</span><span class=\"n\">is_empty</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"mi\">0</span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 525716618,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1750859154
    },
    {
        "content": "<p>Seems reasonable</p>",
        "id": 525716836,
        "sender_full_name": "Anton",
        "timestamp": 1750859206
    },
    {
        "content": "<p>I think blocks do always use multiline</p>",
        "id": 525716845,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750859208
    },
    {
        "content": "<p>in the formatter in the zig compiler</p>",
        "id": 525716877,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750859219
    },
    {
        "content": "<p>cool, TIL!</p>",
        "id": 525716904,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1750859227
    },
    {
        "content": "<p>I _think_, it's been a month or more since I worked on it</p>",
        "id": 525716999,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750859253
    },
    {
        "content": "<p>let me check that out</p>",
        "id": 525717088,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750859273
    },
    {
        "content": "<p>Oh, if the block is retained it's multiline, but it's usually elided in the formatter if not necessary</p>",
        "id": 525717384,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750859340
    },
    {
        "content": "<p>I think that would be easy to change.  If I see a useless block that is single-line, keep it (it will naturally be multiline)</p>",
        "id": 525717598,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750859399
    },
    {
        "content": "<p>yeah I like that idea!</p>",
        "id": 525722000,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1750860549
    },
    {
        "content": "<p>it would be really cool if we could get to a point where the author has control over single-line vs multiline, without needing the formatter to be aware of newlines</p>",
        "id": 525722183,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1750860599
    },
    {
        "content": "<p>using a combination of blocks vs no blocks and trailing comma vs no trailing comma, etc.</p>",
        "id": 525722242,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1750860614
    },
    {
        "content": "<p>I think we are already partly there</p>",
        "id": 525723712,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750861061
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span>  what's remaining?</p>",
        "id": 525726077,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1750861720
    },
    {
        "content": "<p>assuming we adopted those rules for trailing commas and blocks</p>",
        "id": 525726164,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1750861748
    },
    {
        "content": "<p>just removing all checking for newlines</p>",
        "id": 525730959,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750863104
    },
    {
        "content": "<p>I'm having a crack at Can for Records now.</p>",
        "id": 525799358,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1750890916
    },
    {
        "content": "<p>I'm working on de-structuring record patterns now. I've merged main in and just adding to my Records PR. Also addressing the review feedback. Thank you <span class=\"user-mention\" data-user-id=\"341568\">@Jared Ramirez</span>  and <span class=\"user-mention\" data-user-id=\"781658\">@Anthony Bullard</span></p>",
        "id": 525996195,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1750983758
    },
    {
        "content": "<p>What do you think about format <code>@1.5-2.3</code> for regions in sexprs?</p>\n<div class=\"codehilite\" data-code-language=\"Clojure\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nf\">e-tuple</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"mf\">1.1-17.2</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"nf\">e-binop</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"mf\">2.5-2.11</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">op</span><span class=\"w\"> </span><span class=\"s\">\"+\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"nf\">e-int</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"mf\">2.5-2.6</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">raw</span><span class=\"w\"> </span><span class=\"s\">\"4\"</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"nf\">e-int</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"mf\">2.9-2.10</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">raw</span><span class=\"w\"> </span><span class=\"s\">\"2\"</span><span class=\"p\">)))</span>\n</code></pre></div>\n<p>Right now:</p>\n<div class=\"codehilite\" data-code-language=\"Clojure\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nf\">e-tuple</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"mi\">1-1-17-2</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"nf\">e-binop</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"mi\">2-5-2-11</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">op</span><span class=\"w\"> </span><span class=\"s\">\"+\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"nf\">e-int</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"mi\">2-5-2-6</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">raw</span><span class=\"w\"> </span><span class=\"s\">\"4\"</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"nf\">e-int</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"mi\">2-9-2-10</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">raw</span><span class=\"w\"> </span><span class=\"s\">\"2\"</span><span class=\"p\">)))</span>\n</code></pre></div>",
        "id": 526048949,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1751017851
    },
    {
        "content": "<p>Does anyone have something I can help with? Open for coding any area that is zig! Last time I made the txt -&gt; markdown conversion for our snapshots. I'm down to do something one step harder, or similar. Will be back later to read zulip.</p>",
        "id": 526105686,
        "sender_full_name": "Norbert Hajagos",
        "timestamp": 1751037204
    },
    {
        "content": "<p>Random side-note: git does terrrrrrribly with rebasing (or merging, I think) changes when one of the sides does a case-only rename (e.g. sexpr.zig-&gt;SExpr.zig), and you're operating on a case insensitive filesystem (e.g. mac).</p>",
        "id": 526176862,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1751085817
    },
    {
        "content": "<p>Like... it seems to not be able to do it on its own</p>",
        "id": 526176882,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1751085852
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error: Your local changes to the following files would be overwritten by merge:\n    src/base/SExpr.zig\nPlease commit your changes or stash them before you merge.\nAborting\nhint: Could not execute the todo command\nhint:\nhint:     squash bb9df942054bfb94f2a3d154e6a549ea510edfec Switch to two-column layout in snapshot html and jazz up parse output\nhint:\nhint: It has been rescheduled; To edit the command before continuing, please\nhint: edit the todo list first:\nhint:\nhint:     git rebase --edit-todo\nhint:     git rebase --continue\n</code></pre></div>\n<p>(note: I made no 'local changes' here - this was git rebase stepping on its own toes)</p>",
        "id": 526176897,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1751085881
    },
    {
        "content": "<p>Sigh. Going to have to stitch this back together manually...</p>",
        "id": 526177019,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1751086082
    },
    {
        "content": "<p>... which wasn't as bad as it could have been</p>",
        "id": 526177166,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1751086319
    },
    {
        "content": "<p>But, my goodness, I wouldn't have expected git to be this terrible</p>",
        "id": 526177173,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1751086331
    },
    {
        "content": "<p>(thanks for listening)</p>",
        "id": 526177182,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1751086348
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/pull/7889\">https://github.com/roc-lang/roc/pull/7889</a></p>",
        "id": 526177191,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1751086365
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/os9Y9iUgRrdxLgVTF9h5hwvq/Screen-Recording-2025-06-27-at-21.53.50.gif\">Screen Recording 2025-06-27 at 21.53.50.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/os9Y9iUgRrdxLgVTF9h5hwvq/Screen-Recording-2025-06-27-at-21.53.50.gif\" title=\"Screen Recording 2025-06-27 at 21.53.50.gif\"><img data-animated=\"true\" data-original-content-type=\"image/gif\" data-original-dimensions=\"640x352\" src=\"/user_uploads/thumbnail/22008/os9Y9iUgRrdxLgVTF9h5hwvq/Screen-Recording-2025-06-27-at-21.53.50.gif/840x560-anim.webp\"></a></div>",
        "id": 526177389,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1751086696
    },
    {
        "content": "<p>Now doing highlighting of tokens when mousing over the parse tree</p>",
        "id": 526177404,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1751086729
    },
    {
        "content": "<p>Already caught a few cases that look kinda fishy in terms of the token range we choose for various ast nodes</p>",
        "id": 526177425,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1751086761
    },
    {
        "content": "<p>Also added click-to-scroll to the token view</p>",
        "id": 526177437,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1751086791
    },
    {
        "content": "<p>And made things two column so that the click-to-scroll actually makes sense</p>",
        "id": 526177465,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1751086809
    },
    {
        "content": "<p>Side note: <span class=\"user-mention\" data-user-id=\"584248\">@Kiryl Dziamura</span> I think I'm starting to agree with your suggestion to not have the js and css embedded as zig strings; I'll fix that soon.</p>",
        "id": 526177515,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1751086854
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453336\">Joshua Warner</span> <a href=\"#narrow/channel/395097-compiler-development/topic/casual.20conversation/near/526177425\">said</a>:</p>\n<blockquote>\n<p>Already caught a few cases that look kinda fishy in terms of the token range we choose for various ast nodes</p>\n</blockquote>\n<p>Yeah, I've picked up on that in a few places when going through a snapshot and manually verifying the regions... but haven't circled back to investigate yet.</p>",
        "id": 526178279,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751087925
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"577599\">Norbert Hajagos</span> <a href=\"#narrow/stream/395097-compiler-development/topic/casual.20conversation/near/526105686\">said</a>:</p>\n<blockquote>\n<p>Does anyone have something I can help with? Open for coding any area that is zig! Last time I made the txt -&gt; markdown conversion for our snapshots. I'm down to do something one step harder, or similar. Will be back later to read zulip.</p>\n</blockquote>\n<p>If no one else has an answer, can also fix fuzzer bugs, but I bet someone has solid work that could use a hand</p>",
        "id": 526183320,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751093006
    },
    {
        "content": "<p>Okay, I'll go with fixing fuzz errors. Will start with <br>\nzig build repro-tokenize -- -b XzD/ -v<br>\nwhich is this input:<br>\n_0ï¿½</p>",
        "id": 526187022,
        "sender_full_name": "Norbert Hajagos",
        "timestamp": 1751097302
    },
    {
        "content": "<p>I'm thinking we rename <code>When</code> to <code>Match</code> in Can to avoid confusion in future... if we agree I'll save it for a later PR that just does that one change.</p>",
        "id": 526301021,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751239568
    },
    {
        "content": "<p>10 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"395097\" href=\"/#narrow/channel/395097-compiler-development/topic/single.20quote.20parsing/with/526492138\">#compiler development &gt; single quote parsing</a> by <span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span>.</p>",
        "id": 526493347,
        "sender_full_name": "Notification Bot",
        "timestamp": 1751321261
    },
    {
        "content": "<p>Looking into fancy-ing up the html snapshot generation for canonicalization now, and one of the slight snags I've run into is that can regions are defined in terms of byte offsets rather than token indices - was that an intentional choice? Thoughts on just using token indices?</p>",
        "id": 526519463,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1751341718
    },
    {
        "content": "<p>Tokens are a bit easier to work out highlighting for in the markup (versus arbitrary byte ranges)</p>",
        "id": 526519528,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1751341777
    },
    {
        "content": "<p>I don't think it matters much for the internal representation. We can still convert that back to line/col pairs right?</p>",
        "id": 526519540,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751341789
    },
    {
        "content": "<p>Yep</p>",
        "id": 526519560,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1751341805
    },
    {
        "content": "<p>Is it still easy to slice the original source to get what we need?</p>",
        "id": 526519570,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751341809
    },
    {
        "content": "<p>You need to keep around the list of token offsets (or be okay with recomputing it if needed)</p>",
        "id": 526519634,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1751341861
    },
    {
        "content": "<p>That is a slight disadvantage</p>",
        "id": 526519659,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1751341877
    },
    {
        "content": "<p>We're keeping around a list of line_start offsets already</p>",
        "id": 526519694,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751341924
    },
    {
        "content": "<p>I think Richard has ideas to pull Region information out of the IR's entirely</p>",
        "id": 526519801,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751342001
    },
    {
        "content": "<p>I was talking with him the other day about a hypothesis that the AST and CIR nodes can map 1-1 and therefore we could have region information in a side array and just use the AST/CIR node index to get the region information back out.</p>",
        "id": 526519852,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751342059
    },
    {
        "content": "<p>That feels like a relevant design consideration. </p>\n<p>Also we need the line/col information for s-expressions and reporting only -- so it would be ok to calculate those as needed. I'm assuming we wouldn't need to re-read the file, but using information like line_starts etc. </p>\n<p>Removing region from IR's would have the advantage of not polluting our IR and keeping the nodes much smaller, hopefully reducing cache misses etc.</p>",
        "id": 526520270,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751342409
    },
    {
        "content": "<p>FWIW I'd actually like to get line/col out of sexpr's</p>",
        "id": 526521180,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1751342964
    },
    {
        "content": "<p>Maybe I should just bite the bullet (byte the bullet?) and implement arbitrary byte range selection in the source view</p>",
        "id": 526521240,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1751343019
    },
    {
        "content": "<p>Not super clear how tho <img alt=\":think-smart:\" class=\"emoji\" src=\"https://avatars.zulip.com/22008/emoji/images/c22f7861.png\" title=\"think-smart\"></p>",
        "id": 526521254,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1751343032
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453336\">Joshua Warner</span> <a href=\"#narrow/channel/395097-compiler-development/topic/casual.20conversation/near/526521180\">said</a>:</p>\n<blockquote>\n<p>FWIW I'd actually like to get line/col out of sexpr's</p>\n</blockquote>\n<p>Why? I find it really easy to manually validate using the line/col information my editor shows.</p>",
        "id": 526521308,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751343071
    },
    {
        "content": "<p>Gotta start using the fancy html version <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 526521418,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1751343175
    },
    {
        "content": "<p>Anyway, snark aside, I want to have the conversion to line:col to happen in once place (probably at the point we're rendering the sexpr), rather than at 100 different callsites in the ast/can/etc.</p>",
        "id": 526521466,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1751343228
    },
    {
        "content": "<p>I think it is already like that -- only calculated when generating the s-expressions</p>",
        "id": 526521485,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751343247
    },
    {
        "content": "<p>So the in-memory sexpr will always be either token indices or byte offsets</p>",
        "id": 526521503,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1751343259
    },
    {
        "content": "<p>It's calculated when _generating_ the sexpr. I want to move it to being calculated when _rendering_ the sexpr</p>",
        "id": 526521543,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1751343291
    },
    {
        "content": "<p>The image file of the new compiler dependency graph is now to large to be hosted on github :(</p>",
        "id": 526623157,
        "sender_full_name": "Anton",
        "timestamp": 1751380544
    },
    {
        "content": "<p>I'll see if webp fits</p>",
        "id": 526624181,
        "sender_full_name": "Anton",
        "timestamp": 1751380806
    },
    {
        "content": "<p>I know mermaid charts work well on gh, maybe it will fit well</p>",
        "id": 526624403,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1751380876
    },
    {
        "content": "<p><a href=\"https://github.com/mermaid-js/mermaid\">https://github.com/mermaid-js/mermaid</a><br>\nscroll the readme down to see an example of md embedded diagrams</p>",
        "id": 526624633,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1751380947
    },
    {
        "content": "<p>webp worked :)</p>",
        "id": 526626038,
        "sender_full_name": "Anton",
        "timestamp": 1751381345
    },
    {
        "content": "<p>where I can see the graph btw?</p>",
        "id": 526628075,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1751381865
    },
    {
        "content": "<p><a href=\"https://github.com/Anton-4/roc-compiler-vis\">https://github.com/Anton-4/roc-compiler-vis</a></p>",
        "id": 526634251,
        "sender_full_name": "Anton",
        "timestamp": 1751383611
    },
    {
        "content": "<p>Is this valid syntax -- can we use <code>as</code> in any pattern? </p>\n<div class=\"codehilite\"><pre><span></span><code>match shape {\n    Rectangle({ width, height }) as rect =&gt; ..\n}\n</code></pre></div>",
        "id": 526896352,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751500921
    },
    {
        "content": "<p>We have <code>f64_literal</code> in CIR.Pattern... what is this used for, we aren't matching on an exact float literal are we? we don't have <code>eq</code> for floats.</p>",
        "id": 526897196,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751501593
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/channel/395097-compiler-development/topic/casual.20conversation/near/526896352\">said</a>:</p>\n<blockquote>\n<p>Is this valid syntax -- can we use <code>as</code> in any pattern? </p>\n<p><div class=\"codehilite\"><pre><span></span><code>match shape {\n    Rectangle({ width, height }) as rect =&gt; ..\n}\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>ideally yes</p>",
        "id": 526897477,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751501884
    },
    {
        "content": "<p>Are we keeping the default/optional value thing? <code>{ name, age ? 0 } =&gt; ...</code> -- I understand this is being removed as it was confusing</p>",
        "id": 526897525,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751501928
    },
    {
        "content": "<p>nope that's gone</p>",
        "id": 526897899,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751502248
    },
    {
        "content": "<p>static dispatch is replacing it</p>",
        "id": 526897910,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751502259
    },
    {
        "content": "<p>I noticed <code>build.zig.zon</code> requires <code>zig 0.14</code>, but nix installs <code>0.13</code>. <code>0.14</code> seems to be required only for the fuzzer</p>\n<p>looks like <code>nixpkgs.url</code> is outdated</p>",
        "id": 527015391,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1751554012
    },
    {
        "content": "<p>Nix setup is still for the rust compiler</p>",
        "id": 527066677,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751573535
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> -- could we look at making the default nix for our zig compiler, and use a flag or something to get the devshell for the rust compiler?</p>",
        "id": 527082908,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751582637
    },
    {
        "content": "<p>Do we need nix? Isn't our only explicit dependency of that sort zig?</p>",
        "id": 527085393,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751584559
    },
    {
        "content": "<p>fwiw i do not use the devshell and just do <code>nix shell 'github:mitchellh/zig-overlay#\"0.14.0\"'</code></p>",
        "id": 527091722,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1751590600
    },
    {
        "content": "<p>That might be nice to add to our <code>BUILDING_FROM_SOURCE.md</code> or <code>CONTRIBUTING.md</code> docs.</p>",
        "id": 527091854,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751590727
    },
    {
        "content": "<p>Also, I have no real issue with a nix shell, just for now:</p>\n<ol>\n<li>I want to make sure rust still works and is easy to use</li>\n<li>I like the friction we have for dependencies. Nix lowers that friction some. If possible, I want us to remain zig only for core compiler flows.</li>\n</ol>",
        "id": 527093332,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751592054
    },
    {
        "content": "<p>Aside, now that we have check working would be good to instrument it all with Tracy and look at some more detailed traces. See how perf looks and such.</p>",
        "id": 527093431,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751592141
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/395097-compiler-development/topic/casual.20conversation/near/527093431\">said</a>:</p>\n<blockquote>\n<p>Aside, now that we have check working would be good to instrument it all with Tracy and look at some more detailed traces. See how perf looks and such.</p>\n</blockquote>\n<p>Would love to see that</p>",
        "id": 527093972,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751592590
    },
    {
        "content": "<p>General question, what should the limit be for numbers of errors printed by something like roc check?</p>",
        "id": 527117811,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751612012
    },
    {
        "content": "<p>It's not something we've talked about... Maybe in the hundreds? Is it different in the TTY or LSP use case?</p>",
        "id": 527119278,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751612675
    },
    {
        "content": "<p>My million line of code file, which is just repeated code (and thus has tons of repeated declaration errors), essentially just prints forever.</p>",
        "id": 527120341,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751613245
    },
    {
        "content": "<p>That's less than ideal.</p>",
        "id": 527120383,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751613279
    },
    {
        "content": "<p>Made me realize that maybe it isn't the right UX. Also, due to the extract lines perf issue, hangs for a while before it finally starts printing.</p>",
        "id": 527120398,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751613285
    },
    {
        "content": "<p>Is aggregation an option? How many distinct diagnostic messages we would have? It might be a message and a list of <code>file:line:column</code> grouped by the same kind of error</p>",
        "id": 527126647,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1751615935
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/395097-compiler-development/topic/casual.20conversation/near/527093332\">said</a>:</p>\n<blockquote>\n<p>Also, I have no real issue with a nix shell, just for now:</p>\n<ol>\n<li>I want to make sure rust still works and is easy to use</li>\n<li>I like the friction we have for dependencies. Nix lowers that friction some. If possible, I want us to remain zig only for core compiler flows.</li>\n</ol>\n</blockquote>\n<p>For the future it's great to be able to jump between commits and immediately get the correct zig version, so a nix flake would be nice. To keep friction for adding dependencies, we can set it up with <a href=\"https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners\">github code owners</a> so that changes to flake.nix require approval from a specific person. What do you think <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span>?</p>",
        "id": 527151311,
        "sender_full_name": "Anton",
        "timestamp": 1751624553
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"584248\">Kiryl Dziamura</span> <a href=\"#narrow/channel/395097-compiler-development/topic/casual.20conversation/near/527126647\">said</a>:</p>\n<blockquote>\n<p>Is aggregation an option? How many distinct diagnostic messages we would have? It might be a message and a list of <code>file:line:column</code> grouped by the same kind of error</p>\n</blockquote>\n<p>Quite possibly. Though in this case, it generated 3.6 million lines of output. Even aggregated I think we want to cut that off.</p>",
        "id": 527197167,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751641577
    },
    {
        "content": "<p><code>...and 3.6M more errors. Use --flag to output to a file</code> ?</p>",
        "id": 527197311,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1751641633
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/channel/395097-compiler-development/topic/casual.20conversation/near/527151311\">said</a>:</p>\n<blockquote>\n<p>For the future it's great to be able to jump between commits and immediately get the correct zig version, so a nix flake would be nice. To keep friction for adding dependencies, we can set it up with <a href=\"https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners\">github code owners</a> so that changes to flake.nix require approval from a specific person. What do you think <span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span>?</p>\n</blockquote>\n<p>That's fair for auto updating the zig version. And I think as long as we have the right culture it shouldn't matter too much, but I think it could be reasonable to set code owners for build.zig and flake.nix</p>",
        "id": 527197322,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751641636
    },
    {
        "content": "<p>For my million line of code file. We spend:<br>\n0.4s -&gt; tokenize + parse<br>\n9.8s -&gt; canonicalize<br>\n56s -&gt; generating diagnostic from can (this is after my fix that made this part way way faster)<br>\n0.6s -&gt; checkDefs<br>\n1.5s -&gt; generating diagnostics from check defs.</p>\n<hr>\n<p>haha.... generating diagnostics is definitely really slow right now. Though I guess that isn't much of problem if we limit the number of diagnostics.</p>",
        "id": 527208220,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751646472
    },
    {
        "content": "<p>We generate ~395,000 diagnostics</p>",
        "id": 527208438,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751646548
    },
    {
        "content": "<p>I'm sure we can make diagnostics faster haha</p>",
        "id": 527212228,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751647815
    },
    {
        "content": "<p>and canonicalize too</p>",
        "id": 527212272,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751647830
    },
    {
        "content": "<p>obviously canonicalization should not be taking 20x as long as type checking, since it has astronomically less work to do <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 527212389,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751647870
    },
    {
        "content": "<p>but this is really cool to know! any chance we could automate this so we can see the number change over time as we make changes? <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 527212578,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751647923
    },
    {
        "content": "<p>I can quickly set up something basic with the raspberry pi 4 CI server, to minimize power consumption long term. Can you share the file somewhere <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span>?</p>",
        "id": 527214302,
        "sender_full_name": "Anton",
        "timestamp": 1751648801
    },
    {
        "content": "<p>Yeah, I can later. At a 4th of July parade now</p>",
        "id": 527215431,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751649404
    },
    {
        "content": "<p>Also, we may want to switch it out for something more representive I don't think many users will run files that generated nearly 400k diagnostics</p>",
        "id": 527215625,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751649508
    },
    {
        "content": "<p>Agreed :)</p>",
        "id": 527217964,
        "sender_full_name": "Anton",
        "timestamp": 1751651113
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/395097-compiler-development/topic/casual.20conversation/near/527215431\">said</a>:</p>\n<blockquote>\n<p>Yeah, I can later. At a 4th of July parade now</p>\n</blockquote>\n<p>Enjoy <span aria-label=\"fireworks\" class=\"emoji emoji-1f386\" role=\"img\" title=\"fireworks\">:fireworks:</span></p>",
        "id": 527217987,
        "sender_full_name": "Anton",
        "timestamp": 1751651132
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/395097-compiler-development/topic/casual.20conversation/near/527215625\">said</a>:</p>\n<blockquote>\n<p>Also, we may want to switch it out for something more representive I don't think many users will run files that generated nearly 400k diagnostics</p>\n</blockquote>\n<p>still, it's a fun one to have in the mix for exactly that reason! if everything is broken, we don't want the compiler to lock up your machine <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 527222141,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751654016
    },
    {
        "content": "<p>For sure. For example, streaming diagnostics here would at least show the user that something is happening instead of simply having a crazy long delay.</p>",
        "id": 527222294,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751654161
    },
    {
        "content": "<p>Oh, and we use way to much memory collecting all the diagnostics. <del>I think this uses about a gig making diagnostics asts (which are old school allocating per node asts)</del> More like 400MB for diagnostics.</p>",
        "id": 527223309,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751655050
    },
    {
        "content": "<p>So I have two giant files that I have used. One based on a now quite old copy of our syntax grab bag and one based on List.roc. <br>\n<a href=\"/user_uploads/22008/tch9zMAveDr75R7o27n4FJZF/New-List.roc\">New-List.roc</a><br>\n<a href=\"/user_uploads/22008/eH30v653_wOeel4DMS8hKXdu/new.roc\">new.roc</a></p>",
        "id": 527223714,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751655427
    },
    {
        "content": "<p>My numbers above were from <code>new.roc</code> which is from they syntax grab bag</p>",
        "id": 527223732,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751655442
    },
    {
        "content": "<p>Also, I guess we should add some form of the <code>--time</code> flag that counts time in each stage of the compiler and reports on it.</p>",
        "id": 527223768,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751655474
    },
    {
        "content": "<p>For the list file (which if I recall is 1 million lines of code, but 1.6 million lines including comments), the breakdown is:<br>\n0.9s -&gt; tokenize + parse<br>\n75s -&gt; canonicalize<br>\n60s -&gt; generating diagnostic from can (this is after my fix that made this part way way faster)<br>\n2.7s -&gt; checkDefs<br>\n0.01s -&gt; generating diagnostics from check defs.</p>\n<p>900MB used to parse<br>\n400MB added by can<br>\n250MB added by diagnostics</p>",
        "id": 527224255,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751655888
    },
    {
        "content": "<p>Of note, input source is 53MB. So roughly a 25:1 ratio from memory usage after can to original source memory size.</p>",
        "id": 527224557,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751656105
    },
    {
        "content": "<p>added by can includes types I guess?</p>",
        "id": 527225329,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751656742
    },
    {
        "content": "<p>I assume it is everything in CIR?</p>",
        "id": 527225658,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751657030
    },
    {
        "content": "<p>Oh boy...we added in <code>usingnamespace</code> at some point</p>",
        "id": 527228657,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751660246
    },
    {
        "content": "<p>That breaks incremental compilation</p>",
        "id": 527228671,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751660259
    },
    {
        "content": "<p>Breaking changes in zig writers<br>\n<a href=\"https://github.com/ziglang/zig/pull/24329\">https://github.com/ziglang/zig/pull/24329</a></p>",
        "id": 527228745,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1751660344
    },
    {
        "content": "<p>0.15.0 will be fun to migrate to</p>",
        "id": 527228793,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751660406
    },
    {
        "content": "<p>Hmm....zls doesn't seem to work for me on macos anymore. I don't know what went wrong, but it always hits:</p>\n<div class=\"codehilite\"><pre><span></span><code>/Users/bren077s/vendor/zig-0.14.0/lib/std/posix.zig:4533:22: 0x102497013 in kevent (build)\n            .BADF =&gt; unreachable, // Always a race condition.\n</code></pre></div>\n<p>This theoretically comes from the <code>--watch</code> flag, but I am not setting the <code>--watch</code> flag in zls.</p>",
        "id": 527233471,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751665063
    },
    {
        "content": "<p>Does zls work for others on macos?</p>",
        "id": 527233494,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751665088
    },
    {
        "content": "<p>It's  working for me, but I built from source a long time ago and haven't updated it since. I'm not sure if the 0.14.0 branch in zls repo gets updates</p>",
        "id": 527235130,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751667007
    },
    {
        "content": "<p>Yeah, I haven't built it from source in a long time and I thought it was working last time I was working on roc, but I guess not anymore.</p>",
        "id": 527235194,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751667089
    },
    {
        "content": "<p>What is your zls config?</p>",
        "id": 527235203,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751667098
    },
    {
        "content": "<p>Also, I guess to clarify. I think the main issue is with diagnostics. I'm not getting build errors in roc currently.</p>",
        "id": 527236211,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751668359
    },
    {
        "content": "<p>I can still go to defintion and what not.</p>",
        "id": 527236224,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751668372
    },
    {
        "content": "<p>I just noticed this and thought I'd double check </p>\n<div class=\"codehilite\"><pre><span></span><code>**UNEXPECTED TOKEN IN EXPRESSION**\nThe token **crash &quot;** is not expected in an expression.\n</code></pre></div>\n<p><code>crash</code> is supported as both a statement and as an expression right?</p>",
        "id": 527264114,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751704000
    },
    {
        "content": "<p>ideally should be! <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 527275143,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751717010
    },
    {
        "content": "<p>What do y'all think about the fact that <code>CIR</code> owns <code>ModuleEnv</code>? Having used it for a while it feels a little off, and I've been thinking like having <code>ModuleEnv</code> be a sibling of the IRs might make sense. Then, each stage could just have a pointer to it, plus the a pointer to last stage's IR and this stage's.  </p>\n<p>So <code>canonicalize</code> would become:</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"n\">module_env</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">ModuleEnv</span>\n<span class=\"n\">can_ir</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">CIR</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// already there</span>\n<span class=\"n\">parse_ir</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">AST</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// already there</span>\n</code></pre></div>\n<p>Then <code>check_types</code> would become:</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"n\">module_env</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">ModuleEnv</span>\n<span class=\"n\">can_ir</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">CIR</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// already there</span>\n</code></pre></div>",
        "id": 527375364,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1751838587
    },
    {
        "content": "<p>CIR doesn't own the memory anymore. I had to change that to a pointer to avoid some hairy lifetime issues.</p>",
        "id": 527375797,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751839182
    },
    {
        "content": "<p>I don't see any reason check_types can't hold a reference to the module env also</p>",
        "id": 527375904,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751839264
    },
    {
        "content": "<p>Oh cool! Didn't realize that. Yeah definitely!</p>",
        "id": 527375941,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1751839303
    },
    {
        "content": "<p>why do they need it at all?</p>",
        "id": 527377784,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751841590
    },
    {
        "content": "<p>couldn't we pass in exactly the parts they need, e.g. the IR from the previous stage and <code>gpa</code>?</p>",
        "id": 527377809,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751841613
    },
    {
        "content": "<p>Ident store, StringLiteral store for generating problem reports I think</p>",
        "id": 527377851,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751841669
    },
    {
        "content": "<p>interesting, I think we could pass in <code>const*</code> pointers to those two after tokenization</p>",
        "id": 527378137,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751842107
    },
    {
        "content": "<p>basically formalize which parts of our process should make changes to which parts of the module env</p>",
        "id": 527378158,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751842142
    },
    {
        "content": "<p>Is this correct or are we wanting to require parens for these?</p>\n<div class=\"codehilite\"><pre><span></span><code>dbg x\ncrash &quot;msg&quot;\nexpect 1 == 1\nreturn x\n</code></pre></div>",
        "id": 527596421,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751943970
    },
    {
        "content": "<p>I'm quite sure this is correct, that's how Anthony has it parsing by the look of things... so I'm going to proceed.</p>",
        "id": 527596485,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751944031
    },
    {
        "content": "<p>I have a (more) data-oriented-design version of sexpr that I've been working on. It's not a complete slam dunk, but currently ~30% faster than the existing sexpr: <a href=\"https://github.com/roc-lang/roc/pull/7965\">https://github.com/roc-lang/roc/pull/7965</a>.<br>\nUsage is a bit more verbose, but hopefully not too bad. There's still some significant headroom for optimization.<br>\nWould be curious on folks' thoughts.</p>",
        "id": 527598373,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1751945824
    },
    {
        "content": "<p>We require parens for return?</p>",
        "id": 527602030,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751948857
    },
    {
        "content": "<p>And dod sexpr sound like a nice idea now that we are scaling up snapshots so much</p>",
        "id": 527602053,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751948881
    },
    {
        "content": "<p>Originally it was avoided cause they aren't really play of the compiler and are reasonable to keep super simple</p>",
        "id": 527602080,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751948903
    },
    {
        "content": "<blockquote>\n<p>did sexpr sound like a nice idea</p>\n</blockquote>\n<p>I'm not sure what your asking here. </p>\n<p>I think the SExpr's have been invaluable for validating behaviour, particularly between the stages TOKEN -&gt; PARSE -&gt; CAN -&gt; TYPES etc</p>",
        "id": 527603901,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751950377
    },
    {
        "content": "<p>Is the question, should we have chosen another format/syntax rather than sexpr?</p>",
        "id": 527605328,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1751951502
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/395097-compiler-development/topic/casual.20conversation/near/527602030\">said</a>:</p>\n<blockquote>\n<p>We require parens for return?</p>\n</blockquote>\n<p>The alternative I had in mind was a more PNC version of these... </p>\n<div class=\"codehilite\"><pre><span></span><code>dbg(x)\ncrash(&quot;msg&quot;)\nexpect(1 == 1)\nreturn(x)\n</code></pre></div>",
        "id": 527605500,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751951659
    },
    {
        "content": "<p>Does this look like a valid use of the <code>return</code> keyword?</p>\n<div class=\"codehilite\"><pre><span></span><code>foo : U64 -&gt; Result(Str, [TooBig])\nfoo = |num| {\n    str = if (num &gt; 10) {\n        return Err(TooBig)\n    } else {\n        &quot;SMALL&quot;\n    }\n    Ok(str)\n}\n</code></pre></div>",
        "id": 527605807,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751951922
    },
    {
        "content": "<p>And for <code>dbg</code></p>\n<div class=\"codehilite\"><pre><span></span><code>foo = |num| {\n    # statement - prints out the value of num converted to a string\n    dbg num.to_str()\n\n    # expression - prints out the value of num and then returns it\n    dbg(num)\n}\n</code></pre></div>",
        "id": 527606197,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751952277
    },
    {
        "content": "<blockquote>\n<p>I'm not sure what your asking here.</p>\n</blockquote>\n<p>Update my comment. Was just saying that DOD sexprs sound like a reasonable idea.</p>",
        "id": 527606294,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751952355
    },
    {
        "content": "<blockquote>\n<p>Is this correct or are we wanting to require parens for these?</p>\n</blockquote>\n<p>I just realized I parsed this wrong... Read it as:</p>\n<blockquote>\n<p>Is this correct? are we wanting to require parens for these?</p>\n</blockquote>",
        "id": 527606394,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751952420
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/395097-compiler-development/topic/casual.20conversation/near/527223714\">said</a>:</p>\n<blockquote>\n<p>So I have two giant files that I have used. One based on a now quite old copy of our syntax grab bag and one based on List.roc. <br>\n<a href=\"/user_uploads/22008/tch9zMAveDr75R7o27n4FJZF/New-List.roc\">New-List.roc</a><br>\n<a href=\"/user_uploads/22008/eH30v653_wOeel4DMS8hKXdu/new.roc\">new.roc</a></p>\n</blockquote>\n<p>If I run <code>roc check New-List.roc</code> it kills my terminal after a while :p</p>",
        "id": 527663528,
        "sender_full_name": "Anton",
        "timestamp": 1751974065
    },
    {
        "content": "<p>The fuzzer can find some really interesting bugs <code>{ i, Complete]</code> ... who would think of that!</p>",
        "id": 527667124,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751975252
    },
    {
        "content": "<p>Ah, man... we really need to give the Parser NodeStore the same love we just did for the Can NodeStore and add a bunch of roundtrip unit tests. I've found a few hard to track down issues now stemming from us putting something in or getting something out that is different than we expect. </p>\n<p><span class=\"user-mention\" data-user-id=\"781658\">@Anthony Bullard</span> -- After your refactor I'm happy to make this change. It was a bit mechanical but I got a pretty quick process down to implement it.</p>",
        "id": 527670164,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751976123
    },
    {
        "content": "<p>In comments especially, I think we regularly use just \"variable\" when we're talking about a \"type variable\". Let's try to always use \"type variable\" to avoid confusion with a variable as in <code>var x = 0</code>.</p>",
        "id": 527705478,
        "sender_full_name": "Anton",
        "timestamp": 1751985075
    },
    {
        "content": "<p>After sleeping on it, I realised adding unit tests roundtripping the AST NodeStore might actually help <span class=\"user-mention\" data-user-id=\"781658\">@Anthony Bullard</span> with the refactor. That scope of work is internal representation right?</p>",
        "id": 527777185,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752011534
    },
    {
        "content": "<p><a class=\"message-link\" href=\"/#narrow/channel/231634-beginners/topic/Question.20from.20GH.20-.20Mutation.20in.20Roc/near/527844302\">#beginners &gt; Question from GH - Mutation in Roc @ ð¬</a> </p>\n<p>I just realized that if nominal type encapsulates a list and its size never changes (e.g. <code>Matrix</code> or <code>Vector</code> types), it can be allocated and managed as a static array behind the scenes.<br>\nAm I naive?</p>",
        "id": 527851500,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1752055210
    },
    {
        "content": "<p>I think it makes more sense to use tuples for that use case</p>",
        "id": 527866530,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752060409
    },
    {
        "content": "<p>we don't track list length in the type system, but we do track tuple length</p>",
        "id": 527866595,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752060432
    },
    {
        "content": "<p>also we can't offer a way to get list elements that doesn't return a Result, even if it's fixed-length and we know it can't fail</p>",
        "id": 527866951,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752060570
    },
    {
        "content": "<p>whereas with tuples we do track length in the type system, they're already stack-allocated, we can already get their elements without Result, and with static dispatch we can automatically add <code>.iter()</code> and <code>.len()</code> to any tuple whose elements are all type-compatible</p>",
        "id": 527867106,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752060626
    },
    {
        "content": "<p>Yes, but what about MxN matrices?</p>",
        "id": 527867366,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1752060717
    },
    {
        "content": "<p>You can have an MxN sized tuple</p>",
        "id": 527867426,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752060736
    },
    {
        "content": "<p>The tuple is just the backing storage.</p>",
        "id": 527867447,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752060746
    },
    {
        "content": "<p>You would make helpers to help with using it</p>",
        "id": 527867494,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752060761
    },
    {
        "content": "<p>No warnings about tuple size?</p>",
        "id": 527867507,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1752060765
    },
    {
        "content": "<p>Shouldn't be a problem. I can imagine tools might code-gen larger tuples for MxN sizes someday</p>",
        "id": 527867602,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752060798
    },
    {
        "content": "<p>Like, \"too many elements, you probably want struct\"</p>",
        "id": 527867617,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1752060803
    },
    {
        "content": "<p>nah I don't think we should have warnings about tuple size</p>",
        "id": 527873063,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752062613
    },
    {
        "content": "<p>I discovered last night that just switching the allocator in the snapshot generator can make the snapshot tests ~6x faster - from ~1400ms to 229ms.</p>\n<div class=\"codehilite\"><pre><span></span><code>joshw@Joshuas-MacBook-Air-3 ~/s/g/r/roc (main)&gt; zig build snapshot\ninfo: processed 412 snapshots in 229 ms.\njoshw@Joshuas-MacBook-Air-3 ~/s/g/r/roc (main)&gt; git diff\ndiff --git a/src/snapshot.zig b/src/snapshot.zig\nindex baa63fc905..6d0cf05212 100644\n--- a/src/snapshot.zig\n+++ b/src/snapshot.zig\n@@ -96,7 +96,7 @@ pub fn main() !void {\n     defer {\n         _ = gpa_impl.deinit();\n     }\n-    const gpa = gpa_impl.allocator();\n+    const gpa = std.heap.c_allocator;\n\n     const args = try std.process.argsAlloc(gpa);\n     defer std.process.argsFree(gpa, args);\n</code></pre></div>\n<p>Do we get anything from the GeneralPurposeAllocator (aka DebugAllocator, apparently), that's worth this 6x perf cost?</p>",
        "id": 527926004,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752078660
    },
    {
        "content": "<p>gpa isn't really helpful here i think</p>",
        "id": 527926562,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1752078855
    },
    {
        "content": "<p>We could use the DebugAllocator for debugging only after valgrind finds something. But I'm not sure valgrind catches everything the DebugAllocator would.</p>",
        "id": 527926656,
        "sender_full_name": "Anton",
        "timestamp": 1752078892
    },
    {
        "content": "<p>Would that be a compile time flag or a command line flag?</p>",
        "id": 527927295,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752079128
    },
    {
        "content": "<p>I would think that would be a command line flag</p>",
        "id": 527927384,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1752079163
    },
    {
        "content": "<p>Unless we want to add a debug build for snapshots</p>",
        "id": 527927468,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1752079195
    },
    {
        "content": "<p>it probably wouldn't make much of a difference given how the tool is typically used</p>",
        "id": 527927511,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1752079214
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/pull/7983\">https://github.com/roc-lang/roc/pull/7983</a></p>",
        "id": 527930757,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752080312
    },
    {
        "content": "<p>it would be nice to use the testing allocator for snapshot generation on ci - that one is slower but it also detects memory leaks</p>",
        "id": 527942037,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752084917
    },
    {
        "content": "<p>Yep yep, that's exactly what that PR does!</p>",
        "id": 527942108,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752084949
    },
    {
        "content": "<p>With the c allocator and some simple multithreading, getting good numbers with html snapshot generation again:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ zig build snapshot\ninfo: collected 412 items in 1 ms, processed 412 snapshots in 50 ms.\n$ zig build snapshot -- --html\ninfo: collected 412 items in 1 ms, processed 412 snapshots in 167 ms.\n</code></pre></div>",
        "id": 527947049,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752086841
    },
    {
        "content": "<p>Thinking about turning that (back) on by default</p>",
        "id": 527947069,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752086849
    },
    {
        "content": "<p>For comparison / completeness:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ zig build snapshot -- --singlethread\ninfo: collected 412 items in 1 ms, processed 412 snapshots in 196 ms.\n$ zig build snapshot -- --singlethread --html\ninfo: collected 412 items in 1 ms, processed 412 snapshots in 396 ms.\n</code></pre></div>",
        "id": 527947471,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752087016
    },
    {
        "content": "<p>So I'd say even without multithreading, html perf is acceptable</p>",
        "id": 527947514,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752087040
    },
    {
        "content": "<p>Instead of the c allocator probably use the new zig allocator that is fast</p>",
        "id": 527956372,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752091079
    },
    {
        "content": "<p>Gpa is the debug allocator</p>",
        "id": 527956384,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752091083
    },
    {
        "content": "<p>Oh hmm...actually we use the c allocator in roc main, so I guess that is our default allocator currently</p>",
        "id": 527956597,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752091166
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/pull/7987\">https://github.com/roc-lang/roc/pull/7987</a><br>\n(FWIW, I'm not super tied to this one if y'all think the complexity of multithreading is not worth it!)</p>",
        "id": 527978403,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752102651
    },
    {
        "content": "<p>Oh cool, I'm keen to take a look in a bit</p>",
        "id": 527979578,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752103585
    },
    {
        "content": "<p>Random side note - in the future I think it'll be really useful/helpful to minimize fuzz crashes at least a bit before checking them in</p>",
        "id": 528183851,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752198618
    },
    {
        "content": "<p>We do</p>",
        "id": 528187793,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752202195
    },
    {
        "content": "<p>Or I mean the fuzzer does. I guess a human might do better</p>",
        "id": 528187820,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752202214
    },
    {
        "content": "<p>Not sure which part specifically you are calling out. snapshots of fuzz tests or what appears on the website.</p>",
        "id": 528187841,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752202236
    },
    {
        "content": "<p>I have added quite a few snapshots <code>fuzz_crash</code> that I hadn't minimised. I'm not sure how we minimise them...</p>",
        "id": 528187880,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752202277
    },
    {
        "content": "<p>afl-tmin</p>",
        "id": 528187900,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752202300
    },
    {
        "content": "<p>Does that work on Mac?</p>",
        "id": 528187928,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752202327
    },
    {
        "content": "<p>I don't think so</p>",
        "id": 528187958,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752202354
    },
    {
        "content": "<p>I think they have afl-tmin.bash instead and it is missing features and so still doesn't work for our executables on mac</p>",
        "id": 528187985,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752202378
    },
    {
        "content": "<p>I need to setup my linux machine... to support this and valgrind</p>",
        "id": 528188000,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752202399
    },
    {
        "content": "<p>It's still sitting in a box. It doesn't have a wifi card installed and the router is up the other end of the house <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 528188026,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752202435
    },
    {
        "content": "<p>Or maybe I can use a Digital Ocean droplet or something</p>",
        "id": 528188047,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752202460
    },
    {
        "content": "<p>Would be nice to have a toolchain that supports Mac well</p>",
        "id": 528188057,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752202475
    },
    {
        "content": "<p>Zig will have a builtin fuzzer soon <img alt=\":pika-high-five:\" class=\"emoji\" src=\"https://avatars.zulip.com/22008/emoji/images/e8c51094.gif\" title=\"pika-high-five\"></p>",
        "id": 528188094,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752202510
    },
    {
        "content": "<p>Also FWIW minimization is not a super hard algorithm. I have a version of it written up for the old compiler that we can easily port</p>",
        "id": 528188101,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752202516
    },
    {
        "content": "<p>I'm more hyped about that than async ... am I crazy?</p>",
        "id": 528188142,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752202551
    },
    {
        "content": "<p>Iâd say the same!</p>",
        "id": 528188205,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752202623
    },
    {
        "content": "<p>I hyped about it but super worried about the long tail of work.</p>",
        "id": 528189352,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752203714
    },
    {
        "content": "<p>working is one thing. robust is another.</p>",
        "id": 528189365,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752203725
    },
    {
        "content": "<p>Also, yeah, minimization is pretty simple in most systems. I think the main the afl-tmin does is delete various block sizes and test if it still repros. So like test deleting every 256 byte chunk one at a time and if any can be deleted with repro, remove it. Then try 128 then 64 then 32 then ... and see how small the repro gets.</p>",
        "id": 528189447,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752203819
    },
    {
        "content": "<p><a href=\"https://www.perplexity.ai/search/explain-the-algorithm-of-afl-t-mweVuib0QsqF4vFI0axkMA\">https://www.perplexity.ai/search/explain-the-algorithm-of-afl-t-mweVuib0QsqF4vFI0axkMA</a></p>",
        "id": 528189861,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752204218
    },
    {
        "content": "<p>I'm debugging a segfault and I'd like to add some logging to print all the intermediate outputs. Just like the snapshots but live (as soon as the phase is done) , do you have any pointers before I start on this <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span>?</p>",
        "id": 528382934,
        "sender_full_name": "Anton",
        "timestamp": 1752255745
    },
    {
        "content": "<p>What's been working well for me is asking an LLM to isolate the bug using print debug statements. Basically tell it to drill down starting from this point and iterate. It usually find the bug very quickly, and gives me a nice summary of why it's occuring. </p>\n<p>Maybe it's a bit lazy but it's been pretty quick and easy so far.</p>",
        "id": 528383889,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752256188
    },
    {
        "content": "<p>Or are you thinking of a more permanent logging setup?</p>",
        "id": 528384072,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752256278
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/channel/395097-compiler-development/topic/casual.20conversation/near/528384072\">said</a>:</p>\n<blockquote>\n<p>Or are you thinking of a more permanent logging setup?</p>\n</blockquote>\n<p>Yes, exactly, it's something we should have regardless</p>",
        "id": 528384109,
        "sender_full_name": "Anton",
        "timestamp": 1752256298
    },
    {
        "content": "<p>I've got ideas, but I'd put them in the experimental category. It's not something I have a lot of experience with.</p>",
        "id": 528384515,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752256493
    },
    {
        "content": "<p>I mainly want to know if you think it's a good idea to re-use code from snapshot.zig or modify snapshot.zig to share code with the logging etc.</p>",
        "id": 528384840,
        "sender_full_name": "Anton",
        "timestamp": 1752256639
    },
    {
        "content": "<p>I just watched a LamdbaConf video on Jai recently and he had some really nice debugging stuff for his compiler. Has put a lot of thought into how that is done. </p>\n<p>I think we could definitely do some similar things. </p>\n<p>In case your looking for ideas.</p>",
        "id": 528384911,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752256665
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/channel/395097-compiler-development/topic/casual.20conversation/near/528384840\">said</a>:</p>\n<blockquote>\n<p>I mainly want to know if you think it's a good idea to re-use code from snapshot.zig or modify snapshot.zig to share code with the logging etc.</p>\n</blockquote>\n<p>I think we should try and see how it feels.</p>",
        "id": 528385059,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752256729
    },
    {
        "content": "<p>does anyone else run into frequent crashes with passing <code>--watch</code> to <code>zig build &lt;cmd&gt;</code>?</p>",
        "id": 528404275,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1752266885
    },
    {
        "content": "<p>all the time</p>",
        "id": 528404303,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1752266902
    },
    {
        "content": "<p>especially if you have an error on the initial run</p>",
        "id": 528404317,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1752266913
    },
    {
        "content": "<p>i hope 14.1 or 15 fixes that</p>",
        "id": 528404337,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1752266925
    },
    {
        "content": "<p>Yeah, I've been using <a href=\"https://github.com/watchexec/watchexec?tab=readme-ov-file\"><code>watchexec</code></a> as a work around. Does anyone object to me adding that as a dep in <code>src/flake.nix</code>? (At least until we see if 14.1 or 15 fixes it)</p>",
        "id": 528404466,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1752267001
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"406911\">@Andrew Kelley</span> would know if 14.1 or 15 has relevant changes there <span aria-label=\"smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 528405562,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752267579
    },
    {
        "content": "<p>We already use 14.1 (at least in nix and ci, locally, you may still be running 14.0)</p>",
        "id": 528409742,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752269963
    },
    {
        "content": "<p>And at least for Mac I think watch is still broken on main for zig</p>",
        "id": 528409781,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752269981
    },
    {
        "content": "<p>What's the latest on the <code>foo.(local_func)(args)</code> calling style? Is that supposed to be parsed in the new compiler?</p>",
        "id": 528427949,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752289905
    },
    {
        "content": "<p>we ended up settling on <code>foo-&gt;local_func</code> as the syntax and referring to them as \"arrow calls\" but I forget what their implementation status is in the new compiler</p>",
        "id": 528428557,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752290869
    },
    {
        "content": "<p>Currently going thru my migration script to update my benchmarking corpus and ran into the <code>.(local_func)</code> syntax</p>",
        "id": 528428693,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752291062
    },
    {
        "content": "<p>Turns out <code>-&gt;local_func</code> isn't implemented currently either</p>",
        "id": 528428710,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752291076
    },
    {
        "content": "<p>of nore, the syntax <code>MyNominalType.(payload)</code> is planned to be a thing</p>",
        "id": 528429268,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752291832
    },
    {
        "content": "<p>that works similarly to today's <code>@MyOpaqueType payload</code></p>",
        "id": 528429291,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752291869
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"341568\">Jared Ramirez</span> <a href=\"#narrow/channel/395097-compiler-development/topic/casual.20conversation/near/528404466\">said</a>:</p>\n<blockquote>\n<p>Yeah, I've been using <a href=\"https://github.com/watchexec/watchexec?tab=readme-ov-file\"><code>watchexec</code></a> as a work around. Does anyone object to me adding that as a dep in <code>src/flake.nix</code>? (At least until we see if 14.1 or 15 fixes it)</p>\n</blockquote>\n<p>Seems fine, maybe put it in a separate devDependencies like we do in the old flake <a href=\"https://github.com/roc-lang/roc/blob/d8fe19ad0032ed31718c3621cb5affde2179a5b3/flake.nix#L121\">here</a>.</p>",
        "id": 528444731,
        "sender_full_name": "Anton",
        "timestamp": 1752311587
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/channel/395097-compiler-development/topic/casual.20conversation/near/528384911\">said</a>:</p>\n<blockquote>\n<p>I just watched a LamdbaConf video on Jai recently and he had some really nice debugging stuff for his compiler</p>\n</blockquote>\n<p>Seeing all the visualizations made me think; it would be nice to have anomaly detection set up for the snapshots, like in CI it would alert us if some metric for a Roc program is 100x higher than the average for all snapshots. I don't know if we should actually do that but it's a cool idea :p</p>",
        "id": 528462392,
        "sender_full_name": "Anton",
        "timestamp": 1752330386
    },
    {
        "content": "<p>Is <code>import Foo.Bar</code> supposed to work? The new compiler doesn't parse that currently.</p>",
        "id": 528466954,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752334761
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/stream/395097-compiler-development/topic/casual.20conversation/near/528462392\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/channel/395097-compiler-development/topic/casual.20conversation/near/528384911\">said</a>:</p>\n<blockquote>\n<p>I just watched a LamdbaConf video on Jai recently and he had some really nice debugging stuff for his compiler</p>\n</blockquote>\n<p>Seeing all the visualizations made me think; it would be nice to have anomaly detection set up for the snapshots, like in CI it would alert us if some metric for a Roc program is 100x higher than the average for all snapshots. I don't know if we should actually do that but it's a cool idea :p</p>\n</blockquote>\n<p>Two thoughts:</p>\n<ol>\n<li>Everyone should watch this for the debug tooling inspiration <a href=\"https://youtu.be/IdpD5QIVOKQ?si=0qjQVNwXlTn0gbAj\">https://youtu.be/IdpD5QIVOKQ?si=0qjQVNwXlTn0gbAj</a><div class=\"youtube-video message_inline_image\"><a data-id=\"IdpD5QIVOKQ\" href=\"https://youtu.be/IdpD5QIVOKQ?si=0qjQVNwXlTn0gbAj\"><img src=\"https://uploads.zulipusercontent.net/967cbd7a7ef9c38eaa66f00dd9d79c9007726194/68747470733a2f2f692e7974696d672e636f6d2f76692f49647044355149564f4b512f6d7164656661756c742e6a7067\"></a></div></li>\n<li>I often find alerts like those are limited, but doing something like what jai is doing works well. Basically, thresholds are super nebulous and lead to churn and inconveniences. On the other hand, letting someone interested visualize and debug is super powerful. Also, tracking over time is super powerful. I guess I kinda put it in the same bucket as our fuzzing is right now. I don't want it in CI, but I absolutely want it available for someone interested to start improving the compiler more.</li>\n</ol>",
        "id": 528468480,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752336447
    },
    {
        "content": "<p>Thoughts on adding functionality for benchmarking the parser/tokenizer? Strawman: <a href=\"https://github.com/roc-lang/roc/pull/8013\">https://github.com/roc-lang/roc/pull/8013</a></p>",
        "id": 528476921,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752345576
    },
    {
        "content": "<p>I'd love that! <span aria-label=\"star struck\" class=\"emoji emoji-1f929\" role=\"img\" title=\"star struck\">:star_struck:</span></p>",
        "id": 528477072,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752345730
    },
    {
        "content": "<p>Yeah, sounds great....</p>\n<p>Why is parser a directory and tokenizer a file?</p>",
        "id": 528477428,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752346120
    },
    {
        "content": "<p>Also, sounds like a great entry point to use with tracy</p>",
        "id": 528477447,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752346142
    },
    {
        "content": "<blockquote>\n<p>Why is parser a directory and tokenizer a file?</p>\n</blockquote>\n<p>My thinking is that it's really easy to just concat a bunch of random files, and that's actually a reasonable input to the tokenizer - but that's going to fail early in parsing.</p>",
        "id": 528477607,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752346258
    },
    {
        "content": "<p>I suppose that may result in a somewhat less realistic benchmark</p>",
        "id": 528477621,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752346274
    },
    {
        "content": "<p>I guess probably best to have them both be dirs</p>",
        "id": 528477631,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752346281
    },
    {
        "content": "<p>I would make them both accept either</p>",
        "id": 528478028,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752346714
    },
    {
        "content": "<p>Like if you pass a file it does just the file</p>",
        "id": 528478043,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752346730
    },
    {
        "content": "<p>If you pass a directory it does the full dir</p>",
        "id": 528478070,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752346765
    },
    {
        "content": "<blockquote>\n<p>Also, sounds like a great entry point to use with tracy</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> do I need to do anything special to get this to work with Tracy?</p>",
        "id": 528478320,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752347073
    },
    {
        "content": "<p>No</p>",
        "id": 528478489,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752347269
    },
    {
        "content": "<p>At least not if this still goes through main</p>",
        "id": 528478497,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752347277
    },
    {
        "content": "<p>The two pieces in code are the allocator wrapper: <a href=\"https://github.com/roc-lang/roc/blob/f76c2736128a703a44c8505bd52d53cf85ee5cb1/src/main.zig#L30-L36\">https://github.com/roc-lang/roc/blob/f76c2736128a703a44c8505bd52d53cf85ee5cb1/src/main.zig#L30-L36</a></p>\n<p>And the trace markers: <a href=\"https://github.com/roc-lang/roc/blob/f76c2736128a703a44c8505bd52d53cf85ee5cb1/src/main.zig#L52-L53\">https://github.com/roc-lang/roc/blob/f76c2736128a703a44c8505bd52d53cf85ee5cb1/src/main.zig#L52-L53</a></p>",
        "id": 528478524,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752347305
    },
    {
        "content": "<p>General question this got me thinking of. should <code>roc check</code> be able to run over a directory of files? I guess that might lead to a bunch of redundant work</p>",
        "id": 528478573,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752347358
    },
    {
        "content": "<p>so maybe not</p>",
        "id": 528478578,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752347363
    },
    {
        "content": "<p>But also could be useful for some benchmarking</p>",
        "id": 528478625,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752347377
    },
    {
        "content": "<p>I think globs do that for you automatically as long as we accept multiple files</p>",
        "id": 528480749,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752349697
    },
    {
        "content": "<p>You mean like <code>roc check dir/*.roc</code>? That doesn't deal with recursive roc files and directory structures. And not all shells support <code>**</code>. That is why I generally prefer direct support of passing in a dir</p>",
        "id": 528481088,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752350082
    },
    {
        "content": "<p>fair, seems fine then <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 528481600,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752350586
    },
    {
        "content": "<p>Also, there are limits on the length of a command line on some platforms. Eg 32kb on windows, IIRC. Itâs easy to hit those by doing shell expansion of large directories.</p>",
        "id": 528485631,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752356008
    },
    {
        "content": "<p>wow, I just successfully resolved a segfault in our snapshot testing system that only reproduced in one file, and only when running with the <code>--debug</code> flag - just by telling Claude to try to fix it and then being increasingly insistent that the bug had to be in our code somewhere and not a bug in zig's general purpose allocator.</p>",
        "id": 528490124,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752363011
    },
    {
        "content": "<p>turned out we had a double-free</p>",
        "id": 528490129,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752363023
    },
    {
        "content": "<p>nicest experience I've ever had fixing a double-free! <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 528490169,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752363085
    },
    {
        "content": "<p>Yeah, it's really nice that they are getting decent at debugging now.</p>",
        "id": 528519582,
        "sender_full_name": "Anton",
        "timestamp": 1752401599
    },
    {
        "content": "<p>At the same time, I have seen Claude:</p>\n<ol>\n<li>Comment out the body of a test</li>\n<li>Turn code from a real implementation to a naive implementation to pass a test instead of fixing the real implementation</li>\n<li>Add type ignore hints to python instead of fixing the type issue.</li>\n</ol>",
        "id": 528527587,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752410683
    },
    {
        "content": "<p>But yeah, nice they can help in some cases</p>",
        "id": 528527597,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752410695
    },
    {
        "content": "<p>I have not had it cheat on me before, but I have heard it from others. I expect that these kinds of issues are temporary.</p>",
        "id": 528528603,
        "sender_full_name": "Anton",
        "timestamp": 1752411877
    },
    {
        "content": "<p>Yeah, I bet some of the rl tuning is over optimized on getting some tasks done and doesn't check well enough on how it gets done</p>",
        "id": 528529681,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752413129
    },
    {
        "content": "<p>Also, I have been messing around with it in a python + mojo project and that may confuse it more often.</p>",
        "id": 528529942,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752413410
    },
    {
        "content": "<p>Uhu, it's probably overeager on trying to apply its regular python knowledge</p>",
        "id": 528529994,
        "sender_full_name": "Anton",
        "timestamp": 1752413477
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/395097-compiler-development/topic/casual.20conversation/near/528527587\">said</a>:</p>\n<blockquote>\n<p>At the same time, I have seen Claude:</p>\n<ol>\n<li>Comment out the body of a test</li>\n<li>Turn code from a real implementation to a naive implementation to pass a test instead of fixing the real implementation</li>\n<li>Add type ignore hints to python instead of fixing the type issue.</li>\n</ol>\n</blockquote>\n<p>I've gotten used to these now. It used to be that I'd think \"wow, how embarrassing for Claude\" and now I'm just like \"oh yeah, that happens, hey Claude do it right, moving on.\"</p>",
        "id": 528530993,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752414695
    },
    {
        "content": "<p>it's also why I don't understand people who are like \"I don't even read the code anymore\" - I have never seen that be the optimal way to use these tools on a serious project</p>",
        "id": 528531066,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752414754
    },
    {
        "content": "<p>if you don't read the code you have no idea when tests are being silently deleted etc</p>",
        "id": 528531119,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752414803
    },
    {
        "content": "<p>Yeah, Ive only just started using Claude (cause my work is paying for it), and so far, I have been impressed for super short scripts and trivial edits to many files, but in general, I think it slows me down currently.</p>",
        "id": 528531314,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752415021
    },
    {
        "content": "<p>But I'm finding the patterns it can deal with quickly that would be less fast for me to do</p>",
        "id": 528531336,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752415042
    },
    {
        "content": "<p>yeah it took me awhile before it was a net speedup for me on complicated projects</p>",
        "id": 528531559,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752415308
    },
    {
        "content": "<p>a lot of trial and error getting a feeling for failure modes, how to scope tasks for it, etc.</p>",
        "id": 528531601,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752415345
    },
    {
        "content": "<p>now I'm definitely significantly faster with it than without it, but it took awhile for that to be true</p>",
        "id": 528531616,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752415369
    },
    {
        "content": "<p>Yeah. Makes sense. And I bet it is more capable work things that have more examples documentation and tooling.... Mojo is a bit lacking</p>",
        "id": 528533820,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752417649
    },
    {
        "content": "<p>Also, I bet that strong typing wpuld help it. I probably should add a claude.md and add an entry about type checking and ignoring things</p>",
        "id": 528537436,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752421230
    },
    {
        "content": "<p>I think roc (once there are enough examples and the compiler is robust wnough) will be very llm friendly due to how the language works</p>",
        "id": 528538007,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752421803
    },
    {
        "content": "<p>Functional Fast LLM-Friendly</p>",
        "id": 528538065,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1752421872
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/XOYr_g1U0qzhP-0nC1fQWHPp/image.png\">image.png</a><br>\nwhen I call type information in zsl for a single quote, I get this nice table</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/XOYr_g1U0qzhP-0nC1fQWHPp/image.png\" title=\"image.png\"><img data-original-content-type=\"image/png\" data-original-dimensions=\"612x452\" src=\"/user_uploads/thumbnail/22008/XOYr_g1U0qzhP-0nC1fQWHPp/image.png/840x560.webp\"></a></div>",
        "id": 528619816,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1752485138
    },
    {
        "content": "<p>does roc want <code>\\u(...)</code> escape or <code>\\u{...}</code>? asking because string interpolation was <code>\\(...)</code> initially and now it's <code>${...}</code></p>",
        "id": 528624233,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1752486505
    },
    {
        "content": "<p>and another question: why not implementing utf8 escape with int num literals? like <code>\\u{0x123}</code> or <code>\\u{42}</code> (yeah, historically this format is for hex so it would be unexpected to have dec here) or <code>\\u{0b1001}</code>? hex is absolutely enough. I'm just wondering if num literals can give any advantage here?</p>",
        "id": 528626159,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1752487210
    },
    {
        "content": "<p>should escape seqs be processed during tokenization or during canonicalization? my thought is that it shouldn't hinder tokenization. the only case of escaping tokenizer should process is escape of double quote for strings (<code>\"\\\"\"</code>) and single quote for single quote (<code>'\\''</code>) so it knows where's the start and the end of the literal. and then process the literal at can time so the formatter can still format the code. but I'm likely missing smth.<br>\n<span class=\"user-mention\" data-user-id=\"453336\">@Joshua Warner</span> I think you should know the answer</p>",
        "id": 528630119,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1752488784
    },
    {
        "content": "<p>during tokenization the bytes we need to traverse will for sure already be in cache, so I think that'll be the cheapest time to do it</p>",
        "id": 528639242,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752492259
    },
    {
        "content": "<p>I'd also like to move the logic for turning number literals into actual numbers into tokenization for the same reason</p>",
        "id": 528639300,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752492284
    },
    {
        "content": "<p>that said, it might make sense to have a flag that the formatter can pass in to say \"don't bother doing this because it won't get used\"</p>",
        "id": 528639387,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752492324
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"584248\">Kiryl Dziamura</span> <a href=\"#narrow/stream/395097-compiler-development/topic/casual.20conversation/near/528626159\">said</a>:</p>\n<blockquote>\n<p>and another question: why not implementing utf8 escape with int num literals? like <code>\\u{0x123}</code> or <code>\\u{42}</code> (yeah, historically this format is for hex so it would be unexpected to have dec here) or <code>\\u{0b1001}</code>? hex is absolutely enough. I'm just wondering if num literals can give any advantage here?</p>\n</blockquote>\n<p>I remember talking about this on Zulip years ago, and I think the conclusion was that Unicode escapes are a feature that will be used 99.99% of the time by copy/pasting from somewhere, so the most important thing is consistency, not flexibility</p>",
        "id": 528639638,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752492416
    },
    {
        "content": "<p>that said, I think the main thing is that we don't want to change the syntax here; however it works in the old compiler is exactly how it should work in the new compiler <span aria-label=\"smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 528639768,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752492458
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/395097-compiler-development/topic/casual.20conversation/near/528639300\">said</a>:</p>\n<blockquote>\n<p>I'd also like to move the logic for turning number literals into actual numbers into tokenization for the same reason</p>\n</blockquote>\n<p>Isn't this in the boat of so fast it is better to just recompute on they fly at the last minute instead of shooting somewhere and spending extra memory</p>",
        "id": 528668162,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752501209
    },
    {
        "content": "<p>Not actually sure it's the case but I thought Andrew talked directly about this in a zig talk and it being a win to not do it until the last minute</p>",
        "id": 528668286,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752501246
    },
    {
        "content": "<p>On specific thing to consider for the long term, if we switch to a simd tokenizer, I'm pretty sure this will put a non-simd loop in the middle of it...which likely will make it cost more.</p>",
        "id": 528668476,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752501301
    },
    {
        "content": "<p>we need it during canonicalization to report \"number literal too big for type\" errors</p>",
        "id": 528670382,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752501893
    },
    {
        "content": "<p>so canonicalization is the absolute last minute</p>",
        "id": 528670407,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752501903
    },
    {
        "content": "<p>fair point about SIMD tokenization, but right now we're doing it in the middle of canonicalization and every time we hit a number literal we go load memory that hasn't been touched since tokenization and won't be touched again unless there's an error to report, so definitely seems like it would be better to do it earlier <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 528670679,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752501976
    },
    {
        "content": "<p>Ah, fair</p>",
        "id": 528672040,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752502374
    },
    {
        "content": "<p>actually I think it would be fine in the SIMDjson style, because after processing each 64-byte chunk of source with a bunch of SIMD passes, there are a series of non-SIMD passes that have to happen afterwards before moving onto the next 64B chunk, and they're all loops</p>",
        "id": 528672756,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752502588
    },
    {
        "content": "<p>so this could just be one more of those</p>",
        "id": 528672776,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752502592
    },
    {
        "content": "<p>Yeah, the important part is the chunking there</p>",
        "id": 528673250,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752502724
    },
    {
        "content": "<p>64bytes of happy Simd before falling into sad loops</p>",
        "id": 528673291,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752502737
    },
    {
        "content": "<p>Just don't start doing it immediately on detecting a number</p>",
        "id": 528673372,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752502769
    },
    {
        "content": "<p>Daniel Lemire doing experiments to see if using unaligned memory hurts perf on modern CPUs and...apparently it doesn't! <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<p><a href=\"https://x.com/lemire/status/1944899756838305873\">https://x.com/lemire/status/1944899756838305873</a></p>",
        "id": 528764683,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752542012
    },
    {
        "content": "<p>Yeah, the only cost on modern machines should be around cache lines maybe not containing full data</p>",
        "id": 528767489,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752544449
    },
    {
        "content": "<p>That obviously amortizes away</p>",
        "id": 528767655,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752544606
    },
    {
        "content": "<p>So worst cost would be if it leads to loading two caches lines in a one off. Then that happens on repeat, but not linearly such that prefecthing helps</p>",
        "id": 528767695,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752544649
    },
    {
        "content": "<p>Obviously don't want to do it anyway if you can avoid it cause it isn't a guarantee and your code may also run on less optimized architecture used for mobile or edge processors.</p>",
        "id": 528767946,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752544840
    },
    {
        "content": "<p>I fixed some minor issues with backticks in our can diagnostics. I've noticed there are a bunch of things with our problem reports that aren't ideal, and we tend to be copy-pasting the last ones etc. </p>\n<p>Whenever you're looking at a new Diagnostic (or the existing ones if you feel like helping clean this up a little) can you pay special attention to the helpers like <code>addCodeBlock</code> or <code>addInlineCode</code> or <code>addKeyword</code> or <code>addType</code> etc and try and use the right one. It will just help to keep our reports pretty in every context.</p>",
        "id": 528833834,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752577445
    },
    {
        "content": "<p>I had Claude help me update our Diagnostics to use the correct methods. Looks like a nice improvement <a href=\"https://github.com/roc-lang/roc/pull/8048\">https://github.com/roc-lang/roc/pull/8048</a></p>",
        "id": 528842890,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752580684
    },
    {
        "content": "<p>Yesterday I was thinking whether zig transforms switch by tokens to jmpifs or to a jumptable (I think it should but I haven't checked) and then started wondering if it's true for tokenizer itself (jump per character). So in place of a sequence of ifs we have a jumptable where offset is the character byte</p>\n<p>And then today HN gave me this, which is exactly the thing I was thinking of: <a href=\"https://xnacly.me/posts/2025/fast-lexer-strategies/\">https://xnacly.me/posts/2025/fast-lexer-strategies/</a>Â </p>\n<p>Does it make sense to have this in roc? Maybe llvm already does it for us?</p>",
        "id": 528854432,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1752584219
    },
    {
        "content": "<p>You should by default assume that ifs manifest and hurt optimizations....of course they can be cmov</p>",
        "id": 528879805,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752591063
    },
    {
        "content": "<p>Also, zig turns a while true loop with a switch in it to a jump table. I believe that is the pattern...I know there was a doc or changelog entry about the format here</p>",
        "id": 528880018,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752591120
    },
    {
        "content": "<p>As for the roc tokenizer, I think the end goal is simdjson style</p>",
        "id": 528880362,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752591212
    },
    {
        "content": "<p>But I'm sure some of these techniques will apply. I know we have also already shared a few zig specific blogs</p>",
        "id": 528880453,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752591239
    },
    {
        "content": "<p>there's also a comment about simd in the clickhouse lexer: <a href=\"https://news.ycombinator.com/item?id=44562278\">https://news.ycombinator.com/item?id=44562278</a><br>\nI heard a lot about simdjson, I guess it's time to finally look into it <span aria-label=\"smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 528880790,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1752591331
    },
    {
        "content": "<p>I only roughly know it. Also, I'm sure many incremental changes could be made to the current tokenizer to make it faster</p>",
        "id": 528882211,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752591684
    },
    {
        "content": "<p>That said, of we want to improve compiler perf, we should focus on can and diagnostics</p>",
        "id": 528882292,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752591708
    },
    {
        "content": "<p>One extra note...if tokenizer perf sounds fun (either tuning the current tokenizer or working on a more Simd version)....go for it....enjoy</p>",
        "id": 528886885,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752593084
    },
    {
        "content": "<p>I've been wondering, when we introduce simd to the tokenizer, should we just keep two versions of the tokenizer:</p>\n<ul>\n<li>no simd, easy to understand, debug and edit</li>\n<li>simd, crazy perf version :p</li>\n</ul>",
        "id": 528887512,
        "sender_full_name": "Anton",
        "timestamp": 1752593277
    },
    {
        "content": "<p>Maybe next time <span aria-label=\"smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"smile\">:smile:</span>just verifying my thoughts. I already have what to do in the repo</p>",
        "id": 528887666,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1752593327
    },
    {
        "content": "<p>We keep it for fuzzing?</p>",
        "id": 528907174,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752599655
    },
    {
        "content": "<p>Make sure they always agree?</p>",
        "id": 528907236,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752599676
    },
    {
        "content": "<p><a href=\"https://simonklee.dk/labeled-switch\">https://simonklee.dk/labeled-switch</a></p>",
        "id": 528922422,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752605381
    },
    {
        "content": "<p>we're already using labeled switch in...layout I think?</p>",
        "id": 528926588,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752606930
    },
    {
        "content": "<p>A casual attempt at applying labeled switch to the main switch in the tokenizer yields a ~15% perf regression :/</p>",
        "id": 528948108,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752616662
    },
    {
        "content": "<p>The world is cruel</p>",
        "id": 528948872,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752617043
    },
    {
        "content": "<p>in <code>tokenize.zig</code>, there are malformed tokens and diagnostic messages. my intuition was that malformed token is a twin of a valid token or group of tokens (e.g. valid <code>Float, Int</code> and their malformed version <code>MalformedNumber</code>) and diagnostic messages clarify the malfunction (e.g. <code>NumberNoDigits, NumberBadSuffix, NumberNoExponentDigits</code>) but I see the things, that I would expect to be messages only, are actually tokens:</p>\n<div class=\"codehilite\"><pre><span></span><code>                .MalformedNumberBadSuffix,\n                .MalformedNumberNoDigits,\n                .MalformedNumberNoExponentDigits,\n                .MalformedNumberUnicodeSuffix,\n</code></pre></div>\n<p>is there a reason for that?</p>",
        "id": 529232664,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1752742673
    },
    {
        "content": "<p>I just realized that unicode escape in single quote literal is redundant since roc considers single quote as an int. to me, base16 via <code>0x...</code> is clearer than <code>\\u{...}</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>&#39;\\u{42}&#39; == 0x42\n</code></pre></div>\n<p>what's the reason of keeping both? to comply string literal and for historical reasons?</p>",
        "id": 529281792,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1752759586
    },
    {
        "content": "<p>Probably just for clarity of use...but yeah shouldn't technically be needed</p>",
        "id": 529290276,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752761842
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"584248\">@Kiryl Dziamura</span> </p>\n<blockquote>\n<p>diagnostic messages clarify the malfunction (e.g. <code>NumberNoDigits, NumberBadSuffix, NumberNoExponentDigits</code>) but I see the things, that I would expect to be messages only, are actually tokens</p>\n</blockquote>\n<p>The intent here was to communicate to the parser that there was a vaguely-number-like-thing here, and you should probably construct the syntax tree to be consistent with there being a number-like-thing here.</p>\n<p>Contrast that with the situation where we just have the tokenizer message and no token, where it'll seem to the parser like there was nothing there at all - definitely leading to a redundant error message, and possibly leading to cascading parse errors because the tree is structurally wrong.</p>",
        "id": 529303425,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752765634
    },
    {
        "content": "<p>but number-like-thing can be just <code>MalformedNumber</code>. and tokenizer message has region. but I get what you mean. it sounds like it's better to ditch diagnostics during tokenization and generate unique malformed tokens instead. then push messages at canonicalization based on the tokens</p>",
        "id": 529304088,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1752765828
    },
    {
        "content": "<p>diagnostics at can time can also provide better messages relying on the context</p>",
        "id": 529304293,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1752765893
    },
    {
        "content": "<p>There are som diagnostics that we donât want to convert to malformed tokens, eg the one for having an uppercase base (0Xff)</p>",
        "id": 529304531,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752765965
    },
    {
        "content": "<p>Why does the ModuleEnv own (and de-init) the source code?</p>",
        "id": 529602513,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752946710
    },
    {
        "content": "<p>This seems to contradict how it's used: <a href=\"https://github.com/roc-lang/roc/blob/main/src/coordinate_simple.zig#L193\">link</a></p>\n<div class=\"codehilite\"><pre><span></span><code>/// The source is always duplicated for the ModuleEnv, which owns the copy.\nfn processSourceInternal(\n</code></pre></div>",
        "id": 529602692,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752946933
    },
    {
        "content": "<p>Ah of course and the higher-level function has a leak in the case of ~a cache hit~ the cache being disabled <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 529603027,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752947306
    },
    {
        "content": "<p>yeah my thinking there was that when the compiler is running in like a watch mode, it'll be common for files to change on disk and then we need to reload the source bytes as well as getting a new ModuleEnv, so it seemed like coupling those would be the least error-prone if we're going to be unloading ModuleEnvs at runtime</p>",
        "id": 529608864,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752954313
    },
    {
        "content": "<p>Have it be in-memory, sure - but not de-allocated by the module env, IMO.</p>",
        "id": 529610338,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752956347
    },
    {
        "content": "<p>I ought to be able to invoke the compiler on code I manage the allocation for, without duplicating it.</p>",
        "id": 529610360,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752956390
    },
    {
        "content": "<p>Ran into this vis-Ã -vis benchmarking, where somehow I missed this and we were double-freeing all the sources because I wasnât duping them every iteration.</p>",
        "id": 529610420,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752956461
    },
    {
        "content": "<p>ahh hm</p>",
        "id": 529612748,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752959396
    },
    {
        "content": "<p>ok feel free to change it so that module env owns everything else but the src <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 529612768,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1752959424
    },
    {
        "content": "<p>I really wish zig had a borrow checker <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 529613614,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752960557
    },
    {
        "content": "<p>Lifetime annotations for who owns what are so damn useful</p>",
        "id": 529613627,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752960575
    },
    {
        "content": "<p>(especially checked ones!)</p>",
        "id": 529613633,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752960585
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/pull/8081\">https://github.com/roc-lang/roc/pull/8081</a></p>",
        "id": 529616940,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752965602
    },
    {
        "content": "<p>Side note: issue <a href=\"https://github.com/roc-lang/roc/issues/8086\">#8086</a> is fast approaching. Should try to get some sort of intel throwback in there <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 529616967,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752965650
    },
    {
        "content": "<p>I know this is a first world problem... but has anyone else ever had trouble with sub-millisecond precision measurements across different browsers?</p>",
        "id": 529617504,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752966512
    },
    {
        "content": "<p>Chrome seems to be fine, but Safari struggles</p>",
        "id": 529617517,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752966533
    },
    {
        "content": "<p>Thatâs a security feature</p>",
        "id": 529617534,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752966562
    },
    {
        "content": "<p>It was that speculative execution thing a few years ago. It turns out if you can measure times really precisely, it becomes possible to exfiltrate secret data. Very hard to fully harden against, so a defense in depth is making sure you can measure super precisely.</p>",
        "id": 529617620,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752966706
    },
    {
        "content": "<p>Cool</p>",
        "id": 529617666,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752966788
    },
    {
        "content": "<p>I'm enjoying seeing the timing information for our compiler to type check some source <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> </p>\n<p><a href=\"/user_uploads/22008/Y4-SxO5A32vVqkMi1SzNdYD8/Screenshot-2025-07-20-at-09.14.25.png\">Screenshot 2025-07-20 at 09.14.25.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/Y4-SxO5A32vVqkMi1SzNdYD8/Screenshot-2025-07-20-at-09.14.25.png\" title=\"Screenshot 2025-07-20 at 09.14.25.png\"><img data-original-content-type=\"image/png\" data-original-dimensions=\"1050x496\" src=\"/user_uploads/thumbnail/22008/Y4-SxO5A32vVqkMi1SzNdYD8/Screenshot-2025-07-20-at-09.14.25.png/840x560.webp\"></a></div>",
        "id": 529617728,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752966911
    },
    {
        "content": "<p>Nice! 0.2ms is pretty fast indeed!</p>",
        "id": 529619742,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752970121
    },
    {
        "content": "<p>If we could do wasm code emission and execution in anywhere close to that, thatâd be awesome!</p>",
        "id": 529619761,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752970159
    },
    {
        "content": "<p>Thats the time taken to load the source into the wasm compiler, tokenize-&gt;parse-&gt;canonicalize-&gt;type check-&gt;serialise diagnostics to HTML</p>",
        "id": 529621889,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752973800
    },
    {
        "content": "<p>Definitely fastest when there are no diagnostics <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 529621922,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752973860
    },
    {
        "content": "<p>Is there something about diagnostics that makes them complicated/slow to generate?</p>",
        "id": 529622928,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752975508
    },
    {
        "content": "<p>Or just that we havenât optimized them (yet)</p>",
        "id": 529622942,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752975531
    },
    {
        "content": "<p>Slow as in pushes us over the 1ms threshold</p>",
        "id": 529623063,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752975746
    },
    {
        "content": "<p>But yeah, I haven't really looked at it. Just messing around with things. It's really cool how capable the compiler is already!</p>",
        "id": 529623086,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752975800
    },
    {
        "content": "<blockquote>\n<p>Is there something about diagnostics that makes them complicated/slow to generate?</p>\n</blockquote>\n<p>I think they currently just allocate like crazy</p>",
        "id": 529624382,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752977849
    },
    {
        "content": "<p>This is a really interesting paper: <a href=\"https://arxiv.org/abs/2504.09246\">https://arxiv.org/abs/2504.09246</a></p>\n<p>Essentially, they have a system that can type-check a partially-written typescript file (i.e. a prefix of a file), such that it can determine whether or not any continuation of that prefix could possibly be well-typed.</p>\n<p>I've been noodling on trying to do something similar with Roc. Thoughts?</p>",
        "id": 529625358,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752979622
    },
    {
        "content": "<p>Roughly thinking of the following extensions:</p>\n<ul>\n<li>Add a special \"Partial\" token that we can inject in places of the code that may not be complete</li>\n<li>Auto-close any open parens/etc</li>\n<li>This partial token can be \"split\" in the parser as many times as necessary to generate a syntactically-valid expression. If in the context of a block, that block gets one final \"Partial\" statement indicating defs (and a return stmt) may be missing</li>\n<li>Similarly, we can have partial type definitions/etc</li>\n<li>We canonicalize as usual, but take note of whether it's possible for any symbols that we can't find to be defined in the future in one of these \"Partial\" statements (or maybe a whole block has a \"partial\" bool? anyway...)</li>\n<li>Type checking I _think_ can proceed mostly as usual, assigning types to any as-yet-undefined symbols, etc.</li>\n<li>I think under those restrictions we should mostly be able to rely on type checking to only give errors that  would also be an issue if the file were complete. Right?</li>\n</ul>",
        "id": 529625920,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1752980662
    },
    {
        "content": "<p>so is the goal to be able to tell when someone is typing in an editor and the line they're currently writing is incomplete, and if we detect that it's definitely an error no matter what comes after it, then we can assume it's malformed and then continue trying to check the rest of the file as normal so you still get errors elsewhere?</p>",
        "id": 529680234,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1753009554
    },
    {
        "content": "<p>The goal is to distinguish errors that are purely due to the input being incomplete, and errors that wonât be fixed no matter what more is typed at the cursor (or cursors, I suppose).</p>",
        "id": 529695680,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1753025549
    },
    {
        "content": "<p>I think this is mostly useful in the context of providing some constraints during decoding for an llm (ie guaranteeing that the llm generates a well-typed program), but maybe there are some implications for what errors we immediately display in an editor vs which ones we wait for your cursor to move away before displaying.</p>",
        "id": 529695876,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1753025747
    },
    {
        "content": "<p>Compiler fuzzing of Kotlin. High-level overview, but the resources list might be interesting: <a href=\"https://blog.jetbrains.com/research/2025/07/fuzzing-the-kotlin-compiler/\">https://blog.jetbrains.com/research/2025/07/fuzzing-the-kotlin-compiler/</a></p>",
        "id": 530085441,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1753169905
    },
    {
        "content": "<p>What do you think about adding to our zig CI lint, that you cannot leave any <code>std.debug.print</code>'s in the codebase. These don't play nicely with WASM freestanding or anything that doesn't have stdio.</p>",
        "id": 530696217,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753421843
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"664700\">@Loris Cro</span> or any Zig folk... are there any mature TUI libraries we should consider for roc cli? </p>\n<p>I was looking at <a href=\"https://github.com/rockorager/libvaxis\">rockorager/libvaxis</a> which looks pretty cool. </p>\n<p>Not sure it's the path we want to go down... but interested to explore the idea, particularly now we basically have things ready to build our REPL.</p>",
        "id": 530930520,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753527914
    },
    {
        "content": "<p>yes libvaxis is the one I would recommend as well. just for completeness know that it has a high-level and a low-level API, so if you like the idea of having widgets and the whole runtime that manages them, then great, but if you decide you want direct control over everything, you can still do that, libvaxis will not fight you</p>",
        "id": 530931280,
        "sender_full_name": "Loris Cro",
        "timestamp": 1753528279
    },
    {
        "content": "<p>I use the low-level api in <a href=\"https://github.com/kristoff-it/bork\">bork</a> because I wanted to have my own interaction system with UI elements</p>",
        "id": 530931364,
        "sender_full_name": "Loris Cro",
        "timestamp": 1753528325
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"664700\">@Loris Cro</span></p>",
        "id": 530992077,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753558273
    },
    {
        "content": "<p>Instead of \"Canonicalizer\" what about shortening this and using \"Czer\" around the place?</p>\n<p>I can't think of a nicer/shorter description. My issue with  \"Canonicalizer\" is just that it's long</p>",
        "id": 531245189,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753663970
    },
    {
        "content": "<p>Found something nicer <code>Can</code></p>",
        "id": 531246343,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753664426
    },
    {
        "content": "<p>I think I'm stuck on <a href=\"https://github.com/roc-lang/roc/pull/8124\">https://github.com/roc-lang/roc/pull/8124</a></p>\n<div class=\"codehilite\"><pre><span></span><code>src/collections/safe_list.zig:587:17: error: Cannot serialize non-POD type problem.Problem\n                @compileError(&quot;Cannot serialize non-POD type &quot; ++ @typeName(T));\n                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nsrc/collections/safe_list.zig:649:62: error: enum &#39;meta.FieldEnum(multi_array_list.MultiArrayList(problem.Problem).Elem__struct_41792)&#39; has no tag with value &#39;2&#39;\n                    const field_ptr = slice.items(@as(Field, @enumFromInt(i))).ptr;\n                                                             ^~~~~~~~~~~~~~~\n</code></pre></div>\n<p>What I cannot understand is how this PR makes changes that cause these compile errors. I have basically just lifted the files into a common zig module, I haven't touched the <code>Problem</code> store or anything like that.</p>",
        "id": 531313866,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753693463
    },
    {
        "content": "<p>Could it be that this code was not previously compiled because it was not used and now the zig compiler does detect it as used?</p>",
        "id": 531314570,
        "sender_full_name": "Anton",
        "timestamp": 1753693659
    },
    {
        "content": "<p>There's definitely something pretty broken. I've tried 5-6 different things, and I always eventually run into the same issue, a segfault.</p>\n<div class=\"codehilite\"><pre><span></span><code>$ zig build test\ntest\nââ run test failure\nerror: while executing test &#39;test.test_0&#39;, the following command terminated with signal 11 (expected exited with code 0):\n/Users/luke/Documents/GitHub/roc/.zig-cache/o/f8df5afaa2c191041d7f6fca549b4f9d/test --seed=0x5014a196 --cache-dir=/Users/luke/Documents/GitHub/roc/.zig-cache --listen=-\nBuild Summary: 4/7 steps succeeded; 1 failed; 361/361 tests passed\n</code></pre></div>",
        "id": 531319258,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753695002
    },
    {
        "content": "<p>I'm definitely hitting pause on this... I pushed the broken commit to <a href=\"https://github.com/roc-lang/roc/pull/8124\">https://github.com/roc-lang/roc/pull/8124</a></p>\n<p>The latest approach I took was to replace the SafeMultiList altogether.</p>",
        "id": 531319419,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753695055
    },
    {
        "content": "<p>I'll take a look</p>",
        "id": 531321724,
        "sender_full_name": "Anton",
        "timestamp": 1753695723
    },
    {
        "content": "<p>Okidoki, the key to start debugging this is to run the command without the listen flag:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: while executing test &#39;test.test_0&#39;, the following command terminated with signal 11 (expected exited with code 0):\n/home/username/gitrepos/roc2/roc/.zig-cache/o/c001d6b7d92a5fb63e64be83c43d0d57/test --seed=0x8532821a --cache-dir=/home/username/gitrepos/roc2/roc/.zig-cache --listen=-\n</code></pre></div>\n<p>So:</p>\n<div class=\"codehilite\"><pre><span></span><code>/home/username/gitrepos/roc2/roc/.zig-cache/o/c001d6b7d92a5fb63e64be83c43d0d57/test --seed=0x8532821a --cache-dir=/home/username/gitrepos/roc2/roc/.zig-cache\n</code></pre></div>\n<p>After doing:</p>\n<div class=\"codehilite\"><pre><span></span><code>gdb --batch --ex run --ex bt --args /home/username/gitrepos/roc2/roc/.zig-cache/o/c001d6b7d92a5fb63e64be83c43d0d57/test --seed=0x8532821a --cache-dir=/home/username/gitrepos/roc2/roc/.zig-cache\n</code></pre></div>\n<p>We get this forever:</p>\n<div class=\"codehilite\"><pre><span></span><code>Thread 1 &quot;test&quot; received signal SIGSEGV, Segmentation fault.\ntesting.refAllDeclsRecursive__anon_13463 () at /home/username/Downloads/zig-x86_64-linux-0.14.1/lib/std/testing.zig:1158\n1158                    .@&quot;struct&quot;, .@&quot;enum&quot;, .@&quot;union&quot;, .@&quot;opaque&quot; =&gt; refAllDeclsRecursive(@field(T, decl.name)),\n#0  testing.refAllDeclsRecursive__anon_13463 () at /home/username/Downloads/zig-x86_64-linux-0.14.1/lib/std/testing.zig:1158\n#1  0x0000000001206d71 in testing.refAllDeclsRecursive__anon_28897 () at /home/username/Downloads/zig-x86_64-linux-0.14.1/lib/std/testing.zig:1158\n#2  0x00000000011505f1 in testing.refAllDeclsRecursive__anon_13463 () at /home/username/Downloads/zig-x86_64-linux-0.14.1/lib/std/testing.zig:1158\n#3  0x0000000001206d71 in testing.refAllDeclsRecursive__anon_28897 () at /home/username/Downloads/zig-x86_64-linux-0.14.1/lib/std/testing.zig:1158\n#4  0x00000000011505f1 in testing.refAllDeclsRecursive__anon_13463 () at /home/username/Downloads/zig-x86_64-linux-0.14.1/lib/std/testing.zig:1158\n#5  0x0000000001206d71 in testing.refAllDeclsRecursive__anon_28897 () at /home/username/Downloads/zig-x86_64-linux-0.14.1/lib/std/testing.zig:1158\n#6  0x00000000011505f1 in testing.refAllDeclsRecursive__anon_13463 () at /home/username/Downloads/zig-x86_64-linux-0.14.1/lib/std/testing.zig:1158\n#7  0x0000000001206d71 in testing.refAllDeclsRecursive__anon_28897 () at /home/username/Downloads/zig-x86_64-linux-0.14.1/lib/std/testing.zig:1158\n#8  0x00000000011505f1 in testing.refAllDeclsRecursive__anon_13463 () at /home/username/Downloads/zig-x86_64-linux-0.14.1/lib/std/testing.zig:1158\n#9  0x0000000001206d71 in testing.refAllDeclsRecursive__anon_28897 () at /home/username/Downloads/zig-x86_64-linux-0.14.1/lib/std/testing.zig:1158\n#10 0x00000000011505f1 in testing.refAllDeclsRecursive__anon_13463 () at /home/username/Downloads/zig-x86_64-linux-0.14.1/lib/std/testing.zig:1158\n#11 0x0000000001206d71 in testing.refAllDeclsRecursive__anon_28897 () at /home/username/Downloads/zig-x86_64-linux-0.14.1/lib/std/testing.zig:1158\n#12 0x00000000011505f1 in testing.refAllDeclsRecursive__anon_13463 () at /home/username/Downloads/zig-x86_64-linux-0.14.1/lib/std/testing.zig:1158\n#13 0x0000000001206d71 in testing.refAllDeclsRecursive__anon_28897 () at /home/username/Downloads/zig-x86_64-linux-0.14.1/lib/std/testing.zig:1158\n#14 0x00000000011505f1 in testing.refAllDeclsRecursive__anon_13463 () at /home/username/Downloads/zig-x86_64-linux-0.14.1/lib/std/testing.zig:1158\n#15 0x0000000001206d71 in testing.refAllDeclsRecursive__anon_28897 () at /home/username/Downloads/zig-x86_64-linux-0.14.1/lib/std/testing.zig:1158\n#16 0x00000000011505f1 in testing.refAllDeclsRecursive__anon_13463 () at /home/username/Downloads/zig-x86_64-linux-0.14.1/lib/std/testing.zig:1158\n#17 0x0000000001206d71 in testing.refAllDeclsRecursive__anon_28897 () at /home/username/Downloads/zig-x86_64-linux-0.14.1/lib/std/testing.zig:1158\n#18 0x00000000011505f1 in testing.refAllDeclsRecursive__anon_13463 () at /home/username/Downloads/zig-x86_64-linux-0.14.1/lib/std/testing.zig:1158\n#19 0x0000000001206d71 in testing.refAllDeclsRecursive__anon_28897 () at /home/username/Downloads/zig-x86_64-linux-0.14.1/lib/std/testing.zig:1158\n...\n</code></pre></div>",
        "id": 531352433,
        "sender_full_name": "Anton",
        "timestamp": 1753704630
    },
    {
        "content": "<p><code>refAllDeclsRecursive</code> true to its name :p</p>",
        "id": 531352523,
        "sender_full_name": "Anton",
        "timestamp": 1753704659
    },
    {
        "content": "<p><code>testing.refAllDeclsRecursive(@import(\"check\"));</code> in <code>src/test.zig</code> is causing a cycle through <code>check/Mod.zig</code></p>",
        "id": 531379992,
        "sender_full_name": "Anton",
        "timestamp": 1753711571
    },
    {
        "content": "<p>Curious, I thought it was fine to make modules that reference themselves.</p>",
        "id": 531475519,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753742834
    },
    {
        "content": "<p>I'm definitely not confident in how we should properly setup zig modules and tests, like the folder structure basics etc. I thought I had a reasonable grasp, but I don't want to set things up the wrong way. </p>\n<p>I need to dig into this a bit more I think. I'll drop a message in the Zig discord and see if anyone there has some time to provide some guidance.</p>",
        "id": 531475941,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753743060
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> thank you. I've got the tests all passing again now.</p>",
        "id": 531478467,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753744451
    },
    {
        "content": "<p>I'm manually checking that all our tests are actually being ran with <code>zig build test</code> I've found a few places where they weren't.</p>",
        "id": 531479565,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753745079
    },
    {
        "content": "<p>For example the builtins weren't being tested, so I've had to hack a few TODO's in there for now to get that passing. But we're not using these yet and they need a refactor so we can clean that up/resolve it then.</p>",
        "id": 531479733,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753745161
    },
    {
        "content": "<p>The biggest problem is that the tests in our \"base\" module haven't been running <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 531480475,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753745542
    },
    {
        "content": "<p>If I make \"base\" use the <code>testing.refAllDeclsRecursive</code> we get this error... which I suspect means we need to upgrade our zig version because we aren't using <code>@fence</code> anywhere.</p>\n<div class=\"codehilite\"><pre><span></span><code>$ zig build test\ntest\nââ run echo\n   ââ run test\n      ââ zig test Debug native 1 errors\n/Users/luke/zig-macos-aarch64-0.14.0/lib/std/atomic.zig:13:27: error: @fence is deprecated, use other atomics to establish ordering\n        pub const fence = @compileError(&quot;@fence is deprecated, use other atomics to establish ordering&quot;);\n                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n</code></pre></div>",
        "id": 531480603,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753745616
    },
    {
        "content": "<p>Tests for <code>src/serialization/CompactWriter.zig</code> were also not running...</p>",
        "id": 531482464,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753746682
    },
    {
        "content": "<p>I've done the best I can restoring all the tests in <a href=\"https://github.com/roc-lang/roc/pull/8124\">https://github.com/roc-lang/roc/pull/8124</a></p>",
        "id": 531487444,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753749683
    },
    {
        "content": "<p>I'm not happy with how the tests are set up or that this happened or regressed in this way.</p>",
        "id": 531487510,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753749724
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> I basically neutered CompactWriter so that will need to be fixed.</p>",
        "id": 531487578,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753749765
    },
    {
        "content": "<p>To be fair, I pretty sure it was said that <code>testing.refAllDeclsRecursive</code> is not advised to be used at all. It is more a hack than something proper. I think in the actual zig codebase they just leave dead code dead. As long as you have actual usage of code it will stay live and tested.</p>",
        "id": 531487618,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1753749796
    },
    {
        "content": "<p>But yeah, it is a weird setup</p>",
        "id": 531487626,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1753749803
    },
    {
        "content": "<p>not sure what is best</p>",
        "id": 531487632,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1753749808
    },
    {
        "content": "<p>It definitely feels like a hack. </p>\n<p>I'm not happy with Zig's approach to dead code -- given the strict nature everywhere else. I feel like the should at least be a way to flag or check for it.</p>",
        "id": 531487810,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753749906
    },
    {
        "content": "<p>totally agree</p>",
        "id": 531488107,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1753750074
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/395097-compiler-development/topic/casual.20conversation/near/531245189\">said</a>:</p>\n<blockquote>\n<p>Instead of \"Canonicalizer\" what about shortening this and using \"Czer\" around the place?</p>\n<p>I can't think of a nicer/shorter description. My issue with  \"Canonicalizer\" is just that it's long</p>\n</blockquote>\n<p>In my head âczerâ reads as âCaesarâ</p>",
        "id": 531720016,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1753833992
    },
    {
        "content": "<p>I read it as Czar <span aria-label=\"royal\" class=\"emoji emoji-1fac5\" role=\"img\" title=\"royal\">:royal:</span></p>",
        "id": 531728888,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1753839698
    },
    {
        "content": "<p>CI looks to be broken <span aria-label=\"tear\" class=\"emoji emoji-1f972\" role=\"img\" title=\"tear\">:tear:</span></p>",
        "id": 531729414,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753840040
    },
    {
        "content": "<p>I restarted CI for <a href=\"https://github.com/roc-lang/roc/pull/8124\">https://github.com/roc-lang/roc/pull/8124</a> but it failed straight away</p>",
        "id": 531729506,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753840101
    },
    {
        "content": "<p>I'll try updating it and see if that helps</p>",
        "id": 531729566,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753840139
    },
    {
        "content": "<p>The word Czar is derived from Caesar!</p>",
        "id": 531729888,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1753840352
    },
    {
        "content": "<p>Does anyone have a linux machine and can repro/fix the issue in <a href=\"https://github.com/roc-lang/roc/pull/8124\">https://github.com/roc-lang/roc/pull/8124</a> please?</p>",
        "id": 531731116,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753841124
    },
    {
        "content": "<p>I think I got it. Pushed a fix and we'll see if CI's happy</p>",
        "id": 531732468,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753841963
    },
    {
        "content": "<p>Unsuccessful so far <span aria-label=\"tear\" class=\"emoji emoji-1f972\" role=\"img\" title=\"tear\">:tear:</span></p>",
        "id": 531735677,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753844050
    },
    {
        "content": "<p>Got it... merged <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 531746653,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753850584
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/395097-compiler-development/topic/casual.20conversation/near/531245189\">said</a>:</p>\n<blockquote>\n<p>Instead of \"Canonicalizer\" what about shortening this and using \"Czer\" around the place?</p>\n<p>I can't think of a nicer/shorter description. My issue with  \"Canonicalizer\" is just that it's long</p>\n</blockquote>\n<p>Czer looks like valid Polish <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span><br>\nThere's also another option: c14n (for Canonicalization), but <code>can</code> is the best</p>",
        "id": 531890688,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1753895353
    },
    {
        "content": "<p><strong>Problem</strong>: Numbers display with unnecessary scientific notation</p>\n<ul>\n<li><code>3.14f64</code> shows as <code>3.14e0</code> instead of <code>3.14</code></li>\n<li><code>1.5dec</code> shows as <code>1.5e0</code> instead of <code>1.5</code></li>\n</ul>\n<p><strong>Root Cause</strong>: Zig's default float formatting includes <code>e0</code> for whole decimal values</p>\n<p>How do we feel about formatting numbers with the <code>e</code> included for now like zig?</p>",
        "id": 532241798,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1754032542
    },
    {
        "content": "<p>I'm running with that for now. We can leave number formatting for a future PR</p>",
        "id": 532243972,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1754033302
    },
    {
        "content": "<p>What should <code>!(1 + 2)</code> evaluate to in the interpreter?</p>",
        "id": 532251801,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1754035708
    },
    {
        "content": "<blockquote>\n<p>What should <code>!(1 + 2)</code> evaluate to in the interpreter?</p>\n</blockquote>\n<p>A type error? <code>!</code> is for booleans right?</p>",
        "id": 532255505,
        "sender_full_name": "Anton",
        "timestamp": 1754036908
    },
    {
        "content": "<p>We represent booleans as a scalar 1 or 0 currently. So I thought maybe anything non-zero is truthy</p>",
        "id": 532255923,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1754037053
    },
    {
        "content": "<p>Hmm, I don't think we should represent booleans as 1 or 0 long term. It's not in the spirit of strict typing and many newer languages don't allow numbers for booleans anymore, I think it's pretty widely considered to be a mistake to do it like this, the way older languages did.</p>",
        "id": 532257018,
        "sender_full_name": "Anton",
        "timestamp": 1754037437
    },
    {
        "content": "<p>Some reasons for this; if your program does calculations (addition, substraction...) with what you believe should be booleans, something is going wrong and you need to know about it. If a function that expects a boolean is given 7 something has gone wrong as well, etc.</p>",
        "id": 532260090,
        "sender_full_name": "Anton",
        "timestamp": 1754038546
    },
    {
        "content": "<p>Yeah -- I feel the same. I've left them as \"truthy\" in my PR for now as it's working -- and I can move on to the next things. We can change the implementation easily enough.</p>",
        "id": 532269310,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1754041696
    },
    {
        "content": "<p>I think for the interpreter heap we will be using RocStr and RocList etc and just providing a zig allocator. I'm going to continue my refactor for <code>roc_alloc</code> and friends in the builtins in preparation to support strings and lists and other refcounted things in the interpreter.</p>",
        "id": 532272606,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1754042852
    },
    {
        "content": "<p>Seems reasonable</p>",
        "id": 532275965,
        "sender_full_name": "Anton",
        "timestamp": 1754044144
    },
    {
        "content": "<p>yeah this is just a type checking issue. What should happen here is: </p>\n<ul>\n<li>type checker unifies <code>!</code> with a number and sees that it's a mismatch</li>\n<li>a <code>Problem</code> gets appended for that and the Can node gets replaced with a crash</li>\n<li>if you're running the program anyway despite the compile-time error, when the interpreter gets here it encounters the crash node and crashes</li>\n</ul>",
        "id": 532281723,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1754046263
    },
    {
        "content": "<p>Should/does Roc do overflow checking? e.g. disallow <code>0u32 - 1u32</code>? Or should that just wrap?</p>",
        "id": 532470922,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1754153743
    },
    {
        "content": "<p>we crash on overflow</p>",
        "id": 532471554,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1754154234
    },
    {
        "content": "<p>We also have explicit num functions to wrap, saturate, or return a result</p>",
        "id": 532471586,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1754154256
    },
    {
        "content": "<p>If I write this in the REPL</p>\n<div class=\"codehilite\" data-code-language=\"repl\"><pre><span></span><code>&gt;&gt; count = 42\n&gt;&gt; \"Count: ${count}\"\n</code></pre></div>\n<p>Should we automatically call the number's <code>to_str</code> method under the hood and display <code>\"Count: 42\"</code> or would you expect a type mismatch?</p>",
        "id": 532492194,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1754172796
    },
    {
        "content": "<p>Personally, I've always wanted <code>to_str</code> though I know previously it was avoided cause we thought it best to force the user to explicitly pick formatting options and what not. Thus they need more control over the functional called...</p>\n<p>For the repl, I think it should definitely match whatever we do for the langauge as a whole.</p>",
        "id": 532493763,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1754174322
    },
    {
        "content": "<p>I don't think we should do that automatic conversion</p>",
        "id": 532503927,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1754184299
    },
    {
        "content": "<p>we've talked about it before</p>",
        "id": 532503935,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1754184304
    },
    {
        "content": "<p>I've been battling with linking issues on Windows, I'm deep down a rabbit hole and I've just realised something and I'm looking for some clarity. </p>\n<p>Is there any reason we aren't just compiling the host to a fully linked executable that just has the 1 undefined symbol for roc_entrypoint -- and then using LLD to link our roc_shim.a library that provides just that symbol? </p>\n<p>Am I missing something obvious? this feels <em>way</em> simpler than what I have been trying</p>",
        "id": 533073068,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1754476590
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span></p>",
        "id": 533073129,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1754476613
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span></p>",
        "id": 533073138,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1754476616
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/395097-compiler-development/topic/casual.20conversation/near/533073068\">said</a>:</p>\n<blockquote>\n<p>Is there any reason we aren't just compiling the host to a fully linked executable that just has the 1 undefined symbol for roc_entrypoint -- and then using LLD to link our roc_shim.a library that provides just that symbol? </p>\n<p>Am I missing something obvious? this feels <em>way</em> simpler than what I have been trying</p>\n</blockquote>\n<p>yeah the short answer is that it doesn't work with lld</p>",
        "id": 533078923,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1754478775
    },
    {
        "content": "<p>or any general-purpose linker</p>",
        "id": 533078958,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1754478788
    },
    {
        "content": "<p>this was basically the approach the surgical linker used</p>",
        "id": 533079009,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1754478805
    },
    {
        "content": "<p>Ah that's a shame... for a moment there I was getting excited</p>",
        "id": 533080602,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1754479425
    },
    {
        "content": "<p>yeah I went through those stages of grief back in the day <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 533081208,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1754479639
    },
    {
        "content": "<p>what are the linking symptoms you're seeing?</p>",
        "id": 533081371,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1754479693
    },
    {
        "content": "<p>Getting zig to put the crt runtime setup stuff into a library so we dont have to tell LLD about a custom entrypoint when linking. </p>\n<p>We can do it using a separate C file as a shim, but I feel like zig should be able to define the main entrypoint and have all the setup there even though it's a library.</p>\n<p>The goal is to have a setup that will be ergonomic for platform authors, but also doesn't rquire anything but default libraries to link it all together. </p>\n<p>I think I may have had a workable aolution before I went on a tangent trying to link an executable. I'll revisit tomorrow now I think.</p>",
        "id": 533083182,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1754480364
    },
    {
        "content": "<p>so Zig's first commit was 10 years ago yesterday! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 533099665,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1754485904
    },
    {
        "content": "<p>a nice reminder of how long it takes for a language to go from \"exists, but unknown\" to \"exists, and obscure\" to \"exists, and niche\" let alone mainstream <span aria-label=\"smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 533099796,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1754485938
    },
    {
        "content": "<p>Yeah, I think we previously got zig to put main and all the runtime things into a static library</p>",
        "id": 533193610,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1754523917
    },
    {
        "content": "<p>And that made linking simple</p>",
        "id": 533193614,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1754523925
    },
    {
        "content": "<p>I don't think we ever got rust to do it though</p>",
        "id": 533193623,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1754523936
    },
    {
        "content": "<p>Thus the c shim</p>",
        "id": 533193634,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1754523945
    },
    {
        "content": "<p>Can you remember where we did that? was it working on Windows?</p>",
        "id": 533193647,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1754523956
    },
    {
        "content": "<p>I don't think it was ever tested on Windows... Not sure though</p>",
        "id": 533193830,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1754524117
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/channel/395097-compiler-development/topic/casual.20conversation/near/533099665\">said</a>:</p>\n<blockquote>\n<p>so Zig's first commit was 10 years ago yesterday! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>\n</blockquote>\n<p>What's a Lizards favourite type of cake?. ...</p>",
        "id": 533213682,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1754540071
    },
    {
        "content": "<p>Ice cream cake... because lizards are cold-blooded <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 533213884,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1754540234
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/YKooxPN5FmszI5_3_Z_9Lm_h/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/YKooxPN5FmszI5_3_Z_9Lm_h/image.png\" title=\"image.png\"><img data-original-content-type=\"image/png\" data-original-dimensions=\"561x344\" src=\"/user_uploads/thumbnail/22008/YKooxPN5FmszI5_3_Z_9Lm_h/image.png/840x560.webp\"></a></div>",
        "id": 533220930,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1754545494
    },
    {
        "content": "<p>I'm excited for the possibilities that the interpreter creates for improving the debugging experience :)<br>\nIt feels like debugging tools are an afterthought in every language I've used.</p>",
        "id": 533843582,
        "sender_full_name": "Anton",
        "timestamp": 1754935899
    },
    {
        "content": "<p>yeah we can do some wild stuff</p>",
        "id": 533843631,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1754935920
    },
    {
        "content": "<p>should also be a lot easier to do stuff like this when <code>expect</code> fails - <a href=\"https://github.com/power-assert-js/power-assert\">https://github.com/power-assert-js/power-assert</a></p>",
        "id": 533843690,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1754935940
    },
    {
        "content": "<p>I really want that \"ASCII art diagram\" sort of thing to be what the end user sees whenever an <code>expect</code> fails, where we show all the intermediate values on every part of the expression in the <code>expect</code> (or the final expression in the block, if <code>expect</code> was given a block)</p>",
        "id": 533843798,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1754935997
    },
    {
        "content": "<p>Anyone have thoughts on Microsoft not replacing the recently-resigned GitHub CEO and instead having GitHub report directly to their CoreAI division?</p>\n<p>It seems to mean that they now think of GitHub as solely a repository for them to train CoPilot on.</p>",
        "id": 534814766,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1755426475
    },
    {
        "content": "<p>I've started moving my personal repo's to sourcehut a couple months back, as a way to support one of the alternatives to Github. I think it'd be healthy if the code forge space moves to a place where there's no longer a single dominant player.</p>\n<p>I haven't yet had the chance to collaborate on sourcehut with others using the the git/email flow they use. It's the thing that most turned me off from trying out sourcehut before, though I've kind of come to the point that I want to give it a serious try. One big advantage of the e-mail based collaboration approach is that it doesn't require contributors to a project to have accounts on the forge where the project is hosted, so e-mail based collaboration works well in a possible future where open source code is hosted across many forges.</p>",
        "id": 534842529,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1755459414
    },
    {
        "content": "<p>Does the zig compiler support multiline strings yet?</p>",
        "id": 544353117,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1760219583
    },
    {
        "content": "<p>Yes, I think so.</p>",
        "id": 544387794,
        "sender_full_name": "Fabian Schmalzried",
        "timestamp": 1760263797
    },
    {
        "content": "<p>Do you know what syntax we landed on?</p>",
        "id": 544412914,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1760286500
    },
    {
        "content": "<p><code>\\\\</code> just like Zig, although I think right now we have <code>\"\"\"</code></p>",
        "id": 544414318,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1760287631
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/pull/8289\">https://github.com/roc-lang/roc/pull/8289</a></p>",
        "id": 544434235,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1760309619
    },
    {
        "content": "<p>awesome, thanks!</p>",
        "id": 544439733,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1760316516
    },
    {
        "content": "<p>Randomly spotted a small typo from <a href=\"https://github.com/roc-lang/roc/issues/8267\">#8267</a> (fix in <a href=\"https://github.com/roc-lang/roc/issues/8298\">#8298</a>).</p>\n<p>I suspect a contributing factor to that not being noticed is the very large snapshot diff that got produced there lead to a lot of things to review - and so of course it's less likely issues will be caught.</p>\n<p>The bulk of the snapshot diff there is coming from adjusting the line/col indicators in snapshots in the TOKENS and PARSE sections, and I'd contend that these are pretty low-value parts of the diff.</p>",
        "id": 545160757,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1760585336
    },
    {
        "content": "<p>I'd like to suggest that, by default at least, TOKENS and PARSE sections in snapshots should be without any line/col numbers</p>",
        "id": 545160826,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1760585391
    },
    {
        "content": "<p>This will remove a lot of snapshot churn and let us focus review effort on things that matter (more).</p>",
        "id": 545160869,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1760585417
    },
    {
        "content": "<p>Thoughts?</p>",
        "id": 545160871,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1760585420
    },
    {
        "content": "<p>Implemented here: <a href=\"https://github.com/roc-lang/roc/pull/8299\">https://github.com/roc-lang/roc/pull/8299</a></p>",
        "id": 545167818,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1760589146
    },
    {
        "content": "<p>this officially type checks in my static dispatch types branch <span aria-label=\"confetti\" class=\"emoji emoji-1f38a\" role=\"img\" title=\"confetti\">:confetti:</span></p>\n<div class=\"codehilite\"><pre><span></span><code>StaticDispatchBasic := [Val(Str)].{\n  to_str : StaticDispatchBasic -&gt; Str\n  to_str = |StaticDispatchBasic.Val(x)| x\n}\n\nhelper : a -&gt; Str where [a.to_str : a -&gt; Str]\nhelper = |a| a.to_str()\n\nmain : Str\nmain = helper(StaticDispatchBasic.Val(&quot;hello&quot;))\n</code></pre></div>",
        "id": 545681007,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1760731603
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"456814\">Christian Dereck</span> has marked this topic as resolved.</p>",
        "id": 545819644,
        "sender_full_name": "Notification Bot",
        "timestamp": 1760869441
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> has marked this topic as unresolved.</p>",
        "id": 545824674,
        "sender_full_name": "Notification Bot",
        "timestamp": 1760874831
    },
    {
        "content": "<p>So hyped seeing all these features rolling in... feels like we're getting close <img alt=\":yay:\" class=\"emoji\" src=\"https://avatars.zulip.com/22008/emoji/images/e16c6dae.gif\" title=\"yay\"> :</p>",
        "id": 545863638,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1760915994
    },
    {
        "content": "<p>Random PSA on serialization and stability of structs.</p>\n<p>We have some structs with labels like:</p>\n<blockquote>\n<p>/// NOTE: Field order matters for cross-platform compatibility! Keep <code>module_kind</code> at the end.</p>\n</blockquote>\n<p>In zig, this is meaningless. Zig reorders fields by default.<br>\nThe struct has to either be a <code>packed struct</code> or an <code>extern struct</code> to avoid re-ordering.<br>\nIf we have any serialization bugs, this could be why.</p>",
        "id": 547167160,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1761521143
    },
    {
        "content": "<p>Good pickup</p>",
        "id": 547167188,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1761521182
    },
    {
        "content": "<p>TIL, thanks! Feel free to change that comment <span aria-label=\"smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 547168587,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1761522946
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc-playground/pull/20\">roc-playground #20</a> &lt;-- FYI I updated the playground to latest main, everything looks to be working nicely <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 547168723,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1761523123
    },
    {
        "content": "<p><code>roc check iDoNotExist.roc</code> gives no errors. It's probably just missing a report for that case, but I assume that there are several errors that are just ignored. Should I try to add a generic error report to make it visible if the check fails but there are no reports?</p>",
        "id": 547471937,
        "sender_full_name": "Fabian Schmalzried",
        "timestamp": 1761651990
    },
    {
        "content": "<p>yeah would be great to have a dedicated error for that case!</p>",
        "id": 547472502,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1761652184
    }
]