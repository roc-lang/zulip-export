[
    {
        "content": "<p>Is anyone interested in taking over work on inspect? I currently have defined all of the userland types and proved it can work, but have not done anything on the compiler side:</p>\n<ul>\n<li>add a built-in module</li>\n<li>add auto derive code (might need some special work around due to all types always having inspect. So opaque types have a default inspect that then can override)</li>\n<li>integrate with <code>dbg</code></li>\n</ul>\n<p>I think my time is going to be more scattered for a bit and I think it will be more valuable for me to either work on smaller things and/or things that I have a much better understanding of.</p>",
        "id": 372660028,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1688576384
    },
    {
        "content": "<p>Also, I guess I could post this in contributing, but not sure how easy/hard it would be for a newer contributor.</p>",
        "id": 372660632,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1688576498
    },
    {
        "content": "<p>I think the head tasks (adding the built-in module, performing type inference + obligation checking in the front-end) are relatively straightforward. The auto-derivers and getting <code>dbg</code> to work with this are harder, but I am happy to mentor or guide anyone interested. We also have a bunch of well-scoped PRs for previous efforts in this space (<a href=\"https://github.com/roc-lang/roc/issues/4195\">https://github.com/roc-lang/roc/issues/4195</a>, <a href=\"https://github.com/roc-lang/roc/issues/4202\">https://github.com/roc-lang/roc/issues/4202</a>)</p>",
        "id": 372711594,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1688590351
    },
    {
        "content": "<p>For anyone interested, my current work is on the <a href=\"https://github.com/roc-lang/roc/tree/inspect-testing\">inspect-testing</a> branch. This <a href=\"https://github.com/roc-lang/roc/blob/inspect-testing/examples/Inspect.roc\">Inspect.roc</a> should essentially match the final file that will be added to the builtins. There  is also <a href=\"https://github.com/roc-lang/roc/blob/inspect-testing/examples/LogFormatter.roc\">LogFormatter.roc</a> which is probably pretty close to the output we want for <code>dbg</code> to use (though maybe it will want some color or other minor formatting changes).</p>",
        "id": 372715048,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1688591634
    },
    {
        "content": "<p>I think <code>dbg</code> might not be that hard because it can be very similar to <code>roc_alloc</code> (except <code>roc_dbg</code>) - so there's something very similar already in the code base</p>",
        "id": 372721621,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1688594421
    },
    {
        "content": "<p>I think the tricky thing with dbg will be special-casing the ability resolution and injecting the appropriate calls to the specialized inspect during code generation</p>",
        "id": 372722122,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1688594643
    },
    {
        "content": "<p>ah gotcha <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 372723544,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1688595328
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> do we have any working version of this? Should we consider x-posting in <a class=\"stream\" data-stream-id=\"316715\" href=\"/#narrow/stream/316715-contributing\">#contributing</a> ?</p>",
        "id": 375100170,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1689297302
    },
    {
        "content": "<p>We just have the userland code I linked above. It works, but is far from all the work listed in this thread. Yeah, probably should cross post to see if anyone is interested.</p>",
        "id": 375110518,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1689302825
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Help.20optimising.20my.20BF.20interpreter/near/377618425\">said</a>:</p>\n<blockquote>\n<p>I have definitely seen the dbg issues where after x dbgs, crashes</p>\n</blockquote>\n<p>I think we should bump priority on this - not only would having <code>Inspect</code> + <code>roc_dbg</code> (and maybe <code>roc_expect</code>? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span>) fix issues like <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> , it would also mean that <code>expect</code> and <code>dbg</code> would immediately Just Work on Windows, which would unblock Windows nightlies</p>\n<p>in the Detroit Tech Watch Q&amp;A last week, someone was saying \"I'm interested in Roc but can't use it because I'm on Windows\" - which I realized is currently true for anyone who doesn't want to build from source, since we don't have Windows nightlies (due to their being blocked on <code>expect</code> and <code>dbg</code>, which Inspect would unblock)</p>",
        "id": 377620671,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1690037385
    }
]