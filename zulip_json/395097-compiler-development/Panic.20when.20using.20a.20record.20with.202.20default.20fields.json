[
    {
        "content": "<p>I ran into several issues, which I narrowed down to the fact that I'm trying to use a record with two default fields.</p>\n<p>I'm defining a little dot-like DSL to build graphs (for the <code>dot-dsl</code> exercism exercise). Here's the code:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">app</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">pf</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"n\">platform</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/roc-lang/basic-cli/releases/download/0.15.0/SlwdbJ-3GR7uBWQo6zlmYWNYOxnvo8r6YABXD-45UOw.tar.br\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">import</span><span class=\"w\"> </span><span class=\"nn\">pf.Stdout</span>\n\n<span class=\"kt\">Color</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Black</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Red</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Green</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Blue</span><span class=\"p\">]</span>\n<span class=\"kt\">Style</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Dotted</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Solid</span><span class=\"p\">]</span>\n\n<span class=\"kt\">DslCommand</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">AddEdge</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">color</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Color</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">style</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Style</span><span class=\"w\"> </span><span class=\"p\">}]</span>\n\n<span class=\"nf\">edge</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">color</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"kt\">Color</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">style</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"kt\">Style</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">DslCommand</span>\n<span class=\"nf\">edge</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">id1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">id2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">color</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"kt\">Black</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">style</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"kt\">Solid</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kt\">AddEdge</span><span class=\"w\"> </span><span class=\"n\">id1</span><span class=\"w\"> </span><span class=\"n\">id2</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">color</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">style</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"nf\">main</span><span class=\"w\"> </span><span class=\"ow\">=</span>\n<span class=\"w\">    </span><span class=\"n\">result1</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">edge</span><span class=\"w\"> </span><span class=\"s\">\"a\"</span><span class=\"w\"> </span><span class=\"s\">\"b\"</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"w\">    </span><span class=\"n\">result1</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Inspect</span><span class=\"o\">.</span><span class=\"n\">toStr</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"o\">!</span>\n\n<span class=\"w\">    </span><span class=\"n\">result2</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">edge</span><span class=\"w\"> </span><span class=\"s\">\"a\"</span><span class=\"w\"> </span><span class=\"s\">\"b\"</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">color</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Blue</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"n\">result2</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Inspect</span><span class=\"o\">.</span><span class=\"n\">toStr</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"o\">!</span>\n</code></pre></div>\n<p>This causes an LLVM error (with a pretty scary <span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span> emoji):</p>\n<div class=\"codehilite\"><pre><span></span><code>Call parameter type does not match function signature!\n{} zeroinitializer\n i8  call fastcc void @&quot;#UserApp_edge_7988d89080438f51df37e0664fee86ae858164dcb95eaeb555d2849513259182&quot;(ptr %const_str_store, ptr %const_str_store1, {} zeroinitializer, ptr %result_value), !dbg !1889\n\n\nFunction &quot;#UserApp_main_ca98df76e744faeef21fb76918295997c9c1b552a2e623d6fc162a11de8fae&quot; failed LLVM verification in NON-OPTIMIZED build. Its content was:\n\ndefine internal fastcc { { %str.RocStr, {} }, {} } @&quot;#UserApp_main_ca98df76e744faeef21fb76918295997c9c1b552a2e623d6fc162a11de8fae&quot;() !dbg !1888 {\nentry:\n  %result_value2 = alloca %str.RocStr, align 8\n  %result_value = alloca { %str.RocStr, %str.RocStr, { i8, i1 } }, align 8\n  %const_str_store1 = alloca %str.RocStr, align 8\n  %const_str_store = alloca %str.RocStr, align 8\n  store %str.RocStr { ptr inttoptr (i64 97 to ptr), i64 0, i64 -9151314442816847872 }, ptr %const_str_store, align 8, !dbg !1889\n  store %str.RocStr { ptr inttoptr (i64 98 to ptr), i64 0, i64 -9151314442816847872 }, ptr %const_str_store1, align 8, !dbg !1889\n  call fastcc void @&quot;#UserApp_edge_7988d89080438f51df37e0664fee86ae858164dcb95eaeb555d2849513259182&quot;(ptr %const_str_store, ptr %const_str_store1, {} zeroinitializer, ptr %result_value), !dbg !1889\n  call fastcc void @&quot;#Attr_#dec_2&quot;(ptr %const_str_store), !dbg !1889\n  call fastcc void @&quot;#Attr_#dec_2&quot;(ptr %const_str_store1), !dbg !1889\n  call fastcc void @Inspect_toStr_5fea3a382f6b6c4a2af77ea4365b5abbdda8b93d1f0b9b895dc2a48489fb2(ptr %result_value, ptr %result_value2), !dbg !1889\n  %call = call fastcc { %str.RocStr, {} } @Stdout_line_172247c57cf29182b738e1647bff697cbe655ff06cf0aee2ca31b6b397327385(ptr %result_value2), !dbg !1889\n  %call3 = call fastcc { { %str.RocStr, {} }, {} } @Task_await_47379a71f6fa75b326383965b5622141f57df12cc22d7140acdf38f0ac8dbc6d({ %str.RocStr, {} } %call, {} zeroinitializer), !dbg !1889\n  ret { { %str.RocStr, {} }, {} } %call3, !dbg !1889\n}\nthread &#39;main&#39; panicked at crates/compiler/gen_llvm/src/llvm/build.rs:5810:21:\nðŸ˜± LLVM errors when defining function &quot;#UserApp_main_ca98df76e744faeef21fb76918295997c9c1b552a2e623d6fc162a11de8fae&quot;; I wrote the full LLVM IR to &quot;bug-edge.ll&quot;\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>\n<p>If you remove the two lines with <code>result2</code> (i.e., the last two lines), then the code runs fine and outputs this:</p>\n<div class=\"codehilite\"><pre><span></span><code>(AddEdge &quot;a&quot; &quot;b&quot; {color: Black, style: Solid})\n</code></pre></div>\n<p>And similarly, if you keep the two lines with <code>result2</code> and remove the two lines with <code>result1</code>, then the code also runs fine and outputs this:</p>\n<div class=\"codehilite\"><pre><span></span><code>(AddEdge &quot;a&quot; &quot;b&quot; {color: Blue, style: Solid})\n</code></pre></div>\n<p>Next, I tried to keep <code>result1</code> and <code>result2</code>, and add <code>result3</code> like this:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">result3</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">edge</span><span class=\"w\"> </span><span class=\"s\">\"a\"</span><span class=\"w\"> </span><span class=\"s\">\"b\"</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">color</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Blue</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">style</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Dotted</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"n\">result3</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Inspect</span><span class=\"o\">.</span><span class=\"n\">toStr</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"o\">!</span>\n</code></pre></div>\n<p>The program still panics, but with a different error message:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;main&#39; panicked at crates/compiler/gen_llvm/src/llvm/build.rs:5748:19:\nError in alias analysis: error in module ModName(&quot;UserApp&quot;), function definition FuncName(&quot;\\x11\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\&#39;\\xae\\xa4\\xef\\x8b\\xd4\\xa4\\x87&quot;), definition of value binding ValueId(5): expected type &#39;((heap_cell,), (heap_cell,), ((), ()))&#39;, found type &#39;((heap_cell,), (heap_cell,), ())&#39;\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>\n<p>And if I try to add the following <code>result4</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">result4</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">edge</span><span class=\"w\"> </span><span class=\"s\">\"a\"</span><span class=\"w\"> </span><span class=\"s\">\"b\"</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">style</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Dotted</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"n\">result4</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Inspect</span><span class=\"o\">.</span><span class=\"n\">toStr</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"o\">!</span>\n</code></pre></div>\n<p>The code no longer compiles. I get the following error instead:</p>\n<div class=\"codehilite\"><pre><span></span><code>â”€â”€ TYPE MISMATCH in bug-edge.roc â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n\nThis 3rd argument to edge has an unexpected type:\n\n26â”‚      result4 = edge &quot;a&quot; &quot;b&quot; { style: Dotted }\n                                ^^^^^^^^^^^^^^^^^\n\nThe argument is a record of type:\n\n    { style : [â€¦] }\n\nBut edge needs its 3rd argument to be:\n\n    {\n        color : [\n            Black,\n            Blue,\n            Green,\n            Red,\n        ],\n        style : [â€¦],\n    }\n\nTip: Looks like the color field is missing.\n\nâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n</code></pre></div>\n<p>Interestingly, if I move the definition of the <code>edge</code> function to a separate module, then everything works fine:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"o\">#</span><span class=\"w\"> </span><span class=\"kt\">Edge</span><span class=\"o\">.</span><span class=\"n\">roc</span>\n<span class=\"kr\">module</span><span class=\"w\"> </span><span class=\"err\">[edge]</span>\n\n<span class=\"nn\">Color</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Black</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Red</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Green</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Blue</span><span class=\"p\">]</span>\n<span class=\"kt\">Style</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Dotted</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Solid</span><span class=\"p\">]</span>\n\n<span class=\"kt\">DslCommand</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">AddEdge</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">color</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Color</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">style</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Style</span><span class=\"w\"> </span><span class=\"p\">}]</span>\n\n<span class=\"nf\">edge</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">color</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"kt\">Color</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">style</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"kt\">Style</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">DslCommand</span>\n<span class=\"nf\">edge</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">id1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">id2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">color</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"kt\">Black</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">style</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"kt\">Solid</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kt\">AddEdge</span><span class=\"w\"> </span><span class=\"n\">id1</span><span class=\"w\"> </span><span class=\"n\">id2</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">color</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">style</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>and:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">app</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">pf</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"n\">platform</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/roc-lang/basic-cli/releases/download/0.15.0/SlwdbJ-3GR7uBWQo6zlmYWNYOxnvo8r6YABXD-45UOw.tar.br\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">import</span><span class=\"w\"> </span><span class=\"nn\">pf.Stdout</span>\n<span class=\"kr\">import</span><span class=\"w\"> </span><span class=\"nn\">Edge</span><span class=\"w\"> </span><span class=\"n\">exposing</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">edge</span><span class=\"p\">]</span>\n\n<span class=\"nf\">main</span><span class=\"w\"> </span><span class=\"ow\">=</span>\n<span class=\"w\">    </span><span class=\"n\">result1</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">edge</span><span class=\"w\"> </span><span class=\"s\">\"a\"</span><span class=\"w\"> </span><span class=\"s\">\"b\"</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"w\">    </span><span class=\"n\">result1</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Inspect</span><span class=\"o\">.</span><span class=\"n\">toStr</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"o\">!</span>\n\n<span class=\"w\">    </span><span class=\"n\">result2</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">edge</span><span class=\"w\"> </span><span class=\"s\">\"a\"</span><span class=\"w\"> </span><span class=\"s\">\"b\"</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">color</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Blue</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"n\">result2</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Inspect</span><span class=\"o\">.</span><span class=\"n\">toStr</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"o\">!</span>\n\n<span class=\"w\">    </span><span class=\"n\">result3</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">edge</span><span class=\"w\"> </span><span class=\"s\">\"a\"</span><span class=\"w\"> </span><span class=\"s\">\"b\"</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">color</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Blue</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">style</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Dotted</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"n\">result3</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Inspect</span><span class=\"o\">.</span><span class=\"n\">toStr</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"o\">!</span>\n\n<span class=\"w\">    </span><span class=\"n\">result4</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">edge</span><span class=\"w\"> </span><span class=\"s\">\"a\"</span><span class=\"w\"> </span><span class=\"s\">\"b\"</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">style</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Dotted</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"n\">result4</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Inspect</span><span class=\"o\">.</span><span class=\"n\">toStr</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"o\">!</span>\n</code></pre></div>\n<p>This program outputs:</p>\n<div class=\"codehilite\"><pre><span></span><code>(AddEdge &quot;a&quot; &quot;b&quot; {color: Black, style: Solid})\n(AddEdge &quot;a&quot; &quot;b&quot; {color: Blue, style: Solid})\n(AddEdge &quot;a&quot; &quot;b&quot; {color: Blue, style: Dotted})\n(AddEdge &quot;a&quot; &quot;b&quot; {color: Black, style: Dotted})\n</code></pre></div>\n<p>Would you like me to file a GitHub issue with all this detail?</p>",
        "id": 478614430,
        "sender_full_name": "AurÃ©lien Geron",
        "timestamp": 1729736190
    },
    {
        "content": "<p>I think we have a funky bug around the default/optional record thing. Maybe that is the issue here. Can you try without the <code>?</code>?</p>",
        "id": 478614675,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729736401
    },
    {
        "content": "<p>I'm guessing it's something to do with specialization of the top level <code>edge</code>. Maybe when it's in another module it can have multiple specialisations.</p>",
        "id": 478614871,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729736522
    },
    {
        "content": "<p>Sure, I'll try now</p>",
        "id": 478614945,
        "sender_full_name": "AurÃ©lien Geron",
        "timestamp": 1729736552
    },
    {
        "content": "<p>Like this maybe <a href=\"https://github.com/roc-lang/roc/issues/6423\">https://github.com/roc-lang/roc/issues/6423</a></p>",
        "id": 478615058,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729736637
    },
    {
        "content": "<p>Works like a charm.</p>",
        "id": 478615063,
        "sender_full_name": "AurÃ©lien Geron",
        "timestamp": 1729736641
    },
    {
        "content": "<p>However, I had to fully specify the records in <code>result1</code> and <code>result2</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">app</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">pf</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"n\">platform</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/roc-lang/basic-cli/releases/download/0.15.0/SlwdbJ-3GR7uBWQo6zlmYWNYOxnvo8r6YABXD-45UOw.tar.br\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">import</span><span class=\"w\"> </span><span class=\"nn\">pf.Stdout</span>\n\n<span class=\"kt\">Color</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Black</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Red</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Green</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Blue</span><span class=\"p\">]</span>\n<span class=\"kt\">Style</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Dotted</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Solid</span><span class=\"p\">]</span>\n\n<span class=\"kt\">DslCommand</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">AddEdge</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">color</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Color</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">style</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Style</span><span class=\"w\"> </span><span class=\"p\">}]</span>\n\n<span class=\"nf\">edge</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">color</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Color</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">style</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Style</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">DslCommand</span>\n<span class=\"nf\">edge</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">id1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">id2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">color</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">style</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kt\">AddEdge</span><span class=\"w\"> </span><span class=\"n\">id1</span><span class=\"w\"> </span><span class=\"n\">id2</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">color</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">style</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"nf\">main</span><span class=\"w\"> </span><span class=\"ow\">=</span>\n<span class=\"w\">    </span><span class=\"n\">result1</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">edge</span><span class=\"w\"> </span><span class=\"s\">\"a\"</span><span class=\"w\"> </span><span class=\"s\">\"b\"</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">color</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Black</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">style</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Solid</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"n\">result1</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Inspect</span><span class=\"o\">.</span><span class=\"n\">toStr</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"o\">!</span>\n\n<span class=\"w\">    </span><span class=\"n\">result2</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">edge</span><span class=\"w\"> </span><span class=\"s\">\"a\"</span><span class=\"w\"> </span><span class=\"s\">\"b\"</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">color</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Blue</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">style</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Solid</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"n\">result2</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Inspect</span><span class=\"o\">.</span><span class=\"n\">toStr</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"o\">!</span>\n</code></pre></div>",
        "id": 478615183,
        "sender_full_name": "AurÃ©lien Geron",
        "timestamp": 1729736716
    },
    {
        "content": "<p>Yeah, I'm pretty convinced it's that bug. Would you mind adding a comment in there with your workaround.. using a separate module?</p>",
        "id": 478615403,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729736869
    },
    {
        "content": "<p>Yes, I tested issue <a href=\"https://github.com/roc-lang/roc/issues/6423\">#6423</a>: putting the definition of the <code>add</code> function in a separate module works around the issue. Here's <a href=\"https://github.com/roc-lang/roc/issues/6423#issuecomment-2434113082\">my comment</a></p>",
        "id": 478631136,
        "sender_full_name": "AurÃ©lien Geron",
        "timestamp": 1729744722
    },
    {
        "content": "<p>Maybe that will help someone fix the bug. No idea why imported functions can be specialized multiple tiles but module local functions can't</p>",
        "id": 478636386,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729748673
    },
    {
        "content": "<p>But really useful workaround</p>",
        "id": 478636390,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729748678
    }
]