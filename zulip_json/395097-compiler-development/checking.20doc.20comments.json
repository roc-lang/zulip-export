[
    {
        "content": "<p>I'd <em>really</em> like to have type checking in doc comment code blocks right now... I've manually gone through and updated all the docs for basic-cli and basic-websever by hand and probably have broken things along the way. Sam has helped pick up some snake_case and PNC issues, but without copying the snippet into an editor it's hard to know if it's ok. </p>\n<p>Not sure if it's a big job to add this. Even nicer, would be if the language server could provide the orange and red squiggles in the editor <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 492831837,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736461960
    },
    {
        "content": "<p>If we have a markdown library this is trivial to automate</p>",
        "id": 492831980,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736462023
    },
    {
        "content": "<p>It is a big job to automate this</p>",
        "id": 492832175,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736462098
    },
    {
        "content": "<p>We currently just parse doc comments as text, and highlight them totally separately for the docs</p>",
        "id": 492832281,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736462137
    },
    {
        "content": "<p>I know but if we can convert it to markdown we could do it trivially</p>",
        "id": 492832422,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736462182
    },
    {
        "content": "<p>We'd now need to parse them in addition to the rest of the code</p>",
        "id": 492832434,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736462189
    },
    {
        "content": "<p>Let me think about that</p>",
        "id": 492832478,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736462210
    },
    {
        "content": "<p>I mean the type checking and validating the blocks</p>",
        "id": 492832549,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736462249
    },
    {
        "content": "<p>We'd probably want to do our own \"close-to-markdown\" parsing anyway, since the long-term goal is for us to have basically no dependencies (LLVM and Zig)</p>",
        "id": 492832561,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736462252
    },
    {
        "content": "<p>That <em>could</em> work</p>",
        "id": 492832673,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736462290
    },
    {
        "content": "<p>All you need to parse out is the code blocks which we already do</p>",
        "id": 492832829,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736462358
    },
    {
        "content": "<p>Even if it's parsed as markdown for us, there's still a lot of work waiting because code blocks for docs need to be treated differently in a few different ways</p>",
        "id": 492832853,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736462374
    },
    {
        "content": "<p>And then just throw them in a module or something and execute them</p>",
        "id": 492832884,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736462392
    },
    {
        "content": "<p>Of course  thereâ€™s some massaging to do</p>",
        "id": 492832954,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736462406
    },
    {
        "content": "<p>The massaging is the part I'm expecting is a lot of effort</p>",
        "id": 492832980,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736462420
    },
    {
        "content": "<p>But yes in theory it's simple</p>",
        "id": 492832991,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736462426
    },
    {
        "content": "<p>Very doable if someone is committed</p>",
        "id": 492833051,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736462452
    },
    {
        "content": "<p>We don't want to support full markdown... at least I know Richard has mentioned we don't want to support html or anything like that in Doc comments.</p>",
        "id": 492834073,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736462866
    },
    {
        "content": "<p>One option would be just to provide this check with <code>roc docs</code> where it's being parsed anyway</p>",
        "id": 492834222,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736462926
    },
    {
        "content": "<p>We can also do it during roc check as a separate check</p>",
        "id": 492834297,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736462967
    },
    {
        "content": "<p>So the typical path ignores comments, keeping things fast... and then for those who want to check the CI run that checks <code>roc docs</code> etc will pick it up</p>",
        "id": 492834302,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736462970
    },
    {
        "content": "<p>Like Rust does</p>",
        "id": 492834305,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736462971
    },
    {
        "content": "<p>Sounds like we want to parse our own partial markdown. That means basically:</p>\n<ul>\n<li>Headers</li>\n<li>Bullet and numbered lists</li>\n<li>Paragraphs</li>\n<li>Links</li>\n<li>Links to Roc types/values</li>\n<li>Code blocks</li>\n</ul>",
        "id": 492834308,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736462972
    },
    {
        "content": "<p>And probably bold/italics</p>",
        "id": 492834357,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736462997
    },
    {
        "content": "<p>We are gonna be doing some nice caching from the results of parsing and canonicalization</p>",
        "id": 492834359,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736462998
    },
    {
        "content": "<p>We should take advantage of the parsing work we already have in the parse crate and do it there</p>",
        "id": 492834433,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736463021
    },
    {
        "content": "<p>26 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"395097\" href=\"/#narrow/channel/395097-compiler-development/topic/casual.20conversation\">#compiler development &gt; casual conversation</a> by <span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span>.</p>",
        "id": 492834771,
        "sender_full_name": "Notification Bot",
        "timestamp": 1736463164
    },
    {
        "content": "<p>Is there a minimal scope here where we just parse out the <code>## ```roc</code> and <code>## ``` </code>part and do something with it... we could leave the other parts for a future expansion right?</p>",
        "id": 492835133,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736463329
    },
    {
        "content": "<p>I think it's not that much effort to add the other stuff, the code blocks are the harder part IMO.</p>",
        "id": 492835267,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736463380
    },
    {
        "content": "<p>But we can definitely start with just code blocks</p>",
        "id": 492835354,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736463425
    },
    {
        "content": "<p>It'd help break this up</p>",
        "id": 492835366,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736463433
    },
    {
        "content": "<p>I'm just thinking that another way to break this up is to first parse as markdown and leave code blocks as text blobs</p>",
        "id": 492835417,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736463465
    },
    {
        "content": "<p>And after that, parse the code blocks themselves</p>",
        "id": 492835444,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736463476
    },
    {
        "content": "<p>But if we're optimizing for getting code blocks type-checked and everything else is okay not worrying about, then we can run in a straight line, sure</p>",
        "id": 492835630,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736463551
    },
    {
        "content": "<p>First, it'd be nice to get Richard's agreement on this, since it's a big change.</p>",
        "id": 492835897,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736463658
    },
    {
        "content": "<p>It's one thing if he thinks this is just too much work compared to other important stuff.</p>",
        "id": 492835941,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736463682
    },
    {
        "content": "<p>But it felt like the pushback last time in <a class=\"stream-topic\" data-stream-id=\"316715\" href=\"/#narrow/channel/316715-contributing/topic/Ironing.20out.20doc.20code.20blocks\">#contributing &gt; Ironing out doc code blocks</a> was around docs always needing to type check and that getting in the way of them being useful teaching tools</p>",
        "id": 492836143,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736463771
    },
    {
        "content": "<p>But if we implement the <code>...</code> keyword first, then we can probably take that pain away</p>",
        "id": 492836201,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736463794
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/channel/395097-compiler-development/topic/checking.20doc.20comments/near/492834073\">said</a>:</p>\n<blockquote>\n<p>We don't want to support full markdown... at least I know Richard has mentioned we don't want to support html or anything like that in Doc comments.</p>\n</blockquote>\n<p>specifically I don't want to support escaping to arbitrary HTML</p>",
        "id": 492837748,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1736464519
    },
    {
        "content": "<p>so that we aren't coupled to only being able to output docs to things that can render html</p>",
        "id": 492837784,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1736464539
    },
    {
        "content": "<p>e.g. if we want to be able to render in an editor that doesn't include a whole browser</p>",
        "id": 492837804,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1736464553
    },
    {
        "content": "<p>also yeah, I think if we have <code>...</code> I'd be open to trying this</p>",
        "id": 492837942,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1736464598
    },
    {
        "content": "<p>As nice as this is, we should probably put it below everything else we're working on for 0.1.0</p>",
        "id": 492838603,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736464913
    },
    {
        "content": "<p>But if someone really wanted to implement this, I'd be happy to help them do it! It'd be very valuable</p>",
        "id": 492838699,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736464948
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/channel/395097-compiler-development/topic/checking.20doc.20comments/near/492835630\">said</a>:</p>\n<blockquote>\n<p>But if we're optimizing for getting code blocks type-checked and everything else is okay not worrying about, then we can run in a straight line, sure</p>\n</blockquote>\n<p>My thinking here for why we might want to prioritise this part of it sooner than later is that it helps ensure documentation quality (particularly with all the breaking and syntax changes) across the ecosystem. </p>\n<p>It's a bit of chicken and egg, but quality documentation for all the platforms &amp; packages helps reinforce the culture around high quality roc packages, and for new people experiencing roc (who may not be experienced with the magic of Elm ecosystem)</p>\n<p>I've been debating with myself how I would prioritise this, but I'm thinking it would be nice to have (just this code block part) before Richard's blog post and we expect a few new people to be visiting and checking things out. </p>\n<p>So somewhere after <code>|args|</code> and  <code>\"string ${interpolation}</code>, but before we make the static-dispatch/abilities/module params etc changes.</p>",
        "id": 492841480,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736466228
    },
    {
        "content": "<p>Quick note in case it's useful: I know from integrating <code>libcmark</code> into my static site builder platform that it will by default escape HTML, only parse it out if you pass a special flag.</p>",
        "id": 492892171,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1736494400
    },
    {
        "content": "<p>We could maybe <em>start</em> with using a library, which would get us to the end result faster</p>",
        "id": 492911870,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736502169
    },
    {
        "content": "<p>Just remember that Roc doesn't want to have any deps besides LLVM and Zig in the longterm</p>",
        "id": 492911930,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736502193
    },
    {
        "content": "<p>and probably Blake3. I could see an argument for a markdown parser being a dependency though</p>",
        "id": 492957318,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1736517876
    },
    {
        "content": "<p>You could find a minimal one with a liberal license and just vendor it</p>",
        "id": 492962241,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736519469
    }
]