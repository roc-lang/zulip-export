[
    {
        "content": "<p>I am manually writing out some mono ir in rust. I am trying to call the <code>List.sublist</code> builtin. To do that, I first have to create a symbol that stores the parameters. To bind the symbol I have to specify the layout.</p>\n<p>example code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">sublist_params_sym</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">env</span><span class=\"p\">.</span><span class=\"n\">unique_symbol</span><span class=\"p\">();</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">sublist_params_expr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Expr</span>::<span class=\"n\">Struct</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">.</span><span class=\"n\">arena</span><span class=\"p\">.</span><span class=\"n\">alloc</span><span class=\"p\">([</span><span class=\"n\">start_sym</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rest_len_sym</span><span class=\"p\">]));</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">sublist_params_layout</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">???</span><span class=\"p\">;</span>\n<span class=\"n\">stmt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Stmt</span>::<span class=\"n\">Let</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"n\">sublist_params_sym</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">sublist_params_expr</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">sublist_params_layout</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">env</span><span class=\"p\">.</span><span class=\"n\">arena</span><span class=\"p\">.</span><span class=\"n\">alloc</span><span class=\"p\">(</span><span class=\"n\">stmt</span><span class=\"p\">),</span>\n<span class=\"w\"> </span><span class=\"p\">);</span>\n</code></pre></div>\n<p>I tried to build the layout manually, but the fields are private, so this must be the wrong way to generate it:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">sublist_params_layout</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">layout_cache</span><span class=\"p\">.</span><span class=\"n\">interner</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">Layout</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">repr</span>: <span class=\"nc\">LayoutWrapper</span>::<span class=\"n\">Direct</span><span class=\"p\">(</span><span class=\"n\">LayoutRepr</span>::<span class=\"n\">Struct</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">.</span><span class=\"n\">arena</span><span class=\"p\">.</span><span class=\"n\">alloc</span><span class=\"p\">([</span>\n<span class=\"w\">        </span><span class=\"n\">usize_layout</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">usize_layout</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">]))),</span>\n<span class=\"w\">    </span><span class=\"n\">semantic</span>: <span class=\"nc\">SemanticRepr</span>::<span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">.</span><span class=\"n\">arena</span><span class=\"p\">.</span><span class=\"n\">alloc</span><span class=\"p\">([</span><span class=\"s\">\"start\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"len\"</span><span class=\"p\">])),</span>\n<span class=\"p\">}));</span>\n</code></pre></div>\n<p>Any help?</p>",
        "id": 403227954,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700506644
    },
    {
        "content": "<p>Are you working in mono?</p>",
        "id": 403228528,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1700506877
    },
    {
        "content": "<p>There's <code>Layout::new</code></p>",
        "id": 403228574,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1700506895
    },
    {
        "content": "<p>What are you trying to do though? Generally constructing a layout directly is not preferred</p>",
        "id": 403228702,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1700506931
    },
    {
        "content": "<p>Trying to fix binding rest in a list pattern match.</p>",
        "id": 403231834,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700508254
    },
    {
        "content": "<p>Also, turns out the that low level doesn't use the struct, so I didn't need the layout.</p>",
        "id": 403231879,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700508279
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/issues/6030\">#6030</a> for context</p>",
        "id": 403233620,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700509002
    }
]