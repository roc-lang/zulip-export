[
    {
        "content": "<p>When looking at Luke's last PR, I <a href=\"https://github.com/roc-lang/roc/pull/7873/files#r2169081889\">had a question</a> on how we store type variables for numbers. It looks like the number CIR nodes contain struct fields to hold <code>num_var</code>s:</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">num</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">num_var</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">TypeVar</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">literal</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">StringLiteral</span><span class=\"p\">.</span><span class=\"n\">Idx</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">value</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IntValue</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">bound</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"p\">.</span><span class=\"n\">Num</span><span class=\"p\">.</span><span class=\"n\">Int</span><span class=\"p\">.</span><span class=\"n\">Precision</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">region</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Region</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"n\">int</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">num_var</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">TypeVar</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">requirements</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"p\">.</span><span class=\"n\">Num</span><span class=\"p\">.</span><span class=\"n\">Int</span><span class=\"p\">.</span><span class=\"n\">Requirements</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">value</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IntValue</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">region</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Region</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n</code></pre></div>\n<p>My question is this:</p>\n<p>Is <code>num_var</code> supposed to represent the root <code>Num(a(b))</code> type var, or the sub (<code>Int(Signed8))</code>)  type var, or something else?</p>\n<p>If it's intended to represent the root <code>Num</code>, then is there a reason we can't use the CIR <code>Expr.Idx</code> for that? Or is there something that having this as a sub-field gets us?</p>",
        "id": 525907104,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1750945056
    },
    {
        "content": "<p>This rust compiler also has this field, but I'm wondering in the Zig compilers \"CIR node Idxs as Type Vars\" design makes this unnecessary</p>",
        "id": 525907350,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1750945131
    },
    {
        "content": "<p>It looks like there's a similar thing on <code>tuple</code> as well:</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">expr_idx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">can_ir</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">addExpr</span><span class=\"p\">(</span><span class=\"n\">CIR</span><span class=\"p\">.</span><span class=\"n\">Expr</span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"p\">.</span><span class=\"n\">tuple</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">.{</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">elems</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">elems_span</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">tuple_var</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tuple_type_var</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">region</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">region</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"p\">},</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p>I think here <code>tuple_var</code> is meant to reference the type of whole tuple, but I think we could assign the type at <code>expr_idx</code>?</p>",
        "id": 525909297,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1750945739
    },
    {
        "content": "<p>i think the type var depends.  For <code>num</code> it's the range included the type like <code>Int(Signed8)</code> and for <code>int</code> it would be whatever fills the <code>a</code> in <code>Integer(a)</code></p>",
        "id": 525955548,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750960690
    },
    {
        "content": "<p>yeah I was thinking the same thing</p>",
        "id": 525965732,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1750964545
    },
    {
        "content": "<p>I don't think that field is necessary anymore</p>",
        "id": 525965775,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1750964564
    },
    {
        "content": "<p>also I have a PR that gets rid of <code>bound</code> and <code>literal</code></p>",
        "id": 525965835,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1750964592
    },
    {
        "content": "<p>We had record_var inside the record CIR.Expr and I removed that and used the expression id instead for the type of the whole record.</p>",
        "id": 525973448,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1750968468
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20.60var.60.20fields.20on.20Can.20structs/near/525965775\">said</a>:</p>\n<blockquote>\n<p>I don't think that field is necessary anymore</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> are you looking at removing them in your PR?</p>",
        "id": 525987024,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1750976008
    },
    {
        "content": "<p>I can see you have removed the <code>requirements</code> field</p>",
        "id": 525987074,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1750976054
    },
    {
        "content": "<p>I have not removed it</p>",
        "id": 525987116,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1750976093
    },
    {
        "content": "<p>feel free to though!</p>",
        "id": 525987118,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1750976095
    }
]