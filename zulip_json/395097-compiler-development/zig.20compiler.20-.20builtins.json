[
    {
        "content": "<p>Have we had thoughts about where we want to put the builtin symbols? </p>\n<p>This may be something <span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> has already planned. </p>\n<p>I'm thinking of taking a small side quest to build that out a bit.</p>",
        "id": 499961468,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739664193
    },
    {
        "content": "<p>I've been thinking... we could use hardcoded integers that work backwards. So when you <code>lookup</code> an <code>Module.Idx</code> during Can and you're looking for say <code>Str.toUtf8</code> you might get the hardcoded id. e.g. <code>Module.Idx(Str) = maxU32 - 1 = 4_294_967_294u32</code>, or <code>Module.Idx(Bool) = maxU32 - 2 = 4_294_967_293u32</code>.</p>\n<p>Counting backwards instead of using the lowest values means we don't need to actually add these to the ArrayList, and we can always know if they're builtin Module/Ident by checking if the Idx is above a certain value.</p>",
        "id": 499964472,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739667048
    },
    {
        "content": "<p>Also we know what these values are at comptime, so they are constants and we can switch on them etc elsewhere.</p>",
        "id": 499964515,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739667115
    },
    {
        "content": "<p>We might want to do this over the current method because then any index <code>Idx</code> is actually something stored in the array at that offset. Unlike today where I think things are offset by <code>1</code>.</p>\n<p>The builtins are hardcoded and not in the array, indexing into it using a builtin would blow up out of bounds, so we would know immediately if something was wired incorrectly.</p>",
        "id": 499964953,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739667490
    },
    {
        "content": "<p>I just think we need to make sure they don't bottleneck compilation of the roc compiler and lead to crazy amounts of rebuilds. So they probably should be compiled lazily after the roc compiler has been fully built. (Talking about the roc builtins).</p>",
        "id": 499965694,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739668189
    },
    {
        "content": "<p>Cause that loop is one of the most painful in the old compiler. Change almost anything -&gt; must recompile to roc builtins -&gt; need to recompile a ton of other things downstream.</p>",
        "id": 499965780,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739668227
    },
    {
        "content": "<p>or maybe we could control that with a build flag too, like llvm?</p>",
        "id": 499966324,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739668726
    },
    {
        "content": "<p>actually nm, since we want to prioritize simplicity and correctness in the 0.1.0 compiler, +1 to just doing it at runtime for now</p>",
        "id": 499966374,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739668798
    },
    {
        "content": "<p>keep it simple</p>",
        "id": 499966442,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739668804
    },
    {
        "content": "<p>we can always optimize more in a future revision</p>",
        "id": 499966463,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739668830
    },
    {
        "content": "<p>I'm busy all day today, but in short, I'd like to see if we can have minimal hardcopies for now on builtins</p>",
        "id": 499966512,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739668894
    },
    {
        "content": "<p>We should only need operator desugaring (e.g. Num.add), Str.concat, and some types like List and Str and Result</p>",
        "id": 499966580,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739668947
    },
    {
        "content": "<p>And also derive functions, like to_str and encode</p>",
        "id": 499966592,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739668964
    },
    {
        "content": "<p>If we can make some system that can look for an ident in \"a builtin somewhere\" that looks those up</p>",
        "id": 499966623,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739669010
    },
    {
        "content": "<p>Then we can avoid hardcoding altogether</p>",
        "id": 499966629,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739669019
    },
    {
        "content": "<p>At least for now, during the correctness is paramount phase of development</p>",
        "id": 499966688,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739669046
    },
    {
        "content": "<p>I don't think the runtime cost matters. Can cache it once per roc version in the global cache</p>",
        "id": 499966692,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739669051
    },
    {
        "content": "<p>Agreed</p>",
        "id": 499967381,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739669667
    },
    {
        "content": "<p>yeah that's a good point</p>",
        "id": 499970022,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739672447
    },
    {
        "content": "<p>also in the future we can get fancy and like as soon as we see from the CLI args that we're going to be doing a check or build, we can go load all the builtins from cache into memory in the background while we proceed on the main thread to start working on the source file we got from the CLI</p>",
        "id": 499970147,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739672600
    },
    {
        "content": "<p>One question I have as I start bringing the Builtins over to the zig compiler and v0.1 syntax.</p>\n<p>Are we doing any changes to <code>Num</code>?  I thought I remember Richard or someone else suggesting that we don't need the <code>Num</code> type anymore because of static dispatch.</p>",
        "id": 525341174,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750687684
    },
    {
        "content": "<p>Bringing over <code>Num</code> (or it's replacement(s)) blocks bringing over a number of other Builtin modules</p>",
        "id": 525341377,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750687728
    },
    {
        "content": "<p>we definitely still need the <code>Num</code> type as far as I know <span aria-label=\"smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 525342195,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1750687963
    },
    {
        "content": "<p>so you think that Num moves over mostly at is as far as the structure of the types?</p>",
        "id": 525343933,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1750688431
    },
    {
        "content": "<p>should be exactly as-is! <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 525371848,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1750697255
    }
]