[
    {
        "content": "<p>it occurred to me that our interpreter can be faster than a lot of interpreters because it doesn't need to do runtime type checking</p>",
        "id": 497312414,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738546690
    },
    {
        "content": "<p>because we'll already have type-checked it, so we know that if there are any type mismatches, we've already dealt with them at compile time</p>",
        "id": 497312450,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738546722
    },
    {
        "content": "<p>Yes, though we will have to still dispatch on type for at least refcounting</p>",
        "id": 497312603,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738546827
    },
    {
        "content": "<p>oh sure, and also for static dispatch</p>",
        "id": 497312614,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738546847
    },
    {
        "content": "<p>Yeah, and to call zig builtins</p>",
        "id": 497312638,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738546863
    },
    {
        "content": "<p>today, the way we (very often incorrectly) deal with type mismatches in the \"I want to run my program anyway even though I know there are type mismatches\" scenario is that during the building process, whenever we encounter a canonical IR node and go ask it what its type is, we then notice when its type is \"type mismatch\" and emit an IR node that's supposed to crash at runtime</p>",
        "id": 497312653,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738546877
    },
    {
        "content": "<p>Well, not dispatch on type, but fill out type specific information for the call</p>",
        "id": 497312655,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738546878
    },
    {
        "content": "<p>in the case where we're not doing a full build, and are instead running an interpreter right after type checking finishes, we aren't doing any more compile-time passes over the canonical IR, so we don't have the same opportunity to detect those type mismatches at compile time</p>",
        "id": 497312766,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738546946
    },
    {
        "content": "<p>one way we could deal with those is to, at runtime, always check every single canonical IR node's type to see if it happens to be a type mismatch, and then crash if so</p>",
        "id": 497312798,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738546967
    },
    {
        "content": "<p>but at that point we're potentially worse off than languages that check types at runtime <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 497312836,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738546999
    },
    {
        "content": "<p>I think there's a much simpler solution</p>",
        "id": 497312843,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738547005
    },
    {
        "content": "<p>every time the type checker hits a type mismatch, in addition to pushing a <code>Problem</code> onto a list (to be reported later), it also pushes a \"hey this <code>Variable</code> was a type mismatch\" onto a list too</p>",
        "id": 497312877,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738547040
    },
    {
        "content": "<p>then after type-checking is done, if we're going to be interpreting, we have one very quick pass where we go through the list of recorded type mismatches and replace all the canonical IR nodes corresponding to those <code>Variable</code>s with <code>crash</code> nodes</p>",
        "id": 497312967,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738547101
    },
    {
        "content": "<p>if the list is empty and there are no type mismatches, this is free</p>",
        "id": 497312979,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738547112
    },
    {
        "content": "<p>if there are type mismatches, then we only pay for however many we actually need to fixup</p>",
        "id": 497313003,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738547133
    },
    {
        "content": "<p>and then at runtime we don't need to check for any type mismatches at all!</p>",
        "id": 497313016,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738547144
    },
    {
        "content": "<p>also, we can make the \"get the canonical IR node from the <code>Variable</code>\" lookup trivial if we assign variables to be the same number as nodes by default, except for nodes that have multiple variables (in which case we can hand out those extra Variables starting from -1 and decrementing, whereas the canonical IR node IDs would all be 0 or positive)</p>",
        "id": 497313124,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738547229
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/395097-compiler-development/topic/zig.20compiler.20-.20running.20anyway.20even.20when.20there.20are.20errors/near/497312766\">said</a>:</p>\n<blockquote>\n<p>are instead running an interpreter right after type checking finishes, we aren't doing any more compile-time passes over the canonical IR, so we don't have the same opportunity to detect those type mismatches at compile time</p>\n</blockquote>\n<p>Can you explain this more? In the current pipeline does creating these nodes happen later in the pipeline like after specialization or something?</p>",
        "id": 497313144,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738547253
    },
    {
        "content": "<p>yeah exactly</p>",
        "id": 497313162,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738547264
    },
    {
        "content": "<p>I think it's during specialization actually</p>",
        "id": 497313176,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738547276
    },
    {
        "content": "<p>because we go and look up the type associated with the node to see what its layout is</p>",
        "id": 497313232,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738547292
    },
    {
        "content": "<p>and then if the type is a mismatch, instead of getting a layout we replace it with a crash (in theory, although in practice we mess this up often)</p>",
        "id": 497313248,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738547320
    },
    {
        "content": "<p>I don't think this strategy could be done with other forms of dispatch though</p>",
        "id": 497313257,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738547328
    },
    {
        "content": "<p>In the interpreter, we would instead do it when calling a function (cause we know the concrete types for that call at that point)?</p>",
        "id": 497313258,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738547328
    },
    {
        "content": "<p>it relies on the fact that once we hit a type mismatch in solving, we know it's game over</p>",
        "id": 497313269,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738547341
    },
    {
        "content": "<p>I'm proposing that we do one more pass before we run the interpreter</p>",
        "id": 497313327,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738547390
    },
    {
        "content": "<p>after type checking has completed</p>",
        "id": 497313330,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738547395
    },
    {
        "content": "<p>and in that pass we go fixup some canonical IR nodes</p>",
        "id": 497313339,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738547402
    },
    {
        "content": "<p>to replace them with <code>crash</code> nodes</p>",
        "id": 497313382,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738547406
    },
    {
        "content": "<p>so the interpreter just encounters them and says \"oh, a <code>crash</code>, I guess I will crash\"</p>",
        "id": 497313400,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738547416
    },
    {
        "content": "<p>How does that work for a function that is called with 4 different specializations?</p>",
        "id": 497313485,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738547503
    },
    {
        "content": "<p>Like each specialization might or might not have the crash</p>",
        "id": 497313505,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738547521
    },
    {
        "content": "<p>they'll all have it for sure</p>",
        "id": 497313548,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738547528
    },
    {
        "content": "<p>type mismatches apply before specializations</p>",
        "id": 497313558,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738547540
    },
    {
        "content": "<p>it's not possible in Roc to have a type mismatch for one specialization but not others</p>",
        "id": 497313581,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738547555
    },
    {
        "content": "<p>like it would happen at the call site</p>",
        "id": 497313587,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738547566
    },
    {
        "content": "<p>either that call site is busted or it isn't</p>",
        "id": 497313591,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738547573
    },
    {
        "content": "<p>Oh, then sounds like in general type checking can just change the the node to a crash?</p>",
        "id": 497313605,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738547584
    },
    {
        "content": "<p>yeah exactly</p>",
        "id": 497313614,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738547590
    },
    {
        "content": "<p>Yeah, sounds reasonable to fold into type checking or a pass right after.</p>",
        "id": 497313641,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738547617
    },
    {
        "content": "<p>yeah I think we'd want to do it right after because:</p>\n<ul>\n<li>if you're just doing <code>roc check</code> or editor analysis, fixing up the canonical IR is a waste of time</li>\n<li>to keep the pass isolated, it would be best if type-checking didn't have a direct dependency on canonical IR</li>\n</ul>",
        "id": 497313756,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738547698
    },
    {
        "content": "<p>What about static dispatch?</p>",
        "id": 497313782,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738547718
    },
    {
        "content": "<p>That would depend on the specific arg type for whether or not it is a crash.</p>",
        "id": 497313795,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738547734
    },
    {
        "content": "<p>static dispatch always resolves to the same type</p>",
        "id": 497313851,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738547763
    },
    {
        "content": "<p>one way to think of it is that</p>",
        "id": 497313908,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738547785
    },
    {
        "content": "<p>if you have a language like Elm or OCaml or Haskell</p>",
        "id": 497313923,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738547798
    },
    {
        "content": "<p>they don't monomorphize, there is no specialization pass</p>",
        "id": 497313933,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738547805
    },
    {
        "content": "<p>but of course they still have type mismatches</p>",
        "id": 497313939,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738547815
    },
    {
        "content": "<p>we have specialization, but there's no such thing as a \"specialization error\"</p>",
        "id": 497313963,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738547833
    },
    {
        "content": "<p>like we don't report compile-time problems in that pass because all the userspace errors occur before that</p>",
        "id": 497313982,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738547849
    },
    {
        "content": "<p>(I guess we can still have bugs in our compiler implementation though haha)</p>",
        "id": 497313989,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738547859
    },
    {
        "content": "<p>so Elm, Haskell, OCaml, and Roc would all implement this feature in the same way</p>",
        "id": 497313996,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738547871
    },
    {
        "content": "<p>If we have this function<br>\n<code>fn: x -&gt; U64 where x.len() -&gt; U64</code></p>\n<p>At one call sight, it might need to crash due to the type being passed in not having <code>.len()</code> and at another it might run just fine, right?</p>",
        "id": 497314003,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738547880
    },
    {
        "content": "<p>yes, but we'd know that after type-checking</p>",
        "id": 497314060,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738547896
    },
    {
        "content": "<p>we wouldn't need to specialize</p>",
        "id": 497314067,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738547907
    },
    {
        "content": "<p>maybe I should clarify that when I say specialize I'm talking about monomorphization</p>",
        "id": 497314082,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738547922
    },
    {
        "content": "<p>But we now have one call site that runs the crash and another call site that doesn't run the crash.</p>",
        "id": 497314092,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738547936
    },
    {
        "content": "<p>there's also function application, which is arguably a form of specialization, but that's not really the term I hear used for that <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 497314095,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738547937
    },
    {
        "content": "<p>totally!</p>",
        "id": 497314102,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738547942
    },
    {
        "content": "<p>but we have all the info necessary to do that after type-checking</p>",
        "id": 497314115,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738547957
    },
    {
        "content": "<p>we don't need to perform specialization</p>",
        "id": 497314120,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738547963
    },
    {
        "content": "<p>like Haskell literally has this feature haha</p>",
        "id": 497314127,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738547970
    },
    {
        "content": "<p>and they have ad-hoc polymorphism (typeclasses, not static dispatch, but they both look up implementations based on their type)</p>",
        "id": 497314159,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738548001
    },
    {
        "content": "<p><a href=\"https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/defer_type_errors.html\">https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/defer_type_errors.html</a></p>",
        "id": 497314221,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738548006
    },
    {
        "content": "<p>Interesting. I trust you, but I definitely don't understand.</p>",
        "id": 497314225,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738548009
    },
    {
        "content": "<p>fair enough, I don't think I'm doing a good job explaining it <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 497314278,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738548033
    },
    {
        "content": "<p>Ayaz could probably explain it better</p>",
        "id": 497314287,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738548040
    },
    {
        "content": "<p>Oh, I guess you could always generate a <code>.len()</code> that just calls crash for the type that is missing <code>.len()</code></p>",
        "id": 497314308,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738548054
    },
    {
        "content": "<p>well we'd just crash at the call site</p>",
        "id": 497316385,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738549450
    },
    {
        "content": "<p>like replace the call <em>itself</em></p>",
        "id": 497316395,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738549459
    },
    {
        "content": "<p>not the function</p>",
        "id": 497316396,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738549462
    },
    {
        "content": "<p>so when you get to the call, instead of calling anything it just crashes</p>",
        "id": 497316403,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738549470
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">main!</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">||</span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">[]</span>\n<span class=\"w\">    </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"string has no len()\"</span>\n\n<span class=\"w\">    </span><span class=\"n\">tmp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fn</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">Bool</span><span class=\"o\">.</span><span class=\"n\">true</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">fn</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">Bool</span><span class=\"o\">.</span><span class=\"n\">false</span><span class=\"p\">)</span>\n\n<span class=\"w\">    </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fn</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">Bool</span><span class=\"o\">.</span><span class=\"n\">true</span><span class=\"p\">)</span>\n\n<span class=\"n\">fn</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">Bool</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"no\">U64</span><span class=\"w\"> </span><span class=\"n\">where</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"no\">U64</span>\n<span class=\"n\">fn</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">|</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">        </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">len</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"k\">else</span>\n<span class=\"w\">        </span><span class=\"mi\">0</span>\n</code></pre></div>\n<p>In the above, the first two calls to <code>fn</code> should pass with no issues. Only on the third call to <code>fn</code> (line with <code>z = ...</code>), it should crash. In this case, the crash should be generated from the line <code>a.len()</code> due to the type of <code>a</code> being a <code>Str</code>.</p>",
        "id": 497317773,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738550448
    },
    {
        "content": "<p>We could/should crash on the second call site because its type is malformed. The type signature doesn’t match the args provided.</p>",
        "id": 497587740,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738648099
    },
    {
        "content": "<p>Yeah, I guess that would be valid.</p>",
        "id": 497587908,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738648225
    }
]