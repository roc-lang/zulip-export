[
    {
        "content": "<p>I'm trying to use <code>roc_dbg</code> with <code>roc build --no-link ...</code> and I'm thinking roc must be throwing away the calls or something because it doesn't seem to be getting called. Just wondering if anyone knows what might be happening here?</p>",
        "id": 477357616,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729144690
    },
    {
        "content": "<p>Oh wait... I think I know</p>",
        "id": 477357678,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729144741
    },
    {
        "content": "<p>Relevant previous discussion <a href=\"#narrow/channel/304641-ideas/topic/Roc.20cli.20workflow/near/451019991\">https://roc.zulipchat.com/#narrow/channel/304641-ideas/topic/Roc.20cli.20workflow/near/451019991</a></p>",
        "id": 477357736,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729144797
    },
    {
        "content": "<p>At what stage do we remove the Dbg statements?</p>",
        "id": 477358808,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729145190
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 477359045,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729145297
    },
    {
        "content": "<p>Found something that looks relevant in <code>crates/compiler/mono/src/ir.rs</code> <code>Stmt::Dbg</code> which is used to code gen the lowlevel call...</p>",
        "id": 477360182,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729145770
    },
    {
        "content": "<p>Ok, I got something working using this</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/crates/cli/src/lib.rs b/crates/cli/src/lib.rs</span>\n<span class=\"gh\">index 83c7270350..15a737595a 100644</span>\n<span class=\"gd\">--- a/crates/cli/src/lib.rs</span>\n<span class=\"gi\">+++ b/crates/cli/src/lib.rs</span>\n<span class=\"gu\">@@ -845,7 +845,7 @@ pub fn build(</span>\n<span class=\"w\"> </span>    } else {\n<span class=\"w\"> </span>        let backend_mode = match opt_level {\n<span class=\"w\"> </span>            OptLevel::Development =&gt; LlvmBackendMode::BinaryDev,\n<span class=\"gd\">-            OptLevel::Normal | OptLevel::Size | OptLevel::Optimize =&gt; LlvmBackendMode::Binary,</span>\n<span class=\"gi\">+            OptLevel::Normal | OptLevel::Size | OptLevel::Optimize =&gt; LlvmBackendMode::BinaryDev,</span>\n<span class=\"w\"> </span>        };\n\n<span class=\"w\"> </span>        CodeGenBackend::Llvm(backend_mode)\n</code></pre></div>\n<p>I'm thinking if we want to modify this behaviour in the cli so we always generate <code>dbg</code> statements, we'll need to see how that get's threaded through and what it affects.</p>\n<p>Anyway... generating <code>dbg</code> statements when using <code>roc build</code> enables me to have the graphics platform \"pause\" when it hits a <code>dbg</code> statement and await for user input. I thought about more exciting things like a msgbox popup, but it seems raylib doesn't support multiple windows by default and this is ok to to test the idea. </p>\n<p><a href=\"/user_uploads/22008/NbR1BQzgHW4VyMGvZf5nMtib/Screenshot-2024-10-17-at-17.33.33.png\">Screenshot 2024-10-17 at 17.33.33.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/NbR1BQzgHW4VyMGvZf5nMtib/Screenshot-2024-10-17-at-17.33.33.png\" title=\"Screenshot 2024-10-17 at 17.33.33.png\"><img data-original-dimensions=\"1492x194\" src=\"/user_uploads/thumbnail/22008/NbR1BQzgHW4VyMGvZf5nMtib/Screenshot-2024-10-17-at-17.33.33.png/840x560.webp\"></a></div>",
        "id": 477363618,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729147004
    },
    {
        "content": "<p>The issues is that <code>dbg</code> and <code>expect</code> are linked in compiler lowering currently</p>",
        "id": 477367066,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729148275
    },
    {
        "content": "<p>But <code>expect</code> is not wired up to the platform interface currently</p>",
        "id": 477367183,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729148293
    },
    {
        "content": "<p>So it requires running through the <code>roc</code> executable to function</p>",
        "id": 477367246,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729148326
    },
    {
        "content": "<p>This does not work with <code>roc build</code>, so it is set to be stripped out.</p>",
        "id": 477367294,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729148340
    },
    {
        "content": "<p>The change you made above would probably break if someone added an inline expect.</p>",
        "id": 477367375,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729148363
    },
    {
        "content": "<p>We could just unlink them to fix this, though the more full fix is to update <code>expect</code> to work the the platform api and then keep both by default</p>",
        "id": 477367527,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729148407
    },
    {
        "content": "<p>I'm ok with a quick fix. I think it will be pretty helpful for graphics users to have even something basic working.</p>",
        "id": 477367743,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729148471
    },
    {
        "content": "<p>Is this something I could implement?</p>",
        "id": 477367856,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729148512
    },
    {
        "content": "<p>Is the plan to make dbg always included?</p>",
        "id": 477368953,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729148881
    },
    {
        "content": "<p>If so, I think you just have to delete the conditional on line 3563 of llvm/build.rs</p>",
        "id": 477369297,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729148982
    },
    {
        "content": "<p>Though I know there are other pieces to actually including/generating expect and dbg. So not 100% sure that will be engouh</p>",
        "id": 477369402,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1729149007
    },
    {
        "content": "<p>That works. Thank you <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> </p>\n<p>The next issue is that for some reason it seems like roc_dbg is getting called many times... </p>\n<p>LLVM IR looks ok, like just one call in <code>init</code>... (as in there are no other calls to dbg anywhere)</p>\n<div class=\"codehilite\"><pre><span></span><code>define internal fastcc { { { i32, i32 }, {} }, {} } @&quot;#UserApp_init_7ceb2e607d153edd175217b82e8ded113c6e4df27e27777d9f9694c716aa427&quot;() !dbg !269 {\nentry:\n  %const_str_store1 = alloca %str.RocStr, align 8\n  %const_str_store = alloca %str.RocStr, align 8\n  %result_value = alloca %str.RocStr, align 8\n  call fastcc void @Inspect_toStr_21b5c7d5305aa5ff4df495f05c9e59c37d76367eacec9dd321a0e78143dfc4a3(i64 1234, ptr nonnull %result_value), !dbg !270\n  store ptr getelementptr inbounds ([36 x i8], ptr @_str_literal_5112864010422196678, i64 0, i64 8), ptr %const_str_store, align 8, !dbg !270\n  %const_str_store.repack6 = getelementptr inbounds %str.RocStr, ptr %const_str_store, i64 0, i32 1, !dbg !270\n  store i64 28, ptr %const_str_store.repack6, align 8, !dbg !270\n  %const_str_store.repack7 = getelementptr inbounds %str.RocStr, ptr %const_str_store, i64 0, i32 2, !dbg !270\n  store i64 28, ptr %const_str_store.repack7, align 8, !dbg !270\n  store ptr inttoptr (i64 875770417 to ptr), ptr %const_str_store1, align 8, !dbg !270\n  %const_str_store1.repack8 = getelementptr inbounds %str.RocStr, ptr %const_str_store1, i64 0, i32 1, !dbg !270\n  store i64 0, ptr %const_str_store1.repack8, align 8, !dbg !270\n  %const_str_store1.repack9 = getelementptr inbounds %str.RocStr, ptr %const_str_store1, i64 0, i32 2, !dbg !270\n  store i64 -8935141660703064064, ptr %const_str_store1.repack9, align 8, !dbg !270\n  call void @roc_dbg(ptr %const_str_store, ptr %result_value, ptr %const_str_store1), !dbg !270\n  call fastcc void @&quot;#Attr_#dec_8&quot;(ptr nonnull %result_value), !dbg !270\n  %call = call fastcc float @&quot;#UserApp_height_8256d790c99390129cd6628d4d43bc44f55cfb83af722d8248666b192be24d65&quot;(), !dbg !270\n  %call2 = call fastcc float @&quot;#UserApp_width_6fdff3e812be393e397a32aeb76ae96155b45793f22c8c7f8b12de3628ba863&quot;(), !dbg !270\n  %insert_record_field = insertvalue { float, float } zeroinitializer, float %call, 0, !dbg !270\n  %insert_record_field3 = insertvalue { float, float } %insert_record_field, float %call2, 1, !dbg !270\n  %call4 = call fastcc { { i32, i32 }, {} } @RocRay_setWindowSize_5c8e2eddb65717d2b7a69c4d944bbaab3db37fe30ea4d8f6e4bc9d32cef({ float, float } %insert_record_field3), !dbg !270\n  %call5 = call fastcc { { { i32, i32 }, {} }, {} } @Task_await_f411d2d207cb75ff49124b128ee5a4cdec2daf8d1cf0a733c3c7d426729b6b({ { i32, i32 }, {} } %call4, {} zeroinitializer), !dbg !270\n  ret { { { i32, i32 }, {} }, {} } %call5, !dbg !270\n}\n</code></pre></div>\n<p>Here is the impl</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[no_mangle]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">roc_dbg</span><span class=\"p\">(</span><span class=\"n\">loc</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">RocStr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">msg</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">RocStr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">msg</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">CString</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"[{}] {}</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">loc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">msg</span><span class=\"p\">)).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">TraceLog</span><span class=\"p\">(</span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">TraceLogLevel_LOG_DEBUG</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">());</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>and this is what I see when I run the program...</p>\n<div class=\"codehilite\"><pre><span></span><code>DEBUG: [examples/basic-shapes.roc:15] 1234\nDEBUG: [examples/basic-shapes.roc:15] 1234\nDEBUG: [examples/basic-shapes.roc:15] 1234\nDEBUG: [examples/basic-shapes.roc:15] 1234\nDEBUG: [examples/basic-shapes.roc:15] 1234\nDEBUG: [examples/basic-shapes.roc:15] 1234\nDEBUG: [examples/basic-shapes.roc:15] 1234\n.... etc\n</code></pre></div>",
        "id": 477376002,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729150973
    },
    {
        "content": "<p>Same behaviour with </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[no_mangle]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">roc_dbg</span><span class=\"p\">(</span><span class=\"n\">loc</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">RocStr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">msg</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">RocStr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"fm\">eprintln!</span><span class=\"p\">(</span><span class=\"s\">\"[{}] {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">loc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">msg</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 477377647,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729151408
    },
    {
        "content": "<p>I realised the roc_dbg takes three pointers from reading the LLVM... so fixed that... but still get the same repeated calls</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[no_mangle]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">roc_dbg</span><span class=\"p\">(</span><span class=\"n\">loc</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">RocStr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">msg</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">RocStr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">RocStr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">msg</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">CString</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"[{}] {} = {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">loc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">msg</span><span class=\"p\">)).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">TraceLog</span><span class=\"p\">(</span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">TraceLogLevel_LOG_DEBUG</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">());</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 477379863,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1729152025
    },
    {
        "content": "<p>I need to get back to investigating this. It's such a helpful tool to have print debugging available and we're currently missing it in roc-ray.</p>",
        "id": 481504199,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1731194688
    }
]