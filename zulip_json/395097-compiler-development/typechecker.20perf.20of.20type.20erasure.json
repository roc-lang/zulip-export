[
    {
        "content": "<p>In a somewhat surprising result, <a href=\"https://github.com/roc-lang/roc/pull/5576\">type-erasing functions instead of using lambda sets</a> is only ~10% faster for type checking</p>\n<div class=\"codehilite\"><pre><span></span><code>❯ hyperfine &#39;target/release/roc check examples/cli/args.roc&#39; &#39;../roc2/target/release/roc check examples/cli/args.roc&#39; --warmup 20\nBenchmark 1: target/release/roc check examples/cli/args.roc\n  Time (mean ± σ):      38.4 ms ±   1.0 ms    [User: 59.8 ms, System: 15.3 ms]\n  Range (min … max):    36.9 ms …  44.2 ms    68 runs\n\nBenchmark 2: ../roc2/target/release/roc check examples/cli/args.roc\n  Time (mean ± σ):      41.8 ms ±   0.8 ms    [User: 67.2 ms, System: 15.8 ms]\n  Range (min … max):    40.0 ms …  44.7 ms    65 runs\n\nSummary\n  &#39;target/release/roc check examples/cli/args.roc&#39; ran\n    1.09 ± 0.04 times faster than &#39;../roc2/target/release/roc check examples/cli/args.roc&#39;\n</code></pre></div>\n<p>that's fine because this is not an explicit goal of type erasure, but an interesting observation</p>",
        "id": 372649037,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1688574036
    },
    {
        "content": "<p>Is this a case of other steps being most of the time or are lambda sets most of the cost here?</p>",
        "id": 372651984,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1688574701
    },
    {
        "content": "<p>this is an example where i expected lambda sets to consume the most time, but i guess they only take 10% of the time relative to parsing, etc.</p>",
        "id": 372652565,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1688574817
    },
    {
        "content": "<p>in any case the boost is nice but I don't think it matters too much anyway, anything sub 100ms is excellent IMO</p>",
        "id": 372652635,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1688574838
    }
]