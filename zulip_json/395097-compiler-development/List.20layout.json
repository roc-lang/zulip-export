[
    {
        "content": "<p>What is the layout for List pointers? I I know the struct layout is (ptr, size, capacity) but what is ptr exactly? is it (&lt;refcount=ptr-size bytes&gt;&lt;data&gt;) or something else?</p>",
        "id": 446341833,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1719098286
    },
    {
        "content": "<p>and what exactly is the layout with seamless slices?</p>",
        "id": 446341881,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1719098345
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> is the seamless slices expert! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 446352033,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1719105830
    },
    {
        "content": "<p>Pointer is directly to the data</p>",
        "id": 446352464,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719106009
    },
    {
        "content": "<p>For normal lists, the refcount is directly before that (farther away if needed for alignment, this only comes up for lists with data that have alignment greater than 8, so just u128/i128 in roc)</p>",
        "id": 446352582,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719106053
    },
    {
        "content": "<p>For seamless slices, the capacity is not a capacity. Instead, it is a pointer to the first data element in the underlying referenced list.</p>",
        "id": 446352727,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719106095
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/pull/6832\">https://github.com/roc-lang/roc/pull/6832</a> fixes an llvm IR blowup issue that causes huge compile times <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> ran into. however i likely won’t have the time to take this over the finish line. can someone help me push it over? i’m running into some kind of bug, maybe due to a bad ref count i set in the code or maybe this implementation only works for List U8 atm</p>",
        "id": 446354264,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1719107062
    },
    {
        "content": "<p>Wow, I must say this fix is a big improvement. Even running the <code>roc-lang/examples</code> CI tests are really snappy now, like <code>100ms</code> for each test. I'm not sure what it was before, I'll switch back and check.</p>",
        "id": 446355959,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719108419
    },
    {
        "content": "<p>Yeah more like <code>200-400ms</code> on current main</p>",
        "id": 446357743,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1719110218
    },
    {
        "content": "<p>First glance this looks roughly correct to me, though also think it may break the surgical linker. I don't think it currently supports lists that contain pointers in the constant sections (so lists of lists, lists of strings, and lists of recursive tags, or anything that contains those types).</p>",
        "id": 446364907,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719115631
    },
    {
        "content": "<p>I think this is likely wrong: <code>let element_type = element_type.into_int_type();</code></p>",
        "id": 446364913,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719115651
    },
    {
        "content": "<p>You allowed any constants, so there is no guarantee it is an int type</p>",
        "id": 446364927,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1719115666
    },
    {
        "content": "<p>yes that is true, i just put the first implementation i could up - unfortunately i dont really have the bandwidth to take it over the line, it's more of a draft rn.</p>",
        "id": 446367481,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1719117375
    },
    {
        "content": "<p>I fixed up <span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span>'s PR. It is passing CI now. <a href=\"https://github.com/roc-lang/roc/issues/6832\">#6832</a></p>\n<p>One thing that is no longer handled is partially constant lists. Not sure how much they matter, but probably could add them back if we really want them. (I'm not sure we actually do want them though)</p>\n<p>Also, looking into the support element types in list literals, this only supports primitives. It doesn't support any aggregate types like records or tag unions. Those both should be possible to support, but we would have to capture them differently in the ast such that they can be constants/literals in general.</p>",
        "id": 459623833,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723260199
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> , can you double check that you still get the large compile time speed up?</p>",
        "id": 459623929,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1723260295
    },
    {
        "content": "<p>Can confirm I'm still seeing the massive compile time speed up on 6b04318e27359404421cd99d8208b6ea6944ce07</p>",
        "id": 460002133,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1723442389
    },
    {
        "content": "<p>Current <code>19,714 ms</code><br>\nBranch <code>1,523 ms</code></p>",
        "id": 460002290,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1723442442
    },
    {
        "content": "<p>Tested using <a href=\"https://github.com/lukewilliamboswell/roc-htmx-playground/tree/upgrade-server\">https://github.com/lukewilliamboswell/roc-htmx-playground/tree/upgrade-server</a></p>",
        "id": 460002450,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1723442521
    }
]