[
    {
        "content": "<p>Long story short, Richard proposed moving to Zig while we're rewriting so much of the compiler</p>",
        "id": 497101907,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738363597
    },
    {
        "content": "<p>And we all seemed to agree</p>",
        "id": 497101917,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738363603
    },
    {
        "content": "<p>Ok cool</p>",
        "id": 497101939,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738363617
    },
    {
        "content": "<p>So next weekend, I'll have a PR ready for us to look over the IRs for a Zig compiler</p>",
        "id": 497102002,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738363647
    },
    {
        "content": "<p>Written in Zig in our existing repo</p>",
        "id": 497102027,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738363660
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"453336\">@Joshua Warner</span> I was hoping we could talk about what we would want the parser to look like in a new Zig world.  It's a good opportunity for us to implement a lot of the things we've talked about behind the scenes</p>",
        "id": 497102206,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738363754
    },
    {
        "content": "<p>We'll be all opening said PR in Zed and collaboratively shaping it how we think things should look, and then maybe starting to implement something pretty soon!</p>",
        "id": 497102257,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738363795
    },
    {
        "content": "<p>I'm busy this weekend vacationing out of town, but don't let my plans to set up these IRs next weekend stop people from doing something before I do for next weekend's meeting</p>",
        "id": 497102369,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738363847
    },
    {
        "content": "<p>For the parser and ast, I’d start by at least loosely following the design of the parser and ast for zig itself</p>",
        "id": 497102574,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738363951
    },
    {
        "content": "<p>Probably wouldn't be a bad choice :-)</p>",
        "id": 497102602,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738363968
    },
    {
        "content": "<p>Let's talk sometime in the next week if you have some time.  Nothing formal, just over Zulip async</p>",
        "id": 497102638,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738363991
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> I think someone should set our intention and add a top-level directory for the Zig project</p>",
        "id": 497102690,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738364028
    },
    {
        "content": "<p>I'll do that ASAP, not sure when the \"possible\" part is</p>",
        "id": 497103097,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738364268
    },
    {
        "content": "<p>to Ayaz's point about debuggability and struct-of-arrays, as far as I can tell <a href=\"https://andreashohmann.com/zig-struct-of-arrays/\">Zig's <code>MultiArrayList</code></a> has the same ergonomics as a normal Rust <code>Vec</code> except it's automatically struct-of-arrays behind the scenes</p>",
        "id": 497105076,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738365495
    },
    {
        "content": "<p>so the (very serious) debuggability/ergonomics downside we've had of doing SoA in Rust may just be a non-issue in Zig</p>",
        "id": 497105120,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738365533
    },
    {
        "content": "<p>also <span class=\"user-mention\" data-user-id=\"406911\">@Andrew Kelley</span> mentioned to me, and said it was ok to share:</p>\n<blockquote>\n<p>if your dev loop ever gets longer than like 1 second let me know, I bet we can keep it under that number</p>\n</blockquote>",
        "id": 497113869,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738371364
    },
    {
        "content": "<p>here's the llvm bitcode builder: <a href=\"https://github.com/ziglang/zig/blob/4de2b1ea65e6b54cedfe56268a8bf8e9446addb0/src/codegen/llvm/Builder.zig\">https://github.com/ziglang/zig/blob/4de2b1ea65e6b54cedfe56268a8bf8e9446addb0/src/codegen/llvm/Builder.zig</a></p>\n<p><a href=\"https://github.com/ziglang/zig/blob/4de2b1ea65e6b54cedfe56268a8bf8e9446addb0/src/codegen/llvm.zig#L9\">https://github.com/ziglang/zig/blob/4de2b1ea65e6b54cedfe56268a8bf8e9446addb0/src/codegen/llvm.zig#L9</a></p>",
        "id": 497114038,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738371494
    },
    {
        "content": "<p>Also, with this rewrite, I assume we'll add in some of the platform changes. Specifically thinking it would be good to design from the beginning to assume that platforms pass in a gigantic struct of functions pointers. That struct would contain all effects and all <code>roc_</code> special functions like for allocation. It would be used the entire call stack in roc. I think that will fix some linking problems and be very important for eventually wiring up a roc interpreter.</p>",
        "id": 497119075,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738375581
    },
    {
        "content": "<p>Not to mention finally fix our llvm c-abi woes. I wonder if we can share some code for c abi with zig instead of doing it manually.</p>",
        "id": 497119142,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738375663
    },
    {
        "content": "<p>Yeah Richard's cooking a whole plan for fixing llvm by cooperating with the zig guys.</p>",
        "id": 497119355,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738375831
    },
    {
        "content": "<p>Also, reminder to future llvm backend writer (maybe myself). Make sure to follow this to help make llvm happy: <a href=\"https://llvm.org/docs/Frontend/PerformanceTips.html\">https://llvm.org/docs/Frontend/PerformanceTips.html</a></p>",
        "id": 497119401,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738375884
    },
    {
        "content": "<p>I'm definitely keen to scope out the platform related things we want to fix too. Like we can leave the shared memory stuff behind and just go straight to the new test provided by the host.</p>",
        "id": 497119414,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738375900
    },
    {
        "content": "<p>what is the issue with llvm?</p>",
        "id": 497119533,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1738376018
    },
    {
        "content": "<p>Honestly the biggest annoyance with llvm is that it doesn't deal with calling conventions. Second biggest annoyance is that it expects the ir in a specific form to optimize well (like all allocas in the entry block)</p>",
        "id": 497120454,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738376814
    },
    {
        "content": "<p>That is at least thinking from the code gen side</p>",
        "id": 497120485,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738376833
    },
    {
        "content": "<p>Not a huge deal to do it manually, but would be nice to just share with the zig compiler since they have already had to solve some of these annoyances</p>",
        "id": 497120507,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738376858
    },
    {
        "content": "<p>We currently have a lot of c-abi calling convention bugs in our llvm backend</p>",
        "id": 497120536,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738376882
    },
    {
        "content": "<p>This is probably a dumb question - or will be construed as such - but is there a world where it's better and faster to compiler Roc to Zig?</p>",
        "id": 497121593,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738377831
    },
    {
        "content": "<p>Andrew shared this - <a href=\"https://github.com/ziglang/zig/blob/master/test/c_abi/cfuncs.c\">https://github.com/ziglang/zig/blob/master/test/c_abi/cfuncs.c</a> - it's not the actual implementation, but it's test cases written in Zig</p>",
        "id": 497121600,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738377837
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> <a href=\"#narrow/channel/316715-contributing/topic/contributor.20coordination.20meeting.20-.20Feb.202024.20.232/near/497121593\">said</a>:</p>\n<blockquote>\n<p>This is probably a dumb question - or will be construed as such - but is there a world where it's better and faster to compiler Roc to Zig?</p>\n</blockquote>\n<p>it's definitely strictly slower, plus then we'd have to bundle an entire Zig compiler inside <code>roc</code> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 497121658,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738377881
    },
    {
        "content": "<p>Well, I meant would there be a simplification to our compiler that would / could justify that dependency</p>",
        "id": 497121724,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738377943
    },
    {
        "content": "<p>compiling to C is more common, but yeah it's definitely slower</p>",
        "id": 497121727,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738377944
    },
    {
        "content": "<p>I don't think compiling to c is that much simpler than compiling to llvm</p>",
        "id": 497121789,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738377975
    },
    {
        "content": "<p>it would be from the ABI perspective specifically</p>",
        "id": 497121796,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738377987
    },
    {
        "content": "<p>but in other ways probably harder</p>",
        "id": 497121804,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738377995
    },
    {
        "content": "<p>Yep, that is the main gain. You don't have to implement c abi.</p>",
        "id": 497121815,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738378007
    },
    {
        "content": "<p>not sure if it would be a net win overall when you put the two together, not to mention what it would do to our build complexity <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 497121823,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738378014
    },
    {
        "content": "<p>I thought with Zig there is higher-level constructs that would make a lot of things simpler</p>",
        "id": 497121842,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738378030
    },
    {
        "content": "<p>But just act like I never asked the question <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 497121849,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738378048
    },
    {
        "content": "<p>Roc primitives are pretty simple and we already can write builtins in zig instead of raw llvm, so don't think otherwise using zig is a big difference</p>",
        "id": 497121925,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738378099
    },
    {
        "content": "<p>Andrew said:</p>\n<blockquote>\n<p><a href=\"https://github.com/ziglang/zig/blob/4de2b1ea65e6b54cedfe56268a8bf8e9446addb0/src/codegen/llvm.zig#L5423-L5722\">https://github.com/ziglang/zig/blob/4de2b1ea65e6b54cedfe56268a8bf8e9446addb0/src/codegen/llvm.zig#L5423-L5722</a><br>\nit lowers from Zig IR (\"AIR\") to LLVM IR in this logic. So the best thing this codebase has to offer is perhaps the opportunity to port that ParamTypeIterator abstraction, which handles many calling conventions in addition to the C one<br>\nsee also this: <a href=\"https://github.com/ziglang/zig/blob/4de2b1ea65e6b54cedfe56268a8bf8e9446addb0/lib/std/Target.zig#L3326-L3391\">https://github.com/ziglang/zig/blob/4de2b1ea65e6b54cedfe56268a8bf8e9446addb0/lib/std/Target.zig#L3326-L3391</a></p>\n</blockquote>",
        "id": 497121952,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738378132
    },
    {
        "content": "<p>Like we already have the ability to dish out to zig for anything complex that we don't want to write in raw llvm ir.</p>",
        "id": 497121955,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738378133
    },
    {
        "content": "<p>Yeah, I bet if we can use some of zigs backend for llvm as a library, it will solve the hardest parts of working with llvm. That will be awesome</p>",
        "id": 497122048,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738378206
    },
    {
        "content": "<p>yeah I feel like if we:</p>\n<ul>\n<li>start with Zig's C ABI test suite</li>\n<li>convert the tests to test compiled Roc code instead of compiled Zig code</li>\n<li>port Zig's C ABI code gen from consuming Zig IR to consuming Roc IR</li>\n</ul>\n<p>...we should end up with something that works as well as Zig's does, which is to say - very well! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 497122084,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738378248
    },
    {
        "content": "<p>Yeah, like Joshua is saying, one advantage of Zig is that the Zig compiler is maybe approachable enough that if nothing else there could be some code sharing - or at least some patterns that we can pick up.</p>",
        "id": 497122117,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738378282
    },
    {
        "content": "<p>Andrew did add a caveat:</p>\n<blockquote>\n<p>note that this isn't enough, you still have to follow certain undocumented rules about what LLVM types and attributes to use in parameters and return value</p>\n</blockquote>",
        "id": 497122124,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738378298
    },
    {
        "content": "<p>yeah plus Andrew is keen to help us out, so we're not just poking around Zig's code base in the dark with a flashlight</p>",
        "id": 497122192,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738378336
    },
    {
        "content": "<p>By \"sharing\" I mean mostly copy/paste/iterate</p>",
        "id": 497122196,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738378339
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/316715-contributing/topic/contributor.20coordination.20meeting.20-.20Feb.202024.20.232/near/497122124\">said</a>:</p>\n<blockquote>\n<p>Andrew did add a caveat:</p>\n<blockquote>\n<p>note that this isn't enough, you still have to follow certain undocumented rules about what LLVM types and attributes to use in parameters and return value</p>\n</blockquote>\n</blockquote>\n<p>Yep, makes sense. But should ease some pain still.</p>",
        "id": 497122488,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738378628
    },
    {
        "content": "<p>Whoa, I was not expecting this, nice!!</p>",
        "id": 497127352,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1738382804
    },
    {
        "content": "<p>I cannot believe how much has been changing in Roc land this last year <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span><span aria-label=\"star\" class=\"emoji emoji-2b50\" role=\"img\" title=\"star\">:star:</span></p>",
        "id": 497127383,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1738382836
    },
    {
        "content": "<p>Tried translating an old tokenizer experiment from rust to zig: <a href=\"https://github.com/joshuawarner32/roc/blob/c80a3ba0e453abf495619a1abf8ed28c9e6ff909/zig/tokenize/src/main.zig\">https://github.com/joshuawarner32/roc/blob/c80a3ba0e453abf495619a1abf8ed28c9e6ff909/zig/tokenize/src/main.zig</a></p>",
        "id": 497128203,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738383516
    },
    {
        "content": "<p>This reminds me. For zigs tokenizer, didn't they remove the tag. Instead they just load the offset and reparse the token (cause the token is essentially the tag). Not saying we need to do that, but reminded of the DOD talk on the new zig irs and such.</p>\n<p>Other random cool technique. For chomping whitespace and trivial things, some sort of SWAR mask may enable easily going 8 bytes at a time for essentially the same cost.</p>",
        "id": 497133292,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738388397
    },
    {
        "content": "<blockquote>\n<p>For chomping whitespace and trivial things, some sort of SWAR mask may enable easily going 8 bytes at a time for essentially the same cost.</p>\n</blockquote>\n<p>Roc actually already does this! (I wrote that part :P)</p>",
        "id": 497134967,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738390045
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/blob/main/crates/compiler/parse/src/blankspace.rs#L263\">https://github.com/roc-lang/roc/blob/main/crates/compiler/parse/src/blankspace.rs#L263</a></p>",
        "id": 497135046,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738390106
    },
    {
        "content": "<p>Time and time again, it seems the Roc parser is just Joshua turtles all the way down</p>",
        "id": 497135328,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738390397
    },
    {
        "content": "<p>How do people feel about scoping in a bit more than just functions, values, and strings to start with? If we want to allow for dev parallelism, we want to give people tasks they don't require as much coordination with. I think once the compiler is working all the way through with just strings, adding subsequent features will happen where a single change affects the whole pipeline. Seems like we can push that off to start with by making the stages bigger silos for now</p>",
        "id": 497163478,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738415224
    },
    {
        "content": "<p>Currently, we need:</p>\n<ul>\n<li>functions</li>\n<li>values</li>\n<li>strings</li>\n<li>something like tags for the lambda set later stages</li>\n</ul>",
        "id": 497163571,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738415288
    },
    {
        "content": "<p>Maybe adding in if-else or records could be something else that's not overly complex?</p>",
        "id": 497163607,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738415328
    },
    {
        "content": "<p>Also, a naive but parallelism friendly single-Env replacement would be to get rid of Env as a concept and to save everything in a stage's IR for a given module. When compiling a module for stage N, we compile its dependencies first and pass their N+1 IRs as args for the module that depends on them.  For example, if module Foo imports module Bar, then during type specialization, we'd type specialize Bar first, and then pass the TypeSpecIR for Bar as an arg to <code>specialize_types(typecheck_ir_for_module: TypeCheckIR, type_spec_ir_per_dep_modules: Map&lt;ModuleID, TypeSpecIR&gt;)</code></p>",
        "id": 497164111,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738415764
    },
    {
        "content": "<p>It would be better to load in the relevant data into the main module's IR to avoid having to look in two places for deps, but we should be able to make that improvement later</p>",
        "id": 497164163,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738415842
    },
    {
        "content": "<p>I'm gonna run with that approach for the Zig skeleton unless someone has a better but still simple idea</p>",
        "id": 497164241,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738415905
    },
    {
        "content": "<p>it's probably about the same if we sketch things out but don't have <em>all</em> of them implemented end to end right away</p>",
        "id": 497164936,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738416553
    },
    {
        "content": "<p>I think the main thing is that we start with a simple skeleton and don't try to bring everything in at the outset <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 497164952,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738416589
    },
    {
        "content": "<p>Agreed</p>",
        "id": 497164957,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738416598
    },
    {
        "content": "<p>just a small handful seems fine</p>",
        "id": 497165010,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738416611
    },
    {
        "content": "<p>Tangentially, does anyone have opinions on whether typechecking would look how it does today or would we do it structurally differently if we rewrote it (as is the plan). Somewhat an <span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> question I presume. I think I know what the IR will look like for most stages, but typechecking is like the one hole in my mental model</p>",
        "id": 497165188,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738416820
    },
    {
        "content": "<p>i would say rewrite it if it makes it simpler for you</p>",
        "id": 497170228,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1738421460
    },
    {
        "content": "<p>the important thing is not whether it's fine rn imo</p>",
        "id": 497170242,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1738421472
    },
    {
        "content": "<p>it's can you build on top of it</p>",
        "id": 497170250,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1738421481
    },
    {
        "content": "<p>i would maybe write a small unification-style typechecker in a toy language to build an intuition for how it works if you all don't have a solid one already, you can pluck a parser for some random language off the internet and write a checker for it</p>",
        "id": 497170377,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1738421571
    },
    {
        "content": "<p>That's a good idea</p>",
        "id": 497170566,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738421716
    },
    {
        "content": "<p>I think the unification strategy makes sense to me (roughly), though writing an impl myself should help a good deal</p>",
        "id": 497170674,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738421804
    },
    {
        "content": "<p>The thing that feels messy to me is adding type constraints right now, and I'm wondering if there's a way to reduce the vibe of \"hopefully we add all the right constraints\"</p>",
        "id": 497170739,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738421864
    },
    {
        "content": "<p>It feels easy in the current system to miss or add too many constraints</p>",
        "id": 497170806,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738421915
    },
    {
        "content": "<p>And I don't know a good strategy to help with that besides maybe grouping behaviors like \"constrain a function type\" and \"constraint a record\" and pulling them into separate functions that take a struct for their args, meaning it's harder to misalign on what constraints to add?</p>",
        "id": 497170957,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738422052
    },
    {
        "content": "<p>Idk</p>",
        "id": 497170960,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738422054
    },
    {
        "content": "<p>maybe get rid of constraint gen</p>",
        "id": 497172745,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1738423368
    },
    {
        "content": "<p>just unify when you need to</p>",
        "id": 497172755,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1738423374
    },
    {
        "content": "<p>it's fine</p>",
        "id": 497172759,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1738423376
    },
    {
        "content": "<p>Oh??</p>",
        "id": 497172906,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738423474
    },
    {
        "content": "<p>Do you know of a language that does that?</p>",
        "id": 497172927,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738423493
    },
    {
        "content": "<p>I'll just read their compiler</p>",
        "id": 497172932,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738423499
    },
    {
        "content": "<p>I’ll follow along with you Sam, unification is where I went off the rails with my language</p>",
        "id": 497172973,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738423532
    },
    {
        "content": "<p>brother</p>",
        "id": 497173790,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738424102
    },
    {
        "content": "<p>yes, plenty of languages keep constraints inline while typechecking</p>",
        "id": 497175403,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1738425376
    },
    {
        "content": "<p>eg</p>\n<div class=\"codehilite\"><pre><span></span><code>fn infer(..) -&gt; type_variable {\n...\ncase\n  Apply(f, x) {\n    t_f_in_infer = make_var()\n    t_f_out_infer = make_var()\n    t_f_infer = make_var(TFn(t_f_in_infer, t_f_out_infer))\n    t_f = infer(f)\n    t_x = infer(x)\n    unify(t_f, t_f_infer)\n    unify(t_x, t_f_in_infer)\n    t_f_out_infer\n</code></pre></div>",
        "id": 497175637,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1738425539
    },
    {
        "content": "<p>Okay, cool</p>",
        "id": 497175687,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738425585
    },
    {
        "content": "<p>I'll mess with it</p>",
        "id": 497175693,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738425592
    },
    {
        "content": "<p>If <code>unify(t_f, t_f_infer)</code> fails, emit an error about <code>f</code> not being a function. If <code>unify(t_x, t_f_in_infer)</code> fails, an error about the argument type being wrong</p>",
        "id": 497175699,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1738425599
    },
    {
        "content": "<p>Makes sense!</p>",
        "id": 497175777,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738425622
    },
    {
        "content": "<p>one thing that took me awhile to understand is the \"occurs check\"</p>",
        "id": 497176307,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738426027
    },
    {
        "content": "<p>as I understand it (Ayaz, feel free to correct or elaborate on any of this!) the basic problem it's trying to solve is that if you have an infinitely recursive type, you don't want the type-checker to get stuck in an infinite loop hopping from one type to another trying to infer their types, but since they depend on each other, it just never terminates</p>",
        "id": 497176367,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738426078
    },
    {
        "content": "<p>so the \"occurs check\" is to say \"hey, does this particular type variable occur anywhere in this other type?\" (because if so, we have an infinite loop!)</p>",
        "id": 497176432,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738426102
    },
    {
        "content": "<p>so it just descends into that other type and tries to find any instances of the requested variable - as soon as it finds one, it returns</p>",
        "id": 497176448,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738426119
    },
    {
        "content": "<p>so the occurs check can't possibly get stuck in a loop</p>",
        "id": 497176455,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738426128
    },
    {
        "content": "<p>so there are certain places in unification where we're like \"ok before proceeding, stop and do an occurs check to make sure that proceeding won't get stuck\"</p>",
        "id": 497176502,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738426164
    },
    {
        "content": "<p>(and then bail out and report an error about it being an infinite type if we detect one)</p>",
        "id": 497176536,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738426194
    },
    {
        "content": "<p>I'm not sure if there are other use cases where it comes up, but my understanding is that this is its main job</p>",
        "id": 497176589,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738426208
    },
    {
        "content": "<p>also, there's the concept of <code>rank</code></p>",
        "id": 497176623,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738426247
    },
    {
        "content": "<p>Folkert and I spent a lot of time figuring out how that one works in Elm's compiler, and what we concluded was:</p>\n<ul>\n<li>it seems to be necessary for both performance and correctness</li>\n<li>you have to increment it and decrement it at the right times</li>\n<li>\"The way it works is that it's for like...defs, and you sort of increase it when...decreasing def depth, or something? Well, but then with function arguments it's...well, and then pattern matching it's....anyway, it's definitely something. And if you don't increment or decrement it where you needed to, or increment or decrement where you shouldn't, type-checking breaks.\" <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></li>\n</ul>",
        "id": 497176796,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738426376
    },
    {
        "content": "<p>it would be rad to actually understand for real how it's supposed to work <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 497176824,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738426403
    },
    {
        "content": "<p>there's also a thing called pools, and I have zero clue what they do</p>",
        "id": 497176853,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738426435
    },
    {
        "content": "<p>The explanation for ranks is linked here in the compiler: <a href=\"https://github.com/roc-lang/roc/blob/670d2550603b9bb29ab238b6ed6180778a5d107d/crates/compiler/solve/src/solve.rs#L78\">https://github.com/roc-lang/roc/blob/670d2550603b9bb29ab238b6ed6180778a5d107d/crates/compiler/solve/src/solve.rs#L78</a></p>",
        "id": 497176925,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738426488
    },
    {
        "content": "<p><a href=\"http://okmij.org/ftp/ML/generalization.html#levels\">http://okmij.org/ftp/ML/generalization.html#levels</a></p>",
        "id": 497176931,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738426495
    },
    {
        "content": "<p>I'll try to re-read it before next week</p>",
        "id": 497176946,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738426505
    },
    {
        "content": "<blockquote>\n<p>The rank tracks the number of let-bindings a variable is \"under\". Top-level definitions have rank 1. A let in a top-level definition gets rank 2, and so on.</p>\n</blockquote>\n<p>This is a better explanation than mine from above: \"The way it works is that it's for like...defs, and you sort of increase it when...decreasing def depth, or something? Well, but then with function arguments it's...well, and then pattern matching it's....anyway, it's definitely something.\"</p>",
        "id": 497177090,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738426642
    },
    {
        "content": "<p>yeah, so the tricky part is taking that general idea and figuring out exactly which situations need it, and then making sure to pair the incrmeents and decrements correctly (e.g. decrement the current rank the appropriate number of times when exiting a particular scope)</p>",
        "id": 497177192,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738426727
    },
    {
        "content": "<p>Yeah, wondering if there's a good way to encode it into our approach so we can't mess it up</p>",
        "id": 497177294,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738426811
    },
    {
        "content": "<p>Gonna take some brain power for that, probably</p>",
        "id": 497177300,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738426820
    },
    {
        "content": "<p>This is a let in the ML understanding, so every successive def is a new let (since in ML there is only expressions)</p>",
        "id": 497177331,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738426847
    },
    {
        "content": "<p>That’s why SML and OCaml use <code>let x = … in</code> because the next let is a child expression</p>",
        "id": 497177382,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738426899
    },
    {
        "content": "<p>yeah we already convert to that representation</p>",
        "id": 497177459,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738426954
    },
    {
        "content": "<p>as in, we start with a flat list of defs but then convert them to nested during canonicalization</p>",
        "id": 497177487,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738426981
    },
    {
        "content": "<p>in other words:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>...canonicalizes to the equivalent of:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">        </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">        </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 497177528,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738427020
    },
    {
        "content": "<p>I forget what the reason for this is - maybe because they each have their own scopes?</p>",
        "id": 497177603,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738427058
    },
    {
        "content": "<p>Not sure what the original reason was, but it does make the IR simpler. \"either it's an expression, or a single def followed by an expression.\"</p>",
        "id": 497177658,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738427111
    },
    {
        "content": "<p>there's also a correctness aspect to it</p>",
        "id": 497177695,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738427160
    },
    {
        "content": "<p>I just know that no ML-derived type system really works without it</p>",
        "id": 497177737,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738427167
    },
    {
        "content": "<p>we originally didn't do this, and when we switched to it, it fixed bugs</p>",
        "id": 497177742,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738427169
    },
    {
        "content": "<p>yeah</p>",
        "id": 497177745,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738427172
    },
    {
        "content": "<p>I don't remember the exact reason though, this would have been like 2019 <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 497177758,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738427185
    },
    {
        "content": "<p>that said, I don't think we actually need to rewrite the IR into that form if we don't want to</p>",
        "id": 497177807,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738427234
    },
    {
        "content": "<p>but we do need to pass the info to the type-checker as if it were in that form, if that makes sense</p>",
        "id": 497177826,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738427252
    },
    {
        "content": "<p>I think it has to do with a new var has to be scoped and it has a lifetime that has to then be resolved and rolled up into its parent</p>",
        "id": 497177836,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738427262
    },
    {
        "content": "<p>yeah like the \"add this to the scope, increment the rank\" and \"remove it from the scope and decrement the rank\" stuff needs to happen as if it were in that nested form, regardless of whether it is in the IR</p>",
        "id": 497177909,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738427304
    },
    {
        "content": "<p>Yes, I want to move parsing to be a simpler IR that’s flatter, but can will have to continue to do what it does today</p>",
        "id": 497177924,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738427325
    },
    {
        "content": "<p>amusingly, I think in the someday-future when we start doing adjacency nodes (not  in this version of the compiler!) it might end up being the same haha</p>",
        "id": 497177985,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738427386
    },
    {
        "content": "<p>like there might not end up being a distinction at the IR level between nested and not-nested adjacent defs</p>",
        "id": 497177995,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738427398
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/316715-contributing/topic/contributor.20coordination.20meeting.20-.20Feb.202024.20.232/near/497177487\">said</a>:</p>\n<blockquote>\n<p>as in, we start with a flat list of defs but then convert them to nested during canonicalization</p>\n</blockquote>\n<p>I'm really surprised this makes any difference. Feels like you could just walk the dense list and derive all of the same information.</p>",
        "id": 497178145,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738427506
    },
    {
        "content": "<p>yeah that's what I mean about the canonical IR being decoupled from this, but the type checker needing to be told it's in the nested form even if it's not</p>",
        "id": 497178766,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738427991
    },
    {
        "content": "<p>speaking of general principles, we talked about this a bit on the call, but I definitely think we should put a stronger value on human-readable code in tests</p>",
        "id": 497179338,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738428425
    },
    {
        "content": "<p>Luke is in alignment with you there, and I think also Joshua. I'm confident we'll make that happen!</p>",
        "id": 497179435,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738428485
    },
    {
        "content": "<p>e.g. parsing tests consistently start with Roc code as inputs, and I think that should also be true of the other stages of the compiler</p>",
        "id": 497179731,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738428733
    },
    {
        "content": "<p>and as far as outputs go, transforming them into something more human-readable than raw IR nodes also seems like a good idea</p>",
        "id": 497179764,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738428764
    },
    {
        "content": "<p>and also fuzzing right out the gates <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 497179772,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738428774
    },
    {
        "content": "<p>I think fuzzing would have caught a lot of those Rank mistakes earlier</p>",
        "id": 497179785,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738428782
    },
    {
        "content": "<p>and missing <code>occurs</code> checks</p>",
        "id": 497179796,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738428798
    },
    {
        "content": "<p>Yes each IR should have a human readable representation that is divorced from the specific languages default formatting</p>",
        "id": 497179830,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738428831
    },
    {
        "content": "<p>Also, not sure how helpful this would be, but for mlir, it is useful to be able to write tests in terms of human readable ir and single pass transformations. That said, it doesn't always work to break down at that level. But can make IRs and passes a lot more debuggable if you can do tests like that easily.</p>",
        "id": 497184901,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738432956
    },
    {
        "content": "<p>a thought: I wonder if it would be helpful to start making an early API and test suite for editor commands</p>",
        "id": 497192791,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738439292
    },
    {
        "content": "<p>like even if we don't have the implementations right away, just having the pieces in there as part of the skeleton so we can think about which operations have which inputs and outputs</p>",
        "id": 497192844,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738439358
    },
    {
        "content": "<p>so that can inform how everything fits together</p>",
        "id": 497192858,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738439379
    },
    {
        "content": "<p>instead of trying to implement it after the fact on top of a process that was designed with only cli builds in mind</p>",
        "id": 497192935,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738439410
    },
    {
        "content": "<p>I’m assuming you are talking about the Roc Editor, not LSP Code Actions?</p>",
        "id": 497192982,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738439462
    },
    {
        "content": "<p>I think it's the same consideration regardless</p>",
        "id": 497193004,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738439479
    },
    {
        "content": "<p>Structural editing would be the difference, I think</p>",
        "id": 497193014,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738439494
    },
    {
        "content": "<p>(I wasn’t around when that was a live topic of discussion so I don’t know the first thing about the former)</p>",
        "id": 497193019,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738439499
    },
    {
        "content": "<p>Otherwise should be basically the same</p>",
        "id": 497193023,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738439501
    },
    {
        "content": "<p>like \"the user has asked for this information and provided this input\"</p>",
        "id": 497193024,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738439501
    },
    {
        "content": "<p>I don't think structural editing is as good an idea as I used to <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 497193101,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738439544
    },
    {
        "content": "<p>but also I don't think it makes that much of a difference</p>",
        "id": 497193107,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738439552
    },
    {
        "content": "<p>incidentally, I know that Rust and C# were both designed to be editor-first compilers, but they're both unacceptably slow to me, so I'm not saying we should do what they did</p>",
        "id": 497193123,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738439573
    },
    {
        "content": "<p>just that we should keep these use cases in mind early</p>",
        "id": 497193141,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738439591
    },
    {
        "content": "<p>a good example of what I'm talking about:</p>\n<ul>\n<li>\"find all places where this type is used\" needs to start with a source code range in one file and then return source file ranges in potentially multiple other modules</li>\n<li>this requires knowing how to translate from source file range in one file into type ID</li>\n<li>then it requires going through other modules and figuring out where that type ID is used within those modules</li>\n<li>then it requires translating all those usage sites back into source locations</li>\n</ul>",
        "id": 497193842,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738440153
    },
    {
        "content": "<p>so it would be good to make sure that once compilation is done, we can do all of that without it being a big pain <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 497194148,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738440388
    },
    {
        "content": "<p>Yeah, that can be pretty agnostic. Good idea</p>",
        "id": 497194421,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738440615
    },
    {
        "content": "<p>batch compiler and language server compilers (query compilers) are totally different use cases. i wouldn't try to fit both in one</p>",
        "id": 497194423,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1738440616
    },
    {
        "content": "<p>regarding list of statements vs expressions - they are isomorphic. just nested expressions are a lot easier in practice to work with. you can get the type of a whole expression at one node vs looking at the last item in the statement list</p>",
        "id": 497194469,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1738440682
    },
    {
        "content": "<blockquote>\n<p>i wouldn't try to fit both in one</p>\n</blockquote>\n<p>The roslyn C# compiler is built exactly like that, and it seems to have worked out reasonably well at least? Typescript too, I think?</p>\n<p>Would be interesting to talk to someone on one of those teams to get their take</p>",
        "id": 497194596,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738440802
    },
    {
        "content": "<p>yes but have two different modes</p>",
        "id": 497194676,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1738440869
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"454654\">Ayaz Hafiz</span> <a href=\"#narrow/stream/316715-contributing/topic/contributor.20coordination.20meeting.20-.20Feb.202024.20.232/near/497194469\">said</a>:</p>\n<blockquote>\n<p>regarding list of statements vs expressions - they are isomorphic. just nested expressions are a lot easier in practice to work with. you can get the type of a whole expression at one node vs looking at the last item in the statement list</p>\n</blockquote>\n<p>I wouldn’t try to use statements past parsing</p>",
        "id": 497194728,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738440924
    },
    {
        "content": "<p>regarding ranks - this is purely a performance optimization. it's not required. to build an intutition i think Mimram's Program=Proof is the best resource; see section 4.4.4 specifically starting at page 209. He explains the inference mechanism in the most succinct and understandable way i've seen. <a href=\"https://www.lix.polytechnique.fr/Labo/Samuel.Mimram/teaching/INF551/course.pdf\">https://www.lix.polytechnique.fr/Labo/Samuel.Mimram/teaching/INF551/course.pdf</a></p>",
        "id": 497194741,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1738440941
    },
    {
        "content": "<p>Just trying to minimize the size of the parse AST</p>",
        "id": 497194763,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738440951
    },
    {
        "content": "<p>And make it more fault tolerant for error reporting</p>",
        "id": 497194816,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738440969
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"454654\">Ayaz Hafiz</span> <a href=\"#narrow/stream/316715-contributing/topic/contributor.20coordination.20meeting.20-.20Feb.202024.20.232/near/497194741\">said</a>:</p>\n<blockquote>\n<p>regarding ranks - this is purely a performance optimization. it's not required.</p>\n</blockquote>\n<p>right, but if you have them and get them wrong, it seems to break correctness <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 497194846,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738440995
    },
    {
        "content": "<p>yes because if you get it wrong you either over generalize or under generalize</p>",
        "id": 497194857,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1738441011
    },
    {
        "content": "<p>the alternative is to generalize based on the kind of expression</p>",
        "id": 497194864,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1738441021
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"454654\">Ayaz Hafiz</span> <a href=\"#narrow/stream/316715-contributing/topic/contributor.20coordination.20meeting.20-.20Feb.202024.20.232/near/497194423\">said</a>:</p>\n<blockquote>\n<p>batch compiler and language server compilers (query compilers) are totally different use cases. i wouldn't try to fit both in one</p>\n</blockquote>\n<p>do you think we should make two completely different compilers? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 497194948,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738441087
    },
    {
        "content": "<p>occurs check - this is also not required in a language with infinite types, it is typically employed only to detect recursion and stop it. The current implementation uses it to insert \"recursion points\" that mark where the compiler should box a value at runtime. this is also unnecessary. Normal unification works just as well as long as you add a check to see that if you have already tried to unify two types A and B, if A and B are seen again, you short circuit the unification (hopefully it's clear why this is correct but i can explain if helpful). Then during code generation you determine the recursion point separately.</p>",
        "id": 497195000,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1738441145
    },
    {
        "content": "<p>no, i would just start with the batch compiler use case. because programs are smaller queries are going to be fast even over the batch. then the query use case can be solved later</p>",
        "id": 497195028,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1738441189
    },
    {
        "content": "<p>ahh right, I forgot about detecting recursion!</p>",
        "id": 497195120,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738441251
    },
    {
        "content": "<p>the \"have we seen this already?\" check sounds simpler in that we could just implement it once, as opposed to having to call occurs in a bunch of different places, right?</p>",
        "id": 497195243,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738441353
    },
    {
        "content": "<p>in principle you only need to run occurs after generalization so i dont think it makes a difference in terms of number of places it's called</p>",
        "id": 497195286,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1738441411
    },
    {
        "content": "<p>but i would push it down until its actually needed</p>",
        "id": 497195300,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1738441431
    },
    {
        "content": "<p>you mean in code gen?</p>",
        "id": 497195352,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738441444
    },
    {
        "content": "<p>yes</p>",
        "id": 497195358,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1738441448
    },
    {
        "content": "<p>seems reasonable! <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 497195387,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738441474
    },
    {
        "content": "<p>it'll be nice that we won't need to deal with optional record fields in the type checker</p>",
        "id": 497195979,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738441989
    },
    {
        "content": "<p>that will really simplify the record logic</p>",
        "id": 497195983,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738441996
    },
    {
        "content": "<p>oh yeah, we should remember to handle <code>as</code> whenever we're doing pattern matches and imports and such</p>",
        "id": 497196008,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738442025
    },
    {
        "content": "<p>right now it's implemented pretty inconsistently <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 497196015,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738442041
    },
    {
        "content": "<p>Do we have a strong direction around what patterns we will use to get around Zig's lack of interfaces?  _I_ know plenty of ways to deal with it, but as I'm sitting here lookin at our current parsing code, we use a number of traits.  The most obvious being Parser.</p>",
        "id": 497197997,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738443768
    },
    {
        "content": "<p>And I'd like to at least know that I'm going down a road that is going to be well-received by others here</p>",
        "id": 497198024,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738443806
    },
    {
        "content": "<p>Why is parser an interface and not just a concrete type with methods?</p>",
        "id": 497198105,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738443877
    },
    {
        "content": "<p>It's a pattern from FP languages for recursive descent</p>",
        "id": 497198234,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738443964
    },
    {
        "content": "<p>I'm actually thinking about explicitly NOT trying to copy that pattern</p>",
        "id": 497198250,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738443984
    },
    {
        "content": "<p>yeah</p>",
        "id": 497198254,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738443988
    },
    {
        "content": "<p>I don't think we need it</p>",
        "id": 497198267,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738443997
    },
    {
        "content": "<p>I have a structure for parsers (in procedural languages) that I'm pretty familiar with</p>",
        "id": 497198322,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738444046
    },
    {
        "content": "<p>I'm going to see how far it can take me</p>",
        "id": 497198329,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738444054
    },
    {
        "content": "<p>And then I'll present it</p>",
        "id": 497198333,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738444063
    },
    {
        "content": "<p>Also, as for uses of traits/interfaces in general. I think the zig equivalent of a trait is a comptime returned struct with different function implementations based on the concrete implementation. And interfaces are the same thing but runtime function pointers.</p>",
        "id": 497198341,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738444073
    },
    {
        "content": "<p>Can you show an example of what you are talking about?  Because a Zig trait equivalent is very verbose usually</p>",
        "id": 497198430,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738444132
    },
    {
        "content": "<p>Unless you want to do some very tedious things in comptime and have all implementations live in one file</p>",
        "id": 497198459,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738444158
    },
    {
        "content": "<p>But a Zig wizard I am not</p>",
        "id": 497198483,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738444179
    },
    {
        "content": "<p>I think the recursive descent parser design Josh has in mind wouldn't want this anyway</p>",
        "id": 497198567,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738444232
    },
    {
        "content": "<p>Yeah, I guess for what I am thinking it requires central registration for traits, but they could still be implemented in various files.</p>",
        "id": 497198577,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738444240
    },
    {
        "content": "<p>Oh, looks like you can do it without central registration in zig: <a href=\"https://github.com/permutationlock/zimpl?tab=readme-ov-file#example\">https://github.com/permutationlock/zimpl?tab=readme-ov-file#example</a></p>",
        "id": 497198782,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738444418
    },
    {
        "content": "<p>That said, I highly doubt we'll need this in the compiler. Almost everything is static concrete types or can be designed to be so.</p>",
        "id": 497198877,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738444499
    },
    {
        "content": "<p>Fixed some bugs in the tokenizer I pushed earlier: <a href=\"https://github.com/joshuawarner32/roc/blob/zig-tokenizer/zig/tokenize/src/main.zig\">https://github.com/joshuawarner32/roc/blob/zig-tokenizer/zig/tokenize/src/main.zig</a></p>\n<p>Now it:</p>\n<ul>\n<li>Can properly handle string interpolation, including nested interpolation</li>\n<li>Handles unicode identifiers</li>\n<li>Tokenizes all the current syntax tests without reporting an error (which is not to say it does so correctly - but there are no _obvious_ problems)</li>\n</ul>",
        "id": 497199187,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738444754
    },
    {
        "content": "<p>Did you make it handle snake_case identifiers and <code>import</code> statements in the header?</p>",
        "id": 497199317,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738444835
    },
    {
        "content": "<p>It does not currently handle snake case; I think those'll probably be tokenized incorrectly at present</p>",
        "id": 497199455,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738444932
    },
    {
        "content": "<p>Not hard to add tho</p>",
        "id": 497199459,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738444939
    },
    {
        "content": "<p>Yeah I did that on my local copy</p>",
        "id": 497199500,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738444978
    },
    {
        "content": "<p>There's not a whole lot it needs to do in order to handle import statements, with the one exception of making a token for the <code>import</code> keyword (which needs to be done)</p>",
        "id": 497199501,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738444979
    },
    {
        "content": "<p>it looks like there's already enough here to try out zig's builtin fuzzing on! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 497199519,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738444987
    },
    {
        "content": "<p>Indeed!</p>",
        "id": 497199529,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738444997
    },
    {
        "content": "<p>There is one minor syntax tweak I'd like to make, which I think was discussed elsewhere, and that's changing up the ext syntax from <code>{a: Str}ext</code> to (IIRC?) <code>{a: Str, ..ext}</code> - or something similar</p>",
        "id": 497199540,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738445011
    },
    {
        "content": "<p>that's it exactly! <span aria-label=\"100\" class=\"emoji emoji-1f4af\" role=\"img\" title=\"100\">:100:</span></p>",
        "id": 497199565,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738445032
    },
    {
        "content": "<p>Sweet</p>",
        "id": 497199575,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738445039
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"453336\">@Joshua Warner</span> What are your thoughts on the discussion above?</p>",
        "id": 497199632,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738445057
    },
    {
        "content": "<p>Awesome. The old syntax requires some bending over backwards that I'm going to happily rip out of the zig tokenizer.</p>",
        "id": 497199634,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738445058
    },
    {
        "content": "<p>Re: replacing the trait-laden system we have in Rust with a more straight-forward parser struct with just a ton of methods on it working on some sort of input/state struct?</p>",
        "id": 497199689,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738445115
    },
    {
        "content": "<p>Yeah, that's exactly my thinking.</p>",
        "id": 497199703,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738445129
    },
    {
        "content": "<p>Straight-forward recursive descent</p>",
        "id": 497199707,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738445134
    },
    {
        "content": "<p>Sweet.  I'll continue exploring down this path then</p>",
        "id": 497199717,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738445145
    },
    {
        "content": "<p>Using your tokenizer output as input</p>",
        "id": 497199728,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738445154
    },
    {
        "content": "<p>Maybe we should have a branch on the main roc repo we can collaborate on?</p>",
        "id": 497199797,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738445185
    },
    {
        "content": "<p>Thank you for saving me a couple of hours of work with that!</p>",
        "id": 497199804,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738445191
    },
    {
        "content": "<p>Probably</p>",
        "id": 497199808,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738445197
    },
    {
        "content": "<p>Right now I don't have a ton of time so I'm just poking around - remembering how to write Zig, and exploring the design space</p>",
        "id": 497199851,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738445228
    },
    {
        "content": "<p>If you're interested in design space exploration, here's an old prototype I wrote: <a href=\"https://github.com/joshuawarner32/roc/blob/cypress/crates/compiler/cypress/src/parse.rs\">https://github.com/joshuawarner32/roc/blob/cypress/crates/compiler/cypress/src/parse.rs</a></p>",
        "id": 497199879,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738445259
    },
    {
        "content": "<p>Cool, I'll check it out</p>",
        "id": 497200008,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738445368
    },
    {
        "content": "<p>This is a design I've used (with some small tweaks) in parsers in Dart, Go, and Zig: <a href=\"https://gist.github.com/gamebox/947afc1fb18cae753be2d25a7ee777dd\">https://gist.github.com/gamebox/947afc1fb18cae753be2d25a7ee777dd</a></p>",
        "id": 497200019,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738445385
    },
    {
        "content": "<p>Of course the AST-level methods would differ a lot</p>",
        "id": 497200034,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738445402
    },
    {
        "content": "<p>Yep, that looks like roughly the pattern I typically use.</p>",
        "id": 497200152,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738445490
    },
    {
        "content": "<p>btw Josh, check this out: <a href=\"https://github.com/ziglang/zig/pull/21257#issuecomment-2336865183\">https://github.com/ziglang/zig/pull/21257#issuecomment-2336865183</a></p>",
        "id": 497200169,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738445507
    },
    {
        "content": "<p>Your prototype above is pretty INTERESTING!</p>",
        "id": 497200170,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738445508
    },
    {
        "content": "<p>(on the thing I posted above) I'm not super gung-ho on that direction at the moment, and it's probably not a thing we want to try to quickly prototype with, but that is somewhat closer zig's parser, and also has some perf advantages. (IIRC, it was ~2x faster than the current roc parser, prior to any attempts at micro optimization) But harder to read/develop.</p>",
        "id": 497200228,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738445525
    },
    {
        "content": "<p>Yeah, it looks very DOD style</p>",
        "id": 497200239,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738445549
    },
    {
        "content": "<p>Seems like something Andrew K would enjoy</p>",
        "id": 497200252,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738445568
    },
    {
        "content": "<p>But micro-optimizing the parser perf doesn't make a ton of sense given how much compile time is usually devoted to it</p>",
        "id": 497200282,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738445598
    },
    {
        "content": "<p>_IF_ it makes the parser harder maintain or debug</p>",
        "id": 497200300,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738445618
    },
    {
        "content": "<p>It was like 30% win, 70% loss for debuggability</p>",
        "id": 497200379,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738445684
    },
    {
        "content": "<p>The fact that the parser state was easily serializable and inspectable at any point make it really easy to visualize what's going.</p>",
        "id": 497200422,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738445740
    },
    {
        "content": "<p>That's great.  I'll try to read through it tonight when I have more time</p>",
        "id": 497200508,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738445803
    },
    {
        "content": "<p>But at the same time it's a very _weird_ pattern. The combination of the rigid linear layout of the AST, roc's somewhat weird grammar, and trying to do it \"stackless\" made it all a lot more headache than it really needed to be.</p>",
        "id": 497200542,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738445853
    },
    {
        "content": "<p>the thing I linked to makes it possible to do a really direct state machine style</p>",
        "id": 497200577,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738445883
    },
    {
        "content": "<p>where you're basically like \"if I encounter this condition, GOTO this other place\"</p>",
        "id": 497200623,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738445915
    },
    {
        "content": "<p>except instead of actual gotos, they're all labeled</p>",
        "id": 497200642,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738445933
    },
    {
        "content": "<p>Sorry Richard, I don't have any experience with that kind of parser (I'm a one-trick pony with RD), do you have an example to share?</p>",
        "id": 497200646,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738445940
    },
    {
        "content": "<p>(I can imagine a simple example, but at the scale of a full PL grammar it's hard)</p>",
        "id": 497200689,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738445985
    },
    {
        "content": "<p>Actually it reminds me of the grammar that's made by Nearly</p>",
        "id": 497200707,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738445999
    },
    {
        "content": "<p>it's what simdjson uses for the parsing step, except they use actual goto <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 497200759,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738446011
    },
    {
        "content": "<p>(I don't have a link handy and I'm on mobile)</p>",
        "id": 497200774,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738446023
    },
    {
        "content": "<p>Which is a tool I was forced into using for making the Formula language in our product (in JS)</p>",
        "id": 497200775,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738446025
    },
    {
        "content": "<p>I'll take a look at it</p>",
        "id": 497200782,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738446040
    },
    {
        "content": "<p>I think they do it for performance, but it seems like it would be super straightforward to read and understand</p>",
        "id": 497200789,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738446051
    },
    {
        "content": "<p>It's been a while since I read about simdjson</p>",
        "id": 497200791,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738446051
    },
    {
        "content": "<p>don't look at the lexer <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 497200818,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738446074
    },
    {
        "content": "<p>I think complicated state machines can be very hard to understand a non-linear flow</p>",
        "id": 497200819,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738446075
    },
    {
        "content": "<p>But I am open minded!</p>",
        "id": 497200911,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738446139
    },
    {
        "content": "<p>oh btw, I think we should restrict line lengths to u16 and total number of lines per file to u16</p>",
        "id": 497200939,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738446185
    },
    {
        "content": "<p>so regions can be more compact</p>",
        "id": 497200947,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738446194
    },
    {
        "content": "<p>Think of it as a while loop with a switch statement in it over the current state of the state machine. It really isn't anything special.</p>",
        "id": 497200956,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738446212
    },
    {
        "content": "<p>Just more optimized than that</p>",
        "id": 497200962,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738446226
    },
    {
        "content": "<p>I'm fine saying you can't have a line that's more than 65k lines long, and also that you can't have a .roc file that's more than 65k lines long</p>",
        "id": 497201024,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738446254
    },
    {
        "content": "<p>I guess we’ll cross the “Why can’t you compile my 80k LOC module” bridge when we get there</p>",
        "id": 497201180,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738446382
    },
    {
        "content": "<p>In some ways you could say we’ve made it if we do</p>",
        "id": 497201198,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738446402
    },
    {
        "content": "<p>oh that's easy: \"Because .roc files aren't allowed to be that long. You have to split it up.\"</p>",
        "id": 497201227,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738446439
    },
    {
        "content": "<p>I'm so excited for when this rewrite leads to having proper debug info in the llvm backend</p>",
        "id": 497201233,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738446448
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> I wonder how debugging in an interpreter backend could work</p>",
        "id": 497201296,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738446491
    },
    {
        "content": "<p>step debugging I mean</p>",
        "id": 497201357,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738446555
    },
    {
        "content": "<p>I don't think it could possibly be compatible with gdb/lldb unless I'm missing something</p>",
        "id": 497201383,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738446589
    },
    {
        "content": "<p>I think it would need to do its own thing</p>",
        "id": 497201440,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738446612
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/316715-contributing/topic/contributor.20coordination.20meeting.20-.20Feb.202024.20.232/near/497200939\">said</a>:</p>\n<blockquote>\n<p>oh btw, I think we should restrict line lengths to u16 and total number of lines per file to u16</p>\n</blockquote>\n<p>Maybe even u8 line lengths?</p>",
        "id": 497201442,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1738446614
    },
    {
        "content": "<p>Probably need to look into pdb more. Probably has things to learn from</p>",
        "id": 497201446,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738446620
    },
    {
        "content": "<p>Never mind I guess that wouldn’t help because of alignment</p>",
        "id": 497201460,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1738446641
    },
    {
        "content": "<p>yeah unless we did SoA regions or something <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 497201594,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738446750
    },
    {
        "content": "<p>Did zig end up going with a raw u32 offset? Then they recalculated line and col info if it is needed? Not sure that is a better choice. It is more flexible though.</p>",
        "id": 497201662,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738446823
    },
    {
        "content": "<p>hm actually in Zig it might be pretty easy to do a packed struct of a u32 split into a u20 and u12</p>",
        "id": 497201679,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738446841
    },
    {
        "content": "<p>oh yeah I think they did</p>",
        "id": 497201727,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738446859
    },
    {
        "content": "<p>I wonder about that for editor tooling, but maybe it's fine?</p>",
        "id": 497201764,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738446904
    },
    {
        "content": "<p>like the find all references example</p>",
        "id": 497201787,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738446926
    },
    {
        "content": "<p>Cause you only need line and col for warnings and errors....I guess you also need it for expect and dbg messages...</p>\n<p>Hmm, don't you need it for every node in llvm for debug info?</p>",
        "id": 497201788,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738446927
    },
    {
        "content": "<p>oh yeah probably</p>",
        "id": 497201795,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738446936
    },
    {
        "content": "<p>And yeah, I think something like U22, U12 sounds amazing. Like pick a reasonable line that allows for longer files at the cost of shorter lines</p>",
        "id": 497201856,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738446970
    },
    {
        "content": "<p>Using offset only is pretty typical</p>",
        "id": 497202041,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738447157
    },
    {
        "content": "<p>You can just pass the input to the reporter and have it calculate the line:col positions on the fly</p>",
        "id": 497202059,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738447184
    },
    {
        "content": "<p>My parser above does that</p>",
        "id": 497202072,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738447201
    },
    {
        "content": "<p>u32 split into a u20 and u12 would allow individual lines to be 4096 bytes and then each file could have up to 1M lines</p>",
        "id": 497202352,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738447394
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453336\">Joshua Warner</span> <a href=\"#narrow/channel/316715-contributing/topic/contributor.20coordination.20meeting.20-.20Feb.202024.20.232/near/497128203\">said</a>:</p>\n<blockquote>\n<p>Tried translating an old tokenizer experiment from rust to zig: <a href=\"https://github.com/joshuawarner32/roc/blob/c80a3ba0e453abf495619a1abf8ed28c9e6ff909/zig/tokenize/src/main.zig\">https://github.com/joshuawarner32/roc/blob/c80a3ba0e453abf495619a1abf8ed28c9e6ff909/zig/tokenize/src/main.zig</a></p>\n</blockquote>\n<p>saw this last night and made this: <a href=\"https://clbin.com/m5TF7\">https://clbin.com/m5TF7</a></p>\n<p>when you have 2+ ArrayList with the same length, that's a great case for MultiArrayList which is equivalent but will have only 1 length field for all of them, as well as manage exactly 1 allocation for all the arrays</p>",
        "id": 497202353,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738447397
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/channel/316715-contributing/topic/contributor.20coordination.20meeting.20-.20Feb.202024.20.232/near/497105120\">said</a>:</p>\n<blockquote>\n<p>so the (very serious) debuggability/ergonomics downside we've had of doing SoA in Rust may just be a non-issue in Zig</p>\n</blockquote>\n<p>with the llvm backend it's still a pain in the ass to debug MultiArrayList, however, with our self-hosted backends (currently x86_64 only, aarch64 to follow next) we have custom dwarf + <a href=\"https://github.com/ziglang/zig/wiki/LLDB-for-Zig\">lldb fork</a> that recognizes zig std lib types and makes debugging really nice. same thing goes for hash maps</p>\n<p><a href=\"https://calabro.io/uscope\">this project</a> may be interesting to watch long term since jacobly (author of above lldb fork as well as zig's x86_64 backend) has taken an interest in it</p>",
        "id": 497202507,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738447557
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> <a href=\"#narrow/stream/316715-contributing/topic/contributor.20coordination.20meeting.20-.20Feb.202024.20.232/near/497202059\">said</a>:</p>\n<blockquote>\n<p>You can just pass the input to the reporter and have it calculate the line:col positions on the fly</p>\n</blockquote>\n<p>Yeah, would just require calculating all line and col offsets when generating debug info. So not sure it is that much of a gain.</p>",
        "id": 497202640,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738447666
    },
    {
        "content": "<p>I know this is a silly metric, but I hope with the new compiler rewrite I'll feel confident figuring out any part of the compiler. Currently, parser is manageable but pretty opaque to me. Some of type checking is fine, but a lot is hard to follow fully. Obviously don't really know where to start with our more complex type related passes. Then I can understand all the backends, but I think some of that is due to lots of exposure rather than them being clean or simple.</p>",
        "id": 497203010,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738447997
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/316715-contributing/topic/contributor.20coordination.20meeting.20-.20Feb.202024.20.232/near/497202640\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> <a href=\"#narrow/stream/316715-contributing/topic/contributor.20coordination.20meeting.20-.20Feb.202024.20.232/near/497202059\">said</a>:</p>\n<blockquote>\n<p>You can just pass the input to the reporter and have it calculate the line:col positions on the fly</p>\n</blockquote>\n<p>Yeah, would just require calculating all line and col offsets when generating debug info. So not sure it is that much of a gain.</p>\n</blockquote>\n<p>For a normal use case you are reporting multiple orders of magnitude fewer problems than you are parsing AST nodes</p>",
        "id": 497203285,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738448255
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/316715-contributing/topic/contributor.20coordination.20meeting.20-.20Feb.202024.20.232/near/497199519\">said</a>:</p>\n<blockquote>\n<p>it looks like there's already enough here to try out zig's builtin fuzzing on! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>\n</blockquote>\n<p>Fuzzing is very alpha right now, I recommend to join zig development if you want to play with it. I mean really alpha like I have a branch with everything rewritten that I haven't merged yet. I expect that to become beta quality during the 0.15.0 release cycle. I will say though having it integrated into the compiler tool chain and unit tests is going to be a killer feature. I even have a web UI where you can watch the fuzzer find new code paths in realtime</p>",
        "id": 497203356,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738448284
    },
    {
        "content": "<p>I’ve used it in three parser projects and it was still fast enough</p>",
        "id": 497203358,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738448286
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/channel/316715-contributing/topic/contributor.20coordination.20meeting.20-.20Feb.202024.20.232/near/497201024\">said</a>:</p>\n<blockquote>\n<p>I'm fine saying you can't have a line that's more than 65k lines long, and also that you can't have a .roc file that's more than 65k lines long</p>\n</blockquote>\n<p>would you believe me if I told you we had a hand-written, hand-maintained file in the zig compiler codebase that uses 78% of this quota <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 497203983,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738448767
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"406911\">Andrew Kelley</span> <a href=\"#narrow/stream/316715-contributing/topic/contributor.20coordination.20meeting.20-.20Feb.202024.20.232/near/497203356\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/316715-contributing/topic/contributor.20coordination.20meeting.20-.20Feb.202024.20.232/near/497199519\">said</a>:</p>\n<blockquote>\n<p>it looks like there's already enough here to try out zig's builtin fuzzing on! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>\n</blockquote>\n<p>Fuzzing is very alpha right now, I recommend to join zig development if you want to play with it. I mean really alpha like I have a branch with everything rewritten that I haven't merged yet. I expect that to become beta quality during the 0.15.0 release cycle. I will say though having it integrated into the compiler tool chain and unit tests is going to be a killer feature. I even have a web UI where you can watch the fuzzer find new code paths in realtime</p>\n</blockquote>\n<p>I assume it is easy to plug zig into existing c++ fuzzers currently? Like libfuzzer and afl? Just need to compile zig with some extra llvm flags for coverage info, right?</p>",
        "id": 497204912,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738449645
    },
    {
        "content": "<p>Glad to see everyone hyped about this. I'm going to move this discussion into our compiler development channel to recover the contributor coord thread. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 497210795,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738455540
    },
    {
        "content": "<p>292 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"316715\" href=\"/#narrow/channel/316715-contributing/topic/contributor.20coordination.20meeting.20-.20Feb.202024.20.232\">#contributing &gt; contributor coordination meeting - Feb 2024 #2</a> by <span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span>.</p>",
        "id": 497210831,
        "sender_full_name": "Notification Bot",
        "timestamp": 1738455599
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453336\">Joshua Warner</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20spike/near/497199797\">said</a>:</p>\n<blockquote>\n<p>Maybe we should have a branch on the main roc repo we can collaborate on?</p>\n</blockquote>\n<p>I think this would be a good idea.</p>\n<p>We discussed all the zig code should live under <code>src/</code>, so I think just start with that structure is ok. </p>\n<p>Also for the parser stage - tokenizer specifically.. I think it would live somewhere like <br>\n<code>/src/check/parse/tokenize/...</code> based on the presentation we were organising verything according to it's function and nesting from the top-down, phases-&gt;stages-&gt;etc</p>",
        "id": 497211006,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738455776
    },
    {
        "content": "<p>One thing I'm really unsure about because I haven't researched it yet, is if we want or need to organise all of the zig modules into separate zig \"packages\" or if that is just unnecessary. </p>\n<p>One of the goals is for it to be easy for tooling to reach in and use the code for multiple purposes. </p>\n<p>Do we need to define these boundaries ahead of time and separate them into packages? or are zig modules easy to refer to, like rust crates?</p>",
        "id": 497211197,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738455989
    },
    {
        "content": "<p>I think we should use a separate folder but not a separate branch</p>",
        "id": 497212189,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738457107
    },
    {
        "content": "<p>better to just keep merging stuff into <code>main</code> since we're not going to cause merge conflicts with any existing PRs anyway <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 497212205,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738457144
    },
    {
        "content": "<p>To clarify this <code>/src/check/parse/tokenize/...</code>, in my mind this is a structure like;  </p>\n<ol>\n<li><code>check</code> phase</li>\n<li><code>parse</code> stage</li>\n<li><code>tokenize</code> function</li>\n</ol>\n<p>I like to structure things based on their function or behaviour, for at least the top one or two levels. But I appreciate that this can be a controversial topic.</p>",
        "id": 497212414,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738457390
    },
    {
        "content": "<p>Yeah, trying to organize roughly based on pass ordering and IR sounds like a great idea. Should help avoid dependency messes.</p>",
        "id": 497212485,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738457440
    },
    {
        "content": "<p>Though tokenize may just be <code>tokenize.zig</code> in this case. Only needs to be a folder if it is so complex that it needs many files</p>",
        "id": 497212530,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738457495
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/395097-compiler-development/topic/zig.20compiler.20-.20spike/near/497204912\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"406911\">Andrew Kelley</span> <a href=\"#narrow/stream/316715-contributing/topic/contributor.20coordination.20meeting.20-.20Feb.202024.20.232/near/497203356\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/316715-contributing/topic/contributor.20coordination.20meeting.20-.20Feb.202024.20.232/near/497199519\">said</a>:</p>\n<blockquote>\n<p>it looks like there's already enough here to try out zig's builtin fuzzing on! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>\n</blockquote>\n<p>Fuzzing is very alpha right now, I recommend to join zig development if you want to play with it. I mean really alpha like I have a branch with everything rewritten that I haven't merged yet. I expect that to become beta quality during the 0.15.0 release cycle. I will say though having it integrated into the compiler tool chain and unit tests is going to be a killer feature. I even have a web UI where you can watch the fuzzer find new code paths in realtime</p>\n</blockquote>\n<p>I assume it is easy to plug zig into existing c++ fuzzers currently? Like libfuzzer and afl? Just need to compile zig with some extra llvm flags for coverage info, right?</p>\n</blockquote>\n<p>Yeah that all works, I recently tried out that use case and fixed a few codegen things to make it a smooth experience. I think Loris has a nice example somewhere, let me grab a link and make sure it still builds</p>",
        "id": 497212727,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738457681
    },
    {
        "content": "<p>Useful talks to watch if you want more context on DOD and how things are done in the zig compiler. Likely will help with thinking about how to model data structures in the new compiler:<br>\n<a href=\"https://youtu.be/IroPQ150F6c?si=KfAFMumPd1K44fWA\">Andrew Kelley Practical Data Oriented Design (DoD)</a><br>\n<a href=\"https://youtu.be/KOZcJwGdQok?si=NKK0iXHxInXsErM3\">Data-Oriented Design Revisited: Type Safety in the Zig Compiler - Matthew Lugg</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"IroPQ150F6c\" href=\"https://youtu.be/IroPQ150F6c?si=KfAFMumPd1K44fWA\"><img src=\"https://uploads.zulipusercontent.net/1d09c7a84eb347cc4f11baa9a6c2df0af9473718/68747470733a2f2f692e7974696d672e636f6d2f76692f49726f50513135304636632f64656661756c742e6a7067\"></a></div><div class=\"youtube-video message_inline_image\"><a data-id=\"KOZcJwGdQok\" href=\"https://youtu.be/KOZcJwGdQok?si=NKK0iXHxInXsErM3\"><img src=\"https://uploads.zulipusercontent.net/77c7ba4f0729f01fcb5cb34d949753b24c323046/68747470733a2f2f692e7974696d672e636f6d2f76692f4b4f5a634a774764516f6b2f64656661756c742e6a7067\"></a></div>",
        "id": 497216667,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738461758
    },
    {
        "content": "<p>second talk especially has zig compiler ir specific designs and example code.</p>",
        "id": 497216906,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738461977
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20spike/near/497200939\">said</a>:</p>\n<blockquote>\n<p>oh btw, I think we should restrict line lengths to u16 and total number of lines per file to u16</p>\n</blockquote>\n<p>We currently use u32's to indicate positions in the syntax tree at least (and I _think_ elsewhere). Just byte index into the original string. That's both (1) the same size as 2 u16's, and (2) more flexible - i.e. you can have 17k lines just fine, so long as they're normal length lines. </p>\n<p>I have definitely worked in projects with one or more files with 16k+ lines. While I don't want to encourage that, it's also a small enough limit that it doesn't feel worth it to enforce.</p>",
        "id": 497219399,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738464500
    },
    {
        "content": "<p>Seems really easy to go over 16k lines with codegen</p>",
        "id": 497220004,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738465174
    },
    {
        "content": "<p>re: <a class=\"message-link\" href=\"/#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20spike/near/497212727\">#compiler development &gt; zig compiler - spike @ 💬</a> </p>\n<p><a href=\"https://github.com/kristoff-it/zig-afl-kit/\">https://github.com/kristoff-it/zig-afl-kit/</a></p>\n<p>if you give this a spin, I recommend to have a chat with Loris if you run into any issues. I didn't try using AFL yet other than reading the source code since I'm more interested in advancing the integrated fuzzing implementation</p>",
        "id": 497220971,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738466166
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"406911\">@Andrew Kelley</span> Applied your suggestions - thanks!<br>\nFWIW, the reason for adding an extra entry to <code>self.output.offsets</code> was essentially the same job an Eof token would be doing. In the parser that corresponded to this, having that there avoided some branches - but I didn't need the actual eof token itself, so I never added it. <span aria-label=\"man shrugging\" class=\"emoji emoji-1f937-200d-2642\" role=\"img\" title=\"man shrugging\">:man_shrugging:</span> Went ahead and replaced that with a proper EndOfFile token.</p>",
        "id": 497221078,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738466317
    },
    {
        "content": "<p>Also added the import keyword, removed the NoSpace weirdness, and it now supports snake_case idents</p>",
        "id": 497221100,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738466347
    },
    {
        "content": "<p>ah yeah I figured it was something like that</p>",
        "id": 497221223,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738466504
    },
    {
        "content": "<p>Tokenizer PR here: <a href=\"https://github.com/roc-lang/roc/pull/7569\">https://github.com/roc-lang/roc/pull/7569</a></p>",
        "id": 497221389,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738466645
    },
    {
        "content": "<p>another thing you might have fun playing with is <a href=\"https://github.com/ziglang/zig/pull/21257#issuecomment-2336865183\">labeled switch continue</a>. In the case that the value used is comptime known, it's a direct branch to the other case. This is a common optimization trick used by emulators for example. <a href=\"https://github.com/ziglang/zig/pull/21367\">When we switched our tokenizer to use it, we observed a 13% perf improvement</a></p>",
        "id": 497221395,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738466657
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453336\">Joshua Warner</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20spike/near/497221389\">said</a>:</p>\n<blockquote>\n<p>Tokenizer PR here: <a href=\"https://github.com/roc-lang/roc/pull/7569\">https://github.com/roc-lang/roc/pull/7569</a></p>\n</blockquote>\n<p>IT BEGINS</p>",
        "id": 497221409,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738466680
    },
    {
        "content": "<p>(btw, please please rip my zig code to shreds; this is a useful learning opportunity)</p>",
        "id": 497221439,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738466739
    },
    {
        "content": "<p>re: labeled switch continue<br>\nOhhhh Richard posted that above, but I didn't get the connection initially. I'll check it out!</p>",
        "id": 497221446,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738466750
    },
    {
        "content": "<p>it's also just like really satisfying to use for some reason, idk if it's just me</p>",
        "id": 497221500,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738466792
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453336\">Joshua Warner</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20spike/near/497221439\">said</a>:</p>\n<blockquote>\n<p>(btw, please please rip my zig code to shreds; this is a useful learning opportunity)</p>\n</blockquote>\n<p>ok, you got it <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> I trust you to tell me if it becomes too much</p>",
        "id": 497221655,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738466997
    },
    {
        "content": "<p>I'll be curious to hear how the perf measures up old code vs new code, although I'm sure the tokenizer is insignificant compared to the rest of the pipeline</p>",
        "id": 497222461,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738467771
    },
    {
        "content": "<p>General request:</p>\n<p>As we spin up this new compiler, can we try to add file and function doc comments to everything (or at least everything exposed). They can be super simple, but I think if we start from the core with a culture of documentation it will be very useful. I think we will be much much more likely to document the compiler flow if we are separate stages of the compiler into different files and we add a high level comment about the goal of each file and roughly what it is meant to do.</p>",
        "id": 497231559,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738476831
    },
    {
        "content": "<p>Beyond Rust compiler compilation speedup that is irrelevant with Zig's compilation speeds, I don't think there's a good reason to split our compiler into separate libraries. Folders seem sufficient. To that end, I don't think we should consolidate the IR into a single place, that moves the data types away from the logic that operates on them. I'm gonna put the IRs in their respective stage folders, probably in <code>&lt;phase&gt;/&lt;stage&gt;/ir.zig</code></p>",
        "id": 497259791,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738503861
    },
    {
        "content": "<p>I agree with that</p>",
        "id": 497259822,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738503904
    },
    {
        "content": "<p>Totally agree</p>",
        "id": 497270679,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738513738
    },
    {
        "content": "<p>Fun random thing I just realized. Cause the interpreter will be written in zig, it will be able to just call the zig builtins without any sort of ffi complexities.</p>",
        "id": 497314701,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738548302
    },
    {
        "content": "<p>Yeah that was one of the big motivating factors Richard mentioned. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 497314913,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738548410
    },
    {
        "content": "<p>How does one organize a large multi-file zig project?</p>",
        "id": 497319406,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738551635
    },
    {
        "content": "<p>Do you make intermediate libraries that reference other libs? Or is it better to do one big source tree that builds into a single exe?</p>",
        "id": 497319478,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738551679
    },
    {
        "content": "<p>On big source tree with direct file imports from what I have seen</p>",
        "id": 497320055,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738552043
    },
    {
        "content": "<p>I've starting putting a simple shell for the cli together... not sure if it's something we'll want to keep. But something to parse the cli args and build a binary from. Based pretty heavily off the zig compiler. -- mostly as a learning exercise, but I plan to make it a PR so we have something.</p>",
        "id": 497320380,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738552277
    },
    {
        "content": "<p>I'm not sure the exact standard, but I would assume something like:</p>\n<div class=\"codehilite\"><pre><span></span><code>build.zig\nbuild.zig.zon\nmain.zig\n\n&lt;phase.zig&gt;\n&lt;phase&gt;/&lt;stage&gt;.zig\n&lt;phase&gt;/&lt;stage&gt;/something.zig\n</code></pre></div>\n<p>Where zig files are only allowed to import from files at the same level or from a level deeper if the folder name matches the zig file name. That enables clean separation of various parts of the compiler with clear interfaces</p>",
        "id": 497320386,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738552286
    },
    {
        "content": "<p>And how does that work with tests? One test target from main.zig? Or multiple?</p>",
        "id": 497320410,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738552320
    },
    {
        "content": "<p>And if a <code>&lt;stage&gt;</code> is small enough, or just getting started, it may just be in one file. In that case it would just be <code>&lt;phase&gt;/&lt;stage&gt;.zig</code> and there would be no <code>&lt;phase&gt;/&lt;stage&gt;/something.zig</code></p>",
        "id": 497320472,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738552344
    },
    {
        "content": "<p>I'm not sure the best way to do tests. One natural way (but may not scale well) is to put tests at the bottom of the file. That way I can just do <code>zig test &lt;phase&gt;/&lt;stage&gt;.zig</code> to run all tests for a specific stage.</p>",
        "id": 497320608,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738552464
    },
    {
        "content": "<p>But it might be cleaner to make a separate test directory. Based on experience with rust, you want a reasonable number of test executables/targets. If you have too many, it wastes a crap ton of time linking them all. If you have too few, you have to compile way too much code for small changes.</p>",
        "id": 497320667,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738552525
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"406911\">@Andrew Kelley</span> in case he has any good tips on zig project organization.</p>",
        "id": 497320684,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738552543
    },
    {
        "content": "<p>I have this right now:<br>\n<a href=\"/user_uploads/22008/ypRTtM3FWVuqczj7T2NVt5W2/Screenshot-2025-02-02-at-19.15.34.png\">Screenshot 2025-02-02 at 19.15.34.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/ypRTtM3FWVuqczj7T2NVt5W2/Screenshot-2025-02-02-at-19.15.34.png\" title=\"Screenshot 2025-02-02 at 19.15.34.png\"><img data-original-content-type=\"image/png\" data-original-dimensions=\"492x570\" src=\"/user_uploads/thumbnail/22008/ypRTtM3FWVuqczj7T2NVt5W2/Screenshot-2025-02-02-at-19.15.34.png/840x560.webp\"></a></div><p>Having trouble importing the tokenizer from the parser:</p>\n<div class=\"codehilite\"><pre><span></span><code>check/parse/parse.zig:2:27: error: import of file outside module path: '../tokenizer/tokenizer.zig'\nconst tokenizer = @import(\"../tokenizer/tokenizer.zig\");\n                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n</code></pre></div>",
        "id": 497320737,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738552568
    },
    {
        "content": "<p>I think it should be:</p>\n<div class=\"codehilite\"><pre><span></span><code>check/parse.zig\ncheck/tokenize.zig\n</code></pre></div>",
        "id": 497320818,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738552654
    },
    {
        "content": "<p>If parse needs to be split over multiple files, it would be:</p>\n<div class=\"codehilite\"><pre><span></span><code>check/parse.zig\ncheck/parse/subpart1.zig\ncheck/parse/subpart2.zig\n</code></pre></div>",
        "id": 497320879,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738552685
    },
    {
        "content": "<p>Ahhhhh cool</p>",
        "id": 497320890,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738552696
    },
    {
        "content": "<p>Being a beginner is fun <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 497320922,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738552739
    },
    {
        "content": "<p>I'm definitely still a beginner in terms of expected zig project organization. Though I have worked on a few zig projects at this point, I have never touched anything large or dealt with best practices around organization</p>",
        "id": 497321064,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738552817
    },
    {
        "content": "<p>This is just some stuff I have gleamed from looking at the zig compiler itself, but I really have not studied it thoroughly</p>",
        "id": 497321135,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738552875
    },
    {
        "content": "<blockquote>\n<p>File names fall into two categories: types and namespaces. If the file (implicitly a struct) has top level fields, it should be named like any other struct with fields using <code>TitleCase</code>. Otherwise, it should use <code>snake_case</code>. Directory names should be<code>snake_case</code>.</p>\n</blockquote>\n<p><a href=\"https://ziglang.org/documentation/0.13.0/#Names\">https://ziglang.org/documentation/0.13.0/#Names</a></p>",
        "id": 497321257,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738552968
    },
    {
        "content": "<p>Also, the pattern I described follows what the zig standard library does for reference</p>",
        "id": 497321450,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738553127
    },
    {
        "content": "<p>Also, the <code>TitleCase</code> just for reference is used to define a type in a single file. For example, instead of defining <code>Cursor</code> in <code>tokenize.zig</code> you could instead put it in <code>tokenize/Cursor.zig</code>. In this case, you would literally copy <a href=\"https://github.com/roc-lang/roc/pull/7569/files#diff-c2a2fc09334f303fce8313a1c4bfb2a82735c22b8db2d03e990419cd212daf60R309-R642\">all of the lines within <code>struct { ... }</code></a> as the contents of <code>Cursor.zig</code>.</p>",
        "id": 497321712,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738553287
    },
    {
        "content": "<p>Anyway, for structure purpose, I think that we should put unit tests at the bottom of the relevant file. For our larger integration tests, we probably want them to be standalone executables that read the snapshots and what not.</p>",
        "id": 497321787,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738553396
    },
    {
        "content": "<p>Also, just to explain one more design point, if we have:</p>\n<div class=\"codehilite\"><pre><span></span><code>check/parse.zig\ncheck/parse/ir.zig\ncheck/canonicalize.zig\n</code></pre></div>\n<p>and <code>canonicalize</code> needs access to <code>parse/ir.zig</code>, it would do:</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">@import</span><span class=\"p\">(</span><span class=\"s\">\"parse.zig\"</span><span class=\"p\">);</span>\n<span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">ir</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"p\">.</span><span class=\"n\">ir</span><span class=\"p\">;</span>\n</code></pre></div>",
        "id": 497322280,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738553756
    },
    {
        "content": "<p>and parse would need to export the ir for can to import</p>",
        "id": 497322374,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738553793
    },
    {
        "content": "<p>Here's my WIP for the cli <a href=\"https://github.com/roc-lang/roc/pull/7571\">https://github.com/roc-lang/roc/pull/7571</a></p>",
        "id": 497322651,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738554027
    },
    {
        "content": "<p>If others are ok with it, I'm heavily interested in working on the interpreter. Of course, it depends on getting everything wired through type checking before it can be worked on. I feel like it is the highest level thing that I can really help with (both initial implementation and eventual optimizations). I'm sure I'll need help finding the correct design around type info and such, but sounds like a fun project. (also, I'm sure more than one person can work on the interpreter if others are interested).</p>\n<p>Hopefully will be able to start by working only with self contained examples that don't need platforms then can expand to passing in pointers for allocators and effects. Will be interesting eventually getting it working in wasm too.</p>",
        "id": 497323600,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738554800
    },
    {
        "content": "<p>Otherwise, hopefully I can help with reviews and some high level zig organizational stuff.</p>",
        "id": 497323635,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738554838
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20spike/near/497322651\">said</a>:</p>\n<blockquote>\n<p>Here's my WIP for the cli <a href=\"https://github.com/roc-lang/roc/pull/7571\">https://github.com/roc-lang/roc/pull/7571</a></p>\n</blockquote>\n<p>What order do we want to land things in. Someone has to put the base zig config and organization together. Currently both this and <span class=\"user-mention\" data-user-id=\"453336\">@Joshua Warner</span>'s PR both are setting up the zig build and what not.</p>",
        "id": 497333948,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738560911
    },
    {
        "content": "<p>I'm still cleaning mine up from the feedback. If Josh's merges first I can merge any updates and adapt it.</p>",
        "id": 497334307,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738561131
    },
    {
        "content": "<p>It sounds like your keen to start on things. Also feel free to push to my branch. I'm not precious about what I have so far... and probably wont be doing much for the next 18hrs</p>",
        "id": 497334401,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738561191
    },
    {
        "content": "<blockquote>\n<p>It sounds like your keen to start on things</p>\n</blockquote>\n<p>I guess so, though not like I have that much time at the end of today.</p>",
        "id": 497334513,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738561240
    },
    {
        "content": "<p>Yeah, I'm so hyped about the zig stuff... I just want to work on this instead of my actual work. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 497335417,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738561721
    },
    {
        "content": "<p>Also, as a general note, I feel like for some things I might just make cleanup PRs for instead of adding PR comments. Just feel liking cleaning up some code will be easier to just show the changes that I think would be nice than add a ton of comments. On top of that, they aren't pressing, so I don't think they are worth tons of iteration on PRs for.</p>",
        "id": 497336841,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738562469
    },
    {
        "content": "<p>Sounds good. I like the feedback because I'm learning. But appreciate its a lot more work.</p>",
        "id": 497337685,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738562856
    },
    {
        "content": "<p>At a minimum, I'll make sure to add original authors as reviewers.</p>",
        "id": 497337814,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738562917
    },
    {
        "content": "<p>Yep, definitely better to just do cleanup PRs for now.</p>",
        "id": 497341605,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738564772
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"453336\">@Joshua Warner</span> don't the build.zig ans build.zig.zon usually go in the folder outside of src?</p>",
        "id": 497341697,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738564806
    },
    {
        "content": "<p>I think we could just leave those in the root of the roc repo and they won't interfere with anything</p>",
        "id": 497341759,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738564843
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20spike/near/497322651\">said</a>:</p>\n<blockquote>\n<p>Here's my WIP for the cli <a href=\"https://github.com/roc-lang/roc/pull/7571\">https://github.com/roc-lang/roc/pull/7571</a></p>\n</blockquote>\n<p>Ok... I've fixed <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span>'s suggestions. I think we could just merge this and then we've got a basic structure to start working with.</p>",
        "id": 497377216,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738575245
    },
    {
        "content": "<p>Anyone available to review?</p>",
        "id": 497377269,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738575259
    },
    {
        "content": "<p>I approved you <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span></p>",
        "id": 497429205,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738587884
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20spike/near/497320684\">said</a>:</p>\n<blockquote>\n<p>cc <span class=\"user-mention silent\" data-user-id=\"406911\">Andrew Kelley</span> in case he has any good tips on zig project organization.</p>\n</blockquote>\n<p>my main suggestion is to take advantage of namespace nesting, try to follow <a href=\"https://ziglang.org/documentation/master/#Style-Guide\">these namespace-related suggestions</a>, and then once any given struct accumulates \"too much\" code inside of it, extract it to a separate file.</p>\n<p>in my experience one generally ends up with weird/wrong organization when trying to guess ahead of time which files to put stuff in, but a nice organization arises when you prioritize the Fully Qualified Namespace Names having precise, accurate, non-redundant names</p>",
        "id": 497547061,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738623092
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/pull/7573\">https://github.com/roc-lang/roc/pull/7573</a></p>\n<ul>\n<li>Improve cli command and option parsing -- refactor into a separate module and add tests.</li>\n<li>Configure all tests to run from cli using <code>zig build test</code> -- tests to run are specified in <code>src/test.zig</code></li>\n</ul>",
        "id": 497553239,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738626017
    },
    {
        "content": "<p>Also .. I was surprised at first that just <code>zig build test</code> didn't report anything unless there is a failure. So I also \"install\"  the test binary so it can be run separately. </p>\n<div class=\"codehilite\"><pre><span></span><code>10:40:31 ~/Documents/GitHub/roc zig-cli $ zig build test\n10:40:35 ~/Documents/GitHub/roc zig-cli $ zig build &amp;&amp; ./zig-out/bin/test\nAll 4 tests passed.\n</code></pre></div>",
        "id": 497553332,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738626083
    },
    {
        "content": "<p>I don't know if it's controversial... but for now you have to specify <code>roc run</code> and the <code>run</code> subcommand isn't optional. It just greatly simplifies the option parsing logic. I figure we could improve later if we still want that.</p>",
        "id": 497553512,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738626183
    },
    {
        "content": "<p>Didn't we want to remove <code>roc run</code>? <a href=\"https://github.com/roc-lang/roc/issues/6637\">https://github.com/roc-lang/roc/issues/6637</a></p>",
        "id": 497553688,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738626266
    },
    {
        "content": "<p>Yes... well remove <code>roc dev</code> and <code>roc run</code> in favour of just <code>roc</code> was the plan ... but now I think it makes sense just to have <code>roc run</code> to simplify option parsing. So I've haven't added a <code>roc dev</code> or anything so we're still aligned with that new Cli workflow</p>",
        "id": 497553858,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738626357
    },
    {
        "content": "<p>The options I'm parsing are based on that Issue and not the current implementation</p>",
        "id": 497553932,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738626380
    },
    {
        "content": "<p><code>--opt size</code> <code>--opt none</code> etc</p>",
        "id": 497553949,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738626393
    },
    {
        "content": "<p>Okay, that's good. I think we shouldn't do <code>roc run</code> even if it's simpler, though. Making <code>roc script.roc</code> work is what makes shebangs work</p>",
        "id": 497554010,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738626441
    },
    {
        "content": "<p>I've ignored <code>--backend dev</code> etc.. because it sounds like we will only have the llvm backend. </p>\n<p>So <code>roc run</code> would use the interpreter dev loop, and <code>roc build</code> would use llvm.</p>",
        "id": 497554036,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738626459
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20spike/near/497554010\">said</a>:</p>\n<blockquote>\n<p>Okay, that's good. I think we shouldn't do <code>roc run</code> even if it's simpler, though. Making <code>roc script.roc</code> work is what makes shebangs work</p>\n</blockquote>\n<p>I agree.. I'll have another crack at it in a follow up PR. </p>\n<p>It was just challenging because we still support parsing options before providing the <code>path/to/app.roc</code> file to run, and we're not sure if we have invalid options or an invalid roc file path being passed. I'm sure there is a way to do it.</p>",
        "id": 497554247,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738626586
    },
    {
        "content": "<p>Made a PR to start figuring out fuzzing: <a href=\"https://github.com/roc-lang/roc/pull/7574\">https://github.com/roc-lang/roc/pull/7574</a></p>",
        "id": 497592906,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738651246
    },
    {
        "content": "<blockquote>\n<p>We discussed all the zig code should live under <code>src/</code>, so I think just start with that structure is ok.</p>\n</blockquote>\n<p>Can we move src, build.zig and build.zig.zon to a new separate folder (zig or zigcompiler...)? That way I can put a flake.nix in that folder instead of adding a flake-zig.nix at the root level that also requires custom <code>nix develop</code> flags to point to that flake etc.</p>",
        "id": 497687767,
        "sender_full_name": "Anton",
        "timestamp": 1738681390
    },
    {
        "content": "<p>We definitely shouldn't move src somewhere else because that will mean we have to move like a hundred files in 3 months back to the root</p>",
        "id": 497688455,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738681561
    },
    {
        "content": "<p>But I think just the build files would be okay</p>",
        "id": 497688564,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738681578
    },
    {
        "content": "<p>Doesn't zig expect the layout to be:</p>\n<div class=\"codehilite\"><pre><span></span><code>src\nbuild.zig\n</code></pre></div>",
        "id": 497691405,
        "sender_full_name": "Anton",
        "timestamp": 1738682337
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20spike/near/497688455\">said</a>:</p>\n<blockquote>\n<p>We definitely shouldn't move src somewhere else because that will mean we have to move like a hundred files in 3 months back to the root</p>\n</blockquote>\n<p>Do we plan to add ~hundred files to the root currently?</p>",
        "id": 497691643,
        "sender_full_name": "Anton",
        "timestamp": 1738682400
    },
    {
        "content": "<p>Seems like if we use <code>git mv</code> to move the folder we can avoid most of the typical downsides</p>",
        "id": 497693779,
        "sender_full_name": "Anton",
        "timestamp": 1738682894
    },
    {
        "content": "<p>There will be many files in <code>src/</code></p>",
        "id": 497695378,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738683253
    },
    {
        "content": "<p>Moving files isn't the real problem, it's moving files with 10 PRs against those files</p>",
        "id": 497695578,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738683307
    },
    {
        "content": "<p>I volunteer to update all those PRs. I'd really like a separate folder for the new compiler. We want to make tools like <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20integrate.20with.20tooling/near/497684665\">this platform</a> that don't belong in src so they'll end up at the root level, that will lead to flake dependency issues. I would also need to add a bunch of exceptions for when the new compiler CI should run vs old compiler CI because there is no clean folder separation.</p>",
        "id": 497700865,
        "sender_full_name": "Anton",
        "timestamp": 1738684689
    },
    {
        "content": "<p>I don't feel that strongly about it. If you think its really worth this effort, then go for it</p>",
        "id": 497702353,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738685061
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> I'll leave some time for others to weigh in on the folder issue if they want to</p>",
        "id": 497705304,
        "sender_full_name": "Anton",
        "timestamp": 1738685889
    },
    {
        "content": "<p>It's just a folder move. People can update PRs for a folder move. Though I would probably rather move the rust compiler and leave the new zig compiler at root.</p>",
        "id": 497709850,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738687185
    },
    {
        "content": "<p>That'd be way better IMO</p>",
        "id": 497711333,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738687569
    },
    {
        "content": "<p>Anyone have opinions on how to handle allocation failures for lists during Roc compilation? I don't know what recovery mechanism there is, so it feels like we'd want to just fail compilation, since <a href=\"https://ziglang.org/documentation/master/std/#std.mem.Allocator.Error\">it can only mean out of memory</a>. I don't think we should expose handling allocation failures because of this.</p>\n<p>Not sure how to avoid threading this logic throughout the entire service without doing something like \"if OOM, std.process.exit(1)\", though that's probably acceptable with a reasonable error message.</p>",
        "id": 497740958,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738697472
    },
    {
        "content": "<p>I wrote this function and I'm calling it on allocation results:</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">exit_on_oom</span><span class=\"p\">(</span><span class=\"n\">alloc_result</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">mem</span><span class=\"p\">.</span><span class=\"n\">Allocator</span><span class=\"p\">.</span><span class=\"n\">Error</span><span class=\"o\">!</span><span class=\"kt\">void</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">alloc_result</span><span class=\"w\"> </span><span class=\"k\">catch</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">oom_message</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">            </span><span class=\"sh\">\\\\I ran out of memory! I can't do anything to recover, so I'm exiting.</span>\n<span class=\"w\">            </span><span class=\"sh\">\\\\Try reducing memory usage on your machine and then running again.</span>\n<span class=\"w\">        </span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">debug</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">oom_message</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.{});</span>\n<span class=\"w\">        </span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">process</span><span class=\"p\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 497745132,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738698961
    },
    {
        "content": "<p>I would make the function just be what goes in catch</p>",
        "id": 497745299,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738699014
    },
    {
        "content": "<p>So it read <code>alloc(...) catch exit_on_oom</code></p>",
        "id": 497745343,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738699032
    },
    {
        "content": "<p>At the callsite</p>",
        "id": 497745369,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738699040
    },
    {
        "content": "<p>That reads better, yeah</p>",
        "id": 497745371,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738699041
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20spike/near/497592906\">said</a>:</p>\n<blockquote>\n<p>Made a PR to start figuring out fuzzing: <a href=\"https://github.com/roc-lang/roc/pull/7574\">https://github.com/roc-lang/roc/pull/7574</a></p>\n</blockquote>\n<p>neat, did it work? i.e. does it build and link and basically function?</p>",
        "id": 497773504,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738710249
    },
    {
        "content": "<p>It's broken in nix, but otherwise yes.</p>",
        "id": 497774313,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738710635
    },
    {
        "content": "<p>I'm assuming that is an issue with our nix config though. Seems that afl clang is somehow pulling in a version of llvm from nix that is wrong or something along those lines.</p>",
        "id": 497774401,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738710692
    },
    {
        "content": "<p>gotcha. well, that's certainly something we can compete on with an integrated fuzzer :) I'm looking forward to picking that project back up after the release is cut</p>",
        "id": 497774604,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738710795
    },
    {
        "content": "<p>Oh, actually, might have one minor other bug. I think there are some wrong linker flags that lead it to \"fail\" on recompiled due to the linker printing to stderr. But it actually succeeds.</p>",
        "id": 497774607,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738710797
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"406911\">Andrew Kelley</span> <a href=\"#narrow/stream/395097-compiler-development/topic/zig.20compiler.20-.20spike/near/497774604\">said</a>:</p>\n<blockquote>\n<p>gotcha. well, that's certainly something we can compete on with an integrated fuzzer :) I'm looking forward to picking that project back up after the release is cut</p>\n</blockquote>\n<p>We will be very happy to switch over as it gets more robust.</p>",
        "id": 497774640,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738710822
    },
    {
        "content": "<p>I think that go did an amazing job with integrated fuzzing and I'm sure zig can do something at least as good.</p>",
        "id": 497774725,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738710853
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"406911\">@Andrew Kelley</span> other random but related question, would you advise that we follow zig master instead of specific stable versions?</p>\n<p>I know a lot of zig projects seem to do that (though not sure how common it is nowadays and best practices). I would assume tracking master would get us things like faster compile times and integrated fuzzing sooner.</p>",
        "id": 497775086,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738711057
    },
    {
        "content": "<p>normally I would advise sticking to a release but we're like 2 weeks out from 0.14.0 so master branch is probably your best bet (the download page will show you the most recent master branch commit that passed all CI checks)</p>",
        "id": 497776263,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738711666
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20spike/near/497774640\">said</a>:</p>\n<blockquote>\n<p>We will be very happy to switch over as it gets more robust.</p>\n</blockquote>\n<p>there's a fun demo video in this PR that gives you a little taste of what I'm cooking up: <a href=\"https://github.com/ziglang/zig/pull/20958\">https://github.com/ziglang/zig/pull/20958</a></p>",
        "id": 497793806,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738721137
    },
    {
        "content": "<p>Very cool</p>",
        "id": 497795097,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738721842
    },
    {
        "content": "<p>I rebased <a href=\"https://github.com/roc-lang/roc/pull/7569\">https://github.com/roc-lang/roc/pull/7569</a> on top of the new top-level build organization and did some minimal integration work, mostly just useful for testing at this point. In particular, I do<code>zig build run -- check crates/compiler/test_syntax/tests/snapshots/pass/</code> to verify that the tokenizer will run over our existing tests without spitting out errors.</p>",
        "id": 497813235,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738734334
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> I'm thinking we should avoid putting too much time into translating the rust to zig for <code>roc/src/check/parse/ir.zig</code> specifically. It sounds like <span class=\"user-mention\" data-user-id=\"781658\">@Anthony Bullard</span> has been working on this.</p>",
        "id": 498009936,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738802307
    },
    {
        "content": "<p>Yep, I'm basically entirely ignoring parse. The stuff in the draft PR was initial work that I don't plan to finish</p>",
        "id": 498010001,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738802348
    },
    {
        "content": "<p>Yep I’m working</p>",
        "id": 498010058,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738802384
    },
    {
        "content": "<p>Do you have your stuff pushed anywhere? I'd be interested in collaborating. Might have some time tonight.</p>",
        "id": 498011330,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738802994
    },
    {
        "content": "<p>I can push something later</p>",
        "id": 498011430,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738803023
    },
    {
        "content": "<p>It’s in a chaotic state now after our convo</p>",
        "id": 498011441,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738803035
    },
    {
        "content": "<p>np!</p>",
        "id": 498011469,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738803057
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> what is the state of landing the core structure you have been hacking on?</p>",
        "id": 498011697,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738803177
    },
    {
        "content": "<p>Luke and I are about to call, you're welcome to join. I think I could make a couple things a bit more consistent and then just push anyway, and we could keep cleaning up even after merging something into the main repo.</p>\n<p>Choir got cancelled tonight so I've got lots of time for that today.</p>",
        "id": 498011907,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738803278
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/pull/7580\">https://github.com/roc-lang/roc/pull/7580</a></p>",
        "id": 498011968,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738803308
    },
    {
        "content": "<p>I want to make the <code>build/</code> IRs all follow a cleaned up structure, and then we can probably just push to prioritize visibility over finishedness</p>",
        "id": 498012132,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738803371
    },
    {
        "content": "<p>I like using Zed's realtime collab features. I can leave all kinds of mess behind in Sam's PR <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 498012176,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738803398
    },
    {
        "content": "<p>Oh cool would love to join</p>",
        "id": 498012727,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738803630
    },
    {
        "content": "<p>I might be able to in about an hour or so if you are still on</p>",
        "id": 498014008,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738804350
    },
    {
        "content": "<p>Odds are good, just ping us</p>",
        "id": 498014770,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738804744
    },
    {
        "content": "<p>Hah well figured out why you didn't have my syntax.zig <span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> ; because I never committed it <span aria-label=\"man facepalming\" class=\"emoji emoji-1f926-200d-2642\" role=\"img\" title=\"man facepalming\">:man_facepalming:</span> <br>\nAnd that's why we need CI!</p>",
        "id": 498042200,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738821471
    },
    {
        "content": "<p>Big shrug, we'll get there soon</p>",
        "id": 498042482,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738821603
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> I figured out the build flag, it isn't <code>--verbose</code>, it is <code>--summary all</code>. Prints out a summary of all the steps zig ran, if they were cached, and more clearly shows how many tests passed if they ran at all.</p>",
        "id": 498048626,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738825092
    },
    {
        "content": "<p>Thanks for the heads up</p>",
        "id": 498050314,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738825918
    },
    {
        "content": "<p>I found this interesting while creating the type-safe layer on top of the parser AST:</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kr\">var</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"n\">ast</span><span class=\"p\">.</span><span class=\"n\">NodeStore</span><span class=\"p\">.</span><span class=\"n\">initWithCapacity</span><span class=\"p\">(</span><span class=\"n\">allocator</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">estimated_node_count</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">expr_index</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ast</span><span class=\"p\">.</span><span class=\"n\">NodeStore</span><span class=\"p\">.</span><span class=\"n\">ExprIndex</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">addExpr</span><span class=\"p\">(.{</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">.{</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">token</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">region</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">.{</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">});</span>\n<span class=\"w\">    </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">addStatement</span><span class=\"p\">(.{</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">.{</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">expr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">expr_index</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">region</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">.{</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">});</span>\n<span class=\"w\">    </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">blah</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ast</span><span class=\"p\">.</span><span class=\"n\">NodeStore</span><span class=\"p\">.</span><span class=\"n\">StatementIndex</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">expr_index</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>This compiles successfully, the definitions of each ExprIndex and StatementIndex:</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">StatementIndex</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">ExprIndex</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">};</span>\n</code></pre></div>\n<p>They are what I thought were nominal types, but are treated as structural here.  <span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> you might want to take note.</p>",
        "id": 498137220,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738852958
    },
    {
        "content": "<p>Changing the implementation of the index types to the following makes the types work fine:</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">StatementIndex</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">statement</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">ExprIndex</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">expr</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">};</span>\n</code></pre></div>",
        "id": 498138705,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738853358
    },
    {
        "content": "<p>I'll try the enum thing then. There are a few more options</p>",
        "id": 498146425,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738855331
    },
    {
        "content": "<p>I'm happy with what I got</p>",
        "id": 498152812,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738856924
    },
    {
        "content": "<p>I think just having a field name resolves it, you should check though.</p>",
        "id": 498152897,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738856946
    },
    {
        "content": "<p>Here is what usage of the type safe layer looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kr\">var</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"n\">ast</span><span class=\"p\">.</span><span class=\"n\">NodeStore</span><span class=\"p\">.</span><span class=\"n\">initWithCapacity</span><span class=\"p\">(</span><span class=\"n\">allocator</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">estimated_node_count</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">expr_index</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">addExpr</span><span class=\"p\">(.{</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">.{</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">token</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">region</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">.{</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">});</span>\n<span class=\"w\">    </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">statement_index</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">addStatement</span><span class=\"p\">(.{</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">.{</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">expr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">expr_index</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">region</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">.{</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">});</span>\n<span class=\"w\">    </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">file_index</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">addFile</span><span class=\"p\">(.{</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">statements</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">_</span><span class=\"p\">]</span><span class=\"n\">ast</span><span class=\"p\">.</span><span class=\"n\">NodeStore</span><span class=\"p\">.</span><span class=\"n\">StatementIndex</span><span class=\"p\">{</span><span class=\"n\">statement_index</span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">region</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">.{</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">});</span>\n<span class=\"w\">   </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">getFile</span><span class=\"p\">(</span><span class=\"n\">file_index</span><span class=\"p\">);</span>\n<span class=\"w\">   </span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">debug</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s\">\"File: {any}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.{</span><span class=\"n\">file</span><span class=\"p\">});</span>\n</code></pre></div>\n<p>prints:</p>\n<div class=\"codehilite\"><pre><span></span><code>File: lib_ast.NodeStore.File{ .statements = { lib_ast.NodeStore.StatementIndex{ .statement = 1 } }, .region = lib_ast.Region{ .start = 0, .end = 0 } }\n</code></pre></div>",
        "id": 498153001,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738856972
    },
    {
        "content": "<p>Yeah, I think the current recommended way in zig is an enum.</p>\n<p>The old version was using tuples. (Not sure if those are nominal in zig). Now you switched to strict with unique keys.</p>",
        "id": 498161003,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738858992
    },
    {
        "content": "<p>Well an enum unifies things into one type of</p>",
        "id": 498165041,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738860109
    },
    {
        "content": "<p>We are using these to explicitly get different types of</p>",
        "id": 498165099,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738860123
    },
    {
        "content": "<p>They are basically typed “pointers”</p>",
        "id": 498165174,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738860134
    },
    {
        "content": "<p>But since they are offsets into an array they can be smaller and offer much better memory locality</p>",
        "id": 498165280,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738860170
    },
    {
        "content": "<p>Yeah, that is exactly what the zig compiler uses enums for now. Each one of your structs would become an unbounded nominal enum. Each enum would contain all values from 0 to the max u32.</p>",
        "id": 498166718,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738860591
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>const Parse.Id = enum(u32) { _ };\n</code></pre></div>",
        "id": 498167422,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738860785
    },
    {
        "content": "<p>btw I wanted to note a general thing that <span class=\"user-mention\" data-user-id=\"406911\">@Andrew Kelley</span> pointed out to me when we were talking about arenas:</p>\n<p>a downside of using plain bump-allocated arenas for all memory allocation is that resizes basically never happen in-place</p>",
        "id": 498170609,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738861613
    },
    {
        "content": "<p>like if we push an element and it exceeds capacity, it's not really going to be able to grow in-place because something else will have almost always used the next slot in the arena, so it has to allocate a new array in the arena and copy the existing elements over</p>",
        "id": 498170815,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738861679
    },
    {
        "content": "<p>something to think about, at any rate!</p>",
        "id": 498170901,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738861694
    },
    {
        "content": "<p>Are there any data structures that give us in-place memory reuse for free, or is that something we'll have to cook ourselves?</p>",
        "id": 498171058,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738861749
    },
    {
        "content": "<p>I think we should do a single fixed allocation at boot</p>",
        "id": 498171083,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738861758
    },
    {
        "content": "<p>Like a single mmap at the beginning to create the backing memory for our allocator</p>",
        "id": 498171373,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738861845
    },
    {
        "content": "<p>I think it’s FixedBufferAllocator?</p>",
        "id": 498171453,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738861870
    },
    {
        "content": "<p>How does that fix the problem?</p>",
        "id": 498171479,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738861876
    },
    {
        "content": "<p>You don’t have to use an Arena</p>",
        "id": 498171686,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738861929
    },
    {
        "content": "<p>And worry about pointer invalidation on resize</p>",
        "id": 498171728,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738861943
    },
    {
        "content": "<p>Fixed buffer is an arena last I checked</p>",
        "id": 498171740,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738861944
    },
    {
        "content": "<p>Ok, but if it’s initialized with a fixed capacity it never resizes</p>",
        "id": 498171830,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738861971
    },
    {
        "content": "<p>Also, pointer invalidation isn't a problem cause we use indices. The only problem is the growth.</p>",
        "id": 498171849,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738861977
    },
    {
        "content": "<p>That’s what the fixed means</p>",
        "id": 498171863,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738861982
    },
    {
        "content": "<p>It isn't the buffer that is resizing. It is the array lists allocated within the buffer</p>",
        "id": 498171919,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738861994
    },
    {
        "content": "<p>Oh I totally misread Richard’s comment</p>",
        "id": 498172042,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738862031
    },
    {
        "content": "<p>My apologies</p>",
        "id": 498172061,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738862035
    },
    {
        "content": "<p>No worries</p>",
        "id": 498172086,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738862041
    },
    {
        "content": "<p>Also, mmap is still technically a valid solution. We could mmap enough space to store a max sized array list for every array (like one per IR). It would be a crazy huge mmap, but given the memory is virtual should be ok (though k think some system still complain if you make too big of an mmap)</p>",
        "id": 498172349,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738862113
    },
    {
        "content": "<p>I think if we init our array lists with a very pessimistic capacity we can avoid this (using some empirical heuristic)</p>",
        "id": 498172361,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738862117
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/395097-compiler-development/topic/zig.20compiler.20-.20spike/near/498170609\">said</a>:</p>\n<blockquote>\n<p>btw I wanted to note a general thing that <span class=\"user-mention silent\" data-user-id=\"406911\">Andrew Kelley</span> pointed out to me when we were talking about arenas:</p>\n<p>a downside of using plain bump-allocated arenas for all memory allocation is that resizes basically never happen in-place</p>\n</blockquote>\n<p>Did he mention what zig does?</p>",
        "id": 498172547,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738862174
    },
    {
        "content": "<p>TigerBeetle uses the technique you are talking about to run a high availability database</p>",
        "id": 498172578,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738862182
    },
    {
        "content": "<p>But they use a holistic coding style to make that work well</p>",
        "id": 498172651,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738862212
    },
    {
        "content": "<p>(In zig)</p>",
        "id": 498172690,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738862228
    },
    {
        "content": "<p>Did you meet Joran at SYCL <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> ?</p>",
        "id": 498172775,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738862258
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/jYzUIZAZLRy9ZfmgRSfja5hl/9A8A65F4-4659-4C81-A8DB-0CC6CEAB2A71.jpg\">9A8A65F4-4659-4C81-A8DB-0CC6CEAB2A71.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/jYzUIZAZLRy9ZfmgRSfja5hl/9A8A65F4-4659-4C81-A8DB-0CC6CEAB2A71.jpg\" title=\"9A8A65F4-4659-4C81-A8DB-0CC6CEAB2A71.jpg\"><img data-original-content-type=\"image/jpeg\" data-original-dimensions=\"1290x1068\" src=\"/user_uploads/thumbnail/22008/jYzUIZAZLRy9ZfmgRSfja5hl/9A8A65F4-4659-4C81-A8DB-0CC6CEAB2A71.jpg/840x560.webp\"></a></div><p>From their <a href=\"https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/TIGER_STYLE.md\">style guide</a></p>",
        "id": 498173495,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738862489
    },
    {
        "content": "<p>So you would have in effect fixed arrays and just maintain stack allocated cursors on them</p>",
        "id": 498174138,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738862670
    },
    {
        "content": "<p>Really reduces the number of trys in your code!</p>",
        "id": 498174258,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738862708
    },
    {
        "content": "<p>How do we determine the size of said fixed array? What if we try to compile lots of big files? The question seems so obvious that I'm hesitant to ask it</p>",
        "id": 498174597,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738862806
    },
    {
        "content": "<p>I wouldn’t say that this is necessarily the right choice for a compiler</p>",
        "id": 498174715,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738862841
    },
    {
        "content": "<p>But just explaining the design space available</p>",
        "id": 498174749,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738862855
    },
    {
        "content": "<p>To Brendan’s point, I’d be interested in what Zigs own memory management strategy is</p>",
        "id": 498174937,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738862909
    },
    {
        "content": "<p>Because that one seems to work well with this DoD architecture we seem to be embracing</p>",
        "id": 498174981,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738862931
    },
    {
        "content": "<p>I know they make some assumptions, and use appendAssumingCapacity a lot from what I read</p>",
        "id": 498175138,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738862995
    },
    {
        "content": "<p>The only allocation error is OOM, which we can't/shouldn't do anything about. The current approach to minimize <code>try</code>s is to <code>std.process.exit(1)</code> on OOM, as is done for you in <code>SafeList</code>: <a href=\"https://github.com/roc-lang/roc/blob/a3cff5aff7a1cf9584eac6926fba03257d48391f/src/collections/safe_list.zig#L43\">https://github.com/roc-lang/roc/blob/a3cff5aff7a1cf9584eac6926fba03257d48391f/src/collections/safe_list.zig#L43</a></p>",
        "id": 498175273,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738863027
    },
    {
        "content": "<p>You want me to catch every append and call exit?</p>",
        "id": 498175402,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738863078
    },
    {
        "content": "<p>(name pending, something like <code>TypedIndexList</code> would be better)</p>",
        "id": 498175467,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738863100
    },
    {
        "content": "<p>Ok, I think those should both have an initWithCapacity constructor</p>",
        "id": 498176006,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738863272
    },
    {
        "content": "<p>Agreed</p>",
        "id": 498176179,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738863335
    },
    {
        "content": "<p>But yes, I think we should <code>catch exit_on_oom</code>on every allocation</p>",
        "id": 498176331,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738863371
    },
    {
        "content": "<p>Ok I’d like to hear what others think</p>",
        "id": 498176380,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738863391
    },
    {
        "content": "<p>But it should be a very rare and extraordinary case regardless of</p>",
        "id": 498176508,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738863432
    },
    {
        "content": "<p>If we use these “initialize with a constant max size” for these lists, we could just use appendAssumeCapacity and get largely the same behavior</p>",
        "id": 498177859,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738863859
    },
    {
        "content": "<p>Sorry not constant, but fixed relative to some attribute of the file</p>",
        "id": 498177965,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738863898
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> <a href=\"#narrow/stream/395097-compiler-development/topic/zig.20compiler.20-.20spike/near/498172775\">said</a>:</p>\n<blockquote>\n<p>Did you meet Joran at SYCL <span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> ?</p>\n</blockquote>\n<p>Yes</p>",
        "id": 498193013,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738869132
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> <a href=\"#narrow/stream/395097-compiler-development/topic/zig.20compiler.20-.20spike/near/498172578\">said</a>:</p>\n<blockquote>\n<p>TigerBeetle uses the technique you are talking about to run a high availability database</p>\n</blockquote>\n<p>Not quite</p>",
        "id": 498193027,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738869142
    },
    {
        "content": "<p>Tiger beetle knows their exact limits and fills up those limits up front</p>",
        "id": 498193065,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738869163
    },
    {
        "content": "<p>That would be more equivalent to recognizing how much memory a machine has and the allocating it into N different arrays of the max size possible for each of the IRs.</p>",
        "id": 498193200,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738869207
    },
    {
        "content": "<p>Of course you could decide to use only 2 arrays and keep reusing the memory, but it is a static limit</p>",
        "id": 498193364,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738869270
    },
    {
        "content": "<p>I was talking about allocating a terrabyte (arbitrary big number) of memory for each array. Way more than the system has. Then keeping track of the current size. The allocation never actually grows, but every once and a while, it page faults to get the os to get more real memory.</p>",
        "id": 498193629,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738869385
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20spike/near/498172547\">said</a>:</p>\n<blockquote>\n<p>Did he mention what zig does?</p>\n</blockquote>\n<p>a crap ton of ArrayList and AutoArrayHashMap</p>",
        "id": 498210997,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738876241
    },
    {
        "content": "<p>tokenizer - append tokens to a multi array list<br>\nparser - append nodes to a multi array list<br>\nzir - append instructions to a multi array list<br>\nair - append instructions to a multi array list<br>\nmir - append instructions to a multi array list<br>\nmachine code - append bytes to an array list</p>",
        "id": 498211220,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738876339
    },
    {
        "content": "<p>intern pool - basically an array hash map</p>",
        "id": 498211314,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738876383
    },
    {
        "content": "<p>one factor to consider is portability - if your code uses these simple data structures rather than depending on the OS feature of mmap, then you can e.g. run your code in the browser</p>",
        "id": 498211412,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738876438
    },
    {
        "content": "<p>fun fact, when you're browsing zig's autodocs, you're actually downloading literally a tarball of unmodified zig std lib source code plus a wasm file, and nothing else, and then you're running the actual tokenizer and parser in wasm</p>",
        "id": 498211511,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738876484
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20spike/near/498161003\">said</a>:</p>\n<blockquote>\n<p>Yeah, I think the current recommended way in zig is an enum.</p>\n</blockquote>\n<p>one nice outcome of using enums is that you can name special values. for instance the trick where you use max int to store \"none\":</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">OptionalString</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">enum</span><span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">none</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">math</span><span class=\"p\">.</span><span class=\"n\">maxInt</span><span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"n\">_</span><span class=\"p\">,</span>\n\n<span class=\"w\">    </span><span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">unwrap</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">OptionalString</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">String</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">none</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"kc\">null</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">@enumFromInt</span><span class=\"p\">(</span><span class=\"nb\">@intFromEnum</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">slice</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">OptionalString</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">Wasm</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"p\">[</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">orelse</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"kc\">null</span><span class=\"p\">).</span><span class=\"n\">slice</span><span class=\"p\">(</span><span class=\"n\">wasm</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">};</span>\n<span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">enum</span><span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">_</span><span class=\"p\">,</span>\n\n<span class=\"w\">    </span><span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">slice</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">Wasm</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">start_slice</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"p\">.</span><span class=\"n\">string_bytes</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">[</span><span class=\"nb\">@intFromEnum</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">)..];</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">start_slice</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">..</span><span class=\"n\">mem</span><span class=\"p\">.</span><span class=\"n\">indexOfScalar</span><span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">start_slice</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">).</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">toOptional</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">OptionalString</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">OptionalString</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">@enumFromInt</span><span class=\"p\">(</span><span class=\"nb\">@intFromEnum</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">));</span>\n<span class=\"w\">        </span><span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">none</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div>\n<p>maybe you reserve index 0 to mean empty string, and index 1 to be the string \"roc\", well you can just put that into the enum then</p>",
        "id": 498212080,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738876759
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"406911\">@Andrew Kelley</span> what would you recommend in terms of allocators when it comes to MultiArrayLists that we're going to build up (potentially involving resizes) with unknown up-front length, but which use indices over pointers for everything, and which we want to serialize straight to disk later (and deserialize straight into an arena)?</p>",
        "id": 498214062,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738877602
    },
    {
        "content": "<p>an allocator that supports resizing, i.e. not an arena allocator</p>",
        "id": 498214823,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738877921
    },
    {
        "content": "<p>you can memcpy your array list data to disk independently of the allocator used</p>",
        "id": 498214871,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738877942
    },
    {
        "content": "<p>since Roc links libc, the libc allocator is going to be your best bet probably for the \"gpa\" use case, i.e. when you need resizing</p>",
        "id": 498215002,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738877992
    },
    {
        "content": "<p>lately I've come around to either naming my allocator parameter <code>gpa</code> or <code>arena</code> to indicate the intended usage pattern</p>",
        "id": 498215116,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738878015
    },
    {
        "content": "<p><code>gpa</code> - is that the kitchen sink, and <code>arena</code> is a dedicated purpose built thing we care about storing?</p>",
        "id": 498215289,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738878078
    },
    {
        "content": "<p>idea is that with <code>gpa</code> you need to avoid leaking by remembering to free, and with <code>arena</code> you can fire and forget</p>",
        "id": 498215346,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738878105
    },
    {
        "content": "<p>trying to do storage serialization at the allocator layer is not something I've experimented with. if you go that route, have fun and I have no advice for you</p>",
        "id": 498215465,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738878143
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"406911\">@Andrew Kelley</span> - I wanted to ask about <code>zig ld</code>. Would that be reasonable for us to embed in the roc cli binary to use for linking our prebuilt platform hosts and our roc apps together?</p>",
        "id": 498216265,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738878461
    },
    {
        "content": "<p>Something like <code>zig ld app.o libhost.a</code></p>",
        "id": 498216348,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738878485
    },
    {
        "content": "<p>that's actually not a command the compiler supports at the moment, but I think I understand what you're asking - you want to reuse the linker code (not LLD) right?</p>",
        "id": 498216419,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738878520
    },
    {
        "content": "<p>to understand the use case a bit more, my understanding is that you already depend on llvm libraries in the roc binary - what makes zig's linker code a more attractive option than embedding LLD inside the roc binary, having roc expose <code>roc lld</code> and then making roc invoke itself as a subprocess?</p>",
        "id": 498216556,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738878587
    },
    {
        "content": "<p>I guess I'm wondering if there is a simpler way. I thought <code>zig ld</code> was written in zig and so using that might be a better option than wrangling llvm's lld.</p>",
        "id": 498216863,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738878701
    },
    {
        "content": "<p>Another option I was thinking was having roc distribute a version of lld that we could download from a release and store in cache.</p>",
        "id": 498216975,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738878740
    },
    {
        "content": "<p>We have been talking about using a similar approach to Zig with producing llvm <code>bc</code> so I guess I assumed that meant we didn't need llvm anymore. But I guess <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> has mentioned he would like it all in one binary... so we'll still need <code>clang</code> or something.</p>",
        "id": 498217163,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738878814
    },
    {
        "content": "<p>yeah we have a macho linker, an elf linker, and a wasm linker all written in zig, however, they do not yet have feature parity or performance parity with LLD</p>",
        "id": 498217290,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738878854
    },
    {
        "content": "<p>actually I haven't measured the wasm linker perf vs lld since I rewrote it, that might have changed</p>",
        "id": 498217332,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738878875
    },
    {
        "content": "<p>zig's linkers are also \"surgical\" if you will, they are designed to be tightly coupled with the frontend and to prioritize zig code updates rather than the use case of only linking objects together</p>",
        "id": 498217421,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738878911
    },
    {
        "content": "<p>This is for producing a final binary, so as long as the linker isn't too slow (or worse than llvm) it's probably ok. But I'm not sure.</p>",
        "id": 498217436,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738878915
    },
    {
        "content": "<p>I think the tight coupling aspect will make them not a great fit for directly code sharing with roc compiler</p>",
        "id": 498217604,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738878970
    },
    {
        "content": "<p>Ok, it sounds like we're back to plan A, embedding llvm things.</p>",
        "id": 498217625,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738878978
    },
    {
        "content": "<p>have a look yourself and see what you think: <a href=\"https://github.com/ziglang/zig/blob/master/src/link/Wasm.zig\">https://github.com/ziglang/zig/blob/master/src/link/Wasm.zig</a></p>",
        "id": 498217679,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738879004
    },
    {
        "content": "<p>Thank you, but I'm probably not familiar enough with zig or linking to be able to read that just yet. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 498217812,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738879068
    },
    {
        "content": "<p>it's certainly <em>adaptable</em> to your use case, but then we'd be maintaining two separate implementations. which, hey, maybe that's not so bad. porting code can be fun and fairly quick</p>",
        "id": 498217814,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738879070
    },
    {
        "content": "<p>but yeah I think embedding LLD is a more immediate solution to your problem, and does not come with too many downsides since you already depend on LLVM libraries</p>",
        "id": 498217954,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738879115
    },
    {
        "content": "<p>Would you recommend using a library, or downloading a binary and caching that to use?</p>",
        "id": 498218052,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738879156
    },
    {
        "content": "<p>^^ I hope that question makes sense...</p>",
        "id": 498218088,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738879175
    },
    {
        "content": "<p>for shipping a linker?</p>",
        "id": 498218090,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738879177
    },
    {
        "content": "<p>Yeah, for both compiling llvm <code>bc</code> and also for linking the final executable</p>",
        "id": 498218130,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738879194
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"406911\">Andrew Kelley</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20spike/near/498216556\">said</a>:</p>\n<blockquote>\n<p>to understand the use case a bit more, my understanding is that you already depend on llvm libraries in the roc binary - what makes zig's linker code a more attractive option than embedding LLD inside the roc binary, having roc expose <code>roc lld</code> and then making roc invoke itself as a subprocess?</p>\n</blockquote>\n<p>if you do <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> instead, then you can ship only 1 binary (roc) that has those other abilities built in</p>",
        "id": 498218296,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738879233
    },
    {
        "content": "<p>this is what zig does today - basically you copy paste main.cpp from lld into your project and rename <code>main</code> to <code>lld_main</code></p>",
        "id": 498218431,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738879283
    },
    {
        "content": "<p>actually I don't think you have to do that since lld exposes library functions</p>",
        "id": 498218507,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738879320
    },
    {
        "content": "<p>we do it for clang tho</p>",
        "id": 498218570,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738879329
    },
    {
        "content": "<p>Ok, I'll checkout the zig code and follow that.</p>",
        "id": 498218625,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738879358
    },
    {
        "content": "<p><a href=\"https://github.com/ziglang/zig/blob/b0ed602d5d9358128471588f00a073f2545809fa/src/main.zig#L301-L306\">https://github.com/ziglang/zig/blob/b0ed602d5d9358128471588f00a073f2545809fa/src/main.zig#L301-L306</a></p>",
        "id": 498218675,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738879377
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"406911\">Andrew Kelley</span> <a href=\"#narrow/stream/395097-compiler-development/topic/zig.20compiler.20-.20spike/near/498211220\">said</a>:</p>\n<blockquote>\n<p>tokenizer - append tokens to a multi array list<br>\nparser - append nodes to a multi array list<br>\nzir - append instructions to a multi array list<br>\nair - append instructions to a multi array list<br>\nmir - append instructions to a multi array list<br>\nmachine code - append bytes to an array list</p>\n</blockquote>\n<p>Just to clarify, these all use gpa in your case.</p>",
        "id": 498221617,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738880618
    },
    {
        "content": "<p>Arena is for temporary non list stuff that never needs to grow</p>",
        "id": 498221709,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738880649
    },
    {
        "content": "<p>right</p>",
        "id": 498222470,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738880987
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20spike/near/498218130\">said</a>:</p>\n<blockquote>\n<p>Yeah, for both compiling llvm <code>bc</code> and also for linking the final executable</p>\n</blockquote>\n<p>doesn't roc already support this via the llvm library APIs? specifically for compiling bitcode, not linking</p>",
        "id": 498224210,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738881719
    },
    {
        "content": "<p>I'm not sure how that works. We currently use the <code>inkwell</code> crate and I assume that bundles in the llvm libraries. But maybe there is some other magic happening there.</p>",
        "id": 498225181,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738882121
    },
    {
        "content": "<p>Our tokenizer and parser are doing exactly this, and right now using the heap allocator but could easily switch to libc. I think if we upfront make some assumptions about needed capacity resizing won’t hit us too hard</p>",
        "id": 498229448,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738884153
    },
    {
        "content": "<p>Yep</p>",
        "id": 498229901,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738884395
    },
    {
        "content": "<p>Also, I would probably use gpa and an arena for now</p>",
        "id": 498229916,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738884405
    },
    {
        "content": "<p>Currently we don't link libc. And we can generally re-evaluate at any point</p>",
        "id": 498229984,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738884447
    },
    {
        "content": "<p>Easy to switch an allocator</p>",
        "id": 498229997,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738884453
    },
    {
        "content": "<p>you don't link libc, but you're planning to link llvm right? that means you will be linking libc</p>",
        "id": 498245035,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738893509
    },
    {
        "content": "<p>or do you have plans to keep llvm libraries out of the roc binary?</p>",
        "id": 498245052,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738893523
    },
    {
        "content": "<p>That's true</p>",
        "id": 498245930,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738893974
    },
    {
        "content": "<p>So I guess we could just go straight to the c sllocator</p>",
        "id": 498245944,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738893985
    },
    {
        "content": "<p>I thought we had main compiling. From what I can tell, most of it is just broken code with invalid imports and non-existant variables</p>",
        "id": 498270235,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738910527
    },
    {
        "content": "<p>lazy compilation made it not obvious</p>",
        "id": 498270257,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738910548
    },
    {
        "content": "<p>I'm working on stuff right now</p>",
        "id": 498270278,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738910562
    },
    {
        "content": "<p>I don't think it is lazy. It is just that nothing is imported by <code>main.zig</code> or <code>test.zig</code>. So they literally aren't in the tree at all</p>",
        "id": 498270317,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738910584
    },
    {
        "content": "<p>Yes, lazy compilation is imprecise</p>",
        "id": 498270359,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738910605
    },
    {
        "content": "<p>It's what you said</p>",
        "id": 498270373,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738910612
    },
    {
        "content": "<p>I'm not sure how best to fix the issue besides importing all modules in main followed by a <code>_ = imported_module</code> for each of them</p>",
        "id": 498270461,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738910646
    },
    {
        "content": "<p>Of course, paired with fixing whatever broken imports and such</p>",
        "id": 498270483,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738910659
    },
    {
        "content": "<p>Yeah, that is a fine start (also, I think just importing the coordinate into main imports everything or nearly everything)</p>",
        "id": 498270542,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738910700
    },
    {
        "content": "<p>I'm gonna try to get my scope cleanup work done first for canonicalization, and then I can try to fix these issues, and then make a PR</p>",
        "id": 498270752,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738910815
    },
    {
        "content": "<p>Sounds good.</p>",
        "id": 498270785,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738910833
    },
    {
        "content": "<p>I think I'll wait for the tree to be working and then switch into doing some various minor changes and cleanups</p>",
        "id": 498270813,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738910857
    },
    {
        "content": "<p>You might as well wait, I've been touching a lot of minor stuff today</p>",
        "id": 498270839,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738910878
    },
    {
        "content": "<p>yeah, sounds good</p>",
        "id": 498270903,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738910900
    },
    {
        "content": "<p>Also, exceptionally minor PR to update the zig-afl-kit dependency: <a href=\"https://github.com/roc-lang/roc/pull/7584\">https://github.com/roc-lang/roc/pull/7584</a></p>",
        "id": 498271014,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738910973
    },
    {
        "content": "<p>It does seem that Zig does not perform full semantic analysis on dead code.</p>",
        "id": 498309622,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738925012
    },
    {
        "content": "<p>More work on minor details, started work on scope checking for canonicalization to make sure it fits with everything else, added \"coordinate.zig\" import to \"main.zig\" for typechecking: <a href=\"https://github.com/roc-lang/roc/pull/7585\">https://github.com/roc-lang/roc/pull/7585</a></p>",
        "id": 498310581,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738925310
    },
    {
        "content": "<p>Not complete, just a wash of code</p>",
        "id": 498310624,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738925323
    },
    {
        "content": "<p>Got everything I need to _blast_ through the parser and formatter on top of a type-safe NodeStore</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>If you want to see what it would look like to manually construct an AST (which we should almost never do)</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"w\">   </span><span class=\"k\">test</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kr\">var</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"n\">NodeStore</span><span class=\"p\">.</span><span class=\"n\">initWithCapacity</span><span class=\"p\">(</span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">testing</span><span class=\"p\">.</span><span class=\"n\">allocator</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"k\">defer</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">deinit</span><span class=\"p\">();</span>\n\n<span class=\"w\">        </span><span class=\"c1\">// Try to add the nodes for the Hello World in Roc, using 0 for all tokens:</span>\n<span class=\"w\">        </span><span class=\"c1\">// app [main!] { pf: platform \"../basic-cli/platform.roc\" }</span>\n<span class=\"w\">        </span><span class=\"c1\">//</span>\n<span class=\"w\">        </span><span class=\"c1\">// import pf.Stdout</span>\n<span class=\"w\">        </span><span class=\"c1\">//</span>\n<span class=\"w\">        </span><span class=\"c1\">// main! = |_|</span>\n<span class=\"w\">        </span><span class=\"c1\">//     Stdout.line!(\"Hello, world!\")</span>\n\n<span class=\"w\">        </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">header</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">addHeader</span><span class=\"p\">(.{</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">.{</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">provides</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">_</span><span class=\"p\">]</span><span class=\"n\">TokenIndex</span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">},</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">platform</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">packages</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">_</span><span class=\"p\">]</span><span class=\"n\">RecordFieldIndex</span><span class=\"p\">{},</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">region</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">.{</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">});</span>\n\n<span class=\"w\">        </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">addStatement</span><span class=\"p\">(.{</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">.{</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">module_name_tok</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">qualifier_tok</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">alias_tok</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">null</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">exposes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">_</span><span class=\"p\">]</span><span class=\"n\">TokenIndex</span><span class=\"p\">{},</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">region</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">.{</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">});</span>\n\n<span class=\"w\">        </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">main_ident</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">addPattern</span><span class=\"p\">(.{</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">ident</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">.{</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">ident_tok</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">region</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">.{</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">});</span>\n\n<span class=\"w\">        </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">hello_world</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">addExpr</span><span class=\"p\">(.{</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">.{</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">token</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">region</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">.{</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">});</span>\n\n<span class=\"w\">        </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">line_ident</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">addExpr</span><span class=\"p\">(.{</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">ident</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">.{</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">token</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">region</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">.{</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">});</span>\n\n<span class=\"w\">        </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">line_apply</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">addExpr</span><span class=\"p\">(.{</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">.{</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"err\">@</span><span class=\"s\">\"fn\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">line_ident</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">_</span><span class=\"p\">]</span><span class=\"n\">ExprIndex</span><span class=\"p\">{</span><span class=\"n\">hello_world</span><span class=\"p\">},</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">region</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">.{</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">});</span>\n\n<span class=\"w\">        </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">body_statement_0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">addStatement</span><span class=\"p\">(.{</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">expr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">.{</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">expr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">line_apply</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">region</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">.{</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">});</span>\n\n<span class=\"w\">        </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">body</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">addBody</span><span class=\"p\">(.{</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">whitespace</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">null</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">statements</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">_</span><span class=\"p\">]</span><span class=\"n\">StatementIndex</span><span class=\"p\">{</span><span class=\"n\">body_statement_0</span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"p\">});</span>\n\n<span class=\"w\">        </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">addStatement</span><span class=\"p\">(.{</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">.{</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">pattern</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">main_ident</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">body</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">body</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">region</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">.{</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">});</span>\n\n<span class=\"w\">        </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">addFile</span><span class=\"p\">(.{</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">header</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">header</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">statements</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">_</span><span class=\"p\">]</span><span class=\"n\">StatementIndex</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">import</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">region</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">.{</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"p\">});</span>\n\n<span class=\"w\">        </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">testing</span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div>\n</div></div>",
        "id": 498360263,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738940586
    },
    {
        "content": "<p>any time you have something like <code>&amp;[_]T{...}</code>, you can shortcut with <code>&amp;.{...}</code>, as long as there is a result type on the LHS</p>",
        "id": 498419920,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738959503
    },
    {
        "content": "<p>Sweet!  I don’t know why I didn’t try that</p>",
        "id": 498421784,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1738960245
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span>, not sure this is useful to you now, but we could add a step in CI to do <code>find src -name \"*.zig\" | xargs -n1 zig ast-check</code>. It would ensure that all of the zig files that aren't in the tree are at least internally valid. That said, I would assume that pretty quickly everything will be in the tree, so this may not matter.</p>",
        "id": 498455402,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738978655
    },
    {
        "content": "<p>I have time right now, so just trying to figure out if I can do something useful.</p>",
        "id": 498455563,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738978761
    },
    {
        "content": "<p>I think it's fine right now. I think what would be helpful is seeing if you can skeleton out what the interpreter and/or the LLVM backend would need for inputs</p>",
        "id": 498455592,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738978799
    },
    {
        "content": "<p>I'm working on setting up the coordinate.zig file right now so that everything is actually glued together</p>",
        "id": 498455732,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738978892
    },
    {
        "content": "<p>I've at least putatively set up scope checking logic already for canonicalization (not plugged in), meaning I'm pretty confident we'll be okay with the new ModuleIdent approach (formerly Symbol) for referencing idents that Richard proposed</p>",
        "id": 498455896,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738979012
    },
    {
        "content": "<blockquote>\n<p>If you can skeleton out what the interpreter</p>\n</blockquote>\n<p>I feel like that may be hard to do without a Can IR. I plan to start by having this as a tree walking interpreter that just directly walks Can (maybe 1 level removed from can to do some type checking first with the concrete input types)</p>\n<blockquote>\n<p>LLVM backend</p>\n</blockquote>\n<p>This I definitely should look into more. Need to figure out zigs library to build llvm bitcode and also statically linking to llvm in general (which might be pretty hard)</p>",
        "id": 498455902,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738979015
    },
    {
        "content": "<p>Once I finish the package stuff, I'll see if I can get the CanIR at least <em>mostly</em> correct</p>",
        "id": 498455963,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738979051
    },
    {
        "content": "<p>Another super minor PR: <a href=\"https://github.com/roc-lang/roc/pull/7588\">https://github.com/roc-lang/roc/pull/7588</a></p>",
        "id": 498458368,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738981024
    },
    {
        "content": "<p>but a bit bigger this time</p>",
        "id": 498458378,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738981031
    },
    {
        "content": "<p>Approved, auto-merge enabled</p>",
        "id": 498459126,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738981697
    },
    {
        "content": "<p>Your PR is also the first time I've seen a greentext in Roc's ecosystem, nice</p>",
        "id": 498459403,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738981924
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20spike/near/498455402\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span>, not sure this is useful to you now, but we could add a step in CI to do <code>find src -name \"*.zig\" | xargs -n1 zig ast-check</code>. It would ensure that all of the zig files that aren't in the tree are at least internally valid. That said, I would assume that pretty quickly everything will be in the tree, so this may not matter.</p>\n</blockquote>\n<p><code>zig fmt src --check --ast-check</code></p>",
        "id": 498466759,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1738988688
    },
    {
        "content": "<p>We should add that to CI once we get all our source cleaned up. Thanks!</p>",
        "id": 498468649,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738990489
    },
    {
        "content": "<p>To add <code>--ast-check</code>. Fails currently, but I want to make sure we don't forget about it later: <a href=\"https://github.com/roc-lang/roc/pull/7589\">https://github.com/roc-lang/roc/pull/7589</a></p>",
        "id": 498470779,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738992433
    },
    {
        "content": "<p>Correctly get the github ci filter working: <a href=\"https://github.com/roc-lang/roc/pull/7591\">https://github.com/roc-lang/roc/pull/7591</a></p>",
        "id": 498475176,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738996575
    },
    {
        "content": "<p>new gpa! <a href=\"https://ziglang.org/devlog/2025/#2025-02-07\">https://ziglang.org/devlog/2025/#2025-02-07</a></p>",
        "id": 498505638,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739024108
    },
    {
        "content": "<p>That's cool. Though isn't the libc allocator just b tier? Like the good allocators are like mimalloc and tcmalloc?</p>\n<p>Not trying to downplay anything, huge for the zig default to at least match C (while also having options to detect for memory leaks and such). Just noting that there are a lot of allocators out there and I don't think libc has been state of the art for a long time.</p>",
        "id": 498517498,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739033938
    },
    {
        "content": "<p>Also, I'm really curious how it compares to the jdz zig allocator: <a href=\"https://github.com/joadnacer/jdz_allocator\">https://github.com/joadnacer/jdz_allocator</a></p>",
        "id": 498517557,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739034002
    },
    {
        "content": "<p>Also, does this mean it is in in time for 0.14.0?</p>",
        "id": 498518156,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739034498
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20spike/near/498475176\">said</a>:</p>\n<blockquote>\n<p>Correctly get the github ci filter working: <a href=\"https://github.com/roc-lang/roc/pull/7591\">https://github.com/roc-lang/roc/pull/7591</a></p>\n</blockquote>\n<p>Or not...try 2: <a href=\"https://github.com/roc-lang/roc/pull/7592\">https://github.com/roc-lang/roc/pull/7592</a></p>",
        "id": 498522924,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739038290
    },
    {
        "content": "<p>Yay! only zig ci running: <a href=\"https://github.com/roc-lang/roc/pull/7590\">https://github.com/roc-lang/roc/pull/7590</a></p>",
        "id": 498529954,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739043661
    },
    {
        "content": "<p>Also above PR just adds a script to enable reproing fuzzing failures.</p>",
        "id": 498529989,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739043689
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20spike/near/498529954\">said</a>:</p>\n<blockquote>\n<p>Yay! only zig ci running: <a href=\"https://github.com/roc-lang/roc/pull/7590\">https://github.com/roc-lang/roc/pull/7590</a></p>\n</blockquote>\n<p>I was testing it too :) <a href=\"https://github.com/roc-lang/roc/pull/7593\">https://github.com/roc-lang/roc/pull/7593</a></p>",
        "id": 498530014,
        "sender_full_name": "Anton",
        "timestamp": 1739043708
    },
    {
        "content": "<p>Currently CI is now ~3 minutes....why is windows so much slower than all the rest of CI?</p>",
        "id": 498530380,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739043930
    },
    {
        "content": "<p>To be fair 1m21s was for downloading to our cache for the Windows Zig install</p>",
        "id": 498530461,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739043968
    },
    {
        "content": "<p>But still</p>",
        "id": 498530464,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739043971
    },
    {
        "content": "<blockquote>\n<p>To be fair 1m21s was for downloading to our cache for the Windows Zig install</p>\n</blockquote>\n<p>So on rerun, this should be skipped? let me test</p>",
        "id": 498530509,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739044018
    },
    {
        "content": "<p>Ok, a bit better</p>",
        "id": 498530831,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739044248
    },
    {
        "content": "<p>btw if you don't mind using <a href=\"https://github.com/mlugg/setup-zig\">https://github.com/mlugg/setup-zig</a> instead of goto-bus-stop (which is now unmaintained) it will use mirrors and proper caching. should be faster for you and less bandwidth for <a href=\"http://ziglang.org\">ziglang.org</a></p>",
        "id": 498533512,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1739046460
    },
    {
        "content": "<p>Yeah, we can definitely switch over</p>",
        "id": 498533615,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739046570
    },
    {
        "content": "<p>PR to switch: <a href=\"https://github.com/roc-lang/roc/pull/7594\">https://github.com/roc-lang/roc/pull/7594</a></p>",
        "id": 498557578,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739068396
    },
    {
        "content": "<p>Ok, I have the first draft of the parser able to parse AND format the canonical Hello World.  I need to rebase it on the current structure and then probably make a few more changes to harmonize it with the rest of the project</p>",
        "id": 498557579,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1739068397
    },
    {
        "content": "<p>The rest of the parser should be able to go _VERY_ fast from here</p>",
        "id": 498557599,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1739068427
    },
    {
        "content": "<p>Exciting. I'm definitely interested in helping get a fuzzer setup once it lands</p>",
        "id": 498557602,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739068434
    },
    {
        "content": "<p>I'll have a PR up by tomorrow evening</p>",
        "id": 498557607,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1739068440
    },
    {
        "content": "<p>By that I mean, if no one does it first, I'll add a parser to formatter fuzzer following the current format after your PR lands</p>",
        "id": 498557658,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739068464
    },
    {
        "content": "<p>I made a lot of mistakes and did a few redesigns.  I also feel like I type like molasses with Zig, guess I'm just getting used to the syntax (and cursing everytime I forget the <code>.</code> in front of an anonymous struct)</p>",
        "id": 498557695,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1739068516
    },
    {
        "content": "<p>I know the feeling</p>",
        "id": 498557759,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739068565
    },
    {
        "content": "<p>But I'm very happy with this current design, even if there are some tools (i.e., helpers) that need to be built to make the actual parsing code more quickly scannable - but I didn't want to abstract too early in the game.</p>",
        "id": 498557793,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1739068613
    },
    {
        "content": "<p>A good policy</p>",
        "id": 498557905,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739068731
    },
    {
        "content": "<p>Also, I'm going to be upfront - this initial version will have in it a LOT of panics (where problems should be reported, and unimplemented code paths). I do not intend to commit the PR that way, but I wanted to talk about how to do problems effectively  (and Malformed) before I replace them in the PR review.</p>",
        "id": 498557933,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1739068775
    },
    {
        "content": "<p>any plans to do snapshot testing for the parser? I think sometimes people call them golden tests? basically just like debug print the ast to a file and compare against it on the next run</p>",
        "id": 498558724,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1739069589
    },
    {
        "content": "<p><a class=\"stream-topic\" data-stream-id=\"395097\" href=\"/#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20snapshot.20testing\">#compiler development &gt; zig compiler - snapshot testing</a></p>",
        "id": 498559409,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739070171
    },
    {
        "content": "<p><code>@panic(\"TODO\")</code> ftw</p>",
        "id": 498579833,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1739089976
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"406911\">@Andrew Kelley</span> This is the way</p>",
        "id": 498590103,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1739098877
    },
    {
        "content": "<p>I'm going to put up my PR.  But first, should I try linking it into main.zig at all (even in it's very partially implemented state, and even though there is no further analysis being done)?</p>",
        "id": 498608406,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1739114711
    },
    {
        "content": "<p>Fire away please! <a href=\"https://github.com/roc-lang/roc/pull/7597\">https://github.com/roc-lang/roc/pull/7597</a></p>",
        "id": 498608864,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1739115109
    },
    {
        "content": "<p>And yes, I'm going to be looking at:</p>\n<ol>\n<li>String interning</li>\n<li>Problems</li>\n<li>Malformed</li>\n<li>Removing panics in general</li>\n</ol>",
        "id": 498608954,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1739115169
    },
    {
        "content": "<p>If you don't link it to main, make sure it at least passes <code>zig fmt --check --ast-check</code></p>",
        "id": 498619047,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739122982
    },
    {
        "content": "<p>Oh, just realized that the tree is valid now. Can we merge <a href=\"https://github.com/roc-lang/roc/pull/7589\">https://github.com/roc-lang/roc/pull/7589</a> to protect it more from future breaks?</p>",
        "id": 498619735,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739123610
    },
    {
        "content": "<p>Done</p>",
        "id": 498620856,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739124495
    },
    {
        "content": "<p>I was waiting to see if anyone wanted to claim the fun one... but it seems to be still open for the taking. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> </p>\n<p>I'd like to take responsibility for the type-checker. </p>\n<p>Me and my mate Claude have some reading to do on HM type inference... but we have a nice implementation to follow.</p>",
        "id": 498633517,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739134756
    },
    {
        "content": "<p>Hell yes, please take the hard work</p>",
        "id": 498633643,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739134848
    },
    {
        "content": "<p>Wait.. you said type-checking was the easy one</p>",
        "id": 498633665,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739134867
    },
    {
        "content": "<p>Talk to <span class=\"user-mention\" data-user-id=\"357305\">@Lucas Rosa</span>, he was also interested because of his experience</p>",
        "id": 498633673,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739134872
    },
    {
        "content": "<p>It's not bad once you understand what's happening</p>",
        "id": 498633690,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739134892
    },
    {
        "content": "<p>I'd recommend reading through the current <code>solve</code> and <code>unify</code> crates in the Rust code</p>",
        "id": 498633716,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739134922
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> go for it, you have my support, just remember that constraint solving part, it's important for the quality of error messages :)</p>",
        "id": 498636221,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1739136763
    },
    {
        "content": "<p>I also have access to OG lang PhDs that we can ask questions to, like Kent from chez scheme, also I could ask philip wadler questions probably, not sure how responsive he is but I share a slack with him.</p>",
        "id": 498636348,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1739136848
    },
    {
        "content": "<p>just ping me and I can pretty much jump online to pair program about it at any time. the basics of HM type inference are straight forward and well understood for decades. definitely make sure you review solve and unify, those are the main show for this. a little bit of <code>can</code> reading wouldn't hurt either</p>",
        "id": 498636418,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1739136917
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 498636662,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739137110
    },
    {
        "content": "<p>I will be watching with keen interest Luke</p>",
        "id": 498636776,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1739137222
    },
    {
        "content": "<p>And I can also tell you what NOT to do <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 498636786,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1739137244
    },
    {
        "content": "<p>it's not unlike an interpreter, you walk the tree, assign type vars to things, primitives and annotations are like the terminal points from which everything resolves upwards from</p>\n<p>the only things you might not see in intro material is the extensible records stuff (basically row polymorphism if I'm not messing up terms)<br>\nand the tags which are like ocaml polymorphic variants (assuming that hasn't changed)</p>",
        "id": 498637014,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1739137431
    },
    {
        "content": "<p>I also recently did the exhaustive matrix check thingy for matches so that's still fresh in my head</p>",
        "id": 498637090,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1739137462
    },
    {
        "content": "<p>My plan is to approach it from both sides at once... spend roughly 50% of my time learning the theory, and the other following the rust impl.</p>",
        "id": 498637180,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739137530
    },
    {
        "content": "<p>let me find you a paper for exhaustiveness, I'm pretty sure it's where elm got it's algo from, I lifted it from elm myself as well</p>",
        "id": 498637205,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1739137562
    },
    {
        "content": "<p>I think this is it<br>\n<a href=\"https://www.cambridge.org/core/services/aop-cambridge-core/content/view/3165B75113781E2431E3856972940347/S0956796807006223a.pdf/warnings-for-pattern-matching.pdf\">https://www.cambridge.org/core/services/aop-cambridge-core/content/view/3165B75113781E2431E3856972940347/S0956796807006223a.pdf/warnings-for-pattern-matching.pdf</a></p>",
        "id": 498637464,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1739137762
    },
    {
        "content": "<p>also available here in web form on some subdomain on inrias website</p>\n<p><a href=\"http://moscova.inria.fr/~maranget/papers/warn/index.html\">http://moscova.inria.fr/~maranget/papers/warn/index.html</a></p>",
        "id": 498637587,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1739137862
    },
    {
        "content": "<p>here is the elm implementation, also a remarkable reference because the code is some of the cleanest haskell code I've ever seen<br>\n<a href=\"https://github.com/elm/compiler/blob/master/compiler/src/Nitpick/PatternMatches.hs\">https://github.com/elm/compiler/blob/master/compiler/src/Nitpick/PatternMatches.hs</a><br>\nalong with my very ugly rust port of the exact algo<br>\n<a href=\"https://github.com/aiken-lang/aiken/blob/main/crates/aiken-lang/src/tipo/exhaustive.rs\">https://github.com/aiken-lang/aiken/blob/main/crates/aiken-lang/src/tipo/exhaustive.rs</a></p>",
        "id": 498637723,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1739137968
    },
    {
        "content": "<p>The existing Roc implementation works very well, I think we should basically try to transcribe it in Zig terms</p>",
        "id": 498640237,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1739140208
    },
    {
        "content": "<p>It was also lifted from elm, so I assumed he would look at the roc impl but I wanted to link him more sources</p>",
        "id": 498640250,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1739140224
    },
    {
        "content": "<p>of note, the \"demanded\" enum for records isn't necessary anymore due to optional record fields going away</p>",
        "id": 498642549,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739142217
    },
    {
        "content": "<p>ah cool, good to know</p>",
        "id": 498642637,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1739142268
    },
    {
        "content": "<blockquote>\n<p>optional record fields going away</p>\n</blockquote>\n<p>single tear. I'll miss default value function arguments</p>",
        "id": 498643303,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739142757
    },
    {
        "content": "<p>Yeah, what replaces that? Is there another way to do it?</p>",
        "id": 498645541,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739144567
    },
    {
        "content": "<p>I've used them extensively in plume for example</p>",
        "id": 498645574,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739144586
    },
    {
        "content": "<p>Terse builders</p>",
        "id": 498645624,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739144629
    },
    {
        "content": "<p>That thing i did for Weaver... let me grab a link</p>",
        "id": 498645661,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739144641
    },
    {
        "content": "<p>Ahk.. I remember now. The builder pattern</p>",
        "id": 498645721,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739144666
    },
    {
        "content": "<p><a href=\"https://gist.github.com/smores56/dc7b37f73114df11d28cd6a148987dea#file-weaver-builders-roc\">https://gist.github.com/smores56/dc7b37f73114df11d28cd6a148987dea#file-weaver-builders-roc</a></p>",
        "id": 498645760,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739144707
    },
    {
        "content": "<p>I noticed that yesterday, pipe is replaced with <code>.</code>? not a bad idea at all</p>",
        "id": 498645820,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1739144762
    },
    {
        "content": "<p>That's static dispatch</p>",
        "id": 498645887,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739144792
    },
    {
        "content": "<p>oh I see, I went back and actually paid attention to the proposal</p>\n<div class=\"codehilite\"><pre><span></span><code>There it is! Pass the value in front of the dot to that function as its first argument, and we&#39;re done. (If the Result module did not define a top-level mapErr, or if we couldn&#39;t have accessed it in this module because it wasn&#39;t exposed, we&#39;d get a compile-time error.)\n</code></pre></div>\n<p>sorry, still catching up to the most recent design</p>",
        "id": 498646482,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1739145300
    },
    {
        "content": "<p>\"In this design, the API is literally all there is to consider—exactly as it should be!\" - some chad probably</p>",
        "id": 498647626,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1739146031
    },
    {
        "content": "<p>\"[-2, 0, 2].map(.abs().sub(1))\" omg this is insane, didn't realize this could look so clean</p>",
        "id": 498647858,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1739146212
    },
    {
        "content": "<p>I still think default valued args are super useful, but optionals and builder patterns are okish alternatives.</p>",
        "id": 498648965,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739147146
    },
    {
        "content": "<p>Yeah, I guess the hypothesis we are testing is can we get away without them. One more language feature we don't need to think about -- i.e. simplifies roc</p>",
        "id": 498651954,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739149556
    },
    {
        "content": "<p>yep</p>",
        "id": 498652191,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739149757
    },
    {
        "content": "<p>random other notes I just thought of (or really, Loris reminded me of).</p>\n<p>Debug assertions are our friends. Please feel free to add <code>std.debug.assert</code> to your code. They will all be ripped out in the final release binaries, but they are great anchors for fuzzing and for testing in general.</p>",
        "id": 498818534,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739207943
    },
    {
        "content": "<p><a href=\"https://github.com/kristoff-it/zig-lsp-kit\">https://github.com/kristoff-it/zig-lsp-kit</a></p>\n<p>I figure most say this already, but just in case. this could be useful</p>",
        "id": 498820647,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1739208522
    },
    {
        "content": "<p>Adding llvm feels so painful. RIP binary size (will be great when we add an interpreter only config).</p>\n<p>Debug<br>\n840K -&gt; 114M</p>\n<p>ReleaseFast strip<br>\n72k -&gt; 9M</p>\n<p>This is all without actually using any llvm. This is simply linking to a c++ file and statically compiled llvm, not actually using anything yet.</p>",
        "id": 499605725,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739489464
    },
    {
        "content": "<p>A necessary cost, it seems</p>",
        "id": 499605811,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739489514
    },
    {
        "content": "<p>I really surprised that release fast with strip grows by so much when we literally don't use any of it. That said, it will grow by much more than that once we start using things.</p>",
        "id": 499605999,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739489615
    },
    {
        "content": "<p>but yeah, statically compiled release builds of llvm and lld together are 201MB. So if we reference absolutely everything our compiler would be that big.</p>",
        "id": 499606167,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739489707
    },
    {
        "content": "<p>Which is why zig is like 270MB in size (note, zig also packages clang which we won't)</p>",
        "id": 499606290,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739489774
    },
    {
        "content": "<p>It would be really nice to go the same route as zig and take LLVM out of the compiler binary. I know we want everything to be a single binary, but could we instead have some tooling in the cli which makes it easy to install LLVM or setup the right thing if it's not already available in the system.</p>",
        "id": 499606503,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739489907
    },
    {
        "content": "<p>Do you mean the same route as <code>cargo</code>?</p>",
        "id": 499606563,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739489950
    },
    {
        "content": "<p>Just spitballing here -- I'm thinking it might be good to map out the intended use cases or some scenarios of people using roc and figure out when we think we need a fully statically linked thing that includes LLVM, and are there other ways we could make that seamless.</p>",
        "id": 499606615,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739489989
    },
    {
        "content": "<p>Yeah, theoretically we could emit a <code>.bc</code> file or run the interpretter (super slim). Then we could orchestrate llvm to actually compile. On first run, would just download our llvm compiler to the cache.</p>",
        "id": 499606628,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739489996
    },
    {
        "content": "<p>That said, I think for most users, this just means instead of downloading llvm now, they download it in a few days when they make an optimized build</p>",
        "id": 499606739,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739490046
    },
    {
        "content": "<p>So not really that much of gain in my mind.</p>",
        "id": 499606762,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739490062
    },
    {
        "content": "<p>Just hidden on first compilation</p>",
        "id": 499606775,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739490069
    },
    {
        "content": "<p>It also means upgrading roc... may use the same LLVM compiler and switching between roc versions may not need to download it again -- just use the one we saved in the roc cache</p>",
        "id": 499606801,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739490084
    },
    {
        "content": "<p>Oh, yeah, that is fair.</p>",
        "id": 499606829,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739490108
    },
    {
        "content": "<p>less often that you need to update the llvm bundle potentially</p>",
        "id": 499606836,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739490117
    },
    {
        "content": "<p>Roc compiler without LLVM bundled might be a couple of MBs (maybe even smaller?)... so it would be almost free to have every version in the roc cache.</p>",
        "id": 499606925,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739490158
    },
    {
        "content": "<p>In fact, assuming we generate an old version of bitcode, you potentially could lazily update much later. Like just use llvm 18 for a few years then jump to llvm 22.</p>",
        "id": 499606926,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739490159
    },
    {
        "content": "<p>Unless there is a significant performance gain from upgrading to 22 (for example) which we can easily measure... then we may not even need to.</p>",
        "id": 499606983,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739490202
    },
    {
        "content": "<p>I have zero anything to base that on though</p>",
        "id": 499607008,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739490222
    },
    {
        "content": "<p>Long term this is definitely something we should explore.</p>",
        "id": 499607120,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739490268
    },
    {
        "content": "<p>I was thinking short-medium term... it would help us with the development process to be able to manage multiple versions seamlessly -- the roc cli upgrades and downgrades itself</p>",
        "id": 499607193,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739490316
    },
    {
        "content": "<p>I think simply generating bitcode files already will give us a lot of flexibility. Still will depend on a few c apis from llvm, but they are the much more stable high level apis.</p>",
        "id": 499607367,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739490404
    },
    {
        "content": "<p>What is the size impact if we only have LLD linked?</p>",
        "id": 499607391,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739490419
    },
    {
        "content": "<p>should be around 10MB</p>",
        "id": 499607574,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739490534
    },
    {
        "content": "<p>Maybe less</p>",
        "id": 499607576,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739490538
    },
    {
        "content": "<p>Seems like bundling LLVM as well will be easier to get right for now. Would we be okay with starting with that and then pulling LLVM out later?</p>",
        "id": 499607633,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739490582
    },
    {
        "content": "<p>I think we should prioritize features that get us a working compiler first, and a fast one later</p>",
        "id": 499607745,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739490647
    },
    {
        "content": "<p>But if it's gonna be a fun project to get this working, then by all means</p>",
        "id": 499607763,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739490663
    },
    {
        "content": "<p>Also, to begin with, for the interpreter path, we will still need llvm.</p>",
        "id": 499607776,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739490671
    },
    {
        "content": "<p>Cause we need to generate the shims</p>",
        "id": 499607784,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739490676
    },
    {
        "content": "<p>probably could manually generate those at some point if we want.</p>",
        "id": 499607814,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739490695
    },
    {
        "content": "<p>Could the shim be prebuilt?</p>",
        "id": 499607939,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739490761
    },
    {
        "content": "<p>hmm... possibly could be. I guess it is static to the platform. So the platform could provide an extra shim object file per platform.</p>",
        "id": 499608279,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739490943
    },
    {
        "content": "<p>Like roc serialises ResolveIR, the interpreter shim is prebuilt and parses that before it starts doing it's interpreter thing...</p>\n<p>But I guess this doesn't work because it needs to know what shape to satisfy the platform hosts API.</p>",
        "id": 499608300,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739490957
    },
    {
        "content": "<p>It's worth trying.</p>",
        "id": 499608366,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739490981
    },
    {
        "content": "<p>Oh yeah.... that was the idea -- the platform provides a prebuilt interpreter</p>",
        "id": 499608382,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739490991
    },
    {
        "content": "<p>I remember we discussed that</p>",
        "id": 499608394,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739491002
    },
    {
        "content": "<p>Not a prebuilt interpretter, just a prebuilt shim object file</p>",
        "id": 499608440,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739491033
    },
    {
        "content": "<p>Hmm, though the platform doesn't know the file locations of the final app which is need for the shim to know what to load.</p>",
        "id": 499608554,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739491103
    },
    {
        "content": "<p>Cause the shim essentially needs to provide the intepretter with the app <code>main.roc</code> path, the name of the entrypoint being called, a return pointer, and a list of argument pointers. The interpreter can then learn the types of each pointer by reading the roc source code.</p>",
        "id": 499608690,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739491189
    },
    {
        "content": "<p>Anyway, I plan to get the interpreter working with shim and such before starting the llvm backend. So that will give us more concrete ideas here.</p>",
        "id": 499608906,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739491273
    },
    {
        "content": "<p>For now, I am just adding the wiring for llvm, I will leave it commented out in the build script to avoid the giant binaries until we have an llvm backend.</p>",
        "id": 499609158,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739491355
    },
    {
        "content": "<p>we should consider having the llvm backend only in the build if you enable a flag</p>",
        "id": 499610004,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739491849
    },
    {
        "content": "<p>bc the majority of compiler development won't need it and will be faster without it</p>",
        "id": 499610034,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739491867
    },
    {
        "content": "<p>and then we could instead build in something which just panics every time you call it saying \"this compiler wasn't built with llvm, please rebuild with that env var set to use this feature\"</p>",
        "id": 499610204,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739491976
    },
    {
        "content": "<blockquote>\n<p>the majority of compiler development won't need it</p>\n</blockquote>\n<p>I wonder how well we can work on backend passes without llvm</p>",
        "id": 499611761,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739492856
    },
    {
        "content": "<p>We just have to validate their output</p>",
        "id": 499611838,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739492885
    },
    {
        "content": "<p>We can do that for at least simple cases with unit testing/fuzzing</p>",
        "id": 499611864,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739492902
    },
    {
        "content": "<p>But yes, the LLVM codegen side will be trickier</p>",
        "id": 499611886,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739492912
    },
    {
        "content": "<p>I mean theoretically we will even be able to generate .bc files without llvm</p>",
        "id": 499611991,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739492985
    },
    {
        "content": "<p>So it really is just for the final exe</p>",
        "id": 499612005,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739492993
    },
    {
        "content": "<p>Oh, I thought by \"I wonder how well\" you were implying \"I'm not confident we can do a good job\"</p>",
        "id": 499612079,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739493012
    },
    {
        "content": "<p>I agree</p>",
        "id": 499612089,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739493017
    },
    {
        "content": "<p>I guess we can run all snapshot tests without llvm, so that is nice anchor.</p>",
        "id": 499612183,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739493085
    },
    {
        "content": "<p>like we can generate refcounting ir and lower ir.</p>",
        "id": 499612210,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739493101
    },
    {
        "content": "<p>Roc successfully cross compiling to all major targets with llvm (as static as possible): <a href=\"https://github.com/roc-lang/roc/actions/runs/13321631348/job/37207263318?pr=7603\">https://github.com/roc-lang/roc/actions/runs/13321631348/job/37207263318?pr=7603</a></p>",
        "id": 499628155,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739502429
    },
    {
        "content": "<p>yoooooooooooo</p>",
        "id": 499629278,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739503278
    },
    {
        "content": "<p>for what it's worth, zig built in ReleaseSmall mode without llvm is 12M</p>",
        "id": 499683220,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1739525040
    },
    {
        "content": "<p>and I think it's interesting to note that includes a full x86 backend, C backend, llvm (bitcode) backend, wasm backend, riscv64 backend, elf linker, coff linker, wasm linker. the only thing it lacks compared to llvm is a few more targets and optimization passes</p>",
        "id": 499683480,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1739525112
    },
    {
        "content": "<p>4 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"395097\" href=\"/#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20fuzzing\">#compiler development &gt; zig compiler - fuzzing</a> by <span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span>.</p>",
        "id": 499814496,
        "sender_full_name": "Notification Bot",
        "timestamp": 1739562050
    },
    {
        "content": "<p>Does anyone have any recommendations for debug printing with zig?</p>",
        "id": 499864345,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739583609
    },
    {
        "content": "<p>I want to debug print in tests.. but only if the test fails</p>",
        "id": 499864362,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739583622
    },
    {
        "content": "<p><code>std.log.debug</code> and <code>std.log.info</code> do not show up in <code>zig test</code> output</p>",
        "id": 499864481,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739583711
    },
    {
        "content": "<p>did you set the log level?</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">std_options</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">.{</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">log_level</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">debug</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n</code></pre></div>",
        "id": 499864952,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739583967
    },
    {
        "content": "<p>Is that in the module I'm testing or the <code>tests.zig</code> file?</p>",
        "id": 499864997,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739584000
    },
    {
        "content": "<p>I think once in <code>test.zig</code> should work. It should be a global flag to my understanding</p>",
        "id": 499865033,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739584023
    },
    {
        "content": "<p>Otherwise, maybe just <code>std.debug.print</code> after checking for failure?</p>",
        "id": 499865081,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739584060
    },
    {
        "content": "<p>I'm not really sure best practice here</p>",
        "id": 499865097,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739584067
    },
    {
        "content": "<p>Yeah, me either. I've been researching and trying different things. But haven't found a reasonable solution yet.</p>",
        "id": 499865201,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739584125
    },
    {
        "content": "<p>Basically... I have all these test scenarios for unification etc... and they can print out useful debug info for each step. I only want to see that for the tests that fail though.</p>",
        "id": 499865258,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739584168
    },
    {
        "content": "<p>Maybe I should be thinking about snapshots at this point instead though</p>",
        "id": 499865339,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739584206
    },
    {
        "content": "<p>Hey... I got something working. Builds a snapshot test file using debug prints.</p>",
        "id": 499867616,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739585625
    },
    {
        "content": "<p>Just in case you didn't already read this: <a href=\"https://kristoff.it/blog/dead-simple-snapshot-testing/\">https://kristoff.it/blog/dead-simple-snapshot-testing/</a></p>",
        "id": 499867997,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739585861
    },
    {
        "content": "<p>Would it be a bad idea to give a Type Variable a comptime optional \"name\" to help with debug printing?</p>",
        "id": 499873969,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739589443
    },
    {
        "content": "<p>I'd like to have pretty greek letters for my snapshots tests instead of having random integers everywhere</p>",
        "id": 499874060,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739589487
    },
    {
        "content": "<p>Why not convert integers to characters on print for the snapshot test?</p>",
        "id": 499874629,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739589872
    },
    {
        "content": "<p>Ooh, that's a nicer idea</p>",
        "id": 499874649,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739589893
    },
    {
        "content": "<p>I've almost got something working.. I might just keep going with this thought before trying that</p>",
        "id": 499874732,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739589955
    },
    {
        "content": "<p>I went ahead and rebased <span class=\"user-mention\" data-user-id=\"781658\">@Anthony Bullard</span> 's parser PR and fixed some bugs: <a href=\"https://github.com/roc-lang/roc/pull/7609\">https://github.com/roc-lang/roc/pull/7609</a></p>\n<p>(would like to get that landed soon so we can iterate on it)</p>",
        "id": 499880770,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739594252
    },
    {
        "content": "<p>I'm happy to approve to unblock after the tests are fixed</p>",
        "id": 499881683,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739595164
    },
    {
        "content": "<p>Very puzzled at the <a href=\"https://github.com/roc-lang/roc/actions/runs/13342120382/job/37268097270?pr=7609\">current failure</a><br>\nIs it possible that CI box has run out of disk space or something?</p>",
        "id": 499884426,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739597809
    },
    {
        "content": "<p>That is what it looks like, which is pretty confusing cause it is a GitHub runner. Should have a blank slate every time</p>",
        "id": 499884553,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739597946
    },
    {
        "content": "<p>We use our own runners, right?</p>",
        "id": 499884568,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739597968
    },
    {
        "content": "<p>Not here I don't think. I think this are vanilla GitHub runners</p>",
        "id": 499884579,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739597984
    },
    {
        "content": "<p>But maybe that is wrong</p>",
        "id": 499884587,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739597996
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"453336\">@Joshua Warner</span> can you rebase on latest main and run again. I just merged something that changed test steps a bit. Not saying it will fix anything, but might give more info.</p>",
        "id": 499884912,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739598306
    },
    {
        "content": "<p>No change, looks like</p>",
        "id": 499885256,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739598674
    },
    {
        "content": "<p>Really confusing that cross compiling with <code>-Dllvm</code> works, but somehow regular compiling does not....</p>",
        "id": 499885488,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739598943
    },
    {
        "content": "<p>I guess it could be related to <code>-Dllvm</code> combined with <code>-Dfuzz</code> for some reason.</p>",
        "id": 499885548,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739598988
    },
    {
        "content": "<p>Removing -Dllvm seems to work</p>",
        "id": 499885552,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739598993
    },
    {
        "content": "<p>Maybe it'd be better to remove -Dfuzz?</p>",
        "id": 499885600,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739599058
    },
    {
        "content": "<p>nah, <code>-Dllvm</code> doesn't actually do anything useful currently</p>",
        "id": 499885607,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739599077
    },
    {
        "content": "<p>Still very puzzled as to what's going on</p>",
        "id": 499885608,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739599078
    },
    {
        "content": "<p>Could be out of disk space, but should have 14GB, so a bit surprising</p>",
        "id": 499885653,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739599093
    },
    {
        "content": "<p>llvm is only like 300MB or so</p>",
        "id": 499885660,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739599108
    },
    {
        "content": "<p>even if it gets duplicated for ever executable, it should be no where near 14GB</p>",
        "id": 499885667,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739599125
    },
    {
        "content": "<p>Also, why would it break on this PR specifically...hmm</p>",
        "id": 499885675,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739599135
    },
    {
        "content": "<p>Hmm; added a call to <code>df -h</code> and of course now it works</p>",
        "id": 499886001,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739599337
    },
    {
        "content": "<p>You still don't have <code>-Dllvm</code></p>",
        "id": 499886022,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739599365
    },
    {
        "content": "<p>Oh whoops</p>",
        "id": 499886037,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739599387
    },
    {
        "content": "<p>Probably not disk space:</p>\n<div class=\"codehilite\"><pre><span></span><code> /dev/root        72G   46G   26G  64% /\n</code></pre></div>",
        "id": 499886254,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739599575
    },
    {
        "content": "<p>is it only failing on ubuntu-24.04?</p>",
        "id": 499886526,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739599867
    },
    {
        "content": "<p>Yep :/</p>",
        "id": 499886536,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739599890
    },
    {
        "content": "<p>Can we try <code>ubuntu-22.04</code> just to see?</p>",
        "id": 499886609,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739599944
    },
    {
        "content": "<p>I have no immediate ideas, probably would need to pull up a linux machine and test.</p>",
        "id": 499886649,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739600021
    },
    {
        "content": "<p>It works on ubuntu-22.04 <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 499887233,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739600628
    },
    {
        "content": "<p>Send it and worry about it later.</p>",
        "id": 499887772,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739601172
    },
    {
        "content": "<p>Might be some weird GitHub CI bug</p>",
        "id": 499887776,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739601179
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20spike/near/499864362\">said</a>:</p>\n<blockquote>\n<p>I want to debug print in tests.. but only if the test fails</p>\n</blockquote>\n<p>oh yeah I've been meaning to make what you want be the default thing</p>",
        "id": 499897549,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1739610536
    },
    {
        "content": "<p>tracking issue: <a href=\"https://github.com/ziglang/zig/issues/5738\">https://github.com/ziglang/zig/issues/5738</a></p>",
        "id": 499897590,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1739610588
    },
    {
        "content": "<p>A message was moved from this topic to <a class=\"stream-topic\" data-stream-id=\"395097\" href=\"/#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20builtins\">#compiler development &gt; zig compiler - builtins</a> by <span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span>.</p>",
        "id": 499961477,
        "sender_full_name": "Notification Bot",
        "timestamp": 1739664206
    },
    {
        "content": "<p>Good watch on some zig patterns like comptime interfaces. Discussed a handful of useful ideas: <a href=\"https://youtu.be/l_qY2p0OH9A?t=1920&amp;si=gzHTwuGTYRWoDQlS\">https://youtu.be/l_qY2p0OH9A?t=1920&amp;si=gzHTwuGTYRWoDQlS</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"l_qY2p0OH9A\" href=\"https://youtu.be/l_qY2p0OH9A?t=1920&amp;si=gzHTwuGTYRWoDQlS\"><img src=\"https://uploads.zulipusercontent.net/123d390a92bbd330022ffb59373ca97f6e6beedb/68747470733a2f2f692e7974696d672e636f6d2f76692f6c5f71593270304f4839412f64656661756c742e6a7067\"></a></div>",
        "id": 500037205,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739733784
    },
    {
        "content": "<p>Implemented some functionality in the old formatter to support migrating to the new braces syntax: <a href=\"https://github.com/roc-lang/roc/pull/7619\">https://github.com/roc-lang/roc/pull/7619</a></p>\n<p>There are almost certainly bugs hiding in the formatting here, since I'm not really doing any verification on it. I'd like to assert that the new parser parses all of these inputs (or we add more \"NotSupported\" errors as appropriate).</p>\n<p><span class=\"user-mention\" data-user-id=\"781658\">@Anthony Bullard</span> that PR also contains *.migrated.roc files, which should hopefully serve as useful test inputs for the new parser.</p>",
        "id": 500048370,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739742898
    },
    {
        "content": "<p>I wanted to understand the plan to wire up the compiler stages. I've put together this simplified diagram that I think captures some of the key features - with the help of Sam.</p>\n<p><a href=\"/user_uploads/22008/GNkh3Jn8Pw2WNq44wf3QYazJ/Roc-Compiler-Stages-Environments.pdf\">Roc Compiler Stages - Environments.pdf</a></p>\n<p>Some key points to summarise</p>\n<ul>\n<li>we start interning strings, names etc in tokenisation... so we instantiate a <strong>SoloEnv</strong> there</li>\n<li>the <strong>SoloEnv</strong> is shared with Can and contains all the interned (and deduplicated) data for a single file (or module) at a time.</li>\n<li>When we resolve imports we analyse the graph of module dependencies to find the strongly connected components, then combine those with cyclic deps that cannot be separated into <strong>ModuleSet</strong>. Most <strong>ModuleSet</strong>'s probably contain only a single module.</li>\n<li>We instantiate a <strong>CombinedEnv</strong> for each set of modules, which contains all the interned data combined from the separate modules, and this env will be passed between all the future compiler stages.</li>\n<li>The Coordinator will ensure that any dependencies are completed first before commencing a stage</li>\n<li>The IR's should contain any data that doesn't live beyond the next stage. For example the information about \"types\" in TypeSpecIR is in the IR and not in the CombinedEnv.</li>\n<li>Re namespacing a <strong>Module</strong> lives under <strong>SoloEnv</strong>, and a <strong>ModuleSet</strong> lives under <strong>CombinedEnv</strong>.</li>\n</ul>",
        "id": 500067436,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739758500
    },
    {
        "content": "<p>I thought we don't have cyclic dependencies</p>",
        "id": 500067931,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739758875
    },
    {
        "content": "<p>So no module sets?</p>",
        "id": 500067936,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739758880
    },
    {
        "content": "<p>Though maybe type variables or static dispatch change this?</p>",
        "id": 500067954,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739758903
    },
    {
        "content": "<p>We didn't used to have them, but we'd like to see if we can make cyclic dependencies work</p>",
        "id": 500067967,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739758917
    },
    {
        "content": "<p>The reason is because you might have two custom types that depend on each other (we expect this for DB constructs) and they both need to define a <code>to_str</code></p>",
        "id": 500068042,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739758961
    },
    {
        "content": "<p>Oh, interesting. Are there restrictions?</p>",
        "id": 500068045,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739758966
    },
    {
        "content": "<p>They can't do that in the same file</p>",
        "id": 500068047,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739758967
    },
    {
        "content": "<p>Currently, the plan is to have them give a warning about compilation speed if it's not necessary</p>",
        "id": 500068065,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739758990
    },
    {
        "content": "<p>And \"necessary\" means the modules have custom types that depend on each other</p>",
        "id": 500068089,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739759013
    },
    {
        "content": "<p>yeah, basically the idea is that if you have two nominal tag unions that are mutually recursive, and you also want them to have static dispatch (which could come up when modeling database tables, for example) that's currently impossible</p>",
        "id": 500068995,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739759625
    },
    {
        "content": "<p>so if we do this, then all the modules in the cycle basically get type-checked as one big unit</p>",
        "id": 500069152,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739759735
    },
    {
        "content": "<p>which is worse for both concurrency and caching granularity</p>",
        "id": 500069180,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739759762
    },
    {
        "content": "<p>so it's kind of a perf footgun unless you're specifically using it to resolve the thing that's currently impossible</p>",
        "id": 500069243,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739759784
    },
    {
        "content": "<p>e.g. if you're not careful, one wrong <code>import</code> can accidentally make your entire project into one big cycle that can't be parallelized at all anymore</p>",
        "id": 500069286,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739759827
    },
    {
        "content": "<p>so the warning would be basically \"you have a cycle involving modules that don't expose mutually recursive types, so you should break it up!\"</p>",
        "id": 500069319,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739759858
    },
    {
        "content": "<p>that way you get equivalent perf to today</p>",
        "id": 500069334,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739759874
    },
    {
        "content": "<p>because the only cycles are between modules that have mutually recursive types, which is also true today (where you have to just literally put them in the same module instead)</p>",
        "id": 500069386,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739759892
    },
    {
        "content": "<p>as a bonus, it's also nice for \"always report, never block\"</p>",
        "id": 500069411,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739759910
    },
    {
        "content": "<p>in that if you find yourself in a spot where you import something and it causes a cycle, you aren't blocked - you <em>can</em> do that, and still run your program</p>",
        "id": 500069448,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739759936
    },
    {
        "content": "<p>and maybe confirm whether you want to keep that architecture before cleaning up the cycle later</p>",
        "id": 500069468,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739759949
    },
    {
        "content": "<p>What if you end up being unsure how to break up the cycle and want to just leave it be. Will you be stuck with roc reporting failures in CI?</p>",
        "id": 500072638,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739762042
    },
    {
        "content": "<p>That's the current plan. You can always remove it by putting the cycle in a single file, but even more, since the cycle will be immediately obvious on creation, this will be an annoyance that will be early to see in at least most cases</p>",
        "id": 500079293,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739766614
    },
    {
        "content": "<p>I'd rather we not allow cyclic imports to prevent this from even being an issue, but the aforementioned custom types scenario doesn't seem to have a better solution</p>",
        "id": 500079363,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739766664
    },
    {
        "content": "<p>Yeah, I just find it strange partially allowing it</p>",
        "id": 500081073,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739767642
    },
    {
        "content": "<p>Sounds painful potentially</p>",
        "id": 500081084,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739767648
    },
    {
        "content": "<p>btw can I get Roc compiler developers' opinions about this? <a href=\"https://github.com/ziglang/zig/pull/22137\">https://github.com/ziglang/zig/pull/22137</a></p>\n<p>do you prefer status quo names or the names proposed in this PR?</p>",
        "id": 500082494,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1739768379
    },
    {
        "content": "<p>I think the old wording is definitely clearer. I don't have to guess at all. That said, you only have to learn once, so the new wording is fine overall.</p>\n<p>I wish ensureReserved worked, I think it's nicer than reserveUnused. I guess appendReserved works.</p>",
        "id": 500083299,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739768772
    },
    {
        "content": "<p>Not familiar with the zig std, so I don't know if there are inconsistencies, but the original wording communicates intent better. To me, even <code>appendAssumeCapacity</code> is more clean than <code>appendReserved</code>, though not by much.</p>",
        "id": 500103874,
        "sender_full_name": "Norbert Hajagos",
        "timestamp": 1739778090
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 500125333,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1739783898
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"453336\">@Joshua Warner</span> <span class=\"user-mention\" data-user-id=\"781658\">@Anthony Bullard</span> </p>\n<p>Could you please make a single unit test or something that produces a minimal <code>parse.IR</code>. </p>\n<p>Like are we at the point we're the IR could represents this?</p>\n<div class=\"codehilite\"><pre><span></span><code>module [name]\n\nname = &quot;Luke&quot;\n</code></pre></div>\n<p>This would be really helpful for working on Can. We're just not sure how to work with the ParseIR rn.</p>",
        "id": 500293568,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739837584
    },
    {
        "content": "<p>Just the output -- hardcoded is ok if we don't have the parser implementation this far yet.</p>",
        "id": 500293691,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739837652
    },
    {
        "content": "<p>I'm trying to make something like this... but definitely not right</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"k\">test</span><span class=\"w\"> </span><span class=\"s\">\"Example Can IR\"</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// Imagine we received a parse.IR representing the following roc module</span>\n\n<span class=\"w\">    </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">source</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\module [name]</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\</span>\n<span class=\"w\">        </span><span class=\"sh\">\\\\name = \"Luke\"</span>\n<span class=\"w\">    </span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">parse_ir</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"p\">.</span><span class=\"n\">IR</span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">source</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">source</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">tokens</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"p\">.</span><span class=\"n\">TokenizedBuffer</span><span class=\"p\">.</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">testing</span><span class=\"p\">.</span><span class=\"n\">allocator</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"p\">.</span><span class=\"n\">NodeStore</span><span class=\"p\">.</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">testing</span><span class=\"p\">.</span><span class=\"n\">allocator</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">errors</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">.{},</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"kr\">var</span><span class=\"w\"> </span><span class=\"n\">can_ir</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">IR</span><span class=\"p\">.</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">testing</span><span class=\"p\">.</span><span class=\"n\">allocator</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// We called \"canonicalize\" and</span>\n<span class=\"w\">    </span><span class=\"n\">canonicalize</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">can_ir</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">parse_ir</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">testing</span><span class=\"p\">.</span><span class=\"n\">allocator</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 500294890,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739838529
    },
    {
        "content": "<p>I think it'd be nice to have these fields added to the <code>parse.IR</code>:</p>\n<ul>\n<li><code>header: NodeStore.Header</code></li>\n<li><code>statements: std.ArrayList(NodeStore.Statement)</code></li>\n</ul>",
        "id": 500296446,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739839599
    },
    {
        "content": "<p>Or something like those, as that would unblock canonicalization</p>",
        "id": 500296462,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739839617
    },
    {
        "content": "<p>For now, I'm just pretending those exist and using dummy values</p>",
        "id": 500296475,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739839633
    },
    {
        "content": "<p>something I always wished we had in the Rust code base was having every single test suite start with normal Roc source code as the input</p>",
        "id": 500298889,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739841277
    },
    {
        "content": "<p>I think to do that, we'd need test helpers for each step that build on the previous step's helper</p>",
        "id": 500298949,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739841327
    },
    {
        "content": "<p>I presume you're thinking of something like what <span class=\"user-mention\" data-user-id=\"489294\">@Agus Zubiaga</span> started setting up for the <code>test_compile</code> crate: <a href=\"https://github.com/roc-lang/roc/blob/26f9416929aa0cd52ca732fc533b4a94a690de04/crates/test_compile/src/help_constrain.rs#L29\">https://github.com/roc-lang/roc/blob/26f9416929aa0cd52ca732fc533b4a94a690de04/crates/test_compile/src/help_constrain.rs#L29</a></p>",
        "id": 500299076,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739841389
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20spike/near/500298889\">said</a>:</p>\n<blockquote>\n<p>something I always wished we had in the Rust code base was having every single test suite start with normal Roc source code as the input</p>\n</blockquote>\n<p>I would like this.</p>\n<p>Im currently just trying to get my head around the IRs in a really minimal sense. Not suggesting we make unit tests like this.</p>",
        "id": 500299253,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739841503
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/395097-compiler-development/topic/zig.20compiler.20-.20spike/near/500298889\">said</a>:</p>\n<blockquote>\n<p>something I always wished we had in the Rust code base was having every single test suite start with normal Roc source code as the input</p>\n</blockquote>\n<p>I think many tests can be that way, but it also can make things more brittle to changes higher up the stack. Also can make it harder to write some of the low level optimization steps.</p>",
        "id": 500300192,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739842087
    },
    {
        "content": "<p>That said..I think that is what the super snapshot test framework is for</p>",
        "id": 500300211,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739842101
    },
    {
        "content": "<p>I really think we need to get the base of snapshots working with parse and can. Then slowly work it down the stack</p>",
        "id": 500300272,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739842149
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/395097-compiler-development/topic/zig.20compiler.20-.20spike/near/500300192\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/395097-compiler-development/topic/zig.20compiler.20-.20spike/near/500298889\">said</a>:</p>\n<blockquote>\n<p>something I always wished we had in the Rust code base was having every single test suite start with normal Roc source code as the input</p>\n</blockquote>\n<p>I think many tests can be that way, but it also can make things more brittle to changes higher up the stack.</p>\n</blockquote>\n<p>I agree, but I think it's worth it <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 500301514,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739842877
    },
    {
        "content": "<p>like I spent a lot of time in tests trying to build IRs from scratch and then taking even more time to try to figure out if they were correct</p>",
        "id": 500301559,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739842919
    },
    {
        "content": "<p>also I know there were tests I wouldn't write just because setting up the IRs was too tricky, but starting from scratch it wouldn't have been</p>",
        "id": 500301637,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739842955
    },
    {
        "content": "<p>so I think the brittleness to upstream changes is worth it</p>",
        "id": 500301668,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739842978
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> the reason I'd like not to just directly have a header/statements is I want this to be able to directly parse individual expressions both for testing and for repl evaluation</p>",
        "id": 500301669,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739842978
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/395097-compiler-development/topic/zig.20compiler.20-.20spike/near/500301559\">said</a>:</p>\n<blockquote>\n<p>like I spent a lot of time in tests trying to build IRs from scratch</p>\n</blockquote>\n<p>Yeah, this is a fundamental problem</p>",
        "id": 500301696,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739843002
    },
    {
        "content": "<p>I assume if every ir can be printed and parsed, it will reduce this pain a lot</p>",
        "id": 500301748,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739843041
    },
    {
        "content": "<p>I'm not saying <em>all</em> tests should start from source code btw, but rather that each stage should have at least some tests that are that way</p>",
        "id": 500301786,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739843045
    },
    {
        "content": "<p>Yeah, I think we want a comprehensive library of snapshot tests and they should run through every single ir</p>",
        "id": 500301822,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739843070
    },
    {
        "content": "<p>and that means we're set up to do them, and can reach for that whenever we want</p>",
        "id": 500301825,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739843071
    },
    {
        "content": "<p>100%</p>",
        "id": 500301862,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739843100
    },
    {
        "content": "<p>For the immediate short term, while we figure out what is and isnt in each IR / Env -- I'm hoping we can make a couple of simple hardcoded examples fur the purpose of seeing what the IR actually looks like and how we might use it. </p>\n<p>I'm just having trouble piecing everything together and getting familiar with the representations like SoA etc</p>",
        "id": 500302200,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739843318
    },
    {
        "content": "<p>Before we have spent much time on implementing things, we might pick up on fundamental design/arch issues, and it's easier to change course now. </p>\n<p>Like are we allowing cyclic imports or not... that seems kind of helpful to have a rough plan for now. &lt;-- just an example of a discussion that has spun out of recent efforts to build out the API</p>",
        "id": 500302339,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739843403
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20spike/near/500068995\">said</a>:</p>\n<blockquote>\n<p>yeah, basically the idea is that if you have two nominal tag unions that are mutually recursive, and you also want them to have static dispatch (which could come up when modeling database tables, for example) that's currently impossible</p>\n</blockquote>\n<p>so I thought about this some more, and I think it's better if we continue to disallow cyclic imports and recommend this workaround if anyone actually needs mutually recursive nominal types with static dispatch:</p>\n<ul>\n<li>define the two mutually recursive nominal types (let's call them <code>A</code> and <code>B</code>) in the same module, let's call it <code>AandB.roc</code></li>\n<li>create separate <code>A.roc</code> and <code>B.roc</code> modules, each of which imports <code>AandB.roc</code> only</li>\n<li>both <code>A.roc</code> and <code>B.roc</code> exposes a nominal type which wraps the appropriate mutually recursive type inside <code>AandB.roc</code>, and exposes all the desired methods on those</li>\n<li>if the underlying nominal type needs to be exposed too (e.g. because the tags are needed for matching), then <code>A.roc</code> and <code>B.roc</code> can each provide a <code>to_inner</code> function which returns the underlying nominal type from <code>AandB</code>. Static dispatch won't be available on this structure, but that's okay because the wrapper does.</li>\n</ul>",
        "id": 500305558,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739845249
    },
    {
        "content": "<p>the tradeoffs of this compared to allowing cyclic imports and doing a warning:</p>\n<ul>\n<li>it's less ergonomic in the specific case where you want mutually recursive types and static dispatch. Assuming this does come up with database queries, I'm betting it would most often come up with types that are being auto-generated by an external tool anyway, which decreases the downside of the extra module</li>\n<li>the rule is easier to understand: \"this isn't supported, don't do it\"</li>\n<li>it significantly simplifies (and speeds up by some small amount) certain parts of the compiler</li>\n</ul>",
        "id": 500305827,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739845442
    },
    {
        "content": "<p>So if you want to be able to call some external <code>use_special_method : a -&gt; Str where a.special_method() -&gt; Str</code> on <code>A</code> or <code>B</code>, you can't?</p>",
        "id": 500306206,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739845668
    },
    {
        "content": "<p>I'm not sure how bad that limitation is</p>",
        "id": 500306265,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739845692
    },
    {
        "content": "<p>Especially for the auto-genned methods like <code>to_str</code> and <code>encode</code></p>",
        "id": 500306287,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739845711
    },
    {
        "content": "<p>I probably should have chosen better names</p>",
        "id": 500306362,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739845765
    },
    {
        "content": "<p>Yeah, they're tripping me up <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 500306384,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739845783
    },
    {
        "content": "<p>let's say <code>A.roc</code> exposes <code>ExternalA</code> and that's a wrapper around <code>InternalA</code> from <code>AandB.roc</code></p>",
        "id": 500306385,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739845783
    },
    {
        "content": "<p>so <code>InternalA</code> is mutually recursive with <code>InnerB</code></p>",
        "id": 500306405,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739845796
    },
    {
        "content": "<p><code>InternalA</code> and <code>InternalB</code> are both in <code>AandB.roc</code></p>",
        "id": 500306477,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739845817
    },
    {
        "content": "<p>and <code>ExternalA</code> wraps <code>InternalA</code> and imports <code>AandB.roc</code> but that's it</p>",
        "id": 500306495,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739845828
    },
    {
        "content": "<p>so you can do static dispatch on <code>ExternalA</code> (which just operates on its wrapped <code>InternalA</code> for you)</p>",
        "id": 500306524,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739845848
    },
    {
        "content": "<p>and then you can call <code>to_inner : ExternalA -&gt; InternalA</code> if you want to pattern match on it</p>",
        "id": 500306543,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739845862
    },
    {
        "content": "<p>(or maybe some things would make <code>ExternalA</code> opaque and not expose a <code>to_inner</code> - that's fine too)</p>",
        "id": 500306560,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739845881
    },
    {
        "content": "<p>Yeah, okay, that's a fine limitation</p>",
        "id": 500306578,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739845899
    },
    {
        "content": "<p>so you can't dispatch <em>directly</em> on <code>InnerA</code> but that's fine because you can static dispatch on the <code>ExternalA</code> wrapper around it instead</p>",
        "id": 500306586,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739845906
    },
    {
        "content": "<p>yeah, it's definitely an ergonomic downside</p>",
        "id": 500306597,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739845917
    },
    {
        "content": "<p>but you can still do everything</p>",
        "id": 500306603,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739845921
    },
    {
        "content": "<p>As long as its only ergonomics</p>",
        "id": 500306655,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739845931
    },
    {
        "content": "<p>We force the same tradeoff elsewhere, e.g. unicode stuff</p>",
        "id": 500306688,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739845958
    },
    {
        "content": "<p>It's good that Roc is opinionated</p>",
        "id": 500306703,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739845968
    },
    {
        "content": "<p>yeah I mean if you have a bunch of these that are all mutually recursive, you could end up with some gigantic <code>QueriesInner.roc</code> or whatever</p>",
        "id": 500306706,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739845969
    },
    {
        "content": "<p>but what I realized is that if we allow cyclic imports, the compiler still ends up effectively dealing with that file - except it's <em>even more</em> work for the compiler, because first it has to staple together several cyclically imported modules into one gigantic module</p>",
        "id": 500306757,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739846021
    },
    {
        "content": "<p>Roc is a high-level language because we want to do stuff for you automatically you'd do anyway, right?</p>",
        "id": 500306844,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739846074
    },
    {
        "content": "<p>so on the one hand, arguably the ergonomics are better for the programmer because the modules are smaller, but on the other hand, there's something I do appreciate about like \"hey these things are all tangled together into one big chunk\" not being hidden from the programmer</p>",
        "id": 500306864,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739846093
    },
    {
        "content": "<p>So I'm more convinced by the \"make it awkward to force better organization\" argument</p>",
        "id": 500306874,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739846103
    },
    {
        "content": "<p>well, it really comes down to whether there are use cases where a ton of mutually recursive types is actually the best way to write the code</p>",
        "id": 500306923,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739846144
    },
    {
        "content": "<p>Do we allow any recursion at all outside of custom unions?</p>",
        "id": 500306992,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739846171
    },
    {
        "content": "<p>I am somewhat skeptical that those use cases really exist, but I also don't think I've really explored the space of representing the outputs of database queries that involve joins, nested queries, etc. using Roc's type system</p>",
        "id": 500307018,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739846198
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20spike/near/500306992\">said</a>:</p>\n<blockquote>\n<p>Do we allow any recursion at all outside of custom unions?</p>\n</blockquote>\n<p>not anymore</p>",
        "id": 500307026,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739846206
    },
    {
        "content": "<p>What about <code>Tree a : [Leaf a, Cons (List (Tree a))]</code></p>",
        "id": 500307040,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739846217
    },
    {
        "content": "<p>although we do want to allow it within lists</p>",
        "id": 500307041,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739846219
    },
    {
        "content": "<p>yeah we never supported that, but always should have <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 500307046,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739846226
    },
    {
        "content": "<p>lol yep</p>",
        "id": 500307054,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739846231
    },
    {
        "content": "<p>same with sets and dictionaries</p>",
        "id": 500307057,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739846233
    },
    {
        "content": "<p>Anything list-backed, yep (or Zig-list backed, distinct from written in a Roc-native list)</p>",
        "id": 500307061,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739846240
    },
    {
        "content": "<p>we used to support it in structural tag unions, but decided to stop because of <a href=\"https://github.com/roc-lang/rfcs/pull/1\">https://github.com/roc-lang/rfcs/pull/1</a></p>",
        "id": 500307110,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739846280
    },
    {
        "content": "<p>So then, I'm gonna finish up the <code>coordinate.zig</code> work I was doing to implement this, but get rid of <code>ModuleSet</code> and move towards sequential module ID assignment for post-cache work. Sound good?</p>",
        "id": 500307290,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739846375
    },
    {
        "content": "<p>This doesn't feel like we need a big discussion</p>",
        "id": 500307317,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739846399
    },
    {
        "content": "<p>sounds good!</p>",
        "id": 500307369,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739846410
    },
    {
        "content": "<p>awesome</p>",
        "id": 500307371,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739846415
    },
    {
        "content": "<p>I'm really glad we've gone this direction.</p>",
        "id": 500308186,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739847031
    },
    {
        "content": "<p>I still really think we should support this without requiring custom tags if possible:<br>\n<code>Tree a : { data: a, children: List a }</code></p>",
        "id": 500325448,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739859063
    },
    {
        "content": "<p>Just recursion through list. Cause that covers dict and set as well</p>",
        "id": 500325505,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739859104
    },
    {
        "content": "<p>That seems to be what we are agreeing on above</p>",
        "id": 500325508,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739859105
    },
    {
        "content": "<p>Oh, you still wrapped it in a tag</p>",
        "id": 500325521,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739859116
    },
    {
        "content": "<p>Oh, good point</p>",
        "id": 500325570,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739859126
    },
    {
        "content": "<p>Hmm</p>",
        "id": 500325576,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739859128
    },
    {
        "content": "<p>I want it completely tag free</p>",
        "id": 500325577,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739859129
    },
    {
        "content": "<p>Should be fine</p>",
        "id": 500325589,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739859137
    },
    {
        "content": "<p>List always breaks recursions.</p>",
        "id": 500325597,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739859142
    },
    {
        "content": "<p>Yep</p>",
        "id": 500325669,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739859214
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20spike/near/500293568\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"453336\">Joshua Warner</span> <span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> </p>\n<p>Could you please make a single unit test or something that produces a minimal <code>parse.IR</code>. </p>\n<p>Like are we at the point we're the IR could represents this?</p>\n<div class=\"codehilite\"><pre><span></span><code>module [name]\n\nname = &quot;Luke&quot;\n</code></pre></div>\n<p>This would be really helpful for working on Can. We're just not sure how to work with the ParseIR rn.</p>\n</blockquote>\n<p>If you need this right now, I can add parsing a plain module header to my PR</p>",
        "id": 500414910,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1739889118
    },
    {
        "content": "<p>Everything else should work</p>",
        "id": 500414973,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1739889126
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> header and statements do exist.  If you get a file, it has this shape:</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">File</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">header</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">HeaderIdx</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">statements</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">StatementIdx</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">region</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Region</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n</code></pre></div>",
        "id": 500415138,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1739889174
    },
    {
        "content": "<p>You just need to run <code>ast.store.getFile()</code> to get it</p>",
        "id": 500415179,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1739889191
    },
    {
        "content": "<p>Another passing note, I am at the point where I want to start lazily creating the Parse IR display format, because I think it'll be useful for debugging for me</p>",
        "id": 500415515,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1739889290
    },
    {
        "content": "<p>So I get:</p>\n<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nv\">file</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">app</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">main!</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"s\">\"pf\"</span><span class=\"w\"> </span><span class=\"s\">\".../platform.roc\"</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"nb\">import</span><span class=\"w\"> </span><span class=\"s\">\"Stdout\"</span><span class=\"w\"> </span><span class=\"s\">\"pf\"</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"nv\">decl</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">ident</span><span class=\"w\"> </span><span class=\"s\">\"main!\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"nv\">expr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">apply</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">ident</span><span class=\"w\"> </span><span class=\"s\">\"line!\"</span><span class=\"w\"> </span><span class=\"s\">\"Stdout\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"nb\">string</span><span class=\"w\"> </span><span class=\"s\">\"Hello, world!\"</span><span class=\"p\">)))))))</span>\n</code></pre></div>\n<p>Maybe with the region as a <code>(START END)</code> sexpr after the tag.</p>",
        "id": 500416625,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1739889576
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"781658\">@Anthony Bullard</span> We were discussing this in <a class=\"stream-topic\" data-stream-id=\"395097\" href=\"/#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20IR.20serde/with/499994188\">#compiler development &gt; zig compiler - IR serde</a> . The relevant part of that topic is that all IRs would have a way to get turned into S-expression nodes, which then would be serializable to string. Similarly (but less relevant to you), we would have 1 S-expression parser that would take in a string and turn that into a node, which then could be translated into any of the IR-s. That way the pretty printing and parsing could be in 1 place.</p>",
        "id": 500479571,
        "sender_full_name": "Norbert Hajagos",
        "timestamp": 1739901606
    },
    {
        "content": "<p>Okay, we can start running with that for canonicalization. The remaining thing is alignment of <code>Region</code> structs. Maybe we can just use the <code>parse.IR.Region</code> (<a href=\"https://github.com/roc-lang/roc/blob/26f9416929aa0cd52ca732fc533b4a94a690de04/src/check/parse/IR.zig#L28\">source</a>) everywhere and expect that to update when necessary? <span class=\"user-mention\" data-user-id=\"781658\">@Anthony Bullard</span> would you think that a bad idea?</p>",
        "id": 500492087,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739905842
    },
    {
        "content": "<p>I think it's actually worth trying to use a parser node id as a region</p>",
        "id": 500510659,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739912767
    },
    {
        "content": "<p>That's a single u32, which is nice</p>",
        "id": 500510683,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739912778
    },
    {
        "content": "<p>What if a region is for a function body?</p>",
        "id": 500510727,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739912798
    },
    {
        "content": "<p>Then use the node that corresponds specifically to the body :)</p>",
        "id": 500510766,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739912814
    },
    {
        "content": "<p>Okay, yeah</p>",
        "id": 500510776,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739912820
    },
    {
        "content": "<p>I think that could work</p>",
        "id": 500510793,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739912826
    },
    {
        "content": "<p>All we'd need to do is ensure that all diagnostics we'd want to show would be traceable to such a parser node</p>",
        "id": 500510879,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739912858
    },
    {
        "content": "<p>But for the same source code and the same Roc compiler version, that's free</p>",
        "id": 500510970,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739912885
    },
    {
        "content": "<p>I'd love to make an alias so that we aren't just passing around <code>Parser.NodeStore.Idx</code> or whatever the actual thing is called</p>",
        "id": 500511185,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739912980
    },
    {
        "content": "<p>Not sure what to call it</p>",
        "id": 500511199,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739912983
    },
    {
        "content": "<p>maybe</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">ParseRegion</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">node_id</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Parser</span><span class=\"p\">.</span><span class=\"n\">NodeStore</span><span class=\"p\">.</span><span class=\"n\">Idx</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n</code></pre></div>",
        "id": 500511381,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739913045
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453336\">Joshua Warner</span> <a href=\"#narrow/stream/395097-compiler-development/topic/zig.20compiler.20-.20spike/near/500510659\">said</a>:</p>\n<blockquote>\n<p>I think it's actually worth trying to use a parser node id as a region</p>\n</blockquote>\n<p>Then for caching, we have to serialize both the parse and can ir?</p>",
        "id": 500517104,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739915386
    },
    {
        "content": "<p>My thinking is to not write that out, but rather re-generate it on demand if we ever need to emit errors for that file.</p>",
        "id": 500517785,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739915666
    },
    {
        "content": "<p>(I'm a little unsure of what this means about things like debug info, where resolving line:col info is in the hot path)</p>",
        "id": 500517902,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739915729
    },
    {
        "content": "<p>I kinda want to say we should not emit traditional debug info unless asked, and by default we should have some faster-to-generate thing.</p>",
        "id": 500518032,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739915770
    },
    {
        "content": "<p>I think it is reasonable to say that optimized llvm builds (which likely will be the default llvm builds) don't emit debug info or emit very limited debug info.</p>",
        "id": 500519525,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739916282
    },
    {
        "content": "<p>yeah the interpreter seems like it would reduce demand for debuginfo a lot</p>",
        "id": 500519709,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739916347
    },
    {
        "content": "<p>Of course need to be able to opt in for llvm optimized builds with full debug info</p>",
        "id": 500519710,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739916347
    },
    {
        "content": "<p>eventually yeah, but not a hard requirement for 0.1.0 I don't think</p>",
        "id": 500519792,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739916371
    },
    {
        "content": "<p>And I think dev llvm builds should have full debug info (but the interpreter will make those rarer)</p>",
        "id": 500519800,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739916372
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/395097-compiler-development/topic/zig.20compiler.20-.20spike/near/500519792\">said</a>:</p>\n<blockquote>\n<p>eventually yeah, but not a hard requirement for 0.1.0 I don't think</p>\n</blockquote>\n<p>It think I might try to add in full debug info on first build of the llvm backend. I think it is the kind of work that can be painful to add later.</p>",
        "id": 500519921,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739916441
    },
    {
        "content": "<p>awesome!</p>",
        "id": 500519952,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739916459
    },
    {
        "content": "<p>Sorry, why a single parser/writer for all IR display formats?  I don't know how well those will work together....</p>",
        "id": 500523276,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1739917977
    },
    {
        "content": "<p>But I'm happy to see it if it does!</p>",
        "id": 500523291,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1739917986
    },
    {
        "content": "<p>My (perhaps unfounded) assumption is that there will be some useful commonality to extract there, but I could be wrong.</p>",
        "id": 500525179,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739918945
    },
    {
        "content": "<p>In particular I was thinking about things like pretty-printing the s-expr, which if you want to have a reasonably dense format that doesn't take up a bunch of vertical space, is non-trivial</p>",
        "id": 500525364,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739919034
    },
    {
        "content": "<p>I'm ambivalent as to whether that takes the form of a bunch of utilities that are used adhoc by different IRs, or a system where you convert the IR to/from some s-expr nodes which are then processed</p>",
        "id": 500525455,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739919093
    },
    {
        "content": "<p>I've made a zig library to help parse and generate S-expression. Just wanted to let people know that I've started on this. Haven't wired it up with any of our actual IR's yet.</p>\n<p><span class=\"user-mention\" data-user-id=\"577599\">@Norbert Hajagos</span> and I will polish it later today and I'll make a PR to share it.</p>",
        "id": 500539139,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739926149
    },
    {
        "content": "<p>Here's a snippet of what I've got so far</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"c1\">/// Represents a token in an S-expression.</span>\n<span class=\"c1\">///</span>\n<span class=\"c1\">/// This type is comptime generic over two types: `T` for identifiers and `V` for values.</span>\n<span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">Token</span><span class=\"p\">(</span><span class=\"kr\">comptime</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">type</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kr\">comptime</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">type</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">type</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"k\">union</span><span class=\"p\">(</span><span class=\"k\">enum</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">ident</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">value</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">lparen</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">rparen</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 500539334,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739926279
    },
    {
        "content": "<p>Do we want to use an arg parsing library for the CLI or roll it ourselves? I remember hearing talk of wanting to use very few third party libraries.</p>",
        "id": 501312565,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1740267159
    },
    {
        "content": "<p>roll it ourselves!</p>",
        "id": 501312958,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740267531
    },
    {
        "content": "<p>as I believe <span class=\"user-mention\" data-user-id=\"406911\">@Andrew Kelley</span> has said, \"just write a parser for cli args\"</p>",
        "id": 501312991,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740267590
    },
    {
        "content": "<p>We currently have one I wrote that is super simple</p>",
        "id": 501313228,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1740267799
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/blob/7fc2a08e2811fed7207ab5035f680bbf697d232f/src/cli.zig#L54\">https://github.com/roc-lang/roc/blob/7fc2a08e2811fed7207ab5035f680bbf697d232f/src/cli.zig#L54</a></p>",
        "id": 501313259,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1740267837
    },
    {
        "content": "<p>Probably could do with some love though</p>",
        "id": 501313343,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1740267899
    },
    {
        "content": "<p>Okay sweet. I'm going to take a look at wiring up the formatter in the CLI and wanted to confirm the approach</p>",
        "id": 501314206,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1740268762
    },
    {
        "content": "<p>Thank you Isaac!  I'd love to get that so I can start writing files straight-up and running the formatter on it</p>",
        "id": 501415249,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740348993
    },
    {
        "content": "<p>Some string tokenizing + parsing updates: <a href=\"https://github.com/roc-lang/roc/pull/7632\">https://github.com/roc-lang/roc/pull/7632</a></p>",
        "id": 501415403,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1740349136
    },
    {
        "content": "<p>Type Annotation and Declaration parsing and formatting: <a href=\"https://github.com/roc-lang/roc/pull/7633\">https://github.com/roc-lang/roc/pull/7633</a></p>",
        "id": 501416808,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740350306
    },
    {
        "content": "<p>I got most of <code>Type.Store</code> (new <code>Subs</code>) working today. I’m gonna work on unifying primitives tomorrow!</p>",
        "id": 501431208,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1740362456
    },
    {
        "content": "<p>haven't disappeared, have been reading almost every message. just letting people cook, lots of chefs already :D</p>",
        "id": 501597326,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1740416137
    },
    {
        "content": "<p>honestly, the speed at which this is moving needs to be studied, extremely impressive. ya'll are making what seems like a gargantuan effort look like a weekend project</p>",
        "id": 501598628,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1740416465
    },
    {
        "content": "<p>Definitely moving well, but still tons to do. That said, I do agree that it might be hard to fully parallelize to more folks right now. Mostly things at the top of the stack are moving right now.</p>",
        "id": 501599250,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740416623
    },
    {
        "content": "<p>yea it's all good, I'll sneak something in eventually, I'm not here for personal glory :D</p>",
        "id": 501599438,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1740416660
    },
    {
        "content": "<p>I'm trying to update my SExpr PR so I can land what I have, and am running into some issues with memory leaks/issues in the formatting tests.</p>\n<p>One somewhat related question... should the SafeMultiList hold onto the allocator? why do we do that?</p>\n<div class=\"codehilite\"><pre><span></span><code>pub fn SafeMultiList(comptime T: type) type {\n    return struct {\n        items: std.MultiArrayList(T),\n        allocator: std.mem.Allocator,\n</code></pre></div>",
        "id": 502239799,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1740649909
    },
    {
        "content": "<p>I'm looking at this error trace from a test and it points to the <code>store.nodes.deinit()</code> as the source of the problem.</p>\n<div class=\"codehilite\"><pre><span></span><code>thread 415308 panic: integer overflow\n/opt/homebrew/Cellar/zig/0.13.0/lib/zig/std/multi_array_list.zig:540:31: 0x103032c37 in capacityInBytes (test)\n            return elem_bytes * capacity;\n                              ^\n/opt/homebrew/Cellar/zig/0.13.0/lib/zig/std/multi_array_list.zig:544:49: 0x103032c7b in allocatedBytes (test)\n            return self.bytes[0..capacityInBytes(self.capacity)];\n                                                ^\n/opt/homebrew/Cellar/zig/0.13.0/lib/zig/std/multi_array_list.zig:177:41: 0x10303122f in deinit (test)\n            gpa.free(self.allocatedBytes());\n                                        ^\n/Users/luke/Documents/GitHub/roc/src/collections/safe_list.zig:132:30: 0x102ff531b in deinit (test)\n            self.items.deinit(self.allocator);\n                             ^\n/Users/luke/Documents/GitHub/roc/src/check/parse/IR.zig:475:27: 0x102fa3ea3 in deinit (test)\n        store.nodes.deinit();\n</code></pre></div>",
        "id": 502240012,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1740649972
    },
    {
        "content": "<p>My suspicion is that maybe we are passing it a different allocator somehow... and so it's trying to free memory that isn't there or something.</p>",
        "id": 502240166,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1740650019
    },
    {
        "content": "<p>If anyone would like to take a look I pushed a commit for the above error <a href=\"https://github.com/roc-lang/roc/pull/7629/commits/6f641a7ee9a3e1c850643c44ef988774b62babc6\">https://github.com/roc-lang/roc/pull/7629/commits/6f641a7ee9a3e1c850643c44ef988774b62babc6</a></p>",
        "id": 502240468,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1740650107
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/395097-compiler-development/topic/zig.20compiler.20-.20spike/near/502240166\">said</a>:</p>\n<blockquote>\n<p>My suspicion is that maybe we are passing it a different allocator somehow... and so it's trying to free memory that isn't there or something.</p>\n</blockquote>\n<p>The error is an overflow when calculating the capacity. That should be before any sort of allocator interactions. Probably would be good to print out the capacity and element size in bytes before that call to see what they are.</p>",
        "id": 502352466,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740681443
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/395097-compiler-development/topic/zig.20compiler.20-.20spike/near/502239799\">said</a>:</p>\n<blockquote>\n<p>One somewhat related question... should the SafeMultiList hold onto the allocator? why do we do that?</p>\n<p><div class=\"codehilite\"><pre><span></span><code>pub fn SafeMultiList(comptime T: type) type {\n    return struct {\n        items: std.MultiArrayList(T),\n        allocator: std.mem.Allocator,\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>MultiArrayList stores the allocator, so we should not need to.</p>",
        "id": 502352634,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740681487
    },
    {
        "content": "<p>One possibility is that we deallocate out of order and that leads to reading a garbage capacity from freed memory. That or the equivalent but via a stack allocation</p>",
        "id": 502352973,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740681556
    },
    {
        "content": "<p>I should be able to pull this later today and take a deeper look</p>",
        "id": 502353258,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740681643
    },
    {
        "content": "<p>If you could that would be helpful. I'm very lost staring at these errors in the zig stdlib</p>",
        "id": 502429906,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1740694868
    },
    {
        "content": "<p>I feel like building the SExpr I'm bumping into issues that we're not aware of just because I'm wiring things up for the first time.</p>",
        "id": 502431591,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1740694945
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> I think I have everything you need in PR comments</p>",
        "id": 502480293,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740709667
    },
    {
        "content": "<p><a href=\"https://www.youtube.com/watch?v=wmOc4GLq8xM\">me trying to resist making SExpr-based jokes in this channel</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"wmOc4GLq8xM\" href=\"https://www.youtube.com/watch?v=wmOc4GLq8xM\"><img src=\"https://uploads.zulipusercontent.net/0b25165df935d25b6a900890552eb193d995f7c6/68747470733a2f2f692e7974696d672e636f6d2f76692f776d4f6334474c7138784d2f64656661756c742e6a7067\"></a></div>",
        "id": 502683664,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1740784886
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20spike/near/502240012\">said</a>:</p>\n<blockquote>\n<p>I'm looking at this error trace from a test and it points to the <code>store.nodes.deinit()</code> as the source of the problem.</p>\n<p><div class=\"codehilite\"><pre><span></span><code>thread 415308 panic: integer overflow\n/opt/homebrew/Cellar/zig/0.13.0/lib/zig/std/multi_array_list.zig:540:31: 0x103032c37 in capacityInBytes (test)\n            return elem_bytes * capacity;\n                              ^\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>If this happens in debug mode, it's often because one of the operands is undefined. In zig, when you assign something to undefined (for example by freeing memory), the bytes are memset to <code>0xaa</code>. This has some nice properties, including the fact that if you multiply by an integer even as small as <code>2</code> you get overflow.</p>",
        "id": 502683888,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1740785041
    },
    {
        "content": "<p>in other words, I would expect that stack trace if you called safe_list deinit() twice</p>",
        "id": 502684072,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1740785145
    },
    {
        "content": "<p>fear not, for this is <strong>checked illegal behavior</strong>, which is deterministic and straightforward to debug</p>",
        "id": 502684313,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1740785268
    },
    {
        "content": "<p>Yeah, was great for catching the double free. Just not the clearest error message</p>",
        "id": 502686329,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740786559
    },
    {
        "content": "<p>What are general thoughts on always using <code>Unmanaged</code> datastructures?</p>\n<p>Unmanaged just means that they do not store a pointer to an allocator. Instead the allocator must be passed in on for all functions that might allocate/deallocate.</p>\n<hr>\n<p>Fundamentally, I don't think it is a big change. Just a minor api change. It likely isn't too important of a change, but avoids storing lots of extra copies of pointers to the allocator. Instead we just store one copy of the pointer to the allocator and pass it down the stack.</p>\n<p>Seems to fit nicely with how we are designing datastructures.</p>",
        "id": 502695857,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740792794
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> I think I've got all the <code>coordinate</code> code set up in this PR, more or less: <a href=\"https://github.com/roc-lang/roc/pull/7625\">https://github.com/roc-lang/roc/pull/7625</a></p>\n<p>question for you on code structure: I was trying to figure out how best to pass around ownership of the different stage IRs and I realized that they are all in (Multi)ArrayLists anyway, so I changed from having each IR get <code>init</code>ed and returned to each IR being created in a MultiArrayList as <code>undefined</code> and then their <code>init</code> functions get a pointer to that <code>undefined</code> IR that they init in-place (<a href=\"https://github.com/smores56/roc/blob/4dc1405e1c338f2bb6d6639bfe5e80aa7c123060/src/base/module_work.zig#L70\">source</a> and <a href=\"https://github.com/smores56/roc/blob/4dc1405e1c338f2bb6d6639bfe5e80aa7c123060/src/check/canonicalize/IR.zig#L42\">source</a>). This seemed like a simple way to keep the reference depth to one, but maybe there's a better pattern. What do you think about this strategy? Am I not explaining this well enough?</p>",
        "id": 502862283,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740923125
    },
    {
        "content": "<p>I'm not sure I quite follow. What is the advantage of </p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"n\">items</span><span class=\"p\">.</span><span class=\"n\">appendAssumeCapacity</span><span class=\"p\">(.{</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">package_idx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">can_irs</span><span class=\"p\">.</span><span class=\"n\">getPackageIdx</span><span class=\"p\">(</span><span class=\"n\">work_idx</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">module_idx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">can_irs</span><span class=\"p\">.</span><span class=\"n\">getModuleIdx</span><span class=\"p\">(</span><span class=\"n\">work_idx</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">work</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">undefined</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n\n<span class=\"n\">init_work_with_env</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">items</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">(.</span><span class=\"n\">work</span><span class=\"p\">)[</span><span class=\"n\">index</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">can_irs</span><span class=\"p\">.</span><span class=\"n\">getWork</span><span class=\"p\">(</span><span class=\"n\">work_idx</span><span class=\"p\">).</span><span class=\"n\">env</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">gpa</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>over (or whatever the equivalent would be):</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"n\">items</span><span class=\"p\">.</span><span class=\"n\">appendAssumeCapacity</span><span class=\"p\">(.{</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">package_idx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">can_irs</span><span class=\"p\">.</span><span class=\"n\">getPackageIdx</span><span class=\"p\">(</span><span class=\"n\">work_idx</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">module_idx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">can_irs</span><span class=\"p\">.</span><span class=\"n\">getModuleIdx</span><span class=\"p\">(</span><span class=\"n\">work_idx</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">work</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Work</span><span class=\"p\">.</span><span class=\"n\">init_with_env</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">can_irs</span><span class=\"p\">.</span><span class=\"n\">getWork</span><span class=\"p\">(</span><span class=\"n\">work_idx</span><span class=\"p\">).</span><span class=\"n\">env</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">gpa</span><span class=\"p\">),</span>\n<span class=\"p\">});</span>\n</code></pre></div>",
        "id": 502886527,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740939855
    },
    {
        "content": "<p>Because the second one is pass by value, so more copying is happening</p>",
        "id": 502890872,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740942746
    },
    {
        "content": "<p>Your talking about the returned value from <code>Work.init_with_env</code> which is being placed into the larger struct as the <code>.work</code> field?</p>",
        "id": 502894881,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740945573
    },
    {
        "content": "<p>Yes</p>",
        "id": 502895099,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740945711
    },
    {
        "content": "<p>Not sure if that's a big cost, or if LLVM will optimize that away</p>",
        "id": 502895170,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740945736
    },
    {
        "content": "<p>I wouldn't worry about that. Should be optimized away by llvm. Also, should not be anywhere near the hot path.</p>",
        "id": 502895243,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740945813
    },
    {
        "content": "<p>large returned structs by default are turned into pointer args</p>",
        "id": 502895274,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740945840
    },
    {
        "content": "<p>Great, that was the most underlying question</p>",
        "id": 502895325,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740945856
    },
    {
        "content": "<p>Question re <a href=\"https://github.com/roc-lang/roc/pull/7664#discussion_r1980864364\">https://github.com/roc-lang/roc/pull/7664#discussion_r1980864364</a> <span class=\"user-mention\" data-user-id=\"781658\">@Anthony Bullard</span> and <span class=\"user-mention\" data-user-id=\"453336\">@Joshua Warner</span> </p>\n<p>I was wanting to clarify, should I be slicing into the source bytes or getting this information from the interner? </p>\n<p>Is the plan for the untagged union to go away eventually and everything will be interned?</p>",
        "id": 503475023,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1741170642
    },
    {
        "content": "<p>I haven't really paid attention to the interning progress we've made, I know that I'm using IR.resolve in the formatter</p>",
        "id": 503496731,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741176977
    },
    {
        "content": "<p>The untagged union won’t go away - eg for things that we definitely don’t need to intern (braces, symbols, etc)</p>",
        "id": 503559146,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1741190582
    },
    {
        "content": "<p>My intent is that strings/number/etc will all be interned</p>",
        "id": 503559391,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1741190631
    },
    {
        "content": "<p>I assume if we have any sort of parse errors, we should not format the ast, right? We should print the parse errors and early exit.</p>",
        "id": 503677128,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741227538
    },
    {
        "content": "<p>I thought the plan was to do a best effort, and generate a compiler error.</p>",
        "id": 503677990,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1741228068
    },
    {
        "content": "<p>Are you specifically talking about the cli formatter?</p>",
        "id": 503678057,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1741228092
    },
    {
        "content": "<p>Yeah, cli specifically</p>",
        "id": 503680497,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741229644
    },
    {
        "content": "<p>Ahk, that makes sense then.</p>",
        "id": 503680522,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1741229665
    },
    {
        "content": "<p>The only thing I can think of is maybe there is something like an LSP that would want different behaviour. But that's a different tool.</p>",
        "id": 503680587,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1741229713
    },
    {
        "content": "<p>Eventually I want the formatter to format everything _but_ the part of the input that has the error (e.g. maybe the nearest outer statement/decl) - and then copy the source text from the input verbatum, for the section with the error - the only possible difference being indenting or dedenting the entire block of text, if appropriate.</p>",
        "id": 503699951,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1741239062
    },
    {
        "content": "<p>... but for now I think we should just make the formatter bail out on parser OR tokenizer errors.</p>",
        "id": 503700011,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1741239083
    },
    {
        "content": "<p>That makes sense and will be cool when it works</p>",
        "id": 503707110,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741241817
    },
    {
        "content": "<p>I think we need to keep the source input around throughout all sources that can report errors in the source</p>",
        "id": 503756563,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741257023
    },
    {
        "content": "<p>At some point we could manifest the errors if we need to.</p>",
        "id": 503840914,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741279429
    },
    {
        "content": "<p>Note to all, on latest main, the zig version is now 0.14.0</p>\n<p>If you have an issue compiling after updating zig, you may need to delete some caches (<code>.zig-cache</code> and/or <code>~/.cache/zig/</code>, maybe also <code>zig-out</code>).</p>",
        "id": 504321163,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741470657
    },
    {
        "content": "<p>Missed this on my first read of the zig updates, but zig plans to make the <code>Unmanaged</code> containers their default contianers. So in zig <code>0.15.0</code> <code>std.ArrayList</code> will be what was previously <code>std.ArrayListUnmanaged</code>. So I guess switching over to the unmanaged veriants makes even more sense.<br>\n<a href=\"https://ziglang.org/download/0.14.0/release-notes.html#toc-Embracing-Unmanaged-Style-Containers\">Embracing \"Unmanaged\"-Style Containers</a></p>",
        "id": 504331157,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741478938
    },
    {
        "content": "<p>Just wanted to highlight something with our Parser diagnostics. See <a href=\"https://github.com/roc-lang/roc/pull/7672#discussion_r1986224249\">https://github.com/roc-lang/roc/pull/7672#discussion_r1986224249</a> </p>\n<p>I'm thinking we probably want the Parser problems to be pushed into the ModuleEnv so they outlive the parsing stage of the compiler, and later stages that see a malformed node can still reference those errors. </p>\n<p>What do people think?</p>",
        "id": 504360089,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1741501852
    },
    {
        "content": "<p>That was always the plan in my eyes, but I do remember the Problem.Parse variant being removed by someone else</p>",
        "id": 504360246,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741502005
    },
    {
        "content": "<p>So there may be a reason I don't know about why we don't want them in ModuleEnv</p>",
        "id": 504360286,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741502039
    },
    {
        "content": "<p>But I don't know it</p>",
        "id": 504360328,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741502048
    },
    {
        "content": "<p>Yeah, I suspect we just haven't ever got that far before. Now we've got more of the coordinate and other stages set up a bit, we can find and sort out these things.</p>",
        "id": 504360346,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1741502076
    },
    {
        "content": "<p>Sounds good to me. Avoids manually managing the lifetime</p>",
        "id": 504360469,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741502185
    },
    {
        "content": "<p>I'm happy to attempt this change. Though I'll wait for when <span class=\"user-mention\" data-user-id=\"781658\">@Anthony Bullard</span> is next online as he may have ideas or want to work on this.</p>",
        "id": 504368080,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1741508627
    },
    {
        "content": "<p>Where did we land on <code>||</code> -- is that meant to be parsed as an <code>or</code> or are we only accepting keyword?</p>",
        "id": 504447888,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1741566882
    },
    {
        "content": "<p>I'm just working on an ambiguous fuzz failure and this is the current problem.</p>",
        "id": 504447917,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1741566904
    },
    {
        "content": "<p>I'm pretty sure both <code>||</code> and <code>&amp;&amp;</code> should parse and then format to <code>or</code> and <code>and</code></p>",
        "id": 504448778,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741567605
    },
    {
        "content": "<p>This is the fuzz issue</p>\n<div class=\"codehilite\"><pre><span></span><code>~~~META\ndescription=fuzz crash\n~~~SOURCE\n|\u000f|1\n</code></pre></div>",
        "id": 504448830,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1741567661
    },
    {
        "content": "<p>That parses the first time as a lambda, then formats as <code>||</code> (without the space) then the second time around it parses as an <code>or</code></p>",
        "id": 504448894,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1741567690
    },
    {
        "content": "<p>Here's the latest snapshot output for that... including the tokens</p>\n<div class=\"codehilite\"><pre><span></span><code>~~~META\ndescription=fuzz crash\n~~~SOURCE\n|\u000f|1\n~~~FORMATTED\n|| 1\n~~~TOKENS\nOpBar,OpBar,Int,EndOfFile\n~~~PARSE\n(file\n    (malformed &#39;missing_header&#39;)\n    (lambda\n        (args)\n        (int &#39;1&#39;)))\n</code></pre></div>",
        "id": 504449330,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1741567988
    },
    {
        "content": "<p>One \"fix\" I found that works, was to format the lambda with no args with a space, e.g. <code>| |</code></p>",
        "id": 504449449,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1741568070
    },
    {
        "content": "<p>ah yeah, there is ambiguity now. Not sure the plan on that</p>",
        "id": 504449494,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741568096
    },
    {
        "content": "<p>Would it look terrible if it formatted as <code>|_|</code>?</p>",
        "id": 504449554,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1741568150
    },
    {
        "content": "<p>I think that would suggest an ignored arg</p>",
        "id": 504449635,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741568173
    },
    {
        "content": "<p>For the sake of moving past this crash, I think I'll format using a space for now. It's a hack but we can come back to it.</p>",
        "id": 504449711,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1741568220
    },
    {
        "content": "<p>so the idea we settled on was that:</p>\n<ul>\n<li>officially, we only support <code>or</code> and <code>and</code></li>\n<li>as a matter of convenience, we always have the formatter rewrite <code>&amp;&amp;</code> to <code>and</code>, and in the situations where you wrote <code>||</code> and it can unambiguously detect that <code>or</code> would have worked (but 0-arg lambda would not), then it can also rewrite that to <code>or</code> for you. But there was at least one situation where either could work, and so in those situations we have to assume you meant lambda (which is why we have to go with <code>or</code> as the keyword)</li>\n</ul>",
        "id": 504453049,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1741570435
    },
    {
        "content": "<p>Ok, that makes sense</p>",
        "id": 504453179,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1741570509
    },
    {
        "content": "<p>We are _not_ parsing <code>||</code> or <code>&amp;&amp;</code> any longer. With the 0.1.0-line compiler we are hard moving to <code>or</code> and <code>and</code></p>",
        "id": 504579627,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741612938
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20spike/near/504453049\">said</a>:</p>\n<blockquote>\n<ul>\n<li>as a matter of convenience, we always have the formatter rewrite <code>&amp;&amp;</code> to <code>and</code>, and in the situations where you wrote <code>||</code> and it can unambiguously detect that <code>or</code> would have worked (but 0-arg lambda would not), then it can also rewrite that to <code>or</code> for you. But there was at least one situation where either could work, and so in those situations we have to assume you meant lambda (which is why we have to go with <code>or</code> as the keyword)</li>\n</ul>\n</blockquote>\n<p>We can work to do this eventually, but I'm not going to focus on this now.</p>\n<p>My biggest concern is landing my current PR, then finishing all header parsing, then figuring out and implementing <code>where ...</code> in type annotations, and then making malformed work well (the current situation has a number of issues)</p>",
        "id": 504580192,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741613046
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> <a href=\"#narrow/stream/395097-compiler-development/topic/zig.20compiler.20-.20spike/near/504579627\">said</a>:</p>\n<blockquote>\n<p>We are _not_ parsing <code>||</code> or <code>&amp;&amp;</code> any longer. With the 0.1.0-line compiler we are hard moving to <code>or</code> and <code>and</code></p>\n</blockquote>\n<p>I don't think this is correct. I think the tokenizer unifies them.</p>",
        "id": 504630042,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741622994
    },
    {
        "content": "<p>So we likely need to delete support from the tokenizer if this is what we want.</p>",
        "id": 504630218,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741623022
    },
    {
        "content": "<p>If that is the case, then yes the tokenizer needs an update</p>",
        "id": 504688647,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1741641229
    },
    {
        "content": "<p>I think || at least needs to be given its own special token (not unified with <code>or</code> at that level)</p>",
        "id": 505313150,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1741838779
    },
    {
        "content": "<p>We need context from the parser in order to distinguish cases where || would me <code>or</code> from uses as a no-args closure</p>",
        "id": 505313236,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1741838828
    },
    {
        "content": "<p>Parser could match on double single bar instead of doing it in the tokenizer.</p>",
        "id": 505320233,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741842437
    },
    {
        "content": "<p>Though not sure the tradeoffs there</p>",
        "id": 505320251,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741842448
    },
    {
        "content": "<p>Like if in an expression where it could see <code>and</code> or <code>or</code>, if the parser sees two ampersand or two bar tokens, it could consider them and/or</p>",
        "id": 505320366,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741842497
    },
    {
        "content": "<p>I don’t want two bars with white space in between to ever accidentally be treated as an  pipe || or. So I think this definitely needs some kind of token representation that’s unique from that.</p>",
        "id": 505444379,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1741877603
    },
    {
        "content": "<p>I see. Yeah, forgot about whitespace</p>",
        "id": 505450755,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741878996
    },
    {
        "content": "<p>Interesting reply to our roc post on switching to zig. Specifically about compile times: <br>\n<a href=\"https://x.com/zack_overflow/status/1899953945990357081?t=oaGhkuoKLPnMyAsvl_zUxg&amp;s=19\">https://x.com/zack_overflow/status/1899953945990357081?t=oaGhkuoKLPnMyAsvl_zUxg&amp;s=19</a></p>",
        "id": 505482923,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741886742
    },
    {
        "content": "<p>I agree with <a href=\"https://x.com/bhansconnect/status/1900237824122905077\">your reply</a> <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 505520784,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1741898225
    },
    {
        "content": "<p>I'll happily take \"massive feedback loop improvements for large code bases are mid-development but haven't landed yet\" over \"there are no plans for massive feedback loop improvements at any point in the future\"</p>",
        "id": 505520999,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1741898289
    },
    {
        "content": "<p>Even worse, no possible plans, IMO</p>",
        "id": 505523765,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741899233
    },
    {
        "content": "<p>The WASM runtime for proc macros seems pretty promising</p>",
        "id": 505523845,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741899253
    },
    {
        "content": "<p>And parallelism was only recently introduced in nightly for pre-LLVM stages within the same crate</p>",
        "id": 505523933,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741899290
    },
    {
        "content": "<p>But Rust as a language isn't designed in a way that can be compiled quickly</p>",
        "id": 505524005,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741899316
    },
    {
        "content": "<p>This coming from one of Rust's biggest fanboys</p>",
        "id": 505524034,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741899331
    },
    {
        "content": "<p>I think y'all should be able to try out <a href=\"https://ziglang.org/download/0.14.0/release-notes.html#Incremental-Compilation\">this workflow</a> already (the thing the bun guy said they can't try out because of <code>usingnamespace</code>).</p>\n<p>has anyone tried it? can you report success or trouble with it?</p>",
        "id": 505559935,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1741916348
    },
    {
        "content": "<p>note: specifically the \"no-bin\" thing (read the linked section to see how to set it up)</p>",
        "id": 505560600,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1741916726
    },
    {
        "content": "<p>Does no-bin have to be a flag? Currently we have a <code>check</code> build step, but zig seems to ignore it and still build everything.</p>",
        "id": 505560705,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741916778
    },
    {
        "content": "<p>might be a bit of an awkward build system API thing here to work around. it needs to pass <code>-fno-bin</code> to the compiler, which I believe it does based on whether or not <code>exe.getEmittedBin()</code> is called, which is called by <code>installArtifact</code></p>",
        "id": 505560824,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1741916862
    },
    {
        "content": "<p>I'm interested in addressing that, but more interested in seeing if you can get incremental compilation on errors only to work already</p>",
        "id": 505560898,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1741916888
    },
    {
        "content": "<p>If I comment out all installArtifact calls and remove the test step we get super fast compiles.</p>\n<p>If I only comment out installArtifact, but leave in the test step, some reason every other build is super fast (presumably a bug of some sort cause I change the file every time).</p>",
        "id": 505561233,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741917084
    },
    {
        "content": "<p>interesting. well you are welcome to file bugs against this functionality (codegen disabled). mlugg has been pretty diligent about fixing such bugs</p>",
        "id": 505561399,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1741917158
    },
    {
        "content": "<p>Despite changing the same amount of code between every run, every other call full rebuilds the tests and takes 2 seconds.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>with test step</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\"><pre><span></span><code>time zig build check -fincremental --watch\nBuild Summary: 6/6 steps succeeded\ncheck success\n├─ zig build-exe roc Debug native success 428ms\n├─ zig test Debug native success 2s\n├─ zig build-exe repro-tokenize Debug native success 372ms\n└─ zig build-exe repro-parse Debug native success 406ms\nBuild Summary: 6/6 steps succeeded\ncheck success\n├─ zig build-exe roc Debug native success 19ms\n├─ zig test Debug native success 21ms\n├─ zig build-exe repro-tokenize Debug native success 22ms\n└─ zig build-exe repro-parse Debug native success 18ms\nBuild Summary: 6/6 steps succeeded\ncheck success\n├─ zig build-exe roc Debug native success 26ms\n├─ zig test Debug native success 2s\n├─ zig build-exe repro-tokenize Debug native success 30ms\n└─ zig build-exe repro-parse Debug native success 27ms\nBuild Summary: 6/6 steps succeeded\ncheck success\n├─ zig build-exe roc Debug native success 28ms\n├─ zig test Debug native success 33ms\n├─ zig build-exe repro-tokenize Debug native success 36ms\n└─ zig build-exe repro-parse Debug native success 30ms\nBuild Summary: 6/6 steps succeeded\ncheck success\n├─ zig build-exe roc Debug native success 25ms\n├─ zig test Debug native success 2s\n├─ zig build-exe repro-tokenize Debug native success 30ms\n└─ zig build-exe repro-parse Debug native success 25ms\nBuild Summary: 6/6 steps succeeded\n</code></pre></div>\n</div></div>",
        "id": 505561417,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741917168
    },
    {
        "content": "<p>that's a good bug report assuming that you've managed to make the <code>zig test</code> command pass <code>-fno-emit-bin</code></p>",
        "id": 505561594,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1741917275
    },
    {
        "content": "<p>and assuming that gets fixed soon, that should be a ~25ms recompile cycle for you while working on a refactor. hope that gives you a sense of where things are headed :)</p>",
        "id": 505561687,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1741917328
    },
    {
        "content": "<p>Is there any equivalent config to <code>-fno-emit-bin</code> for <code>addTest</code> followed by <code>addRunArtifact</code>?</p>",
        "id": 505562132,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741917541
    },
    {
        "content": "<p>From a quick skim of the options, I don't see anything available there</p>",
        "id": 505562165,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741917562
    },
    {
        "content": "<p>mm I think addTest is equivalent to addExecutable. so if you don't try to run the test, I think it will pass -fno-emit-bin. you can verify the CLI commands with --verbose</p>",
        "id": 505562201,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1741917589
    },
    {
        "content": "<p>btw another thing I'm doing in this release cycle is separating out the build runner process from the application's configure script (build.zig), so that you don't have to wait for the growing number of build system features to compile every time you change your build script. this is relevant as the fuzzer UI becomes more sophisticated</p>",
        "id": 505562850,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1741917903
    },
    {
        "content": "<p>Hmm, so yeah, some reason every other save it rebuilds the test binary. And it is missing <code>-fno-emit-bin</code>.<br>\n<code>/Users/bren077s/vendor/zig-0.14.0/zig test -ODebug -Mroot=/Users/bren077s/Projects/roc/src/test.zig -lc --cache-dir /Users/bren077s/Projects/roc/.zig-cache --global-cache-dir /Users/bren077s/.cache/zig --name test --zig-lib-dir /Users/bren077s/vendor/zig-0.14.0/lib/ -fincremental --listen=-</code></p>\n<p>That said, given I am not calling <code>zig build test</code>, I am a bit surprised this is happening at all.<br>\nI guess just because the <code>test</code> step exists which runs the test binary, anything that interacts with the test binary (even if it doesn't run the binary), will lead to the binary being generated. I made our <code>check</code> step depend on <code>addTest</code>, just to make sure all our tests compile.</p>",
        "id": 505563455,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741918161
    },
    {
        "content": "<p>I'm sure the build system API could be improved to make this better without you having to think so hard about it</p>",
        "id": 505563626,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1741918247
    },
    {
        "content": "<p>Hmm, yeah, making 2 copies of the test step. One that is used for <code>zig build test</code> and actually runs the test, and one that is used for <code>zig build check</code> but never run fixes the issue.</p>",
        "id": 505563670,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741918270
    },
    {
        "content": "<p>I mean, once the \"codegen doesn't work yet\" caveat is lifted, for instance, this will Just Work</p>",
        "id": 505563671,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1741918272
    },
    {
        "content": "<p>but anyway, I hope you will find these workarounds worth it for the 0.14.x release of zig - they sure helped me out a ton when working on big things</p>",
        "id": 505563786,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1741918323
    },
    {
        "content": "<p>Anyway, thanks for the tip, definitely will clean up our build.zig to make incremental builds work.</p>",
        "id": 505563803,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741918337
    },
    {
        "content": "<p>np! report bugs :)</p>",
        "id": 505564024,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1741918445
    },
    {
        "content": "<p>one day we'll find all our own bugs with fuzzing but that day has not yet arrived</p>",
        "id": 505564076,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1741918474
    },
    {
        "content": "<p>I've just checked out the new incremental stuff <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> landed for roc's zig compiler and configured ZLS too. </p>\n<p>It's very fast.  <span aria-label=\"firebird\" class=\"emoji emoji-1f426-200d-1f525\" role=\"img\" title=\"firebird\">:firebird:</span> <span aria-label=\"racecar\" class=\"emoji emoji-1f3ce\" role=\"img\" title=\"racecar\">:racecar:</span> <span aria-label=\"rocket\" class=\"emoji emoji-1f680\" role=\"img\" title=\"rocket\">:rocket:</span></p>\n<p><em>(edit) it's hard to find the right emoji to really convey the feeling</em></p>",
        "id": 505588574,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1741930203
    },
    {
        "content": "<p>The \"official\" emoji for fast Zig stuff is <span aria-label=\"zap\" class=\"emoji emoji-26a1\" role=\"img\" title=\"zap\">:zap:</span> (<code>:zap:</code>)</p>",
        "id": 505630068,
        "sender_full_name": "Loris Cro",
        "timestamp": 1741946073
    },
    {
        "content": "<p>Thank you Loris <span aria-label=\"zap\" class=\"emoji emoji-26a1\" role=\"img\" title=\"zap\">:zap:</span></p>",
        "id": 505631507,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1741946518
    },
    {
        "content": "<p>ZLS does support --watch so you should also be able to enjoy basically the best of both worlds (in editor diagnostics, fast feedback) if you have the correct setup <a href=\"https://github.com/zigtools/zls/pull/2096\">https://github.com/zigtools/zls/pull/2096</a></p>",
        "id": 505632609,
        "sender_full_name": "Loris Cro",
        "timestamp": 1741946820
    },
    {
        "content": "<p>forgot to add: <span aria-label=\"zap\" class=\"emoji emoji-26a1\" role=\"img\" title=\"zap\">:zap:</span></p>",
        "id": 505635744,
        "sender_full_name": "Loris Cro",
        "timestamp": 1741947673
    },
    {
        "content": "<p>What's the next thing that ought to be worked on at this point?</p>",
        "id": 508423427,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1743046760
    },
    {
        "content": "<p>There are a few candidates</p>",
        "id": 508423488,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1743046802
    },
    {
        "content": "<p>Moving to a keyboard</p>",
        "id": 508423529,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1743046807
    },
    {
        "content": "<p>There are a few paths for us to take to get to an MVP</p>",
        "id": 508424073,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1743047235
    },
    {
        "content": "<p>The first stage we have been talking about was functions and strings</p>",
        "id": 508424128,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1743047279
    },
    {
        "content": "<p>_nods_</p>",
        "id": 508424206,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1743047306
    },
    {
        "content": "<p>There were a couple of \"more difficult to do after\" steps I thought important to implement, like blocks and imports</p>",
        "id": 508424244,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1743047339
    },
    {
        "content": "<p>But those aren't <em>necessary</em></p>",
        "id": 508424259,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1743047351
    },
    {
        "content": "<p>So if we want to finish up with imports, then implementing the basics of import resolution would be a good next step</p>",
        "id": 508424304,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1743047385
    },
    {
        "content": "<p>That's part of can? Or is that in a later phase?</p>",
        "id": 508424372,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1743047411
    },
    {
        "content": "<p>That's the <del>phase</del> stage directly after canonicalization</p>",
        "id": 508424382,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1743047421
    },
    {
        "content": "<p>resolve_imports.zig, presumably</p>",
        "id": 508424436,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1743047462
    },
    {
        "content": "<p>yep</p>",
        "id": 508424441,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1743047465
    },
    {
        "content": "<p>In particular, can wants to treat imported data as \"probably\" present, and imported from a module with the given name. <code>resolve_imports.zig</code> would go through those imports (and also ingested files a la <code>import \"file.txt\" as data : List(U8)</code>) and match them to files in the filesystem or create an error</p>",
        "id": 508424547,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1743047527
    },
    {
        "content": "<p>So it'll need to trigger parsing (and can) for those other files, right?</p>",
        "id": 508424595,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1743047565
    },
    {
        "content": "<p>What's the mechanism for that?</p>",
        "id": 508424613,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1743047584
    },
    {
        "content": "<p>That has already been implemented in the <code>coordinate.zig</code> foundational work</p>",
        "id": 508424616,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1743047587
    },
    {
        "content": "<p>The <code>coordinate.zig</code> file looks at all files (Roc and non-Roc) in all referenced packages</p>",
        "id": 508424661,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1743047626
    },
    {
        "content": "<p>And registers them in a big list</p>",
        "id": 508424680,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1743047636
    },
    {
        "content": "<p>Then <code>resolve_imports.zig</code> would look in the <code>*Package.Store</code> and see if it can find a file with the right name for the imported module</p>",
        "id": 508424790,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1743047706
    },
    {
        "content": "<p>Is that the <code>discoverModulesStartingFromEntry</code> thing?</p>",
        "id": 508424864,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1743047759
    },
    {
        "content": "<p>I'd look at <code>ModuleGraph.zig</code> for whoever implements this, because that already forms a dependency graph and sorts the modules in reverse dependency order for compilation of post-cache stages, AKA import resolution and beyond</p>",
        "id": 508424920,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1743047768
    },
    {
        "content": "<p>Aha great</p>",
        "id": 508424948,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1743047786
    },
    {
        "content": "<p>And remind me, are we guaranteed to have a DAG? Or might there be import cycles?</p>",
        "id": 508424975,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1743047807
    },
    {
        "content": "<p>We are banning import cycles</p>",
        "id": 508424989,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1743047820
    },
    {
        "content": "<p>If we find an import cycle, we exit early: <br>\n<a href=\"https://github.com/roc-lang/roc/blob/2dbbdf3e1f6b80f7fade826b27e6a4703dd24357/src/coordinate.zig#L111\">https://github.com/roc-lang/roc/blob/2dbbdf3e1f6b80f7fade826b27e6a4703dd24357/src/coordinate.zig#L111</a></p>",
        "id": 508425049,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1743047867
    },
    {
        "content": "<p>So this is one potential task</p>",
        "id": 508425055,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1743047878
    },
    {
        "content": "<p>I thought we needed import cycles for mutually recursive custom types.</p>",
        "id": 508425106,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743047891
    },
    {
        "content": "<p>We could just require that mutual recursion stays within one module, no?</p>",
        "id": 508425146,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1743047923
    },
    {
        "content": "<p>Or are you saying you also want to allow functions of the same name on each type?</p>",
        "id": 508425169,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1743047942
    },
    {
        "content": "<p>Well, what about <code>Foo</code> and <code>Bar</code> both having <code>to_str</code> methods</p>",
        "id": 508425177,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1743047947
    },
    {
        "content": "<p>Ah, fair</p>",
        "id": 508425205,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1743047962
    },
    {
        "content": "<p>Yeah... we should be able to support those <em>awkwardly</em> without allowing people to write less performantly-compiling code</p>",
        "id": 508425206,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1743047962
    },
    {
        "content": "<p>I'll link the message from Richard's brain blast on the subject</p>",
        "id": 508425225,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1743047974
    },
    {
        "content": "<p>Yeah, I think in that one special case, we have to conseder those modules as a super unit essentially</p>",
        "id": 508425333,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743048008
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20spike/near/500305558\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20spike/near/500068995\">said</a>:</p>\n<blockquote>\n<p>yeah, basically the idea is that if you have two nominal tag unions that are mutually recursive, and you also want them to have static dispatch (which could come up when modeling database tables, for example) that's currently impossible</p>\n</blockquote>\n<p>so I thought about this some more, and I think it's better if we continue to disallow cyclic imports and recommend this workaround if anyone actually needs mutually recursive nominal types with static dispatch:</p>\n<ul>\n<li>define the two mutually recursive nominal types (let's call them <code>A</code> and <code>B</code>) in the same module, let's call it <code>AandB.roc</code></li>\n<li>create separate <code>A.roc</code> and <code>B.roc</code> modules, each of which imports <code>AandB.roc</code> only</li>\n<li>both <code>A.roc</code> and <code>B.roc</code> exposes a nominal type which wraps the appropriate mutually recursive type inside <code>AandB.roc</code>, and exposes all the desired methods on those</li>\n<li>if the underlying nominal type needs to be exposed too (e.g. because the tags are needed for matching), then <code>A.roc</code> and <code>B.roc</code> can each provide a <code>to_inner</code> function which returns the underlying nominal type from <code>AandB</code>. Static dispatch won't be available on this structure, but that's okay because the wrapper does.</li>\n</ul>\n</blockquote>\n<p>From earlier in this channel:</p>",
        "id": 508425367,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1743048030
    },
    {
        "content": "<p>Interesting</p>",
        "id": 508425696,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1743048145
    },
    {
        "content": "<p>ah yeah, forgot about that</p>",
        "id": 508425727,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743048171
    },
    {
        "content": "<p>This sorta creates a one-type-per-file requirement</p>",
        "id": 508425734,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1743048174
    },
    {
        "content": "<p>So yeah, painful, but no recursion</p>",
        "id": 508425758,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743048186
    },
    {
        "content": "<blockquote>\n<p>This sorta creates a one-type-per-file requirement</p>\n</blockquote>\n<p>Custom types do that in general. This is more a side effect.</p>",
        "id": 508425789,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743048205
    },
    {
        "content": "<p>Yaeh true</p>",
        "id": 508425795,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1743048210
    },
    {
        "content": "<p>I guess what I was poking at is maybe static dispatch methods ought to be definable within a smaller scope than a whole module</p>",
        "id": 508425877,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1743048246
    },
    {
        "content": "<p>Like if you could define types in submodules and re-export them from the parent (real file) module</p>",
        "id": 508425913,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1743048269
    },
    {
        "content": "<p>like Rust's <code>mod{}</code> blocks</p>",
        "id": 508425931,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1743048286
    },
    {
        "content": "<p>Yeah, that has been mentioned a few times. I think it is currently in the lets wait and see in practice state</p>",
        "id": 508425932,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743048287
    },
    {
        "content": "<p>Yep yep, makes sense</p>",
        "id": 508425943,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1743048295
    },
    {
        "content": "<p>Cause could be dealt with via submodules or via explicitly bound methods to an object.</p>",
        "id": 508426005,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743048331
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"453336\">@Joshua Warner</span>, in order of my estimation of importance, there's</p>\n<ul>\n<li>import resolution</li>\n<li>typechecking</li>\n<li>helping with canonicalization (might be tricky to coordinate?)</li>\n<li>S-Expr's</li>\n<li>type specialization</li>\n<li>refcounting</li>\n<li>error message rendering</li>\n</ul>",
        "id": 508427328,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1743049178
    },
    {
        "content": "<p>Is there something in particular you want to hear about?</p>",
        "id": 508427342,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1743049192
    },
    {
        "content": "<p>If you're interested in typechecking, I'd reach out to Agus and see if you can grab it from him, he seems very busy with work at the moment and hasn't been pushing to his PR since its creation.</p>",
        "id": 508427444,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1743049261
    },
    {
        "content": "<p>But there are technically multiple people that are interested in working on it, so that one will happen <em>eventually</em></p>",
        "id": 508427478,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1743049295
    },
    {
        "content": "<p>I have fairly limited time, so whatever I pick up probably needs to be possible to put into some relatively bite-sized chunks</p>",
        "id": 508427800,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1743049552
    },
    {
        "content": "<p>Looks like snapshots can't have multiple test files right now, and thus can't usefully hit code in resolve_imports</p>",
        "id": 508428605,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1743050212
    },
    {
        "content": "<p>Actually it looks like snapshots don't currently cover anything after parsing (no canonicalization, for example)</p>",
        "id": 508428956,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1743050526
    },
    {
        "content": "<p>Yes, that would be something helpful to figure out on its own, and working on one stage at a time (or part of a stage at a time) should be modular enough</p>",
        "id": 508429157,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1743050718
    },
    {
        "content": "<p>I thinking of tackling these things next:</p>\n<ol>\n<li>Add coverage of canonicalize to the snapshot handling</li>\n<li>Allow a snapshot to define multiple files - I'm thinking using the section headers, so instead of <code>~~~SOURCE</code> you have <code>~~~SOURCE:foo.roc</code> and <code>~~~SOURCE:bar.roc</code> sections, and so on for any of the following sections which are per-module.</li>\n<li>Try to switch to using coordinate.zig logic in snapshot testing. Both so we don't have to duplicate that to get coverage of resolve_imports, but also to just... get coverage of coordinate.zig itself in snapshot testing.</li>\n</ol>\n<p>Thoughts?</p>",
        "id": 508429300,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1743050864
    },
    {
        "content": "<p>That would be great!</p>",
        "id": 508435296,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1743055417
    }
]