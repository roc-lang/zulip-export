[
    {
        "content": "<p>in a world where we have shadowing, what should this code do?</p>\n<p>the relevant part is that when <code>x = foo 1</code>, <code>y = foo 2</code>, and <code>z = foo 3</code> get run, they each happen after different <code>bar</code> values have been defined (or not), and <code>foo</code> calls <code>bar</code></p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">answer</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">foo</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">bar</span><span class=\"w\"> </span><span class=\"nv\">a</span>\n<span class=\"w\">    </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">foo</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"nv\">bar</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">foo</span><span class=\"w\"> </span><span class=\"nv\">b</span>\n<span class=\"w\">    </span><span class=\"nv\">y</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">foo</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"w\">    </span><span class=\"nv\">bar</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">foo</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nv\">z</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">foo</span><span class=\"w\"> </span><span class=\"mi\">3</span>\n</code></pre></div>",
        "id": 442437840,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717476467
    },
    {
        "content": "<p>I think a reasonable answer is \"something should be disallowed here\" - but if so, then what specifically should be disallowed?</p>",
        "id": 442437912,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717476494
    },
    {
        "content": "<p>for example, one plausible design is \"pretend Roc is an interpreted language that allows reassignment, and then give errors at compile time for things that would break if this code was interpreted at runtime\" - in which case:</p>\n<ul>\n<li><code>x = foo 1</code> is a compile-time error, because if you were to run that in an interpreter, at that point <code>bar</code> would not be defined, so running <code>foo</code> wouldn't work</li>\n<li><code>y = foo 2</code> would be fine, and would compile to a call to <code>foo</code> that calls the first<code> bar</code> because that's what has been defined at this point (or would be at runtime)</li>\n<li><code>z = foo 3</code> would also be fine, except it would compile to a different specialization of <code>foo</code> which calls the second <code>bar</code> instead of the first one, because again that's what would happen in an interpreter (that is, the interpreter would reassign <code>bar</code> to something else, which would affect what <code>foo</code> did when it ran)</li>\n</ul>",
        "id": 442438371,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717476683
    },
    {
        "content": "<p>however, this has the downside of now making it possible to need to create multiple specializations of a function based on shadowing</p>",
        "id": 442438443,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717476706
    },
    {
        "content": "<p>which isn't something we've talked about before, but which is something I suppose we could do</p>",
        "id": 442438466,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717476718
    },
    {
        "content": "<p>If you want to keep it simple, you could disallow shadowing lambdas</p>",
        "id": 442445695,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717480091
    },
    {
        "content": "<p>yeah and then only allow functions to capture things that have been defined earlier</p>",
        "id": 442498437,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717497663
    },
    {
        "content": "<p>Weren’t we going to require ordered defs anyway because of <code>dbg</code>?</p>",
        "id": 442501896,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1717498856
    },
    {
        "content": "<p>the problem is that mutually recursive functions still have to be possible</p>",
        "id": 442502056,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717498915
    },
    {
        "content": "<p>Ah, right</p>",
        "id": 442502168,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1717498939
    },
    {
        "content": "<p>another potential solution is to only allow mutually recursive functions at the top level</p>",
        "id": 442502246,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717498962
    },
    {
        "content": "<p>we had discussed that before somewhere, although I don't remember where <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 442502323,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717498985
    },
    {
        "content": "<p>I guess that's the simplest design because the rule is basically \"you have to define a value before you use it, except top-level values can be defined in any order and used in any order\"</p>",
        "id": 442502567,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717499067
    },
    {
        "content": "<p>and I think maybe we also separately discussed not allowing top-level values to shadow each other, because ordering wouldn't be clear</p>",
        "id": 442502637,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717499097
    },
    {
        "content": "<p>That’s pretty clean if we can get away with it</p>",
        "id": 442503210,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1717499290
    },
    {
        "content": "<p>I don’t remember writing mutually recursive functions inside a <code>let</code> in Elm</p>",
        "id": 442503310,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1717499337
    }
]