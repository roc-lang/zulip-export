[
    {
        "content": "<p>From <a class=\"stream-topic\" data-stream-id=\"231634\" href=\"/#narrow/stream/231634-beginners/topic/Abilities.20with.20type.20variables\">#beginners &gt; Abilities with type variables</a> - we need to tighten up the type-checking of ability impls against their prototype signatures.</p>\n<p>Let's use <code>&lt;r&gt;a</code> to say a type variable is rigid, and <code>&lt;f&gt;a</code> to say it is flexible (resp. Content::FlexVar/Content::RigidVar in the implementation).</p>\n<p>Given a prototype</p>\n<div class=\"codehilite\"><pre><span></span><code>ability Ab has\n  f : a -&gt; b | a has Ab\n</code></pre></div>\n<p>we solve the type as</p>\n<div class=\"codehilite\"><pre><span></span><code>&lt;r&gt;a -&gt; &lt;r&gt;b | a has Ab\n</code></pre></div>\n<p>The type checking should keep the variables as rigid in the prototype signature, instantiate rigid variables to flex variables in the implementation signature, and unify the signatures with a special-case of allowing any type to unify with the rigid variable that is the target of the ability specialization.</p>\n<p>For example, with the following cases:</p>\n<ol>\n<li>Implementation of type <code>&lt;r&gt;c -&gt; &lt;r&gt;d</code></li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code>instantiate impl type: &lt;f&gt;c -&gt; &lt;f&gt;d\nunify against prototype: &lt;r&gt;a -&gt; r&lt;b&gt; | a has Ab ~ &lt;f&gt;c -&gt; &lt;f&gt;d\nsolved type:\n  &lt;f&gt;c = &lt;r&gt;a | a has Ab\n  &lt;f&gt;d = &lt;r&gt;b\n:check:\n</code></pre></div>\n<ol start=\"2\">\n<li>Implementation of type <code>&lt;r&gt;c -&gt; &lt;r&gt;c</code></li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code>instantiate impl type: &lt;f&gt;c -&gt; &lt;f&gt;c\nunify against prototype: &lt;r&gt;a -&gt; r&lt;b&gt; | a has Ab ~ &lt;f&gt;c -&gt; &lt;f&gt;c\nsolved type:\n  &lt;f&gt;c = &lt;r&gt;a | a has Ab\n  &lt;f&gt;c = &lt;r&gt;a = &lt;r&gt;b\n:cross_mark: rigids can never be equal, this is a type error\n</code></pre></div>\n<ol start=\"3\">\n<li>Implementation of type <code>&lt;f&gt;c -&gt; &lt;f&gt;c</code></li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code>instantiate impl type: &lt;f&gt;c -&gt; &lt;f&gt;c\nunify against prototype: &lt;r&gt;a -&gt; r&lt;b&gt; | a has Ab ~ &lt;f&gt;c -&gt; &lt;f&gt;c\nsolved type:\n  &lt;f&gt;c = &lt;r&gt;a | a has Ab\n  &lt;f&gt;c = &lt;r&gt;a = &lt;r&gt;b\n:cross_mark: rigids can never be equal, this is a type error\n</code></pre></div>\n<ol start=\"4\">\n<li>Implementation of type <code>Foo -&gt; &lt;r&gt;c</code>, Foo is an opaque type</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code>instantiate impl type: Foo -&gt; &lt;f&gt;c\nunify against prototype: &lt;r&gt;a -&gt; r&lt;b&gt; | a has Ab ~ &lt;f&gt;c -&gt; &lt;f&gt;c\nsolved type:\n  Foo= &lt;r&gt;a | a has Ab   &lt;-- this is a needed new special case for ability checking\n  &lt;f&gt;c = &lt;r&gt;b\n:check:\n</code></pre></div>",
        "id": 372990030,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1688668540
    },
    {
        "content": "<p>Filed <a href=\"https://github.com/roc-lang/roc/issues/5645\">https://github.com/roc-lang/roc/issues/5645</a></p>",
        "id": 372990253,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1688668613
    },
    {
        "content": "<p>nice, makes sense! <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 373006587,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1688673169
    }
]