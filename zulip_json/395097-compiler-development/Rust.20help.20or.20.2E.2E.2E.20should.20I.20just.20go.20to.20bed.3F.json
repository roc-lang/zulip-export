[
    {
        "content": "<p>I've been staring at this test for awhile - and I'm so confused by these two logs(from the same site) ran in succession on the same test case:</p>\n<div class=\"codehilite\"><pre><span></span><code>is_multiline: true, item: PncApply(\n    @0-1 NumLiteral(\n        &quot;1&quot;,\n    ),\n    [\n        @2-3 Identifier {\n            ident: &quot;i&quot;,\n        },\n        @4-5 SpaceAfter(\n            Identifier {\n                ident: &quot;p&quot;,\n            },\n            [\n                LineComment(\n                    &quot;&quot;,\n                ),\n            ],\n        ),\n    ],\n)\n\nis_multiline: false, item: PncApply(\n    @0-1 NumLiteral(\n        &quot;1&quot;,\n    ),\n    Collection {\n        items: [\n            @7-8 SpaceBefore(\n                Identifier {\n                    ident: &quot;i&quot;,\n                },\n                [\n                    Newline,\n                ],\n            ),\n            @14-15 SpaceBefore(\n                Identifier {\n                    ident: &quot;p&quot;,\n                },\n                [\n                    Newline,\n                ],\n            ),\n        ],\n        final_comments: [\n            LineComment(\n                &quot;&quot;,\n            ),\n        ],\n    },\n)\n</code></pre></div>\n<p>One shows that the enum variant's second arg is a slice and in the other that same enum variant's second arg is an ast::Collection.</p>\n<p>Is there something I don't know about in Rust that could be going on here?</p>",
        "id": 492238353,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736222118
    },
    {
        "content": "<p>is it actually a slice, or do we have a custom <code>Debug</code> implementation which is printing it out as <code>[</code> ... <code>]</code> in some situations but not all situations?</p>",
        "id": 492240623,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1736223559
    },
    {
        "content": "<p>Feels like the latter, but can't tell without seeing the code</p>",
        "id": 492240727,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736223605
    },
    {
        "content": "<p>I have this line:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Pattern::PncApply args {:#?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"p\">);</span>\n</code></pre></div>",
        "id": 492292064,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736249340
    },
    {
        "content": "<p>And it also does the same thing</p>",
        "id": 492292114,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736249373
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Pattern::PncApply args [\n    @2-3 Identifier {\n        ident: &quot;i&quot;,\n    },\n    @4-5 SpaceAfter(\n        Identifier {\n            ident: &quot;p&quot;,\n        },\n        [\n            LineComment(\n                &quot;&quot;,\n            ),\n        ],\n    ),\n]\n</code></pre></div>",
        "id": 492292203,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736249403
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Pattern::PncApply args Collection {\n    items: [\n        @7-8 SpaceBefore(\n            Identifier {\n                ident: &quot;i&quot;,\n            },\n            [\n                Newline,\n            ],\n        ),\n        @14-15 SpaceBefore(\n            Identifier {\n                ident: &quot;p&quot;,\n            },\n            [\n                Newline,\n            ],\n        ),\n    ],\n    final_comments: [\n        LineComment(\n            &quot;&quot;,\n        ),\n    ],\n}\n</code></pre></div>",
        "id": 492292243,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736249427
    },
    {
        "content": "<p>It seems....maybe the derived implementation of Debug prints as just the items array when final_comments in empty?</p>",
        "id": 492292391,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736249502
    },
    {
        "content": "<p>And that's what it is.  TIL.  And hopefully you did too!</p>",
        "id": 492292659,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736249628
    }
]