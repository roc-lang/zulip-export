[
    {
        "content": "<p>Does anyone know the difference between <code>Types</code> in crates/compiler/types/src/types.rs and <code>Content</code> in crates/compiler/types/src/subs.rs?</p>\n<p>I found this clue... in the docs for <code>Types</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// Memory-dense storage of canonicalized types, sitting between the user-facing type syntax and</span>\n<span class=\"sd\">/// the [type solving representation][crate::subs::Content] of types.</span>\n</code></pre></div>\n<p>Can we have a single representation now or do they need to be different for some reason?</p>",
        "id": 499980865,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739683432
    },
    {
        "content": "<p>The only thing I can think of is maybe the Can version needs to keep Region information around for error reporting</p>",
        "id": 499980980,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739683562
    },
    {
        "content": "<p>Note to self -- I'd like to try unifying these and use the single representation. Also SoA using <code>Idx</code>'s would be nice.</p>",
        "id": 500049265,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739743663
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> -- thinking about the <code>TypeId</code> (from Rust's <code>VarStore</code>) and moved into the SoloEnv. Here's a commit from my WIP type-check PR <a href=\"https://github.com/roc-lang/roc/pull/7608/commits/15df5fa2007c20b0724aae48b0457abd587bd113\">https://github.com/roc-lang/roc/pull/7608/commits/15df5fa2007c20b0724aae48b0457abd587bd113</a></p>\n<p>We can migrate it into CombinedEnv also to be used in later stages when we want to generate a unique id.</p>",
        "id": 500559785,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739938717
    },
    {
        "content": "<p>Sounds good. We'll want to put that back as just ModuleEnv though since we aren't doing module sets anymore, it'll just be the same env the whole way through</p>",
        "id": 500559972,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739938876
    },
    {
        "content": "<p>Oh nice... no need to change then</p>",
        "id": 500559988,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739938894
    },
    {
        "content": "<p>A single ModuleEnv was much easier to understand</p>",
        "id": 500560010,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739938911
    }
]