[
    {
        "content": "<p>Folkert introduced me to the AArch backend work. Last night, after about 5 hours of staring at Assembly in <code>gdb</code>, I found the two-character change I needed to fix 114 tests <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<p><a href=\"https://github.com/roc-lang/roc/pull/5886\">https://github.com/roc-lang/roc/pull/5886</a></p>",
        "id": 394897321,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1696444871
    },
    {
        "content": "<p>It was actually a 3-lines change originally, but today Folkert mentioned I could simplify it</p>",
        "id": 394897511,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1696444939
    },
    {
        "content": "<p>Nice work finding that.</p>",
        "id": 394907808,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1696449417
    },
    {
        "content": "<p>Down to 36 test failures. We're getting close <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> </p>\n<p><a href=\"https://github.com/roc-lang/roc/pull/5896\">https://github.com/roc-lang/roc/pull/5896</a></p>",
        "id": 395486745,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1696738057
    },
    {
        "content": "<p>So excited to use this. Will be a nice speedup for silicon macs! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 395487262,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1696738470
    },
    {
        "content": "<p>a good number of them should be tests that should panic. I'm working on the setjmp/longjmp logic that we need for that</p>",
        "id": 395504706,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1696751182
    },
    {
        "content": "<p>then it's the long tail of subtle segfaults, probably</p>",
        "id": 395504721,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1696751189
    },
    {
        "content": "<p>we got it down to </p>\n<div class=\"codehilite\"><pre><span></span><code>Summary [ 506.665s] 901 tests run: 870 passed (2 slow), 31 failed, 7 skipped\n</code></pre></div>",
        "id": 395536430,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1696767399
    },
    {
        "content": "<p>I'm down to one failing test on the pi. it seems related to some other tests that still fail on the M2. I've nailed it down to</p>\n<div class=\"codehilite\"><pre><span></span><code>test gen_list::list_map2_different_lengths has been running for over 60 seconds\n==56630==\n==56630== Process terminating with default action of signal 11 (SIGSEGV)\n==56630==  Bad permissions for mapped region at address 0x4D17000\n==56630==    at 0x7B5FE7C: str.RocStr.reallocateFresh (in /tmp/.tmpqbDNId/app.so.1.0)\n</code></pre></div>",
        "id": 395574962,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1696797922
    },
    {
        "content": "<p>it's very inconsistent</p>\n<div class=\"codehilite\"><pre><span></span><code>==59022== Invalid write of size 8\n==59022==    at 0x7B48494: #UserApp_main_2777513159257922988 (in /tmp/.tmpBdWYSq/app.so.1.0)\n==59022==  Address 0x30 is not stack&#39;d, malloc&#39;d or (recently) free&#39;d\n==59022==\n==59022==\n==59022== Process terminating with default action of signal 11 (SIGSEGV)\n==59022==  Access not within mapped region at address 0x30\n==59022==    at 0x7B48494: #UserApp_main_2777513159257922988 (in /tmp/.tmpBdWYSq/app.so.1.0)\n</code></pre></div>",
        "id": 395577319,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1696800451
    },
    {
        "content": "<p>allright, well it's late so I should stop but I got this down to</p>\n<div class=\"codehilite\"><pre><span></span><code>        // Run both with and without lazy literal optimization.\n        {\n            assert_evals_to!($src, $expected, $ty, $transform, $leak, false);\n        }\n        {\n            assert_evals_to!($src, $expected, $ty, $transform, $leak, true);\n        }\n</code></pre></div>\n<p>the top one works, the bottom one does not. I suspect it's (big?) string constants? <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> any ideas here? </p>\n<p>also <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> this just looks a lot like the windows issues too</p>",
        "id": 395579030,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1696802268
    },
    {
        "content": "<p>Nice work, I can have a look later and see if I can find anything.</p>",
        "id": 395579253,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1696802501
    },
    {
        "content": "<p>so what is happening here is that we write the end of a string \"ggg\" into memory, then write its total length 28 into memory, and then copy it to some other place. The problem is that the x16 register contains NULL, so moving data there obviously fails. </p>\n<div class=\"codehilite\"><pre><span></span><code>   0x7ff78a8468 &lt;#UserApp_main_2777513159257922988+408&gt;    mov     x17, #0x67                      // #103\n   0x7ff78a846c &lt;#UserApp_main_2777513159257922988+412&gt;    sturb   w17, [x8, #25]\n   0x7ff78a8470 &lt;#UserApp_main_2777513159257922988+416&gt;    mov     x17, #0x67                      // #103\n   0x7ff78a8474 &lt;#UserApp_main_2777513159257922988+420&gt;    sturb   w17, [x8, #26]\n   0x7ff78a8478 &lt;#UserApp_main_2777513159257922988+424&gt;    mov     x17, #0x67                      // #103\n   0x7ff78a847c &lt;#UserApp_main_2777513159257922988+428&gt;    sturb   w17, [x8, #27]\n   0x7ff78a8480 &lt;#UserApp_main_2777513159257922988+432&gt;    stur    x8, [x29, #-104]\n   0x7ff78a8484 &lt;#UserApp_main_2777513159257922988+436&gt;    mov     x17, #0x1c                      // #28\n   0x7ff78a8488 &lt;#UserApp_main_2777513159257922988+440&gt;    stur    x17, [x29, #-96]\n   0x7ff78a848c &lt;#UserApp_main_2777513159257922988+444&gt;    stur    x17, [x29, #-88]\n   0x7ff78a8490 &lt;#UserApp_main_2777513159257922988+448&gt;    ldur    x8, [x29, #-104]\n  &gt;0x7ff78a8494 &lt;#UserApp_main_2777513159257922988+452&gt;    stur    x8, [x16, #48]\n   0x7ff78a8498 &lt;#UserApp_main_2777513159257922988+456&gt;    ldur    x8, [x29, #-96]\n   0x7ff78a849c &lt;#UserApp_main_2777513159257922988+460&gt;    stur    x8, [x16, #56]\n   0x7ff78a84a0 &lt;#UserApp_main_2777513159257922988+464&gt;    ldur    x8, [x29, #-88]\n   0x7ff78a84a4 &lt;#UserApp_main_2777513159257922988+468&gt;    stur    x8, [x16, #64]\n   0x7ff78a84a8 &lt;#UserApp_main_2777513159257922988+472&gt;    stur    x16, [x29, #-128]\n</code></pre></div>\n<p>this could be a general register allocation bug, or maybe it's something specific to the literals</p>",
        "id": 395579651,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1696802893
    },
    {
        "content": "<p>got it (2 bugs actuallly), so now</p>\n<div class=\"codehilite\"><pre><span></span><code>------------\n     Summary [ 816.378s] 902 tests run: 902 passed (1 slow), 7 skipped\n</code></pre></div>\n<p>it works on my machine!</p>",
        "id": 395699169,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1696857931
    },
    {
        "content": "<p>wooooo!!!</p>",
        "id": 395707461,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1696860497
    },
    {
        "content": "<p>does that mean it can be activated for the repl? <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span></p>",
        "id": 395707505,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1696860511
    },
    {
        "content": "<p>(on aarch64)</p>",
        "id": 395707562,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1696860521
    },
    {
        "content": "<p>almost? this fails on CI</p>\n<div class=\"codehilite\"><pre><span></span><code>------------\n     Summary [ 142.098s] 314 tests run: 313 passed, 1 failed, 595 skipped\n     SIGABRT [   1.484s] test_gen::test_gen gen_tags::recursive_tag_id_in_allocation_eq\nerror: test run failed\n</code></pre></div>\n<p>but it works on the pi so needs some debugging on an M1/M2 still I think</p>",
        "id": 395715843,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1696862971
    },
    {
        "content": "<p>nvm it does trigger these valgrind warnings</p>\n<div class=\"codehilite\"><pre><span></span><code>test gen_tags::recursive_tag_id_in_allocation_eq has been running for over 60 seconds\n==73198== Thread 2 gen_tags::recur:\n==73198== Invalid write of size 8\n==73198==    at 0x7747ED0: #UserApp_x_8352987475006511248 (in /tmp/.tmpuIFUPW/app.so.1.0)\n==73198==  Address 0x69cb0a0 is 0 bytes after a block of size 16 alloc&#39;d\n==73198==    at 0x4849E4C: malloc (vg_replace_malloc.c:307)\n==73198==    by 0x775E8EB: roc_builtins.utils.allocate_with_refcount (in /tmp/.tmpuIFUPW/app.so.1.0)\n==73198==\n==73198== Invalid read of size 1\n==73198==    at 0x7748278: #UserApp_#help0_Eq_InLayout(25)_1 (in /tmp/.tmpuIFUPW/app.so.1.0)\n==73198==  Address 0x69cb0a0 is 0 bytes after a block of size 16 alloc&#39;d\n==73198==    at 0x4849E4C: malloc (vg_replace_malloc.c:307)\n==73198==    by 0x775E8EB: roc_builtins.utils.allocate_with_refcount (in /tmp/.tmpuIFUPW/app.so.1.0)\n==73198==\n==73198== Invalid read of size 1\n==73198==    at 0x774827C: #UserApp_#help0_Eq_InLayout(25)_1 (in /tmp/.tmpuIFUPW/app.so.1.0)\n==73198==  Address 0x69d63a0 is 0 bytes after a block of size 16 alloc&#39;d\n==73198==    at 0x4849E4C: malloc (vg_replace_malloc.c:307)\n==73198==    by 0x775E8EB: roc_builtins.utils.allocate_with_refcount (in /tmp/.tmpuIFUPW/app.so.1.0)\n==73198==\n==73198== Invalid read of size 1\n==73198==    at 0x77484A4: #UserApp_#help1_Dec_InLayout(25)_1 (in /tmp/.tmpuIFUPW/app.so.1.0)\n==73198==  Address 0x69d63a0 is 0 bytes after a block of size 16 alloc&#39;d\n==73198==    at 0x4849E4C: malloc (vg_replace_malloc.c:307)\n==73198==    by 0x775E8EB: roc_builtins.utils.allocate_with_refcount (in /tmp/.tmpuIFUPW/app.so.1.0)\n==73198==\n==73198== Invalid write of size 8\n==73198==    at 0x77481F0: #UserApp_y_8352987475006511248 (in /tmp/.tmpuIFUPW/app.so.1.0)\n==73198==  Address 0x6a10b60 is 0 bytes after a block of size 16 alloc&#39;d\n==73198==    at 0x4849E4C: malloc (vg_replace_malloc.c:307)\n==73198==    by 0x775E8EB: roc_builtins.utils.allocate_with_refcount (in /tmp/.tmpuIFUPW/app.so.1.0)\n==73198==\n\n\n==73198== Invalid read of size 1\n==73198==    at 0x7748268: #UserApp_#help0_Eq_InLayout(25)_1 (in /tmp/.tmpU2tUPy/app.so.1.0)\n==73198==  Address 0x505b090 is 0 bytes after a block of size 16 alloc&#39;d\n==73198==    at 0x4849E4C: malloc (vg_replace_malloc.c:307)\n==73198==    by 0x775E91B: roc_builtins.utils.allocate_with_refcount (in /tmp/.tmpU2tUPy/app.so.1.0)\n==73198==\n==73198== Invalid read of size 1\n==73198==    at 0x774826C: #UserApp_#help0_Eq_InLayout(25)_1 (in /tmp/.tmpU2tUPy/app.so.1.0)\n==73198==  Address 0x50c8170 is 0 bytes after a block of size 16 alloc&#39;d\n==73198==    at 0x4849E4C: malloc (vg_replace_malloc.c:307)\n==73198==    by 0x775E91B: roc_builtins.utils.allocate_with_refcount (in /tmp/.tmpU2tUPy/app.so.1.0)\n==73198==\n==73198== Invalid read of size 1\n==73198==    at 0x77484D4: #UserApp_#help1_Dec_InLayout(25)_1 (in /tmp/.tmpU2tUPy/app.so.1.0)\n==73198==  Address 0x50c8170 is 0 bytes after a block of size 16 alloc&#39;d\n==73198==    at 0x4849E4C: malloc (vg_replace_malloc.c:307)\n==73198==    by 0x775E91B: roc_builtins.utils.allocate_with_refcount (in /tmp/.tmpU2tUPy/app.so.1.0)\n==73198==\n</code></pre></div>",
        "id": 395720438,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1696864349
    },
    {
        "content": "<p>fixed it (turns out it was an issue on x86 too). I expect <a href=\"https://github.com/roc-lang/roc/pull/5839\">https://github.com/roc-lang/roc/pull/5839</a> to pass now</p>",
        "id": 395734102,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1696869343
    },
    {
        "content": "<p>also I can run the repl on the pi no problem, which based on the source code will use the dev backend already</p>\n<div class=\"codehilite\"><pre><span></span><code>    #[cfg(not(target_os = &quot;linux&quot;))]\n    let (lib, main_fn_name, subs, layout_interner) =\n        mono_module_to_dylib_llvm(&amp;arena, target, loaded, opt_level)\n            .expect(&quot;we produce a valid Dylib&quot;);\n\n    #[cfg(target_os = &quot;linux&quot;)]\n    let (lib, main_fn_name, subs, layout_interner) =\n        mono_module_to_dylib_asm(&amp;arena, target, loaded, opt_level)\n            .expect(&quot;we produce a valid Dylib&quot;);\n</code></pre></div>",
        "id": 395736209,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1696870245
    },
    {
        "content": "<p>so someone on an M1/M2 can just try that I guess</p>",
        "id": 395736257,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1696870265
    },
    {
        "content": "<p>Yeah, works on m1</p>",
        "id": 395740376,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1696872315
    },
    {
        "content": "<p>The REPL running on AArch64 dev backend (M1)! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span>  </p>\n<p><a href=\"/user_uploads/22008/UZ3b8YT_u12QU_etS_Vm8S1J/CleanShot-2023-10-09-at-14.44.472x.png\">CleanShot-2023-10-09-at-14.44.472x.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/UZ3b8YT_u12QU_etS_Vm8S1J/CleanShot-2023-10-09-at-14.44.472x.png\" title=\"CleanShot-2023-10-09-at-14.44.472x.png\"><img src=\"/user_uploads/22008/UZ3b8YT_u12QU_etS_Vm8S1J/CleanShot-2023-10-09-at-14.44.472x.png\"></a></div>",
        "id": 395742590,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1696873544
    },
    {
        "content": "<p>ci passed on the PR now</p>",
        "id": 395745293,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1696875173
    },
    {
        "content": "<p>With my M2 mac on <code>beed1e3d6ea093f3cbc6281b04c655449ff88109</code> I get the following for <code>cargo nextest-gen-dev --no-fail-fast</code></p>\n<div class=\"codehilite\"><pre><span></span><code>Summary [ 574.116s] 902 tests run: 900 passed (2 slow), 2 failed, 7 skipped\n        FAIL [   0.164s] test_gen::test_gen gen_list::list_ends_with_empty\n        FAIL [   0.163s] test_gen::test_gen gen_list::list_starts_with_empty\n</code></pre></div>\n<p>So close !! <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>",
        "id": 395757973,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1696882518
    },
    {
        "content": "<p><del>Actually... this might be a nix issue on my part, I'll re-run</del> Looks like we still have a couple to go</p>",
        "id": 395758141,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1696882638
    },
    {
        "content": "<p>a hunch, in <code>crates/compiler/gen_dev/src/generic64/mod.rs</code> can you uncomment the and here</p>\n<div class=\"codehilite\"><pre><span></span><code>    fn build_not(&amp;mut self, dst: &amp;Symbol, src: &amp;Symbol, arg_layout: &amp;InLayout&lt;&#39;a&gt;) {\n        match self.interner().get_repr(*arg_layout) {\n            LayoutRepr::BOOL =&gt; {\n                let dst_reg = self.storage_manager.claim_general_reg(&amp;mut self.buf, dst);\n                let src_reg = self.storage_manager.load_to_general_reg(&amp;mut self.buf, src);\n\n                ASM::mov_reg64_imm64(&amp;mut self.buf, dst_reg, 1);\n                ASM::xor_reg64_reg64_reg64(&amp;mut self.buf, src_reg, src_reg, dst_reg);\n\n                // we may need to mask out other bits in the end? but a boolean should be 0 or 1.\n                // if that invariant is upheld, this mask should not be required\n                // ASM::and_reg64_reg64_reg64(&amp;mut self.buf, src_reg, src_reg, dst_reg);\n\n                ASM::mov_reg64_reg64(&amp;mut self.buf, dst_reg, src_reg);\n            }\n            x =&gt; todo!(&quot;Not: layout, {:?}&quot;, x),\n        }\n    }\n</code></pre></div>",
        "id": 395766286,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1696887762
    },
    {
        "content": "<p>valgrind is ok with it at least so I'm not sure what else to do</p>",
        "id": 395766387,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1696887846
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>admin@raspberrypi ~/roc (aarch-records)&gt; valgrind --track-origins=yes target/debug/deps/test_gen-f2c946b9d248f5c7 list_ends_with_empty\n==89204== Memcheck, a memory error detector\n==89204== Copyright (C) 2002-2017, and GNU GPL&#39;d, by Julian Seward et al.\n==89204== Using Valgrind-3.16.1 and LibVEX; rerun with -h for copyright info\n==89204== Command: target/debug/deps/test_gen-f2c946b9d248f5c7 list_ends_with_empty\n==89204==\n\nrunning 1 test\ntest gen_list::list_ends_with_empty has been running for over 60 seconds\ntest gen_list::list_ends_with_empty ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 785 filtered out; finished in 342.49s\n\n==89204==\n==89204== HEAP SUMMARY:\n==89204==     in use at exit: 3,746,224 bytes in 17,229 blocks\n==89204==   total heap usage: 437,310 allocs, 420,081 frees, 264,614,202 bytes allocated\n==89204==\n==89204== LEAK SUMMARY:\n==89204==    definitely lost: 3,271,420 bytes in 15,096 blocks\n==89204==    indirectly lost: 182,040 bytes in 21 blocks\n==89204==      possibly lost: 119,592 bytes in 7 blocks\n==89204==    still reachable: 173,172 bytes in 2,105 blocks\n==89204==         suppressed: 0 bytes in 0 blocks\n==89204== Rerun with --leak-check=full to see details of leaked memory\n==89204==\n==89204== For lists of detected and suppressed errors, rerun with: -s\n==89204== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n</code></pre></div>",
        "id": 395766397,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1696887866
    },
    {
        "content": "<p>but it may be that we need to task the boolean, which uncommenting that line should do. (I'm assuming the result of the test is an empty list?)</p>",
        "id": 395766460,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1696887920
    },
    {
        "content": "<p>I can look at this again later this evening around <time datetime=\"2023-10-10T08:00:00Z\">2023-10-10T19:00:00+11:00</time></p>",
        "id": 395767458,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1696888491
    },
    {
        "content": "<p>I'm pretty busy today so I probably won't have time to debug this properly but at least in my machine this fails at link time:</p>\n<div class=\"codehilite\"><pre><span></span><code>--- STDERR:              test_gen::test_gen gen_list::list_ends_with_empty ---\nld: invalid r_symbolnum=32 in &#39;/private/tmp/nix-shell.yttg98/.tmpnHbSn5/app.o&#39;\n</code></pre></div>",
        "id": 395769286,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1696889570
    },
    {
        "content": "<p>a thought: there might be some sort of \"enable more debug info\" environment variable for the linker that could help here</p>",
        "id": 395769601,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1696889736
    },
    {
        "content": "<p>Will try that. I'll post an objdump too, there's something weird with a reloc.</p>",
        "id": 395769761,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1696889881
    },
    {
        "content": "<p><a href=\"https://gist.github.com/agu-z/554090ab7c5ed5c6e83bd8b170af7e74#file-list_ends_with_empty-s-L582-L583\">https://gist.github.com/agu-z/554090ab7c5ed5c6e83bd8b170af7e74#file-list_ends_with_empty-s-L582-L583</a></p>",
        "id": 395770412,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1696890278
    },
    {
        "content": "<p>That looks interesting to me. That symbol (<code>_#UserApp_#help0_Eq_InLayout(VOID)_1</code>) only shows up in the reloc and not as a label.</p>",
        "id": 395770459,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1696890328
    },
    {
        "content": "<p>Hm. It looks like we also have it for Linux, though:</p>\n<div class=\"codehilite\"><pre><span></span><code> 100:   94000000    bl  0 &lt;#UserApp_#help0_Eq_InLayout(23)_1&gt;\n            100: R_AARCH64_CALL26   #UserApp_#help0_Eq_InLayout(VOID)_1\n</code></pre></div>",
        "id": 395772055,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1696891692
    },
    {
        "content": "<p><code>ld</code> with <code>-v</code> just printed some more irrelevant info</p>",
        "id": 395772365,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1696891963
    },
    {
        "content": "<p>well-spotted! indeed, we don't generate that function. On linux that is apparently fine because the function call is never reached</p>",
        "id": 395867294,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1696939266
    },
    {
        "content": "<p>but macos does not let you get away with that (arguably the better approach)</p>",
        "id": 395867342,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1696939285
    },
    {
        "content": "<p><code>Summary [  46.667s] 136 tests run: 136 passed, 2 skipped</code> REPL tests using aarch64 dev backend (using some changes that Folkert will add soon)</p>",
        "id": 395868649,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1696939711
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/pull/5897\">https://github.com/roc-lang/roc/pull/5897</a> enables all tests on apple silicon, and should pass</p>",
        "id": 395872611,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1696941002
    },
    {
        "content": "<p>It did! <span aria-label=\"partying face\" class=\"emoji emoji-1f973\" role=\"img\" title=\"partying face\">:partying_face:</span> </p>\n<div class=\"codehilite\"><pre><span></span><code>Summary [ 309.074s] 903 tests run: 903 passed, 6 skipped\n</code></pre></div>",
        "id": 395900741,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1696949359
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281543\">Folkert de Vries</span> <a href=\"#narrow/stream/395097-compiler-development/topic/AArch64.20dev.20backend/near/395867342\">said</a>:</p>\n<blockquote>\n<p>but macos does not let you get away with that (arguably the better approach)</p>\n</blockquote>\n<p>Agreed. What a bad error message, though. These lower-level macOS tools leave much to be desired <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 395901087,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1696949468
    }
]