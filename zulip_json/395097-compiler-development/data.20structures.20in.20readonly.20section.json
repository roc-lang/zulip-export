[
    {
        "content": "<p>let's say I have a top-level <code>foo : List (List Str)</code> that's a giant literal, and we want to compile that entire thing to be stored in the readonly section of the binary</p>",
        "id": 375003636,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1689268123
    },
    {
        "content": "<p>how do the internal pointers in there work? are there relocations or something?</p>",
        "id": 375003768,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1689268147
    },
    {
        "content": "<p>basically I'm trying to get a sense for:</p>\n<ol>\n<li>what bytes does the compiler need to emit to the binary?</li>\n<li>where in the binary do they need to be emitted?</li>\n<li>is there extra metadata that needs to get emitted somewhere else in the binary?</li>\n</ol>",
        "id": 375003944,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1689268187
    },
    {
        "content": "<p>Yeah, relocation for each</p>",
        "id": 375004740,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1689268369
    },
    {
        "content": "<p>Basically the relocation tells the loader to add the segment offset once loaded in memory to the pointer</p>",
        "id": 375004899,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1689268414
    },
    {
        "content": "<p>Requires adding them to the dynamic relocation list</p>",
        "id": 375004950,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1689268435
    },
    {
        "content": "<p>Also, shouldn't matter if it is top level or not. Either way we would probably want to generate this structure.</p>",
        "id": 375005596,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1689268579
    },
    {
        "content": "<p>What is the general thought or goal?</p>",
        "id": 375005731,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1689268614
    },
    {
        "content": "<p>Side note: this is the main case that the surgical linker doesn't support because it is annoying and adds a lot more binary shifting</p>",
        "id": 375005916,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1689268656
    },
    {
        "content": "<p>I'm thinking about how canonicalization's data structures should change in order to make it cache-able</p>",
        "id": 375006527,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1689268785
    },
    {
        "content": "<p>and one of the things that occurred to me is that when we're translating (for example) strings into the final format that will end up in the binary (e.g. replacing <code>\\n</code> in the strings actual newline bytes), we should probably just cut to the chase and store it in the format that the actual binary wants</p>",
        "id": 375006940,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1689268857
    },
    {
        "content": "<p>so when we're reading it out of cache, we can just copy the bytes over as directly as possible</p>",
        "id": 375006989,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1689268868
    },
    {
        "content": "<p>and same for lists, nested lists, etc.</p>",
        "id": 375007010,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1689268873
    },
    {
        "content": "<p>For the pointers, you won't know the correct offsets yet. So I don't think you can do much.</p>",
        "id": 375007296,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1689268937
    },
    {
        "content": "<p>ah interesting</p>",
        "id": 375007454,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1689268981
    },
    {
        "content": "<p>so the offsets have to be based on how big the final header in the binary ends up being I guess?</p>",
        "id": 375007527,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1689268997
    },
    {
        "content": "<p>I need to double check the exact anchor point, but it is an absolute value dependent on where the final pointee lands in the binary.</p>",
        "id": 375008848,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1689269252
    },
    {
        "content": "<p>One thing I am a bit confused by with your goals, if using llvm, we don't control the relocations and such. So I'm not exactly sure what level you are trying to plan and work at.</p>",
        "id": 375011704,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1689269901
    },
    {
        "content": "<p>I'm just trying to figure out what representation we want to cache</p>",
        "id": 375011896,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1689269941
    },
    {
        "content": "<p>like what bytes to put on disk, so they're maximally useful when we read them back again because the file was cached</p>",
        "id": 375011995,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1689269960
    },
    {
        "content": "<p>I see</p>",
        "id": 375012824,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1689270126
    },
    {
        "content": "<p>Yeah, I mean could definitely dump relative offset based Bytes and then patch just the relative offset. As needed when continuing the build pipeline. Would be similar to catching in object files</p>",
        "id": 375013110,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1689270208
    },
    {
        "content": "<p>that makes sense! <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 375015168,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1689270647
    },
    {
        "content": "<p>I guess we could cache where the relative offsets are, to make them easier to patch</p>",
        "id": 375015218,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1689270662
    }
]