[
    {
        "content": "<p>so Folkert and I were talking about the neverending source of bugs and safety that is trying to correctly implement the C ABI for host-exposed functions, and we ended up deciding to make this change:</p>\n<ul>\n<li>the new way host-exposed functions work is that they all accept exactly two pointers (and \"return\" nothing)</li>\n<li>one pointer points to the return value</li>\n<li>the other pointer points to all the arguments, which should be stored as a struct</li>\n<li>the caller allocates space for both of these on its stack</li>\n<li>the caller populates the arguments struct</li>\n<li>after the host-exposed function completes, it will write into the return struct (just like the <code>_generic</code> version does today)</li>\n</ul>",
        "id": 397000383,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1697503355
    },
    {
        "content": "<p>this means that the amount of time we spend messing around with C ABI problems immediately goes to zero and stays there</p>",
        "id": 397000418,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1697503373
    },
    {
        "content": "<p>the downside is that it's some amount less efficient than using the C ABI</p>",
        "id": 397000445,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1697503391
    },
    {
        "content": "<p>given the (very small) magnitude of that performance delta, and the (very large) magnitude of the (implementation cost + bugs everyone has to deal with until we sort them out) delta, maybe someday it will seem like a reasonable project to implement the whole C ABI, but for now this seems like a better tradeoff all around</p>",
        "id": 397000665,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1697503499
    },
    {
        "content": "<p>oh, and of course glue can take care of generating these calls anyway, and wrap them in something that looks appropriate for the native host language</p>",
        "id": 397000765,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1697503557
    },
    {
        "content": "<p>I know I am thinking at least medium term here, but once we get the async state machine where everything is returned via main, won't a lot of this pain go away. No more arbitrary function calling. Just one single tag union return from main.</p>",
        "id": 397017395,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1697513387
    },
    {
        "content": "<p>Also, this idea is probably mostly ok if the data is stack allocated. Given io is a boundary it probably isn't called \"too\" much.</p>",
        "id": 397017497,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1697513436
    },
    {
        "content": "<p>Plus will probably help unlock new platforms, and more language glue wrappers faster, which is a huge boon</p>",
        "id": 397017540,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1697513473
    },
    {
        "content": "<p>I know this is a little off-topic, and may be obvious... but if I have something like a <code>List U8</code> in the return struct does it need to have a predetermined size? Or would I simply give it an initialised empty list (like now), and roc_alloc would assign more memory if needed? </p>\n<p>Does this decision help with the unknown size problem that was not yet resolved?</p>",
        "id": 397034636,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1697522848
    },
    {
        "content": "<p>I'm essentially certain the caller would just allocate the size of the list pointer, size, and capacity. It would not care about any of the actual data in the list or its size. So you would just give the roc function 24 bytes of stack space. Roc would allocate the list and fill in those 24 bytes. After that, the host can access the list.</p>",
        "id": 397038238,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1697524700
    },
    {
        "content": "<p>I don't think you should even initialize the list. Just give it uninitialized bytes for roc to store the initialized list in later.</p>",
        "id": 397038317,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1697524749
    }
]