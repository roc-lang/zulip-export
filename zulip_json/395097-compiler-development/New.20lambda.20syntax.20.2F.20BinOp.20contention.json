[
    {
        "content": "<p>The new lambda syntax <code>|_| ...</code> has an issue</p>\n<p>When parsing a term, we had to peek before trying to parse this to make sure we don't try to consume the <code>||</code> and <code>|&gt;</code> operators as part of the lambda args.  That was fine.</p>\n<p>But now, because of the way we parse exprs due to WSA, we kind of just eat all of the possible exprs in a series and then figure it out later.  This includes those same BinOps, which are looked at first in that case.  This causes a new lambda in a \"statement\" position to fail to parse if after another expression.</p>",
        "id": 494028963,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736980274
    },
    {
        "content": "<p>Obviously bad that we did not have a test case that caught this</p>",
        "id": 494029346,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736980461
    },
    {
        "content": "<p>So thank you for the Fuzzer, <span class=\"user-mention\" data-user-id=\"453336\">@Joshua Warner</span> !</p>",
        "id": 494029372,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736980486
    },
    {
        "content": "<p>FWIW the fuzzer existed before I joined, but was much much noisier than it is today. I can’t take all the credit.</p>",
        "id": 494029461,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736980548
    },
    {
        "content": "<p>It seems sensible to me to just disallow a lambda directly in statement position, at least for now</p>",
        "id": 494029641,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736980648
    },
    {
        "content": "<p>Actually that’ll make returning a function annoying</p>",
        "id": 494029668,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736980670
    },
    {
        "content": "<p>Hmm</p>",
        "id": 494029674,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736980674
    },
    {
        "content": "<p>Should have foreseen this…</p>",
        "id": 494029891,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736980782
    },
    {
        "content": "<p>I just don't understand why it tries to parse this as an op when it doesn't meet the min_indent to continue the preceding statement</p>",
        "id": 494030038,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736980854
    },
    {
        "content": "<p>Isn't that the whole point of WSS?</p>",
        "id": 494030090,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736980884
    },
    {
        "content": "<p>That was an intentional choice to support pizza ops that didn’t have an extra indent</p>",
        "id": 494030119,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736980907
    },
    {
        "content": "<p>We could make that rule specific to pizza</p>",
        "id": 494030208,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736980947
    },
    {
        "content": "<p>Could we - if we have less than the minimum indent check for lambda before binop?</p>",
        "id": 494030217,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736980954
    },
    {
        "content": "<p>I don’t quite follow that</p>",
        "id": 494030279,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736980991
    },
    {
        "content": "<p>Hold on a sec.  I'm working on it</p>",
        "id": 494030877,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736981303
    },
    {
        "content": "<p>Can't really do it.  It's happening in parse_stmt_operator_chain, which returns a single statement, but I would either have to backtrack a LOT, or return multiple statements</p>",
        "id": 494034952,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736983379
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453336\">Joshua Warner</span> <a href=\"#narrow/stream/395097-compiler-development/topic/New.20lambda.20syntax.20.2F.20BinOp.20contention/near/494029461\">said</a>:</p>\n<blockquote>\n<p>FWIW the fuzzer existed before I joined, but was much much noisier than it is today. I can’t take all the credit.</p>\n</blockquote>\n<p>I think I set up the initial fuzzer, but it was left unloved and unrun for a long time.</p>",
        "id": 494039230,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736985844
    },
    {
        "content": "<p>does this concern still apply in our new PNC parser?</p>",
        "id": 499282285,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739379169
    },
    {
        "content": "<p>would be nice to have <code>and</code> and <code>or</code> available in userspace DSLs for e.g. SQL</p>",
        "id": 499282394,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739379206
    },
    {
        "content": "<p>Technically, no</p>",
        "id": 499282806,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739379327
    },
    {
        "content": "<p>I think it’s potentially confusing still</p>",
        "id": 499282865,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739379343
    },
    {
        "content": "<p>fair!</p>",
        "id": 499284266,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739379727
    },
    {
        "content": "<p>although if this works unambiguously, we could parse it and give a warning like \"in Roc we use <code>and</code> instead of <code>&amp;&amp;</code>\" and have the formatter fix it for you</p>",
        "id": 499285198,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739379975
    }
]