[
    {
        "content": "<p>I wrote a gdb script that prints assembly instructions between two breakpoints in order of execution, it also prints the value of registers used in that line. I found it a lot easier to review assembly like this vs having to jump around and execute commands all the time, so I wanted to share it with all of you :)</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"c1\"># start breakpoint</span>\n<span class=\"n\">br</span> <span class=\"c1\">#UserApp_main_f03bf86f79d121cbfd774dec4a65912e99f5f17c33852bbc45e81916e62b53b</span>\n\n<span class=\"n\">run</span>\n\n<span class=\"c1\"># start python script</span>\n<span class=\"n\">python</span>\n\n<span class=\"c1\"># end \"breakpoint\"</span>\n<span class=\"n\">STOP_INSTRUCTION_ADDR</span> <span class=\"o\">=</span> <span class=\"mh\">0x0000555555579cfc</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">re</span>\n\n<span class=\"n\">old_fun</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"</span>\n\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"gdb_py_output.txt\"</span><span class=\"p\">,</span> <span class=\"s2\">\"w\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">output_file</span><span class=\"p\">:</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">print_register</span><span class=\"p\">(</span><span class=\"n\">register_name</span><span class=\"p\">):</span>\n        <span class=\"n\">reg_value_parts</span> <span class=\"o\">=</span> <span class=\"n\">gdb</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"info register </span><span class=\"si\">{</span><span class=\"n\">register_name</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"n\">to_string</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()</span>\n        <span class=\"n\">reg_value_decimal</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">reg_value_parts</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n\n        <span class=\"k\">if</span> <span class=\"o\">-</span><span class=\"mi\">10</span> <span class=\"o\">&lt;</span> <span class=\"n\">reg_value_decimal</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">:</span>\n            <span class=\"n\">output_file</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"                                        |</span><span class=\"si\">{</span><span class=\"n\">reg_value_parts</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\"> = </span><span class=\"si\">{</span><span class=\"n\">reg_value_decimal</span><span class=\"si\">}</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">output_file</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"                                        |</span><span class=\"si\">{</span><span class=\"n\">reg_value_parts</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\"> = </span><span class=\"si\">{</span><span class=\"n\">reg_value_parts</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\"> (</span><span class=\"si\">{</span><span class=\"n\">reg_value_decimal</span><span class=\"si\">}</span><span class=\"s2\">)</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">asm_instruction</span> <span class=\"o\">=</span> <span class=\"n\">gdb</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">\"x/i $pc\"</span><span class=\"p\">,</span> <span class=\"n\">to_string</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">':'</span><span class=\"p\">)[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span>\n\n        <span class=\"n\">frame</span> <span class=\"o\">=</span> <span class=\"n\">gdb</span><span class=\"o\">.</span><span class=\"n\">selected_frame</span><span class=\"p\">()</span>\n\n        <span class=\"n\">instruction_address</span> <span class=\"o\">=</span> <span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">pc</span><span class=\"p\">()</span>\n\n        <span class=\"n\">fun_name</span> <span class=\"o\">=</span> <span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">function</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">name</span>\n\n        <span class=\"c1\"># cut off alphanum garbage</span>\n        <span class=\"n\">clean_fun</span> <span class=\"o\">=</span> <span class=\"s1\">'_'</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">fun_name</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">'_'</span><span class=\"p\">)[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">clean_fun</span> <span class=\"o\">==</span> <span class=\"n\">old_fun</span><span class=\"p\">:</span>\n            <span class=\"n\">clean_fun</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">output_file</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">----------</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n            <span class=\"n\">old_fun</span> <span class=\"o\">=</span> <span class=\"n\">clean_fun</span>\n\n        <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">asm_instruction</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">','</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"n\">non_target_args</span> <span class=\"o\">=</span> <span class=\"s2\">\" \"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">::])</span>\n\n            <span class=\"k\">for</span> <span class=\"n\">match</span> <span class=\"ow\">in</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">finditer</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'\\b(x[0-9]+|w[0-9]+)\\b'</span><span class=\"p\">,</span> <span class=\"n\">non_target_args</span><span class=\"p\">):</span>\n                <span class=\"n\">print_register</span><span class=\"p\">(</span><span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">())</span>\n\n\n        <span class=\"n\">output_file</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">instruction_address</span><span class=\"si\">:</span><span class=\"s2\">#x</span><span class=\"si\">}</span><span class=\"s2\">: </span><span class=\"si\">{</span><span class=\"n\">clean_fun</span><span class=\"si\">:</span><span class=\"s2\">&lt;23</span><span class=\"si\">}</span><span class=\"s2\"> </span><span class=\"si\">{</span><span class=\"n\">asm_instruction</span><span class=\"si\">}</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n        <span class=\"c1\">#output_file.write(f\"{clean_fun:&lt;23} {asm_instruction}\\n\")</span>\n\n        <span class=\"n\">gdb</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">\"stepi\"</span><span class=\"p\">,</span> <span class=\"n\">to_string</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Regex to extract the target register from the assembly instruction.</span>\n        <span class=\"c1\"># This regex assumes ARM architecture based on the provided instructions.</span>\n        <span class=\"n\">reg_match</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'\\b(x[0-9]+|w[0-9]+)\\b'</span><span class=\"p\">,</span> <span class=\"n\">asm_instruction</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">reg_match</span><span class=\"p\">:</span>\n            <span class=\"n\">target_reg</span> <span class=\"o\">=</span> <span class=\"n\">reg_match</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"c1\"># Count the number of arguments to ensure there are two or more.</span>\n            <span class=\"n\">num_args</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">asm_instruction</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">','</span><span class=\"p\">))</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">num_args</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n                <span class=\"n\">print_register</span><span class=\"p\">(</span><span class=\"n\">target_reg</span><span class=\"p\">)</span>\n\n        <span class=\"n\">output_file</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">gdb</span><span class=\"o\">.</span><span class=\"n\">selected_frame</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">pc</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">STOP_INSTRUCTION_ADDR</span><span class=\"p\">:</span>\n            <span class=\"k\">break</span>\n<span class=\"c1\"># end python script</span>\n<span class=\"n\">end</span>\n\n<span class=\"n\">quit</span>\n</code></pre></div>\n<p>Example output:</p>\n<div class=\"codehilite\"><pre><span></span><code>----------\n                                        |x0 = 3\n0x555555579c7c: #UserApp_diffSelf       mov     x4, x0\n                                        |x4 = 3\n\n                                        |x1 = 0\n0x555555579c80:                         mov     x6, x1\n                                        |x6 = 0\n\n                                        |x4 = 3\n0x555555579c84:                         mov     x0, x4\n                                        |x0 = 3\n\n                                        |x6 = 0\n0x555555579c88:                         mov     x2, x6\n                                        |x2 = 0\n\n0x555555579c8c:                         b       0x555555579eb0 &lt;Num_sub_ec2bd03bf86b935fa34d71ad7ebb49f1f10f87d343e521511d8f9e6625620cd&gt;\n\n\n----------\n0x555555579eb0: Num_sub                 sub     sp, sp, #0x20\n\n0x555555579eb4:                         str     x30, [sp, #16]\n                                        |x30 = 0x555555579e18 (93824992386584)\n\n                                        |x1 = 0\n0x555555579eb8:                         mov     x8, x1\n                                        |x8 = 0\n\n                                        |x0 = 3\n                                        |x2 = 0\n0x555555579ebc:                         subs    x1, x0, x2\n                                        |x1 = 3\n\n                                        |x8 = 0\n                                        |x3 = 0\n0x555555579ec0:                         sbcs    x0, x8, x3\n                                        |x0 = 0\n\n0x555555579ec4:                         mov     w8, wzr\n                                        |w8 = 0\n\n                                        |w8 = 0\n0x555555579ec8:                         csinc   w8, w8, wzr, cs // cs = hs, nlast\n                                        |w8 = 0\n\n0x555555579ecc:                         str     x1, [sp]\n                                        |x1 = 3\n</code></pre></div>",
        "id": 424422545,
        "sender_full_name": "Anton",
        "timestamp": 1709394968
    },
    {
        "content": "<p>whoa, super cool!</p>",
        "id": 424424948,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1709396838
    },
    {
        "content": "<p>Super cool, but also really sad that it is so much extra effort to give a better interface to gdb. I almost want to use windows to try things like remmedybg that seem to have figured out how to do nice debugger interfaces (though that still may not work well with our super limited debug info)</p>",
        "id": 424425131,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1709397005
    },
    {
        "content": "<p>remmedybg does look nice! Seems like it gets all the important stuff right</p>",
        "id": 424427444,
        "sender_full_name": "Anton",
        "timestamp": 1709398947
    }
]