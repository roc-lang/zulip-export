[
    {
        "content": "<p>Hi there! I've picked up <a href=\"https://github.com/roc-lang/roc/issues/6551\">this issue</a> related to implementing a new <code>Sort</code> ability for comparisons between types.</p>\n<p>One conclusion from <a href=\"#narrow/stream/304641-ideas/topic/ordering.2Fsorting.20ability/near/395539545\">earlier discussion</a> is that <code>Sort</code> should not be implemented by <code>Str</code>, because it would be ambiguous, and another in the issue is that it's fine to initially not have it for <code>F32</code> and <code>F64</code> either (similar to <code>Eq</code>). That all makes sense!</p>\n<p>Got a couple of other questions that I could use some guidance on:</p>\n<ul>\n<li>Do we want auto-derived <code>Sort</code> for arbitrary types, similar to <code>Eq</code>?</li>\n<li>Should <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code> work using <code>Sort</code>?</li>\n<li>Which module would we like <code>Sort</code> to live in? A new one? <code>List</code>?</li>\n</ul>",
        "id": 430592022,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1711977716
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"477725\">Jasper Woudenberg</span> <a href=\"#narrow/stream/395097-compiler-development/topic/Sort.20ability.20implementation/near/430592022\">said</a>:</p>\n<blockquote>\n<p>Do we want auto-derived <code>Sort</code> for arbitrary types, similar to <code>Eq</code>?</p>\n</blockquote>\n<p>yes!</p>\n<blockquote>\n<p>Should <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code> work using <code>Sort</code>?</p>\n</blockquote>\n<p>I don't think so - I think they should continue to use <code>Num</code>. It's always seemed like a footgun to me that in many languages I can write <code>\"chair\" &lt; \"hamburger\"</code> and have the type checker accept it. I think it's best if that's a mismatch! <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> </p>\n<blockquote>\n<p>Which module would we like <code>Sort</code> to live in? A new one? <code>List</code>?</p>\n</blockquote>\n<p>let's put it in <code>List</code> for now and see how that feels <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 430595685,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1711979491
    },
    {
        "content": "<p>Isn't <code>\"chair\" &lt; \"hamburger\"</code> only a problem cause string sorting is ambiguous?</p>",
        "id": 430603131,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711982340
    },
    {
        "content": "<p>it's not just a problem of \"what's the answer\" it's also a problem of \"this is not code that should be written this way on purpose\" <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 430604567,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1711982812
    },
    {
        "content": "<p>but it can of course absolutely be written this way by mistake</p>",
        "id": 430604634,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1711982837
    },
    {
        "content": "<p>so the combination of \"shouldn't be written this way on purpose\" and \"the compiler can tell you when you've written it this way, in case you've made a mistake\" leads me to the preference of wanting it to be a compiler error</p>",
        "id": 430604712,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1711982868
    }
]