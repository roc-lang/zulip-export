[
    {
        "content": "<p>Currently, whenever the Roc compiler compiles a Zig host, it looks for the <code>glue.zig</code> package in the compiler builtin's source code folder to link into the final binary. Since we want glue plugins to output a Roc std library package along with the customized glue (like what Rust glue does today), I imagine this behavior can be removed in favor of that?</p>",
        "id": 483870873,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1732268117
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span></p>",
        "id": 483872636,
        "sender_full_name": "Anton",
        "timestamp": 1732268707
    },
    {
        "content": "<p>Yeah it's gone in the llvm upgrade branch. We have talked about a roc_std like zig package, but havent made that yet. </p>\n<p>First step is to land the zig and llvm upgrade.</p>",
        "id": 483874523,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732269319
    },
    {
        "content": "<p>So for zig 0.13.0 etc you can make a package and then use a .zig.zon file.</p>",
        "id": 483874752,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732269390
    },
    {
        "content": "<p>Actually, you probably need this package for your work? Even something minimal would be helpful right? </p>\n<p>Maybe it's worth making a branch off from the llvm upgrade one, and starting on this zig package using zig 13.</p>",
        "id": 483875363,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732269586
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/channel/395097-compiler-development/topic/remove.20glue.2Ezig.3F/near/483875363\">said</a>:</p>\n<blockquote>\n<p>Actually, you probably need this package for your work? Even something minimal would be helpful right? </p>\n</blockquote>\n<p>Yeah exactly!</p>",
        "id": 483879389,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1732270912
    },
    {
        "content": "<p>I'm a bit rusty with git still, would it be possible to merge the changes from the <code>llvm-upgrade</code> branch into my fork's <code>zig-glue</code> branch?</p>",
        "id": 483879516,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1732270954
    },
    {
        "content": "<p>Yes, locally in the terminal, while you're on the zig-glue branch, execute <code>git fetch</code> followed by <code>git pull origin upgrade-llvm-zig</code></p>",
        "id": 483881255,
        "sender_full_name": "Anton",
        "timestamp": 1732271594
    },
    {
        "content": "<p>If it just had RocResult, RocStr, and RocList would that be enough? </p>\n<p>I might he able to scrape something together... but not super confident in the refcounting side of things or small strings.</p>",
        "id": 483883048,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732272223
    },
    {
        "content": "<p>Oh that's okay! I was planning on adapting the builtins into a proper roc_std, like this comment in <code>glue.zig</code> suggests:</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"c1\">// This is a glue package that just re-exports other libs useful for zig hosts.</span>\n<span class=\"c1\">// Long term, a slimmed down version of these libraries without all of the roc builtins should be create via `roc glue`.</span>\n<span class=\"c1\">// We also should make RocList use comptime types in order to make it nice to use in zig.</span>\n\n<span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">dec</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">@import</span><span class=\"p\">(</span><span class=\"s\">\"dec.zig\"</span><span class=\"p\">);</span>\n<span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">@import</span><span class=\"p\">(</span><span class=\"s\">\"list.zig\"</span><span class=\"p\">);</span>\n<span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">str</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">@import</span><span class=\"p\">(</span><span class=\"s\">\"str.zig\"</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>Since all the functionality's already there, cleaning it up into a <code>roc_std</code> for platform use sounds doable for me. I just wanted to confirm that I could start replacing <code>glue.zig</code> with it, or if there was a reason it still needed to be there!</p>",
        "id": 483889619,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1732274630
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/channel/395097-compiler-development/topic/remove.20glue.2Ezig.3F/near/483881255\">said</a>:</p>\n<blockquote>\n<p>Yes, locally in the terminal, while you're on the zig-glue branch, execute <code>git fetch</code> followed by <code>git pull origin upgrade-llvm-zig</code></p>\n</blockquote>\n<p>thanks! I'll try that</p>",
        "id": 483889746,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1732274662
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>$ git pull origin upgrade-llvm-zig\nfatal: couldn&#39;t find remote ref upgrade-llvm-zig\n</code></pre></div>",
        "id": 483890014,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1732274772
    },
    {
        "content": "<p>I'm guessing it didn't work because I'm on a fork of the repo? <span class=\"user-mention\" data-user-id=\"361169\">@Anton</span></p>",
        "id": 483890127,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1732274826
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/395097-compiler-development/topic/remove.20glue.2Ezig.3F/near/483883048\">said</a>:</p>\n<blockquote>\n<p>If it just had RocResult, RocStr, and RocList would that be enough? </p>\n<p>I might he able to scrape something together... but not super confident in the refcounting side of things or small strings.</p>\n</blockquote>\n<p>Would it be possible to change RocStr to use a given allocator? The current implementation uses roc_alloc implicit. This is not a good style for a zig package.</p>\n<p>If you want, I can help you with the implementation. Since I wrote the Go implementation, I think I know all the tweaks with Str and List</p>",
        "id": 483890160,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1732274840
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"496321\">Oskar Hahn</span> <a href=\"#narrow/channel/395097-compiler-development/topic/remove.20glue.2Ezig.3F/near/483890160\">said</a>:</p>\n<blockquote>\n<p>Would it be possible to change RocStr to use a given allocator? The current implementation uses roc_alloc implicit. This is not a good style for a zig package.</p>\n</blockquote>\n<p>I believe it has to use <code>roc_alloc</code>, because Roc would need to be able to free any values passed to it</p>",
        "id": 483890765,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1732275066
    },
    {
        "content": "<p>Thanks for the offer! I'll want to try it myself first (I'm doing this for a school internship and would like to be able to show that I was able to do this!), I'll let you know if I run into any issues! :)</p>",
        "id": 483891256,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1732275232
    },
    {
        "content": "<blockquote>\n<p>I'm guessing it didn't work because I'm on a fork of the repo? <span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span></p>\n</blockquote>\n<p>Riiight, this should do it:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>steps</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<ol>\n<li>First, check if your remote is configured correctly:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>git<span class=\"w\"> </span>remote<span class=\"w\"> </span>-v\n</code></pre></div>\n<ol start=\"2\">\n<li>If the branch exists in the upstream repo (the one you forked from), you'll need to:</li>\n</ol>\n<p>a. Add the upstream repo as a remote if you haven't already:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>git<span class=\"w\"> </span>remote<span class=\"w\"> </span>add<span class=\"w\"> </span>upstream<span class=\"w\"> </span>&lt;original_repo_url&gt;\n</code></pre></div>\n<p>b. Then fetch from upstream:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>git<span class=\"w\"> </span>fetch<span class=\"w\"> </span>upstream\n</code></pre></div>\n<p>c. Finally, pull the branch:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>git<span class=\"w\"> </span>pull<span class=\"w\"> </span>upstream<span class=\"w\"> </span>upgrade-llvm-zig\n</code></pre></div>\n<p>If you're not sure about the exact name of the branch, you can list all remote branches:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>git<span class=\"w\"> </span>ls-remote<span class=\"w\"> </span>upstream\n</code></pre></div>\n</div></div>",
        "id": 483898009,
        "sender_full_name": "Anton",
        "timestamp": 1732277743
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"496321\">@Oskar Hahn</span> left some helpful comments in Issues <a href=\"https://github.com/lukewilliamboswell/roc-platform-template-zig/issues\">https://github.com/lukewilliamboswell/roc-platform-template-zig/issues</a> for the zig template. </p>\n<p>Thinking about this more, it might be easiest to make the package in that repo just as a starting point (until llvm upgrade PR lands). We can upgrade the zig template to use zig 0.13.0 by copying the builtins from the branch, and then convert that into a zig package. </p>\n<p>When we generate glue for zig using <code>ZigGlue.roc</code> it can use the zig package.</p>",
        "id": 483998200,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732312859
    },
    {
        "content": "<p>I figured it'd be easier to work in the Roc repo, as I just finished setting up end-to-end tests for Zig platforms there</p>",
        "id": 484473021,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1732614925
    },
    {
        "content": "<p>Or do I misunderstand</p>",
        "id": 484473045,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1732614930
    }
]