[
    {
        "content": "<p>For testing in the new compiler, I want to take a few lessons from both the current snapshot testing system in test_syntax, as well as making a similar system applicable across the rest of the compiler passes. I also want to take more inspiration from llvm <code>lit</code> tests and the zig compiler tests.</p>\n<p>My thinking is each test should be in a single file, with the output of passes (e.g. the ast) simply concatenated on the end of each test. You'd have the test source, then <code>####</code> (or some other separator), then the formatted version of that source, then a separator, then a pretty-printed form of the AST, then the canonicalized ir, etc. This is in contrast to the current snapshot tests, where the formatted code and the ast are in separate files from the input. I also want to include any problems directly into the file. This should hopefully minimize needing to swap back and forth between </p>\n<p>In contrast to the current <code>test_syntax</code> tests which heavily test the parser and formatter but generally aren't semantically valid, I'd like to focus more on having most tests ending up making it all the way thru the compiler. In cases we don't want this, we can include a system of directives at the top of the test in order to control what parts of the compiler we run, and which passes we include the output of.</p>\n<p>Also in contrast to the current <code>test_syntax</code> system, adding a new test shouldn't require recompiling. This necessarily means these tests will use a custom test harness - probably just a separate binary compiled from a different main file in the source tree.</p>\n<p>Inspired by the zig compiler, we can have a syntax for specifying the contents of multiple test files as part of the same test case.</p>\n<p>Here's a quick example:</p>\n<div class=\"codehilite\"><pre><span></span><code>#### Mode: expression # &lt;-- this directive will cause us to parse and compile the input as if it was a repl input\n&quot;test&quot;.length()\n#### Formatted: (same)\n#### AST:\n(pnc_call (str &quot;test&quot;) (ident &quot;length&quot;)())\n#### Can IR:\n&lt;tbd&gt;\n#### etc etc\n</code></pre></div>\n<p>Thoughts?</p>",
        "id": 498046429,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738824052
    },
    {
        "content": "<p>I think it is also important to be able to start part way down the stack. I should be able to make a small Can IR and simply run the resolve step with nothing else. Or run the interpreter theoretically.</p>",
        "id": 498046916,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738824297
    },
    {
        "content": "<p>That does imply we have not just a \"debug dump\" functionality for each IR, but also the ability to _parse_ that IR</p>",
        "id": 498046987,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738824333
    },
    {
        "content": "<p>Agreed that's valuable tho</p>",
        "id": 498047004,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738824349
    },
    {
        "content": "<p>I think this is one of the best features of MLIR.</p>",
        "id": 498047042,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738824364
    },
    {
        "content": "<p>Really helps with testing during development</p>",
        "id": 498047073,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738824372
    },
    {
        "content": "<p>That said, can get messy at scale.</p>",
        "id": 498047095,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738824386
    },
    {
        "content": "<p>I don't think we necessarily need this for every IR, but at least the IRs around complex passes.</p>",
        "id": 498047138,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738824408
    },
    {
        "content": "<p>Often times, that makes a much more concise and understandable test than starting all the way at the top level IR.</p>",
        "id": 498047184,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738824438
    },
    {
        "content": "<p>That said, I am simply used to doing that for pass level unit tests at this point. That same could be done in pure zig if generating IR is simple enough</p>",
        "id": 498047369,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738824516
    },
    {
        "content": "<p>I think in the rust compiler generating IR is so painful that it makes unit testing passes less likely to happen and more painful</p>",
        "id": 498047436,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738824543
    },
    {
        "content": "<p>If generating a zig ast is trivial, we could consider doing that for pass level tests instead of snapshots.</p>",
        "id": 498047546,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738824587
    },
    {
        "content": "<p>What do you mean by \"generating a zig ast\"?</p>",
        "id": 498047777,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738824666
    },
    {
        "content": "<p>Oh, one other thought:</p>\n<p>With <code>lit</code> and <code>FileCheck</code>, you can choose to ignore 90% of an ir and just check something very specific. Sometimes that is really useful for making tests more understandable (focuses on what is expected to change instead of printing the entire IR). Not sure that is the right choice a lot of the time though. Well it reduces verbosity, it can often miss bugs, so <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 498047925,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738824730
    },
    {
        "content": "<p>Ahhh I should read up on that</p>",
        "id": 498047998,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738824773
    },
    {
        "content": "<blockquote>\n<p>What do you mean by \"generating a zig ast\"?</p>\n</blockquote>\n<p>If generating a Parse/Can/Resolve/etc IR ast directly in zig code is easy enough, then maybe that is enough for unit testing. If it is verbose or painful at all to generate said IR, I definitely think we want parsing at all levels.</p>",
        "id": 498048038,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738824789
    },
    {
        "content": "<p>Ahhh. My somewhat naive prediction is that'll end up being more verbose than will be ergonomic for doing lots of unit tests.</p>",
        "id": 498048177,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738824844
    },
    {
        "content": "<p>Maybe there are zig tricks I don't know tho?</p>",
        "id": 498048208,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738824862
    },
    {
        "content": "<p>Yeah, that is my exact same thought and question</p>",
        "id": 498048220,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738824875
    },
    {
        "content": "<p>So I bet we will want a parser for the various IRs</p>",
        "id": 498048239,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738824889
    },
    {
        "content": "<p>It will make them way more testable</p>",
        "id": 498048250,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738824896
    },
    {
        "content": "<p>As a side note, we totally could just directly use lit and file check assuming we have a flag or special executable that simply prints out the IRs. (not saying it is worth it, just noting)</p>\n<p>and this is filecheck, really simple: <a href=\"https://llvm.org/docs/CommandGuide/FileCheck.html\">https://llvm.org/docs/CommandGuide/FileCheck.html</a></p>",
        "id": 498048261,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738824901
    },
    {
        "content": "<p>I had just assumed it would be a folder for each test, with a different file containing each IR. But I guess a single file may be easier?</p>",
        "id": 498061944,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1738830405
    },
    {
        "content": "<p>I’m not active on these forums (only lurking) but I’d like to break the silence and share an advice. If you start creating IR tests then it will make refactoring much harder because you will have to change an insane amount of (test) code every time you change the IR or try to rearrange passes. Unless you feel that you can see the future and it is not a real issue, I really really recommend not doing this and instead focus solely on end to end tests. An end to end test suite is much more valuable than a set of IR tests. This would help with alternative compiler implementations or various large scale refactors where otherwise you’d have to throw out or migrate a lot of test code.</p>",
        "id": 498129424,
        "sender_full_name": "László Benedek",
        "timestamp": 1738851009
    },
    {
        "content": "<p>Yep, they will change pretty often - and that’s why an important part of this will be automated tooling to update the checked in snapshots as necessary. (I didn’t mention that above, but it’s already part of the test_syntax snapshots)</p>",
        "id": 498149197,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738856009
    },
    {
        "content": "<blockquote>\n<p>If you start creating IR tests then it will make refactoring much harder because you will have to change an insane amount of (test) code every time you change the IR or try to rearrange passes.</p>\n</blockquote>\n<p>I pretty strongly disagree with this overall premise. While end to end tests are fundamental for a compiler like this, even a handful of mediocre pass level tests often are quite valuable. E2E tests are often painful to debug. If something can be caught by a pass level test, it saves tons of times. On top of that, testing the core pillars of various transformations can help make them a lot more robust (bonus if you can fuzz and arbitrary pass). Yes, it is more work, but it is super important work to make a robust compiler and I have seen this kind of work save tons of time.</p>\n<blockquote>\n<p>Unless you feel that you can see the future and it is not a real issue, I really really recommend not doing this and instead focus solely on end to end tests.</p>\n</blockquote>\n<p>This is a second rewrite of the compiler so we do have very strong understanding of the passes and ordering. I'm sure we'll shift some around, but that's ok.</p>\n<blockquote>\n<p>An end to end test suite is much more valuable than a set of IR tests. This would help with alternative compiler implementations or various large scale refactors where otherwise you’d have to throw out or migrate a lot of test code.</p>\n</blockquote>\n<p>The same can always be said of unit tests. It doesn't matter if it is a compiler, webserver, app, game, etc. Yet, the industry has for the most part realized that unit tests lead to better software despite needing to be thrown away or rewritten when software changes.</p>\n<p>I think trying to focus solely on end to end tests would be a big mistake and a way to fundamentally make our compiler more brittle and harder to debug.</p>\n<hr>\n<p>As I mentioned above after working with mlir for years, one of its pieces of magic is simply that every ir can be printed and parsed. This enables spinning up tons of pass level unit tests. It makes way more robust software, is more observalble and debuggable.</p>",
        "id": 498165559,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738860252
    },
    {
        "content": "<p>Aside for <span class=\"user-mention\" data-user-id=\"453336\">@Joshua Warner</span>: another reason to enable pass by pass snapshot tests is cause most of the functionally can be tested without seeing the monster updates of full compiler snapshot tests. So adding a feature to the parser won't affect the can ir to resolve ir snapshot tests at all. But adding said feature if you only have these e2e test will affect all tests. Just makes it harder to validate what changed. (Still need the E2E tests, but maybe not as many)</p>",
        "id": 498166429,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738860506
    },
    {
        "content": "<p>One thing about forcing tests to start as real roc code that at least sounds good on the surface to me, is that forces us never have ambiguity about, \"yeah but that state of the IR is not something the previous pass would ever generate so why are we trying to handle this\". If there's a test, then it's unambiguously possible to hit that part of the state space. Combine that with good fuzzing that hopefully reaches fairly deep into the compiler (far from proven!), and you can maybe have the best of both worlds.</p>",
        "id": 498212000,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1738876716
    },
    {
        "content": "<p>Yeah, I think that is great for larger examples. I think for smaller features and simple algorithm tests, the snippets are much nicer.</p>",
        "id": 498220795,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738880264
    },
    {
        "content": "<p>That said, the golden standard is for every ir to have a verifier for what is valid or not</p>",
        "id": 498220830,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738880280
    },
    {
        "content": "<p>And if every ir has a parser and verifier, you can start fuzzing at any point in the compiler and stop at any point. Which should enable much better fuzzing exploration</p>",
        "id": 498220950,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738880328
    },
    {
        "content": "<p>Not to mention the fuzzer can break if any invariant to broken at any or level</p>",
        "id": 498220993,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738880350
    },
    {
        "content": "<p>Though obviously correct by construction IRs see the best.</p>",
        "id": 498221032,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738880367
    },
    {
        "content": "<p>Not sure how well this can apply to your use case but it works perfectly well for me in Zine: <a href=\"https://kristoff.it/blog/dead-simple-snapshot-testing/\">https://kristoff.it/blog/dead-simple-snapshot-testing/</a> (bonus mention of 2 snapshot testing frameworks for Zig in the post)</p>",
        "id": 498796111,
        "sender_full_name": "Loris Cro",
        "timestamp": 1739202146
    },
    {
        "content": "<p>Oh nice, that looks like a great strategy!</p>",
        "id": 498798084,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1739202581
    },
    {
        "content": "<p>I started looking at function lifting, and it's going to be much easier to write tests for the build stages like that once we have IR dumping and parsing in place. Did anyone have specific ideas about how this should be implemented? Is the idea to manually write a sexpr printer and parser for each IR?</p>",
        "id": 499810153,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1739560287
    },
    {
        "content": "<p>I think at least a printer</p>",
        "id": 499810410,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739560378
    },
    {
        "content": "<p>If we implement the phases roughly in order, we can just have Roc source go in, and each S-expr printer come out, we glue everything together, and check that the file has the expected content</p>",
        "id": 499810928,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739560577
    },
    {
        "content": "<p>If we want to be able to work on the later stages of the compiler before everything else is implemented I think we'll need to write parsers also. Manually writing the IR for the previous stage seems prohibitively tedious</p>",
        "id": 499812401,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1739561161
    },
    {
        "content": "<p>Yeah, I was running into the exact same thing when starting to look at function solving. For that stage though, it uses the function lift IR. <span class=\"user-mention\" data-user-id=\"611722\">@Isaac Van Doren</span> any way I can help out in writing the parsers/printers?</p>",
        "id": 499884462,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1739597860
    },
    {
        "content": "<p>I'd say it would be helpful to take the IR in <code>src/build/lift_functions/IR.zig</code> and have a go at building a pretty printer / S-expression thing for it</p>",
        "id": 499884806,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739598200
    },
    {
        "content": "<p>I have come up with a method for making snapshots in <a href=\"https://github.com/roc-lang/roc/pull/7608\">https://github.com/roc-lang/roc/pull/7608</a> which it <em>very</em> preliminary... but I figure we are in an exploratory phase so may as well just try things.</p>",
        "id": 499884884,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739598261
    },
    {
        "content": "<p>I've found Claude is able to write slabs of code at once, and I can iterate pretty quickly with ideas.</p>",
        "id": 499884898,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739598295
    },
    {
        "content": "<p>Not sure this is a good way to do it, but in my struct for the UnificationTable I added a field and then a <code>debugLog</code> fn which writes to a file.</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"n\">debug_capture</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">fs</span><span class=\"p\">.</span><span class=\"n\">File</span><span class=\"p\">.</span><span class=\"n\">Writer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">null</span><span class=\"p\">,</span>\n\n<span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">debugLog</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">UnificationTable</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kr\">comptime</span><span class=\"w\"> </span><span class=\"n\">fmt</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">anytype</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">builtin</span><span class=\"p\">.</span><span class=\"n\">is_test</span><span class=\"w\"> </span><span class=\"k\">and</span><span class=\"w\"> </span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">debug_capture</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"kc\">null</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">debug_capture</span><span class=\"p\">.</span><span class=\"o\">?</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">fmt</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">catch</span><span class=\"w\"> </span><span class=\"k\">unreachable</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>The I use it in tests like this.</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"c1\">// create a snapshot file</span>\n<span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">fs</span><span class=\"p\">.</span><span class=\"n\">cwd</span><span class=\"p\">().</span><span class=\"n\">createFile</span><span class=\"p\">(</span><span class=\"s\">\"src/types/snapshots/unification_table_descriptor_modification.txt\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.{});</span>\n<span class=\"w\">    </span><span class=\"k\">defer</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"p\">.</span><span class=\"n\">close</span><span class=\"p\">();</span>\n\n<span class=\"kr\">var</span><span class=\"w\"> </span><span class=\"n\">table</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"n\">UnificationTable</span><span class=\"p\">.</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">testing</span><span class=\"p\">.</span><span class=\"n\">allocator</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">);</span>\n<span class=\"k\">defer</span><span class=\"w\"> </span><span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">deinit</span><span class=\"p\">();</span>\n\n<span class=\"c1\">// give the file to our struct</span>\n<span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">debug_capture</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"p\">.</span><span class=\"n\">writer</span><span class=\"p\">();</span>\n\n<span class=\"c1\">// write something to the file</span>\n<span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">debugLog</span><span class=\"p\">(</span><span class=\"s\">\"INFO: Modify descriptor change Mark from {} to {}</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.{</span><span class=\"w\"> </span><span class=\"n\">Mark</span><span class=\"p\">.</span><span class=\"n\">NONE</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Mark</span><span class=\"p\">.</span><span class=\"n\">OCCURS</span><span class=\"w\"> </span><span class=\"p\">});</span>\n\n<span class=\"c1\">// internal methods to the UnificationTable also use</span>\n<span class=\"c1\">// self.debugLog to write to the file...</span>\n</code></pre></div>",
        "id": 499885233,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739598640
    },
    {
        "content": "<p>That's an interesting pattern! If this works for the typecheck tests, we can try applying it elsewhere</p>",
        "id": 499885583,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739599033
    },
    {
        "content": "<p>I'm sure there is a better way to do it... not sure if zig has interfaces or anything yet. Still a zig noob</p>",
        "id": 499885803,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1739599220
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"341568\">Jared Ramirez</span> <a href=\"#narrow/channel/395097-compiler-development/topic/zig.20compiler.20-.20snapshot.20testing/near/499884462\">said</a>:</p>\n<blockquote>\n<p>Yeah, I was running into the exact same thing when starting to look at function solving. For that stage though, it uses the function lift IR. <span class=\"user-mention silent\" data-user-id=\"611722\">Isaac Van Doren</span> any way I can help out in writing the parsers/printers?</p>\n</blockquote>\n<p>I'm not sure if there's a great way for us to work concurrently on this, but I'd be happy to pair!</p>",
        "id": 499950674,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1739653686
    },
    {
        "content": "<p>I think it would be ideal to store the snapshots as multiline strings directly in the test source. Then you can see exactly what each test is doing in one place without having to deal with any extra files. We can use the <code>@src</code> builtin to accomplish this. Described in this blog post <a href=\"https://tigerbeetle.com/blog/2024-05-14-snapshot-testing-for-the-masses/\">https://tigerbeetle.com/blog/2024-05-14-snapshot-testing-for-the-masses/</a></p>",
        "id": 499950743,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1739653775
    },
    {
        "content": "<p>I don't think that will scale for roc</p>",
        "id": 499951547,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739654555
    },
    {
        "content": "<p>We have way way too many cases and they work best as individual files</p>",
        "id": 499951556,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739654570
    },
    {
        "content": "<p>Otherwise, parse.zig would be 10000 lines of snapshots of the ast.</p>",
        "id": 499951580,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739654595
    },
    {
        "content": "<p>So I think the git and file based solution is definitely the way to go</p>",
        "id": 499951588,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739654609
    },
    {
        "content": "<p>Especially since roc files are naturally files anyway</p>",
        "id": 499951617,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739654640
    },
    {
        "content": "<p>I do like <span class=\"user-mention\" data-user-id=\"453336\">@Joshua Warner</span>'s idea to put section headers ina. Single file so you can scroll through the various IRs. Instead of each or being its own file</p>",
        "id": 499951685,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739654677
    },
    {
        "content": "<p>Yeah that's fair</p>",
        "id": 499952259,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1739655243
    },
    {
        "content": "<p>Looks like snapshot EXPECTED handling is now broken in a couple different ways:</p>\n<ol>\n<li>In several snapshots, we have lines in PROBLEMS that begin with <code># </code> (comments extracted from roc code in a snippet) - and the <code>extractSection</code> logic doesn't handle that properly. Indeed, I think we'll need to adjust the format a bit if we want that to work properly in all cases.</li>\n<li>The <code>repl</code> snapshots now re-use the EXPECTED section to mean something different, but <code>zig build update-expected</code> doesn't aware of that and (un)helpfully puts the extracted problems into the EXPECTED section, thereby breaking the tests.</li>\n</ol>",
        "id": 529744990,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1753066953
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> IIRC you were wanting to keep the update-expected functionality separate from snapshot.zig - can you say more about that?</p>",
        "id": 529745025,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1753067007
    },
    {
        "content": "<p>I think neither of these bugs would have happened if the updated-expected logic (and the verification test) were better integrated with the snapshot code.</p>",
        "id": 529745053,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1753067036
    },
    {
        "content": "<p>ah damn</p>",
        "id": 529745086,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1753067080
    },
    {
        "content": "<p>I didn't think of <code>update-expected</code></p>",
        "id": 529745089,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1753067084
    },
    {
        "content": "<p>so for repl snapshots, what I really want to confirm hasn't regressed is the repl output as a whole, which includes both diagnostic reports <em>and</em> the output values</p>",
        "id": 529745173,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1753067193
    },
    {
        "content": "<p>I don't really care about the distinction between like \"here are the problems that were reported\" and \"here was the repl output\" because at the end of the day I'm going to see both in the repl anyway, so it seemed reasonable to combine them</p>",
        "id": 529745185,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1753067209
    },
    {
        "content": "<p>(although actually I'm not sure if the problems are included in that repl snapshot output right yet)</p>",
        "id": 529745204,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1753067229
    },
    {
        "content": "<p>They're not</p>",
        "id": 529745206,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1753067237
    },
    {
        "content": "<p>so it seemed like at the time having that replace <code>EXPECTED</code> made sense</p>",
        "id": 529745211,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1753067242
    },
    {
        "content": "<p>but maybe they should just have their own separate snapshot format?</p>",
        "id": 529745218,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1753067253
    },
    {
        "content": "<p>Why not have an <code>OUTPUT</code> section?</p>",
        "id": 529745238,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1753067280
    },
    {
        "content": "<p>only for repl snapshots?</p>",
        "id": 529745263,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1753067321
    },
    {
        "content": "<p>that would work - would it be clear that that's the <em>expected</em> output?</p>",
        "id": 529745271,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1753067333
    },
    {
        "content": "<blockquote>\n<p>only for repl snapshots?</p>\n</blockquote>\n<p>For the moment; but in the future I don't know why we couldn't/wouldn't  expand that to exprs and full file snapshots</p>",
        "id": 529745296,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1753067362
    },
    {
        "content": "<blockquote>\n<p>would it be clear that that's the <em>expected</em> output</p>\n</blockquote>\n<p>We can just _not_ update it unless a flag is passed</p>",
        "id": 529745331,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1753067417
    },
    {
        "content": "<p><code>--update-output</code> or something</p>",
        "id": 529745336,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1753067424
    },
    {
        "content": "<p>And if that flag isn't passed, we can print a warning about some outputs having changed</p>",
        "id": 529745354,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1753067446
    },
    {
        "content": "<p>(Or even error out I suppose)</p>",
        "id": 529745384,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1753067489
    },
    {
        "content": "<p>Side note: for the expected problems, I kinda want to switch to a \"lit\"-style test, with problems noted in comments</p>",
        "id": 529745451,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1753067571
    },
    {
        "content": "<p>e.g.</p>\n<div class=\"codehilite\"><pre><span></span><code>foo(bar) # EXPECTED: IDENTIFIER NOT DEFINED\n</code></pre></div>\n<p>(or whatever the error message would be)</p>",
        "id": 529745490,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1753067623
    },
    {
        "content": "<p>gotcha, the output changes sound fine to me! <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 529746305,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1753068602
    },
    {
        "content": "<p>Made those changes as part of a somewhat more significant reorganization of the logic here: <a href=\"https://github.com/roc-lang/roc/pull/8089\">https://github.com/roc-lang/roc/pull/8089</a></p>",
        "id": 529941162,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1753120873
    },
    {
        "content": "<p>The other stuff going on there is centralizing all the snapshot logic to go thru the same snapshot generation functions to hopefully prevent this sort of issue cropping up again in the future</p>",
        "id": 529941341,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1753120934
    },
    {
        "content": "<p>Now instead of <code>zig build update-expected</code>, you do <code>zig build snapshot -- --update-expected</code>. There's also <code>--check-expected</code>, <code>--update-output</code>, and <code>--check-output</code>.</p>",
        "id": 529941458,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1753120975
    },
    {
        "content": "<p>There's still a test that does the validation of snapshots (without doing updates), and that now lives in snapshot.zig, calling the same snapshot generation/collection code but disabling the output.</p>",
        "id": 529942318,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1753121265
    },
    {
        "content": "<p>I'm not fully satisfied with the current workflow/interface; suggestions welcome!</p>",
        "id": 529942930,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1753121512
    }
]