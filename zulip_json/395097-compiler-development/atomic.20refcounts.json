[
    {
        "content": "<p>Hi all,</p>\n<p>One thing <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> and I talked about a bit ago was turning on atomic refcounts by default in the new compiler (would be configured by the platform header in the long term). This is the easiest way to allow for more complex use cases like multithreading and data sharing.</p>\n<p>Modern CPUs are getting pretty fast at uncontested atomic refcounts. Still more costly than a normal refcount, but not by much. In a well written program, this likely will have minimal impact (we also have a few ideas to speed it up if it becomes a problem). Really the main foot gun is deeply recursive tags like cons lists (which already have horribly performance due to being a ton of pointer chasing).</p>\n<p>In the name of starting simple and correct, atomics seem like the way to go.</p>\n<hr>\n<p>For this thread, my core question is, should we enable atomic refcounts in the old compiler? It would enable some platform exploration. For example, adding background threads to basic webserver or basic CLI. It also, might give us an early signal if anyone notices a big perf drop.</p>",
        "id": 508313621,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743003701
    },
    {
        "content": "<p>I say go for itâ€™</p>",
        "id": 508321953,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1743005264
    },
    {
        "content": "<p>!</p>",
        "id": 508321960,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1743005266
    },
    {
        "content": "<p>All atomic all the time PR: <a href=\"https://github.com/roc-lang/roc/pull/7718\">https://github.com/roc-lang/roc/pull/7718</a></p>",
        "id": 508576275,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743095484
    }
]