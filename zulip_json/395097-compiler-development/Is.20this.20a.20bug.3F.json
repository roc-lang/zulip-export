[
    {
        "content": "<p>Spinoff from <a class=\"stream-topic\" data-stream-id=\"231634\" href=\"/#narrow/stream/231634-beginners/topic/combining.20open.20unions\">#beginners &gt; combining open unions</a>, is the following a bug?</p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"nc\">Test</span>\n<span class=\"w\">    </span><span class=\"n\">exposes</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n<span class=\"w\">    </span><span class=\"n\">imports</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n\n<span class=\"n\">generateOpenOkStr</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Str</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"nc\">Str</span><span class=\"p\">]</span><span class=\"o\">*</span>\n<span class=\"n\">generateOpenOkStr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"n\">s</span>\n\n<span class=\"n\">restrictsToClosed</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"nc\">Str</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Bool</span>\n<span class=\"n\">restrictsToClosed</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"nc\">Str</span><span class=\"o\">.</span><span class=\"n\">isEmpty</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">)</span>\n\n<span class=\"n\">expect</span>\n<span class=\"w\">    </span><span class=\"c1\"># `in` is an open tag union, returned as `[Ok Str]*`.</span>\n<span class=\"w\">    </span><span class=\"c1\"># Yet, if I type it as such, it breaks due to type mismatch</span>\n<span class=\"w\">    </span><span class=\"ow\">in</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"nc\">Str</span><span class=\"p\">]</span><span class=\"o\">*</span>\n<span class=\"w\">    </span><span class=\"ow\">in</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">generateOpenOkStr</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span>\n<span class=\"w\">    </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">restrictsToClosed</span><span class=\"w\"> </span><span class=\"ow\">in</span>\n<span class=\"w\">    </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"nc\">Bool</span><span class=\"o\">.</span><span class=\"no\">false</span>\n</code></pre></div>",
        "id": 434512394,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713627722
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>This 1st argument to restrictsToClosed has an unexpected type:\n\n18│      out = restrictsToClosed in\n                                 ^^\n\nThis in value is a:\n\n    […]*\n\nBut restrictsToClosed needs its 1st argument to be:\n\n    […]\n</code></pre></div>",
        "id": 434512554,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713627770
    },
    {
        "content": "<p>Works if <code>in : [Ok Str]*</code> is commented out.</p>",
        "id": 434512627,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713627793
    },
    {
        "content": "<p>It does work with <code>in : [Ok Str]_</code> I think it's that bug, I'll check if we have an issue for that.</p>",
        "id": 434513081,
        "sender_full_name": "Anton",
        "timestamp": 1713628050
    },
    {
        "content": "<p>No, <a href=\"https://github.com/roc-lang/roc/issues/5660\">#5660</a> is different, perhaps this is intended behavior, given that the error message states:</p>\n<div class=\"codehilite\"><pre><span></span><code>(The * means something different when the tag union is an argument to a\nfunction, though!)\n</code></pre></div>",
        "id": 434513535,
        "sender_full_name": "Anton",
        "timestamp": 1713628463
    },
    {
        "content": "<p>Yeah, it may be a proper error. That said, it definitely feels wrong as a proper error given I am returning a <code>[Ok Str]*</code> from the function.</p>",
        "id": 434513697,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713628641
    },
    {
        "content": "<p>Am I storing the return type <code>[Ok Str]*</code> or the argument type <code>[Ok Str]*</code>? Very unclear.</p>",
        "id": 434513760,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713628687
    },
    {
        "content": "<p>Whatever the case, I definitely think we need a clearer explanation here at a minimum.</p>",
        "id": 434513786,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713628731
    },
    {
        "content": "<p>I think this is a reasonable way for <code>*</code> and <code>_</code> to work. I can reproduce this behavior with <code>List *</code> and <code>List _</code> and I think it makes sense</p>\n<div class=\"codehilite\"><pre><span></span><code>constructList : List _\nconstructList =\n    empty : List _\n    empty = []\n    list1 : List _\n    list1 = List.append empty 1 # no error\n    list1\n\nconstructList2 : List *\nconstructList2 =\n    empty : List *\n    empty = []\n    list1 : List *\n    list1 = List.append empty 1 # ERROR (mismatch between Num * and *)\n    list1\n</code></pre></div>",
        "id": 434521401,
        "sender_full_name": "timotree",
        "timestamp": 1713635488
    },
    {
        "content": "<p>The mental model here is that within a top-level declaration, <code>*</code> is a placeholder instantiated by each caller and <code>_</code> is a placeholder which we get to instantiate</p>",
        "id": 434521528,
        "sender_full_name": "timotree",
        "timestamp": 1713635604
    },
    {
        "content": "<p>Any time you write <code>myLocal = myTopLevel</code> where <code>myTopLevel : MyType *</code>, you get <code>myLocal : MyType _</code>. This is exactly what it means that <code>*</code> is chosen by each caller; we are a caller of <code>myTopLevel</code>, so now we get to choose how to instantiate the <code>*</code></p>",
        "id": 434521648,
        "sender_full_name": "timotree",
        "timestamp": 1713635694
    },
    {
        "content": "<p>I agree that without function calls, that all makes sense. I think it feels the worst when returning something from a function:</p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"ss\">getEmpty</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">List</span><span class=\"w\"> </span><span class=\"o\">*</span>\n<span class=\"n\">getEmpty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n\n<span class=\"c1\"># I know why this doesn't work, but it feels like it should work.</span>\n<span class=\"c1\"># `empty` is simply specifying the exact same type as what was returned by `getEmpty`</span>\n<span class=\"n\">constructList</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">List</span><span class=\"w\"> </span><span class=\"bp\">_</span>\n<span class=\"n\">constructList</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"n\">empty</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">List</span><span class=\"w\"> </span><span class=\"o\">*</span>\n<span class=\"w\">    </span><span class=\"n\">empty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">getEmpty</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"w\">    </span><span class=\"n\">list1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nc\">List</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"w\"> </span><span class=\"n\">empty</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"c1\"># ERROR (mismatch between Num * and *)</span>\n<span class=\"w\">    </span><span class=\"n\">list1</span>\n</code></pre></div>\n<p>I wonder if it would help to have some sort of explicit input type vs return type <code>*</code>....not sure, but this definitely is confusing even if it can be logically explained.</p>",
        "id": 434521770,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713635800
    },
    {
        "content": "<p>But <code>constructList</code> can't possibly have type <code>List *</code> there, right? The list it returns always include a number</p>",
        "id": 434521815,
        "sender_full_name": "timotree",
        "timestamp": 1713635845
    },
    {
        "content": "<p>Sorry, meant <code>List _</code> or <code>List (Num *)</code> there.</p>",
        "id": 434521858,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713635871
    },
    {
        "content": "<p>What if we changed the meaning of <code>*</code> inside of type annotations for locals to mean the same thing as <code>_</code>?</p>",
        "id": 434522316,
        "sender_full_name": "timotree",
        "timestamp": 1713636209
    },
    {
        "content": "<p>I don't think that would result in any new type errors, because we can always assign <code>_</code> to <code>*</code> if needed. e.g. the following typechecks</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">takesAnyList</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"nv\">takesAnyList</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">anyList</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">underscoreList</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"nx\">_</span>\n<span class=\"w\">    </span><span class=\"nv\">underscoreList</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">anyList</span><span class=\"w\"> </span><span class=\"c1\"># no error</span>\n<span class=\"w\">    </span><span class=\"p\">{}</span>\n</code></pre></div>",
        "id": 434522439,
        "sender_full_name": "timotree",
        "timestamp": 1713636308
    },
    {
        "content": "<p>But it has the downside of losing some precision in what type annotation are expressible. You could no longer assert that a local has a type which is indeed chosen by the caller.</p>",
        "id": 434522537,
        "sender_full_name": "timotree",
        "timestamp": 1713636377
    },
    {
        "content": "<p>Ooh there is some interesting non-uniformity with how local function definitions behave here</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">myNested</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"nx\">U32</span>\n<span class=\"nv\">myNested</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">myEmpty</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"o\">*</span>\n<span class=\"w\">    </span><span class=\"nv\">myEmpty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n<span class=\"w\">    </span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">append</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">myEmpty</span><span class=\"w\"> </span><span class=\"p\">{})</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"c1\"># no error, but if we change to `myEmpty : List *` we get an error like before</span>\n</code></pre></div>",
        "id": 434522918,
        "sender_full_name": "timotree",
        "timestamp": 1713636686
    },
    {
        "content": "<p>oh actually this non-uniformity is observable even without type annotations:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">nestedPolymorphism</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"nx\">U32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"p\">)</span>\n<span class=\"nv\">nestedPolymorphism</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"c1\"># myEmpty : {} -&gt; List *</span>\n<span class=\"w\">    </span><span class=\"nv\">myEmpty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">append</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">myEmpty</span><span class=\"w\"> </span><span class=\"p\">{})</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">append</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">myEmpty</span><span class=\"w\"> </span><span class=\"p\">{})</span><span class=\"w\"> </span><span class=\"s\">\"1\"</span><span class=\"p\">)</span>\n\n<span class=\"nv\">failedPolymorhpism</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"nx\">U32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"p\">)</span>\n<span class=\"nv\">failedPolymorhpism</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"c1\"># myEmpty : List _</span>\n<span class=\"w\">    </span><span class=\"nv\">myEmpty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">append</span><span class=\"w\"> </span><span class=\"nx\">myEmpty</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">append</span><span class=\"w\"> </span><span class=\"nx\">myEmpty</span><span class=\"w\"> </span><span class=\"s\">\"1\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\"># ERROR (mismatch between Str and Num *)</span>\n</code></pre></div>\n<p>I guess local function definitions can be polymorphic but local values cannot</p>",
        "id": 434523221,
        "sender_full_name": "timotree",
        "timestamp": 1713636954
    },
    {
        "content": "<p>Yeah, requiring functions for polymorphism was something <span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> did for complexity and compile time reasons.</p>\n<p>Top levels are special to allow polymorphism. They are always turned into functions.</p>",
        "id": 434523458,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713637148
    },
    {
        "content": "<p>Oh wait, it seems like <code>*</code> in local annotations is currently completely useless, because it doesn't even specify which caller-chosen variable it's referring to</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">twoEmptyLists</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">)</span>\n<span class=\"nv\">twoEmptyLists</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">empty1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"c1\"># The two `*` in the signature are distinct variables. Which one are we referring to?</span>\n<span class=\"w\">    </span><span class=\"nv\">empty1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n<span class=\"w\">    </span><span class=\"nv\">empty2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"o\">*</span>\n<span class=\"w\">    </span><span class=\"nv\">empty2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"nx\">empty1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">empty2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\"># ERROR (mismatch between (List *, List *) and (List *, List *))</span>\n</code></pre></div>\n<p>In fact, you get the same error (albeit with a better message) even if there's only one <code>*</code> in the signature</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">myEmpty</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"o\">*</span>\n<span class=\"nv\">myEmpty</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">empty</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"o\">*</span>\n<span class=\"w\">    </span><span class=\"nv\">empty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n<span class=\"w\">    </span><span class=\"nx\">empty</span><span class=\"w\"> </span><span class=\"c1\"># ERROR</span>\n</code></pre></div>",
        "id": 434524013,
        "sender_full_name": "timotree",
        "timestamp": 1713637620
    },
    {
        "content": "<p>I think the only way to use <code>*</code> in a type annotation for a local successfully is if the enclosing function has <code>_</code>s in its type</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">myEmpty2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"nx\">_</span>\n<span class=\"nv\">myEmpty2</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">empty</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"o\">*</span>\n<span class=\"w\">    </span><span class=\"nv\">empty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n<span class=\"w\">    </span><span class=\"nx\">empty</span><span class=\"w\"> </span><span class=\"c1\"># no error</span>\n</code></pre></div>",
        "id": 434524183,
        "sender_full_name": "timotree",
        "timestamp": 1713637798
    },
    {
        "content": "<p>Yeah, so maybe the error should say \"Putting <code>*</code> in a type definition is not really useful. Consider using <code>_</code> instead.\" The only cases where <code>*</code> is really useful is for function inputs.</p>",
        "id": 434524246,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713637824
    },
    {
        "content": "<p>That may not be a totally fair statement, but I do think it is mostly accurate</p>",
        "id": 434524290,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713637879
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/395097-compiler-development/topic/Is.20this.20a.20bug.3F/near/434523458\">said</a>:</p>\n<blockquote>\n<p>Top levels are special to allow polymorphism. They are always turned into functions.</p>\n</blockquote>\n<p>Is this accurate? I just read <a href=\"https://rwx.notion.site/Let-generalization-Let-s-not-742a3ab23ff742619129dcc848a271cf#0929c77b98ab47b0be4f534d7ec4dc04\">Let-generalization: Let’s not?</a> and it seems to specify that only lambdas and numerals can be polymorphic, regardless of whether they're top-level or local. Isn't the fact that top-levels constants can't always be polymorphic exactly why we have <code>Dict.empty {}</code> instead of just <code>Dict.empty</code>?</p>",
        "id": 434535289,
        "sender_full_name": "timotree",
        "timestamp": 1713648713
    },
    {
        "content": "<p>I think the bug tracked at <a href=\"https://github.com/roc-lang/roc/issues/5536\">https://github.com/roc-lang/roc/issues/5536</a> is the same as the bug in this thread. In that example it's actually a top-level definition being annotated!</p>",
        "id": 434535386,
        "sender_full_name": "timotree",
        "timestamp": 1713648797
    },
    {
        "content": "<p>I thought we made all top levels into thunks to help with this</p>",
        "id": 434535609,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713649051
    },
    {
        "content": "<p>But I don't know all the details</p>",
        "id": 434535613,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713649056
    },
    {
        "content": "<p>only values that are syntactic functions or numbers can be polymorphic, regardless of whether they're on the toplevel or not</p>",
        "id": 434537686,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1713651196
    },
    {
        "content": "<p>And in nested contexts, only syntactic functions can be polymorphic</p>",
        "id": 434537694,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1713651210
    },
    {
        "content": "<p>To the original post, I think the program should fail to compile, but the bug is that you should not be able to type <code>in : [Ok Str]*</code>. That type doesn't make any sense in Roc, since it claims that <code>in</code> is polymorphic, but it's not.</p>",
        "id": 434537854,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1713651366
    },
    {
        "content": "<p>Thanks for the clarity</p>",
        "id": 434540477,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713654293
    },
    {
        "content": "<p>ok cool, so it sounds like the fix here is to make a new compiler error for annotations of this form, yeah?</p>",
        "id": 434541915,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713655930
    },
    {
        "content": "<p>yeah I think so. I'm kind of surprised such a check isn't already around</p>",
        "id": 434542307,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1713656350
    },
    {
        "content": "<p>I want to make an issue for this, can someone summarize in which cases an annotation containing <code>]*</code> needs to error?</p>",
        "id": 434695544,
        "sender_full_name": "Anton",
        "timestamp": 1713776781
    },
    {
        "content": "<p>If an annotation contains <code>*</code> or introduces a new type variable, the associated definition must be either a syntactic function or a number. So e.g.</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"c1\"># OK. It's a number</span>\n<span class=\"nv\">three</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Int</span><span class=\"w\"> </span><span class=\"o\">*</span>\n<span class=\"nv\">three</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span>\n\n<span class=\"c1\"># OK. It's a function</span>\n<span class=\"nv\">returnEmpty</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"o\">*</span>\n<span class=\"nx\">returnEmpty</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n\n<span class=\"c1\"># Error. It's a list literal</span>\n<span class=\"nv\">empty</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"o\">*</span>\n<span class=\"nv\">empty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n\n<span class=\"c1\"># Error. It's a tag</span>\n<span class=\"nv\">red</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">Red</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Green</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Blue</span><span class=\"p\">]</span><span class=\"o\">*</span>\n<span class=\"nv\">red</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">Red</span>\n\n<span class=\"c1\"># Error. It's a division operation</span>\n<span class=\"nv\">pi</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Frac</span><span class=\"w\"> </span><span class=\"o\">*</span>\n<span class=\"nv\">pi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">22</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"mi\">7</span>\n</code></pre></div>",
        "id": 434784298,
        "sender_full_name": "timotree",
        "timestamp": 1713800627
    },
    {
        "content": "<p><a href=\"https://rwx.notion.site/Let-generalization-Let-s-not-742a3ab23ff742619129dcc848a271cf#0929c77b98ab47b0be4f534d7ec4dc04\">Let-generalization: Let’s not?</a> has an error message we could use as a starting point for all these cases:</p>\n<blockquote>\n<p><div class=\"codehilite\"><pre><span></span><code>-- NUMBER IS NOT POLYMORPHIC --\n\nThe type annotation on `piApprox` suggests that it can be used polymorphically:\n\n1 | piApprox : Frac *\n2 | piApprox = 22 / 7\n\nUnfortunately, I can&#39;t use `piApprox` as any fractional type! I can only use it\nas exactly one of `Dec`, `F32`, or `F64`.\n\nIf you want me to infer the fractional type that should be used, you can use an\ninference annotation instead of `*`:\n\n  piApprox : Frac _\n\nIf you explicitly want `piApprox` to be able to be used polymorphically, consider\nmaking it a thunk:\n\n  piApprox : {} -&gt; Frac *\n  piApprox = \\{} -&gt; 22 / 7\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 434784944,
        "sender_full_name": "timotree",
        "timestamp": 1713800796
    },
    {
        "content": "<p>Lovely thanks <span class=\"user-mention\" data-user-id=\"636541\">@timotree</span>! I made <a href=\"https://github.com/roc-lang/roc/issues/6663\">#6663</a></p>",
        "id": 434795532,
        "sender_full_name": "Anton",
        "timestamp": 1713803628
    }
]