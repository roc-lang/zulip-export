[
    {
        "content": "<p>If any one is interested, I wrote up a short doc on property testing, fuzzing, and what might fit into roc in the future. Mostly an overview. Does not get into any sort of specific proposal with details around how it would be implemented:<br>\n<a href=\"https://docs.google.com/document/d/1FyAErWemFd24kFNhSGnqzlMQC73bgGONpDQviBpS-go/edit?usp=sharing\">https://docs.google.com/document/d/1FyAErWemFd24kFNhSGnqzlMQC73bgGONpDQviBpS-go/edit?usp=sharing</a></p>",
        "id": 418548020,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706487790
    },
    {
        "content": "<p>Comments on the doc or question/comments here all welcome.</p>",
        "id": 418548029,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706487803
    },
    {
        "content": "<p>Always been fascinated by property-based testing and contract-based programming but never had a chance to try them.</p>\n<p>It was so exciting to find a local <code>except</code> in roc! I immediately imagined how well it all may work together, and then I encountered the fuzzer repo and understood that the prop-based testing was a matter of time.</p>\n<p>Thanks for the document, canâ€™t wait to read it!</p>",
        "id": 418553552,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1706493203
    },
    {
        "content": "<p>Related to this, but I remade <a href=\"https://github.com/bhansconnect/roc-fuzz\">roc-fuzz</a> recently. It is totally a prototype right now, but it has all the core pieces for a proof of concept. If the linking wasn't such a pain, it could even be a decent platform. On macos it does seem to just work though. On linux, linking takes some magic to make c++ happy.</p>\n<p>On macos you can directly do:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>./scripts/bundle.sh\n<span class=\"nv\">ROC_LINK_FLAGS</span><span class=\"o\">=</span><span class=\"s2\">\"-lc++\"</span><span class=\"w\"> </span>roc<span class=\"w\"> </span>run<span class=\"w\">  </span>--fuzz<span class=\"w\"> </span>--optimize<span class=\"w\"> </span>--prebuilt-platform<span class=\"w\"> </span>examples/basic.roc\n</code></pre></div>\n<p>Will get an output like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>Usage: fuzz-target [--help] [--version] {fuzz,minimize,raw,reduce-corpus,show}\n\nOptional arguments:\n  -h, --help     shows help message and exits\n  -v, --version  prints version information and exits\n\nSubcommands:\n  fuzz          Run the fuzz target and attempt to find bugs.\n  minimize      Attempt to minimize a test case to the smallest possible input.\n  raw           Allows raw access to the underlying libFuzzer cli.\n  reduce-corpus Reduces the corpus size by only keeping samples that increase code coverage.\n  show          Show the crash or test case inputs.\n</code></pre></div>\n<p>All of those command just work and have reasonable defaults. They use libFuzzer to do the actual fuzzing and the data is generated the same way as <a href=\"https://github.com/rust-fuzz/cargo-fuzz\">cargo-fuzz</a> with a very similar <code>Arbitrary</code> ability implementation. It would be possible to auto derive <code>Arbitrary</code> if this was added to the compiler and it could auto generate any roc type. Not 100% sure I have everything setup correctly, but the base shell and idea is displayed pretty well.</p>",
        "id": 418560823,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706499660
    },
    {
        "content": "<p>I like the idea of <code>roc fuzz</code>! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 418562255,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1706500906
    },
    {
        "content": "<p>incidentally I think we should do our own code coverage, not rely on llvm</p>",
        "id": 418562298,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1706500924
    },
    {
        "content": "<p>we'll be able to do it way faster, and separately I'd like to have builtin code coverage tooling in some form anyway</p>",
        "id": 418562341,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1706500952
    },
    {
        "content": "<p>(faster as in runtime performance)</p>",
        "id": 418562350,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1706500964
    },
    {
        "content": "<p>one thing I'm curious about with the coverage-based generated inputs: what does the fuzzer specifically use the code coverage for?</p>",
        "id": 418562507,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1706501109
    },
    {
        "content": "<p>like are the generated inputs a function of the coverage somehow?</p>",
        "id": 418562539,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1706501152
    },
    {
        "content": "<p>as an aside, an interesting thing we could potentially do is to fuzz effects without actually running them - like automatically generate the data that comes back from the host after I/O \"happened\"</p>",
        "id": 418562628,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1706501220
    },
    {
        "content": "<blockquote>\n<p>incidentally I think we should do our own code coverage, not rely on llvm</p>\n</blockquote>\n<p>Interesting, never really thought about this much. That said, for fuzzing specifically, we may still want to implement the llvm sanitizer coverage (it is different from the the source code based line coverage). This is what Go does to have capability with outside fuzz engines if someone wants to use them.</p>",
        "id": 418567103,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706505182
    },
    {
        "content": "<blockquote>\n<p>what does the fuzzer specifically use the code coverage for?</p>\n</blockquote>\n<p>So the fuzzing uses a form of code coverage called sanitizer coverage. For the flags that I turn on in llvm, here is essentially what we get:</p>\n<ol>\n<li>Every single basic block in the entire code has a single byte counter. Every time the basic block is run the counter is incremented. (Correction: it is for every edge so it is from basic block to basic block pairs technically that get counted)</li>\n<li>The program counter for each of these basic blocks is stored in a table as well (not 100% sure what this gets used for. I think it is mostly a unique key for each fuzzing locating that the fuzz engine can refer to and use to build structures to better understand the flow of the program. In LibFuzzer it looks like they use this to log when new function have been reached by fuzzing).</li>\n<li>On every indirect call a function is first passed to the a special hook function that can record where the call is jumping to (implemented in the fuzz engine).</li>\n<li>For every single <code>cmp</code> instruction and switch statement, the values being compared are passed to a special hook function (implemented by the fuzz engine). Also, the hook function specifically notes if the value is a constant or if 2 variables are being compared. This is great for getting values to test as inputs/parts of inputs.</li>\n</ol>\n<p>Instead of simply being based on randomness, fuzzers are based on mutation of interesting inputs. Interesting inputs are inputs that explore new coverage paths.</p>\n<p>In the case of go, they don't use most of the instrumentation. They just use the basic block counters (they probably will use more in the future, but they started simple). Their process in the roughest sense is:</p>\n<ol>\n<li>Start with an input from the coordinator (old things from the corpus, seed data, or random if none exists yet)</li>\n<li>Repeatedly mutate the input for x amount of tries.</li>\n<li>If new coverage is found, pass the new input to the coordinator marking it as interesting (they also do minimization here).</li>\n<li>On test failure, report to the user.</li>\n<li>Loop to 1.</li>\n</ol>\n<p>The corpus will be regularly minimized such that it only keeps examples that lead to unique coverage paths. Also the individual examples will be minimized to the smallest examples that hit the same coverage. This helps to keep the corpus small and targeted.</p>\n<p>Overall, this leads to keeping around samples that explore more and more of the code while ignore the swaths of random examples that don't manage to explore anything interesting at all.</p>",
        "id": 418568627,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706506587
    },
    {
        "content": "<p>Oh, interesting, they also have an option to record stack depth to help understand recursive functions. So many possible things to instrument.</p>\n<p>Also, libFuzzer hooks into all of the memory copying and comparing functions so that it can use for example string comparison information to inform interesting values for fuzzing.</p>",
        "id": 418570869,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706508494
    },
    {
        "content": "<p>very cool! Yeah in principle it doesn't sound like a big change to add instructions like those to mono</p>",
        "id": 418626122,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1706531385
    },
    {
        "content": "<p>I wonder how they deal with obsolete inputs, e.g. the data has been stored but the type of the outermost function has changed, so the stored inputs don't make sense anymore</p>",
        "id": 418626873,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1706531642
    },
    {
        "content": "<p>Go's file format has type info for each piece of data. Actually makes it a lot more human readable/writable. So they probably just let the user know of the type info being incorrect for their seeds/regression tests and just toss the rest of the corpus.</p>",
        "id": 418664866,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706543000
    },
    {
        "content": "<p>Also, mono probably isn't low level enough (it doesn't encode very single basic block, just high level branches) and it misses all of the builtins.</p>",
        "id": 418665261,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706543099
    },
    {
        "content": "<p>Anyway, long term, I'm sure we can add this somewhere in the compiler pipeline in a way that doesn't depend on llvm. The exception may be the builtins, but they probably can add this information separately at compiler build time, just serialize two version of the builtins (with/without llvm coverage).</p>",
        "id": 418672245,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706544976
    },
    {
        "content": "<p>I was digging through some of <a href=\"https://afl-1.readthedocs.io/en/latest/about_afl.html#how-afl-works\">the afl fuzzer docs</a> and they give a good example of the power of fuzzing then looking at complex interfaces.</p>\n<p>This is all looking at fuzzing the <a href=\"https://www.man7.org/linux/man-pages/man1/patch.1.html\">GNU patch utility</a>. Used to apply diffs to a file.<br>\nAll of these in similar amounts of execution cycles without any seed corpus:</p>\n<ul>\n<li>Using <code>Blind fuzzing L</code> which is essentially non guided property based testing. It reached the 4 first bytes of a valid <code>-c</code> patch (265 edges of code coverage). So essentially useless in terms of what was tested cause it never generated a full valid header.</li>\n<li>Using only <code>Edge coverage</code> based fuzzing. It managed to generate an entire valid patch chunk (2,070 edges of code coverage).</li>\n<li>Using the full <code>AFL model</code> with all types of instrumentation, it was able generate 4 full valid patch chunks (2,597 edges of code coverage).</li>\n</ul>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>This is a single chunk patch -c example. Just as a reference</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\"><pre><span></span><code>*** /tmp/helloWorld.roc 2024-01-29 14:46:43.445777000 -0800\n--- examples/helloWorld.roc 2024-01-29 14:51:22.331617107 -0800\n***************\n*** 3,7 ****\n--- 3,8 ----\n      imports [pf.Stdout]\n      provides [main] to pf\n\n+ # A test change to show patch `-c` format\n  main =\n      Stdout.line &quot;Hello, World!&quot;\n</code></pre></div>\n</div></div>\n<p>Obviously for unit tests and smaller functions, the blind fuzzer would do a better relative job.</p>",
        "id": 418735613,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706568927
    },
    {
        "content": "<p>Hi! I just wanted to pop in here to say that I was partly inspired by the discussion around property based testing and fuzzing here on Zulip and on the podcast to make a project related to this. I pitched and supervised a master thesis at my workplace with the aim to trying combining fuzzing and PBT in an existing .NET application: <a href=\"https://uu.diva-portal.org/smash/record.jsf?pid=diva2%3A1981750&amp;dswid=-8206\">https://uu.diva-portal.org/smash/record.jsf?pid=diva2%3A1981750&amp;dswid=-8206</a></p>",
        "id": 536297416,
        "sender_full_name": "Johan LÃ¶vgren",
        "timestamp": 1756235385
    },
    {
        "content": "<p>It was a bit a bit of a hassle to get the fuzzing engine working in tandem with .NET. So I can only agree with you <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> that it is quite unfortunate that getting fuzzing going on an arbitrary project is quite difficult.</p>",
        "id": 536297835,
        "sender_full_name": "Johan LÃ¶vgren",
        "timestamp": 1756235579
    },
    {
        "content": "<p>Another feature/difficulty, which I personally find more interesting, is that fuzzing was great at illuminating implicit constraints. A perhaps naive hope on our side was that we could replace our handwritten generators with the fuzzing engine. This was a goal since generators are somewhat arduous to write and can inadvertently introduce our own assumptions about the data. But then of course if our code is written to e.g. work with signed integers but only works for positive integers, and that is not reflected in the type, then the fuzzing engine will quickly generate illegal input data. So a possible lesson is that fuzzing-driven PBT will require more thoughtful design of the datatypes to be fuzzed. Hopefully in a way that is not too limiting.</p>",
        "id": 536298600,
        "sender_full_name": "Johan LÃ¶vgren",
        "timestamp": 1756235961
    },
    {
        "content": "<p>Another inspiration was <a href=\"https://dl.acm.org/doi/10.1145/3597503.3639581\">this paper</a>, which highlights difficulties with PBT in practice. (I really love PBT so this project aimed to explore ways in making it more palatable.)</p>",
        "id": 536299030,
        "sender_full_name": "Johan LÃ¶vgren",
        "timestamp": 1756236179
    },
    {
        "content": "<p>That's all really cool. Will have to look through the links when I get a chance</p>",
        "id": 536334018,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1756257651
    }
]