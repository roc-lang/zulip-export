[
    {
        "content": "<p>I'm looking into this issue, but can't figure out how to run the current version of <code>checkmate</code> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span><br>\n<a href=\"https://github.com/roc-lang/roc/issues/5678\">https://github.com/roc-lang/roc/issues/5678</a></p>",
        "id": 377617739,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1690036597
    },
    {
        "content": "<p>I think you need to use the latest version, on this branch <a href=\"https://github.com/roc-lang/roc/tree/checkmate-ui-scaffold\">https://github.com/roc-lang/roc/tree/checkmate-ui-scaffold</a></p>",
        "id": 377618555,
        "sender_full_name": "Anton",
        "timestamp": 1690036795
    },
    {
        "content": "<p>Thanks for looking into the issue btw :)</p>",
        "id": 377618654,
        "sender_full_name": "Anton",
        "timestamp": 1690036813
    },
    {
        "content": "<p>For now, I am serving the checkmate UI (built once a day) at <a href=\"https://ayazhafiz.com/checkmate/\">https://ayazhafiz.com/checkmate/</a></p>\n<p>There are a bunch of missing pieces I want to clean up this week, but it should already be pretty usable (and hopefully much more useful for debugging types than anything we had before).</p>\n<p>If you run into a typechecking bug and want to try to diagnose it, after minimizing, you can run a debug version of the compiler with <code>ROC_CHECKMATE=1</code> set. That will spit out a JSON file of the form <code>checkmate_&lt;timestamp&gt;.json</code> (maybe worth making the filename more customizable if someone wants an easy PR). You can then load them into the UI and investigate the unifications. Later this week I'm planning to add support for constraints, so you can see where in the source code a unification comes from.</p>",
        "id": 380910750,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1690954971
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> I've got another one for checkmate, <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> <a href=\"https://github.com/roc-lang/roc/issues/5749\">this issue</a> is a minimal repro of the virtual dom issue</p>",
        "id": 383848743,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1691738357
    },
    {
        "content": "<p>woo!</p>",
        "id": 384092837,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1691787890
    },
    {
        "content": "<p>Btw <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> Ive figured out the bug here, but fixing it requires a somewhat involved refactor so I hope to have a patch out tomorrow or after</p>",
        "id": 391447039,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1694920314
    },
    {
        "content": "<p>Interested to know how you have found checkmate for debugging?</p>",
        "id": 391449633,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1694922492
    },
    {
        "content": "<p>oh so huge</p>",
        "id": 391458755,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1694928368
    },
    {
        "content": "<p>There's still some bugs (for example in the screenshot below the types at the top are missing), but scanning for \"obvious\" issues is very easy</p>",
        "id": 391458877,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1694928445
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/PJsYkOUD1chSv7FEpPhac8X7/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/PJsYkOUD1chSv7FEpPhac8X7/image.png\" title=\"image.png\"><img src=\"/user_uploads/22008/PJsYkOUD1chSv7FEpPhac8X7/image.png\"></a></div>",
        "id": 391458883,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1694928448
    },
    {
        "content": "<p>For example, here it is clear to see that there is a function that after unification winds up with an empty lambda set - which should never happen! So that was the immediate give away of where to look for the problem.</p>",
        "id": 391458969,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1694928485
    },
    {
        "content": "<p>Wow. This is pretty crazy. I'm realizing now we will have to lift canonicalization of annotations to happen after can of definitions, because canonicalized annotations need captures information</p>",
        "id": 392574737,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1695405383
    },
    {
        "content": "<p>oh for lambda sets?</p>",
        "id": 392614779,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1695424532
    },
    {
        "content": "<p>yeah</p>",
        "id": 392646771,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1695446410
    },
    {
        "content": "<p>yeah now that you say it, it seems obvious in retrospect <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 392688258,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1695470468
    },
    {
        "content": "<p>Moreover we need to lift this to happen (or at least the injection of a lambda set into a type annotation) until after we have fixed the capture sets across all definitions, which we currently only do after all other canonicalization in one pass (to handle recursive defs, etc)</p>",
        "id": 395423545,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1696687837
    },
    {
        "content": "<p>I think we need to figure out a plan here. As I see it, we have two options: (1) we can use a mutable cell to store the captures info in the type annotation, and expect that later the mutable cell will be fixed-up, or (2) we can move canonicalization of annotations to happen after all value canonicalization, including the captures fixing. I prefer (2) because this code is already not the easiest to reason about, and though two passes is annoying, it's likely not going to matter once we have a full SoA impl.</p>",
        "id": 395423743,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1696687994
    },
    {
        "content": "<p>yeah I agree with (2) being the way to go</p>",
        "id": 395427378,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1696690481
    },
    {
        "content": "<p>especially because we can incorporate this design constraint into the revamped design and minimize the cost then</p>",
        "id": 395427445,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1696690549
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> does it matter for constraint gen if we generate a constraint for the annotation first or the body first?</p>",
        "id": 395427564,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1696690641
    },
    {
        "content": "<p>if not, we could potentially adjust the canonical IR to store the body first and then the annotation afterwards, right?</p>",
        "id": 395427656,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1696690692
    },
    {
        "content": "<p>oh nm that wouldn't help because of the \"must do a pass over all the bodies before starting on the annotations\" need</p>",
        "id": 395427728,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1696690766
    },
    {
        "content": "<p>I guess another idea would be to store captures in a side table and give them an ID, and then give the annotation and the body the same ID, then have the body actually populate it</p>",
        "id": 395427879,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1696690870
    },
    {
        "content": "<p>which is similar to the Cell idea except you don't have to go back and fix it up later</p>",
        "id": 395427904,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1696690891
    },
    {
        "content": "<p>constraint always happens after canonicalization</p>",
        "id": 395431309,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1696693232
    },
    {
        "content": "<p>yeah that's the same as the mutable cell idea. which is only one pass but makes debugging harder :D</p>",
        "id": 395431329,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1696693250
    },
    {
        "content": "<p>yeah maybe worth considering down the line, but not right now</p>",
        "id": 395432181,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1696693969
    },
    {
        "content": "<p>This is a really frustrating change to make. I had to give up on the approach I was currently taking, I think part of the inconvenience is we have two separate IRs in the canonicalizer right now (SoA + classic AST). <span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span>  do you have any existing plans to go full SoA in the can AST? If not I will do it. I really think we need to unify and simply the data structures significantly ASAP before fixing the more general issue here though.</p>",
        "id": 397863586,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1697907497
    },
    {
        "content": "<p>I don't have plans (and probably would not get to it this year anyway). I think Richard has thoughts on this because it also has to integrate with the parser.</p>",
        "id": 398137416,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1698085969
    },
    {
        "content": "<p>can we let the other one drift then? just come back and revisit it later?</p>",
        "id": 398145846,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1698090166
    },
    {
        "content": "<p>We could but it's hard to do anything because half of the AST is in one, and half is in the other. we should consolidate them asap, I think</p>",
        "id": 398146233,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1698090379
    },
    {
        "content": "<p>oh hm</p>",
        "id": 398147939,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1698091290
    },
    {
        "content": "<p>I can work on that</p>",
        "id": 398147949,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1698091299
    },
    {
        "content": "<p>or if you want to, go for it</p>",
        "id": 398148616,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1698091678
    },
    {
        "content": "<p>I don't actually know what the current state of them is <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 398148669,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1698091687
    }
]