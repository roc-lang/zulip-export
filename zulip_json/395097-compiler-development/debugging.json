[
    {
        "content": "<p>Is there an easy way to make sure only specific builtins get compiled instead of all of them? The goal is to reduce the amount of debug output I have to sift through.</p>",
        "id": 496137716,
        "sender_full_name": "Anton",
        "timestamp": 1737988677
    },
    {
        "content": "<p>I think there's a list in <code>load</code> of the builtins that get pre compiled</p>",
        "id": 496140499,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737989432
    },
    {
        "content": "<p>They should get removed by DCE</p>",
        "id": 496167073,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737996128
    },
    {
        "content": "<p>We run that even on debug builds (cause compiling less increases speed).</p>",
        "id": 496167112,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737996144
    },
    {
        "content": "<p>Maybe we aren't marking everything correctly though so some code is staying that shouldn't be.</p>",
        "id": 496167315,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737996209
    },
    {
        "content": "<p>Gets complicated with lack due to how it treats compiler rt and libc functions</p>",
        "id": 496167448,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737996244
    },
    {
        "content": "<blockquote>\n<p>They should get removed by DCE</p>\n</blockquote>\n<p>Where in the compiler does DCE happen?</p>",
        "id": 496170534,
        "sender_full_name": "Anton",
        "timestamp": 1737997151
    },
    {
        "content": "<p>I know it is expected to happen \"for free\" in <code>specialize_types</code> in the new pipeline, I'd expect it to happen in/around <code>mono</code></p>",
        "id": 496173791,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737998060
    },
    {
        "content": "<p>But I'm not sure</p>",
        "id": 496173809,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737998068
    },
    {
        "content": "<p>yeah it's not that we do a pass to delete them, but rather that we start by specializing the entrypoints and only generate IR for things they encounter along the way</p>",
        "id": 496186935,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738002336
    },
    {
        "content": "<p>so anything that doesn't get encountered in the course of generating the IR for the entrypoints ends up being essentially \"eliminated\" by virtue of having never had IR generated for it in the next stage because it didn't come up.</p>",
        "id": 496186992,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738002355
    },
    {
        "content": "<p>Oh, I was talking about llvm dce that deletes uncalled functions and such</p>",
        "id": 496204629,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738008963
    },
    {
        "content": "<p>ah, I think that only does anything in the case of Zig builtin functions and compiled Roc functions that llvm ended up inlining everywhere</p>",
        "id": 496224493,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738018010
    },
    {
        "content": "<p>Yeah, I thought was the question though with a specific builtin. So only one zig builtin instead of all N zig builtin.</p>",
        "id": 496237127,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738024965
    },
    {
        "content": "<p>But yeah, all roc generated mono should be used and thus never dced</p>",
        "id": 496237170,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738024998
    }
]