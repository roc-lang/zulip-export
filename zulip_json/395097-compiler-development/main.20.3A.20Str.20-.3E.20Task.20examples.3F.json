[
    {
        "content": "<p>do we have any examples of <code>main : Str -&gt; Task Str []</code> working?</p>",
        "id": 375090586,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1689293524
    },
    {
        "content": "<p>I just tried <code>main : Str -&gt; Task Str []</code> and <code>roc glue</code> generated:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[repr(C)]</span>\n<span class=\"cp\">#[derive(Debug, Clone)]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">RocFunction_84</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">closure_data</span>: <span class=\"nc\">roc_std</span>::<span class=\"n\">RocList</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">RocFunction_84</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">force_thunk</span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg0</span>: <span class=\"p\">())</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">roc_std</span>::<span class=\"n\">RocStr</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"k\">fn</span> <span class=\"nf\">roc__mainForHost_3_caller</span><span class=\"p\">(</span>\n<span class=\"w\">                </span><span class=\"n\">arg0</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">(),</span>\n<span class=\"w\">                </span><span class=\"n\">closure_data</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">output</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">roc_std</span>::<span class=\"n\">RocStr</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">MaybeUninit</span>::<span class=\"n\">uninit</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">closure_data</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">roc__mainForHost_3_caller</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">arg0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">output</span><span class=\"p\">.</span><span class=\"n\">as_mut_ptr</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">};</span>\n\n<span class=\"w\">        </span><span class=\"c1\">// ownership of the closure is transferred back to roc</span>\n<span class=\"w\">        </span><span class=\"n\">core</span>::<span class=\"n\">mem</span>::<span class=\"n\">forget</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">closure_data</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">output</span><span class=\"p\">.</span><span class=\"n\">assume_init</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">mainForHost</span><span class=\"p\">(</span><span class=\"n\">arg0</span>: <span class=\"nc\">roc_std</span>::<span class=\"n\">RocStr</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">RocFunction_84</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">roc__mainForHost_1_exposed_generic</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">RocFunction_84</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">roc_std</span>::<span class=\"n\">RocStr</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">MaybeUninit</span>::<span class=\"n\">uninit</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">roc__mainForHost_1_exposed_generic</span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">.</span><span class=\"n\">as_mut_ptr</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">arg0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"p\">.</span><span class=\"n\">assume_init</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 375090648,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1689293562
    },
    {
        "content": "<p>running it gave this output:</p>\n<div class=\"codehilite\"><pre><span></span><code>Undefined symbols for architecture arm64:\n  &quot;_roc__mainForHost_3_caller&quot;, referenced from:\n      __ZN4host14RocFunction_8411force_thunk17hb922055437fe1593E in macos-arm64.o\nld: symbol(s) not found for architecture arm64\n</code></pre></div>",
        "id": 375090870,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1689293663
    },
    {
        "content": "<p>I tried changing <code>mainForHost3</code> to <code>mainForHost1</code> (like it usually is), and then the program segfaulted <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 375090913,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1689293691
    },
    {
        "content": "<p>hm, actually it might be more about <code>main : Str -&gt; Task</code> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 375095422,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1689295407
    },
    {
        "content": "<p>if I change <code>basic-cli</code> to take a <code>Str</code>, same thing</p>",
        "id": 375095448,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1689295416
    },
    {
        "content": "<p>and <code>basic-cli</code> already has <code>main : Task {} I32</code> so it's evidently capable of sending data to the host by way of a <code>Task</code></p>",
        "id": 375095570,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1689295451
    },
    {
        "content": "<p>I have an idea for a truly heinous workaround for this, but we should definitely fix it <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 375105269,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1689299879
    },
    {
        "content": "<p>Shouldn't roc__mainForHost_1_exposed_generic take the roc string as a pointer?</p>",
        "id": 375111079,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1689303162
    },
    {
        "content": "<p>Also, probably best to look out the llvm ir of a small example and debug from what that generates</p>",
        "id": 375111136,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1689303212
    },
    {
        "content": "<p>Here is an example with <code>main : List U8 -&gt; Task</code> using zig.</p>\n<p><a href=\"https://github.com/ostcar/roc-wasm-platform/blob/9c13cf01a1a6997a584d74b141aa62cb4bdce1c1/src/host.zig#L87\">https://github.com/ostcar/roc-wasm-platform/blob/9c13cf01a1a6997a584d74b141aa62cb4bdce1c1/src/host.zig#L87</a></p>\n<p>It takes the argument as a pointer</p>",
        "id": 375125753,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1689311403
    },
    {
        "content": "<p>you really need to look at the LLVM IR here</p>",
        "id": 375163854,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689322488
    }
]