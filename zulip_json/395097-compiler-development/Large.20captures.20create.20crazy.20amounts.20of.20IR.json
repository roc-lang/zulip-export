[
    {
        "content": "<p>Just curious if anyone has ideas of what might be causing this. I add a few fields to a struct and suddenly roc is trying to access invalid memory and crashing.</p>\n<p>Source: <a href=\"https://github.com/lukewilliamboswell/roc-wasm4/blob/722457ec20e95a7759768970928e6f10bb81c2e5/examples/rocci-bird.roc#L116-L158\">https://github.com/lukewilliamboswell/roc-wasm4/blob/722457ec20e95a7759768970928e6f10bb81c2e5/examples/rocci-bird.roc#L116-L158</a></p>",
        "id": 413025300,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705350857
    },
    {
        "content": "<p>is it necessarily the size or maybe the layout? Could try adding some extra unused fields in different places, or changing the types of the added fields to see if it still reproduces</p>",
        "id": 413025882,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1705351207
    },
    {
        "content": "<p>That's fair. My gut feeling is that it is broken either way, but one version is exposing the error.</p>",
        "id": 413028134,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705352567
    },
    {
        "content": "<p>I'll test a few layouts/extra fields.</p>",
        "id": 413028143,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705352575
    },
    {
        "content": "<p>Interestingly, it fails before even running that function. So that suggests the real issue is with the tag union that it is a part of.</p>",
        "id": 413028382,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705352714
    },
    {
        "content": "<p>Model is:</p>\n<div class=\"codehilite\"><pre><span></span><code>Model : [\n    TitleScreen TitleScreenState,\n    Game GameState,\n    GameOver GameOverState,\n]\n</code></pre></div>\n<p>and gets boxed</p>",
        "id": 413028446,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705352759
    },
    {
        "content": "<p>I am gonna guess the root of the bug is in one of these crazy long chains of data movement. IIUC, this is just copying data from one lambda capture to another (with of course a few small effects)</p>\n<p><a href=\"https://gist.github.com/bhansconnect/e10db8aafb8250740bbff22a18d58d78\">https://gist.github.com/bhansconnect/e10db8aafb8250740bbff22a18d58d78</a></p>",
        "id": 413064500,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705370695
    },
    {
        "content": "<p>basically the entire ir is just this repeated a  bunch of times and this is the optimized IR. So I guess all this app does is copy data between captures well occasionally performing effects.</p>",
        "id": 413064681,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705370805
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> or <span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> any thoughts on trying to debug or work around something like this?</p>",
        "id": 413064761,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705370856
    },
    {
        "content": "<p>This is the full.ll file: <a href=\"https://gist.github.com/bhansconnect/abdfa39c195482ca502555c0fc8e6306\">https://gist.github.com/bhansconnect/abdfa39c195482ca502555c0fc8e6306</a></p>",
        "id": 413065379,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705371232
    },
    {
        "content": "<p>full mono after refcount: <a href=\"https://gist.github.com/bhansconnect/995ea9f0d4f5e9c57aac0f8d0c9b4a5d\">https://gist.github.com/bhansconnect/995ea9f0d4f5e9c57aac0f8d0c9b4a5d</a></p>",
        "id": 413065664,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705371401
    },
    {
        "content": "<p>definitely some pretty intense captures:</p>\n<div class=\"codehilite\"><pre><span></span><code>procedure : `w4.Effect.always` [C {{U64, {U64, U64, List {U64, {List U8, {U32, U32, U32, U32}, U32, Int1}}, U8}, {List U8, {U32, U32, U32, U32}, U32, Int1}, {List U8, {U32, U32, U32, U32}, U32, Int1}, List {U32, I32}}, {Int1, Int1, Int1, Int1, Int1, Int1}} {{}, {}}, C [C {U64, U64, {U64, U64, List {U64, {List U8, {U32, U32, U32, U32}, U32, Int1}}, U8}, {List U8, {U32, U32, U32, U32}, U32, Int1}, {List U8, {U32, U32, U32, U32}, U32, Int1}, List {I32, I32}, {Float32, Float32}, Int1, U8}, C {U64, {U64, U64, List {U64, {List U8, {U32, U32, U32, U32}, U32, Int1}}, U8}, {List U8, {U32, U32, U32, U32}, U32, Int1}, {List U8, {U32, U32, U32, U32}, U32, Int1}, List {I32, I32}, {Float32, Float32}, U8}, C {U64, {U64, U64, List {U64, {List U8, {U32, U32, U32, U32}, U32, Int1}}, U8}, {List U8, {U32, U32, U32, U32}, U32, Int1}, {List U8, {U32, U32, U32, U32}, U32, Int1}, List {U32, I32}}]]\n</code></pre></div>",
        "id": 413065801,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705371491
    },
    {
        "content": "<p>Ok, so I found a fix. Apparently Roc is assuming certain memory is zero when it actually isn't. So by always zeroing allocated memory, the issue is fixed (that said, I also made a few other allocator cleanup, they may have been partial fixes)</p>",
        "id": 413089582,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705387259
    },
    {
        "content": "<p>The only problem is that the fixed binary is way too large. The limit is 64k, it is 124K.</p>\n<p>The actual roc wasm emitted is 644k but apparently most of that is dead code that zig removes when linking.</p>\n<p>Essentially all of that code is just copying closure captures one struct field at a time. Maybe we need to change those to memcpys cause they generate way to much code. Though probably there is a way smarter solution that avoids these copies all together and instead makes closure captures reuse space.</p>",
        "id": 413192715,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705422441
    },
    {
        "content": "<p>There other decent cost in binary size is that constant lists are built via store instructions instead of just being actual constants in the binary.</p>\n<p>This is probably indirectly my fault. I believe that due to surgical linker limitations we started doing this as a workaround. Technically we only need to do it for data that contains pointers, but I think we do it for all lists currently. I guess that would suggest using strings instead of lists for the constants would be more efficient as a workaround. (though it isn't guaranteed valid utf8...sooo hmm)</p>",
        "id": 413193575,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705422705
    },
    {
        "content": "<p>Oh actually I guess we had an exception for at least integer lists, but it was removed due to a morphic bug: <a href=\"https://github.com/roc-lang/roc/blob/ae0e3593a405e77a039fc10c613eb45ef83b8ab5/crates/compiler/gen_llvm/src/llvm/build.rs#L2980-L2982\">https://github.com/roc-lang/roc/blob/ae0e3593a405e77a039fc10c613eb45ef83b8ab5/crates/compiler/gen_llvm/src/llvm/build.rs#L2980-L2982</a></p>",
        "id": 413195173,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705423195
    },
    {
        "content": "<p>I haven't dug, will do so later, but thought I would just ask here first. Anyone know where the code is for copying data into and out of captures in the llvm backend? I want to trying and convert it to memcpy data around if possible.</p>",
        "id": 413236524,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705438195
    },
    {
        "content": "<p>captures don't exist at that point, it's just data</p>",
        "id": 415377424,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1705445107
    },
    {
        "content": "<p>If it is just data, I guess that means we really need to optimize how we copy around structs. For example, if we are loading a large (greater than 2 usizes) struct from another struct, we are just gonna put it on the stack anyway and pass it around by references, so we probably should just load and pass around a pointer to the field instead of actually loading the stuct to somewhere else.</p>\n<p>On top of that, instead of copying each individual sub field one at a time, we should either be copying in larger chunks or just calling memcpy (though preferably we would avoid the data copy all together in a number of these case). We probably need a way to reuse closure storage space to avoid all the copying all together.</p>\n<p>By <a href=\"https://github.com/lukewilliamboswell/roc-wasm4/commit/74058d8057beb31dc33fca60e9d3f1133ef339d8\">removing 4 sprites from the game state</a> and instead reloading them on every frame, I cut the generated executable size down by 64KB. This is not a large game. That is literally half of the executable size including the 8KB used for allocations and all of the zig host.</p>\n<p>I guess that is 9 less load and store instructions per sprite per capture.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>estimated load store count and executable bloat</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>each sprite is a list, 5 U32s and a union with 2 possible tags.<br>\nList is 3 usizes of data.</p>\n<p>So 3 for list + 5 u32s + 1 for the union = 9.</p>\n<p>4 sprites = 9 * 4 = 36 loads and stores per capture</p>\n<p>captures as measured by number of <code>&lt;-</code> in the code is 61. I assume inlining and some normal list functions and such add more to the real capture count.</p>\n<p>each load and store will be creating a constant offset then run the actual load/store instructions. That should be 2 bytes of instructions plus 4 bytes of offset per load/store. so 12 bytes for a load and store pair.</p>\n<p>Final count would be 12 bytes * 36 *61 ~= 26KB.</p>\n<p>That is about half of what it is in practice, but shows the rough point/problem</p>\n<p>EDIT: I might be missing some sort of offset + ptr instruction as well. Maybe that makes the difference?</p>\n</div></div>",
        "id": 415380481,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705446396
    },
    {
        "content": "<p>seems like a good next step would be to do the reference and memcpy optimizations, because those would have benefits in the shared case even if we also implemented in-place updates for unique structs on the stack</p>",
        "id": 415381856,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1705447025
    },
    {
        "content": "<p>Quick question I have with lambdasets.</p>\n<p>Do they unify all closure captures in a chain? I would assume that yes they have to cause the platform only sees closure captures as a static sized byte allocation. </p>\n<p>We probably have a lot of waste that is just copying from the input closure capture to the output closure capture the exact same only occasionally modified data. For example, captured in essentially every task is the previous version of the state. Even if we don't do any sort of true inplace updates, we probably need to find a way recognize that the exact same large amount of data is captured for many lambdas in a row and avoid ever moving it at all. This probably will require some form of boxing such that we can just give a pointer to the platform, but we should definitely think more about the ramifications of large closure captures.</p>\n<p>Any sort of stateful application that uses tasks will end up capturing the entire state in every single task closure. I guess we will need to do some performance measurements of memcpy vs malloc. Is it better to implicitly box an 100 byte struct in a capture or just pay the cost of copying it around over and over again?</p>",
        "id": 415383573,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705447755
    },
    {
        "content": "<p>It may turn out that we want boxed lambdasets such that the capture can be reused between calls (always the same size in bytes), but we only end up passing around a single pointer instead of giant captures. Kinda in between current lambasets and the option to use erased closures that are individually dynamically allocated.</p>",
        "id": 415383915,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705447885
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> could it be worth automatically heap allocating after a certain size threshold?</p>",
        "id": 415384529,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1705448128
    },
    {
        "content": "<p>Yeah, definitely something to consider</p>",
        "id": 415385864,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705448737
    },
    {
        "content": "<p>also, shouldn't the 4 sprites each be 12B <code>List</code>s each on wasm32, which would take 2-3 instructions each to copy? If so, 64KB seems like a lot!</p>",
        "id": 415385992,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1705448786
    },
    {
        "content": "<p>look at the spoiler above for an estimate</p>",
        "id": 415386096,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705448846
    },
    {
        "content": "<p>ah gotcha!</p>",
        "id": 415386341,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1705448963
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> do you know where the code would be that generates loading and storing captured data. I assume the generation currently breaks everything down recursively for some reason. In reality, we would perfer to just load the first layer and store the same thing. That hopefully would enable more optimization on the backend.</p>\n<p>As it stands currently, I think the backend is given the broken down version of the data copy where the struct has each individual field loaded and then a new struct is made from all the individual fields. Though maybe I am missing something here.</p>\n<p>Fundamentally, I want to figure out how to make sure things are grouped so that we can either use memcpy directly or else something smarter to enable copying without recursively loading and storing each field.</p>",
        "id": 415387301,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705449397
    },
    {
        "content": "<p>so, again, captured data is just data. You could write your program without any higher-order functions at all by just passing the lambda sets manually. So the question is really about data in general</p>\n<p>so, I guess the problem is that </p>\n<div class=\"codehilite\"><pre><span></span><code>x = foo.bar.baz\n\nf x\n</code></pre></div>\n<p>means that we actually do</p>\n<div class=\"codehilite\"><pre><span></span><code>tmp1 = foo.bar\nx = tmp1.baz\n\nf x\n</code></pre></div>\n<p>so the whole <code>bar</code> struct is moved to the stack even if only one field is actually used. We break this up in the parser already, where <code>foo.bar.baz</code> is really just <code>(foo.bar).baz</code>. The fact that this is a chain is lost very early on. We cannot currently represent the chain in either can or mono IR.</p>",
        "id": 416807899,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1705679979
    },
    {
        "content": "<p>I see. I was assuming the pattern was more of</p>\n<div class=\"codehilite\"><pre><span></span><code>prevCapture = someLargeStruct\nnewData = 7\nnewCapture = { a: prevCapture.a, b: prevCapture.b, ..., prevCapture.zz, newData }\n\nf newCapture\n</code></pre></div>\n<p>I was hoping there might be some way to help copy the data in a way data doesn't generate an individual copy for every single field. I would assume the final IR generated is load N symbols then call the struct builder ir.</p>",
        "id": 416811346,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705680622
    },
    {
        "content": "<p>yes, likely, but there is no specific code for that</p>",
        "id": 416811644,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1705680675
    },
    {
        "content": "<p>that just naturally falls out of the current implementation</p>",
        "id": 416811707,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1705680685
    },
    {
        "content": "<p>When are the captures actually generated? Like when do we build the capture structs?</p>",
        "id": 416811849,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705680707
    },
    {
        "content": "<p>eh, intuitively a closure definition turns into a struct/tag union literal</p>",
        "id": 416812650,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1705680837
    },
    {
        "content": "<p>there is a function <code>construct_closure_data</code> which sounds promising (in <a href=\"http://ir.rs\">ir.rs</a>)</p>",
        "id": 416812992,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1705680928
    },
    {
        "content": "<p>So trying to make a minimal example to figure out what is going on. All built with <code>roc-wasm4</code>.</p>\n<p>Just kinda made an arbitrary model:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kt\">Model</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">data1</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">U64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">data2</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">U64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">data3</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">U64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">data4</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">U64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">r</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">I32</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">r2</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">I32</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">r3</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">I32</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">fg</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">W4</span><span class=\"o\">.</span><span class=\"kt\">Palette</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">bg</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">W4</span><span class=\"o\">.</span><span class=\"kt\">Palette</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Starter function:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">update</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">model</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"ow\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">W4</span><span class=\"o\">.</span><span class=\"n\">setTextColors</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">fg</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fg</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bg</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Color2</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span>\n<span class=\"w\">    </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"n\">model</span>\n</code></pre></div>\n<p>All looks good:</p>\n<div class=\"codehilite\" data-code-language=\"LLVM\"><pre><span></span><code><span class=\"k\">define</span><span class=\"w\"> </span><span class=\"k\">void</span><span class=\"w\"> </span><span class=\"vg\">@roc__mainForHost_2_caller</span><span class=\"p\">(</span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"k\">nocapture</span><span class=\"w\"> </span><span class=\"k\">readnone</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"k\">nocapture</span><span class=\"w\"> </span><span class=\"k\">readonly</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"k\">nocapture</span><span class=\"w\"> </span><span class=\"k\">writeonly</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">local_unnamed_addr</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"nl\">entry:</span>\n<span class=\"w\">  </span><span class=\"nv\">%result_value.i.i</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">alloca</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span>\n<span class=\"w\">  </span><span class=\"k\">call</span><span class=\"w\"> </span><span class=\"k\">void</span><span class=\"w\"> </span><span class=\"vg\">@llvm.lifetime.start.p0</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"m\">48</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"k\">nonnull</span><span class=\"w\"> </span><span class=\"nv\">%result_value.i.i</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"k\">call</span><span class=\"w\"> </span><span class=\"k\">void</span><span class=\"w\"> </span><span class=\"vg\">@llvm.memcpy.p0.p0.i64</span><span class=\"p\">(</span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"k\">noundef</span><span class=\"w\"> </span><span class=\"k\">nonnull</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span><span class=\"w\"> </span><span class=\"k\">dereferenceable</span><span class=\"p\">(</span><span class=\"m\">48</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">%result_value.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"k\">noundef</span><span class=\"w\"> </span><span class=\"k\">nonnull</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span><span class=\"w\"> </span><span class=\"k\">dereferenceable</span><span class=\"p\">(</span><span class=\"m\">48</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"m\">48</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i1</span><span class=\"w\"> </span><span class=\"k\">false</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"nv\">%struct_field1.i.i.sroa.4.0..sroa_idx</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">getelementptr</span><span class=\"w\"> </span><span class=\"k\">inbounds</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">48</span>\n<span class=\"w\">  </span><span class=\"nv\">%struct_field1.i.i.sroa.4.0.copyload</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">load</span><span class=\"w\"> </span><span class=\"kt\">i16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%struct_field1.i.i.sroa.4.0..sroa_idx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span>\n<span class=\"w\">  </span><span class=\"k\">tail</span><span class=\"w\"> </span><span class=\"k\">call</span><span class=\"w\"> </span><span class=\"k\">void</span><span class=\"w\"> </span><span class=\"vg\">@roc_fx_setDrawColors</span><span class=\"p\">(</span><span class=\"kt\">i16</span><span class=\"w\"> </span><span class=\"nv\">%struct_field1.i.i.sroa.4.0.copyload</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"nv\">%call_builtin.i.i.i.i.i</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">tail</span><span class=\"w\"> </span><span class=\"k\">call</span><span class=\"w\"> </span><span class=\"k\">fastcc</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"vg\">@roc_builtins.utils.allocate_with_refcount</span><span class=\"p\">()</span>\n<span class=\"w\">  </span><span class=\"k\">call</span><span class=\"w\"> </span><span class=\"k\">void</span><span class=\"w\"> </span><span class=\"vg\">@llvm.memcpy.p0.p0.i64</span><span class=\"p\">(</span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"k\">noundef</span><span class=\"w\"> </span><span class=\"k\">nonnull</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span><span class=\"w\"> </span><span class=\"k\">dereferenceable</span><span class=\"p\">(</span><span class=\"m\">48</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">%call_builtin.i.i.i.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"k\">noundef</span><span class=\"w\"> </span><span class=\"k\">nonnull</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span><span class=\"w\"> </span><span class=\"k\">dereferenceable</span><span class=\"p\">(</span><span class=\"m\">48</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">%result_value.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"m\">48</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i1</span><span class=\"w\"> </span><span class=\"k\">false</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"k\">call</span><span class=\"w\"> </span><span class=\"k\">void</span><span class=\"w\"> </span><span class=\"vg\">@llvm.lifetime.end.p0</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"m\">48</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"k\">nonnull</span><span class=\"w\"> </span><span class=\"nv\">%result_value.i.i</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"k\">store</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%call_builtin.i.i.i.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">4</span>\n<span class=\"w\">  </span><span class=\"k\">ret</span><span class=\"w\"> </span><span class=\"k\">void</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Add just a single layer of extra awaiting:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">update</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">model</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"ow\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">W4</span><span class=\"o\">.</span><span class=\"n\">setTextColors</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">fg</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fg</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bg</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Color2</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span>\n<span class=\"w\">    </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"ow\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">W4</span><span class=\"o\">.</span><span class=\"n\">setTextColors</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">fg</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Color1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bg</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">bg</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span>\n<span class=\"w\">    </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"n\">model</span>\n</code></pre></div>\n<p>Suddenly, we are loading every single individual struct field and treating them all individually.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>llvm ir</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"LLVM\"><pre><span></span><code><span class=\"k\">define</span><span class=\"w\"> </span><span class=\"k\">void</span><span class=\"w\"> </span><span class=\"vg\">@roc__mainForHost_2_caller</span><span class=\"p\">(</span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"k\">nocapture</span><span class=\"w\"> </span><span class=\"k\">readnone</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"k\">nocapture</span><span class=\"w\"> </span><span class=\"k\">readonly</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"k\">nocapture</span><span class=\"w\"> </span><span class=\"k\">writeonly</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">local_unnamed_addr</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"nl\">entry:</span>\n<span class=\"w\">  </span><span class=\"nv\">%struct_field1.i.i.sroa.0.sroa.0.0.copyload</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">load</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span>\n<span class=\"w\">  </span><span class=\"nv\">%struct_field1.i.i.sroa.0.sroa.4.0..sroa_idx</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">getelementptr</span><span class=\"w\"> </span><span class=\"k\">inbounds</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">8</span>\n<span class=\"w\">  </span><span class=\"nv\">%struct_field1.i.i.sroa.0.sroa.4.0.copyload</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">load</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%struct_field1.i.i.sroa.0.sroa.4.0..sroa_idx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span>\n<span class=\"w\">  </span><span class=\"nv\">%struct_field1.i.i.sroa.0.sroa.5.0..sroa_idx</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">getelementptr</span><span class=\"w\"> </span><span class=\"k\">inbounds</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">16</span>\n<span class=\"w\">  </span><span class=\"nv\">%struct_field1.i.i.sroa.0.sroa.5.0.copyload</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">load</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%struct_field1.i.i.sroa.0.sroa.5.0..sroa_idx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span>\n<span class=\"w\">  </span><span class=\"nv\">%struct_field1.i.i.sroa.0.sroa.6.0..sroa_idx</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">getelementptr</span><span class=\"w\"> </span><span class=\"k\">inbounds</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">24</span>\n<span class=\"w\">  </span><span class=\"nv\">%struct_field1.i.i.sroa.0.sroa.6.0.copyload</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">load</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%struct_field1.i.i.sroa.0.sroa.6.0..sroa_idx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span>\n<span class=\"w\">  </span><span class=\"nv\">%struct_field1.i.i.sroa.0.sroa.7.0..sroa_idx</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">getelementptr</span><span class=\"w\"> </span><span class=\"k\">inbounds</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">32</span>\n<span class=\"w\">  </span><span class=\"nv\">%struct_field1.i.i.sroa.0.sroa.7.0.copyload</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">load</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%struct_field1.i.i.sroa.0.sroa.7.0..sroa_idx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span>\n<span class=\"w\">  </span><span class=\"nv\">%struct_field1.i.i.sroa.0.sroa.8.0..sroa_idx</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">getelementptr</span><span class=\"w\"> </span><span class=\"k\">inbounds</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">36</span>\n<span class=\"w\">  </span><span class=\"nv\">%struct_field1.i.i.sroa.0.sroa.8.0.copyload</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">load</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%struct_field1.i.i.sroa.0.sroa.8.0..sroa_idx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">4</span>\n<span class=\"w\">  </span><span class=\"nv\">%struct_field1.i.i.sroa.0.sroa.9.0..sroa_idx</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">getelementptr</span><span class=\"w\"> </span><span class=\"k\">inbounds</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">40</span>\n<span class=\"w\">  </span><span class=\"nv\">%struct_field1.i.i.sroa.0.sroa.9.0.copyload</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">load</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%struct_field1.i.i.sroa.0.sroa.9.0..sroa_idx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span>\n<span class=\"w\">  </span><span class=\"nv\">%struct_field1.i.i.sroa.0.sroa.10.0..sroa_idx</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">getelementptr</span><span class=\"w\"> </span><span class=\"k\">inbounds</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">44</span>\n<span class=\"w\">  </span><span class=\"nv\">%struct_field1.i.i.sroa.0.sroa.10.0.copyload</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">load</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%struct_field1.i.i.sroa.0.sroa.10.0..sroa_idx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">4</span>\n<span class=\"w\">  </span><span class=\"nv\">%struct_field1.i.i.sroa.0.sroa.11.0..sroa_idx</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">getelementptr</span><span class=\"w\"> </span><span class=\"k\">inbounds</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">45</span>\n<span class=\"w\">  </span><span class=\"nv\">%struct_field1.i.i.sroa.0.sroa.11.0.copyload</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">load</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%struct_field1.i.i.sroa.0.sroa.11.0..sroa_idx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">1</span>\n<span class=\"w\">  </span><span class=\"nv\">%struct_field1.i.i.sroa.4.0..sroa_idx</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">getelementptr</span><span class=\"w\"> </span><span class=\"k\">inbounds</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">48</span>\n<span class=\"w\">  </span><span class=\"nv\">%struct_field1.i.i.sroa.4.0.copyload</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">load</span><span class=\"w\"> </span><span class=\"kt\">i16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%struct_field1.i.i.sroa.4.0..sroa_idx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span>\n<span class=\"w\">  </span><span class=\"k\">tail</span><span class=\"w\"> </span><span class=\"k\">call</span><span class=\"w\"> </span><span class=\"k\">void</span><span class=\"w\"> </span><span class=\"vg\">@roc_fx_setDrawColors</span><span class=\"p\">(</span><span class=\"kt\">i16</span><span class=\"w\"> </span><span class=\"nv\">%struct_field1.i.i.sroa.4.0.copyload</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"nv nv-Anonymous\">%3</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">icmp</span><span class=\"w\"> </span><span class=\"k\">ult</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"nv\">%struct_field1.i.i.sroa.0.sroa.10.0.copyload</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">5</span>\n<span class=\"w\">  </span><span class=\"k\">br</span><span class=\"w\"> </span><span class=\"kt\">i1</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">label</span><span class=\"w\"> </span><span class=\"nv\">%switch.lookup</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">label</span><span class=\"w\"> </span><span class=\"nv\">%_47_8ba6802dffb747a8e9687df41a048d15ada9efac1560a7cdcc82eb95345ce.exit</span>\n\n<span class=\"nl\">switch.lookup:</span><span class=\"w\">                                    </span><span class=\"c\">; preds = %entry</span>\n<span class=\"w\">  </span><span class=\"nv nv-Anonymous\">%4</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">sext</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"nv\">%struct_field1.i.i.sroa.0.sroa.10.0.copyload</span><span class=\"w\"> </span><span class=\"k\">to</span><span class=\"w\"> </span><span class=\"kt\">i32</span>\n<span class=\"w\">  </span><span class=\"nv\">%switch.gep</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">getelementptr</span><span class=\"w\"> </span><span class=\"k\">inbounds</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"m\">5</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i16</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"vg\">@switch.table.roc__mainForHost_2_caller</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%4</span>\n<span class=\"w\">  </span><span class=\"nv\">%switch.load</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">load</span><span class=\"w\"> </span><span class=\"kt\">i16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%switch.gep</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">2</span>\n<span class=\"w\">  </span><span class=\"k\">br</span><span class=\"w\"> </span><span class=\"kt\">label</span><span class=\"w\"> </span><span class=\"nv\">%_47_8ba6802dffb747a8e9687df41a048d15ada9efac1560a7cdcc82eb95345ce.exit</span>\n\n<span class=\"nl\">_47_8ba6802dffb747a8e9687df41a048d15ada9efac1560a7cdcc82eb95345ce.exit:</span><span class=\"w\"> </span><span class=\"c\">; preds = %switch.lookup, %entry</span>\n<span class=\"w\">  </span><span class=\"nv\">%joinpointarg2.i.i.i.i.i.i.i.i</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">phi</span><span class=\"w\"> </span><span class=\"kt\">i16</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"m\">65</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%entry</span><span class=\"w\"> </span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"nv\">%switch.load</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%switch.lookup</span><span class=\"w\"> </span><span class=\"p\">]</span>\n<span class=\"w\">  </span><span class=\"k\">tail</span><span class=\"w\"> </span><span class=\"k\">call</span><span class=\"w\"> </span><span class=\"k\">void</span><span class=\"w\"> </span><span class=\"vg\">@roc_fx_setDrawColors</span><span class=\"p\">(</span><span class=\"kt\">i16</span><span class=\"w\"> </span><span class=\"nv\">%joinpointarg2.i.i.i.i.i.i.i.i</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"nv\">%call_builtin.i.i.i.i.i</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">tail</span><span class=\"w\"> </span><span class=\"k\">call</span><span class=\"w\"> </span><span class=\"k\">fastcc</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"vg\">@roc_builtins.utils.allocate_with_refcount</span><span class=\"p\">()</span>\n<span class=\"w\">  </span><span class=\"k\">store</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv\">%struct_field1.i.i.sroa.0.sroa.0.0.copyload</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%call_builtin.i.i.i.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span>\n<span class=\"w\">  </span><span class=\"nv\">%result_value.i.i.sroa.5.0.call_builtin.i.i.i.i.i.sroa_idx</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">getelementptr</span><span class=\"w\"> </span><span class=\"k\">inbounds</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%call_builtin.i.i.i.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">8</span>\n<span class=\"w\">  </span><span class=\"k\">store</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv\">%struct_field1.i.i.sroa.0.sroa.4.0.copyload</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%result_value.i.i.sroa.5.0.call_builtin.i.i.i.i.i.sroa_idx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span>\n<span class=\"w\">  </span><span class=\"nv\">%result_value.i.i.sroa.6.0.call_builtin.i.i.i.i.i.sroa_idx</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">getelementptr</span><span class=\"w\"> </span><span class=\"k\">inbounds</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%call_builtin.i.i.i.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">16</span>\n<span class=\"w\">  </span><span class=\"k\">store</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv\">%struct_field1.i.i.sroa.0.sroa.5.0.copyload</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%result_value.i.i.sroa.6.0.call_builtin.i.i.i.i.i.sroa_idx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span>\n<span class=\"w\">  </span><span class=\"nv\">%result_value.i.i.sroa.7.0.call_builtin.i.i.i.i.i.sroa_idx</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">getelementptr</span><span class=\"w\"> </span><span class=\"k\">inbounds</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%call_builtin.i.i.i.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">24</span>\n<span class=\"w\">  </span><span class=\"k\">store</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv\">%struct_field1.i.i.sroa.0.sroa.6.0.copyload</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%result_value.i.i.sroa.7.0.call_builtin.i.i.i.i.i.sroa_idx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span>\n<span class=\"w\">  </span><span class=\"nv\">%result_value.i.i.sroa.8.0.call_builtin.i.i.i.i.i.sroa_idx</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">getelementptr</span><span class=\"w\"> </span><span class=\"k\">inbounds</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%call_builtin.i.i.i.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">32</span>\n<span class=\"w\">  </span><span class=\"k\">store</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"nv\">%struct_field1.i.i.sroa.0.sroa.7.0.copyload</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%result_value.i.i.sroa.8.0.call_builtin.i.i.i.i.i.sroa_idx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span>\n<span class=\"w\">  </span><span class=\"nv\">%result_value.i.i.sroa.9.0.call_builtin.i.i.i.i.i.sroa_idx</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">getelementptr</span><span class=\"w\"> </span><span class=\"k\">inbounds</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%call_builtin.i.i.i.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">36</span>\n<span class=\"w\">  </span><span class=\"k\">store</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"nv\">%struct_field1.i.i.sroa.0.sroa.8.0.copyload</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%result_value.i.i.sroa.9.0.call_builtin.i.i.i.i.i.sroa_idx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">4</span>\n<span class=\"w\">  </span><span class=\"nv\">%result_value.i.i.sroa.10.0.call_builtin.i.i.i.i.i.sroa_idx</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">getelementptr</span><span class=\"w\"> </span><span class=\"k\">inbounds</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%call_builtin.i.i.i.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">40</span>\n<span class=\"w\">  </span><span class=\"k\">store</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"nv\">%struct_field1.i.i.sroa.0.sroa.9.0.copyload</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%result_value.i.i.sroa.10.0.call_builtin.i.i.i.i.i.sroa_idx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span>\n<span class=\"w\">  </span><span class=\"nv\">%result_value.i.i.sroa.11.0.call_builtin.i.i.i.i.i.sroa_idx</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">getelementptr</span><span class=\"w\"> </span><span class=\"k\">inbounds</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%call_builtin.i.i.i.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">44</span>\n<span class=\"w\">  </span><span class=\"k\">store</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"nv\">%struct_field1.i.i.sroa.0.sroa.10.0.copyload</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%result_value.i.i.sroa.11.0.call_builtin.i.i.i.i.i.sroa_idx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">4</span>\n<span class=\"w\">  </span><span class=\"nv\">%result_value.i.i.sroa.12.0.call_builtin.i.i.i.i.i.sroa_idx</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">getelementptr</span><span class=\"w\"> </span><span class=\"k\">inbounds</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%call_builtin.i.i.i.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">45</span>\n<span class=\"w\">  </span><span class=\"k\">store</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"nv\">%struct_field1.i.i.sroa.0.sroa.11.0.copyload</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%result_value.i.i.sroa.12.0.call_builtin.i.i.i.i.i.sroa_idx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">1</span>\n<span class=\"w\">  </span><span class=\"k\">store</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%call_builtin.i.i.i.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">4</span>\n<span class=\"w\">  </span><span class=\"k\">ret</span><span class=\"w\"> </span><span class=\"k\">void</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n</div></div>\n<p>Given we are capturing the entire model, I don't think there is any reason this should be handling each piece individually. Maybe our captures aren't nested correctly. As in, feels like we are treating the closure capture as {a, b, c} instead of { myStruct }.</p>\n<p>Definitely will have to dig into the final ir that is given to llvm.</p>\n<p>Due to this current setup, if we do anything more complex, we get tons of code gen.<br>\nEx, 1 extra step:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">update</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">model</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"ow\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">W4</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span>\n<span class=\"w\">    </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"ow\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">W4</span><span class=\"o\">.</span><span class=\"n\">setTextColors</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">fg</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fg</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bg</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Color2</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span>\n<span class=\"w\">    </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"ow\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">W4</span><span class=\"o\">.</span><span class=\"n\">setTextColors</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">fg</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Color1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bg</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">bg</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span>\n<span class=\"w\">    </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">model</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">}</span>\n</code></pre></div>\n<p>That leads to literally double the number of lines of llvm ir compared to the example above.</p>",
        "id": 416939937,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705713105
    },
    {
        "content": "<p>Huh....So I think I at least partially miss diagnosed this problem.</p>",
        "id": 416956247,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705725777
    },
    {
        "content": "<p>The debug llvm ir is generating the memcpy calls that I would expect (though a ton of them).</p>",
        "id": 416956270,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705725807
    },
    {
        "content": "<p>So I guess llvm is choosing to remove the memcpy calls at the cost of binary size.</p>",
        "id": 416956281,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705725831
    },
    {
        "content": "<p>Kinda surprised it is still doing it will opt-size</p>",
        "id": 416956288,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705725841
    },
    {
        "content": "<p>All that said, we give llvm a really hard job. We have tons of extra unneeded allocas and memcpy calls.</p>",
        "id": 416956336,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705725871
    },
    {
        "content": "<p>Not sure where that leaves this issue though. Cause it still is generating like 10s of KB of binary size for just adding a field or 2 to a closure capture. There has to be some way to avoid this for cases where Roc wants to be used on more constrained systems.</p>",
        "id": 416956392,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705725955
    },
    {
        "content": "<p>Potentially reducing and removing the extra memcpy calls would help llvm reason about things, but I'm not sure, it might be actually reasoning correctly and generating what it expects to.</p>",
        "id": 416956455,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705726025
    },
    {
        "content": "<p>We also still have artifacts like this that look totally wrong.</p>\n<p>IIUC, this is:</p>\n<ol>\n<li>creating an alloca</li>\n<li>filling it up with data</li>\n<li>loading all of the values from the alloca</li>\n<li>Storing all the newly loaded values somewhere else</li>\n</ol>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>repeated copying</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"LLVM\"><pre><span></span><code><span class=\"w\">  </span><span class=\"nv\">%struct_alloca</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">alloca</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span>\n<span class=\"w\">  </span><span class=\"k\">store</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv\">%struct_field1.sroa.0.0.copyload</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%struct_alloca</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span>\n<span class=\"w\">  </span><span class=\"nv\">%insert_record_field5.fca.0.1.gep</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">getelementptr</span><span class=\"w\"> </span><span class=\"k\">inbounds</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%struct_alloca</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">1</span>\n<span class=\"w\">  </span><span class=\"k\">store</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv\">%struct_field1.sroa.2.0.copyload</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%insert_record_field5.fca.0.1.gep</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span>\n<span class=\"w\">  </span><span class=\"nv\">%insert_record_field5.fca.0.2.gep</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">getelementptr</span><span class=\"w\"> </span><span class=\"k\">inbounds</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%struct_alloca</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">2</span>\n<span class=\"w\">  </span><span class=\"k\">store</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv\">%struct_field1.sroa.3.0.copyload</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%insert_record_field5.fca.0.2.gep</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span>\n<span class=\"w\">  </span><span class=\"nv\">%insert_record_field5.fca.0.3.gep</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">getelementptr</span><span class=\"w\"> </span><span class=\"k\">inbounds</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%struct_alloca</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">3</span>\n<span class=\"w\">  </span><span class=\"k\">store</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv\">%struct_field1.sroa.4.0.copyload</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%insert_record_field5.fca.0.3.gep</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span>\n<span class=\"w\">  </span><span class=\"nv\">%insert_record_field5.fca.0.4.gep</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">getelementptr</span><span class=\"w\"> </span><span class=\"k\">inbounds</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%struct_alloca</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">4</span>\n<span class=\"w\">  </span><span class=\"k\">store</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"nv\">%struct_field1.sroa.5.0.copyload</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%insert_record_field5.fca.0.4.gep</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span>\n<span class=\"w\">  </span><span class=\"nv\">%insert_record_field5.fca.0.5.gep</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">getelementptr</span><span class=\"w\"> </span><span class=\"k\">inbounds</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%struct_alloca</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">5</span>\n<span class=\"w\">  </span><span class=\"k\">store</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"nv\">%struct_field1.sroa.6.0.copyload</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%insert_record_field5.fca.0.5.gep</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">4</span>\n<span class=\"w\">  </span><span class=\"nv\">%insert_record_field5.fca.0.6.gep</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">getelementptr</span><span class=\"w\"> </span><span class=\"k\">inbounds</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%struct_alloca</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">6</span>\n<span class=\"w\">  </span><span class=\"k\">store</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"nv\">%struct_field1.sroa.7.0.copyload</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%insert_record_field5.fca.0.6.gep</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span>\n<span class=\"w\">  </span><span class=\"nv\">%insert_record_field5.fca.0.7.gep</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">getelementptr</span><span class=\"w\"> </span><span class=\"k\">inbounds</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%struct_alloca</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">7</span>\n<span class=\"w\">  </span><span class=\"k\">store</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"nv\">%struct_field1.sroa.8.0.copyload</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%insert_record_field5.fca.0.7.gep</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">4</span>\n<span class=\"w\">  </span><span class=\"nv\">%insert_record_field5.fca.0.8.gep</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">getelementptr</span><span class=\"w\"> </span><span class=\"k\">inbounds</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%struct_alloca</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">8</span>\n<span class=\"w\">  </span><span class=\"k\">store</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"nv\">%struct_field1.sroa.10.0.copyload</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%insert_record_field5.fca.0.8.gep</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">1</span>\n<span class=\"w\">  </span><span class=\"nv\">%insert_record_field5.fca.1.gep</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">getelementptr</span><span class=\"w\"> </span><span class=\"k\">inbounds</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%struct_alloca</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">1</span>\n<span class=\"w\">  </span><span class=\"k\">store</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"nv\">%struct_field</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%insert_record_field5.fca.1.gep</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span>\n<span class=\"w\">  </span><span class=\"nv\">%load_tag_to_put_in_struct.i.i</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">load</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%struct_alloca</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span>\n<span class=\"w\">  </span><span class=\"nv\">%insert_record_field1.fca.0.0.0.extract.i.i</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">extractvalue</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nv\">%load_tag_to_put_in_struct.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">0</span>\n<span class=\"w\">  </span><span class=\"nv\">%insert_record_field1.fca.0.0.1.extract.i.i</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">extractvalue</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nv\">%load_tag_to_put_in_struct.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">1</span>\n<span class=\"w\">  </span><span class=\"nv\">%insert_record_field1.fca.0.0.2.extract.i.i</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">extractvalue</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nv\">%load_tag_to_put_in_struct.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">2</span>\n<span class=\"w\">  </span><span class=\"nv\">%insert_record_field1.fca.0.0.3.extract.i.i</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">extractvalue</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nv\">%load_tag_to_put_in_struct.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">3</span>\n<span class=\"w\">  </span><span class=\"nv\">%insert_record_field1.fca.0.0.4.extract.i.i</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">extractvalue</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nv\">%load_tag_to_put_in_struct.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">4</span>\n<span class=\"w\">  </span><span class=\"nv\">%insert_record_field1.fca.0.0.5.extract.i.i</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">extractvalue</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nv\">%load_tag_to_put_in_struct.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">5</span>\n<span class=\"w\">  </span><span class=\"nv\">%insert_record_field1.fca.0.0.6.extract.i.i</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">extractvalue</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nv\">%load_tag_to_put_in_struct.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">6</span>\n<span class=\"w\">  </span><span class=\"nv\">%insert_record_field1.fca.0.0.7.extract.i.i</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">extractvalue</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nv\">%load_tag_to_put_in_struct.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">7</span>\n<span class=\"w\">  </span><span class=\"nv\">%insert_record_field1.fca.0.0.8.extract.i.i</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">extractvalue</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nv\">%load_tag_to_put_in_struct.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">8</span>\n<span class=\"w\">  </span><span class=\"nv\">%insert_record_field1.fca.0.1.extract.i.i</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">extractvalue</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nv\">%load_tag_to_put_in_struct.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"m\">1</span>\n<span class=\"w\">  </span><span class=\"k\">store</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv\">%insert_record_field1.fca.0.0.0.extract.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span>\n<span class=\"w\">  </span><span class=\"nv\">%result_value.sroa.2.0..sroa_idx</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">getelementptr</span><span class=\"w\"> </span><span class=\"k\">inbounds</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">8</span>\n<span class=\"w\">  </span><span class=\"k\">store</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv\">%insert_record_field1.fca.0.0.1.extract.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%result_value.sroa.2.0..sroa_idx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span>\n<span class=\"w\">  </span><span class=\"nv\">%result_value.sroa.3.0..sroa_idx</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">getelementptr</span><span class=\"w\"> </span><span class=\"k\">inbounds</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">16</span>\n<span class=\"w\">  </span><span class=\"k\">store</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv\">%insert_record_field1.fca.0.0.2.extract.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%result_value.sroa.3.0..sroa_idx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span>\n<span class=\"w\">  </span><span class=\"nv\">%result_value.sroa.4.0..sroa_idx</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">getelementptr</span><span class=\"w\"> </span><span class=\"k\">inbounds</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">24</span>\n<span class=\"w\">  </span><span class=\"k\">store</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"nv\">%insert_record_field1.fca.0.0.3.extract.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%result_value.sroa.4.0..sroa_idx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span>\n<span class=\"w\">  </span><span class=\"nv\">%result_value.sroa.5.0..sroa_idx</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">getelementptr</span><span class=\"w\"> </span><span class=\"k\">inbounds</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">32</span>\n<span class=\"w\">  </span><span class=\"k\">store</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"nv\">%insert_record_field1.fca.0.0.4.extract.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%result_value.sroa.5.0..sroa_idx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span>\n<span class=\"w\">  </span><span class=\"nv\">%result_value.sroa.6.0..sroa_idx</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">getelementptr</span><span class=\"w\"> </span><span class=\"k\">inbounds</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">36</span>\n<span class=\"w\">  </span><span class=\"k\">store</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"nv\">%insert_record_field1.fca.0.0.5.extract.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%result_value.sroa.6.0..sroa_idx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">4</span>\n<span class=\"w\">  </span><span class=\"nv\">%result_value.sroa.7.0..sroa_idx</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">getelementptr</span><span class=\"w\"> </span><span class=\"k\">inbounds</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">40</span>\n<span class=\"w\">  </span><span class=\"k\">store</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"nv\">%insert_record_field1.fca.0.0.6.extract.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%result_value.sroa.7.0..sroa_idx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span>\n<span class=\"w\">  </span><span class=\"nv\">%result_value.sroa.8.0..sroa_idx</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">getelementptr</span><span class=\"w\"> </span><span class=\"k\">inbounds</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">44</span>\n<span class=\"w\">  </span><span class=\"k\">store</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"nv\">%insert_record_field1.fca.0.0.7.extract.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%result_value.sroa.8.0..sroa_idx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">4</span>\n<span class=\"w\">  </span><span class=\"nv\">%result_value.sroa.9.0..sroa_idx</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">getelementptr</span><span class=\"w\"> </span><span class=\"k\">inbounds</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">45</span>\n<span class=\"w\">  </span><span class=\"k\">store</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"nv\">%insert_record_field1.fca.0.0.8.extract.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%result_value.sroa.9.0..sroa_idx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">1</span>\n<span class=\"w\">  </span><span class=\"nv\">%result_value.sroa.11.0..sroa_idx</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">getelementptr</span><span class=\"w\"> </span><span class=\"k\">inbounds</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">48</span>\n<span class=\"w\">  </span><span class=\"k\">store</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"nv\">%insert_record_field1.fca.0.1.extract.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%result_value.sroa.11.0..sroa_idx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span>\n<span class=\"w\">  </span><span class=\"nv\">%result_value.sroa.13.0..sroa_idx</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">getelementptr</span><span class=\"w\"> </span><span class=\"k\">inbounds</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">56</span>\n<span class=\"w\">  </span><span class=\"k\">store</span><span class=\"w\"> </span><span class=\"kt\">i16</span><span class=\"w\"> </span><span class=\"nv\">%joinpointarg2.i.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%result_value.sroa.13.0..sroa_idx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span>\n<span class=\"w\">  </span><span class=\"nv\">%result_value.sroa.15.0..sroa_idx</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">getelementptr</span><span class=\"w\"> </span><span class=\"k\">inbounds</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"m\">64</span>\n<span class=\"w\">  </span><span class=\"k\">store</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"m\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ptr</span><span class=\"w\"> </span><span class=\"nv\">%result_value.sroa.15.0..sroa_idx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">align</span><span class=\"w\"> </span><span class=\"m\">8</span>\n</code></pre></div>\n</div></div>",
        "id": 416956868,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705726525
    },
    {
        "content": "<p>I’m pretty sure I implemented an optimization earlier to pass large structs by pointer</p>",
        "id": 416957431,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1705727057
    },
    {
        "content": "<p>So it’s not clear to me why this is happening</p>",
        "id": 416957442,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1705727067
    },
    {
        "content": "<p>I think the current state of things is lots of allocas and memcpy, but everything passed around by pointer. LLVM when optimizing introduces most of these direct data movement as it tries to remove memcpys. At least that is my current understanding</p>",
        "id": 416957483,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705727138
    },
    {
        "content": "<p>One example of extra allocas is that if we return by pointer. Instead of writing straight to the output pointer, we make an alloca, write to that, then memcpy from the alloca to the output. llvm tends to seem to optimize that reasonably, but I'm not sure if it always figures out more complex cases.</p>",
        "id": 416957562,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705727213
    },
    {
        "content": "<p>One other thought:</p>\n<p>The real issue may be that we need our own inlining or smarter closure data sharing.</p>\n<p>Cause fundamentally, In one of these chains, we should only need actually copy and store all of this extra closure data when going to the host.</p>\n<p><del>As it stands currently, for every modification to a task, I think we add another copying of the closure data.</del><br>\n<del>Take calling the W4.rand task</del></p>\n<p>Actually that seems wrong, if I just change a number of random generation task, I won't actually have any issues. (Though maybe llvm just understands that basic direct form of optimization).</p>",
        "id": 416958385,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705728028
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 416958390,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705728038
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 416958491,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705728099
    },
    {
        "content": "<p>That said, if we were smart enough to realize the data being capture was the same, maybe we could share it an elide the copy.</p>",
        "id": 416958548,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705728138
    },
    {
        "content": "<p>Those are at least my ramblings as I try to figure this out without really understanding how all of the pieces fit together.</p>",
        "id": 416958568,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705728163
    },
    {
        "content": "<p>Ok...just found something useful. I am pretty sure the issue is inlining with captures.</p>\n<p>Big captures -&gt; larger function -&gt; less inlining -&gt; missing optimizations and tons of copying</p>\n<p>Really simple function:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">update</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">model</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">r1</span><span class=\"w\"> </span><span class=\"ow\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">W4</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span>\n<span class=\"w\">    </span><span class=\"n\">r2</span><span class=\"w\"> </span><span class=\"ow\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">W4</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span>\n<span class=\"w\">    </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">ok</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">model</span><span class=\"w\"> </span><span class=\"o\">&amp;</span>\n<span class=\"w\">            </span><span class=\"n\">r1</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"o\">.</span><span class=\"n\">addWrap</span><span class=\"w\"> </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">r1</span><span class=\"w\"> </span><span class=\"n\">r1</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">r2</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"o\">.</span><span class=\"n\">addWrap</span><span class=\"w\"> </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">r2</span><span class=\"w\"> </span><span class=\"n\">r2</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>This generates essentially <a href=\"https://gist.github.com/bhansconnect/7a72620e593c8cf00ec01b69e8b669c9\">what I would expect</a>.</p>\n<ol>\n<li>Load the struct</li>\n<li>call the 2 rand tasks</li>\n<li>add them to the value from the model</li>\n<li>store the update struct</li>\n</ol>\n<p>Super small change to this:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">update</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">model</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">r1</span><span class=\"w\"> </span><span class=\"ow\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">W4</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span>\n<span class=\"w\">    </span><span class=\"n\">r2</span><span class=\"w\"> </span><span class=\"ow\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">W4</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span>\n<span class=\"w\">    </span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"n\">ok</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">model</span><span class=\"w\"> </span><span class=\"o\">&amp;</span>\n<span class=\"w\">            </span><span class=\"n\">r1</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">r1</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">r1</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">r2</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">r2</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">r2</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>Now we have a \"real\" num.add function that has to deal with panicking. Normally it would be inlined, but it is more complex. especially when consider closure captures. </p>\n<p>So here is <a href=\"https://gist.github.com/bhansconnect/74fef58013ca61f8ff4182bd3f1e4377\">what is generated</a>:</p>\n<ol>\n<li>Load the struct</li>\n<li>call 1 rand task</li>\n<li>Store the struct (with extra rand value)</li>\n<li>call 1 rand task</li>\n<li>call add passing in a pointer to the struct<ol>\n<li>load the struct</li>\n<li>do a panicking addition</li>\n<li>store the struct (with result of additions)</li>\n</ol>\n</li>\n<li>load the struct again</li>\n<li>store the update struct</li>\n</ol>\n<p>I think fundamentally, this is what I am hitting that is leading to crazy amounts of code gen.</p>",
        "id": 416960199,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705730094
    },
    {
        "content": "<p>But yeah, I do think we start with emitting memcpy for this, but llvm removes them and instead inserts element by element copy cause the size is small enough and know.</p>\n<p>Also, I guess the final version that I listed here with the 7 steps is technically what we expect it to do. Cause the capture are being modified.</p>\n<p>I guess I am left thinking that we need either (possibly multiple of):</p>\n<ol>\n<li>Our own inlining to reduces places with captures</li>\n<li>Some way to reuse captures without copying</li>\n<li>So way to add values to a capture without creating a new aggregate store space (like passing each capture arg as a separate arg of the function, that way don't need to grow a large capture when adding a single new element).</li>\n<li>Some sort of special way to store really long lived data that would otherwise just be copied between all captures.</li>\n</ol>\n<p>Anyway, sorry for the wall of text, just really want to figure this out and unblock any reasonably sized roc-wasm4 game.</p>",
        "id": 416961007,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705730833
    },
    {
        "content": "<p>I'm probably missing it, so sorry about that, but what exactly is the problem?</p>",
        "id": 416962982,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1705732707
    },
    {
        "content": "<p>If we're passing by pointer and doing a memcpy and LLVM is desugaring that to stack moves, is that worth trying to avoid? Is it a compile time increase or something else?</p>",
        "id": 416963010,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1705732745
    },
    {
        "content": "<p>We could implement a destination-driven compilation scheme, where you pass around the location you want a value to be compiled to, rather than taking an opaque value (or pointer) and working off of that. I've done that in the past and it's very effective at removing trivial loads/stores</p>",
        "id": 416963110,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1705732819
    },
    {
        "content": "<p>Fundamentally, I am trying to compile Roc to target smaller binary size.</p>\n<p>For <a href=\"https://github.com/lukewilliamboswell/roc-wasm4\">roc-wasm4</a>, the entire application is constrained to 64KB. I have been digging into this cause I was really suprised when adding a couple of fields to a struct (like 5 U32s or so) lead to my binary growing by 30+ KB. This was before even using the data for anything.</p>\n<p>Originally, I thought that was a bug. I still think it is a behavior that shouldn't happen, but I guess it may be working as expected. So may more a case of opt-size not functioning cause of tons and tons of binary bloat from just copying data to and from closure captures.</p>",
        "id": 416963783,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705733450
    },
    {
        "content": "<p>Found at least one ok sized win:</p>\n<p>In the case we are building a struct that will be passed by reference, build it directly in the alloca instead of building a giant ssa value and then storing it. When building it, directly memcpy values in instead of loading and then storing the values.</p>\n<p>before: 76KB<br>\nafter: 68KB</p>",
        "id": 416966777,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705735881
    },
    {
        "content": "<p>Yes, this is what I refer to by destination driven compilation</p>",
        "id": 417001231,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1705765581
    },
    {
        "content": "<p>that is kind of what TRMC does so we may have a lot of the primitives for that already actually. Though with TRMC you don't cross function boundaries</p>",
        "id": 417002023,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1705766282
    },
    {
        "content": "<p>It may not matter for most types, but from some llvm forum I was reading yesterday. Apparently llvm sucks at optimizing aggregate values (structs and arrays) that are used in SSA registers unless they actually fit in a single passable value (so 2 or less real register and actually passed around in registers).</p>\n<p>The recommendation is to always use them from alloca/as pointers and never materialize them in SSA register form.</p>",
        "id": 417004896,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705768724
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/issues/6404\">#6404</a></p>",
        "id": 417010272,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705772936
    }
]