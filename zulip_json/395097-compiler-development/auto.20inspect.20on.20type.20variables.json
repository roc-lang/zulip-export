[
    {
        "content": "<p>From <a class=\"stream-topic\" data-stream-id=\"231634\" href=\"/#narrow/stream/231634-beginners/topic/Type.20variables.20implement.20two.20abilities.3F\">#beginners &gt; Type variables implement two abilities?</a>, can we make it so that you never have to specify <code>where a implements Inspect.Inspect</code>.</p>\n<p>Make this no longer an error:</p>\n<div class=\"codehilite\"><pre><span></span><code>» x : a -&gt; Str\n… x = \\v -&gt; Inspect.toStr v\n\n── TYPE MISMATCH ───────────────────────────────────────────────────────────────\n\nThis 1st argument to toStr has an unexpected type:\n\n5│      x = \\v -&gt; Inspect.toStr v\n                                ^\n\nThis v value is a:\n\n    a\n\nBut toStr needs its 1st argument to be:\n\n    val where val implements Inspect\n</code></pre></div>\n<p>All types always implement <code>Inspect</code>, so it should never need to be specified.</p>",
        "id": 417108382,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705860933
    },
    {
        "content": "<p>I was thinking this probably could be special handling for <code>Inspect.Inspect</code>.</p>",
        "id": 417108446,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705860979
    },
    {
        "content": "<p>Richard commented that there might be a smarter way to do this:</p>\n<blockquote>\n<p>yeah I think if we expose <code>Inspect.inspect</code> as <code>* -&gt; f where f implements InspectFormatter</code> then <code>Inspect.toStr</code> can be implemented in terms of that and we're good</p>\n</blockquote>",
        "id": 417108465,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705861009
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> any thoughts on this?</p>",
        "id": 417108515,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705861082
    },
    {
        "content": "<p>Tbh I wouldn't do this</p>",
        "id": 417108612,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1705861174
    },
    {
        "content": "<p>you could probably special case it but I'm pretty sure it would complicate the implementation</p>",
        "id": 417108675,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1705861205
    },
    {
        "content": "<p>how often is this case going to come up? I think it's likely not that frequent. Adding a suggestion to the error message to add the ability constraint is probably enough.</p>",
        "id": 417108700,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1705861236
    },
    {
        "content": "<p><code>* -&gt; f where f implements InspectFormatter</code> would not work without punching a hole in the type system</p>",
        "id": 417108718,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1705861260
    },
    {
        "content": "<blockquote>\n<p>you could probably special case it but I'm pretty sure it would complicate the implementation</p>\n</blockquote>\n<p>Wouldn't be as simple as saying all type variable always implement inspect? Like just appending it to a list?</p>",
        "id": 417108876,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705861413
    },
    {
        "content": "<p>yes, but that's not a trivial thing. Every type starts off as a variable, so you would have to have the list for every variable.</p>",
        "id": 417114340,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1705865949
    },
    {
        "content": "<p>Make sense. Then nvm.</p>",
        "id": 417117262,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705867957
    },
    {
        "content": "<p>A nice to have, but definitely not worth any sort of complexity cause it is trivial for an end user to fix and is only hit with type variables</p>",
        "id": 417117291,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705867984
    }
]