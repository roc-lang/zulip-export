[
    {
        "content": "<p>For a question form github; once we have map2 to execute tasks in parallel I expect we'll be able to provide a mapN as well right for any number of tasks?</p>",
        "id": 421848544,
        "sender_full_name": "Anton",
        "timestamp": 1708086245
    },
    {
        "content": "<p>yes you can just recursively use <code>map2</code> to map over N tasks</p>",
        "id": 421849934,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1708086937
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281543\">Folkert de Vries</span> <a href=\"#narrow/stream/395097-compiler-development/topic/map2.20to.20mapN/near/421849934\">said</a>:</p>\n<blockquote>\n<p>yes you can just recursively use <code>map2</code> to map over N tasks</p>\n</blockquote>\n<p>A follow-up question:</p>\n<p>This would still mean that only 2 tasks get executed in parallel, is that correct? This just makes it easier to hand off multiple tasks to the runtime without oneself having to do the recursive call.</p>",
        "id": 442267056,
        "sender_full_name": "mainrs",
        "timestamp": 1717424290
    },
    {
        "content": "<p>No, they could all get executed in parallel</p>",
        "id": 442300480,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1717431146
    },
    {
        "content": "<p>The platform can still gather them and run them in parallel because they are not chained</p>",
        "id": 442300920,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1717431231
    },
    {
        "content": "<p>To be clear, the functions (passed to map2) that combine the results of 2 tasks would not run in parallel, but the actual tasks in the platform would</p>",
        "id": 442306095,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1717432189
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>    R\n   / \\\n  S1  S2\n / \\  / \\\nA   B C  D\n</code></pre></div>\n<p>Root spawns S1 and S2 which are just spawner tasks. S1 and S2 spawn A, B, C, and D which can all run in parallel. So you have 4 tasks running in parallel but only use map2.</p>",
        "id": 442312116,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717433370
    },
    {
        "content": "<p>Would a <code>mapN</code> then make sense? It receives a list of tasks, and subdivides them into calls to <code>map2</code>? </p>\n<p>For me at least, running the tasks in parallel is the feature I am looking for. That the combination does not happen in parallel is totally fine for me.</p>",
        "id": 443072596,
        "sender_full_name": "mainrs",
        "timestamp": 1717683733
    },
    {
        "content": "<blockquote>\n<p>Would a <code>mapN</code> then make sense?</p>\n</blockquote>\n<p>I think so</p>",
        "id": 443088706,
        "sender_full_name": "Anton",
        "timestamp": 1717687457
    },
    {
        "content": "<p>I think the name should communicate whether it's running the tasks in parallel or sequentially</p>",
        "id": 443089443,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717687626
    },
    {
        "content": "<p>e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">sequence</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"nv\">ok</span><span class=\"w\"> </span><span class=\"nv\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"nv\">ok</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">err</span>\n<span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">concurrent</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"nv\">ok</span><span class=\"w\"> </span><span class=\"nv\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"nv\">ok</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">err</span>\n</code></pre></div>\n<p>EDIT: I realized the return type should be <code>Task (List ok) err</code> - previously I had <code>Task ok err</code></p>",
        "id": 443090135,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717687789
    },
    {
        "content": "<p>something like that</p>",
        "id": 443090256,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717687809
    },
    {
        "content": "<p>like if you're doing a list of \"print to standard out\" tasks, you probably don't want those to run concurrently <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 443090470,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717687860
    },
    {
        "content": "<p>parallel may be an easier word compared to concurrent</p>",
        "id": 443090605,
        "sender_full_name": "Anton",
        "timestamp": 1717687899
    },
    {
        "content": "<p>Obviously, <code>Task.hopefully_parallel_but_maybe_only_concurrent</code>. Just to clarify things.</p>",
        "id": 443091328,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717688035
    },
    {
        "content": "<p>yeah the problem is it couldn't be guaranteed to be parallel</p>",
        "id": 443093250,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717688328
    },
    {
        "content": "<p>because that would depend on the platform</p>",
        "id": 443093332,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717688340
    },
    {
        "content": "<p>so <code>parallel</code> wouldn't be accurate sometimes</p>",
        "id": 443093559,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717688378
    },
    {
        "content": "<p>What would <code>Task.concurrent</code> do if one of the tasks errored?</p>",
        "id": 443154561,
        "sender_full_name": "timotree",
        "timestamp": 1717705640
    },
    {
        "content": "<p>that's an excellent question! Personally I'd expect all the tasks in the list to run to completion no matter what, so I think that at the end if any of them failed, the returned <code>Task</code> would have errored out with the error of whichever one failed first</p>",
        "id": 443190209,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717723939
    },
    {
        "content": "<p>I could also see an argument for the return type being <code>-&gt; Task (List ok) (List err)</code> and it accumulates all the errors of all the ones that failed</p>",
        "id": 443190250,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717723970
    },
    {
        "content": "<p>or maybe even <code>-&gt; Task (List ok) (err, List err)</code> since there would always be at least one <code>err</code> if it ended up failing</p>",
        "id": 443190289,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717724014
    },
    {
        "content": "<p>You could also give it a folder function</p>",
        "id": 443192120,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717725483
    },
    {
        "content": "<p><code>Task (List ok) (List err)</code> only lets you return <em>either</em> a list of errors or a list of success values. If some tasks failed and others succeeded you want <em>both</em></p>",
        "id": 443205057,
        "sender_full_name": "timotree",
        "timestamp": 1717732927
    },
    {
        "content": "<p>Yeahs should be technically <code>Task (List Result ok err) otherErr</code> when otherErr is for failure to spawn tasks or something else platform related.....though I guess you could just leave the OtherError empty and put it in the list</p>",
        "id": 443205760,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717733278
    },
    {
        "content": "<p>I guess looking at rust for API inspiration. They have</p>\n<p><code>Task (List ok) err</code> which returns the first error and cancels all tasks on failure</p>",
        "id": 443206375,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717733574
    },
    {
        "content": "<p>I would expect this is actually wanted user API 85% of the time</p>",
        "id": 443206407,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717733605
    },
    {
        "content": "<p>Oh wait, actually no, important caveat. Rust you would spawn them all in a loop and join separately and that makes a huge difference</p>",
        "id": 443206514,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717733656
    },
    {
        "content": "<p>Would be as if you had <code>Task.spawn : Task ok err -&gt; Task (Future ok err) []</code> and then a separate way to join the handle. Either manually or all in a list.</p>",
        "id": 443206593,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717733724
    },
    {
        "content": "<p>Yeah, I think Task.concurent is missing that you likely want to be able to spawn tasks and later query them. Or run code to decide what to span linearly. So I think we want some sort of intermediate Future type for this flow.</p>",
        "id": 443206685,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717733785
    },
    {
        "content": "<p>I just realize that a Task and Future are the same thing. So a task that spawns a thread and return a future to join back the results later would be:</p>\n<div class=\"codehilite\"><pre><span></span><code>Task.spawn : Task ok err -&gt; Task (Task ok err) []\n</code></pre></div>\n<p>Does that make sense.....</p>",
        "id": 443207034,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717734069
    }
]