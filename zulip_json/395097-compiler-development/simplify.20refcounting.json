[
    {
        "content": "<p>I am gonna simplify the refcounting in roc. Initially, we made the max negative value be the lowest refcount. This is unnecessary and annoying for platform implementations.</p>\n<p>Instead, I plan to switch things over to the more intuitive implementation. 0 is constant. 1 through n are refcounts 1 through n. If the first bit is set, it means that refcounting needs to be atomic.</p>\n<p>As we realized a while back, with a 64bit refcount, it is impossible to roll over the refcount counter. Each references requires at least 64bits of memory. The machine is guaranteed to oom before running out of refcounts and rolling over the counter.</p>",
        "id": 491457917,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735694239
    },
    {
        "content": "<p>So instead of -max_int to -1. It is simply 1 to max_int.</p>",
        "id": 491457935,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735694269
    },
    {
        "content": "<p>I think this will just make some future refcount related changes easier</p>",
        "id": 491457972,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735694283
    },
    {
        "content": "<p>This will be a platform breaking change, but should be pretty minimal to fix</p>",
        "id": 491458022,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735694332
    },
    {
        "content": "<p>makes sense! <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 491458490,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735694812
    },
    {
        "content": "<p>As an extra note, still leaving anything atomic off. Though hopefully can eventually make it configurable in the platform. Maybe interesting to test with basic-webserver model eventually.</p>",
        "id": 491458622,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735694931
    },
    {
        "content": "<p>I continue to be amazed by how nice the m1 mac cache hierarchy and cpu is. For the nqueens benchmark (which basically spends all the time in allocating, refcounting, and freeing), here are the stats:</p>\n<p>for apple m1.<br>\nnormal refcounting as baseline so 1.00x<br>\nbranch check for atomic, followed by normal refcount: 1.07x<br>\nalways atomic refcount: 1.27x</p>\n<p>vs on my x86 linux machine.<br>\nbaseline still 1.00x<br>\nbranch check for atomic, followed by normal refcount: 1.15x<br>\nalways atomic refcount: 2.67x <span aria-label=\"poop\" class=\"emoji emoji-1f4a9\" role=\"img\" title=\"poop\">:poop:</span></p>\n<p>There is no contention. This is a single threaded app. Yet always using atomic refcounts balloons the runtime to 2.67x.</p>\n<p>Also, in raw execution speed, the m1 machine baseline runs just under 2x faster than the x86 linux baseline. The linux machine albeit a few years old, is a reasonable gaming machine with an i7.</p>",
        "id": 491560879,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735796286
    },
    {
        "content": "<p>Is using 0 as constant safe? If you have data with an refcount of 1, it gets reduced to 0. It seems error prone, that 0 is used for \"never deallocate\" and also for \"should be deallocated\".</p>",
        "id": 491605750,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1735822073
    },
    {
        "content": "<p>For platform development, it would be nice, if Roc could export functions, to set the refcount.</p>",
        "id": 491606143,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1735822241
    },
    {
        "content": "<p>If would also nice, that when the ref-count is set to \"constant\", that Roc will not write to the data or to the ref count. The effect would be, that you can call a Roc function with constant data in parallel without the need to to use atomic refcounts.</p>",
        "id": 491606440,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1735822379
    },
    {
        "content": "<p>I think 0 is reasonable. All roc refcounting always checks the old value is 1 rather than if the new value is 0. That said, if you subtract first and then check the new value is 0, that still means you can deallocate it.</p>\n<p>Due to 0 refcounts often being in read only memory you always have to early exit on 0 before doing anything else.</p>\n<p>Also, for atomics, you only get the option to check the old value, not the new value.</p>",
        "id": 491613157,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735825910
    },
    {
        "content": "<p>Yeah, I think roc should export refcounting functions</p>",
        "id": 491613219,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735825929
    },
    {
        "content": "<p>And yeah, constant refcount should also automatically propagate like atomic refcount. That way a box set to constant recount will automatically propagate to individual elements in the box on load.</p>",
        "id": 491613818,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735826202
    },
    {
        "content": "<p>Note: as long as all refcounts are set to constant correctly, you can already share data across multiple threads in roc without atomics</p>",
        "id": 491614013,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735826284
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/395097-compiler-development/topic/simplify.20refcounting/near/491614013\">said</a>:</p>\n<blockquote>\n<p>Note: as long as all refcounts are set to constant correctly, you can already share data across multiple threads in roc without atomics</p>\n</blockquote>\n<p>Is it enough to set the ref count of the most outer value to constant or does every referenced data needs a refcount of constant to be thread safe?</p>\n<p>For example, if you have a type like <code>List Str</code>, for example <code>[\"not_a_short_str1\"]</code>. And the app code does something like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>main : List Str -&gt; U64\nmain = \\list -&gt;\n  list\n  |&gt; List.map Str.trim\n  |&gt; List.len\n</code></pre></div>\n<p>would it be enough to set the refcount of the list to constant or would every element on the list needs a refcount of 0, so that Roc can be called in parallel without atomic refcounts?</p>\n<p>I think, that all elements need a refcount of 0 for the call to be threadsafe. If this is true, would it be possible for roc to export a function like <code>set_refcount_with_references(data, n)</code> that sets the refcount of all elements in data to <code>n</code>? This would be especially useful, if the platform uses a generic <code>Model</code> and therefore does not know, what type the data is?</p>",
        "id": 491615758,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1735827112
    },
    {
        "content": "<p>I want to make it propagate lazily on load.</p>",
        "id": 491618431,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735828282
    },
    {
        "content": "<p>So the outer list is set to constant</p>",
        "id": 491618453,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735828291
    },
    {
        "content": "<p>On <code>List.get</code> the loaded data will get set to constant</p>",
        "id": 491618484,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735828303
    },
    {
        "content": "<p>Same with loading data from a model via <code>Box.unbox</code></p>",
        "id": 491618564,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735828325
    },
    {
        "content": "<p>This way it is cheap to convert data to constant or atomic.</p>",
        "id": 491618632,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735828352
    },
    {
        "content": "<p>Will this be threadsafe? If the function is called many times at the same time, Roc would \"set\" the same memory to <code>0</code> many times, which does not sound safe, or would need atomics.</p>",
        "id": 491621931,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1735829781
    },
    {
        "content": "<p>What is unsafe about that? They are all setting to the same value of <code>0</code>. So all threads will opt out of refcounting the data and never deallocate. Even if the location is written to 10 times, the value each thread sees is still <code>0</code>.</p>",
        "id": 491623258,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735830428
    },
    {
        "content": "<p>I guess if a platform mixes constants with atomics, we do have to be a bit more careful, but most likely that will be a platform bug. Anything set to constant should be threadlocal. And anything set to atomic should not be constant.</p>",
        "id": 491623785,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735830691
    },
    {
        "content": "<p>If we allowed promoting an atomic that is already shared between multiple threads to constant, it would mean we need even slower atomic refcounting.</p>",
        "id": 491623936,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735830751
    },
    {
        "content": "<p>You are the expert <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> I thought, that for some reasons, that I don't understand, it is not thread safe to read and write memory at the same time, even if you are writing the same data. If two threads write a value at the same memory at the same time, it is undefined, what the result will be. But I don't know the source of this claim.</p>",
        "id": 491624093,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1735830840
    },
    {
        "content": "<p>The big concern generally speaking is that another reading thread may not see the update immediately. That is why each thread has to write 0 until eventually all threads see the data as 0.</p>",
        "id": 491624404,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735830965
    },
    {
        "content": "<p>What do you mean, that a constant value has to be threadlocal?</p>\n<p>I want to use a constant value over many threads. Will this be possible? The platform/host will make sure, that all of the parallel calls are only for reading. If a function is called, that wants to write the data, it first waits (with a RWLock), that all reading is done, then sets the refcount of the data to <code>1</code> and when Roc is finished, sets the refcount back to <code>0</code>.</p>",
        "id": 491624841,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1735831181
    },
    {
        "content": "<p>Your proposal is, that 0 is constant, and when the highest bit is set to 1, it means atomic.</p>\n<p>This is the same as saying, that positive numbers are non-atomic and negative numbers are atomic. With this explanation it is clear, that a constant value can never be atomic, since there is no <a href=\"https://en.wikipedia.org/wiki/Signed_zero\">negative zero</a>.</p>",
        "id": 491625426,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1735831420
    },
    {
        "content": "<p>I need to think about edge cases more. I initially was only thinking of propagating the atomic flag (which is always safe). It would also be nice to propagate the constants (just set a list to constant and its data on load will be set to constant). Propagating constants is only safe if the constant data contains no atomic data (aka only contains threadlocal data). Once set to constant, the data can be shared with any number of threads, but converting a list of atomic strings into a list of constants strings is not safe.</p>",
        "id": 491626418,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735831812
    },
    {
        "content": "<blockquote>\n<p>I want to use a constant value over many threads. Will this be possible? The platform/host will make sure, that all of the parallel calls are only for reading. If a function is called, that wants to write the data, it first waits (with a RWLock), that all reading is done, then sets the refcount of the data to <code>1</code> and when Roc is finished, sets the refcount back to <code>0</code>.</p>\n</blockquote>\n<p>In this case, I would just use atomic refcounting</p>",
        "id": 491626450,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735831829
    },
    {
        "content": "<p>with the RWLock still</p>",
        "id": 491626479,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735831841
    },
    {
        "content": "<p>I guess for safety of converting a list of atomic strings to a list of constants, I could not propagate the constant refcount unless the atomic is unique. That would be thread safe without pessimizing atomic refcounts elsewhere.</p>",
        "id": 491626675,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735831939
    }
]