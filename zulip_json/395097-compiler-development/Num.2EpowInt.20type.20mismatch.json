[
    {
        "content": "<p>The following snippet:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">pf</span>: <span class=\"nc\">platform</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/roc-lang/basic-cli/releases/download/0.10.0/vNe6s9hWzoTZtFmNkvEICPErI9ptji_ySjicO6CkucY.tar.br\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">exampleU8</span><span class=\"w\"> </span>: <span class=\"nc\">U8</span>\n<span class=\"n\">exampleU8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Num</span><span class=\"p\">.</span><span class=\"n\">powInt</span><span class=\"w\"> </span><span class=\"mi\">256</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n\n<span class=\"n\">main</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">crash</span><span class=\"w\"> </span><span class=\"s\">\"\"</span>\n</code></pre></div>\n<p>gives this error while building:</p>\n<div class=\"codehilite\"><pre><span></span><code>This powInt call produces:\n\n    I16, U16, F32, I32, U32, F64, I64, U64, I128, Dec, or U128\n\nBut the type annotation on exampleU8 says it should be:\n\n    U8\n</code></pre></div>\n<p>I can get around the error by replacing <code>exampleU8 = Num.powInt 256 0</code> with <code>exampleU8 = Num.toU8 (Num.powInt 256 0)</code> but I am wondering why the first form is not allowed.</p>\n<p>FYI this is a reduction from a bigger program that was crashing while building, giving the error <code>ambient lambda set function import is not a function, found: Error</code>.</p>",
        "id": 436854562,
        "sender_full_name": "JRI98",
        "timestamp": 1714731300
    },
    {
        "content": "<p>Hi John,<br>\nU8 only goes to 255, so we start we something that's not a U8 which is why we end up with something that can't be U8. Because the signature of <code>powInt</code> is <code>Int a, Int a -&gt; Int a</code> you need to use the same type in every \"spot\". The compiler does not do automatic downcasting (for good reasons probably).</p>",
        "id": 436856028,
        "sender_full_name": "Anton",
        "timestamp": 1714731867
    },
    {
        "content": "<p>hmm this is kind of subtle. it's not obvious that the value of a literal is influencing type inference in this way</p>",
        "id": 436856446,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1714732052
    },
    {
        "content": "<p>It does work with</p>\n<div class=\"codehilite\"><pre><span></span><code>exampleU8 : U8\nexampleU8 = Num.powInt 255 0\n</code></pre></div>",
        "id": 436857171,
        "sender_full_name": "Anton",
        "timestamp": 1714732369
    },
    {
        "content": "<p>This issue came up in an old codebase that I was updating to accommodate the new changes to the language. So this has worked in the past.<br>\nTo give more context, I am converting bytes (List U8) to integers.<br>\nSo, when previously I was doing</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">resultU8</span><span class=\"w\"> </span>: <span class=\"nc\">U8</span>\n<span class=\"n\">resultU8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">byte1</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Num</span><span class=\"p\">.</span><span class=\"n\">powInt</span><span class=\"w\"> </span><span class=\"mi\">256</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"n\">resultU16</span><span class=\"w\"> </span>: <span class=\"nc\">U16</span>\n<span class=\"n\">resultU16</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">byte1</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Num</span><span class=\"p\">.</span><span class=\"n\">powInt</span><span class=\"w\"> </span><span class=\"mi\">256</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">byte2</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Num</span><span class=\"p\">.</span><span class=\"n\">powInt</span><span class=\"w\"> </span><span class=\"mi\">256</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>now I need to do</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">resultU8</span><span class=\"w\"> </span>: <span class=\"nc\">U8</span>\n<span class=\"n\">resultU8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">byte1</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">Num</span><span class=\"p\">.</span><span class=\"n\">toU8</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Num</span><span class=\"p\">.</span><span class=\"n\">powInt</span><span class=\"w\"> </span><span class=\"mi\">256</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"n\">resultU16</span><span class=\"w\"> </span>: <span class=\"nc\">U16</span>\n<span class=\"n\">resultU16</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Num</span><span class=\"p\">.</span><span class=\"n\">toU16</span><span class=\"w\"> </span><span class=\"n\">byte1</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Num</span><span class=\"p\">.</span><span class=\"n\">powInt</span><span class=\"w\"> </span><span class=\"mi\">256</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Num</span><span class=\"p\">.</span><span class=\"n\">toU16</span><span class=\"w\"> </span><span class=\"n\">byte2</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Num</span><span class=\"p\">.</span><span class=\"n\">powInt</span><span class=\"w\"> </span><span class=\"mi\">256</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>(<code>byte1</code> and <code>byte2</code> are of type <code>U8</code>)<br>\nThe new version is more verbose but arguably more correct as there are no hidden upcasts/downcasts.</p>",
        "id": 436864240,
        "sender_full_name": "JRI98",
        "timestamp": 1714735389
    },
    {
        "content": "<p>I think really you should be using bitshifts here</p>",
        "id": 436864737,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1714735613
    },
    {
        "content": "<p>and really really we should have \"turn bytes into little/big/native endian number of a wider type\" functions in the standard library</p>",
        "id": 436864878,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1714735681
    },
    {
        "content": "<p>In an even earlier version of the code I was using <code>Num.bytesToUxx</code> but they went away a couple of months ago</p>",
        "id": 436865137,
        "sender_full_name": "JRI98",
        "timestamp": 1714735793
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> what's our plan here?</p>",
        "id": 436867300,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1714736736
    },
    {
        "content": "<p>I think the last discussion about this left it at: this is easy enough to do in userland/a library with bit shifts. So no need to do it in the standard.</p>",
        "id": 436901784,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1714748369
    },
    {
        "content": "<p>I think an annoyance with doing it in the standard is that you don't want to return a list (unnecessary allocation).</p>",
        "id": 436901947,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1714748404
    },
    {
        "content": "<p>Instead, you are stuck with N different functions that return different size tuples.</p>",
        "id": 436902098,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1714748441
    },
    {
        "content": "<p>Since that didn't seem like a great API, I think it was left for a user to just do the bitshifting.</p>",
        "id": 436902216,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1714748471
    }
]