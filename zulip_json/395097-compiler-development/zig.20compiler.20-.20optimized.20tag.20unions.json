[
    {
        "content": "<p>something I'd like to <em>not</em> port over from our current implementation is tag union optimizations other than the specific case of single-tag unions getting unwrapped</p>",
        "id": 497317588,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738550306
    },
    {
        "content": "<p>the reason for this is that tag unions which compile to a normal tagged union are very straightforward to generate glue for, whereas right now tag unions are super hard to generate glue for because we have around 4 or 5 completely different representations we compile to</p>",
        "id": 497317800,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738550481
    },
    {
        "content": "<p>at the time we didn't realize what effect they would have on glue (glue didn't actually exist at the time) but now with the benefit of hindsight I think they're not worth it</p>",
        "id": 497317884,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738550525
    },
    {
        "content": "<p>What is the plan for recursive tags?</p>",
        "id": 497317904,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738550546
    },
    {
        "content": "<p>they have to be nominal</p>",
        "id": 497317910,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738550553
    },
    {
        "content": "<p>those are different - in that case it's not an optimization, we just have to do special heap stuff unavoidably</p>",
        "id": 497317957,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738550579
    },
    {
        "content": "<p>I would have to relook over the tag types, but I think this makes sense. I think most of the complex forms relate to recursive tags anyway.</p>\n<p>I assume we would make all tags be equivalent <code>(enough bytes for all fields with max field alignment, tag id)</code>. If there are no fields, this would become only <code>tag id</code>.</p>",
        "id": 497318328,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738550866
    },
    {
        "content": "<p>And the only exception is single tags which are represented as the underlying type.</p>",
        "id": 497318389,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738550895
    },
    {
        "content": "<p>yep!</p>",
        "id": 497318543,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738551021
    },
    {
        "content": "<p>what about box? Make it a bespoke builtin type?</p>",
        "id": 497318560,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738551043
    },
    {
        "content": "<p>yeah just like today</p>",
        "id": 497318580,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738551058
    },
    {
        "content": "<p>I think it is currently the main (only?) use of NonNullableWrapped tags</p>",
        "id": 497318601,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738551076
    },
    {
        "content": "<p>today, box is actually a tag, not a standalone type.</p>",
        "id": 497318617,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738551100
    },
    {
        "content": "<p>ha, TIL!</p>",
        "id": 497318691,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738551138
    },
    {
        "content": "<p>yeah I think it should be standalone</p>",
        "id": 497318701,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738551149
    },
    {
        "content": "<p>doesn't it need special semantics when you put a closure in it? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 497318716,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738551167
    },
    {
        "content": "<p>maybe that has never worked, which would explain the problems with trying to pass <code>Box</code>ed closures to the host <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 497318771,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738551220
    },
    {
        "content": "<p>I don't think boxed closures work today</p>",
        "id": 497318782,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738551231
    },
    {
        "content": "<p>that representation would certainly explain why!</p>",
        "id": 497318847,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738551253
    },
    {
        "content": "<p>Yeah, from looking at the tag variants, we have:</p>\n<ul>\n<li>NonRecursive: what we want to keep</li>\n<li>Recursive, NonNullableUnwrapped, NullableWrapped, NullableUnwrapped: various forms of recursive tags with different potential optimizations. With box being a fake <code>NonNullableUnwrapped</code>.</li>\n</ul>",
        "id": 497319253,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738551550
    },
    {
        "content": "<p>Unwrapped means you don't need a tag id (either only one variant or two variants with one being null)</p>",
        "id": 497319366,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738551614
    },
    {
        "content": "<p>and Nullable meaning it can be null</p>",
        "id": 497319389,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738551628
    },
    {
        "content": "<p>I'm sure these matter for classic cons lists. I'm not sure how much they matter for other structures. I would assume a tree that instead of using lists uses a specific number of nodes in a tag could gain value from some of these patterns, but not sure that really matters for normal roc code. Recursive tags are pretty rare in roc due to the basis being flat lists</p>",
        "id": 497319635,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738551764
    },
    {
        "content": "<p>If we were to keep any of these optimization, I think we would only want to keep tagged pointers if we have less than N tags. That is likely to make a meaningful perf impact due to being able to check the tag id without following a pointer indirection. I don't think any of the other changes would have significant gains over that.</p>",
        "id": 497319835,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738551889
    },
    {
        "content": "<p>Also, are we planning to allow recursive types without tags? Like <code>Node a: List (U64, Node a)</code></p>",
        "id": 497319988,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738551985
    },
    {
        "content": "<p>Totally fine if it requires being nominal, but I think that is a common annoying case to hit in the current compiler.</p>",
        "id": 497320021,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738552018
    },
    {
        "content": "<p>no, Ayaz wrote a thing (I forget where) about how they cause a big problem</p>",
        "id": 497320182,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738552128
    },
    {
        "content": "<p>and the best solution seems to be disallowing them</p>",
        "id": 497320196,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738552141
    },
    {
        "content": "<p>that was the main motivation for replacing opaque types with custom tag unions</p>",
        "id": 497320222,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738552162
    },
    {
        "content": "<p>(well, the original motivation)</p>",
        "id": 497320237,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738552178
    },
    {
        "content": "<p>so that we could still have recursive sum types that could be passed to the host (which opaque types can't)</p>",
        "id": 497320321,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738552231
    },
    {
        "content": "<p>anyway, we can always reintroduce some number of these in the future if we want to, but right now I think it's way more important to get reliable, working glue</p>",
        "id": 497320379,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1738552277
    },
    {
        "content": "<p>This:</p>\n<blockquote>\n<p>Richard Feldman: no, Ayaz wrote a thing (I forget where) about how they cause a big problem</p>\n<p>Richard Feldman: and the best solution seems to be disallowing them</p>\n</blockquote>\n<p>Is in response to this?</p>\n<blockquote>\n<p>Also, are we planning to allow recursive types without tags? Like <code>Node a: List (U64, Node a)</code></p>\n</blockquote>\n<p>correct?</p>",
        "id": 497321234,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738552945
    },
    {
        "content": "<p>If so, what would the equivalent look like with nominal types?</p>",
        "id": 497321259,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738552971
    }
]