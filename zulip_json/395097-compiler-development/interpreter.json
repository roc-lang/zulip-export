[
    {
        "content": "<p>I wonder to what extent interpreter suppose to evaluate things?</p>\n<p>Is it for memory reduction or expansion as well? Like, <code>1 + 2</code> transforms two numbers to a single number <code>3</code>. But interpretation of <code>List.repeat(42, 100)</code> expands memory (from two numbers to <code>100</code> numbers in plain list).</p>\n<p>And recursion evaluation may hang.</p>\n<p>So what are the limits? Or do we want to find them empirically?</p>",
        "id": 529659428,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1753000448
    },
    {
        "content": "<p>yeah I think we want to always evaluate</p>",
        "id": 529680288,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1753009603
    },
    {
        "content": "<p>if it expands the binary and you don't want it to do that, you can always wrap it in a thunk</p>",
        "id": 529680343,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1753009646
    },
    {
        "content": "<p>Ah, so the interpreter skips lazy evaluations. Makes sense</p>",
        "id": 529683054,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1753012194
    },
    {
        "content": "<p>I do think we could make the compiler print out updates though:</p>\n<div class=\"codehilite\"><pre><span></span><code>Warning: compiler has looped N times on the same branch (print line of code or function recured on). This might be infinite recursion.\n</code></pre></div>\n<p>Or something like that</p>",
        "id": 529689055,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1753018646
    },
    {
        "content": "<p>Also, might be worth printing a warning if you make a gigantic list that is blowing up executable size.</p>",
        "id": 529689123,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1753018722
    },
    {
        "content": "<p>I think there could be a few of these</p>",
        "id": 529689129,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1753018730
    },
    {
        "content": "<p>Just to inform users who might not inderstand</p>",
        "id": 529689163,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1753018768
    },
    {
        "content": "<p>I think it would be easy to make a gigantic constant and not realize the cost.</p>\n<p>Hopefully long term, the expensive constants can also be cached in a way that avoids recomputing them even on module recompulation</p>",
        "id": 529689264,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1753018889
    },
    {
        "content": "<p>But anyway...thoughts are just long term ideas</p>",
        "id": 529689273,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1753018899
    }
]