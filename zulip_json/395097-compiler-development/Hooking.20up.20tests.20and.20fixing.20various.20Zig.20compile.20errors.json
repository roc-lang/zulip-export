[
    {
        "content": "<p>Yesterday, I started looking into implementing the function solving stage of the compiler. When I created a stub of a test in <code>build/solve_functions.zig</code>, it resulted in a smattering of zig compiler errors for the code paths now used.</p>\n<p>For some reason though, this test wasn't picked up by root <code>esting.refAllDeclsRecursive(@import(\"main.zig\"))</code> in <code>test.zig</code>, even though <code>solve_functions</code> was part of the dependency graph. <a href=\"https://github.com/roc-lang/roc/pull/7600\">In the PR</a>, <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> suggested that it might be helpful to manually add all stagings of the compiler, base, and collections to <code>test.zig</code> to get ahead of any other errors that other folks might run into. So this morning, I did that and have been working through this next set of errors. But before I get too far, I wanted to double check:</p>\n<ol>\n<li>That other folks think this is worth doing </li>\n<li>That touching lots of these shared files won't conflict with other folks' work</li>\n</ol>",
        "id": 499075475,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1739299284
    },
    {
        "content": "<p>The errors range from trivial (typos like <code>Id -&gt; Idx</code>) to more complicated (like needing read/understand functions like <code>base.Package.addDependencyToPackage</code> to fix type mismatches)</p>",
        "id": 499075955,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1739299422
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> may already be looking into this?</p>",
        "id": 499076859,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739299753
    },
    {
        "content": "<p>No, I was busy yesterday. I was planning on doing it today, but if <span class=\"user-mention\" data-user-id=\"341568\">@Jared Ramirez</span> I'm okay with that!</p>",
        "id": 499077577,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739299992
    },
    {
        "content": "<p>Anyway, this is the time to do this! Break away</p>",
        "id": 499078947,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739300458
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> can you help me understand what <a href=\"https://github.com/roc-lang/roc/blob/main/src/base/Ident.zig#L71\"><code>exposing_modules</code> is doing in the <code>Ident.Store</code></a>?</p>",
        "id": 499114421,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1739315286
    },
    {
        "content": "<p>From how it's used, it seems like it used to create a connection between an Ident and a Module (namely, which module exposes it), but since the type is <code>Astd.ArrayList(base.Module.Idx)</code> I don't see exactly how.</p>",
        "id": 499114568,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1739315383
    },
    {
        "content": "<p>I fixed a bunch of things in safe_list.zig</p>",
        "id": 499114719,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1739315451
    },
    {
        "content": "<p>Based on these functions:</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">getExposingModule</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">Store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">idx</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Idx</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">base</span><span class=\"p\">.</span><span class=\"n\">Module</span><span class=\"p\">.</span><span class=\"n\">Idx</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">exposing_modules</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">[</span><span class=\"nb\">@as</span><span class=\"p\">(</span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">@intFromEnum</span><span class=\"p\">(</span><span class=\"n\">idx</span><span class=\"p\">))];</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"c1\">/// Set the module that exposes this ident.</span>\n<span class=\"w\">    </span><span class=\"c1\">///</span>\n<span class=\"w\">    </span><span class=\"c1\">/// NOTE: This should be called as soon as an ident is encountered during</span>\n<span class=\"w\">    </span><span class=\"c1\">/// canonicalization to make sure that we don't</span>\n<span class=\"w\">    </span><span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">setExposingModule</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">Store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">idx</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Idx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">exposing_module</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">base</span><span class=\"p\">.</span><span class=\"n\">Module</span><span class=\"p\">.</span><span class=\"n\">Idx</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">exposing_modules</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">[</span><span class=\"nb\">@as</span><span class=\"p\">(</span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">@intFromEnum</span><span class=\"p\">(</span><span class=\"n\">idx</span><span class=\"p\">))]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">exposing_module</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>It seems like the ident is the index of the array? It almost seems like this could be a map instead of an array?</p>",
        "id": 499114724,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1739315452
    },
    {
        "content": "<p>I think a number of us learned some lessons about when and when not the Zig compiler does semantic analysis on dead code</p>",
        "id": 499114791,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1739315488
    },
    {
        "content": "<p>Yeah, I've been working through lots of errors all over haha</p>",
        "id": 499114900,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1739315530
    },
    {
        "content": "<blockquote>\n<p>I fixed a bunch of things in safe_list.zig</p>\n</blockquote>\n<p>I did too, along with a bunch of other files. When will your changes go in? I'll be sure to pull in the latest and resolve conflicts before PRing</p>",
        "id": 499115025,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1739315607
    },
    {
        "content": "<blockquote>\n<p>It almost seems like this could be a map instead of an array?</p>\n</blockquote>\n<p>Maybe it's an array for perf reasons?</p>\n<p>Anyways, I figured it out. <code>Idx</code> is not an enum:</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">setExposingModule</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">Store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">idx</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Idx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">exposing_module</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">base</span><span class=\"p\">.</span><span class=\"n\">Module</span><span class=\"p\">.</span><span class=\"n\">Idx</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">exposing_modules</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">[</span><span class=\"nb\">@as</span><span class=\"p\">(</span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">idx</span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"p\">)]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">exposing_module</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 499115257,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1739315746
    },
    {
        "content": "<p>I can explain the intent of <code>exposing_modules</code> in like 2 hours properly</p>",
        "id": 499116429,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739316480
    },
    {
        "content": "<p>In short, it's just a way to say \"this <em>foo</em> ident was imported from something called \"Bar\", which may or may not exist\"</p>",
        "id": 499116510,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739316519
    },
    {
        "content": "<p>And then during your phase of the compiler, you'll need to say \"okay, when this module uses an <code>Ident.Idx</code> that points to <em>foo</em> and is from module \"Bar\", which module in my list is actually called \"Bar\"</p>",
        "id": 499116573,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739316570
    },
    {
        "content": "<p>And you'll need to be conscious that:</p>\n<ul>\n<li>multiple packages can have the same named module \"Foo\", so you have to be package-aware</li>\n<li>a package shorthand, e.g. <code>cli.Foo</code> might be the same in two different packages, so you need to handle \"cli\" per-package</li>\n</ul>",
        "id": 499118218,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739317588
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"406911\">@Andrew Kelley</span> just curious if there is a blessed zig way to do this? Should we just expect dead code to bit root and break in zig?</p>\n<p>Currently we are just <code>testing.redAllDecsRecursive</code> on a ton of file to get full type checking. I'm guessing a large part of this pain is simply that the compiler isn't actually fully wired together yet.</p>",
        "id": 499118597,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739317897
    },
    {
        "content": "<p>I have a PR enabling the tests for more files <a href=\"https://github.com/roc-lang/roc/pull/7604\">here</a>, along with the fixes for various compile errors.</p>\n<p>Full details in the PR, but after these changes, it seems like test pass, but not transitive tests:</p>\n<div class=\"codehilite\"><pre><span></span><code>[Running: zig build test --summary all]\ntest\n└─ run test failure\nerror: while executing test &#39;test.test_0&#39;, the following command terminated with signal 11 (expected exited with code 0):\n/.../roc/.zig-cache/o/7efe31480f3801691496ea52b63aabcb/test --listen=-\nBuild Summary: 3/5 steps succeeded; 1 failed; 7/7 tests passed (disable with --summary none)\ntest transitive failure\n└─ run test failure\n   └─ zig test Debug native-native-musl success 1s MaxRSS:243M\n      └─ run gencat (gencat.bin.z) cached\n         └─ zig build-exe gencat Debug native cached 3ms MaxRSS:50M\nerror: the following build command failed with exit code 1:\n/.../roc/.zig-cache/o/adcce5f042dbee170734c34f9f0af3e9/build /nix/store/5yk32f31879lfsnyv0yhl0af0v2dz9dz-zig-0.13.0/bin/zig /.../roc /home/jared/dev/github/jaredramirez/roc/.zig-cache /home/jared/.cache/zig --seed 0xb18323b4 -Zf6c0cef7264c1068 test\n[Command exited with 1]\n</code></pre></div>\n<p>Still looking into it</p>",
        "id": 499120048,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1739318598
    },
    {
        "content": "<p>Figured out the issue, details are in <a href=\"https://github.com/roc-lang/roc/pull/7604\">PR</a></p>",
        "id": 499126080,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1739322411
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/395097-compiler-development/topic/Hooking.20up.20tests.20and.20fixing.20various.20Zig.20compile.20errors/near/499118597\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"406911\">Andrew Kelley</span> just curious if there is a blessed zig way to do this? Should we just expect dead code to bit root and break in zig?</p>\n<p>Currently we are just <code>testing.redAllDecsRecursive</code> on a ton of file to get full type checking. I'm guessing a large part of this pain is simply that the compiler isn't actually fully wired together yet.</p>\n</blockquote>\n<p>Personally I never use that function because it's obviously a hack to workaround a deficiency in the language, and my code of conduct requires me to embrace the full consequences of my own actions. Plus it's ugly!</p>\n<p>Jokes aside, consider that any generic function is also not being checked unless you test it. So you can think of normal functions and generic functions in the same way.</p>\n<p>For packages where you want to maintain a compatible API, the lack of analysis can be an issue, but for an application, I question the validity of wanting an extra check on all those declarations. If you're not using them, what's the point? If you're using them then they'll be compiled. Presumably when you were writing the code you needed to verify the behavior right? So they should be covered by some kind of testing, which would ensure they are analyzed</p>",
        "id": 499640090,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1739509094
    },
    {
        "content": "<p>At the start of writing out the compiler, to enable parallel development, I started by sketching out the rough IRs for at least most of the compiler stages</p>",
        "id": 499640312,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739509202
    },
    {
        "content": "<p>So there's a lot of skeleton code that lets individual contributors work within their own lanes</p>",
        "id": 499640400,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739509222
    },
    {
        "content": "<p>But its not getting called yet, since no one has written the coordinating logic that ties everything together</p>",
        "id": 499640486,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739509244
    },
    {
        "content": "<p>So until at least the coordination of compilation stages is wired up, that's a hole that's worth the \"dead code\"</p>",
        "id": 499640622,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739509273
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"341568\">Jared Ramirez</span> <a href=\"#narrow/channel/395097-compiler-development/topic/Hooking.20up.20tests.20and.20fixing.20various.20Zig.20compile.20errors/near/499120048\">said</a>:</p>\n<blockquote>\n<p>I have a PR enabling the tests for more files <a href=\"https://github.com/roc-lang/roc/pull/7604\">here</a>, along with the fixes for various compile errors.</p>\n<p>Full details in the PR, but after these changes, it seems like test pass, but not transitive tests:</p>\n<div class=\"codehilite\"><pre><span></span><code>[Running: zig build test --summary all]\ntest\n└─ run test failure\nerror: while executing test &#39;test.test_0&#39;, the following command terminated with signal 11 (expected exited with code 0):\n/.../roc/.zig-cache/o/7efe31480f3801691496ea52b63aabcb/test --listen=-\nBuild Summary: 3/5 steps succeeded; 1 failed; 7/7 tests passed (disable with --summary none)\ntest transitive failure\n└─ run test failure\n   └─ zig test Debug native-native-musl success 1s MaxRSS:243M\n      └─ run gencat (gencat.bin.z) cached\n         └─ zig build-exe gencat Debug native cached 3ms MaxRSS:50M\nerror: the following build command failed with exit code 1:\n/.../roc/.zig-cache/o/adcce5f042dbee170734c34f9f0af3e9/build /nix/store/5yk32f31879lfsnyv0yhl0af0v2dz9dz-zig-0.13.0/bin/zig /.../roc /home/jared/dev/github/jaredramirez/roc/.zig-cache /home/jared/.cache/zig --seed 0xb18323b4 -Zf6c0cef7264c1068 test\n[Command exited with 1]\n</code></pre></div>\n<p>Still looking into it</p>\n</blockquote>\n<p>Since it didn't print a stack trace, my guess is stack overflow. <a href=\"https://github.com/ziglang/zig/issues/1616\">related</a></p>\n<p>you can use a debugger on the printed test executable to be sure.</p>",
        "id": 499640628,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1739509274
    },
    {
        "content": "<blockquote>\n<p>Then, lastly, this PR adds <code>watchexec</code> to the nix shell to easily re-run test on file change.</p>\n</blockquote>\n<p>not sure what watchexec is doing but based on the name alone, you might want to give <code>zig build --watch</code> a try <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 499640780,
        "sender_full_name": "Andrew Kelley",
        "timestamp": 1739509311
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/channel/395097-compiler-development/topic/Hooking.20up.20tests.20and.20fixing.20various.20Zig.20compile.20errors/near/499640622\">said</a>:</p>\n<blockquote>\n<p>So until at least the coordination of compilation stages is wired up, that's a hole that's worth the \"dead code\"</p>\n</blockquote>\n<p>yeah, I think it's a growing pain with how we decided to start writing roc</p>",
        "id": 499643515,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739510438
    },
    {
        "content": "<p>Likely we want to switch to something normal once we have the pieces of the compiler connected</p>",
        "id": 499643574,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739510467
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> how hard would it be to make a minimal coordinate that just calls everything linearly? I guess it is more complex than that due to imports?</p>",
        "id": 499643707,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739510532
    },
    {
        "content": "<p>I have two entire days free this weekend to try it. Yes imports make it a little complex, but just stubbing out some functions and properly implementing the overall shape should be doable</p>",
        "id": 499643817,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739510596
    },
    {
        "content": "<p>Also, to be clear, now that we have the recursive import hack, this isn't too important, but clearly will be needed at some point</p>",
        "id": 499644050,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1739510704
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/stream/395097-compiler-development/topic/Hooking.20up.20tests.20and.20fixing.20various.20Zig.20compile.20errors/near/499643817\">said</a>:</p>\n<blockquote>\n<p>I have two entire days free this weekend</p>\n</blockquote>\n<p>this has happened to me once in the ~2.5 years since I had a kid. I remember it vividly. I got so much done!</p>",
        "id": 499644568,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1739510948
    },
    {
        "content": "<p>My goal is to finish the rewrite before you get any more free time so I can rename it to Sam's Roc</p>",
        "id": 499644635,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739510993
    },
    {
        "content": "<p>I've been clearing these next two months because I really think we can have the core of things working by then</p>",
        "id": 499644739,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739511025
    },
    {
        "content": "<p>Everything else is incremental</p>",
        "id": 499644754,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739511036
    }
]