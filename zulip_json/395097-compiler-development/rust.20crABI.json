[
    {
        "content": "<p>Not sure how this isn't bigger news and I missed it, but rust is making their own abi (just in the experiment phase, but an official rfc experiment). </p>\n<p>The abi would enable the common cases around ownership and borrowing to be preserved when doing ffi. Also, it would allow more complex rust types to be passed. No more being limited to <code>char*</code> for strings or being unable to pass results over ffi. They even want to support some closures and trait objects with attached crABI methods that can be called from the other language.</p>\n<p>Side note: found this on the zig subreddit with someone thinking it would be a great way to put all of your unsafe rust in zig. Instead of an unsafe block, just a crABI call to a zig function.</p>\n<p><a href=\"https://github.com/rust-lang/compiler-team/issues/631\">https://github.com/rust-lang/compiler-team/issues/631</a></p>",
        "id": 391519948,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1694963206
    },
    {
        "content": "<p>They even want to support <code>extern \"crabi\" async fn</code></p>\n<p>I woulder if we could eventually make a roc call support that and run directly on the rust state machine for async. Just interesting ideas.</p>",
        "id": 391520331,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1694963307
    },
    {
        "content": "<p>so like <code>--target</code> for ABIs...I'd never really thought about building for any other than C! (Let's be honest, C ABI is a big enough project as it is...) I guess Swift also has its own ABI?</p>",
        "id": 391596003,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1694999585
    },
    {
        "content": "<p>I see two main potential gains:</p>\n<ol>\n<li>Rust calling rust shared or static libraries can use way more rust types and specify borrowing semantics. This would all be in totally safe rust.</li>\n<li>It enables writing safe ffi to other languages. So you could have a safe rust function that calls into zig and zig does anything unsafe.</li>\n</ol>\n<p>An important part of this work is that you get more borrow checker validation when calling something over ffi. Less likely to mess something up in unsafe code wrapping a function when you instead clearly define the ownership and borrowing in the ffi definition.</p>",
        "id": 391601706,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1695002722
    }
]