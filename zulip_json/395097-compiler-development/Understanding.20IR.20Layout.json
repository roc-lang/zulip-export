[
    {
        "content": "<p>I'm trying to understand this Debug output for a Layout:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Function</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"p\">[],</span>\n<span class=\"w\">    </span><span class=\"n\">LambdaSet</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">set</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"n\">Test</span><span class=\"p\">.</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">InLayout</span><span class=\"p\">(</span><span class=\"n\">STR</span><span class=\"p\">)]),</span>\n<span class=\"w\">        </span><span class=\"p\">],</span>\n<span class=\"w\">        </span><span class=\"n\">args</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[],</span>\n<span class=\"w\">        </span><span class=\"n\">ret</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">InLayout</span><span class=\"p\">(</span><span class=\"n\">STR</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">representation</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">InLayout</span><span class=\"p\">(</span><span class=\"n\">STR</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">full_layout</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">InLayout</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"mi\">22</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"n\">InLayout</span><span class=\"p\">(</span><span class=\"n\">STR</span><span class=\"p\">),</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p>I took this as a function layout with no args, returning a string.  But the lambda set has a function that has a string argument.  Am I understanding this wrong (without reading all 10k+ lines of mono/src/ir.rs)?</p>",
        "id": 495316954,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737561522
    },
    {
        "content": "<p>This is a RawFunctionLayout to be clear</p>",
        "id": 495317148,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737561575
    },
    {
        "content": "<p>The source of the entire program is:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"w\">            </span><span class=\"nv\">app</span><span class=\"w\"> </span><span class=\"s\">\"test\"</span><span class=\"w\"> </span><span class=\"nv\">provides</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nv\">to</span><span class=\"w\"> </span><span class=\"s\">\"./platform\"</span>\n\n<span class=\"w\">            </span><span class=\"nv\">main</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span>\n<span class=\"w\">            </span><span class=\"nv\">main</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">                </span><span class=\"nv\">g</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span>\n<span class=\"w\">                </span><span class=\"nv\">g</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"s\">\"hello world\"</span>\n\n<span class=\"w\">                </span><span class=\"nv\">get_g</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span>\n<span class=\"w\">                </span><span class=\"nv\">get_g</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">||</span><span class=\"w\"> </span><span class=\"nv\">g</span>\n\n<span class=\"w\">                </span><span class=\"nv\">get_g</span><span class=\"p\">()</span>\n</code></pre></div>\n<p>And this layout is for <code>get_g</code>, a zero-arg closure defined inside main</p>",
        "id": 495317388,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737561639
    },
    {
        "content": "<p>My assumption is that the layout should make sure to include the argument for the string which is captured - assuming that since there is a single capture we don't wrap it in a struct/tuple/record.</p>",
        "id": 495317795,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737561744
    },
    {
        "content": "<p>It feels like for zero arg closure, we have to ensure that the arg layout of the function _always_ includes the capture value (here a string, but often a struct)</p>",
        "id": 495318791,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737561998
    },
    {
        "content": "<p>The lambda set lists all function values that could be referenced by a value of a function type. In your case, <code>get_g</code> is a function with a lambda set that is a singleton that contains just <code>get_g</code>. The lambda set also encodes any captures of the function, and <code>get_g</code> captures <code>g</code>  so you can think of it as <code>[get_g Str]</code> if it were a tag. </p>\n<div class=\"codehilite\"><pre><span></span><code>Function(\n    [],\n    LambdaSet {\n        set: [\n            ( Test.2, [InLayout(STR)]), # get_g, with capture Str\n        ],\n        args: [],\n        ret: InLayout(STR), # return type\n        representation: InLayout(STR), # representation of the lambda set at runtime - the get_g function and captures (unwrapped to just Str because there is only one function and one capture)\n        full_layout: InLayout(\n            22,\n        ),\n    },\n    InLayout(STR), # return type\n)\n</code></pre></div>",
        "id": 495319001,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737562058
    },
    {
        "content": "<p>I know that there is like 3 maybe 4 people on the core team that deeply understand this code, but I'd like to get to the point where I could be a +1 to that tally in six months - year</p>",
        "id": 495319014,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737562062
    },
    {
        "content": "<p>Interesting</p>",
        "id": 495319100,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737562081
    },
    {
        "content": "<p>What you are saying makes sense, but with this mono layout, you get this in gen_llvm:</p>\n<div class=\"codehilite\"><pre><span></span><code>Error in alias analysis: error in module ModName(&quot;UserApp&quot;), function definition FuncName(&quot;\\x10\\x00\\x00\\x00\\x00\\x00\\x00\\x00l\\x08\\x12\\xd4g1\\x9bl&quot;), definition of value binding ValueId(4): expected type &#39;((heap_cell,),)&#39;, found type &#39;()&#39;\n</code></pre></div>",
        "id": 495319275,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737562126
    },
    {
        "content": "<p>And here is the morphic program:</p>\n<div class=\"codehilite\"><pre><span></span><code>program {\n  mod &quot;UserApp&quot; {\n    const &quot;\\x06\\x00\\x00\\x00\\x0e\\x00\\x00\\x00&quot;: type_1 = {\n      let val_0 = new_heap_cell ();\n      let val_1 = make_tuple (val_0);\n      val_1\n    } where {\n      type type_0 = heap_cell;\n      type type_1 = (type_0);\n    }\n\n    const &quot;THIS IS A STATIC LIST&quot;: type_4 = {\n      let val_0 = new_heap_cell ();\n      let val_1 = empty_bag&lt;type_0&gt; ();\n      let val_2 = make_tuple (val_0, val_1);\n      val_2\n    } where {\n      type type_0 = ();\n      type type_1 = ();\n      type type_2 = heap_cell;\n      type type_3 = bag&lt;type_1&gt;;\n      type type_4 = (type_2, type_3);\n    }\n\n    fn &quot;&quot; (val_0: type_3) -&gt; type_3 {\n      let val_6 = choice {\n        case {\n          let val_1 = make_tuple ();\n          let val_2 = make_union&lt;type_1, type_0&gt; 0 (val_1);\n          let val_3 = unwrap_union 1 (val_2);\n          let val_4 = call[&quot;\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00&quot;] &quot;UserApp&quot;::&quot;\\x10\\x00\\x00\\x00\\x00\\x00\\x00\\x00l\\x08\\x12\\xd4g1\\x9bl&quot; (val_3);\n          let val_5 = unknown_with&lt;type_2&gt; (val_4);\n          val_5\n        },\n      } ();\n      val_6\n    } where {\n      type type_0 = ();\n      type type_1 = ();\n      type type_2 = ();\n      type type_3 = ();\n    }\n\n    fn &quot;\\x10\\x00\\x00\\x00\\x00\\x00\\x00\\x00l\\x08\\x12\\xd4g1\\x9bl&quot; (val_0: type_0) -&gt; type_2 {\n      let val_1 = const_ref &quot;UserApp&quot;::&quot;\\x06\\x00\\x00\\x00\\x0e\\x00\\x00\\x00&quot; ();\n      let val_2 = recursive_touch (val_1);\n      let val_3 = make_tuple ();\n      let val_4 = call[&quot;\\x01\\x00\\x00\\x00&quot;] &quot;UserApp&quot;::&quot;\\x10\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\xac]\\xc2\\&#39;o)\\xaf]&quot; (val_3);\n      val_4\n    } where {\n      type type_0 = ();\n      type type_1 = heap_cell;\n      type type_2 = (type_1);\n    }\n\n    fn &quot;\\x10\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\xac]\\xc2\\&#39;o)\\xaf]&quot; (val_0: type_2) -&gt; type_4 {\n      let val_1 = get_tuple_field 0 (val_0);\n      val_1\n    } where {\n      type type_0 = heap_cell;\n      type type_1 = (type_0);\n      type type_2 = (type_1);\n      type type_3 = heap_cell;\n      type type_4 = (type_3);\n    }\n  }\n\n  entry_point &quot;&quot; = &quot;UserApp&quot;::&quot;&quot;;\n}\n</code></pre></div>",
        "id": 495319362,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737562153
    },
    {
        "content": "<p>And If I'm reading things even <em>close</em> to right, <code>\\x10\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\xac]\\xc2\\'o)\\xaf]</code> is the function that corresponds to <code>get_g</code> in the source</p>",
        "id": 495319566,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737562206
    },
    {
        "content": "<p>right so that's a bug in the morphic construction</p>",
        "id": 495319632,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737562228
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>      let val_3 = make_tuple ();\n      let val_4 = call[&quot;\\x01\\x00\\x00\\x00&quot;] &quot;UserApp&quot;::&quot;\\x10\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\xac]\\xc2\\&#39;o)\\xaf]&quot; (val_3);\n</code></pre></div>\n<p>this isn't passing the capture</p>",
        "id": 495319737,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737562250
    },
    {
        "content": "<p><code>(val_3)</code> isn't the capture?</p>",
        "id": 495319853,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737562289
    },
    {
        "content": "<p>Oh, it's a plain tuple!</p>",
        "id": 495319891,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737562300
    },
    {
        "content": "<p>Should it be <code>make_tuple (val_2)</code>?</p>",
        "id": 495320058,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737562330
    },
    {
        "content": "<p>I see that it's expecting val_0 to be a (heap_cell), and then it unwraps the first element.</p>",
        "id": 495320215,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737562383
    },
    {
        "content": "<p>I need to read up on what a \"recursive_touch\" is.  I'm assuming it's a ref increment recursively?</p>",
        "id": 495320398,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737562433
    },
    {
        "content": "<p>I really have to go to work, but I'll check back in at lunch</p>",
        "id": 495320577,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737562480
    },
    {
        "content": "<p>Thanks for your help Ayaz, it makes me feel better know that it is on the morphic generation side, and not all the way back in mono still</p>",
        "id": 495320702,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737562516
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> fyi</p>",
        "id": 495328212,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737564637
    },
    {
        "content": "<p>i would check that the mono IR looks right first</p>",
        "id": 495329593,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737565102
    },
    {
        "content": "<p>you can also run with <code>ROC_CHECK_MONO_IR=1</code> which runs a type checker over the IR and spits out if there is a bug</p>",
        "id": 495329677,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737565129
    },
    {
        "content": "<p>Sweet. Thanks</p>",
        "id": 495329716,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737565138
    },
    {
        "content": "<p>It’d be cool if we had an omnibus flag for debugging all things in a phase</p>",
        "id": 495329861,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737565182
    },
    {
        "content": "<p>Here's the mono::Proc:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Proc</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">LambdaName</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                    </span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"p\">#</span><span class=\"n\">UserApp</span><span class=\"p\">.</span><span class=\"n\">get_g</span><span class=\"err\">`</span><span class=\"p\">,</span>\n<span class=\"w\">                    </span><span class=\"n\">niche</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Niche</span><span class=\"p\">(</span>\n<span class=\"w\">                        </span><span class=\"n\">Captures</span><span class=\"p\">(</span>\n<span class=\"w\">                            </span><span class=\"p\">[</span>\n<span class=\"w\">                                </span><span class=\"n\">InLayout</span><span class=\"p\">(</span><span class=\"n\">STR</span><span class=\"p\">),</span>\n<span class=\"w\">                            </span><span class=\"p\">],</span>\n<span class=\"w\">                        </span><span class=\"p\">),</span>\n<span class=\"w\">                    </span><span class=\"p\">),</span>\n<span class=\"w\">                </span><span class=\"p\">},</span>\n<span class=\"w\">                </span><span class=\"n\">args</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">                    </span><span class=\"p\">(</span>\n<span class=\"w\">                        </span><span class=\"n\">InLayout</span><span class=\"p\">(</span>\n<span class=\"w\">                            </span><span class=\"mi\">22</span><span class=\"p\">,</span>\n<span class=\"w\">                        </span><span class=\"p\">),</span>\n<span class=\"w\">                        </span><span class=\"err\">`</span><span class=\"p\">#</span><span class=\"n\">UserApp</span><span class=\"p\">.</span><span class=\"n\">g</span><span class=\"err\">`</span><span class=\"p\">,</span>\n<span class=\"w\">                    </span><span class=\"p\">),</span>\n<span class=\"w\">                </span><span class=\"p\">],</span>\n<span class=\"w\">                </span><span class=\"n\">body</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Ret</span><span class=\"p\">(</span>\n<span class=\"w\">                    </span><span class=\"err\">`</span><span class=\"p\">#</span><span class=\"n\">UserApp</span><span class=\"p\">.</span><span class=\"n\">g</span><span class=\"err\">`</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"p\">),</span>\n<span class=\"w\">                </span><span class=\"n\">closure_data_layout</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span>\n<span class=\"w\">                    </span><span class=\"n\">InLayout</span><span class=\"p\">(</span>\n<span class=\"w\">                        </span><span class=\"mi\">22</span><span class=\"p\">,</span>\n<span class=\"w\">                    </span><span class=\"p\">),</span>\n<span class=\"w\">                </span><span class=\"p\">),</span>\n<span class=\"w\">                </span><span class=\"n\">ret_layout</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">InLayout</span><span class=\"p\">(</span><span class=\"n\">STR</span><span class=\"p\">),</span>\n<span class=\"w\">                </span><span class=\"n\">is_self_recursive</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">NotSelfRecursive</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">is_erased</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">false</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 495377236,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737581417
    },
    {
        "content": "<p>Running with <code>ROC_CHECK_MONO_IR=1</code> didn't output anything different</p>",
        "id": 495377367,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737581472
    },
    {
        "content": "<p>This looks like get_g should take an arg.  The closure_data_layout looks curious to me though</p>",
        "id": 495377484,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737581523
    },
    {
        "content": "<p>But it does line up with what I see in the morphic program...</p>",
        "id": 495377626,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737581578
    },
    {
        "content": "<p>So it looks like part of building the IR thinks it will take a string arg for the captures, but something else is creating a new layout for it</p>",
        "id": 495377707,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737581619
    },
    {
        "content": "<p><code>get_g</code> should take the lambdaset as its only arg</p>",
        "id": 495378204,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737581840
    },
    {
        "content": "<p>Which it looks like is the case</p>",
        "id": 495378262,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737581868
    },
    {
        "content": "<p>I presume that <code>InLayout</code> is a single-variant union with the payload of a STR</p>",
        "id": 495378364,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737581901
    },
    {
        "content": "<p>Which is why it would not say <code>InLayout(STR)</code> but instead <code>InLayout(22)</code></p>",
        "id": 495378404,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737581920
    },
    {
        "content": "<p>I wish it were easy to figure out what that layout is</p>",
        "id": 495378829,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737582120
    },
    {
        "content": "<p>After changing visibility of a method and wrapping a call it in unsafe:</p>\n<div class=\"codehilite\"><pre><span></span><code>Layout 22: Layout {\n    repr: Direct(\n        LambdaSet(\n            LambdaSet {\n                set: [\n                    ( Test.2, [InLayout(STR)]),\n                ],\n                args: [],\n                ret: InLayout(STR),\n                representation: InLayout(STR),\n                full_layout: InLayout(\n                    22,\n                ),\n            },\n        ),\n    ),\n    semantic: None,\n}\n</code></pre></div>",
        "id": 495379597,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737582452
    },
    {
        "content": "<p>Hmmm...</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">::</span><span class=\"n\">Call</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                    </span><span class=\"n\">call_type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">CallType</span><span class=\"p\">::</span><span class=\"n\">ByName</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                        </span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">proc_name</span><span class=\"p\">,</span>\n<span class=\"w\">                        </span><span class=\"n\">ret_layout</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">function_layout</span><span class=\"p\">.</span><span class=\"n\">result</span><span class=\"p\">,</span>\n<span class=\"w\">                        </span><span class=\"n\">arg_layouts</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">function_layout</span><span class=\"p\">.</span><span class=\"n\">arguments</span><span class=\"p\">,</span>\n<span class=\"w\">                        </span><span class=\"n\">specialization_id</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">env</span><span class=\"p\">.</span><span class=\"n\">next_call_specialization_id</span><span class=\"p\">(),</span>\n<span class=\"w\">                    </span><span class=\"p\">},</span>\n<span class=\"w\">                    </span><span class=\"n\">arguments</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">field_symbols</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"p\">};</span>\n</code></pre></div>",
        "id": 495384895,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737584777
    },
    {
        "content": "<p>Do we really need to explicitly add the closure struct to <code>field_symbols</code>?</p>",
        "id": 495384988,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737584820
    },
    {
        "content": "<p>But <code>call_specialized_proc</code> thinks we should do this because it thinks we are getting <code>get_g</code> here <em>because</em> the field_symbols is empty</p>",
        "id": 495385620,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737585136
    },
    {
        "content": "<p>We figure this one out</p>",
        "id": 495392202,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737588612
    },
    {
        "content": "<p>Now....</p>",
        "id": 495392208,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737588615
    },
    {
        "content": "<p>Can someone ELI5 borrow signatures to me?</p>",
        "id": 495392227,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737588627
    },
    {
        "content": "<p>This panics on not having a borrow signature:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"w\">            </span><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"s2\">\"test\"</span><span class=\"w\"> </span><span class=\"n\">provides</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">main</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"s2\">\"./platform\"</span>\n\n<span class=\"w\">            </span><span class=\"no\">Effect</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span>\n\n<span class=\"w\">            </span><span class=\"n\">succeed</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"no\">Effect</span><span class=\"w\"> </span><span class=\"n\">a</span>\n<span class=\"w\">            </span><span class=\"n\">succeed</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"vi\">@Effect</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span>\n\n<span class=\"w\">            </span><span class=\"n\">run_effect</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"no\">Effect</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span>\n<span class=\"w\">            </span><span class=\"n\">run_effect</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"vi\">@Effect</span><span class=\"p\">(</span><span class=\"n\">thunk</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">thunk</span><span class=\"p\">()</span>\n\n<span class=\"w\">            </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"no\">Effect</span><span class=\"w\"> </span><span class=\"no\">F64</span><span class=\"w\"> </span><span class=\"c1\"># &lt;----- This has no borrow signature</span>\n<span class=\"w\">            </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">                </span><span class=\"n\">succeed</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">.</span><span class=\"mi\">23</span><span class=\"p\">)</span>\n\n<span class=\"w\">            </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"no\">F64</span>\n<span class=\"w\">            </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">                </span><span class=\"n\">run_effect</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 495392285,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737588663
    },
    {
        "content": "<p>I have the high level understanding that this is how we determine something about Refcounting around a closure?</p>",
        "id": 495392575,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737588830
    },
    {
        "content": "<p>Basically it is away to avoid tons of extra refcount increments and decrements especially in hot loops.</p>",
        "id": 495393638,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737589441
    },
    {
        "content": "<p>All it does is track whether a list is passed into a function that requests ownership (anything that wants to update the list in place). If so, it is owned. If not, it is borrowed. If it is borrowed, we can pass it all the way down the call stack without ever incrementing or decrementing the refcount. Just keeping the single refcount at the top of the stack</p>",
        "id": 495393834,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737589543
    },
    {
        "content": "<p>I think all non-list types are always owned/ignored currently</p>",
        "id": 495393852,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737589559
    },
    {
        "content": "<p>So basically a dirty bit per arg to note if it is used in a way that requires ownership</p>",
        "id": 495393968,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737589620
    },
    {
        "content": "<p>I think we would eventually want to expand this to be tracked for things that wrap lists rather than just raw lists (for example dict). Not sure the state of borrow signatures and tags.</p>",
        "id": 495394024,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737589664
    },
    {
        "content": "<p>I’m getting the same panic in an example that is not wrapped in a opaque type</p>",
        "id": 495394176,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737589735
    },
    {
        "content": "<p>Interesting. Would have guess the opaque type was the cause</p>",
        "id": 495394243,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737589778
    },
    {
        "content": "<p>Might just be related to storing a closure. That might disconnect the borrow signature from the original function?</p>",
        "id": 495394313,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737589805
    },
    {
        "content": "<p>I have trouble finding where these signatures are inserted in the first place</p>",
        "id": 495394652,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737590004
    },
    {
        "content": "<p>I see only one place</p>",
        "id": 495394662,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737590010
    },
    {
        "content": "<p>Which is infer_borrow_signatures</p>",
        "id": 495394676,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737590021
    },
    {
        "content": "<p>But I haven’t gone deep on it</p>",
        "id": 495394686,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737590028
    },
    {
        "content": "<p>We do it per proc name and layout</p>",
        "id": 495394789,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737590076
    },
    {
        "content": "<p>Each name+function layout pair is assumed to have been specialized at this point</p>",
        "id": 495394830,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737590125
    },
    {
        "content": "<p>Yeah I think it is, but for some reason its borrow signature just isn’t there</p>",
        "id": 495395147,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737590289
    },
    {
        "content": "<p>I’ll figure it out tonight or in the morning. Thanks for the context</p>",
        "id": 495395174,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737590312
    },
    {
        "content": "<p>That's why I think the function didn't get multiple specializations</p>",
        "id": 495395177,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737590312
    },
    {
        "content": "<p>We assume there's one for each specialized return type on line 352 of <a href=\"http://borrow.rs\">borrow.rs</a></p>",
        "id": 495395233,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737590347
    }
]