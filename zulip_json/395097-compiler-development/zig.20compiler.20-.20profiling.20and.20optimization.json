[
    {
        "content": "<p>So, I have been messing a lot with profiling. Its fun to tinker with the new compiler. Interesting to see some of the tradeoffs.</p>\n<p>Thought I should make a standalone thread cause I assume there will be many findings over time and discussion.</p>\n<hr>\n<h2>A few random findings.</h2>\n<h3>1 million line challenge</h3>\n<p>Parsing and formatting 1 million lines of syntax grab bag.<br>\nzig compiler is ~5x faster and 4x less memory.<br>\nIn real terms, the zig compiler took ~300ms to parse and format the million lines.<br>\nIt used ~300MB to do so.</p>\n<p>The input file is 21MB.</p>\n<h3>c allocator vs the new zig smp allocator.</h3>\n<p>When dealing with the 100 files of 1000 lines:<br>\nc allocator uses way less memory than the zig smp allocator (~4x less memory)<br>\nThat said, it also takes significantly longer runtime to do so (~1.4x slower)</p>\n<p>Definitely something to consider switching to. Though need to test on more cases and such.</p>\n<p>For 1 file of 1 million lines:<br>\nboth allocators are essentially equivalent.</p>",
        "id": 505904360,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742088941
    },
    {
        "content": "<p>Note, these numbers are with <a href=\"https://github.com/roc-lang/roc/issues/7704\">#7704</a> which is very important for large file perf.</p>",
        "id": 505904440,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742088971
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"406911\">@Andrew Kelley</span> might be interested in those findings! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 505904628,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1742089126
    },
    {
        "content": "<p>Also, I am still very new to the <a href=\"https://github.com/wolfpld/tracy\">tracy profiler</a> (<a href=\"https://tracy.nereid.pl/\">demo</a>), but it is an awesome tool for diving into performance. I think it will be extra useful once we start doing multi-threaded work. It has too many features for me to describe here, but I definitely should give a demo of using it with roc at some point.</p>\n<p>I graciously borrowed how the zig compiler integrates tracy and have it on a branch. At some point soon, I want to make a PR for it. It is relatively non-invasive. Just a sprinkling of trace points, some build config, and an optional allocation tracker.</p>",
        "id": 505905090,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742089506
    },
    {
        "content": "<p>One thing seen clearly from profiling is that container default capacities can save a lot of time by avoiding many reallocations on copies.</p>\n<p>I was thinking of adding a bunch of <code>initCapacity</code> functions to our various datastructures, but realized that in many cases, the capacity wanted is not really known by the caller. I'm thinking of flipping the script and giving the data structures control of their default size. So calling init will simply allocate the default capacity we think is reasonable for a datastructure.</p>\n<p>As an example, instead of adding initCapacity to the small string interner, we would just update the small string interner init function to always allocate enough space for (x strings of a specific size), maybe 1000 strings of 4 characters.</p>\n<p>Thoughts?</p>\n<p>I'm not totally sold on this idea, but it feels like it might be easier to tune on a per data structure level than at a per instance level.</p>",
        "id": 505984888,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742151087
    },
    {
        "content": "<p>I think what they did in the Zig compiler was to do some benchmarks on heuristics and go by that</p>",
        "id": 505985933,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1742151608
    },
    {
        "content": "<p>like for example \"here's how much to allocate for tokens as a multiple of size of source bytes\"</p>",
        "id": 505985999,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1742151650
    },
    {
        "content": "<p>not an exact science obviously, but can do heuristics based on measurements in the wild</p>",
        "id": 505986029,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1742151677
    },
    {
        "content": "<p>Yeah, that's a good point. A lot of this likely can have simple heuristics that go beyond datastructure specific and into input specific</p>",
        "id": 505986059,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742151716
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> how are you generating the input file?</p>",
        "id": 506020538,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1742174704
    },
    {
        "content": "<p>Input is current the syntax grab bag repeated a ton</p>",
        "id": 506020692,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742174771
    },
    {
        "content": "<p>Also, a roughly equivalent version modified for the old compiler syntax.</p>",
        "id": 506020753,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742174809
    },
    {
        "content": "<p>Repletion with definitely benefit the interner and lead to less allocating and regrowth though. So it is biased for sure.</p>",
        "id": 506020828,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742174852
    },
    {
        "content": "<p>I really should update the builtins and/or basic CLI to the new syntax to get a more realistic feel.</p>",
        "id": 506020868,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742174879
    },
    {
        "content": "<p>I have a large corpus of all public roc code, but written in the old syntax of course</p>",
        "id": 506021019,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1742174969
    },
    {
        "content": "<p>(\"large\" is a few tens of mb)</p>",
        "id": 506021031,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1742174982
    },
    {
        "content": "<p>Been thinking about running that thru the migration formatter in the old compiler (that'll need a bit of work!) and then using that as a somewhat more realistic corpus</p>",
        "id": 506021139,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1742175034
    },
    {
        "content": "<p>Oh, that would be awesome to work to update and do some benchmarks on. I think we are still a bit away from supporting everything to use that corpus, but would be great</p>",
        "id": 506021151,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742175046
    },
    {
        "content": "<p>Can we make that corpus a GitHub repo? And make two branches, one for old and one for new syntax?</p>",
        "id": 506021185,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742175071
    },
    {
        "content": "<p>Or otherwise share it?</p>",
        "id": 506021212,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742175089
    },
    {
        "content": "<p><a href=\"http://osprey.biercewarner.com/tarball\">http://osprey.biercewarner.com/tarball</a></p>",
        "id": 506021277,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1742175123
    },
    {
        "content": "<p>Could definitely make it a git repo</p>",
        "id": 506021359,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1742175178
    },
    {
        "content": "<p>How hard would it be to make the old compiler able to migrate the syntax?</p>",
        "id": 506021570,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742175325
    },
    {
        "content": "<p>In theory that's like 90% done, just not hooked up to the command line yet</p>",
        "id": 506021606,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1742175355
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/blob/main/crates/compiler/fmt/src/migrate.rs\">https://github.com/roc-lang/roc/blob/main/crates/compiler/fmt/src/migrate.rs</a></p>",
        "id": 506021670,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1742175383
    },
    {
        "content": "<p>There are a few missing translations there that I know of, and likely some bugs. Basically completely untested.</p>",
        "id": 506021704,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1742175413
    },
    {
        "content": "<p>Of course this is somewhat complicated by the old compiler still depending on zig 13 which breaks the build there, since I've upgraded to 14 for the new compiler <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 506022532,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1742175926
    },
    {
        "content": "<p>Yeah, I just use nix for old compiler work</p>",
        "id": 506022928,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742176182
    },
    {
        "content": "<p>How hard would it be to just upgrade the old compiler to zig 14?</p>",
        "id": 506027461,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1742179025
    },
    {
        "content": "<p>Depends on how hard it ends up being to upgrade inkwell and llvm. Occasionally that is trivial. A lot of the time that is a huge hassle.</p>",
        "id": 506027529,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742179082
    },
    {
        "content": "<p>Oh oof; those are all locked together <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 506027588,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1742179117
    },
    {
        "content": "<p>Yeah....one of the other huge gains of the new compiler is that we will generate llvm bitcode directly, which gives us much more flexibility to decouple that</p>",
        "id": 506027657,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742179172
    },
    {
        "content": "<p>I guess keeping separate envs for the old and new compiler it is</p>",
        "id": 506027745,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1742179225
    },
    {
        "content": "<p>I guess you could always just alias/swap out only zig</p>",
        "id": 506028286,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742179594
    },
    {
        "content": "<p>Some of these optimizations are bespoke tuning that probably won't be kept or need proper heuristics, but otherwise are just simple cleanups to have less allocations overall.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>optimization results (-38% execution time)</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>Each executable builds on top of the last and includes all previous optimizations.</p>\n<p>Also, some reason, changes to file loading lead to the smp allocator using way less memory. It doesn't make sense to me. Definitely questioning if I am missing something or if the other case of 4x memory was some weird bug/fluke.</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>Benchmark<span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"m\">31</span><span class=\"w\"> </span>runs<span class=\"o\">)</span>:<span class=\"w\"> </span>./zig-out/bin/roc-base<span class=\"w\"> </span>format<span class=\"w\"> </span>/tmp/new\n<span class=\"w\">  </span>measurement<span class=\"w\">          </span>mean<span class=\"w\"> </span>±<span class=\"w\"> </span>σ<span class=\"w\">            </span>min<span class=\"w\"> </span>…<span class=\"w\"> </span>max<span class=\"w\">           </span>outliers<span class=\"w\">         </span>delta\n<span class=\"w\">  </span>wall_time<span class=\"w\">           </span>159ms<span class=\"w\"> </span>±<span class=\"w\"> </span><span class=\"m\">2</span>.86ms<span class=\"w\">     </span>153ms<span class=\"w\"> </span>…<span class=\"w\">  </span>168ms<span class=\"w\">          </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">6</span>%<span class=\"o\">)</span><span class=\"w\">        </span><span class=\"m\">0</span>%\n<span class=\"w\">  </span>peak_rss<span class=\"w\">            </span>745KB<span class=\"w\"> </span>±<span class=\"w\">    </span><span class=\"m\">0</span><span class=\"w\">       </span>745KB<span class=\"w\"> </span>…<span class=\"w\">  </span>745KB<span class=\"w\">          </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">0</span>%<span class=\"o\">)</span><span class=\"w\">        </span><span class=\"m\">0</span>%\n<span class=\"w\">  </span>cpu_cycles<span class=\"w\">          </span>170M<span class=\"w\">  </span>±<span class=\"w\"> </span><span class=\"m\">5</span>.79M<span class=\"w\">      </span>156M<span class=\"w\">  </span>…<span class=\"w\">  </span>184M<span class=\"w\">           </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"m\">10</span>%<span class=\"o\">)</span><span class=\"w\">        </span><span class=\"m\">0</span>%\n<span class=\"w\">  </span>instructions<span class=\"w\">        </span>321M<span class=\"w\">  </span>±<span class=\"w\">  </span><span class=\"m\">961</span><span class=\"w\">       </span>321M<span class=\"w\">  </span>…<span class=\"w\">  </span>321M<span class=\"w\">           </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">0</span>%<span class=\"o\">)</span><span class=\"w\">        </span><span class=\"m\">0</span>%\n<span class=\"w\">  </span>cache_references<span class=\"w\">   </span><span class=\"m\">3</span>.17M<span class=\"w\">  </span>±<span class=\"w\"> </span><span class=\"m\">86</span>.4K<span class=\"w\">     </span><span class=\"m\">3</span>.05M<span class=\"w\">  </span>…<span class=\"w\"> </span><span class=\"m\">3</span>.36M<span class=\"w\">           </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">0</span>%<span class=\"o\">)</span><span class=\"w\">        </span><span class=\"m\">0</span>%\n<span class=\"w\">  </span>cache_misses<span class=\"w\">       </span><span class=\"m\">1</span>.82K<span class=\"w\">  </span>±<span class=\"w\"> </span><span class=\"m\">1</span>.38K<span class=\"w\">     </span><span class=\"m\">1</span>.11K<span class=\"w\">  </span>…<span class=\"w\"> </span><span class=\"m\">8</span>.01K<span class=\"w\">           </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">6</span>%<span class=\"o\">)</span><span class=\"w\">        </span><span class=\"m\">0</span>%\n<span class=\"w\">  </span>branch_misses<span class=\"w\">      </span><span class=\"m\">1</span>.10M<span class=\"w\">  </span>±<span class=\"w\"> </span><span class=\"m\">94</span>.2K<span class=\"w\">      </span>858K<span class=\"w\">  </span>…<span class=\"w\"> </span><span class=\"m\">1</span>.24M<span class=\"w\">           </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"m\">10</span>%<span class=\"o\">)</span><span class=\"w\">        </span><span class=\"m\">0</span>%\nBenchmark<span class=\"w\"> </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"m\">35</span><span class=\"w\"> </span>runs<span class=\"o\">)</span>:<span class=\"w\"> </span>./zig-out/bin/roc-buffered-fmt<span class=\"w\"> </span>format<span class=\"w\"> </span>/tmp/new\n<span class=\"w\">  </span>measurement<span class=\"w\">          </span>mean<span class=\"w\"> </span>±<span class=\"w\"> </span>σ<span class=\"w\">            </span>min<span class=\"w\"> </span>…<span class=\"w\"> </span>max<span class=\"w\">           </span>outliers<span class=\"w\">         </span>delta\n<span class=\"w\">  </span>wall_time<span class=\"w\">           </span>144ms<span class=\"w\"> </span>±<span class=\"w\"> </span><span class=\"m\">2</span>.75ms<span class=\"w\">     </span>138ms<span class=\"w\"> </span>…<span class=\"w\">  </span>149ms<span class=\"w\">          </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">0</span>%<span class=\"o\">)</span><span class=\"w\">        </span>⚡-<span class=\"w\">  </span><span class=\"m\">9</span>.8%<span class=\"w\"> </span>±<span class=\"w\">  </span><span class=\"m\">0</span>.9%\n<span class=\"w\">  </span>peak_rss<span class=\"w\">            </span>864KB<span class=\"w\"> </span>±<span class=\"w\">    </span><span class=\"m\">0</span><span class=\"w\">       </span>864KB<span class=\"w\"> </span>…<span class=\"w\">  </span>864KB<span class=\"w\">          </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">0</span>%<span class=\"o\">)</span><span class=\"w\">        </span>💩+<span class=\"w\"> </span><span class=\"m\">15</span>.9%<span class=\"w\"> </span>±<span class=\"w\">  </span><span class=\"m\">0</span>.0%\n<span class=\"w\">  </span>cpu_cycles<span class=\"w\">          </span>158M<span class=\"w\">  </span>±<span class=\"w\"> </span><span class=\"m\">5</span>.91M<span class=\"w\">      </span>146M<span class=\"w\">  </span>…<span class=\"w\">  </span>167M<span class=\"w\">           </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">0</span>%<span class=\"o\">)</span><span class=\"w\">        </span>⚡-<span class=\"w\">  </span><span class=\"m\">7</span>.2%<span class=\"w\"> </span>±<span class=\"w\">  </span><span class=\"m\">1</span>.7%\n<span class=\"w\">  </span>instructions<span class=\"w\">        </span>308M<span class=\"w\">  </span>±<span class=\"w\">  </span><span class=\"m\">454</span><span class=\"w\">       </span>308M<span class=\"w\">  </span>…<span class=\"w\">  </span>308M<span class=\"w\">           </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">0</span>%<span class=\"o\">)</span><span class=\"w\">        </span>⚡-<span class=\"w\">  </span><span class=\"m\">4</span>.2%<span class=\"w\"> </span>±<span class=\"w\">  </span><span class=\"m\">0</span>.0%\n<span class=\"w\">  </span>cache_references<span class=\"w\">   </span><span class=\"m\">2</span>.89M<span class=\"w\">  </span>±<span class=\"w\"> </span><span class=\"m\">75</span>.4K<span class=\"w\">     </span><span class=\"m\">2</span>.77M<span class=\"w\">  </span>…<span class=\"w\"> </span><span class=\"m\">3</span>.08M<span class=\"w\">           </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">0</span>%<span class=\"o\">)</span><span class=\"w\">        </span>⚡-<span class=\"w\">  </span><span class=\"m\">9</span>.0%<span class=\"w\"> </span>±<span class=\"w\">  </span><span class=\"m\">1</span>.3%\n<span class=\"w\">  </span>cache_misses<span class=\"w\">       </span><span class=\"m\">1</span>.34K<span class=\"w\">  </span>±<span class=\"w\">  </span><span class=\"m\">646</span><span class=\"w\">       </span><span class=\"m\">979</span><span class=\"w\">   </span>…<span class=\"w\"> </span><span class=\"m\">4</span>.97K<span class=\"w\">           </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">3</span>%<span class=\"o\">)</span><span class=\"w\">          </span>-<span class=\"w\"> </span><span class=\"m\">26</span>.4%<span class=\"w\"> </span>±<span class=\"w\"> </span><span class=\"m\">28</span>.6%\n<span class=\"w\">  </span>branch_misses<span class=\"w\">       </span>997K<span class=\"w\">  </span>±<span class=\"w\">  </span>106K<span class=\"w\">      </span>785K<span class=\"w\">  </span>…<span class=\"w\"> </span><span class=\"m\">1</span>.17M<span class=\"w\">           </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">0</span>%<span class=\"o\">)</span><span class=\"w\">        </span>⚡-<span class=\"w\">  </span><span class=\"m\">9</span>.4%<span class=\"w\"> </span>±<span class=\"w\">  </span><span class=\"m\">4</span>.5%\nBenchmark<span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"m\">39</span><span class=\"w\"> </span>runs<span class=\"o\">)</span>:<span class=\"w\"> </span>./zig-out/bin/roc-arena<span class=\"w\"> </span>format<span class=\"w\"> </span>/tmp/new\n<span class=\"w\">  </span>measurement<span class=\"w\">          </span>mean<span class=\"w\"> </span>±<span class=\"w\"> </span>σ<span class=\"w\">            </span>min<span class=\"w\"> </span>…<span class=\"w\"> </span>max<span class=\"w\">           </span>outliers<span class=\"w\">         </span>delta\n<span class=\"w\">  </span>wall_time<span class=\"w\">           </span>127ms<span class=\"w\"> </span>±<span class=\"w\"> </span><span class=\"m\">2</span>.93ms<span class=\"w\">     </span>120ms<span class=\"w\"> </span>…<span class=\"w\">  </span>131ms<span class=\"w\">          </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">0</span>%<span class=\"o\">)</span><span class=\"w\">        </span>⚡-<span class=\"w\"> </span><span class=\"m\">20</span>.5%<span class=\"w\"> </span>±<span class=\"w\">  </span><span class=\"m\">0</span>.9%\n<span class=\"w\">  </span>peak_rss<span class=\"w\">            </span>864KB<span class=\"w\"> </span>±<span class=\"w\">    </span><span class=\"m\">0</span><span class=\"w\">       </span>864KB<span class=\"w\"> </span>…<span class=\"w\">  </span>864KB<span class=\"w\">          </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">0</span>%<span class=\"o\">)</span><span class=\"w\">        </span>💩+<span class=\"w\"> </span><span class=\"m\">15</span>.9%<span class=\"w\"> </span>±<span class=\"w\">  </span><span class=\"m\">0</span>.0%\n<span class=\"w\">  </span>cpu_cycles<span class=\"w\">          </span>154M<span class=\"w\">  </span>±<span class=\"w\"> </span><span class=\"m\">6</span>.73M<span class=\"w\">      </span>140M<span class=\"w\">  </span>…<span class=\"w\">  </span>165M<span class=\"w\">           </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">0</span>%<span class=\"o\">)</span><span class=\"w\">        </span>⚡-<span class=\"w\">  </span><span class=\"m\">9</span>.6%<span class=\"w\"> </span>±<span class=\"w\">  </span><span class=\"m\">1</span>.8%\n<span class=\"w\">  </span>instructions<span class=\"w\">        </span>308M<span class=\"w\">  </span>±<span class=\"w\">  </span><span class=\"m\">454</span><span class=\"w\">       </span>308M<span class=\"w\">  </span>…<span class=\"w\">  </span>308M<span class=\"w\">           </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">0</span>%<span class=\"o\">)</span><span class=\"w\">        </span>⚡-<span class=\"w\">  </span><span class=\"m\">3</span>.9%<span class=\"w\"> </span>±<span class=\"w\">  </span><span class=\"m\">0</span>.0%\n<span class=\"w\">  </span>cache_references<span class=\"w\">   </span><span class=\"m\">2</span>.61M<span class=\"w\">  </span>±<span class=\"w\"> </span><span class=\"m\">80</span>.5K<span class=\"w\">     </span><span class=\"m\">2</span>.48M<span class=\"w\">  </span>…<span class=\"w\"> </span><span class=\"m\">2</span>.78M<span class=\"w\">           </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">0</span>%<span class=\"o\">)</span><span class=\"w\">        </span>⚡-<span class=\"w\"> </span><span class=\"m\">17</span>.6%<span class=\"w\"> </span>±<span class=\"w\">  </span><span class=\"m\">1</span>.3%\n<span class=\"w\">  </span>cache_misses<span class=\"w\">       </span><span class=\"m\">1</span>.69K<span class=\"w\">  </span>±<span class=\"w\">  </span><span class=\"m\">641</span><span class=\"w\">      </span><span class=\"m\">1</span>.22K<span class=\"w\">  </span>…<span class=\"w\"> </span><span class=\"m\">5</span>.39K<span class=\"w\">           </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">5</span>%<span class=\"o\">)</span><span class=\"w\">          </span>-<span class=\"w\">  </span><span class=\"m\">7</span>.0%<span class=\"w\"> </span>±<span class=\"w\"> </span><span class=\"m\">27</span>.3%\n<span class=\"w\">  </span>branch_misses<span class=\"w\">       </span>976K<span class=\"w\">  </span>±<span class=\"w\">  </span>122K<span class=\"w\">      </span>734K<span class=\"w\">  </span>…<span class=\"w\"> </span><span class=\"m\">1</span>.17M<span class=\"w\">           </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">0</span>%<span class=\"o\">)</span><span class=\"w\">        </span>⚡-<span class=\"w\"> </span><span class=\"m\">11</span>.3%<span class=\"w\"> </span>±<span class=\"w\">  </span><span class=\"m\">4</span>.8%\nBenchmark<span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"m\">41</span><span class=\"w\"> </span>runs<span class=\"o\">)</span>:<span class=\"w\"> </span>./zig-out/bin/roc-more-cap<span class=\"w\"> </span>format<span class=\"w\"> </span>/tmp/new\n<span class=\"w\">  </span>measurement<span class=\"w\">          </span>mean<span class=\"w\"> </span>±<span class=\"w\"> </span>σ<span class=\"w\">            </span>min<span class=\"w\"> </span>…<span class=\"w\"> </span>max<span class=\"w\">           </span>outliers<span class=\"w\">         </span>delta\n<span class=\"w\">  </span>wall_time<span class=\"w\">           </span>123ms<span class=\"w\"> </span>±<span class=\"w\"> </span><span class=\"m\">2</span>.54ms<span class=\"w\">     </span>117ms<span class=\"w\"> </span>…<span class=\"w\">  </span>130ms<span class=\"w\">          </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">5</span>%<span class=\"o\">)</span><span class=\"w\">        </span>⚡-<span class=\"w\"> </span><span class=\"m\">22</span>.8%<span class=\"w\"> </span>±<span class=\"w\">  </span><span class=\"m\">0</span>.8%\n<span class=\"w\">  </span>peak_rss<span class=\"w\">            </span>864KB<span class=\"w\"> </span>±<span class=\"w\">    </span><span class=\"m\">0</span><span class=\"w\">       </span>864KB<span class=\"w\"> </span>…<span class=\"w\">  </span>864KB<span class=\"w\">          </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">0</span>%<span class=\"o\">)</span><span class=\"w\">        </span>💩+<span class=\"w\"> </span><span class=\"m\">15</span>.9%<span class=\"w\"> </span>±<span class=\"w\">  </span><span class=\"m\">0</span>.0%\n<span class=\"w\">  </span>cpu_cycles<span class=\"w\">          </span>153M<span class=\"w\">  </span>±<span class=\"w\"> </span><span class=\"m\">5</span>.80M<span class=\"w\">      </span>140M<span class=\"w\">  </span>…<span class=\"w\">  </span>170M<span class=\"w\">           </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"m\">10</span>%<span class=\"o\">)</span><span class=\"w\">        </span>⚡-<span class=\"w\">  </span><span class=\"m\">9</span>.8%<span class=\"w\"> </span>±<span class=\"w\">  </span><span class=\"m\">1</span>.6%\n<span class=\"w\">  </span>instructions<span class=\"w\">        </span>306M<span class=\"w\">  </span>±<span class=\"w\">  </span><span class=\"m\">444</span><span class=\"w\">       </span>306M<span class=\"w\">  </span>…<span class=\"w\">  </span>306M<span class=\"w\">           </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">0</span>%<span class=\"o\">)</span><span class=\"w\">        </span>⚡-<span class=\"w\">  </span><span class=\"m\">4</span>.7%<span class=\"w\"> </span>±<span class=\"w\">  </span><span class=\"m\">0</span>.0%\n<span class=\"w\">  </span>cache_references<span class=\"w\">   </span><span class=\"m\">2</span>.46M<span class=\"w\">  </span>±<span class=\"w\"> </span><span class=\"m\">48</span>.8K<span class=\"w\">     </span><span class=\"m\">2</span>.38M<span class=\"w\">  </span>…<span class=\"w\"> </span><span class=\"m\">2</span>.60M<span class=\"w\">           </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">0</span>%<span class=\"o\">)</span><span class=\"w\">        </span>⚡-<span class=\"w\"> </span><span class=\"m\">22</span>.5%<span class=\"w\"> </span>±<span class=\"w\">  </span><span class=\"m\">1</span>.0%\n<span class=\"w\">  </span>cache_misses<span class=\"w\">       </span><span class=\"m\">1</span>.69K<span class=\"w\">  </span>±<span class=\"w\">  </span><span class=\"m\">642</span><span class=\"w\">      </span><span class=\"m\">1</span>.18K<span class=\"w\">  </span>…<span class=\"w\"> </span><span class=\"m\">5</span>.46K<span class=\"w\">           </span><span class=\"m\">2</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">5</span>%<span class=\"o\">)</span><span class=\"w\">          </span>-<span class=\"w\">  </span><span class=\"m\">7</span>.0%<span class=\"w\"> </span>±<span class=\"w\"> </span><span class=\"m\">26</span>.7%\n<span class=\"w\">  </span>branch_misses<span class=\"w\">       </span>986K<span class=\"w\">  </span>±<span class=\"w\">  </span>105K<span class=\"w\">      </span>746K<span class=\"w\">  </span>…<span class=\"w\"> </span><span class=\"m\">1</span>.28M<span class=\"w\">           </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"m\">10</span>%<span class=\"o\">)</span><span class=\"w\">        </span>⚡-<span class=\"w\"> </span><span class=\"m\">10</span>.4%<span class=\"w\"> </span>±<span class=\"w\">  </span><span class=\"m\">4</span>.3%\nBenchmark<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"m\">43</span><span class=\"w\"> </span>runs<span class=\"o\">)</span>:<span class=\"w\"> </span>./zig-out/bin/roc-file-size<span class=\"w\"> </span>format<span class=\"w\"> </span>/tmp/new\n<span class=\"w\">  </span>measurement<span class=\"w\">          </span>mean<span class=\"w\"> </span>±<span class=\"w\"> </span>σ<span class=\"w\">            </span>min<span class=\"w\"> </span>…<span class=\"w\"> </span>max<span class=\"w\">           </span>outliers<span class=\"w\">         </span>delta\n<span class=\"w\">  </span>wall_time<span class=\"w\">           </span>117ms<span class=\"w\"> </span>±<span class=\"w\"> </span><span class=\"m\">2</span>.96ms<span class=\"w\">     </span>111ms<span class=\"w\"> </span>…<span class=\"w\">  </span>122ms<span class=\"w\">          </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">0</span>%<span class=\"o\">)</span><span class=\"w\">        </span>⚡-<span class=\"w\"> </span><span class=\"m\">26</span>.8%<span class=\"w\"> </span>±<span class=\"w\">  </span><span class=\"m\">0</span>.9%\n<span class=\"w\">  </span>peak_rss<span class=\"w\">            </span>864KB<span class=\"w\"> </span>±<span class=\"w\">    </span><span class=\"m\">0</span><span class=\"w\">       </span>864KB<span class=\"w\"> </span>…<span class=\"w\">  </span>864KB<span class=\"w\">          </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">0</span>%<span class=\"o\">)</span><span class=\"w\">        </span>💩+<span class=\"w\"> </span><span class=\"m\">15</span>.9%<span class=\"w\"> </span>±<span class=\"w\">  </span><span class=\"m\">0</span>.0%\n<span class=\"w\">  </span>cpu_cycles<span class=\"w\">          </span>150M<span class=\"w\">  </span>±<span class=\"w\"> </span><span class=\"m\">6</span>.47M<span class=\"w\">      </span>137M<span class=\"w\">  </span>…<span class=\"w\">  </span>162M<span class=\"w\">           </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">0</span>%<span class=\"o\">)</span><span class=\"w\">        </span>⚡-<span class=\"w\"> </span><span class=\"m\">12</span>.0%<span class=\"w\"> </span>±<span class=\"w\">  </span><span class=\"m\">1</span>.7%\n<span class=\"w\">  </span>instructions<span class=\"w\">        </span>305M<span class=\"w\">  </span>±<span class=\"w\">  </span><span class=\"m\">954</span><span class=\"w\">       </span>305M<span class=\"w\">  </span>…<span class=\"w\">  </span>305M<span class=\"w\">           </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">0</span>%<span class=\"o\">)</span><span class=\"w\">        </span>⚡-<span class=\"w\">  </span><span class=\"m\">4</span>.9%<span class=\"w\"> </span>±<span class=\"w\">  </span><span class=\"m\">0</span>.0%\n<span class=\"w\">  </span>cache_references<span class=\"w\">   </span><span class=\"m\">2</span>.37M<span class=\"w\">  </span>±<span class=\"w\"> </span><span class=\"m\">37</span>.3K<span class=\"w\">     </span><span class=\"m\">2</span>.31M<span class=\"w\">  </span>…<span class=\"w\"> </span><span class=\"m\">2</span>.47M<span class=\"w\">           </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">7</span>%<span class=\"o\">)</span><span class=\"w\">        </span>⚡-<span class=\"w\"> </span><span class=\"m\">25</span>.2%<span class=\"w\"> </span>±<span class=\"w\">  </span><span class=\"m\">0</span>.9%\n<span class=\"w\">  </span>cache_misses<span class=\"w\">       </span><span class=\"m\">1</span>.61K<span class=\"w\">  </span>±<span class=\"w\">  </span><span class=\"m\">327</span><span class=\"w\">       </span><span class=\"m\">832</span><span class=\"w\">   </span>…<span class=\"w\"> </span><span class=\"m\">3</span>.00K<span class=\"w\">           </span><span class=\"m\">3</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">7</span>%<span class=\"o\">)</span><span class=\"w\">          </span>-<span class=\"w\"> </span><span class=\"m\">11</span>.7%<span class=\"w\"> </span>±<span class=\"w\"> </span><span class=\"m\">23</span>.8%\n<span class=\"w\">  </span>branch_misses<span class=\"w\">       </span>924K<span class=\"w\">  </span>±<span class=\"w\">  </span>116K<span class=\"w\">      </span>696K<span class=\"w\">  </span>…<span class=\"w\"> </span><span class=\"m\">1</span>.14M<span class=\"w\">           </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">0</span>%<span class=\"o\">)</span><span class=\"w\">        </span>⚡-<span class=\"w\"> </span><span class=\"m\">16</span>.1%<span class=\"w\"> </span>±<span class=\"w\">  </span><span class=\"m\">4</span>.6%\nBenchmark<span class=\"w\"> </span><span class=\"m\">6</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"m\">50</span><span class=\"w\"> </span>runs<span class=\"o\">)</span>:<span class=\"w\"> </span>./zig-out/bin/roc-smp<span class=\"w\"> </span>format<span class=\"w\"> </span>/tmp/new\n<span class=\"w\">  </span>measurement<span class=\"w\">          </span>mean<span class=\"w\"> </span>±<span class=\"w\"> </span>σ<span class=\"w\">            </span>min<span class=\"w\"> </span>…<span class=\"w\"> </span>max<span class=\"w\">           </span>outliers<span class=\"w\">         </span>delta\n<span class=\"w\">  </span>wall_time<span class=\"w\">          </span><span class=\"m\">98</span>.7ms<span class=\"w\"> </span>±<span class=\"w\"> </span><span class=\"m\">2</span>.92ms<span class=\"w\">    </span><span class=\"m\">92</span>.2ms<span class=\"w\"> </span>…<span class=\"w\">  </span>105ms<span class=\"w\">          </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">0</span>%<span class=\"o\">)</span><span class=\"w\">        </span>⚡-<span class=\"w\"> </span><span class=\"m\">38</span>.0%<span class=\"w\"> </span>±<span class=\"w\">  </span><span class=\"m\">0</span>.8%\n<span class=\"w\">  </span>peak_rss<span class=\"w\">            </span>864KB<span class=\"w\"> </span>±<span class=\"w\">    </span><span class=\"m\">0</span><span class=\"w\">       </span>864KB<span class=\"w\"> </span>…<span class=\"w\">  </span>864KB<span class=\"w\">          </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">0</span>%<span class=\"o\">)</span><span class=\"w\">        </span>💩+<span class=\"w\"> </span><span class=\"m\">15</span>.9%<span class=\"w\"> </span>±<span class=\"w\">  </span><span class=\"m\">0</span>.0%\n<span class=\"w\">  </span>cpu_cycles<span class=\"w\">          </span>147M<span class=\"w\">  </span>±<span class=\"w\"> </span><span class=\"m\">6</span>.21M<span class=\"w\">      </span>133M<span class=\"w\">  </span>…<span class=\"w\">  </span>161M<span class=\"w\">           </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">0</span>%<span class=\"o\">)</span><span class=\"w\">        </span>⚡-<span class=\"w\"> </span><span class=\"m\">13</span>.5%<span class=\"w\"> </span>±<span class=\"w\">  </span><span class=\"m\">1</span>.6%\n<span class=\"w\">  </span>instructions<span class=\"w\">        </span>303M<span class=\"w\">  </span>±<span class=\"w\">  </span><span class=\"m\">960</span><span class=\"w\">       </span>303M<span class=\"w\">  </span>…<span class=\"w\">  </span>303M<span class=\"w\">           </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">0</span>%<span class=\"o\">)</span><span class=\"w\">        </span>⚡-<span class=\"w\">  </span><span class=\"m\">5</span>.7%<span class=\"w\"> </span>±<span class=\"w\">  </span><span class=\"m\">0</span>.0%\n<span class=\"w\">  </span>cache_references<span class=\"w\">   </span><span class=\"m\">2</span>.11M<span class=\"w\">  </span>±<span class=\"w\"> </span><span class=\"m\">40</span>.6K<span class=\"w\">     </span><span class=\"m\">2</span>.03M<span class=\"w\">  </span>…<span class=\"w\"> </span><span class=\"m\">2</span>.19M<span class=\"w\">           </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">0</span>%<span class=\"o\">)</span><span class=\"w\">        </span>⚡-<span class=\"w\"> </span><span class=\"m\">33</span>.5%<span class=\"w\"> </span>±<span class=\"w\">  </span><span class=\"m\">0</span>.9%\n<span class=\"w\">  </span>cache_misses<span class=\"w\">       </span><span class=\"m\">1</span>.44K<span class=\"w\">  </span>±<span class=\"w\">  </span><span class=\"m\">533</span><span class=\"w\">      </span><span class=\"m\">1</span>.07K<span class=\"w\">  </span>…<span class=\"w\"> </span><span class=\"m\">4</span>.75K<span class=\"w\">           </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">8</span>%<span class=\"o\">)</span><span class=\"w\">          </span>-<span class=\"w\"> </span><span class=\"m\">20</span>.9%<span class=\"w\"> </span>±<span class=\"w\"> </span><span class=\"m\">23</span>.7%\n<span class=\"w\">  </span>branch_misses<span class=\"w\">       </span>919K<span class=\"w\">  </span>±<span class=\"w\">  </span>107K<span class=\"w\">      </span>675K<span class=\"w\">  </span>…<span class=\"w\"> </span><span class=\"m\">1</span>.13M<span class=\"w\">           </span><span class=\"m\">0</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"m\">0</span>%<span class=\"o\">)</span><span class=\"w\">        </span>⚡-<span class=\"w\"> </span><span class=\"m\">16</span>.6%<span class=\"w\"> </span>±<span class=\"w\">  </span><span class=\"m\">4</span>.2%\n</code></pre></div>\n</div></div>",
        "id": 506037427,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742185436
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span>  -- we're adding a lot of knobs and dials for tuning the compiler. I appreciate these are all things that we can tune later. </p>\n<p>I'm wondering if we should pull all the constants out into a single file.</p>",
        "id": 506636486,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1742361467
    },
    {
        "content": "<p>Maybe one day we have some automated thing that can help us tune these based on real code (i.e. using something like Osprey)... but even manually it would be easier to surface all of these decisions if they are in one place.</p>",
        "id": 506636608,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1742361551
    },
    {
        "content": "<p>Yeah, definitely lots of nobs. I just have been learning tracy and thus tuning a bunch of random ones</p>",
        "id": 506639939,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742363567
    },
    {
        "content": "<p>Appart for initial capacities, I don't think we'll have too many bespoke constants</p>",
        "id": 506639974,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742363593
    },
    {
        "content": "<p>And capacities are likely something that should be tune with context</p>",
        "id": 506639992,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742363605
    },
    {
        "content": "<p>That said, setting a constant somewhere for the default capacity if people don't know what to pick sounds like protentially a good idea.</p>",
        "id": 506640052,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742363642
    },
    {
        "content": "<p>What I like about putting the constants in a single file is that its easier to track the history of any changes. If we change constants in future based on some profiling... we will include the analysis/evaluation in the PR and so we always have a good point of reference that is easy to find.</p>",
        "id": 506640330,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1742363790
    },
    {
        "content": "<p>I could also imagine a future where different users might want different parameters. Like maybe if I'm using roc in some special way I might want to change things to suit me.</p>",
        "id": 506640504,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1742363899
    },
    {
        "content": "<p>Yeah, makes some sense. I'm not fully sure there are good names for these various constants cause many of them will just be the starting size of arbitrary containers or maybe a ratio from the input source to the size. That is where local reasoning makes a lot of sense. But I totally understand the want to have all nobs in one place.</p>",
        "id": 506641198,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742364206
    }
]