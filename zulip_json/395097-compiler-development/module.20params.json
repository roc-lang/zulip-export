[
    {
        "content": "<p>So I found some time today to work on <a href=\"https://docs.google.com/document/d/110MwQi7Dpo1Y69ECFXyyvDWzF4OYv1BLojIm08qDTvg/edit?pli=1\">Module Params</a>. I'm starting with the parser changes for the inline import syntax described <a href=\"https://docs.google.com/document/d/1E_77fO-44BtoBtXoVeWyGh1xN2KRTWTu8q6i25RNNx0/edit#heading=h.34oh2o35t50f\">here</a>.</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">Json</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">Unicode</span><span class=\"w\"> </span><span class=\"kr\">as</span><span class=\"w\"> </span><span class=\"kt\">Uc</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"err\">[</span><span class=\"nc\">Req</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Resp</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nv\">from</span><span class=\"w\"> </span><span class=\"kt\">InternalHttp</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"err\">[</span><span class=\"nc\">CodePoint</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">first</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nv\">from</span><span class=\"w\"> </span><span class=\"kt\">CodePoint</span><span class=\"w\"> </span><span class=\"kr\">as</span><span class=\"w\"> </span><span class=\"kt\">Cp</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">foo</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nv\">from</span><span class=\"w\"> </span><span class=\"s\">\"some-file.txt\"</span>\n</code></pre></div>\n<p>I think it makes sense to treat these as defs because they can appear in the top-level, but also nested in an expression/expect. </p>\n<p>My first question is whether it would be appropriate to add a variant to <a href=\"https://github.com/roc-lang/roc/blob/668a9d363d0350002b487f2501444f5aa684f99e/crates/compiler/parse/src/ast.rs#L418\"><code>ValueDef</code></a> for imports? At first I thought imports aren't \"values\", but we seem to have <code>Expect</code> and <code>Dbg</code> in that union.</p>\n<p>If not, I suppose we can change <a href=\"https://github.com/roc-lang/roc/blob/668a9d363d0350002b487f2501444f5aa684f99e/crates/compiler/parse/src/expr.rs#L1026\"><code>SingleDef.type_or_value</code></a> to something like <code>type_or_value_or_import</code> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 404120299,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1700926233
    },
    {
        "content": "<p>I think they structurally are values if we truly allow them anywhere (though I could see an argument for only allowing them at the top of a block). They are kinda a pattern matching let statement, just over modules.</p>",
        "id": 404121010,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700926854
    },
    {
        "content": "<p>yeah I think they go in the same category as <code>dbg</code> and <code>expect</code>, and should parse the same way those do</p>",
        "id": 404122833,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700928297
    },
    {
        "content": "<p>I think of them more like statements or declarations than values</p>",
        "id": 404122874,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700928351
    },
    {
        "content": "<p>Agreed, maybe consider renaming ValueDef if it's appropriate</p>",
        "id": 404123448,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1700929074
    },
    {
        "content": "<p>Cool. So basically, <code>ValueDef</code> are any “statements” that are not type definitions.</p>",
        "id": 404129430,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1700932915
    },
    {
        "content": "<p>I’m struggling to come up with a name that captures that exactly. I’ll keep it for now and maybe it’ll become apparent as we implement more things in the proposal.</p>",
        "id": 404130578,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1700933481
    },
    {
        "content": "<p>inline imports are convenient I guess but do mean that we need to also support that in load. it's no longer true that after reading the header you know all dependencies, you now need to at least parse the whole file</p>",
        "id": 404164355,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1700948431
    },
    {
        "content": "<p>yep, for sure</p>",
        "id": 404164449,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700948474
    },
    {
        "content": "<p>although I think that will actually simplify things a bit, and I don't think the performance gains turned out to be significant after all <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 404164513,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700948506
    },
    {
        "content": "<p>If we really wanted to, I suppose we could parse the ones between the header and the first non-import def (common case), and start processing those before parsing the rest of the file</p>",
        "id": 404165249,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1700948799
    },
    {
        "content": "<p>but that'd probably complicate things a bit</p>",
        "id": 404165363,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1700948855
    },
    {
        "content": "<p>another possibility would be to have the parser take an \"import listener\" which it would call every time it parsed an import, so it would immediately enqueue other modules as soon as it encountered them</p>",
        "id": 404166136,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700949196
    },
    {
        "content": "<p>but really I think the best answer is to make the parser so fast there'd be no noticeable difference between the more complicated strategies and just parsing the whole file and reporting all the imports at the end <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 404166244,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700949243
    },
    {
        "content": "<p>yeah I'm not worried about performance, but it is some extra complexity</p>",
        "id": 404167753,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1700949797
    },
    {
        "content": "<p>What is <code>Malformed</code> for exactly? In the new proposal, module names can't have dots. If we encounter some during parsing should that be treated as a failure or as malformed?</p>",
        "id": 404299993,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1701042071
    },
    {
        "content": "<p>Hm, it looks like we use that for generating runtime errors in codegen. I wonder if we should still try to run if you have a bad import.</p>",
        "id": 404300240,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1701042345
    },
    {
        "content": "<p>I think keeping it is Malformed is good if it's not a lot of effort. It also means type checking can proceed with import errors</p>",
        "id": 404303129,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1701044433
    },
    {
        "content": "<p>the general rule is \"always proceed\"</p>",
        "id": 404304377,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701045171
    },
    {
        "content": "<p>my general thinking on this is that an advantage interpreted languages (usually) have over statically compiled languages is that you can always run them no matter what problems there are, meaning you can always attempt to run the program no matter what</p>",
        "id": 404304534,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701045248
    },
    {
        "content": "<p>so the idea is to try to get that benefit by reporting errors at compile time but still proceeding to run the program if that was requested (e.g. via <code>roc run</code>) and then generating a crash once we encounter it in practice</p>",
        "id": 404304613,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701045293
    },
    {
        "content": "<p>so for example, if an invalid <code>import</code> is located inside a function, it might never come up if you're running a program that never hits that code path</p>",
        "id": 404304679,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701045331
    },
    {
        "content": "<p>That makes sense, thanks!</p>",
        "id": 404310726,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1701048490
    },
    {
        "content": "<p>That function could even run fine until the point it tries to reference an (incorrectly) imported symbol</p>",
        "id": 404310953,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1701048614
    },
    {
        "content": "<p>How do we want to format multi-line imports? Something like this?</p>\n<div class=\"codehilite\"><pre><span></span><code>import [\n     map,\n     int,\n] from Json as J\n</code></pre></div>",
        "id": 404863561,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1701263881
    },
    {
        "content": "<p>This feels too whitespace heavy</p>\n<div class=\"codehilite\"><pre><span></span><code>import\n  [\n     map,\n     int,\n  ]\n  from Json\n  as J\n</code></pre></div>",
        "id": 404863824,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1701263962
    },
    {
        "content": "<p>Yeah, the first one looks better</p>",
        "id": 404863905,
        "sender_full_name": "Anton",
        "timestamp": 1701263992
    },
    {
        "content": "<p>Also I think we should only allow newlines and comments inside  the exposed members part (<code>[ ]</code>)</p>",
        "id": 404865712,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1701264540
    },
    {
        "content": "<p>as opposed to...? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 404867701,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701265115
    },
    {
        "content": "<p>I mean something like this shouldn't be allowed, right?</p>\n<div class=\"codehilite\"><pre><span></span><code>import\n   # TODO: Use new module\n   DeprecatedJson\n</code></pre></div>",
        "id": 404867844,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1701265163
    },
    {
        "content": "<p>(edited: Removed already disallowed dot)</p>",
        "id": 404868067,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1701265227
    },
    {
        "content": "<p>Why not?</p>",
        "id": 404875384,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1701267395
    },
    {
        "content": "<p>Well, it could. I just haven’t seen that before.</p>",
        "id": 404894691,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1701272267
    },
    {
        "content": "<p>Oh wow, Elm allows this</p>",
        "id": 404894871,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1701272315
    },
    {
        "content": "<p>If you can have comments between any of the keywords, we probably need a few different format styles</p>",
        "id": 404896401,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1701272760
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>import Json as J\nimport\n  # comment\n  Json as J\n\nimport\n  # comment\n  Json\n  # comment\n  as J\n\nimport [\n  map,\n  int\n] from Json as J\n\nimport\n  # comment\n  [\n    map,\n    int\n  ]\n  # comment\n  from\n    # comment\n    Json\n  # comment\n  as\n    # comment\n    J\n</code></pre></div>",
        "id": 404897342,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1701273046
    },
    {
        "content": "<p>I feel like comments should be supported anywhere. A bias, but to me it would feel weird if adding a comment somewhere causes a parse error.</p>",
        "id": 404898447,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1701273368
    },
    {
        "content": "<p>The formatting probably doesn't need to be perfect I think</p>",
        "id": 404898539,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1701273399
    },
    {
        "content": "<p>Yeah, that's a good point</p>",
        "id": 404898751,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1701273477
    },
    {
        "content": "<p>I found <a href=\"https://github.com/roc-lang/roc/blob/ead90313d89e8939549732136d536f301e522a16/crates/compiler/fmt/src/annotation.rs#L93-L100\"><code>is_collection_multiline</code></a> under <code>annotation.rs</code> which we seem to use in other modules for non-annotation purposes. Shouldn't this live in <code>collection.rs</code>?</p>",
        "id": 404950514,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1701292163
    },
    {
        "content": "<p>I need it in <code>def.rs</code> but I wasn't sure whether we consider ok to use it there</p>",
        "id": 404950676,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1701292234
    },
    {
        "content": "<p>moving it makes sense to me! <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 404984469,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701308154
    },
    {
        "content": "<p>there's a good chance it existed before we'd created <code>collection.rs</code></p>",
        "id": 404984534,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701308169
    },
    {
        "content": "<p>The parser and formatter for inline imports is mostly done! I started looking into canonicalization now, and realized that introducing inline imports before <a href=\"https://docs.google.com/document/d/1E_77fO-44BtoBtXoVeWyGh1xN2KRTWTu8q6i25RNNx0/edit#heading=h.x84bh32l37em\">\"Module and privacy changes\"</a> is probably a waste of effort since the module system changes significantly, and the new imports are just not compatible with the current system even at the syntax level (e.g. packages shorthand).</p>\n<p>I think it probably makes sense to do <a href=\"https://docs.google.com/document/d/1E_77fO-44BtoBtXoVeWyGh1xN2KRTWTu8q6i25RNNx0/edit\">this</a> wholesale. Let me know what you think.</p>",
        "id": 405368490,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1701438903
    },
    {
        "content": "<p>I would still break it into small reviewable PRs but not to <code>main</code>.</p>",
        "id": 405368685,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1701438963
    },
    {
        "content": "<p>makes sense to me! <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 405373210,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701440219
    },
    {
        "content": "<p>Should we sort imports alphabetically like elm format does?</p>",
        "id": 405587594,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1701567194
    },
    {
        "content": "<p>Sorting whole import defs might feel weird, but it might make sense to sort names inside <code>exposing</code></p>",
        "id": 405587758,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1701567300
    },
    {
        "content": "<p>I think so, yeah!</p>",
        "id": 405588410,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701567758
    },
    {
        "content": "<p>also capitalized things (so, types and abilities) before non-capitalized things</p>",
        "id": 405588459,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701567797
    },
    {
        "content": "<p>Cool! And do you agree we shouldn't reorder whole import defs or do you think we should try it?</p>",
        "id": 405588576,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1701567872
    },
    {
        "content": "<p>hm, what would be an example of that?</p>",
        "id": 405588656,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701567927
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>import B\nimport A\n</code></pre></div>\n<p>would be formatted to:</p>\n<div class=\"codehilite\"><pre><span></span><code>import A\nimport B\n</code></pre></div>",
        "id": 405588683,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1701567956
    },
    {
        "content": "<p>oh interesting...yeah I think let's actually try it</p>",
        "id": 405588743,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701567973
    },
    {
        "content": "<p>if they're all in a group, at least</p>",
        "id": 405588757,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701567985
    },
    {
        "content": "<p>like one after another</p>",
        "id": 405588761,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701567990
    },
    {
        "content": "<p>Gotcha! Yeah, I like that elm format does this. I thought it would not be as useful when imports aren't in a centralized place, but that might still be the case for a lot of modules.</p>",
        "id": 405588821,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1701568042
    },
    {
        "content": "<p>I like it that <code>elm-format</code> does this too, and I'm glad I wrote it into the original <code>elm-format</code> spec document! <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 405594609,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701571891
    },
    {
        "content": "<p>Yeah it is nice to respect line break grouping so I can group certain imports together when I want to but still get sorting within those groups</p>",
        "id": 405600275,
        "sender_full_name": "Pearce Keesling",
        "timestamp": 1701576216
    },
    {
        "content": "<p>Re this: <a href=\"https://github.com/roc-lang/roc/issues/6172\">https://github.com/roc-lang/roc/issues/6172</a></p>\n<p>Instead of using a special module name parser, I’m leaning towards just using the regular identifier parser and treating this case as malformed. So it wouldn’t fail as a syntax error and we can provide a helpful error message explaining how module names must be capitalized.</p>",
        "id": 405712967,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1701649463
    },
    {
        "content": "<p>Is there a particular design behind only allowing valid ident names for module file and folder names? It came up for me when I wanted to put my AoC into a 2023 folder and 01 subfolder, but they aren't valid idents so that was a parsing error.</p>",
        "id": 405713283,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1701649653
    },
    {
        "content": "<p>well for referring to them in a qualified way</p>",
        "id": 405713400,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701649700
    },
    {
        "content": "<p>e.g. <code>Foo.Bar.baz</code></p>",
        "id": 405713413,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701649708
    },
    {
        "content": "<p>To clarify, that’s not a thing anymore in the new proposal, right?</p>",
        "id": 405713742,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1701649916
    },
    {
        "content": "<p>hm true</p>",
        "id": 405714222,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701650175
    },
    {
        "content": "<p>well, <code>Bar.baz</code> still is</p>",
        "id": 405714230,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701650179
    },
    {
        "content": "<p>so like if you loaded from a module named <code>x-y-z.roc</code> then referring to that in a qualified way would be <code>x-y-z.baz</code> which definitely means something else <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 405714289,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701650213
    },
    {
        "content": "<p>Is there a bit of a convention here, apps/packages/platform mains are lowercase and other modules are uppercase?</p>",
        "id": 405714975,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1701650548
    },
    {
        "content": "<p>Totally. I suppose we could support that by requiring an alias, but honestly I haven’t had the need to do something like this in Elm.</p>",
        "id": 405714985,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1701650556
    },
    {
        "content": "<p>yeah same</p>",
        "id": 405715003,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701650565
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/395097-compiler-development/topic/module.20params/near/405714975\">said</a>:</p>\n<blockquote>\n<p>Is there a bit of a convention here, apps/packages/platform mains are lowercase and other modules are uppercase?</p>\n</blockquote>\n<p>yeah exactly - partly because those can't be imported as modules anyway</p>",
        "id": 405715041,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701650581
    },
    {
        "content": "<p>so they can be named anything</p>",
        "id": 405715066,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701650587
    },
    {
        "content": "<p>I was looking at <a href=\"https://github.com/roc-lang/roc/issues/6185\">this issue</a> related to imports and realized that I don't know how it's supposed to work. </p>\n<p>So if you have an <code>app</code> or <code>package</code> you can specify dependency packages, import modules from them, and you can also import <code>interface</code> modules that use those packages. If you run <code>roc check</code> (or test) against the <code>app</code> file, everything works as expected.</p>\n<p>However, you can also run <code>roc check</code> with an <code>interface</code> file directly, and it works fine as long as you don't import a package. This makes sense because since there's no  <code>app</code>, there's no way it can know what package the shorthand refers to. I imagine the LSP would also have this problem as it tries to check or autocomplete a module. </p>\n<p>Is there a plan to resolve the app somehow? Maybe there's a convention for where to find it, or a CLI flag that can be specified?</p>",
        "id": 406294047,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1701865549
    },
    {
        "content": "<p>yeah it could be an app, package, or platform too</p>",
        "id": 406294466,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701865681
    },
    {
        "content": "<p>certainly we already have a convention of that being main.roc, but of course it doesn't have to be</p>",
        "id": 406294583,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701865714
    },
    {
        "content": "<p>I think the cli flag option makes sense</p>",
        "id": 406294693,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701865757
    },
    {
        "content": "<p>LSP could do things like trying main.roc first, and if that's not there, try all the .roc files in the folder (it's probably going to end up reading and parsing them all anyway, so once we have caching that should be cheap) and then remembering which one it concluded was the root module until that file is deleted from the file system</p>",
        "id": 406294941,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701865845
    },
    {
        "content": "<p>You'd probably need a config option for the LSP too, in case you have multiple apps.</p>",
        "id": 406295077,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1701865902
    },
    {
        "content": "<p>Do you think the CLI could also default to <code>main.roc</code> or should we fail and require the user to specify when checking a module?</p>",
        "id": 406295201,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1701865940
    },
    {
        "content": "<p>yeah I think multiple apps should be very rare unless they're small scripts that probably don't have interfaces, but of course it could happen <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 406295429,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701866031
    },
    {
        "content": "<p>I think default to main.roc</p>",
        "id": 406295510,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701866046
    },
    {
        "content": "<p>Yeah, that seems convenient. I suppose it would recursively try to find it from the module's directory and back. I believe this is how node finds <code>node_modules</code>, for example.</p>",
        "id": 406295768,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1701866141
    },
    {
        "content": "<p>Maybe just looking in the current directory is more sensible, though</p>",
        "id": 406296017,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1701866234
    },
    {
        "content": "<p>oh yeah I forget where we ended up on the interface name appearing at the start of the module or not</p>",
        "id": 406297139,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701866664
    },
    {
        "content": "<p>if it's in the source file, then we know what directory to look in</p>",
        "id": 406297168,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701866678
    },
    {
        "content": "<p>but if not, then yeah we'd have to recurse</p>",
        "id": 406297186,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701866686
    },
    {
        "content": "<p>Well, what we need to find is the app/package file and I don't think the module would refer to that anyway.</p>",
        "id": 406297300,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1701866742
    },
    {
        "content": "<p>I might have misunderstood what you meant</p>",
        "id": 406297424,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1701866781
    },
    {
        "content": "<p>like if I have <code>interface Foo.Bar.Baz</code> then I know to look up exactly 2 directories (<code>Foo/Bar/</code>) for the root module</p>",
        "id": 406298040,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701867020
    },
    {
        "content": "<p>but if that isn't declared at the top of the file, then the root module could be any number of directories up</p>",
        "id": 406298114,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701867055
    },
    {
        "content": "<p>Ah, I didn't think of that! Yeah, at least in the google doc, it looks like we won't have that anymore.</p>",
        "id": 406298155,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1701867072
    },
    {
        "content": "<p>It doesn't look like that changed from Zulip discussions. At least, I haven't found that.</p>",
        "id": 406298723,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1701867296
    },
    {
        "content": "<p>Personally, I like the idea of using the file name as the source of truth. Having to keep those in sync can be a little annoying in Elm.</p>",
        "id": 406299040,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1701867420
    },
    {
        "content": "<p>I'm now torn, though. It does seem convenient for this use case. I don't care that much about the implementation, recursing would probably be fine, but I think for the user, it might be more intuitive to find the app/package this way.</p>",
        "id": 406299959,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1701867725
    },
    {
        "content": "<p>besides convenience, another theoretical benefit of not having the path there is that multiple root modules in different directories can import the same interface</p>",
        "id": 406301833,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701868431
    },
    {
        "content": "<p>I've never actually wanted to do this in practice though <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 406304065,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701869201
    },
    {
        "content": "<p>I just realized that we don’t need to recurse to find the app/package main since there won’t be module folders anymore <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 407006874,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1702181049
    },
    {
        "content": "<p>oh right! <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 407007135,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1702181280
    },
    {
        "content": "<p>Do we only want to parse record literals for module params or can they be any expression?</p>\n<p>In other words, should this be allowed?</p>\n<div class=\"codehilite\"><pre><span></span><code>params = { echo }\n\nimport A params\n</code></pre></div>",
        "id": 407008643,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1702182411
    },
    {
        "content": "<p>I guess not, but just to be sure <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 407008725,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1702182473
    },
    {
        "content": "<p>only record literals I think</p>",
        "id": 407008985,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1702182676
    },
    {
        "content": "<p>(we can always relax that in the future if there's some specific reason it seems like a good idea)</p>",
        "id": 407009018,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1702182712
    },
    {
        "content": "<p>Sounds good. I thought there might be some use cases where passing a tag could be nice, but I couldn't come up with any obvious ones :D</p>",
        "id": 407009123,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1702182776
    },
    {
        "content": "<p>for testing I can imagine theoretically wanting to pass a record in, but supporting that is more than just a parsing concern</p>",
        "id": 407009395,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1702182992
    },
    {
        "content": "<p>doesn't seem worth assuming it's a good idea <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 407009410,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1702183007
    },
    {
        "content": "<p>I'm back to this now that I have some free time <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> </p>\n<p>I'm running into a parsing issue I don't have an obvious solution for. Take this example:</p>\n<div class=\"codehilite\"><pre><span></span><code>users : List { name: Str, age: U8 }\nusers =\n    import &quot;users.json&quot; as data : Str\n    data |&gt; parseJson |&gt; Result.withDefault []\n</code></pre></div>\n<p>When it's parsing the annotation in <code>data : Str</code>, it will continue to the next line and parse the intended <code>data</code> expr identifier as a type variable for <code>Str</code>, as if it were <code>... as data : Str data</code>. </p>\n<p>It later fails when it finds the <code>|&gt;</code> because that doesn't make sense as part of type annotation or as the start of the expression that follows. </p>\n<p>Initially, I think that wouldn't happen because I use <code>increment_min_indent</code> after I find the <code>import</code> keyword. However, it looks like <a href=\"https://github.com/roc-lang/roc/blob/5d98783cf2767e6d1c96b80ffeca8a1ff3e84637/crates/compiler/parse/src/module.rs#L573\"><code>module::typed_ident</code> resets it</a>.</p>\n<p>Any ideas on how to handle this?</p>",
        "id": 410053910,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1703614697
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"453336\">@Joshua Warner</span> may have an idea</p>",
        "id": 410054287,
        "sender_full_name": "Anton",
        "timestamp": 1703615044
    },
    {
        "content": "<p>We only support <code>Str</code> and <code>List U8</code> for ingested files, so I could cheat here, but that seems weird</p>",
        "id": 410054599,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1703615329
    },
    {
        "content": "<p>I'm not sure <code>typed_ident</code> needs to reset min ident. At first, I thought that was because we want this to parse:</p>\n<div class=\"codehilite\"><pre><span></span><code>User : {\n  age: U8,\n}\n</code></pre></div>\n<p>However, given that <a href=\"https://github.com/roc-lang/roc/blob/5d98783cf2767e6d1c96b80ffeca8a1ff3e84637/crates/compiler/parse/src/module.rs#L555-L587\"><code>typed_ident</code></a> itself doesn't <code>increment_min_ident</code> after the name (<code>User</code>), that would still parse I think.</p>",
        "id": 410055199,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1703615802
    },
    {
        "content": "<p>I think the fault here lies with <code>type_annotation::expression</code> not enforcing that the second (and later) terms in a type expression must be indented relative to the line the expression starts on</p>",
        "id": 410056190,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1703616613
    },
    {
        "content": "<p>Actually... the fix is fairly simple. This <code>and!</code> should be an <code>indented_seq!</code> instead: <a href=\"https://github.com/roc-lang/roc/blob/5d98783cf2767e6d1c96b80ffeca8a1ff3e84637/crates/compiler/parse/src/type_annotation.rs#L389\">https://github.com/roc-lang/roc/blob/5d98783cf2767e6d1c96b80ffeca8a1ff3e84637/crates/compiler/parse/src/type_annotation.rs#L389</a></p>",
        "id": 410056350,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1703616800
    },
    {
        "content": "<p>Oh, cool. I'll try that.</p>",
        "id": 410056469,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1703616909
    },
    {
        "content": "<p>FWIW all tests seem to pass if I remove <code>reset_min_indent</code> from <code>typed_ident</code>, and my example parses correctly</p>",
        "id": 410056488,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1703616923
    },
    {
        "content": "<p>Do you think we still need it?</p>",
        "id": 410056509,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1703616949
    },
    {
        "content": "<p>Yeah, I think it's arguable whether that reset_min_indent belongs there</p>",
        "id": 410056512,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1703616950
    },
    {
        "content": "<p>On the one hand, it does make the parser a little more error tolerant if someone accidentally put a newline right after the : and forgot to indent. On the other hand, that someone might equally have forgotten to put a type after the :, and by continuing to parse at the same indent level, we're just going to be accidentally interpreting part of the next line as a type.</p>",
        "id": 410056661,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1703617068
    },
    {
        "content": "<p>Yeah, exactly what I was thinking.</p>\n<p>It looks like <a href=\"https://github.com/roc-lang/roc/blob/5d98783cf2767e6d1c96b80ffeca8a1ff3e84637/crates/compiler/parse/src/parser.rs#L1332\">unlike <code>and!</code></a>, <code>indented_seq!</code> <a href=\"https://github.com/roc-lang/roc/blob/5d98783cf2767e6d1c96b80ffeca8a1ff3e84637/crates/compiler/parse/src/parser.rs#L1378\">discards the output of <code>$p1</code></a>, so it doesn't quite work.</p>",
        "id": 410057304,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1703617426
    },
    {
        "content": "<p>It works more like <code>skip_first!</code>, which makes sense the other cases use keywords in <code>$p1</code></p>",
        "id": 410057453,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1703617512
    },
    {
        "content": "<p>We probably want a variant of <code>indented_seq!</code> that doesn't drop the first argument</p>",
        "id": 410057552,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1703617571
    },
    {
        "content": "<p>actually, we should probably just rename the current one to <code>indented_seq_skip_first</code> or something, and make a new one that returns both args</p>",
        "id": 410057641,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1703617649
    },
    {
        "content": "<p>It seems to work fine with this change! Thank you <span aria-label=\"raised hands\" class=\"emoji emoji-1f64c\" role=\"img\" title=\"raised hands\">:raised_hands:</span></p>",
        "id": 410057973,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1703617918
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453336\">Joshua Warner</span> <a href=\"#narrow/stream/395097-compiler-development/topic/module.20params/near/410056661\">said</a>:</p>\n<blockquote>\n<p>On the one hand, it does make the parser a little more error tolerant if someone accidentally put a newline right after the : and forgot to indent. On the other hand, that someone might equally have forgotten to put a type after the :, and by continuing to parse at the same indent level, we're just going to be accidentally interpreting part of the next line as a type.</p>\n</blockquote>\n<p>I'm curious what <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> thinks about this, but that's not a blocker.</p>",
        "id": 410058071,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1703617980
    },
    {
        "content": "<p>I'm working on updating <code>load</code> to work with inline imports. As we've discussed before, now that imports could appear anywhere, we don't know the dependencies until we have actually parsed the whole file (not just the header).</p>\n<p>I'm not sure what's the best way to find these after parsing, though. They are available in the AST, but walking through all the expressions to find them seems wasteful, or is that ok? Another option, is to add a <code>Vec</code> to the parser's state to which we would insert imported module names as we find them. Does that sound like a good idea?</p>",
        "id": 410203236,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1703712204
    },
    {
        "content": "<p>I would suggest walking the AST first and then if it turns out having it in the parser state gets rid of a bottleneck doing that later.</p>",
        "id": 410203913,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1703712702
    },
    {
        "content": "<p>So while building headers in <code>load</code>, we have a <code>scope_size</code> variable that gets incremented whenever we find an import and is later used to allocate hashmap. </p>\n<p>That all makes sense, but I think what we are incrementing it by is wrong: <a href=\"https://github.com/roc-lang/roc/blob/4569770c82c48b297d6552405023ee16f271cd86/crates/compiler/load_internal/src/file.rs#L4312\">https://github.com/roc-lang/roc/blob/4569770c82c48b297d6552405023ee16f271cd86/crates/compiler/load_internal/src/file.rs#L4312</a></p>\n<p>I think that should be <code>+= exposed.len()</code>, not <code>+= num_exposes</code> since <code>num_exposes</code> is actually the number of exposed names from the current module, not those from the import.</p>",
        "id": 410336131,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1703793555
    },
    {
        "content": "<p>I think you're right!</p>",
        "id": 410337361,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1703794345
    },
    {
        "content": "<p>I just realized we can now do this without a special REPL command: <a href=\"https://github.com/roc-lang/roc/issues/609\">https://github.com/roc-lang/roc/issues/609</a> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 410462739,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1703873816
    },
    {
        "content": "<p>ha, good point!</p>",
        "id": 410462796,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1703873857
    },
    {
        "content": "<p>I'm rewriting unused import warnings because, with inline imports, they now need to happen in <code>can</code> instead of <code>load</code> as they're limited to certain scopes.</p>\n<p>It looks like currently we don't differentiate between qualified and unqualified symbol references, which means that we don't report exposed symbols from imports, even if they're only used qualified.</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">app</span><span class=\"w\"> </span><span class=\"s\">\"example\"</span>\n<span class=\"w\">    </span><span class=\"nx\">packages</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">pf</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"..\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"nx\">imports</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">pf</span><span class=\"p\">.</span><span class=\"nx\">Stdout</span><span class=\"p\">.{</span><span class=\"w\"> </span><span class=\"nx\">line</span><span class=\"w\"> </span><span class=\"p\">}]</span>\n<span class=\"w\">                       </span><span class=\"c1\"># ^^^^ this is unused</span>\n<span class=\"w\">    </span><span class=\"nx\">provides</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nx\">to</span><span class=\"w\"> </span><span class=\"nx\">pf</span>\n\n<span class=\"nv\">main</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"nx\">Stdout</span><span class=\"p\">.</span><span class=\"nx\">line</span><span class=\"w\"> </span><span class=\"s\">\"Hello world!\"</span>\n<span class=\"w\">    </span><span class=\"c1\">#      ^^^^ symbol used here but qualified</span>\n</code></pre></div>\n<p>This is a bug, right?</p>",
        "id": 412251158,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1704936905
    },
    {
        "content": "<p>I found <a href=\"https://github.com/roc-lang/roc/blob/4e51efcba5a9e97063a67a855d5dbb6adaeba116/crates/compiler/load_internal/tests/fixtures/build/interface_with_deps/Primary.roc#L3\">tests</a> with these unused exposed names (see <code>Dep2.{ two }</code>), but I guess those are just leftovers</p>",
        "id": 412253104,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1704938360
    },
    {
        "content": "<p>yeah that's a bug!</p>",
        "id": 412253321,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704938491
    },
    {
        "content": "<p>I don't think I even considered this scenario when I was writing the unused warnings in like 2019 <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 412253338,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704938511
    },
    {
        "content": "<p>Makes sense. I'll fix it! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 412253767,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1704938824
    },
    {
        "content": "<p>thank you, appreciate it! <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 412253905,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704938929
    },
    {
        "content": "<p>I think we need to tweak the copy a bit now that imports can appear inside defs:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">unusedModule</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"kr\">import</span><span class=\"w\"> </span><span class=\"kt\">Dep</span>\n<span class=\"w\">    </span><span class=\"s\">\"I'm not using Dep\"</span>\n</code></pre></div>\n<p>As I have it now, this would be reported as:</p>\n<div class=\"codehilite\"><pre><span></span><code>── UNUSED IMPORT ───────────────────────────────────── tmp/unused_imports/Main ─\n\nNothing from Dep is used in this module.\n\n10│      import Dep\n         ^^^^^^^^^^\n\nSince Dep isn&#39;t used, you don&#39;t need to import it\n</code></pre></div>\n<p>Should we use \"scope\" instead of \"module\" if it isn't top-level? Is that too technical?</p>",
        "id": 412254166,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1704939157
    },
    {
        "content": "<p>I'd just re-word it to \"Dep2  is imported but not used.\"</p>",
        "id": 412254227,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704939223
    },
    {
        "content": "<p>Ah cool, that's easy :)</p>",
        "id": 412254277,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1704939246
    },
    {
        "content": "<p>It looks like currently you can import a builtin explicitly and we'll just ignore it. Should we make that a warning?  It could be an opportunity to explain how builtins work <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 412430383,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1705011285
    },
    {
        "content": "<p>if we do, we might need special handling for the builtins themselves; they actually need to import each other explicitly</p>",
        "id": 412430839,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1705011506
    },
    {
        "content": "<p>Yeah, but that's as easy as <code>.is_builtin()</code></p>",
        "id": 412430950,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1705011578
    },
    {
        "content": "<p>This is what I'm thinking:</p>\n<div class=\"codehilite\"><pre><span></span><code>── BUILTIN IMPORT ───────────────────────────────────── tmp/unused_builtins/Main ─\n\nThe Str builtin was imported explicitly.\n\n10│      import Str\n         ^^^^^^^^^^\n\nBuiltins are imported automatically into every Roc module, so you can remove this line.\n\nYou can learn more about builtin modules at &lt;https://www.roc-lang.org/tutorial#builtin-modules&gt;\n</code></pre></div>",
        "id": 412431348,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1705011758
    },
    {
        "content": "<p>I don't know, maybe it's not that useful</p>",
        "id": 412431612,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1705011895
    },
    {
        "content": "<p>I think it's reasonable!</p>",
        "id": 412458299,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1705024141
    },
    {
        "content": "<p>in general we tend to warn for things that are definitely unnecessary</p>",
        "id": 412458329,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1705024159
    },
    {
        "content": "<p>I'd say only do it if you feel like it, but from a design perspective it seems like a good idea to me <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 412458379,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1705024188
    },
    {
        "content": "<p>I've been working on something for my Action-State experiment and stopped to think about this proposal and what it might look like. I'm just wondering what the following might look like in a module-params future?? Note the modules <code>Action</code>, <code>GUI</code>, and <code>Core</code> come from the platform.</p>\n<h3>Current</h3>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">interface</span><span class=\"w\"> </span><span class=\"kt\">Counter</span>\n<span class=\"w\">    </span><span class=\"n\">exposes</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">        </span><span class=\"kt\">Counter</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">init</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">render</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"n\">imports</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">ray</span><span class=\"o\">.</span><span class=\"kt\">Action</span><span class=\"o\">.</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">Action</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">ray</span><span class=\"o\">.</span><span class=\"kt\">Core</span><span class=\"o\">.</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">Color</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">ray</span><span class=\"o\">.</span><span class=\"kt\">GUI</span><span class=\"o\">.</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">Elem</span><span class=\"w\"> </span><span class=\"p\">}]</span>\n\n<span class=\"kt\">Counter</span><span class=\"w\"> </span><span class=\"kt\">:=</span><span class=\"w\"> </span><span class=\"kt\">I64</span>\n\n<span class=\"nf\">init</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">I64</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Counter</span>\n<span class=\"nf\">init</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"kt\">Counter</span>\n\n<span class=\"nf\">render</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Counter</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Color</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Elem</span><span class=\"w\"> </span><span class=\"kt\">Counter</span>\n<span class=\"nf\">render</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"o\">\\@</span><span class=\"kt\">Counter</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">color</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kt\">GUI</span><span class=\"o\">.</span><span class=\"n\">col</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">        </span><span class=\"kt\">GUI</span><span class=\"o\">.</span><span class=\"n\">button</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">text</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"s\">\"+\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">onPress</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"o\">\\@</span><span class=\"kt\">Counter</span><span class=\"w\"> </span><span class=\"n\">prev</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Action</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">@</span><span class=\"kt\">Counter</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">prev</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"kt\">GUI</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">label</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"s\">\"Clicked $(Num.toStr state) times\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">color</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"kt\">GUI</span><span class=\"o\">.</span><span class=\"n\">button</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">text</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"s\">\"-\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">onPress</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"o\">\\@</span><span class=\"kt\">Counter</span><span class=\"w\"> </span><span class=\"n\">prev</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Action</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">@</span><span class=\"kt\">Counter</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">prev</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">]</span>\n</code></pre></div>\n<h3>Future ??</h3>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kr\">module</span><span class=\"w\"> </span><span class=\"err\">{</span><span class=\"nn\">Elem</span><span class=\"p\">,</span><span class=\"kt\">Color</span><span class=\"p\">,</span><span class=\"n\">button</span><span class=\"p\">,</span><span class=\"n\">text</span><span class=\"p\">,</span><span class=\"n\">col</span><span class=\"p\">,</span><span class=\"n\">update</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Counter</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">init</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">render</span><span class=\"p\">]</span>\n\n<span class=\"kt\">Counter</span><span class=\"w\"> </span><span class=\"kt\">:=</span><span class=\"w\"> </span><span class=\"kt\">I64</span>\n\n<span class=\"nf\">init</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">I64</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Counter</span>\n<span class=\"nf\">init</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"kt\">Counter</span>\n\n<span class=\"nf\">render</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Counter</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Color</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Elem</span><span class=\"w\"> </span><span class=\"kt\">Counter</span>\n<span class=\"nf\">render</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"o\">\\@</span><span class=\"kt\">Counter</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">color</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">col</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">        </span><span class=\"n\">button</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">text</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"s\">\"+\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">onPress</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"o\">\\@</span><span class=\"kt\">Counter</span><span class=\"w\"> </span><span class=\"n\">prev</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">update</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">@</span><span class=\"kt\">Counter</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">prev</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"n\">text</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">label</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"s\">\"Clicked $(Num.toStr state) times\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">color</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"n\">button</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">text</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"s\">\"-\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">onPress</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"o\">\\@</span><span class=\"kt\">Counter</span><span class=\"w\"> </span><span class=\"n\">prev</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">update</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">@</span><span class=\"kt\">Counter</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">prev</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">]</span>\n</code></pre></div>",
        "id": 416689153,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1705630495
    },
    {
        "content": "<p>I'm not sure it makes sense for most of those pieces to be generic as module params. Module params are really just for dependency injection.</p>\n<p>So I would guess most of those inputs would be imported directly. Though I guess if you want your counter to be generic over gui/tui/etc you might do something like that.</p>",
        "id": 416695890,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705632119
    },
    {
        "content": "<p>Oh, so can we still import modules from the platform? </p>\n<p>Like <code>import ray.GUI {col, button, text}</code> etc?</p>",
        "id": 416696858,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1705632742
    },
    {
        "content": "<p>I think it will be <code>import ray.Gui exposing {col, button, text}</code></p>",
        "id": 416697780,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705633315
    },
    {
        "content": "<p>though not exactly sure the final syntax</p>",
        "id": 416697836,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705633332
    },
    {
        "content": "<p>Yeah, your local modules can import things from the platform, packages cannot</p>",
        "id": 416756825,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1705662823
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/395097-compiler-development/topic/module.20params/near/416697780\">said</a>:</p>\n<blockquote>\n<p>I think it will be <code>import ray.Gui exposing {col, button, text}</code></p>\n</blockquote>\n<p>That’s correct, except we are using square brackets <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<div class=\"codehilite\"><pre><span></span><code>import ray.Gui exposing [col, button, text]\n</code></pre></div>",
        "id": 416757090,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1705662930
    },
    {
        "content": "<p>I just got ingested files working for the new imports. I had to move some code from load/file to can/def which depended on the module's path, and I ended up having to thread that through a ton of can functions: <a href=\"https://github.com/roc-lang/roc/commit/002493e32c2c3784da7e0a9a1ade6b1f1c52e993\">diff</a></p>\n<p>Should I add that to can's <code>Env</code> instead? I'm not sure how we decide what goes in there</p>",
        "id": 416984932,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1705751443
    },
    {
        "content": "<p>I have an automatic fix for the import syntax working:<br>\n<a href=\"/user_uploads/22008/L60IoXYj3NYtNDaVYzYHdJoe/CleanShot-2024-01-27-at-15.42.05.mp4\">CleanShot-2024-01-27-at-15.42.05.mp4</a><br>\nI think this will help with the transition, given every single Roc file will be affected by it.</p>\n<div class=\"message_inline_image message_inline_video\"><a href=\"/user_uploads/22008/L60IoXYj3NYtNDaVYzYHdJoe/CleanShot-2024-01-27-at-15.42.05.mp4\" title=\"CleanShot-2024-01-27-at-15.42.05.mp4\"><video preload=\"metadata\" src=\"/user_uploads/22008/L60IoXYj3NYtNDaVYzYHdJoe/CleanShot-2024-01-27-at-15.42.05.mp4\"></video></a></div>",
        "id": 418438378,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1706381180
    },
    {
        "content": "<p>yoooooooo</p>",
        "id": 418438559,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1706381356
    },
    {
        "content": "<p>that's super nice!!!</p>",
        "id": 418438562,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1706381361
    },
    {
        "content": "<p>great stuff, <span class=\"user-mention\" data-user-id=\"489294\">@Agus Zubiaga</span>!</p>",
        "id": 418438567,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1706381374
    },
    {
        "content": "<p>I'm now working on the new headers keywords. I think we can also autofix a lot of that. Not everything though, since some of the semantics changed.</p>",
        "id": 418438867,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1706381701
    },
    {
        "content": "<p>what do you think of trying out having them be records instead of keywords?</p>",
        "id": 418439107,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1706381992
    },
    {
        "content": "<p>from <a href=\"#narrow/stream/304641-ideas/topic/Fewer.2Fdifferent.20keywords.20in.20the.20file.20header/near/412256602\">https://roc.zulipchat.com/#narrow/stream/304641-ideas/topic/Fewer.2Fdifferent.20keywords.20in.20the.20file.20header/near/412256602</a></p>",
        "id": 418439172,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1706382017
    },
    {
        "content": "<p>Interesting. I'll reply in that thread.</p>",
        "id": 418443072,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1706386103
    },
    {
        "content": "<p>Hey all! <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> asked me how this is going and I thought I would post an update publicly too.</p>\n<p>I haven’t had a lot of time outside of work lately, so I have been moving slowly. I should start getting more free time this week.</p>\n<p>Last time I touched it, I had the new inline imports working with all its features and the formatter would automatically upgrade header imports to this new syntax.</p>\n<p>I also started working on the syntax changes to the headers themselves, and formatter upgrade mechanism for those too. I’m hoping I’ll make some good progress on that this weekend.</p>\n<p>While the parser changes are easy, updating the thousands of mini roc files across tests and examples takes a significant part of the time. I can have the formatter do this automatically for some, but not for any of the <code>test_syntax</code> snapshot tests because we want the originals to be unformatted, so we can test how the formatter affects them.<br>\nThis is often creates conflicts with changes on <code>main</code> too.</p>\n<p>After this is all done, I’ll work on the privacy changes listed in the proposal and fixing some of the bugs in the module system in general.</p>\n<p>The actual work on implementing module params will likely start sometime in March.</p>",
        "id": 422032685,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1708194055
    },
    {
        "content": "<p>ooh, if there's something that requires lots of mechanical stuff with not much thought, I'd love to volunteer to help! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 422032818,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1708194142
    },
    {
        "content": "<p>that fits very well with the \"Dad has 15 minutes free and can't realistically do anything that requires loading lots of context, but could knock out a bunch of mechanical work in that time\" situation I very often find myself in these days <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 422032882,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1708194192
    },
    {
        "content": "<p>Haha nice, good to know! Let’s see how these days go and maybe I’ll push parser changes without necessary fixing everything</p>",
        "id": 422033849,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1708195107
    },
    {
        "content": "<p>cool, lmk anytime! And welcome back, exciting to hear about your plans on this! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 422034213,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1708195501
    },
    {
        "content": "<p>Ok, the <code>interface</code> to <code>module</code> syntax change is <a href=\"https://github.com/roc-lang/roc/commit/ebd5223a318dc7a958ee84894656b7d5bea38860\">done</a>. The old header is still supported and <code>roc format</code> updates it automatically like with <code>imports</code>.</p>",
        "id": 422134533,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1708295057
    },
    {
        "content": "<p>sweeeeeeeet!!!</p>",
        "id": 422134563,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1708295093
    },
    {
        "content": "<p>Now working on the new <code>app</code> header with the syntax discussed <a href=\"#narrow/stream/304641-ideas/topic/Fewer.2Fdifferent.20keywords.20in.20the.20file.20header/near/418444862\">here</a></p>",
        "id": 422134602,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1708295151
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/O5epA9pqsesWJeBr7vK3dfOk/CleanShot-2024-02-25-at-16.03.24.gif\">CleanShot-2024-02-25-at-16.03.24.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/O5epA9pqsesWJeBr7vK3dfOk/CleanShot-2024-02-25-at-16.03.24.gif\" title=\"CleanShot-2024-02-25-at-16.03.24.gif\"><img src=\"/user_uploads/22008/O5epA9pqsesWJeBr7vK3dfOk/CleanShot-2024-02-25-at-16.03.24.gif\"></a></div><p>Got the new app headers working today</p>",
        "id": 423283866,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1708887316
    },
    {
        "content": "<p>I fixed most of the tests, but I stumbled into <a href=\"https://github.com/roc-lang/roc/blob/f55df4bf6b99da1064abd98485516ee30ec739c1/crates/compiler/load_internal/tests/fixtures/build/app_with_deps/Quicksort.roc#L1\">something weird</a>: </p>\n<div class=\"codehilite\"><pre><span></span><code>app &quot;quicksort&quot; provides [swap, partition, partitionHelp, quicksort] to &quot;./platform&quot;\n</code></pre></div>",
        "id": 423283983,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1708887432
    },
    {
        "content": "<p>That <code>app</code> fixture uses a platform that's not specified in <code>packages</code> -which apparently is something you can do-, but the platform doesn't exist, yet the app is loaded fine</p>",
        "id": 423284122,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1708887598
    },
    {
        "content": "<p>I'm guessing it was one of the first, and is now a bit of a legacy thing. But I don't know.</p>",
        "id": 423284253,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1708887677
    },
    {
        "content": "<p>Yeah, it looks like the platform is ignored if you use that syntax. In the new <code>app</code> header, there's no <code>provides</code> keyword, so you have to specify the platform in the packages.</p>",
        "id": 423284500,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1708887893
    },
    {
        "content": "<p>I created a fake platform that'd take those functions in the fixture, but it looks like the helpers in <code>test_load</code> break if a platform is actually loaded <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 423284567,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1708887963
    },
    {
        "content": "<p>hm, that test seems redundant with <a href=\"https://github.com/roc-lang/roc/blob/f55df4bf6b99da1064abd98485516ee30ec739c1/crates/cli_testing_examples/algorithms/quicksort.roc\">https://github.com/roc-lang/roc/blob/f55df4bf6b99da1064abd98485516ee30ec739c1/crates/cli_testing_examples/algorithms/quicksort.roc</a></p>",
        "id": 423285487,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1708888872
    },
    {
        "content": "<p>maybe we can just delete it?</p>",
        "id": 423285492,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1708888877
    },
    {
        "content": "<p>we'll certainly get a test failure if that quicksort example breaks, and I'm not sure why 2 failures would be more helpful than 1 <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 423285510,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1708888901
    },
    {
        "content": "<p>Ah, good point. Thanks!</p>",
        "id": 423286143,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1708889425
    },
    {
        "content": "<p>this is looking AMAZING btw!!! <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span></p>",
        "id": 423286473,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1708889794
    },
    {
        "content": "<p>super exciting to see!</p>",
        "id": 423286481,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1708889804
    },
    {
        "content": "<p>Yeah, I think it looks so much cleaner too.</p>",
        "id": 423287131,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1708890484
    },
    {
        "content": "<p>I just realized that there's a special way to provide types to the platform in <code>app</code> headers:</p>\n<div class=\"codehilite\"><pre><span></span><code>app &quot;test&quot;\n    packages { pf: &quot;./platform&quot; }\n    provides [quicksort] { Flags, Model } to pf\n#                        ^^^^^^^^^^^^^^^^\n</code></pre></div>\n<p>How is this used in practice?</p>",
        "id": 424436758,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1709406111
    },
    {
        "content": "<p>I think this wouldn't work with the new syntax, and I wonder if we are using this or if it's legacy. I hadn't seen it before.</p>",
        "id": 424436864,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1709406156
    },
    {
        "content": "<p>Maybe they can be provided amongst the values <code>app [quicksort, Flags, Model]</code> like <code>module</code> exposed names</p>",
        "id": 424437192,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1709406375
    },
    {
        "content": "<p>But I still don't really get what these are for, couldn't the provided functions just have type vars?</p>",
        "id": 424437293,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1709406463
    },
    {
        "content": "<p>yeah it's a workaround</p>",
        "id": 424439017,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1709407758
    },
    {
        "content": "<p>we shouldn't need it anymore once we can pass closures to hosts</p>",
        "id": 424439040,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1709407773
    },
    {
        "content": "<p>(or rather, once we can correctly generate glue for doing that)</p>",
        "id": 424439053,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1709407792
    },
    {
        "content": "<p>Ah, I see. So we should keep it for now, right?</p>",
        "id": 424440457,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1709408864
    },
    {
        "content": "<p>yeah I think some applications probably rely on it right now</p>",
        "id": 424440661,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1709409032
    },
    {
        "content": "<p>I'd like to drop it eventually though</p>",
        "id": 424440676,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1709409045
    },
    {
        "content": "<p>What syntax should we use?</p>",
        "id": 424440855,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1709409193
    },
    {
        "content": "<p>maybe we can just accept uppercase identifiers in the square brackets for what the app provides to the platform <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 424444638,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1709412408
    },
    {
        "content": "<p>Sounds good, I'll do that.</p>",
        "id": 424447708,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1709415397
    },
    {
        "content": "<p>Technically, we already allow uppercase idents in the square brackets, because it just uses <code>exposes_entry</code>: <a href=\"https://github.com/roc-lang/roc/blob/26e21addeeab0bd0126aa6ee47c7138492d4fd38/crates/compiler/parse/src/module.rs#L239\">source</a></p>",
        "id": 424447759,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1709415465
    },
    {
        "content": "<p>I'll deal with it in <code>load</code></p>",
        "id": 424447832,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1709415518
    },
    {
        "content": "<p>nice, sounds good!</p>",
        "id": 424449551,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1709417164
    },
    {
        "content": "<p>Pasting some new errors here in case people have feedback:</p>\n<div class=\"codehilite\"><pre><span></span><code>   ── UNSPECIFIED PLATFORM in tmp/no_platform_specified/Test.roc ──────────────────\n\n    This app does not specify a platform:\n\n    1│&gt;  app [main] {\n    2│&gt;      json: &quot;../json/main.roc&quot;\n    3│&gt;  }\n\n    Every Roc app must select a package to use as its platform, like this:\n\n        app [main] {\n            pf: platform &quot;…path or URL to platform…&quot;\n        }\n\n    Tip: See an example in the tutorial: &lt;https://www.roc-lang.org/tutorial#building-an-application&gt;\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>    ── MULTIPLE PLATFORMS in tmp/multiple_platforms_specified/Test.roc ─────────────\n\n    This app specifies multiple packages as `platform`:\n\n    1│&gt;  app [main] {\n    2│&gt;      cli: platform &quot;../cli/main.roc&quot;,\n    3│&gt;      web: platform &quot;../web/main.roc&quot;,\n    4│&gt;  }\n\n    Roc apps must specify exactly one platform.\n</code></pre></div>",
        "id": 424453337,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1709421015
    },
    {
        "content": "<p>Maybe there’s something more insightful to say about the “multiple platforms” one</p>",
        "id": 424453594,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1709421341
    },
    {
        "content": "<p>We should have a FAQ entry for that. I can write one and we can link to it!</p>",
        "id": 424455625,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1709423074
    },
    {
        "content": "<p>Nice, that’d be great!</p>",
        "id": 424455731,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1709423168
    },
    {
        "content": "<p>New <code>package</code> headers are <a href=\"https://github.com/roc-lang/roc/commit/8dac981594f7c503474bcf51e2733addfcc2386f\">done</a>!</p>",
        "id": 424763734,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1709593493
    },
    {
        "content": "<p>I'm going to start working on the <a href=\"https://docs.google.com/document/d/1E_77fO-44BtoBtXoVeWyGh1xN2KRTWTu8q6i25RNNx0/edit?pli=1#heading=h.x84bh32l37em\">\"Module and package privacy changes\"</a> section now</p>",
        "id": 424763993,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1709593620
    },
    {
        "content": "<p>I still have to update the <code>platform</code> header, but I'll do that one later since that's not just a syntax change.</p>",
        "id": 424764169,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1709593706
    },
    {
        "content": "<p>The proposal indicates that it should be possible for nested packages to inherit packages from its parent:</p>\n<div class=\"codehilite\" data-code-language=\"F#\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">ParserCore</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">ParserCsv</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">ParserStr</span><span class=\"o\">]</span>\n<span class=\"w\">        </span><span class=\"n\">packages</span><span class=\"w\"> </span><span class=\"o\">[</span>\n<span class=\"w\">            </span><span class=\"n\">JsonDecode</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"s\">\"https://…/json/…\"</span><span class=\"o\">,</span>\n<span class=\"w\">            </span><span class=\"n\">CodePt</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Segment</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"s\">\"https://…/unicode/…\"</span><span class=\"o\">,</span>\n<span class=\"w\">            </span><span class=\"n\">Foo</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Blah</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Baz</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"o\">..</span>\n<span class=\"w\">        </span><span class=\"o\">]</span>\n</code></pre></div>\n<p>However, we later decided we need to keep the package shorthands, so what syntax should be use to inherit packages?</p>",
        "id": 424765352,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1709594404
    },
    {
        "content": "<p>Maybe something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">package</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">ParserCore</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ParserCsv</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ParserStr</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">json</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"s\">\"https://…/json/…\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">unicode</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"s\">\"https://…/unicode/…\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"n\">inherit</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">bar</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"n\">inherit</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 424765515,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1709594488
    },
    {
        "content": "<p>This is similar to the <code>platform</code> indicator in the <code>app</code> header</p>",
        "id": 424765620,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1709594537
    },
    {
        "content": "<p>Another option:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">package</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">ParserCore</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ParserCsv</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">ParserStr</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">json</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"s\">\"https://…/json/…\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">unicode</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"s\">\"https://…/unicode/…\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">bar</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 424765674,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1709594582
    },
    {
        "content": "<p>Or <code>foo: ..</code></p>",
        "id": 424765797,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1709594657
    },
    {
        "content": "<p>I like the second option, just <code>foo,</code> <code>bar,</code></p>",
        "id": 424782731,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1709605590
    },
    {
        "content": "<p>In Elm you can do this:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">Maybe</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">Maybe.Extra</span><span class=\"w\"> </span><span class=\"kr\">as</span><span class=\"w\"> </span><span class=\"kt\">Maybe</span>\n</code></pre></div>\n<p>I used to like this at first because it felt like extending the module, but after a few years using the language, I stopped doing this because it makes it hard to figure out which of the modules a function is coming from.</p>\n<p>Do we want Roc to support this or should we make it an error?</p>",
        "id": 429131638,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1711240995
    },
    {
        "content": "<p>This is what I'm thinking:</p>\n<div class=\"codehilite\"><pre><span></span><code>── IMPORT ALIAS CONFLICT in tmp/duplicate_alias/Main.roc ───────────────────────\n\nMaybeExtra was imported as Maybe\n\n4│  import MaybeExtra as Maybe\n                         ^^^^^\n\nbut Maybe is also the name of another module:\n\n3│  import Maybe\n\nUsing the same name for both can make it hard to tell which one you&#39;re referring to.\n\nMake sure each import has a unique alias or none at all.\n</code></pre></div>",
        "id": 429132017,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1711241309
    },
    {
        "content": "<p>Similarly we wouldn't allow the same alias to be used for two modules:</p>\n<div class=\"codehilite\"><pre><span></span><code>── IMPORT ALIAS CONFLICT in tmp/duplicate_alias/Main.roc ───────────────────────\n\nOne was imported as D:\n\n3│  import One as D\n                  ^\n\nbut the same alias was also used for Two:\n\n4│  import Two as D\n                  ^\n\nEach import should have a unique alias or none at all.\n</code></pre></div>",
        "id": 429132115,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1711241404
    },
    {
        "content": "<p>yeah totally agree</p>",
        "id": 429190166,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1711281103
    },
    {
        "content": "<p>Now that I'm pretty close to finish the rest of the module system changes, I want to start thinking about ways to implement the actual module params</p>",
        "id": 432951674,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1712943847
    },
    {
        "content": "<p>In what stage of the compiler should we deal with them? Is it something we can desugar at canonicalization?</p>",
        "id": 432951745,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1712943889
    },
    {
        "content": "<p>The simplest approach to me would be to desguar by currying all the functions of the module with the params</p>",
        "id": 432951832,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1712943930
    },
    {
        "content": "<p>I wonder what are the implications of that to performance and such</p>",
        "id": 432951855,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1712943944
    },
    {
        "content": "<p>I also thought we could generate globals that we set basically where the import is. However, I think that would require generating a module per import which might result in big binaries.</p>",
        "id": 432952389,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1712944152
    },
    {
        "content": "<p>I think it has to be arguments for inline imports</p>",
        "id": 432952440,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712944179
    },
    {
        "content": "<p>especially considering you could theoretically import the same module multiple times with <code>as</code> <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 432952574,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712944226
    },
    {
        "content": "<p>and have them be in scope at the same time</p>",
        "id": 432952585,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712944232
    },
    {
        "content": "<p>Yeah, exactly. That's why I think the globals approach would require emitting the same module multiple times.</p>",
        "id": 432952648,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1712944266
    },
    {
        "content": "<p>Arguments should be fine, right?</p>",
        "id": 432952728,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1712944296
    },
    {
        "content": "<p>I think so yeah</p>",
        "id": 432952736,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712944301
    },
    {
        "content": "<p>so then the next question is what specifically goes in those arguments</p>",
        "id": 432952838,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712944327
    },
    {
        "content": "<p>Maybe instead of actually currying the function, we extend its arguments with the module params record</p>",
        "id": 432952863,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1712944342
    },
    {
        "content": "<p>yeah that's what I was thinking</p>",
        "id": 432952888,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712944357
    },
    {
        "content": "<p>and constants would become functions</p>",
        "id": 432952945,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1712944377
    },
    {
        "content": "<p>so every function gets exactly 1 extra argument, and it's always a pointer to a record that lives on the stack</p>",
        "id": 432952978,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712944394
    },
    {
        "content": "<p>I guess it's not worth it to make each field of the record an argument, right? That should be optimized already</p>",
        "id": 432953123,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1712944444
    },
    {
        "content": "<p>yeah I think it'll be better to pass it as a pointer</p>",
        "id": 432953153,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712944459
    },
    {
        "content": "<p>so the next question is when to build up that record</p>",
        "id": 432953243,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712944505
    },
    {
        "content": "<p>because if I'm calling 3 functions in a different module (the same module) in a row, I don't want to have to assemble module params records for that module 3 times</p>",
        "id": 432953311,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712944533
    },
    {
        "content": "<p>because they'll be the same each time! I'd rather just assemble it once and pass it in 3 times</p>",
        "id": 432953377,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712944558
    },
    {
        "content": "<p>If the import is inside a function, I guess we would create it whereever the import is. But it's trickier for top-level imports.</p>",
        "id": 432953440,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1712944573
    },
    {
        "content": "<p>yeah so my thinking there is that we can essentially keep track in each scope like an <code>VecMap&lt;ModuleId, ModuleParams&gt;</code></p>",
        "id": 432953493,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712944595
    },
    {
        "content": "<p>Yeah, or <code>VecMap&lt;ModuleName, ModuleParams&gt;</code></p>",
        "id": 432953542,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1712944618
    },
    {
        "content": "<p>which we populate once we've created the module params for a given module</p>",
        "id": 432953544,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712944620
    },
    {
        "content": "<p>haha exactly</p>",
        "id": 432953549,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1712944621
    },
    {
        "content": "<p>and then yeah, we can just go grab those (or maybe just a <code>Symbol</code> for them) if we already have them</p>",
        "id": 432953603,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712944646
    },
    {
        "content": "<p>I think it'd be <code>ModuleName</code> instead of <code>ModuleId</code> because you can have the same <code>ModuleId</code> multiple times with different aliases</p>",
        "id": 432953617,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1712944650
    },
    {
        "content": "<p>ah true!</p>",
        "id": 432953632,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712944654
    },
    {
        "content": "<p>I suspect we'd want to do this during monomorphization</p>",
        "id": 432953730,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712944683
    },
    {
        "content": "<p>because at that point we're traversing all the canonical nodes and then translating them into a different function format</p>",
        "id": 432953786,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712944705
    },
    {
        "content": "<p>and also transforming all the call sites as well</p>",
        "id": 432953808,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712944714
    },
    {
        "content": "<p>so right when we're doing both of those, we can add the extra param to the function definitions and the extra arg at the call sites</p>",
        "id": 432953848,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712944729
    },
    {
        "content": "<p>I think this would also be an excellent time to add another parameter (and another argument at the call sites) for Allocators</p>",
        "id": 432953903,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712944752
    },
    {
        "content": "<p>because we want to change it so that hosts pass in a pointer to an Allocator struct instead of having <code>roc_alloc</code>, <code>roc_dealloc</code>, etc. be top-level symbols</p>",
        "id": 432953954,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712944773
    },
    {
        "content": "<p>oh, I see</p>",
        "id": 432953988,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1712944790
    },
    {
        "content": "<p>we can actually populate those and wire them up separately, but it seems like a good time to just go ahead and add 2 extra pointer arguments instead of 1</p>",
        "id": 432954063,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712944804
    },
    {
        "content": "<p>while in the process of doing exactly that to all the functions <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 432954105,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712944818
    },
    {
        "content": "<p>I think we can also just uncritically add them, because I believe one of LLVM's optimizations is unused argument elimination</p>",
        "id": 432954155,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712944837
    },
    {
        "content": "<p>Yeah, it's like allocators are module params or I guess app params <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 432954157,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1712944839
    },
    {
        "content": "<p>so if we pass them in and then don't use them, they should just get eliminated anyway</p>",
        "id": 432954197,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712944852
    },
    {
        "content": "<p>Ah, I see. I was also thinking whether we wanted to detect whether a param was used in a def to decide whether we should add the args.</p>",
        "id": 432954440,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1712944923
    },
    {
        "content": "<p>Cool</p>",
        "id": 432954455,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1712944925
    },
    {
        "content": "<p>so then I think the only other thing is needing to destructure the records at the top of each function</p>",
        "id": 432954601,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712944991
    },
    {
        "content": "<p>because they'll be referred to in canonicalization as like <code>foo</code> rather than <code>record.foo</code></p>",
        "id": 432954698,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712945034
    },
    {
        "content": "<p>I guess destructuring is dealt with earlier than mono, right?</p>",
        "id": 432954701,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1712945035
    },
    {
        "content": "<p>so we need <code>foo = record.foo</code> somewhere in there</p>",
        "id": 432954709,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712945039
    },
    {
        "content": "<p>I think we could do it in mono too</p>",
        "id": 432954767,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712945049
    },
    {
        "content": "<p>a nice thing about doing it in mono is that then <code>roc check</code> doesn't pay for it <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 432954789,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712945058
    },
    {
        "content": "<p>Yeah, we still have to type check them, so it's definitely going to involve some work in can for that</p>",
        "id": 432955001,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1712945143
    },
    {
        "content": "<p>for sure <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 432955506,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712945244
    },
    {
        "content": "<p>yeah I just mean the part about pulling them out of the record in the arg - that's just a code gen detail we need to take care of</p>",
        "id": 432955681,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712945274
    },
    {
        "content": "<p>I'm curious what <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> and <span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> think about this in general!</p>",
        "id": 432955875,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712945304
    },
    {
        "content": "<p>Ah, I see</p>",
        "id": 432955895,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1712945308
    },
    {
        "content": "<p>So if we have a top-level import. When is the record constructed? Is it like constants?</p>",
        "id": 432956182,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1712945365
    },
    {
        "content": "<p>There's no obvious time to do it, right?</p>",
        "id": 432956482,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1712945416
    },
    {
        "content": "<p>well the caller constructs it</p>",
        "id": 432956944,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712945505
    },
    {
        "content": "<p>By that you mean the expression that references a module function?</p>",
        "id": 432957219,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1712945553
    },
    {
        "content": "<p>Because in that case, the record would be constructed every time you do that, right?</p>",
        "id": 432957380,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1712945585
    },
    {
        "content": "<p>yeah so like if I've imported module <code>Foo</code> and given it <code>{ blah }</code> and I call <code>Foo.bar</code>, then I have to construct the <code>{ blah }</code> function before I can call <code>Foo.bar</code>, because <code>Foo.bar</code> will now be expecting a pointer to a <code>{ blah }</code> record as its last argument</p>",
        "id": 432957518,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712945613
    },
    {
        "content": "<p>and that pointer is going to be on my stack</p>",
        "id": 432957555,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712945621
    },
    {
        "content": "<p>or rather I'm passing it a pointer to a record that's on my stack</p>",
        "id": 432957611,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712945635
    },
    {
        "content": "<p>and <code>Foo.bar</code> knows that it accepts a <code>{ blah }</code> record specifically because that's what's declared at the top of teh <code>Foo</code> module</p>",
        "id": 432957746,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712945654
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"489294\">Agus Zubiaga</span> <a href=\"#narrow/stream/395097-compiler-development/topic/module.20params/near/432957380\">said</a>:</p>\n<blockquote>\n<p>Because in that case, the record would be constructed every time you do that, right?</p>\n</blockquote>\n<p>the <code>VecMap&lt;ModuleName, ModuleParams&gt;</code> thing from earlier can prevent constructing it multiple times</p>",
        "id": 432957876,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712945681
    },
    {
        "content": "<p>like we cache it in scope so that if we already have one constructed in scope, we just use that instead of constructing another one</p>",
        "id": 432957983,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712945699
    },
    {
        "content": "<p>Right, exactly. But only inside of a function, right?</p>",
        "id": 432958002,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1712945702
    },
    {
        "content": "<p>oh you mean like what if I have <code>foo = if ...</code> at the top level, and it's not defined as a function?</p>",
        "id": 432958133,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712945729
    },
    {
        "content": "<p>as in, <code>foo</code> itself is not a function</p>",
        "id": 432958163,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712945735
    },
    {
        "content": "<p>No, I mean from the caller side. If I have something like:</p>\n<div class=\"codehilite\"><pre><span></span><code>module [...]\n\nimport Foo { blah }\n\nbar =\n     Foo.bar + Foo.bar\n\nbaz =\n    Foo.bar\n</code></pre></div>\n<p>I can cache the construction of <code>{ blah }</code> inside <code>bar</code>, but when I call <code>baz</code> I would have to construct it again.</p>",
        "id": 432958906,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1712945877
    },
    {
        "content": "<p>ahh I see</p>",
        "id": 432959079,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712945906
    },
    {
        "content": "<p>yeah I agree, and I think that's fine</p>",
        "id": 432959110,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712945912
    },
    {
        "content": "<p>Unless we constructed <code>{blah}</code> before anything in the program runs</p>",
        "id": 432959140,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1712945917
    },
    {
        "content": "<p>in the future we can do compile-time evaluation of constants to eliminate that</p>",
        "id": 432959164,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712945923
    },
    {
        "content": "<p>yeah exactly</p>",
        "id": 432959169,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712945924
    },
    {
        "content": "<p>but in the meantime top-level non-functions always re-evaluate everything at runtime and I think that's fine (for now)</p>",
        "id": 432959200,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712945940
    },
    {
        "content": "<p>oh I guess we'll need to add the extra pointer arguments to those generated top-level thunks too!</p>",
        "id": 432959240,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712945961
    },
    {
        "content": "<p>since that's how we compile them today (top-level \"constants\" get compiled into 0-argument thunks during mono)</p>",
        "id": 432959261,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712945978
    },
    {
        "content": "<p>Right, exactly. That what I meant by \"it's like constants\" earlier <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 432959334,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1712946003
    },
    {
        "content": "<p>So all defs in a module with params get a new argument</p>",
        "id": 432959439,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1712946052
    },
    {
        "content": "<p>Well, I guess it's just the top-level ones. Because the nested ones already have it available from the parent.</p>",
        "id": 432959494,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1712946073
    },
    {
        "content": "<p>yep!</p>",
        "id": 432959562,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712946098
    },
    {
        "content": "<p>well, 2 new arguments in anticipation of allocators, but yeah <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 432959603,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712946113
    },
    {
        "content": "<p>right</p>",
        "id": 432959699,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1712946138
    },
    {
        "content": "<p>Yeah, all this sounds fine. Given this is for \"slow\" io anyway, I think it is better to just keep it simple as a pointer to struct of function pointers instead of thinking about any form of monomorphizing it away.</p>\n<p>I have minor questions about what llvm would optimize best in certain cases, but nothing I have meanful data to decide between (arg order for example)</p>\n<p>I think my biggest question that is hard to know the answer to is:<br>\n1 pointer with allocators and imported function (will need to be reconstructed more often, though it is just cheap copying of a few function pointers)<br>\nOr, 2 pointers, one for each. Allocators never need to be reconstructed then. But you are forever pinning two registers to hold the pointers.</p>",
        "id": 432961557,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712946856
    },
    {
        "content": "<p>Third option:<br>\nUse 1 pointer, but nest an extra level. So the module params hold the allocators or vice versa. The allocators would still be stored on the stack, just an extra pointer jump to access them.</p>\n<p>Very solid chance that this is the best option. Allocation is a relatively rare and slow event. An extra indirection contained on the stack should be safe. Freeing that register on x86 and in all function calls is probably worth it. When creating a new module param set, just copy a single pointer over.</p>",
        "id": 432963033,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712947484
    },
    {
        "content": "<p>yeah if we did that option it would have to be allocators hold the module params</p>",
        "id": 432963514,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712947683
    },
    {
        "content": "<p>because the allocator struct has to be created in the host, potentially in the host's stack</p>",
        "id": 432963563,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712947710
    },
    {
        "content": "<p>if you think that's most likely the best option, then maybe we should just plan to add the 1 param for module params</p>",
        "id": 432963732,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712947797
    },
    {
        "content": "<p>and then later we can modify the contents of that pointer to do allocator things</p>",
        "id": 432963822,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712947818
    },
    {
        "content": "<p>It's definitely a gut feeling especially given the extra arg shuffling that might be needed otherwise.</p>",
        "id": 432963907,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712947866
    },
    {
        "content": "<p>Also, I think it has to be module param holds the allocator (as t least if we want life to be simple).</p>\n<p>Allocator will never change (in the scope of a single call to roc). Module param will change potentially on every function call. If we update the the module params, it would update globally if we are updating the module params within the global allocator allocated on the host. As such whenever returning from a function we would have to revert that.</p>\n<p>If module params hold the allocator, whenever we create a new module param struct, we just pass an extra pointer in for the allocator. Grab it from the old module param struct.</p>",
        "id": 432964349,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712948056
    },
    {
        "content": "<p>Just need a special helper for each entry from host to roc or to make the host pass in a <code>**allocator</code> for that to all work.</p>",
        "id": 432964474,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712948114
    },
    {
        "content": "<p>good point! <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 432971706,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712951333
    },
    {
        "content": "<p>I'm trying to fix the REPL in my branch, but I'm confused about where its platform is</p>",
        "id": 433633964,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1713318564
    },
    {
        "content": "<p>I can see we prepend this to the expression: <a href=\"https://github.com/roc-lang/roc/blob/c74685f74aa4aee259b3b30f2792d25981a48dee/crates/repl_eval/src/gen.rs#L175\">https://github.com/roc-lang/roc/blob/c74685f74aa4aee259b3b30f2792d25981a48dee/crates/repl_eval/src/gen.rs#L175</a></p>",
        "id": 433633987,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1713318588
    },
    {
        "content": "<p>but where is this <code>./platform</code>?</p>",
        "id": 433634028,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1713318603
    },
    {
        "content": "<p>I think we just load it as a shared library, right. So it is more ingrained into the compiler with some sort of libloading call</p>",
        "id": 433634055,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713318622
    },
    {
        "content": "<p>Right, but don't we still need a platform roc file?</p>",
        "id": 433634086,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1713318653
    },
    {
        "content": "<p>This fails in my branch because it can't find <code>./platform</code>, but somehow it doesn't in <code>main</code></p>",
        "id": 433634138,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1713318718
    },
    {
        "content": "<p>Not necessarily. It may be more adhoc like all of the gen tests.</p>",
        "id": 433634182,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713318729
    },
    {
        "content": "<p>But I don't recall for sure. Didn't write the code but definitely dug into it before.</p>",
        "id": 433634200,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713318752
    },
    {
        "content": "<p>Yeah, I fixed the gen tests by making a real platform roc file: <a href=\"https://github.com/roc-lang/roc/pull/6645/commits/d3efc751e2e93d4b5d739905702678a0dfb3fe4c\">https://github.com/roc-lang/roc/pull/6645/commits/d3efc751e2e93d4b5d739905702678a0dfb3fe4c</a></p>",
        "id": 433634219,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1713318796
    },
    {
        "content": "<p>I could do the same with the REPL I suppose, but I guess I'd like to understand what this mythical <code>./platform</code> path does <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 433634246,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1713318833
    },
    {
        "content": "<p>Was it exploiting a bug in load?</p>",
        "id": 433634310,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1713318871
    },
    {
        "content": "<p>Probably related to <code>LoadStart::from_str</code></p>",
        "id": 433635350,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713319627
    },
    {
        "content": "<p>Custom path that I think is only used by the repl</p>",
        "id": 433635370,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713319643
    },
    {
        "content": "<p>On phone, really hard to dig in</p>",
        "id": 433635389,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713319659
    },
    {
        "content": "<p>Yeah, no worries</p>",
        "id": 433635415,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1713319675
    },
    {
        "content": "<p>I think we are basically ignoring the platform path when it's specified in <code>provides</code> rather than in <code>packages</code></p>",
        "id": 433635494,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1713319716
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/blob/c74685f74aa4aee259b3b30f2792d25981a48dee/crates/compiler/load_internal/src/file.rs#L4082-L4086\">https://github.com/roc-lang/roc/blob/c74685f74aa4aee259b3b30f2792d25981a48dee/crates/compiler/load_internal/src/file.rs#L4082-L4086</a></p>",
        "id": 433635502,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1713319725
    },
    {
        "content": "<p>It's not in <code>packages</code> here, so it's never loaded: <a href=\"https://github.com/roc-lang/roc/blob/c74685f74aa4aee259b3b30f2792d25981a48dee/crates/compiler/load_internal/src/file.rs#L4054-L4064\">https://github.com/roc-lang/roc/blob/c74685f74aa4aee259b3b30f2792d25981a48dee/crates/compiler/load_internal/src/file.rs#L4054-L4064</a></p>",
        "id": 433635539,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1713319749
    },
    {
        "content": "<p>So I think it's basically exploiting this in the REPL and tests to generate the shared lib without specifying a real platform</p>",
        "id": 433635657,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1713319822
    },
    {
        "content": "<p>In the new app headers, we don't have this \"provides to <code>NewPackage</code>\" syntax</p>",
        "id": 433635791,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1713319926
    },
    {
        "content": "<p>Maybe I should allow <code>app [main] { }</code> for the REPL and tests</p>",
        "id": 433635827,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1713319962
    }
]