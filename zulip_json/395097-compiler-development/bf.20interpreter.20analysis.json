[
    {
        "content": "<p>Looking at <a class=\"stream-topic\" data-stream-id=\"231634\" href=\"/#narrow/stream/231634-beginners/topic/Help.20optimising.20my.20BF.20interpreter\">#beginners &gt; Help optimising my BF interpreter</a> - a few things I think we should be able to address hopefully easily</p>\n<ol>\n<li>the tokinizer step compiles to a very poor if/else chain rather than a switch (<a href=\"https://gist.github.com/ayazhafiz/9669cbf36cf33001f794a0cab4db95f5\">https://gist.github.com/ayazhafiz/9669cbf36cf33001f794a0cab4db95f5</a>). I think we should be able to eliminate the decs on constant strings here as well (<a href=\"https://github.com/roc-lang/roc/issues/5594\">https://github.com/roc-lang/roc/issues/5594</a>)</li>\n</ol>",
        "id": 376461547,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1689710446
    },
    {
        "content": "<p>looking at the compilation of <code>run</code>: <a href=\"https://gist.github.com/ayazhafiz/edfb055da1082f8f42f352846222bd3e\">https://gist.github.com/ayazhafiz/edfb055da1082f8f42f352846222bd3e</a><br>\nI think we would benefit strongly from even naive LICM, escape analysis, and inline passes. If we inline List.get and run LICM we should be able to see that <code>Interpreter.221</code> can be hoisted outside the joinpoint, needs no inc, and the bounds check can be hoisted as well</p>",
        "id": 376462081,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1689710566
    },
    {
        "content": "<p>The interpreter is currently written in an indirect-threaded/subroutine-threaded style rather than in a direct-threaded style.</p>\n<p>Or at least the compiled code looks this way (every branch has its own call to <code>goToNextCommand</code>)</p>\n<p>I wonder whether the performance of a version of the code where <code>goToNextCommand |&gt; run</code> is moved outside of the <code>when</code>is different or not. An inlining or duplicate code removal pass would do that automatically.</p>",
        "id": 376467437,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1689712249
    },
    {
        "content": "<p>Folkert asked about the different ways blocks (the BF equivalent of loops) are implemented in various BF interpreters.<br>\nI had to refresh my memory on it, but seems like the main two ways are (<a href=\"http://url\">according to a brief skimming of RosettaCode</a>):</p>\n<ul>\n<li>whenever a <code>[</code> is encountered and you need to skip to the <code>]</code>, read every next byte until the matching <code>]</code> is encountered at runtime and vice-versa (slow but simple)</li>\n<li>do a pass over the program beforehand to build up a separate dictionary structure whose keys are the cells containing a <code>[</code> and whose values are the matching <code>]</code>. Jumping <code>[</code> to  <code>]</code> is done by looking in this dictionary. Keeping track of the <code>[</code> matching a <code>]</code> is even simpler because you're certain to have passed the matching <code>[</code> before, so you can add the location to a <code>[</code> on a stack and pop from this stack when you encounter a <code>]</code>. (little more involved, but much faster)</li>\n</ul>\n<p>I have not seen the technique of turning the BF AST into a tree before or elsewhere, though it is of course a very popular approach when interpreting any more complicated language :D</p>",
        "id": 376471257,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1689713464
    }
]