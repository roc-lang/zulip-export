[
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> <br>\nAs discussed earlier today in the meeting, for collecting lambda sets that an app \"fills in\" for a host-exposed type,</p>\n<ul>\n<li>let's make host-exposed defs require a type annotation whose surface types are fully monomorphic (except of course in lambda set + app-type-variable positions)</li>\n<li>Collect those annotations at some point (probably can is the easiest). These annotations are the type as the host sees them. Store them in a bucket <code>HostExposedPolymorphic : Name =&gt; Annotation</code></li>\n<li>Solve as usual. Now we have those host exposed names specialized to the app, and hence can use them as a bucket <code>HostExposedAppSpecialized : Name =&gt; Annotation</code></li>\n<li>To determine the host-exposed lambda set wrappers to generate<ul>\n<li>for each <code>Name, PolymorphicAnnotation</code> in <code>HostExposedPolymorphic</code><ul>\n<li>Run the lambda-set numbering scheme over <code>PolymorphicAnnotation</code>, create a mapping <code>HELS: LSNum =&gt; Variable</code> where each variable (should be) the empty lambda set</li>\n<li>Set <code>AppSpecializedAnnotation = HostExposedAppSpecialized[Name]</code></li>\n<li>Unify <code>AppSpecializedAnnotation ~ PolymorphicAnnotation</code></li>\n<li>For each <code>LSNum, LSVar</code> in <code>HELS</code>, look up the new content of <code>LSVar</code>. This is the app-specialized lambda set for which a lambda set caller function should be generated for at the <code>LSNum</code> lambda set number.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>",
        "id": 376486201,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1689719563
    },
    {
        "content": "<p><code>    for (symbol, variable, annotation) in it {</code></p>\n<p>progress is being made</p>",
        "id": 377426098,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1689972931
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> running into a problem still</p>\n<p>so, we're very close, but now the type of main misses the lambda set. This is the <code>main</code> branch:</p>\n<div class=\"codehilite\"><pre><span></span><code>[crates/compiler/mono/src/ir.rs:8529] proc_name = `#UserApp.main`\n[crates/compiler/mono/src/ir.rs:8531] SubsFmtContent(&amp;content, env.subs) = Alias(`pf..IdentId(1)`, [67], &lt;1556&gt;Alias(`pf.Task.Task`, [1, 3, 67, 3], &lt;1557&gt;Opaque(`pf.Effect.Effect`, [1567, 1564], &lt;1568&gt;Func([&lt;1578&gt;EmptyRecord,], &lt;1564=1576&gt;LambdaSet([`pf.Effect.IdentId(15)` &lt;1571&gt;Func([&lt;1578&gt;EmptyRecord,], &lt;1574=1579&gt;LambdaSet([`pf.Effect.IdentId(33)` &lt;80&gt;Apply(`Str.Str`, []) , ], ^&lt;1571&gt;), &lt;1578&gt;EmptyRecord) &lt;1572&gt;Func([&lt;1578&gt;EmptyRecord,], &lt;1573=1584&gt;LambdaSet([`pf.Task.IdentId(62)` , ], ^&lt;1572&gt;), &lt;1582&gt;[&#39;Err&#39; &lt;1563&gt;EmptyTagUnion , &#39;Ok&#39; &lt;1562&gt;EmptyRecord , ]&lt;Any(1570)&gt;) , ], ^&lt;1568&gt;), &lt;1586&gt;Alias(`Result.Result`, [1562, 1563, 1565], &lt;1567&gt;[&#39;Err&#39; &lt;1563&gt;EmptyTagUnion , &#39;Ok&#39; &lt;1562&gt;EmptyRecord , ]&lt;Any(1570)&gt;)))))\n[crates/compiler/mono/src/ir.rs:8532] layout_cache.interner.dbg(ret_layout) = &quot;{}&quot;\n[crates/compiler/mono/src/ir.rs:8533] layout_cache.interner.dbg(lambda_set.full_layout) = &quot;{Str, {}}&quot;\n</code></pre></div>\n<p>and this is on our changed branch</p>\n<div class=\"codehilite\"><pre><span></span><code>[crates/compiler/mono/src/ir.rs:8595] proc_name = `#UserApp.main`\n[crates/compiler/mono/src/ir.rs:8597] SubsFmtContent(&amp;content, env.subs) = Alias(`pf..IdentId(1)`, [72], &lt;1578&gt;Alias(`pf.Task.Task`, [1, 3, 72, 3], &lt;1579&gt;Opaque(`pf.Effect.Effect`, [1580, 72], &lt;1581&gt;Func([&lt;1587&gt;EmptyRecord,], &lt;72=1584&gt;LambdaSet([], ^&lt;1581&gt;), &lt;1586&gt;Alias(`Result.Result`, [1, 3, 3], &lt;1582&gt;[&#39;Err&#39; &lt;3&gt;EmptyTagUnion , &#39;Ok&#39; &lt;1&gt;EmptyRecord , ]&lt;Any(3)&gt;)))))\n[crates/compiler/mono/src/ir.rs:8598] layout_cache.interner.dbg(ret_layout) = &quot;{}&quot;\n[crates/compiler/mono/src/ir.rs:8599] layout_cache.interner.dbg(lambda_set.full_layout) = &quot;[]&quot;\n</code></pre></div>\n<p>A theory is that we don't introduce (in constraint gen) the \"freshened\" lambda set variables. But I'm not sure what to do there, or how to debug this further</p>\n<p>this is in trying to run an example that actually uses <code>Task</code>, the CFold example from the benchmarks specifically</p>",
        "id": 378239956,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1690224123
    },
    {
        "content": "<p>what is really weird about this is that our changes influence the type that is inferred for main, even though we don't actually do anything with it</p>",
        "id": 378242174,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1690224698
    },
    {
        "content": "<p>ok nvm, needed to switch some constraints around</p>",
        "id": 378242645,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1690224814
    },
    {
        "content": "<p>2 hours down the drain ...</p>",
        "id": 378243229,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1690224977
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/pull/5687\">https://github.com/roc-lang/roc/pull/5687</a></p>",
        "id": 378258123,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1690229057
    },
    {
        "content": "<p>Did you manage to resolve it?</p>",
        "id": 378260915,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1690229975
    },
    {
        "content": "<p>yes by switching the constraint solving order</p>",
        "id": 378261496,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1690230188
    },
    {
        "content": "<p>the \"real\" annotation should go first and introduce all the variables</p>",
        "id": 378261533,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1690230204
    }
]