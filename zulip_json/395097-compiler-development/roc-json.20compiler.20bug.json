[
    {
        "content": "<p>Just upgrading roc json ... and I've got a heap of broken tests. I'm not sure what's change through. </p>\n<p>The error message looks like they're are correct. Here's an example;</p>\n<div class=\"codehilite\"><pre><span></span><code>── EXPECT FAILED in package/Json.roc ───────────────────────────────────────────\n\nThis expectation failed:\n\n1962│&gt;  # Test decode of record with a string and number field\n1963│&gt;  expect\n1964│&gt;      input = Str.to_utf8(&quot;{\\&quot;first_segment\\&quot;:\\&quot;ab\\&quot;,\\&quot;second_segment\\&quot;:10}&quot;)\n1965│&gt;      decoder = utf8_with({ field_name_mapping: SnakeCase })\n1966│&gt;      actual = Decode.from_bytes_partial(input, decoder)\n1967│&gt;      expected = Ok({ first_segment: &quot;ab&quot;, second_segment: 10u8 })\n1968│&gt;\n1969│&gt;      actual.result == expected\n\nWhen it failed, these variables had these values:\n\ninput : List U8\ninput = [123, 34, 102, 105, 114, 115, 116, 95, 115, 101, 103, 109, 101, 110, 116, 34, 58, 34, 97, 98, 34, 44, 34, 115, 101, 99, 111, 110, 100, 95, 115, 101, 103, 109, 101, 110, 116, 34, 58, 49, 48, 125]\n\ndecoder : Json\ndecoder = @Json { empty_encode_as_null: { list: Bool.false, record: Bool.true, tuple: Bool.true }, field_name_mapping: SnakeCase, null_decode_as_empty: Bool.true, skip_missing_properties: Bool.true }\n\nactual : DecodeResult {\n    first_segment : Str,\n    second_segment : U8,\n}\nactual = { rest: [], result: Ok { first_segment: &quot;ab&quot;, second_segment: 10 } }\n\nexpected : [\n    Err DecodeError,\n    Ok {\n        first_segment : Str,\n        second_segment : U8,\n    },\n]\nexpected = Ok { first_segment: &quot;ab&quot;, second_segment: 10 }\n\n\n22 failed and 86 passed in 1050 ms.\n</code></pre></div>",
        "id": 493052332,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736560170
    },
    {
        "content": "<p>PR here <a href=\"https://github.com/lukewilliamboswell/roc-json/pull/42\">https://github.com/lukewilliamboswell/roc-json/pull/42</a></p>",
        "id": 493052436,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736560253
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>actual.result   == expected\nactual.result   == Ok { first_segment: &quot;ab&quot;, second_segment: 10 }\nexpected        == Ok { first_segment: &quot;ab&quot;, second_segment: 10 }\n</code></pre></div>",
        "id": 493052547,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736560333
    },
    {
        "content": "<p>Looks like the number type on one of the fields</p>",
        "id": 493052562,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736560348
    },
    {
        "content": "<p>Wait</p>",
        "id": 493052593,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736560388
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>expect\n    input = Str.to_utf8(&quot;{\\&quot;first_segment\\&quot;:\\&quot;ab\\&quot;,\\&quot;second_segment\\&quot;:10}&quot;)\n    decoder = utf8_with({ field_name_mapping: SnakeCase })\n    actual = Decode.from_bytes_partial(input, decoder)\n    expected = Ok({ first_segment: &quot;ab&quot;, second_segment: 10u8 })\n    r = actual.result\n\n    r == expected\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>expected : [\n    Err DecodeError,\n    Ok {\n        first_segment : Str,\n        second_segment : U8,\n    },\n]\nexpected = Ok { first_segment: &quot;ab&quot;, second_segment: 10 }\n\nr : Result {\n    first_segment : Str,\n    second_segment : U8,\n} DecodeError\nr = Err TooShort\n</code></pre></div>",
        "id": 493052722,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1736560539
    },
    {
        "content": "<p>seems like a compiler bug</p>",
        "id": 493052726,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1736560545
    },
    {
        "content": "<p>this is really weird. definitely at least a compiler bug involved. if you add a <code>dbg</code> it changes the value of actual</p>\n<div class=\"codehilite\"><pre><span></span><code>[package/Json.roc:1967] actual = {rest: [], result: (Err TooShort)}\n── EXPECT FAILED in package/Json.roc ───────────────────────────────────────────\n\nThis expectation failed:\n\n1962│&gt;  # Test decode of record with a string and number field\n1963│&gt;  expect\n1964│&gt;      input = Str.to_utf8(&quot;{\\&quot;first_segment\\&quot;:\\&quot;ab\\&quot;,\\&quot;second_segment\\&quot;:10}&quot;)\n1965│&gt;      decoder = utf8_with({ field_name_mapping: SnakeCase })\n1966│&gt;      actual = Decode.from_bytes_partial(input, decoder)\n1967│&gt;      dbg actual\n\nWhen it failed, these variables had these values:\n\ninput : List U8\ninput = [123, 34, 102, 105, 114, 115, 116, 95, 115, 101, 103, 109, 101, 110, 116, 34, 58, 34, 97, 98, 34, 44, 34, 115, 101, 99, 111, 110, 100, 95, 115, 101, 103, 109, 101\n, 110, 116, 34, 58, 49, 48, 125]\n\ndecoder : Json\ndecoder = @Json { empty_encode_as_null: { list: Bool.false, record: Bool.true, tuple: Bool.true }, field_name_mapping: SnakeCase, null_decode_as_empty: Bool.true, skip_mi\nssing_properties: Bool.true }\n\nactual : DecodeResult {\n    first_segment : Str,\n    second_segment : U8,\n}\nactual = { rest: [], result: Err TooShort }\n</code></pre></div>",
        "id": 493053068,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1736560814
    },
    {
        "content": "<p>Made a branch with just that file... <a href=\"https://github.com/lukewilliamboswell/roc-json/tree/bug\">https://github.com/lukewilliamboswell/roc-json/tree/bug</a></p>",
        "id": 493060563,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736567634
    },
    {
        "content": "<p>I'm going to try minimizing it</p>",
        "id": 493060567,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736567640
    },
    {
        "content": "<p>Could this be a clue?</p>\n<div class=\"codehilite\"><pre><span></span><code>I can&#39;t generate an implementation of the Eq ability for\n\n    {\n        rest : List U8,\n        result : Result { first_segment : Str } DecodeError,\n    }\n\nIn particular, an implementation for\n\n    ?\n\ncannot be generated.\n</code></pre></div>\n<p>Maybe it's related to <code>snake_case</code> idents?</p>",
        "id": 493060907,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736567982
    },
    {
        "content": "<p>maybe</p>",
        "id": 493061036,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1736568075
    },
    {
        "content": "<p>Maybe not... this works</p>\n<div class=\"codehilite\"><pre><span></span><code>module [Test]\n\nTest := {\n    lower_case : U8,\n}\n    implements [Eq]\n\nexpect @Test( {lower_case : 1}) == @Test( {lower_case : 1})\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>$ roc test Test.roc\n0 failed and 1 passed in 468 ms.\n</code></pre></div>",
        "id": 493061150,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736568127
    },
    {
        "content": "<p>So does this </p>\n<div class=\"codehilite\"><pre><span></span><code>module [Test]\n\nTest := {\n    result : Result { lower_case : U8 } Str,\n}\n    implements [Eq]\n\nexpect @Test({ result: Ok({ lower_case: 1 }) }) == @Test({ result: Ok({ lower_case: 1 }) })\n</code></pre></div>",
        "id": 493061210,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736568219
    },
    {
        "content": "<p>14 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"395097\" href=\"/#narrow/channel/395097-compiler-development/topic/casual.20conversation\">#compiler development &gt; casual conversation</a> by <span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span>.</p>",
        "id": 493061216,
        "sender_full_name": "Notification Bot",
        "timestamp": 1736568235
    },
    {
        "content": "<p>I've cut it down to something pretty minimal <span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span></p>",
        "id": 493062862,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736569964
    },
    {
        "content": "<p>Ah maybe not... <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 493063064,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736570179
    },
    {
        "content": "<p>Feels like the most likely issue is that new idents some how broke ability deriving and some field checks? But that is a guess</p>",
        "id": 493063204,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736570325
    },
    {
        "content": "<p>Is this interesting?</p>\n<p><a href=\"https://gist.github.com/lukewilliamboswell/1e4b4bc2d4b6cb79dbc4fdc5c2125486\">https://gist.github.com/lukewilliamboswell/1e4b4bc2d4b6cb79dbc4fdc5c2125486</a></p>",
        "id": 493063788,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736570962
    },
    {
        "content": "<p>Probably not... we don't support Tag unions.</p>",
        "id": 493063904,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736571116
    },
    {
        "content": "<p>I think that this may be related to an old issue:<br>\n<a href=\"https://github.com/roc-lang/roc/issues/5727\">https://github.com/roc-lang/roc/issues/5727</a></p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">expect</span>\n<span class=\"w\">    </span><span class=\"nv\">actual</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">TestError</span>\n<span class=\"w\">    </span><span class=\"nv\">expected</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">ownerName</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"a\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"nv\">actual</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"nv\">expected</span>\n</code></pre></div>\n<p><code>roc test</code> outputs:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">actual</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">    </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">TestError</span><span class=\"p\">],</span>\n<span class=\"w\">    </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">ownerName</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"p\">]</span>\n<span class=\"nv\">actual</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">ownerName</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"a\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"nv\">expected</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">    </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">TestError</span><span class=\"p\">],</span>\n<span class=\"w\">    </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">ownerName</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"p\">]</span>\n<span class=\"nv\">expected</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">ownerName</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"a\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 493077059,
        "sender_full_name": "Artur Domurad",
        "timestamp": 1736583802
    },
    {
        "content": "<p>Nice, that would certainly mask whatever the real issue is <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 493077402,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736584098
    },
    {
        "content": "<p>I think I've found the roc-json issue here... and it's not some nasty compiler bug.</p>",
        "id": 493136699,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736638880
    },
    {
        "content": "<p>The above test display thing is definitely an issue, but I think my upgrade problem is just I need to update the default field formatting from camelCase to snake_case which requires some material changes to the implementation of roc-json</p>",
        "id": 493136764,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736638924
    },
    {
        "content": "<p>I wonder if some of this related to the shared memory infrastructure we want to rip out?</p>",
        "id": 493136768,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736638927
    },
    {
        "content": "<p>If you take that broken test case and run into in main (without any expect) just some printing does it work correctly? (Maybe use the conditional in a if to decide printing)</p>",
        "id": 493136795,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736638959
    },
    {
        "content": "<p>Or does a dbg in the test print the correct thing?</p>",
        "id": 493136802,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736638967
    },
    {
        "content": "<p>Those two both would be signs it is a bug with the shared mem infra</p>",
        "id": 493136826,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736638996
    },
    {
        "content": "<p>I'm just in the middle of rewriting the string conversions I can try that later</p>",
        "id": 493136828,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736638998
    },
    {
        "content": "<p>Turns out converting between all the cases (even just assuming ASCII) is a fairly deep rabbit hole <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> </p>\n<p>Taking my time to implement these properly so we can have something reusable</p>",
        "id": 493142201,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736644264
    },
    {
        "content": "<p>My plan is to make a PR for <span class=\"user-mention\" data-user-id=\"508951\">@Hannes</span> roc-ascii with some helpers to convert between different formats</p>",
        "id": 493143538,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736645760
    },
    {
        "content": "<p>It will be a dependency for roc-json then... but that should be ok I think. I might also just vendor the helpers</p>",
        "id": 493143615,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736645808
    },
    {
        "content": "<p>Are you saying that roc-jsons implementation of camel-&gt;snake casing has a bug?  Or the Roc compilers?</p>",
        "id": 493146126,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736648362
    },
    {
        "content": "<p>both do</p>",
        "id": 493146665,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1736648951
    },
    {
        "content": "<p>Announcing... CamelSplitting.roc -- sharing here in case anyone can see any issues with this implementation. </p>\n<p><a href=\"https://gist.github.com/lukewilliamboswell/326d451e24e5aba8c0c7f5b0775f2ef9\">https://gist.github.com/lukewilliamboswell/326d451e24e5aba8c0c7f5b0775f2ef9</a></p>\n<p>It took me a little while to flush out all the edge cases, but I'm reasonably happy with this I think. My primary goal was to be somewhat efficient and avoid allocating lots of strings.</p>",
        "id": 493154456,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736656528
    },
    {
        "content": "<p>Fixed it <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> </p>\n<div class=\"codehilite\"><pre><span></span><code>$ roc test package/Json.roc\n0 failed and 157 passed in 1108 ms.\n</code></pre></div>\n<p>Now for the staged PR <a href=\"https://github.com/lukewilliamboswell/roc-json/pull/42\">https://github.com/lukewilliamboswell/roc-json/pull/42</a></p>\n<p>All CI checks are <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span></p>",
        "id": 493163717,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736665565
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"454654\">Ayaz Hafiz</span> <a href=\"#narrow/stream/395097-compiler-development/topic/roc-json.20compiler.20bug/near/493146665\">said</a>:</p>\n<blockquote>\n<p>both do</p>\n</blockquote>\n<p>I’d like to know what bugs there are in the compiler version. For ASCII idents that is</p>",
        "id": 493181372,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736681111
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/395097-compiler-development/topic/roc-json.20compiler.20bug/near/493163717\">said</a>:</p>\n<blockquote>\n<p>Fixed it <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> </p>\n<div class=\"codehilite\"><pre><span></span><code>$ roc test package/Json.roc\n0 failed and 157 passed in 1108 ms.\n</code></pre></div>\n<p>Now for the staged PR <a href=\"https://github.com/lukewilliamboswell/roc-json/pull/42\">https://github.com/lukewilliamboswell/roc-json/pull/42</a></p>\n<p>All CI checks are <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span></p>\n</blockquote>\n<p>Is the compiler bug fixed too? I assume that bug is just with expect and shared memory?</p>",
        "id": 493203509,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736700377
    },
    {
        "content": "<p>it's not fixed. yeah it's a bug with the shm</p>",
        "id": 493203803,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1736700652
    }
]