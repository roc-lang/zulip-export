[
    {
        "content": "<p>After much deliberation with various parties, it has been decided that we made a mistake when moving to zig and need to rewrite the rewrite.</p>\n<p>Fundamentally, zig just isn't as new and shiny as it used to be. I mean, it still uses a C style syntax and doesn't compile to the GPU. Writing a compiler for CPUs only leaves so much performance on the table, it isn't even worth doing.</p>\n<p>As such, I am happy to announce that we will be rewriting the roc compiler in the <a href=\"https://github.com/Co-dfns/Co-dfns\">co-dfns subset of APL</a>. APL is a language optimized for data driven design and with co-dfns, it gets pulled all the way out of the 1960s and onto GPUs. This is a language with maximal mechanical sympathy and no boilerplate.</p>\n<p>Instead of wasting, <a href=\"https://github.com/roc-lang/roc/blob/cf18ab75dd941f43964c476ec220e4cf7cb8c27d/src/check/parse/tokenize.zig#L601\">tens of lines of codes</a> on an expensive loop to chomp some comments and basic whitespace, we can now chomp all comments and whitespace across an entire file with a trivial amount of math: </p>\n<div class=\"codehilite\" data-code-language=\"APL\"><pre><span></span><code><span class=\"c1\">⍝ Remove comments</span>\n<span class=\"nv\">pos</span><span class=\"w\"> </span><span class=\"nv\">msk</span><span class=\"na\">⌿¨⍨</span><span class=\"kd\">←</span><span class=\"o\">⊂∧</span><span class=\"na\">⍀¨</span><span class=\"nv\">msk</span><span class=\"o\">∨</span><span class=\"s1\">'⍝'</span><span class=\"o\">≠</span><span class=\"nv\">IN</span><span class=\"na\">∘</span><span class=\"nv\">I</span><span class=\"na\">¨</span><span class=\"nv\">pos</span>\n\n<span class=\"c1\">⍝ Remove insignificant whitespace</span>\n<span class=\"nv\">t</span><span class=\"w\"> </span><span class=\"nv\">pos</span><span class=\"w\"> </span><span class=\"nv\">end</span><span class=\"na\">⌿⍨</span><span class=\"kd\">←</span><span class=\"o\">⊂</span><span class=\"p\">(</span><span class=\"nv\">t</span><span class=\"o\">=</span><span class=\"m\">0</span><span class=\"p\">)</span><span class=\"o\">⍲</span><span class=\"p\">(</span><span class=\"o\">⊢∧</span><span class=\"m\">1</span><span class=\"o\">⌽⊢</span><span class=\"p\">)</span><span class=\"nv\">IN</span><span class=\"sr\">[</span><span class=\"nv\">pos</span><span class=\"sr\">]</span><span class=\"o\">∊</span><span class=\"nv\">WS</span>\n<span class=\"nv\">t</span><span class=\"w\"> </span><span class=\"nv\">pos</span><span class=\"w\"> </span><span class=\"nv\">end</span><span class=\"na\">⌿⍨</span><span class=\"kd\">←</span><span class=\"o\">⊂</span><span class=\"p\">(</span><span class=\"nv\">t</span><span class=\"o\">≠</span><span class=\"m\">0</span><span class=\"p\">)</span><span class=\"o\">∨</span><span class=\"p\">(</span><span class=\"o\">~</span><span class=\"nv\">IN</span><span class=\"sr\">[</span><span class=\"nv\">pos</span><span class=\"sr\">]</span><span class=\"o\">∊</span><span class=\"nv\">WS</span><span class=\"p\">)</span><span class=\"o\">∨⊃</span><span class=\"m\">¯1</span><span class=\"w\"> </span><span class=\"m\">1</span><span class=\"o\">∧</span><span class=\"na\">.</span><span class=\"o\">⌽⊂</span><span class=\"nv\">IN</span><span class=\"sr\">[</span><span class=\"nv\">pos</span><span class=\"sr\">]</span><span class=\"o\">∊</span><span class=\"nv\">alp</span><span class=\"o\">,</span><span class=\"nv\">num</span><span class=\"o\">,</span><span class=\"s1\">'¯⍺⍵⎕.:'</span>\n</code></pre></div>\n<p>Welcome to the future! And happy April fools day!</p>\n<p>Side note, I actually do love array programming languages and am debating writing a roc tokenizer in one just for the learning experience. I actually already made a tokenizer for monkey lang in an array language before: <a href=\"https://github.com/bhansconnect/monkey-bqn/blob/main/compiler.bqn\">https://github.com/bhansconnect/monkey-bqn/blob/main/compiler.bqn</a></p>\n<hr>\n<p>Please add any other outlandish and fun ideas below</p>",
        "id": 509353064,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743480153
    },
    {
        "content": "<p>Really appreciate this joke because I'm interested in nanopass compilers and co-dfns built on that paradigm - taking it to a terse APL extreme</p>",
        "id": 510783183,
        "sender_full_name": "Ray Myers",
        "timestamp": 1744067934
    },
    {
        "content": "<p>I'm not sure what I think about nanopass in general (my gut feeling is that it is the wrong tradeoff for many compilers), but I have huge respect for Aaron Hsu and co-dfns.</p>",
        "id": 510790335,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744071845
    }
]