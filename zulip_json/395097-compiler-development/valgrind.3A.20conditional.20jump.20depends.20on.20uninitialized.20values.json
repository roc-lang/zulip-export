[
    {
        "content": "<p>I feel like I've seen this before in valgrind:</p>\n<div class=\"codehilite\"><pre><span></span><code>==260== Conditional jump or move depends on uninitialised value(s)\n==260==  at 0x1A082C: _16_d394208415ac8fe0ce8aa0ddf6a845c7cc74d818698e3d25c85705ce311f5ec (in /usr/src/app)\n==260==  by 0x1A235F: roc__mainForHost_0_caller (in /usr/src/app)\n==260==  by 0x7AC92F: roc_app::RocFunction_89::force_thunk (lib.rs:44)\n</code></pre></div>\n<p>anyone have any info on why it happens, or what it's referring to?</p>",
        "id": 378570160,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1690309594
    },
    {
        "content": "<p>it means you're probably comparing against a memory cell that wasn't initialized or set to nullptr</p>",
        "id": 378590483,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1690314937
    },
    {
        "content": "<p>so , probably some value in the condition at <code>roc_app::RocFunction_89::force_thunk (lib.rs:44)</code> is not intialized or zeroed out</p>",
        "id": 378590624,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1690314983
    },
    {
        "content": "<p>hm, here's the code in question:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">RocFunction_89</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">force_thunk</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">roc_std</span>::<span class=\"n\">RocStr</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"k\">fn</span> <span class=\"nf\">roc__mainForHost_0_caller</span><span class=\"p\">(</span>\n<span class=\"w\">                </span><span class=\"n\">arg0</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">(),</span>\n<span class=\"w\">                </span><span class=\"n\">closure_data</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">output</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">roc_std</span>::<span class=\"n\">RocStr</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">mem</span>::<span class=\"n\">MaybeUninit</span>::<span class=\"n\">uninit</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">closure_ptr</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">mem</span>::<span class=\"n\">ManuallyDrop</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">closure_data</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">roc__mainForHost_0_caller</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">closure_ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">output</span><span class=\"p\">.</span><span class=\"n\">as_mut_ptr</span><span class=\"p\">());</span>\n\n<span class=\"w\">            </span><span class=\"n\">output</span><span class=\"p\">.</span><span class=\"n\">assume_init</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 378593840,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1690315804
    },
    {
        "content": "<p>line 44 is this one:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">roc__mainForHost_0_caller</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">closure_ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">output</span><span class=\"p\">.</span><span class=\"n\">as_mut_ptr</span><span class=\"p\">());</span>\n</code></pre></div>",
        "id": 378593901,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1690315818
    },
    {
        "content": "<p>output is supposed to be uninitalized since it's being written to (so, nothing in the generated code should be looking at it, just writing to it)</p>",
        "id": 378594044,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1690315871
    },
    {
        "content": "<p>the first argument is a pointer to nothing, so definitely nothing should be reading from that under any circumstances <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 378594110,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1690315892
    },
    {
        "content": "<p>I guess it's possible the closure data hasn't been initialized, since that comes from a call to <code>roc__mainForHost_1_exposed_generic</code></p>",
        "id": 378594302,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1690315949
    },
    {
        "content": "<p>hm, I'll try manually initializing each of those and see if the error goes away for one of them</p>",
        "id": 378594368,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1690315970
    },
    {
        "content": "<p>Are you running this with optimized roc or non-opt?</p>",
        "id": 378595899,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1690316438
    },
    {
        "content": "<p>I think in a number of cases non-opt roc theoretically looks at uninitialized values, but in an impossible way. Like the branch is known false at compile time but we still emit it</p>",
        "id": 378596033,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1690316485
    },
    {
        "content": "<p>yeah turns out the closure data is uninitialized</p>",
        "id": 378597804,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1690316971
    },
    {
        "content": "<p>if I print its length, it's different on every run, and also valgrind gives additional errors for printing the length <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 378597844,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1690316986
    },
    {
        "content": "<p>(reading from uninitialized memory errors, specifically)</p>",
        "id": 378597890,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1690316997
    },
    {
        "content": "<p>Do you have closure data that should be loaded here?</p>",
        "id": 378600521,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1690317867
    },
    {
        "content": "<p>Is main for host accidentally capturing something?</p>",
        "id": 378600647,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1690317911
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[repr(C)]</span>\n<span class=\"cp\">#[derive(Debug, Clone)]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">RocFunction_89</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">closure_data</span>: <span class=\"nc\">roc_std</span>::<span class=\"n\">RocList</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">RocFunction_89</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">force_thunk</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">roc_std</span>::<span class=\"n\">RocStr</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"k\">fn</span> <span class=\"nf\">roc__mainForHost_0_caller</span><span class=\"p\">(</span>\n<span class=\"w\">                </span><span class=\"n\">arg0</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">(),</span>\n<span class=\"w\">                </span><span class=\"n\">closure_data</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">output</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">roc_std</span>::<span class=\"n\">RocStr</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"fm\">dbg!</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">closure_data</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">());</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">mem</span>::<span class=\"n\">MaybeUninit</span>::<span class=\"n\">uninit</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">closure_ptr</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">mem</span>::<span class=\"n\">ManuallyDrop</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">closure_data</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">roc__mainForHost_0_caller</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">closure_ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">output</span><span class=\"p\">.</span><span class=\"n\">as_mut_ptr</span><span class=\"p\">());</span>\n\n<span class=\"w\">            </span><span class=\"n\">output</span><span class=\"p\">.</span><span class=\"n\">assume_init</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">mainForHost</span><span class=\"p\">(</span><span class=\"n\">arg0</span>: <span class=\"nc\">roc_std</span>::<span class=\"n\">RocStr</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">RocFunction_89</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">roc__mainForHost_1_exposed_generic</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"n\">_</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">RocFunction_89</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">_</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">mem</span>::<span class=\"n\">ManuallyDrop</span><span class=\"o\">&lt;</span><span class=\"n\">roc_std</span>::<span class=\"n\">RocStr</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">mem</span>::<span class=\"n\">MaybeUninit</span>::<span class=\"n\">uninit</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">roc__mainForHost_1_exposed_generic</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"n\">ret</span><span class=\"p\">.</span><span class=\"n\">as_mut_ptr</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">mem</span>::<span class=\"n\">ManuallyDrop</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">arg0</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"n\">ret</span><span class=\"p\">.</span><span class=\"n\">assume_init</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 378600666,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1690317914
    },
    {
        "content": "<p>this is from:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">platform</span><span class=\"w\"> </span><span class=\"s\">\"webserver\"</span>\n<span class=\"w\">    </span><span class=\"n\">requires</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Url</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"kt\">[]</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"n\">exposes</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"o\">...</span><span class=\"w\"> </span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"n\">packages</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"w\">    </span><span class=\"n\">imports</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Task</span><span class=\"o\">.</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">Url</span><span class=\"o\">.</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">Url</span><span class=\"w\"> </span><span class=\"p\">}]</span>\n<span class=\"w\">    </span><span class=\"n\">provides</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">mainForHost</span><span class=\"p\">]</span>\n\n<span class=\"nf\">mainForHost</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"kt\">[]</span><span class=\"w\"> </span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"kt\">Fx</span><span class=\"p\">)</span>\n<span class=\"nf\">mainForHost</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">str</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Url</span><span class=\"o\">.</span><span class=\"n\">fromStr</span><span class=\"w\"> </span><span class=\"n\">str</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 378600995,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1690318017
    },
    {
        "content": "<p>so <code>mainForHost</code> returns a <code>Task</code>, which is the <code>RocFunction_89</code> closure</p>",
        "id": 378601113,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1690318053
    },
    {
        "content": "<p>Yeah, so main for host should have no real closure captures.</p>",
        "id": 378601148,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1690318067
    },
    {
        "content": "<p>Though it could technically</p>",
        "id": 378601169,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1690318075
    },
    {
        "content": "<p>but <code>RocFunction_89</code> should, right? Because it's a bunch of chained <code>Task.await</code>s</p>",
        "id": 378601258,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1690318098
    },
    {
        "content": "<p>So really our force think function should take in closure capture data from when main for host 1 was called</p>",
        "id": 378601298,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1690318114
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/395097-compiler-development-.28public.29/topic/valgrind.3A.20conditional.20jump.20depends.20on.20uninitialized.20values/near/378601258\">said</a>:</p>\n<blockquote>\n<p>but <code>RocFunction_89</code> should, right? Because it's a bunch of chained <code>Task.await</code>s</p>\n</blockquote>\n<p>Depends on how main is written. This is only about the highest level closure captures, not the nested ones, I think <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 378601436,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1690318172
    },
    {
        "content": "<p>Oh, I see, it comes from the RocFunction type. I'm just a bit mixed up...sorry if my comments were off</p>",
        "id": 378602304,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1690318469
    },
    {
        "content": "<p>So is the issue that you have no closure capture data but are pretending you do? So all accesses to the maybe uninit ret and closure_data are incorrect.</p>",
        "id": 378602470,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1690318534
    },
    {
        "content": "<p>this is the LLVM IR</p>\n<div class=\"codehilite\"><pre><span></span><code>define void @roc__mainForHost_1_exposed_generic({ [0 x i64], [3 x i64], i8, [7 x i8] }* %arg, { i8*, i64, i64 }* %arg1) {\nentry:\n %result_value = alloca { [0 x i64], [3 x i64], i8, [7 x i8] }, align 8\n %to_cc_type_ptr = bitcast { i8*, i64, i64 }* %arg1 to %str.RocStr*\n call fastcc void @_mainForHost_f03bf86f79d121cbfd774dec4a65912e99f5f17c33852bbc45e81916e62b53b(%str.RocStr* %to_cc_type_ptr, { [0 x i64], [3 x i64], i8, [7 x i8] }* %result_value)\n %i = bitcast { [0 x i64], [3 x i64], i8, [7 x i8] }* %arg to i8*\n %i2 = bitcast { [0 x i64], [3 x i64], i8, [7 x i8] }* %result_value to i8*\n call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %i, i8* align 8 %i2, i64 ptrtoint ({ [0 x i64], [3 x i64], i8, [7 x i8] }* getelementptr ({ [0 x i64], [3 x i64], i8, [7 x i8] }, { [0 x i64], [3 x i64], i8, [7 x i8] }* null, i32 1) to i64), i1 false)\n ret void\n}\n</code></pre></div>",
        "id": 378603071,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1690318718
    },
    {
        "content": "<p>the type of the first argument (which I expect it to write the return value into) seems...different from what Rust is expecting:</p>\n<div class=\"codehilite\"><pre><span></span><code>{ [0 x i64], [3 x i64], i8, [7 x i8] }* %arg\n</code></pre></div>",
        "id": 378603323,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1690318821
    },
    {
        "content": "<p>that's a pointer, but not to a <code>RocList&lt;u8&gt;</code> I don't think <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 378603371,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1690318844
    },
    {
        "content": "<p>ignoring the first <code>[0 x i64 ]</code> it's three 8B <code>i64</code>s and then another 8 bytes separated into one <code>i8</code> and then another <code>[7 x i8]</code></p>",
        "id": 378603491,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1690318896
    },
    {
        "content": "<p>oh - maybe the <code>[3 x i64]</code> is the <code>RocList&lt;u8&gt;</code> and then the <code>i8</code> is the lambda set ID?</p>",
        "id": 378603656,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1690318946
    },
    {
        "content": "<p>and then the <code>[7 x i8]</code> is padding</p>",
        "id": 378603665,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1690318952
    },
    {
        "content": "<p>hm, but I guess even if in the closure data struct I specified the extra 8B after the <code>RocList</code>, that still wouldn't explain the undefined reads - because the first 24B are still in the same place regardless <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 378604879,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1690319420
    },
    {
        "content": "<p>When did we start putting a roc list there? I thought it was just the bytes directly.</p>",
        "id": 378626087,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1690328560
    },
    {
        "content": "<blockquote>\n<p>that still wouldn't explain the undefined reads</p>\n</blockquote>\n<p>Theory, you are only storing the roc list in <code>RocFunction_89</code>. It should be should be storing the roc list followed by an extra <code>i8</code>.</p>\n<p>So you have 2 issues:</p>\n<ol>\n<li>the memcpy in the llvm ir  you showed is writing past the end of the <code>RocFunction_89</code> struct into arbitrary stack memory. This is due to writing out a full <code>{ [0 x i64], [3 x i64], i8, [7 x i8] }</code></li>\n<li>When you call <code>force_thunk</code> on <code>RocFunction_89</code>, it is only passing in <code>[3 x i64]</code> and is missing the <code>i8</code>. Then <code>roc__mainForHost_0_caller</code> it tries to access the <code>i8</code> leading to the undefined read.</li>\n</ol>",
        "id": 378628418,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1690329880
    },
    {
        "content": "<p>What is the llvm ir for the function signiture of <code>roc__mainForHost_0_caller</code>?</p>",
        "id": 378630068,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1690330666
    }
]