[
    {
        "content": "<p>Hey all, I just put out a WIP PR for the <code>try</code> keyword implementation: <a href=\"https://github.com/roc-lang/roc/pull/7192\">https://github.com/roc-lang/roc/pull/7192</a></p>\n<p>In short, it's typechecking (not super cleanly, but seemingly correctly), but the codegen runs into an alias analysis issue. I put a bit more detail into the PR, but in short, I think my translation from my new <code>LowLevelTry(Expr)</code> into a <code>When</code> expr in <code>roc_mono::ir::with_hole</code> is probably done wrong, or not the way to go.</p>",
        "id": 479991461,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1730432835
    },
    {
        "content": "<p>The full description from the PR is:</p>\n<blockquote>\n<p>I initially implemented this as a plain desugar to the above <code>when</code> expression, which worked, but wouldn't give very useful type errors. Instead, I'm implementing it as a new <code>can::Expr</code>, but I'm having alias analysis<br>\nCurrently, typechecking is working properly (though there's some work to do there with respect to <code>[Ok ok, Err err]</code> vs. <code>Result ok err</code>), but codegen is failing at the alias analysis level. I think it has to do with my approach to compiling, which is the following:</p>\n</blockquote>\n<blockquote>\n<ol>\n<li>After typechecking and during monomorphization, convert the <code>try</code> expression to a <code>when</code> expression in <a href=\"https://github.com/roc-lang/roc/blob/69dd8d77f3127cb21eaa34f8c7533930e30b923a/crates/compiler/mono/src/ir.rs#L4296\">roc_mono::ir::with_hole</a>.</li>\n<li>For the missing type variables in the <code>when</code> expression (e.g. the type of the <code>Ok ok -&gt;</code>), either:<br>\n  a. type constrain variables during typechecking and use those<br>\n  b. only constrain the required variables and synthesize the others using <a href=\"https://github.com/roc-lang/roc/blob/69dd8d77f3127cb21eaa34f8c7533930e30b923a/crates/compiler/derive/src/lib.rs#L27\">roc_derive::synth_var</a></li>\n</ol>\n</blockquote>\n<blockquote>\n<p>I presume the alias analysis issue is with this approach. I'll keep trying to see if I can find the issue myself, but if anyone has any suggestions to fix, I'm all ears.</p>\n</blockquote>",
        "id": 479991550,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1730432905
    },
    {
        "content": "<p>I have to leave to catch a movie, but tonight I'll be working on this again and will try to be available if anyone has ideas on how I could fix this. Thanks in advance!</p>",
        "id": 479991578,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1730432947
    },
    {
        "content": "<p>might be worth landing as sugar first, and then splitting off the other approach</p>",
        "id": 480034968,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1730459583
    },
    {
        "content": "<p>as a separate PR</p>",
        "id": 480034988,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1730459592
    },
    {
        "content": "<p>it might end up working better on the new monomorphization and lambda set specialization branch I'm working on</p>",
        "id": 480035038,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1730459625
    },
    {
        "content": "<p>Yeah, let me do that tomorrow</p>",
        "id": 480035068,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1730459640
    },
    {
        "content": "<p>It'll be much faster to just merge sugar to unblock people</p>",
        "id": 480035133,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1730459654
    },
    {
        "content": "<p>I just expect that, though you're probably right that your changes should decrease the likelihood of running into issues, I expect that I'm not specializing my generated types correctly</p>",
        "id": 480035254,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1730459724
    },
    {
        "content": "<p>So I'll save my changes in a branch and we'll come back to them later</p>",
        "id": 480035309,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1730459756
    },
    {
        "content": "<p>Okay, here it is: <a href=\"https://github.com/roc-lang/roc/pull/7193\">https://github.com/roc-lang/roc/pull/7193</a></p>",
        "id": 480135150,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1730507937
    },
    {
        "content": "<p>I'll add tests either tonight or tomorrow morning.</p>",
        "id": 480135163,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1730507955
    },
    {
        "content": "<p>Once I do this, I'll try to crack out the <code>?</code> and <code>??</code> operators to finish the error handling suite, unless:</p>\n<ul>\n<li>Someone else would rather do them</li>\n<li>We'd rather keep them as simple tasks for new contributors</li>\n</ul>",
        "id": 480135440,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1730508243
    },
    {
        "content": "<p>I'm okay with either of those!</p>",
        "id": 480135453,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1730508256
    },
    {
        "content": "<p>Here are the (so far not commented on) issues:</p>\n<ul>\n<li><a href=\"https://github.com/roc-lang/roc/issues/7088\">https://github.com/roc-lang/roc/issues/7088</a></li>\n<li><a href=\"https://github.com/roc-lang/roc/issues/7089\">https://github.com/roc-lang/roc/issues/7089</a></li>\n<li><a href=\"https://github.com/roc-lang/roc/issues/7090\">https://github.com/roc-lang/roc/issues/7090</a></li>\n</ul>",
        "id": 480135485,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1730508311
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/channel/395097-compiler-development/topic/Alias.20analysis.20error.20in.20implementing.20.60try.60/near/480135440\">said</a>:</p>\n<blockquote>\n<p>Once I do this, I'll try to crack out the <code>?</code> and <code>??</code> operators to finish the error handling suite, unless:</p>\n<ul>\n<li>Someone else would rather do them</li>\n<li>We'd rather keep them as simple tasks for new contributors</li>\n</ul>\n</blockquote>\n<p>yeah let's hold off on those for now</p>",
        "id": 480138586,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1730511485
    }
]