[
    {
        "content": "<p>Is there any reason someone can think of why this line inside of the <code>expr_to_pattern_help</code> function in parse/src/expr.rs <em>could not</em> or <em>should not</em> be implemented?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"n\">Expr</span><span class=\"p\">::</span><span class=\"n\">SpaceBefore</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Expr</span><span class=\"p\">::</span><span class=\"n\">SpaceAfter</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Expr</span><span class=\"p\">::</span><span class=\"n\">ParensAround</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">unreachable!</span><span class=\"p\">(),</span>\n</code></pre></div>",
        "id": 491915259,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736030945
    },
    {
        "content": "<p>Seems easy enough to translate into a pattern, but I want to make sure there isn't an invariant that I'm missing</p>",
        "id": 491915274,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736030975
    },
    {
        "content": "<p>I ask because this is often hit in the fuzzer and it causes a panic</p>",
        "id": 491915286,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736030997
    },
    {
        "content": "<p>I see why now.</p>",
        "id": 491920456,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736036218
    },
    {
        "content": "<p>For now, I'm going to wrap the fuzz_module function in a std::panic::catch_unwind so that it doesn't blow up on parse errors</p>",
        "id": 491920477,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736036247
    },
    {
        "content": "<p>Ok, that doesn't seem to be helping.  But it seems like, as Joshua warned me, the problem is trying to extract spaces when there is a SpacesBefore inside a SpacesBefore or a SpacesAfter inside a SpacesAfter....</p>",
        "id": 491923643,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736039663
    },
    {
        "content": "<p>It seems to me that to do that would require the ExtractSpaces trait's <code>extract_spaces</code> method to also take an arena as an arg.</p>",
        "id": 491923749,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736039802
    },
    {
        "content": "<p>So that they can be merged</p>",
        "id": 491923753,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736039808
    },
    {
        "content": "<p>Alright, I have this compiling.  This is either my best idea, or the worst idea.  Got rid of several <code>todo!()</code>s though</p>",
        "id": 491979527,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736094406
    },
    {
        "content": "<p>Running the fuzzer</p>",
        "id": 491979535,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736094416
    },
    {
        "content": "<p>Does this make sense to anyone:</p>\n<div class=\"codehilite\"><pre><span></span><code>\n</code></pre></div>",
        "id": 491980590,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736095410
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>* * * Source code before formatting:\ndbg(2ii/fi&amp;fh\n)\n\ni\n\n\n* * * Source code after formatting:\ndbg 2ii / fi &amp;fh\n\ni\n\n* * * AST before formatting:\nExpr(\n    @0-15 SpaceAfter(\n        DbgStmt {\n            first: @4-13 SpaceAfter(\n                BinOps(\n                    [\n                        (\n                            @4-7 Num(\n                                &quot;2ii&quot;,\n                            ),\n                            @7-8 Slash,\n                        ),\n                    ],\n                    @8-13 Apply(\n                        @8-10 Var {\n                            module_name: &quot;&quot;,\n                            ident: &quot;fi&quot;,\n                        },\n                        [\n                            @10-13 RecordUpdater(\n                                &quot;fh&quot;,\n                            ),\n                        ],\n                        Space,\n                    ),\n                ),\n                [\n                    Newline,\n                ],\n            ),\n            extra_args: [],\n            continuation: @17-18 SpaceBefore(\n                Var {\n                    module_name: &quot;&quot;,\n                    ident: &quot;i&quot;,\n                },\n                [\n                    Newline,\n                    Newline,\n                ],\n            ),\n        },\n        [\n            Newline,\n        ],\n    ),\n)\n\n* * * AST after formatting:\nExpr(\n    @0-19 Defs(\n        Defs {\n            tags: [\n                EitherIndex(2147483648),\n            ],\n            regions: [\n                @0-16,\n            ],\n            space_before: [\n                Slice&lt;roc_parse::ast::CommentOrNewline&gt; { start: 0, length: 0 },\n            ],\n            space_after: [\n                Slice&lt;roc_parse::ast::CommentOrNewline&gt; { start: 0, length: 0 },\n            ],\n            spaces: [],\n            type_defs: [],\n            value_defs: [\n                Stmt(\n                    @0-16 BinOps(\n                        [\n                            (\n                                @0-7 Apply(\n                                    @0-3 Dbg,\n                                    [\n                                        @4-7 Num(\n                                            &quot;2ii&quot;,\n                                        ),\n                                    ],\n                                    Space,\n                                ),\n                                @8-9 Slash,\n                            ),\n                        ],\n                        @10-16 Apply(\n                            @10-12 Var {\n                                module_name: &quot;&quot;,\n                                ident: &quot;fi&quot;,\n                            },\n                            [\n                                @13-16 RecordUpdater(\n                                    &quot;fh&quot;,\n                                ),\n                            ],\n                            Space,\n                        ),\n                    ),\n                ),\n            ],\n        },\n        @18-19 SpaceBefore(\n            Var {\n                module_name: &quot;&quot;,\n                ident: &quot;i&quot;,\n            },\n            [\n                Newline,\n                Newline,\n            ],\n        ),\n    ),\n)\n</code></pre></div>",
        "id": 491980604,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736095420
    },
    {
        "content": "<p>I don't think I understand what a dbg statement continuation is</p>",
        "id": 491980663,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736095446
    },
    {
        "content": "<p>it's the rest of the program after the <code>dbg</code>. for example</p>\n<div class=\"codehilite\"><pre><span></span><code>dbg(x)\n1 + 2\n</code></pre></div>\n<p><code>1 + 2</code> is the continuation</p>",
        "id": 491980758,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1736095528
    },
    {
        "content": "<p>Sure....why is that not just a separate expression?</p>",
        "id": 491980797,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736095560
    },
    {
        "content": "<p>is the AST not structured as nested expressions</p>",
        "id": 491980893,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1736095624
    },
    {
        "content": "<p>it used to be, at least</p>",
        "id": 491980903,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1736095636
    },
    {
        "content": "<p>It is, but I don't understand why a debug would contain a continuation....</p>",
        "id": 491980981,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736095694
    },
    {
        "content": "<p>I would think the grammar for a Dbg expression would be <code>\"dbg\" &lt;Expr&gt;</code></p>",
        "id": 491981003,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736095733
    },
    {
        "content": "<p>I get it</p>",
        "id": 491981143,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736095838
    },
    {
        "content": "<p>because you need something to indicate what the rest of the expression after the debug is. So it's like <code>dbg &lt;Expr&gt; &lt;Expr&gt;</code>. otherwise you would need a list as you mention but a nice property of nesting the next expression is that you can get the type of the whole expression just by looking at one node.</p>",
        "id": 491981155,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1736095853
    },
    {
        "content": "<p>We don't have a separate Statement type.  So something that is a statement needs to have a continuation that has the rest of the function</p>",
        "id": 491981170,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736095866
    },
    {
        "content": "<p>The problem here is we didn't print the parens around the binop when we formatted</p>",
        "id": 491981271,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736095956
    },
    {
        "content": "<p>So now it thinks we are applying <code>dbg</code> to the number <code>2ii</code> and then that is the left-hand side of the binop</p>",
        "id": 491981306,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736096001
    },
    {
        "content": "<p>And that's because the original parse didn't capture the ParensAround</p>",
        "id": 491981328,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736096031
    },
    {
        "content": "<p>Let me know if that sounds correct to you <span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> and thanks for talking sense into me</p>",
        "id": 491981405,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736096093
    },
    {
        "content": "<p>FIgured it out</p>",
        "id": 491983364,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736097818
    },
    {
        "content": "<p>One last issue and this should fix the last major fuzzer issue with PNC</p>",
        "id": 491983373,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736097834
    },
    {
        "content": "<p>I've made a few fixes for PNC issues locally (didn't notice this thread until after I them!)</p>",
        "id": 491991173,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736104683
    },
    {
        "content": "<p>Pushed a few of those here: <a href=\"https://github.com/roc-lang/roc/pull/7468\">https://github.com/roc-lang/roc/pull/7468</a></p>",
        "id": 491991272,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736104782
    },
    {
        "content": "<p>Anyway, one thing that I think can't be preserved in the current AST is comments in an empty PNC apply, e.g.:</p>\n<div class=\"codehilite\"><pre><span></span><code>foo(\n    #comment\n)\n</code></pre></div>\n<p>I think this will require using a different variant for PncApply in the AST, something like:</p>\n<div class=\"codehilite\"><pre><span></span><code>PncApply(&amp;&#39;a Expr&lt;&#39;a&gt;, Collection&lt;&#39;a, &amp;&#39;a Expr&lt;&#39;a&gt;&gt;),\n</code></pre></div>",
        "id": 491991539,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736105032
    },
    {
        "content": "<p>Well the args use the collection helper so wouldn’t this apply to empty collections too?</p>",
        "id": 491991613,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736105085
    },
    {
        "content": "<p>Oh use the collection type instead of a slice?</p>",
        "id": 491991632,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736105114
    },
    {
        "content": "<p>That would be helpful</p>",
        "id": 491991636,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736105121
    },
    {
        "content": "<p>Yeah, collections explicitly keep trailing comments</p>",
        "id": 491991646,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736105129
    },
    {
        "content": "<p>Couldn’t we just move apply to use collection</p>",
        "id": 491991650,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736105132
    },
    {
        "content": "<p>Since WS apply is going away?</p>",
        "id": 491991663,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736105146
    },
    {
        "content": "<p>That adds a bunch of complexity to the ws apply case</p>",
        "id": 491991669,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736105152
    },
    {
        "content": "<p>That’s the exact issue I was trying to fix later</p>",
        "id": 491991674,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736105160
    },
    {
        "content": "<p>I would rather just have a new Expr variant for Pnc, and eventually delete the old WS one</p>",
        "id": 491991722,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736105175
    },
    {
        "content": "<p>Ok. That’s a bigger refactor than I’m willing to do for this PR</p>",
        "id": 491991737,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736105194
    },
    {
        "content": "<p>Especially after my extract spaces refactor</p>",
        "id": 491991744,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736105203
    },
    {
        "content": "<p>Which PR are you talking about?</p>",
        "id": 491991764,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736105224
    },
    {
        "content": "<p>The one I’m working on</p>",
        "id": 491991801,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736105263
    },
    {
        "content": "<p>Ah got it, not submitted yet</p>",
        "id": 491991810,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736105273
    },
    {
        "content": "<p>Not yet. I’m at the museum with my kids, but I’ll be able to push up what I got in a couple of hours</p>",
        "id": 491991872,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736105304
    },
    {
        "content": "<p>You’ll either love me or hate me for it</p>",
        "id": 491992069,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736105500
    },
    {
        "content": "<p>Nah no hating here :)</p>",
        "id": 491992148,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736105557
    },
    {
        "content": "<p>Read the above for context. Just made extract spaces take an arena so I could merge spaces recursively from SpacesBefore/SpacesAfter nodes</p>",
        "id": 491992201,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736105604
    },
    {
        "content": "<p>And get rid of six todos in source. Probably 16 after macro expansion</p>",
        "id": 491992344,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736105727
    },
    {
        "content": "<p>Great!</p>",
        "id": 491992363,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736105751
    },
    {
        "content": "<p>I think that probably resolves one of the panics I was looking at</p>",
        "id": 491992427,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736105775
    },
    {
        "content": "<p>I'm going to pull back the PNC-related fuzzing fixes I had in the PR I linked, to avoid conflicting with you</p>",
        "id": 491992439,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736105794
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 491992573,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736105899
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453336\">Joshua Warner</span> <a href=\"#narrow/channel/395097-compiler-development/topic/Trying.20to.20resolve.20some.20fuzzer.20issues/near/491991539\">said</a>:</p>\n<blockquote>\n<p>Anyway, one thing that I think can't be preserved in the current AST is comments in an empty PNC apply, e.g.:</p>\n<div class=\"codehilite\"><pre><span></span><code>foo(\n    #comment\n)\n</code></pre></div>\n<p>I think this will require using a different variant for PncApply in the AST, something like:</p>\n<p><div class=\"codehilite\"><pre><span></span><code>PncApply(&amp;&#39;a Expr&lt;&#39;a&gt;, Collection&lt;&#39;a, &amp;&#39;a Expr&lt;&#39;a&gt;&gt;),\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I'm going to start on this tonight if you haven't</p>",
        "id": 492006991,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736119085
    },
    {
        "content": "<p>Go for it!</p>",
        "id": 492011811,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736123746
    },
    {
        "content": "<p>I am in a horrible back and forth where I have all of the tests passing, and then exceptions gone, but the fuzzer still fails relatively quickly</p>",
        "id": 492384617,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736282897
    },
    {
        "content": "<p>The latest thing is <code>dbg</code> followed immediately by parens</p>",
        "id": 492384667,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736282921
    },
    {
        "content": "<p>Suggestion: the fuzzer is really useful for making sure we have coherent coverage for our syntax when it's stable, but is blocking us from progressing when we're making tons of syntax changes</p>",
        "id": 492384943,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736283029
    },
    {
        "content": "<p>Can we disable it until after PNC + <code>||</code> args and all are merged?</p>",
        "id": 492384987,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736283051
    },
    {
        "content": "<p>That's true</p>",
        "id": 492384988,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736283052
    },
    {
        "content": "<p>Not remove it, just comment it out in the CI</p>",
        "id": 492385041,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736283074
    },
    {
        "content": "<p>Here's an example that fails:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"p\">(</span><span class=\"no\">L5</span><span class=\"p\">(</span><span class=\"no\">L5</span>\n<span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"p\">(</span>\n<span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"no\">L5</span>\n<span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">e</span>\n<span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">dbg</span><span class=\"p\">(</span><span class=\"no\">L22</span>\n<span class=\"mi\">0</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 492385057,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736283080
    },
    {
        "content": "<p>Because we now have two separate nodes for Whitespace Apply and PNC apply</p>",
        "id": 492385134,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736283118
    },
    {
        "content": "<p>Up to you guys, but often I find it a mistake to disable fuzzers temporarily. Turning them back on is a huge pain and often never happens.</p>",
        "id": 492385648,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736283315
    },
    {
        "content": "<p>The fuzzer is catching real bugs in the new syntax. Even if they are ridiculous bugs.</p>",
        "id": 492385701,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736283340
    },
    {
        "content": "<p>As long as there is a definite plan of when work will be put in to re-enable it, I think it could be reasonable to disable temporarily. Especially if after removing old syntax it will be easier to fix.</p>",
        "id": 492385944,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736283448
    },
    {
        "content": "<p>I just don't want Anthony Bullard to put his computer in the garbage disposal one piece at a time</p>",
        "id": 492386045,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736283484
    },
    {
        "content": "<p>I'm avoiding touching parsing right now because it's no fun at the moment</p>",
        "id": 492386147,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736283528
    },
    {
        "content": "<p>Here's another beaut:</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>(L5(L5\n0)\n(\n0)\n(L5\n0)\ne\n0)\ndbg(L(\nL5\n0)\n+\n0asebg,L(\n5is\nif1)\ne\n0)\n(21\n0)\n</code></pre></div>",
        "id": 492386877,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736283773
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"453336\">@Joshua Warner</span></p>",
        "id": 492386882,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736283774
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> already disabled it I thought?</p>",
        "id": 492386945,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736283803
    },
    {
        "content": "<p>I thought Josh was standing by with some fuzzer fixes until Anthony lands his change</p>",
        "id": 492386955,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736283806
    },
    {
        "content": "<p>I think we just ignore the fuzzer for now... if <span class=\"user-mention\" data-user-id=\"453336\">@Joshua Warner</span> is ok with that. We can follow up with fixes in a separate PR</p>",
        "id": 492387035,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736283839
    },
    {
        "content": "<p>And by <em>we</em> I am thinking Josh... he seems to fix these bugs faster than I can find them (and I'm just running an automated tool)</p>",
        "id": 492387186,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736283891
    },
    {
        "content": "<p>As Brendan said, if we have a concrete plan to disable the fuzzer and how we can improve the parsing impl such that re-enabling the fuzzer puts us in a better spot, I think disabling it is good</p>",
        "id": 492387275,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736283925
    },
    {
        "content": "<p>If we have folks actively working on this (and we do!), I think temporarily disabling in CI is fine</p>",
        "id": 492387297,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736283935
    },
    {
        "content": "<p>But yes, if we just disable in indefinitely, that's a recipe for dead code</p>",
        "id": 492387301,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736283938
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"p\">(</span><span class=\"no\">L5</span><span class=\"p\">(</span><span class=\"no\">L5</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)(</span><span class=\"mi\">0</span><span class=\"p\">)(</span><span class=\"no\">L5</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">dbg</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">(</span><span class=\"no\">L5</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">asebg</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">L</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">ifl</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"mi\">21</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 492387323,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736283948
    },
    {
        "content": "<p>We should minimize these examples</p>",
        "id": 492387358,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736283962
    },
    {
        "content": "<p>I do</p>",
        "id": 492387448,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736283974
    },
    {
        "content": "<p>Hmm they don’t look very minimal?</p>",
        "id": 492387492,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736283999
    },
    {
        "content": "<p>What tool are you using to minimize?</p>",
        "id": 492387522,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736284014
    },
    {
        "content": "<p>I just ran <code>cargo run --bin minimize expr</code> on the above and concur with Anthony... this is \"minimal\" according to our tool</p>",
        "id": 492387656,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736284075
    },
    {
        "content": "<p>Interesting</p>",
        "id": 492387733,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736284094
    },
    {
        "content": "<p>Here's this minimization</p>\n<div class=\"codehilite\"><pre><span></span><code>dbg()\n</code></pre></div>\n<p><span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span><span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span><span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span><span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span><span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span><span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span><span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span><span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span><span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span><span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span><span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span><span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span><span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span><span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 492387746,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736284102
    },
    {
        "content": "<p>Oh yeah that looks more minimal!</p>",
        "id": 492387775,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736284117
    },
    {
        "content": "<p>I have a fix for that one locally</p>",
        "id": 492387787,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736284127
    },
    {
        "content": "<p>Care to share?</p>",
        "id": 492387810,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736284136
    },
    {
        "content": "<p>So i can get past this?</p>",
        "id": 492387836,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736284145
    },
    {
        "content": "<p>I was thinking of returning a Malformed if the args were empty</p>",
        "id": 492387952,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736284196
    },
    {
        "content": "<p>I think this commit has the fix I made for that: <a href=\"https://github.com/roc-lang/roc/commit/8f48ced87974ff4b6b4a9fd703b437ac27ef8943\">https://github.com/roc-lang/roc/commit/8f48ced87974ff4b6b4a9fd703b437ac27ef8943</a></p>",
        "id": 492388341,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736284347
    },
    {
        "content": "<p>Ok, this isn't really compatible with the changes I've made</p>",
        "id": 492388488,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736284431
    },
    {
        "content": "<p>FWIW I eventually want to get rid of DbgStmt as a separate node (i.e. so this is just an apply in the syntax tree), so I would rather not go down the road of making a special Malformed node for this</p>",
        "id": 492388490,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736284432
    },
    {
        "content": "<p>Interesting; what incompatibilities are there?</p>",
        "id": 492388554,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736284446
    },
    {
        "content": "<p>I got rid of the ParensAndCommas CalledVia variant</p>",
        "id": 492388587,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736284467
    },
    {
        "content": "<p>I really dislike DbgStmt</p>",
        "id": 492388799,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736284561
    },
    {
        "content": "<p>Ayaz seemed to disagree with me about it</p>",
        "id": 492388860,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736284571
    },
    {
        "content": "<p>Yeah it's caused a bunch of trouble with making the formatter consistent</p>",
        "id": 492388989,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736284633
    },
    {
        "content": "<p>I just wish it was just collapsed into the Dbg Expr node</p>",
        "id": 492389064,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736284667
    },
    {
        "content": "<p>And have that just be a tuple variant that takes the Expr to be inspected</p>",
        "id": 492389136,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736284686
    },
    {
        "content": "<p>Anyway, I agree this commit will have conflicts with your PncApply refactor, but I think it should be possible to adapt</p>",
        "id": 492389294,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736284764
    },
    {
        "content": "<p>So should I just push it up with all the tests passing and go from there</p>",
        "id": 492389356,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736284794
    },
    {
        "content": "<p>This has been the most harrrowing PR I've done on this project</p>",
        "id": 492389432,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736284812
    },
    {
        "content": "<p>I don't quite follow?</p>",
        "id": 492389434,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736284813
    },
    {
        "content": "<p>Should I push my current PR?</p>",
        "id": 492389454,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736284824
    },
    {
        "content": "<p>Get it merged, and then get yours in after revving</p>",
        "id": 492389503,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736284845
    },
    {
        "content": "<p>Oh yeah sharing early+often sounds valuable</p>",
        "id": 492389508,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736284848
    },
    {
        "content": "<p>Don't have to fix everything all at once</p>",
        "id": 492389524,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736284858
    },
    {
        "content": "<p>Yeah, I was just trying to see if this approach was going to solve any problems</p>",
        "id": 492389596,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736284893
    },
    {
        "content": "<p>And it did fix the \"final comments\" issue with PNC</p>",
        "id": 492389616,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736284906
    },
    {
        "content": "<p>I think that's the primary and possibly only thing this fixes</p>",
        "id": 492389685,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736284924
    },
    {
        "content": "<p>One thing that will make you happy is that I did split a fmt_pnc_apply from fmt_apply</p>",
        "id": 492389740,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736284951
    },
    {
        "content": "<p>It was so much simpler since I could use the format_expr_collection</p>",
        "id": 492389790,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736284981
    },
    {
        "content": "<p>Oh thanks for that</p>",
        "id": 492389802,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736284985
    },
    {
        "content": "<p>Nice!</p>",
        "id": 492389816,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736284993
    },
    {
        "content": "<p>Yeah fmt_apply goes back to the way it was before PNC</p>",
        "id": 492389833,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736284999
    },
    {
        "content": "<p>I was running into issues formatting abilities that such a change would have solved</p>",
        "id": 492389842,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736285004
    },
    {
        "content": "<p>Sorry for all the dust</p>",
        "id": 492389887,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736285021
    },
    {
        "content": "<p>NP!</p>",
        "id": 492389908,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736285028
    },
    {
        "content": "<p>Thanks for helping out here!</p>",
        "id": 492389911,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736285033
    },
    {
        "content": "<p>I don't give a hoot, you're doing the hard work</p>",
        "id": 492389920,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736285037
    },
    {
        "content": "<p>Glad to see PNC live!</p>",
        "id": 492389932,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736285041
    },
    {
        "content": "<p>Collection and all the utilities around it are very nice</p>",
        "id": 492389934,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736285041
    },
    {
        "content": "<p>Threading the last arg <code>after</code> and the final_comments together consistently made me so mad - solved problem with collection</p>",
        "id": 492390077,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736285111
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"453336\">@Joshua Warner</span> <a href=\"https://github.com/roc-lang/roc/pull/7480\">https://github.com/roc-lang/roc/pull/7480</a></p>",
        "id": 492405770,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736292197
    },
    {
        "content": "<p>Nice; left a few review comments. Most (maybe all?) are things that can be fixed up in follow-up PRs.</p>",
        "id": 492426545,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736305669
    },
    {
        "content": "<p>I'm not too worried about this stuff going stale / not being actioned, so I'm generally fine either way.</p>",
        "id": 492426610,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736305689
    },
    {
        "content": "<p>There are a bunch of different changes we have out-standing right now and keeping the momentum feels important - so maybe bias towards action now?</p>",
        "id": 492426710,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736305796
    },
    {
        "content": "<p>You will have to fix those conflicts tho :/</p>",
        "id": 492426787,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736305830
    },
    {
        "content": "<p>(LMK if I can help with that!)</p>",
        "id": 492426793,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1736305838
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> <a href=\"#narrow/channel/395097-compiler-development/topic/Trying.20to.20resolve.20some.20fuzzer.20issues/near/492386945\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> already disabled it I thought?</p>\n</blockquote>\n<p>Yeah, to give some context; it was failing the ubuntu_x86_64.yml workflow very often, but you can never be sure that nothing else failed so you need to check every time. Also, the ubuntu_x86_64.yml is a required workflow so basically all PRs needed to be force merged. I think the fuzzer should be moved to a new standalone workflow that is not required to pass. So it can inform us but does not require a force merge by an admin.</p>",
        "id": 492468709,
        "sender_full_name": "Anton",
        "timestamp": 1736329799
    },
    {
        "content": "<p>I saw that and thought it was a good idea.. but wasn't sure how to implement it.</p>",
        "id": 492469095,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736329927
    },
    {
        "content": "<p><a href=\"https://github.com/actions/runner/issues/2347\">https://github.com/actions/runner/issues/2347</a></p>",
        "id": 492469336,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736330024
    },
    {
        "content": "<p>There's an issue to allow CI actions to fail and not block merging, but GH doesn't want to implement it, apparently</p>",
        "id": 492469446,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736330053
    },
    {
        "content": "<p>So we can probably just do <code>run_fuzzer || true</code> in the shell command in the GH action definition</p>",
        "id": 492469502,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736330075
    },
    {
        "content": "<p>I'll take care of it, there's a way around it, you still get the red x but it's fine to merge</p>",
        "id": 492469509,
        "sender_full_name": "Anton",
        "timestamp": 1736330078
    },
    {
        "content": "<p>Awesome!</p>",
        "id": 492469523,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736330084
    },
    {
        "content": "<p>That's perfect</p>",
        "id": 492469530,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736330088
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/channel/395097-compiler-development/topic/Trying.20to.20resolve.20some.20fuzzer.20issues/near/492469509\">said</a>:</p>\n<blockquote>\n<p>I'll take care of it, there's a way around it, you still get the red x but it's fine to merge</p>\n</blockquote>\n<p><a href=\"https://github.com/roc-lang/roc/pull/7484\">PR#7484</a></p>",
        "id": 492526178,
        "sender_full_name": "Anton",
        "timestamp": 1736349544
    }
]