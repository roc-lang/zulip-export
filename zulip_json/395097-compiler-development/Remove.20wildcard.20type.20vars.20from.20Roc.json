[
    {
        "content": "<blockquote>\n<p>I think we should just remove wildcards and make this whole class of edge cases disappear</p>\n</blockquote>\n<p>Yeah, it only has very limited correct use and most people do not understand those use cases.</p>",
        "id": 491533324,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735770369
    },
    {
        "content": "<p>Really the main correct use case is function inputs that are not cared abot.</p>",
        "id": 491533354,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735770419
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/395097-compiler-development/topic/Wildcard.20in.20opaque.20types/near/491533354\">said</a>:</p>\n<blockquote>\n<p>Really the main correct use case is function inputs that are not cared abot.</p>\n</blockquote>\n<p>That's what <code>_</code> is for though...</p>",
        "id": 491533377,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735770439
    },
    {
        "content": "<p>no</p>",
        "id": 491533389,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735770456
    },
    {
        "content": "<p><code>_</code> constrains to a specific type</p>",
        "id": 491533452,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735770506
    },
    {
        "content": "<p><code>*</code> represents \"any type\"</p>",
        "id": 491533455,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735770514
    },
    {
        "content": "<p><code>_</code> you can still use the underlying type cause underscore means the compiler will fill it in for you:</p>\n<p><code>List _ -&gt; U64</code> is a valid singnature for List.get on a list of <code>U64</code>.<br>\n<code>List * -&gt; U64</code> can only return the length or capacity and can never access an element.</p>",
        "id": 491533476,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735770545
    },
    {
        "content": "<p>Oh ... that's interesting. so <code>*</code> is polymorphic and <code>_</code> isn't?</p>",
        "id": 491533480,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735770551
    },
    {
        "content": "<p>Which is why a function that accepts <code>[Red, Blue]_</code> called with <code>[Red, Blue, Green]</code> and <code>[Red, Blue, Yellow]</code> will only resolve correctly for one of them</p>",
        "id": 491533492,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735770582
    },
    {
        "content": "<p><code>_</code> is more flexible. Technically <code>_</code> could resolve to <code>*</code></p>",
        "id": 491533493,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735770590
    },
    {
        "content": "<p><code>*</code> isn't quite polymorphic, I think</p>",
        "id": 491533498,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735770599
    },
    {
        "content": "<p>It means \"this variable must work for any type replaced\", so it can only work for, say, empty lists</p>",
        "id": 491533595,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735770700
    },
    {
        "content": "<p>Since no matter what type [] is, you can't get a value out of it, so the elem type doesn't matter</p>",
        "id": 491533648,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735770732
    },
    {
        "content": "<blockquote>\n<p>so it can only work for, say, empty lists</p>\n</blockquote>\n<p>If talking about a concrete value. Means something different for a function input.</p>",
        "id": 491533656,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735770743
    },
    {
        "content": "<p>Yeah...</p>",
        "id": 491533668,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735770763
    },
    {
        "content": "<p>^ Another reason</p>",
        "id": 491533671,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735770766
    },
    {
        "content": "<p>Anyway, <code>_</code> is just a request for the compiler to fill in the blank, it is super flexible.</p>\n<div class=\"codehilite\"><pre><span></span><code>» x : List _ -&gt; _\n… x = \\l -&gt; List.get l 0 ?? 24\n\n&lt;function&gt; : List (Num a) -&gt; Num a\n» y : List _ -&gt; _\n… y = \\l -&gt; List.map l \\i -&gt; i - 1\n\n&lt;function&gt; : List (Num a) -&gt; List (Num a)\n» z : List _ -&gt; _\n… z = \\l -&gt; List.get l 1\n\n&lt;function&gt; : List a -&gt; Result a [OutOfBounds]\n</code></pre></div>",
        "id": 491533755,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735770848
    },
    {
        "content": "<p>None of those functions are valid if <code>*</code> was used for the first blank instead of <code>_</code></p>",
        "id": 491533764,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735770875
    },
    {
        "content": "<p>Anyway, I personally would prefer to restrict <code>*</code> to only be allowed in function inputs. I think that is the main valid use case for it. Ban it in all other locations.</p>\n<p>But I understand just using an arbitrary letter instead of <code>*</code></p>",
        "id": 491533880,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735771006
    },
    {
        "content": "<p>Seems simpler to just get rid of it</p>",
        "id": 491533911,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735771055
    },
    {
        "content": "<p>And then beginners don't say \"oh, what's this\" followed by \"why can't I use it elsewhere\"</p>",
        "id": 491533963,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735771084
    },
    {
        "content": "<p>That definitely wasn't what I came here for... but it has come up before</p>",
        "id": 491533970,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735771087
    },
    {
        "content": "<p>I'm ON a MISSION</p>",
        "id": 491533976,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735771099
    },
    {
        "content": "<p>You are a convenient vehicle</p>",
        "id": 491533981,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735771109
    },
    {
        "content": "<p>I just really hate the arbitrary letters gunking up my type signatures.</p>",
        "id": 491533997,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735771134
    },
    {
        "content": "<p>Me too</p>",
        "id": 491534017,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735771152
    },
    {
        "content": "<p>Okay, separate thread incoming</p>",
        "id": 491534029,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735771168
    },
    {
        "content": "<p>(unless I can find an old one to necro)</p>",
        "id": 491534036,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735771176
    },
    {
        "content": "<p>i'm pretty sure <code>*</code> and <code>a</code> like variables have already been banned from all non-generalizable positions and only functions are generalizable</p>",
        "id": 491534117,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735771250
    },
    {
        "content": "<p>You can still do stuff like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>» x : List *\n… x = []\n</code></pre></div>",
        "id": 491534149,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735771302
    },
    {
        "content": "<p>And this:</p>\n<div class=\"codehilite\"><pre><span></span><code>» y : {} -&gt; List *\n… y = \\{} -&gt; []\n</code></pre></div>",
        "id": 491534208,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735771343
    },
    {
        "content": "<p>Yep, this typechecks</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kn\">module</span><span class=\"w\"> </span><span class=\"err\">[</span><span class=\"nc\">num</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">func</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">func2</span><span class=\"p\">]</span>\n\n<span class=\"nv\">num</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"w\"> </span><span class=\"nf\">*</span>\n<span class=\"nv\">num</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"mi\">123</span>\n\n<span class=\"nv\">func</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"nf\">*</span>\n<span class=\"nv\">func</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n\n<span class=\"nv\">func2</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"nf\">*</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">U64</span>\n<span class=\"nv\">func2</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">_list</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">123</span>\n</code></pre></div>",
        "id": 491534211,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735771344
    },
    {
        "content": "<blockquote>\n<p><div class=\"codehilite\"><pre><span></span><code>num : Num *\nnum = 123\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This surprises me. I think that is just a bug</p>",
        "id": 491534234,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735771382
    },
    {
        "content": "<p>Oh, that's probably part of the one I got assigned</p>",
        "id": 491534256,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735771399
    },
    {
        "content": "<p>Nope, it's different</p>",
        "id": 491534273,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735771426
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/issues/7357\">https://github.com/roc-lang/roc/issues/7357</a> shows that types implemented in Zig like <code>List</code> don't have their type args checked properly, since we only check aliases for type args</p>",
        "id": 491534343,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735771480
    },
    {
        "content": "<p>And <code>List</code> isn't registered as a normal type alias</p>",
        "id": 491534347,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735771491
    },
    {
        "content": "<p>But this is different, since Num is defined as <code>Num range := range</code></p>",
        "id": 491534365,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735771506
    },
    {
        "content": "<p>It might be that numbers are special cased</p>",
        "id": 491534385,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735771530
    },
    {
        "content": "<p>well, even though I can't define a concrete value, I can still type def one without a problem</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kn\">module</span><span class=\"w\"> </span><span class=\"err\">[</span><span class=\"nc\">my_abc</span><span class=\"p\">]</span>\n\n<span class=\"kt\">Abc</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">field</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"nv\">my_abc</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Abc</span><span class=\"w\"> </span><span class=\"nf\">*</span>\n</code></pre></div>",
        "id": 491534458,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735771605
    },
    {
        "content": "<p>51 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"395097\" href=\"/#narrow/channel/395097-compiler-development/topic/Wildcard.20in.20opaque.20types\">#compiler development &gt; Wildcard in opaque types</a> by <span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span>.</p>",
        "id": 491534472,
        "sender_full_name": "Notification Bot",
        "timestamp": 1735771630
    },
    {
        "content": "<p>52 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"395097\" href=\"/#narrow/channel/395097-compiler-development/topic/Remove.20wildcards.20from.20Roc\">#compiler development &gt; Remove wildcards from Roc</a> by <span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span>.</p>",
        "id": 491534499,
        "sender_full_name": "Notification Bot",
        "timestamp": 1735771675
    },
    {
        "content": "<p>Try again</p>",
        "id": 491534541,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735771683
    },
    {
        "content": "<p>43 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"395097\" href=\"/#narrow/channel/395097-compiler-development/topic/Wildcard.20in.20opaque.20types\">#compiler development &gt; Wildcard in opaque types</a> by <span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span>.</p>",
        "id": 491534560,
        "sender_full_name": "Notification Bot",
        "timestamp": 1735771707
    },
    {
        "content": "<p>That's a better range</p>",
        "id": 491534566,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735771721
    },
    {
        "content": "<p><code>x : List *</code><br>\nThis is definitely a bug</p>\n<p><code>y : {} -&gt; List *</code><br>\nThis seems fine and should be allowed, <code>\\{} -&gt; []</code> is a generalizable function</p>\n<p><code>num : Num *</code><br>\nThis is a special case today but i think it's worth removing</p>\n<p><code>func2 : List * -&gt; U64</code><br>\nThis also seems fine because the function can take in a list of any type</p>",
        "id": 491535343,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735772527
    },
    {
        "content": "<blockquote>\n<p><code>\\{} -&gt; []</code> is a generalizable function</p>\n</blockquote>\n<p>Is this a valid <code>List.empty</code>? I wasn't sure if <code>*</code> in an output location generalized.</p>",
        "id": 491535497,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735772736
    },
    {
        "content": "<p>yeah it's generalized</p>",
        "id": 491535512,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735772760
    },
    {
        "content": "<p>the intuition is that because the entry point of the program is concrete, by the transitive property, all used values must eventually be concrete as well</p>",
        "id": 491535565,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735772795
    },
    {
        "content": "<p>Ah yeah, just realized we do this for <code>Dict.empty</code> so that makes sense.</p>",
        "id": 491535587,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735772833
    },
    {
        "content": "<p>if a value's type is not concrete after you propagate all the types through, then the value must never be used. in that case it's sufficient to generate the void type</p>",
        "id": 491535595,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735772837
    },
    {
        "content": "<p>I would be quite happy if <code>*</code> was restricted to only function inputs and outputs.</p>",
        "id": 491535598,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735772847
    },
    {
        "content": "<p>agreed</p>",
        "id": 491535615,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735772876
    },
    {
        "content": "<p>and any named type variables too</p>",
        "id": 491535660,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735772889
    },
    {
        "content": "<p>So it seems like we have two positions that move us in the direction of minimizing wildcard <code>*</code> type variables in Roc:</p>\n<ol>\n<li>Remove <code>*</code> entirely, and replace all usages with named variables. There are <a href=\"https://github.com/search?q=repo%3Aroc-lang%2Froc%20%22*%22%20path%3Acrates%2Fcompiler%2Fbuiltins%2Froc%2F*.roc&amp;type=code\">quite a few usages in our builtins</a>, but there doesn't seem to be anything that uses more than one or two at a time, meaning we aren't introducing a whole soup of variables. This avoids the <a href=\"#narrow/search/wildcard\">multiple times beginners have been confused by wildcards</a>, and should improve comprehensibility for newcomers. The cost here is that beginners need to consider that any variables they see on the left-hand side of a function but not the right, or vice versa, are ignorable. This is more mental overhead when reading Roc, but not much IMO.</li>\n<li>Only allow <code>*</code> in function input types. That allows us to communicate that a value is not important (in that it isn't used), but doesn't lead to confusion about its usage in variable types. We'd need to figure out how we should write <code>empty_list : List *</code>, but it shouldn't require a massive conversion. We still need to now think \"if a variable exists in the return type but not the args, ignore it\", but we still get a simpler Roc.</li>\n</ol>\n<p>It seems like this comes down to:</p>\n<ol>\n<li>Would beginners get a significant learning improvement from removing <code>*</code> entirely?</li>\n<li>How much do we care about consistency: does having <code>*</code> only in function args and nowhere else bother us?</li>\n</ol>",
        "id": 491535679,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735772915
    },
    {
        "content": "<p>Oh, we'd want function outputs as well</p>",
        "id": 491535694,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735772939
    },
    {
        "content": "<p>empty list should be <code>\\{} -&gt; []</code> if you want a generic list. Otherwise write <code>empty_list : List _</code> and the compiler will figure out what type to use for you.</p>",
        "id": 491535717,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735772966
    },
    {
        "content": "<blockquote>\n<p>How much do we care about consistency: does having <code>*</code> only in function args and nowhere else bother us?</p>\n</blockquote>\n<p>No. Cause it doesn't really make sense anywhere else.</p>",
        "id": 491535776,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735773005
    },
    {
        "content": "<ol start=\"3\">\n<li>Only allow <code>*</code> in function input and output types. That allows us to communicate that a value is not important (in that it isn't used), but doesn't lead to confusion about its usage in variable types. We'd need to figure out how we should write <code>empty_list : List *</code>, but it shouldn't require a massive conversion. This would probably be the smallest change. Beginners still need to learn what <code>*</code> is, but can think of it as a \"function cleanup tool\" and not need to understand the implications in values.</li>\n</ol>",
        "id": 491535815,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735773066
    },
    {
        "content": "<p>i would prefer removing <code>*</code> only very slightly due to the specific case of <code>* -&gt; *</code> I think being confusing because the input and output types are not related whereas they are in <code>a -&gt; a</code>, but I would strongly suggest not having a world where <code>*</code> can be used on one side of a function and not the other. I think that will be more confusing than having both wildcards and named variables or only having named variables, because it would make the type system seem more complicated than it is.</p>",
        "id": 491535908,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735773171
    },
    {
        "content": "<p>Yes, I agree that 2 seems like the worst option because it feels like an arbitrary and confusing restriction</p>",
        "id": 491536022,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735773229
    },
    {
        "content": "<p>I don't quite follow <code>*-&gt; *</code> is just <code>a -&gt; b</code></p>",
        "id": 491536025,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735773233
    },
    {
        "content": "<p>I think we should remove wildcards</p>",
        "id": 491536026,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735773234
    },
    {
        "content": "<p>I think it was an experiment that didn't work out</p>",
        "id": 491536068,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735773244
    },
    {
        "content": "<p>the upside is that it's \"kinda nice\" when you understand it, but the downside is that it's actively confusing, and the downside comes up a lot in practice</p>",
        "id": 491536093,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735773282
    },
    {
        "content": "<p>just doesn't seem like it has been worth it overall</p>",
        "id": 491536100,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735773288
    },
    {
        "content": "<p>I think Roc is totally fine without them, and fewer features is always better unless said features add a significant benefit</p>",
        "id": 491536105,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735773296
    },
    {
        "content": "<p>I will miss this:<br>\n<code>List.len: List * -&gt; U64</code></p>",
        "id": 491536116,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735773304
    },
    {
        "content": "<p>But yeah, seems fine to remove</p>",
        "id": 491536122,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735773308
    },
    {
        "content": "<p>I'll wait for more voices, and then make a GH issue later</p>",
        "id": 491536140,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735773329
    },
    {
        "content": "<p>yeah, there are things I'll miss about it, but overall I think the language is better off without it</p>",
        "id": 491536144,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735773337
    },
    {
        "content": "<p>Yeah, I definitely believe that. I mean <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> is definitely not a beginner and still hits issues with <code>*</code>. That is a pretty clear sign that is should probably be removed.</p>",
        "id": 491536210,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735773382
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span></p>",
        "id": 491536332,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735773497
    },
    {
        "content": "<p>I would say I'm comfortable working around the <code>*</code>'s... but I will admit I still don't fully understand them. I usually just mentally replace them with <code>a</code>, <code>b</code>, <code>c</code>... etc</p>",
        "id": 491536394,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735773588
    },
    {
        "content": "<p>I also do the mental replacement, meaning I'd rather have the vars anyway</p>",
        "id": 491536474,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735773636
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/issues/7451\">https://github.com/roc-lang/roc/issues/7451</a></p>",
        "id": 491539486,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735776667
    },
    {
        "content": "<p>I think <code>*</code> was an interesting idea to not have to get deep into type vars early in the learning journey but I think type vars are so omnipresent in languages with generics for good reason.</p>",
        "id": 491550589,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735787669
    },
    {
        "content": "<p>yeah that was part of the hope, and the other part was just to have a better way to talk about it</p>",
        "id": 491550939,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735788009
    },
    {
        "content": "<p>like if you say \"suppose it just accepts num a\"</p>",
        "id": 491550946,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735788029
    },
    {
        "content": "<p>out loud</p>",
        "id": 491550950,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735788033
    },
    {
        "content": "<p>the listener has to understand that \"a\" means lowercase A</p>",
        "id": 491550955,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735788041
    },
    {
        "content": "<p>so sometimes I'd say like \"suppose it just accepts num lowercase a\"</p>",
        "id": 491550961,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735788050
    },
    {
        "content": "<p>which always felt awkward, and I was hoping to improve on that by being able to say out loud \"suppose it just accepts num star\" and then everyone immediately understands the implications of what you're saying</p>",
        "id": 491551001,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735788076
    },
    {
        "content": "<p>but of course if star is confusing, then that makes it harder to talk about everything with everyone understand what's being said <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 491551068,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735788130
    },
    {
        "content": "<p>I think another downside is that even for some functional programmers it ate up some strangeness budget</p>",
        "id": 491551147,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735788242
    },
    {
        "content": "<p>The way that OCaml does with \"backwards types\" like <code>int option</code></p>",
        "id": 491551240,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735788305
    },
    {
        "content": "<p>bugfix for the issue of wildcards where they dont make sense</p>\n<p><a href=\"https://github.com/roc-lang/roc/pull/7454\">https://github.com/roc-lang/roc/pull/7454</a></p>",
        "id": 491670164,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735854498
    },
    {
        "content": "<p>ugh, implementing the replacement for <code>*</code> in error messages and there's a really annoying edge case:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">my_fn</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"no\">List</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"no\">Str</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"no\">List</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"n\">my_fn</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">list</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">str</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">inner_fn</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">other_list</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">other_list</span><span class=\"o\">.</span><span class=\"n\">len</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"c1\"># ...</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>let's say there's a type mismatch involving <code>inner_fn</code> and the error message needs to print the inferred type of <code>inner_fn</code></p>",
        "id": 526901707,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751505992
    },
    {
        "content": "<p>if the compiler looks at that <code>inner_fn</code> type in isolation, with wildcards we'd infer the type being <code>List(*) -&gt; U64</code></p>",
        "id": 526901766,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751506045
    },
    {
        "content": "<p>but if we don't have that, we have to generate a type variable name to use instead of <code>*</code></p>",
        "id": 526901780,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751506061
    },
    {
        "content": "<p>however, in this case if we generate <code>List(a) -&gt; U64</code>, that would not actually be an unbound type, because the type variable <code>a</code> is in scope (and has a different meaning) because of the outer annotation</p>",
        "id": 526901818,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751506099
    },
    {
        "content": "<p>so we need to instead generate <code>List(b) -&gt; U64</code></p>",
        "id": 526901828,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751506106
    },
    {
        "content": "<p>this is very annoying, because it means you can no longer print types using only the type as the input</p>",
        "id": 526901852,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751506128
    },
    {
        "content": "<p>you also need to know what other type variables are in scope</p>",
        "id": 526901856,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751506133
    },
    {
        "content": "<p>however, that's not something that we persist all the way through to error message generation because it's not ordinarily something that matters</p>",
        "id": 526901891,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751506158
    },
    {
        "content": "<p>in fact there's not ordinarily any way to go from a type mismatch error to figure out what the parent nodes are to re-walk the canonical node tree to figure out what type variables are in scope</p>",
        "id": 526901940,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751506185
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/channel/395097-compiler-development/topic/Remove.20wildcard.20type.20vars.20from.20Roc/near/526901766\">said</a>:</p>\n<blockquote>\n<p>-&gt; U64</p>\n</blockquote>\n<p>In isolation we don't know anything about the types other than a static dispatch call?</p>\n<div class=\"codehilite\"><pre><span></span><code>inner_fn : a -&gt; b where a.len() -&gt; b\n</code></pre></div>",
        "id": 526902016,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751506236
    },
    {
        "content": "<p>sure, whatever - maybe not the perfect example</p>",
        "id": 526902046,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751506265
    },
    {
        "content": "<p>the point is just that if you have an inner function with an unbound type var</p>",
        "id": 526902066,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751506276
    },
    {
        "content": "<p>and there is an outer type in scope which has a type var named like <code>a</code> or something that the auto-generator would collide with</p>",
        "id": 526902095,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751506295
    },
    {
        "content": "<p>it causes this problem, and this problem seems to require a ton of complexity to fix <span aria-label=\"disappointed\" class=\"emoji emoji-1f61e\" role=\"img\" title=\"disappointed\">:disappointed:</span></p>",
        "id": 526902149,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751506338
    },
    {
        "content": "<p>I think I understand the problem now... <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 526902222,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751506409
    },
    {
        "content": "<p>shouldn't the type var for inner fn need to be calculated at some point later on?  And shouldn't it either be concretized or bound to a var from the outer fn?</p>",
        "id": 526902332,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751506512
    },
    {
        "content": "<p>the best solution I've come up with so far is that we keep the scope around long enough so that we still have it when we generate the <code>Problem</code></p>",
        "id": 526902337,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751506516
    },
    {
        "content": "<p>and then right when we're taking a snapshot of the type for the <code>Problem</code>, that's when we auto-generate the names for the variables (instead of doing it later in reporting like we would otherwise)</p>",
        "id": 526902363,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751506544
    },
    {
        "content": "<p>I'm not quite sure how easy it will be to know what's in scope for the mismatched thing, because that might happen during unification, and I'm not sure if the scope will still make sense then, but it's the best idea I have so far <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 526902436,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751506603
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> <a href=\"#narrow/channel/395097-compiler-development/topic/Remove.20wildcard.20type.20vars.20from.20Roc/near/526902332\">said</a>:</p>\n<blockquote>\n<p>shouldn't the type var for inner fn need to be calculated at some point later on?  And shouldn't it either be concretized or bound to a var from the outer fn?</p>\n</blockquote>\n<p>the point is that it doesn't have a name in memory</p>",
        "id": 526902453,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751506619
    },
    {
        "content": "<p>it's just like \"type var number 2439\" or whatever</p>",
        "id": 526902464,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751506628
    },
    {
        "content": "<p>it's easy to render unnamed type vars as <code>*</code> but if we want to give them a name, we need some algorithm to generate a name that's not already taken</p>",
        "id": 526902508,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751506669
    },
    {
        "content": "<p>unless we want to generate <code>_</code> which definitely seems worse because then it's like \"I'm not even telling you what's here; maybe it's an unbound type variable, but who knows? It could be anything!\" <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 526902554,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751506710
    },
    {
        "content": "<p>Hm i'm trying to think what you'd get in other functional languages</p>",
        "id": 526902768,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751506911
    },
    {
        "content": "<p>i'd also need to see the actual full code snippet</p>",
        "id": 526902836,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751506972
    },
    {
        "content": "<p>because i can't see a way where there's a type mismatch in inner_fn here that you wouldn't have a way to fill that type var</p>",
        "id": 526902871,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751507009
    },
    {
        "content": "<p>it's the same problem in Elm and Haskell (if you have the language extension turned on for variables in outer scopes being accessible from inner scopes)</p>",
        "id": 526902945,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751507072
    },
    {
        "content": "<p>Because this seems like something solved by every HM type system</p>",
        "id": 526902948,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751507074
    },
    {
        "content": "<p>I mean I don't know how they solve it in particular, but either they have a solution or they have a bug <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 526902966,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751507091
    },
    {
        "content": "<p>makes me want to open up ellie again</p>",
        "id": 526902987,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751507109
    },
    {
        "content": "<p>does that still exist?  i'm on my phone</p>",
        "id": 526903008,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751507120
    },
    {
        "content": "<p>yeah you should be able to repro it in Elm <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 526903027,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751507122
    },
    {
        "content": "<p>yep!</p>",
        "id": 526903033,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751507127
    },
    {
        "content": "<p>nothing like running elm compiler in haskell compiled to wasm on my iphone</p>",
        "id": 526903067,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751507156
    },
    {
        "content": "<p>it's a bug in Elm</p>\n<p><a href=\"/user_uploads/22008/_vIyYcJ4PoBzP7HajDLEicFY/Screenshot-2025-07-02-at-9.48.01PM.png\">Screenshot 2025-07-02 at 9.48.01 PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/_vIyYcJ4PoBzP7HajDLEicFY/Screenshot-2025-07-02-at-9.48.01PM.png\" title=\"Screenshot 2025-07-02 at 9.48.01 PM.png\"><img data-original-content-type=\"image/png\" data-original-dimensions=\"1782x662\" src=\"/user_uploads/thumbnail/22008/_vIyYcJ4PoBzP7HajDLEicFY/Screenshot-2025-07-02-at-9.48.01PM.png/840x560.webp\"></a></div>",
        "id": 526903218,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751507298
    },
    {
        "content": "<p>it should say <code>List b</code> or something</p>",
        "id": 526903235,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751507314
    },
    {
        "content": "<p>i don't know if that a bug</p>",
        "id": 526903613,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751507657
    },
    {
        "content": "<p>sure it is haha</p>",
        "id": 526903633,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751507675
    },
    {
        "content": "<p>if the outer fn had a regular argument <code>a</code> and the inner one did too (assuming shadowing is allowed), there is no conflict</p>",
        "id": 526903663,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751507713
    },
    {
        "content": "<p>so why is there here with type vars?</p>",
        "id": 526903704,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751507732
    },
    {
        "content": "<p>the type of <code>innerFn</code> is not connected in any way to the type of the outer function</p>",
        "id": 526903725,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751507750
    },
    {
        "content": "<p>but if its argument type contains <code>a</code>, that is saying - in Elm's type system - that they <em>are</em> connected</p>",
        "id": 526903752,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751507769
    },
    {
        "content": "<p>the bug is that it's reporting that there is a more restrictive type on <code>innerFn</code>'s first argument than reality</p>",
        "id": 526903772,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751507789
    },
    {
        "content": "<p>in other words, this error message is saying \"you can only give <code>innerFn</code> a list that's of the same type that you gave the outer function\"</p>",
        "id": 526903795,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751507810
    },
    {
        "content": "<p>which is not true; you can give it any list you like!</p>",
        "id": 526903800,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751507818
    },
    {
        "content": "<p>if it said <code>List b</code> then it would be accurate</p>",
        "id": 526903827,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751507839
    },
    {
        "content": "<p>or really any other name besides exactly <code>a</code></p>",
        "id": 526903837,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751507848
    },
    {
        "content": "<p>but of course that's what it auto-generated, presumably because the auto-generator code was written before Elm added the feature of inner types being able to reference type variables in outer scopes, which if memory serves was around Elm 0.14 or so</p>",
        "id": 526903876,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751507891
    },
    {
        "content": "<p>because I never knew that type system feature existed until I heard about Evan talking about adding it <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 526903908,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751507919
    },
    {
        "content": "<p>example of this distinction being relevant:</p>\n<p><a href=\"/user_uploads/22008/20SYbgeQv7kkDBL-sSsaRwUA/Screenshot-2025-07-02-at-10.02.19PM.png\">Screenshot 2025-07-02 at 10.02.19 PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/20SYbgeQv7kkDBL-sSsaRwUA/Screenshot-2025-07-02-at-10.02.19PM.png\" title=\"Screenshot 2025-07-02 at 10.02.19 PM.png\"><img data-original-content-type=\"image/png\" data-original-dimensions=\"2554x866\" src=\"/user_uploads/thumbnail/22008/20SYbgeQv7kkDBL-sSsaRwUA/Screenshot-2025-07-02-at-10.02.19PM.png/840x560.webp\"></a></div>",
        "id": 526904248,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751508158
    },
    {
        "content": "<p>but if I change it to <code>innerFn listA</code> it compiles just fine</p>",
        "id": 526904258,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751508166
    },
    {
        "content": "<p>because <code>innerFn : List a -&gt; ...</code> is saying that <code>innerFn</code> only accepts lists with the same type of element as the <code>listA</code> argument</p>",
        "id": 526904296,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751508198
    },
    {
        "content": "<p>just to be super clear, this is the edge case to end all edge cases and approximately nobody will notice if it's broken in Roc's compiler, but I still want to do it correctly if we're going to do it <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 526904338,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751508255
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/fgZ-ZPhC5z5V_In5S6pmsA9B/image_067A4BBE-A99A-40FD-ABE9-C5DC74A8E5EB_1751508252.jpeg\">image_067A4BBE-A99A-40FD-ABE9-C5DC74A8E5EB_1751508252.jpeg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/fgZ-ZPhC5z5V_In5S6pmsA9B/image_067A4BBE-A99A-40FD-ABE9-C5DC74A8E5EB_1751508252.jpeg\" title=\"image_067A4BBE-A99A-40FD-ABE9-C5DC74A8E5EB_1751508252.jpeg\"><img data-original-content-type=\"image/jpeg\" data-original-dimensions=\"1290x1229\" src=\"/user_uploads/thumbnail/22008/fgZ-ZPhC5z5V_In5S6pmsA9B/image_067A4BBE-A99A-40FD-ABE9-C5DC74A8E5EB_1751508252.jpeg/840x560.webp\"></a></div>",
        "id": 526904342,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751508256
    },
    {
        "content": "<p>I don't know if OCaml has the feature where inner type annotations can be connected to outer type annotations by using the same variable names though</p>",
        "id": 526904415,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751508312
    },
    {
        "content": "<p>you'd have to try to reproduce that last Ellie screenshot I posted above</p>",
        "id": 526904478,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751508332
    },
    {
        "content": "<p>see if it gives an error; if not, OCaml's type annotations are disconnected (which I <em>think</em> they are?) and that error is not a bug in OCaml</p>",
        "id": 526904513,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751508351
    },
    {
        "content": "<p>i get it now. we are saying List a because it would be List a if that function , unannotated, was on the top level</p>",
        "id": 526904665,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751508478
    },
    {
        "content": "<p>but since it's inside of a scope List(a) MUST mean the a of the outer function if it appears there</p>",
        "id": 526904693,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751508510
    },
    {
        "content": "<p>So the best you could do is capture the next possible type var in that scope and put it in the problem when we create it</p>",
        "id": 526904745,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751508572
    },
    {
        "content": "<p>I now want to see what this scenario looks like in every type system with generics</p>",
        "id": 526904817,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751508641
    },
    {
        "content": "<p>Silly idea ... maybe when we produce error reports and have generated type vars, we use the reverse alphabet, <code>z</code> <code>y</code> <code>x</code> ...</p>",
        "id": 526904848,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751508664
    },
    {
        "content": "<p>Or, prefix it with the name of the function</p>",
        "id": 526904885,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751508689
    },
    {
        "content": "<p>Or use a sigil maybe?</p>",
        "id": 526904889,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751508690
    },
    {
        "content": "<p>it could be <code>inner_a</code></p>",
        "id": 526904901,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751508709
    },
    {
        "content": "<p>Seems reasonable to me</p>",
        "id": 526904929,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751508742
    },
    {
        "content": "<p>we could even note the conflict in the prob and have a note that says \"this is NOT the a from &lt;outer function name&gt;\"</p>",
        "id": 526904981,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751508795
    },
    {
        "content": "<p>I like this solution.</p>\n<p>Only potential issue I can think of is maybe the name it super long and that's kind of annoying. But probably not an issue in practice.</p>",
        "id": 526905122,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751508930
    },
    {
        "content": "<p>I don't think a sigil is a good idea. it would mean you can't copy generated type and paste it to your program with no errors. prefix is better but introduces implicit naming convention. which is not bad, hardly it would be a problem for anyone</p>",
        "id": 526942975,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1751531291
    },
    {
        "content": "<p>I thought of a very simple solution:</p>\n<ul>\n<li>when we're canonicalizing a module, we write down every unique type var name used anywhere in that module in any scope</li>\n<li>when generating unique names, we just make sure to avoid all of those</li>\n</ul>",
        "id": 526999966,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751550152
    },
    {
        "content": "<p>this might lead to the auto-generated variable name being like <code>List(d)</code> when it could have been <code>List(b)</code> but it'll be accurate, and I don't think anyone cares <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 527000086,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751550185
    },
    {
        "content": "<p>had we come up with generated names before?<br>\nI assume generated names could be confusing because one couldn't find them in their code. prefix makes it more explicit</p>",
        "id": 527000390,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1751550277
    },
    {
        "content": "<p>we never needed to come up with generated names before, because we had <code>*</code></p>",
        "id": 527000448,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751550291
    },
    {
        "content": "<p>removing <code>*</code> requires generating names</p>",
        "id": 527000478,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751550299
    },
    {
        "content": "<p>then we never had this kind of confusion</p>",
        "id": 527000524,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1751550309
    },
    {
        "content": "<p>correct</p>",
        "id": 527000534,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751550313
    },
    {
        "content": "<p>a downside of removing <code>*</code> is that it introduces this problem, and this is one of the problems I was hoping to avoid by having <code>*</code> in the language <span aria-label=\"smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 527000607,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751550335
    },
    {
        "content": "<p>however, my conclusion is that overall the downsides of <code>*</code> outweigh the upsides and we should generate names instead (like every other language)</p>",
        "id": 527000666,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751550354
    },
    {
        "content": "<p>prefix does not solve the problem btw</p>",
        "id": 527000676,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751550357
    },
    {
        "content": "<p>if you choose <code>my_fn_a</code> as the name, then that still collides if someone happens to choose <code>my_fn_a</code> as their type variable name</p>",
        "id": 527000774,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751550378
    },
    {
        "content": "<p>and if you're ok with collisions being unlikely, but still possible, then it's definitely best to just have the bug like Elm does, because in practice nobody is going to notice either way <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 527000913,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751550413
    },
    {
        "content": "<p>I agree. I just mean need to communicate generated names somehow. otherwise I anticipate questions like \"what this means? I haven't this name in my code\"</p>",
        "id": 527001034,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1751550439
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/channel/395097-compiler-development/topic/Remove.20wildcard.20type.20vars.20from.20Roc/near/526999966\">said</a>:</p>\n<blockquote>\n<p>I thought of a very simple solution:</p>\n<ul>\n<li>when we're canonicalizing a module, we write down every unique type var name used anywhere in that module in any scope</li>\n<li>when generating unique names, we just make sure to avoid all of those</li>\n</ul>\n</blockquote>\n<p>I'm fine with this very simple solution though <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 527001035,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751550440
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"584248\">Kiryl Dziamura</span> <a href=\"#narrow/channel/395097-compiler-development/topic/Remove.20wildcard.20type.20vars.20from.20Roc/near/527001034\">said</a>:</p>\n<blockquote>\n<p>I agree. I just mean need to communicate generated names somehow. otherwise I anticipate questions about \"what this means? I haven't this name in my code\"</p>\n</blockquote>\n<p>I haven't seen this in other languages which do this</p>",
        "id": 527001128,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751550461
    },
    {
        "content": "<p>lifetimes in rust?</p>",
        "id": 527001178,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1751550473
    },
    {
        "content": "<p>yeah I haven't seen people be confused about that particular aspect of lifetimes <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 527001268,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751550493
    },
    {
        "content": "<p>or like in Elm I haven't seen people say \"hey why is it called <code>a</code> in <code>List a</code> when I don't have an <code>a</code> anywhere in my code?\"</p>",
        "id": 527001340,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751550515
    },
    {
        "content": "<p>or rather, people generally seem to wonder about the semantics</p>",
        "id": 527001432,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751550538
    },
    {
        "content": "<blockquote>\n<p>yeah I haven't seen people be confused about that particular aspect of lifetimes</p>\n</blockquote>\n<p>you're taking with one of them right now :D</p>",
        "id": 527001471,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1751550549
    },
    {
        "content": "<p>I think the SML style of using a, b is an unfortunate thing to propagate</p>",
        "id": 527001508,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751550558
    },
    {
        "content": "<p>what would be a better style?</p>",
        "id": 527001541,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751550567
    },
    {
        "content": "<p>names that mean something <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 527001576,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751550577
    },
    {
        "content": "<p>like List(item)</p>",
        "id": 527001611,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751550587
    },
    {
        "content": "<p>Map(key,value)</p>",
        "id": 527001685,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751550602
    },
    {
        "content": "<p>we could do that in some cases</p>",
        "id": 527001851,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751550647
    },
    {
        "content": "<p>but that would make this problem harder <span aria-label=\"smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 527001868,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751550652
    },
    {
        "content": "<p>like for example, if I define <code>List</code> as <code>List(elem) := ...</code> then we could choose <code>elem</code> as the default unbound var name</p>",
        "id": 527001945,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751550672
    },
    {
        "content": "<p>it doesn't solve this problem, but maybe makes the appearance of a random names from unannotated code easier to deal with</p>",
        "id": 527001948,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751550672
    },
    {
        "content": "<p>actually, we could do like<code>List(elem2)</code> or something</p>",
        "id": 527002011,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751550689
    },
    {
        "content": "<p>might be confusing though? not sure</p>",
        "id": 527002034,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751550698
    },
    {
        "content": "<p>I have a crazy idea</p>",
        "id": 527002035,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1751550698
    },
    {
        "content": "<blockquote>\n<p>actually, we could do like<code>List(elem2)</code> or something</p>\n</blockquote>\n<p>damn, that was my crazy idea</p>",
        "id": 527002092,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1751550712
    },
    {
        "content": "<p>so we extend what type already has in its default name</p>",
        "id": 527002207,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1751550743
    },
    {
        "content": "<p>yeah I'm not sure how it would look in practice, might be weird? I'm not sure</p>",
        "id": 527002284,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751550772
    },
    {
        "content": "<p>I wonder how common this case is</p>",
        "id": 527002454,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1751550814
    },
    {
        "content": "<p>is there a world where * could only exist in problems, with appropriate context when it appears?</p>",
        "id": 527002841,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751550915
    },
    {
        "content": "<p>\"something_else\" lol</p>",
        "id": 527003054,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1751550970
    },
    {
        "content": "<p>or as a sigil after the default type var?</p>\n<p>like:</p>\n<div class=\"codehilite\"><pre><span></span><code>TYPE MISMATCH\nin foo.roc 5:14\n5:   inner_fn(str)\n              ^--\nThis is a\n    `Str`\nbut I was expecting a\n    `List(item*)`\nWhere `item*` is a type variable that has not\nbeen given a name and should not be confused\nwith a type variable `item` in scope\n</code></pre></div>",
        "id": 527004246,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751551246
    },
    {
        "content": "<p>My point is if it expects this type, and I copypaste it in my code - parser won't like it</p>\n<div class=\"codehilite\"><pre><span></span><code>but I was expecting a\n    `List(item*)`\n</code></pre></div>",
        "id": 527004608,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1751551320
    },
    {
        "content": "<p>Do people do that?  And if so do they expect it to work without the understanding that it's not valid syntax?</p>",
        "id": 527004841,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751551372
    },
    {
        "content": "<p>can't say for people, but for me, it's confusing to see invalid syntax even in such reports</p>",
        "id": 527005053,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1751551428
    },
    {
        "content": "<p>I think Richard's approach of just taking the first open type var in the alphabetic sequence is fine</p>",
        "id": 527005261,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751551481
    },
    {
        "content": "<p>Though i still maintain that in the actual definition of types, we should promote the use of meaningful type vars</p>",
        "id": 527005399,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751551511
    },
    {
        "content": "<p>And then the appearance of these single letter type vars (probably starting at a, or close to it) are at least a sign that we just don't know the type for it</p>",
        "id": 527005663,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751551566
    },
    {
        "content": "<p>With a similar note to that above</p>",
        "id": 527005835,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751551603
    },
    {
        "content": "<p>\"Here <code>a</code> is not a named type var, but a valid one to introduce in this scope.\"</p>\n<p>And <code>a</code> could be replaced with any letter</p>\n<p>We could also suggest ways to improve the report</p>",
        "id": 527006249,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751551702
    },
    {
        "content": "<p>do you mind starting a thread for unbound var naming in <a class=\"stream\" data-stream-id=\"304641\" href=\"/#narrow/channel/304641-ideas\">#ideas</a>  ? these single letters are really confusing for beginners (I remember how they confused me previously in other languages)</p>",
        "id": 527006984,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1751551858
    },
    {
        "content": "<p>Start at the beginning of the sequence and look up if it's a type var in this scope, if not, use it.</p>",
        "id": 527007211,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751551901
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> <a href=\"#narrow/channel/395097-compiler-development/topic/Remove.20wildcard.20type.20vars.20from.20Roc/near/527007211\">said</a>:</p>\n<blockquote>\n<p>Start at the beginning of the sequence and look up if it's a type var in this scope, if not, use it.</p>\n</blockquote>\n<p>this is super complicated</p>",
        "id": 527007671,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751552009
    },
    {
        "content": "<p>it's very easy to say and adds an insane amount of complexity to the compiler <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 527007701,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751552018
    },
    {
        "content": "<p>because the scope is gone at the point where we discover the type mismatch</p>",
        "id": 527007744,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751552029
    },
    {
        "content": "<p>and also the type knows which CIR node it came from, but nodes only know their children, not their parents, so it's also hard to walk back up the tree to recreate the scope</p>",
        "id": 527007832,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751552053
    },
    {
        "content": "<p>the straightforward way to do \"look up if it's a type var in this scope\" is \"literally redo all of canonicalization on the file every time we want to generate a type variable\"</p>",
        "id": 527007963,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751552087
    },
    {
        "content": "<p>which would be...suboptimal for compile times <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 527008002,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751552095
    },
    {
        "content": "<p>that's why it's appealing to just build up a list of \"here are all the type variable names we use anywhere in any scope in this module\" as we're doing canonicalization</p>",
        "id": 527008264,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751552155
    },
    {
        "content": "<p>and when we're generating type var names, just make sure they aren't in that list and we're all set</p>",
        "id": 527008310,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751552167
    },
    {
        "content": "<p>no conflicts, guaranteed, minimal complexity, and minimal performance cost</p>",
        "id": 527008357,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751552181
    },
    {
        "content": "<p>as an aside, regarding meaningful type var names - for years I did this in Elm and I honestly have mixed feelings about it in retrospect</p>",
        "id": 527008595,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751552245
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/395097-compiler-development/topic/Remove.20wildcard.20type.20vars.20from.20Roc/near/527008264\">said</a>:</p>\n<blockquote>\n<p>that's why it's appealing to just build up a list of \"here are all the type variable names we use anywhere in any scope in this module\" as we're doing canonicalization</p>\n</blockquote>\n<p>sorry this is exactly what i meant</p>",
        "id": 527008734,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751552283
    },
    {
        "content": "<p>in Elm I would write things this all the time:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">cancelButton</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Html</span><span class=\"w\"> </span><span class=\"nv\">msg</span>\n<span class=\"nv\">cancelButton</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">button</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"nv\">text</span><span class=\"w\"> </span><span class=\"s\">\"Ok\"</span><span class=\"w\">  </span><span class=\"p\">]</span>\n</code></pre></div>",
        "id": 527008799,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751552296
    },
    {
        "content": "<p>send the list with the problem, and do the above at time of rendering the report</p>",
        "id": 527008830,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751552304
    },
    {
        "content": "<p>instead of this:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">cancelButton</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Html</span><span class=\"w\"> </span><span class=\"nv\">a</span>\n<span class=\"nv\">cancelButton</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">button</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"nv\">text</span><span class=\"w\"> </span><span class=\"s\">\"Ok\"</span><span class=\"w\">  </span><span class=\"p\">]</span>\n</code></pre></div>",
        "id": 527008836,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751552305
    },
    {
        "content": "<p>Here's my topic <a href=\"#narrow/stream/304641-ideas/topic/Unbound.20type.20variable.20naming.20conventions/near/527008506\">https://roc.zulipchat.com/#narrow/stream/304641-ideas/topic/Unbound.20type.20variable.20naming.20conventions/near/527008506</a></p>",
        "id": 527008868,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1751552317
    },
    {
        "content": "<p>oh ok I'll re-post there! <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 527008968,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751552335
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/channel/395097-compiler-development/topic/Remove.20wildcard.20type.20vars.20from.20Roc/near/526903218\">said</a>:</p>\n<blockquote>\n<p>it's a bug in Elm</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/channel/395097-compiler-development/topic/Remove.20wildcard.20type.20vars.20from.20Roc/near/526903772\">said</a>:</p>\n<blockquote>\n<p>the bug is that it's reporting that there is a more restrictive type on <code>innerFn</code>'s first argument than reality</p>\n</blockquote>\n<p>Sorry to come late to the party, but this is not what's happening in Elm. The \"a\" in the error message is <strong>not</strong> connected to the \"a\" from the type signature. If you change the type signature to use the type variable \"z\", the error message still says that the first argument of <code>innerFn</code> needs be <code>List a</code>.</p>\n<p>So the \"bug\" is that the Elm compiler doesn't check whether the general type variable \"a\" used in the error message is already defined in the outer scope.</p>",
        "id": 527205971,
        "sender_full_name": "Pit Capitain",
        "timestamp": 1751645683
    },
    {
        "content": "<p>yep, that's the bug! <span aria-label=\"smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 527211383,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751647512
    },
    {
        "content": "<p>it's very niche</p>",
        "id": 527211478,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751647549
    },
    {
        "content": "<p>the reason it's a bug is that what it's saying is not true. It is not true that that value's type is <code>List a</code>, because if that were true, then adding a type annotation of <code>List a</code> to that value would be a no-op because that's already its type</p>",
        "id": 527211650,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751647612
    },
    {
        "content": "<p>but adding that annotation would not be a no-op! It would change the value's type to a more restrictive type.</p>",
        "id": 527211741,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751647647
    },
    {
        "content": "<p>that's why it's inaccurate to claim that <code>List a</code> is that value's type. In the context of that particular value, the type variable <code>a</code> is in scope and has meaning.</p>",
        "id": 527211873,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751647697
    },
    {
        "content": "<p>If the problem comes from not having * and the problem with that is just seeing * is confusing, we could have a keyword \"unbound\" that has the same meaning as *. That would be it's only use.</p>",
        "id": 527330028,
        "sender_full_name": "Norbert Hajagos",
        "timestamp": 1751787839
    },
    {
        "content": "<p>I don't think the character <code>*</code> is the problem</p>",
        "id": 527347688,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751809134
    },
    {
        "content": "<p>I think the problem is the concept</p>",
        "id": 527347697,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751809142
    },
    {
        "content": "<p>like I don't think this will help:</p>\n<div class=\"codehilite\"><pre><span></span><code>&gt;&gt; 1 + 1\n2 : Num(unbound)\n</code></pre></div>",
        "id": 527347714,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751809165
    },
    {
        "content": "<p>Instead of avoiding (just) type variables, what about avoiding _any lowercase_ ident in the module?That's something that's very easy+fast to compute by looking at the tokens (or ast), without any extra work during <code>can</code>.</p>",
        "id": 527352922,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1751814730
    },
    {
        "content": "<p>That also has the advantage of avoiding any confusions a user might possibly have between what's a type variable vs a normal ident.</p>",
        "id": 527353133,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1751814941
    },
    {
        "content": "<p>ah so we just look up whether it's been interned?</p>",
        "id": 527353306,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751815129
    },
    {
        "content": "<p>yeah we could do that!</p>",
        "id": 527353312,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1751815134
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/channel/395097-compiler-development/topic/Remove.20wildcard.20type.20vars.20from.20Roc/near/527347714\">said</a>:</p>\n<blockquote>\n<p>like I don't think this will help:</p>\n<p><div class=\"codehilite\"><pre><span></span><code>&gt;&gt; 1 + 1\n2 : Num(unbound)\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>You're right, it's even a worse first-time experience, because my impression is \"cool, 2 is a bigint\"</p>",
        "id": 527441131,
        "sender_full_name": "Norbert Hajagos",
        "timestamp": 1751881906
    }
]