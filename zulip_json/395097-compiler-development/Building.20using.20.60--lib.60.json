[
    {
        "content": "<p>When we build an app using <code>--lib</code> there is no linking with the host (as far as I know).</p>\n<p>I was just wanting to ask why is it this way? Would it make sense for the linkers to link the prebuilt host if it was available? </p>\n<p>Related question.. if I have an app and I build it using <code>roc build --lib app.roc</code>, can a host built with e.g. rust load that dynamic library and provide implementations for externs like <code>roc_alloc</code>, <code>roc_rx_someEffect</code> etc?</p>",
        "id": 449779148,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720417402
    },
    {
        "content": "<p>Lib generates a shared library that can be loaded dynamically at runtime</p>",
        "id": 449779753,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720417780
    },
    {
        "content": "<p>Used in glue this way for example</p>",
        "id": 449779772,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720417790
    },
    {
        "content": "<p>Would probably be how a game would load a mod written in roc</p>",
        "id": 449779836,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720417807
    },
    {
        "content": "<p>When using <code>--lib</code> you explicitly don't want to link the platform. just generate a shared lib for the platform to use.</p>",
        "id": 449779898,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720417842
    },
    {
        "content": "<blockquote>\n<p>can a host built with e.g. rust load that dynamic library and provide implementations for externs like <code>roc_alloc</code>, <code>roc_rx_someEffect</code> etc?</p>\n</blockquote>\n<p>So yeah, 100%</p>",
        "id": 449779914,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720417859
    },
    {
        "content": "<p>Thank you</p>",
        "id": 449780087,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720417945
    },
    {
        "content": "<p>This said, linkers don't tend to like when a shared library calls into a host app like that. It can be made to work, but often linker cleanup hid symbols you need. That is part of the reason for effect interpreters and passing in explicit allocators. It fixes those linking issues</p>",
        "id": 449780172,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720418012
    },
    {
        "content": "<p>Ohk, that is the piece I'm missing</p>",
        "id": 449780450,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720418172
    },
    {
        "content": "<p>Until we get those up and working, any platform that wants to produce a nice standalone dylib (for e.g. a game engine) will probably need an additional linking step.</p>",
        "id": 449780611,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720418249
    },
    {
        "content": "<p>Ohk -- I still think it make senses to enable a linking step in roc for <code>--lib</code>, even if we have passed in allocators and effect interpreters. </p>\n<p>What if I'm wanting a dylib for a game engine and it expects a particular interface.</p>\n<p>I will still need to link a \"host\" which provides the glue between these two interfaces. </p>\n<p>Without any linking provided by roc, this use case limits the usability for end users. They now have to have a toolchain like <code>zig</code> installed to do this extra linking step. They can't just run <code>roc build</code> and get a thing that fits in the end application.</p>",
        "id": 449781891,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720418765
    },
    {
        "content": "<p>I'm not sure I follow. Any game could be made to open a roc shared library and run it. So I don't think there needs to be an extra set here.</p>",
        "id": 449783920,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720419744
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/395097-compiler-development/topic/Building.20using.20.60--lib.60/near/449781891\">said</a>:</p>\n<blockquote>\n<p>What if I'm wanting a dylib for a game engine and it expects a particular interface.</p>\n<p>I will still need to link a \"host\" which provides the glue between these two interfaces. </p>\n</blockquote>\n<p>Ah yeah, that case specifically is different. You would need a shim of  some sort</p>",
        "id": 449784009,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720419800
    },
    {
        "content": "<p>But I don't think it needs extra linking. I see it as 2 common cases:</p>\n<ol>\n<li>The game/etc is made with the idea of loading roc plugins. So it is the platform and compiles all roc plugins with <code>--lib</code>. Then loads and uses the plugins. Nothing extra needed</li>\n<li>Some game/etc knows nothing of roc but can load plugins compiled as shared libraries. Make a shim shared library that's entire job is to load a roc shared library and deal with communication. Roc still uses <code>--lib</code> no extra link step required. But you do have to build the shim lib.</li>\n</ol>",
        "id": 449784268,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720419946
    },
    {
        "content": "<p>Of course, the shim lib and roc lib could be compiled into a single shared library if really wanted.</p>",
        "id": 449784395,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720420002
    },
    {
        "content": "<p>Yeah this shim library is what I'm thinking of. My thoughts were if roc could link for a lib just like an exe than the experience for end users could be as simple as <code>roc build</code> and they have a thing that's gtg for the (non-roc compatible) game engine.</p>",
        "id": 449784724,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720420153
    },
    {
        "content": "<p>is there an argument for eg a <code>--link-platform</code> flag that could be used in conjunction with <code>--lib</code> to effectively solve the \"I want to use roc to build a library for X\". <code>--lib</code> as it exists today has limited usefullness to an end user because 1) a roc app is not allowed to provide no platform and 2) no other existing projects that consume a shared library uses roc's types. Doesn't it make sense that the platform is the \"shim\" in the case roc is compiled into a shared library? In many cases these \"shims\" will be pretty large.</p>",
        "id": 449784833,
        "sender_full_name": "Ryan Barth",
        "timestamp": 1720420203
    },
    {
        "content": "<p>Using <code>roc build</code> to compile statically linked executable is a pretty well solved problem. The other use cases are less well supported.</p>",
        "id": 449785333,
        "sender_full_name": "Ryan Barth",
        "timestamp": 1720420435
    },
    {
        "content": "<p>I think one of the next logical steps to let roc integrate with the existing ecosystem is to provide a good story for building shared libraries.</p>",
        "id": 449785779,
        "sender_full_name": "Ryan Barth",
        "timestamp": 1720420596
    },
    {
        "content": "<p>The tooling for building shared libraries is complex for Roc's apparent target audience (myself included). Can roc provide a better experience? Let the platform devs assume the complexity for some of the larger ecosystems where roc could be embedded. Then users just need to write their roc \"app\" and they get a high level, performant integration with a dead simple interface.</p>",
        "id": 449786770,
        "sender_full_name": "Ryan Barth",
        "timestamp": 1720420970
    },
    {
        "content": "<p>I don't think it even needs a flag</p>",
        "id": 449787682,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720421372
    },
    {
        "content": "<p>Should be part of the platform header</p>",
        "id": 449787693,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720421382
    },
    {
        "content": "<p>Cause a platform knows how it wants roc to compile</p>",
        "id": 449787719,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720421396
    },
    {
        "content": "<p>You are 100% right</p>",
        "id": 449787789,
        "sender_full_name": "Ryan Barth",
        "timestamp": 1720421414
    },
    {
        "content": "<p>Shared lib, static lib, or full app</p>",
        "id": 449787793,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720421418
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/395097-compiler-development/topic/Building.20using.20.60--lib.60/near/449787693\">said</a>:</p>\n<blockquote>\n<p>Should be part of the platform header</p>\n</blockquote>\n<p>This isn't how we do things rn. </p>\n<p>What do we need to add to enable this kind of thing?</p>",
        "id": 449788120,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720421570
    },
    {
        "content": "<p>I've been looking at the build pipeline, and this could be a good change to make</p>",
        "id": 449788192,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720421601
    },
    {
        "content": "<p>Like maybe some kind of data structure that could specify default build arguments? </p>\n<p>I've got some ideas, I moght sketch something up</p>",
        "id": 449788612,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720421793
    },
    {
        "content": "<p>Yeah, just some extra fields in the header. They could specify both the roc expected output as well as the location where the host compilation objects will be located. Then when roc bundles (or local path builds), it can follow that path to grab the expected objects.</p>",
        "id": 449906531,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720452947
    },
    {
        "content": "<p>No need for all of the output files to be shoved on the platform folder. They can just live in zig out or rust target dir</p>",
        "id": 449906708,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1720452985
    },
    {
        "content": "<p>I didn't get around to writing up my idea in much detail.</p>\n<p>Basically, I was thinking the cli has all this functionality to build an app using different options/flags etc. The platform can provide some kind of data structure which instructs the cli what to do for the default build. </p>\n<p>Indeed, to clean-up the cli build pipeline I think it would help to have some kind of intermediate representation of the build instruction anyway. Take the cli flags and produce a similar kind of data structure which is then used to <code>roc run</code>, <code>roc build</code>, <code>roc dev</code> etc. I.e. do we expect a prebuilt host, where is it, or maybe we are just producing a standalone object instead; do we need to link, using which linker, etc...</p>",
        "id": 450001903,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1720480119
    }
]