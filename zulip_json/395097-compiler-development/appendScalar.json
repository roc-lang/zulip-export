[
    {
        "content": "<p>So I know that we removed <code>Str.appendScalar</code>. Now you have to do something like this: </p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toUtf8</span><span class=\"w\"> </span><span class=\"nv\">string</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">append</span><span class=\"w\"> </span><span class=\"nv\">byte</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">fromUtf8</span>\n</code></pre></div>\n<p>Do we think this will be at all common? If so, we should consider how this can be done with better performance. This version has a pretty large cost compared to the old <code>Str.appendScalar</code>. This require an allocation for all small strings. Cause there is no small list optimization. On top of that, it will recheck the entire utf8 instead of just checking the very last byte.</p>",
        "id": 418706284,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706556887
    },
    {
        "content": "<p>In fact, it would be better to do:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">bytesStr</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">fromUtf8</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">byte</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">try</span>\n<span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">concat</span><span class=\"w\"> </span><span class=\"nv\">string</span><span class=\"w\"> </span><span class=\"nv\">byteStr</span>\n</code></pre></div>\n<p>But I don't think many users would think of that. It also still requires allocating unnecessarily. Cause you allocate a list with a single byte just to make it into a small string and deallocate it. Of course, this will be a big perf win for large strings cause you are only checking 1 byte is valid utf8, not rechecking the entire string.</p>",
        "id": 418706897,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706557103
    },
    {
        "content": "<p>yeah so my hypothesis is that in practice if you want something like that, you probably want to be working directly with <code>List U8</code> and not <code>Str</code> anyway</p>",
        "id": 418713147,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1706559555
    },
    {
        "content": "<p>and if someone encounters a specific use case where that turns out not to be the case, we can discuss!</p>",
        "id": 418713173,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1706559571
    }
]