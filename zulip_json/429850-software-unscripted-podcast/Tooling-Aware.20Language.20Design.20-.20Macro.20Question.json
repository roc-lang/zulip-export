[
    {
        "content": "<p>On the latest podcast, I heard Richard say that macros can hurt editor functionality. The example given was for Rust string interpolation not having type information or renaming things in interpolations. Is this just a result of the Rust implementation? Lean 4 supports arbitrary expressions inside interpolated strings,  each part of the expression has its type displayed in the editor, and also supports renames. Lean has an extremely extensive macro system though and I'm not familiar with how Rust macros work under the hood.</p>",
        "id": 464699810,
        "sender_full_name": "Der Schutz",
        "timestamp": 1724433619
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"733628\">Der Schutz</span> <a href=\"#narrow/stream/429850-Software-Unscripted-Podcast/topic/Tooling-Aware.20Language.20Design.20-.20Macro.20Question/near/464699810\">said</a>:</p>\n<blockquote>\n<p>Lean 4 supports arbitrary expressions inside interpolated strings,  each part of the expression has its type displayed in the editor, and also supports renames. Lean has an extremely extensive macro system though and I'm not familiar with how Rust macros work under the hood.</p>\n</blockquote>\n<p>it looks like string interpolation is a first-class language feature in Lean 4: <a href=\"https://lean-lang.org/lean4/doc/stringinterp.html\">https://lean-lang.org/lean4/doc/stringinterp.html</a></p>",
        "id": 464702956,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724434259
    },
    {
        "content": "<p>I don't know Lean 4, but based on the outline in that section, it looks like it's a separate \"syntax extension\" from macros, which have their own entry:</p>\n<p><a href=\"/user_uploads/22008/8ydMC6FfZNCKs2-sw-kQvs5F/Screenshot-2024-08-23-at-1.31.23PM.png\">Screenshot-2024-08-23-at-1.31.23PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/8ydMC6FfZNCKs2-sw-kQvs5F/Screenshot-2024-08-23-at-1.31.23PM.png\" title=\"Screenshot-2024-08-23-at-1.31.23PM.png\"><img data-original-dimensions=\"420x288\" src=\"/user_uploads/thumbnail/22008/8ydMC6FfZNCKs2-sw-kQvs5F/Screenshot-2024-08-23-at-1.31.23PM.png/840x560.webp\"></a></div>",
        "id": 464703159,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724434308
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/429850-Software-Unscripted-Podcast/topic/Tooling-Aware.20Language.20Design.20-.20Macro.20Question/near/464702956\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"733628\">Der Schutz</span> <a href=\"#narrow/stream/429850-Software-Unscripted-Podcast/topic/Tooling-Aware.20Language.20Design.20-.20Macro.20Question/near/464699810\">said</a>:</p>\n<blockquote>\n<p>Lean 4 supports arbitrary expressions inside interpolated strings,  each part of the expression has its type displayed in the editor, and also supports renames. Lean has an extremely extensive macro system though and I'm not familiar with how Rust macros work under the hood.</p>\n</blockquote>\n<p>it looks like string interpolation is a first-class language feature in Lean 4: <a href=\"https://lean-lang.org/lean4/doc/stringinterp.html\">https://lean-lang.org/lean4/doc/stringinterp.html</a></p>\n</blockquote>\n<p>The macro is implemented in Lean itself (the implementation is here: <a href=\"https://github.com/leanprover/lean4/blob/edecf3d4baa30ef9a74d6af78a754d88c30b4386/src/Init/Meta.lean#L1264\">https://github.com/leanprover/lean4/blob/edecf3d4baa30ef9a74d6af78a754d88c30b4386/src/Init/Meta.lean#L1264</a> ) and <a href=\"https://github.com/leanprover/lean4/blob/edecf3d4baa30ef9a74d6af78a754d88c30b4386/src/Init/Data/ToString/Macro.lean#L12\">https://github.com/leanprover/lean4/blob/edecf3d4baa30ef9a74d6af78a754d88c30b4386/src/Init/Data/ToString/Macro.lean#L12</a> . So there isn't anything special other than that it's already implemented for you. Also Lean has a configuration file DSL where its still a .lean file but the syntax is custom and you get renaming/hover type info/autocompletion. I'm not too sure how that DSL works implementation wise though. But all of this stuff can be implemented in user-land.</p>\n<p>Here is an example of the config file DSL, without opening Lake DSL, this would error out because the syntax isn't \"valid\" Lean syntax. But you still get autocomplete, type info, and other stuff even though the syntax is \"made-up\". This is up to the macro author to implement however: <a href=\"https://github.com/leanprover/lean4/blob/390a9a63a24ca28306a60faa0381d4292d23af95/src/lake/examples/targets/lakefile.lean#L1\">https://github.com/leanprover/lean4/blob/390a9a63a24ca28306a60faa0381d4292d23af95/src/lake/examples/targets/lakefile.lean#L1</a></p>",
        "id": 464721235,
        "sender_full_name": "Der Schutz",
        "timestamp": 1724439403
    },
    {
        "content": "<p>If the language provides the right API's to authors, then you can have a good editor experience. That being said though, macros are super powerful. I don't think they should be shoved into the language just because, even if having a good editor experience is not one of the main reasons.</p>",
        "id": 464724084,
        "sender_full_name": "Der Schutz",
        "timestamp": 1724440320
    },
    {
        "content": "<p>cool, TIL! do you know if the editor tooling works just as well with macros defined in userspace?</p>",
        "id": 464734899,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724443546
    },
    {
        "content": "<p>(in other words, is the tooling specific to interpolation because it knows how it's implemented, or just as effective with any arbitrary macro)</p>",
        "id": 464735091,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724443601
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/429850-Software-Unscripted-Podcast/topic/Tooling-Aware.20Language.20Design.20-.20Macro.20Question/near/464734899\">said</a>:</p>\n<blockquote>\n<p>cool, TIL! do you know if the editor tooling works just as well with macros defined in userspace?</p>\n</blockquote>\n<p>I'm definitely not the person to ask because I mainly use the macros rather than make them myself. But for interpolation, a user could implement the exact same thing with the same level of tooling. However the macro author has to write the tooling for the macro itself to some extent. Some of it is automatically handled based off the implementation, and I believe it displays the doc comment for the specific <code>Syntax</code> node on hover for a given <code>Parser</code>. You can also add pretty printing so that it doesn't just print the elaborated form only. toString is carrying here, but this works fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean4\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span><span class=\"w\"> </span><span class=\"n\">Lean</span><span class=\"w\"> </span><span class=\"n\">Elab</span><span class=\"w\"> </span><span class=\"n\">Term</span><span class=\"w\"> </span><span class=\"n\">Meta</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">A simple string interpolation macro.</span>\n<span class=\"sd\">Usage: `str_interp!{expression}`</span>\n<span class=\"sd\">The expression is evaluated and converted to a string.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kn\">syntax</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">strInterp</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"s2\">\"str_interp!{\"</span><span class=\"w\"> </span><span class=\"n\">term</span><span class=\"w\"> </span><span class=\"s2\">\"}\"</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">term</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">macro</span><span class=\"w\"> </span><span class=\"n\">strInterp</span><span class=\"kd\">]</span>\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">expandStrInterp</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Macro</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">str_interp!</span><span class=\"o\">{</span><span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">})</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">    </span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">toString</span><span class=\"w\"> </span><span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"bp\">|</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"bp\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Macro</span><span class=\"bp\">.</span><span class=\"n\">throwUnsupported</span>\n\n<span class=\"kn\">def</span><span class=\"w\"> </span><span class=\"n\">example1</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">str_interp!</span><span class=\"o\">{</span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"bp\">+</span><span class=\"w\"> </span><span class=\"n\">factorial</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>Hovering over <code>str_interp</code>displays the type <code>String</code> and the doc comment above the strInterp syntax. Can hover over any sub-expressions (including if they're nested) and see its type. I can rename factorial and it will rename it within the string interpolation. I just made a vec! macro (turns <code>vec![]</code> into an List type) also to see if it preserves sub-expression types automatically on hover and it does. This is my first time implementing a macro in their system though as trying to read some of the macro/parser implementations is like voodoo for me.</p>",
        "id": 464761885,
        "sender_full_name": "Der Schutz",
        "timestamp": 1724456541
    },
    {
        "content": "<p>I was trying to see if I have a custom expression type if it would let me rename automatically and it won't, which makes sense. Maybe there is some LSP API you could hook into to tell it how to work with that, but no clue.</p>",
        "id": 464764651,
        "sender_full_name": "Der Schutz",
        "timestamp": 1724458169
    },
    {
        "content": "<p>Hi there Richard,<br>\nJust wanted to say I'm really enjoying this podcast! It's a great idea to garner interest for roc and I'm looking forward to giving this language a go. <br>\nThank you and all the best!</p>",
        "id": 476856224,
        "sender_full_name": "Greg",
        "timestamp": 1728942839
    },
    {
        "content": "<p>thanks so much, and glad you're enjoying it! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 476860769,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1728945980
    }
]