[
    {
        "content": "<p>Can I stack trace this somehow?</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">main!</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"ss\">cli</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">platform</span><span class=\"w\"> </span><span class=\"s2\">\"https://github.com/roc-lang/basic-cli/releases/download/0.19.0/Hj-J_zxz7V9YurCSTFcFdu6cQJie4guzsPMUi5kBYUk.tar.br\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">cli</span><span class=\"o\">.</span><span class=\"n\">Stdout</span>\n\n<span class=\"n\">main!</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">_args</span><span class=\"o\">|</span>\n<span class=\"w\">    </span><span class=\"no\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line!</span><span class=\"p\">(</span><span class=\"s2\">\"ignore me\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">expect</span>\n<span class=\"w\">    </span><span class=\"n\">actual</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">.</span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">.</span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">actual</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">expected</span>\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>$ roc test repro.roc\nSegmentation fault (core dumped)\n$\n</code></pre></div>",
        "id": 508919676,
        "sender_full_name": "jan kili",
        "timestamp": 1743252609
    },
    {
        "content": "<ul>\n<li>The test passes normally if I change <code>==</code> to <code>!=</code>.</li>\n<li>The test passes normally if I change them to the same float.</li>\n<li>The test also segfaults if I do both of those things.</li>\n</ul>",
        "id": 508919764,
        "sender_full_name": "jan kili",
        "timestamp": 1743252716
    },
    {
        "content": "<ul>\n<li>All 4 scenarios above pass/fail normally if I change them to integers.</li>\n</ul>",
        "id": 508919861,
        "sender_full_name": "jan kili",
        "timestamp": 1743252802
    },
    {
        "content": "<p>I'm on Debian 12 &amp; Intel i5, with</p>\n<div class=\"codehilite\"><pre><span></span><code>$ roc version\nroc nightly pre-release, built from commit 3da0934 on Di 04 Mär 2025 09:02:06 UTC\n$\n</code></pre></div>",
        "id": 508920232,
        "sender_full_name": "jan kili",
        "timestamp": 1743253089
    },
    {
        "content": "<ul>\n<li>The test fails normally if I one-line it to <code>expect 1.0 == 2.0</code></li>\n</ul>",
        "id": 508920658,
        "sender_full_name": "jan kili",
        "timestamp": 1743253444
    },
    {
        "content": "<ul>\n<li>The tests also segfault if I change the def names to <code>a</code> &amp; <code>b</code>.</li>\n</ul>",
        "id": 508920989,
        "sender_full_name": "jan kili",
        "timestamp": 1743253698
    },
    {
        "content": "<p>Most surprising scenario yet:</p>\n<ul>\n<li>The test fails normally with only one of the two defs:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">expect</span>\n<span class=\"w\">    </span><span class=\"n\">actual</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">.</span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">actual</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">.</span><span class=\"mi\">0</span>\n\n<span class=\"n\">expect</span>\n<span class=\"w\">    </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">.</span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"o\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">expected</span>\n</code></pre></div>",
        "id": 508921069,
        "sender_full_name": "jan kili",
        "timestamp": 1743253784
    },
    {
        "content": "<p>Another fun one:</p>\n<ul>\n<li>The test also segfaults with any two defs</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">expect</span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">.</span><span class=\"mi\">5</span>\n<span class=\"w\">    </span><span class=\"n\">actual</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">foo</span>\n<span class=\"w\">    </span><span class=\"n\">actual</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">.</span><span class=\"mi\">0</span>\n</code></pre></div>\n<p>(but not if I delete foo and make <code>actual = 2 * 0.5</code>)</p>",
        "id": 508921320,
        "sender_full_name": "jan kili",
        "timestamp": 1743254010
    },
    {
        "content": "<p><strong><em>Okay, I think I've isolated the behavior - it seems to be if a failing test has more than one def where one is a float.</em></strong></p>\n<p>This segfaults:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">expect</span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">.</span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"2.0\"</span>\n<span class=\"w\">    </span><span class=\"no\">Num</span><span class=\"o\">.</span><span class=\"n\">to_str</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">bar</span>\n</code></pre></div>",
        "id": 508921693,
        "sender_full_name": "jan kili",
        "timestamp": 1743254306
    },
    {
        "content": "<p>But this fails normally:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">expect</span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">.</span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"no\">Num</span><span class=\"o\">.</span><span class=\"n\">to_str</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s2\">\"2.0\"</span>\n</code></pre></div>",
        "id": 508921794,
        "sender_full_name": "jan kili",
        "timestamp": 1743254403
    },
    {
        "content": "<p>Hmm, I can not reproduce on Ubuntu 24.04 with the same commit, but let me try the actual release.</p>",
        "id": 508926533,
        "sender_full_name": "Anton",
        "timestamp": 1743258048
    },
    {
        "content": "<p>Ok, it does happen with the actual release</p>",
        "id": 508926756,
        "sender_full_name": "Anton",
        "timestamp": 1743258221
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>❯ valgrind ./roc test jantemp.roc --linker=legacy\n==40714== Memcheck, a memory error detector\n==40714== Copyright (C) 2002-2022, and GNU GPL&#39;d, by Julian Seward et al.\n==40714== Using Valgrind-3.22.0 and LibVEX; rerun with -h for copyright info\n==40714== Command: ./roc test jantemp.roc --linker=legacy\n==40714==\n==40714== Warning: set address range perms: large range [0x27592000000, 0x275d2000000) (defined)\n</code></pre></div>",
        "id": 508926968,
        "sender_full_name": "Anton",
        "timestamp": 1743258379
    },
    {
        "content": "<p>Valgrind is taking a long time...</p>",
        "id": 508926989,
        "sender_full_name": "Anton",
        "timestamp": 1743258401
    },
    {
        "content": "<p>I have only seen \"<code>Warning: set address range perms: large range</code>\" <a href=\"https://github.com/roc-lang/roc/issues/5634\">once</a> so I do expect that is related to the segfault.</p>",
        "id": 508927760,
        "sender_full_name": "Anton",
        "timestamp": 1743258992
    },
    {
        "content": "<p>I need to build a debug version of basic-cli to prevent valgrind from giving me all <code>???</code></p>",
        "id": 508928123,
        "sender_full_name": "Anton",
        "timestamp": 1743259298
    },
    {
        "content": "<p>Right, the <code>???</code> refer to things inside the Roc binary, not basic-cli</p>",
        "id": 508931104,
        "sender_full_name": "Anton",
        "timestamp": 1743261317
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>❯ valgrind roc test examples/hello-world.roc --linker=legacy\n==46699== Memcheck, a memory error detector\n==46699== Copyright (C) 2002-2022, and GNU GPL&#39;d, by Julian Seward et al.\n==46699== Using Valgrind-3.22.0 and LibVEX; rerun with -h for copyright info\n==46699== Command: roc test examples/hello-world.roc --linker=legacy\n==46699==\n==46699== Warning: set address range perms: large range [0x3692a000000, 0x3696a000000) (defined)\n==46699== Conditional jump or move depends on uninitialised value(s)\n==46699==    at 0xDC73EC: ??? (in /home/username/Downloads/temp3/roc_nightly-linux_x86_64-2025-03-04-3da0934/roc)\n==46699==    by 0xDC8D6F: ??? (in /home/username/Downloads/temp3/roc_nightly-linux_x86_64-2025-03-04-3da0934/roc)\n==46699==    by 0xDBFBB8: ??? (in /home/username/Downloads/temp3/roc_nightly-linux_x86_64-2025-03-04-3da0934/roc)\n==46699==    by 0xDBC6CD: ??? (in /home/username/Downloads/temp3/roc_nightly-linux_x86_64-2025-03-04-3da0934/roc)\n==46699==    by 0xD562D7: ??? (in /home/username/Downloads/temp3/roc_nightly-linux_x86_64-2025-03-04-3da0934/roc)\n==46699==    by 0x996EFB: ??? (in /home/username/Downloads/temp3/roc_nightly-linux_x86_64-2025-03-04-3da0934/roc)\n==46699==    by 0x83B55F: ??? (in /home/username/Downloads/temp3/roc_nightly-linux_x86_64-2025-03-04-3da0934/roc)\n==46699==    by 0x82E182: ??? (in /home/username/Downloads/temp3/roc_nightly-linux_x86_64-2025-03-04-3da0934/roc)\n==46699==    by 0x82E1A2: ??? (in /home/username/Downloads/temp3/roc_nightly-linux_x86_64-2025-03-04-3da0934/roc)\n==46699==    by 0x1423A69: ??? (in /home/username/Downloads/temp3/roc_nightly-linux_x86_64-2025-03-04-3da0934/roc)\n==46699==    by 0x843744: ??? (in /home/username/Downloads/temp3/roc_nightly-linux_x86_64-2025-03-04-3da0934/roc)\n==46699==    by 0x5EB11C9: (below main) (libc_start_call_main.h:58)\n==46699==\n...\n==46699== Conditional jump or move depends on uninitialised value(s)\n==46699==    at 0x733001: ??? (in /home/username/Downloads/temp3/roc_nightly-linux_x86_64-2025-03-04-3da0934/roc)\n==46699==    by 0x751339: ??? (in /home/username/Downloads/temp3/roc_nightly-linux_x86_64-2025-03-04-3da0934/roc)\n==46699==    by 0x75049C: ??? (in /home/username/Downloads/temp3/roc_nightly-linux_x86_64-2025-03-04-3da0934/roc)\n==46699==    by 0x722319: ??? (in /home/username/Downloads/temp3/roc_nightly-linux_x86_64-2025-03-04-3da0934/roc)\n==46699==    by 0x74C06B: ??? (in /home/username/Downloads/temp3/roc_nightly-linux_x86_64-2025-03-04-3da0934/roc)\n==46699==    by 0x73FDFA: ??? (in /home/username/Downloads/temp3/roc_nightly-linux_x86_64-2025-03-04-3da0934/roc)\n==46699==    by 0xBBE21E: ??? (in /home/username/Downloads/temp3/roc_nightly-linux_x86_64-2025-03-04-3da0934/roc)\n==46699==    by 0xBF6EB1: ??? (in /home/username/Downloads/temp3/roc_nightly-linux_x86_64-2025-03-04-3da0934/roc)\n==46699==    by 0xBF5A1B: ??? (in /home/username/Downloads/temp3/roc_nightly-linux_x86_64-2025-03-04-3da0934/roc)\n==46699==    by 0x10F78AF: ??? (in /home/username/Downloads/temp3/roc_nightly-linux_x86_64-2025-03-04-3da0934/roc)\n==46699==    by 0x997889: ??? (in /home/username/Downloads/temp3/roc_nightly-linux_x86_64-2025-03-04-3da0934/roc)\n==46699==    by 0x83B55F: ??? (in /home/username/Downloads/temp3/roc_nightly-linux_x86_64-2025-03-04-3da0934/roc)\n==46699==\n==46699==\n==46699== Process terminating with default action of signal 11 (SIGSEGV)\n==46699==  General Protection Fault\n==46699==    at 0x10F9DF8: ??? (in /home/username/Downloads/temp3/roc_nightly-linux_x86_64-2025-03-04-3da0934/roc)\n==46699==    by 0x94F8EE: ??? (in /home/username/Downloads/temp3/roc_nightly-linux_x86_64-2025-03-04-3da0934/roc)\n==46699==    by 0x9989EB: ??? (in /home/username/Downloads/temp3/roc_nightly-linux_x86_64-2025-03-04-3da0934/roc)\n==46699==    by 0x83B55F: ??? (in /home/username/Downloads/temp3/roc_nightly-linux_x86_64-2025-03-04-3da0934/roc)\n==46699==    by 0x82E182: ??? (in /home/username/Downloads/temp3/roc_nightly-linux_x86_64-2025-03-04-3da0934/roc)\n==46699==    by 0x82E1A2: ??? (in /home/username/Downloads/temp3/roc_nightly-linux_x86_64-2025-03-04-3da0934/roc)\n==46699==    by 0x1423A69: ??? (in /home/username/Downloads/temp3/roc_nightly-linux_x86_64-2025-03-04-3da0934/roc)\n==46699==    by 0x843744: ??? (in /home/username/Downloads/temp3/roc_nightly-linux_x86_64-2025-03-04-3da0934/roc)\n==46699==    by 0x5EB11C9: (below main) (libc_start_call_main.h:58)\n==46699==\n==46699== HEAP SUMMARY:\n==46699==     in use at exit: 332,318 bytes in 2,248 blocks\n==46699==   total heap usage: 203,901 allocs, 201,653 frees, 56,084,245 bytes allocated\n==46699==\n==46699== LEAK SUMMARY:\n==46699==    definitely lost: 0 bytes in 0 blocks\n==46699==    indirectly lost: 0 bytes in 0 blocks\n==46699==      possibly lost: 3,584 bytes in 5 blocks\n==46699==    still reachable: 328,734 bytes in 2,243 blocks\n==46699==         suppressed: 0 bytes in 0 blocks\n==46699== Rerun with --leak-check=full to see details of leaked memory\n==46699==\n==46699== Use --track-origins=yes to see where uninitialised values come from\n==46699== For lists of detected and suppressed errors, rerun with: -s\n==46699== ERROR SUMMARY: 561 errors from 22 contexts (suppressed: 0 from 0)\nSegmentation fault (core dumped)\n</code></pre></div>",
        "id": 508931182,
        "sender_full_name": "Anton",
        "timestamp": 1743261368
    },
    {
        "content": "<p>Valgrind is taking forever...</p>",
        "id": 508935061,
        "sender_full_name": "Anton",
        "timestamp": 1743264510
    },
    {
        "content": "<p>You could try <code>--profiling</code></p>",
        "id": 508935312,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743264699
    },
    {
        "content": "<p>I can't run the produced binary standalone because I need the expects to run so I think <code>--profiling</code> will not help here?</p>",
        "id": 508937523,
        "sender_full_name": "Anton",
        "timestamp": 1743266060
    },
    {
        "content": "<p>Ah....hmm</p>",
        "id": 508939073,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743266765
    },
    {
        "content": "<p>You could try putting the expect in a main function and then compiling a debug build?</p>",
        "id": 508939085,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743266781
    },
    {
        "content": "<p>Cause expects run in debug builds</p>",
        "id": 508939094,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743266793
    },
    {
        "content": "<p>I believe all expects <a href=\"https://github.com/roc-lang/roc/blob/ec16ba9837b37a4bfb17011ab2b4863897cf9f2f/crates/cli/src/lib.rs#L1416\">require the roc compiler</a>, and if the roc compiler is involved it will be slow on valgrind. But anyway valgrind is done, I just need to try building a debug nightly on the typical CI machine so I can both reproduce the segfault and clear up the <code>???</code>.</p>",
        "id": 508942116,
        "sender_full_name": "Anton",
        "timestamp": 1743269034
    },
    {
        "content": "<p>Hmm...maybe. I forget the state</p>",
        "id": 508943004,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743269753
    },
    {
        "content": "<p>Alright, I got some useful valgrind output:<br>\n<a href=\"/user_uploads/22008/bAnCyfH3GimChkoqPDkfIFbX/nice_valgrind_output.txt\">nice_valgrind_output.txt</a></p>",
        "id": 508945897,
        "sender_full_name": "Anton",
        "timestamp": 1743272056
    },
    {
        "content": "<p>I didn't need the CI machine, all I needed to reproduce locally was building roc with:</p>\n<div class=\"codehilite\"><pre><span></span><code> RUSTFLAGS=&quot;-C target-cpu=x86-64&quot; cargo build --profile=release-with-lto --bin roc\n</code></pre></div>",
        "id": 508945949,
        "sender_full_name": "Anton",
        "timestamp": 1743272133
    },
    {
        "content": "<p>We are reading the shared memory wrong</p>",
        "id": 508946074,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743272262
    },
    {
        "content": "<p>Must be getting a pointer that is pointing to total garbage as a result</p>",
        "id": 508946085,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743272276
    },
    {
        "content": "<p>I would probably label this as a won't fix (kinda).</p>",
        "id": 508946133,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743272287
    },
    {
        "content": "<p>We want to rip out that system</p>",
        "id": 508946143,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743272297
    },
    {
        "content": "<p>We already did so for <code>dbg</code>, but we have not done so for <code>expect</code>.</p>",
        "id": 508946151,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743272310
    },
    {
        "content": "<p>It has a number of bugs.</p>",
        "id": 508946158,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743272318
    },
    {
        "content": "<p>Also, relevant stack trace snippet:</p>\n<div class=\"codehilite\"><pre><span></span><code>==92315== Process terminating with default action of signal 11 (SIGSEGV)\n==92315==  General Protection Fault\n==92315==    at 0x119F1E8: roc_repl_expect::get_values (in /home/username/gitrepos/roc/target/release-with-lto/roc)\n==92315==    by 0x9F4C8E: roc_repl_expect::run::render_expect_failure (in /home/username/gitrepos/roc/target/release-with-lto/roc)\n==92315==    by 0xA3DDDB: roc_cli::test (in /home/username/gitrepos/roc/target/release-with-lto/roc)\n==92315==    by 0x8E090F: roc::main (in /home/username/gitrepos/roc/target/release-with-lto/roc)\n==92315==    by 0x8D3532: std::sys_common::backtrace::__rust_begin_short_backtrace (in /home/username/gitrepos/roc/target/release-with-lto/roc)\n==92315==    by 0x8D3552: std::rt::lang_start::{{closure}} (in /home/username/gitrepos/roc/target/release-with-lto/roc)\n==92315==    by 0x14C8E59: std::rt::lang_start_internal (in /home/username/gitrepos/roc/target/release-with-lto/roc)\n==92315==    by 0x8E8AF4: main (in /home/username/gitrepos/roc/target/release-with-lto/roc)\n</code></pre></div>",
        "id": 508946203,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743272371
    },
    {
        "content": "<p>Stack trace acquired! Thanks for debugging, y'all. I understand the wontfix during the compiler rewrite.</p>",
        "id": 509041392,
        "sender_full_name": "jan kili",
        "timestamp": 1743350287
    },
    {
        "content": "<p>Note to self - avoid using float defs in <code>expect</code>s.</p>",
        "id": 509041434,
        "sender_full_name": "jan kili",
        "timestamp": 1743350332
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"462053\">JanCVanB</span> has marked this topic as resolved.</p>",
        "id": 509041451,
        "sender_full_name": "Notification Bot",
        "timestamp": 1743350353
    },
    {
        "content": "<p>I've made a general issue for this problem <a href=\"https://github.com/roc-lang/roc/issues/7799\">#7799</a></p>",
        "id": 519090255,
        "sender_full_name": "Anton",
        "timestamp": 1747656762
    }
]