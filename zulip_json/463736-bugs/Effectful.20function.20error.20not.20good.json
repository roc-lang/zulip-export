[
    {
        "content": "<p>This error is pretty bad. Very hard to realize what is wrong. Took me a while before I noticed the difference:</p>\n<div class=\"codehilite\"><pre><span></span><code>The argument is an anonymous function of type:\n\n    { … }, Str =&gt; { … }\n\nBut walk needs its 3rd argument to be:\n\n    { … }, Str -&gt; { … }\n</code></pre></div>",
        "id": 491114285,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735414029
    },
    {
        "content": "<p>We should make this message clearer somehow</p>",
        "id": 491114297,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735414049
    },
    {
        "content": "<p>Explicitly state the function is effectful but the caller requires the function to be pure.</p>",
        "id": 491114318,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735414078
    },
    {
        "content": "<p>Sounds like we need two changes</p>\n<ul>\n<li>add List.walk!</li>\n<li>get a repro and add a GH issue</li>\n</ul>",
        "id": 491115894,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735415573
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> do you have the full code? I'm happy to reduce to a repro</p>",
        "id": 491115914,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735415603
    },
    {
        "content": "<p><code>roc check</code> on this:</p>\n<div class=\"codehilite\"><pre><span></span><code>app [main!] { pf: platform &quot;../platform/main.roc&quot; }\n\nimport pf.Stdout\nimport pf.File\n\ndir_list : List Str\n\nmain! = \\_args -&gt;\n    foo = List.walk dir_list { file: [], dir: [] } \\state, elem -&gt;\n        when File.is_file! elem is\n            Ok is_file if is_file -&gt;\n                { state &amp; file: List.append state.file elem }\n\n            Ok _ -&gt;\n                { state &amp; dir: List.append state.dir elem }\n\n            _ -&gt;\n                # Just ignore failures\n                state\n\n    Stdout.line! &quot;Hello, World!&quot;\n</code></pre></div>",
        "id": 491116013,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735415692
    },
    {
        "content": "<p>will see:</p>\n<div class=\"codehilite\"><pre><span></span><code>This 3rd argument to walk has an unexpected type:\n\n 9│&gt;      foo = List.walk dir_list { file: [], dir: [] } \\state, elem -&gt;\n10│&gt;          when File.is_file! elem is\n11│&gt;              Ok is_file if is_file -&gt;\n12│&gt;                  { state &amp; file: List.append state.file elem }\n13│&gt;\n14│&gt;              Ok _ -&gt;\n15│&gt;                  { state &amp; dir: List.append state.dir elem }\n16│&gt;\n17│&gt;              _ -&gt;\n18│&gt;                  # Just ignore failures\n19│&gt;                  state\n\nThe argument is an anonymous function of type:\n\n    { … }, Str =&gt; { … }\n\nBut walk needs its 3rd argument to be:\n\n    { … }, Str -&gt; { … }\n</code></pre></div>",
        "id": 491116027,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735415712
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 491117457,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735417191
    },
    {
        "content": "<p>Pretty simple: </p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kn\">module</span><span class=\"w\"> </span><span class=\"err\">[</span><span class=\"nc\">broken</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">effectful</span><span class=\"err\">!</span><span class=\"p\">]</span>\n\n<span class=\"nv\">effectful</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">=&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n\n<span class=\"nv\">broken</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"nv\">effectful</span><span class=\"err\">!</span>\n</code></pre></div>\n<p>Produces</p>\n<div class=\"codehilite\"><pre><span></span><code>── TYPE MISMATCH in test.roc ───────────────────────────────────────────────────\n\nThis 2nd argument to map has an unexpected type:\n\n5│  broken = List.map [] effectful!\n                         ^^^^^^^^^^\n\nThis effectful! value is a:\n\n    Str =&gt; Result Str []\n\nBut map needs its 2nd argument to be:\n\n    Str -&gt; Result Str []\n\n────────────────────────────────────────────────────────────────────────────────\n\n1 error and 0 warnings found in 30 ms.\n</code></pre></div>",
        "id": 491119743,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735419450
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/issues/7426\">https://github.com/roc-lang/roc/issues/7426</a></p>",
        "id": 491120527,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735420241
    }
]