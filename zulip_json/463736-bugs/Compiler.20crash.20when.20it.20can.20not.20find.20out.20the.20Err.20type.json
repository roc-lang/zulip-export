[
    {
        "content": "<p>I changed the signature of my <a href=\"https://github.com/ostcar/roc-aoc-platform\">AoC-platform</a> to <code>Str -&gt; Result Str _</code>.</p>\n<p>There seems to be a bug, when the compiler can not find out the type of the error value.</p>\n<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>part1 : Str -&gt; Result Str []\npart1 = \\input -&gt;\n    input\n    |&gt; Ok\n</code></pre></div>\n<p>This also works:</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>part1 = \\input -&gt;\n    input\n    |&gt; Ok\n    |&gt; Result.mapErr \\_ -&gt; ThisLineIsNecessaryForRoc\n</code></pre></div>\n<p>But this fails:</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>part1 = \\input -&gt;\n    input\n    |&gt; Ok\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;&lt;unnamed&gt;&#39; panicked at crates/compiler/mono/src/ir.rs:6171:56:\ncalled `Option::unwrap()` on a `None` value\n</code></pre></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>stack backtrace:</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>0:     0x6214d4056836 - &lt;std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display&gt;::fmt::h410d4c66be4e37f9<br>\n   1:     0x6214d4087450 - core::fmt::write::he40921d4802ce2ac<br>\n   2:     0x6214d40528df - std::io::Write::write_fmt::h5de5a4e7037c9b20<br>\n   3:     0x6214d4056614 - std::sys_common::backtrace::print::h11c067a88e3bdb22<br>\n   4:     0x6214d4057ea7 - std::panicking::default_hook::{{closure}}::h8c832ecb03fde8ea<br>\n   5:     0x6214d4057c09 - std::panicking::default_hook::h1633e272b4150cf3<br>\n   6:     0x6214d4058338 - std::panicking::rust_panic_with_hook::hb164d19c0c1e71d4<br>\n   7:     0x6214d40581d9 - std::panicking::begin_panic_handler::{{closure}}::h0369088c533c20e9<br>\n   8:     0x6214d4056d36 - std::sys_common::backtrace::__rust_end_short_backtrace::hc11d910daf35ac2e<br>\n   9:     0x6214d4057f64 - rust_begin_unwind<br>\n  10:     0x6214d14a2c15 - core::panicking::panic_fmt::ha6effc2775a0749c<br>\n  11:     0x6214d14a2cd3 - core::panicking::panic::h44790a89027c670f<br>\n  12:     0x6214d14a2b66 - core::option::unwrap_failed::hcb3a256a9f1ca882<br>\n  13:     0x6214d3ce69e2 - roc_mono::ir::late_resolve_ability_specialization::hff7dccd992321a2e<br>\n  14:     0x6214d3cd9bb8 - roc_mono::ir::with_hole::h97d54e248ecb6920<br>\n  15:     0x6214d3cc7c38 - roc_mono::ir::from_can_let::hfbed96ebe698577a<br>\n  16:     0x6214d3cf273e - roc_mono::ir::from_can::hbaaf526b0a3202e3<br>\n  17:     0x6214d3cd6b3c - roc_mono::ir::specialize_variable::h38e18d4a430e6a8f<br>\n  18:     0x6214d3d01447 - roc_mono::ir::call_by_name::h11462a9956ad5c81<br>\n  19:     0x6214d3cdbf46 - roc_mono::ir::with_hole::h97d54e248ecb6920<br>\n  20:     0x6214d3cfed07 - roc_mono::ir::assign_to_symbol::he50bbc314e8e343a<br>\n  21:     0x6214d3cfef3d - roc_mono::ir::assign_to_symbols::h0dc33ddf37c4e573<br>\n  22:     0x6214d3d02633 - roc_mono::ir::call_specialized_proc::h5b2f30baef4e6335<br>\n  23:     0x6214d3d0177f - roc_mono::ir::call_by_name::h11462a9956ad5c81<br>\n  24:     0x6214d3cdbf46 - roc_mono::ir::with_hole::h97d54e248ecb6920<br>\n  25:     0x6214d3cf2a3b - roc_mono::ir::from_can::hbaaf526b0a3202e3<br>\n  26:     0x6214d3cd6b3c - roc_mono::ir::specialize_variable::h38e18d4a430e6a8f<br>\n  27:     0x6214d3ccfa4b - roc_mono::ir::specialize_external_help::ha90efd260ae0887f<br>\n  28:     0x6214d3ccd0cc - roc_mono::ir::specialize_all::hda44354794552c3d<br>\n  29:     0x6214d37d5e89 - roc_load_internal:<span aria-label=\"file\" class=\"emoji emoji-1f4c4\" role=\"img\" title=\"file\">:file:</span>:run_task::ha14241132ba04bac<br>\n  30:     0x6214d3763d34 - core::ops::function::FnOnce::call_once{{vtable.shim}}::h0ab19609d58ae123<br>\n  31:     0x6214d375ca0e - std::sys_common::backtrace::__rust_begin_short_backtrace::ha43502819d8eb5b6<br>\n  32:     0x6214d37642f9 - core::ops::function::FnOnce::call_once{{vtable.shim}}::h6275d5a244ac2b12<br>\n  33:     0x6214d405e525 - std::sys::pal::unix:<span aria-label=\"thread\" class=\"emoji emoji-1f9f5\" role=\"img\" title=\"thread\">:thread:</span>:Thread:<span aria-label=\"new\" class=\"emoji emoji-1f195\" role=\"img\" title=\"new\">:new:</span>:thread_start::h3631815ad38387d6<br>\n  34:     0x7e2de40a1272 - start_thread<br>\n  35:     0x7e2de411cdcc - __GI___clone3<br>\n  36:                0x0 - &lt;unknown&gt;</p>\n</div></div>\n<p>Is this a known issue?</p>",
        "id": 485501434,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1733075796
    },
    {
        "content": "<p>if you run a debug build of the compiler, it will have a slightly more interesting error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">iter_lambda_set</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">solved</span><span class=\"p\">.</span><span class=\"n\">iter_all</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"fm\">debug_assert_eq!</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"n\">iter_lambda_set</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">.</span><span class=\"n\">subs</span><span class=\"p\">.</span><span class=\"n\">dbg</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">lambda_set</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">env</span><span class=\"p\">.</span><span class=\"n\">subs</span><span class=\"p\">.</span><span class=\"n\">dbg</span><span class=\"p\">(</span><span class=\"n\">ambient_function</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">spec_symbol_index</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iter_lambda_set</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"mi\">0</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>That's the code causing the panic.<br>\nIn debug it'll hit the assert and might give us some more info</p>",
        "id": 485503548,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733077533
    },
    {
        "content": "<p>With a debug build, I get the following error:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;&lt;unnamed&gt;&#39; panicked at crates/compiler/mono/src/layout.rs:2066:17:\nunspecialized lambda sets left over during resolution: LambdaSet([] + (&lt;2418&gt;FlexAble(*, [`Inspect.Inspect`]):`Inspect.toInspector`:2), ^&lt;2421&gt;), UlsOfVar(VecMap { keys: [2418], values: [VecSet { elements: [2416, 2420] }] })\n</code></pre></div>\n<p>Maybe it is relevant, that the platform runs this code:</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>part1ForHost : Str -&gt; Result Str Str\npart1ForHost = \\input -&gt;\n    part1 input\n    |&gt; errToStr\n\n\nerrToStr : Result Str _ -&gt; Result Str Str\nerrToStr = \\r -&gt;\n    r |&gt; Result.mapErr Inspect.toStr\n</code></pre></div>",
        "id": 485504495,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1733078339
    },
    {
        "content": "<p>Yeah, the issue is <code>Inspect.toStr</code> probably</p>",
        "id": 485504525,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733078373
    },
    {
        "content": "<p>Cause it doesn't know how to inspect a <code>*</code></p>",
        "id": 485504536,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733078386
    },
    {
        "content": "<p>Though I could be wrong, might be related to mapping a <code>*</code> error, but I recall that working.</p>",
        "id": 485504610,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733078418
    },
    {
        "content": "<p>Yes, you are right. You get the same error in the repl:</p>\n<div class=\"codehilite\"><pre><span></span><code>Ok &quot;foo&quot; |&gt; Result.mapErr Inspect.toStr\n</code></pre></div>",
        "id": 485504632,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1733078455
    },
    {
        "content": "<p>By any chance does it work if you wrap <code>Inspect.toStr</code> with a lambda?</p>",
        "id": 485504650,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733078475
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/463736-bugs/topic/Compiler.20crash.20when.20it.20can.20not.20find.20out.20the.20Err.20type/near/485504650\">said</a>:</p>\n<blockquote>\n<p>By any chance does it work if you wrap <code>Inspect.toStr</code> with a lambda?</p>\n</blockquote>\n<p>No, same error:</p>\n<div class=\"codehilite\"><pre><span></span><code>Ok &quot;foo&quot; |&gt; Result.mapErr \\err -&gt; Inspect.toStr err\n</code></pre></div>",
        "id": 485504753,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1733078562
    },
    {
        "content": "<p>And I assume it works if you remove the <code>Inspect.toStr</code>? Just replace with identify function?</p>",
        "id": 485504805,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733078617
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/463736-bugs/topic/Compiler.20crash.20when.20it.20can.20not.20find.20out.20the.20Err.20type/near/485504805\">said</a>:</p>\n<blockquote>\n<p>And I assume it works if you remove the <code>Inspect.toStr</code>? Just replace with identify function?</p>\n</blockquote>\n<p>Yes. This works:</p>\n<div class=\"codehilite\"><pre><span></span><code>Ok &quot;foo&quot; |&gt; Result.mapErr \\err -&gt; err\n</code></pre></div>",
        "id": 485504872,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1733078662
    },
    {
        "content": "<p>Yeah. So it just that you can't inspect a <code>*</code>. Hmm... I wonder if we can still autoderrive for that and add in a dummy value. At a minimum this should produce a good error about applying abilities to <code>*</code></p>",
        "id": 485504926,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733078724
    },
    {
        "content": "<p>But why does it work in basic-cli? <a href=\"https://github.com/roc-lang/basic-cli/blob/6b9bc85d18c30cb34bf1351067fe3ec94811bf93/platform/main.roc#L44\">https://github.com/roc-lang/basic-cli/blob/6b9bc85d18c30cb34bf1351067fe3ec94811bf93/platform/main.roc#L44</a></p>",
        "id": 485505016,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1733078776
    },
    {
        "content": "<p>Or maybe we can just make abilities not generate when called on <code>*</code>. Like it would be fine to generate a crash in those cases. Cause those cases are impossible to call.</p>",
        "id": 485505028,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733078801
    },
    {
        "content": "<p>Basic cli always has at least the <code>Exit</code> error tag</p>",
        "id": 485505060,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733078849
    },
    {
        "content": "<p>Oh, I bet you could work around this with a dummy tag</p>",
        "id": 485505136,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733078898
    },
    {
        "content": "<p>This does not seem to work. I get the same error, if I change the signature to <code>part1 : Str -&gt; Result Str [SomeError]_</code></p>",
        "id": 485505182,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1733078949
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Result.map \\err -&gt;\n    when err is\n        Dummy -&gt; Inspect.toStr Dummy\n        e -&gt; Inspect.toStr e\n</code></pre></div>",
        "id": 485505203,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733078973
    },
    {
        "content": "<p>Yes. This works! Thank you</p>\n<div class=\"codehilite\"><pre><span></span><code>errToStr : Result Str _ -&gt; Result Str Str\nerrToStr = \\r -&gt;\n    when r is\n        Ok v -&gt; Ok v\n        Err SomeError -&gt; Err &quot;dummy error&quot;\n        Err err -&gt; Err (Inspect.toStr err)\n</code></pre></div>\n<p>I don't have to do anything in the main signature</p>",
        "id": 485505344,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1733079080
    },
    {
        "content": "<p>Can you file a bug for this?</p>",
        "id": 485505373,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733079109
    },
    {
        "content": "<p>Sure: <a href=\"https://github.com/roc-lang/roc/issues/7289\">https://github.com/roc-lang/roc/issues/7289</a></p>",
        "id": 485505719,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1733079387
    }
]