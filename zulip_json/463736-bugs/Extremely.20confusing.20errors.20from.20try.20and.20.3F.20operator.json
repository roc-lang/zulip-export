[
    {
        "content": "<p>I just spent  half an hour trying to figure out how to use the try operator along the way I found a whole collection of confusing and unhelpful error messages. I'll document them here:<br>\nMy first attempt:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">parseLine</span><span class=\"nf\">=\\</span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"nv\">before</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">after</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">try</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"nf\">|&gt;</span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">splitFirst</span><span class=\"w\">  </span><span class=\"s\">\" \"</span>\n<span class=\"w\">    </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">try</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toU64</span><span class=\"w\"> </span><span class=\"nv\">before</span>\n<span class=\"w\">    </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\">  </span><span class=\"nv\">try</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toU64</span><span class=\"w\"> </span><span class=\"nv\">after</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>Produced there two errors:</p>\n<div class=\"codehilite\"><pre><span></span><code>── TYPE MISMATCH in examples/2020/01.roc ───────────────────────────────────────\n\nThis expression is used in an unexpected way:\n\n25│      {before, after} = try x|&gt;Str.splitFirst  &quot; &quot;\n                           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis splitFirst call produces:\n\n    Result {\n        after : Str,\n        before : Str,\n    } [NotFound]\n\nBut you are trying to use it as:\n\n    {\n        after : *,\n        before : *,\n    }c\n\n\n── TYPE MISMATCH in examples/2020/01.roc ───────────────────────────────────────\n\nThis return statement doesn&#39;t match the return type of its enclosing\nfunction:\n\n25│&gt;      {before, after} = try x|&gt;Str.splitFirst  &quot; &quot;\n26│       a = try before|&gt;Str.toU64\n27│       b =  try after|&gt;Str.toU64\n28│       { a, b }\n\nThis returns a value of type:\n\n    [Err *]\n\nBut I expected the function to have return type:\n\n    {\n        a : Result (Int Unsigned64) [InvalidNumStr],\n        b : Result (Int Unsigned64) [InvalidNumStr],\n    }\n\n────────────────────────────────────────────────────────────────────────────────\n</code></pre></div>\n<p>These are both utterly useless. </p>\n<ol>\n<li>Confusing because I know it returns a result, but that's what try is supposed to handle.</li>\n<li>What the hell is [Err *]?? Why  is that being returned? why is there no mention of my record? why are we expecting the values to be results? That makes no sense that wouldn't be compatible with <code>toU64</code> (I have enough experience with roc to be able to answer some of these, but lets pretend I'm actually totally new to roc)</li>\n</ol>\n<p>Eventually, after a fair bit of stuffing around I realised that try doesn't really behave the way I'd expect and is operating on the thing I'm piping in. This would make sense if try was a function, but given it's a keyword I'd expect it to operate on everything coming after it.</p>\n<p>So eventually, by stuffing around for a bit, I end up here:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">parseLine</span><span class=\"nf\">=\\</span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"nv\">before</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">after</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">try</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">splitFirst</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\">  </span><span class=\"s\">\" \"</span>\n<span class=\"w\">    </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">try</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toU64</span><span class=\"w\"> </span><span class=\"nv\">before</span>\n<span class=\"w\">    </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\">  </span><span class=\"nv\">try</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toU64</span><span class=\"w\"> </span><span class=\"nv\">after</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>── TYPE MISMATCH in examples/2020/01.roc ───────────────────────────────────────\n\nThis return statement doesn&#39;t match the return type of its enclosing\nfunction:\n\n25│&gt;      {before, after} = try Str.splitFirst x  &quot; &quot;\n26│       a = try Str.toU64 before\n27│       b =  try Str.toU64 after\n28│       { a, b }\n\nThis returns a value of type:\n\n    [Err [NotFound]]\n\nBut I expected the function to have return type:\n\n    {\n        a : Int Unsigned64,\n        b : Int Unsigned64,\n    }\n\n────────────────────────────────────────────────────────────────────────────────\n</code></pre></div>\n<p>At this point I understand that try is being treated as an early return here and so it's returning a result whereas the function is returning a value.<br>\nHowever:</p>\n<ul>\n<li>The error is clearly in the wrong place, the type of the function return should be set from the top down, if I use a <code>try</code>, my return should have to be a result, my return type not being a result shouldn't cause all my <code>try</code>s to error</li>\n<li>The message should say it's a try statement, not a return statement</li>\n</ul>\n<p>Having not used roc for 6 months, I'm getting to encounter a whole bunch of things as a \"new user\" and I'm definitely going to try to make the most of it by identifying pain points as they come up :)</p>",
        "id": 485462097,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733042902
    },
    {
        "content": "<p>Thanks for pointing these out! Let me try to respond after gathering my thoughts</p>",
        "id": 485462423,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733043124
    },
    {
        "content": "<p>I think updating the tutorial will help a bit, but one of the bigger sources of confusion here comes from the current <em>very simple</em> implementation of the <code>try</code> keyword</p>",
        "id": 485462581,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733043195
    },
    {
        "content": "<p>I initially attempted to implement it as a proper keyword that did its own kind of type-checking, but I kept finding myself running into issues.</p>",
        "id": 485462657,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733043231
    },
    {
        "content": "<p>So as a stop-gap, we started with a simpler impl, where <code>try</code> is desugared to:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">try</span><span class=\"w\"> </span><span class=\"nv\">myFunc</span><span class=\"w\"> </span><span class=\"nv\">myArgs</span>\n\n<span class=\"c1\">-- goes to</span>\n<span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">myFunc</span><span class=\"w\"> </span><span class=\"nv\">myArgs</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">    </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">val</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">val</span>\n<span class=\"w\">    </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">err</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"nv\">return</span><span class=\"w\"> </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">err</span>\n</code></pre></div>",
        "id": 485462853,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733043302
    },
    {
        "content": "<p>Cool, that all makes sense, it's just got some gotchas right now. <br>\nDo you think it'd be with recommending the ? operator for now? given it's got less unexpected behaviour? </p>\n<p>l I mentioned this in a PR <span class=\"user-mention\" data-user-id=\"462053\">@JanCVanB</span> has for adding the try keyword and a few other things to the tutorial<br>\n<a href=\"https://github.com/roc-lang/roc/pull/7274\">https://github.com/roc-lang/roc/pull/7274</a><br>\nHopefully a note there will help :)</p>",
        "id": 485463511,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733043565
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> ^</p>",
        "id": 485463533,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733043576
    },
    {
        "content": "<p>Though we eventually want to make a <code>try</code>-like operator work properly, with the advent of static dispatch and parens, we will probably just try to get ? to work properly first</p>",
        "id": 485463565,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733043592
    },
    {
        "content": "<p>So, we're in a bit of a limbo between Tasks and purity-inference</p>",
        "id": 485463656,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733043613
    },
    {
        "content": "<p>! and ? in Task world desugar to <code>Task.await thing \\res -&gt; ...</code> and <code>Result.try result \\ok -&gt; ...</code></p>",
        "id": 485463804,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733043657
    },
    {
        "content": "<p>But try uses early return, which only works in purity-inference world because it returns <code>Err err</code>, not <code>Task.err err</code></p>",
        "id": 485463906,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733043694
    },
    {
        "content": "<p>So you need to only use <code>try</code> in purity-inference world and ? in Task world</p>",
        "id": 485463958,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733043717
    },
    {
        "content": "<p>Until we get rid of Tasks, old !, and ?</p>",
        "id": 485464021,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733043742
    },
    {
        "content": "<p>And then we re-add ? as the <strong>proper</strong> <code>try</code> version</p>",
        "id": 485464048,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733043769
    },
    {
        "content": "<p>ahhh I see, I just tried to use the ? operator with a purity inference call and got a compiler crash. So that's a bit awkward to recommend</p>",
        "id": 485464063,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733043777
    },
    {
        "content": "<p>That's... not great</p>",
        "id": 485464079,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733043793
    },
    {
        "content": "<p>All a bit messy right now  <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 485464083,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733043800
    },
    {
        "content": "<p>The ! and ? desugaring code is not resilient around purity-inference</p>",
        "id": 485464095,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733043817
    },
    {
        "content": "<p>So in short:</p>\n<ul>\n<li><code>try</code> is currently confusing because it was implemented very simply, but we (or at least I) have more high-impact work to do first, and should prioritize that first</li>\n<li>an updated tutorial should help newcomers use it properly, but we'll have proper error messages once we do it correctly</li>\n</ul>",
        "id": 485464257,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733043939
    },
    {
        "content": "<p>cool, well given the normal basic-cli is still using task. Maybe it's worth leaving <code>try</code> out of the tutorial until it's working a bit better. That way people doing AOC and trying roc now don't have to face that confusion</p>",
        "id": 485464368,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733044021
    },
    {
        "content": "<p>That may be true...</p>",
        "id": 485464399,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733044055
    },
    {
        "content": "<p>Let me look at that PR</p>",
        "id": 485464406,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733044061
    },
    {
        "content": "<p>Oh and I forgot one error. If you use the question mark operator you get this nonsense:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">parseLine</span><span class=\"nf\">=\\</span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"nv\">before</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">after</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">splitFirst</span><span class=\"err\">?</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\">  </span><span class=\"s\">\" \"</span>\n<span class=\"w\">    </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toU64</span><span class=\"err\">?</span><span class=\"w\"> </span><span class=\"nv\">before</span>\n<span class=\"w\">    </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\">  </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toU64</span><span class=\"err\">?</span><span class=\"w\"> </span><span class=\"nv\">after</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>── TYPE MISMATCH in examples/2020/01.roc ───────────────────────────────────────\n\nThis 2nd argument to this function has an unexpected type:\n\n35│      b =  Str.toU64? after\n              ^^^^^^^^^^^^^^^^\n\nThe argument is an anonymous function of type:\n\n    Int Unsigned64 -&gt; {\n        a : *,\n        b : Int Unsigned64,\n    }\n\nBut this function needs its 2nd argument to be:\n\n    Int Unsigned64 -&gt; Result b [InvalidNumStr]\n\n────────────────────────────────────────────────────────────────────────────────\n</code></pre></div>\n<p>To which my immediate thought is \"but <code>Str.toU64</code> only takes one argument...\" and then \"what is that function signature, I don't have a function matching that\"</p>\n<p>Again, it makes sense if you understand what's actually going on with the desugaring.... but that's not helpful for the punters.</p>",
        "id": 485464947,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733044547
    },
    {
        "content": "<p>I feel like it has been a bad error message since <code>?</code> has been around... I don't know how to make it much better</p>",
        "id": 485465059,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733044629
    },
    {
        "content": "<p>So I think the best solution for now is to recommend against <code>?</code> and <code>try</code>, which isn't satisfying</p>",
        "id": 485465084,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733044668
    },
    {
        "content": "<p>But will lead to a better user experience</p>",
        "id": 485465094,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733044678
    },
    {
        "content": "<p>I ran into a similar thing today and reopened <a href=\"https://github.com/roc-lang/roc/issues/7224\">this related issue</a>.</p>",
        "id": 485465139,
        "sender_full_name": "Dan G Knutson",
        "timestamp": 1733044686
    },
    {
        "content": "<p>I've got a type bug to fix with early return, after which I can try better implementing <code>try</code>. I think we would just reuse the same impl if we move to postfix <code>?</code> again</p>",
        "id": 485465192,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733044746
    },
    {
        "content": "<p>I agree.<br>\nIt's probably not worth focusing on, we can try to sort it out with the new try keyword in the purity inference world and just give up on the Task version for now.</p>",
        "id": 485465207,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733044758
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/channel/463736-bugs/topic/Extremely.20confusing.20errors.20from.20try.20and.20.3F.20operator/near/485465084\">said</a>:</p>\n<blockquote>\n<p>So I think the best solution for now is to recommend against <code>?</code> and <code>try</code>, which isn't satisfying</p>\n</blockquote>\n<p>Honestly, I kind of agree. The errors are just too much for most people to be able to comprehend and it's not something you can easily explain in the tutorial. The inference just gives you the \"spooky action at a distance\" feeling.</p>",
        "id": 485465483,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733044963
    },
    {
        "content": "<p>\"spooky action at a distance\" doesn't sound very good lol</p>",
        "id": 485465509,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733044997
    },
    {
        "content": "<p>hahah, no, but I think that's the best way to describe getting a cryptic error in the first call of my function that's caused by the lack of an <code>Ok</code> in the return value.</p>",
        "id": 485465632,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733045135
    },
    {
        "content": "<p>Thanks for these insights, <span class=\"user-mention\" data-user-id=\"651372\">@Eli Dowling</span> - I'll update my tutorial update to preview-ify the new <code>try</code> explanation and postview-ify the old <code>?</code> explanation <span aria-label=\"yum\" class=\"emoji emoji-1f60b\" role=\"img\" title=\"yum\">:yum:</span></p>",
        "id": 485496007,
        "sender_full_name": "jan kili",
        "timestamp": 1733070951
    }
]