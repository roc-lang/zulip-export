[
    {
        "content": "<p>Bringing light to this here for more visibility: <a href=\"https://github.com/roc-lang/roc/issues/7302\">7302</a></p>\n<p>Also discussed <a href=\"#narrow/channel/358903-advent-of-code/topic/2024.20Day.203/near/485877012\">here</a> on Zulip.</p>",
        "id": 485965013,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733264365
    },
    {
        "content": "<p>TL;DR:  I have a when expression with about 20 clauses, 7 of which have guards.  I get an unwork-aroundable compiler crash during mono IR unless I remove one of two guards (The same set of guards are used in the same order, but don't cause an issue).</p>",
        "id": 485965214,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733264445
    },
    {
        "content": "<p>All this because I wanted to see if avoiding Strings would make my AOC solution faster!</p>",
        "id": 485965268,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733264474
    },
    {
        "content": "<p>Thank you for digging into and reporting this.</p>",
        "id": 485966751,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733265049
    },
    {
        "content": "<p>No worries, I found a fix, and it's not pleasant and I think harmed the perf of the solution.  But I updated the issue with good information on what allowed me to work around it</p>",
        "id": 486003917,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733282443
    },
    {
        "content": "<p>I'd love to know if any function inlining happens in guards, because if not I'd try moving the guard logic back out of functions</p>",
        "id": 486004261,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733282621
    },
    {
        "content": "<p>My last hope without getting _clever_ would be to try recursively inspecting a <code>List U8</code> and building up the list of ops that way, and hope the compiler will emit a loop instead</p>",
        "id": 486004486,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733282728
    }
]