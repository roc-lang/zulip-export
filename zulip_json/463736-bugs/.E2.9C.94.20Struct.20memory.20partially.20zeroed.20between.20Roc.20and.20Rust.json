[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"462053\">JanCVanB</span> <a href=\"#narrow/channel/231634-beginners/topic/Memory.20layout.20for.20tags.20.26.20records/near/488774885\">said</a>:</p>\n<blockquote>\n<p>... Tomorrow I'll revisit the memory zeroing bug...</p>\n</blockquote>\n<p>I've created <a href=\"https://github.com/roc-lang/basic-cli/compare/main...JanCVanB:basic-cli:bug_repro___zeroed_struct\">a minimal bug reproduction (using just a few additions to basic-cli@main)</a> of this confusing obstacle I've been hitting in my roc-on project (before and after switching to purity inference). I get this output, which demonstrates the zeroing I'm also seeing with all tag union discriminants (seemingly because <code>discriminant</code> is the second field in the union).</p>\n<div class=\"codehilite\"><pre><span></span><code>jan@framey:~/_code/JanCVanB/basic-cli$ roc version\nroc nightly pre-release, built from commit 7495495 on Do 12 Dez 2024 09:43:52 UTC\njan@framey:~/_code/JanCVanB/basic-cli$ ./bug_repro___run.sh\n+ &#39;[&#39; -z &#39;&#39; &#39;]&#39;\n+ echo &#39;Warning: ROC environment variable is not set... I&#39;\\&#39;&#39;ll try with just &#39;\\&#39;&#39;roc&#39;\\&#39;&#39;.&#39;\nWarning: ROC environment variable is not set... I&#39;ll try with just &#39;roc&#39;.\n+ ROC=roc\n+ roc build --lib ./platform/libapp.roc\n0 errors and 0 warnings found in 143 ms while successfully building:\n\n    ./platform/libapp\n+ cargo build --release\n    Finished `release` profile [optimized] target(s) in 0.05s\n+ &#39;[&#39; -n &#39;&#39; &#39;]&#39;\n+ cp target/release/libhost.a ./platform/libhost.a\n+ roc build --linker=legacy build.roc\n0 errors and 0 warnings found in 287 ms while successfully building:\n\n    build\n🦅 happy: {bar: 22, baz: 33, foo: 11}\n🦀 sad: ZeroedStruct { bar: 22, baz: 0, foo: 0 }\njan@framey:~/_code/JanCVanB/basic-cli$\n</code></pre></div>\n<p>I'm happy to create a github issue for this, but I'm unclear which repo is responsible - maybe a <code>roc-lang/roc/crates/glue/src/RustGlue.roc</code> bug?</p>",
        "id": 488911577,
        "sender_full_name": "jan kili",
        "timestamp": 1734120130
    },
    {
        "content": "<p>Yeah, known c abi bugs</p>",
        "id": 488915848,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734121938
    },
    {
        "content": "<p>Rust is expecting <code>{bar: 22, baz: 33, foo: 11}</code> to be passed in a single register.</p>",
        "id": 488915949,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734121988
    },
    {
        "content": "<p>Cause it is 3 U8s</p>",
        "id": 488915958,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734121996
    },
    {
        "content": "<p>We are probably passing it in 3 different registers</p>",
        "id": 488915999,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734122022
    },
    {
        "content": "<p>Thus only the first value is correct (cause it is in the first register)</p>",
        "id": 488916072,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734122055
    },
    {
        "content": "<p>Oh, okay! I'm so glad this is known and clear to you.</p>",
        "id": 488919801,
        "sender_full_name": "jan kili",
        "timestamp": 1734123582
    },
    {
        "content": "<p>Can I debug it by telling Rust to expect multiple registers? (no idea where to start, but happy to look up things)</p>",
        "id": 488919985,
        "sender_full_name": "jan kili",
        "timestamp": 1734123636
    },
    {
        "content": "<p>If you make rust recieve 3 u8s instead of a struct, I think that should work</p>",
        "id": 488920120,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734123699
    },
    {
        "content": "<p>This is a major issue we have with small types. We really need to revamp how we generate c-abi and deal with all the various cases.</p>",
        "id": 488920257,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734123747
    },
    {
        "content": "<p>Do you mean [u8]? Is there a better one-to-one container? Since I have dozens of nested struct types with lots of U8s, I'm looking for structure.</p>",
        "id": 488920400,
        "sender_full_name": "jan kili",
        "timestamp": 1734123821
    },
    {
        "content": "<p>Or would ballooning to U32/64 minimum sizes and then tossing head bits magically fix it?</p>",
        "id": 488920696,
        "sender_full_name": "jan kili",
        "timestamp": 1734123951
    },
    {
        "content": "<p>I infer that this approach would be a PR to RustGlue.roc to fix the representations it chooses.</p>",
        "id": 488921026,
        "sender_full_name": "jan kili",
        "timestamp": 1734124071
    },
    {
        "content": "<p>For this specific case: <a href=\"https://godbolt.org/z/xj87ajszh\">https://godbolt.org/z/xj87ajszh</a></p>",
        "id": 488921555,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734124218
    },
    {
        "content": "<p>If all of your structs/tags were big enough to avoid fitting in two register, it would probably generate correct calls that match what rust expects.</p>",
        "id": 488921657,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734124277
    },
    {
        "content": "<blockquote>\n<p>Or would ballooning to U32/64 minimum sizes and then tossing head bits magically fix it?</p>\n</blockquote>\n<p>So yeah, this would probably would in most cases.</p>",
        "id": 488921796,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734124337
    },
    {
        "content": "<p>Ballooning results:</p>\n<p>U8s</p>\n<div class=\"codehilite\"><pre><span></span><code>🦅 happy: {bar: 22, baz: 33, foo: 11, qux1: 44, qux2: 55, qux3: 66}\n🦀 sad: ZeroedStruct { bar: 22, baz: 0, foo: 0, qux1: 0, qux2: 0, qux3: 0 }\n</code></pre></div>\n<p>U16s</p>\n<div class=\"codehilite\"><pre><span></span><code>🦅 happy: {bar: 22, baz: 33, foo: 11, qux1: 44, qux2: 55, qux3: 66}\n🦀 sad: ZeroedStruct { bar: 22, baz: 1951, foo: 32766, qux1: 0, qux2: 33, qux3: 0 }\n</code></pre></div>\n<p>U32s</p>\n<div class=\"codehilite\"><pre><span></span><code>🦅 happy: {bar: 22, baz: 33, foo: 11, qux1: 44, qux2: 55, qux3: 66}\n🦀 sad: ZeroedStruct { bar: 66, baz: 32766, foo: 3966136302, qux1: 22066, qux2: 1945484424, qux3: 32766 }\n</code></pre></div>\n<p>U64s</p>\n<div class=\"codehilite\"><pre><span></span><code>🦅 happy: {bar: 22, baz: 33, foo: 11, qux1: 44, qux2: 55, qux3: 66}\n🦀 sad: ZeroedStruct { bar: 140724510355272, baz: 94609053062050, foo: 140724510355320, qux1: 8, qux2: 139842509156127, qux3: 94609075901416 }\n</code></pre></div>\n<p><span aria-label=\"blushing\" class=\"emoji emoji-1f633\" role=\"img\" title=\"blushing\">:blushing:</span></p>",
        "id": 488922328,
        "sender_full_name": "jan kili",
        "timestamp": 1734124597
    },
    {
        "content": "<p>ballooned on both the roc and rust side?</p>",
        "id": 488922666,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734124758
    },
    {
        "content": "<p>yeah both, via naive regenerated glue<br>\n<a href=\"/user_uploads/22008/pncittAo44VJwgYZ1ZLXUb0J/Screenshot_20241213_141958.png\">Screenshot_20241213_141958.png</a><br>\n<a href=\"/user_uploads/22008/4K1LUNjHj9QMjDVSxxeEumTc/Screenshot_20241213_142026.png\">Screenshot_20241213_142026.png</a><br>\n<a href=\"/user_uploads/22008/Yz-pI2c27_apW1jJTbo7UdY6/Screenshot_20241213_142045.png\">Screenshot_20241213_142045.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/pncittAo44VJwgYZ1ZLXUb0J/Screenshot_20241213_141958.png\" title=\"Screenshot_20241213_141958.png\"><img data-original-dimensions=\"218x186\" src=\"/user_uploads/thumbnail/22008/pncittAo44VJwgYZ1ZLXUb0J/Screenshot_20241213_141958.png/840x560.webp\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/22008/4K1LUNjHj9QMjDVSxxeEumTc/Screenshot_20241213_142026.png\" title=\"Screenshot_20241213_142026.png\"><img data-original-dimensions=\"722x245\" src=\"/user_uploads/thumbnail/22008/4K1LUNjHj9QMjDVSxxeEumTc/Screenshot_20241213_142026.png/840x560.webp\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/22008/Yz-pI2c27_apW1jJTbo7UdY6/Screenshot_20241213_142045.png\" title=\"Screenshot_20241213_142045.png\"><img data-original-dimensions=\"900x127\" src=\"/user_uploads/thumbnail/22008/Yz-pI2c27_apW1jJTbo7UdY6/Screenshot_20241213_142045.png/840x560.webp\"></a></div>",
        "id": 488922955,
        "sender_full_name": "jan kili",
        "timestamp": 1734124888
    },
    {
        "content": "<p>My \"workaround\" is to make the type larger by adding in U64's or something until it gets passed by pointer, and then just ignore the unused parts.</p>",
        "id": 488923457,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734125102
    },
    {
        "content": "<p>Should I add a pointer dereference to this sextet of U64s? (And is 6 \"enough\" to trigger that passing by pointer?)</p>",
        "id": 488923541,
        "sender_full_name": "jan kili",
        "timestamp": 1734125149
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/463736-bugs/topic/Struct.20memory.20partially.20zeroed.20between.20Roc.20and.20Rust/near/488923457\">said</a>:</p>\n<blockquote>\n<p>My \"workaround\" is to make the type larger by adding in U64's or something until it gets passed by pointer, and then just ignore the unused parts.</p>\n</blockquote>\n<p>That's probably an easier general workaround</p>",
        "id": 488923700,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734125201
    },
    {
        "content": "<p><del>Sneaky pointer confirmed:</del> I wonder if it's already passing by pointer:</p>\n<p>Re-running U64s</p>\n<div class=\"codehilite\"><pre><span></span><code>🦅 happy: {bar: 22, baz: 33, foo: 11, qux1: 44, qux2: 55, qux3: 66}\n🦀 sad: ZeroedStruct { bar: 140732166601912, baz: 93831138048418, foo: 140732166601960, qux1: 8, qux2: 140691827044127, qux3: 93831156052968 }\n</code></pre></div>\n<p>and again</p>\n<div class=\"codehilite\"><pre><span></span><code>🦅 happy: {bar: 22, baz: 33, foo: 11, qux1: 44, qux2: 55, qux3: 66}\n🦀 sad: ZeroedStruct { bar: 140721497110504, baz: 94174084974690, foo: 140721497110552, qux1: 8, qux2: 139823797833503, qux3: 94174114378728 }\n</code></pre></div>",
        "id": 488923774,
        "sender_full_name": "jan kili",
        "timestamp": 1734125234
    },
    {
        "content": "<p>or just unwiped ram noise, I suppose</p>",
        "id": 488923859,
        "sender_full_name": "jan kili",
        "timestamp": 1734125275
    },
    {
        "content": "<p>Does this mean that glue code always requires nontrivial handwriting after generation? (when numbers are involved)</p>",
        "id": 488924117,
        "sender_full_name": "jan kili",
        "timestamp": 1734125400
    },
    {
        "content": "<p>Luke, do you have an existing example of that pointer+ignore workaround that I can adapt? Like from roc-ray?</p>",
        "id": 488924429,
        "sender_full_name": "jan kili",
        "timestamp": 1734125529
    },
    {
        "content": "<p>Sure, here's how I get UUID's across to the host in roc-ray</p>\n<div class=\"codehilite\"><pre><span></span><code>RawUUID : {\n    upper : U64,\n    lower : U64,\n    zzz1 : U64,\n    zzz2 : U64,\n    zzz3 : U64,\n}\n</code></pre></div>",
        "id": 488924886,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734125758
    },
    {
        "content": "<p>And the glue for that </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Clone, Copy, Default, Debug, PartialEq, PartialOrd, Eq, Ord, Hash)]</span>\n<span class=\"cp\">#[repr(C)]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">PeerUUID</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">lower</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">upper</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">zzz1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">zzz2</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">zzz3</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">roc_refcounted_noop_impl</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">PeerUUID</span><span class=\"p\">);</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">From</span><span class=\"o\">&lt;</span><span class=\"n\">matchbox_socket</span><span class=\"p\">::</span><span class=\"n\">PeerId</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">PeerUUID</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">from</span><span class=\"p\">(</span><span class=\"n\">peer_id</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">matchbox_socket</span><span class=\"p\">::</span><span class=\"n\">PeerId</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">PeerUUID</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">upper</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lower</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">peer_id</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">as_u64_pair</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"n\">PeerUUID</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">lower</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">upper</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">zzz1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">zzz2</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">zzz3</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">From</span><span class=\"o\">&lt;&amp;</span><span class=\"n\">PeerUUID</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">uuid</span><span class=\"p\">::</span><span class=\"n\">Uuid</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">from</span><span class=\"p\">(</span><span class=\"n\">roc_uuid</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">PeerUUID</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">uuid</span><span class=\"p\">::</span><span class=\"n\">Uuid</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">uuid</span><span class=\"p\">::</span><span class=\"n\">Uuid</span><span class=\"p\">::</span><span class=\"n\">from_u64_pair</span><span class=\"p\">(</span><span class=\"n\">roc_uuid</span><span class=\"p\">.</span><span class=\"n\">upper</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">roc_uuid</span><span class=\"p\">.</span><span class=\"n\">lower</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">From</span><span class=\"o\">&lt;&amp;</span><span class=\"n\">PeerUUID</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">PeerId</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">from</span><span class=\"p\">(</span><span class=\"n\">roc_uuid</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">PeerUUID</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">matchbox_socket</span><span class=\"p\">::</span><span class=\"n\">PeerId</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">uuid</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">uuid</span><span class=\"p\">::</span><span class=\"n\">Uuid</span><span class=\"p\">::</span><span class=\"n\">from_u64_pair</span><span class=\"p\">(</span><span class=\"n\">roc_uuid</span><span class=\"p\">.</span><span class=\"n\">upper</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">roc_uuid</span><span class=\"p\">.</span><span class=\"n\">lower</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">matchbox_socket</span><span class=\"p\">::</span><span class=\"n\">PeerId</span><span class=\"p\">::</span><span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">uuid</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 488924989,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734125803
    },
    {
        "content": "<p>Gotcha, so stuff in fluff then ignore it as much as possible!</p>",
        "id": 488925209,
        "sender_full_name": "jan kili",
        "timestamp": 1734125911
    },
    {
        "content": "<p>What are the implications/ripples of passing by pointer? Would my</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">roc_fx_sendZeroedStruct</span><span class=\"p\">(</span><span class=\"n\">sad</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">glue2</span><span class=\"p\">::</span><span class=\"n\">ZeroedStruct</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">RocResult</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">RocStr</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n</code></pre></div>\n<p>change to</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">roc_fx_sendZeroedStruct</span><span class=\"p\">(</span><span class=\"n\">sad</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">glue2</span><span class=\"p\">::</span><span class=\"n\">ZeroedStruct</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">RocResult</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">RocStr</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n</code></pre></div>\n<p>?</p>",
        "id": 488925444,
        "sender_full_name": "jan kili",
        "timestamp": 1734126004
    },
    {
        "content": "<p>Yeah, I'm hoping with the ROAR stuff we've been discussing, that would clean all the C ABI issues up.</p>",
        "id": 488925470,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734126022
    },
    {
        "content": "<p>...otherwise I don't see why the ballooning above wouldn't be working already.</p>",
        "id": 488925518,
        "sender_full_name": "jan kili",
        "timestamp": 1734126048
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"462053\">JanCVanB</span> <a href=\"#narrow/channel/463736-bugs/topic/Struct.20memory.20partially.20zeroed.20between.20Roc.20and.20Rust/near/488925444\">said</a>:</p>\n<blockquote>\n<p>What are the implications/ripples of passing by pointer? Would my</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">roc_fx_sendZeroedStruct</span><span class=\"p\">(</span><span class=\"n\">sad</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">glue2</span><span class=\"p\">::</span><span class=\"n\">ZeroedStruct</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">RocResult</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">RocStr</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n</code></pre></div>\n<p>change to</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">roc_fx_sendZeroedStruct</span><span class=\"p\">(</span><span class=\"n\">sad</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">glue2</span><span class=\"p\">::</span><span class=\"n\">ZeroedStruct</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">RocResult</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">RocStr</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n</code></pre></div>\n<p>?</p>\n</blockquote>\n<p>Yeah I think so.. here's an example getting PeerUUID from roc</p>\n<div class=\"codehilite\"><pre><span></span><code>extern &quot;C&quot; fn roc_fx_sendToPeer(bytes: &amp;RocList&lt;u8&gt;, peer: &amp;glue::PeerUUID) {\n</code></pre></div>",
        "id": 488925572,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734126085
    },
    {
        "content": "<p>Just adding the <code>&amp;</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>🦅 happy: {bar: 22, baz: 33, foo: 11, qux1: 44, qux2: 55, qux3: 66}\n🦀 sad: ZeroedStruct { bar: 22, baz: 33, foo: 11, qux1: 44, qux2: 55, qux3: 66 }\n</code></pre></div>\n<p><span aria-label=\"woman facepalming\" class=\"emoji emoji-1f926-200d-2640\" role=\"img\" title=\"woman facepalming\">:woman_facepalming:</span> I should be dancing right now but I'm not.</p>",
        "id": 488925684,
        "sender_full_name": "jan kili",
        "timestamp": 1734126142
    },
    {
        "content": "<p>Congratulations, you've basically found all the known issues with platform development <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 488925794,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734126206
    },
    {
        "content": "<p>This is fantastic news. For now I don't care that my programs will consume 100x memory.</p>",
        "id": 488925802,
        "sender_full_name": "jan kili",
        "timestamp": 1734126209
    },
    {
        "content": "<p><span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> Best case scenario is that I'm quoting this comment in a month.</p>",
        "id": 488925897,
        "sender_full_name": "jan kili",
        "timestamp": 1734126253
    },
    {
        "content": "<p>Okay, now I'm dancing: 3 U8s + 4 U64s triggers passing by pointer!</p>\n<div class=\"codehilite\"><pre><span></span><code>🦅 happy: {bar: 22, baz: 33, fluff1: 0, fluff2: 0, fluff3: 0, fluff4: 0, foo: 11}\n🦀 sad: ZeroedStruct { fluff1: 0, fluff2: 0, fluff3: 0, fluff4: 0, bar: 22, baz: 33, foo: 11 }\n</code></pre></div>",
        "id": 488926376,
        "sender_full_name": "jan kili",
        "timestamp": 1734126511
    },
    {
        "content": "<p>THANK YOU ALL</p>",
        "id": 488926475,
        "sender_full_name": "jan kili",
        "timestamp": 1734126566
    },
    {
        "content": "<p>Hmm, now how to apply this logic to tag unions, which currently generate two-field structs (payload+discriminant)...</p>",
        "id": 488926781,
        "sender_full_name": "jan kili",
        "timestamp": 1734126713
    },
    {
        "content": "<p>I'll try fluffing every tag payload</p>",
        "id": 488926901,
        "sender_full_name": "jan kili",
        "timestamp": 1734126761
    },
    {
        "content": "<blockquote>\n<p>Yeah, I'm hoping with the ROAR stuff we've been discussing, that would clean all the C ABI issues up.</p>\n</blockquote>\n<p>they are kinda unrelated</p>",
        "id": 488926967,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734126807
    },
    {
        "content": "<p>ROAR is for the dev backend</p>",
        "id": 488926977,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734126813
    },
    {
        "content": "<p>llvm backend is failing to follow c abi in these cases</p>",
        "id": 488926991,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734126822
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"462053\">JanCVanB</span> <a href=\"#narrow/channel/231634-beginners/topic/Memory.20layout.20for.20tags.20.26.20records/near/488927886\">said</a>:</p>\n<blockquote>\n<p>LET'S</p>\n<p>GOOOOOOOOOOOOOOOOOO</p>\n<p><div class=\"codehilite\"><pre><span></span><code>🦅😶 main is sending custom MIDI: {format: SingleTrack, timing: (Metrical 100 0 0 0 0)}\n🦀😶 roc_fx_echoMidiSmallish received custom MIDI: Header { timing: Timing::Metrical(Timing_Metrical { f1: 0, f2: 0, f3: 0, f4: 0, f0: 100 }), format: Format::SingleTrack }\n🦀😊 roc_fx_echoMidiSmallish casted that to Midly: Header { format: SingleTrack, timing: Metrical(u15(100)) }\n🦀😊 roc_fx_echoMidiSmallish casted that back too: Header { timing: Timing::Metrical(Timing_Metrical { f1: 0, f2: 0, f3: 0, f4: 0, f0: 100 }), format: Format::SingleTrack }\n🦅😶 main received an echo back: {format: SingleTrack, timing: (Metrical 100 0 0 0 0)}\n🦅😊 main sees no difference!\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 488927912,
        "sender_full_name": "jan kili",
        "timestamp": 1734127257
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/JweP26OHoMVLwmhn9P82doVU/stuff_that_fluff.gif\">stuff_that_fluff.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/JweP26OHoMVLwmhn9P82doVU/stuff_that_fluff.gif\" title=\"stuff_that_fluff.gif\"><img data-animated=\"true\" data-original-dimensions=\"220x164\" src=\"/user_uploads/thumbnail/22008/JweP26OHoMVLwmhn9P82doVU/stuff_that_fluff.gif/840x560-anim.webp\"></a></div>",
        "id": 488928494,
        "sender_full_name": "jan kili",
        "timestamp": 1734127533
    },
    {
        "content": "<p>You've heard of whitespace - now introducing whxtxspxcx:</p>\n<div class=\"codehilite\" data-code-language=\"Perl\"><pre><span></span><code><span class=\"c1\"># This is to help avoid hitting a known C ABI bug</span>\n<span class=\"c1\"># by ensuring small values are passed by pointer.</span>\n<span class=\"c1\"># See https://roc.zulipchat.com/#narrow/channel/463736-bugs/topic/Struct.20memory.20partially.20zeroed.20between.20Roc.20and.20Rust/near/488928494</span>\n<span class=\"n\">Fluff</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">U64</span>\n<span class=\"n\">X</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">Fluff</span>\n\n<span class=\"n\">FpsTiming</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Fps24</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Fps25</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Fps29</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Fps30</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"p\">]</span>\n<span class=\"n\">Format</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">SingleTrack</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Parallel</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Sequential</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"p\">]</span>\n<span class=\"n\">Timing</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Metrical</span><span class=\"w\"> </span><span class=\"n\">U16</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Timecode</span><span class=\"w\"> </span><span class=\"n\">FpsTiming</span><span class=\"w\"> </span><span class=\"n\">U8</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"p\">]</span>\n\n<span class=\"n\">Header</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nb\">format</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">Format</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">timing</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">Timing</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 488929208,
        "sender_full_name": "jan kili",
        "timestamp": 1734127875
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"462053\">JanCVanB</span> has marked this topic as resolved.</p>",
        "id": 488929333,
        "sender_full_name": "Notification Bot",
        "timestamp": 1734127928
    }
]