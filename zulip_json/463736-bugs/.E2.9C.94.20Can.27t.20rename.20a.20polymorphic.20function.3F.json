[
    {
        "content": "<p>I expect this to work, but it seems to be bugged. Is this actually intended behavior?</p>\n<div class=\"codehilite\" data-code-language=\"Perl\"><pre><span></span><code><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">main</span><span class=\"o\">!</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">basic_cli:</span><span class=\"w\"> </span><span class=\"n\">platform</span><span class=\"w\"> </span><span class=\"s\">\"./platform/main.roc\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"nb\">import</span><span class=\"w\"> </span><span class=\"n\">basic_cli</span><span class=\"o\">.</span><span class=\"n\">Stdout</span>\n\n<span class=\"n\">main</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">\\</span><span class=\"nn\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mappy</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">Num</span><span class=\"o\">.</span><span class=\"n\">toStr</span>\n<span class=\"w\">    </span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mappy</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\" a\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"b \"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">Str</span><span class=\"o\">.</span><span class=\"n\">trim</span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">Str</span><span class=\"o\">.</span><span class=\"n\">joinWith</span><span class=\"w\"> </span><span class=\"s\">\"&amp;\"</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">try</span><span class=\"w\"> </span><span class=\"n\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"o\">!</span>\n<span class=\"w\">    </span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">Str</span><span class=\"o\">.</span><span class=\"n\">joinWith</span><span class=\"w\"> </span><span class=\"s\">\"&amp;\"</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">try</span><span class=\"w\"> </span><span class=\"n\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"o\">!</span>\n<span class=\"w\">    </span><span class=\"n\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"s\">\"success\"</span>\n\n<span class=\"n\">mappy</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">rename</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"o\">.</span><span class=\"nb\">map</span>\n<span class=\"nb\">rename</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">\\</span><span class=\"nn\">anything</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">anything</span>\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>...\nBut mappy needs its 1st argument to be:\n\n    List (Num *)\n...\nBut mappy needs its 2nd argument to be:\n\n    Num * -&gt; Str\n...\n</code></pre></div>\n<p><a href=\"/user_uploads/22008/1OXS-pZCIK8bIgJC2zksJdhU/Screenshot_20250120_092613.png\">Screenshot_20250120_092613.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/1OXS-pZCIK8bIgJC2zksJdhU/Screenshot_20250120_092613.png\" title=\"Screenshot_20250120_092613.png\"><img data-original-content-type=\"image/png\" data-original-dimensions=\"1920x1200\" src=\"/user_uploads/thumbnail/22008/1OXS-pZCIK8bIgJC2zksJdhU/Screenshot_20250120_092613.png/840x560.webp\"></a></div><p>Edit: No-op refactor to simplify.</p>",
        "id": 494850557,
        "sender_full_name": "jan kili",
        "timestamp": 1737389985
    },
    {
        "content": "<p>Specifying <code>rename : anything -&gt; anything</code> doesn't fix it.</p>",
        "id": 494852253,
        "sender_full_name": "jan kili",
        "timestamp": 1737390550
    },
    {
        "content": "<p>Specifying <code>mappy : List a, (a -&gt; b) -&gt; List b</code> yields</p>\n<div class=\"codehilite\"><pre><span></span><code>TYPE MISMATCH\n\nThis 2nd argument to `mappy` has an unexpected type:\n\n6│      foo = mappy [1, 2, 3, 4] Num.toStr\n                                 ^^^^^^^^^\n\nThis `toStr` value is a:\n\n    Num * -&gt; Str\n\nBut `mappy` needs its 2nd argument to be:\n\n    a -&gt; b\n\nTip: The type annotation uses the type variable `b` to say\nthat this definition can produce any type of value. But in\nthe body I see that it will only produce a `Str` value of a\nsingle specific type. Maybe change the type annotation to be\nmore specific? Maybe change the code to be more general?\n</code></pre></div>",
        "id": 494852486,
        "sender_full_name": "jan kili",
        "timestamp": 1737390639
    },
    {
        "content": "<p><code>I see that it will only produce a `Str` value</code> <span aria-label=\"point left\" class=\"emoji emoji-1f448\" role=\"img\" title=\"point left\">:point_left:</span> that definitely seems like a bug</p>",
        "id": 494853460,
        "sender_full_name": "jan kili",
        "timestamp": 1737390891
    },
    {
        "content": "<p>If I \"run the program anyway with <code>roc run</code>\" it does crash with</p>\n<div class=\"codehilite\"><pre><span></span><code>Running program anyway…\n\n────────────────────────────────────────────────────────────────────────────────\nRoc crashed with:\n\n        Erroneous: specialize_symbol\n\nHere is the call stack that led to the crash:\n\n        .libc\n\nOptimizations can make this list inaccurate! If it looks wrong, try running without `--optimize` and with `--linker=legacy`\n</code></pre></div>\n<p>while it doesn't crash if I first comment out either the <code>foo</code> lines or the <code>bar</code> lines.</p>",
        "id": 494854434,
        "sender_full_name": "jan kili",
        "timestamp": 1737391197
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> probably knows what's going on</p>",
        "id": 494854972,
        "sender_full_name": "Anton",
        "timestamp": 1737391345
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"231634\" href=\"/#narrow/channel/231634-beginners/topic/Can.27t.20rename.20a.20polymorphic.20function.3F\">#beginners &gt; Can't rename a polymorphic function?</a> by <span class=\"user-mention silent\" data-user-id=\"462053\">JanCVanB</span>.</p>",
        "id": 494857306,
        "sender_full_name": "Notification Bot",
        "timestamp": 1737391917
    },
    {
        "content": "<p>(upgraded to bug, for at least the <code>I see that it will only produce a `Str` value</code> problem)</p>",
        "id": 494857569,
        "sender_full_name": "jan kili",
        "timestamp": 1737392008
    },
    {
        "content": "<p>Not urgent, but looking forward to what <span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> (or another polymorphism specialist) thinks should be intended behavior here!</p>",
        "id": 494858125,
        "sender_full_name": "jan kili",
        "timestamp": 1737392185
    },
    {
        "content": "<p>I'm pretty sure it should just work. It also should just work without the rename function just <code>mappy = List.msp</code></p>",
        "id": 494880853,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737395409
    },
    {
        "content": "<p>Glad to hear! Yeah <code>mappy = List.map</code> doesn't work either, which seems like a better starting point for debugging. (I do want the two-step version too.)</p>",
        "id": 494891828,
        "sender_full_name": "jan kili",
        "timestamp": 1737398538
    },
    {
        "content": "<p>yes, this is intended behavior</p>",
        "id": 494896828,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737400606
    },
    {
        "content": "<p><code>mappy : List a, (a -&gt; b) -&gt; List b</code> should yield an error, i just landed a PR to generate that error</p>",
        "id": 494896877,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737400628
    },
    {
        "content": "<p>you need to wrap <code>mappy</code> in an explicit lambda for it to be polymorphic</p>",
        "id": 494896923,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737400652
    },
    {
        "content": "<p>eg <code>mappy = \\l, f -&gt; List.map l f</code></p>",
        "id": 494896966,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737400667
    },
    {
        "content": "<p>This is due to let generalization? Didn't realize that affected lambdas</p>",
        "id": 494897062,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737400695
    },
    {
        "content": "<p>yes</p>",
        "id": 494897075,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737400700
    },
    {
        "content": "<p>everything that's not explicitly a function (syntactically) is not polymorphic. Everything that is not explicitly a function gets at most one type, and that type is determined by the first usage</p>",
        "id": 494897189,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737400753
    },
    {
        "content": "<p>wasn't this one of the situations where we could relax that if desired?</p>",
        "id": 494897684,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737400963
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"454654\">Ayaz Hafiz</span> <a href=\"#narrow/stream/463736-bugs/topic/Can't.20rename.20a.20polymorphic.20function.3F/near/494897189\">said</a>:</p>\n<blockquote>\n<p>everything that's not explicitly a function (syntactically) is not polymorphic. Everything that is not explicitly a function gets at most one type, and that type is determined by the first usage</p>\n</blockquote>\n<p>Ah, didn't realize it had to be syntactically.</p>",
        "id": 494898517,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737401309
    },
    {
        "content": "<p>it can be relaxed if you perform eta-expansion</p>",
        "id": 494898971,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737401521
    },
    {
        "content": "<p>i.e. write any value <code>v</code> of type <code>a -&gt; b</code> to <code>\\a -&gt; (v) a</code></p>",
        "id": 494899096,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737401570
    },
    {
        "content": "<p>Does that mean that <code>rename = \\anything -&gt; anything</code> is impossible?</p>",
        "id": 494899106,
        "sender_full_name": "jan kili",
        "timestamp": 1737401576
    },
    {
        "content": "<p>yeah <code>rename List.map</code> doesn't work on its own if you want it to be polymorphic it needs to be <code>\\l, f -&gt; (rename List.map) l f</code></p>",
        "id": 494899410,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737401735
    },
    {
        "content": "<p><span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 494899642,
        "sender_full_name": "jan kili",
        "timestamp": 1737401844
    },
    {
        "content": "<p>Is this due to Roc's design or the compiler's implementation?</p>",
        "id": 494899775,
        "sender_full_name": "jan kili",
        "timestamp": 1737401888
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"454654\">Ayaz Hafiz</span> <a href=\"#narrow/channel/463736-bugs/topic/Can't.20rename.20a.20polymorphic.20function.3F/near/494898971\">said</a>:</p>\n<blockquote>\n<p>it can be relaxed if you perform eta-expansion<br>\ni.e. write any value <code>v</code> of type <code>a -&gt; b</code> to <code>\\a -&gt; (v) a</code></p>\n</blockquote>\n<p>I think we should do this</p>",
        "id": 494899948,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737401974
    },
    {
        "content": "<p>it's surprising that it doesn't work, and then the workaround is to do eta-expansion manually, so seems like a good thing for the compiler to do for you automatically</p>",
        "id": 494900049,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737402010
    },
    {
        "content": "<p>to clarify: this is just when naming it in defs, right?</p>",
        "id": 494900608,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737402249
    },
    {
        "content": "<p>like when a function is being passed in as an argument, that's not necessary</p>",
        "id": 494900699,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1737402285
    },
    {
        "content": "<p>It sounds like this wasn't/isn't a bug. Shall I move the last few messages to a new #ideas topic?</p>",
        "id": 495152272,
        "sender_full_name": "jan kili",
        "timestamp": 1737496895
    },
    {
        "content": "<p>Friendly ping :) I'm iterating on a script with the equivalent of mappy1 &amp; mappy2 to work around this, but it's a low priority for me.</p>",
        "id": 495361719,
        "sender_full_name": "jan kili",
        "timestamp": 1737575178
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/channel/463736-bugs/topic/Can't.20rename.20a.20polymorphic.20function.3F/near/494900608\">said</a>:</p>\n<blockquote>\n<p>to clarify: this is just when naming it in defs, right?<br>\nlike when a function is being passed in as an argument, that's not necessary</p>\n</blockquote>\n<p>In case this answers your question, this gets the same type checking errors with Monday's nightly release:</p>\n<div class=\"codehilite\" data-code-language=\"Perl\"><pre><span></span><code><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">main</span><span class=\"o\">!</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">basic_cli:</span><span class=\"w\"> </span><span class=\"n\">platform</span><span class=\"w\"> </span><span class=\"s\">\"./platform/main.roc\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"nb\">import</span><span class=\"w\"> </span><span class=\"n\">basic_cli</span><span class=\"o\">.</span><span class=\"n\">Stdout</span>\n\n<span class=\"n\">main</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">\\</span><span class=\"nn\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">List</span><span class=\"o\">.</span><span class=\"nb\">map</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">do_it</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"o\">!</span>\n\n<span class=\"n\">do_it</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">\\</span><span class=\"nn\">some_function</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">some_function</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">Num</span><span class=\"o\">.</span><span class=\"n\">toStr</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">Str</span><span class=\"o\">.</span><span class=\"n\">joinWith</span><span class=\"w\"> </span><span class=\"s\">\"&amp;\"</span>\n<span class=\"w\">    </span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">some_function</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\" a\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"b \"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">Str</span><span class=\"o\">.</span><span class=\"n\">trim</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">Str</span><span class=\"o\">.</span><span class=\"n\">joinWith</span><span class=\"w\"> </span><span class=\"s\">\"&amp;\"</span>\n<span class=\"w\">    </span><span class=\"n\">Str</span><span class=\"o\">.</span><span class=\"n\">concat</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"n\">bar</span>\n</code></pre></div>\n<p>like</p>\n<div class=\"codehilite\"><pre><span></span><code>But `some_function` needs its 1st argument to be:\n\n    List (Num *)\n</code></pre></div>",
        "id": 495362414,
        "sender_full_name": "jan kili",
        "timestamp": 1737575496
    },
    {
        "content": "<p>Specifying</p>\n<div class=\"codehilite\"><pre><span></span><code>do_it : (List a, (a -&gt; b) -&gt; List b) -&gt; Str\n</code></pre></div>\n<p>leads to a similar secondary message:</p>\n<div class=\"codehilite\"><pre><span></span><code>TYPE MISMATCH\n\nThis 1st argument to |&gt; has an unexpected type:\n\n10│      foo = some_function [1, 2, 3, 4] Num.toStr |&gt; Str.joinWith &quot;&amp;&quot;\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis `some_function` call produces:\n\n    List b\n\nBut |&gt; needs its 1st argument to be:\n\n    List Str\n\nTip: The type annotation uses the type variable `b` to say\nthat this definition can produce any type of value. But in\nthe body I see that it will only produce a `Str` value of a\nsingle specific type. Maybe change the type annotation to be\nmore specific? Maybe change the code to be more general?\n</code></pre></div>\n<p>but maybe the next nightly will include an improvement from Ayaz's PR?</p>",
        "id": 495363004,
        "sender_full_name": "jan kili",
        "timestamp": 1737575720
    },
    {
        "content": "<p>I don't think his last PR will have fixed this</p>",
        "id": 495363318,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737575836
    },
    {
        "content": "<p>That PR was warning devs when they implied code was generic with a type signature that actually only operated on a single, specific type</p>",
        "id": 495363402,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737575866
    },
    {
        "content": "<p>The <a href=\"https://math.stackexchange.com/questions/65622/whats-the-point-of-eta-conversion-in-lambda-calculus\">eta-expansion</a> would need to be implemented separately</p>",
        "id": 495363525,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737575903
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/channel/463736-bugs/topic/Can't.20rename.20a.20polymorphic.20function.3F/near/495363318\">said</a>:</p>\n<blockquote>\n<p>I don't think his last PR will have fixed this</p>\n</blockquote>\n<p>Yeah, confirmed with today's TESTING release and basic-cli@main - no change.</p>",
        "id": 495364009,
        "sender_full_name": "jan kili",
        "timestamp": 1737576096
    },
    {
        "content": "<p>&gt;</p>\n<div class=\"codehilite\"><pre><span></span><code>do_it = \\some_function -&gt;\n    foo = some_function [1, 2, 3, 4] Num.toStr |&gt; Str.joinWith &quot;&amp;&quot;\n    bar = some_function [&quot; a&quot;, &quot;b &quot;] Str.trim |&gt; Str.joinWith &quot;&amp;&quot;\n    Str.concat foo bar\n</code></pre></div>\n<p>This case is separate to the previous examples - this requires a type system feature called \"higher ranked types\". The name is confusing but it basically means that <code>some_function</code> has to itself be polymorphic, and not be of a specific type. Normally, if I had a function </p>\n<div class=\"codehilite\"><pre><span></span><code>do_it = \\some_function, l, f -&gt; some_function l f\n\ndo_it List.map [] (\\x -&gt; x + 1)\n</code></pre></div>\n<p><code>some_function</code> gets the concrete type <code>List I64, (I64 -&gt; I64) -&gt; List I64</code> when it is called. But in the case you showed, <code>some_function</code> needs to always be polymorphic - I cannot call it with a <code>I64 -&gt; I64</code>, I need to call it with something that's always an <code>a -&gt; a</code>. This isn't supported in Roc and I would be surprised if it is added</p>",
        "id": 495399962,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737593048
    },
    {
        "content": "<p>Ah, okay. Does that mean that type variables are only supported within function parameters that aren't functions themselves?<br>\nas in, <code>do_it : (List a, (a -&gt; b) -&gt; List b) -&gt; Str</code> is unsupported<br>\nor here's a simpler one ~ <code>do_it : (a -&gt; Str) -&gt; Str</code></p>",
        "id": 495400632,
        "sender_full_name": "jan kili",
        "timestamp": 1737593458
    },
    {
        "content": "<p>No, that works, but the type variable becomes a concrete type when the outer function (<code>do_it</code>) is called, not when the inner function is called</p>",
        "id": 495401271,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737593772
    },
    {
        "content": "<p>another way to think about it is like</p>\n<div class=\"codehilite\"><pre><span></span><code>do_it = \\some_function, throwaway_arg -&gt;\n  dbg throwaway_arg\n    foo = some_function [1, 2, 3, 4] Num.toStr |&gt; Str.joinWith &quot;&amp;&quot;\n    bar = some_function [&quot; a&quot;, &quot;b &quot;] Str.trim |&gt; Str.joinWith &quot;&amp;&quot;\n    Str.concat foo bar\n</code></pre></div>\n<p><code>throwaway_arg</code> can be <code>a</code>, but <code>some_function</code> needs to be something like <code>(forall b : List b, (b -&gt; Str) -&gt; List Str)</code></p>",
        "id": 495401430,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737593856
    },
    {
        "content": "<p>Side note - I now see that this doesn't work either:</p>\n<div class=\"codehilite\" data-code-language=\"Perl\"><pre><span></span><code><span class=\"n\">do_it</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Str</span>\n<span class=\"n\">do_it</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">\\</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">Inspect</span><span class=\"o\">.</span><span class=\"n\">toStr</span><span class=\"w\"> </span><span class=\"n\">foo</span>\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>TYPE MISMATCH\n\nThis 1st argument to `toStr` has an unexpected type:\n\n37│      Inspect.toStr foo\n                       ^^^\n\nThis `foo` value is a:\n\n    a\n\nBut `toStr` needs its 1st argument to be:\n\n    val where val implements Inspect\n\nTip: The type annotation uses the type variable `a` to say\nthat this definition can produce any type of value. But in\nthe body I see that it will only produce an instance of the\nability `Inspect` of a single specific type. Maybe change the\ntype annotation to be more specific? Maybe change the code\nto be more general?\n</code></pre></div>",
        "id": 495401436,
        "sender_full_name": "jan kili",
        "timestamp": 1737593858
    },
    {
        "content": "<p>The tip at the bottom is not good but you need to say that <code>a</code> implements <code>Inpsect</code>. This should work</p>\n<div class=\"codehilite\"><pre><span></span><code>do_it : { foo : a } -&gt; Str where a implement Inspect\ndo_it = \\{ foo } -&gt;\n    Inspect.toStr foo\n</code></pre></div>",
        "id": 495401543,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737593911
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"454654\">Ayaz Hafiz</span> <a href=\"#narrow/channel/463736-bugs/topic/Can't.20rename.20a.20polymorphic.20function.3F/near/495401430\">said</a>:</p>\n<blockquote>\n<p><code>throwaway_arg</code> can be <code>a</code>, but <code>some_function</code> needs to be something like <code>(forall b : List b, (b -&gt; Str) -&gt; List Str)</code></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> Am I doing it wrong?<br>\n<a href=\"/user_uploads/22008/ID05hb9YBAyocpK1sgRXOfX4/Screenshot_20250122_180239.png\">Screenshot_20250122_180239.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/ID05hb9YBAyocpK1sgRXOfX4/Screenshot_20250122_180239.png\" title=\"Screenshot_20250122_180239.png\"><img data-original-content-type=\"image/png\" data-original-dimensions=\"1067x705\" src=\"/user_uploads/thumbnail/22008/ID05hb9YBAyocpK1sgRXOfX4/Screenshot_20250122_180239.png/840x560.webp\"></a></div>",
        "id": 495402143,
        "sender_full_name": "jan kili",
        "timestamp": 1737594233
    },
    {
        "content": "<p>Regardless, it sounds like I should start an #ideas topic for \"Automatic eta expansion\" based on Richard's suggestion above.</p>",
        "id": 495402295,
        "sender_full_name": "jan kili",
        "timestamp": 1737594306
    },
    {
        "content": "<p>well, i was saying roc doesn’t support that</p>",
        "id": 495402773,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737594567
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"454654\">Ayaz Hafiz</span> <a href=\"#narrow/channel/463736-bugs/topic/Can't.20rename.20a.20polymorphic.20function.3F/near/495401271\">said</a>:</p>\n<blockquote>\n<p>No, that works, but the type variable becomes a concrete type when the outer function (<code>do_it</code>) is called, not when the inner function is called</p>\n</blockquote>\n<p><del>In practice, type vars don't seem to work within parameters that are functions:</del></p>\n<div class=\"codehilite\" data-code-language=\"Perl\"><pre><span></span><code><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">main</span><span class=\"o\">!</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">basic_cli:</span><span class=\"w\"> </span><span class=\"n\">platform</span><span class=\"w\"> </span><span class=\"s\">\"./platform/main.roc\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"nb\">import</span><span class=\"w\"> </span><span class=\"n\">basic_cli</span><span class=\"o\">.</span><span class=\"n\">Stdout</span>\n\n<span class=\"n\">main</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">\\</span><span class=\"nn\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">Inspect</span><span class=\"o\">.</span><span class=\"n\">toStr</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">Str</span><span class=\"o\">.</span><span class=\"n\">concat</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">Num</span><span class=\"o\">.</span><span class=\"n\">toStr</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"o\">!</span>\n\n<span class=\"n\">f</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nn\">a</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Str</span>\n<span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">\\</span><span class=\"nn\">g</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"mi\">10</span>\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>TYPE MISMATCH\n\nThis 1st argument to `g` has an unexpected type:\n\n12│      g 10\n           ^^\n\nThe argument is a number of type:\n\n    Num *\n\nBut `g` needs its 1st argument to be:\n\n    a\n\nTip: The type annotation uses the type variable `a` to say\nthat this definition can produce any type of value. But in\nthe body I see that it will only produce a `Num` value of a\nsingle specific type. Maybe change the type annotation to be\nmore specific? Maybe change the code to be more general?\n</code></pre></div>",
        "id": 495403131,
        "sender_full_name": "jan kili",
        "timestamp": 1737594747
    },
    {
        "content": "<p><del>Which is understandable if it's unsupported, I'm just seeking what the support boundary means in practice.</del></p>",
        "id": 495403192,
        "sender_full_name": "jan kili",
        "timestamp": 1737594797
    },
    {
        "content": "<p>NEVERMIND, I'm wrong - fix coming</p>",
        "id": 495403347,
        "sender_full_name": "jan kili",
        "timestamp": 1737594887
    },
    {
        "content": "<p>This works just fine:</p>\n<div class=\"codehilite\" data-code-language=\"Perl\"><pre><span></span><code><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">main</span><span class=\"o\">!</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">basic_cli:</span><span class=\"w\"> </span><span class=\"n\">platform</span><span class=\"w\"> </span><span class=\"s\">\"./platform/main.roc\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"nb\">import</span><span class=\"w\"> </span><span class=\"n\">basic_cli</span><span class=\"o\">.</span><span class=\"n\">Stdout</span>\n\n<span class=\"n\">main</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">\\</span><span class=\"nn\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">Inspect</span><span class=\"o\">.</span><span class=\"n\">toStr</span><span class=\"w\"> </span><span class=\"mi\">10</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">Str</span><span class=\"o\">.</span><span class=\"n\">concat</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">Num</span><span class=\"o\">.</span><span class=\"n\">toStr</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"o\">!</span>\n\n<span class=\"n\">f</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nn\">a</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Str</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nn\">a</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Str</span>\n<span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">\\</span><span class=\"n\">g</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nn\">x</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"n\">x</span>\n</code></pre></div>",
        "id": 495403380,
        "sender_full_name": "jan kili",
        "timestamp": 1737594903
    },
    {
        "content": "<p>So the unsupported thing here seems to just be over-generalizing a function signature, which I don't mind.</p>",
        "id": 495403570,
        "sender_full_name": "jan kili",
        "timestamp": 1737594977
    },
    {
        "content": "<p>Regarding Richard's suggestion of automatic eta expansion, I'm unsure how to interpret your replies. My optimistic reading is that you haven't addressed it yet, but my pessimistic reading sees this sequence:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"454654\">Ayaz Hafiz</span> <a href=\"#narrow/channel/463736-bugs/topic/Can't.20rename.20a.20polymorphic.20function.3F/near/495399962\">said</a>:</p>\n<blockquote>\n<p>... This isn't supported in Roc and I would be surprised if it is added</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"462053\">JanCVanB</span> <a href=\"#narrow/channel/463736-bugs/topic/Can't.20rename.20a.20polymorphic.20function.3F/near/495402295\">said</a>:</p>\n<blockquote>\n<p>...it sounds like I should start an #ideas topic for \"Automatic eta expansion\" based on Richard's suggestion above.</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"454654\">Ayaz Hafiz</span> <a href=\"#narrow/channel/463736-bugs/topic/Can't.20rename.20a.20polymorphic.20function.3F/near/495402773\">said</a>:</p>\n<blockquote>\n<p>well, i was saying roc doesn’t support that</p>\n</blockquote>",
        "id": 495404175,
        "sender_full_name": "jan kili",
        "timestamp": 1737595357
    },
    {
        "content": "<p>I'm specifically interested in the \"when naming it in defs\" case:</p>\n<div class=\"codehilite\" data-code-language=\"Perl\"><pre><span></span><code><span class=\"n\">mappy</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">rename</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"o\">.</span><span class=\"nb\">map</span>\n<span class=\"nb\">rename</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">\\</span><span class=\"nn\">anything</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">anything</span>\n</code></pre></div>",
        "id": 495404547,
        "sender_full_name": "jan kili",
        "timestamp": 1737595582
    },
    {
        "content": "<p>those conversations are interleaved about different things… in the messages quoted from me i was referring to higher rank types, richard was referring to eta expansion. i dont see an issue with eta expansion</p>",
        "id": 495408743,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1737597980
    },
    {
        "content": "<p>The clearest \"bug(s)\" here seem to just be unsatisfying error messages, but those are improving daily. I'm resolving this for now, with discussion hopefully continuing here: <a class=\"stream-topic\" data-stream-id=\"304641\" href=\"/#narrow/channel/304641-ideas/topic/automatic.20eta.20expansion.2C.20to.20rename.20polymorphic.20f.27ns\">#ideas &gt; automatic eta expansion, to rename polymorphic f'ns</a></p>",
        "id": 495606453,
        "sender_full_name": "jan kili",
        "timestamp": 1737676673
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"462053\">JanCVanB</span> has marked this topic as resolved.</p>",
        "id": 495606458,
        "sender_full_name": "Notification Bot",
        "timestamp": 1737676676
    }
]