[
    {
        "content": "<p>I have encountered an error where I get a panic when running an expect statement. Specifically, if I uncomment either of the 2 commented out comparisons, the program will panic with:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;main&#39; panicked at /Users/imclerran/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bumpalo-3.14.0/src/collections/raw_vec.rs:691:5:\ncapacity overflow\n</code></pre></div>\n<p>However, as you can see, the function being tested (the main logic) does not appear to be causing the crash, since the function is called, sent to Result.map_ok, and a comparison can be run asserting that the value <code>!= Ok ShouldNotPass</code>, and this does not panic and the expect passes.</p>\n<p>This tells me that the panic is actually occurring while accessing the value, or in the Boolean comparison itself, but the panic at least did not occur while assigning the value in the utf8_to_utf16 function.</p>\n<p>Here is the <code>expect</code> in question:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">expect</span>\n<span class=\"w\">    </span><span class=\"c1\"># Missing continuation bytes</span>\n<span class=\"w\">    </span><span class=\"n\">utf8_2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mb\">0b1101_1111</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mb\">0b0011_1111</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"n\">utf8_3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mb\">0b1110_1111</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mb\">0b1011_1111</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mb\">0b0011_1111</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"n\">utf8_4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mb\">0b1111_0111</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mb\">0b1011_1111</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mb\">0b1011_1111</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mb\">0b0011_1111</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"n\">err_2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"no\">Err</span><span class=\"p\">(</span><span class=\"no\">BadUtf8</span><span class=\"p\">({</span><span class=\"w\"> </span><span class=\"ss\">index</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">problem</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"no\">ExpectedContinuation</span><span class=\"w\"> </span><span class=\"p\">}))</span>\n<span class=\"w\">    </span><span class=\"n\">err_3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"no\">Err</span><span class=\"p\">(</span><span class=\"no\">BadUtf8</span><span class=\"p\">({</span><span class=\"w\"> </span><span class=\"ss\">index</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">problem</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"no\">ExpectedContinuation</span><span class=\"w\"> </span><span class=\"p\">}))</span>\n<span class=\"w\">    </span><span class=\"n\">err_4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"no\">Err</span><span class=\"p\">(</span><span class=\"no\">BadUtf8</span><span class=\"p\">({</span><span class=\"w\"> </span><span class=\"ss\">index</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">problem</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"no\">ExpectedContinuation</span><span class=\"w\"> </span><span class=\"p\">}))</span>\n<span class=\"w\">    </span><span class=\"n\">utf16_2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">utf8_to_utf16</span><span class=\"p\">(</span><span class=\"n\">utf8_2</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"c1\"># Result.map_ok added to prove utf8_to_utf16 is being evaluated without panic.</span>\n<span class=\"w\">    </span><span class=\"n\">utf16_3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">utf8_to_utf16</span><span class=\"p\">(</span><span class=\"n\">utf8_3</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"no\">Result</span><span class=\"o\">.</span><span class=\"n\">map_ok</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"no\">ShouldNotPass</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">utf16_4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">utf8_to_utf16</span><span class=\"p\">(</span><span class=\"n\">utf8_4</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"no\">Result</span><span class=\"o\">.</span><span class=\"n\">map_ok</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"no\">ShouldNotPass</span><span class=\"p\">)</span>\n\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">utf16_2</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">err_2</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"c1\"># &amp;&amp; (utf16_3 == err_3) # panics if uncommented</span>\n<span class=\"w\">    </span><span class=\"c1\"># &amp;&amp; (utf16_4 == err_4) # panics if uncommented</span>\n<span class=\"w\">    </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">utf16_3</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"no\">Ok</span><span class=\"w\"> </span><span class=\"no\">ShouldNotPass</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">utf16_4</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"no\">Ok</span><span class=\"w\"> </span><span class=\"no\">ShouldNotPass</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 494411706,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1737136759
    },
    {
        "content": "<p>Interesting development:</p>\n<p>Adding this to the expect produces the exact same panic:<br>\n(while leaving the two lines commented out)</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"no\">Str</span><span class=\"o\">.</span><span class=\"n\">from_utf8</span><span class=\"p\">(</span><span class=\"n\">utf8_2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"no\">Err</span><span class=\"p\">(</span><span class=\"no\">BadUtf8</span><span class=\"p\">({</span><span class=\"w\"> </span><span class=\"ss\">index</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">problem</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"no\">ExpectedContinuation</span><span class=\"w\"> </span><span class=\"p\">}))</span>\n</code></pre></div>\n<p>However, this does not panic:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">[]</span>\n\n<span class=\"n\">expect</span>\n<span class=\"w\">    </span><span class=\"n\">utf8_2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mb\">0b1101_1111</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mb\">0b0011_1111</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"no\">Str</span><span class=\"o\">.</span><span class=\"n\">from_utf8</span><span class=\"p\">(</span><span class=\"n\">utf8_2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"no\">Err</span><span class=\"p\">(</span><span class=\"no\">BadUtf8</span><span class=\"p\">({</span><span class=\"w\"> </span><span class=\"ss\">index</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">problem</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"no\">ExpectedContinuation</span><span class=\"w\"> </span><span class=\"p\">}))</span>\n</code></pre></div>",
        "id": 494415138,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1737138030
    },
    {
        "content": "<p>In the code sample I think the problematic value gets compiled away without the expect, hence no panic</p>",
        "id": 494416541,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737138535
    },
    {
        "content": "<p>The panic is definitely from the utf8_to_utf16 function</p>",
        "id": 494416597,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737138557
    },
    {
        "content": "<p>Did you run with RUST_BACKTRACE=1 ?</p>",
        "id": 494416689,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737138597
    },
    {
        "content": "<p>Okay, further testing - </p>\n<p>I added:</p>\n<div class=\"codehilite\"><pre><span></span><code>dbg utf16_2\ndbg utf16_3\ndbg utf16_4\n</code></pre></div>\n<p>All values print correctly.</p>\n<p>The problem is that the index value does not match the index value in the corresponding err values. If I change the index values in the expected errors, it does not panic. This is definitely in the <code>==</code> operator.</p>",
        "id": 494418071,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1737139135
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>[Utf16.roc:257] utf16_2 = (Err (BadUtf8 {index: 1, problem: ExpectedContinuation}))\n[Utf16.roc:258] utf16_3 = (Err (BadUtf8 {index: 1, problem: ExpectedContinuation}))\n[Utf16.roc:259] utf16_4 = (Err (BadUtf8 {index: 2, problem: ExpectedContinuation}))\n0 failed and 10 passed in 613 ms.\n</code></pre></div>",
        "id": 494418146,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1737139168
    },
    {
        "content": "<p>If I change the indexes in the expected values to match what is actually calculated, I can uncomment all lines and the expect passes. The panic only occurs if <code>utf16_n...index != index err_n...index</code></p>",
        "id": 494418860,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1737139447
    },
    {
        "content": "<p>Okay, I changed the algorithm which computes the index slightly to align with Str.from_utf8 (now returns index of first byte in character, rather than index byte which is an invalid continuation).</p>",
        "id": 494420374,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1737140017
    },
    {
        "content": "<p>However, the panic is still easily reproduced, just with different values of index.</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">expect</span>\n<span class=\"w\">    </span><span class=\"n\">utf8_2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mb\">0b1101_1111</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mb\">0b0011_1111</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"c1\"># if index is changed to anything besides 0, it panics</span>\n<span class=\"w\">    </span><span class=\"n\">err_2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"no\">Err</span><span class=\"p\">(</span><span class=\"no\">BadUtf8</span><span class=\"p\">({</span><span class=\"w\"> </span><span class=\"ss\">index</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">problem</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"no\">ExpectedContinuation</span><span class=\"w\"> </span><span class=\"p\">}))</span>\n<span class=\"w\">    </span><span class=\"n\">utf16_2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">utf8_to_utf16</span><span class=\"p\">(</span><span class=\"n\">utf8_2</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">utf16_2</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">err_2</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 494420387,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1737140020
    },
    {
        "content": "<p>Here is a fully independent min repro, which does not depend on <em>any</em> of my code:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">[]</span>\n\n<span class=\"n\">expect</span>\n<span class=\"w\">    </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"no\">Tag</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"ss\">i</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"no\">Tag</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"ss\">i</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n</code></pre></div>",
        "id": 494421015,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1737140223
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"518883\">Ian McLerran</span> <a href=\"#narrow/channel/463736-bugs/topic/Panic.20in.3A.20bumpalo-3.2E14.2E0.2Fsrc.2Fcollections.2Fraw_vec.2Ers/near/494421015\">said</a>:</p>\n<blockquote>\n<p>Here is a fully independent min repro, which does not depend on <em>any</em> of my code:</p>\n<p><div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">[]</span>\n\n<span class=\"n\">expect</span>\n<span class=\"w\">    </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"no\">Tag</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"ss\">i</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"no\">Tag</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"ss\">i</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>What roc command (<code>roc test</code>?) and version do you use?</p>",
        "id": 494422392,
        "sender_full_name": "Anton",
        "timestamp": 1737140663
    },
    {
        "content": "<p>Yeah, <code>roc test</code>, built from latest main about an hour ago</p>",
        "id": 494422494,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1737140700
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>roc built from commit 9d37c906fe, committed at 2025-01-16 04:38:55 UTC\n</code></pre></div>",
        "id": 494422590,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1737140739
    },
    {
        "content": "<p>I could not reproduce on ubuntu 22.04:</p>\n<div class=\"codehilite\"><pre><span></span><code>❯ ./target/release/roc version\nroc built from commit 9d37c906fe, committed at 2025-01-16 04:38:55 UTC\n\nroc on  HEAD (9d37c90) [?] is 📦 v0.0.1 via 🦀 v1.77.2 via ❄️  impure (nix-shell-env)\n❯ ./target/release/roc test temp.roc\n── EXPECT FAILED in temp.roc ───────────────────────────────────────────────────\n\nThis expectation failed:\n\n3│&gt;  expect\n4│&gt;      v1 = Tag { i: 1 }\n5│&gt;      v2 = Tag { i: 2 }\n6│&gt;      v1 == v2\n\nWhen it failed, these variables had these values:\n\nv1 : [Tag { i : Num * }]\nv1 = Tag { i: 1 }\n\nv2 : [Tag { i : Num * }]\nv2 = Tag { i: 2 }\n\n\n1 failed and 0 passed in 126 ms.\n</code></pre></div>",
        "id": 494423121,
        "sender_full_name": "Anton",
        "timestamp": 1737140940
    },
    {
        "content": "<p>Are you on macos?</p>",
        "id": 494423137,
        "sender_full_name": "Anton",
        "timestamp": 1737140945
    },
    {
        "content": "<p>Okay, I'm now on roc version: <code>roc built from commit 841e823235, committed at 2025-01-17 18:35:15 UTC</code></p>",
        "id": 494423392,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1737141041
    },
    {
        "content": "<p>Same issue with <code>841e823235</code>. And yeah, MacOS.</p>",
        "id": 494423442,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1737141061
    },
    {
        "content": "<p>Aarch64</p>",
        "id": 494423466,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1737141069
    },
    {
        "content": "<p>Okay, appologies. I had a different panic in that min repro from not using a proper module. Apparently this is not a min repro, but a different panic.</p>\n<div class=\"codehilite\"><pre><span></span><code>expect\n    v1 = Tag { i: 1 }\n    v2 = Tag { i: 2 }\n    v1 == v2\n</code></pre></div>",
        "id": 494427140,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1737142586
    },
    {
        "content": "<p>HOWEVER...</p>",
        "id": 494427171,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1737142594
    },
    {
        "content": "<p>The original min repro I posted before I edited (thought i found smaller) still produces it:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">[]</span>\n\n<span class=\"n\">expect</span>\n<span class=\"w\">    </span><span class=\"n\">utf8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mb\">0b1101_1111</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mb\">0b0011_1111</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"n\">err</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"no\">Err</span><span class=\"p\">(</span><span class=\"no\">BadUtf8</span><span class=\"p\">({</span><span class=\"w\"> </span><span class=\"ss\">index</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">problem</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"no\">ExpectedContinuation</span><span class=\"w\"> </span><span class=\"p\">}))</span>\n<span class=\"w\">    </span><span class=\"n\">str_res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">utf8</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"no\">Str</span><span class=\"o\">.</span><span class=\"n\">from_utf8</span>\n<span class=\"w\">    </span><span class=\"n\">str_res</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">err</span>\n</code></pre></div>",
        "id": 494427238,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1737142630
    },
    {
        "content": "<p>Appologies, didn't see this:<br>\n<span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> <a href=\"#narrow/channel/463736-bugs/topic/Panic.20in.3A.20bumpalo-3.2E14.2E0.2Fsrc.2Fcollections.2Fraw_vec.2Ers/near/494416689\">said</a>:</p>\n<blockquote>\n<p>Did you run with RUST_BACKTRACE=1 ?</p>\n</blockquote>\n<p>Here is the backtrace...</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;main&#39; panicked at /Users/imclerran/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bumpalo-3.14.0/src/lib.rs:1854:5:\nout of memory\nstack backtrace:\n   0: rust_begin_unwind\n             at /rustc/25ef9e3d85d934b27d9dada2f9dd52b1dc63bb04/library/std/src/panicking.rs:647:5\n   1: core::panicking::panic_fmt\n             at /rustc/25ef9e3d85d934b27d9dada2f9dd52b1dc63bb04/library/core/src/panicking.rs:72:14\n   2: bumpalo::oom\n   3: roc_repl_eval::eval::addr_to_ast\n   4: roc_repl_eval::eval::expr_of_tag\n   5: roc_repl_eval::eval::addr_to_ast\n   6: roc_repl_expect::get_values\n   7: roc_repl_expect::run::render_expect_failure\n   8: roc_cli::test\n   9: roc::main\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\n</code></pre></div>",
        "id": 494427540,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1737142755
    },
    {
        "content": "<p>That will help for sure</p>",
        "id": 494428911,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737143326
    },
    {
        "content": "<p>More stuff in the shared mem infra that is broke</p>",
        "id": 494433178,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1737145244
    },
    {
        "content": "<p>I was able to reproduce with:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">[]</span>\n\n<span class=\"n\">expect</span>\n<span class=\"w\">    </span><span class=\"n\">utf8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"mb\">0b1101_1111</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mb\">0b0011_1111</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"n\">err</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"no\">Err</span><span class=\"p\">(</span><span class=\"no\">BadUtf8</span><span class=\"p\">({</span><span class=\"w\"> </span><span class=\"ss\">index</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">problem</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"no\">ExpectedContinuation</span><span class=\"w\"> </span><span class=\"p\">}))</span>\n<span class=\"w\">    </span><span class=\"n\">str_res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">utf8</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"no\">Str</span><span class=\"o\">.</span><span class=\"n\">from_utf8</span>\n<span class=\"w\">    </span><span class=\"n\">str_res</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">err</span>\n</code></pre></div>",
        "id": 494504542,
        "sender_full_name": "Anton",
        "timestamp": 1737195912
    },
    {
        "content": "<p>Can you make an issue <span class=\"user-mention\" data-user-id=\"518883\">@Ian McLerran</span>?</p>",
        "id": 494504557,
        "sender_full_name": "Anton",
        "timestamp": 1737195929
    },
    {
        "content": "<p>Sure can!</p>",
        "id": 495074397,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1737471443
    },
    {
        "content": "<p>Issue @ <a href=\"https://github.com/roc-lang/roc/issues/7539\">#7539</a></p>",
        "id": 495081113,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1737472911
    }
]