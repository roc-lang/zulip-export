[
    {
        "content": "<p>Getting some interesting output after a simple change in my Day 5, Part 2 solution for AOC:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>ðŸ˜± LLVM errors when defining module; I wrote the full LLVM IR to \"main.ll\"\n\n Call parameter type does not match function signature!\n  %load_opaque2 = load { %list.RocList, %list.RocList, i64, float, i8 }, ptr %\"#arg1\", align 8, !dbg !1891\n ptr  %call_user_defined_compare_function = call fastcc i8 @\"#UserApp_67_14a58b912b778d42457329574d6284a94c25ccd4d26148cd2e979b6a93d4ec9\"(i64 %load_opaque, i64 %load_opaque1, { %list.RocList, %list.RocList, i64, float, i8 } %load_opaque2), !dbg !1891\n\nLocation: crates/compiler/build/src/program.rs:283:9\n</code></pre></div>\n<p>I don't have LSP in my normal Editor (neovim), but when I open in Zed - which is using the stable LSP - it's all good.  But when I build with latest I get the above.</p>",
        "id": 486390939,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733431693
    },
    {
        "content": "<p>Give me a sec and I'll push an update to my repo and paste a link</p>",
        "id": 486391094,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733431779
    },
    {
        "content": "<p>Here it is:</p>\n<p><a href=\"https://github.com/gamebox/aoc-2024/blob/main/day5/puzzle2/main.roc\">https://github.com/gamebox/aoc-2024/blob/main/day5/puzzle2/main.roc</a></p>",
        "id": 486394166,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733433129
    },
    {
        "content": "<p>Can you fully type <code>pageSprtByRules</code> and see what output you get?</p>",
        "id": 486403548,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733437383
    },
    {
        "content": "<p>I'm working on a reduction right now, almost done</p>",
        "id": 486403671,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733437450
    },
    {
        "content": "<p>I did, and it just gave me a weird type annotation warning</p>",
        "id": 486403721,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733437476
    },
    {
        "content": "<p>I don't think it likes that it only returns two of the three tags in the union maybe?</p>",
        "id": 486403757,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733437497
    },
    {
        "content": "<p>Are you typing it with the full union?</p>",
        "id": 486403952,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733437583
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kn\">module</span><span class=\"w\"> </span><span class=\"err\">[]</span>\n\n<span class=\"nv\">sortByRules</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">ruleMap</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nf\">\\</span><span class=\"nv\">_a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"nv\">afters</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">            </span><span class=\"kt\">Dict</span><span class=\"nf\">.</span><span class=\"nv\">get</span><span class=\"w\"> </span><span class=\"nv\">ruleMap</span><span class=\"w\"> </span><span class=\"nv\">b</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">withDefault</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n\n<span class=\"w\">        </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">isEmpty</span><span class=\"w\"> </span><span class=\"nv\">afters</span><span class=\"w\"> </span><span class=\"kr\">then</span><span class=\"w\"> </span><span class=\"kt\">LT</span><span class=\"w\"> </span><span class=\"kr\">else</span><span class=\"w\"> </span><span class=\"kt\">GT</span>\n\n<span class=\"nv\">calculateMiddleTotal</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">sorter</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">sortByRules</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Dict</span><span class=\"nf\">.</span><span class=\"nv\">empty</span><span class=\"w\"> </span><span class=\"p\">{})</span>\n<span class=\"w\">    </span><span class=\"nv\">fixed</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">sortWith</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"nv\">sorter</span>\n\n<span class=\"w\">    </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">len</span><span class=\"w\"> </span><span class=\"nv\">fixed</span>\n\n<span class=\"nv\">expect</span>\n<span class=\"w\">    </span><span class=\"nv\">calculateMiddleTotal</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"mi\">123</span>\n</code></pre></div>\n<p>Fails with</p>\n<div class=\"codehilite\"><pre><span></span><code>An internal compiler expectation was broken.\nThis is definitely a compiler bug.\nPlease file an issue here: &lt;https://github.com/roc-lang/roc/issues/new/choose&gt;\nErrors defining module:\nCall parameter type does not match function signature!\n  %load_opaque2 = load { %list.RocList, %list.RocList, i64, float, i8 }, ptr %&quot;#arg1&quot;, align 8, !dbg !752\n ptr  %call_user_defined_compare_function = call fastcc i8 @test_1_3_52aff1341cf42f5e6559a2cf028663f7bbbc7576ac1948fc58784a0613b79(%lis\nt.RocList %load_opaque, %list.RocList %load_opaque1, { %list.RocList, %list.RocList, i64, float, i8 } %load_opaque2), !dbg !752\n\n\nUncomment things nearby to see more details. IR written to `&quot;/var/folders/23/7wjdwv0n5t1b12fgvjmpc_fr0000gp/T/test.ll&quot;`\nLocation: crates/repl_expect/src/run.rs:561:9\n</code></pre></div>",
        "id": 486404243,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733437719
    },
    {
        "content": "<p>Nope, I left it with just a <code>_</code></p>",
        "id": 486404331,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733437762
    },
    {
        "content": "<p>I kinda wish the List builtin module had an exported type alias for the comparison union</p>",
        "id": 486404436,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733437803
    },
    {
        "content": "<p>Like Comp or something</p>",
        "id": 486404463,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733437816
    },
    {
        "content": "<p>I've had similar issues with Bool as well</p>",
        "id": 486404503,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733437837
    },
    {
        "content": "<p>The bug will either be the captures or the union. Not sure which. Should be easy to test though</p>",
        "id": 486420819,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733447081
    },
    {
        "content": "<p>I assume the actual generated mono is bad and that is why the llvm ir is bad</p>",
        "id": 486420848,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733447100
    },
    {
        "content": "<p>Maybe I can instrument the mono coming in?</p>",
        "id": 486426022,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733450392
    },
    {
        "content": "<p>We have a flag have mono verify iteself</p>",
        "id": 486431343,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733454053
    },
    {
        "content": "<p>Requires running roc through cargo I think (maybe works with any debug build of the compiler)</p>",
        "id": 486431440,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733454108
    },
    {
        "content": "<p><code>ROC_CHECK_MONO_IR=1</code></p>",
        "id": 486431532,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733454152
    },
    {
        "content": "<p>Cool</p>",
        "id": 486431572,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733454186
    },
    {
        "content": "<p>I called it like this and no additional logging:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nv\">ROC_CHECK_MONO_IR</span><span class=\"o\">=</span><span class=\"m\">1</span><span class=\"w\"> </span>cargo<span class=\"w\"> </span>run<span class=\"w\"> </span>--<span class=\"w\"> </span>build<span class=\"w\"> </span>~/Development/aoc-roc-2024/day5/puzzle2/main.roc\n</code></pre></div>",
        "id": 486432981,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733455196
    },
    {
        "content": "<p>Double checked and check_ir found no problems</p>",
        "id": 486433744,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733455743
    },
    {
        "content": "<p>Here's some source (Unrelated technically)</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>fixUpdate : RuleMap -&gt; (Update -&gt; Update)\nfixUpdate = \\ruleMap -&gt; \\update -&gt;\n    List.sortWith update (pageSortByRules ruleMap)\n</code></pre></div>\n<p>IR after RESET_REUSE:</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>procedure : `#UserApp.fixUpdate` {List {U32, U32}, List {U64, List U64}, U64, Float32, U8}\nprocedure = `#UserApp.fixUpdate` (`#UserApp.ruleMap`: {List {U32, U32}, List {U64, List U64}, U64, Float32, U8}):\n    ret `#UserApp.ruleMap`;\n</code></pre></div>",
        "id": 486434593,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733456344
    },
    {
        "content": "<p>BTW, I love this Roc/LLVMIR hybrid <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 486434637,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733456390
    },
    {
        "content": "<p>WOW, that's strange.</p>\n<p>The IR for the actual problem function:</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>procedure : `#UserApp.pageSortByRules` {List {U32, U32}, List {U64, List U64}, U64, Float32, U8}\nprocedure = `#UserApp.pageSortByRules` (`#UserApp.ruleMap`: {List {U32, U32}, List {U64, List U64}, U64, Float32, U8}):\n    ret `#UserApp.ruleMap`;\n</code></pre></div>\n<p>Which is exactly the same...</p>",
        "id": 486434758,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733456482
    },
    {
        "content": "<p>Is this some weird some of interning issue?</p>",
        "id": 486434768,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733456499
    },
    {
        "content": "<p>I'm going to have to learn a LOT to figure that out</p>",
        "id": 486434785,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733456519
    },
    {
        "content": "<p>That function body looks very wrong (and by that I mean nonexistant)</p>",
        "id": 486442743,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733462023
    },
    {
        "content": "<p>Yeah, gotta love functions becomes the Identity function random</p>",
        "id": 486496869,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733485724
    },
    {
        "content": "<p>And the types are wrong for one of them</p>",
        "id": 486496929,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733485750
    },
    {
        "content": "<p>Again the pageSortByRules  function is defined as :</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>pageSortByRules : RuleMap -&gt; (U64, U64 -&gt; _)\npageSortByRules = \\ruleMap -&gt; \\a, b -&gt;\n    afters : List U64\n    afters =\n        Dict.get ruleMap b\n        |&gt; Result.withDefault []\n\n    contains : Bool\n    contains = List.contains afters a\n\n    if contains then\n        LT\n    else\n        EQ\n</code></pre></div>",
        "id": 486497564,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733486011
    },
    {
        "content": "<p>Moving some functions back to lambdas....</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>fixUpdates : RuleMap, List Update -&gt; List Update\nfixUpdates = \\ruleMap, updates -&gt;\n    List.map updates \\update -&gt;\n        List.sortWith update \\a, b -&gt;\n            afters =\n                Dict.get ruleMap b\n                |&gt; Result.withDefault []\n\n            contains = List.contains afters a\n\n            if contains then\n                LT\n            else\n                EQ\n</code></pre></div>\n<p>Produces this mono after specialization</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>procedure : `#UserApp.fixUpdates` List List U64\nprocedure = `#UserApp.fixUpdates` (`#UserApp.ruleMap`: {List {U32, U32}, List {U64, List U64}, U64, Float32, U8}, `#UserApp.updates`: List List U64):\n    let `#UserApp.116` : List List U64 = CallByName `List.map` `#UserApp.updates` `#UserApp.ruleMap`;\n    ret `#UserApp.116`;\n</code></pre></div>\n<p>Which to me seems wrong right from the call to <a href=\"http://List.map\">List.map</a>.  I would expect a #UserMap.DD type procedure to be passed as the second argument.</p>",
        "id": 486503852,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733488294
    },
    {
        "content": "<p>I found a possible candidate</p>\n<div class=\"codehilite\"><pre><span></span><code>procedure : `#UserApp.66` List U64\nprocedure = `#UserApp.66` (`#UserApp.update`: List U64, `#UserApp.ruleMap`: {List {U32, U32}, List {U64, List U64}, U64, Float32, U8}):\n    let `#UserApp.119` : List U64 = CallByName `List.sortWith` `#UserApp.update` `#UserApp.ruleMap`;\n    ret `#UserApp.119`;\n</code></pre></div>\n<p>And that call is also wrong</p>",
        "id": 486504082,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733488369
    },
    {
        "content": "<p>But maybe my brain isn't processing the type signatures right here.</p>",
        "id": 486504209,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733488428
    },
    {
        "content": "<p>I'm guessing that <code>{List {U32, U32}, List {U64, List U64}, U64, Float32, U8}</code> is actually the closure struct</p>",
        "id": 486504340,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733488481
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/channel/463736-bugs/topic/LLVM.20IR.20output.20in.20compiler.20crash.20during.20AOC!/near/486404243\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kn\">module</span><span class=\"w\"> </span><span class=\"err\">[]</span>\n\n<span class=\"nv\">sortByRules</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">ruleMap</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nf\">\\</span><span class=\"nv\">_a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"nv\">afters</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">            </span><span class=\"kt\">Dict</span><span class=\"nf\">.</span><span class=\"nv\">get</span><span class=\"w\"> </span><span class=\"nv\">ruleMap</span><span class=\"w\"> </span><span class=\"nv\">b</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">withDefault</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n\n<span class=\"w\">        </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">isEmpty</span><span class=\"w\"> </span><span class=\"nv\">afters</span><span class=\"w\"> </span><span class=\"kr\">then</span><span class=\"w\"> </span><span class=\"kt\">LT</span><span class=\"w\"> </span><span class=\"kr\">else</span><span class=\"w\"> </span><span class=\"kt\">GT</span>\n\n<span class=\"nv\">calculateMiddleTotal</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">sorter</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">sortByRules</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Dict</span><span class=\"nf\">.</span><span class=\"nv\">empty</span><span class=\"w\"> </span><span class=\"p\">{})</span>\n<span class=\"w\">    </span><span class=\"nv\">fixed</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">sortWith</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"nv\">sorter</span>\n\n<span class=\"w\">    </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">len</span><span class=\"w\"> </span><span class=\"nv\">fixed</span>\n\n<span class=\"nv\">expect</span>\n<span class=\"w\">    </span><span class=\"nv\">calculateMiddleTotal</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"mi\">123</span>\n</code></pre></div>\n<p>Fails with</p>\n<p><div class=\"codehilite\"><pre><span></span><code>An internal compiler expectation was broken.\nThis is definitely a compiler bug.\nPlease file an issue here: &lt;https://github.com/roc-lang/roc/issues/new/choose&gt;\nErrors defining module:\nCall parameter type does not match function signature!\n  %load_opaque2 = load { %list.RocList, %list.RocList, i64, float, i8 }, ptr %&quot;#arg1&quot;, align 8, !dbg !752\n ptr  %call_user_defined_compare_function = call fastcc i8 @test_1_3_52aff1341cf42f5e6559a2cf028663f7bbbc7576ac1948fc58784a0613b79(%lis\nt.RocList %load_opaque, %list.RocList %load_opaque1, { %list.RocList, %list.RocList, i64, float, i8 } %load_opaque2), !dbg !752\n\n\nUncomment things nearby to see more details. IR written to `&quot;/var/folders/23/7wjdwv0n5t1b12fgvjmpc_fr0000gp/T/test.ll&quot;`\nLocation: crates/repl_expect/src/run.rs:561:9\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Don't know how you ran this, but I just tried and can't reproduce on stable or latest</p>",
        "id": 486524560,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733494548
    },
    {
        "content": "<p>If I actually use this module, I get a illegal Option unwrap on this line:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"fm\">debug_assert!</span><span class=\"p\">(</span><span class=\"n\">unspecialized</span><span class=\"p\">.</span><span class=\"n\">is_empty</span><span class=\"p\">());</span>\n</code></pre></div>",
        "id": 486525322,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733494799
    },
    {
        "content": "<p>Ok, I had to do one more thing than this, annotate that the sorter's return type is _</p>",
        "id": 486527027,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733495354
    },
    {
        "content": "<p>If I annotate it with the expected type, but keep the implementation the same, same error.</p>",
        "id": 486527495,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733495510
    },
    {
        "content": "<p>If I annotate it to return the exact Tag union it returns, a mismatch</p>",
        "id": 486527588,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733495529
    },
    {
        "content": "<p>If I annotate it to return the Tag union it returns but make it open, a mismatch</p>",
        "id": 486527645,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733495546
    },
    {
        "content": "<p>Actually, I could reproduce with yours.  I just had a weird editor bug where it was renaming Test.roc to test.roc</p>",
        "id": 486528028,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733495658
    },
    {
        "content": "<p>If I need a function that returns [A, B C], and I get a function that returns just [A, B] that should not be a mismatch.  Comparing tag unions should be something like Set.isSubset a b (Making that up)</p>",
        "id": 486528491,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733495798
    },
    {
        "content": "<p>And {A, B} is a subset of {A, B, C}</p>",
        "id": 486528567,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733495821
    },
    {
        "content": "<p>Interesting to note that running <code>roc build --optimize</code> causes a seg fault instead <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 486529666,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733496175
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"361169\">@Anton</span>  as a not-Rust-pro, how do you cause a seg fault in rust outside of unsafe?  I'm not saying this isn't happening in an unsafe block, but just want to know if we have known edges were that can happen.</p>",
        "id": 486529956,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733496268
    },
    {
        "content": "<p>Ok, I just read it myself.  OOB slice index, dangling reference, uninitialized variables, and even some panics</p>",
        "id": 486532005,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733496940
    },
    {
        "content": "<p>Hmm segfaults in the compiler are quite rare, but yeah, do a debug build <code>cargo build --bin roc</code> and run <code>valgrind ./target/debug/roc YOURCOMMAND</code> and share the output here</p>",
        "id": 486532604,
        "sender_full_name": "Anton",
        "timestamp": 1733497119
    },
    {
        "content": "<p>To be clear the segfault is happening during <code>roc build --optimize</code>? Not when running the produced binary?</p>",
        "id": 486532737,
        "sender_full_name": "Anton",
        "timestamp": 1733497161
    },
    {
        "content": "<p>Yes</p>",
        "id": 486535248,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733497909
    },
    {
        "content": "<p>And I've minimized it to a function returning a tag union that is a closure referencing specifically a <code>Dict</code></p>",
        "id": 486535441,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733497965
    },
    {
        "content": "<p>A custom tag union doesn't do it, a list doesn't do it, a struct doesn't do it</p>",
        "id": 486536545,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733498299
    },
    {
        "content": "<p>Valgrind may be able to give additional hints even though you already have the function</p>",
        "id": 486536821,
        "sender_full_name": "Anton",
        "timestamp": 1733498386
    },
    {
        "content": "<p>If memory serves, Valgrind can't run on arm64/MacOS on my version of the OS</p>",
        "id": 486540034,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733499401
    },
    {
        "content": "<p>Ah yes, didn't know you were on macos, I can run it, is it just <code>roc build --optimize</code> on <a href=\"https://github.com/gamebox/aoc-2024/blob/main/day5/puzzle2/main.roc\">https://github.com/gamebox/aoc-2024/blob/main/day5/puzzle2/main.roc</a> ?</p>",
        "id": 486542218,
        "sender_full_name": "Anton",
        "timestamp": 1733500049
    },
    {
        "content": "<p>Yes</p>",
        "id": 486547940,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733501678
    },
    {
        "content": "<p>Thank you</p>",
        "id": 486547951,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733501682
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> <a href=\"#narrow/stream/463736-bugs/topic/LLVM.20IR.20output.20in.20compiler.20crash.20during.20AOC!/near/486528491\">said</a>:</p>\n<blockquote>\n<p>If I need a function that returns [A, B C], and I get a function that returns just [A, B] that should not be a mismatch.  Comparing tag unions should be something like Set.isSubset a b (Making that up)</p>\n</blockquote>\n<p>Yeah, we made functions return open tag unions by default, so I believe this should work.</p>",
        "id": 486550843,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733502441
    },
    {
        "content": "<p>It gives a mismatch and specifies a union with the tag that is not in the return value</p>",
        "id": 486551039,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733502487
    },
    {
        "content": "<p>Oh, but it won't work cause you pass it to something as a lambda</p>",
        "id": 486551078,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733502497
    },
    {
        "content": "<p>I bet that unification doesn't understand the open tag return type and how to unify</p>",
        "id": 486551164,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733502524
    },
    {
        "content": "<p>?</p>",
        "id": 486551174,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733502526
    },
    {
        "content": "<p>That should be a simple unification</p>",
        "id": 486551213,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733502540
    },
    {
        "content": "<p>Probably. Just guessing it isn't implemented. Returning open tags was a feature added to roc later. It probably didn't consider lambdas when it was written. Probably just considered returned values from calls</p>",
        "id": 486551652,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733502663
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> might remember from back in the day <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 486552236,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1733502841
    },
    {
        "content": "<p>I'm just getting \"LLVM errors when defining module\" no segfault, what's your roc commit <span class=\"user-mention\" data-user-id=\"781658\">@Anthony Bullard</span>?</p>",
        "id": 486552351,
        "sender_full_name": "Anton",
        "timestamp": 1733502867
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> 0274d9b9971c91975c82a91c9e3057e6365f9701</p>",
        "id": 486553108,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733503105
    },
    {
        "content": "<p>That's with debug build</p>",
        "id": 486553428,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733503207
    },
    {
        "content": "<p>I can try with release if that makes a diff</p>",
        "id": 486553454,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733503217
    },
    {
        "content": "<p>It made no diff <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 486553667,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733503299
    },
    {
        "content": "<p>I'm going to Linux-ify my old 2019 Mac Mini sometime soon, but right now, only have my M1 Pro MacBook Pro</p>",
        "id": 486553906,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733503368
    },
    {
        "content": "<p>I'm only going so deep on this right now because it's the second time in 5 days of AOC I've hit a compiler crash when doing something rather mundane in my solution - and couldn't overcome it without using a completely different solution.   I appreciate all of your help <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> <span class=\"user-mention\" data-user-id=\"361169\">@Anton</span></p>",
        "id": 486554322,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733503504
    },
    {
        "content": "<p>I still did not get a segfault on that commit but I'm running it with valgrind now anyway, it's taking a long time but that's expected</p>",
        "id": 486554672,
        "sender_full_name": "Anton",
        "timestamp": 1733503611
    },
    {
        "content": "<p>Interesting.  I get it every time I hit this bug</p>",
        "id": 486554826,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733503653
    },
    {
        "content": "<p>Running this:</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>module [calculateMiddleTotal]\n\ncalculateMiddleTotal = \\{} -&gt;\n    rulesMap : List U64\n    rulesMap = []\n    sorter = \\_a, _b -&gt; if List.isEmpty rulesMap then GT else LT\n    fixed = List.sortWith [] sorter\n    List.len fixed\n\nexpect\n    calculateMiddleTotal {} == 123\n</code></pre></div>\n<p>Results in no error with <code>build --optimize</code></p>",
        "id": 486555061,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733503716
    },
    {
        "content": "<p>But this does</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>module [calculateMiddleTotal]\n\ncalculateMiddleTotal = \\{} -&gt;\n    rulesMap : Dict U64 (List Str)\n    rulesMap = Dict.empty {}\n    sorter = \\_a, _b -&gt; if Dict.isEmpty rulesMap then GT else LT\n    fixed = List.sortWith [] sorter\n    List.len fixed\n\nexpect\n    calculateMiddleTotal {} == 123\n</code></pre></div>",
        "id": 486555150,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733503745
    },
    {
        "content": "<p>Sorry, a segfault</p>",
        "id": 486555172,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733503752
    },
    {
        "content": "<p>And most interestingly to me, this also doesn't segfault and compiles as expected:</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>module [calculateMiddleTotal]\n\ncalculateMiddleTotal = \\{} -&gt;\n    rulesMap : Dict U64 (List Str)\n    rulesMap = Dict.empty {}\n    sorter = \\a, b -&gt; if a &gt; b then GT else LT\n    fixed = List.sortWith [] sorter\n    List.len fixed\n\nexpect\n    calculateMiddleTotal {} == 123\n</code></pre></div>",
        "id": 486555486,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733503845
    },
    {
        "content": "<p>The only difference is we don't close over the Dict</p>",
        "id": 486555530,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733503861
    },
    {
        "content": "<p>This DOES fail with a segfault (using Result * *)</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>module [calculateMiddleTotal]\n\ncalculateMiddleTotal = \\{} -&gt;\n    rulesMap : Result U64 [BooHoo]\n    rulesMap = Err BooHoo\n    sorter = \\_a, _b -&gt; if Result.isOk rulesMap then GT else LT\n    fixed = List.sortWith [] sorter\n    List.len fixed\n\nexpect\n    calculateMiddleTotal {} == 123\n</code></pre></div>",
        "id": 486555995,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733503986
    },
    {
        "content": "<p>Also fails with segfault when using Set:</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>module [calculateMiddleTotal]\n\ncalculateMiddleTotal = \\{} -&gt;\n    rulesMap : Set U64\n    rulesMap = Set.empty {}\n    sorter = \\_a, _b -&gt; if Set.isEmpty rulesMap then GT else LT\n    fixed = List.sortWith [] sorter\n    List.len fixed\n\nexpect\n    calculateMiddleTotal {} == 123\n</code></pre></div>",
        "id": 486556216,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733504046
    },
    {
        "content": "<p>Jesus, it even fails with just closing over a <code>Str</code></p>",
        "id": 486556821,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733504228
    },
    {
        "content": "<p>Supplying the same function (in any permutation) to something like <code>List.map</code> is no issue</p>",
        "id": 486557188,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733504333
    },
    {
        "content": "<p>And it always seems happy with closing over (List *)</p>",
        "id": 486557340,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733504376
    },
    {
        "content": "<blockquote>\n<p>Jesus, it even fails with just closing over a <code>Str</code></p>\n</blockquote>\n<p>That is nice actually, it simplifies the bug no?</p>",
        "id": 486557646,
        "sender_full_name": "Anton",
        "timestamp": 1733504452
    },
    {
        "content": "<p>can you share the example with Str?</p>",
        "id": 486557721,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1733504472
    },
    {
        "content": "<p>But it works with just <code>U64</code> <span class=\"user-mention\" data-user-id=\"361169\">@Anton</span></p>",
        "id": 486557734,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733504477
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> as you please:</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>module [calculateMiddleTotal]\n\ncalculateMiddleTotal = \\{} -&gt;\n    rulesMap : Str\n    rulesMap = \"Hello\"\n    sorter = \\_a, _b -&gt; if Str.isEmpty rulesMap then GT else LT\n    fixed = List.sortWith [] sorter\n    List.len fixed\n\nexpect\n    calculateMiddleTotal {} == 123\n</code></pre></div>",
        "id": 486557861,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733504521
    },
    {
        "content": "<p>I'm literally just changing three things, the type annotation of rulesMap, the value of it, and the condition in the <code>if</code> inside of the lambda to match that type</p>",
        "id": 486558015,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733504562
    },
    {
        "content": "<p>ty, taking a look</p>",
        "id": 486558176,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1733504607
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span>  Here's the mono for it, very interesting:</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>procedure : `Test.calculateMiddleTotal` U64\nprocedure = `Test.calculateMiddleTotal` (`Test.7`: {}):\n    let `Test.rulesMap` : Str = \"Hello\";\n    let `Test.12` : List [] = Array [];\n    let `Test.14` : Str = \"UnresolvedTypeVar: specialize_symbol res_layout\";\n    Crash `Test.14`\n</code></pre></div>",
        "id": 486558340,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733504656
    },
    {
        "content": "<p>lol</p>",
        "id": 486558361,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1733504664
    },
    {
        "content": "<p>I'm assuming that's an Easter Egg for a unexpected condition?</p>",
        "id": 486558428,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733504687
    },
    {
        "content": "<p>i have no idea, probably</p>",
        "id": 486558475,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1733504700
    },
    {
        "content": "<p>Remember, this is supposed to be a minimal repro for the problem</p>",
        "id": 486558516,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733504711
    },
    {
        "content": "<p>yep</p>",
        "id": 486558593,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1733504735
    },
    {
        "content": "<p>And when running against the real code, the lambda body was instead becoming the <code>id</code> function</p>",
        "id": 486558612,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733504742
    },
    {
        "content": "<p>Here's the mono for that</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>procedure : `#UserApp.fixUpdate` {List {U32, U32}, List {U64, List U64}, U64, Float32, U8}\nprocedure = `#UserApp.fixUpdate` (`#UserApp.ruleMap`: {List {U32, U32}, List {U64, List U64}, U64, Float32, U8}):\n    ret `#UserApp.ruleMap`;\n</code></pre></div>",
        "id": 486558749,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733504774
    },
    {
        "content": "<p>From this source:</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>fixUpdate : RuleMap -&gt; (Update -&gt; Update)\nfixUpdate = \\ruleMap -&gt; \\update -&gt;\n    List.sortWith update (pageSortByRules ruleMap)\n</code></pre></div>",
        "id": 486558836,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733504800
    },
    {
        "content": "<p>My eyes still don't feel trained to read the mono ir very well, but that definitely looks like <code>id</code> to me</p>",
        "id": 486559008,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733504857
    },
    {
        "content": "<p>It has something to do with the layout of the closed over value I'm assuming</p>",
        "id": 486559215,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733504917
    },
    {
        "content": "<p>I don't even know yet what to instrument to find the issue.  But I'm trying to learn :-)</p>",
        "id": 486559297,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733504955
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> <a href=\"#narrow/channel/463736-bugs/topic/LLVM.20IR.20output.20in.20compiler.20crash.20during.20AOC!/near/486559008\">said</a>:</p>\n<blockquote>\n<p>My eyes still don't feel trained to read the mono ir very well, but that definitely looks like <code>id</code> to me</p>\n</blockquote>\n<p>For <code>fixUpdate</code> you mean?</p>",
        "id": 486559370,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1733504988
    },
    {
        "content": "<p>Yeah, but it looks like it takes an arg <code>#UserApp.ruleMap</code> of the type <code>{List {U32, U32}, List {U64, List U64}, U64, Float32, U8}</code> and returns the same type, which is correct since it <code>ret</code>s  that arg as the only instruction.</p>",
        "id": 486559723,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733505096
    },
    {
        "content": "<p>yes that's fine. But it's not returning a function, it's returning the captures of the defunctionalized function</p>",
        "id": 486559886,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1733505150
    },
    {
        "content": "<p>Ok, so that's the closure env?</p>",
        "id": 486559916,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733505165
    },
    {
        "content": "<p>yes, the env of the underlying <code>\\update -&gt; ...</code> fn</p>",
        "id": 486559958,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1733505181
    },
    {
        "content": "<p>That's what I suspected</p>",
        "id": 486559987,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733505191
    },
    {
        "content": "<p>wait so for the List example you're seeing a crash when generating LLVM code right?</p>",
        "id": 486560151,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1733505246
    },
    {
        "content": "<p>something like this</p>\n<div class=\"codehilite\"><pre><span></span><code>An internal compiler expectation was broken.\nThis is definitely a compiler bug.\nPlease file an issue here: &lt;https://github.com/roc-lang/roc/issues/new/choose&gt;\nErrors defining module:\nCall parameter type does not match function signature!\n  %load_opaque2 = load %str.RocStr, ptr %&quot;#arg1&quot;, align 8, !dbg !491\n ptr  %call_user_defined_compare_function = call fastcc i8 @Test_sorter_e84248fb50d0833361d0417df114b0b3b3448fff97c39cdde963b09a9aebb8(ptr %load_opaque, ptr %load_opaque1, %str.RocStr %load_opaque2), !dbg !491\n</code></pre></div>",
        "id": 486560167,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1733505256
    },
    {
        "content": "<p>No List is the only thing that works</p>",
        "id": 486560365,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733505335
    },
    {
        "content": "<p>err sorry the Str one you posted earlier</p>",
        "id": 486560395,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1733505349
    },
    {
        "content": "<p><a href=\"#narrow/channel/463736-bugs/topic/LLVM.20IR.20output.20in.20compiler.20crash.20during.20AOC!/near/486558340\">https://roc.zulipchat.com/#narrow/channel/463736-bugs/topic/LLVM.20IR.20output.20in.20compiler.20crash.20during.20AOC!/near/486558340</a><br>\nthis one</p>",
        "id": 486560419,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1733505358
    },
    {
        "content": "<p>Similar, yeah</p>\n<div class=\"codehilite\"><pre><span></span><code>An internal compiler expectation was broken.\nThis is definitely a compiler bug.\nPlease file an issue here: &lt;https://github.com/roc-lang/roc/issues/new/choose&gt;\nðŸ˜± LLVM errors when defining module; I wrote the full LLVM IR to &quot;main.ll&quot;\n\n Call parameter type does not match function signature!\n  %load_opaque2 = load %str.RocStr, ptr %&quot;#arg1&quot;, align 8, !dbg !881\n ptr  %call_user_defined_compare_function = call fastcc i8 @Test_sorter_2c7d993eadf275d994a1f98b824972fece3cfca6b6ac52dd7bb717e1f5753(ptr %load_opaque, ptr %load_opaque1, %str.RocStr %load_opaque2), !dbg !881\n\nLocation: crates/compiler/build/src/program.rs:283:9\n</code></pre></div>",
        "id": 486560543,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733505393
    },
    {
        "content": "<p>ok well the code generation is definitely wrong</p>",
        "id": 486562612,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1733506071
    },
    {
        "content": "<p>ive forgotten how all this works lol</p>",
        "id": 486563053,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1733506182
    },
    {
        "content": "<p>the code needs to be simplified a lot</p>",
        "id": 486563076,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1733506192
    },
    {
        "content": "<p>Do you think the mono is wrong or the llvm code gen is wrong?</p>",
        "id": 486563530,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733506312
    },
    {
        "content": "<p>Mono is doing something wrong</p>",
        "id": 486563679,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733506343
    },
    {
        "content": "<p>no mono is fine</p>",
        "id": 486563707,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1733506353
    },
    {
        "content": "<p>the llvm gen is producing the wrong types</p>",
        "id": 486563814,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1733506384
    },
    {
        "content": "<p>This is how we get that llvm I showed the the <code>Str</code> value being closed over:</p>\n<p>In mono/src/ir.rs (in the function specialize_symbol)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">partial_proc</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">arg_var</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">arg_var</span><span class=\"p\">.</span><span class=\"n\">unwrap_or</span><span class=\"p\">(</span><span class=\"n\">partial_proc</span><span class=\"p\">.</span><span class=\"n\">annotation</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"c1\">// this symbol is a function, that is used by-name (e.g. as an argument to another</span>\n<span class=\"w\">            </span><span class=\"c1\">// function). Register it with the current variable, then create a function pointer</span>\n<span class=\"w\">            </span><span class=\"c1\">// to it in the IR.</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">res_layout</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">return_on_layout_error</span><span class=\"o\">!</span><span class=\"p\">(</span>\n<span class=\"w\">                </span><span class=\"n\">env</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">layout_cache</span><span class=\"p\">.</span><span class=\"n\">raw_from_var</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">.</span><span class=\"n\">arena</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg_var</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">env</span><span class=\"p\">.</span><span class=\"n\">subs</span><span class=\"p\">),</span>\n<span class=\"w\">                </span><span class=\"s\">\"specialize_symbol res_layout\"</span>\n<span class=\"w\">            </span><span class=\"p\">);</span>\n</code></pre></div>",
        "id": 486563858,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733506397
    },
    {
        "content": "<p>It's different for the other cases</p>",
        "id": 486563913,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733506412
    },
    {
        "content": "<p>That's for rooting it to llvm. I'll definitely take a look later today. I haven't followed everything, what is the minimal roc file to repro?</p>",
        "id": 486566286,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733507230
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> These two have different, but similar issues:</p>\n<p><a href=\"#narrow/channel/463736-bugs/topic/LLVM.20IR.20output.20in.20compiler.20crash.20during.20AOC!/near/486557861\">https://roc.zulipchat.com/#narrow/channel/463736-bugs/topic/LLVM.20IR.20output.20in.20compiler.20crash.20during.20AOC!/near/486557861</a><br>\n<a href=\"#narrow/channel/463736-bugs/topic/LLVM.20IR.20output.20in.20compiler.20crash.20during.20AOC!/near/486555486\">https://roc.zulipchat.com/#narrow/channel/463736-bugs/topic/LLVM.20IR.20output.20in.20compiler.20crash.20during.20AOC!/near/486555486</a></p>",
        "id": 486567117,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733507563
    },
    {
        "content": "<p>Update: valgrind did not report any errors</p>",
        "id": 486570545,
        "sender_full_name": "Anton",
        "timestamp": 1733508991
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 486571478,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733509344
    },
    {
        "content": "<p>FWIW I got more or less the same error as the one at the top of this thread doing yesterday. The context was <code>List.sortWith</code> and at first I thought it might be the rather specific function I had (which was a closure over a Dict) ... but replacing it even with the most tediously vanilla function produced the same issue. I ended up having to write my own mergesort rather than use <code>List.sortWith</code>. I realise that's horribly unspecific but I hadn't looked at this thread so didn't save the output, but just shrugged and moved on, so I don't have the code I was running. I do have the LLVM IR, if that's of any interest, but I have no idea what I'd be looking for!</p>",
        "id": 486573964,
        "sender_full_name": "Paul Stanley",
        "timestamp": 1733510330
    },
    {
        "content": "<p>Yeah, probably a bug with calling the zig builtin for sortWith</p>",
        "id": 486576074,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733511075
    },
    {
        "content": "<p>I want to test this case with other functions that expect a callback that returns a tag union</p>",
        "id": 486587542,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733515987
    },
    {
        "content": "<p>Outside of say Result</p>",
        "id": 486587614,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733516027
    },
    {
        "content": "<p>Ok, definitely seems like only <code>List.sortWith</code></p>",
        "id": 486597493,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733520517
    },
    {
        "content": "<p>I just checked <code>List.walkWith</code> which has a callback which has a similar unnamed tag union and no issues with the closure over <code>Dict k v</code></p>",
        "id": 486597573,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733520569
    },
    {
        "content": "<p>Damn, it's been so long since I worked with LLVM IR, I didn't even know about opaque pointers!</p>",
        "id": 486601708,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733522720
    },
    {
        "content": "<p>Ok, so we are loading a struct from a pointer and then supplying that as the third arg to the sorter, which is expecting three pointers.  So the whole problem is SOMETHING thinks the layout allows it to be passed by value, but SOMETHING else is like \"Nah, give me a pointer bro\"</p>",
        "id": 486602440,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733523131
    },
    {
        "content": "<p>I think if the llvmir is this:</p>\n<p>```llvm<br>\n  %call_user_defined_compare_function = call fastcc i8 @Test_sorter_ebcdc7d352ecfa1e7d1b4ba0644f3ace5e7298b5a4113365f27eee831460e3a2(ptr %load_opaque, ptr %load_opaque1, ptr %\"#arg1\"), !dbg !924</p>\n<div class=\"codehilite\"><pre><span></span><code>Then it will work as expected, minus probably some other detail I&#39;m missing\n</code></pre></div>",
        "id": 486602700,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733523263
    },
    {
        "content": "<p>Can I just build the main.ll with llvm directly?</p>",
        "id": 486602728,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733523279
    },
    {
        "content": "<p>Zig is pretty nice with llvm, <code>zig build-exe -lc main.ll host-stub-things.zig</code> you probably will need to provide an implementation for roc_alloc and friends in another zig file</p>",
        "id": 486603219,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733523508
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> Can I just give it an <code>ll</code> file and a platform <code>.a</code> file?</p>",
        "id": 486603418,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733523624
    },
    {
        "content": "<p>Thats the easiest</p>",
        "id": 486603438,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733523639
    },
    {
        "content": "<p>I was trying llc and then clang</p>",
        "id": 486603443,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733523642
    },
    {
        "content": "<p>Let's see</p>",
        "id": 486603449,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733523649
    },
    {
        "content": "<p>Gotta find the platform cache on my system</p>",
        "id": 486603463,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733523659
    },
    {
        "content": "<p>I found it the other day...</p>",
        "id": 486603494,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733523675
    },
    {
        "content": "<p><code>~/.cache/roc/...</code></p>",
        "id": 486603531,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733523697
    },
    {
        "content": "<p>Im on my phone rn..</p>",
        "id": 486603608,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733523724
    },
    {
        "content": "<p>I found it, thanks Luke.</p>",
        "id": 486606338,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733525303
    },
    {
        "content": "<p>Ok, verified that we just to NOT load the struct from the pointer</p>",
        "id": 486606364,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733525318
    },
    {
        "content": "<p>Now time to figure out where in the hell we make that decision :-)</p>",
        "id": 486606386,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733525331
    },
    {
        "content": "<p><code>gen_llvm</code>?</p>",
        "id": 486606445,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733525372
    },
    {
        "content": "<p>Yeah, I got that part</p>",
        "id": 486606485,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733525399
    },
    {
        "content": "<p>Probably around <code>is_passed_by_reference</code> in <code>layout.rs</code> I'd assume</p>",
        "id": 486606620,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733525486
    },
    {
        "content": "<p>I'll do this goose chase later</p>",
        "id": 486606639,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733525497
    },
    {
        "content": "<p>But good to know that I'm making progress that others probably could have done in 30 minutes in instead 2 days</p>",
        "id": 486606686,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733525522
    },
    {
        "content": "<p>:-)</p>",
        "id": 486606727,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733525524
    },
    {
        "content": "<p>Thanks for sharing the action... this is better than any Netflix series</p>",
        "id": 486606751,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733525542
    },
    {
        "content": "<p>I'm showing my thinking so that hopefully a more experienced dev on the team can help me avoid deadends and give me tips.</p>",
        "id": 486606785,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733525571
    },
    {
        "content": "<p>I came in knowing nothing about Roc's compiler</p>",
        "id": 486606799,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733525581
    },
    {
        "content": "<p>Ok, I definitely found where the issue manifests, hopefully will found the issue soon.</p>",
        "id": 486616453,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733532453
    },
    {
        "content": "<p>Yeah, you seem to be diving into this quite well</p>",
        "id": 486616901,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733532802
    },
    {
        "content": "<p>The fun of c abi and such</p>",
        "id": 486616911,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733532819
    },
    {
        "content": "<p>Yeah, I just can't figure out why the hell it looks at the roc function's type, and says \"I see your llvm type is <code>i8 (ptr, ptr, ptr)</code>, but I'm going to give you <code>(ptr, ptr, { %list.RocList, %list.RocList, i64, float, i8 })</code> anyway\"</p>",
        "id": 486617229,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733533071
    },
    {
        "content": "<p>LLVM decides the value type is a Struct instead of a value</p>",
        "id": 486617612,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733533348
    },
    {
        "content": "<p>So it seems that the function type is wrong</p>",
        "id": 486617903,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733533581
    },
    {
        "content": "<p>Shit....this is either coming from inkwell, or we are doing something weird when populating the environment</p>",
        "id": 486618334,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733533943
    },
    {
        "content": "<p>I wonder if it's worth testing out this branch <a href=\"https://github.com/roc-lang/roc/pull/6921\">https://github.com/roc-lang/roc/pull/6921</a></p>",
        "id": 486618396,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733534018
    },
    {
        "content": "<p>The LLVM upgrade is basically done... we just have some CI shenanigans to land that upgrade</p>",
        "id": 486618419,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733534040
    },
    {
        "content": "<p>Does it upgrade inkwell?</p>",
        "id": 486618473,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733534067
    },
    {
        "content": "<p>Yes</p>",
        "id": 486618478,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733534071
    },
    {
        "content": "<p>We are currently using an older custom fork, but this upgrades us to a more recent release</p>",
        "id": 486618492,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733534096
    },
    {
        "content": "<p>Reminder that llvm does not deal with abi</p>",
        "id": 486620986,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733536015
    },
    {
        "content": "<p>It leaves that up to us</p>",
        "id": 486621000,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733536024
    },
    {
        "content": "<p>It passes a pointer if we tell it to pass a pointer. It passes a struct if we tell it to pass a struct</p>",
        "id": 486621016,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733536044
    },
    {
        "content": "<p>Yes by the function type</p>",
        "id": 486621038,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733536063
    },
    {
        "content": "<p>So likely, this is a case of two different parts of our code disagreeing (that or zig generated llvm following cabi and us disagreeing)</p>",
        "id": 486621093,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733536091
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> <a href=\"#narrow/stream/463736-bugs/topic/LLVM.20IR.20output.20in.20compiler.20crash.20during.20AOC!/near/486621038\">said</a>:</p>\n<blockquote>\n<p>Yes by the function type</p>\n</blockquote>\n<p>Not completely if I recall. I think we generate a call instruction without verifying the llvm function signature. It is solely generated off the roc mono types</p>",
        "id": 486621128,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733536136
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"781658\">@Anthony Bullard</span> ... I'm also interested in learning more about this aspect of our compiler. If you keep dropping thoughts in here as you go I would appreciate that. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> </p>\n<p>I've been poking at the compiler from both ends, but mono is still black magic</p>",
        "id": 486621320,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733536315
    },
    {
        "content": "<p>I have a lot to learn still</p>",
        "id": 486621523,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733536480
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> <a href=\"#narrow/channel/463736-bugs/topic/LLVM.20IR.20output.20in.20compiler.20crash.20during.20AOC!/near/486602700\">said</a>:</p>\n<blockquote>\n<p>I think if the llvmir is this:</p>\n<p>```llvm<br>\n  %call_user_defined_compare_function = call fastcc i8 @Test_sorter_ebcdc7d352ecfa1e7d1b4ba0644f3ace5e7298b5a4113365f27eee831460e3a2(ptr %load_opaque, ptr %load_opaque1, ptr %\"#arg1\"), !dbg !924</p>\n<p><div class=\"codehilite\"><pre><span></span><code>Then it will work as expected, minus probably some other detail I&#39;m missing\n````\n\nI think the problem is that `Test_sorter_ebcdc7d352ecfa1e7d1b4ba0644f3ace5e7298b5a4113365f27eee831460e3a2` is defined to take a ptr in the third parameter but it should be RocStr (ptr + 2 other fields)\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 486641508,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1733553858
    },
    {
        "content": "<p>oh wait no yeah the call site is wrong</p>",
        "id": 486641898,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1733554234
    },
    {
        "content": "<p>although passing the str via reference seems kind of silly but that's a separate thing</p>",
        "id": 486641908,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1733554256
    },
    {
        "content": "<p>Alright this is the fix for at least one of the issues<br>\n<a href=\"https://github.com/roc-lang/roc/pull/7317\">https://github.com/roc-lang/roc/pull/7317</a></p>",
        "id": 486642671,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1733554959
    },
    {
        "content": "<p>Not sure why there's a unique path for this specifically but</p>",
        "id": 486642680,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1733554977
    },
    {
        "content": "<p>seems to fix the Dict example too</p>",
        "id": 486642770,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1733555063
    },
    {
        "content": "<p>Yeah, we have a lot of abi mess in the llvm backend that needs to be merged into one universal tagged abi. That just takes arguments with their type info and generates correct c abi. We have a lot of adhoc stuff today</p>",
        "id": 486643221,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733555492
    },
    {
        "content": "<p>this isn't ABI though. there should just be a better abstraction for loading parameters for internal calls.</p>",
        "id": 486644287,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1733556440
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> You are my personal hero right now.  That change emits the exact llvm I was doing by hand, and fixes the issue in the minimal repro!</p>",
        "id": 486660762,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733570550
    },
    {
        "content": "<p>I am happy that I was hovering over this exact point in the code, but I had no idea what to do yet</p>",
        "id": 486660801,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733570600
    },
    {
        "content": "<p>And how that I see this, it makes a LOT of sense.  The layout_interner can look out the closure data and tell us that it should be passed by reference or not.  And then we only create the new load instruction of course when it is passed by value.</p>",
        "id": 486660946,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733570747
    },
    {
        "content": "<p>And it also fixes my AOC solution.  Now for me to finish it <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 486661155,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733570886
    },
    {
        "content": "<p>sweet!</p>",
        "id": 486687368,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1733591361
    },
    {
        "content": "<p>I ran into this issue in my solution and this fixed it for me too. Thanks!</p>",
        "id": 486694569,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1733597196
    }
]