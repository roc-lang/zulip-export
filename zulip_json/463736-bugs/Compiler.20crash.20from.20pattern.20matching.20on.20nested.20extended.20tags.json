[
    {
        "content": "<p>Let's say we have the following code:</p>\n<div class=\"codehilite\"><pre><span></span><code>TypeAB x : [A, B]x\n\nTypeCD x : TypeAB [C, D]x\n\nTypeEF x : TypeCD [E, F]x\n\nCombined : TypeCD (TypeAB (TypeEF []))\n\ncombined_to_int : Combined -&gt; U8\ncombined_to_int = |test1|\n    when test1 is\n        A -&gt; 1\n        B -&gt; 2\n        C -&gt; 3\n        D -&gt; 4\n        E -&gt; 5\n        F -&gt; 6\n        _ -&gt; crash(&quot;combined_to_int() failed&quot;)\n\nexpect\n  value = E\n  int_value = combined_to_int(E)\n  int_value == 5\n</code></pre></div>\n<p>The above actually works fine. However, simply removing the wildcard case from the <code>when</code> branch inside <code>combined_to_int</code> causes the compiler to fail an internal assertion. Here is the message:</p>\n<div class=\"codehilite\"><pre><span></span><code>---&gt; roc test\nAn internal compiler expectation was broken.\nThis is definitely a compiler bug.\nPlease file an issue here: &lt;https://github.com/roc-lang/roc/issues/new/choose&gt;\nnot a tag union: Alias(`Ast.IdentId(34)`, [3395], &lt;3396&gt;[&#39;A&#39; , &#39;A&#39; , &#39;B&#39; , &#39;B&#39; , &#39;C&#39; , &#39;D&#39; , &#39;E&#39; , &#39;F&#39; , ]&lt;Openness(3)&gt;)\nLocation: crates/compiler/solve/src/solve.rs:1840:34\n</code></pre></div>\n<p>What I would expect is for the compiler to output a type error telling me that I haven't covered all the cases. However, I also think that's a semantic bug in itself, as the <code>Combined</code> tag union is not extensible (all type variables are populated by concrete types), so it seems like a mistake to require a wildcard case when pattern matching on it.</p>",
        "id": 530415622,
        "sender_full_name": "Austin Davis",
        "timestamp": 1753297645
    },
    {
        "content": "<p>I'll check this out, I made a minimal repro:</p>\n<div class=\"codehilite\"><pre><span></span><code>❯ roc check temp.roc\nAn internal compiler expectation was broken.\nThis is definitely a compiler bug.\nPlease file an issue here: &lt;https://github.com/roc-lang/roc/issues/new/choose&gt;\nnot a tag union: Alias(`temp.IdentId(0)`, [3172], &lt;3173&gt;[&#39;A&#39; , &#39;B&#39; , ]&lt;Any(3174)&gt;)\nLocation: crates/compiler/solve/src/solve.rs:1840:34\n\n~/Downloads/temp\n❯ cat temp.roc\nmodule []\n\nTypeAB x : [A, B]x\n\nTypeCD x : TypeAB [C]x\n\nCombined : TypeCD (TypeAB [])\n\ncombined_to_int : Combined -&gt; U8\ncombined_to_int = |test1|\n    when test1 is\n        A -&gt; 1\n        B -&gt; 2\n        C -&gt; 3\n</code></pre></div>",
        "id": 530757335,
        "sender_full_name": "Anton",
        "timestamp": 1753444656
    },
    {
        "content": "<p>Thanks for looking into it. The minimal example might seem trivial, but I have some non-trivial use cases that would improve the quality of life for the code I'm currently writing.</p>",
        "id": 530809538,
        "sender_full_name": "Austin Davis",
        "timestamp": 1753460995
    },
    {
        "content": "<p>We should definitely make trivial things work :)</p>",
        "id": 530811512,
        "sender_full_name": "Anton",
        "timestamp": 1753461733
    },
    {
        "content": "<p>Fix in <a href=\"https://github.com/roc-lang/roc/pull/8107\">PR#8107</a>, it turned out these type definitions created a tag union with lots of duplicates:</p>\n<div class=\"codehilite\"><pre><span></span><code>[&#39;A&#39; , &#39;A&#39; , &#39;A&#39; , &#39;B&#39; , &#39;B&#39; , &#39;B&#39; , &#39;C&#39; , &#39;C&#39; , &#39;D&#39; , &#39;D&#39; , &#39;E&#39; , &#39;F&#39; ]\n</code></pre></div>\n<p>I added deduplication at the right point and all is well <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>\n<p>That was a fun bug hunt :)</p>",
        "id": 530822041,
        "sender_full_name": "Anton",
        "timestamp": 1753465854
    },
    {
        "content": "<p>Amazing, that was fast! Thanks for taking the time to fix it!</p>",
        "id": 530842970,
        "sender_full_name": "Austin Davis",
        "timestamp": 1753474839
    }
]