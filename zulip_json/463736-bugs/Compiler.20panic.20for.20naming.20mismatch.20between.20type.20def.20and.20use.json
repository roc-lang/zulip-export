[
    {
        "content": "<p>Not sure if this is a known bug, but a mismatch between the naming of a record field in its type annotation and its definition / usage will produce a compiler panic:</p>\n<p>IE:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">month_days</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">month</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Int</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">isLeap</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"nx\">Bool</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">U64</span>\n<span class=\"nv\">month_days</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nx\">month</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">is_leap</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"nx\">Bool</span><span class=\"p\">.</span><span class=\"nx\">false</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">month</span><span class=\"w\"> </span><span class=\"o\">is</span>\n<span class=\"w\">        </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">31</span>\n<span class=\"w\">        </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"mi\">11</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">30</span>\n<span class=\"w\">        </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nx\">is_leap</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">29</span>\n<span class=\"w\">        </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">28</span>\n<span class=\"w\">        </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n</code></pre></div>\n<p>produces:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;main&#39; panicked at crates/compiler/gen_llvm/src/llvm/build.rs:5582:19:\nError in alias analysis: error in module ModName(&quot;UserApp&quot;), function definition FuncName(&quot;\\x12\\x00\\x00\\x00\\r\\x00\\x00\\x00r,\\xe4idl\\x95\\x92&quot;), definition of value binding ValueId(3): tuple field index 2 out of range\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>",
        "id": 492352313,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1736270149
    },
    {
        "content": "<p>I haven't seen that cause an error like this before, can you make an issue?</p>",
        "id": 492354873,
        "sender_full_name": "Anton",
        "timestamp": 1736271091
    },
    {
        "content": "<p>Yeah... although in trying to find a min repro, its a little more complex. Trying to identify the exact case that produces this in a min repro</p>",
        "id": 492355180,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1736271237
    },
    {
        "content": "<p>Okay, <del>this one is actually VERY specific, but</del> I think I've narrowed down to a fairly minimum repro.</p>\n<p>(Wasn't quite as specific as I thought for a minute...)</p>",
        "id": 492360738,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1736273338
    },
    {
        "content": "<p>Conditions I have been able to establish:</p>\n<ul>\n<li>a function which takes a record with two or more fields, one of which must be optional</li>\n<li>the optional record field must be a number type of <code>U16</code>/<code>I16</code> or larger, <code>Str</code>, or <code>Bool</code>, maybe other types (Specifically does <em>not</em> apply to optional <code>U8</code>/<code>I8</code> types).</li>\n<li>the optional record field has one name in the type annotation, but a different name is used in the definition, and the name from the definition is used in the function call.</li>\n</ul>\n<p><strong>Min repro:</strong></p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">main</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">bar</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">baz</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n\n<span class=\"nv\">foo</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nx\">qux</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"nx\">U16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">baz</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">U8</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">U8</span>\n<span class=\"nv\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nx\">bar</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">baz</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nx\">bar</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">        </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"k\">else</span>\n<span class=\"w\">        </span><span class=\"nx\">baz</span>\n</code></pre></div>",
        "id": 492361882,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1736273804
    },
    {
        "content": "<p>Note that I also tried reversing the <code>U16</code> and <code>U8</code> types so the optional is <code>U8</code> and the non-optional is <code>U16</code>, but this does not trigger the error, so it does not appear to be based on the total size of the record.</p>",
        "id": 492362183,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1736273929
    },
    {
        "content": "<p>Filed an issue @ <a href=\"https://github.com/roc-lang/roc/issues/7478\">#7478</a></p>",
        "id": 492363826,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1736274564
    },
    {
        "content": "<p>Gotta be something weird with alignment and layout</p>",
        "id": 492383946,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736282628
    },
    {
        "content": "<p>In general, I think optional record fields are more a sharp edge than valuable in current roc.</p>",
        "id": 492391234,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736285649
    },
    {
        "content": "<p>That feels more like a current problem with a fragile implementation than the eventual state of the feature, right?</p>",
        "id": 492392233,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736286062
    },
    {
        "content": "<p>Or do you kinda feel like we should get rid of them</p>",
        "id": 492392271,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736286073
    },
    {
        "content": "<p>They're great for UI building</p>",
        "id": 492392295,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736286083
    },
    {
        "content": "<p>I think optional fields are a _real difference_ in Roc as a feature</p>",
        "id": 492393865,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736286729
    },
    {
        "content": "<p>For UI specifically, the amount of noise you can avoid is insanely large</p>",
        "id": 492393976,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736286775
    },
    {
        "content": "<p>It makes Weaver much cleaner</p>",
        "id": 492394422,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736286956
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/463736-bugs/topic/Compiler.20panic.20for.20naming.20mismatch.20between.20type.20def.20and.20use/near/492391234\">said</a>:</p>\n<blockquote>\n<p>In general, I think optional record fields are more a sharp edge than valuable in current roc.</p>\n</blockquote>\n<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> I wonder if static dispatch could make \"builder\" APIs comparably nice for specifying config</p>",
        "id": 492394480,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1736286972
    },
    {
        "content": "<p>If I ever get around to wrapping Clay in Roc, it allows for really nice API (like it has in C, but without dealing with the C preprocessor)</p>",
        "id": 492394598,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736287027
    },
    {
        "content": "<p>Ooh <img alt=\":galaxy_brain:\" class=\"emoji\" src=\"https://avatars.zulip.com/22008/emoji/images/e7a6a0fc.png\" title=\"galaxy brain\"> it would definitely work for Weaver</p>",
        "id": 492394614,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736287032
    },
    {
        "content": "<p>There is an inherent cost to builder APIs, especially for things like immediate mode rendering systems</p>",
        "id": 492394698,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736287072
    },
    {
        "content": "<p>Which would be a \"zero-cost abstraction\" with pure expression compile-time eval</p>",
        "id": 492394716,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736287080
    },
    {
        "content": "<p>You assume that most of this configuration is static</p>",
        "id": 492394836,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736287122
    },
    {
        "content": "<p>And that is not the truth a lot of the time</p>",
        "id": 492394852,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736287134
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">button</span><span class=\"p\">(</span><span class=\"no\">Config</span><span class=\"o\">.</span><span class=\"n\">default</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">border</span><span class=\"p\">(</span><span class=\"n\">green</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">enabled</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>I know we haven't decided for sure whether we want to do this, but you could eliminate the default config by taking a function that operates on it:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">button</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">border</span><span class=\"p\">(</span><span class=\"n\">green</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">enabled</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">))</span>\n</code></pre></div>",
        "id": 492394920,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1736287154
    },
    {
        "content": "<p>Yeah, we'd need LLVM to pull in clutch 100% of the time on top of constant folding</p>",
        "id": 492394945,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736287165
    },
    {
        "content": "<p>if the config isn't static then we're doing runtime work anyway, probably makes no difference</p>",
        "id": 492395017,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1736287194
    },
    {
        "content": "<p>also I wouldn't be surprised if llvm would already optimize this away</p>",
        "id": 492395116,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1736287218
    },
    {
        "content": "<p>I think the real question is how it reads</p>",
        "id": 492395150,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1736287230
    },
    {
        "content": "<p>especially if you have a lot of them in a DSL <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 492395212,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1736287246
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/463736-bugs/topic/Compiler.20panic.20for.20naming.20mismatch.20between.20type.20def.20and.20use/near/492394920\">said</a>:</p>\n<blockquote>\n<p>I know we haven't decided for sure whether we want to do this, but you could eliminate the default config by taking a function that operates on it:</p>\n<p><div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">button</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">border</span><span class=\"p\">(</span><span class=\"n\">green</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">enabled</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">))</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I actually really like how that reads!</p>",
        "id": 492395315,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1736287293
    },
    {
        "content": "<p>it's about as concise as default record fields, but without the separate language feature</p>",
        "id": 492395723,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1736287453
    },
    {
        "content": "<p>I wonder how we can make a default button nice without needing a separate <code>default_button()</code>, since you need to do <code>button(|c| c)</code> here</p>",
        "id": 492395807,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736287495
    },
    {
        "content": "<p>You could make <code>.</code> the identity function</p>",
        "id": 492395925,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736287550
    },
    {
        "content": "<p><code>button(.)</code></p>",
        "id": 492395973,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736287563
    },
    {
        "content": "<p>I'm telling you if we get rid of optional fields, with PNC we will absolutely end up with labelled/named arguments</p>",
        "id": 492396124,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736287630
    },
    {
        "content": "<p>I don't have perms to move everything from <a class=\"message-link\" href=\"/#narrow/channel/463736-bugs/topic/Compiler.20panic.20for.20naming.20mismatch.20between.20type.20def.20and.20use/near/492391234\">#bugs &gt; Compiler panic for naming mismatch between type def and use @ 💬</a> on into a different channel. Can someone do that?</p>",
        "id": 492396173,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736287659
    },
    {
        "content": "<p>Might as well start bikeshedding the syntax now</p>",
        "id": 492396184,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736287666
    },
    {
        "content": "<p>I think labelled args are great</p>",
        "id": 492396188,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736287668
    },
    {
        "content": "<p>If you don't use records</p>",
        "id": 492396203,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736287678
    },
    {
        "content": "<p>I worked on the Flutter team at Google - I like labelled args :-)</p>",
        "id": 492396259,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736287688
    },
    {
        "content": "<p>But we have records already</p>",
        "id": 492396260,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736287688
    },
    {
        "content": "<p>BRO</p>",
        "id": 492396280,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736287700
    },
    {
        "content": "<p>So jealous</p>",
        "id": 492396291,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736287706
    },
    {
        "content": "<p>I wasn't on the Glamorous side</p>",
        "id": 492396310,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736287717
    },
    {
        "content": "<p>So not jealous</p>",
        "id": 492396334,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736287729
    },
    {
        "content": "<p>I was _mostly_ diving into the Dart compiler and internal tooling/infra</p>",
        "id": 492396361,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736287742
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> <a href=\"#narrow/stream/463736-bugs/topic/Compiler.20panic.20for.20naming.20mismatch.20between.20type.20def.20and.20use/near/492396124\">said</a>:</p>\n<blockquote>\n<p>I'm telling you if we get rid of optional fields, with PNC we will absolutely end up with labelled/named arguments</p>\n</blockquote>\n<p>labeled arguments are a different thing from optional arguments. We already have records serving the purpose of labeling!</p>",
        "id": 492396521,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1736287811
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/channel/463736-bugs/topic/Compiler.20panic.20for.20naming.20mismatch.20between.20type.20def.20and.20use/near/492395973\">said</a>:</p>\n<blockquote>\n<p><code>button(.)</code></p>\n</blockquote>\n<p>This aligns with the <code>.method()</code> syntax for desugaring to <code>|x| x.method()</code>, so <code>.</code> goes to <code>|x| x</code>. Literally trimmed off the end.</p>\n<p>If we do something like <code>_.method()</code> goes to <code>|x| x.method()</code> instead, then maybe <code>_.</code> or just <code>_</code> can be the identity function</p>",
        "id": 492396837,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736287943
    },
    {
        "content": "<p>True-ish.  But in a language like dart optional args are almost always labelled.</p>",
        "id": 492396840,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736287945
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/channel/463736-bugs/topic/Compiler.20panic.20for.20naming.20mismatch.20between.20type.20def.20and.20use/near/492395973\">said</a>:</p>\n<blockquote>\n<p><code>button(.)</code></p>\n</blockquote>\n<p>What if the function arg was....optional?</p>",
        "id": 492396902,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736287985
    },
    {
        "content": "<p>We've come full circle</p>",
        "id": 492397070,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736288050
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/channel/463736-bugs/topic/Compiler.20panic.20for.20naming.20mismatch.20between.20type.20def.20and.20use/near/492396521\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> <a href=\"#narrow/stream/463736-bugs/topic/Compiler.20panic.20for.20naming.20mismatch.20between.20type.20def.20and.20use/near/492396124\">said</a>:</p>\n<blockquote>\n<p>I'm telling you if we get rid of optional fields, with PNC we will absolutely end up with labelled/named arguments</p>\n</blockquote>\n<p>labeled arguments are a different thing from optional arguments. We already have records serving the purpose of labeling!</p>\n</blockquote>\n<p>I think there are a lot of reasons for labelling args.  One can be the Swift/ObjC/SmallTalk approach where the set of labelled args are part of the function \"name\".  One can be for clarity at the call site.  And another is to allow arguments to be reordered and left out at the call site based on usage.</p>",
        "id": 492397139,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736288098
    },
    {
        "content": "<p>And to be clear - I'm not saying labelled arguments are right for Roc.</p>",
        "id": 492397334,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736288211
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> <a href=\"#narrow/stream/463736-bugs/topic/Compiler.20panic.20for.20naming.20mismatch.20between.20type.20def.20and.20use/near/492396902\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/channel/463736-bugs/topic/Compiler.20panic.20for.20naming.20mismatch.20between.20type.20def.20and.20use/near/492395973\">said</a>:</p>\n<blockquote>\n<p><code>button(.)</code></p>\n</blockquote>\n<p>What if the function arg was....optional?</p>\n</blockquote>\n<p>optional args are a deep topic. I'm happy to talk about it but I've thought about it a lot over the years and I keep coming back to the conclusion that they sound like a good idea but actually just lead to both worse APIs and also a worse experience for API designers</p>",
        "id": 492398275,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1736288701
    },
    {
        "content": "<p>I think that's true - but I think either optional args or optional record fields are needed in the language</p>",
        "id": 492398459,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736288772
    },
    {
        "content": "<p>Or most UI libraries will be very verbose</p>",
        "id": 492398503,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736288796
    },
    {
        "content": "<p>But I could be wrong</p>",
        "id": 492398513,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736288800
    },
    {
        "content": "<p>I'm not sure what use case they are needed for that terse builders can't handle</p>",
        "id": 492398524,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736288803
    },
    {
        "content": "<p>I know flutter couldn't work (in it's current design) without them</p>",
        "id": 492398550,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736288812
    },
    {
        "content": "<p>Okay, we can write up an experiment</p>",
        "id": 492398551,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736288813
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/channel/463736-bugs/topic/Compiler.20panic.20for.20naming.20mismatch.20between.20type.20def.20and.20use/near/492398524\">said</a>:</p>\n<blockquote>\n<p>terse builders</p>\n</blockquote>\n<p>This sounds like magic</p>",
        "id": 492398643,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736288854
    },
    {
        "content": "<p>What Richard is describing is what I'm referring to</p>",
        "id": 492398766,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736288893
    },
    {
        "content": "<p>It seems almost as terse as optional record fields</p>",
        "id": 492398781,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736288905
    },
    {
        "content": "<p>But we _could_ maybe find a way to have a UI library that has functions for elements that all return a root custom type that has all the config functions defined in the module, and then you can config that way</p>",
        "id": 492398812,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736288921
    },
    {
        "content": "<p>Like SwiftUI</p>",
        "id": 492398821,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736288927
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">button</span><span class=\"p\">(</span><span class=\"s2\">\"Some text\"</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"o\">.</span><span class=\"n\">border</span><span class=\"p\">(</span><span class=\"no\">Colors</span><span class=\"o\">.</span><span class=\"n\">green</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"o\">.</span><span class=\"n\">enabled</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 492398928,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736288975
    },
    {
        "content": "<p>So the \"main business\" of an element/component happens in it's args.  Anything that would wrap it or change some config of the root type would be a SD function</p>",
        "id": 492399057,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736289012
    },
    {
        "content": "<p>Hmmmm, that works</p>",
        "id": 492399058,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736289012
    },
    {
        "content": "<p>great point!</p>",
        "id": 492399103,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1736289034
    },
    {
        "content": "<p>I know Flutter has talked about experimenting with a similar design (to compete with SwiftUI I imagine)</p>",
        "id": 492399186,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736289069
    },
    {
        "content": "<p>Anyway, it would be fun to experiment with this for my hypothetical Clay wrapper</p>",
        "id": 492399238,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736289096
    },
    {
        "content": "<p>Someone with perms should really clean up this thread :-)</p>",
        "id": 492399366,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736289137
    },
    {
        "content": "<p>Sorry <span class=\"user-mention\" data-user-id=\"518883\">@Ian McLerran</span> !</p>",
        "id": 492399391,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736289148
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> I'd be curious what weaver would look like with this config idea</p>",
        "id": 492399429,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1736289166
    },
    {
        "content": "<p>I'll draft something later today, probably tonight</p>",
        "id": 492399527,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736289208
    },
    {
        "content": "<p>Weaver is a great candidate, actually! It could help clean up the number of functions</p>",
        "id": 492399632,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736289250
    },
    {
        "content": "<p>We don't need <code>Opt.str({ short: \"v\" })</code>, we can do <code>opt(.str().short(\"v\"))</code> or maybe <code>opt().str().short(\"v\")</code></p>",
        "id": 492399795,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736289320
    },
    {
        "content": "<p>I'll mess with it</p>",
        "id": 492399806,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736289324
    },
    {
        "content": "<p>Currently we have 3 times 13 num functions for Opt and Param each</p>",
        "id": 492399844,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736289351
    },
    {
        "content": "<blockquote>\n<p>optional args are a deep topic. I'm happy to talk about it but I've thought about it a lot over the years and I keep coming back to the conclusion that they sound like a good idea but actually just lead to both worse APIs and also a worse experience for API designers</p>\n</blockquote>\n<p>I'm using the optional args extensively in <a href=\"https://github.com/lukewilliamboswell/plume\">https://github.com/lukewilliamboswell/plume</a></p>\n<p>I tried a few different API's, but this just felt the nicest. I'm very interested to know if they is another way!</p>",
        "id": 492401176,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736289935
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> If the <code>Trace</code> type was a Custom Type and we had static dispatch you could just add a <code>with_orientation</code>(or just <code>orientation</code>) function to that module and initialize one with</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"no\">Trace</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"o\">.</span><span class=\"n\">orientation</span><span class=\"p\">(</span><span class=\"no\">Horizontal</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">(</span><span class=\"s2\">\"This is my trace!\"</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"o\">.</span><span class=\"n\">bar_width</span><span class=\"p\">(</span><span class=\"mi\">35</span><span class=\"o\">.</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>And if you don't want to use any of that other stuff it's just</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"no\">Trace</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 492401917,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736290270
    },
    {
        "content": "<p>Ohk... yeah they're all custom types. So we can try this out when we have static dispatch.</p>",
        "id": 492402089,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736290335
    },
    {
        "content": "<p>I'll make a branch of Weaver anyway just to show what the API would look like, but we won't be able to test it, per se</p>",
        "id": 492402154,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736290367
    },
    {
        "content": "<p>yeah, but it's really useful to know if this looks viable</p>",
        "id": 492404687,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1736291637
    },
    {
        "content": "<p>Agreed</p>",
        "id": 492404761,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736291655
    },
    {
        "content": "<p>would be a very nice simplification to have static dispatch replacing Abilities, module params, <em>and</em> optional record fields <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 492404807,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1736291684
    },
    {
        "content": "<p>Note, default record fields are by no means fundamentally broken. I would assume the fix isn't even that hard (I just don't know that part of the compiler). Fundamentally, we just need to generate more specializations based on if the default is used or not (that or we could generate it at the call sight. Just fill in the full record).</p>",
        "id": 492414226,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736297016
    },
    {
        "content": "<p>I feel like default record fields are a lot simpler and require less API overhead, but builders do work. I find builders quite heavy for simple things like preparing an SQlite transaction for example. Default is deferred transactions, but you can explicitly specify other options.</p>",
        "id": 492414541,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736297194
    },
    {
        "content": "<p>And for a new user I don't want them to think about transaction types at all. So they will just use the default and not even know what it means</p>",
        "id": 492414567,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736297220
    },
    {
        "content": "<p>I'd still like to explore what APIs would look like. It's not just about the implementation, and how the code looks, but also about whether the language primitive is worth it overall in comparison to how the code would look if we didn't have it (in the static dispatch world)</p>",
        "id": 492417183,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1736298866
    },
    {
        "content": "<p>plus they have been a recurring source of misunderstanding about how they work</p>",
        "id": 492417207,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1736298891
    },
    {
        "content": "<p>another way to say it is: if we already had APIs based around static dispatch, would we accept a proposal to introduce optional record arguments?</p>",
        "id": 492417905,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1736299374
    },
    {
        "content": "<p>My issue with the chaining config function approach is that I usually want an immutable struct for stability across the codebase but it has to be mutable for the construction chain to work. I've seen a two struct workaround where one builds up the config and then whatever is finalizing copies the values over to an immutable struct but it's verbose. Is there a fix for this that I don't know about?</p>",
        "id": 492418094,
        "sender_full_name": "Karl",
        "timestamp": 1736299533
    },
    {
        "content": "<p>You could use record builders maybe to enforce that using types?</p>",
        "id": 492418239,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736299633
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/463736-bugs/topic/Compiler.20panic.20for.20naming.20mismatch.20between.20type.20def.20and.20use/near/492417207\">said</a>:</p>\n<blockquote>\n<p>plus they have been a recurring source of misunderstanding about how they work</p>\n</blockquote>\n<p>I strongly feel most of this is due to naming, poor explanations, and bugs rather than anything innate to the feature. (For example we still regularly call them optional record fields when they are actually default value record fields)</p>",
        "id": 492419304,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736300342
    },
    {
        "content": "<p>But I totally agree we should explore other features. I think builder style apis can be great. They just suck for anything simple.</p>",
        "id": 492419342,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736300379
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"705503\">Karl</span> <a href=\"#narrow/channel/463736-bugs/topic/Compiler.20panic.20for.20naming.20mismatch.20between.20type.20def.20and.20use/near/492418094\">said</a>:</p>\n<blockquote>\n<p>My issue with the chaining config function approach is that I usually want an immutable struct for stability across the codebase but it has to be mutable for the construction chain to work. I've seen a two struct workaround where one builds up the config and then whatever is finalizing copies the values over to an immutable struct but it's verbose. Is there a fix for this that I don't know about?</p>\n</blockquote>\n<p>in Roc they'd all be (semantically) immutable, e.g. </p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">button</span><span class=\"p\">(</span><span class=\"s2\">\"Done\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">border</span><span class=\"p\">(</span><span class=\"n\">green</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">enabled</span><span class=\"p\">(</span><span class=\"n\">is_enabled</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>the types of these functions would be something like:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"no\">Elem</span><span class=\"o\">.</span><span class=\"n\">button</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"no\">Str</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"no\">Elem</span>\n\n<span class=\"no\">Elem</span><span class=\"o\">.</span><span class=\"n\">border</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"no\">Elem</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">Color</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"no\">Elem</span>\n\n<span class=\"no\">Elem</span><span class=\"o\">.</span><span class=\"n\">enabled</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"no\">Elem</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">Bool</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"no\">Elem</span>\n</code></pre></div>",
        "id": 492420084,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1736300860
    },
    {
        "content": "<p>But the Elem that's actually holding all the values would still be mutable, yes?</p>",
        "id": 492420182,
        "sender_full_name": "Karl",
        "timestamp": 1736300912
    },
    {
        "content": "<p>Or are we producing new immutable Elems that are partially initialized?</p>",
        "id": 492420237,
        "sender_full_name": "Karl",
        "timestamp": 1736300968
    },
    {
        "content": "<p>Roc doesn't have semantically mutable values <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 492420655,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1736301228
    },
    {
        "content": "<p><a href=\"https://www.roc-lang.org/functional#opportunistic-mutation\">https://www.roc-lang.org/functional#opportunistic-mutation</a></p>",
        "id": 492420732,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1736301259
    },
    {
        "content": "<p>Here's my experimental results for a Weaver API using terse builders: <a href=\"https://gist.github.com/smores56/dc7b37f73114df11d28cd6a148987dea#file-weaver-builders-roc\">https://gist.github.com/smores56/dc7b37f73114df11d28cd6a148987dea#file-weaver-builders-roc</a></p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">app</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">main</span><span class=\"err\">!</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">cli</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">platform</span><span class=\"w\"> </span><span class=\"s\">\"&lt;basic-cli&gt;\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">weaver.Opt</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">weaver.Cli</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">cli.Stdout</span>\n\n<span class=\"nv\">main</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">|</span><span class=\"nv\">args</span><span class=\"nf\">|</span>\n<span class=\"w\">    </span><span class=\"nv\">data</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">        </span><span class=\"nv\">cli_parser</span><span class=\"nf\">.</span><span class=\"nv\">parse_or_display_message</span><span class=\"p\">(</span><span class=\"nv\">args</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"nf\">.</span><span class=\"nv\">on_err</span><span class=\"err\">!</span><span class=\"p\">(</span><span class=\"nf\">|</span><span class=\"nv\">message</span><span class=\"nf\">|</span>\n<span class=\"w\">            </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span><span class=\"p\">(</span><span class=\"nv\">message</span><span class=\"p\">)</span><span class=\"err\">?</span>\n<span class=\"w\">            </span><span class=\"kt\">Err</span><span class=\"p\">(</span><span class=\"kt\">Exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"p\">)))</span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"err\">?</span>\n\n<span class=\"w\">    </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"s\">\"\"\"</span>\n<span class=\"s\">        Successfully parsed! Here's what I got:</span>\n\n<span class=\"s\">        ${data.to_str()}</span>\n<span class=\"s\">        \"\"\"</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"err\">?</span>\n\n<span class=\"w\">    </span><span class=\"kt\">Ok</span><span class=\"p\">({})</span>\n\n<span class=\"nv\">cli_parser</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">Cli</span><span class=\"nf\">.</span><span class=\"nv\">weave</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span>\n<span class=\"w\">        </span><span class=\"nv\">force</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Opt</span><span class=\"nf\">.</span><span class=\"nv\">flag</span><span class=\"p\">(</span><span class=\"nf\">.</span><span class=\"nv\">short</span><span class=\"p\">(</span><span class=\"s\">\"f\"</span><span class=\"p\">)</span><span class=\"nf\">.</span><span class=\"nv\">help</span><span class=\"p\">(</span><span class=\"s\">\"Force the task to complete.\"</span><span class=\"p\">)),</span>\n<span class=\"w\">        </span><span class=\"nv\">alpha</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Opt</span><span class=\"nf\">.</span><span class=\"nv\">single</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"nf\">.</span><span class=\"nv\">u64</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"nf\">.</span><span class=\"nv\">short</span><span class=\"p\">(</span><span class=\"s\">\"a\"</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"nf\">.</span><span class=\"nv\">help</span><span class=\"p\">(</span><span class=\"s\">\"Set the alpha level.\"</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"nf\">.</span><span class=\"nv\">default_fn</span><span class=\"p\">(</span><span class=\"nf\">||</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"nf\">.</span><span class=\"nv\">left_shift_by</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)),</span>\n<span class=\"w\">        </span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"nv\">files</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Param</span><span class=\"nf\">.</span><span class=\"nv\">list</span><span class=\"p\">(</span><span class=\"nf\">.</span><span class=\"nv\">str</span><span class=\"p\">()</span><span class=\"nf\">.</span><span class=\"nv\">name</span><span class=\"p\">(</span><span class=\"s\">\"files\"</span><span class=\"p\">)</span><span class=\"nf\">.</span><span class=\"nv\">help</span><span class=\"p\">(</span><span class=\"s\">\"The rest of the files.\"</span><span class=\"p\">)),</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"nf\">.</span><span class=\"nv\">finish</span><span class=\"p\">({</span>\n<span class=\"w\">        </span><span class=\"nv\">name</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"basic\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">version</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"v0.0.1\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">authors</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"Some One &lt;some.one@mail.com&gt;\"</span><span class=\"p\">],</span>\n<span class=\"w\">        </span><span class=\"nv\">description</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"This is a basic example of what you can build with Weaver\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">})</span>\n<span class=\"w\">    </span><span class=\"nf\">.</span><span class=\"nv\">assert_valid</span><span class=\"p\">()</span>\n</code></pre></div>",
        "id": 492459546,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736326674
    },
    {
        "content": "<p>In the linked gist, I put most of the code we'd need to parse an <code>Opt</code>. This API just plugs into the existing Weaver codebase, so it's not much of a change for this to work</p>",
        "id": 492459801,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736326758
    },
    {
        "content": "<p>Some nice things:</p>",
        "id": 492459863,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736326783
    },
    {
        "content": "<p>To parse a U64 arg, we can shorten the function</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nf\">|</span><span class=\"nv\">arg</span><span class=\"nf\">|</span>\n<span class=\"w\">    </span><span class=\"nv\">str</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">arg</span><span class=\"nf\">.</span><span class=\"nv\">as_str</span><span class=\"p\">()</span><span class=\"err\">?</span>\n<span class=\"w\">    </span><span class=\"nv\">str</span><span class=\"nf\">.</span><span class=\"nv\">to_u64</span><span class=\"p\">()</span>\n</code></pre></div>\n<p>to the following with methods and <code>Result.try</code></p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">u64</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">ArgTypeSelector</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">ArgValueParser</span><span class=\"w\"> </span><span class=\"kt\">U64</span>\n<span class=\"nv\">u64</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">|</span><span class=\"kt\">ArgTypeSelector</span><span class=\"nf\">.</span><span class=\"p\">()</span><span class=\"nf\">|</span>\n<span class=\"w\">    </span><span class=\"kt\">ArgValueParser</span><span class=\"nf\">.</span><span class=\"p\">({</span><span class=\"w\"> </span><span class=\"nv\">type_name</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"u64\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">parser</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nf\">.</span><span class=\"nv\">as_str</span><span class=\"p\">()</span><span class=\"nf\">.</span><span class=\"nv\">try</span><span class=\"p\">(</span><span class=\"nf\">.</span><span class=\"nv\">to_u64</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">})</span>\n</code></pre></div>",
        "id": 492460069,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736326855
    },
    {
        "content": "<p>We can now ensure that either <code>short</code> or <code>long</code> <strong>must</strong> be called, whereas that's not possible to handle nicely in a single record with optional fields</p>",
        "id": 492460273,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736326931
    },
    {
        "content": "<p>Since <code>{ short ?? Str, long ?? Str }</code> has both as optional to allow either to be passed, but then both could be empty</p>",
        "id": 492460373,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736326971
    },
    {
        "content": "<p>We can ensure <code>short</code> or <code>long</code> are empty by making the builder function passed to <code>Opt.single(...)</code> go through a few types:</p>\n<ul>\n<li>Start with a <code>ArgTypeSelector</code> that has <code>str</code> or <code>u64</code> methods</li>\n<li>That produces a <code>ArgValueParser a</code>, which only has <code>short</code> and <code>long</code> methods</li>\n<li>That then produces the required <code>OptionConfigParams a</code>, which can further receive <code>short</code>, <code>long</code>, <code>default</code>, etc.</li>\n</ul>",
        "id": 492460702,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736327060
    },
    {
        "content": "<p>I can't really type check this code, but I'm 99% sure that all of this will work with the planned static dispatch and custom types behavior</p>",
        "id": 492460959,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736327152
    },
    {
        "content": "<p>Anyway, there might be a <em>slight</em> aesthetic drop? But otherwise this seems like an improved API over optional record fields to me, since you get more opportunity for type safety with basically the same number of characters</p>",
        "id": 492461251,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736327242
    },
    {
        "content": "<p>The one cost I don't know how to fix is field name punning, but I don't think syntax sugar is important for that</p>",
        "id": 492461345,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736327280
    },
    {
        "content": "<p>Though it's something we could consider</p>",
        "id": 492461408,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736327289
    },
    {
        "content": "<p>Do you have to call things in the correct order?</p>",
        "id": 492461421,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736327297
    },
    {
        "content": "<p>This API requires you to call in certain groups: type, then arg name, then everything else</p>",
        "id": 492461488,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736327326
    },
    {
        "content": "<p>But you could definitely make it handle arbitrary order</p>",
        "id": 492461522,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736327342
    },
    {
        "content": "<p>Like </p>\n<div class=\"codehilite\"><pre><span></span><code>Opt.single(\n    .u64()\n    .short(&quot;a&quot;)\n    ...\n</code></pre></div>\n<p>Versus</p>\n<div class=\"codehilite\"><pre><span></span><code>Opt.single(\n    .short(&quot;a&quot;)\n    .u64()\n    ...\n</code></pre></div>",
        "id": 492461530,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736327344
    },
    {
        "content": "<p>I required ordering because I thought it would improve readability</p>",
        "id": 492461567,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736327359
    },
    {
        "content": "<p>I like it</p>",
        "id": 492461591,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736327369
    },
    {
        "content": "<p>We could require the type at the end</p>",
        "id": 492461607,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736327377
    },
    {
        "content": "<p>A weakness of this API stemming from an intentional weakness of the API: I couldn't get just <code>opt(.single().u64())</code> to work because we'd need to allow representing HKTs. This is now another place where HKTs are useful, but they're still not necessary for a good API</p>",
        "id": 492462654,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736327747
    },
    {
        "content": "<p>How hard would this to be rework using the SD-style approach I laid out?  Where the required args are in the main constructor, and all optionals are set in SD funcs?</p>",
        "id": 492531230,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736351037
    },
    {
        "content": "<p>Roc-ai is already doing something similar to this for client configuration, albeit without PNC or static dispatch, so not exactly the same…</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">client</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">Client</span><span class=\"p\">.</span><span class=\"nx\">init</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nx\">apiKey</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Client</span><span class=\"p\">.</span><span class=\"nx\">setUrl</span><span class=\"w\"> </span><span class=\"nx\">url</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Client</span><span class=\"p\">.</span><span class=\"nx\">setModel</span><span class=\"w\"> </span><span class=\"nx\">model</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Client</span><span class=\"p\">.</span><span class=\"nx\">setProviderOrder</span><span class=\"w\"> </span><span class=\"nx\">providers</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Client</span><span class=\"p\">.</span><span class=\"nx\">setTemperature</span><span class=\"w\"> </span><span class=\"nx\">temp</span>\n</code></pre></div>\n<p>The init function takes a record with 1 required field and 17 optional ones, but then there are 18 corresponding set functions. That makes for a very bloated signature for the init function. At least in such an extreme example (similar to weaver) I think chained function calls really is cleaner than optional record fields.</p>\n<p>Additionally, the init function actually <del>has to call </del> <em>calls</em> the setter functions itself for 6 of the params, because the parameter accepted in as an argument is actually a different type (simplified) than what is actually stored, so optional record fields can’t handle this type conversion at all.</p>",
        "id": 492536591,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1736352672
    },
    {
        "content": "<p>So that could be with PNC/SD:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">client</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"no\">Client</span><span class=\"o\">.</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">apiKey</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"o\">.</span><span class=\"n\">setUrl</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"o\">.</span><span class=\"n\">setModel</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"o\">.</span><span class=\"n\">setProviderOrder</span><span class=\"p\">(</span><span class=\"n\">providers</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"o\">.</span><span class=\"n\">setTemperature</span><span class=\"p\">(</span><span class=\"n\">temp</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 492537545,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736352985
    },
    {
        "content": "<p>The big advantage of optional record fields here is performance.  In this case you would be avoiding four function calls</p>",
        "id": 492537744,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736353072
    },
    {
        "content": "<p>Yeah, if you have to create 18 stack frames with 18 copies of client, that’s a lot less optimal than just one…</p>",
        "id": 492538082,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1736353181
    },
    {
        "content": "<p>It depends on inlining</p>",
        "id": 492538205,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736353213
    },
    {
        "content": "<p>Which I have no idea if/when LLVM would inline these</p>",
        "id": 492538241,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736353230
    },
    {
        "content": "<p>If they are reliably inlined, there is probably no perf difference with --optimize</p>",
        "id": 492538323,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1736353269
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/463736-bugs/topic/Compiler.20panic.20for.20naming.20mismatch.20between.20type.20def.20and.20use/near/492404807\">said</a>:</p>\n<blockquote>\n<p>would be a very nice simplification to have static dispatch replacing Abilities, module params, <em>and</em> optional record fields <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>\n</blockquote>\n<p>Wait how will/could SD replace module params? Zulip link anyone? <span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span></p>",
        "id": 492548877,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1736356029
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> <a href=\"#narrow/stream/463736-bugs/topic/Compiler.20panic.20for.20naming.20mismatch.20between.20type.20def.20and.20use/near/492538323\">said</a>:</p>\n<blockquote>\n<p>If they are reliably inlined, there is probably no perf difference with --optimize</p>\n</blockquote>\n<p>As much as llvm inlines everything, I would expect this to still manifest some copies (especially with more complex types). At the same time, I would be quite surprised if that generally affects perf.</p>",
        "id": 492550914,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736356622
    },
    {
        "content": "<p>As a simple example, refcounting between copies likely forces llvm to copy.</p>",
        "id": 492551010,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736356662
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"518883\">@Ian McLerran</span> check out Richard's recent Realworld application impl. Having tried to use module params vs. just a record that saves the relevant effectful closures, it seems like the latter with SD is simpler and has fewer sharp corners like testing and all. <a class=\"message-link\" href=\"/#narrow/channel/304902-show-and-tell/topic/roc-realworld.20initial.20exploration/near/491565735\">#show and tell &gt; roc-realworld initial exploration @ 💬</a></p>",
        "id": 492565635,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736362432
    }
]