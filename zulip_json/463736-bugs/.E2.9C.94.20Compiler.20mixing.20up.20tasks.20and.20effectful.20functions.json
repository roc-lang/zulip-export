[
    {
        "content": "<p>I'm 90% sure this a valid use of purity inference:</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>module [Func, pure, effect, execute!]\n\nFunc a b := [\n    Pure (a -&gt; b),\n    Effectful (a =&gt; b),\n]\n\npure : (a -&gt; b) -&gt; Func a b\npure = \\f -&gt;\n    @Func (Pure f)\n\neffect : (a =&gt; b) -&gt; Func a b\neffect = \\f! -&gt;\n    @Func (Effectful f!)\n\nexecute! : Func a b, a =&gt; b\nexecute! = \\@Func func, input -&gt;\n    when func is\n        Pure f -&gt; f input\n        Effectful f! -&gt; f! input\n</code></pre></div>\n<p>But the compiler complains about two places:</p>\n<div class=\"codehilite\"><pre><span></span><code>TYPE MISMATCH\n\nSomething is off with the body of the `effect` definition:\n\n12│   effect : (a =&gt; b) -&gt; Func a b\n13│&gt;  effect = \\f! -&gt;\n14│&gt;      @Func (Effectful f!)\n\nThis `await` call produces:\n\n    Task c b\n\nBut the type annotation on `effect` says it should be:\n\n    Func a b\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>UNRECOGNIZED NAME\n\nNothing is named `f` in this scope.\n\n20│          Effectful f! -&gt; f! input\n                             ^^^^^^^^\n\nDid you mean one of these?\n\n    f!\n    U8\n    Eq\n    I8\n</code></pre></div>",
        "id": 485496055,
        "sender_full_name": "Tanner Nielsen",
        "timestamp": 1733070964
    },
    {
        "content": "<p>Note this is just a minimum reprex of an issue I'm having in a larger piece of code, so it's a bit contrived</p>",
        "id": 485496239,
        "sender_full_name": "Tanner Nielsen",
        "timestamp": 1733071126
    },
    {
        "content": "<p>Hey, I just fixed this a few hours ago :)</p>",
        "id": 485496262,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733071155
    },
    {
        "content": "<p>you can build the latest version of roc from source if you like or wait for the next nightly</p>",
        "id": 485496279,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733071183
    },
    {
        "content": "<p>see this pr:<br>\n<a href=\"https://github.com/roc-lang/roc/pull/7285\">https://github.com/roc-lang/roc/pull/7285</a></p>",
        "id": 485496352,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733071231
    },
    {
        "content": "<p>Awesome, thanks!  Sorry if I missed this somewhere in another thread.  I'll try to verify that this works with the latest version and resolve the thread if it does</p>",
        "id": 485496353,
        "sender_full_name": "Tanner Nielsen",
        "timestamp": 1733071231
    },
    {
        "content": "<p>no worries, good luck. I'll check tomorrow to see how you went :)</p>",
        "id": 485496369,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733071249
    },
    {
        "content": "<p>I built roc from the <code>main</code> branch, ran <code>roc check</code> against this file, and there are 0 errors and 0 warnings.  Looks like it works.  Thanks!</p>",
        "id": 485496724,
        "sender_full_name": "Tanner Nielsen",
        "timestamp": 1733071597
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"572105\">Tanner Nielsen</span> has marked this topic as resolved.</p>",
        "id": 485496726,
        "sender_full_name": "Notification Bot",
        "timestamp": 1733071600
    },
    {
        "content": "<p>Hell yeah, the best errors are already fixed errors!</p>",
        "id": 485503626,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733077591
    }
]