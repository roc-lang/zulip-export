[
    {
        "content": "<p><code>a Expr::TrySuffix expression was not completely removed in desugar_value_def_suffixed</code></p>\n<p>So after stripping down all my effectful <code>if then else</code> blocks to dummy blocks to eliminate the <a href=\"#narrow/channel/463736-bugs/topic/.E2.9C.94.20Value.20defined.20in.20prior.20line.20not.20recognized.20in.20function.20.2E.2E.2E\">stack overflow issue</a> (seems to have been in the <code>fileTreeHelper!</code> if block), I have encountered a new bug, as listed at the top of this post.</p>\n<p>Wondering if it could have to do with using <code>!</code> at the end of a record field name? (I have records which contain one effectful function as a field.)</p>",
        "id": 492172050,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1736192775
    },
    {
        "content": "<p>Can confirm. When I eliminate the records which contain the field name ending in <code>!</code>, this error is resolved.</p>",
        "id": 492172530,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1736192986
    },
    {
        "content": "<p>The records look like this:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">readFileContents</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">name</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">handler</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"w\"> </span><span class=\"nf\">=&gt;</span><span class=\"w\"> </span><span class=\"nx\">Result</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">tool</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Tool</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"nv\">readFileContents</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nv\">name</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">readFileContentsTool</span><span class=\"p\">.</span><span class=\"nx\">function</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nx\">handler</span><span class=\"o\">!:</span><span class=\"w\"> </span><span class=\"nx\">readFileContentsHandler</span><span class=\"o\">!</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nv\">tool</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">readFileContentsTool</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 492173008,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1736193157
    },
    {
        "content": "<p>However, if I simply rename the <code>handler!</code> field to <code>handler</code>, the same error is encountered, presumably due to assigning an effectful function to the field.</p>",
        "id": 492173129,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1736193211
    },
    {
        "content": "<p>So this record still encounters the bug:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">readFileContents</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">name</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">handler</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"w\"> </span><span class=\"nf\">=&gt;</span><span class=\"w\"> </span><span class=\"nx\">Result</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">tool</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Tool</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"nv\">readFileContents</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nv\">name</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">readFileContentsTool</span><span class=\"p\">.</span><span class=\"nx\">function</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nv\">handler</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">readFileContentsHandler</span><span class=\"o\">!</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nv\">tool</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">readFileContentsTool</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 492173304,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1736193266
    },
    {
        "content": "<p><a href=\"https://github.com/imclerran/roc-ai/tree/desugar-suffixed-bug\">https://github.com/imclerran/roc-ai/tree/desugar-suffixed-bug</a></p>",
        "id": 492173829,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1736193471
    },
    {
        "content": "<p>Okay, while trying to make a min-repro, I have semi disproven my hypothesis for the cause of the bug...</p>",
        "id": 492179175,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1736195395
    },
    {
        "content": "<p>Since the following works:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">main</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">_args</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"nx\">effects</span><span class=\"p\">.</span><span class=\"nx\">echo</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"s\">\"Hello, world!\"</span>\n<span class=\"w\">    </span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n\n<span class=\"nv\">effects</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nx\">echo</span><span class=\"o\">!:</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"w\"> </span><span class=\"nf\">=&gt;</span><span class=\"w\"> </span><span class=\"nx\">Result</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"nv\">effects</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nx\">echo</span><span class=\"o\">!:</span><span class=\"w\"> </span><span class=\"nx\">Stdout</span><span class=\"p\">.</span><span class=\"nx\">line</span><span class=\"o\">!</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 492179616,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1736195529
    },
    {
        "content": "<p>We parse differently if the module is purity inference or Task based</p>",
        "id": 492179809,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736195609
    },
    {
        "content": "<p>Both of these examples should be PI based... unless there's something I'm missing in the original module that is triggering it to treat it as non-pi...</p>",
        "id": 492180027,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1736195681
    },
    {
        "content": "<p>The code worked fine in my original non-pi version.</p>",
        "id": 492180153,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1736195725
    },
    {
        "content": "<p>So if your module exposed an ident with a ! at the end, it parses as PI</p>",
        "id": 492180230,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736195756
    },
    {
        "content": "<p>If not, Task</p>",
        "id": 492180238,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736195759
    },
    {
        "content": "<p>So what does your module expose?</p>",
        "id": 492180378,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736195802
    },
    {
        "content": "<p>Ah.... it exposes a record which DOES NOT have a <code>!</code> at the end, but the record contains an ident ending in <code>!</code>. That must be the issue.</p>",
        "id": 492180396,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1736195808
    },
    {
        "content": "<p>My module exposes 4 records with the same type as:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">readFileContents</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">name</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">handler</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"w\"> </span><span class=\"nf\">=&gt;</span><span class=\"w\"> </span><span class=\"nx\">Result</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">tool</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Tool</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>They all contain <code>handler</code>, but none of the record names themselves were named with a <code>!</code> since the records have both the effectful field, and idents which are not effectful.</p>",
        "id": 492180697,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1736195927
    },
    {
        "content": "<p>Let me just expose the handlers themselves as well. Sounds like that should trigger PI parsing.</p>",
        "id": 492180835,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1736195990
    },
    {
        "content": "<p>Yep, if I expose the <code>readFileContentsHandler!</code> in addition to my records, the module parses without issue. I wonder if lack of PI parsing was the reason I hit the stack overflow in the last bug...? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 492181349,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1736196193
    },
    {
        "content": "<p>I'm 99% sure the answer is no</p>",
        "id": 492182033,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736196469
    },
    {
        "content": "<p>Well I was using PI syntax, and we know now it wasn't parsing as PI, so that was bound to cause some kind of issues...</p>",
        "id": 492182227,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1736196535
    },
    {
        "content": "<p>Interesting. I created what I thought would be a min repro of this issue, but it parses correctly:<br>\n<strong>main.roc</strong></p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">app</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">main</span><span class=\"o\">!</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nv\">cli</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">platform</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/roc-lang/basic-cli/releases/download/0.18.0/0APbwVN1_p1mJ96tXjaoiUCr8NBGamr8G8Ac_DrXR-o.tar.br\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">import</span><span class=\"w\"> </span><span class=\"nx\">cli</span><span class=\"p\">.</span><span class=\"nx\">Stdout</span>\n<span class=\"nx\">import</span><span class=\"w\"> </span><span class=\"nx\">Module</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nx\">echo</span><span class=\"o\">!:</span><span class=\"w\"> </span><span class=\"nx\">Stdout</span><span class=\"p\">.</span><span class=\"nx\">line</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nx\">exposing</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">effects</span><span class=\"p\">]</span>\n\n<span class=\"nx\">main</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">_args</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"nx\">effects</span><span class=\"p\">.</span><span class=\"nx\">echo</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"s\">\"Hello, world!\"</span>\n<span class=\"w\">    </span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n</code></pre></div>\n<p><strong>Module.roc</strong></p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">module</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nx\">stdout</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"nx\">effects</span><span class=\"w\"> </span><span class=\"p\">]</span>\n\n<span class=\"nv\">effects</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nx\">echo</span><span class=\"o\">!:</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"w\"> </span><span class=\"nf\">=&gt;</span><span class=\"w\"> </span><span class=\"nx\">Result</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"nv\">effects</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nx\">echo</span><span class=\"o\">!:</span><span class=\"w\"> </span><span class=\"nx\">stdout</span><span class=\"o\">!</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 492182684,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1736196688
    },
    {
        "content": "<p>More investigation required. But I can say that in my large code file, simply exposing a single ident ending in <code>!</code> resolves the issue.</p>",
        "id": 492182811,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1736196732
    },
    {
        "content": "<p>Ah, but - if I simply <code>roc check Module.roc</code> I do hit a broken compiler expectation. However it is a different error than my original bug here.</p>",
        "id": 492183340,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1736196934
    },
    {
        "content": "<p>Even though running main.roc in the min repro compiles and runs.</p>",
        "id": 492183391,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1736196953
    },
    {
        "content": "<p>The code that caused the overflow is known to be fragile. If we weren't planning on removing it, I'd be trying to investigate it more</p>",
        "id": 492183529,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736197007
    },
    {
        "content": "<p>We really want to avoid ever crashing</p>",
        "id": 492183552,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736197017
    },
    {
        "content": "<p>Luckily, I don't think it's a problem outside of the case you're in</p>",
        "id": 492183587,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736197028
    },
    {
        "content": "<p>Well it turns out the only reason the stack overflow is hit at all is because the module isn't being parsed as PI. If the parser recognizes the file as PI, the code is now 100% correct.</p>",
        "id": 492185532,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1736197739
    },
    {
        "content": "<p>Yes</p>",
        "id": 492185659,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736197796
    },
    {
        "content": "<p>Raises the question of why this parses correctly:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">module</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nx\">stdout</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"nx\">effects</span><span class=\"w\"> </span><span class=\"p\">]</span>\n\n<span class=\"nv\">effects</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nx\">echo</span><span class=\"o\">!:</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"w\"> </span><span class=\"nf\">=&gt;</span><span class=\"w\"> </span><span class=\"nx\">Result</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"nv\">effects</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nx\">echo</span><span class=\"o\">!:</span><span class=\"w\"> </span><span class=\"nx\">stdout</span><span class=\"o\">!</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>but why I have to expose <code>listDirectoryHandler!</code> in FileSystem.roc for the code to parse as PI...</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">module</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nx\">pathFromStr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">pathToStr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">listDir</span><span class=\"o\">!</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">isDir</span><span class=\"o\">!</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">readFile</span><span class=\"o\">!</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">writeUtf8</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">    </span><span class=\"nx\">listDirectory</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"c1\">#listDirectoryHandler!,</span>\n<span class=\"w\">    </span><span class=\"nx\">listFileTree</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nx\">readFileContents</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nx\">writeFileContents</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n\n<span class=\"nv\">listDirectory</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">name</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">handler</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"w\"> </span><span class=\"nf\">=&gt;</span><span class=\"w\"> </span><span class=\"nx\">Result</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">tool</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Tool</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"c1\">#...</span>\n</code></pre></div>",
        "id": 492185853,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1736197868
    },
    {
        "content": "<p>It's not a parsing thing, it's a desugaring thing: <a href=\"https://github.com/roc-lang/roc/blob/a089cf2487d2cb5f1d977a2e01be5ab7b4de3275/crates/compiler/can/src/desugar.rs#L540\">https://github.com/roc-lang/roc/blob/a089cf2487d2cb5f1d977a2e01be5ab7b4de3275/crates/compiler/can/src/desugar.rs#L540</a></p>",
        "id": 492186203,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736197998
    },
    {
        "content": "<p>They parse the exact same</p>",
        "id": 492186245,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736198015
    },
    {
        "content": "<p>Yeah, but it shouldn't be desugaring the <code>!</code>. It should be parsing as PI, and not desugaring at all.</p>",
        "id": 492186349,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1736198046
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/blob/a089cf2487d2cb5f1d977a2e01be5ab7b4de3275/crates/compiler/load_internal/src/file.rs#L2332\">https://github.com/roc-lang/roc/blob/a089cf2487d2cb5f1d977a2e01be5ab7b4de3275/crates/compiler/load_internal/src/file.rs#L2332</a></p>",
        "id": 492186374,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736198060
    },
    {
        "content": "<p>If you just uncomment that <code>listDirectoryHandler!</code> in the module exports, doesn't try to desugar, because it parses the file as a PI module.</p>",
        "id": 492186488,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1736198104
    },
    {
        "content": "<p>Maybe I'm getting my terminology mixed a little here, forgive me if I'm confusing things here between parsing and desugaring</p>",
        "id": 492186592,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1736198148
    },
    {
        "content": "<p>You're totally fine</p>",
        "id": 492186611,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736198157
    },
    {
        "content": "<p>Let me try to say this:</p>",
        "id": 492186688,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736198173
    },
    {
        "content": "<p>The code is shitty and we are okay with that</p>",
        "id": 492186707,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736198181
    },
    {
        "content": "<p>Because it won't be shitty as soon as we permanently move to <code>FxMode::PurityInference</code></p>",
        "id": 492186755,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736198204
    },
    {
        "content": "<p>And rip out the bad part</p>",
        "id": 492186771,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736198210
    },
    {
        "content": "<p>Is there something you think we should do on top of that?</p>",
        "id": 492186808,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736198223
    },
    {
        "content": "<p>But seems, from my limited understanding of the compiler, that it is trying to desugar <code>!</code> to <code>Task.await</code>, because it thinks the code is not purity inference, because there is no <code>!</code> ident exported.</p>",
        "id": 492186820,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1736198227
    },
    {
        "content": "<p>You are correct</p>",
        "id": 492186867,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736198246
    },
    {
        "content": "<p>PI is not determined from the code you write, but <em>only</em> from the exports</p>",
        "id": 492186916,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736198270
    },
    {
        "content": "<p>I'm with ya. Since we won't have split modes of parsing forever, no need to perfectly determine PI, since eventually it will always be used, and that will solve the issue.</p>",
        "id": 492187040,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1736198311
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"518883\">Ian McLerran</span> has marked this topic as resolved.</p>",
        "id": 492187053,
        "sender_full_name": "Notification Bot",
        "timestamp": 1736198317
    },
    {
        "content": "<p>Also, no offense to you Agus if you're reading this, the use of <code>FxMode</code> to allow for a smooth transition from Task to PI has been a godsend</p>",
        "id": 492187093,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1736198339
    },
    {
        "content": "<p>Yeah, none taken. Things can be shitty and useful at the same time <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 492513758,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1736345835
    }
]