[
    {
        "content": "<p>So I have a weird bug with type checking:</p>\n<p>I have a collection of parsers of various types. I have another parser which combines two other types of parsers in a list passed to the <code>one_of</code> combinator.</p>\n<p>The parsers passed to <code>one_of</code> each returns a Tag type, so they should be able to unify in a list as a Tag union. This was working just fine previously, however I replaced one of the parsers in the list with another parser of the IDENTICAL type signature to the parser it replaced. Now it refuses to type check, saying the items in the list do not have the same type.</p>\n<p>Here is a sample of the original, working code:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">unescaped_character</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"no\">Parser</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"no\">Char</span><span class=\"w\"> </span><span class=\"no\">U8</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"no\">CharNotFound</span><span class=\"o\">]</span>\n<span class=\"n\">character_range</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"no\">Parser</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"no\">CharRange</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"no\">U8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">U8</span><span class=\"p\">)</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"no\">InvalidCharacterRange</span><span class=\"o\">]</span>\n\n<span class=\"n\">character_group_item</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"no\">Parser</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"no\">Char</span><span class=\"w\"> </span><span class=\"no\">U8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">CharRange</span><span class=\"p\">(</span><span class=\"no\">U8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">U8</span><span class=\"p\">)</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"no\">InvalidCharacterGroupItem</span><span class=\"o\">]</span>\n<span class=\"n\">character_group_item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">str</span><span class=\"o\">|</span>\n<span class=\"w\">    </span><span class=\"n\">parser</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">one_of</span><span class=\"p\">(</span><span class=\"o\">[</span><span class=\"n\">character_range</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">unescaped_character</span><span class=\"o\">]</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"c1\"># List above is infered as:</span>\n<span class=\"w\">    </span><span class=\"c1\"># List (Parser.Parser [Char U8, CharRange ( U8, U8 )*] [CharNotFound, InvalidCharacterRange])</span>\n<span class=\"w\">    </span><span class=\"n\">parser</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"no\">Result</span><span class=\"o\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"no\">InvalidCharacterGroupItem</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>but if I replace <code>unescaped_character</code> with <code>character</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">character</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"no\">Parser</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"no\">Char</span><span class=\"w\"> </span><span class=\"no\">U8</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"no\">CharNotFound</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>In the call to <code>one_of</code>, I get a type mismatch error in the list, even though <code>character</code> has the identical type signature to <code>unescaped_character</code></p>",
        "id": 497487179,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1738601561
    },
    {
        "content": "<p>Either would be an issue with the underlying lambdaset or an issue with tag unification/being open vs closed.</p>",
        "id": 497491814,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738602798
    },
    {
        "content": "<p>At least that is my guess</p>",
        "id": 497491831,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738602804
    },
    {
        "content": "<p>I thought it might have to do with tag  unions being open or closed, as I encountered a similar issue, where I had to make one specific Parser in a list of parsers use an open tag union for it's second type parameter in order for the list to unify.</p>",
        "id": 497493238,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1738603215
    },
    {
        "content": "<p>However in this case, I tried using underscores to open up every tag union involved, however this didn't help in this case. So maybe its something to do with the lambda set? Not sure if that info eliminates the possibility of an issue with open/closed tag unions, but seems like it should...</p>",
        "id": 497493248,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1738603217
    },
    {
        "content": "<p>What is the actual printed error?</p>",
        "id": 497494910,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738603749
    },
    {
        "content": "<p>Okay, I was able to rectify the issue. There was an open Tag union return type up the call chain inside <code>character</code>.  This should have been closed by Result.map_err, in character, which mapped all errors to a singular type, but apparently it was still being considered an open type, even though it didn't complain about my use of a closed tag union for the err type in character's type signature.</p>",
        "id": 497495178,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1738603834
    },
    {
        "content": "<p>Okay, now this is really strange - this was the root of the problem:</p>\n<p>The following works fine:</p>\n<div class=\"codehilite\"><pre><span></span><code>character_excluding_escaped : Parser Character [CharNotFound]\ncharacter_excluding_escaped = |str|\n    parser = character_excluding([&#39;.&#39;, &#39;^&#39;, &#39;$&#39;, &#39;*&#39;, &#39;+&#39;, &#39;?&#39;, &#39;(&#39;, &#39;)&#39;, &#39;[&#39;, &#39;]&#39;, &#39;{&#39;, &#39;}&#39;, &#39;|&#39;, &#39;\\\\&#39;, &#39;/&#39;, &#39;-&#39;, &#39; &#39;])\n    parser(str)\n</code></pre></div>\n<p>However, this does not:</p>\n<div class=\"codehilite\"><pre><span></span><code>character_excluding_escaped : Parser Character [CharNotFound]\ncharacter_excluding_escaped =\n    character_excluding([&#39;.&#39;, &#39;^&#39;, &#39;$&#39;, &#39;*&#39;, &#39;+&#39;, &#39;?&#39;, &#39;(&#39;, &#39;)&#39;, &#39;[&#39;, &#39;]&#39;, &#39;{&#39;, &#39;}&#39;, &#39;|&#39;, &#39;\\\\&#39;, &#39;/&#39;, &#39;-&#39;, &#39; &#39;])\n</code></pre></div>\n<p>Despite the fact that <code>character_excluding</code> returns a closed Tag union error type of <code>[CharNotFound]</code>, and despite the fact that I have not even called <code>Result.map_err</code>, or done anything else to close the tag union in the second version, just used a def before calling <code>character_excluding</code>, the second version here shows in type inference that it returns an additional error type in its tag union, despite the fact that <code>character_excluding</code> is annotated as a closed type, and uses <code>map_err</code> to ensure that it only ever returns one error type.</p>",
        "id": 497497349,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1738604551
    },
    {
        "content": "<p>Returned tags are always open</p>",
        "id": 497501509,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738605916
    },
    {
        "content": "<p>Hmm… that makes sense, I guess I actually knew that. Although why <code>parser : Parser ok [ErrTag]</code> didn’t work in a list with other parser types, but <code>parser : Parser ok [ErrTag]_</code> was accepted is unclear to me… (similar but different upstream issue from my original post issue).</p>",
        "id": 497512179,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1738609485
    },
    {
        "content": "<p>Cause if the tag is wrapped in a type, it is closed....real struggle/inconsistency</p>",
        "id": 497515173,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1738610586
    }
]