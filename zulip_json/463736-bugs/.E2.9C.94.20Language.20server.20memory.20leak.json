[
    {
        "content": "<p>Just discovered a roc language server memory leak. Still trying to minimize the reproduction, but it consistently occurs in the following case:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">expect</span>\n<span class=\"w\">    </span><span class=\"n\">parser</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">zip_6</span><span class=\"p\">(</span><span class=\"n\">digit</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">digit</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">digit</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">digit</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">digit</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">digit</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"c1\"># should be tuple w/ 6 values, not 5.</span>\n<span class=\"w\">    </span><span class=\"n\">parser</span><span class=\"p\">(</span><span class=\"s2\">\"123456\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">finalize_lazy</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"no\">Ok</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"c1\"># adding a 6th value to the tuple result prevents leak</span>\n<span class=\"w\">    </span><span class=\"c1\"># ie: == Ok((1, 2, 3, 4, 5, 6))</span>\n</code></pre></div>\n<p><a href=\"/user_uploads/22008/kmn72SFhmhbP76oSlnPf-V_7/Screenshot-2025-02-12-at-18.48.03.png\">Screenshot 2025-02-12 at 18.48.03.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/kmn72SFhmhbP76oSlnPf-V_7/Screenshot-2025-02-12-at-18.48.03.png\" title=\"Screenshot 2025-02-12 at 18.48.03.png\"><img data-original-content-type=\"image/png\" data-original-dimensions=\"1582x958\" src=\"/user_uploads/thumbnail/22008/kmn72SFhmhbP76oSlnPf-V_7/Screenshot-2025-02-12-at-18.48.03.png/840x560.webp\"></a></div>",
        "id": 499357092,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1739408315
    },
    {
        "content": "<p>Is it safe to assume that the language server is also on the verge of a rewrite, and therefore reporting bugs in the current language server is effectively kicking a dead horse?</p>",
        "id": 499361673,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1739411283
    },
    {
        "content": "<p>I'd say that yes</p>",
        "id": 499362076,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739411559
    },
    {
        "content": "<p>But the horse is dead, so it won't mind</p>",
        "id": 499362081,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1739411568
    },
    {
        "content": "<p>LOL! Well while we're kicking that dead horse, I may found another (possibly related, probably not) memory leak in the memory server. It also affects <code>roc check</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">alphanumeric_identifier</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">one_of</span><span class=\"p\">(</span><span class=\"o\">[</span>\n<span class=\"w\">     </span><span class=\"n\">non_digit_as_arr</span><span class=\"p\">,</span>\n<span class=\"w\">     </span><span class=\"n\">non_digit_and_identifier_characters</span><span class=\"p\">,</span>\n<span class=\"w\">     </span><span class=\"n\">identifier_characters_and_non_digit</span><span class=\"p\">,</span>\n<span class=\"w\">     </span><span class=\"c1\"># identifier_characters_and_non_digit_and_identifier_characters,</span>\n<span class=\"o\">]</span><span class=\"p\">)</span>\n\n<span class=\"n\">non_digit_as_arr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">non_digit</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">c</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"no\">Ok</span><span class=\"p\">(</span><span class=\"o\">[</span><span class=\"n\">c</span><span class=\"o\">]</span><span class=\"p\">))</span>\n<span class=\"n\">non_digit_and_identifier_characters</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">both</span><span class=\"p\">(</span><span class=\"n\">non_digit</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">identifier_characters</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cs</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"no\">Ok</span><span class=\"p\">(</span><span class=\"no\">List</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"o\">[[</span><span class=\"n\">c</span><span class=\"o\">]</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cs</span><span class=\"o\">]</span><span class=\"p\">)))</span>\n<span class=\"n\">identifier_characters_and_non_digit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">both</span><span class=\"p\">(</span><span class=\"n\">identifier_characters</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">non_digit</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">cs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"no\">Ok</span><span class=\"p\">(</span><span class=\"no\">List</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"o\">[</span><span class=\"n\">cs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">c</span><span class=\"o\">]]</span><span class=\"p\">)))</span>\n<span class=\"n\">identifier_characters_and_non_digit_and_identifier_characters</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">zip_3</span><span class=\"p\">(</span><span class=\"n\">identifier_characters</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">non_digit</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">identifier_characters</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">cs1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cs2</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"no\">Ok</span><span class=\"p\">(</span><span class=\"no\">List</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"o\">[</span><span class=\"n\">cs1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">c</span><span class=\"o\">]</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cs2</span><span class=\"o\">]</span><span class=\"p\">)))</span>\n</code></pre></div>\n<p>The language server identifies all four of those as having the identical type signature. However if I uncomment the 4th element in <code>one_of</code>, the language server balloons to 10's of gigs, and <code>roc check</code> does the same.</p>",
        "id": 499562079,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1739474516
    },
    {
        "content": "<p>Totally just kickin' the dead horse here, but this this is driving me nuts, so I came to rant! <span aria-label=\"triumph\" class=\"emoji emoji-1f624\" role=\"img\" title=\"triumph\">:triumph:</span><span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 499562096,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1739474521
    },
    {
        "content": "<p>Worth noting this doesn't just affect the memory server, but again, since we're in the middle of a rewrite, this isn't a long term concern.</p>",
        "id": 499563808,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1739474964
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"518883\">Ian McLerran</span> has marked this topic as resolved.</p>",
        "id": 499633891,
        "sender_full_name": "Notification Bot",
        "timestamp": 1739506315
    }
]