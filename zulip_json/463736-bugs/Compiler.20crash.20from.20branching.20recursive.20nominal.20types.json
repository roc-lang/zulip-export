[
    {
        "content": "<p>The following code works fine:</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>TypeA := [\n    X TypeB,\n    Y TypeB,\n    Nil,\n]\n\nTypeB := TypeA\n</code></pre></div>\n<p>But this code fails:</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>TypeA := [\n    X TypeA,\n    Y TypeB,\n    Nil,\n]\n\nTypeB := TypeA\n</code></pre></div>\n<p>The only difference between them is that, in the second block, the <code>X</code> and <code>Y</code> tags contain _<strong>different</strong>_ inner types (<code>TypeA</code> and <code>TypeB</code>), and in the first block, the <code>X</code> and <code>Y</code> tags contain _<strong>the same</strong>_ inner type (<code>TypeA</code>).</p>\n<p>In the first case, the compiler accepts the type with no errors. In the second case, we get the following error message:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>thread<span class=\"w\"> </span><span class=\"s1\">'&lt;unknown&gt;'</span><span class=\"w\"> </span>has<span class=\"w\"> </span>overflowed<span class=\"w\"> </span>its<span class=\"w\"> </span>stack\nfatal<span class=\"w\"> </span>runtime<span class=\"w\"> </span>error:<span class=\"w\"> </span>stack<span class=\"w\"> </span>overflow\nzsh:<span class=\"w\"> </span>abort<span class=\"w\">      </span>roc<span class=\"w\"> </span>check\n</code></pre></div>\n<p><strong>Expectation:</strong></p>\n<p>Both kinds of recursive data structures should be accepted by the compiler. The issue does not seem to be with mutual recursion in general, but rather this special case of multiple distinct inner recursive types.</p>\n<p><strong>Result:</strong></p>\n<p>Compiler crashes due to stack overflow when running <code>roc check</code>.</p>\n<p><strong>Notes</strong>:</p>\n<p>Compiler release:<br>\nroc_nightly-macos_apple_silicon-2025-03-22-c47a8e9cdac</p>",
        "id": 530638713,
        "sender_full_name": "Austin Davis",
        "timestamp": 1753387953
    },
    {
        "content": "<p>I should also add that this bug basically makes it impossible to represent any kind of complex recursive tree structure in Roc, including the AST in the compiler project Iâ€™m working on. I donâ€™t think there is a real workaround at this point.</p>",
        "id": 530680458,
        "sender_full_name": "Austin Davis",
        "timestamp": 1753410361
    },
    {
        "content": "<p>I suppose it may be possible to emulate GADTs with phantom types in order to keep the entire recursive structure within a single unified type declaration. I might try that just to see if itâ€™s possible. But that is extremely far from ergonomic, unfortunately.</p>",
        "id": 530681354,
        "sender_full_name": "Austin Davis",
        "timestamp": 1753411099
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"816530\">@Austin Davis</span>,<br>\nThis will be fixed in the new compiler: <a class=\"message-link\" href=\"/#narrow/channel/231634-beginners/topic/Help.20implementing.20recursive.20type.3F/near/497774297\">#beginners &gt; Help implementing recursive type? @ ðŸ’¬</a></p>",
        "id": 530744906,
        "sender_full_name": "Anton",
        "timestamp": 1753439900
    },
    {
        "content": "<p>Awesome, canâ€™t wait for the new compiler release!!</p>",
        "id": 530784889,
        "sender_full_name": "Austin Davis",
        "timestamp": 1753452964
    }
]