[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"462053\">JanCVanB</span> <a href=\"#narrow/channel/231634-beginners/topic/Memory.20layout.20for.20tags.20.26.20records/near/489038532\">said</a>:</p>\n<blockquote>\n<p>Do we intend to support using tag unions as effect parameters? (The top-level data container, where structs already work.)</p>\n</blockquote>\n<p>The \"fluffing\" workaround we identified <a href=\"#narrow/channel/463736-bugs/topic/.E2.9C.94.20Struct.20memory.20partially.20zeroed.20between.20Roc.20and.20Rust\">yesterday</a> doesn't seem to work for tags, but maybe I'm fluffing wrong. This caused me some confusion when debugging my struct-passing effects by creating tag-passing effects for sub-fields of those structs. (Are my phrases and jargon making sense? I'm open to better wordings.) I don't have any plans (yet) for tag-passing effects in production, but I think it's still good to identify whether payloadful-tag-passing effects are possible and how to enable them.</p>\n<p>Reproduction: <a href=\"https://github.com/roc-lang/basic-cli/compare/main...JanCVanB:basic-cli:bug_repro___payloadful_tag_fluffing\">https://github.com/roc-lang/basic-cli/compare/main...JanCVanB:basic-cli:bug_repro___payloadful_tag_fluffing</a></p>\n<p>Types:</p>\n<div class=\"codehilite\"><pre><span></span><code>Fluff : { a : U64, b : U64, c : U64, d : U64 }\nfluff : Fluff\nfluff = { a: 0, b: 0, c: 0, d: 0 }\n\nHappyPayloadlessTag : [Foo, Bar, Baz]\nSadPayloadfulTag : [Foo U8, Bar, Baz]\nSadPayloadfulTagFluffed : [Foo U8 Fluff, Bar, Baz]\n\nsendHappyPayloadlessTag! : HappyPayloadlessTag =&gt; Result {} Str\nsendSadPayloadfulTag! : SadPayloadfulTag =&gt; Result {} Str\nsendSadPayloadfulTagFluffed! : SadPayloadfulTagFluffed =&gt; Result {} Str\n</code></pre></div>\n<p>Execution:</p>\n<div class=\"codehilite\"><pre><span></span><code>jan@framey:~/_code/JanCVanB/basic-cli$ roc version\nroc nightly pre-release, built from commit 10ebd02 on Sa 14 Dez 2024 10:33:15 UTC\njan@framey:~/_code/JanCVanB/basic-cli$ git log -2\ncommit 00decff4bc84a80a2ebd921da8a728527775b89d (HEAD -&gt; bug_repro___payloadful_tag_fluffing, origin/bug_repro___payloadful_tag_fluffing)\nAuthor: Jan &lt;jancvanb@pm.me&gt;\nDate:   Fri Dec 13 12:50:11 2024 -0700\n\n    Demonstrate that fluffing tags doesn&#39;t seem to work\n\ncommit fbdd5e68fe286ae7f999d549d0e761df0b3773cf (origin/main, origin/HEAD, main)\nMerge: 2a15c4a 0f8b306\nAuthor: Luke Boswell &lt;lukewilliamboswell@gmail.com&gt;\nDate:   Sat Dec 14 16:38:37 2024 +1100\n\n    Merge pull request #287 from roc-lang/refactor\n\n    Refactor into reusable crates\njan@framey:~/_code/JanCVanB/basic-cli$ ./bug_repro___run.sh\n================================================================================\n🏃 Running ./jump-start.sh ...\n--------------------------------------------------------------------------------\n+ &#39;[&#39; -z &#39;&#39; &#39;]&#39;\n+ echo &#39;Warning: ROC environment variable is not set... I&#39;\\&#39;&#39;ll try with just &#39;\\&#39;&#39;roc&#39;\\&#39;&#39;.&#39;\nWarning: ROC environment variable is not set... I&#39;ll try with just &#39;roc&#39;.\n+ ROC=roc\n+ roc build --lib ./platform/libapp.roc\n0 errors and 0 warnings found in 146 ms while successfully building:\n\n    ./platform/libapp\n+ cargo build --release\n    Finished `release` profile [optimized] target(s) in 0.05s\n+ &#39;[&#39; -n &#39;&#39; &#39;]&#39;\n+ cp target/release/libhost.a ./platform/libhost.a\n+ roc build --linker=legacy build.roc\n0 errors and 0 warnings found in 327 ms while successfully building:\n\n    build\n================================================================================\n\n================================================================================\n👀 This is ./examples/bug_repro_happy.roc :\n--------------------------------------------------------------------------------\napp [main!] { pf: platform &quot;../platform/main.roc&quot; }\n\nimport pf.BugRepro\nimport pf.Stdout\n\nmain! = \\{} -&gt;\n\n    tag = Foo\n\n    _ = Stdout.line! &quot;🦅 tag: $(Inspect.toStr tag)&quot;\n    BugRepro.sendHappyPayloadlessTag! tag\n    |&gt; Result.mapErr (\\message -&gt; Exit 1 message)\n\n--------------------------------------------------------------------------------\n🏃 Running ./examples/bug_repro_happy.roc ...\n--------------------------------------------------------------------------------\n🦅 tag: Foo\n🦀 tag: HappyPayloadlessTag::Foo\n================================================================================\n\n================================================================================\n👀 This is ./examples/bug_repro_sad1.roc :\n--------------------------------------------------------------------------------\napp [main!] { pf: platform &quot;../platform/main.roc&quot; }\n\nimport pf.BugRepro\nimport pf.Stdout\n\nmain! = \\{} -&gt;\n\n    tag = Foo 100\n\n    _ = Stdout.line! &quot;🦅 tag: $(Inspect.toStr tag)&quot;\n    BugRepro.sendSadPayloadfulTag! tag\n    |&gt; Result.mapErr (\\message -&gt; Exit 1 message)\n\n--------------------------------------------------------------------------------\n🏃 Running ./examples/bug_repro_sad1.roc ...\n--------------------------------------------------------------------------------\nthread &#39;main&#39; panicked at /home/big-ci-user/.cargo/git/checkouts/inkwell-946411d814d2c9f8/89e06af/src/types/enums.rs:487:13:\nFound StructType(StructType { struct_type: Type { address: 0x5641cd5a3390, llvm_type: &quot;{ [1 x i8], i8 }&quot; } }) but expected the PointerType variant\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n================================================================================\n\n================================================================================\n👀 This is ./examples/bug_repro_sad2.roc :\n--------------------------------------------------------------------------------\napp [main!] { pf: platform &quot;../platform/main.roc&quot; }\n\nimport pf.BugRepro\nimport pf.Stdout\n\nmain! = \\{} -&gt;\n\n    tag = Foo 100 BugRepro.fluff\n\n    _ = Stdout.line! &quot;🦅 tag: $(Inspect.toStr tag)&quot;\n    BugRepro.sendSadPayloadfulTagFluffed! tag\n    |&gt; Result.mapErr (\\message -&gt; Exit 1 message)\n\n--------------------------------------------------------------------------------\n🏃 Running ./examples/bug_repro_sad2.roc ...\n--------------------------------------------------------------------------------\nthread &#39;main&#39; panicked at /home/big-ci-user/.cargo/git/checkouts/inkwell-946411d814d2c9f8/89e06af/src/types/enums.rs:487:13:\nFound StructType(StructType { struct_type: Type { address: 0x55c9d88524c0, llvm_type: &quot;{ [5 x i64], i8 }&quot; } }) but expected the PointerType variant\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n================================================================================\njan@framey:~/_code/JanCVanB/basic-cli$\n</code></pre></div>",
        "id": 489039117,
        "sender_full_name": "jan kili",
        "timestamp": 1734223059
    },
    {
        "content": "<p>Clarification: Fluffing tags does seem to work when they're passed to Rust inside of a struct. My celebratory posts yeterday in the above two linked threads were about that use case - a struct containing two tags, where one was fluffed like <code>Foo 100 BugRepro.fluff</code> above. The struct passes by pointer totally fine, containing the fluffed tag inside it, but passing just the fluffed tag alone causes the panics above.</p>",
        "id": 489039378,
        "sender_full_name": "jan kili",
        "timestamp": 1734223314
    },
    {
        "content": "<p>Clarification: Everywhere I say \"struct\" above, I meant \"record\".</p>",
        "id": 489039654,
        "sender_full_name": "jan kili",
        "timestamp": 1734223578
    },
    {
        "content": "<p>Disclaimer to any beginners - hi! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> This is platform dev stuff, seemingly at the edge of what's supported, totally not relevant to app dev.</p>",
        "id": 489039770,
        "sender_full_name": "jan kili",
        "timestamp": 1734223707
    },
    {
        "content": "<p>looks like we are recognizin we need to pass by pointer cause the value is larger, but some reason for tags, we fail to actually move them into an alloca and pass by pointer.</p>",
        "id": 489040080,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734224079
    },
    {
        "content": "<p>haha... yeah.... very clearly have missing case in <code>to_cc_type</code>.</p>",
        "id": 489040174,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734224185
    },
    {
        "content": "<p>So very unsurprising this is broken</p>",
        "id": 489040176,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734224191
    },
    {
        "content": "<p><span aria-label=\"partying face\" class=\"emoji emoji-1f973\" role=\"img\" title=\"partying face\">:partying_face:</span></p>",
        "id": 489040184,
        "sender_full_name": "jan kili",
        "timestamp": 1734224217
    },
    {
        "content": "<p>Thanks for looking! Is there anything I can do to help fix and/or test from my current level of abstraction?</p>",
        "id": 489040208,
        "sender_full_name": "jan kili",
        "timestamp": 1734224244
    },
    {
        "content": "<p>also our <code>is_passed_by_reference</code> function here is definitely wrong as well.</p>",
        "id": 489040210,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734224251
    },
    {
        "content": "<p>oh, <code>is_passed_by_reference</code> is not wrong, it is just for internal calls, not for c abi</p>",
        "id": 489040292,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734224328
    },
    {
        "content": "<p>Yet we are using it for c abi <span aria-label=\"man facepalming\" class=\"emoji emoji-1f926-200d-2642\" role=\"img\" title=\"man facepalming\">:man_facepalming:</span></p>",
        "id": 489040310,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734224349
    },
    {
        "content": "<p>Uh oh! Sounds <del>bad</del> <del>wrong</del> not good.</p>",
        "id": 489040324,
        "sender_full_name": "jan kili",
        "timestamp": 1734224371
    },
    {
        "content": "<p>yeah, a lot of this code has grown naturally and has never been rewriting. Our entire argument passing code probably should be fully rewritten to make smarter choice internally and to generate c-abi in a sane manner.</p>",
        "id": 489040409,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734224440
    },
    {
        "content": "<p>it has been on my backlog for essentially forever</p>",
        "id": 489040442,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734224465
    },
    {
        "content": "<p>Without generating action items / priorities for you, what do you expect this rot means for platform dev functionality? Are records the best effect parameter? What else might not work?</p>",
        "id": 489040536,
        "sender_full_name": "jan kili",
        "timestamp": 1734224549
    },
    {
        "content": "<p>I mean looking at this code, even structs are handled wrong</p>",
        "id": 489040783,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734224832
    },
    {
        "content": "<p>looks like we don't pass them by reference until at 4 registers in size (c-abi does this at 2)</p>",
        "id": 489040796,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734224852
    },
    {
        "content": "<p>We also don't pack structs if they are small enough to fit into a single registers</p>",
        "id": 489040809,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734224876
    },
    {
        "content": "<p>(Sounds right - I have to fluff 4 U64s to trigger the pointer pass.)</p>",
        "id": 489040847,
        "sender_full_name": "jan kili",
        "timestamp": 1734224884
    },
    {
        "content": "<p>So... I guess that primitives (int, dec, float, etc) should work ok. List and str as well... and really large structs</p>",
        "id": 489040867,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734224909
    },
    {
        "content": "<p>oh, and enums</p>",
        "id": 489040877,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734224927
    },
    {
        "content": "<p>enums == payloadless tags ?</p>",
        "id": 489040892,
        "sender_full_name": "jan kili",
        "timestamp": 1734224953
    },
    {
        "content": "<p>yeah</p>",
        "id": 489040897,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734224958
    },
    {
        "content": "<p>Confirmed above too.</p>",
        "id": 489040900,
        "sender_full_name": "jan kili",
        "timestamp": 1734224967
    },
    {
        "content": "<p>Everything else has a chance to work, but probably will fail</p>",
        "id": 489040923,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734224987
    },
    {
        "content": "<p>Also, I probably should make this my next project. It seems that platform development and glue interest has grown a lot recently. So this is likely to become a new bottleneck.</p>",
        "id": 489040992,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734225033
    },
    {
        "content": "<p>Good thing I only plan to pass massively-nested records for a while... until I get into event streaming, but fluffing should work for those smaller records.</p>",
        "id": 489041004,
        "sender_full_name": "jan kili",
        "timestamp": 1734225049
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/463736-bugs/topic/Fluffing.20doesn't.20naively.20work.20for.20tags/near/489040992\">said</a>:</p>\n<blockquote>\n<p>Also, I probably should make this my next project.</p>\n</blockquote>\n<p><span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span> <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span> <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span> <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span> <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span> <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span> <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span> <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span> <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span> <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span> <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span> <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span> <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span></p>",
        "id": 489041030,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734225100
    },
    {
        "content": "<p>you also can just decompose the record if you prefer. That should work as well.</p>\n<p>Instead of <code>effect! : {a: U8, b: U8, c: U8} -&gt; {}</code><br>\ncan do <code>effect! : U8, U8, U8 -&gt; {}</code></p>",
        "id": 489041039,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734225116
    },
    {
        "content": "<p>C ABI problems have been competing with lambda sets for the title of most notorious cause of bugs...would be INCREDIBLE to have a rewrite to address that!</p>",
        "id": 489041104,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734225147
    },
    {
        "content": "<p>Any other rotted platform dev functionality you foresee? Just to save me wall-headbutting time <span aria-label=\"yum\" class=\"emoji emoji-1f60b\" role=\"img\" title=\"yum\">:yum:</span> <span aria-label=\"note\" class=\"emoji emoji-1f4dd\" role=\"img\" title=\"note\">:note:</span></p>",
        "id": 489041133,
        "sender_full_name": "jan kili",
        "timestamp": 1734225189
    },
    {
        "content": "<p>um, I think that <code>roc_str</code> in rust my be too smart for it's own good which may lead to it not passing as expected in c-abi if passed by value.</p>",
        "id": 489041164,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734225238
    },
    {
        "content": "<p>ooh Luke was mentioning something about RocStr being annoying</p>",
        "id": 489041223,
        "sender_full_name": "jan kili",
        "timestamp": 1734225278
    },
    {
        "content": "<p>I also wouldn't be surprised if some code in <code>roc_std</code> in general is already stale compared to the zig builtins</p>",
        "id": 489041224,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734225279
    },
    {
        "content": "<p>I'd just like to know if there is a way we could fuzz or test the C ABI side of things.</p>",
        "id": 489041264,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734225332
    },
    {
        "content": "<p>This is why the other big project I want to do is to make roc expose a ton of functions to the platform such that it doesn't need to know how to interact with roc types. It only needs to know how to pass them correctly with c-abi (which is overall a lot easier to get right from established langauges)</p>",
        "id": 489041274,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734225347
    },
    {
        "content": "<p>we can call it R<del>e</del>o<del>a</del>c<del>t</del> Hooks (<span class=\"user-mention\" data-user-id=\"781658\">@Anthony Bullard</span> please laugh at my five-year-old JavaScript joke)</p>",
        "id": 489041332,
        "sender_full_name": "jan kili",
        "timestamp": 1734225397
    },
    {
        "content": "<blockquote>\n<p>a way we could fuzz or test the C ABI side of things.</p>\n</blockquote>\n<p>I'm not sure how we would generate a source of truth for it.</p>",
        "id": 489041371,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734225473
    },
    {
        "content": "<p>How might staleness in <code>roc_std</code> manifest to someone like me?</p>",
        "id": 489041571,
        "sender_full_name": "jan kili",
        "timestamp": 1734225643
    },
    {
        "content": "<p>Either weird mutation glitches or segfaults</p>",
        "id": 489042621,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734226685
    },
    {
        "content": "<blockquote>\n<p>C ABI problems</p>\n</blockquote>\n<p>Maybe with changes to fix up c abi, we could also ban returning types with unknown sizes. I'm not sure where that would get wired in, but anything with an unknown size would need to be represented by a type variable and behind a pointer. <code>Box a</code> or <code>List a</code> for example.</p>",
        "id": 489042671,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734226776
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"462053\">JanCVanB</span> <a href=\"#narrow/stream/463736-bugs/topic/Fluffing.20doesn't.20naively.20work.20for.20tags/near/489041332\">said</a>:</p>\n<blockquote>\n<p>we can call it R<del>e</del>o<del>a</del>c<del>t</del> Hooks (<span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> please laugh at my five-year-old JavaScript joke)</p>\n</blockquote>\n<p>Boomer joke</p>",
        "id": 489043968,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734228122
    },
    {
        "content": "<p>Man, c abi is gonna be so fun: <a href=\"https://rust.godbolt.org/z/e9vzrWWrn\">https://rust.godbolt.org/z/e9vzrWWrn</a></p>",
        "id": 489046349,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734230681
    },
    {
        "content": "<p>wow, that's wild. i didn't expect xmm would go that deep i thought it stopped after like 6 genregs?</p>",
        "id": 489047065,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1734231484
    },
    {
        "content": "<p>Gen regs and float regs are tracked separately. That is why this is extra complex. Also, mixed structs are handled in 64bit chunks. So one chunk can be int while the other is float.</p>",
        "id": 489047112,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734231579
    },
    {
        "content": "<p>I think when I revamp this, I'll make it so that it generates the correct c abi layout along with a getter and setter lambda. So you go from a list of internal layouts to a list of c abi layouts + the conversion functions needed to call or receive arguments. That way it is all calculated in one place.</p>",
        "id": 489047305,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734231693
    },
    {
        "content": "<p>c abi varies by OS, right? Like Windows x64 is different from Linux and/or macOS x64, yeah?</p>",
        "id": 489047952,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734232402
    },
    {
        "content": "<p>yeah, windows x64 is really simple in comparison but also slower due to pushing way more on the stack</p>",
        "id": 489048359,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734232824
    },
    {
        "content": "<p>unix x64 is probably the most complex overall</p>",
        "id": 489048376,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734232850
    },
    {
        "content": "<p>can this be offloaded to something else? can llvm figure this out</p>",
        "id": 489048644,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1734233167
    },
    {
        "content": "<p>llvm sadly does not handle it. It is all done in the frontend.</p>",
        "id": 489048881,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734233443
    },
    {
        "content": "<p>Apparently some people embed clang in their compilers to make it generate c abi for them</p>",
        "id": 489048922,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734233519
    },
    {
        "content": "<p>If we wanted, we also could probably force a simpler API. We do control both sides of the ffi. Just need to make sure we generate things in a clear way if we do so. By explicitly passing certain types as pointers, we could avoid a lot of the abi complications.</p>",
        "id": 489049364,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734234011
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"454654\">Ayaz Hafiz</span> <a href=\"#narrow/channel/463736-bugs/topic/Fluffing.20doesn't.20naively.20work.20for.20tags/near/489048644\">said</a>:</p>\n<blockquote>\n<p>can this be offloaded to something else? can llvm figure this out</p>\n</blockquote>\n<p>I think it was Andrew Kelley who said \"discovering that LLVM does not help you out with C ABI at all is a rite of passage for compiler authors\" <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 489051969,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734236791
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/463736-bugs/topic/Fluffing.20doesn't.20naively.20work.20for.20tags/near/489049364\">said</a>:</p>\n<blockquote>\n<p>If we wanted, we also could probably force a simpler API. We do control both sides of the ffi. Just need to make sure we generate things in a clear way if we do so. By explicitly passing certain types as pointers, we could avoid a lot of the abi complications.</p>\n</blockquote>\n<p>I think this is fine fwiw, just need to make sure that glue matches up with it</p>",
        "id": 489052000,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734236831
    },
    {
        "content": "<p>like one idea would be to put all the arguments into a struct and then expect a pointer to that <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 489052074,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734236887
    },
    {
        "content": "<p>there has to be something</p>",
        "id": 489054056,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1734238969
    },
    {
        "content": "<p>zig has solved this at the least, can we plug into that?</p>",
        "id": 489054066,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1734238982
    }
]