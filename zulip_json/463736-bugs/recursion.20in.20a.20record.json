[
    {
        "content": "<p>Is this a bug?</p>\n<div class=\"codehilite\"><pre><span></span><code>Scalar : {\n    value : F64,\n    deps : List Scalar,\n}\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>── CYCLIC ALIAS in grad.roc ────────────────────────────────────────────────────\n\nThe Scalar alias is self-recursive in an invalid way:\n\n3│  Scalar : {\n    ^^^^^^\n\nRecursion in aliases is only allowed if recursion happens behind a\ntagged union, at least one variant of which is not recursive.\n</code></pre></div>\n<p>Or am I doing something wrong?</p>",
        "id": 491352303,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735609460
    },
    {
        "content": "<p>That's how it has been for a while, right?</p>",
        "id": 491352448,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735609572
    },
    {
        "content": "<p>i have no clue haha</p>",
        "id": 491352461,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735609589
    },
    {
        "content": "<p>Standard solution is </p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">Scalar</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">NoDeps</span><span class=\"w\"> </span><span class=\"kt\">F64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">WithDeps</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">F64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nv\">deps</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Scalar</span><span class=\"p\">,</span>\n<span class=\"p\">}]</span>\n</code></pre></div>",
        "id": 491352514,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735609644
    },
    {
        "content": "<p>that works, ty</p>",
        "id": 491352528,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735609665
    },
    {
        "content": "<p>I'm not a pro, but I presume that constraint is because of lambda sets? It might change with the changes going on</p>",
        "id": 491352608,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735609709
    },
    {
        "content": "<p>i don't think it should have anything to do with lambda sets.. i think probably just an unnecessary restriction</p>",
        "id": 491352633,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735609742
    },
    {
        "content": "<p>It shouldn't have anything to do with them, yes</p>",
        "id": 491352695,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735609800
    },
    {
        "content": "<p>I'm working (slowly) on the can rework, I can look into it</p>",
        "id": 491352746,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735609815
    },
    {
        "content": "<p>ty</p>",
        "id": 491352771,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735609837
    },
    {
        "content": "<p>Oh actually, I think it's because records aren't refcounted</p>",
        "id": 491352793,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735609865
    },
    {
        "content": "<p>And we don't currently intelligently know that List is refcounted</p>",
        "id": 491352812,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735609890
    },
    {
        "content": "<p>So without knowing that certain builtins can terminate recursion, we are worried that recursive records will be infinite in size</p>",
        "id": 491352878,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735609927
    },
    {
        "content": "<p>So we need some way to determine which data types are heap-allocated and mark recursion termination</p>",
        "id": 491352900,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735609956
    },
    {
        "content": "<p>Yeah the recursion has to be behind a pointer or you don’t know the size of the object at compile time</p>",
        "id": 491352948,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735610018
    },
    {
        "content": "<p>yeah it was just never implemented fully</p>",
        "id": 491353007,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735610054
    },
    {
        "content": "<p>I think the check is just \"does the alias appear again in itself\"</p>",
        "id": 491353018,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735610068
    },
    {
        "content": "<p>there need to be exceptions added to it, such as this one</p>",
        "id": 491353023,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735610076
    },
    {
        "content": "<p>I think just handling <code>List</code> would work, since <code>Dict</code> and <code>Set</code> are implemented in native Roc using <code>List</code></p>",
        "id": 491353155,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735610182
    },
    {
        "content": "<p>yeah, plus if we move <code>Dict</code> and <code>Set</code> to Zig (as has been discussed before) presumably it would be easy to add them to that list of exceptions <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 491353558,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1735610482
    },
    {
        "content": "<p>yeah seeing it’s under List is sufficient. or any other recursive union</p>",
        "id": 491354407,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735611194
    },
    {
        "content": "<p>Yeah, super old bug</p>",
        "id": 491357435,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735613800
    },
    {
        "content": "<p>I tried enabling recursion through list and box a long time ago, but didn't figure it out.</p>",
        "id": 491357463,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735613836
    },
    {
        "content": "<p>Wait, would Box actually work? Yes, Box is heap-allocated, but it always has a value behind it. So</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">Scalar</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">F64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">next</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Box</span><span class=\"w\"> </span><span class=\"kt\">Scalar</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>has a known, finite size, but would take up infinite memory, right?</p>",
        "id": 491357574,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735613942
    },
    {
        "content": "<p>Unless Box can be null in a way I don't know</p>",
        "id": 491357580,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735613952
    },
    {
        "content": "<p>Yeah, in roc today, it would be just list, box, and recursive tag. Of course recursive records could automatically box if we wanted.</p>",
        "id": 491357585,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735613955
    },
    {
        "content": "<p>Oh yeah, box doesn't work I guess</p>",
        "id": 491357617,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735613987
    },
    {
        "content": "<p>Would need to be an optional box of some sort</p>",
        "id": 491357771,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735614083
    },
    {
        "content": "<p>This is still different than raw recursive tags though</p>",
        "id": 491357779,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735614097
    },
    {
        "content": "<p>So would need an exception in current roc</p>",
        "id": 491357786,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735614104
    }
]