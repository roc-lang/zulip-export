[
    {
        "content": "<p>I anyone else seeing TOO FEW ARGS reports when using pipes on main:HEAD(latest latest)?</p>",
        "id": 494452838,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737153896
    },
    {
        "content": "<p>I have to imagine we have CI tests that run Builtins or some other tests for stuff like that...</p>",
        "id": 494452887,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737153928
    },
    {
        "content": "<p>Let's see...</p>",
        "id": 494452974,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737153967
    },
    {
        "content": "<p>I'm on:</p>\n<div class=\"codehilite\"><pre><span></span><code>❯ roc --version\nroc built from commit f3376af9c1, committed at 2025-01-17 15:29:09 UTC\n</code></pre></div>",
        "id": 494453002,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737153989
    },
    {
        "content": "<p>Any pipes and I get TOO FEW ARGS</p>",
        "id": 494453022,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737154003
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>» x = |y| y + 123\n\n\n&lt;function&gt; : Num a -&gt; Num a\n»\n\nEnter an expression to evaluate, or a definition (like x = 1) to use later.\n\n  - ctrl-v + ctrl-j makes a newline\n  - :q quits\n  - :help shows this text again\n\n» 123 |&gt; x\n\n246 : Num *\n»\n</code></pre></div>",
        "id": 494453711,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737154426
    },
    {
        "content": "<p>I think it's only multiline pipes</p>",
        "id": 494454805,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737155056
    },
    {
        "content": "<p>The repl is busted as well</p>",
        "id": 494454818,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737155066
    },
    {
        "content": "<p>Can someone with perms move this to a thread in <a class=\"stream\" data-stream-id=\"463736\" href=\"/#narrow/channel/463736-bugs\">#bugs</a> ?</p>",
        "id": 494454861,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737155095
    },
    {
        "content": "<p>9 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"304641\" href=\"/#narrow/channel/304641-ideas/topic/.02klzzwxh.3A0000.03.20for.20mapping.20Result.20Err.20values\">#ideas &gt; <code>?</code> for mapping Result Err values</a> by <span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span>.</p>",
        "id": 494457488,
        "sender_full_name": "Notification Bot",
        "timestamp": 1737156807
    },
    {
        "content": "<p>Thanks Luke!</p>",
        "id": 494458428,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737157411
    },
    {
        "content": "<p>Can you share some reproductions <span class=\"user-mention\" data-user-id=\"781658\">@Anthony Bullard</span></p>",
        "id": 494504323,
        "sender_full_name": "Anton",
        "timestamp": 1737195732
    },
    {
        "content": "<p>Sure</p>",
        "id": 494508869,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737199377
    },
    {
        "content": "<p>Well...Maybe not...</p>",
        "id": 494509528,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737199900
    },
    {
        "content": "<p>Now I'm pissed off.</p>",
        "id": 494510088,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737200303
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> Can't reproduce now because why would good things happen, but the REPL still does not allow you to create multiline expressions with <code>ctrl-j</code> or <code>ctrl-v</code></p>",
        "id": 494510316,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737200507
    },
    {
        "content": "<p>@Anton Got it</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">run!</span><span class=\"o\">]</span>\n\n<span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">pf</span><span class=\"o\">.</span><span class=\"n\">Stdout</span>\n<span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">pf</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"w\"> </span><span class=\"n\">exposing</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"no\">Path</span><span class=\"o\">]</span>\n\n<span class=\"n\">raw_exercises!</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"no\">Path</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"no\">List</span><span class=\"w\"> </span><span class=\"no\">Path</span>\n<span class=\"n\">raw_exercises!</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">path</span><span class=\"o\">|</span>\n<span class=\"w\">    </span><span class=\"no\">Path</span><span class=\"o\">.</span><span class=\"n\">list_dir!</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"sc\">??</span><span class=\"w\"> </span><span class=\"o\">[]</span>\n\n<span class=\"n\">exercise_numbers</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"no\">List</span><span class=\"w\"> </span><span class=\"no\">Path</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"no\">List</span><span class=\"w\"> </span><span class=\"no\">U32</span>\n<span class=\"n\">exercise_numbers</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">paths</span><span class=\"o\">|</span>\n<span class=\"w\">    </span><span class=\"n\">paths</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"no\">List</span><span class=\"o\">.</span><span class=\"n\">keep_if</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"nb\">p</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"no\">Str</span><span class=\"o\">.</span><span class=\"n\">starts_with</span><span class=\"p\">(</span><span class=\"no\">Path</span><span class=\"o\">.</span><span class=\"n\">display</span><span class=\"p\">(</span><span class=\"nb\">p</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"s2\">\"exercise_\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"no\">Str</span><span class=\"o\">.</span><span class=\"n\">ends_with</span><span class=\"p\">(</span><span class=\"no\">Path</span><span class=\"o\">.</span><span class=\"n\">display</span><span class=\"p\">(</span><span class=\"nb\">p</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"s2\">\".roc\"</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"no\">List</span><span class=\"o\">.</span><span class=\"n\">keep_oks</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"nb\">p</span><span class=\"o\">|</span>\n<span class=\"w\">            </span><span class=\"n\">p_str</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"no\">Path</span><span class=\"o\">.</span><span class=\"n\">display</span><span class=\"p\">(</span><span class=\"nb\">p</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"n\">p_parts</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"no\">Str</span><span class=\"o\">.</span><span class=\"n\">split_on</span><span class=\"p\">(</span><span class=\"n\">p_str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"_\"</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"n\">p_parts</span><span class=\"w\"> </span><span class=\"n\">is</span>\n<span class=\"w\">                </span><span class=\"o\">[</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..]</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"no\">Ok</span><span class=\"p\">(</span><span class=\"no\">Str</span><span class=\"o\">.</span><span class=\"n\">to_u32</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">)</span><span class=\"sc\">?)</span>\n<span class=\"w\">                </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"no\">Err</span><span class=\"p\">(</span><span class=\"no\">InvalidEx</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">)</span>\n\n<span class=\"n\">run!</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"no\">Path</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"no\">Result</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"n\">_</span>\n<span class=\"n\">run!</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">path</span><span class=\"o\">|</span>\n<span class=\"w\">    </span><span class=\"n\">ex</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">raw_exercises!</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">exercise_numbers</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"no\">List</span><span class=\"o\">.</span><span class=\"n\">sort_asc</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"n\">num</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"no\">List</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()?</span>\n<span class=\"w\">    </span><span class=\"no\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line!</span><span class=\"p\">(</span><span class=\"s2\">\"Checking your solutions for exercise ${Num.to_str(num)}...\"</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 494514506,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737203351
    },
    {
        "content": "<p>The minimal repro would be</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">something!</span><span class=\"o\">]</span>\n\n<span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">pf</span><span class=\"o\">.</span><span class=\"n\">Stdout</span>\n\n<span class=\"n\">something!</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">|</span>\n<span class=\"w\">    </span><span class=\"n\">ex</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"s2\">\"hello\"</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"no\">List</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()?</span>\n<span class=\"w\">    </span><span class=\"no\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line!</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 494514623,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737203428
    },
    {
        "content": "<p>So pipe + PNC + try suffix?</p>",
        "id": 494514652,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737203452
    },
    {
        "content": "<p>I made <a href=\"https://github.com/roc-lang/roc/issues/7530\">#7530</a> for this.</p>",
        "id": 494516670,
        "sender_full_name": "Anton",
        "timestamp": 1737204896
    },
    {
        "content": "<p>If we look at the desugared version we'll probably be able to make sense of this.</p>",
        "id": 494516712,
        "sender_full_name": "Anton",
        "timestamp": 1737204938
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> may also have an idea what's going on</p>",
        "id": 494516723,
        "sender_full_name": "Anton",
        "timestamp": 1737204957
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/blob/1e087b138d18f90daaf60b5eb71ed7afc3498064/crates/compiler/can/src/desugar.rs#L114\">https://github.com/roc-lang/roc/blob/1e087b138d18f90daaf60b5eb71ed7afc3498064/crates/compiler/can/src/desugar.rs#L114</a></p>",
        "id": 494516854,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737205072
    },
    {
        "content": "<p>The desugaring should be working, but a well placed dbg! might be useful</p>",
        "id": 494516915,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737205092
    },
    {
        "content": "<p>I'm going to look at this issue</p>",
        "id": 494771801,
        "sender_full_name": "Anton",
        "timestamp": 1737368704
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/-YE6Ugm2ERMsLWVFLNBabdY0/Screenshot-from-2025-01-20-15-53-17.png\">Screenshot from 2025-01-20 15-53-17.png</a><br>\nThis is the code after desugaring. It's obvious what is going wrong but I'm not sure how things should be changed <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/-YE6Ugm2ERMsLWVFLNBabdY0/Screenshot-from-2025-01-20-15-53-17.png\" title=\"Screenshot from 2025-01-20 15-53-17.png\"><img data-original-content-type=\"image/png\" data-original-dimensions=\"728x748\" src=\"/user_uploads/thumbnail/22008/-YE6Ugm2ERMsLWVFLNBabdY0/Screenshot-from-2025-01-20-15-53-17.png/840x560.webp\"></a></div>",
        "id": 494832421,
        "sender_full_name": "Anton",
        "timestamp": 1737385287
    },
    {
        "content": "<p>Desugar to a Defs then break up the pipe and pass the new def explicitly?</p>",
        "id": 494835707,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737386123
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span>, can you weigh in as well here?</p>",
        "id": 494893141,
        "sender_full_name": "Anton",
        "timestamp": 1737399058
    },
    {
        "content": "<p>He'll probably wake up in 3 hours <span aria-label=\"tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"tears\">:tears:</span></p>",
        "id": 494894315,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737399574
    },
    {
        "content": "<p>Anthony is on the money IMO</p>",
        "id": 494907875,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737405164
    },
    {
        "content": "<p>We shouldn't worry about performance since we are removing pizza from the menu</p>",
        "id": 494907914,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737405185
    },
    {
        "content": "<p>Once it's gone, we can figure out how to make this work better</p>",
        "id": 494907940,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737405197
    },
    {
        "content": "<blockquote>\n<p>Desugar to a Defs then break up the pipe and pass the new def explicitly?</p>\n</blockquote>\n<p>Should I do this for every use of the pizza operator (<a href=\"https://github.com/roc-lang/roc/blob/a8def1a974a6dacdcd18656e66114880f4e92b59/crates/check/can_solo/src/desugar.rs#L39\">here</a> in the code)?</p>",
        "id": 495295234,
        "sender_full_name": "Anton",
        "timestamp": 1737555981
    },
    {
        "content": "<p>That makes sense to me.  Easier to reason about</p>",
        "id": 495299832,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737557151
    },
    {
        "content": "<p>Just to note, this is incorrect code, even if the error message is misleading:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kn\">module</span><span class=\"w\"> </span><span class=\"err\">[</span><span class=\"nc\">something</span><span class=\"p\">]</span>\n\n<span class=\"nv\">something</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">|</span><span class=\"nv\">_</span><span class=\"nf\">|</span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"s\">\"hello\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">first</span><span class=\"p\">()</span><span class=\"err\">?</span>\n</code></pre></div>",
        "id": 495870357,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737811084
    },
    {
        "content": "<p>The ? means we're trying to return <code>Str</code> as the final expression instead of <code>Result Str _</code></p>",
        "id": 495870383,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737811108
    },
    {
        "content": "<p>Hopefully, my attempt to fix things will alleviate that anyway</p>",
        "id": 495870406,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737811132
    },
    {
        "content": "<p>Fixed in <a href=\"https://github.com/roc-lang/roc/pull/7548\">https://github.com/roc-lang/roc/pull/7548</a></p>",
        "id": 495872465,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737812798
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>module [something]\n\nsomething = |_|\n    [\"hello\"] |&gt; List.first()?\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>&gt; cargo run --bin roc -- check test2.roc\n...\n\n── TYPE MISMATCH in ../test2.roc ───────────────────────────────────────────────\n\nThis returns something that&#39;s incompatible with the return type of the\nenclosing function:\n\n4│      [&quot;hello&quot;] |&gt; List.first()?\n        ^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis returns an Err of type:\n\n    [Err [ListWasEmpty]]\n\nBut I expected the function to have return type:\n\n    Str\n\n────────────────────────────────────────────────────────────────────────────────\n\n1 error and 0 warnings found in 121 ms.\n</code></pre></div>",
        "id": 495872480,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737812805
    },
    {
        "content": "<blockquote>\n<p>incompatible with the return type of the enclosing function</p>\n</blockquote>\n<p>I don't understand, the type of <code>something</code> is not specified, so how does it know the return type should be a <code>Str</code>?</p>",
        "id": 495875199,
        "sender_full_name": "Anton",
        "timestamp": 1737815085
    },
    {
        "content": "<p>Because it's operating on a List Str</p>",
        "id": 495875227,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737815115
    },
    {
        "content": "<p>And the ? can AST node has special Result type checking I added</p>",
        "id": 495875258,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737815150
    },
    {
        "content": "<p>We could make the error message better when ? is used on the return value of a function, I don't think that's ever valid</p>",
        "id": 495875472,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737815319
    },
    {
        "content": "<p>But this message is accurate for now</p>",
        "id": 495875480,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737815328
    },
    {
        "content": "<p>So I don't think we should block release on such an error message</p>",
        "id": 495875516,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737815364
    },
    {
        "content": "<p>Assuming we merge this PR</p>",
        "id": 495875519,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737815371
    },
    {
        "content": "<p>In this case the <code>?</code> is not used on the return value:</p>\n<div class=\"codehilite\" data-code-language=\"Scala\"><pre><span></span><code><span class=\"n\">app</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">main</span><span class=\"o\">!</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">pf</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">platform</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/roc-lang/basic-cli/releases/download/0.19.0/bi5zubJ-_Hva9vxxPq4kNx4WHX6oFs8OP&gt;</span>\n<span class=\"s\">}</span>\n\n<span class=\"s\">import pf.Stdout</span>\n\n<span class=\"s\">main! = |_args|</span>\n<span class=\"s\">    Stdout.line!(\"</span><span class=\"err\">\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">find</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">List</span><span class=\"w\"> </span><span class=\"nc\">U64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nc\">U64</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Result</span><span class=\"w\"> </span><span class=\"nc\">U64</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nc\">ValueWasNotFound</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">List</span><span class=\"w\"> </span><span class=\"nc\">U64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nc\">U64</span><span class=\"p\">]</span>\n<span class=\"n\">find</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">array</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"o\">|</span>\n<span class=\"w\">    </span><span class=\"n\">binary_search</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">min_index</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max_index</span><span class=\"o\">|</span>\n<span class=\"w\">        </span><span class=\"n\">middle_index</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">min_index</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">max_index</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\">// 2</span>\n<span class=\"w\">        </span><span class=\"n\">middle_value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">array</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">List</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">middle_index</span><span class=\"p\">)</span><span class=\"o\">?</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">middle_value</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">            </span><span class=\"nc\">Ok</span><span class=\"p\">(</span><span class=\"n\">middle_index</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">min_index</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">max_index</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">            </span><span class=\"nc\">Err</span><span class=\"p\">(</span><span class=\"nc\">ValueWasNotFound</span><span class=\"p\">(</span><span class=\"n\">array</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">middle_value</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">            </span><span class=\"nc\">Ok</span><span class=\"p\">(</span><span class=\"n\">binary_search</span><span class=\"p\">((</span><span class=\"n\">middle_index</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">max_index</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"k\">else</span>\n<span class=\"w\">            </span><span class=\"nc\">Ok</span><span class=\"p\">(</span><span class=\"n\">binary_search</span><span class=\"p\">(</span><span class=\"n\">min_index</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">middle_index</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">)</span>\n\n<span class=\"w\">    </span><span class=\"n\">binary_search</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nc\">List</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">(</span><span class=\"n\">array</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Result</span><span class=\"p\">.</span><span class=\"n\">on_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">_|</span><span class=\"w\"> </span><span class=\"nc\">Err</span><span class=\"p\">(</span><span class=\"nc\">ValueWasNotFound</span><span class=\"p\">(</span><span class=\"n\">array</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">)))</span>\n\n<span class=\"n\">#</span><span class=\"w\"> </span><span class=\"n\">finds</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"n\">in</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">array</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">one</span><span class=\"w\"> </span><span class=\"n\">element</span>\n<span class=\"n\">expect</span>\n<span class=\"w\">    </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"nc\">Ok</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>What's the problem here, is it just operator precedence?</p>",
        "id": 495876253,
        "sender_full_name": "Anton",
        "timestamp": 1737815974
    },
    {
        "content": "<p>I approved the PR</p>",
        "id": 495876273,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737815997
    },
    {
        "content": "<p>The error is:</p>\n<div class=\"codehilite\"><pre><span></span><code>── TOO FEW ARGS in BinarySearch.roc ────────────────────────────────────────────\n\nThe get function expects 2 arguments, but it got only 1:\n\n7│          middle_value = array |&gt; List.get(middle_index)?\n                                    ^^^^^^^^\n\nRoc does not allow functions to be partially applied. Use a closure to\nmake partial application explicit.\n\n────────────────────────────────────────────────────────────────────────────────\n\n1 error and 0 warnings found in 30 ms\n</code></pre></div>",
        "id": 495876278,
        "sender_full_name": "Anton",
        "timestamp": 1737816002
    },
    {
        "content": "<p>Yes, precendence would be the issue</p>",
        "id": 495876367,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737816035
    },
    {
        "content": "<p>a suffix would bind stronger than a infix</p>",
        "id": 495876380,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1737816055
    },
    {
        "content": "<p>Hmm, in the case of </p>\n<div class=\"codehilite\"><pre><span></span><code>4│      [&quot;hello&quot;] |&gt; List.first()?\n        ^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre></div>\n<p>It looks like <code>|&gt;</code> is binding stronger</p>",
        "id": 495876493,
        "sender_full_name": "Anton",
        "timestamp": 1737816146
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/stream/463736-bugs/topic/too.20few.20args/near/495876278\">said</a>:</p>\n<blockquote>\n<p>The error is:</p>\n<p><div class=\"codehilite\"><pre><span></span><code>── TOO FEW ARGS in BinarySearch.roc ────────────────────────────────────────────\n\nThe get function expects 2 arguments, but it got only 1:\n\n7│          middle_value = array |&gt; List.get(middle_index)?\n                                    ^^^^^^^^\n\nRoc does not allow functions to be partially applied. Use a closure to\nmake partial application explicit.\n\n────────────────────────────────────────────────────────────────────────────────\n\n1 error and 0 warnings found in 30 ms\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Is this on my PR branch?</p>",
        "id": 495876806,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737816416
    },
    {
        "content": "<p>No</p>",
        "id": 495876821,
        "sender_full_name": "Anton",
        "timestamp": 1737816435
    },
    {
        "content": "<p>Okay good</p>",
        "id": 495876834,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737816446
    },
    {
        "content": "<p>The precedence is changed in <a href=\"https://github.com/roc-lang/roc/pull/7548\">PR#7548</a>, it seems like the old precedence made more sense</p>",
        "id": 495877091,
        "sender_full_name": "Anton",
        "timestamp": 1737816639
    },
    {
        "content": "<p>Merged</p>",
        "id": 495877099,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737816652
    },
    {
        "content": "<p>You're right that the old precedence made more sense</p>",
        "id": 495877132,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737816682
    },
    {
        "content": "<p>The problem IMO is that pizza and PNC don't make sense together</p>",
        "id": 495877142,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737816698
    },
    {
        "content": "<p>But we need to support them both somehow while they coexist in this middle Roc</p>",
        "id": 495877154,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737816716
    },
    {
        "content": "<p>So this PR is the only way for a pipeline to make sense IMO</p>",
        "id": 495877219,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737816733
    },
    {
        "content": "<p>Do we have an issue for this?</p>",
        "id": 496154049,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1737992831
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/issues/7530\">https://github.com/roc-lang/roc/issues/7530</a></p>",
        "id": 496154438,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737992931
    },
    {
        "content": "<p>Already closed since my PR should have fixed it</p>",
        "id": 496154476,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737992944
    },
    {
        "content": "<p>Ah, great, thanks Sam. I must need to update.</p>",
        "id": 496155118,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1737993108
    },
    {
        "content": "<p>Nightly release is very behind right now, you'll need to come from source for that to be available</p>",
        "id": 496156343,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1737993395
    }
]