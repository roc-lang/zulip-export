[
    {
        "content": "<p><span aria-label=\"partying face\" class=\"emoji emoji-1f973\" role=\"img\" title=\"partying face\">:partying_face:</span> <a href=\"https://gitlab.com/JanCVanB/aoc-2024/-/blob/main/day-03/part-1/main.roc\">https://gitlab.com/JanCVanB/aoc-2024/-/blob/main/day-03/part-1/main.roc</a></p>",
        "id": 485758586,
        "sender_full_name": "jan kili",
        "timestamp": 1733203467
    },
    {
        "content": "<p>Oh how i long for a <code>Str.walkUntil</code></p>",
        "id": 485758909,
        "sender_full_name": "Ryan Barth",
        "timestamp": 1733203655
    },
    {
        "content": "<p><span aria-label=\"partying face\" class=\"emoji emoji-1f973\" role=\"img\" title=\"partying face\">:partying_face:</span> <a href=\"https://gitlab.com/JanCVanB/aoc-2024/-/blob/main/day-03/part-2/main.roc\">https://gitlab.com/JanCVanB/aoc-2024/-/blob/main/day-03/part-2/main.roc</a></p>",
        "id": 485760614,
        "sender_full_name": "jan kili",
        "timestamp": 1733204590
    },
    {
        "content": "<p>I've got a nice solution... but I'm getting a fun one of these if I use my template <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> </p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;&lt;unnamed&gt;&#39; panicked at crates/compiler/mono/src/ir.rs:6166:56:\ncalled `Option::unwrap()` on a `None` value\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>",
        "id": 485762588,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733205637
    },
    {
        "content": "<p>Oh found it... </p>\n<h2>broken</h2>\n<div class=\"codehilite\"><pre><span></span><code>part1 : Str -&gt; Result Str _\n</code></pre></div>\n<h2>works</h2>\n<div class=\"codehilite\"><pre><span></span><code>part1 : Str -&gt; Result Str []\n</code></pre></div>",
        "id": 485763228,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733205915
    },
    {
        "content": "<p>Here is mine <a href=\"https://github.com/ostcar/aoc2024/blob/main/day03.roc\">https://github.com/ostcar/aoc2024/blob/main/day03.roc</a></p>",
        "id": 485763384,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1733205985
    },
    {
        "content": "<p>Ok, so here's my solution</p>\n<p><a href=\"https://github.com/lukewilliamboswell/aoc/blob/main/2024/03.roc\">https://github.com/lukewilliamboswell/aoc/blob/main/2024/03.roc</a></p>\n<div class=\"codehilite\"><pre><span></span><code>TIMING:\nREADING INPUT:  &lt;1ms\nSOLVING PART 1: 1ms\nSOLVING PART 2: 1ms\n</code></pre></div>",
        "id": 485763555,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733206072
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> have a look at <a class=\"stream-topic\" data-stream-id=\"463736\" href=\"/#narrow/channel/463736-bugs/topic/Compiler.20crash.20when.20it.20can.20not.20find.20out.20the.20Err.20type\">#bugs &gt; Compiler crash when it can not find out the Err type</a> </p>\n<p>Another workaround the error is, if you append a <code>|&gt; Result.mapErr \\_ -&gt; PleaseFixMe</code> to your function</p>",
        "id": 485763560,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1733206076
    },
    {
        "content": "<p>Ah nice, I'll fix the template so others wont run into that. Just tested and it fixes the problem. Just made it this instead</p>\n<div class=\"codehilite\"><pre><span></span><code>Solution err : {\n    year : U64,\n    day : U64,\n    title : Str,\n    part1 : Str -&gt; Result Str [Err]err,\n    part2 : Str -&gt; Result Str [Err]err,\n} where err implements Inspect\n</code></pre></div>",
        "id": 485763877,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733206219
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/channel/358903-advent-of-code/topic/2024.20Day.203/near/485763555\">said</a>:</p>\n<blockquote>\n<p>Ok, so here's my solution</p>\n</blockquote>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Ooh...</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>a parser! Nice.</p>\n</div></div>",
        "id": 485763912,
        "sender_full_name": "jan kili",
        "timestamp": 1733206237
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"496321\">Oskar Hahn</span> <a href=\"#narrow/channel/358903-advent-of-code/topic/2024.20Day.203/near/485763384\">said</a>:</p>\n<blockquote>\n<p>Here is mine</p>\n</blockquote>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Ooh...</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>I like that you chose <code>do()</code> as the top split - I chose <code>don't()</code>. I wonder if that correlates to mapping vs recursion.</p>\n</div></div>",
        "id": 485764131,
        "sender_full_name": "jan kili",
        "timestamp": 1733206351
    },
    {
        "content": "<p><span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> I forgot <code>List.sum</code> exists - no regrets on <code>List.walk 0 Num.add</code> <span aria-label=\"sunglasses\" class=\"emoji emoji-1f60e\" role=\"img\" title=\"sunglasses\">:sunglasses:</span></p>",
        "id": 485764564,
        "sender_full_name": "jan kili",
        "timestamp": 1733206578
    },
    {
        "content": "<p>I couldn't resist - <span class=\"user-mention\" data-user-id=\"496321\">@Oskar Hahn</span> I inverted my split like yours, to drop 8 lines of code <span aria-label=\"partying face\" class=\"emoji emoji-1f973\" role=\"img\" title=\"partying face\">:partying_face:</span></p>",
        "id": 485765145,
        "sender_full_name": "jan kili",
        "timestamp": 1733206899
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>When I saw <code>each 1-3 digit numbers</code> I definitely assumed there would be like 4 or more digit numbers in the input so I made a custom parser for this. Overkill it would seem. <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span> </p>\n</div></div>",
        "id": 485765398,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733207036
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>RE: Spoiler</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>If they had done that and my submission had failed, I wonder if I would've identified that requirement. If so, I <del>probably</del> certainly would've gone Mod Squad with <code>% 1000</code> <span aria-label=\"stuck out tongue closed eyes\" class=\"emoji emoji-1f61d\" role=\"img\" title=\"stuck out tongue closed eyes\">:stuck_out_tongue_closed_eyes:</span> </p>\n</div></div>",
        "id": 485766108,
        "sender_full_name": "jan kili",
        "timestamp": 1733207398
    },
    {
        "content": "<p>By the way: I don't think that splitting is a good solution. But if the solution works in a handful of milliseconds, there is no need to optimize it <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 485774051,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1733210904
    },
    {
        "content": "<p>There are so many metrics of goodness, and performance is only one!</p>",
        "id": 485777640,
        "sender_full_name": "jan kili",
        "timestamp": 1733212271
    },
    {
        "content": "<p>IMO, in most projects, the simplest solution furthers your high-level goals more than a high-performance one could.</p>",
        "id": 485778174,
        "sender_full_name": "jan kili",
        "timestamp": 1733212491
    },
    {
        "content": "<p>However, beauty/satisfaction is another metric, and that's always subjective (and sometimes aligned with high performance).</p>",
        "id": 485778625,
        "sender_full_name": "jan kili",
        "timestamp": 1733212660
    },
    {
        "content": "<p>Another day another solution: <a href=\"https://github.com/faldor20/aoc-template/blob/c398af5fde1169b8609ef4bd6b9465de0f380ab3/examples/2024/03.roc\">https://github.com/faldor20/aoc-template/blob/c398af5fde1169b8609ef4bd6b9465de0f380ab3/examples/2024/03.roc</a><br>\nI was keen to try out <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span>'s parser. It took me a few iterations to get the right format. But I'm happy with the result.<br>\nThe performance on the other hand.....well look.... performance isn't everything right <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n<div class=\"codehilite\"><pre><span></span><code>reading took: 0.039441ms\npart1 took: 167.797391ms\npart2 took: 168.628369ms\n</code></pre></div>",
        "id": 485788712,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733215652
    },
    {
        "content": "<p>I kind of want to try hand rolling a parser to find out why it's so crazily slow</p>",
        "id": 485788946,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733215730
    },
    {
        "content": "<p>well.... a run of perf wasn't exactly revealing <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> <br>\n<a href=\"/user_uploads/22008/7tZAS3bFTYAKG0jhtjbOLb_3/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/7tZAS3bFTYAKG0jhtjbOLb_3/image.png\" title=\"image.png\"><img data-original-dimensions=\"891x385\" src=\"/user_uploads/thumbnail/22008/7tZAS3bFTYAKG0jhtjbOLb_3/image.png/840x560.webp\"></a></div><p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> is the advice for perf still to run something like this?:</p>\n<div class=\"codehilite\"><pre><span></span><code>roc build --optimize --profiling examples/2024/03.roc\nperf record -F999 --call-graph dwarf -- ./examples/2024/03\n</code></pre></div>",
        "id": 485791162,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733216436
    },
    {
        "content": "<p>Give samply a try maybe?</p>",
        "id": 485795872,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733217612
    },
    {
        "content": "<p>Splitting strings took me longer than everything else combined:<br>\n<a href=\"https://github.com/r-bar/advent24/blob/master/day03/p2.roc\">https://github.com/r-bar/advent24/blob/master/day03/p2.roc</a></p>\n<p>Now to go see how everyone else got done so fast.</p>",
        "id": 485797413,
        "sender_full_name": "Ryan Barth",
        "timestamp": 1733217985
    },
    {
        "content": "<p>I am running my own simpler template, so I don't get fancy performance numbers out of the box.</p>\n<div class=\"codehilite\"><pre><span></span><code>❯ roc build --optimize p2.roc\n0 errors and 0 warnings found in 800 ms\n while successfully building:\n\n    p2\n❯ poop &#39;./p2 input.txt&#39;\nBenchmark 1 (898 runs): ./p2 input.txt\n  measurement          mean ± σ            min … max           outliers\n  wall_time          5.50ms ±  339us    5.11ms … 6.56ms          0 ( 0%)\n  peak_rss            839KB ± 14.3KB     627KB …  856KB          6 ( 1%)\n  cpu_cycles         22.0M  ±  291K     21.8M  … 25.5M          84 ( 9%)\n  instructions       99.3M  ± 76.5      99.3M  … 99.3M          20 ( 2%)\n  cache_references   39.0K  ± 62.8K     23.0K  …  980K         133 (15%)\n  cache_misses       3.37K  ±  603      2.56K  … 6.39K          24 ( 3%)\n  branch_misses      36.8K  ± 1.26K     35.7K  … 45.4K          59 ( 7%)\n</code></pre></div>",
        "id": 485802760,
        "sender_full_name": "Ryan Barth",
        "timestamp": 1733219299
    },
    {
        "content": "<p>sorry wtf is the poop command ?? <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 485804242,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733219674
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/channel/358903-advent-of-code/topic/2024.20Day.203/near/485795872\">said</a>:</p>\n<blockquote>\n<p>Give samply a try maybe?</p>\n</blockquote>\n<p>I've not seen samply, that's cool! <br>\nI realized I needed to disable the surgical linker! it's working with both perf and samply now.</p>",
        "id": 485804381,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733219712
    },
    {
        "content": "<p><a href=\"https://github.com/andrewrk/poop\">https://github.com/andrewrk/poop</a></p>",
        "id": 485804394,
        "sender_full_name": "Ryan Barth",
        "timestamp": 1733219715
    },
    {
        "content": "<p>Nothing particularly interersting really. but it's clearly spending its time inside  the parser.<br>\n<a href=\"/user_uploads/22008/G7hxvsXn72u7v9CCEdN91ZRA/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/G7hxvsXn72u7v9CCEdN91ZRA/image.png\" title=\"image.png\"><img data-original-dimensions=\"1210x489\" src=\"/user_uploads/thumbnail/22008/G7hxvsXn72u7v9CCEdN91ZRA/image.png/840x560.webp\"></a></div>",
        "id": 485805038,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733219891
    },
    {
        "content": "<p>okay, so basically all it's doing is concatenating strings:<br>\n<a href=\"/user_uploads/22008/ToFEmko5LPEEj85Ty3jM5gKG/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/ToFEmko5LPEEj85Ty3jM5gKG/image.png\" title=\"image.png\"><img data-original-dimensions=\"485x109\" src=\"/user_uploads/thumbnail/22008/ToFEmko5LPEEj85Ty3jM5gKG/image.png/840x560.webp\"></a></div>",
        "id": 485806117,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733220180
    },
    {
        "content": "<p>AHA! I understand what's happening!  <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> <br>\n you report your fancy errors when a parser fails, but my parser is failing almost  3 times for every single input <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span><br>\nBecause It's trying inputs sequentially.</p>\n<p>It'd be interesting to explore a version of the parser library that handles failure quickly. We could potentially thread a config object through the parser that enables verbose error logging or fast error logging. <br>\nThat's what rust's <code>nom</code> seems to do and I understand it to be very very fast</p>",
        "id": 485813828,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733222241
    },
    {
        "content": "<p>okay <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span>  I removed every instance of string interpolation in your passing lib: </p>\n<div class=\"codehilite\"><pre><span></span><code>reading took: 0.032032ms\npart1 took: 1.232324ms\npart2 took: 1.291891ms⏎\n</code></pre></div>\n<p>Not a bad 120x speed up <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 485813858,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733222251
    },
    {
        "content": "<p><a href=\"https://www.google.com/search?client=firefox-b-d&amp;q=nom+error+handling\">https://www.google.com/search?client=firefox-b-d&amp;q=nom+error+handling</a> Is an interesting read on this</p>",
        "id": 485814530,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733222418
    },
    {
        "content": "<p>Leaned to use parser in Roc with this one! loved it</p>\n<p><a href=\"https://github.com/thenikso/advent-of-code-2024-roc/blob/main/03.roc\">https://github.com/thenikso/advent-of-code-2024-roc/blob/main/03.roc</a></p>",
        "id": 485827301,
        "sender_full_name": "Nicola Peduzzi",
        "timestamp": 1733226049
    },
    {
        "content": "<p>I also leaned heavily on <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> and his excellent parser. Congratulations on the documentation, whose copious use of examples <em>really</em> suits my horrible way of learning things. For Part 2 I just split on <code>do()</code> and <code>don't()</code>, crossing my fingers that they would follow in a regular pattern ... and found that they did. I felt a bit guilty not doing Part 2 from first to last as a parser -- but the splitting strategy actually gets things done faster, no doubt because my parser is not efficiently constructed and part 2 is therefore dealing with a much shorter string to parse.</p>",
        "id": 485837388,
        "sender_full_name": "Paul Stanley",
        "timestamp": 1733228795
    },
    {
        "content": "<p>I just implemented a simple parser, walking the chars through a state machine.  Easy peasy:</p>\n<p><a href=\"https://github.com/gamebox/aoc-2024/blob/main/day3/puzzle2/main.roc\">https://github.com/gamebox/aoc-2024/blob/main/day3/puzzle2/main.roc</a></p>",
        "id": 485867962,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733236368
    },
    {
        "content": "<p>I could probably get it faster if I removed all of the string work and added a case for each piece of each op</p>",
        "id": 485868330,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733236448
    },
    {
        "content": "<p>Interesting, while doing that I got a very strange compiler crash:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>thread '&lt;unnamed&gt;' panicked at crates/compiler/mono/src/ir/decision_tree.rs:777:17:\nIntLiteral([44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], U8)\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>",
        "id": 485873799,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733237755
    },
    {
        "content": "<p>During mono?</p>",
        "id": 485874523,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733237924
    },
    {
        "content": "<p>Updated the above with the current code.  Have to head out for work...let me know if anyone has any ideas</p>",
        "id": 485876467,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733238363
    },
    {
        "content": "<p>Looks like the compiler is looking for an Identifier or a an Underscore pattern, but it's getting an IntLiteral</p>",
        "id": 485876635,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733238403
    },
    {
        "content": "<p>This is the relevant code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">                </span><span class=\"fm\">debug_assert!</span><span class=\"p\">(</span>\n<span class=\"w\">                    </span><span class=\"fm\">matches!</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Pattern</span><span class=\"p\">::</span><span class=\"n\">Identifier</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Pattern</span><span class=\"p\">::</span><span class=\"n\">Underscore</span><span class=\"p\">,),</span>\n<span class=\"w\">                    </span><span class=\"s\">\"{pattern:?}\"</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"p\">);</span>\n</code></pre></div>",
        "id": 485877012,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733238479
    },
    {
        "content": "<blockquote>\n<p><div class=\"codehilite\"><pre><span></span><code>thread &#39;&lt;unnamed&gt;&#39; panicked at crates/compiler/mono/src/ir/decision_tree.rs:777:17:\nIntLiteral([44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], U8)\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I could not find any existing issue about this, can you file a new one?</p>",
        "id": 485877438,
        "sender_full_name": "Anton",
        "timestamp": 1733238573
    },
    {
        "content": "<p>I'll have to figure out a minimal repro</p>",
        "id": 485877904,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733238678
    },
    {
        "content": "<p>I can try to do that tonight</p>",
        "id": 485877930,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733238685
    },
    {
        "content": "<p>Damn AOC really bites into my limited contribution time</p>",
        "id": 485877975,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733238696
    },
    {
        "content": "<blockquote>\n<p>I'll have to figure out a minimal repro</p>\n</blockquote>\n<p>Feel free to toss in the entire thing if you're short on time :)</p>",
        "id": 485878775,
        "sender_full_name": "Anton",
        "timestamp": 1733238888
    },
    {
        "content": "<p>Ok</p>",
        "id": 485880464,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733239289
    },
    {
        "content": "<p>Created: <a href=\"https://github.com/roc-lang/roc/issues/7302\">https://github.com/roc-lang/roc/issues/7302</a></p>",
        "id": 485883965,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733240123
    },
    {
        "content": "<p>Updated this with a lot of debugging findings</p>",
        "id": 485956726,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733261254
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"651372\">Eli Dowling</span> <a href=\"#narrow/channel/358903-advent-of-code/topic/2024.20Day.203/near/485813858\">said</a>:</p>\n<blockquote>\n<p>okay <span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span>  I removed every instance of string interpolation in your passing lib: </p>\n<div class=\"codehilite\"><pre><span></span><code>reading took: 0.032032ms\npart1 took: 1.232324ms\npart2 took: 1.291891ms⏎\n</code></pre></div>\n<p>Not a bad 120x speed up <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"651372\">@Eli Dowling</span> do you have anything more on this I could see? I'm interested to know if there is anything here we can roll into the parser for others to benefit from</p>",
        "id": 485966363,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733264888
    },
    {
        "content": "<p>Haven't seen Eli's solution, but that's the exact thing I was trying to do when my compilation blew up.  Hoping to see similar improvements :-)</p>",
        "id": 485967104,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733265207
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"651372\">Eli Dowling</span> <a href=\"#narrow/stream/358903-advent-of-code/topic/2024.20Day.203/near/485791162\">said</a>:</p>\n<blockquote>\n<p>well.... a run of perf wasn't exactly revealing <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> <br>\n<a href=\"/user_uploads/22008/7tZAS3bFTYAKG0jhtjbOLb_3/image.png\">image.png</a></p>\n<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> is the advice for perf still to run something like this?:</p>\n<p><div class=\"codehilite\"><pre><span></span><code>roc build --optimize --profiling examples/2024/03.roc\nperf record -F999 --call-graph dwarf -- ./examples/2024/03\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I'm late to the party. Yes with the caveat that on Linux you want <code>--linker=legacy</code> and it works best of the platform is built with debug info.</p>",
        "id": 485970098,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733266493
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/358903-advent-of-code/topic/2024.20Day.203/near/485966363\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"651372\">Eli Dowling</span> <a href=\"#narrow/channel/358903-advent-of-code/topic/2024.20Day.203/near/485813858\">said</a>:</p>\n<blockquote>\n<p>okay <span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span>  I removed every instance of string interpolation in your passing lib: </p>\n<div class=\"codehilite\"><pre><span></span><code>reading took: 0.032032ms\npart1 took: 1.232324ms\npart2 took: 1.291891ms⏎\n</code></pre></div>\n<p>Not a bad 120x speed up <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"651372\">Eli Dowling</span> do you have anything more on this I could see? I'm interested to know if there is anything here we can roll into the parser for others to benefit from</p>\n</blockquote>\n<p>I'll look into it, but currently I made it faster by basically removing all error logging... Not something you want. </p>\n<p>I'd say we need to thread a parser config through, and make the logs a tag union, either just a tag indicating the current node that failed which is what you do normally, it's full string log if we have the debug config setting. </p>\n<p>Definitely take a look at the link to nom I shared where they talk about efficient error handling :) </p>\n<p>Another thing we could do is have a parser function that specifically allows attaching errors to the parser.  So if it gets an error it adds in a message, that wya the user can give their own parser errors! Angstrom in ocaml does this, and I like it :)</p>",
        "id": 485984666,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733273062
    },
    {
        "content": "<p>Here's my solution, I thought this one was fun <a href=\"https://github.com/isaacvando/aoc/blob/main/2024/3.roc\">https://github.com/isaacvando/aoc/blob/main/2024/3.roc</a></p>",
        "id": 485988752,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1733275200
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"651372\">Eli Dowling</span> <a href=\"#narrow/stream/358903-advent-of-code/topic/2024.20Day.203/near/485984666\">said</a>:</p>\n<blockquote>\n<p>Another thing we could do is have a parser function that specifically allows attaching errors to the parser.  So if it gets an error it adds in a message, that wya the user can give their own parser errors! Angstrom in ocaml does this, and I like it :)</p>\n</blockquote>\n<p>This is also what’s done in FParsec which is what I used for the parser for my language.  I was about to explore it more once I started to rewrite the parser - but that’s on hold for now, maybe indefinitely.</p>",
        "id": 485990750,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733276273
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> <a href=\"#narrow/channel/358903-advent-of-code/topic/2024.20Day.203/near/485883965\">said</a>:</p>\n<blockquote>\n<p>Created: <a href=\"https://github.com/roc-lang/roc/issues/7302\">https://github.com/roc-lang/roc/issues/7302</a></p>\n</blockquote>\n<p>I finally fixed this through some convoluted means of moving all literal matching out into the guards.  I don't know if that's why, but the solution is about the same as the old one.  So a terrific <del>waste of time</del> learning moment. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 486003501,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733282250
    },
    {
        "content": "<p>It's a little under the wire, but here's my stab at it: <a href=\"https://github.com/Saalico/aoc_2024/blob/main/day3/main.roc\">https://github.com/Saalico/aoc_2024/blob/main/day3/main.roc</a></p>\n<p>I'm very much a newb at coding, especially roc, so open to suggestions/call outs if any of you are so inclined. Happy coding!</p>",
        "id": 486009692,
        "sender_full_name": "Jesse Nutt",
        "timestamp": 1733285670
    },
    {
        "content": "<p>Already one day late in the advent of code <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> <a href=\"https://github.com/RobinCamarasa/Advent-of-code/blob/master/2024/day03/RobinCamarasa/main.roc\">https://github.com/RobinCamarasa/Advent-of-code/blob/master/2024/day03/RobinCamarasa/main.roc</a></p>",
        "id": 486036141,
        "sender_full_name": "Robin Camarasa",
        "timestamp": 1733300994
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"688206\">Jesse Nutt</span> <a href=\"#narrow/channel/358903-advent-of-code/topic/2024.20Day.203/near/486009692\">said</a>:</p>\n<blockquote>\n<p>It's a little under the wire, but here's my stab at it: <a href=\"https://github.com/Saalico/aoc_2024/blob/main/day3/main.roc\">https://github.com/Saalico/aoc_2024/blob/main/day3/main.roc</a></p>\n<p>I'm very much a newb at coding, especially roc, so open to suggestions/call outs if any of you are so inclined. Happy coding!</p>\n</blockquote>\n<p>I like your solution witch looks very concise but you're lucky that the input didn't test your failures <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> (I've seen the same issue in several other solutions)</p>\n<p>Your response to <code>mul(2,4)3,5)</code> might be <code>23</code> but the good one is <code>8</code>.</p>",
        "id": 486163455,
        "sender_full_name": "Ghislain",
        "timestamp": 1733340283
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"528453\">Ghislain</span> <a href=\"#narrow/channel/358903-advent-of-code/topic/2024.20Day.203/near/486163455\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"688206\">Jesse Nutt</span> <a href=\"#narrow/channel/358903-advent-of-code/topic/2024.20Day.203/near/486009692\">said</a>:</p>\n<blockquote>\n<p>It's a little under the wire, but here's my stab at it: <a href=\"https://github.com/Saalico/aoc_2024/blob/main/day3/main.roc\">https://github.com/Saalico/aoc_2024/blob/main/day3/main.roc</a></p>\n<p>I'm very much a newb at coding, especially roc, so open to suggestions/call outs if any of you are so inclined. Happy coding!</p>\n</blockquote>\n<p>I like your solution witch looks very concise but you're lucky that the input didn't test your failures <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> (I've seen the same issue in several other solutions)</p>\n<p>Your response to <code>mul(2,4)3,5)</code> might be <code>23</code> but the good one is <code>8</code>.</p>\n</blockquote>\n<p>Ack! That's embarrassing!  Is there really such a case that other puzzle inputs would have thrown that edge case? </p>\n<p>Either way, let's take another swing:</p>\n<div class=\"codehilite\"><pre><span></span><code>part1 = \\in -&gt;\n    Str.splitOn in &quot;)&quot;\n    |&gt; List.joinMap \\x -&gt;\n        if Str.contains x &quot;mul(&quot; then\n            Str.splitOn x &quot;mul(&quot;\n        else\n            [&quot;&quot;]\n    |&gt; List.keepIf \\chunk -&gt; (List.all (Str.toUtf8 chunk) \\c -&gt; List.contains closeToken c) &amp;&amp; !(Str.isEmpty chunk)\n    |&gt; List.keepOks \\x -&gt; mulString x\n    |&gt; List.sum\n</code></pre></div>",
        "id": 486215202,
        "sender_full_name": "Jesse Nutt",
        "timestamp": 1733366789
    },
    {
        "content": "<p>Hmm, why don't we use a regex here? (Because roc does not yet support it properly?)</p>",
        "id": 486581802,
        "sender_full_name": "Johannes",
        "timestamp": 1733513513
    },
    {
        "content": "<p>Yes, we don't have a regex package yet</p>",
        "id": 486967352,
        "sender_full_name": "Anton",
        "timestamp": 1733742689
    },
    {
        "content": "<p>The first one solved by the Roc Claude agent:<br>\n<a href=\"/user_uploads/22008/aRNoYF5_jSYeebs778v7gN33/main_claude.roc\">main_claude.roc</a><br>\n<a href=\"/user_uploads/22008/fwyR18D9tjStAMnkaeKovl4s/prompt-aoc-3-part1.txt\">prompt-aoc-3-part1.txt</a><br>\n<a href=\"/user_uploads/22008/T2mKGMLpC8c21td4-UUfSbKr/prompt-aoc-3-part2.txt\">prompt-aoc-3-part2.txt</a></p>\n<p>I did have to fiddle with the prompt a bit; it was using some old Roc syntax, I told it to use intermediary variables with <code>expect</code> and had to show it how to properly use <code>dbg</code>.</p>",
        "id": 487081573,
        "sender_full_name": "Anton",
        "timestamp": 1733772729
    },
    {
        "content": "<p>Hey, one thing that would be cool is actually recording you doing one of these end-to-end.</p>",
        "id": 487083058,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733773188
    },
    {
        "content": "<p>uhu, I might do a simple screen recording later :)</p>",
        "id": 487205075,
        "sender_full_name": "Anton",
        "timestamp": 1733824581
    },
    {
        "content": "<p>I am a bit slow, christmas holidays only started now, so i hope to have a little more time to spend on these puzzles. </p>\n<p>I try to solve <a href=\"https://github.com/roc-lang/roc/issues/3\">#3</a> with a parser, because, i like to understand parsers. I am not yet grasping the two type </p>\n<div class=\"codehilite\"><pre><span></span><code>mulParser : Parser String.Utf8 Mul\nmulParser =\n    const (\\first -&gt; \\second -&gt; { first: first, second: second })\n    |&gt; skip (string &quot;mul(&quot;)\n    |&gt; keep digits\n    |&gt; skip (string &quot;,&quot;)\n    |&gt; keep digits\n    |&gt; skip (string &quot;)&quot;)\n\nmParser : Parser String.Utf8 Mul\nmParser =\n    const identity\n    |&gt; skip (chompUntil &quot;mul(&quot;)\n    |&gt; keep mulParser\n</code></pre></div>\n<p>So now i get a compiler issue stating:</p>\n<div class=\"codehilite\"><pre><span></span><code>── TYPE MISMATCH in src/S2024/D03.roc ──────────────────────────────────────────\n\nSomething is off with the body of the mParser definition:\n\n64│   mParser : Parser String.Utf8 Mul\n65│   mParser =\n66│&gt;      const identity #\n67│&gt;      |&gt; skip (chompUntil &quot;mul(&quot;)\n68│&gt;      |&gt; keep mulParser\n\nThis Parser.keep call produces:\n\n    Parser (List Str) Mul\n\nBut the type annotation on mParser says it should be:\n\n    Parser (List U8) Mul\n</code></pre></div>\n<p>Which leaves the question, how do i map a <code>Parser (List Str) Mul</code> to a <code>Parser (List U8) Mul</code>, or more general, a how to map a <code>Parser a x</code> to a <code> Parser b x</code>?</p>",
        "id": 490131185,
        "sender_full_name": "Eelco Hoekema",
        "timestamp": 1734689718
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span></p>",
        "id": 490176240,
        "sender_full_name": "Anton",
        "timestamp": 1734706342
    },
    {
        "content": "<p>I'm not very good at parser, but I think the fundamental issue is that <code>chompUntil</code> is meant to work on single characters, not full strings.</p>\n<p>By saying <code>chompUntil \"mul(\"</code>, you are requesting that the input be a <code>List Str</code> like <code>[\"test\", \"mul()\", \"other\", \"something\", \"mul(\", \"last\"]</code>. Then it would consume strings looking for exact matches until it ends up only having the list <code>[\"mul(\", \"last\"]</code>. I don't think this is the behaviour you want.</p>",
        "id": 490200337,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734714504
    },
    {
        "content": "<p>My gut feeling is that you use something like <code>alt</code> to attempt to parse a <code>mulParser</code>. If that fails, you would fall back on a parser that just consumes a single character.</p>",
        "id": 490201038,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734714796
    },
    {
        "content": "<p>Then loop that</p>",
        "id": 490201052,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734714800
    },
    {
        "content": "<p>but there is probably a smarter way. I'm really not a fan of parser combinators most of the time so I don't really know how to use them well.</p>",
        "id": 490201131,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734714834
    }
]