[
    {
        "content": "<p>Here is my partial <a href=\"https://github.com/lukewilliamboswell/roc-things/blob/main/aoc-2022/day7.roc\">solution for Day 7</a>. I've got to the point where it parses the input, and passes all my tests. I shouldn't have too much trouble implementing the next bit, but I would like to make my. parsing more reliable. At the moment I have to manually append a newline character to the end of the input to make it work properly. I've really had a lot of trouble trying to figure out how to <code>skip</code> and <code>ingore</code> something. Basically I want to consume/chomp a newline character if it's there, but if it's not then be happy. I could write something using <code>buildPrimitiveParser</code> maybe, but I'm not sure how to get it to play nicely with the applicative API. Would really appreciate any assistance here. I'm definitely missing a trick on how <code>const</code> and <code>apply</code> work together here I think.</p>",
        "id": 314433491,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1670412472
    },
    {
        "content": "<p>You may consider instead of saying that a line of input is valid if it ends in a newline, that your lines of input are valid if they are separated by newlines. for example: <a href=\"https://gist.github.com/ayazhafiz/f06a714f77a5736545c3b63fa942edf9#file-parser-roc-L152\">https://gist.github.com/ayazhafiz/f06a714f77a5736545c3b63fa942edf9#file-parser-roc-L152</a></p>",
        "id": 314459279,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1670420781
    },
    {
        "content": "<p>Here's my <a href=\"https://github.com/shritesh/advent/blob/main/2022/07.roc\">Day 7</a>. I feel like I should memoize the calculation but computers are fast.</p>",
        "id": 314468336,
        "sender_full_name": "Shritesh Bhattarai",
        "timestamp": 1670423390
    },
    {
        "content": "<p>Here is my <a href=\"https://github.com/lukewilliamboswell/roc-things/blob/main/aoc-2022/day7.roc\">completed Day 7</a>. That was more of a challenge. I had quite a few crashes and things to work around, and then plenty of minor logic bugs along the way. I also refactored along the way to significantly speed up the calculation so now it runs almost instantly. Pretty happy with the parsers and combinators too <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 314788180,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1670540276
    },
    {
        "content": "<p>I know it's probably not a fair comparison right now and the implementations are very different, but a bit of fun anyway... but I've been comparing the speed of my Day 7 with mates who wrote it in Rust. My Roc implementation is sitting at <em>33.7ms</em>, verse Rust's <em>2.2ms</em> to run the whole puzzle including reading the file so about 15x slower at the moment. I'm pretty impressed with this! I imagine there is a lot of things that can be optimised yet in basic-cli. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 314793745,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1670543080
    },
    {
        "content": "<p>I would love to see some flamegraphs of the 2 apps to know where the time is being spent.</p>",
        "id": 314793944,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670543203
    },
    {
        "content": "<blockquote>\n<p>My Roc implementation is sitting at 33.7ms, verse Rust's 2.2ms to run the whole puzzle including reading the file so about 15x slower at the moment</p>\n</blockquote>\n<p>Is this with both compilers optimizing the code?</p>",
        "id": 314794813,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1670543747
    },
    {
        "content": "<p>Yes I think so. Its the release version of Rust, and roc then using <code>roc build --optimize</code></p>",
        "id": 314795010,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1670543873
    },
    {
        "content": "<p>Running it on my linux machine is a little slower</p>\n<div class=\"codehilite\"><pre><span></span><code>$ hyperfine --warmup 3 &#39;./app-aoc-2022-day-7&#39;\nBenchmark 1: ./app-aoc-2022-day-7\n  Time (mean ± σ):      48.3 ms ±   0.2 ms    [User: 47.9 ms, System: 0.4 ms]\n</code></pre></div>",
        "id": 314796074,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1670544367
    },
    {
        "content": "<p>I'll try and figure out how to get a flame graph</p>",
        "id": 314796100,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1670544397
    },
    {
        "content": "<p>You have a ton of allocations. So that probably is the main cost of your code in Roc</p>",
        "id": 314797885,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670545616
    },
    {
        "content": "<p>Is that mostly from the parsing logic do you think?</p>",
        "id": 314798662,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1670546140
    },
    {
        "content": "<p>Not really sure. My gut feeling is that it is related to the dicts of lists of strings, but it could be the parser. Maybe I should compare to a different day that just parses and does simple math</p>",
        "id": 314798904,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670546289
    },
    {
        "content": "<p>Oh, parser is definitely part of it. <code>List.sublist</code> called by the parser is pretty heavy.</p>",
        "id": 314799013,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670546399
    },
    {
        "content": "<p>Since we don't have seamless slices yet, all of those are allocations</p>",
        "id": 314799076,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670546419
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/0MYBuCYwiQ997fefc6bVQB5k/kernal.svg\">kernal.svg</a></p>",
        "id": 314799132,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1670546463
    },
    {
        "content": "<p>My first attempt... how can I improve this?</p>",
        "id": 314799151,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1670546488
    },
    {
        "content": "<p>use the legacy linker and maybe an unoptimized build if you want the best flamegraph. Though unoptimized is not necessarily representive of the final graph</p>",
        "id": 314799240,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670546536
    },
    {
        "content": "<p>I've been thinking the parser could just pass indexes around. Maybe that would be a lot faster?</p>",
        "id": 314799260,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1670546554
    },
    {
        "content": "<p>With seamless slices, it should hopefullly be approximately as fast as passing around indices, but yeah, that would be faster than calling sublist currently.</p>",
        "id": 314799304,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670546607
    },
    {
        "content": "<p>Also, <code>Dict.insert</code> is using a lot of the time in subfunctions. Not completely sure why. How big are these dictionaries? I think pretty small, so my guess is that the hashing is actually costing a solid amount. but that is just a guess.</p>",
        "id": 314799397,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670546668
    },
    {
        "content": "<p>Does the legacy linker work on linux atm?</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ roc build day7.roc --linker legacy\n\nI was expecting this file to exist:\n\n    /home/luke/.cache/roc/packages/github.com/roc-lang/basic-cli/releases/download/0.1.2/3bKbbmgtIfOyC6FviJ9o8F8xqKutmXgjCJx3bMfVTSo/linux-x86_64.o\n\nHowever, it was not there!\n\nIf you have the platform<span class=\"err\">'</span>s <span class=\"nb\">source</span> code locally, you may be able to generate it by re-running this <span class=\"nb\">command</span> with --prebuilt-platform<span class=\"o\">=</span><span class=\"nb\">false</span>\n</code></pre></div>",
        "id": 314799409,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1670546679
    },
    {
        "content": "<p>Oh, it doesn't work with the url published platform</p>",
        "id": 314799786,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670546910
    },
    {
        "content": "<p>Optimized flamegraph: <a href=\"/user_uploads/22008/HvNfejbrqhAMd_ktgRkU6hkj/flamegraph.svg\">flamegraph.svg</a></p>",
        "id": 314799837,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670546958
    },
    {
        "content": "<p>Unoptimized flamegraph: <a href=\"/user_uploads/22008/ufdfo2e5u8141uqgbKmJbOfc/flamegraph.svg\">flamegraph.svg</a></p>",
        "id": 314799928,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670547004
    },
    {
        "content": "<p>Allocation count: 44060</p>",
        "id": 314800173,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670547151
    },
    {
        "content": "<p>haha...That's crazy.</p>",
        "id": 314800193,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670547162
    },
    {
        "content": "<p>lol, I think I need to figure out how to write Roc without all the allocations. But tbh, I'm not exactly sure where the line is, what makes an allocation and what doesn't? I feel like it is everytime you create a new thing in memory. So if I can change my code to re-use the same structure, i.e. a record that gets passed around then that would reduce the allocations?</p>",
        "id": 314800398,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1670547286
    },
    {
        "content": "<p>Though most of the time malloc is giving us the same pointer over an over again. We allocate it and free it and then allocate it again...</p>\n<p>The address <code>0x5644723eb9b0</code> got allocated <code>21633</code> times for me. Most of the time just with about 10 to 20 bytes of data.</p>",
        "id": 314800437,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670547322
    },
    {
        "content": "<p>given the varying small sizes, I would assume most of the allocations are <code>Str</code> or <code>List U8</code>, but I am not sure...just a guess.</p>",
        "id": 314800584,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670547408
    },
    {
        "content": "<p>I should double check how I wrote dict to make sure it doesn't allocate unnecessarily when taking a key that is on the heap.</p>",
        "id": 314800763,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670547525
    },
    {
        "content": "<p>To clarify <a href=\"https://github.com/roc-lang/roc/issues/1361\">this Issue#1361</a> is what you mean by seamless slices? I guess this feature is still in the works?</p>",
        "id": 314801429,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1670547954
    },
    {
        "content": "<p>So your breakdown seems to be about:</p>\n<p>Just parsing:<br>\n12ms<br>\n20541 allocations</p>\n<p>Building directory list:<br>\n22ms<br>\n18229 allocations</p>\n<p>Rest:<br>\n10ms<br>\n5290 allocations</p>",
        "id": 314801598,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670548081
    },
    {
        "content": "<p>Yeah, that feature. It is decently well thought through at this point, just someone has to actually implement it and wire it through the compiler.</p>",
        "id": 314801688,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670548136
    },
    {
        "content": "<p>Looks really amazing for parsers! <span aria-label=\"drooling\" class=\"emoji emoji-1f924\" role=\"img\" title=\"drooling\">:drooling:</span></p>",
        "id": 314801874,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1670548265
    },
    {
        "content": "<p>Now just imagine an essentially zero allocation parser because the lists and strings all are seamless slices and just referencing the original strings/lists. Allocating at most once for each final element going into your datastructure</p>",
        "id": 314802028,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670548377
    },
    {
        "content": "<p>Anyway, i definitely think I need to dig into your build directory listing function and what it calls to figure out if dicts have an issue with cloning keys and what the cost actually is here.</p>",
        "id": 314802207,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670548478
    },
    {
        "content": "<p>One immediate thought on general performance, can you reverse your cwd list.? Append to it and drop last. Prepend and drop first are expensive.</p>",
        "id": 314802482,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670548668
    },
    {
        "content": "<p>Probably would be better to just reverse at the very end if needed.</p>",
        "id": 314802491,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670548681
    },
    {
        "content": "<p>Just gave it a shot, made no difference.</p>",
        "id": 314803068,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1670549057
    },
    {
        "content": "<p>I definitely need to look into dictionary and see what is going on. I think there may be a referencing issue there.</p>\n<p>Past that, it should help performance to change the key from <code>List Str</code> to <code>Str</code> for now<br>\nJust use a helper like: <code>makeKey = \\path -&gt; Str.joinWith path \"/\"</code></p>",
        "id": 314805642,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670551023
    },
    {
        "content": "<p>Oh yeah, almost certainly a referencing bug with dictionary keys that leads to copies. That or a referencing bug with hashing lists of reference counted types that leads to copies. Changing the key type to Str just for  <code>buildDirectoryListing</code> and it's sub functions cuts out ~15000 allocations.</p>",
        "id": 314806085,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670551297
    },
    {
        "content": "<p>Random aside, I have no idea why, but the program as a whole even after reseting all of the code is running about 2x slower for me. My computer must be throttling or doing something weird, but so far I can't figure out what.</p>",
        "id": 314806363,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670551454
    },
    {
        "content": "<p>Ok. I think I found the root issue at least for the dictionary part. Small String hashing has terrible performance (it always allocates). All of your strings are small strings. So you have<code>List SmallStr</code>, which is probably the worst case for hashing in the compiler currently. That is why joining the strings is faster. It costs one allocation, but leads to way better hashing.</p>",
        "id": 314808972,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670553306
    },
    {
        "content": "<p>I think we may need a special hack for small string hashing if we want good performance here.</p>",
        "id": 314809094,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670553405
    },
    {
        "content": "<p>Anyway new summary: With <code>Str</code> keys to the <code>Dict</code> for the <code>buildDirectoryListing</code> the time of that function goes from 22ms to about 3ms</p>",
        "id": 314809413,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670553625
    },
    {
        "content": "<p>It's currently a <code>List Str</code> what do you mean by <code>Str</code> keys?</p>",
        "id": 314809690,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1670553836
    },
    {
        "content": "<p><code>newKey = Str.joinWith oldKey \"/\"</code></p>",
        "id": 314809937,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670553982
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/358903-Advent-of-Code/topic/Day.207/near/314800398\">said</a>:</p>\n<blockquote>\n<p>lol, I think I need to figure out how to write Roc without all the allocations. But tbh, I'm not exactly sure where the line is, what makes an allocation and what doesn't? I feel like it is everytime you create a new thing in memory. So if I can change my code to re-use the same structure, i.e. a record that gets passed around then that would reduce the allocations?</p>\n</blockquote>\n<p>It's whenever you create a new thing <em>whose type has variable size</em><br>\nFor example every value of <code>U64</code> is always the same size. But different values of <code>List U64</code> could be different sizes. That means <code>U64</code> does not allocate but <code>List U64</code> does.<br>\nThe only 3 things in Roc that allocate are <code>List</code>, <code>Str</code>, and recursive tag unions (for example tree structures or linked lists).</p>",
        "id": 314844660,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1670575760
    },
    {
        "content": "<p>Numbers, records, and non-recursive tags don't allocate.</p>",
        "id": 314844719,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1670575798
    },
    {
        "content": "<p>The one exception to the rule is that we have a performance trick where we are able to skip allocation for \"small\" <code>Str</code> (smaller than 3 <code>Nat</code>s). In general this makes things faster, but it means that low-level code in the standard library needs special cases for small strings. And Brendan found out that the hashing code for this case isn't as fast as it could be.</p>",
        "id": 314846023,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1670576286
    },
    {
        "content": "<p>think i'll take a break for today since I ran into 3 probable compiler bugs in a row <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 314991301,
        "sender_full_name": "Gabriel Pickl",
        "timestamp": 1670623858
    },
    {
        "content": "<p>Man that was hard!<br>\nCatching up still <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> <a href=\"https://github.com/lowderdev/advent-of-code/blob/main/2022/roc/day7/main.roc\">day7</a></p>",
        "id": 315138634,
        "sender_full_name": "Logan Lowder",
        "timestamp": 1670715331
    },
    {
        "content": "<p>Had to borrow some of your code <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span><br>\n(gave you a shout out in the comments) <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 315138710,
        "sender_full_name": "Logan Lowder",
        "timestamp": 1670715383
    },
    {
        "content": "<p>Thanks, your solution looks nice! <span aria-label=\"ok\" class=\"emoji emoji-1f44c\" role=\"img\" title=\"ok\">:ok:</span></p>",
        "id": 315144567,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1670720243
    }
]