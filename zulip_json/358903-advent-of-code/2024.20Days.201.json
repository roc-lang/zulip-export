[
    {
        "content": "<p>I've been wanting to try out Roc for advent of code. I use the Roc template on github for aoc. </p>\n<p>But I run in an error:</p>\n<blockquote>\n<p>roc build 01.roc<br>\nthread '&lt;unnamed&gt;' panicked at crates/compiler/mono/src/ir.rs:6246:56:<br>\ncalled <code>Option::unwrap()</code> on a <code>None</code> value<br>\nnote: run with <code>RUST_BACKTRACE=1</code> environment variable to display a backtrace</p>\n</blockquote>\n<p>If I use <code>roc check 01.roc</code>I get 0 errors and 0 warnings. I'm using the latest nightly and also tried with:  roc_nightly-old_linux_x86_64-2024-12-11-d746e2a</p>\n<p>My code:</p>\n<div class=\"codehilite\"><pre><span></span><code>app [main] {\n    pf: platform &quot;https://github.com/roc-lang/basic-cli/releases/download/0.17.0/lZFLstMUCUvd5bjnnpYromZJXkQUrdhbva4xdBInicE.tar.br&quot;,\n    aoc: &quot;https://github.com/lukewilliamboswell/aoc-template/releases/download/0.2.0/tlS1ZkwSKSB87_3poSOXcwHyySe0WxWOWQbPmp7rxBw.tar.br&quot;\n}\n\nimport pf.Stdin\nimport pf.Stdout\nimport pf.Utc\nimport aoc.AoC {\n    stdin: Stdin.readToEnd,\n    stdout: Stdout.write,\n    time: \\{} -&gt; Utc.now {} |&gt; Task.map Utc.toMillisSinceEpoch,\n}\n\n\nmain =\n    AoC.solve {\n        year: 2024,\n        day: 1,\n        title: &quot;Historian Hysteria&quot;,\n        part1,\n        part2,\n    }\n\nsampleData =\n    &quot;&quot;&quot;\n    3   4\n    4   3\n    2   5\n    1   3\n    3   9\n    3   3\n    &quot;&quot;&quot;\n\nasIntegers = \\data -&gt;\n    dbg data\n    left =\n        data\n            |&gt; List.first\n            |&gt; Result.withDefault &quot;0&quot;\n            |&gt; Str.toI32\n            |&gt; Result.withDefault 0\n    right =\n        data\n            |&gt; List.last\n            |&gt; Result.withDefault &quot;0&quot;\n            |&gt; Str.toI32\n            |&gt; Result.withDefault 0\n    dbg (left, right)\n\nparseInput = \\data -&gt;\n    data\n        |&gt; Str.splitOn &quot;\\n&quot;\n        |&gt; dbg\n        |&gt; List.map (\\line -&gt; Str.splitOn line &quot;   &quot;)\n        |&gt; dbg\n        |&gt; List.map asIntegers\n        |&gt; List.walk {left : [], right: []} \\t, (l,r) -&gt; { t &amp; left : List.append t.left l, right: List.append t.right r}\n\n\nsolve1 = \\input -&gt;\n    left = List.sortAsc input.left\n    right = List.sortAsc input.right\n\n    List.map2 left right (\\x,y -&gt; Num.abs (Num.sub x y))\n        |&gt; List.sum\n\n\nsolve2 = \\input -&gt;\n    input.left\n        |&gt; List.walk 0 \\s,a  -&gt; s +  (a * (Num.toI32 (List.countIf input.right \\b -&gt; a == b )))\n\n\n## Implement your part1 and part1 solutions here\npart1 : Str -&gt; Result Str _\npart1 = \\input -&gt;\n    input\n        |&gt; parseInput\n        |&gt; solve1\n        |&gt; Num.toStr\n        |&gt; Ok\n\n\npart2 : Str -&gt; Result Str _\npart2 = \\input -&gt;\n    input\n        |&gt; parseInput\n        |&gt; solve2\n        |&gt; Num.toStr\n        |&gt; Ok\n\nexpect (part2 sampleData) == Ok &quot;33&quot;\nexpect (part1 sampleData) == Ok &quot;11&quot;\n</code></pre></div>",
        "id": 488564223,
        "sender_full_name": "Sverre Winkelmans",
        "timestamp": 1733986809
    },
    {
        "content": "<p>does it work if you remove the <code>dbg</code>s? I have seen them sometimes causing this kind of issue.</p>",
        "id": 488564558,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733987005
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span>  Just tried but the problem remains.</p>",
        "id": 488564764,
        "sender_full_name": "Sverre Winkelmans",
        "timestamp": 1733987108
    },
    {
        "content": "<p>interestingly <code>roc test</code> runs</p>",
        "id": 488564927,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733987179
    },
    {
        "content": "<p>A more minimal repro seems to be this.</p>\n<div class=\"codehilite\"><pre><span></span><code>app [main] {\n    pf: platform &quot;https://github.com/roc-lang/basic-cli/releases/download/0.17.0/lZFLstMUCUvd5bjnnpYromZJXkQUrdhbva4xdBInicE.tar.br&quot;,\n    aoc: &quot;https://github.com/lukewilliamboswell/aoc-template/releases/download/0.2.0/tlS1ZkwSKSB87_3poSOXcwHyySe0WxWOWQbPmp7rxBw.tar.br&quot;,\n}\n\nimport pf.Stdin\nimport pf.Stdout\nimport pf.Utc\nimport aoc.AoC {\n    stdin: Stdin.readToEnd,\n    stdout: Stdout.write,\n    time: \\{} -&gt; Utc.now {} |&gt; Task.map Utc.toMillisSinceEpoch,\n}\n\nmain =\n    AoC.solve {\n        year: 2024,\n        day: 1,\n        title: &quot;Historian Hysteria&quot;,\n        part1,\n        part2,\n    }\n\npart1 = \\_ -&gt;\n    crash &quot;testing&quot;\n\npart2 = \\_ -&gt;\n    crash &quot;testing&quot;\n</code></pre></div>",
        "id": 488565999,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733987773
    },
    {
        "content": "<p>quite confused as to why it is failing and how no one else has run into this</p>",
        "id": 488566020,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733987788
    },
    {
        "content": "<p>I was able to run it before. It only stopped working when I tried for part2.</p>",
        "id": 488566152,
        "sender_full_name": "Sverre Winkelmans",
        "timestamp": 1733987853
    },
    {
        "content": "<p>Yes change the signature to Result Str Str in part1</p>",
        "id": 488566353,
        "sender_full_name": "Jon Erik Kemi Warghed",
        "timestamp": 1733987916
    },
    {
        "content": "<p>Also doesn't look to be a new regression. Still can repro on a commit from mid october</p>",
        "id": 488566466,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733987986
    },
    {
        "content": "<p><a href=\"https://github.com/lukewilliamboswell/aoc-template/issues/8\">https://github.com/lukewilliamboswell/aoc-template/issues/8</a></p>",
        "id": 488566600,
        "sender_full_name": "Jon Erik Kemi Warghed",
        "timestamp": 1733988041
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"787168\">@Jon Erik Kemi Warghed</span>  Thanks! Indeed specifing the error case instead of _ make it compile!</p>",
        "id": 488566894,
        "sender_full_name": "Sverre Winkelmans",
        "timestamp": 1733988186
    }
]