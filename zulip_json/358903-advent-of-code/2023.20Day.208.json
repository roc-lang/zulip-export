[
    {
        "content": "<p>Solved day 8, but it's really slow <span aria-label=\"snail\" class=\"emoji emoji-1f40c\" role=\"img\" title=\"snail\">:snail:</span> <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span>  <a href=\"https://github.com/lindskogen/advent-of-code-2023/blob/main/day08/main.roc\">https://github.com/lindskogen/advent-of-code-2023/blob/main/day08/main.roc</a></p>",
        "id": 406706925,
        "sender_full_name": "Johan Lindskogen",
        "timestamp": 1702022135
    },
    {
        "content": "<p>I have something similar and it runs for about 5s <span aria-label=\"oh no\" class=\"emoji emoji-1f615\" role=\"img\" title=\"oh no\">:oh_no:</span> </p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>remarks</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>it is \"hard\" to do math in <code>roc</code> without autoscasting the number types <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span><br>\nit might be a matter of getting used to it, but doing this AoC Day 8 part 2, I have spent most of the time trying to do basic aritmetics in <code>roc</code> and fighting the type system...</p>\n</div></div>",
        "id": 406740297,
        "sender_full_name": "Artur Domurad",
        "timestamp": 1702035024
    },
    {
        "content": "<p><a href=\"https://gist.github.com/FabHof/ddc3bee4ac783eec36c31b2847a4da87\">Here is mine</a></p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>What I don't like for today is, that lcm seems to be the only viable solution, but in theory there can be inputs, that are not solvable this way. Looks like all are, but there is nothing in the text gving you a hint that all routes are circles with only one target.</p>\n</div></div>\n<p>BTW, you can use <code>//</code> for integer division (shorthand for <a href=\"https://www.roc-lang.org/builtins/Num#divTrunc\">Num.divTrunc</a>), no need to transform to floats.</p>",
        "id": 406747321,
        "sender_full_name": "Fabian Schmalzried",
        "timestamp": 1702038063
    },
    {
        "content": "<p>I didn't know this <code>//</code> existed in <code>roc</code>.<br>\nThanks :)</p>",
        "id": 406776242,
        "sender_full_name": "Artur Domurad",
        "timestamp": 1702047638
    },
    {
        "content": "<p><a href=\"https://github.com/ostcar/aoc2023/blob/main/days/day08.roc\">https://github.com/ostcar/aoc2023/blob/main/days/day08.roc</a></p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Why I did not like day8</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>I did not like day8. The input had some characteristics, that where not in the description of the day.</p>\n<p>Each start has it's own end and the end comes always at the same ratio. So if <code>XXA</code> leads to <code>XXZ</code>after 5 steps, then it will never go to <code>YYZ</code> and the next <code>XXZ</code>-nodes will be after 10, 15, 20 steps. This is how it is solved, but I could not read this contain in the description. For example, here is an input, that does not hold the constrain:</p>\n<div class=\"codehilite\"><pre><span></span><code>LR\n\n11A = (11D, XXX)\n11B = (XXX, 11C)\n11C = (11D, XXX)\n11D = (XXX, 11Z)\n11Z = (11B, XXX)\n</code></pre></div>\n<p>I was thinking all day about the problem until I analyzed the actual input and found the constrains.</p>\n<p>But maybe day8 was not for humans to solve, but for ghosts <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>\n</div></div>",
        "id": 406838879,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1702070145
    },
    {
        "content": "<p>Here's my solution for day 8. I got it down to 1 second for both parts (with <code>roc dev</code>).<br>\n<a href=\"https://github.com/ryanb/advent-2023-roc/blob/main/day08/main.roc\">https://github.com/ryanb/advent-2023-roc/blob/main/day08/main.roc</a></p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Note on performance</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>I figured the dictionary lookup was the slowest part so I played around with different types for the key. I found U16 was pretty quick so I converted each of the 3 characters into a unique ID and used that as the key.</p>\n</div></div>",
        "id": 406886144,
        "sender_full_name": "Ryan Bates",
        "timestamp": 1702097240
    },
    {
        "content": "<p>Here's my solution for day 8: <a href=\"https://github.com/timotree3/aoc2023/blob/main/roc/day8.roc\">https://github.com/timotree3/aoc2023/blob/main/roc/day8.roc</a></p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Algorithm</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>I believe my solution works for all possible inputs as described in the puzzle. It takes about 6 seconds on my input.</p>\n<p>After my na√Øve solution for part 2 was taking forever, I assumed there were hundreds of start nodes in the input and started optimizing the traversal. I came up with an algorithm to compute the destiny of every node in the input (including non-start nodes) in O(nodes * directions) time. Then once I viewed the output so far and saw that there were only six start nodes and they each only encountered one end node in their cycles, I was pretty disappointed. I still didn't realize that the cycle length was equal to the exit distance, so I implemented a general solution for satisfying the congruence restrictions mod the cycle length using an implementation of division mod the cycle length. This is actually the most explosive part of the algorithm because it would take exponential time in the number of start nodes if each start node actually hit an end node more than once per cycle.</p>\n</div></div>",
        "id": 407165236,
        "sender_full_name": "timotree",
        "timestamp": 1702274157
    }
]