[
    {
        "content": "<p>Maybe a bit messy, but pretty simple:<br>\n<a href=\"https://github.com/bhansconnect/roc-aoc-2023/blob/main/day2.roc\">https://github.com/bhansconnect/roc-aoc-2023/blob/main/day2.roc</a></p>",
        "id": 405497892,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701495648
    },
    {
        "content": "<p>Definitely not speed optimal. Probably should do more reductions and less things that create extra temporary lists.</p>",
        "id": 405497921,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701495686
    },
    {
        "content": "<p>I'm at a friends wedding today, but had a few quick minutes to peek at the puzzle.</p>\n<p>I thought I might leave a comment here and give the <a href=\"https://github.com/lukewilliamboswell/roc-parser\">lukewilliamboswell/roc-parser</a> a plug as it might save folks some time.  <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>example using parser</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">parseNumberColor</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Parser</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Red</span><span class=\"w\"> </span><span class=\"kt\">U32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Green</span><span class=\"w\"> </span><span class=\"kt\">U32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Blue</span><span class=\"w\"> </span><span class=\"kt\">U32</span><span class=\"p\">]</span>\n<span class=\"nv\">parseNumberColor</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">const</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"nv\">number</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">color</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">color</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">            </span><span class=\"kt\">Red</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Red</span><span class=\"w\"> </span><span class=\"nv\">number</span>\n<span class=\"w\">            </span><span class=\"kt\">Green</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Green</span><span class=\"w\"> </span><span class=\"nv\">number</span>\n<span class=\"w\">            </span><span class=\"kt\">Blue</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Blue</span><span class=\"w\"> </span><span class=\"nv\">number</span>\n<span class=\"w\">    </span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">keep</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">digits</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Core</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toU32</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">skip</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">codeunit</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">keep</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Core</span><span class=\"nf\">.</span><span class=\"nv\">oneOf</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">        </span><span class=\"nv\">string</span><span class=\"w\"> </span><span class=\"s\">\"red\"</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Core</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Red</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">string</span><span class=\"w\"> </span><span class=\"s\">\"green\"</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Core</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Green</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">string</span><span class=\"w\"> </span><span class=\"s\">\"blue\"</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Core</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Blue</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">])</span>\n\n<span class=\"nv\">expect</span><span class=\"w\"> </span><span class=\"nv\">parseStr</span><span class=\"w\"> </span><span class=\"nv\">parseNumberColor</span><span class=\"w\"> </span><span class=\"s\">\"64 green\"</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Green</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"nv\">u32</span><span class=\"p\">)</span>\n<span class=\"nv\">expect</span><span class=\"w\"> </span><span class=\"nv\">parseStr</span><span class=\"w\"> </span><span class=\"nv\">parseNumberColor</span><span class=\"w\"> </span><span class=\"s\">\"12 red\"</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Red</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"nv\">u32</span><span class=\"p\">)</span>\n<span class=\"nv\">expect</span><span class=\"w\"> </span><span class=\"nv\">parseStr</span><span class=\"w\"> </span><span class=\"nv\">parseNumberColor</span><span class=\"w\"> </span><span class=\"s\">\"546 blue\"</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Blue</span><span class=\"w\"> </span><span class=\"mi\">546</span><span class=\"nv\">u32</span><span class=\"p\">)</span>\n</code></pre></div>\n</div></div>",
        "id": 405499871,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1701497195
    },
    {
        "content": "<p>Probably should put <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> in a spoiler tag</p>",
        "id": 405500354,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701497517
    },
    {
        "content": "<p>Mine is overly verbose but somewhat easy to follow I hope <a href=\"https://github.com/JRMurr/AdventOfCode2023/blob/main/roc/D02/Day.roc\">https://github.com/JRMurr/AdventOfCode2023/blob/main/roc/D02/Day.roc</a></p>",
        "id": 405501039,
        "sender_full_name": "John Murray",
        "timestamp": 1701497970
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>some answer stuff</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>I feel like i always fall into the \"trap\" in AOC of spending half the time making a type that represents the data to then actually do the puzzle and realize i didnt need half of it :(</p>\n<p>Sometimes it helps for part 2 but other times like today not as much</p>\n</div></div>",
        "id": 405501153,
        "sender_full_name": "John Murray",
        "timestamp": 1701498087
    },
    {
        "content": "<p>Here is mine: <a href=\"https://github.com/ostcar/aoc2023/blob/main/days/day02.roc\">https://github.com/ostcar/aoc2023/blob/main/days/day02.roc</a></p>\n<p>It was fun to work with the parser.</p>",
        "id": 405508059,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1701502728
    },
    {
        "content": "<p>I feel like this was so much easier than day 1 <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<p><a href=\"https://gitlab.com/arkandos/aoc/-/blob/2023/solutions/day2.roc\">https://gitlab.com/arkandos/aoc/-/blob/2023/solutions/day2.roc</a></p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>answer stuff</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>I just got carried away and did the parser using a bunch of Str.splits, but <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span>'s and <span class=\"user-mention\" data-user-id=\"496321\">@Oskar Hahn</span>'s versions using roc-parser looks so much nicer!</p>\n<p>parsers and monoids in the same puzzle makes me happy </p>\n</div></div>",
        "id": 405528327,
        "sender_full_name": "joshi",
        "timestamp": 1701517270
    },
    {
        "content": "<p>I felt today was alright with string splitting and backpassing. Was a bit afraid at first because I didn't know how to extract data from results in a nice manner, until I understood how to use <code>Result.try</code> and backpassing.  Though the repeated <code>Result.try</code> at \"every\" line seems a bit annoying.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Part 1 and 2</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">app</span><span class=\"w\"> </span><span class=\"s\">\"day2\"</span>\n<span class=\"w\">    </span><span class=\"nv\">packages</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">pf</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/roc-lang/basic-cli/releases/download/0.7.0/bkGby8jb0tmZYsy2hg1E_B2QrCgcSTxdUlHtETwm5m4.tar.br\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"nv\">imports</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">        </span><span class=\"nv\">pf</span><span class=\"nf\">.</span><span class=\"kt\">Stdout</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">pf</span><span class=\"nf\">.</span><span class=\"kt\">Stdin</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">pf</span><span class=\"nf\">.</span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"kt\">Util</span><span class=\"nf\">.</span><span class=\"p\">{</span><span class=\"nv\">allLines</span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"p\">{</span><span class=\"nv\">max</span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"nv\">provides</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nv\">to</span><span class=\"w\"> </span><span class=\"nv\">pf</span>\n\n<span class=\"kr\">main </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">lines</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"nv\">allLines</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">await</span>\n<span class=\"w\">    </span><span class=\"nv\">optGames</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">mapTry</span><span class=\"w\"> </span><span class=\"nv\">lines</span><span class=\"w\"> </span><span class=\"nv\">parseGame</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">optGames</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">      </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">games</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span>\n<span class=\"w\">          </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"nv\">part1</span><span class=\"w\"> </span><span class=\"nv\">games</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toStr</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">await</span>\n<span class=\"w\">          </span><span class=\"nv\">part2</span><span class=\"w\"> </span><span class=\"nv\">games</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toStr</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span>\n<span class=\"w\">      </span><span class=\"p\">)</span>\n<span class=\"w\">      </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"s\">\"bad input\"</span>\n\n<span class=\"kt\">Game</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">id</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Nat</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">sets</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">GameSet</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"kt\">GameSet</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nv\">red</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Nat</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">green</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Nat</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">blue</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Nat</span><span class=\"p\">}</span>\n\n<span class=\"nv\">parseGame</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"kt\">Game</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">InvalidNumStr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">NotFound</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">UnknownColour</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">]</span>\n<span class=\"nv\">parseGame</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"nv\">before</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">ghead</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">after</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">gameSets</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">splitFirst</span><span class=\"w\"> </span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"s\">\": \"</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">try</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"nv\">after</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">strID</span><span class=\"p\">}</span><span class=\"w\">                   </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">splitFirst</span><span class=\"w\"> </span><span class=\"nv\">ghead</span><span class=\"w\"> </span><span class=\"s\">\" \"</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">try</span>\n<span class=\"w\">    </span><span class=\"nv\">natID</span><span class=\"w\">                            </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toNat</span><span class=\"w\"> </span><span class=\"nv\">strID</span><span class=\"w\">          </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">try</span>\n<span class=\"w\">    </span><span class=\"nv\">sets</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\">   </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">mapTry</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"w\"> </span><span class=\"nv\">gameSets</span><span class=\"w\"> </span><span class=\"s\">\"; \"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">parseGameSet</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">try</span>\n<span class=\"w\">    </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nv\">id</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">natID</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">sets</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">sets</span><span class=\"p\">}</span>\n\n<span class=\"nv\">emptySet</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">GameSet</span>\n<span class=\"nv\">emptySet</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nv\">red</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">green</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">blue</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">}</span>\n\n<span class=\"nv\">joinSets</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">GameSet</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">GameSet</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">GameSet</span>\n<span class=\"nv\">joinSets</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">red</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">max</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"nf\">.</span><span class=\"nv\">red</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"nf\">.</span><span class=\"nv\">red</span><span class=\"p\">,</span>\n<span class=\"w\">      </span><span class=\"nv\">green</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">max</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"nf\">.</span><span class=\"nv\">green</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"nf\">.</span><span class=\"nv\">green</span><span class=\"p\">,</span>\n<span class=\"w\">      </span><span class=\"nv\">blue</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">max</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"nf\">.</span><span class=\"nv\">blue</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"nf\">.</span><span class=\"nv\">blue</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"nv\">parseGameSet</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"kt\">GameSet</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">InvalidNumStr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">NotFound</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">UnknownColour</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">]</span>\n<span class=\"nv\">parseGameSet</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">set</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">subSets</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">mapTry</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"w\"> </span><span class=\"nv\">set</span><span class=\"w\"> </span><span class=\"s\">\", \"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">      </span><span class=\"p\">{</span><span class=\"nv\">before</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">strCount</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">after</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">colour</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">splitFirst</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"s\">\" \"</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">try</span>\n<span class=\"w\">      </span><span class=\"nv\">count</span><span class=\"w\">                             </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toNat</span><span class=\"w\"> </span><span class=\"nv\">strCount</span><span class=\"w\">   </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">try</span>\n<span class=\"w\">      </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">colour</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"s\">\"red\"</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\">   </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nv\">emptySet</span><span class=\"w\"> </span><span class=\"err\">&amp;</span><span class=\"w\"> </span><span class=\"nv\">red</span><span class=\"nf\">:</span><span class=\"w\">   </span><span class=\"nv\">count</span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"s\">\"green\"</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nv\">emptySet</span><span class=\"w\"> </span><span class=\"err\">&amp;</span><span class=\"w\"> </span><span class=\"nv\">green</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">count</span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"s\">\"blue\"</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\">  </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nv\">emptySet</span><span class=\"w\"> </span><span class=\"err\">&amp;</span><span class=\"w\"> </span><span class=\"nv\">blue</span><span class=\"nf\">:</span><span class=\"w\">  </span><span class=\"nv\">count</span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">UnknownColour</span><span class=\"w\"> </span><span class=\"nv\">colour</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">try</span>\n<span class=\"w\">    </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">walk</span><span class=\"w\"> </span><span class=\"nv\">subSets</span><span class=\"w\"> </span><span class=\"nv\">emptySet</span><span class=\"w\"> </span><span class=\"nv\">joinSets</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Ok</span>\n\n\n<span class=\"nv\">isSubset</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">GameSet</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">GameSet</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Bool</span>\n<span class=\"nv\">isSubset</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">  </span><span class=\"nv\">x</span><span class=\"nf\">.</span><span class=\"nv\">red</span><span class=\"w\"> </span><span class=\"nf\">&lt;=</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"nf\">.</span><span class=\"nv\">red</span><span class=\"w\"> </span><span class=\"nf\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"nf\">.</span><span class=\"nv\">green</span><span class=\"w\"> </span><span class=\"nf\">&lt;=</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"nf\">.</span><span class=\"nv\">green</span><span class=\"w\"> </span><span class=\"nf\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"nf\">.</span><span class=\"nv\">blue</span><span class=\"w\"> </span><span class=\"nf\">&lt;=</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"nf\">.</span><span class=\"nv\">blue</span>\n\n<span class=\"nv\">elfBag</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">GameSet</span>\n<span class=\"nv\">elfBag</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nv\">red</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">green</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">blue</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">14</span><span class=\"p\">}</span>\n\n<span class=\"nv\">part1</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Game</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Nat</span>\n<span class=\"nv\">part1</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">games</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">  </span><span class=\"nv\">possibleGames</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">keepIf</span><span class=\"w\"> </span><span class=\"nv\">games</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">all</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"nf\">.</span><span class=\"nv\">sets</span>\n<span class=\"w\">                                           </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"nv\">set</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">isSubset</span><span class=\"w\"> </span><span class=\"nv\">set</span><span class=\"w\"> </span><span class=\"nv\">elfBag</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nv\">possibleGames</span><span class=\"w\"> </span><span class=\"nf\">.</span><span class=\"nv\">id</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">sum</span>\n\n<span class=\"nv\">gameCube</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Game</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Nat</span>\n<span class=\"nv\">gameCube</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">game</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">  </span><span class=\"p\">{</span><span class=\"nv\">red</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">r</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">green</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">g</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">blue</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">walk</span><span class=\"w\"> </span><span class=\"nv\">game</span><span class=\"nf\">.</span><span class=\"nv\">sets</span><span class=\"w\"> </span><span class=\"nv\">emptySet</span><span class=\"w\"> </span><span class=\"nv\">joinSets</span>\n<span class=\"w\">  </span><span class=\"nv\">r</span><span class=\"nf\">*</span><span class=\"nv\">g</span><span class=\"nf\">*</span><span class=\"nv\">b</span>\n\n<span class=\"nv\">part2</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Game</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Nat</span>\n<span class=\"nv\">part2</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">games</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">  </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nv\">games</span><span class=\"w\"> </span><span class=\"nv\">gameCube</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">sum</span>\n</code></pre></div>\n</div></div>",
        "id": 405532580,
        "sender_full_name": "Jean Niklas L'orange",
        "timestamp": 1701520943
    },
    {
        "content": "<p>Gotta say that no shadowing also bites me hard, though I guess that's a matter of unlearning what I'm used to.</p>",
        "id": 405532762,
        "sender_full_name": "Jean Niklas L'orange",
        "timestamp": 1701521093
    },
    {
        "content": "<p>Here's mine <a href=\"https://github.com/isaacvando/aoc/blob/main/2023/day2.roc\">https://github.com/isaacvando/aoc/blob/main/2023/day2.roc</a></p>",
        "id": 405543142,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1701530598
    },
    {
        "content": "<blockquote>\n<p>Gotta say that no shadowing also bites me hard, though I guess that's a matter of unlearning what I'm used to.</p>\n</blockquote>\n<p>Yeah that has taken a fair amount of getting used to for me</p>",
        "id": 405543179,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1701530638
    },
    {
        "content": "<p>Refactoring sorely needed, but I managed to solve it by extensive use of <code>List.get</code> <a href=\"https://github.com/lindskogen/advent-of-code-2023/blob/main/day02/main.roc\">https://github.com/lindskogen/advent-of-code-2023/blob/main/day02/main.roc</a></p>",
        "id": 405543694,
        "sender_full_name": "Johan Lindskogen",
        "timestamp": 1701531017
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>my solution</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">app</span><span class=\"w\"> </span><span class=\"s\">\"AoC\"</span>\n<span class=\"w\">    </span><span class=\"nv\">packages</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nv\">pf</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/roc-lang/basic-cli/releases/download/0.7.0/bkGby8jb0tmZYsy2hg1E_B2QrCgcSTxdUlHtETwm5m4.tar.br\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">parser</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/lukewilliamboswell/roc-parser/releases/download/0.2.0/dJQSsSmorujhiPNIvJKlQoI92RFIG_JQwUfIxZsCSwE.tar.br\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"nv\">imports</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">        </span><span class=\"nv\">pf</span><span class=\"nf\">.</span><span class=\"kt\">Stdout</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">pf</span><span class=\"nf\">.</span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"nv\">parser</span><span class=\"nf\">.</span><span class=\"kt\">Core</span><span class=\"nf\">.</span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kt\">Parser</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nv\">const</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">keep</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">skip</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">sepBy</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">oneOf</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"nv\">parser</span><span class=\"nf\">.</span><span class=\"kt\">String</span><span class=\"nf\">.</span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nv\">digits</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">string</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">parseStr</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"s\">\"day-2-input.txt\"</span><span class=\"w\"> </span><span class=\"kr\">as</span><span class=\"w\"> </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"nv\">provides</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nv\">to</span><span class=\"w\"> </span><span class=\"nv\">pf</span>\n\n<span class=\"kr\">main </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">*</span>\n<span class=\"kr\">main </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"nv\">part1</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">await</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"nv\">part2</span>\n\n<span class=\"nv\">part1</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span>\n<span class=\"nv\">part1</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">input</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">dropIf</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">isEmpty</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nv\">parseGame</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">keepIf</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"nv\">game</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">possible</span><span class=\"w\"> </span><span class=\"nv\">game</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">red</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">green</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">blue</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">14</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nf\">.</span><span class=\"nv\">id</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">sum</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toStr</span>\n\n<span class=\"nv\">possible</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">game</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nv\">red</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">green</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">blue</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">reqPossible</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">req</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">req</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">Green</span><span class=\"w\"> </span><span class=\"nv\">g</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">green</span><span class=\"w\"> </span><span class=\"nf\">&gt;=</span><span class=\"w\"> </span><span class=\"nv\">g</span>\n<span class=\"w\">        </span><span class=\"kt\">Red</span><span class=\"w\"> </span><span class=\"nv\">r</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">red</span><span class=\"w\"> </span><span class=\"nf\">&gt;=</span><span class=\"w\"> </span><span class=\"nv\">r</span>\n<span class=\"w\">        </span><span class=\"kt\">Blue</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">blue</span><span class=\"w\"> </span><span class=\"nf\">&gt;=</span><span class=\"w\"> </span><span class=\"nv\">b</span>\n<span class=\"w\">    </span><span class=\"nv\">reqSetPossible</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">reqSet</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">all</span><span class=\"w\"> </span><span class=\"nv\">reqSet</span><span class=\"w\"> </span><span class=\"nv\">reqPossible</span>\n<span class=\"w\">    </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">all</span><span class=\"w\"> </span><span class=\"nv\">game</span><span class=\"nf\">.</span><span class=\"nv\">requirements</span><span class=\"w\"> </span><span class=\"nv\">reqSetPossible</span>\n\n<span class=\"nv\">part2</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span>\n<span class=\"nv\">part2</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">input</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">dropIf</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">isEmpty</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nv\">parseGame</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nv\">fewest</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nv\">power</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">sum</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toStr</span>\n\n<span class=\"nv\">fewest</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">game</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">reqFewest</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">{</span><span class=\"nv\">red</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">green</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">blue</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"nv\">req</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">req</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">            </span><span class=\"kt\">Green</span><span class=\"w\"> </span><span class=\"nv\">g</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">red</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">blue</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">green</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">max</span><span class=\"w\"> </span><span class=\"nv\">green</span><span class=\"w\"> </span><span class=\"nv\">g</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">            </span><span class=\"kt\">Red</span><span class=\"w\"> </span><span class=\"nv\">r</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">green</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">blue</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">red</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">max</span><span class=\"w\"> </span><span class=\"nv\">red</span><span class=\"w\"> </span><span class=\"nv\">r</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">            </span><span class=\"kt\">Blue</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">red</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">green</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">blue</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">max</span><span class=\"w\"> </span><span class=\"nv\">blue</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"nv\">reqSetFewest</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">accum</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">reqSet</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">walk</span><span class=\"w\"> </span><span class=\"nv\">reqSet</span><span class=\"w\"> </span><span class=\"nv\">accum</span><span class=\"w\"> </span><span class=\"nv\">reqFewest</span>\n<span class=\"w\">    </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">walk</span><span class=\"w\"> </span><span class=\"nv\">game</span><span class=\"nf\">.</span><span class=\"nv\">requirements</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">red</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">green</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">blue</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nv\">reqSetFewest</span>\n\n<span class=\"nv\">power</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">{</span><span class=\"nv\">red</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">green</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">blue</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">red</span><span class=\"w\"> </span><span class=\"nf\">*</span><span class=\"w\"> </span><span class=\"nv\">green</span><span class=\"w\"> </span><span class=\"nf\">*</span><span class=\"w\"> </span><span class=\"nv\">blue</span>\n\n<span class=\"kt\">Requirement</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"kt\">Green</span><span class=\"w\"> </span><span class=\"kt\">Nat</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Red</span><span class=\"w\"> </span><span class=\"kt\">Nat</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Blue</span><span class=\"w\"> </span><span class=\"kt\">Nat</span><span class=\"w\"> </span><span class=\"p\">]</span>\n<span class=\"kt\">RequirementSet</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Requirement</span>\n<span class=\"kt\">Game</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">id</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Nat</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">requirements</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">RequirementSet</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"nv\">parseGame</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Game</span>\n<span class=\"nv\">parseGame</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">s</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">green</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">const</span><span class=\"w\"> </span><span class=\"kt\">Green</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">keep</span><span class=\"w\"> </span><span class=\"nv\">digits</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">skip</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">string</span><span class=\"w\"> </span><span class=\"s\">\" green\"</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nv\">red</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">const</span><span class=\"w\"> </span><span class=\"kt\">Red</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">keep</span><span class=\"w\"> </span><span class=\"nv\">digits</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">skip</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">string</span><span class=\"w\"> </span><span class=\"s\">\" red\"</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nv\">blue</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">const</span><span class=\"w\"> </span><span class=\"kt\">Blue</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">keep</span><span class=\"w\"> </span><span class=\"nv\">digits</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">skip</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">string</span><span class=\"w\"> </span><span class=\"s\">\" blue\"</span><span class=\"p\">)</span>\n\n<span class=\"w\">    </span><span class=\"nv\">requirementSet</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Parser</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"kt\">RequirementSet</span>\n<span class=\"w\">    </span><span class=\"nv\">requirementSet</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">oneOf</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">green</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">red</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">blue</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">sepBy</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">string</span><span class=\"w\"> </span><span class=\"s\">\", \"</span><span class=\"p\">)</span>\n\n<span class=\"w\">    </span><span class=\"nv\">requirements</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Parser</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">RequirementSet</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nv\">requirements</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">requirementSet</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">sepBy</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">string</span><span class=\"w\"> </span><span class=\"s\">\"; \"</span><span class=\"p\">)</span>\n\n<span class=\"w\">    </span><span class=\"nv\">game</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">const</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"nv\">id</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">r</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">requirements</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">r</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">skip</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">string</span><span class=\"w\"> </span><span class=\"s\">\"Game \"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">keep</span><span class=\"w\"> </span><span class=\"nv\">digits</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">skip</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">string</span><span class=\"w\"> </span><span class=\"s\">\": \"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">keep</span><span class=\"w\"> </span><span class=\"nv\">requirements</span>\n\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">parseStr</span><span class=\"w\"> </span><span class=\"nv\">game</span><span class=\"w\"> </span><span class=\"nv\">s</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">g</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">g</span>\n<span class=\"w\">        </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">ParsingFailure</span><span class=\"w\"> </span><span class=\"nv\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">|</span><span class=\"w\"> </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">ParsingIncomplete</span><span class=\"w\"> </span><span class=\"nv\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">crash</span><span class=\"w\"> </span><span class=\"s\">\"bad input: '\\(e)'\"</span>\n</code></pre></div>\n</div></div>",
        "id": 405547596,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1701534405
    },
    {
        "content": "<p>Yeah, the lack of shadowing was made it harder for me too here. Currently shadowing also frequently causes a cascade of type errors as well, so it's often tough to see that the shadow is the issue. I know there are plans to fix that specific issue though.</p>",
        "id": 405547713,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1701534496
    },
    {
        "content": "<p>I find that I won't shadowing a lot less often now that I have written a ton of roc, but when I do want it, the errors are just super annoying. And writing <code>x1</code>, <code>x2</code>, etc is super tedious and error prone especially with modifications.</p>",
        "id": 405548321,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701535116
    },
    {
        "content": "<p>Yeah. My sense is shadowing in the same scope is still probably not worth it, but I am pretty interested in allowing shadows across scopes now</p>",
        "id": 405550461,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1701537031
    },
    {
        "content": "<p>I think allowing it across scopes but not in scopes would be super strange in roc due to backpassing:<br>\ninvalid:</p>\n<div class=\"codehilite\"><pre><span></span><code>x = ...\nx = ...\nx = ...\n</code></pre></div>\n<p>allowed:</p>\n<div class=\"codehilite\"><pre><span></span><code>x &lt;- ...\nx &lt;- ...\nx &lt;- ...\n</code></pre></div>",
        "id": 405550595,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701537156
    },
    {
        "content": "<p>also this will probably happen then eventually <span aria-label=\"smiling devil\" class=\"emoji emoji-1f608\" role=\"img\" title=\"smiling devil\">:smiling_devil:</span></p>\n<div class=\"codehilite\"><pre><span></span><code>let = \\val, fn -&gt; fn val\nx = 1\nx &lt;- x + 1 |&gt; let\n</code></pre></div>",
        "id": 405550820,
        "sender_full_name": "joshi",
        "timestamp": 1701537380
    },
    {
        "content": "<p>At least it is super explicit</p>",
        "id": 405550862,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701537448
    },
    {
        "content": "<p>First Roc-program ever.  Took a while but I think I got the hang of it now :)  Was a bit confused to not find <code>filter</code>, <code>map</code> and <code>fold</code>/<code>reduce</code> in the <code>List</code> module but found their equivalents after reading a all the docs :)<br>\n<a href=\"https://github.com/kwando/AdventOfCode2023/blob/main/02/d2.roc\">https://github.com/kwando/AdventOfCode2023/blob/main/02/d2.roc</a></p>",
        "id": 405555163,
        "sender_full_name": "Hannes Nevalainen",
        "timestamp": 1701540747
    },
    {
        "content": "<p>Looks nice!</p>",
        "id": 405555295,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701540859
    },
    {
        "content": "<p>Also, I am surprised that the compiler allows this without more indentation:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">color</span><span class=\"w\"> </span><span class=\"o\">is</span>\n<span class=\"w\">    </span><span class=\"nx\">Red</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">g</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">b</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nx\">Green</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">r</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">b</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nx\">Blue</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">r</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">g</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">value</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 405555316,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701540883
    },
    {
        "content": "<p>while it's still top of mind, can we note the specific scenarios where shadowing would have been desirable in <a class=\"stream-topic\" data-stream-id=\"304641\" href=\"/#narrow/stream/304641-ideas/topic/Shadowing.20.26.20Redeclaration\">#ideas &gt; Shadowing &amp; Redeclaration</a> for future reference?</p>",
        "id": 405555667,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701541182
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"630509\">Hannes Nevalainen</span> <a href=\"#narrow/stream/358903-Advent-of-Code/topic/2023.20Day.202/near/405555163\">said</a>:</p>\n<blockquote>\n<p>Was a bit confused to not find <code>filter</code>, <code>map</code> and <code>fold</code>/<code>reduce</code> in the <code>List</code> module but found their equivalents after reading a all the docs :)</p>\n</blockquote>\n<p>nice! Did you find <a href=\"https://www.roc-lang.org/different-names\">https://www.roc-lang.org/different-names</a> or did you just figure them out on your own?</p>",
        "id": 405555763,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701541241
    },
    {
        "content": "<p><a href=\"https://github.com/keeslinp/AoC2023/blob/main/day2.roc\">https://github.com/keeslinp/AoC2023/blob/main/day2.roc</a></p>\n<p>I briefly went down the parser package route, but the doc just aren't quite there yet and I didn't want to have to dig through the source to figure out all out so I just did the boring \"keep splitting until you have your values\" strategy that works for most AoCs</p>\n<p>What was really satisfying was that part two only took a few lines of code since I already had all the right data.</p>\n<p>2 big shoutouts for roc on day 2:</p>\n<ol>\n<li>piping all the things is super satisfying, being able to define my top-level parts are just two long pipes is very elegant</li>\n<li>I had to write out exactly 0 types because it was able to properly infer everything even though I was doing lots of tags and records</li>\n</ol>",
        "id": 405555825,
        "sender_full_name": "Pearce Keesling",
        "timestamp": 1701541310
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/358903-Advent-of-Code/topic/2023.20Day.202/near/405555316\">said</a>:</p>\n<blockquote>\n<p>Also, I am surprised that the compiler allows this without more indentation:</p>\n<p><div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">color</span><span class=\"w\"> </span><span class=\"o\">is</span>\n<span class=\"w\">    </span><span class=\"nx\">Red</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">g</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">b</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nx\">Green</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">r</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">b</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nx\">Blue</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">r</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">g</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">value</span><span class=\"p\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Agreed it should probably be indented a one level more,  this is was what the VSCode extension told me to do.</p>\n<p>Also find it super convenient to have the <code>expect</code>s right in the code. Just lovely :)</p>",
        "id": 405557054,
        "sender_full_name": "Hannes Nevalainen",
        "timestamp": 1701542346
    },
    {
        "content": "<p>filed <a href=\"https://github.com/roc-lang/roc/issues/6155\">#6155</a></p>",
        "id": 405557400,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701542656
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/358903-Advent-of-Code/topic/2023.20Day.202/near/405555763\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"630509\">Hannes Nevalainen</span> <a href=\"#narrow/stream/358903-Advent-of-Code/topic/2023.20Day.202/near/405555163\">said</a>:</p>\n<blockquote>\n<p>Was a bit confused to not find <code>filter</code>, <code>map</code> and <code>fold</code>/<code>reduce</code> in the <code>List</code> module but found their equivalents after reading a all the docs :)</p>\n</blockquote>\n<p>nice! Did you find <a href=\"https://www.roc-lang.org/different-names\">https://www.roc-lang.org/different-names</a> or did you just figure them out on your own?</p>\n</blockquote>\n<p>In my case, I've been finding them on their own. I've seen the \"Tip: Some names differ from other languages.\", but didn't expect it to be so helpful!</p>",
        "id": 405558028,
        "sender_full_name": "Jason Hobbs",
        "timestamp": 1701543269
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/358903-Advent-of-Code/topic/2023.20Day.202/near/405555763\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"630509\">Hannes Nevalainen</span> <a href=\"#narrow/stream/358903-Advent-of-Code/topic/2023.20Day.202/near/405555163\">said</a>:</p>\n<blockquote>\n<p>Was a bit confused to not find <code>filter</code>, <code>map</code> and <code>fold</code>/<code>reduce</code> in the <code>List</code> module but found their equivalents after reading a all the docs :)</p>\n</blockquote>\n<p>nice! Did you find <a href=\"https://www.roc-lang.org/different-names\">https://www.roc-lang.org/different-names</a> or did you just figure them out on your own?</p>\n</blockquote>\n<p>Nope, haven't seen that page :) I figured they had to live somewhere in the <code>List</code> module so I just looked at all the ones the it could possibly be. I think <code>walk</code> was the most confusing one since I associate that with a <code>map</code> for some reason. <br>\n&lt;random-feedback&gt;I think the navigation in the docs page is not as good as it can be. The menu on the left has so much vertical padding  that I found it hard to get a good overview and jump around to needed sections.&lt;/random-feedback&gt;</p>",
        "id": 405558144,
        "sender_full_name": "Hannes Nevalainen",
        "timestamp": 1701543370
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>My day 2</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>This was getting really difficult for me today. I'm still not used to working with Result. When I eventually realized I didn't need to parse out the individual grabs, it was a pretty easy problem.</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">app</span><span class=\"w\"> </span><span class=\"s\">\"hello\"</span>\n<span class=\"w\">  </span><span class=\"nv\">packages</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">pf</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/roc-lang/basic-cli/releases/download/0.7.0/bkGby8jb0tmZYsy2hg1E_B2QrCgcSTxdUlHtETwm5m4.tar.br\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"nv\">imports</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">pf</span><span class=\"nf\">.</span><span class=\"kt\">Stdout</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">pf</span><span class=\"nf\">.</span><span class=\"kt\">Task</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"./day2-input.txt\"</span><span class=\"w\"> </span><span class=\"kr\">as</span><span class=\"w\"> </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">]</span>\n<span class=\"w\">  </span><span class=\"nv\">provides</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nv\">to</span><span class=\"w\"> </span><span class=\"nv\">pf</span>\n\n<span class=\"kr\">main </span><span class=\"nf\">=</span>\n<span class=\"w\">  </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"s\">\"The total sum is \\(part1)\"</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">await</span>\n<span class=\"w\">  </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"s\">\"The sum power is \\(part2)\"</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">await</span>\n<span class=\"w\">  </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">ok</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n\n<span class=\"nv\">part1</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">  </span><span class=\"nv\">games</span><span class=\"w\"> </span><span class=\"nv\">input</span>\n<span class=\"w\">  </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">possibleGameIds</span>\n<span class=\"w\">  </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">keepOks</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toU32</span>\n<span class=\"w\">  </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">sum</span>\n<span class=\"w\">  </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toStr</span>\n\n<span class=\"nv\">part2</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">  </span><span class=\"nv\">games</span><span class=\"w\"> </span><span class=\"nv\">input</span>\n<span class=\"w\">  </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nv\">minPossibleSet</span>\n<span class=\"w\">  </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">product</span>\n<span class=\"w\">  </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">sum</span>\n<span class=\"w\">  </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toStr</span>\n\n<span class=\"nv\">games</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">gamelist</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"w\"> </span><span class=\"nv\">gamelist</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n\n<span class=\"nv\">minPossibleSet</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">game</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">  </span><span class=\"nv\">gameinfo</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">removeGameId</span><span class=\"w\"> </span><span class=\"nv\">game</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">getCountsByColor</span><span class=\"w\"> </span><span class=\"nv\">gameinfo</span><span class=\"w\"> </span><span class=\"s\">\"red\"</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">max</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">withDefault</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">getCountsByColor</span><span class=\"w\"> </span><span class=\"nv\">gameinfo</span><span class=\"w\"> </span><span class=\"s\">\"green\"</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">max</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">withDefault</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">getCountsByColor</span><span class=\"w\"> </span><span class=\"nv\">gameinfo</span><span class=\"w\"> </span><span class=\"s\">\"blue\"</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">max</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">withDefault</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">]</span>\n\n<span class=\"nv\">expect</span><span class=\"w\"> </span><span class=\"nv\">minPossibleSet</span><span class=\"w\"> </span><span class=\"s\">\"Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green\"</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"p\">]</span>\n<span class=\"nv\">expect</span><span class=\"w\"> </span><span class=\"nv\">minPossibleSet</span><span class=\"w\"> </span><span class=\"s\">\"Game 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue\"</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"p\">]</span>\n<span class=\"nv\">expect</span><span class=\"w\"> </span><span class=\"nv\">minPossibleSet</span><span class=\"w\"> </span><span class=\"s\">\"Game 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red\"</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"p\">]</span>\n\n<span class=\"nv\">possibleGameIds</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">allGames</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">  </span><span class=\"nv\">allGames</span>\n<span class=\"w\">  </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">keepIf</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">isCountLte</span><span class=\"w\"> </span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"w\"> </span><span class=\"s\">\"red\"</span>\n<span class=\"w\">  </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">keepIf</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">isCountLte</span><span class=\"w\"> </span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"w\"> </span><span class=\"s\">\"green\"</span>\n<span class=\"w\">  </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">keepIf</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">isCountLte</span><span class=\"w\"> </span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"mi\">14</span><span class=\"w\"> </span><span class=\"s\">\"blue\"</span>\n<span class=\"w\">  </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nv\">parseGameId</span>\n\n<span class=\"nv\">isCountLte</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">line</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">maxThreshold</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">color</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">  </span><span class=\"nv\">removeGameId</span><span class=\"w\"> </span><span class=\"nv\">line</span>\n<span class=\"w\">  </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">getCountsByColor</span><span class=\"w\"> </span><span class=\"nv\">color</span>\n<span class=\"w\">  </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">keepIf</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">count</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">isGt</span><span class=\"w\"> </span><span class=\"nv\">count</span><span class=\"w\"> </span><span class=\"nv\">maxThreshold</span>\n<span class=\"w\">  </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">isEmpty</span>\n\n<span class=\"nv\">expect</span><span class=\"w\"> </span><span class=\"nv\">isCountLte</span><span class=\"w\"> </span><span class=\"s\">\"Game 1: 8 blue, 5 red; 2 green\"</span><span class=\"w\"> </span><span class=\"mi\">80</span><span class=\"w\"> </span><span class=\"s\">\"blue\"</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">true</span>\n<span class=\"nv\">expect</span><span class=\"w\"> </span><span class=\"nv\">isCountLte</span><span class=\"w\"> </span><span class=\"s\">\"Game 1: 8 blue, 5 red; 2 green\"</span><span class=\"w\"> </span><span class=\"mi\">80</span><span class=\"w\"> </span><span class=\"s\">\"red\"</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">true</span>\n<span class=\"nv\">expect</span><span class=\"w\"> </span><span class=\"nv\">isCountLte</span><span class=\"w\"> </span><span class=\"s\">\"Game 1: 8 blue, 5 red; 2 green\"</span><span class=\"w\"> </span><span class=\"mi\">80</span><span class=\"w\"> </span><span class=\"s\">\"green\"</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">true</span>\n<span class=\"nv\">expect</span><span class=\"w\"> </span><span class=\"nv\">isCountLte</span><span class=\"w\"> </span><span class=\"s\">\"Game 1: 8 blue, 5 red; 2 green\"</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"s\">\"blue\"</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">true</span>\n<span class=\"nv\">expect</span><span class=\"w\"> </span><span class=\"nv\">isCountLte</span><span class=\"w\"> </span><span class=\"s\">\"Game 1: 8 blue, 5 red; 2 green\"</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"s\">\"red\"</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">true</span>\n<span class=\"nv\">expect</span><span class=\"w\"> </span><span class=\"nv\">isCountLte</span><span class=\"w\"> </span><span class=\"s\">\"Game 1: 8 blue, 5 red; 2 green\"</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"s\">\"green\"</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">true</span>\n<span class=\"nv\">expect</span><span class=\"w\"> </span><span class=\"nv\">isCountLte</span><span class=\"w\"> </span><span class=\"s\">\"Game 1: 8 blue, 5 red; 2 green\"</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"s\">\"blue\"</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">false</span>\n<span class=\"nv\">expect</span><span class=\"w\"> </span><span class=\"nv\">isCountLte</span><span class=\"w\"> </span><span class=\"s\">\"Game 1: 8 blue, 5 red; 2 green\"</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"s\">\"red\"</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">false</span>\n<span class=\"nv\">expect</span><span class=\"w\"> </span><span class=\"nv\">isCountLte</span><span class=\"w\"> </span><span class=\"s\">\"Game 1: 8 blue, 5 red; 2 green\"</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"s\">\"green\"</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">false</span>\n\n\n<span class=\"nv\">removeGameId</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">  </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"w\"> </span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"s\">\":\"</span>\n<span class=\"w\">  </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">dropFirst</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">  </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">joinWith</span><span class=\"w\"> </span><span class=\"s\">\":\"</span>\n\n<span class=\"nv\">expect</span><span class=\"w\"> </span><span class=\"nv\">removeGameId</span><span class=\"w\"> </span><span class=\"s\">\"Game 1: 2 blue, 4 green; 7 blue, 1 red, 14 green; 5 blue, 13 green, 1 red; 1 red, 7 blue, 11 green\"</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"s\">\" 2 blue, 4 green; 7 blue, 1 red, 14 green; 5 blue, 13 green, 1 red; 1 red, 7 blue, 11 green\"</span>\n<span class=\"nv\">expect</span><span class=\"w\"> </span><span class=\"nv\">removeGameId</span><span class=\"w\"> </span><span class=\"s\">\"Game 10: 7 blue, 4 red, 11 green; 13 green, 1 red, 1 blue; 7 blue, 6 green\"</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"s\">\" 7 blue, 4 red, 11 green; 13 green, 1 red, 1 blue; 7 blue, 6 green\"</span>\n\n\n<span class=\"nv\">getCountsByColor</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">gameinfo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">color</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">  </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">replaceEach</span><span class=\"w\"> </span><span class=\"nv\">gameinfo</span><span class=\"w\"> </span><span class=\"s\">\";\"</span><span class=\"w\"> </span><span class=\"s\">\",\"</span>\n<span class=\"w\">  </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"w\"> </span><span class=\"s\">\",\"</span>\n<span class=\"w\">  </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">trim</span>\n<span class=\"w\">  </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">keepIf</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">pick</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">endsWith</span><span class=\"w\"> </span><span class=\"nv\">pick</span><span class=\"w\"> </span><span class=\"nv\">color</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">keepOks</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">pick</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"w\"> </span><span class=\"nv\">pick</span><span class=\"w\"> </span><span class=\"s\">\" \"</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">first</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">keepOks</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toU32</span>\n\n<span class=\"nv\">expect</span><span class=\"w\"> </span><span class=\"nv\">getCountsByColor</span><span class=\"w\"> </span><span class=\"s\">\" 8 red, 3 blue; 5 blue, 2 red\"</span><span class=\"w\"> </span><span class=\"s\">\"red\"</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">]</span>\n\n<span class=\"nv\">parseGameId</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">  </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">replaceFirst</span><span class=\"w\"> </span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"s\">\"Game \"</span><span class=\"w\"> </span><span class=\"s\">\"\"</span>\n<span class=\"w\">  </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"w\"> </span><span class=\"s\">\":\"</span>\n<span class=\"w\">  </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">first</span>\n<span class=\"w\">  </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">withDefault</span><span class=\"w\"> </span><span class=\"s\">\"Unknown\"</span>\n\n<span class=\"nv\">expect</span><span class=\"w\"> </span><span class=\"nv\">parseGameId</span><span class=\"w\"> </span><span class=\"s\">\"Game 1: 2 blue, 4 green; 7 blue, 1 red, 14 green; 5 blue, 13 green, 1 red; 1 red, 7 blue, 11 green\"</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"s\">\"1\"</span>\n<span class=\"nv\">expect</span><span class=\"w\"> </span><span class=\"nv\">parseGameId</span><span class=\"w\"> </span><span class=\"s\">\"Game 10: 7 blue, 4 red, 11 green; 13 green, 1 red, 1 blue; 7 blue, 6 green\"</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"s\">\"10\"</span>\n\n\n<span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nv\">debug</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">v</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">ctx</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"err\">#</span><span class=\"w\">   </span><span class=\"nv\">dbg</span><span class=\"w\"> </span><span class=\"nv\">ctx</span>\n<span class=\"err\">#</span><span class=\"w\">   </span><span class=\"nv\">dbg</span><span class=\"w\"> </span><span class=\"nv\">v</span>\n<span class=\"err\">#</span><span class=\"w\">   </span><span class=\"nv\">v</span>\n</code></pre></div>\n</div></div>",
        "id": 405558545,
        "sender_full_name": "Jason Hobbs",
        "timestamp": 1701543706
    },
    {
        "content": "<p>oof, took a while but I did it! Only part 1 for now as it's already pretty late. Took me the entire day to understand how to approach FP but it was so worth it <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span><br>\n<a href=\"https://github.com/furtidev/aoc-2023/blob/main/day-02/main.roc\">https://github.com/furtidev/aoc-2023/blob/main/day-02/main.roc</a></p>",
        "id": 405564944,
        "sender_full_name": "[REDACTED]",
        "timestamp": 1701549494
    },
    {
        "content": "<p>congrats, welcome to the party! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 405565929,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701550444
    },
    {
        "content": "<p>My <a href=\"https://github.com/lukewilliamboswell/aoc/blob/main/src/S2023/D02.roc\">solution for Day 2</a>.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Results &amp; timing</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>$ roc run --optimize src/cli.roc -- 2023 2<br>\nRunning Part 1...done<br>\nRunning Part 2...done<br>\n2023 Day 2: Cube Conundrum completed in 10 ms</p>\n<hr>\n<p>Part 1 took 6 ms<br>\nsum of the IDs is 2256</p>\n<hr>\n<p>Part 2 took 3 ms<br>\nThe sum of the power is 74229</p>\n<hr>\n</div></div>",
        "id": 405569920,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1701554252
    },
    {
        "content": "<p>Interestingly, for Day 2 using <code>--optimize</code> is 10x faster for me. <span aria-label=\"rocket\" class=\"emoji emoji-1f680\" role=\"img\" title=\"rocket\">:rocket:</span></p>",
        "id": 405570832,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1701555012
    },
    {
        "content": "<p>Timings that fast probably aren't super accurate.</p>\n<p>That said, parser combinators probably are super slow without optimizations, so the giant gain makes sense</p>",
        "id": 405571412,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701555607
    },
    {
        "content": "<p>Yeah, you should probably use <a href=\"https://github.com/sharkdp/hyperfine\">hyperfine</a> or something like that, to get accurate results. This got me curious and I tested my solution and the difference between optimized and not is not that big: 1.2ms vs 1.6ms, respectively.</p>",
        "id": 405571780,
        "sender_full_name": "LoipesMas",
        "timestamp": 1701556082
    },
    {
        "content": "<p>Here is mine. </p>\n<p><a href=\"https://gitlab.com/AsbjornOlling/aoc2023/-/blob/main/02/main.roc\">https://gitlab.com/AsbjornOlling/aoc2023/-/blob/main/02/main.roc</a></p>\n<p>Once I got my <code>List Game</code> built (using roc-parser), it was a breeze.<br>\nDefinitely a parser-heavy day.</p>\n<p>It would probably have been faster for me to just do the <code>.split().split()</code> thing, the format was simple enough that one could get away with it - but parser combinators are just way more fun.<br>\nI struggled a bunch with a memory bug in my expectations, but it looks like the bug is being looked at, so thats <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span> <br>\nEDIT: the bug <a href=\"https://github.com/roc-lang/roc/pull/6158\">has been fixed</a><br>\nExcited to do it again tomorrow.</p>",
        "id": 405571974,
        "sender_full_name": "Asbjørn Olling",
        "timestamp": 1701556275
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"666594\">John Murray</span> <a href=\"#narrow/stream/358903-Advent-of-Code/topic/2023.20Day.202/near/405501039\">said</a>:</p>\n<blockquote>\n<p>I feel like i always fall into the \"trap\" in AOC of spending half the time making a type that represents the data </p>\n</blockquote>\n<p>But that part is the most fun!</p>",
        "id": 405574195,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1701557825
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"492563\">Pearce Keesling</span> <a href=\"#narrow/stream/358903-Advent-of-Code/topic/2023.20Day.202/near/405555825\">said</a>:</p>\n<blockquote>\n<p>I briefly went down the parser package route, but the doc just aren't quite there yet and I didn't want to have to dig through the source to figure out all out ...</p>\n</blockquote>\n<p>Is there anything in particular that would help you here or that you expected to see? </p>\n<p>Like maybe a smaller example of how to write a parser like we see in these AoC solutions?</p>",
        "id": 405574325,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1701557998
    },
    {
        "content": "<p>Yeah, I think an AOC style example is perfect. Now that I've seen yours I think I'm more likely to try it again tomorrow.</p>",
        "id": 405576489,
        "sender_full_name": "Pearce Keesling",
        "timestamp": 1701560224
    },
    {
        "content": "<p>Honestly taking another look. I think just syntax highlighting would solve 90% of my problem. I was thinking \"oh I just wish I had a list of combinators and what they do\", but you basically already have that cause you've documented the code very well in comments. I think I just saw a big old wall of white text and didn't want to do the mental labor of parsing through it to find the ones I needed. Something like rustdoc would be suuuuper helpful here</p>",
        "id": 405576636,
        "sender_full_name": "Pearce Keesling",
        "timestamp": 1701560402
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"671622\">LoipesMas</span> <a href=\"#narrow/stream/358903-Advent-of-Code/topic/2023.20Day.202/near/405571780\">said</a>:</p>\n<blockquote>\n<p>Yeah, you should probably use <a href=\"https://github.com/sharkdp/hyperfine\">hyperfine</a> or something like that, to get accurate results. This got me curious and I tested my solution and the difference between optimized and not is not that big: 1.2ms vs 1.6ms, respectively.</p>\n</blockquote>\n<p>If timings are under about 5 to 10 ms, I wouldn't trust hyperfine. I would make your program internally repeat multiple times and measure that.</p>",
        "id": 405578264,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701561880
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/358903-Advent-of-Code/topic/2023.20Day.202/near/405574195\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"666594\">John Murray</span> <a href=\"#narrow/stream/358903-Advent-of-Code/topic/2023.20Day.202/near/405501039\">said</a>:</p>\n<blockquote>\n<p>I feel like i always fall into the \"trap\" in AOC of spending half the time making a type that represents the data </p>\n</blockquote>\n<p>But that part is the most fun!</p>\n</blockquote>\n<p>Lol yea I do agree with that. It's all about mindset. For this year I just wanna learn more roc so that approach is \"right\"</p>",
        "id": 405595478,
        "sender_full_name": "John Murray",
        "timestamp": 1701572466
    },
    {
        "content": "<p>Parsers all the way today, but I definitely lost some feathers on the way <span aria-label=\"hot face\" class=\"emoji emoji-1f975\" role=\"img\" title=\"hot face\">:hot_face:</span> <br>\n<a href=\"https://github.com/axelerator/aoc23/blob/main/02/main.roc\">https://github.com/axelerator/aoc23/blob/main/02/main.roc</a></p>",
        "id": 405596270,
        "sender_full_name": "Axel",
        "timestamp": 1701572975
    },
    {
        "content": "<p>I am really enjoying reading these solutions to find out patterns and methods I did not think of. My solution is nothing fancy and could for sure be more terse, but I really enjoyed writing it! In general I feel like some kind of pattern of writing a <code>solve</code> function that calculates based on a <code>parse</code> function which in turn maps a <code>parseLine</code> is nice, at least for these early solutions. Also the <code>expect</code>s are super useful for finding bugs<br>\nHere is my day2:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Header</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">app</span><span class=\"w\"> </span><span class=\"s\">\"AoC\"</span>\n<span class=\"w\">    </span><span class=\"nv\">packages</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nv\">pf</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/roc-lang/basic-cli/releases/download/0.6.2/c7T4Hp8bAdWz3r9ZrhboBzibCjJag8d0IP_ljb42yVc.tar.br\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"nv\">imports</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">pf</span><span class=\"nf\">.</span><span class=\"kt\">Stdout</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">pf</span><span class=\"nf\">.</span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"p\">{</span><span class=\"kt\">Task</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"s\">\"input/day-2-input.txt\"</span><span class=\"w\"> </span><span class=\"kr\">as</span><span class=\"w\"> </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"nv\">provides</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nv\">to</span><span class=\"w\"> </span><span class=\"nv\">pf</span>\n\n<span class=\"nv\">lines</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Str</span>\n<span class=\"nv\">lines</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">str</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n\n<span class=\"kr\">main </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">*</span>\n<span class=\"kr\">main </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"s\">\"Part 1: \\(part1)\"</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">await</span>\n<span class=\"w\">    </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"s\">\"Part 2: \\(part2)\"</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">await</span>\n<span class=\"w\">    </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">ok</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n\n<span class=\"nv\">part1</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">solve</span><span class=\"w\"> </span><span class=\"nv\">input</span>\n\n<span class=\"nv\">solve</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">str</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">parse</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">keepIf</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">(</span><span class=\"nv\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">b</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">(</span><span class=\"nv\">val</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">val</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">sum</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toStr</span>\n\n<span class=\"nv\">parse</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">str</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">lines</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nv\">parseLine</span>\n\n<span class=\"nv\">parseLine</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">line</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">replaceFirst</span><span class=\"w\"> </span><span class=\"s\">\"Game \"</span><span class=\"w\"> </span><span class=\"s\">\"\"</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"w\"> </span><span class=\"s\">\":\"</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">lst</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">lst</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">                </span><span class=\"p\">[</span><span class=\"nv\">num</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">drawsStr</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                    </span><span class=\"nv\">gameId</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">num</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toU32</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">withDefault</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">                    </span><span class=\"nv\">possible</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">                        </span><span class=\"nv\">drawsStr</span>\n<span class=\"w\">                            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"w\"> </span><span class=\"s\">\";\"</span>\n<span class=\"w\">                            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nv\">parseDraw</span>\n<span class=\"w\">                            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">isPossibleGame</span>\n<span class=\"w\">                            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">isEmpty</span>\n<span class=\"w\">                    </span><span class=\"p\">(</span><span class=\"nv\">gameId</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">possible</span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">false</span><span class=\"p\">)</span>\n\n\n<span class=\"nv\">isPossibleGame</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">drawList</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">drawList</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">keepErrs</span><span class=\"w\"> </span><span class=\"nv\">isPossibleDraw</span>\n\n<span class=\"nv\">isPossibleDraw</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">draw</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">isPossibleWithConstraint</span><span class=\"w\"> </span><span class=\"nv\">draw</span><span class=\"w\"> </span><span class=\"nv\">constraintPart1</span>\n\n<span class=\"nv\">isPossibleWithConstraint</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">draw</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">constraint</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">constraint</span><span class=\"w\"> </span><span class=\"nv\">draw</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">Possible</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">draw</span>\n<span class=\"w\">        </span><span class=\"kt\">Impossible</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"s\">\"Impossible game\"</span>\n\n<span class=\"nv\">constraintPart1</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">draw</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">draw</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"p\">{</span><span class=\"nv\">red</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">green</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">blue</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">red</span><span class=\"w\"> </span><span class=\"nf\">&lt;=</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"w\"> </span><span class=\"nf\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nv\">green</span><span class=\"w\"> </span><span class=\"nf\">&lt;=</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"w\"> </span><span class=\"nf\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nv\">blue</span><span class=\"w\"> </span><span class=\"nf\">&lt;=</span><span class=\"w\"> </span><span class=\"mi\">14</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Possible</span>\n<span class=\"w\">        </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Impossible</span>\n\n\n\n<span class=\"nv\">parseDraw</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">str</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"w\"> </span><span class=\"s\">\",\"</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">trim</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"nv\">s</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"w\"> </span><span class=\"nv\">s</span><span class=\"w\"> </span><span class=\"s\">\" \"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">lst</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">lst</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"nv\">num</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">color</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                </span><span class=\"nv\">number</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">num</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toU32</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">withDefault</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">                </span><span class=\"p\">(</span><span class=\"nv\">number</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">color</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"red\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">walk</span><span class=\"w\"> </span><span class=\"nv\">emptyDraw</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">num</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">color</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">color</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">                    </span><span class=\"s\">\"red\"</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"err\">&amp;</span><span class=\"w\"> </span><span class=\"nv\">red</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"nf\">.</span><span class=\"nv\">red</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"nv\">num</span><span class=\"p\">}</span>\n<span class=\"w\">                    </span><span class=\"s\">\"green\"</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"err\">&amp;</span><span class=\"w\"> </span><span class=\"nv\">green</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"nf\">.</span><span class=\"nv\">green</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"nv\">num</span><span class=\"p\">}</span>\n<span class=\"w\">                    </span><span class=\"s\">\"blue\"</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"err\">&amp;</span><span class=\"w\"> </span><span class=\"nv\">blue</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"nf\">.</span><span class=\"nv\">blue</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"nv\">num</span><span class=\"p\">}</span>\n<span class=\"w\">                    </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">state</span>\n\n<span class=\"nv\">emptyDraw</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nv\">red</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">green</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">blue</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">}</span>\n\n<span class=\"nv\">part2</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">solve2</span><span class=\"w\"> </span><span class=\"nv\">input</span>\n\n<span class=\"nv\">solve2</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">str</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">parse2</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nv\">power</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">sum</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toStr</span>\n\n<span class=\"nv\">power</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">{</span><span class=\"nv\">red</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">green</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">blue</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">red</span><span class=\"w\"> </span><span class=\"nf\">*</span><span class=\"w\"> </span><span class=\"nv\">green</span><span class=\"w\"> </span><span class=\"nf\">*</span><span class=\"w\"> </span><span class=\"nv\">blue</span>\n\n<span class=\"nv\">parse2</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">str</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">lines</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nv\">parseLine2</span>\n\n<span class=\"nv\">parseLine2</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">line</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">replaceFirst</span><span class=\"w\"> </span><span class=\"s\">\"Game \"</span><span class=\"w\"> </span><span class=\"s\">\"\"</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"w\"> </span><span class=\"s\">\":\"</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">lst</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">lst</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">                </span><span class=\"p\">[</span><span class=\"nv\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">drawsStr</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                    </span><span class=\"nv\">drawsStr</span>\n<span class=\"w\">                        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"w\"> </span><span class=\"s\">\";\"</span>\n<span class=\"w\">                        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nv\">parseDraw</span>\n<span class=\"w\">                        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">minimumContent</span>\n<span class=\"w\">                </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">emptyDraw</span>\n\n<span class=\"nv\">minimumContent</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">drawList</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">drawList</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">walk</span><span class=\"w\"> </span><span class=\"nv\">emptyDraw</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">draw</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nv\">red</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">max</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"nf\">.</span><span class=\"nv\">red</span><span class=\"w\"> </span><span class=\"nv\">draw</span><span class=\"nf\">.</span><span class=\"nv\">red</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nv\">green</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">max</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"nf\">.</span><span class=\"nv\">green</span><span class=\"w\"> </span><span class=\"nv\">draw</span><span class=\"nf\">.</span><span class=\"nv\">green</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nv\">blue</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">max</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"nf\">.</span><span class=\"nv\">blue</span><span class=\"w\"> </span><span class=\"nv\">draw</span><span class=\"nf\">.</span><span class=\"nv\">blue</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"nv\">expect</span>\n<span class=\"w\">    </span><span class=\"nv\">expected</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nv\">green</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">blue</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">red</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"nv\">parsed</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">parseDraw</span><span class=\"w\"> </span><span class=\"nv\">exampleDraw</span>\n<span class=\"w\">    </span><span class=\"nv\">parsed</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"nv\">expected</span>\n\n<span class=\"nv\">expect</span>\n<span class=\"w\">    </span><span class=\"nv\">expected</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"s\">\"Impossible game\"</span>\n<span class=\"w\">    </span><span class=\"nv\">possible</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">parseDraw</span><span class=\"w\"> </span><span class=\"nv\">exampleDraw</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">isPossibleDraw</span>\n<span class=\"w\">    </span><span class=\"nv\">possible</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"nv\">expected</span>\n\n<span class=\"nv\">expect</span>\n<span class=\"w\">    </span><span class=\"nv\">expected</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">true</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">true</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">false</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">false</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">true</span><span class=\"p\">)]</span>\n<span class=\"w\">    </span><span class=\"nv\">parsed</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">parse</span><span class=\"w\"> </span><span class=\"nv\">example</span>\n<span class=\"w\">    </span><span class=\"nv\">parsed</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"nv\">expected</span>\n\n<span class=\"nv\">expect</span>\n<span class=\"w\">    </span><span class=\"nv\">expected</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"s\">\"8\"</span>\n<span class=\"w\">    </span><span class=\"nv\">solved</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">solve</span><span class=\"w\"> </span><span class=\"nv\">example</span>\n<span class=\"w\">    </span><span class=\"nv\">solved</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"nv\">expected</span>\n\n<span class=\"nv\">example</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"s\">\"\"\"</span>\n<span class=\"s\">    Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green</span>\n<span class=\"s\">    Game 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue</span>\n<span class=\"s\">    Game 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red</span>\n<span class=\"s\">    Game 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red</span>\n<span class=\"s\">    Game 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green</span>\n<span class=\"s\">    \"\"\"</span>\n\n<span class=\"nv\">exampleDraw</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"s\">\"8 green, 6 blue, 20 red\"</span>\n\n\n<span class=\"nv\">expect</span>\n<span class=\"w\">    </span><span class=\"nv\">expectedMinimum</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">        </span><span class=\"p\">{</span><span class=\"nv\">red</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">green</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">blue</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"p\">{</span><span class=\"nv\">red</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">green</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">blue</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"p\">{</span><span class=\"nv\">red</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">green</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">blue</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"p\">{</span><span class=\"nv\">red</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">14</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">green</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">blue</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">15</span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"p\">{</span><span class=\"nv\">red</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">green</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">blue</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"nv\">actualMinimum</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">parse2</span><span class=\"w\"> </span><span class=\"nv\">example</span>\n<span class=\"w\">    </span><span class=\"nv\">expectedMinimum</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"nv\">actualMinimum</span>\n\n<span class=\"nv\">expect</span>\n<span class=\"w\">    </span><span class=\"nv\">expectedSolve</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"s\">\"2286\"</span>\n<span class=\"w\">    </span><span class=\"nv\">actualSolve</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">solve2</span><span class=\"w\"> </span><span class=\"nv\">example</span>\n<span class=\"w\">    </span><span class=\"nv\">expectedSolve</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"nv\">actualSolve</span>\n</code></pre></div>\n</div></div>",
        "id": 405630581,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1701597789
    },
    {
        "content": "<p>Nice, I think you can also do <code>|&gt; List.map .0</code> as shorthand for <code>|&gt; List.map \\(val,_) -&gt; val</code> if you want.</p>",
        "id": 405632905,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1701598882
    },
    {
        "content": "<p>Ah nice! I saw above also that <code>Str.splitFirst</code> would have been useful for me</p>",
        "id": 405640174,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1701600532
    },
    {
        "content": "<p><a href=\"https://github.com/timotree3/aoc2023/blob/main/roc/day2.roc\">My day 2</a> Did all the parsing with <code>Str.split</code> and <code>Str.splitFirst</code>. Wasn't too bad doing it that way this time.</p>",
        "id": 405709043,
        "sender_full_name": "timotree",
        "timestamp": 1701646462
    },
    {
        "content": "<p>Here's my solution for Day 2.<br>\n<a href=\"https://github.com/ryanb/advent-2023-roc/blob/main/day02/main.roc\">https://github.com/ryanb/advent-2023-roc/blob/main/day02/main.roc</a></p>\n<p>I learned a lot reading the code here, especially regarding the parser. I'll have to try that out in the future.</p>",
        "id": 405883125,
        "sender_full_name": "Ryan Bates",
        "timestamp": 1701712529
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"667613\">Ryan Bates</span> <a href=\"#narrow/stream/358903-Advent-of-Code/topic/2023.20Day.202/near/405883125\">said</a>:</p>\n<blockquote>\n<p>Here's my solution for Day 2.<br>\n<a href=\"https://github.com/ryanb/advent-2023-roc/blob/main/day02/main.roc\">https://github.com/ryanb/advent-2023-roc/blob/main/day02/main.roc</a></p>\n<p>I learned a lot reading the code here, especially regarding the parser. I'll have to try that out in the future.</p>\n</blockquote>\n<p>Parser combinators are magical and there are libraries in nearly every language these days.</p>",
        "id": 405936466,
        "sender_full_name": "Axel",
        "timestamp": 1701734815
    },
    {
        "content": "<p>Probably just me, but I have never liked parser combinators. Much prefer direct recursive descent parsers.</p>",
        "id": 405937619,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701735359
    },
    {
        "content": "<p>amusingly, I only knew parser combinations when I started Roc, which is why our parser is in that style even though it's not a good fit for Rust imo <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 405972154,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701751095
    },
    {
        "content": "<p>Started to try to get an understanding of RoC by doing some AoC challenges. Lots of fun. </p>\n<p>I made this construct:</p>\n<div class=\"codehilite\"><pre><span></span><code>Cubes :\n    { red : U64\n    , green: U64\n    , blue : U64\n    }\n</code></pre></div>\n<p>Something is off with the body of the constraints definition:</p>\n<p>38│   constraints : Cubes<br>\n39│&gt;  constraints =  \\_ -&gt; <br>\n40│&gt;      { red : 12<br>\n41│&gt;      , green : 13<br>\n42│&gt;      , blue : 14 <br>\n43│&gt;      }</p>\n<p>The body is an anonymous function of type:</p>\n<div class=\"codehilite\"><pre><span></span><code>* -&gt; {\n    blue : Num *,\n    green : Num *,\n    red : Num *,\n}\n</code></pre></div>\n\n<p>But the type annotation on constraints says it should be:</p>\n<div class=\"codehilite\"><pre><span></span><code>{\n    blue : U64,\n    green : U64,\n    red : U64,\n}\n</code></pre></div>\n\n<div class=\"codehilite\"><pre><span></span><code>I started out with Nat instead of U64, but that was the same.\n\nComing from Elm, i kind of expect the compiler to figure  this all out. What am i doing wrong?\n</code></pre></div>",
        "id": 406090919,
        "sender_full_name": "Eelco Hoekema",
        "timestamp": 1701792307
    },
    {
        "content": "<p>You want either this</p>\n<div class=\"codehilite\"><pre><span></span><code>constants : Cubes\nconstants = {\n    blue : 12,\n    green : 13,\n    red : 14,\n}\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\"><pre><span></span><code>constants : {} -&gt; Cubes\nconstants = \\_ -&gt; {\n    blue : 12,\n    green : 13,\n    red : 14,\n}\n</code></pre></div>",
        "id": 406092009,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1701792522
    },
    {
        "content": "<p>I suspect you want the first version, but if you want <code>constants</code> to be a function that waits to evaluate its body then you would define it the second way and call it as <code>constants {}</code></p>",
        "id": 406092272,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1701792572
    },
    {
        "content": "<p><code>{}</code> is an empty record, which is like the empty tuple type <code>()</code> in Elm</p>",
        "id": 406092375,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1701792593
    },
    {
        "content": "<p>Oh. It is that simple. Thanks!</p>",
        "id": 406093013,
        "sender_full_name": "Eelco Hoekema",
        "timestamp": 1701792708
    },
    {
        "content": "<p>This type</p>\n<div class=\"codehilite\"><pre><span></span><code>* -&gt; {\n    blue : Num *,\n    green : Num *,\n    red : Num *,\n}\n</code></pre></div>\n<p>is the inferred type of </p>\n<div class=\"codehilite\"><pre><span></span><code>constants = \\_ -&gt; {\n    blue : 12,\n    green : 13,\n    red : 14,\n}\n</code></pre></div>\n<p>what it's saying is</p>\n<blockquote>\n<p>This is a function that takes a single argument that could be anything, and returns a struct of three number values. The numbers could be used in many different contexts, so we have not yet specialized to a concrete type.</p>\n</blockquote>\n<p>You might find it helpful to mess with some number values in the REPL to get a better intuition for the inference behavior</p>\n<div class=\"codehilite\"><pre><span></span><code>» 12\n12 : Num *\n\n» 12.0\n12 : Frac *\n\n» 0.1 + 0.2\n0.3 : Frac *\n\n» 1 + 0.1\n1.1 : Frac *\n\n» x : U64\n… x = 1\n1 : U64\n</code></pre></div>",
        "id": 406095290,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1701793109
    },
    {
        "content": "<p>doing</p>\n<div class=\"codehilite\"><pre><span></span><code>constants : Cubes\nconstants = {\n    blue : 12,\n    green : 13,\n    red : 14,\n}\n</code></pre></div>\n<p>is similar to</p>\n<div class=\"codehilite\"><pre><span></span><code>x : U64\nx = 1\n</code></pre></div>\n<p>in that <code>12</code>/<code>13</code>/<code>14</code> are inferred generally as <code>Num *</code>, but your type annotation asserts that in your use case you want the values to be encoded as <code>U64</code>.</p>",
        "id": 406096132,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1701793268
    },
    {
        "content": "<p>I run into something that i (as a beginner) really can't explain, which is that a value of a variable changes where i don't think i touched it.</p>\n<div class=\"codehilite\"><pre><span></span><code>    dbg &quot;\\(acum) - value of acum at start of function: &quot;\n\n    when characters is\n\n        [head, .. as tail] -&gt;\n            dbg &quot;\\(acum) - value of acum in when clause&quot;\n            dbg &quot; value changed in some cases - how, why?&quot;\n</code></pre></div>\n<p>So that variable <code>acum</code> has a different value before entering and after entering the <code>when</code> clause. How can that happen? </p>\n<p>Here is a full program.</p>\n<div class=\"codehilite\"><pre><span></span><code>app &quot;helloWorld&quot;\n    packages { pf: &quot;https://github.com/roc-lang/basic-cli/releases/download/0.7.0/bkGby8jb0tmZYsy2hg1E_B2QrCgcSTxdUlHtETwm5m4.tar.br&quot; }\n    imports [pf.Stdout]\n    provides [main] to pf\n\nmain =\n    outcome =\n        recurse testString None &quot;&quot; []\n\n    outcomeStr = Str.joinWith outcome &quot;|&quot;\n\n    dbg &quot;Expected : |467|..|174|..&quot;\n    dbg &quot;But it is: \\(outcomeStr)&quot;\n\n    Stdout.line &quot;Done - see dbg output&quot;\n\n\nTokenType : [\n    Digit,\n    Dot,\n    None,\n]\n\n\ntestString =\n    Str.graphemes &quot;467..174..&quot;\n\n\ntokenType : Str -&gt; TokenType\ntokenType = \\str -&gt;\n    when str is\n        &quot;1&quot; -&gt; Digit\n        &quot;4&quot; -&gt; Digit\n        &quot;6&quot; -&gt; Digit\n        &quot;7&quot; -&gt; Digit\n        &quot;.&quot; -&gt; Dot\n        _ -&gt; None\n        # left a lot out for brevity\n\n\nrecurse : List Str, TokenType, Str, List Str -&gt; List Str\nrecurse = \\characters, previousTokenType, acum, strings -&gt;\n\n    # idea is that this function makes a list of groups\n    # &quot;467..174..&quot; becomes [ &quot;467, &quot;..&quot;, &quot;174&quot;, &quot;..&quot;]\n    # however, it  becomes [ &quot;667, &quot;..&quot;, &quot;774&quot;, &quot;..&quot;]\n    # odd things happen       ^           ^\n\n    # acum is the buffer where characters are collected\n    # until the tokentype changes\n\n    # the value of acum somehow changes when entering\n    # the when clause in some cases - but how and why\n\n    dbg &quot;-------&quot;\n    dbg &quot;\\(acum) - value of acum at start of function: &quot; # First\n\n    when characters is\n\n        [head, .. as tail] -&gt;\n            dbg &quot;\\(acum) - value of acum in when clause&quot;\n            dbg &quot; value changed in some cases - how, why?&quot; # Second\n\n            if (tokenType head) == previousTokenType\n                then\n                    recurse\n                        tail\n                        previousTokenType\n                        (Str.concat acum head)\n                        strings\n                else\n                    recurse\n                        tail\n                        (tokenType head)\n                        head\n                        (List.append strings acum)\n\n        [] -&gt;\n            List.append strings acum\n</code></pre></div>",
        "id": 406983404,
        "sender_full_name": "Eelco Hoekema",
        "timestamp": 1702164727
    },
    {
        "content": "<p>Definitely a bug on the roc side somehow</p>",
        "id": 406988420,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702168754
    },
    {
        "content": "<p>we must have a codegen issue leading to mutation or a refcounting issue of some sort.</p>",
        "id": 406988642,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702168911
    },
    {
        "content": "<p>Ok. Filed a bug at <a href=\"https://github.com/roc-lang/roc/issues/6239\">https://github.com/roc-lang/roc/issues/6239</a></p>",
        "id": 407035796,
        "sender_full_name": "Eelco Hoekema",
        "timestamp": 1702202053
    },
    {
        "content": "<p>I feel like talking to the past. :D<br>\nIt is fun to solve the problem and then read all the cool solutions here. Afterwards, I want to improve and polish my solution with the new insights and patterns. </p>\n<p>My solutions can be found <a href=\"https://github.com/Ocupe/advent-of-code-2023/tree/9e48cefc530d73db5e8e0b92bf6bee3f0b73519a/day_02\">here</a>.</p>",
        "id": 417113401,
        "sender_full_name": "Jonas Schell",
        "timestamp": 1705865285
    },
    {
        "content": "<p>Some problems I encountered:</p>\n<ul>\n<li>I don't know why but for about 30min I thoughed records and dics are the same thing and I was struggeling to put a record type to a dict.</li>\n<li>I think I also found a bug: <a href=\"https://github.com/roc-lang/roc/issues/6409\">https://github.com/roc-lang/roc/issues/6409</a></li>\n</ul>",
        "id": 417114100,
        "sender_full_name": "Jonas Schell",
        "timestamp": 1705865782
    },
    {
        "content": "<p>Default int type strikes again. I ran into some of this when working on Roc-Wasm4. When an int is captured, we often capture the wrong type. In this case it was captured as an i64, which is incorrect for the usage.</p>",
        "id": 417119602,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705869733
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/358903-Advent-of-Code/topic/2023.20Day.202/near/417119602\">said</a>:</p>\n<blockquote>\n<p>When an int is captured, we often capture the wrong type.</p>\n</blockquote>\n<p>wait, why do we often capture the wrong type? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 417120558,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1705870469
    },
    {
        "content": "<p>I think it is a bug with default types. The closure confused the type generation. We make it the default type. Then when loading it from the capture we load it with the specific type</p>",
        "id": 417131744,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705879602
    },
    {
        "content": "<p>Happens with frac as well</p>",
        "id": 417131750,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705879612
    },
    {
        "content": "<p>interesting, we should try to find a minimal repro of that</p>",
        "id": 417133965,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1705881410
    },
    {
        "content": "<p>I filed one last week <a href=\"https://github.com/roc-lang/roc/issues/6387\">#6387</a></p>",
        "id": 417135529,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705882579
    }
]