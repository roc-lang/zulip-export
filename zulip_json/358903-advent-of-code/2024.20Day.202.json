[
    {
        "content": "<p>I've got one of those classic... passes all the test cases, but fails with real input for Part 2 <span aria-label=\"smiling\" class=\"emoji emoji-1f972\" role=\"img\" title=\"smiling\">:smiling:</span></p>",
        "id": 485549458,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733118199
    },
    {
        "content": "<p>I need to go do some things... I figure I may as well share my WIP solution. </p>\n<p><a href=\"https://github.com/lukewilliamboswell/aoc/blob/main/2024/02.roc\">https://github.com/lukewilliamboswell/aoc/blob/main/2024/02.roc</a></p>\n<p>There's some logical bug in there, it passes all the tests but doesn't give me the correct answer.</p>",
        "id": 485550273,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733118793
    },
    {
        "content": "<p>I think today's part 2 just shows how well designed the stdlib is already <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> </p>\n<p><a href=\"https://github.com/r-bar/advent24/blob/master/day02/p2.roc\">https://github.com/r-bar/advent24/blob/master/day02/p2.roc</a></p>",
        "id": 485550863,
        "sender_full_name": "Ryan Barth",
        "timestamp": 1733119209
    },
    {
        "content": "<p>I have found <code>import \"day2.txt\" as day2Text : Str </code> to be so convenient that I wonder if that language feature was inspired by a previous AoC.</p>",
        "id": 485551316,
        "sender_full_name": "Ben Thomas (enkidatron)",
        "timestamp": 1733119448
    },
    {
        "content": "<p>Ah, I think I know what my bug must be, but I'm afk for a few hours <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 485554085,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733121333
    },
    {
        "content": "<p><span aria-label=\"partying face\" class=\"emoji emoji-1f973\" role=\"img\" title=\"partying face\">:partying_face:</span> <br>\n<a href=\"https://gitlab.com/JanCVanB/aoc-2024/-/blob/main/day-02/part-1/main.roc\">https://gitlab.com/JanCVanB/aoc-2024/-/blob/main/day-02/part-1/main.roc</a><br>\n<a href=\"https://gitlab.com/JanCVanB/aoc-2024/-/blob/main/day-02/part-2/main.roc\">https://gitlab.com/JanCVanB/aoc-2024/-/blob/main/day-02/part-2/main.roc</a></p>",
        "id": 485556909,
        "sender_full_name": "jan kili",
        "timestamp": 1733123029
    },
    {
        "content": "<p>I got mine done too. <br>\nI always try to do it in as few passes as possible, which caused this to take a really long time. I got it wrong many times and eventually had to look at some other solutions to figure out my incorrect assumptions.</p>\n<p>However I'm pretty happy with the solution and it should be much, much faster than the permutation solutions.<br>\nThough I believe in the worst case it's O(n log n) because it would check the last item n times and the first item at most once</p>\n<p><a href=\"https://github.com/faldor20/aoc-template/blob/purity-inference/examples/2024/02.roc\">https://github.com/faldor20/aoc-template/blob/purity-inference/examples/2024/02.roc</a></p>",
        "id": 485567029,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733127450
    },
    {
        "content": "<p>Here is mine: <a href=\"https://github.com/ostcar/aoc2024/blob/main/day02.roc\">https://github.com/ostcar/aoc2024/blob/main/day02.roc</a></p>\n<p>I also run into the case, that the tests passes but part2 produces a wrong solution. Needed some moments away, to see my mistake.</p>",
        "id": 485567987,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1733127792
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p><span class=\"user-mention\" data-user-id=\"453714\">@Ryan Barth</span> I like how you solved it</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>The idea, that you create a List of diffs between the levels is nice.</p>\n</div></div>",
        "id": 485568311,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1733127916
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"496321\">@Oskar Hahn</span> . One of the benefits of doing it that way was with the examples it became very easy to visually debug. Changing the original code from</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"w\">    </span><span class=\"nv\">answer</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">parseInput</span><span class=\"w\"> </span><span class=\"nv\">input</span>\n<span class=\"w\">      </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nv\">diffLine</span>\n<span class=\"w\">      </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">countIf</span><span class=\"w\"> </span><span class=\"nv\">safe</span>\n</code></pre></div>\n<p>to this and running the example through it</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"w\">    </span><span class=\"nv\">answer</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">parseInput</span><span class=\"w\"> </span><span class=\"nv\">input</span>\n<span class=\"w\">      </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nv\">diffLine</span>\n<span class=\"w\">      </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">dbg</span>\n<span class=\"w\">      </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">countIf</span><span class=\"w\"> </span><span class=\"nv\">safe</span>\n</code></pre></div>\n<p>gives you this as the output</p>\n<div class=\"codehilite\"><pre><span></span><code>‚ùØ roc p1.roc -- example.txt\n[p1.roc:15] parseInput input\n      |&gt; List.map diffLine = [[-1, -2, -2, -1], [1, 5, 1, 1], [-2, -1, -4, -1], [2, -1, 2, 1], [-2, -2, 0, -3], [2, 3, 1, 2]]\n2\n</code></pre></div>\n<p>Which is how I managed to be a degenerate and write 0 expects while solving this. Who ever figured out how to produce the context in those <code>dbg</code> statements is a hero. What a wonderful feature!</p>",
        "id": 485571808,
        "sender_full_name": "Ryan Barth",
        "timestamp": 1733129165
    },
    {
        "content": "<p>That's coo <span class=\"user-mention\" data-user-id=\"453714\">@Ryan Barth</span> , reading your and <span class=\"user-mention\" data-user-id=\"462053\">@JanCVanB</span> solution is what helped me got mine over the line.</p>",
        "id": 485574038,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733130000
    },
    {
        "content": "<p>Fixed my part 2 ... decided to just make all the permutations and brute force it. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> </p>\n<p><a href=\"https://github.com/lukewilliamboswell/aoc/blob/main/2024/02.roc\">https://github.com/lukewilliamboswell/aoc/blob/main/2024/02.roc</a></p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>part 2 </p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">isIncreasingSafelyTolerant</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">U64</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Bool</span>\n<span class=\"nv\">isIncreasingSafelyTolerant</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">levels</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">start</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">At</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">end</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Before</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">len</span><span class=\"w\"> </span><span class=\"nv\">levels</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">countIf</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">idx</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">isIncreasingSafely</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">dropAt</span><span class=\"w\"> </span><span class=\"nv\">levels</span><span class=\"w\"> </span><span class=\"nv\">idx</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">isGt</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n</code></pre></div>\n</div></div>\n<div class=\"codehilite\"><pre><span></span><code>TIMING:\nREADING INPUT:  &lt;1ms\nSOLVING PART 1: 6ms\nSOLVING PART 2: 6ms\n</code></pre></div>",
        "id": 485583393,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733132922
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> </p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>I think a faster version of</p>\n<div class=\"codehilite\"><pre><span></span><code>List.countIf ...\n|&gt; Num.isGt 0\n</code></pre></div>\n<p>is List.any</p>\n</div></div>",
        "id": 485589148,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1733134800
    },
    {
        "content": "<p>After having a chat with <span class=\"user-mention\" data-user-id=\"462053\">@JanCVanB</span>  about how my solution works, I refactored it a little and added an explanation.<br>\nFor anyone curious </p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>explanation:</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>Checks if a sequence of levels is valid or not in a fairly efficent manner<br>\nWill walk forward checking for safe levels untill it finds an unsfae level which will cause an error<br>\nIn the case of an error we will try to continue skipping the current level <br>\nBecasue this is recursive if an error occurs and recovery doesn't work it will bubble up to the previous iteration and we will try to recover from there<br>\neg: 1 2 4 3 4 6 <br>\n(1 2 4 3) 4 6 -we process these levels and then hit an error (3)<br>\n(1 2 4 4) 6 -we skip the current value (3) but we then have another error value (4)<br>\n(1 2 3 4 6) -we move back one iteration, skip the previous value  (4) and then continue to the end <br>\nIn the worst case we would walk all the way back to the start. Although we could cap it at 3 steps back, which is the most we would need to find a solution if one exists</p>\n</div></div>",
        "id": 485599833,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733138017
    },
    {
        "content": "<p>Also just in case anyone was wondering, it's a little over twice as fast as the permutation approach</p>",
        "id": 485601595,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733138598
    },
    {
        "content": "<p>Here is mine: <a href=\"https://github.com/thenikso/advent-of-code-2024-roc/blob/main/02.roc\">https://github.com/thenikso/advent-of-code-2024-roc/blob/main/02.roc</a></p>\n<p>Really having a lot of fun with Roc!</p>",
        "id": 485698272,
        "sender_full_name": "Nicola Peduzzi",
        "timestamp": 1733169134
    },
    {
        "content": "<p>Don't understand why my solution is not working.  It passes with the test data, and I can't get <code>dbg</code> to work except with <code>roc test</code>. Anyone know how I can force it?</p>",
        "id": 485724856,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733181508
    },
    {
        "content": "<p>How are you accounting for the possibility that the first element could be the wrong one? Are you assuming it's always good?</p>",
        "id": 485725065,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733181629
    },
    {
        "content": "<p>I'm still on puzzle 1.  It's always OK</p>",
        "id": 485725490,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733181927
    },
    {
        "content": "<p>Lol, your posting in Day 2 thread</p>",
        "id": 485725575,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733181968
    },
    {
        "content": "<p>Oh, Part 1?</p>",
        "id": 485725599,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733181984
    },
    {
        "content": "<p>Maybe its the way your parsing the reports? Are you losing any data?</p>",
        "id": 485725732,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733182081
    },
    {
        "content": "<p>Are you using <code>Str.readToEnd</code>? I hadn't realised I'd left the wrong thing in my example in the template <a href=\"https://github.com/lukewilliamboswell/aoc-template/pull/6\">https://github.com/lukewilliamboswell/aoc-template/pull/6</a></p>",
        "id": 485725828,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733182146
    },
    {
        "content": "<p>Yeah Day 2, Part 1</p>",
        "id": 485725854,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733182178
    },
    {
        "content": "<p>I have all 1000 reports. I have expect processed == 1000</p>",
        "id": 485725874,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733182200
    },
    {
        "content": "<p>I get 4 safe reports</p>",
        "id": 485725931,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733182209
    },
    {
        "content": "<p>And I'm importing the txt file as a string</p>",
        "id": 485725946,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733182223
    },
    {
        "content": "<p>And now I'm moving to using walkTry (AWESOME, btw)</p>",
        "id": 485725976,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733182253
    },
    {
        "content": "<p>We have different puzzle inputs</p>",
        "id": 485725978,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733182255
    },
    {
        "content": "<p>Maybe, mine failed :-(</p>",
        "id": 485726086,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733182331
    },
    {
        "content": "<p>And now I'm getting this compiler error when I moved to walkTry:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>thread '&lt;unnamed&gt;' panicked at crates/compiler/can/src/exhaustive.rs:214:41:\nconstructor must be known in the indexable type if we are exhautiveness checking\nstack backtrace:\n   0: rust_begin_unwind\n             at /rustc/07dca489ac2d933c78d3c5158e3f43beefeb02ce/library/std/src/panicking.rs:645:5\n   1: core::panicking::panic_fmt\n             at /rustc/07dca489ac2d933c78d3c5158e3f43beefeb02ce/library/core/src/panicking.rs:72:14\n   2: core::panicking::panic_display\n             at /rustc/07dca489ac2d933c78d3c5158e3f43beefeb02ce/library/core/src/panicking.rs:196:5\n   3: core::panicking::panic_str\n             at /rustc/07dca489ac2d933c78d3c5158e3f43beefeb02ce/library/core/src/panicking.rs:171:5\n   4: core::option::expect_failed\n             at /rustc/07dca489ac2d933c78d3c5158e3f43beefeb02ce/library/core/src/option.rs:1980:5\n   5: expect&lt;alloc::vec::Vec&lt;roc_types::subs::Variable, alloc::alloc::Global&gt;&gt;\n             at /rustc/07dca489ac2d933c78d3c5158e3f43beefeb02ce/library/core/src/option.rs:894:21\n   6: index_var\n             at /Users/anthonybullard/Development/roc/crates/compiler/can/src/exhaustive.rs:214:32\n   7: reify\n             at /Users/anthonybullard/Development/roc/crates/compiler/can/src/exhaustive.rs:277:21\n   8: {closure#0}\n             at /Users/anthonybullard/Development/roc/crates/compiler/can/src/exhaustive.rs:588:28\n</code></pre></div>",
        "id": 485726120,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733182358
    },
    {
        "content": "<p>Should be crashing like that. If you could make an issue with a repro that would be super helpful</p>",
        "id": 485726322,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733182542
    },
    {
        "content": "<p>Nope, I'm just not very smart.  I've never coded in a language with no syntax highlighting AND no LSP</p>",
        "id": 485727273,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733183042
    },
    {
        "content": "<p>I just now have one additional report for some reason, but I got the right answer!</p>",
        "id": 485727380,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733183102
    },
    {
        "content": "<p>TIL:  If you import a txt file as a String,  better pass it to Str.trim if you are splitting on newlines! <span aria-label=\"man facepalming\" class=\"emoji emoji-1f926-200d-2642\" role=\"img\" title=\"man facepalming\">:man_facepalming:</span></p>",
        "id": 485728076,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733183554
    },
    {
        "content": "<p>Part 2 done as well.  I used permutations, but just as a fall back if the original report failed</p>",
        "id": 485730717,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733185161
    },
    {
        "content": "<p><a href=\"https://github.com/gamebox/aoc-2024/blob/main/day2/puzzle2/main.roc\">https://github.com/gamebox/aoc-2024/blob/main/day2/puzzle2/main.roc</a></p>",
        "id": 485731022,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733185386
    },
    {
        "content": "<p>Well I was thoroughly stupid about Part 2 and had about 10 very cunning versions which all worked absolutely whizzily on the test data and not on the real data until the light dawned ... and I am afraid I permuted ... but the data was amenable to brute force so ... I need to go back and check some elegant solutions.</p>",
        "id": 485731173,
        "sender_full_name": "Paul Stanley",
        "timestamp": 1733185511
    },
    {
        "content": "<p>Not looking to code golf on something I get 20 minutes a day to do</p>",
        "id": 485731724,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733185897
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> <a href=\"#narrow/stream/358903-advent-of-code/topic/2024.20Day.202/near/485727273\">said</a>:</p>\n<blockquote>\n<p>Nope, I'm just not very smart.  I've never coded in a language with no syntax highlighting AND no LSP</p>\n</blockquote>\n<p>Hey, we should have lsp and highlighting support for every editor I know of, it's in the install docs on the website. Msg me if you need a hand in getting it setup :)</p>",
        "id": 485733241,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733186998
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"651372\">Eli Dowling</span> <a href=\"#narrow/stream/358903-advent-of-code/topic/2024.20Day.202/near/485733241\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> <a href=\"#narrow/stream/358903-advent-of-code/topic/2024.20Day.202/near/485727273\">said</a>:</p>\n<blockquote>\n<p>Nope, I'm just not very smart.  I've never coded in a language with no syntax highlighting AND no LSP</p>\n</blockquote>\n<p>Hey, we should have lsp and highlighting support for every editor I know of, it's in the install docs on the website. Msg me if you need a hand in getting it setup :)</p>\n</blockquote>\n<p>Thank you!  I‚Äôm just being intentionally lazy here. Some people around me have been having the conversation that no LSP will help you learn a new language faster, so I‚Äôm trying it out.  I‚Äôll probably set up syntax highlighting tomorrow. I‚Äôm impressed with myself doing Day2Part2 in about 5 minutes with these conditions <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 485733959,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733187419
    },
    {
        "content": "<p><a href=\"https://github.com/isaacvando/aoc/blob/main/2024/2.roc\">https://github.com/isaacvando/aoc/blob/main/2024/2.roc</a></p>",
        "id": 485744685,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1733195450
    },
    {
        "content": "<p>I succumbed to brute force also <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 485744723,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1733195479
    },
    {
        "content": "<blockquote>\n<p>no LSP will help you learn a new language faster</p>\n</blockquote>\n<p>Just guessing but I don't think that is true for Roc, I expect type on hover and instant error underline to help a lot</p>",
        "id": 485806196,
        "sender_full_name": "Anton",
        "timestamp": 1733220203
    },
    {
        "content": "<p>Yeah, I strongly disagree. I think being able to constantly look up all the list functions and their signatures by typing <code>List.</code> is stupidly helpful</p>",
        "id": 485806417,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733220261
    },
    {
        "content": "<p>Yeah, we are going to see.  I think the argument is similar to that for handwriting your notes instead of typing them.  Better memory retention when you have to manually consult the documentation and peruse the options, and being forced to recall the names of signatures.  Since this AOC is definitely the most Roc I've written in anger, it'll be a good test (though I'm usually a pretty fast learner of PLs not named Pony).</p>",
        "id": 485826049,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733225688
    },
    {
        "content": "<p><a href=\"https://github.com/ghigt/advent-of-code/blob/main/2024/roc/02.roc\">https://github.com/ghigt/advent-of-code/blob/main/2024/roc/02.roc</a><br>\nMy two cents:</p>\n<ul>\n<li>I would love to see the given result with the expected one on tests</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><code>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n‚îÄ‚îÄ EXPECT FAILED in 02.roc ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\nThis expectation failed:\n\n62‚îÇ¬† expect part1 fixture == Ok &quot;2&quot;\n\n¬†¬† ¬† ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre></div>\n<p>‚Ä¢ If I have an error on the syntax/types in the file, I loose every type definitions on the entire file which complicates even more the resolution <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 485869156,
        "sender_full_name": "Ghislain",
        "timestamp": 1733236651
    },
    {
        "content": "<p>You can get a nicer error message. What you have to do is writing the expect block in more then one line</p>\n<p>If you write:</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>expect\n  got = part1 fixture\n  expect = Ok \"2\"\n  got == expect\n</code></pre></div>\n<p>then you get a message, what the values from <code>got</code> and <code>expect</code> are.</p>",
        "id": 485898766,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1733243700
    },
    {
        "content": "<p>I really want to improve this so that the first thing works <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 485900702,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1733244182
    },
    {
        "content": "<p>as in, that it just breaks down the final expression and tells you what all the subexpressions' values are</p>",
        "id": 485900755,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1733244197
    },
    {
        "content": "<p>so you don't have to split it up into names</p>",
        "id": 485900784,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1733244204
    },
    {
        "content": "<p>A bit late but I did it :) <a href=\"https://github.com/RobinCamarasa/Advent-of-code/blob/master/2024/day02/RobinCamarasa/main.roc\">https://github.com/RobinCamarasa/Advent-of-code/blob/master/2024/day02/RobinCamarasa/main.roc</a></p>",
        "id": 485931334,
        "sender_full_name": "Robin Camarasa",
        "timestamp": 1733253075
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"772277\">Robin Camarasa</span> <a href=\"#narrow/channel/358903-advent-of-code/topic/2024.20Day.202/near/485931334\">said</a>:</p>\n<blockquote>\n<p>A bit late</p>\n</blockquote>\n<p><a href=\"/user_uploads/22008/Xu5rycrLdQFlrR0Fe84DgQpl/a_wizard_is_never_late.gif\">a_wizard_is_never_late.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/Xu5rycrLdQFlrR0Fe84DgQpl/a_wizard_is_never_late.gif\" title=\"a_wizard_is_never_late.gif\"><img data-animated=\"true\" data-original-dimensions=\"498x266\" src=\"/user_uploads/thumbnail/22008/Xu5rycrLdQFlrR0Fe84DgQpl/a_wizard_is_never_late.gif/840x560-anim.webp\"></a></div>",
        "id": 485939843,
        "sender_full_name": "jan kili",
        "timestamp": 1733255657
    },
    {
        "content": "<p><a href=\"https://github.com/alsm/aoc-roc/blob/master/2024/02.roc\">https://github.com/alsm/aoc-roc/blob/master/2024/02.roc</a><br>\nI really enjoyed doing that one in roc</p>",
        "id": 485975413,
        "sender_full_name": "Al S-M",
        "timestamp": 1733268896
    },
    {
        "content": "<p>Claude's solution:<br>\n<a href=\"/user_uploads/22008/9UFctlpCcgtIW2Dy0phLjVdD/claude_part2.roc\">claude_part2.roc</a></p>\n<p>All I had to do was feed it the <code>roc test</code> output of its first version and it fixed the failures by itself:</p>\n<div class=\"codehilite\"><pre><span></span><code>‚ùØ ../roc test claude_part1.roc\n‚îÄ‚îÄ EXPECT PANICKED in claude_part1.roc ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\nThis expectation crashed while running:\n\n41‚îÇ  expect part1 exampleInput == Ok &quot;The number of safe reports is 2&quot;\n     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe crash reported this message:\n\nInteger subtraction overflowed!\n</code></pre></div>",
        "id": 486097877,
        "sender_full_name": "Anton",
        "timestamp": 1733320491
    }
]