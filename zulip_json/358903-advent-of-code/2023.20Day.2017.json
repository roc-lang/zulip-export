[
    {
        "content": "<p>After beeing sick in bed for a few days, I had some time to continue. Day 17 was something that was not so nice to do in Roc, but at least here is my part 1 : <a href=\"https://github.com/FabHof/aoc-2023/blob/main/day17/main.roc\">https://github.com/FabHof/aoc-2023/blob/main/day17/main.roc</a><br>\nIt took 10 minutes to run on my laptop (with --optimize). For part 2 I think I implemented something that should maybe work, but I get a memory access violation after about 1 minute.</p>",
        "id": 409749295,
        "sender_full_name": "Fabian Schmalzried",
        "timestamp": 1703365484
    },
    {
        "content": "<p>I had a solution for Part 1 that run in around 7 Seconds, but I think it only worked by accident: <a href=\"https://github.com/ostcar/aoc2023/blob/37f02c7e4f4b49d5ce3630af29c7ad4e7159183a/days/day17.roc\">https://github.com/ostcar/aoc2023/blob/37f02c7e4f4b49d5ce3630af29c7ad4e7159183a/days/day17.roc</a></p>\n<p>So I rewrote it for Part 2. It works, but it is very slow. For part 1, a build with --optimize takes more then a minute. I forgot to write down the number for Part 2, but it was around 10 Minutes.</p>\n<p><a href=\"https://github.com/ostcar/aoc2023/blob/main/days/day17.roc\">https://github.com/ostcar/aoc2023/blob/main/days/day17.roc</a></p>\n<p>I don't understand, why it is so slow. I tried different things, but nothing helped.</p>\n<p>Could someone explain to me, what I am doing wrong?</p>",
        "id": 410025717,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1703597628
    },
    {
        "content": "<p>I think you are just hitting the recursive refcounting perf issue</p>",
        "id": 410031922,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703600836
    },
    {
        "content": "<p>So, not really doing anything wrong. Just a roc issue that still needs fixing.</p>",
        "id": 410031969,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703600865
    },
    {
        "content": "<p>Hmm...might be wrong...hard to follow all the types without annotations</p>",
        "id": 410032208,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703601003
    },
    {
        "content": "<p>Oh, nvm. The issue here is the <code>seen</code> list. <code>List.contains</code> is linearly scanning it and that is a huge part of the execution time. Using a <code>Set</code> instead, it still isn't super fast, but part2 takes about a minute for me.</p>",
        "id": 410034207,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703602032
    },
    {
        "content": "<p>After that, <code>List.dropAt queue minIndex</code> uses about half of the exection time with the <code>List.walkWithIndex</code> in <code>getShortest</code> using the other half.</p>",
        "id": 410034796,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703602382
    },
    {
        "content": "<p>So some sort of priority queue or heap there that makes it trivial to get the lowest element would be a huge gain probably.</p>",
        "id": 410034920,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703602459
    },
    {
        "content": "<p>especially if it is a heap that stores the lowest element as the last index in the list to make it free to remove</p>",
        "id": 410034959,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703602488
    },
    {
        "content": "<p>So I have tested this twice and it makes no sense to me. After switching this app to use a <code>Set</code> for tracking seen elements. I ran it to measure the full execution time uninstrumented. Both times results looked approximately like this for execution time:</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>/tmp/aoc2023/days/day17\n<span class=\"go\">Part1 in 6.339s:</span>\n<span class=\"go\">722</span>\n\n<span class=\"go\">Part2 in 54.736s:</span>\n<span class=\"go\">894</span>\n</code></pre></div>\n<p>I then measure it with perf (which pauses and dumps the stack of the binary many times). Somehow running with perf is faster than running without perf by about 2x:</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>perf<span class=\"w\"> </span>record<span class=\"w\"> </span>-F97<span class=\"w\"> </span>--call-graph<span class=\"w\"> </span>dwarf<span class=\"w\"> </span>--<span class=\"w\"> </span>/tmp/aoc2023/days/day17\n<span class=\"go\">Part1 in 3.607s:</span>\n<span class=\"go\">722</span>\n\n<span class=\"go\">Part2 in 30.281s:</span>\n<span class=\"go\">894</span>\n<span class=\"go\">[ perf record: Woken up 106 times to write data ]</span>\n<span class=\"go\">[ perf record: Captured and wrote 26.434 MB perf.data (3276 samples) ]</span>\n</code></pre></div>",
        "id": 410035231,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703602669
    },
    {
        "content": "<p>what's surprising about that? <code>perf</code> should give better perf, it's right there in the name! <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 410036668,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1703603382
    },
    {
        "content": "<p>...but yeah I have no idea why that could be happening <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 410036801,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1703603453
    },
    {
        "content": "<p>Yeah, it is super strange. Even stranger, <code>time perf record -F97 --call-graph dwarf -- /tmp/aoc2023/days/day17</code> slows back down, but <code>date &amp;&amp; perf record -F97 --call-graph dwarf -- /tmp/aoc2023/days/day17 &amp;&amp; date</code> still runs at the fast speed.</p>",
        "id": 410037985,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703604108
    },
    {
        "content": "<p>So the fast speed can be measured with external programs</p>",
        "id": 410038005,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703604119
    }
]