[
    {
        "content": "<p>Yo yo everyone! I'm working on day 20 part 1 and I'm hitting a weird issue where Roc seems to stop execution with no error code. Part 1 of the puzzle is about finding a path through a maze, and then finding <em>alternative</em> faster paths if you can pass through a maze wall once. I have what I think is a working version (at least, it passes the sample input), but when I run on the full input, Roc stops execution and exits partway through.</p>\n<p>My solution uses recursion to build paths, so I'm wondering if somehow Roc is running out of memory? This seems weird, because looking at memory usage while it's running before it stops, I don't see any large spike.</p>\n<p>(Side note: Does Roc do tail call optimization? If so, my function isn't set up properly to take advantage of it right now, but maybe that could help.)</p>\n<p>I added some <code>dbg</code> logs to my solution in the recursive function to see at what point in solving the maze it stops and it seems to stop at a different point every time.</p>\n<p><a href=\"https://github.com/jaredramirez/advent-of-code-2024/blob/main/src/day20.roc\">Here's the file in question.</a></p>\n<p>I also recorded a quick screen share going through the issue, any advice would be much appreciated!<br>\n<a href=\"/user_uploads/22008/Uj-u86P8fL8pe0u8cENay8k5/Screen-Recording-2024-12-20-at-11.32.45AM.mov\">Screen Recording 2024-12-20 at 11.32.45 AM.mov</a></p>",
        "id": 490220425,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1734723657
    },
    {
        "content": "<p>If I build it with <code>--optimized</code> then run, my shell produces:</p>\n<div class=\"codehilite\"><pre><span></span><code>  × External command core dumped\n   ╭─[entry #198:1:1]\n 1 │ src/day20\n   · ────┬────\n   ·     ╰── core dumped with SIGSEGV (11)\n   ╰────\n</code></pre></div>",
        "id": 490221405,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1734724146
    },
    {
        "content": "<p>Welcome back <span class=\"user-mention\" data-user-id=\"341568\">@Jared Ramirez</span> :)</p>",
        "id": 490221788,
        "sender_full_name": "Anton",
        "timestamp": 1734724336
    },
    {
        "content": "<p>If you are on linux, can you do <code>roc build src/day20.roc --linker=legacy</code> followed by <code>valgrind src/day20</code> and share the output here?</p>",
        "id": 490222071,
        "sender_full_name": "Anton",
        "timestamp": 1734724493
    },
    {
        "content": "<p>Here's the error output:</p>\n<div class=\"codehilite\"><pre><span></span><code>==512273== Stack overflow in thread #1: can&#39;t grow stack to 0x1ffe801000\n==512273==\n==512273== Process terminating with default action of signal 11 (SIGSEGV): dumping core\n==512273==  Access not within mapped region at address 0x1FFE801D08\n==512273== Stack overflow in thread #1: can&#39;t grow stack to 0x1ffe801000\n==512273==    at 0x15F107: List_concat_55aa18fc3c82fe108fcf64fea07364ddba1e8c526b8d27b19692a7748519e1c (in /home/jared/dev/github/jaredramirez/advent-of-code-2024/src/day20)\n==512273==  If you believe this happened as a result of a stack\n==512273==  overflow in your program&#39;s main thread (unlikely but\n==512273==  possible), you can try to increase the size of the\n==512273==  main thread stack using the --main-stacksize= flag.\n==512273==  The main thread stack size used in this run was 8388608.\n==512273==\n==512273== HEAP SUMMARY:\n==512273==     in use at exit: 254,803,958 bytes in 14,127 blocks\n==512273==   total heap usage: 48,589 allocs, 34,462 frees, 264,887,292 bytes allocated\n==512273==\n==512273== LEAK SUMMARY:\n==512273==    definitely lost: 8 bytes in 1 blocks\n==512273==    indirectly lost: 0 bytes in 0 blocks\n==512273==      possibly lost: 254,802,926 bytes in 14,125 blocks\n==512273==    still reachable: 1,024 bytes in 1 blocks\n==512273==         suppressed: 0 bytes in 0 blocks\n==512273== Rerun with --leak-check=full to see details of leaked memory\n==512273==\n==512273== For lists of detected and suppressed errors, rerun with: -s\n==512273== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n</code></pre></div>",
        "id": 490224093,
        "sender_full_name": "Jared Ramirez",
        "timestamp": 1734725491
    },
    {
        "content": "<p>hey Jared, great to see you! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 490224216,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734725542
    },
    {
        "content": "<blockquote>\n<p>Does Roc do tail call optimization? If so, my function isn't set up properly to take advantage of it right now, but maybe that could help.</p>\n</blockquote>\n<p>yes we do</p>",
        "id": 490232025,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734729636
    },
    {
        "content": "<blockquote>\n<p>My solution uses recursion to build paths, so I'm wondering if somehow Roc is running out of memory? This seems weird, because looking at memory usage while it's running before it stops, I don't see any large spike.</p>\n</blockquote>\n<p>Stack space is limited to I think 8MB by default on linux, so probably a stack overflow</p>",
        "id": 490232202,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734729727
    },
    {
        "content": "<p>You can try <code>ulimit -s unlimited</code></p>",
        "id": 490232285,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734729788
    },
    {
        "content": "<p>Otherwise, if you make the function properly tail recursive, that should fix things</p>",
        "id": 490232323,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734729817
    },
    {
        "content": "<p>Does it only fail in optimized?</p>",
        "id": 490233687,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734730507
    }
]