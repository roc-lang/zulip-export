[
    {
        "content": "<p>Here's my Part 1, I should be right to tackle Part 2 later... but figured I share what I have to far <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> </p>\n<p><a href=\"https://github.com/lukewilliamboswell/aoc/blob/main/2024/09.roc\">https://github.com/lukewilliamboswell/aoc/blob/main/2024/09.roc</a></p>\n<div class=\"codehilite\"><pre><span></span><code>TIMING:\nREADING INPUT:  &lt;1ms\nSOLVING PART 1: 4ms\n</code></pre></div>",
        "id": 486847279,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733723890
    },
    {
        "content": "<p>Here is my part1: <a href=\"https://github.com/ostcar/aoc2024/blob/main/day09.roc\">https://github.com/ostcar/aoc2024/blob/main/day09.roc</a></p>\n<p>After reading the assignment for Part2, I can say, that my solution for part1 is to clever and can not be used at all for Part2. I have to do Part2 later and remember, not to be clever <span aria-label=\"face exhaling\" class=\"emoji emoji-1f62e-200d-1f4a8\" role=\"img\" title=\"face exhaling\">:face_exhaling:</span></p>",
        "id": 486923823,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1733730162
    },
    {
        "content": "<p>so are we sure the only way to iterate N times in Roc is via a <code>List.walk</code> or recursion at the moment yes? no loops whatsoever? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 486967996,
        "sender_full_name": "Nicola Peduzzi",
        "timestamp": 1733742887
    },
    {
        "content": "<p>for loops are planned <a href=\"#narrow/channel/304641-ideas/topic/.60for.60.20and.20.60var.60/near/471593157\">#ideas &gt; &#96;for&#96; and &#96;var&#96; @ ðŸ’¬</a></p>",
        "id": 486968405,
        "sender_full_name": "Anton",
        "timestamp": 1733743007
    },
    {
        "content": "<p>So Part 2 is finally done. I am not so happy with it and it took too long to write. There are probably better solutions:</p>\n<p>On an optimized build:<br>\npart1 in 4.347ms<br>\npart2 in 1.52s</p>",
        "id": 487029940,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1733759222
    },
    {
        "content": "<p>Well I give up. Can't pass part 2 even if the example checks out. Plus the mental gymnastic today was exhausting. Can't win em all. <a href=\"https://github.com/thenikso/advent-of-code-2024-roc/blob/main/09.roc\">https://github.com/thenikso/advent-of-code-2024-roc/blob/main/09.roc</a></p>",
        "id": 487090508,
        "sender_full_name": "Nicola Peduzzi",
        "timestamp": 1733775602
    },
    {
        "content": "<p>Nope! attempted a new solution inspired by Oskar and got it <a href=\"https://github.com/thenikso/advent-of-code-2024-roc/blob/main/09bis.roc\">https://github.com/thenikso/advent-of-code-2024-roc/blob/main/09bis.roc</a></p>\n<div class=\"codehilite\"><pre><span></span><code>Day 09 part 1: (Ok ...) [1428ms]\nDay 09 part 2: (Ok ...) [11559ms]\n</code></pre></div>\n<p>would not recommend <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 487110003,
        "sender_full_name": "Nicola Peduzzi",
        "timestamp": 1733782347
    },
    {
        "content": "<p>I had a very frustrating time today too. It's really a problem that feels tailor made for a mutable imperative approach. (Nothing wrong with that ... but it runs against the grain of an immutable functional language). On an optimized build, Part 1 in 3 ms and Part 2 in 634 ms. But it's just very naive: a dreary recursive version of an imperative program endlessly walking a list, and pretending it's mutable, more or less. </p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Header</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>I think the key hold up is finding space in Part 2 and what I have revolts me. I tried minor optimisations (e.g. using <code>List.findFirstIndex</code> to skip to free space) but they slowed it down quite a bit (which did surprise me somewhat: I might not be surprised to find it <em>not much faster</em> but I wouldn't have expected it to be slower). You should be able to take advantage of the fact that blocks _never_ move \"right\" to construct a list of all the free space at the outset, but there would still be some book-keeping and I couldn't be bothered.</p>\n</div></div>\n<p><a href=\"https://gist.github.com/PaulStanley/4a48ddb3e8e9c05b050b3cb032222e69\">https://gist.github.com/PaulStanley/4a48ddb3e8e9c05b050b3cb032222e69</a></p>",
        "id": 487126417,
        "sender_full_name": "Paul Stanley",
        "timestamp": 1733789340
    },
    {
        "content": "<p>No spoilers!</p>",
        "id": 487137348,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733795010
    },
    {
        "content": "<p>Hiding any spoilers, here's my day 9: <a href=\"https://github.com/Enkidatron/advent-of-code-2024/blob/main/day9.roc\">https://github.com/Enkidatron/advent-of-code-2024/blob/main/day9.roc</a><br>\n(I'm not using the aoc framework package because I'm doing this to learn Roc and I don't want to use the framework until I understand what it's doing. My Roc is probably not idiomatic for the same reason. )</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Part 2 thoughts</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>This was the first day where I just had to use a different representation to solve the two parts. Part 1 worked well with a list of individual blocks, but part 2 rewarded modeling an entire file or chunk of free space as an individual item. Or at least I found it easier to think about that way.  </p>\n</div></div>",
        "id": 487139266,
        "sender_full_name": "Ben Thomas (enkidatron)",
        "timestamp": 1733796093
    },
    {
        "content": "<p>The complaints and perf issues here make me feel like I should solve it or at least investigate if the perf issues are roc primitive related or algorithmic</p>",
        "id": 487164724,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733808521
    },
    {
        "content": "<p>Performance information:  using <code>roc dev day9.roc</code>, my part 1 is consistently 16ms and part 2 is 1580-1650ms. <br>\n(I have learned enough to duplicate how the aoc framework was doing the timing)</p>",
        "id": 487170204,
        "sender_full_name": "Ben Thomas (enkidatron)",
        "timestamp": 1733811586
    },
    {
        "content": "<p>You also can get performance using an optimised build with <code>--optimize</code></p>",
        "id": 487170612,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733811808
    },
    {
        "content": "<p>I usually do</p>\n<div class=\"codehilite\"><pre><span></span><code>$ roc build --optimize app.roc\n$ ./app.roc &lt; input.txt\n</code></pre></div>",
        "id": 487170659,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733811834
    },
    {
        "content": "<p>But you can also do </p>\n<div class=\"codehilite\"><pre><span></span><code>$ roc --optimize app.roc &lt; input.txt`\n</code></pre></div>",
        "id": 487170754,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733811859
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/channel/358903-advent-of-code/topic/2024.20Day.209/near/487170659\">said</a>:</p>\n<blockquote>\n<p>I usually do</p>\n<div class=\"codehilite\"><pre><span></span><code>$ roc build --optimize app.roc\n$ ./app.roc &lt; input.txt\n</code></pre></div>\n<p>But you can also do </p>\n<p><div class=\"codehilite\"><pre><span></span><code>$ roc --optimize app.roc &lt; input.txt`\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I don' understand way, but in my cases, the first one is much faster.  For example for this day:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ roc --optimize day09.roc\npart1 in 36.136ms\npart2 in 12.133s\n\n$ roc build --optimize day09.roc &amp;&amp; ./day09\npart1 in 3.892ms\npart2 in 928.913ms\n</code></pre></div>",
        "id": 487180061,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1733816390
    },
    {
        "content": "<p>did we ever fix <code>roc ...</code> ignoring the <code>optimize</code> flag?</p>",
        "id": 487180542,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733816574
    },
    {
        "content": "<p>My guess is no based on the comment above</p>",
        "id": 487180575,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733816589
    },
    {
        "content": "<p>Also, I'm almost done with my own implementation before I'll look at perf of others. I have part two working for the example, but a bug with the full run...</p>",
        "id": 487180706,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733816639
    },
    {
        "content": "<p>Here is my implementation: <a href=\"https://gist.github.com/bhansconnect/0c457a377473f9c80237d26751fa7fe7\">https://gist.github.com/bhansconnect/0c457a377473f9c80237d26751fa7fe7</a><br>\nI probably should have started with a more naive solution instead of a more optimized one...<br>\nI'm sure there is still room for improvement, but hard to tell exactly what without better debug info.</p>\n<div class=\"codehilite\"><pre><span></span><code>$ /tmp/aoc-2024/day8/main\nPart 1: ... -&gt; 2ms\nPart 2: ... -&gt; 8ms\n</code></pre></div>\n<p>EDIT: manage to cut off 2-3ms from part 2 by avoid a <code>List.range</code> and using a recursive walk instead. So now at 5-6ms</p>",
        "id": 487297423,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733849209
    },
    {
        "content": "<p>Later today I'll start looking at the other solution to try and figure out if any roc perf sharp edges are leading to major perf drops. Not sure how much of this is implicit to certain solution vs due to roc cloning way too much or similar.</p>",
        "id": 487297698,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733849281
    },
    {
        "content": "<p>fix for <code>roc --optimize day09.roc</code>: <a href=\"https://github.com/roc-lang/roc/pull/7326\">https://github.com/roc-lang/roc/pull/7326</a></p>",
        "id": 487299257,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733849728
    },
    {
        "content": "<p>Claude is struggling with this one...</p>",
        "id": 487315348,
        "sender_full_name": "Anton",
        "timestamp": 1733855027
    },
    {
        "content": "<p>Makes sense</p>",
        "id": 487322568,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733857468
    },
    {
        "content": "<p>It was eventually able to solve part 1 in one shot:</p>\n<div class=\"codehilite\"><pre><span></span><code>SOLVING PART 1: 288ms\n</code></pre></div>\n<p>Main prompt additions for this one :</p>\n<div class=\"codehilite\"><pre><span></span><code>- Roc does not use `head :: tail`, use `[head, .. as tail]` instead. Make sure you do not forget the `as`!\n- Roc does not have currying.\n- You can not pattern match directly on booleans. Avoid using Bool.true and Bool.false in general, it is better to use descriptive tags, for example `HasNoExtraLine` and `HasExtraLine`.\n- Roc does not allow shadowing.\n</code></pre></div>\n<p><a href=\"/user_uploads/22008/VX8jU_85UMt288_-RenhEClR/main_claude_part1.roc\">main_claude_part1.roc</a></p>",
        "id": 487324628,
        "sender_full_name": "Anton",
        "timestamp": 1733858201
    },
    {
        "content": "<p>I'm giving up on part 2 <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span><br>\nIt's definitely a good benchmark to try to improve the prompt for in the future.<br>\n<a href=\"/user_uploads/22008/VpKWgsfOYexUu7Bxwd4uGgED/prompt-aoc-9-part2.txt\">prompt-aoc-9-part2.txt</a></p>",
        "id": 487328655,
        "sender_full_name": "Anton",
        "timestamp": 1733859755
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/channel/358903-advent-of-code/topic/2024.20Day.209/near/487170659\">said</a>:</p>\n<blockquote>\n<p>I usually do</p>\n<p><div class=\"codehilite\"><pre><span></span><code>$ roc build --optimize app.roc\n$ ./app.roc &lt; input.txt\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks! The optimized day9 takes about 8ms and 650ms, which feels like an impressive speed up to me, a roc beginner. The compiler is definitely smarter than I am at making that code run fast.</p>",
        "id": 488004235,
        "sender_full_name": "Ben Thomas (enkidatron)",
        "timestamp": 1733885970
    },
    {
        "content": "<p>This was definitely one where the optimizer did it's thing</p>",
        "id": 488143095,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733935862
    },
    {
        "content": "<p>Using Roc Run:</p>\n<div class=\"codehilite\"><pre><span></span><code>Part 1: 6401092019345 [26000ns]\nPart 2: 6431472344710 [1000ns]\n</code></pre></div>\n<p>Using optimized build:</p>\n<div class=\"codehilite\"><pre><span></span><code>Part 1: 6401092019345 [1000ns]\nPart 2: 6431472344710 [0ns]\n</code></pre></div>",
        "id": 488143250,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733935908
    },
    {
        "content": "<p><a href=\"https://github.com/gamebox/aoc-2024/tree/main/day9\">https://github.com/gamebox/aoc-2024/tree/main/day9</a></p>",
        "id": 488143349,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733935929
    },
    {
        "content": "<p>It also is NOT a problem for functional languages :-)</p>",
        "id": 488143408,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733935950
    },
    {
        "content": "<p>Your timing is broken</p>",
        "id": 488156962,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733940340
    },
    {
        "content": "<p>Context is the last two messages in day 8 of aoc</p>",
        "id": 488157175,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733940416
    },
    {
        "content": "<p>It's due to some sort of roc bug with <code>!</code> on task</p>",
        "id": 488157221,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733940429
    },
    {
        "content": "<p>Iâ€™ll fix it and remeasure</p>",
        "id": 488172027,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733945616
    },
    {
        "content": "<p>Is it only for optimized builds?</p>",
        "id": 488172075,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733945631
    },
    {
        "content": "<p>Either way Iâ€™ll check it out after work</p>",
        "id": 488172181,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733945650
    },
    {
        "content": "<p>For both I think</p>",
        "id": 488182519,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733949076
    },
    {
        "content": "<p>I think we desugar in a way that reorders things wrong</p>",
        "id": 488182550,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733949089
    }
]