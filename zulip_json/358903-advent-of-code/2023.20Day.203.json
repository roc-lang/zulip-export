[
    {
        "content": "<p>I'm not done yet but the <a href=\"#narrow/stream/304902-show-and-tell/topic/Array2D.20package.20updated.20for.20AoC/near/404961424\">array 2d lib</a> by <span class=\"user-mention\" data-user-id=\"586417\">@Elias Mulhall</span>  is soo nice</p>",
        "id": 405610008,
        "sender_full_name": "John Murray",
        "timestamp": 1701584761
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>My solution</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">app</span><span class=\"w\"> </span><span class=\"s\">\"AoC\"</span>\n<span class=\"w\">    </span><span class=\"nv\">packages</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nv\">pf</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/roc-lang/basic-cli/releases/download/0.7.0/bkGby8jb0tmZYsy2hg1E_B2QrCgcSTxdUlHtETwm5m4.tar.br\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">parser</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/lukewilliamboswell/roc-parser/releases/download/0.2.0/dJQSsSmorujhiPNIvJKlQoI92RFIG_JQwUfIxZsCSwE.tar.br\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"nv\">imports</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">        </span><span class=\"nv\">pf</span><span class=\"nf\">.</span><span class=\"kt\">Stdout</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">pf</span><span class=\"nf\">.</span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"nv\">parser</span><span class=\"nf\">.</span><span class=\"kt\">Core</span><span class=\"nf\">.</span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kt\">Parser</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nv\">const</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nv\">keep</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nv\">skip</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nv\">many</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nv\">oneOf</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"nv\">parser</span><span class=\"nf\">.</span><span class=\"kt\">String</span><span class=\"nf\">.</span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nv\">digit</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nv\">string</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nv\">parseStr</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nv\">anyCodeunit</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"s\">\"day-3-input.txt\"</span><span class=\"w\"> </span><span class=\"kr\">as</span><span class=\"w\"> </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"nv\">provides</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nv\">to</span><span class=\"w\"> </span><span class=\"nv\">pf</span>\n\n<span class=\"kr\">main </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">*</span>\n<span class=\"kr\">main </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"nv\">part1</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">await</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"nv\">part2</span>\n\n<span class=\"nv\">part1</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span>\n<span class=\"nv\">part1</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"nv\">schematic</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">potentialParts</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">        </span><span class=\"nv\">input</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">dropIf</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">isEmpty</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">mapWithIndex</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"nv\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">i</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">parseRow</span><span class=\"w\"> </span><span class=\"nv\">i</span><span class=\"w\"> </span><span class=\"nv\">s</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">splitIntoParts</span>\n\n<span class=\"w\">    </span><span class=\"nv\">findPartItems</span><span class=\"w\"> </span><span class=\"nv\">schematic</span><span class=\"w\"> </span><span class=\"nv\">potentialParts</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">sum</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toStr</span>\n\n<span class=\"nv\">part2</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span>\n<span class=\"nv\">part2</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"nv\">schematic</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">potentialParts</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">        </span><span class=\"nv\">input</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">dropIf</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">isEmpty</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">mapWithIndex</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"nv\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">i</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">parseRow</span><span class=\"w\"> </span><span class=\"nv\">i</span><span class=\"w\"> </span><span class=\"nv\">s</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">splitIntoParts</span>\n\n<span class=\"w\">    </span><span class=\"nv\">findGears</span><span class=\"w\"> </span><span class=\"nv\">schematic</span><span class=\"w\"> </span><span class=\"nv\">potentialParts</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">sum</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toStr</span>\n\n<span class=\"kt\">Item</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Space</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Symbol</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Number</span><span class=\"w\"> </span><span class=\"kt\">Nat</span><span class=\"p\">]</span>\n<span class=\"kt\">Row</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Item</span>\n<span class=\"kt\">Schematic</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Row</span>\n\n<span class=\"kt\">PotentialPart</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">row</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Nat</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">col</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Nat</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">len</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Nat</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">part</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Nat</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">schematic</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">r</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">get</span><span class=\"w\"> </span><span class=\"nv\">schematic</span><span class=\"w\"> </span><span class=\"nv\">r</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">try</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">row</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">get</span><span class=\"w\"> </span><span class=\"nv\">row</span><span class=\"w\"> </span><span class=\"nv\">c</span>\n\n<span class=\"nv\">getAdj</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">r</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">f</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">rI</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toI64</span><span class=\"w\"> </span><span class=\"nv\">r</span>\n<span class=\"w\">    </span><span class=\"nv\">cI</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toI64</span><span class=\"w\"> </span><span class=\"nv\">c</span>\n<span class=\"w\">    </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">rI</span><span class=\"w\"> </span><span class=\"nf\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">rI</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">rI</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">nr</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">keepOks</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">cI</span><span class=\"w\"> </span><span class=\"nf\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">cI</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">cI</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">nc</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">r</span><span class=\"w\"> </span><span class=\"nf\">&gt;=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"nf\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nf\">&gt;=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"kr\">then</span><span class=\"w\"> </span><span class=\"nv\">f</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toNat</span><span class=\"w\"> </span><span class=\"nv\">nr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toNat</span><span class=\"w\"> </span><span class=\"nv\">nc</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kr\">else</span><span class=\"w\"> </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">OOB</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">join</span>\n\n<span class=\"nv\">findPartItems</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Schematic</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">PotentialPart</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Nat</span>\n<span class=\"nv\">findPartItems</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">schematic</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">potentialParts</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">getPart</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">r</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"nv\">schematic</span><span class=\"w\"> </span><span class=\"nv\">r</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">            </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Symbol</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">            </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">NotAPart</span>\n\n<span class=\"w\">    </span><span class=\"nv\">goPotentialPart</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">row</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">col</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">len</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">part</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"nv\">cols</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">start</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">At</span><span class=\"w\"> </span><span class=\"nv\">col</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">end</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Before</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">col</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"nv\">len</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"kr\">if</span>\n<span class=\"w\">            </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">any</span><span class=\"w\"> </span><span class=\"nv\">cols</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">sum</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">getAdj</span><span class=\"w\"> </span><span class=\"nv\">row</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nv\">getPart</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">&gt;=</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">        </span><span class=\"kr\">then</span>\n<span class=\"w\">            </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">part</span>\n<span class=\"w\">        </span><span class=\"kr\">else</span>\n<span class=\"w\">            </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">NotAPart</span>\n\n<span class=\"w\">    </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">keepOks</span><span class=\"w\"> </span><span class=\"nv\">potentialParts</span><span class=\"w\"> </span><span class=\"nv\">goPotentialPart</span>\n\n<span class=\"nv\">getNum</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">schematic</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">r</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"nv\">schematic</span><span class=\"w\"> </span><span class=\"nv\">r</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Number</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">r</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">NotANum</span>\n\n<span class=\"nv\">findGears</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Schematic</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">PotentialPart</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Nat</span>\n<span class=\"nv\">findGears</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">schematic</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">potentialParts</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">findPart</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Nat</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Nat</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">PotentialPart</span>\n<span class=\"w\">    </span><span class=\"nv\">findPart</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">r</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"nv\">found</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">            </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">findFirst</span><span class=\"w\"> </span><span class=\"nv\">potentialParts</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">row</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">col</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">len</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                </span><span class=\"nv\">row</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"nv\">r</span><span class=\"w\"> </span><span class=\"nf\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nf\">&gt;=</span><span class=\"w\"> </span><span class=\"nv\">col</span><span class=\"w\"> </span><span class=\"nf\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nf\">&lt;</span><span class=\"w\"> </span><span class=\"nv\">col</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"nv\">len</span>\n<span class=\"w\">        </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">found</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">            </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">part</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">part</span>\n<span class=\"w\">            </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">NotFound</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">crash</span><span class=\"w\"> </span><span class=\"s\">\"no part found\"</span>\n\n<span class=\"w\">    </span><span class=\"nv\">goGear</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">r</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"nv\">adjNums</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">getAdj</span><span class=\"w\"> </span><span class=\"nv\">r</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"nv\">r1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">c1</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">getNum</span><span class=\"w\"> </span><span class=\"nv\">schematic</span><span class=\"w\"> </span><span class=\"nv\">r1</span><span class=\"w\"> </span><span class=\"nv\">c1</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"nv\">adjParts</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nv\">adjNums</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"p\">(</span><span class=\"nv\">r1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">c1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">findPart</span><span class=\"w\"> </span><span class=\"nv\">r1</span><span class=\"w\"> </span><span class=\"nv\">c1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Set</span><span class=\"nf\">.</span><span class=\"nv\">fromList</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Set</span><span class=\"nf\">.</span><span class=\"nv\">toList</span>\n\n<span class=\"w\">        </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">adjParts</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"nv\">p1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">p2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">p1</span><span class=\"nf\">.</span><span class=\"nv\">part</span><span class=\"w\"> </span><span class=\"nf\">*</span><span class=\"w\"> </span><span class=\"nv\">p2</span><span class=\"nf\">.</span><span class=\"nv\">part</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">NotAGear</span>\n\n<span class=\"w\">    </span><span class=\"nv\">goItem</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">r</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">i</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">i</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">            </span><span class=\"kt\">Symbol</span><span class=\"w\"> </span><span class=\"nf\">'*'</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">goGear</span><span class=\"w\"> </span><span class=\"nv\">r</span><span class=\"w\"> </span><span class=\"nv\">c</span>\n<span class=\"w\">            </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">NotAGear</span>\n\n<span class=\"w\">    </span><span class=\"nv\">goRow</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">r</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">row</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">mapWithIndex</span><span class=\"w\"> </span><span class=\"nv\">row</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">goItem</span><span class=\"w\"> </span><span class=\"nv\">r</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nv\">i</span>\n\n<span class=\"w\">    </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">mapWithIndex</span><span class=\"w\"> </span><span class=\"nv\">schematic</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">row</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">r</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">goRow</span><span class=\"w\"> </span><span class=\"nv\">r</span><span class=\"w\"> </span><span class=\"nv\">row</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">join</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">keepOks</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">n</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">n</span>\n\n<span class=\"nv\">splitIntoParts</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Row</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">PotentialPart</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Schematic</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">PotentialPart</span><span class=\"p\">)</span>\n<span class=\"nv\">splitIntoParts</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">l</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">walk</span><span class=\"w\"> </span><span class=\"nv\">l</span><span class=\"w\"> </span><span class=\"p\">([],</span><span class=\"w\"> </span><span class=\"p\">[])</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">(</span><span class=\"nv\">rows</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">allPotentialParts</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">row</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">potentialParts</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">append</span><span class=\"w\"> </span><span class=\"nv\">rows</span><span class=\"w\"> </span><span class=\"nv\">row</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">concat</span><span class=\"w\"> </span><span class=\"nv\">allPotentialParts</span><span class=\"w\"> </span><span class=\"nv\">potentialParts</span><span class=\"p\">)</span>\n\n<span class=\"nv\">parseRow</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Nat</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Row</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">PotentialPart</span><span class=\"p\">)</span>\n<span class=\"nv\">parseRow</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">row</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">s</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">pspace</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">const</span><span class=\"w\"> </span><span class=\"kt\">Space</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">skip</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">string</span><span class=\"w\"> </span><span class=\"s\">\".\"</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nv\">pdigit</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">const</span><span class=\"w\"> </span><span class=\"kt\">Number</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">keep</span><span class=\"w\"> </span><span class=\"nv\">digit</span>\n<span class=\"w\">    </span><span class=\"nv\">psymbol</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">const</span><span class=\"w\"> </span><span class=\"kt\">Symbol</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">keep</span><span class=\"w\"> </span><span class=\"nv\">anyCodeunit</span>\n\n<span class=\"w\">    </span><span class=\"nv\">pitem</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Parser</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"kt\">Item</span>\n<span class=\"w\">    </span><span class=\"nv\">pitem</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">oneOf</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">pspace</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">pdigit</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">psymbol</span><span class=\"p\">]</span>\n\n<span class=\"w\">    </span><span class=\"nv\">findPotentialParts</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">PotentialPart</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Nat</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Row</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">PotentialPart</span>\n<span class=\"w\">    </span><span class=\"nv\">findPotentialParts</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">accum</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">partial</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">items</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"kt\">Ideally</span><span class=\"w\"> </span><span class=\"nv\">we'd</span><span class=\"w\"> </span><span class=\"nv\">match</span><span class=\"w\"> </span><span class=\"nv\">on</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">items</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">partial</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">here</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">but</span><span class=\"w\"> </span><span class=\"nv\">that</span><span class=\"w\"> </span><span class=\"nv\">hits</span><span class=\"w\"> </span><span class=\"nv\">an</span><span class=\"w\"> </span><span class=\"kt\">RC</span><span class=\"w\"> </span><span class=\"nv\">inference</span><span class=\"w\"> </span><span class=\"nv\">bug</span><span class=\"nf\">.</span>\n<span class=\"w\">        </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">items</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">            </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">partial</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">                    </span><span class=\"kt\">None</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">accum</span>\n<span class=\"w\">                    </span><span class=\"kt\">Some</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">col</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">len</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">part</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                        </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">append</span><span class=\"w\"> </span><span class=\"nv\">accum</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">row</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">col</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">len</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">part</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"kt\">Number</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">..</span><span class=\"w\"> </span><span class=\"kr\">as</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">partial</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">                    </span><span class=\"kt\">None</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                        </span><span class=\"nv\">findPotentialParts</span><span class=\"w\"> </span><span class=\"nv\">accum</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Some</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">col</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">len</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">part</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"nv\">rest</span>\n\n<span class=\"w\">                    </span><span class=\"kt\">Some</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">col</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">len</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">part</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                        </span><span class=\"nv\">findPotentialParts</span>\n<span class=\"w\">                            </span><span class=\"nv\">accum</span>\n<span class=\"w\">                            </span><span class=\"p\">(</span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">                            </span><span class=\"p\">(</span><span class=\"kt\">Some</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">col</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">len</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">len</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">part</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">part</span><span class=\"w\"> </span><span class=\"nf\">*</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"w\">                            </span><span class=\"nv\">rest</span>\n\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"nv\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">..</span><span class=\"w\"> </span><span class=\"kr\">as</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">partial</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">                    </span><span class=\"kt\">None</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                        </span><span class=\"nv\">findPotentialParts</span><span class=\"w\"> </span><span class=\"nv\">accum</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">None</span><span class=\"w\"> </span><span class=\"nv\">rest</span>\n\n<span class=\"w\">                    </span><span class=\"kt\">Some</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">col</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">len</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">part</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                        </span><span class=\"nv\">findPotentialParts</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">append</span><span class=\"w\"> </span><span class=\"nv\">accum</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">row</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">col</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">len</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">part</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">None</span><span class=\"w\"> </span><span class=\"nv\">rest</span>\n\n<span class=\"w\">    </span><span class=\"nv\">parsedRow</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">        </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">parseStr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">many</span><span class=\"w\"> </span><span class=\"nv\">pitem</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">s</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">            </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">items</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">items</span>\n<span class=\"w\">            </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">ParsingFailure</span><span class=\"w\"> </span><span class=\"nv\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">|</span><span class=\"w\"> </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">ParsingIncomplete</span><span class=\"w\"> </span><span class=\"nv\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">crash</span><span class=\"w\"> </span><span class=\"s\">\"bad input: '\\(e)'\"</span>\n\n<span class=\"w\">    </span><span class=\"nv\">expect</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">len</span><span class=\"w\"> </span><span class=\"nv\">parsedRow</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">countUtf8Bytes</span><span class=\"w\"> </span><span class=\"nv\">s</span>\n\n<span class=\"w\">    </span><span class=\"nv\">potentialParts</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">findPotentialParts</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"kt\">None</span><span class=\"w\"> </span><span class=\"nv\">parsedRow</span>\n\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"nv\">parsedRow</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">potentialParts</span><span class=\"p\">)</span>\n</code></pre></div>\n</div></div>",
        "id": 405611607,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1701586207
    },
    {
        "content": "<p>I feel like I overcomplicated it, and should totally have used Elias's 2D lib, but... today I really felt like wow, Roc is nice language</p>",
        "id": 405611634,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1701586250
    },
    {
        "content": "<p>Things just worked (language server, dbg, expect) and even though I ran into some compiler bugs this is the best experience I've had writing Roc code since I joined the project</p>",
        "id": 405611671,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1701586296
    },
    {
        "content": "<p>So I decided to solve this in a really strange way. Not sure why...definitely would not recommend this code, but if you want to read a strange solution: <a href=\"https://github.com/bhansconnect/roc-aoc-2023/blob/main/day3.roc\">https://github.com/bhansconnect/roc-aoc-2023/blob/main/day3.roc</a></p>",
        "id": 405612047,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701586592
    },
    {
        "content": "<p>Here is mine: <a href=\"https://github.com/ostcar/aoc2023/blob/main/days/day03.roc\">https://github.com/ostcar/aoc2023/blob/main/days/day03.roc</a></p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Todays Problems</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>If the roc-parser head the function <code>getPosition</code> like <a href=\"https://package.elm-lang.org/packages/elm/parser/latest/Parser#getPosition\">elm does</a>, I would probably used the parser to get the positions of the numbers. <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> Is this something you would add to the roc-parser?</p>\n<p>I had some problems with the different number types of roc. For example, I got the following error:</p>\n<div class=\"codehilite\"><pre><span></span><code>The argument is an anonymous function of type:\n\n    Int Natural -&gt; Bool\n\nBut any needs its 2nd argument to be:\n\n    Int Unsigned32 -&gt; Bool\n</code></pre></div>\n<p>The only solution I found was to convert all numbers in the hole file to I32.</p>\n<p>Another number related bug was <code>integer addition overflowed!</code>.</p>\n<p>It was hard to find the place where this was happening. It was this line:</p>\n<div class=\"codehilite\"><pre><span></span><code>lines = List.range { start: At (number.height - 1), end: At (number.height + 1) }\n</code></pre></div>\n<p><code>number.height</code> had type <code>U32</code> and <code>0 - 1</code> is of cause is an overflow. But I would call the operation a <code>substraction</code> and not a <code>addition</code> as the error message suggested.</p>\n</div></div>",
        "id": 405615818,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1701589992
    },
    {
        "content": "<p>This is <a href=\"https://github.com/lukewilliamboswell/aoc/blob/main/src/S2023/D03.roc\">my solution for Day 3</a>. That was a little hairy in some parts. </p>\n<p>I also feel like Roc is running really great. I haven't ran into any compiler bugs yet. <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>",
        "id": 405621674,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1701594170
    },
    {
        "content": "<p>I pretty much wrote the whole program using <code>roc check</code> and then <code>roc test</code> occasionally. When I finally wired it all together and it compiled, there were are couple of easy to debug logic bugs ( <code>dbg</code> <span aria-label=\"hearts\" class=\"emoji emoji-2665\" role=\"img\" title=\"hearts\">:hearts:</span>) and then it Just Worked™ which was super fun.</p>",
        "id": 405621704,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1701594185
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>speed comparison between dev and --optimize</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>$ roc dev src/cli.roc -- 2023 3<br>\n2023 Day 3: Gear Ratios completed in 144 ms</p>\n<hr>\n<p>Part 1 took 75 ms<br>\nThe sum of all of the part numbers in the engine schematic is 507214</p>\n<hr>\n<p>Part 2 took 69 ms<br>\nThe the sum of all of the gear ratios in the engine schematic is 72553319</p>\n<hr>\n<p>$ roc run --optimize src/cli.roc -- 2023 3<br>\n2023 Day 3: Gear Ratios completed in 15 ms</p>\n<hr>\n<p>Part 1 took 10 ms<br>\nThe sum of all of the part numbers in the engine schematic is 507214</p>\n<hr>\n<p>Part 2 took 5 ms<br>\nThe the sum of all of the gear ratios in the engine schematic is 72553319</p>\n</div></div>",
        "id": 405622748,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1701594549
    },
    {
        "content": "<p>Still on P1... I bumped into several compiler bugs.. Then I finally got the right answer for the sample data! But it doesn't work for the input: <a href=\"https://github.com/lindskogen/advent-of-code-2023/blob/main/day03/main.roc\">https://github.com/lindskogen/advent-of-code-2023/blob/main/day03/main.roc</a></p>",
        "id": 405630903,
        "sender_full_name": "Johan Lindskogen",
        "timestamp": 1701598033
    },
    {
        "content": "<p>Huh, things run a lot faster if you put them into main instead of at the top level.. weird.</p>\n<p>At least I'm no longer painfully, like 200x compared to Luke, slow (but still very slow)</p>\n<p><a href=\"https://gitlab.com/arkandos/aoc/-/blob/2023/solutions/day3.roc\">https://gitlab.com/arkandos/aoc/-/blob/2023/solutions/day3.roc</a></p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>timings</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"c1\"># With part1, part2 at the top level:</span>\n›<span class=\"w\"> </span><span class=\"nb\">time</span><span class=\"w\"> </span>./solutions/day3\nreal<span class=\"w\">        </span>0m1.744s\nuser<span class=\"w\">        </span>0m1.702s\nsys<span class=\"w\">         </span>0m0.043s\n\n<span class=\"c1\"># With both definitions moved into main:</span>\nreal<span class=\"w\">        </span>0m0.232s\nuser<span class=\"w\">        </span>0m0.229s\nsys<span class=\"w\">         </span>0m0.005s\n</code></pre></div>\n<p>These were debug builds, using <code>--optimize</code> the difference is still there, but less so (0.307s vs 0.045s real time)</p>\n</div></div>",
        "id": 405660016,
        "sender_full_name": "joshi",
        "timestamp": 1701605098
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"630752\">joshi</span> <a href=\"#narrow/stream/358903-Advent-of-Code/topic/2023.20Day.203/near/405660016\">said</a>:</p>\n<blockquote>\n<p>Huh, things run a lot faster if you put them into main instead of at the top level.. weird.</p>\n</blockquote>\n<p>I think you're the first person to notice this in practice! <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> </p>\n<p>this is currently the case because today the way we compile top-level values is essentially that we turn them into functions, and then call those functions every time you reference the value. There's a plan to instead evaluate them at compile time (at which point there will be no performance difference to using them this way) but we haven't started on that project yet. <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 405660608,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701605516
    },
    {
        "content": "<p>Well that makes sense that parsing the same file thousands of times might take a second or two <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>\n<p>But so far it's great! Roc does almost everything I ever wanted in a programming language, and everyone here seems super friendly and welcoming! <span aria-label=\"smiling face\" class=\"emoji emoji-263a\" role=\"img\" title=\"smiling face\">:smiling_face:</span></p>",
        "id": 405661399,
        "sender_full_name": "joshi",
        "timestamp": 1701606143
    },
    {
        "content": "<p>I wrote all of the part 1 logic first and then moved onto parsing, which was an interesting change. I know it's not optimal (in terms of performance and dev speed), but it just feels so nice to parse the file to a structure and then just operate on that.<br>\nA classic off-by-one error got me stumped for a moment, because it only came up in the real input, but I managed to debug it. I've also spent some time trying to implement Eq for a custom type, but I managed to figure out how to do it by looking at the standard library. <br>\nCode: <a href=\"https://github.com/LoipesMas/roc-aoc2023/blob/main/3/main.roc\">https://github.com/LoipesMas/roc-aoc2023/blob/main/3/main.roc</a><br>\n~30ms for part2, could probably be greatly improved with partitioning (instead of checking every <code>*</code> with every number...)</p>",
        "id": 405667885,
        "sender_full_name": "LoipesMas",
        "timestamp": 1701611730
    },
    {
        "content": "<p>Not sure if anyone else does this, but for working on AOC instead of using <code>roc check</code> or <code>roc test</code>, I now just change my main function to:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">main</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"nx\">dbg</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">part1</span><span class=\"w\"> </span><span class=\"nx\">p1Sample</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nx\">Stout</span><span class=\"p\">.</span><span class=\"nx\">line</span><span class=\"w\"> </span><span class=\"s\">\"done\"</span>\n</code></pre></div>\n<p>Enables me to just run the code and look at whatever intermediate value. Really nice repl like loop. Just see whatever value my current function generates and then add the next pipeline stage to my current function.</p>\n<p>While doing things, I temporarily comment out the type signature for <code>part1</code> so that it can return anything.</p>\n<p>I probably should set this up with <code>entr</code> so it autoruns on file change.</p>",
        "id": 405673752,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701616505
    },
    {
        "content": "<p>Here's <a href=\"https://github.com/hypirion/advent-of-code/blob/master/2023/day3.roc\">my solution for Day 3</a>. Pain points today was Nat underflowing (it said overflow, which confused me for a second), and me using a previous state instead of updating the current one. It's a variant of the shadowing pain, kinda related to the threading issues already mentioned in <a href=\"#narrow/stream/304641-ideas/topic/Shadowing.20.26.20Redeclaration\">#ideas &gt; Shadowing &amp; Redeclaration</a> </p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Implementation trick</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>It's a bit easier to work with objects and bounding boxes than working over a 2D grid, because you don't have to deal with deltas and grid bounds checking.</p>\n</div></div>",
        "id": 405674911,
        "sender_full_name": "Jean Niklas L'orange",
        "timestamp": 1701617396
    },
    {
        "content": "<p><a href=\"https://gist.github.com/mulias/b07e012ced92406f59cc2548d0f01323\">Day 3, this one has a performance bug that I'll talk about below</a><br>\n<a href=\"https://gist.github.com/mulias/f217e7461a2b847b1110d27e6c6191a1\">Day 3, with a workaround</a></p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Performance Issue Details</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>I used a set of <code>{x: Nat, y: Nat}</code> indices to solve for adjacency. Something about this is hella slow. There's a benchmark in the gist, but the implementation using sets takes ~6 seconds to run. If I try  running a build compiled with <code>--optimize</code> then  it hangs forever while using 100% of a CPU core.</p>\n<p>To troubleshoot I did a super naive swap, changing out the sets for lists, used concat instead of union, and searching through the two lists to find the intersection. That runs in ~2 seconds unoptimized and ~150ms optimized.</p>\n<p>There's some inefficiency in my code but the set implementation being so much slower seems like a bug to me.</p>\n</div></div>",
        "id": 405676155,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1701618612
    },
    {
        "content": "<p>Interesting. I'll have to look at that set issue. We have something similar to anal::flat_hash_set, so it should generally be pretty fast. Though depending on the size wouldn't be surprised if skipping hashing and linearly scanning ends up being faster. But yeah, probably a bug.</p>",
        "id": 405677428,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701619569
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"586417\">Elias Mulhall</span> <a href=\"#narrow/stream/358903-Advent-of-Code/topic/2023.20Day.203/near/405676155\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://gist.github.com/mulias/b07e012ced92406f59cc2548d0f01323\">Day 3, this one has a performance bug that I'll talk about below</a><br>\n<a href=\"https://gist.github.com/mulias/f217e7461a2b847b1110d27e6c6191a1\">Day 3, with a workaround</a></p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Performance Issue Details</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>I used a set of <code>{x: Nat, y: Nat}</code> indices to solve for adjacency. Something about this is hella slow. There's a benchmark in the gist, but the implementation using sets takes ~6 seconds to run. If I try  running a build compiled with <code>--optimize</code> then  it hangs forever while using 100% of a CPU core.</p>\n<p>To troubleshoot I did a super naive swap, changing out the sets for lists, used concat instead of union, and searching through the two lists to find the intersection. That runs in ~2 seconds unoptimized and ~150ms optimized.</p>\n<p>There's some inefficiency in my code but the set implementation being so much slower seems like a bug to me.</p>\n<p></div></div><br>\n</p>\n</blockquote>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Poor performance here too at 33s</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>I'm running <code>Set.fromList</code> and <code>Set.toList</code> in several places. It could be the bug, or just my code isn't performant. I'm not trying to learn about performance at this point in my Roc learning journey.</p>\n</div></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>And here's my code...</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>Happy to have finally solved this one! It took me awhile, but I learned a bunch on the way.</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">app</span><span class=\"w\"> </span><span class=\"s\">\"hello\"</span>\n<span class=\"w\">  </span><span class=\"nv\">packages</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">pf</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/roc-lang/basic-cli/releases/download/0.7.0/bkGby8jb0tmZYsy2hg1E_B2QrCgcSTxdUlHtETwm5m4.tar.br\"</span>\n<span class=\"w\">    </span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">parser</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/lukewilliamboswell/roc-parser/releases/download/0.3.0/-e3ebWWmlFPfe9fYrr2z1urfslzygbtQQsl69iH1qzQ.tar.br\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"nv\">imports</span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"nv\">pf</span><span class=\"nf\">.</span><span class=\"kt\">Stdout</span>\n<span class=\"w\">    </span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">pf</span><span class=\"nf\">.</span><span class=\"kt\">Task</span>\n<span class=\"w\">    </span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"./day3-input.txt\"</span><span class=\"w\"> </span><span class=\"kr\">as</span><span class=\"w\"> </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span>\n<span class=\"w\">    </span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">parser</span><span class=\"nf\">.</span><span class=\"kt\">Core</span><span class=\"nf\">.</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">Parser</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">const</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">keep</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">map</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">oneOrMore</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">parser</span><span class=\"nf\">.</span><span class=\"kt\">String</span><span class=\"nf\">.</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">anyCodeunit</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">digits</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">oneOf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">parseStr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">string</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">]</span>\n<span class=\"w\">  </span><span class=\"nv\">provides</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nv\">to</span><span class=\"w\"> </span><span class=\"nv\">pf</span>\n\n\n<span class=\"kr\">main </span><span class=\"nf\">=</span>\n<span class=\"w\">  </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"s\">\"The total sum is \\(part1 input)\"</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">await</span>\n<span class=\"w\">  </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"s\">\"The gear ratios are \\(part2 input)\"</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">await</span>\n<span class=\"w\">  </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">ok</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n\n<span class=\"nv\">part1</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">schematic</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">  </span><span class=\"nv\">width</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"w\"> </span><span class=\"nv\">schematic</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">first</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">withDefault</span><span class=\"w\"> </span><span class=\"s\">\"\"</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">countGraphemes</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">add</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"kt\">The</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"nv\">is</span><span class=\"w\"> </span><span class=\"nv\">for</span><span class=\"w\"> </span><span class=\"nv\">the</span><span class=\"w\"> </span><span class=\"kt\">Newline</span><span class=\"w\"> </span><span class=\"nv\">character</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toI16</span>\n\n<span class=\"w\">  </span><span class=\"nv\">identifyParts</span><span class=\"w\"> </span><span class=\"nv\">schematic</span>\n<span class=\"w\">  </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">appendAdjacentSymbol</span><span class=\"w\"> </span><span class=\"nv\">width</span>\n<span class=\"w\">  </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">keepIf</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">cell</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">cell</span><span class=\"nf\">.</span><span class=\"kr\">type</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">                            </span><span class=\"kt\">Correct</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">true</span>\n<span class=\"w\">                            </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">false</span>\n<span class=\"w\">  </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Set</span><span class=\"nf\">.</span><span class=\"nv\">fromList</span>\n<span class=\"w\">  </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Set</span><span class=\"nf\">.</span><span class=\"nv\">toList</span>\n<span class=\"w\">  </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">part</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">part</span><span class=\"nf\">.</span><span class=\"nv\">cell</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">                          </span><span class=\"kt\">Part</span><span class=\"w\"> </span><span class=\"nv\">num</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">withDefault</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toU32</span><span class=\"w\"> </span><span class=\"nv\">num</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">                          </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">  </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">sum</span>\n<span class=\"w\">  </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toStr</span>\n\n<span class=\"nv\">expect</span><span class=\"w\"> </span><span class=\"nv\">part1</span><span class=\"w\"> </span><span class=\"nv\">exampleInput</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"s\">\"4361\"</span>\n\n<span class=\"nv\">part2</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">schematic</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">  </span><span class=\"nv\">width</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"w\"> </span><span class=\"nv\">schematic</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">first</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">withDefault</span><span class=\"w\"> </span><span class=\"s\">\"\"</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">countGraphemes</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">add</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"kt\">The</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"nv\">is</span><span class=\"w\"> </span><span class=\"nv\">for</span><span class=\"w\"> </span><span class=\"nv\">the</span><span class=\"w\"> </span><span class=\"kt\">Newline</span><span class=\"w\"> </span><span class=\"nv\">character</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toI16</span>\n\n<span class=\"w\">  </span><span class=\"nv\">identifyParts</span><span class=\"w\"> </span><span class=\"nv\">schematic</span>\n<span class=\"w\">  </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">appendAdjacentSymbol</span><span class=\"w\"> </span><span class=\"nv\">width</span>\n<span class=\"w\">  </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">keepIf</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">cell</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">cell</span><span class=\"nf\">.</span><span class=\"kr\">type</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">                          </span><span class=\"kt\">Gear</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">true</span>\n<span class=\"w\">                          </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">false</span>\n<span class=\"w\">  </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Set</span><span class=\"nf\">.</span><span class=\"nv\">fromList</span>\n<span class=\"w\">  </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Set</span><span class=\"nf\">.</span><span class=\"nv\">toList</span>\n<span class=\"w\">  </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">symbol</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">symbol</span><span class=\"nf\">.</span><span class=\"kr\">type</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">                        </span><span class=\"kt\">Gear</span><span class=\"w\"> </span><span class=\"nv\">ratio</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">ratio</span>\n<span class=\"w\">                        </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">  </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">sum</span>\n<span class=\"w\">  </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toStr</span>\n\n\n<span class=\"nv\">element</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Parser</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">CellContent</span>\n<span class=\"nv\">element</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">  </span><span class=\"nv\">oneOf</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">    </span><span class=\"nv\">digits</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">d</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Part</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toStr</span><span class=\"w\"> </span><span class=\"nv\">d</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"nv\">string</span><span class=\"w\"> </span><span class=\"s\">\".\"</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Separator</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nv\">string</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">NewLine</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nv\">string</span><span class=\"w\"> </span><span class=\"s\">\"*\"</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Symbol</span><span class=\"w\"> </span><span class=\"kt\">PossibleGear</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nv\">anyCodeunit</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Symbol</span><span class=\"w\"> </span><span class=\"kt\">NotAGear</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"p\">]</span>\n\n<span class=\"nv\">expect</span><span class=\"w\"> </span><span class=\"nv\">parseStr</span><span class=\"w\"> </span><span class=\"nv\">element</span><span class=\"w\"> </span><span class=\"s\">\"467\"</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Part</span><span class=\"w\"> </span><span class=\"s\">\"467\"</span><span class=\"p\">)</span>\n<span class=\"nv\">expect</span><span class=\"w\"> </span><span class=\"nv\">parseStr</span><span class=\"w\"> </span><span class=\"nv\">element</span><span class=\"w\"> </span><span class=\"s\">\".\"</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"kt\">Separator</span>\n\n<span class=\"nv\">schematicParser</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Parser</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">CellContent</span><span class=\"p\">)</span>\n<span class=\"nv\">schematicParser</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">  </span><span class=\"nv\">const</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"nv\">i</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">i</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">keep</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">oneOrMore</span><span class=\"w\"> </span><span class=\"nv\">element</span><span class=\"p\">)</span>\n\n<span class=\"nv\">expect</span>\n<span class=\"w\">  </span><span class=\"nv\">parseStr</span><span class=\"w\"> </span><span class=\"nv\">schematicParser</span><span class=\"w\"> </span><span class=\"nv\">smallInput</span>\n<span class=\"w\">  </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">    </span><span class=\"kt\">Part</span><span class=\"w\"> </span><span class=\"s\">\"11\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"kt\">Separator</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"kt\">Part</span><span class=\"w\"> </span><span class=\"s\">\"2\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"kt\">NewLine</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"kt\">Symbol</span><span class=\"w\"> </span><span class=\"kt\">NotAGear</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"kt\">Separator</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"kt\">Separator</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"kt\">Separator</span>\n<span class=\"w\">  </span><span class=\"p\">]</span>\n\n<span class=\"nv\">identifyParts</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">schematic</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">  </span><span class=\"nv\">parseStr</span><span class=\"w\"> </span><span class=\"nv\">schematicParser</span><span class=\"w\"> </span><span class=\"nv\">schematic</span>\n<span class=\"w\">  </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">withDefault</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n<span class=\"w\">  </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">walkWithIndex</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">cell</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">cell</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">          </span><span class=\"kt\">Part</span><span class=\"w\"> </span><span class=\"nv\">num</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">concat</span>\n<span class=\"w\">              </span><span class=\"nv\">state</span>\n<span class=\"w\">              </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">repeat</span>\n<span class=\"w\">                </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">id</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">index</span>\n<span class=\"w\">                </span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">cell</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">cell</span>\n<span class=\"w\">                </span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kr\">type</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Unknown</span>\n<span class=\"w\">                </span><span class=\"p\">}</span>\n<span class=\"w\">                </span><span class=\"p\">(</span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">countGraphemes</span><span class=\"w\"> </span><span class=\"nv\">num</span><span class=\"p\">))</span>\n\n<span class=\"w\">          </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">append</span>\n<span class=\"w\">                  </span><span class=\"nv\">state</span>\n<span class=\"w\">                  </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">id</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">index</span>\n<span class=\"w\">                  </span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">cell</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">cell</span>\n<span class=\"w\">                  </span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kr\">type</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Unknown</span>\n<span class=\"w\">                  </span><span class=\"p\">}</span>\n\n<span class=\"nv\">expect</span>\n<span class=\"w\">  </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">identifyParts</span><span class=\"w\"> </span><span class=\"nv\">smallInput</span>\n<span class=\"w\">  </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">cell</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Part</span><span class=\"w\"> </span><span class=\"s\">\"11\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">id</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kr\">type</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Unknown</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">cell</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Part</span><span class=\"w\"> </span><span class=\"s\">\"11\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">id</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kr\">type</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Unknown</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">cell</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Separator</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">id</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kr\">type</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Unknown</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">cell</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Part</span><span class=\"w\"> </span><span class=\"s\">\"2\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">id</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kr\">type</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Unknown</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">cell</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">NewLine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">id</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kr\">type</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Unknown</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">cell</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Symbol</span><span class=\"w\"> </span><span class=\"kt\">NotAGear</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">id</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kr\">type</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Unknown</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">cell</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Separator</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">id</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kr\">type</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Unknown</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">cell</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Separator</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">id</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kr\">type</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Unknown</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">cell</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Separator</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">id</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kr\">type</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Unknown</span><span class=\"w\"> </span><span class=\"p\">}]</span>\n\n<span class=\"kt\">CellType</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Unknown</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Correct</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Extra</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Gear</span><span class=\"w\"> </span><span class=\"kt\">U32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">NotAPart</span><span class=\"p\">]</span>\n<span class=\"kt\">CellContent</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">NewLine</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"kt\">Part</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"kt\">Separator</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"kt\">Symbol</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">PossibleGear</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">NotAGear</span><span class=\"p\">],</span>\n<span class=\"w\">  </span><span class=\"p\">]</span>\n\n<span class=\"nv\">appendAdjacentSymbol</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"nv\">cell</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">CellContent</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"kr\">type</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">CellType</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"nv\">id</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Nat</span><span class=\"p\">,</span>\n<span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">I16</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"nv\">cell</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">CellContent</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"kr\">type</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">CellType</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"nv\">id</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Nat</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n<span class=\"nv\">appendAdjacentSymbol</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">identifiedParts</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">width</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">  </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nv\">width</span><span class=\"w\"> </span><span class=\"nv\">should</span><span class=\"w\"> </span><span class=\"nv\">include</span><span class=\"w\"> </span><span class=\"nv\">the</span><span class=\"w\"> </span><span class=\"nv\">newline</span>\n<span class=\"w\">  </span><span class=\"nv\">adjacentCellIndexes</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">    </span><span class=\"nf\">-</span><span class=\"nv\">width</span><span class=\"w\"> </span><span class=\"nf\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nf\">-</span><span class=\"nv\">width</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nf\">-</span><span class=\"nv\">width</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nf\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nv\">width</span><span class=\"w\"> </span><span class=\"nf\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nv\">width</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nv\">width</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">  </span><span class=\"p\">]</span>\n\n<span class=\"w\">  </span><span class=\"kt\">State</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">      </span><span class=\"nv\">cell</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">CellContent</span><span class=\"p\">,</span>\n<span class=\"w\">      </span><span class=\"kr\">type</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">CellType</span><span class=\"p\">,</span>\n<span class=\"w\">      </span><span class=\"nv\">id</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Nat</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"kt\">Cell</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">      </span><span class=\"nv\">cell</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">CellContent</span><span class=\"p\">,</span>\n<span class=\"w\">      </span><span class=\"kr\">type</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">CellType</span><span class=\"p\">,</span>\n<span class=\"w\">      </span><span class=\"nv\">id</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Nat</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">  </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">State</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Cell</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Nat</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">State</span>\n<span class=\"w\">  </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">cell</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">cell</span><span class=\"nf\">.</span><span class=\"nv\">cell</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">      </span><span class=\"kt\">Part</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"nv\">adjacentSymbols</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">          </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nv\">adjacentCellIndexes</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">relativeIndex</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">add</span><span class=\"w\"> </span><span class=\"nv\">relativeIndex</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toI16</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"p\">))</span>\n<span class=\"w\">          </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">keepIf</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">absoluteIndex</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">absoluteIndex</span><span class=\"w\"> </span><span class=\"nf\">&gt;=</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">          </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toNat</span>\n<span class=\"w\">          </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">keepOks</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">absoluteIndex</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">get</span><span class=\"w\"> </span><span class=\"nv\">identifiedParts</span><span class=\"w\"> </span><span class=\"nv\">absoluteIndex</span>\n<span class=\"w\">          </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">keepIf</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">adjacentCell</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">adjacentCell</span><span class=\"nf\">.</span><span class=\"nv\">cell</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">                  </span><span class=\"kt\">Symbol</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">true</span>\n<span class=\"w\">                  </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">false</span>\n\n<span class=\"w\">        </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">append</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">          </span><span class=\"nv\">cell</span><span class=\"w\"> </span><span class=\"err\">&amp;</span>\n<span class=\"w\">          </span><span class=\"kr\">type</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">isEmpty</span><span class=\"w\"> </span><span class=\"nv\">adjacentSymbols</span><span class=\"w\"> </span><span class=\"kr\">then</span><span class=\"w\"> </span><span class=\"kt\">Extra</span><span class=\"w\"> </span><span class=\"kr\">else</span><span class=\"w\"> </span><span class=\"kt\">Correct</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">      </span><span class=\"kt\">Symbol</span><span class=\"w\"> </span><span class=\"nv\">symbolType</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">symbolType</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">          </span><span class=\"kt\">PossibleGear</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"nv\">adjacentParts</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">              </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nv\">adjacentCellIndexes</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">relativeIndex</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">add</span><span class=\"w\"> </span><span class=\"nv\">relativeIndex</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toI16</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"p\">))</span>\n<span class=\"w\">              </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">keepIf</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">absoluteIndex</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">absoluteIndex</span><span class=\"w\"> </span><span class=\"nf\">&gt;=</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">              </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toNat</span>\n<span class=\"w\">              </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">keepOks</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">absoluteIndex</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">get</span><span class=\"w\"> </span><span class=\"nv\">identifiedParts</span><span class=\"w\"> </span><span class=\"nv\">absoluteIndex</span>\n<span class=\"w\">              </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">keepIf</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">adjacentCell</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">adjacentCell</span><span class=\"nf\">.</span><span class=\"nv\">cell</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">                      </span><span class=\"kt\">Part</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">true</span>\n<span class=\"w\">                      </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">false</span>\n<span class=\"w\">              </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Set</span><span class=\"nf\">.</span><span class=\"nv\">fromList</span>\n<span class=\"w\">              </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Set</span><span class=\"nf\">.</span><span class=\"nv\">toList</span>\n\n<span class=\"w\">            </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">len</span><span class=\"w\"> </span><span class=\"nv\">adjacentParts</span><span class=\"w\"> </span><span class=\"nf\">&gt;=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"w\">              </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">debug</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"s\">\"index\"</span>\n<span class=\"w\">              </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">debug</span><span class=\"w\"> </span><span class=\"nv\">cell</span><span class=\"w\"> </span><span class=\"s\">\"cell\"</span>\n<span class=\"w\">              </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">debug</span><span class=\"w\"> </span><span class=\"nv\">adjacentParts</span><span class=\"w\"> </span><span class=\"s\">\"adjacentParts\"</span>\n\n<span class=\"w\">              </span><span class=\"nv\">gearRatio</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">                </span><span class=\"nv\">adjacentParts</span>\n<span class=\"w\">                </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Set</span><span class=\"nf\">.</span><span class=\"nv\">fromList</span>\n<span class=\"w\">                </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Set</span><span class=\"nf\">.</span><span class=\"nv\">toList</span>\n<span class=\"w\">                </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">adjacentCell</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">adjacentCell</span><span class=\"nf\">.</span><span class=\"nv\">cell</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">                                                </span><span class=\"kt\">Part</span><span class=\"w\"> </span><span class=\"nv\">num</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">withDefault</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toU32</span><span class=\"w\"> </span><span class=\"nv\">num</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">                                                </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">                </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">product</span>\n\n<span class=\"w\">              </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">append</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">cell</span><span class=\"w\"> </span><span class=\"err\">&amp;</span><span class=\"w\"> </span><span class=\"kr\">type</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Gear</span><span class=\"w\"> </span><span class=\"nv\">gearRatio</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">            </span><span class=\"kr\">else</span>\n<span class=\"w\">              </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">append</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">cell</span><span class=\"w\"> </span><span class=\"err\">&amp;</span><span class=\"w\"> </span><span class=\"kr\">type</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">NotAPart</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"w\">          </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">append</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">cell</span><span class=\"w\"> </span><span class=\"err\">&amp;</span><span class=\"w\"> </span><span class=\"kr\">type</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">NotAPart</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"w\">      </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">append</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">cell</span><span class=\"w\"> </span><span class=\"err\">&amp;</span><span class=\"w\"> </span><span class=\"kr\">type</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">NotAPart</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"w\">  </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">walkWithIndex</span><span class=\"w\"> </span><span class=\"nv\">identifiedParts</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"nv\">x</span>\n\n<span class=\"nv\">expect</span><span class=\"w\"> </span><span class=\"nv\">identifyParts</span><span class=\"w\"> </span><span class=\"nv\">smallInput</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">appendAdjacentSymbol</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">cell</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Part</span><span class=\"w\"> </span><span class=\"s\">\"11\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">id</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kr\">type</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Correct</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">cell</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Part</span><span class=\"w\"> </span><span class=\"s\">\"11\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">id</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kr\">type</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Correct</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">cell</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Separator</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">id</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kr\">type</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">NotAPart</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">cell</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Part</span><span class=\"w\"> </span><span class=\"s\">\"2\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">id</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kr\">type</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Extra</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">cell</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">NewLine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">id</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kr\">type</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">NotAPart</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">cell</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Symbol</span><span class=\"w\"> </span><span class=\"kt\">NotAGear</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">id</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kr\">type</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">NotAPart</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">cell</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Separator</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">id</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kr\">type</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">NotAPart</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">cell</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Separator</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">id</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kr\">type</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">NotAPart</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">cell</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Separator</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">id</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kr\">type</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">NotAPart</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n\n\n<span class=\"nv\">smallInput</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">  </span><span class=\"s\">\"\"\"</span>\n<span class=\"s\">  11.2</span>\n<span class=\"s\">  $...</span>\n<span class=\"s\">  \"\"\"</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">trim</span>\n\n<span class=\"nv\">smallGearInput</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">  </span><span class=\"s\">\"\"\"</span>\n<span class=\"s\">  11.2</span>\n<span class=\"s\">  $.*.</span>\n<span class=\"s\">  \"\"\"</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">trim</span>\n\n<span class=\"nv\">exampleInput</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">  </span><span class=\"s\">\"\"\"</span>\n<span class=\"s\">  467..114..</span>\n<span class=\"s\">  ...*......</span>\n<span class=\"s\">  ..35..633.</span>\n<span class=\"s\">  ......#...</span>\n<span class=\"s\">  617*......</span>\n<span class=\"s\">  .....+.58.</span>\n<span class=\"s\">  ..592.....</span>\n<span class=\"s\">  ......755.</span>\n<span class=\"s\">  ...$.*....</span>\n<span class=\"s\">  .664.598..</span>\n<span class=\"s\">  \"\"\"</span>\n<span class=\"w\">  </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">trim</span>\n\n\n<span class=\"nv\">debug</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">v</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">ctx</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">  </span><span class=\"nv\">dbg</span><span class=\"w\"> </span><span class=\"nv\">ctx</span>\n<span class=\"w\">  </span><span class=\"nv\">dbg</span><span class=\"w\"> </span><span class=\"nv\">v</span>\n<span class=\"w\">  </span><span class=\"nv\">v</span>\n</code></pre></div>\n</div></div>",
        "id": 405702211,
        "sender_full_name": "Jason Hobbs",
        "timestamp": 1701641035
    },
    {
        "content": "<p><code>Set.toList</code> definitely is not fast currently, but I wouldn't expect to to totally ruin perf. Though I guess it depends on the size of the lists</p>\n<p><a href=\"https://github.com/roc-lang/roc/blob/a187d141bd881e3515133ee484fb8ffa1ba790e8/crates/compiler/builtins/roc/Dict.roc#L194\">https://github.com/roc-lang/roc/blob/a187d141bd881e3515133ee484fb8ffa1ba790e8/crates/compiler/builtins/roc/Dict.roc#L194</a></p>",
        "id": 405702570,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701641324
    },
    {
        "content": "<p>Alrighty, here's my day 3: <a href=\"https://gitlab.com/AsbjornOlling/aoc2023/-/blob/main/03/main.roc\">https://gitlab.com/AsbjornOlling/aoc2023/-/blob/main/03/main.roc</a></p>\n<p>Had to do a bit of a refactor for part2, but managed to reuse almost all of my code- and stuff just worked once <code>roc dev</code> stopped politely informing me that I was wrong about something.</p>\n<p>Took some typing, but otherwise pretty painless day.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>part2 spoilers</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>I spent very little on parsing today. Just made a big ol' <code>List (List U8)</code> and went from there.<br>\nMy part-two refactor was basically just turning it into a <code>List (List ((Nat, Nat), U8))</code> instead, so I could track of which specific neighbors a number has. (the <code>(Nat, Nat)</code> tuple is the coords of a given char, but really it's just a unique identifier).</p>\n</div></div>\n<p>Probably not as performant as it could be, but hey. I'm happy with this.</p>",
        "id": 405702586,
        "sender_full_name": "Asbjørn Olling",
        "timestamp": 1701641335
    },
    {
        "content": "<p>Really bad performance for my solutions today (takes about 10s to run both parts <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span>) <a href=\"https://github.com/keeslinp/AoC2023/blob/main/day3.roc\">https://github.com/keeslinp/AoC2023/blob/main/day3.roc</a> still got both answers first try though which just shows how good the type system + expect workflow works.</p>\n<p>I think I'm really starting to feel the pain of not having syntax highlighting setup correctly for my editor (I tried getting the treesitter stuff running but helix doesn't seem to actually display it, idk why). I kept getting a little lost, but thankfully hover from the LSP was super helpful trying to figure out how nested my lists were at any given point. Maybe a roc formatter would help me, I don't really know the best way to format things yet.</p>\n<p>Also my solution crashes if I turn on optimize so maybe the performance wouldn't be so bad if it were on</p>",
        "id": 405704401,
        "sender_full_name": "Pearce Keesling",
        "timestamp": 1701642913
    },
    {
        "content": "<p><code>roc format</code> will format things for you! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 405704638,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701643111
    },
    {
        "content": "<p>For helix, make sure you also copy the queries over</p>",
        "id": 405705129,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701643505
    },
    {
        "content": "<p>So add the grammar, build it, copy the queries so helix knows about them</p>",
        "id": 405705156,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701643527
    },
    {
        "content": "<p>Here is also my solution:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>code</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">app</span><span class=\"w\"> </span><span class=\"s\">\"AoC\"</span>\n<span class=\"w\">    </span><span class=\"nv\">packages</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">pf</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/roc-lang/basic-cli/releases/download/0.7.0/bkGby8jb0tmZYsy2hg1E_B2QrCgcSTxdUlHtETwm5m4.tar.br\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"nv\">imports</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">pf</span><span class=\"nf\">.</span><span class=\"kt\">Stdout</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">pf</span><span class=\"nf\">.</span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"s\">\"day-3-input.txt\"</span><span class=\"w\"> </span><span class=\"kr\">as</span><span class=\"w\"> </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"nv\">provides</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nv\">to</span><span class=\"w\"> </span><span class=\"nv\">pf</span>\n\n<span class=\"kr\">main </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">*</span>\n<span class=\"kr\">main </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">dbg</span>\n<span class=\"w\">        </span><span class=\"kt\">P1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">part1</span><span class=\"w\"> </span><span class=\"nv\">input</span><span class=\"p\">)</span>\n\n<span class=\"w\">    </span><span class=\"nv\">dbg</span>\n<span class=\"w\">        </span><span class=\"kt\">P2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">part2</span><span class=\"w\"> </span><span class=\"nv\">input</span><span class=\"p\">)</span>\n\n<span class=\"w\">    </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"s\">\"done\"</span>\n\n<span class=\"nv\">part1</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">s</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toUtf8</span><span class=\"w\"> </span><span class=\"nv\">str</span>\n<span class=\"w\">    </span><span class=\"nv\">lineLength</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">        </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">findFirstIndex</span><span class=\"w\"> </span><span class=\"nv\">s</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"nf\">'\\</span><span class=\"nv\">n'</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">unwrap</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">add</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n\n<span class=\"w\">    </span><span class=\"nv\">startState</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nv\">row</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">sum</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">currentNumber</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">shouldAdd</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">false</span><span class=\"p\">,</span>\n\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"nv\">s</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">walkWithIndex</span><span class=\"w\"> </span><span class=\"nv\">startState</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">elem</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">sumPartNumbers</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"nv\">elem</span><span class=\"w\"> </span><span class=\"nv\">s</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"nv\">lineLength</span>\n\n<span class=\"nv\">part2</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">s</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toUtf8</span><span class=\"w\"> </span><span class=\"nv\">str</span>\n<span class=\"w\">    </span><span class=\"nv\">lineLength</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">        </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">findFirstIndex</span><span class=\"w\"> </span><span class=\"nv\">s</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"nf\">'\\</span><span class=\"nv\">n'</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">unwrap</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">add</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n\n<span class=\"w\">    </span><span class=\"nv\">startState</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">walkWithIndex</span><span class=\"w\"> </span><span class=\"nv\">s</span><span class=\"w\"> </span><span class=\"nv\">startState</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">elem</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">sumGearRatio</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"nv\">elem</span><span class=\"w\"> </span><span class=\"nv\">s</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"nv\">lineLength</span>\n\n<span class=\"nv\">sumGearRatio</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">elem</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">inp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">lineLength</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">elem</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"nf\">'*'</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"w\">        </span><span class=\"nv\">nearNumbers</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">getNumbersNear</span><span class=\"w\"> </span><span class=\"nv\">inp</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"nv\">lineLength</span>\n<span class=\"w\">        </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">len</span><span class=\"w\"> </span><span class=\"nv\">nearNumbers</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"w\">            </span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">product</span><span class=\"w\"> </span><span class=\"nv\">nearNumbers</span>\n<span class=\"w\">        </span><span class=\"kr\">else</span>\n<span class=\"w\">            </span><span class=\"nv\">state</span>\n<span class=\"w\">    </span><span class=\"kr\">else</span>\n<span class=\"w\">        </span><span class=\"nv\">state</span>\n\n<span class=\"nv\">getNumbersNear</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">list</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">lineLength</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">getToRight</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">pos</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">isDigitAt</span><span class=\"w\"> </span><span class=\"nv\">list</span><span class=\"w\"> </span><span class=\"nv\">pos</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"w\">            </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">dropFirst</span><span class=\"w\"> </span><span class=\"nv\">list</span><span class=\"w\"> </span><span class=\"nv\">pos</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">takeWhile</span><span class=\"w\"> </span><span class=\"nv\">isDigit</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">fromUtf8</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">unwrap</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toNat</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">unwrap</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Ok</span>\n<span class=\"w\">        </span><span class=\"kr\">else</span>\n<span class=\"w\">            </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">NoNumber</span>\n<span class=\"w\">    </span><span class=\"nv\">getToLeft</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">pos</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">isDigitAt</span><span class=\"w\"> </span><span class=\"nv\">list</span><span class=\"w\"> </span><span class=\"nv\">pos</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"w\">            </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">takeFirst</span><span class=\"w\"> </span><span class=\"nv\">list</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">pos</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">takeWhileBackwards</span><span class=\"w\"> </span><span class=\"nv\">isDigit</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">fromUtf8</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">unwrap</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toNat</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">unwrap</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Ok</span>\n<span class=\"w\">        </span><span class=\"kr\">else</span>\n<span class=\"w\">            </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">NoNumber</span>\n\n<span class=\"w\">    </span><span class=\"nv\">right</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">getToRight</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nv\">left</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">getToLeft</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"nf\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"w\">    </span><span class=\"nv\">topindex</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">subWrap</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"nv\">lineLength</span>\n<span class=\"w\">    </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nv\">extracting</span><span class=\"w\"> </span><span class=\"nv\">this</span><span class=\"w\"> </span><span class=\"kr\">as</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">closure</span><span class=\"w\"> </span><span class=\"nv\">creates</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">compiler</span><span class=\"w\"> </span><span class=\"nv\">error</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">that's</span><span class=\"w\"> </span><span class=\"nv\">why</span><span class=\"w\"> </span><span class=\"nv\">it</span><span class=\"w\"> </span><span class=\"nv\">is</span><span class=\"w\"> </span><span class=\"nv\">copied</span><span class=\"w\"> </span><span class=\"nv\">for</span><span class=\"w\"> </span><span class=\"nv\">bottom</span>\n<span class=\"w\">    </span><span class=\"nv\">top</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">        </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">isDigitAt</span><span class=\"w\"> </span><span class=\"nv\">list</span><span class=\"w\"> </span><span class=\"nv\">topindex</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"w\">            </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nv\">only</span><span class=\"w\"> </span><span class=\"nv\">one</span><span class=\"w\"> </span><span class=\"nv\">possible</span>\n<span class=\"w\">            </span><span class=\"nv\">leftPart</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">                </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">takeFirst</span><span class=\"w\"> </span><span class=\"nv\">list</span><span class=\"w\"> </span><span class=\"nv\">topindex</span>\n<span class=\"w\">                </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">takeWhileBackwards</span><span class=\"w\"> </span><span class=\"nv\">isDigit</span>\n<span class=\"w\">            </span><span class=\"nv\">rightPart</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">                </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">dropFirst</span><span class=\"w\"> </span><span class=\"nv\">list</span><span class=\"w\"> </span><span class=\"nv\">topindex</span>\n<span class=\"w\">                </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">takeWhile</span><span class=\"w\"> </span><span class=\"nv\">isDigit</span>\n<span class=\"w\">            </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">concat</span><span class=\"w\"> </span><span class=\"nv\">leftPart</span><span class=\"w\"> </span><span class=\"nv\">rightPart</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">fromUtf8</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">unwrap</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toNat</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">unwrap</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">single</span>\n<span class=\"w\">        </span><span class=\"kr\">else</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"nv\">getToRight</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">topindex</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nv\">getToLeft</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">topindex</span><span class=\"w\"> </span><span class=\"nf\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)]</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">keepOks</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">x</span>\n\n<span class=\"w\">    </span><span class=\"nv\">bottomindex</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"nv\">lineLength</span>\n<span class=\"w\">    </span><span class=\"nv\">bottom</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">        </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">isDigitAt</span><span class=\"w\"> </span><span class=\"nv\">list</span><span class=\"w\"> </span><span class=\"nv\">bottomindex</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"w\">            </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nv\">only</span><span class=\"w\"> </span><span class=\"nv\">one</span><span class=\"w\"> </span><span class=\"nv\">possible</span>\n<span class=\"w\">            </span><span class=\"nv\">leftPart</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">                </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">takeFirst</span><span class=\"w\"> </span><span class=\"nv\">list</span><span class=\"w\"> </span><span class=\"nv\">bottomindex</span>\n<span class=\"w\">                </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">takeWhileBackwards</span><span class=\"w\"> </span><span class=\"nv\">isDigit</span>\n<span class=\"w\">            </span><span class=\"nv\">rightPart</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">                </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">dropFirst</span><span class=\"w\"> </span><span class=\"nv\">list</span><span class=\"w\"> </span><span class=\"nv\">bottomindex</span>\n<span class=\"w\">                </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">takeWhile</span><span class=\"w\"> </span><span class=\"nv\">isDigit</span>\n<span class=\"w\">            </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">concat</span><span class=\"w\"> </span><span class=\"nv\">leftPart</span><span class=\"w\"> </span><span class=\"nv\">rightPart</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">fromUtf8</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">unwrap</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toNat</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">unwrap</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">single</span>\n<span class=\"w\">        </span><span class=\"kr\">else</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"nv\">getToRight</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">bottomindex</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nv\">getToLeft</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">bottomindex</span><span class=\"w\"> </span><span class=\"nf\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)]</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">keepOks</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">x</span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"nv\">right</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">left</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">keepOks</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">x</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">concat</span><span class=\"w\"> </span><span class=\"nv\">top</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">concat</span><span class=\"w\"> </span><span class=\"nv\">bottom</span>\n\n<span class=\"nv\">takeWhile</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">list</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">cond</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">findFirstIndex</span><span class=\"w\"> </span><span class=\"nv\">list</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">elem</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"err\">!</span><span class=\"p\">(</span><span class=\"nv\">cond</span><span class=\"w\"> </span><span class=\"nv\">elem</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">firstWrongIndex</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">takeFirst</span><span class=\"w\"> </span><span class=\"nv\">list</span><span class=\"w\"> </span><span class=\"nv\">firstWrongIndex</span>\n<span class=\"w\">        </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">NotFound</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">list</span>\n\n<span class=\"nv\">takeWhileBackwards</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">list</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">cond</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">findLastIndex</span><span class=\"w\"> </span><span class=\"nv\">list</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">elem</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"err\">!</span><span class=\"p\">(</span><span class=\"nv\">cond</span><span class=\"w\"> </span><span class=\"nv\">elem</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">lastWrongIndex</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">dropFirst</span><span class=\"w\"> </span><span class=\"nv\">list</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">lastWrongIndex</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">NotFound</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">list</span>\n\n<span class=\"nv\">isDigitAt</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">list</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">get</span><span class=\"w\"> </span><span class=\"nv\">list</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">false</span>\n<span class=\"w\">        </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">d</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">isDigit</span><span class=\"w\"> </span><span class=\"nv\">d</span>\n\n<span class=\"nv\">sumPartNumbers</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">elem</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">inp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">lineLength</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">elem</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"nf\">'\\</span><span class=\"nv\">n'</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"w\">        </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"nf\">.</span><span class=\"nv\">shouldAdd</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"w\">            </span><span class=\"nv\">newState</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">addToSum</span><span class=\"w\"> </span><span class=\"nv\">state</span>\n<span class=\"w\">            </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">newState</span><span class=\"w\"> </span><span class=\"err\">&amp;</span><span class=\"w\"> </span><span class=\"nv\">row</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"nf\">.</span><span class=\"nv\">row</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"kr\">else</span>\n<span class=\"w\">            </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"err\">&amp;</span><span class=\"w\"> </span><span class=\"nv\">row</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"nf\">.</span><span class=\"nv\">row</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">currentNumber</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"kr\">else</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">isDigit</span><span class=\"w\"> </span><span class=\"nv\">elem</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"w\">        </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"err\">&amp;</span><span class=\"w\"> </span><span class=\"nv\">currentNumber</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"nf\">.</span><span class=\"nv\">currentNumber</span><span class=\"w\"> </span><span class=\"nf\">*</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toNat</span><span class=\"w\"> </span><span class=\"nv\">elem</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"mi\">0</span><span class=\"nf\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">shouldAdd</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"nf\">.</span><span class=\"nv\">shouldAdd</span><span class=\"w\"> </span><span class=\"nf\">||</span><span class=\"w\"> </span><span class=\"nv\">hasSymbolNear</span><span class=\"w\"> </span><span class=\"nv\">inp</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"nv\">lineLength</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"kr\">else</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"nf\">.</span><span class=\"nv\">shouldAdd</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"w\">        </span><span class=\"nv\">addToSum</span><span class=\"w\"> </span><span class=\"nv\">state</span>\n<span class=\"w\">    </span><span class=\"kr\">else</span>\n<span class=\"w\">        </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"err\">&amp;</span><span class=\"w\"> </span><span class=\"nv\">currentNumber</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"nv\">hasSymbolNear</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">list</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">lineLength</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">isSymbolAt</span><span class=\"w\"> </span><span class=\"nv\">list</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nf\">||</span><span class=\"w\"> </span><span class=\"nv\">isSymbolAt</span><span class=\"w\"> </span><span class=\"nv\">list</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">subWrap</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nf\">||</span><span class=\"w\"> </span><span class=\"nv\">isSymbolAt</span><span class=\"w\"> </span><span class=\"nv\">list</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"nv\">lineLength</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nf\">||</span><span class=\"w\"> </span><span class=\"nv\">isSymbolAt</span><span class=\"w\"> </span><span class=\"nv\">list</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"nv\">lineLength</span><span class=\"w\"> </span><span class=\"nf\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nf\">||</span><span class=\"w\"> </span><span class=\"nv\">isSymbolAt</span><span class=\"w\"> </span><span class=\"nv\">list</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"nv\">lineLength</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nf\">||</span><span class=\"w\"> </span><span class=\"nv\">isSymbolAt</span><span class=\"w\"> </span><span class=\"nv\">list</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">subWrap</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"nv\">lineLength</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nf\">||</span><span class=\"w\"> </span><span class=\"nv\">isSymbolAt</span><span class=\"w\"> </span><span class=\"nv\">list</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">subWrap</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">lineLength</span><span class=\"w\"> </span><span class=\"nf\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"nf\">||</span><span class=\"w\"> </span><span class=\"nv\">isSymbolAt</span><span class=\"w\"> </span><span class=\"nv\">list</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">subWrap</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">lineLength</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">))</span>\n\n<span class=\"nv\">isSymbolAt</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">list</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">get</span><span class=\"w\"> </span><span class=\"nv\">list</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">false</span>\n<span class=\"w\">        </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">d</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">isSymbol</span><span class=\"w\"> </span><span class=\"nv\">d</span>\n\n<span class=\"nv\">isSymbol</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nf\">&lt;</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"mi\">0</span><span class=\"nf\">'</span><span class=\"w\"> </span><span class=\"nf\">||</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nf\">&gt;</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"mi\">9</span><span class=\"nf\">'</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"err\">!</span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">'.'</span><span class=\"w\"> </span><span class=\"nf\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"err\">!</span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">'\\</span><span class=\"nv\">n'</span>\n\n<span class=\"nv\">isDigit</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nf\">&gt;=</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"mi\">0</span><span class=\"nf\">'</span><span class=\"w\"> </span><span class=\"nf\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nf\">&lt;=</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"mi\">9</span><span class=\"nf\">'</span>\n\n<span class=\"nv\">addToSum</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"err\">&amp;</span><span class=\"w\"> </span><span class=\"nv\">sum</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"nf\">.</span><span class=\"nv\">sum</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"nf\">.</span><span class=\"nv\">currentNumber</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">shouldAdd</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">currentNumber</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"nv\">example</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span>\n<span class=\"nv\">example</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"s\">\"\"\"</span>\n<span class=\"s\">    467..114..</span>\n<span class=\"s\">    ...*......</span>\n<span class=\"s\">    ..35..633.</span>\n<span class=\"s\">    ......#...</span>\n<span class=\"s\">    617*......</span>\n<span class=\"s\">    .....+.58.</span>\n<span class=\"s\">    ..592.....</span>\n<span class=\"s\">    ......755.</span>\n<span class=\"s\">    ...$.*....</span>\n<span class=\"s\">    .664.598..</span>\n<span class=\"s\">    \"\"\"</span>\n\n<span class=\"nv\">unwrap</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">res</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">res</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">x</span>\n<span class=\"w\">        </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">crash</span><span class=\"w\"> </span><span class=\"s\">\"bad unwrap\"</span>\n</code></pre></div>\n</div></div>\n<p>Part 1 was pretty quick for me, but I could not reuse it for part 2, so quite some more typing for part 2. Performance is good, but I did run into a bug at one point. I will try to create a minimal example for it before opening a bug on github.</p>",
        "id": 405705622,
        "sender_full_name": "Fabian Schmalzried",
        "timestamp": 1701643901
    },
    {
        "content": "<p>Late to the party, but <a href=\"https://github.com/axelerator/aoc23/blob/main/03/main.roc\">here is mine</a> (also just using Array2D, no perf problems <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span> )<br>\nThe thing that bogs me down most is that <code>dbg</code> doesn't work during test runs (at leas on my Mac). It just terminates with <code>[1]    85268 trace trap  roc test</code></p>",
        "id": 405708231,
        "sender_full_name": "Axel",
        "timestamp": 1701645999
    },
    {
        "content": "<p>should be fixed on main</p>",
        "id": 405708817,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701646307
    },
    {
        "content": "<p>maybe even in the very latest nightly</p>",
        "id": 405708843,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701646323
    },
    {
        "content": "<p>otherwise, should be in the next nightly</p>",
        "id": 405708877,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701646336
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"481892\">Axel</span> <a href=\"#narrow/stream/358903-Advent-of-Code/topic/2023.20Day.203/near/405708231\">said</a>:</p>\n<blockquote>\n<p>The thing that bogs me down most is that <code>dbg</code> doesn't work during test runs (at leas on my Mac).</p>\n</blockquote>\n<p>Yes, it would be nice to have dbg output on tests, is there a reason for why this is missing?</p>",
        "id": 405709977,
        "sender_full_name": "Fabian Schmalzried",
        "timestamp": 1701647380
    },
    {
        "content": "<p>it used to work, but we recently changed how <code>dbg</code> works (to fix a bunch of bugs, among other benefits) and haven't updated tests to use that new way yet</p>",
        "id": 405710185,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701647533
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> do you know offhand where we define <code>roc_alloc</code> and such for <code>roc test</code>?</p>",
        "id": 405710198,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701647548
    },
    {
        "content": "<p>I assume if we add a <code>roc_dbg</code> implementation there it'll fix it</p>",
        "id": 405710212,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701647567
    },
    {
        "content": "<p>It should be fixed on main already</p>",
        "id": 405712566,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701649205
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/358903-Advent-of-Code/topic/2023.20Day.203/near/405704638\">said</a>:</p>\n<blockquote>\n<p><code>roc format</code> will format things for you! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>\n</blockquote>\n<p>Not having this was such a pet peeve of mine as I've been coding lol</p>\n<p>The whole time I've been thinking, we need to get on this for some sanity! Ty to everyone who put it together!</p>",
        "id": 405727449,
        "sender_full_name": "Jason Hobbs",
        "timestamp": 1701657124
    },
    {
        "content": "<p>Here's my day 3 solution.<br>\n<a href=\"https://github.com/ryanb/advent-2023-roc/blob/main/day03/main.roc\">https://github.com/ryanb/advent-2023-roc/blob/main/day03/main.roc</a></p>",
        "id": 405944894,
        "sender_full_name": "Ryan Bates",
        "timestamp": 1701738168
    },
    {
        "content": "<p>Hi roc community! These are my solutions so far: <a href=\"https://github.com/ni-ko-o-kin/advent-of-code/tree/main/2023\">https://github.com/ni-ko-o-kin/advent-of-code/tree/main/2023</a> I'm having so much fun with roc this year! A huge difference to last year where I ran into a couple of compiler bugs. And it also helped to let my brain process and digest for one year how roc works and how it differs from other languages I already know (like elm or haskell).</p>",
        "id": 406381132,
        "sender_full_name": "Nikolaus Wettstein",
        "timestamp": 1701894457
    },
    {
        "content": "<p>My solution for day 3: <a href=\"https://github.com/Ocupe/advent-of-code-2023/tree/main/day_03\">https://github.com/Ocupe/advent-of-code-2023/tree/main/day_03</a></p>\n<p>I look forward to seeing how outers tackle this problem. I struggled with nested lists in pipes. Sometimes I didn't realize that I was still working on the first level where I should have used <a href=\"http://List.map\">List.map</a> on the nested list. I guess this is mostly due to my brain adapting to the functional style of doing things and getting used to Roc.</p>\n<p>A lot of things took longer than I expected, but I also had some moments of \"wow, this is so cool!\". Amazing work!</p>",
        "id": 418511104,
        "sender_full_name": "Jonas Schell",
        "timestamp": 1706455462
    },
    {
        "content": "<blockquote>\n<p>I look forward to seeing how outers tackle this problem.</p>\n</blockquote>\n<p>If you click on the header of this topic \"# Advent of Code &gt; 2023 Day 3\" you can see the solutions posted in previous messages :)</p>",
        "id": 418511477,
        "sender_full_name": "Anton",
        "timestamp": 1706455762
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"361169\">@Anton</span>, that is what I am currently doing. I just don't want to read anything related to the problem before I've solved it :)</p>",
        "id": 418512126,
        "sender_full_name": "Jonas Schell",
        "timestamp": 1706456242
    },
    {
        "content": "<p>Nice work, one thing I noticed I thought I might mention. </p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"w\">    </span><span class=\"c1\"># we can remove the braces</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"p\">(\\</span><span class=\"n\">numList</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"ss\">value</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">numList</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">row</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">hit</span><span class=\"o\">.</span><span class=\"n\">row</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">cols</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"w\"> </span><span class=\"p\">})</span>\n\n<span class=\"w\">    </span><span class=\"c1\"># like this</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"p\">\\</span><span class=\"n\">numList</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"ss\">value</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">numList</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">row</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">hit</span><span class=\"o\">.</span><span class=\"n\">row</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">cols</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>In general I wonder if <code>roc format</code> could/should do this automatically?</p>",
        "id": 418539778,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1706479506
    },
    {
        "content": "<p><span aria-label=\"100\" class=\"emoji emoji-1f4af\" role=\"img\" title=\"100\">:100:</span></p>",
        "id": 418709511,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1706558129
    }
]