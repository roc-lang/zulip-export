[
    {
        "content": "<p>It took me way too long to realize that the problem is not in my code but Dict is broken <span aria-label=\"smiling face with tear\" class=\"emoji emoji-1f972\" role=\"img\" title=\"smiling face with tear\">:smiling_face_with_tear:</span></p>",
        "id": 315491830,
        "sender_full_name": "Shritesh Bhattarai",
        "timestamp": 1670892181
    },
    {
        "content": "<p>Any more details on how it is broken or a minimal repro if you have/can make one?</p>",
        "id": 315499800,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670897839
    },
    {
        "content": "<p>Min-repro’ing this is going to be really hard. My code works for the “example input”, and on the bigger input it crashes after many many iterations with an unwrap of KeyNotFound on a dict that IIUC has that key in there. <a href=\"https://github.com/shritesh/advent/blob/4995ae8d8bdc4d0ea11edce9555ccccc27707324/2022/12.roc#L36\">https://github.com/shritesh/advent/blob/4995ae8d8bdc4d0ea11edce9555ccccc27707324/2022/12.roc#L36</a></p>",
        "id": 315507329,
        "sender_full_name": "Shritesh Bhattarai",
        "timestamp": 1670904571
    },
    {
        "content": "<p>Is see. Yeah, may be quite hard to debug. Does dbg printing <code>Dict.keys</code> show the key?</p>",
        "id": 315507570,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670904726
    },
    {
        "content": "<p>That will end up printing the underlying list. Would let us know if it is simply a bug in the hash lookup or if it is something else.</p>",
        "id": 315507622,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670904774
    },
    {
        "content": "<p>In the latest Apple Silicon nightly,  running <code>roc dev 12.roc</code> simply exits without doing anything if I put a dbg before the unwrap</p>",
        "id": 315508321,
        "sender_full_name": "Shritesh Bhattarai",
        "timestamp": 1670905154
    },
    {
        "content": "<p>ok. sad</p>",
        "id": 315508425,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670905224
    },
    {
        "content": "<p>Interesting. I can't seem to repro. It still fails, but it is hitting a <code>integer addition overflowed!</code> in the helper function Looks to be happening directly in the newHops List.walk lambda. (note, I am running from source, not from a nightly)</p>\n<p>Oh, actually. it is specifically hitting it on <code>alt = currentHop + 1</code>. If I change that to <code>alt = Num.addWrap currentHop 1</code>, the code you linked will pass for me and print out a result.</p>",
        "id": 315511325,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670907425
    },
    {
        "content": "<p>nice. <code>roc dev</code> was taking too long for the full input so I was using optimize. Is integer overflow an undefined behavior in optimized roc programs?</p>",
        "id": 315601926,
        "sender_full_name": "Shritesh Bhattarai",
        "timestamp": 1670941247
    },
    {
        "content": "<p>no we specifically do want it to panic in release builds</p>",
        "id": 315602392,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1670941386
    },
    {
        "content": "<p>gotcha. I can repro different behaviors in the file linked above where <code>roc run</code> crashes with overflow while <code>roc run --optimize</code> essentially shows undefined behavior.</p>",
        "id": 315604416,
        "sender_full_name": "Shritesh Bhattarai",
        "timestamp": 1670941991
    },
    {
        "content": "<p>Just a note, <code>roc dev --optimize</code> works. So you can have both</p>",
        "id": 315621484,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670946415
    },
    {
        "content": "<p>Huh. Only <code>roc run --optimize</code> manifests the \"undefined behavior\". <code>roc dev</code>, <code>roc dev --optimize</code> and <code>roc run</code> all result in the integer overflow.</p>",
        "id": 315626056,
        "sender_full_name": "Shritesh Bhattarai",
        "timestamp": 1670947647
    },
    {
        "content": "<p>That's quite intriguing. Definitely something to investigate</p>",
        "id": 315627539,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670948040
    },
    {
        "content": "<p>seems likely to be unrelated</p>",
        "id": 315635026,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1670950002
    },
    {
        "content": "<p>like there's an <code>--optimize</code> bug unrelated to overflow that's causing things to break in a way that means the overflow doesn't happen</p>",
        "id": 315635155,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1670950044
    },
    {
        "content": "<p>But only in <code>run --optimize</code> and not <code>dev --optimize</code>?</p>",
        "id": 315635986,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670950285
    },
    {
        "content": "<p>Yeah, i see. I guess it means there is a compiler bug. Then there is also the bug with the example shared</p>",
        "id": 315636327,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670950375
    },
    {
        "content": "<p>Ok so this is definitely a compiler bug: I fixed the integer overflow error in my code. <code>roc run</code>, <code>roc dev</code> and <code>roc dev --optimize</code> all return the correct result. <code>roc run --optimize</code> crashes at that exact same point as before. <a href=\"https://github.com/shritesh/advent/blob/d021f18788fd46b12b485df7932fc5c8315c4e55/2022/12.roc\">https://github.com/shritesh/advent/blob/d021f18788fd46b12b485df7932fc5c8315c4e55/2022/12.roc</a></p>",
        "id": 315662723,
        "sender_full_name": "Shritesh Bhattarai",
        "timestamp": 1670957903
    },
    {
        "content": "<p>moar: <code>roc build --optimize</code> is broken as well</p>",
        "id": 315663570,
        "sender_full_name": "Shritesh Bhattarai",
        "timestamp": 1670958162
    },
    {
        "content": "<p>even moar: the same holds true for <code>--opt-size</code> instead of <code>--optimize</code> for all the commands.</p>",
        "id": 315663989,
        "sender_full_name": "Shritesh Bhattarai",
        "timestamp": 1670958295
    },
    {
        "content": "<p>Opened up an issue: <a href=\"https://github.com/roc-lang/roc/issues/4756\">https://github.com/roc-lang/roc/issues/4756</a></p>",
        "id": 315668436,
        "sender_full_name": "Shritesh Bhattarai",
        "timestamp": 1670959675
    },
    {
        "content": "<p>Anyway, <a href=\"https://github.com/shritesh/advent/blob/main/2022/12.roc\">here's my final solution for Day 12</a>. I'm extremely pleased with the result. Implementing Dijkstra's in Roc forced me to truly internalize the algorithm while my previous understanding was a data structure centric one: \"use a minimum priority queue, mark nodes as visited, etc.\". Roc is turning into my favorite programming language by the day.</p>",
        "id": 315851758,
        "sender_full_name": "Shritesh Bhattarai",
        "timestamp": 1671033210
    }
]