[
    {
        "content": "<p>Hi all,</p>\n<p>We just updated the builtin Set and Dictionary to be hash based. They now should be significantly faster especially as they get large. These new Set and Dict are in the latest nightly from today (2022-12-05). If you have used Set/Dict in any of your AOC programs, it would be very useful if you could download the latest nightly and test your program again. I want to try and catch/fix any bugs early.</p>\n<p>If you run into any issues, please either comment here or create an issue on the github.</p>",
        "id": 314083038,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670260529
    },
    {
        "content": "<p>I tried to modify today's solution to use Dicts, and ran into an error:</p>\n<div class=\"codehilite\"><pre><span></span><code>An internal compiler expectation was broken.\nThis is definitely a compiler bug.\nPlease file an issue here: https://github.com/roc-lang/roc/issues/new/choose\nthread &#39;&lt;unnamed&gt;&#39; panicked at &#39;ambient functions don&#39;t unify&#39;, /home/big-ci-user/actions-runner/_work/roc/roc/crates/compiler/unify/src/unify.rs:247:18\n</code></pre></div>\n<p>I pushed the solution to a separate branch in my github repo: <a href=\"https://github.com/mkaszas/aoc-2022/blob/mkaszas/dict-compiler-bug/Day5.roc\">https://github.com/mkaszas/aoc-2022/blob/mkaszas/dict-compiler-bug/Day5.roc</a></p>\n<p>I opened a PR as well, with the full stacktrace pasted in the description: <a href=\"https://github.com/mkaszas/aoc-2022/pull/1\">https://github.com/mkaszas/aoc-2022/pull/1</a></p>\n<p>Running <code>roc_nightly-linux_x86_64-2022-12-05-306f3be</code> in docker. <br>\nHope this helps:)</p>",
        "id": 314120047,
        "sender_full_name": "Máté Kaszás",
        "timestamp": 1670272739
    },
    {
        "content": "<p>Just trying to get to a minimal example now, and looks like <code>Dict.fromList []</code> can cause issues too. <code>roc check</code> passes, but <code>run</code> &amp; <code>build</code> fails with:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;&lt;unnamed&gt;&#39; panicked at &#39;called `Option::unwrap()` on a `None` value&#39;, crates/compiler/mono/src/ir.rs:5710:56\n</code></pre></div>",
        "id": 314121832,
        "sender_full_name": "Máté Kaszás",
        "timestamp": 1670273416
    },
    {
        "content": "<p>Here's a minimal example that still reproduces this issue for me: <a href=\"https://github.com/mkaszas/aoc-2022/blob/mkaszas/dict-compiler-bug/DictTest.roc\">https://github.com/mkaszas/aoc-2022/blob/mkaszas/dict-compiler-bug/DictTest.roc</a><br>\nLooks like the issue is with creating a Dict with <code>Nat</code> key type. When I remove the type annotation from <code>myDict</code>,  it works as expected.</p>\n<div class=\"codehilite\"><pre><span></span><code>app &quot;dict-test&quot;\n    packages { pf: &quot;https://github.com/roc-lang/basic-cli/releases/download/0.1.1/zAoiC9xtQPHywYk350_b7ust04BmWLW00sjb9ZPtSQk.tar.br&quot; }\n    imports [pf.Process, pf.Stdout, pf.Task]\n    provides [main] to pf\n\nmain =\n    myDict : Dict Nat Str\n    myDict =\n        Dict.single 1 &quot;One&quot;\n\n    _ &lt;- Task.await (Stdout.line &quot;ok&quot;)\n    Process.exit 0\n</code></pre></div>",
        "id": 314125919,
        "sender_full_name": "Máté Kaszás",
        "timestamp": 1670274931
    },
    {
        "content": "<p>Interesting. This looks to specific ally be an issue with using <code>Nat</code> as a key to the dictionary.</p>",
        "id": 314126556,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670275183
    },
    {
        "content": "<p>I wonder if abilities have an issue mapping hashing to <code>Nat</code>. For that it would need to map from <code>Nat</code> to hashing a <code>U64</code> because that is the underlying type of <code>Nat</code> on a 64 bit system.</p>",
        "id": 314126726,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670275240
    },
    {
        "content": "<p>Yeah. Making everything a <code>U64</code> and dealing with type conversions back to <code>Nat</code> when needed fixes the issue. Interesting. <span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> would this be an issue with deriving the hash ability for <code>Nat</code> (probably due to it needing to change bitwidth based on the platform)?</p>",
        "id": 314127528,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670275554
    },
    {
        "content": "<p>Taking a look</p>",
        "id": 314139550,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1670280411
    },
    {
        "content": "<p>Yeah, Nat as a key for a Dict is not currently supported. The underlying issue is that hashing a Nat is not currently supported - that should either be fixed, or the compiler should print a nicer error message for you. While we resolve that, you should be able to use a different integer type for the key.</p>",
        "id": 314142378,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1670281555
    },
    {
        "content": "<p>yeah we should support hashing a Nat if possible!</p>",
        "id": 314142863,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1670281763
    },
    {
        "content": "<p>As for your original reported bug - that should be fixed if you use another number type for now, and with tomorrow's nightly (which should include <a href=\"https://github.com/roc-lang/roc/pull/4688\">https://github.com/roc-lang/roc/pull/4688</a>)</p>",
        "id": 314143267,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1670281946
    },
    {
        "content": "<p>Okay, all of this should work in tomorrows nightly release of roc!</p>",
        "id": 314159952,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1670292986
    },
    {
        "content": "<p>Big thanks <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span></p>",
        "id": 314159980,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1670293022
    }
]