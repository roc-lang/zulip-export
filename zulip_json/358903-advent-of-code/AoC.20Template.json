[
    {
        "content": "<p>I've noticed people posting templates in Reddit for AoC. I'd like to put one together and do the same.</p>\n<p>I have some opinions about what makes a good template already. Like ingesting the input file bytes. Printing to the terminal with nice colors. Setting up the tasks so the errors compose nicely etc. Timing the processing stages. Parsing example. 2D array example? </p>\n<p>It's pretty similar to the Task example tbh.</p>\n<p>What do people here think? Any advice or ideas from last year? </p>\n<p>Can you think of a good way to present a template? Is it better just as one big file or maybe a repository with different examples?</p>",
        "id": 404112650,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700919478
    },
    {
        "content": "<p>I was thinking about this in the context of that other thread you made about fixing the opaque type open-by-default-in-output-position issue. I think it's perfectly reasonable for an AoC solution to have a main task and no other tasks, since you can read the input files at compile time. That sidesteps the issue of composing error tags.</p>",
        "id": 404113720,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1700920482
    },
    {
        "content": "<p>Similarly <a href=\"#narrow/stream/231634-beginners/topic/command.20line.20parsing/near/397529265\">this thread</a> came up because <span class=\"user-mention\" data-user-id=\"463085\">@drew</span> wanted to build an AoC template where everything is one application and you provide a cli arg for the day you want to run. I think that's a cool idea, but it might be best to steer new people away from that pattern. Roc still has some pretty bad crash/error messages, so keeping everything in one application could make it harder to debug problems.</p>",
        "id": 404114136,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1700920859
    },
    {
        "content": "<p>I think for AoC it's very reasonable to have an <code>orCrash</code> helper to deal with Results locally, instead of having to handle them all at the end. The flip side of that is we want to show off how Results compose, since it's something most people probably haven't seen before.</p>",
        "id": 404114351,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1700920979
    },
    {
        "content": "<p>Here is a repo a friend of my build for AoC. It's creates one application and the day has to provided via cli arg. It currently contains a day0 as demo.</p>\n<p><a href=\"https://github.com/normanjaeckel/AdventOfCode\">https://github.com/normanjaeckel/AdventOfCode</a></p>\n<p>I think, I like the solutions better, where every day is an independent application. It makes it easier to share the solution of one day.</p>\n<p>It would be nice, if there was a common AoC platform, were the main returns two strings. It would not need any Task.</p>",
        "id": 404117789,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1700924289
    },
    {
        "content": "<p>Oh sure, having an AoC specific platform would be cute. Sometimes the puzzles have a cool visual output so it can be fun to print more than just the solution, but I guess that could be done by building a multiline string</p>",
        "id": 404119589,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1700925722
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"586417\">Elias Mulhall</span> <a href=\"#narrow/stream/358903-Advent-of-Code/topic/AoC.20Template/near/404114136\">said</a>:</p>\n<blockquote>\n<p>Similarly <a href=\"#narrow/stream/231634-beginners/topic/command.20line.20parsing/near/397529265\">this thread</a> came up because <span class=\"user-mention silent\" data-user-id=\"463085\">drew</span> wanted to build an AoC template where everything is one application and you provide a cli arg for the day you want to run. I think that's a cool idea</p>\n</blockquote>\n<p>So I've made a bit of a start on this and have a basic structure which I think is ok.</p>\n<p><a href=\"https://github.com/lukewilliamboswell/aoc-template\">https://github.com/lukewilliamboswell/aoc-template</a></p>\n<p>It's currently hardcoded to 2022 day 1, but it will be easy to to add cli args for things like \"list all available puzzles\" \"run a particular puzzle\" etc. I've been thinking I could even use some more ansi escape stuff to build selection menus with nice colors etc. </p>\n<p>But, looking for feedback on the actual API for implementing a single day. The process would be copy-paste another puzzle solution like <code>S2022D01.roc</code> and rename, then just implement these parts;</p>\n<div class=\"codehilite\"><pre><span></span><code>solution : AoC.Solution\nsolution = { year: 2022, day: 1, part1, part2 }\n\npart1 : {} -&gt; Result Str [NotImplemented, Error Str]\npart2 : {} -&gt; Result Str [NotImplemented, Error Str]\n</code></pre></div>\n<p>To add that day's solution to that app there is just a list in <code>cli.roc</code>, so you import the module and then just add it to;</p>\n<div class=\"codehilite\"><pre><span></span><code>solutions : List AoC.Solution\nsolutions = [\n    S2022D01.solution,\n    # add your solution here\n]\n</code></pre></div>\n<p>There should be very little need to modify the <code>cli.roc</code> file and everything will run nicely I think.</p>",
        "id": 404198603,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700973788
    },
    {
        "content": "<p>I'd like to add timing information too, to time how long it takes to run the solution.</p>",
        "id": 404198844,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700973989
    },
    {
        "content": "<p>I'm definitely getting a little carried away here. It's just too much fun building things with Roc. </p>\n<p>I've now got both a CLI and a Webserver app using the same Puzzle Solution data. </p>\n<p>If anyone is interested in helping I think we can make this a pretty neat template <img alt=\":roc:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/22008/emoji/images/18217.png\" title=\"roc\"> , and in a day or two I would like to share it on socials in preparation for AoC.</p>\n<p>Anyway, here is a demo of <code>web.roc</code> in action. <span aria-label=\"hearts\" class=\"emoji emoji-2665\" role=\"img\" title=\"hearts\">:hearts:</span> </p>\n<p><a href=\"/user_uploads/22008/y1KVoCbd1hZXK-wbSvjuruND/aoc-template-1.gif\">aoc-template-1.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/y1KVoCbd1hZXK-wbSvjuruND/aoc-template-1.gif\" title=\"aoc-template-1.gif\"><img src=\"/user_uploads/22008/y1KVoCbd1hZXK-wbSvjuruND/aoc-template-1.gif\"></a></div>",
        "id": 404209524,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700982565
    },
    {
        "content": "<p>Here is the repo, that I will probably use. It contains a very simple platform, that only expects </p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">solution</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>So there is no need to work with tasks.</p>\n<p><a href=\"https://github.com/ostcar/aoc2023\">https://github.com/ostcar/aoc2023</a></p>",
        "id": 404229349,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1700991973
    },
    {
        "content": "<p>I played around a bit more. I want to return two functions/symbols to the platform, so the platform can time each part individually and tell, how many ms it took. Currently, it is not possible, that the roc-app returns two function. So part1 and part2 have to be combined.</p>\n<p>Which version do you like more (line 8 to 11)?</p>\n<p><a href=\"https://github.com/ostcar/aoc2023/compare/return_two_functions#diff-5960de10bfc64baa9315d744c8cf7b38e18e6e5957948dbaaf9dff50f2cfc7c2R8-R11\">https://github.com/ostcar/aoc2023/compare/return_two_functions#diff-5960de10bfc64baa9315d744c8cf7b38e18e6e5957948dbaaf9dff50f2cfc7c2R8-R11</a></p>\n<p>The left side provides a function, that has an argument <code>[Part1, Part2]</code> that has to be checked.</p>\n<p>The right side provides a record with two fields, each is a function with an unused argument.</p>",
        "id": 404462965,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1701107828
    },
    {
        "content": "<p>Oh, based on how you are using part 1 and 2, I guess they can just be <code>Str</code> and not <code>{} -&gt; Str</code></p>",
        "id": 404465973,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701108961
    },
    {
        "content": "<p>My goal is, to time how long each part took. The current output for my dummy day0 is:</p>\n<div class=\"codehilite\"><pre><span></span><code>Part1 in 5.311us:\nHello, World! ðŸ•Š ðŸ¤˜\n\nPart2 in 54.372us:\nðŸ¤˜ ðŸ•Š !dlroW ,olleH\n</code></pre></div>\n<p>When I change <code>{} -&gt; Str</code> to  <code>Str</code>, it is:</p>\n<div class=\"codehilite\"><pre><span></span><code>Part1 in 141.213us:\nHello, World! ðŸ•Š ðŸ¤˜\n\nPart2 in 21.451us:\nðŸ¤˜ ðŸ•Š !dlroW ,olleH\n</code></pre></div>\n<p>So you can see clear, that roc is not lazy. Both parts will be calculated, even if only part1 was requested.</p>",
        "id": 404484954,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1701117068
    },
    {
        "content": "<p>Here is the diff: <a href=\"https://github.com/ostcar/aoc2023/compare/return_two_functions...return_two_values\">https://github.com/ostcar/aoc2023/compare/return_two_functions...return_two_values</a></p>",
        "id": 404485546,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1701117336
    },
    {
        "content": "<p>Ah, didn't realize that part of the goal... Makes sense</p>",
        "id": 404489021,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701118912
    },
    {
        "content": "<p>So I've made some good progress with <a href=\"https://github.com/lukewilliamboswell/aoc-template\">lukewilliamboswell/aoc-template</a> and I think it's almost in a good enough state to share more broadly. My thoughts were posting it to the AoC Reddit as that seems to be what others are doing, and I think Roc will be well placed for this year.</p>\n<p>I'm looking for some assistance to test the current cli app. I can't really think of anything further I need to do with it. I'm looking for anything that might be a blocker for people to use this in anger as their primary driver for AoC. </p>\n<p>The web app is still a WIP and needs a bit of love before it will actually run the solutions, but that should be reasonably quick to do. The cli app took a bit longer because I got carried away making it graphical.</p>\n<p>Anyway, in case you are interested to know what it looks like here is a small demo of it. </p>\n<p><a href=\"/user_uploads/22008/Cl7EQyIp7-ciDK0sd0dWftIz/example-cli.gif\">example-cli.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/Cl7EQyIp7-ciDK0sd0dWftIz/example-cli.gif\" title=\"example-cli.gif\"><img src=\"/user_uploads/22008/Cl7EQyIp7-ciDK0sd0dWftIz/example-cli.gif\"></a></div>",
        "id": 404803313,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1701243127
    },
    {
        "content": "<p>Also any feedback on the design such as colors would be nice too. I've played with it a bit, but it's really challenging to make something look nice. I might have gone overboard with the colors.</p>",
        "id": 404803669,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1701243247
    },
    {
        "content": "<p>I personally would go with a bare essentials version:</p>\n<ul>\n<li>One simple past solution like S2022/D01.roc with more comments explaining everything for beginners</li>\n<li>One complex past solution with some more advanced error handling, again with beginner oriented comments</li>\n<li>A S2023/D01.roc template that is an empty version of S2022/D01.roc</li>\n</ul>\n<p>Most people will be familiar with running things with the terminal, e.g. <code>roc S2023/DO1.roc</code>, I would be cautious with trying to replace familiar workflows with a cli or web app.</p>",
        "id": 404840911,
        "sender_full_name": "Anton",
        "timestamp": 1701256154
    },
    {
        "content": "<p>I generally agree -- for many users I think they'll want a minimal template that fits into their existing workflow, not something that imposes a certain workflow. That said, this is really cool and a neat way to show off how Roc apps are put together. I think this template would be more attractive to people who are planning on doing every AoC puzzle in Roc, vs people who jump around and try different languages on different days.</p>\n<p>I don't think providing examples is the way to go. There are existing resource for that which we can point people to.</p>\n<p>It seems like we have three contenders for a recommended AoC template format</p>\n<ul>\n<li>basic-cli example, one Roc application per AoC day </li>\n<li><span class=\"user-mention\" data-user-id=\"496321\">@Oskar Hahn</span>'s platform where you provide a tuple of strings to main, one Roc application per AoC day </li>\n<li><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span>'s full featured approach</li>\n</ul>\n<p>Would it be too much to enumerate all three of those? We could either have a repo or a gist with the options and basically say \"if you want the most standard experience use X, if you want something stripped back use Y, and if you want a full UI use Z.\"</p>",
        "id": 404895773,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1701272581
    },
    {
        "content": "<p>My goal here is to share this with the social media crowd and encourage more people to try out Roc for this AoC. </p>\n<p>The template is complete overkill for just solving the puzzles, but my hypothesis is that it will help people to get started who are less familiar with Roc, and once they see how you can make things like this they will be encouraged to learn more and tinker with it. Having a template with cli graphics and web server shows what is possible and how easy it is , and saves people some time if they tinker with it to make something else.</p>\n<p>I've been having fun making the template, and I will probably keep evolving it as I go through the puzzles.</p>\n<p>Also I am trying to show it is easy to not be locked into just one platform to make useful things.</p>",
        "id": 404923862,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1701281351
    },
    {
        "content": "<p>Hmmmmmm. Ok, so something that makes me hesitate on this approach is that if I'm debugging a particular puzzle solution I will need to recompile my code and then take at least one more step to view the output. For the cli I need to select the correct day from the list, and for the web app I need to switch to my browser (assuming I'm already on the right route). That makes both platforms seem better for viewing completed puzzles than solving new ones, since the feedback loop is not as tight.</p>\n<p>I know this is more work, but what if you had three platforms</p>\n<ul>\n<li><code>roc run cli.roc -- 2023 1</code> to run a specific day</li>\n<li><code>tui.roc</code> to replace the current <code>cli.roc</code></li>\n<li>web app stays the same</li>\n</ul>",
        "id": 404933185,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1701284962
    },
    {
        "content": "<p>In general I think isolating each puzzle in its own app is better for debugging and helping new people with errors. Your point about sharing something fancy to get people's attention is def valid.</p>",
        "id": 404933544,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1701285135
    },
    {
        "content": "<p>Cool, thank you for looking at this. Ill change cli to tui, and a cli and some more polish/documentation and post it later this evening in preparation for tomorrow's start. <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 404935794,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1701286120
    }
]