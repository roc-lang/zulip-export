[
    {
        "content": "<p>My <a href=\"https://github.com/lukewilliamboswell/roc-things/blob/main/aoc-2022/day3.roc\">day 3</a> solution. <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 313638305,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1670049409
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> has marked this topic as resolved.</p>",
        "id": 313638702,
        "sender_full_name": "Notification Bot",
        "timestamp": 1670049775
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> has marked this topic as unresolved.</p>",
        "id": 313638716,
        "sender_full_name": "Notification Bot",
        "timestamp": 1670049782
    },
    {
        "content": "<p>Here's <a href=\"https://github.com/shritesh/advent/blob/main/2022/03.roc\">my Day 3 </a>. I'm happy with the solution but I found myself wishing Roc had these <del>3</del> 2 things:</p>\n<ul>\n<li><code>List.chunks</code> to chunk a list into sub lists of a specified length</li>\n<li><code>List.reduce</code> that uses the  first element of the list as the initial state </li>\n<li><del>Some way of doing \"char to int\"</del> Looking at <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> 's solution, turns out \"scalar arithmetic\" works as expected. updated my solution</li>\n</ul>",
        "id": 313640539,
        "sender_full_name": "Shritesh Bhattarai",
        "timestamp": 1670051367
    },
    {
        "content": "<p>Another <a href=\"https://github.com/AndydeCleyre/aoc-2022-roc/blob/master/03/main.roc\">Day 3 solution</a>. I know there's a way to do some nifty destructuring on the way from lists to function parameters...</p>",
        "id": 313642539,
        "sender_full_name": "Andy Kluger",
        "timestamp": 1670052873
    },
    {
        "content": "<p>Dude, I am learning waayyyyy more than I ever thought possible about basic adding/subtraction against various number types. I thought I was all ballin' when I understood the difference between / and // in Elm, but this U8 vs. U32 insanity is breaking my brain. I didn't realize math with these various number types was so dangerous.</p>",
        "id": 313698160,
        "sender_full_name": "JesterXL",
        "timestamp": 1670079291
    },
    {
        "content": "<p>Case in point \"List.sum blows up\" because U8 maxes at 256... like... man am I spoiled rotten in other languages.</p>",
        "id": 313698951,
        "sender_full_name": "JesterXL",
        "timestamp": 1670079679
    },
    {
        "content": "<p><a href=\"https://github.com/TAGraves/adventofcode2022/blob/main/day3.roc\">Here's my day 3.</a> I didn't know anything about scalar arithmetic so I went with a much dumber approach <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span>.</p>\n<p>I was really surprised that <code>Str.split \"abc\" \"\"</code> returns <code>[\"abc\"]</code> and not <code>[\"a\", \"b\", \"c\"]</code>. I understand the reasoning, but I wish the compiler could blow up if you do <code>Str.split</code> with an empty separator. I'm not familiar with other languages that have the same behavior as Roc, but plenty (JS, Ruby, Rust) split the string into individual characters.</p>",
        "id": 313703830,
        "sender_full_name": "Tommy Graves",
        "timestamp": 1670081952
    },
    {
        "content": "<p>That's an interesting note on <code>Str.split</code>. i guess we just have a few other methods that theoretically are for that. Like <code>Str.toUtf8</code> or one of the methods that walks the code points/graphemes, but yeah...less clear</p>",
        "id": 313710554,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670085577
    },
    {
        "content": "<p>My <a href=\"https://github.com/ghigt/advent-of-code/blob/main/2022/roc/day-03/part2.roc\">solution</a></p>",
        "id": 313715124,
        "sender_full_name": "Ghislain",
        "timestamp": 1670088371
    },
    {
        "content": "<p><a href=\"https://github.com/raorao/advent_of_code_2022.roc/blob/main/3/main.roc\">My solution!</a></p>",
        "id": 313717877,
        "sender_full_name": "Srinivas Rao-Mouw",
        "timestamp": 1670090053
    },
    {
        "content": "<p>ooh I love your recursive grouping strategy <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span></p>",
        "id": 313718181,
        "sender_full_name": "Srinivas Rao-Mouw",
        "timestamp": 1670090285
    },
    {
        "content": "<p><a href=\"https://gist.github.com/ayazhafiz/c2b4fe67d1e1de8e90b8b67a118a9828\">my day 3</a> - definitely looking forward to hash-based set/dict <span aria-label=\"nerd\" class=\"emoji emoji-1f913\" role=\"img\" title=\"nerd\">:nerd:</span></p>",
        "id": 313719993,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1670091376
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> the way you formatted that <code>if</code>was neat. I wonder if we could support that without braces for smaller use cases like this?</p>\n<div class=\"codehilite\"><pre><span></span><code>(if item &gt;= &#39;a&#39;\nthen item - &#39;a&#39; + 1\nelse item - &#39;A&#39; + 27)\n|&gt; Num.toU64\n</code></pre></div>",
        "id": 313723731,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1670093915
    },
    {
        "content": "<p>I actually want to support <code>Num.toU64 if item &gt;= 'a' then ...</code> like CoffeeScript does!</p>",
        "id": 313724075,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1670094093
    },
    {
        "content": "<p>it might work without braces or richards way, i just didnâ€™t try it</p>",
        "id": 313724366,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1670094286
    },
    {
        "content": "<p>Oh, I can do <code>'E' - 'A'</code>, that is pretty cool</p>",
        "id": 313739648,
        "sender_full_name": "Sebastian Porto",
        "timestamp": 1670106260
    },
    {
        "content": "<p><a href=\"https://github.com/JesterXL/advent-of-code-2022/blob/main/day3/main.roc\">My Day 3</a> (shrink took wayyy too long)</p>",
        "id": 313739696,
        "sender_full_name": "JesterXL",
        "timestamp": 1670106310
    },
    {
        "content": "<p>BTW, I left in all the compiler bugs in separate files in case you're interested in duplication compiler issues.</p>",
        "id": 313739709,
        "sender_full_name": "JesterXL",
        "timestamp": 1670106329
    }
]