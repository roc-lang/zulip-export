[
    {
        "content": "<p>Here is mine:  <a href=\"https://github.com/ostcar/aoc2024/blob/main/day08.roc\">https://github.com/ostcar/aoc2024/blob/main/day08.roc</a></p>\n<p>part1 in 1.747ms<br>\npart2 in 4.987ms</p>\n<p>It took me some time, because I did all the bugs that are even possible.</p>\n<p>One of them was this</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>input\n        |&gt; Str.splitOn \"\\n\"\n        |&gt; List.walkWithIndex (Dict.empty {}) \\acc, line, row -&gt;\n            line\n            |&gt; Str.toUtf8\n            |&gt; List.walkWithIndex acc \\acc2, char, col -&gt;\n                if char == '.' then\n                    acc\n                    else\n\n                acc2\n                |&gt; Dict.update char \\value -&gt;\n                    value\n                    |&gt; Result.withDefault []\n                    |&gt; List.append { row: row |&gt; Num.toI64, col: col |&gt; Num.toI64 }\n                    |&gt; Ok\n</code></pre></div>\n</div></div>\n<p>Can you see it? It took me around have of an hour. Hint: This bug will not happen anymore, when shadowing is allowed.</p>",
        "id": 486746757,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1733644782
    },
    {
        "content": "<p>The fun of number suffixes</p>",
        "id": 486747423,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733645370
    },
    {
        "content": "<p>I occasionally pulled certain lambdas into separate top level functions to avoid naming issues like that.</p>",
        "id": 486747521,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733645456
    },
    {
        "content": "<p>Today went smoothly, getting more and more confortable with the standard library :) <br>\n<a href=\"https://github.com/RobinCamarasa/Advent-of-code/blob/master/2024/day08/RobinCamarasa/main.roc\">https://github.com/RobinCamarasa/Advent-of-code/blob/master/2024/day08/RobinCamarasa/main.roc</a></p>",
        "id": 486755959,
        "sender_full_name": "Robin Camarasa",
        "timestamp": 1733652894
    },
    {
        "content": "<p>Here's my solution... only made it as far as part 1 so far.</p>\n<p><a href=\"https://github.com/lukewilliamboswell/aoc/blob/main/2024/08.roc\">https://github.com/lukewilliamboswell/aoc/blob/main/2024/08.roc</a></p>\n<div class=\"codehilite\"><pre><span></span><code>TIMING:\nREADING INPUT:  &lt;1ms\nSOLVING PART 1: 2ms\n</code></pre></div>",
        "id": 486756595,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733653378
    },
    {
        "content": "<p>Done for me too <a href=\"https://github.com/thenikso/advent-of-code-2024-roc/blob/main/08.roc\">https://github.com/thenikso/advent-of-code-2024-roc/blob/main/08.roc</a></p>\n<div class=\"codehilite\"><pre><span></span><code>Day 08 part 1: (Ok ...) [1ms]\nDay 08 part 2: (Ok ...) [1ms]\n</code></pre></div>\n<p>Using again the excellent  <a href=\"https://github.com/mulias/roc-array2d\">Array2D</a></p>",
        "id": 486757785,
        "sender_full_name": "Nicola Peduzzi",
        "timestamp": 1733654258
    },
    {
        "content": "<p>Just about to start on this.  Can someone explain this sentence from Part 1?</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>In particular, an antinode occurs at any point that is perfectly in line with two antennas of the same frequency - but only when one of the antennas is twice as far away as the other\n</code></pre></div>\n<p>Specifically that last clause</p>",
        "id": 486798327,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733687700
    },
    {
        "content": "<p>Looking at the examples, it doesn't seem to really mean anything?</p>",
        "id": 486798382,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733687748
    },
    {
        "content": "<p>I think it means: an antinode exists at a point directly in line with two antennas and as far from the nearest antenna as they are from each other. So if two antennas are due north/south and 2 rows apart, an antinode will occur at the point due north and 2 rows above the northern one, and due south and 2 rows below the southern one.</p>",
        "id": 486798837,
        "sender_full_name": "Paul Stanley",
        "timestamp": 1733688120
    },
    {
        "content": "<p>Thanks. That’s what I deduced from the example, but I still can’t parse that sentence to mean that <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 486801228,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733690069
    },
    {
        "content": "<p>I don't disagree! It's a very confused way of explaining.</p>",
        "id": 486801273,
        "sender_full_name": "Paul Stanley",
        "timestamp": 1733690133
    },
    {
        "content": "<p>Sometimes you add debugger statements, and they lead you down an hour long rabbit hole before you figure out that the output is not what you think <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 487022180,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733757504
    },
    {
        "content": "<p><a href=\"https://github.com/gamebox/aoc-2024/tree/main/day8\">https://github.com/gamebox/aoc-2024/tree/main/day8</a></p>",
        "id": 487022425,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733757560
    },
    {
        "content": "<p>This instrumentation tells me both parts take less than 1ns, which does not seem right...</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>main =\n    now = Utc.now! {}\n    p1Start = Utc.toNanosSinceEpoch now\n    total = getTotal realInput\n    p1End =\n        Utc.now! {}\n        |&gt; Utc.toNanosSinceEpoch\n    part2 = getPart2Total realInput\n    p2End =\n        Utc.now! {}\n        |&gt; Utc.toNanosSinceEpoch\n    Stdout.line! \"There are $(Num.toStr total) obstacles, and $(Num.toStr part2) with harmonics.\"\n    Stdout.line! \"Part 1: $(Num.toStr (p1End - p1Start))ns\"\n    Stdout.line! \"Part 2: $(Num.toStr (p2End - p1End))ns\"\n</code></pre></div>",
        "id": 487023975,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733757940
    },
    {
        "content": "<p>Is that expected?</p>",
        "id": 487024009,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733757949
    },
    {
        "content": "<p>I don't see anything wrong with the calculation, you can paste your solution in <a href=\"https://github.com/lukewilliamboswell/aoc-template\">Luke's aoc tempplate</a> to compare measurements</p>",
        "id": 487036753,
        "sender_full_name": "Anton",
        "timestamp": 1733760499
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"781658\">@Anthony Bullard</span> this is testing with the input.txt in the repo?</p>",
        "id": 487070332,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733769410
    },
    {
        "content": "<p>Yeah with optimized build</p>",
        "id": 487071539,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733769808
    },
    {
        "content": "<p>I definitely did NOT build my solution with perf in mind</p>",
        "id": 487071592,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733769830
    },
    {
        "content": "<blockquote>\n<p><code>Utc.toNanosSinceEpoch</code></p>\n</blockquote>\n<p>At least for me on mac, the timer we are based off of is only timing in microseconds. I either see:</p>\n<div class=\"codehilite\"><pre><span></span><code>There are 305 obstacles, and 1150 with harmonics.\nPart 1: 0ns\nPart 2: 0ns\n</code></pre></div>\n<p>or:</p>\n<div class=\"codehilite\"><pre><span></span><code>There are 305 obstacles, and 1150 with harmonics.\nPart 1: 1000ns\nPart 2: 0ns\n</code></pre></div>",
        "id": 487072109,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733769967
    },
    {
        "content": "<p>Last 3 digits of printing out the nanoseconds is always zero</p>",
        "id": 487072203,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733769997
    },
    {
        "content": "<p>That's what I was thinking</p>",
        "id": 487072227,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733770006
    },
    {
        "content": "<p>So no greater precision than ms</p>",
        "id": 487072257,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733770015
    },
    {
        "content": "<p>I'm also on Mac</p>",
        "id": 487072333,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733770037
    },
    {
        "content": "<p>us, not ms, but yeah</p>",
        "id": 487072390,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733770062
    },
    {
        "content": "<p>Makes sense, thanks for verifying that</p>",
        "id": 487072393,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733770063
    },
    {
        "content": "<p>still runs within a microsecond which is quite fast for aoc in general</p>",
        "id": 487072488,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733770087
    },
    {
        "content": "<p>Yeah, duh us</p>",
        "id": 487072556,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733770114
    },
    {
        "content": "<p>Fast is nice for AOC, but never my first goal.  Especially in a language I'm still learning</p>",
        "id": 487072673,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733770156
    },
    {
        "content": "<p>Ah yeah, utc.time is based on <a href=\"https://doc.rust-lang.org/std/time/struct.SystemTime.html\">SystemTime</a>, which is not meant for measuring time elapsed. It is meant getting the current real world time. We should be basing time measurements on <a href=\"https://doc.rust-lang.org/std/time/struct.Instant.html\">Instant</a>.</p>\n<p>With instant (I think wired correctly, but it is adhoc to send it through the utc.time api), I see:</p>\n<div class=\"codehilite\"><pre><span></span><code>Part 1: 2625ns\nPart 2: 84ns\n</code></pre></div>",
        "id": 487075084,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733770844
    },
    {
        "content": "<p>So we may want a different timer tool in basic cli for differential time measurements.</p>",
        "id": 487075194,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733770873
    },
    {
        "content": "<p>System time isn't even guaranteed to be monotonic (it can go backwards)</p>",
        "id": 487075259,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733770893
    },
    {
        "content": "<p>Actually, sorry, this is correct timing. The early one had init issues (first one was measuring locking and initializing an OnceLock in rust):</p>\n<div class=\"codehilite\"><pre><span></span><code>Part 1: 84ns\nPart 2: 83ns\n</code></pre></div>",
        "id": 487075844,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733771054
    },
    {
        "content": "<p>Thanks, seems like that should definitely be in the basic-cli platform</p>",
        "id": 487080622,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733772423
    },
    {
        "content": "<p>WHich reminds me ... every been any talk of working out a common interface for common types across platforms - like a POSIX for Roc platforms ?  Not mandatory, but most non-client oriented platforms would strive to implement it (same interface in Roc that is)</p>",
        "id": 487080892,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733772516
    },
    {
        "content": "<p>That way if I use File in basic-cli, I could expect to find the same API available in basic-webserver?</p>",
        "id": 487080980,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733772547
    },
    {
        "content": "<p>It has been discussed a little. I have pushed for the idea of interfaces a few times. I think with static dispatch, we will get a solution (though not sure if it will be enough)</p>",
        "id": 487082092,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733772889
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> <a href=\"#narrow/channel/358903-advent-of-code/topic/2024.20Day.208/near/487080892\">said</a>:</p>\n<blockquote>\n<p>WHich reminds me ... every been any talk of working out a common interface for common types across platforms - like a POSIX for Roc platforms ?  Not mandatory, but most non-client oriented platforms would strive to implement it (same interface in Roc that is)</p>\n</blockquote>\n<p>Richard has done a lot of design work on the path package, just needs implementation  </p>\n<p><a href=\"https://github.com/roc-lang/path\">https://github.com/roc-lang/path</a></p>",
        "id": 487095448,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733777309
    },
    {
        "content": "<p>He gave a presentation on it in this meetup <a href=\"#narrow/channel/303057-gatherings/topic/Roc.20Online.20Meetup.20Aug.202024/near/464907794\">https://roc.zulipchat.com/#narrow/channel/303057-gatherings/topic/Roc.20Online.20Meetup.20Aug.202024/near/464907794</a></p>",
        "id": 487095660,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733777381
    },
    {
        "content": "<p>So we definitely have a lowering bug with Task <code>!</code> and <code>|&gt;</code></p>\n<div class=\"codehilite\"><pre><span></span><code>main =\n    now = Utc.now! {}\n    p1Start = Utc.toNanosSinceEpoch now\n    total = getTotal realInput\n    p1End =\n        Utc.now! {}\n        |&gt; Utc.toNanosSinceEpoch\n    part2 = getPart2Total realInput\n    p2End =\n        Utc.now! {}\n        |&gt; Utc.toNanosSinceEpoch\n    Stdout.line! &quot;There are $(Num.toStr total) obstacles, and $(Num.toStr part2) with harmonics.&quot;\n    Stdout.line! &quot;Part 1: $(Num.toStr (p1End - p1Start))ns&quot;\n    Stdout.line! &quot;Part 2: $(Num.toStr (p2End - p1End))ns&quot;\n</code></pre></div>\n<p>This gives garbage times as if all of the <code>Utc.now!</code> are called back to back.<br>\nIf you remove the <code>|&gt;</code> and makes separate variables, the timings become reasonable.</p>",
        "id": 487183716,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733817824
    },
    {
        "content": "<p>This should work:</p>\n<div class=\"codehilite\"><pre><span></span><code>main =\n    now = Utc.now! {}\n    p1Start = Utc.toNanosSinceEpoch now\n    total = getTotal realInput\n    p1EndTime = Utc.now! {}\n    p1End = Utc.toNanosSinceEpoch p1EndTime\n    part2 = getPart2Total realInput\n    p2EndTime = Utc.now! {}\n    p2End = Utc.toNanosSinceEpoch p2EndTime\n    Stdout.line! &quot;There are $(Num.toStr total) obstacles, and $(Num.toStr part2) with harmonics.&quot;\n    Stdout.line! &quot;Part 1: $(Num.toStr (p1End - p1Start))ns&quot;\n    Stdout.line! &quot;Part 2: $(Num.toStr (p2End - p1End))ns&quot;\n</code></pre></div>",
        "id": 487183991,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733817930
    },
    {
        "content": "<p>Not sure if this is a bug worth fixing cause it may go away with <code>Task</code>, but we should double check it isn't broken with purity inference.</p>",
        "id": 487184084,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733817962
    },
    {
        "content": "<p>CC: <span class=\"user-mention\" data-user-id=\"781658\">@Anthony Bullard</span> roc bug breaking timing and a workaround</p>",
        "id": 488157444,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733940486
    },
    {
        "content": "<p>Thanks for looking into that <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span></p>",
        "id": 488157634,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733940559
    }
]