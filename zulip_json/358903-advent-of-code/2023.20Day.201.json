[
    {
        "content": "<p>Here is <a href=\"https://gist.github.com/lukewilliamboswell/02dd54d9e841ff18546712081b46578a\">my solution for day 1</a>. </p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>why it took me so long</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>I was able to build most of this and do part one very quickly, but for part 2 I had incorrectly assumed that the spelled out digits were not allowed to overlap which took me waaay to long to figure out that that assumption was incorrect.  </p>\n</div></div>",
        "id": 405290959,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1701413357
    },
    {
        "content": "<p>Looks clean <span aria-label=\"star\" class=\"emoji emoji-2b50\" role=\"img\" title=\"star\">:star:</span></p>",
        "id": 405330243,
        "sender_full_name": "Anton",
        "timestamp": 1701425956
    },
    {
        "content": "<p>Here is mine! <a href=\"https://github.com/lindskogen/advent-of-code-2023/blob/main/day01/main.roc\">https://github.com/lindskogen/advent-of-code-2023/blob/main/day01/main.roc</a></p>\n<p>I struggled a lot with part 2 and eventually looked at the subreddit to find this dead-simple solution.</p>\n<p>Now I need to re-read yours again, <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span>  until I understand it!</p>",
        "id": 405337335,
        "sender_full_name": "Johan Lindskogen",
        "timestamp": 1701428273
    },
    {
        "content": "<p>Nice, I've never seen <code>List.findFirst</code> before, looks really useful for this problem.</p>",
        "id": 405337757,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1701428443
    },
    {
        "content": "<p>Tried Roc for advent of code and immediately hit a compiler/runtime bug in part 2, where it mutates some shared memory I think in combination with tail recursion?  <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span> That's what I get for thinking I don't need to know all the <code>List.walk</code> invocations  <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>\n<p>Otherwise, I'm pretty happy with that: <a href=\"https://gitlab.com/arkandos/aoc/-/blob/2023/solutions/day1.roc?ref_type=heads\">https://gitlab.com/arkandos/aoc/-/blob/2023/solutions/day1.roc?ref_type=heads</a><br>\nIt's not the fastest solution, but it turned out pretty concise I think (also maybe I abuse backpassing to much? but it's so cool!)</p>",
        "id": 405345685,
        "sender_full_name": "joshi",
        "timestamp": 1701431653
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>reproduction</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>prefixes = \\str, soFar -&gt;\n    if Str.isEmpty str then\n        soFar\n\n    else\n        next = str\n            |&gt; Str.graphemes\n            |&gt; List.dropFirst 1\n            |&gt; Str.joinWith \"\"\n\n        prefixes next (List.append soFar str)\n\n\nexpect prefixes \"abc\" [] == [\"abc\", \"c\", \"\"] # passes\nexpect prefixes \"abc\" [] == [\"abc\", \"bc\", \"c\"] # fails\n</code></pre></div>\n</div></div>",
        "id": 405345841,
        "sender_full_name": "joshi",
        "timestamp": 1701431719
    },
    {
        "content": "<p>Here is mine: <a href=\"https://github.com/ostcar/aoc2023/blob/main/days/day01.roc\">https://github.com/ostcar/aoc2023/blob/main/days/day01.roc</a></p>\n<p>For me, it was the first time to actually write some roc code. So it was a lot of reading in the builtin documentation.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Some Questions</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>There is a function <code>Str.startsWithScalar</code>but no <code>Str.endsWithScalar</code>. Is this on purpose?</p>\n<p>Is there an easy way to slice a string? For example myStr[1:]? (Drop the first element in a memory efficient way)</p>\n<p>My solution was </p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>s\n|&gt; Str.graphemes\n|&gt; List.dropFirst 1\n|&gt; Str.joinWith \"\"\n</code></pre></div>\n<p>Is the <code>Str.joinWith</code> smart enough to see, that no allocation is needed?</p>\n</div></div>",
        "id": 405350559,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1701432809
    },
    {
        "content": "<p>Heres mine! <a href=\"https://github.com/JRMurr/AdventOfCode2023/blob/main/roc/D01/Day.roc\">https://github.com/JRMurr/AdventOfCode2023/blob/main/roc/D01/Day.roc</a></p>\n<blockquote>\n<p>I struggled a lot with part 2 and eventually looked at the subreddit to find this dead-simple solution.</p>\n</blockquote>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>\"optimal way\"</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>The idea to replace \"one\" with \"one1one\" etc is so smart. I tried just <code>1one</code> but didnt realize i needed the prefix</p>\n</div></div>",
        "id": 405376267,
        "sender_full_name": "John Murray",
        "timestamp": 1701441370
    },
    {
        "content": "<p><a href=\"https://gitlab.com/AsbjornOlling/aoc2023\">https://gitlab.com/AsbjornOlling/aoc2023</a><br>\nHere is mine... I spent longer with this than I will ever admit.<br>\nMostly just getting familiar with roc stuff, I suppose. The algorithm I came up with worked as soon as I could figure out what symbols to type in what order <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<p>It's way more verbose than it needs to be, but hey.<br>\nNow I'm gonna go look over it and try and make it small and pretty and readable.</p>\n<p>Also this was the first time I wrote more than 5 lines of roc code.</p>",
        "id": 405380771,
        "sender_full_name": "Asbjørn Olling",
        "timestamp": 1701442843
    },
    {
        "content": "<p>Roc feels pretty comfy so far. I got some weird errors along the way, but eh once I reformulated myself a bit and double-checked my types, stuff started working again.<br>\nI struggled a bit getting <code>dbg</code> to work - turns out I just needed to update basic-cli to 0.7.0</p>",
        "id": 405381635,
        "sender_full_name": "Asbjørn Olling",
        "timestamp": 1701443090
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"630752\">joshi</span> <a href=\"#narrow/stream/358903-Advent-of-Code/topic/2023.20Day.201/near/405345685\">said</a>:</p>\n<blockquote>\n<p>Tried Roc for advent of code and immediately hit a compiler/runtime bug in part 2, where it mutates some shared memory I think in combination with tail recursion?  <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span> That's what I get for thinking I don't need to know all the <code>List.walk</code> invocations  <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>\n</blockquote>\n<p>Any chance you have or can make a repro? That seems like a pretty major bug that I'm sure many people here would love to look into.</p>",
        "id": 405383422,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701443642
    },
    {
        "content": "<p>Repro is <a href=\"#narrow/stream/358903-Advent-of-Code/topic/2023.20Day.201/near/405345841\">here</a></p>",
        "id": 405384340,
        "sender_full_name": "Anton",
        "timestamp": 1701443894
    },
    {
        "content": "<p>Oh, I'm blind sometimes...</p>",
        "id": 405387068,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701444732
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"496321\">@Oskar Hahn</span> <a href=\"#narrow/stream/231634-beginners/topic/string.20manipulation.20questions/near/405394581\">https://roc.zulipchat.com/#narrow/stream/231634-beginners/topic/string.20manipulation.20questions/near/405394581</a></p>",
        "id": 405394821,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1701447340
    },
    {
        "content": "<p><a href=\"https://github.com/keeslinp/AoC2023/blob/main/day1.roc\">https://github.com/keeslinp/AoC2023/blob/main/day1.roc</a></p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Sounds like I'm not the only one</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>Sounds like most people came up with the same \"clever\" prefix + postfix solution <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>\n</div></div>",
        "id": 405410460,
        "sender_full_name": "Pearce Keesling",
        "timestamp": 1701452555
    },
    {
        "content": "<p><a href=\"https://github.com/bhansconnect/roc-aoc-2023/blob/main/day1.roc\">https://github.com/bhansconnect/roc-aoc-2023/blob/main/day1.roc</a></p>",
        "id": 405420390,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701456776
    },
    {
        "content": "<p>I also made an issue now here: <a href=\"https://github.com/roc-lang/roc/issues/6139\">https://github.com/roc-lang/roc/issues/6139</a> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 405420775,
        "sender_full_name": "joshi",
        "timestamp": 1701456953
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/358903-Advent-of-Code/topic/2023.20Day.201/near/405420390\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/bhansconnect/roc-aoc-2023/blob/main/day1.roc\">https://github.com/bhansconnect/roc-aoc-2023/blob/main/day1.roc</a></p>\n</blockquote>\n<p>I tested some of the solutions in my platform to test for speed. Yours is the first one, where part2 is faster then part1 <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span> </p>\n<div class=\"codehilite\"><pre><span></span><code>Part1 in 17.635ms:\nXXX\n\nPart2 in 10.552ms:\nXXX\n</code></pre></div>",
        "id": 405421797,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1701457316
    },
    {
        "content": "<p>haha nice! That makes senses looking at the code. Though I guess I could speed up part 1 by copying code from part2</p>",
        "id": 405423385,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701457846
    },
    {
        "content": "<p>For those working on AOC, please add your repos to the <a href=\"https://github.com/topics/roc-lang\">roc-lang</a> topic on github.</p>",
        "id": 405430697,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701461110
    },
    {
        "content": "<p>Helps us track how close we are to 200 repos, which is one option for the requirement to get github syntax highlighting</p>",
        "id": 405430784,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701461155
    },
    {
        "content": "<p>Gotta move to github then!</p>",
        "id": 405437959,
        "sender_full_name": "joshi",
        "timestamp": 1701464699
    },
    {
        "content": "<p>TIL you can import txt files as a variable!</p>\n<p>I'll also add to Github topics before AOC is done.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Here's My Day 1</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">app</span><span class=\"w\"> </span><span class=\"s\">\"hello\"</span>\n<span class=\"w\">    </span><span class=\"nv\">packages</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">pf</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/roc-lang/basic-cli/releases/download/0.7.0/bkGby8jb0tmZYsy2hg1E_B2QrCgcSTxdUlHtETwm5m4.tar.br\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"nv\">imports</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">pf</span><span class=\"nf\">.</span><span class=\"kt\">Stdout</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">pf</span><span class=\"nf\">.</span><span class=\"kt\">Task</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"./day1-input.txt\"</span><span class=\"w\"> </span><span class=\"kr\">as</span><span class=\"w\"> </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"nv\">provides</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nv\">to</span><span class=\"w\"> </span><span class=\"nv\">pf</span>\n\n<span class=\"kr\">main </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"s\">\"The total sum is \\(part1)\"</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">await</span>\n<span class=\"w\">    </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"s\">\"Wait, no... it's \\(part2)\"</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">await</span>\n\n<span class=\"w\">    </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">ok</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n\n<span class=\"nv\">part1</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">sumNums</span><span class=\"w\"> </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toStr</span>\n<span class=\"nv\">part2</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">repairDoc</span><span class=\"w\"> </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">sumNums</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toStr</span>\n\n<span class=\"nv\">repairDoc</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">doc</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"kt\">Words</span><span class=\"w\"> </span><span class=\"nv\">are</span><span class=\"w\"> </span><span class=\"nv\">overlapped</span><span class=\"w\"> </span><span class=\"nv\">throughout</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">e</span><span class=\"nf\">.</span><span class=\"nv\">g</span><span class=\"nf\">.</span><span class=\"w\"> </span><span class=\"nv\">twone</span><span class=\"w\"> </span><span class=\"nv\">is</span><span class=\"w\"> </span><span class=\"mi\">21</span>\n<span class=\"w\">    </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"kt\">Replacing</span><span class=\"w\"> </span><span class=\"nv\">each</span><span class=\"w\"> </span><span class=\"nv\">with</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">digit</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">but</span><span class=\"w\"> </span><span class=\"nv\">keeping</span><span class=\"w\"> </span><span class=\"nv\">the</span><span class=\"w\"> </span><span class=\"nv\">full</span>\n<span class=\"w\">    </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nv\">original</span><span class=\"w\"> </span><span class=\"nv\">word</span><span class=\"w\"> </span><span class=\"nv\">intact</span><span class=\"w\"> </span><span class=\"nv\">to</span><span class=\"w\"> </span><span class=\"nv\">allow</span><span class=\"w\"> </span><span class=\"nv\">all</span><span class=\"w\"> </span><span class=\"nv\">overlaps</span>\n<span class=\"w\">    </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">replaceEach</span><span class=\"w\"> </span><span class=\"nv\">doc</span><span class=\"w\"> </span><span class=\"s\">\"one\"</span><span class=\"w\"> </span><span class=\"s\">\"one1one\"</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">replaceEach</span><span class=\"w\"> </span><span class=\"s\">\"two\"</span><span class=\"w\"> </span><span class=\"s\">\"two2two\"</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">replaceEach</span><span class=\"w\"> </span><span class=\"s\">\"three\"</span><span class=\"w\"> </span><span class=\"s\">\"three3three\"</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">replaceEach</span><span class=\"w\"> </span><span class=\"s\">\"four\"</span><span class=\"w\"> </span><span class=\"s\">\"four4four\"</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">replaceEach</span><span class=\"w\"> </span><span class=\"s\">\"five\"</span><span class=\"w\"> </span><span class=\"s\">\"five5five\"</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">replaceEach</span><span class=\"w\"> </span><span class=\"s\">\"six\"</span><span class=\"w\"> </span><span class=\"s\">\"six6six\"</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">replaceEach</span><span class=\"w\"> </span><span class=\"s\">\"seven\"</span><span class=\"w\"> </span><span class=\"s\">\"seven7seven\"</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">replaceEach</span><span class=\"w\"> </span><span class=\"s\">\"eight\"</span><span class=\"w\"> </span><span class=\"s\">\"eight8eight\"</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">replaceEach</span><span class=\"w\"> </span><span class=\"s\">\"nine\"</span><span class=\"w\"> </span><span class=\"s\">\"nine9nine\"</span>\n\n<span class=\"nv\">sumNums</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">doc</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"w\"> </span><span class=\"nv\">doc</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">parseLine</span><span class=\"w\"> </span><span class=\"nv\">line</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">sum</span>\n\n<span class=\"nv\">parseLine</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">graphemes</span><span class=\"w\"> </span><span class=\"nv\">line</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">keepOks</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toU32</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">numList</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"nf\">*</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">withDefault</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">first</span><span class=\"w\"> </span><span class=\"nv\">numList</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">withDefault</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">last</span><span class=\"w\"> </span><span class=\"nv\">numList</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"nv\">debug</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">v</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">dbg</span><span class=\"w\"> </span><span class=\"nv\">v</span>\n<span class=\"w\">    </span><span class=\"nv\">v</span>\n</code></pre></div>\n</div></div>",
        "id": 405439982,
        "sender_full_name": "Jason Hobbs",
        "timestamp": 1701465761
    },
    {
        "content": "<p>Looks like most of us worked based of the same example <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> <br>\n<a href=\"https://github.com/axelerator/aoc23/blob/main/01/main.roc\">Here is my solution that looks very similar to everyone else's</a></p>",
        "id": 405446598,
        "sender_full_name": "Axel",
        "timestamp": 1701469125
    },
    {
        "content": "<p>Don't worry, I deliberately did something convoluted and it turned out even worse than I thought it would!<br>\n<a href=\"https://gist.github.com/mulias/9b963ac61fd25426b8b519633ffcd40e\">https://gist.github.com/mulias/9b963ac61fd25426b8b519633ffcd40e</a></p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Bad decisions</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>I thought it would be fun to use a parser for this one and put the entire solution inside the parser. That was fine for part 1, but then part 2 came along and really made it gross. </p>\n<p>I feel like this was an unusually difficult day 1. Usually the first day is just adding up some list items, but the part where spelled out numbers could overlap felt like the kind of gotcha that shows up at least a few days in. </p>\n</div></div>",
        "id": 405450654,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1701471499
    },
    {
        "content": "<p>Yeah, I thought the same for the gotcha</p>",
        "id": 405451083,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701471676
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"481892\">@Axel</span> I like your <code>digitParser : Parser (List U8) (Result Nat Str)</code> that looks like a nice way to do that</p>",
        "id": 405451495,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1701471812
    },
    {
        "content": "<p>I was looking for a <code>Maybe</code> type and when I didn't find one this is what I ended up using <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 405451753,
        "sender_full_name": "Axel",
        "timestamp": 1701471923
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"481892\">@Axel</span> I just looked at yours and we actually did the same thing, but I like your version more <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 405452555,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1701472375
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/blob/main/FAQ.md#why-doesnt-roc-have-a-maybe-or-option-or-optional-type-or-null-or-nil-or-undefined\">https://github.com/roc-lang/roc/blob/main/FAQ.md#why-doesnt-roc-have-a-maybe-or-option-or-optional-type-or-null-or-nil-or-undefined</a></p>",
        "id": 405452682,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701472457
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>My solution</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">app</span><span class=\"w\"> </span><span class=\"s\">\"AoC\"</span>\n<span class=\"w\">    </span><span class=\"nv\">packages</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nv\">pf</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/roc-lang/basic-cli/releases/download/0.7.0/bkGby8jb0tmZYsy2hg1E_B2QrCgcSTxdUlHtETwm5m4.tar.br\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"nv\">imports</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">pf</span><span class=\"nf\">.</span><span class=\"kt\">Stdout</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">pf</span><span class=\"nf\">.</span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"s\">\"day-1-input.txt\"</span><span class=\"w\"> </span><span class=\"kr\">as</span><span class=\"w\"> </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"nv\">provides</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nv\">to</span><span class=\"w\"> </span><span class=\"nv\">pf</span>\n\n<span class=\"kr\">main </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">*</span>\n<span class=\"kr\">main </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"nv\">part1</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">await</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"nv\">part2</span>\n\n<span class=\"nv\">part1</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span>\n<span class=\"nv\">part1</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">input</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">dropIf</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">isEmpty</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toUtf8</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"nv\">ds</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">determineCalibration</span><span class=\"w\"> </span><span class=\"nv\">ds</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">false</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">sum</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toStr</span>\n\n<span class=\"nv\">part2</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span>\n<span class=\"nv\">part2</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">input</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">dropIf</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">isEmpty</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toUtf8</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"nv\">ds</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">determineCalibration</span><span class=\"w\"> </span><span class=\"nv\">ds</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">true</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">sum</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toStr</span>\n\n<span class=\"nv\">determineCalibration</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">digits</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">word</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">first</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">firstDigit</span><span class=\"w\"> </span><span class=\"nv\">digits</span><span class=\"w\"> </span><span class=\"nv\">word</span>\n<span class=\"w\">    </span><span class=\"nv\">last</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">lastDigit</span><span class=\"w\"> </span><span class=\"nv\">digits</span><span class=\"w\"> </span><span class=\"nv\">word</span>\n<span class=\"w\">    </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toU64</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"nf\">*</span><span class=\"nv\">first</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"nv\">last</span><span class=\"p\">)</span>\n\n<span class=\"nv\">firstDigit</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">digitsIn</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">word</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">go</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">digits</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">digits</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"nv\">n</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">..</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"w\"> </span><span class=\"nf\">&gt;=</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"mi\">0</span><span class=\"nf\">'</span><span class=\"w\"> </span><span class=\"nf\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"w\"> </span><span class=\"nf\">&lt;=</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"mi\">9</span><span class=\"nf\">'</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"w\"> </span><span class=\"nf\">-</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"mi\">0</span><span class=\"nf\">'</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"nf\">'</span><span class=\"nv\">o'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">n'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">e'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">..</span><span class=\"p\">]</span><span class=\"w\">         </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">word</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"nf\">'</span><span class=\"nv\">t'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">w'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">o'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">..</span><span class=\"p\">]</span><span class=\"w\">         </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">word</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"nf\">'</span><span class=\"nv\">t'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">h'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">r'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">e'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">e'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">..</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">word</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">3</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"nf\">'</span><span class=\"nv\">f'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">o'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">u'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">r'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">..</span><span class=\"p\">]</span><span class=\"w\">     </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">word</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">4</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"nf\">'</span><span class=\"nv\">f'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">i'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">v'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">e'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">..</span><span class=\"p\">]</span><span class=\"w\">     </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">word</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">5</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"nf\">'</span><span class=\"nv\">s'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">i'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">x'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">..</span><span class=\"p\">]</span><span class=\"w\">         </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">word</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">6</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"nf\">'</span><span class=\"nv\">s'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">e'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">v'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">e'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">n'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">..</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">word</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">7</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"nf\">'</span><span class=\"nv\">e'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">i'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">g'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">h'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">t'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">..</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">word</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">8</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"nf\">'</span><span class=\"nv\">n'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">i'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">n'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">e'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">..</span><span class=\"p\">]</span><span class=\"w\">     </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">word</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">9</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"nv\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">..</span><span class=\"w\"> </span><span class=\"kr\">as</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">go</span><span class=\"w\"> </span><span class=\"nv\">rest</span>\n<span class=\"w\">            </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">crash</span><span class=\"w\"> </span><span class=\"s\">\"No firstDigitits left\"</span>\n<span class=\"w\">    </span><span class=\"nv\">go</span><span class=\"w\"> </span><span class=\"nv\">digitsIn</span>\n\n<span class=\"nv\">lastDigit</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">digitsIn</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">word</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">go</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">digits</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">digits</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"nf\">..</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"w\"> </span><span class=\"nf\">&gt;=</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"mi\">0</span><span class=\"nf\">'</span><span class=\"w\"> </span><span class=\"nf\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"w\"> </span><span class=\"nf\">&lt;=</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"mi\">9</span><span class=\"nf\">'</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"w\"> </span><span class=\"nf\">-</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"mi\">0</span><span class=\"nf\">'</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"nf\">..</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"nv\">o'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">n'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">e'</span><span class=\"p\">]</span><span class=\"w\">         </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">word</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"nf\">..</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"nv\">t'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">w'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">o'</span><span class=\"p\">]</span><span class=\"w\">         </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">word</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"nf\">..</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"nv\">t'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">h'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">r'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">e'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">e'</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">word</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">3</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"nf\">..</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"nv\">f'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">o'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">u'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">r'</span><span class=\"p\">]</span><span class=\"w\">     </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">word</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">4</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"nf\">..</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"nv\">f'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">i'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">v'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">e'</span><span class=\"p\">]</span><span class=\"w\">     </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">word</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">5</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"nf\">..</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"nv\">s'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">i'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">x'</span><span class=\"p\">]</span><span class=\"w\">         </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">word</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">6</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"nf\">..</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"nv\">s'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">e'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">v'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">e'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">n'</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">word</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">7</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"nf\">..</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"nv\">e'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">i'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">g'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">h'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">t'</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">word</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">8</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"nf\">..</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"nv\">n'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">i'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">n'</span><span class=\"p\">,</span><span class=\"nf\">'</span><span class=\"nv\">e'</span><span class=\"p\">]</span><span class=\"w\">     </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">word</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">9</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"nf\">..</span><span class=\"w\"> </span><span class=\"kr\">as</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">go</span><span class=\"w\"> </span><span class=\"nv\">rest</span>\n<span class=\"w\">            </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">crash</span><span class=\"w\"> </span><span class=\"s\">\"No firstDigitits left\"</span>\n<span class=\"w\">    </span><span class=\"nv\">go</span><span class=\"w\"> </span><span class=\"nv\">digitsIn</span>\n</code></pre></div>\n</div></div>",
        "id": 405454141,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1701473485
    },
    {
        "content": "<p><a href=\"https://github.com/isaacvando/aoc/blob/main/2023/day1.roc\">https://github.com/isaacvando/aoc/blob/main/2023/day1.roc</a></p>",
        "id": 405455462,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1701474434
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"666594\">John Murray</span> <a href=\"#narrow/stream/358903-Advent-of-Code/topic/2023.20Day.201/near/405376267\">said</a>:</p>\n<blockquote>\n<p>Heres mine! <a href=\"https://github.com/JRMurr/AdventOfCode2023/blob/main/roc/D01/Day.roc\">https://github.com/JRMurr/AdventOfCode2023/blob/main/roc/D01/Day.roc</a></p>\n<blockquote>\n<p>I struggled a lot with part 2 and eventually looked at the subreddit to find this dead-simple solution.</p>\n</blockquote>\n</blockquote>\n<p>That trick is so slick <span aria-label=\"star struck\" class=\"emoji emoji-1f929\" role=\"img\" title=\"star struck\">:star_struck:</span></p>",
        "id": 405455815,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1701474709
    },
    {
        "content": "<p>As a currier, I ended up really confused when e.g. <code>solveWith : List (Str, Nat) -&gt; List Str -&gt; Nat</code> said that it expected end of file at the second arrow. Not sure if there's a ticket for that, but I suppose there's some parser error handling that needs to be handled or something?</p>\n<p>Also, because the Roc tutorial for Stdin data is on basic-cli 0.5.0 and latest basic-cli is 0.7.0, my initial \"copypaste-but-update-to-latest-version\" failed, as Stdin.line finally got fixed to return End instead of crashing on EOF (?). Which is what I wanted anyway, but heh, as a very new person to the language that got a bit confusing.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Day 1, part 1 and 2</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">app</span><span class=\"w\"> </span><span class=\"s\">\"day1\"</span>\n<span class=\"w\">    </span><span class=\"nv\">packages</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">pf</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/roc-lang/basic-cli/releases/download/0.7.0/bkGby8jb0tmZYsy2hg1E_B2QrCgcSTxdUlHtETwm5m4.tar.br\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"nv\">imports</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">        </span><span class=\"nv\">pf</span><span class=\"nf\">.</span><span class=\"kt\">Stdout</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">pf</span><span class=\"nf\">.</span><span class=\"kt\">Stdin</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">pf</span><span class=\"nf\">.</span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"nv\">provides</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nv\">to</span><span class=\"w\"> </span><span class=\"nv\">pf</span>\n\n<span class=\"kr\">main </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">lines</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"nv\">allLines</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">await</span>\n<span class=\"w\">    </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"nv\">problem1</span><span class=\"w\"> </span><span class=\"nv\">lines</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toStr</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">await</span>\n<span class=\"w\">    </span><span class=\"nv\">problem2</span><span class=\"w\"> </span><span class=\"nv\">lines</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toStr</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span>\n\n<span class=\"nv\">digits</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"s\">\"1\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"s\">\"2\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"s\">\"3\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"s\">\"4\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"s\">\"5\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"s\">\"6\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"s\">\"7\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"s\">\"8\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"s\">\"9\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"p\">),</span>\n<span class=\"w\">  </span><span class=\"p\">]</span>\n\n<span class=\"nv\">wordDigits</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"s\">\"one\"</span><span class=\"p\">,</span><span class=\"w\">   </span><span class=\"mi\">1</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"s\">\"two\"</span><span class=\"p\">,</span><span class=\"w\">   </span><span class=\"mi\">2</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"s\">\"three\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"s\">\"four\"</span><span class=\"p\">,</span><span class=\"w\">  </span><span class=\"mi\">4</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"s\">\"five\"</span><span class=\"p\">,</span><span class=\"w\">  </span><span class=\"mi\">5</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"s\">\"six\"</span><span class=\"p\">,</span><span class=\"w\">   </span><span class=\"mi\">6</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"s\">\"seven\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"s\">\"eight\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"s\">\"nine\"</span><span class=\"p\">,</span><span class=\"w\">  </span><span class=\"mi\">9</span><span class=\"p\">),</span>\n<span class=\"w\">  </span><span class=\"p\">]</span>\n\n\n<span class=\"nv\">problem1Assoc</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">digits</span>\n<span class=\"nv\">problem2Assoc</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">concat</span><span class=\"w\"> </span><span class=\"nv\">digits</span><span class=\"w\"> </span><span class=\"nv\">wordDigits</span>\n\n<span class=\"nv\">problem1</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Nat</span>\n<span class=\"nv\">problem1</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">  </span><span class=\"nv\">solveWith</span><span class=\"w\"> </span><span class=\"nv\">problem1Assoc</span><span class=\"w\"> </span><span class=\"nv\">x</span>\n\n<span class=\"nv\">problem2</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Nat</span>\n<span class=\"nv\">problem2</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">  </span><span class=\"nv\">solveWith</span><span class=\"w\"> </span><span class=\"nv\">problem2Assoc</span><span class=\"w\"> </span><span class=\"nv\">x</span>\n\n<span class=\"nv\">solveWith</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Nat</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Nat</span>\n<span class=\"nv\">solveWith</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">assoc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">xs</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">  </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nv\">xs</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">solve1</span><span class=\"w\"> </span><span class=\"nv\">assoc</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">sum</span>\n\n<span class=\"nv\">solve1</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Nat</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Nat</span>\n<span class=\"nv\">solve1</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">assoc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">  </span><span class=\"nv\">results</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">prefixes</span><span class=\"w\"> </span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">keepOks</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">digitFromPrefix</span><span class=\"w\"> </span><span class=\"nv\">assoc</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">first</span><span class=\"w\"> </span><span class=\"nv\">results</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">last</span><span class=\"w\"> </span><span class=\"nv\">results</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"nf\">*</span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"nv\">b</span>\n<span class=\"w\">    </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n\n<span class=\"nv\">digitFromPrefix</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Nat</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"kt\">Nat</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">NotFound</span><span class=\"p\">]</span>\n<span class=\"nv\">digitFromPrefix</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">assoc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">prefix</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">  </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">walkUntil</span><span class=\"w\"> </span><span class=\"nv\">assoc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">NotFound</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"nv\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">k</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">v</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">startsWith</span><span class=\"w\"> </span><span class=\"nv\">prefix</span><span class=\"w\"> </span><span class=\"nv\">k</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"w\">      </span><span class=\"kt\">Break</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">v</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"kr\">else</span><span class=\"w\"> </span><span class=\"kt\">Continue</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">NotFound</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">)</span>\n\n<span class=\"err\">#</span><span class=\"w\"> </span><span class=\"kt\">Something</span><span class=\"w\"> </span><span class=\"nv\">funny's</span><span class=\"w\"> </span><span class=\"nv\">going</span><span class=\"w\"> </span><span class=\"nv\">on</span><span class=\"w\"> </span><span class=\"nv\">inside</span><span class=\"w\"> </span><span class=\"nv\">the</span><span class=\"w\"> </span><span class=\"kt\">Roc</span><span class=\"w\"> </span><span class=\"nv\">runtime</span><span class=\"nf\">:</span>\n<span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nv\">https</span><span class=\"nf\">://</span><span class=\"nv\">github</span><span class=\"nf\">.</span><span class=\"nv\">com</span><span class=\"nf\">/</span><span class=\"nv\">roc</span><span class=\"nf\">-</span><span class=\"nv\">lang</span><span class=\"nf\">/</span><span class=\"nv\">roc</span><span class=\"nf\">/</span><span class=\"nv\">issues</span><span class=\"nf\">/</span><span class=\"mi\">6139</span>\n\n<span class=\"nv\">prefixes</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Str</span>\n<span class=\"nv\">prefixes</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">s</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">  </span><span class=\"nv\">lst</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">graphemes</span><span class=\"w\"> </span><span class=\"nv\">s</span>\n<span class=\"w\">  </span><span class=\"nv\">len</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">len</span><span class=\"w\"> </span><span class=\"nv\">lst</span>\n\n<span class=\"w\">  </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nv\">start</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">At</span><span class=\"w\"> </span><span class=\"nv\">len</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">end</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">At</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span>\n<span class=\"w\">  </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">takeLast</span><span class=\"w\"> </span><span class=\"nv\">lst</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span>\n<span class=\"w\">  </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">joinWith</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"p\">)</span>\n\n<span class=\"nv\">allLines</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">*</span>\n<span class=\"nv\">allLines</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">   </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">loop</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"nv\">xs</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">     </span><span class=\"nv\">cur</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">await</span><span class=\"w\"> </span><span class=\"kt\">Stdin</span><span class=\"nf\">.</span><span class=\"nv\">line</span>\n<span class=\"w\">     </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">cur</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">       </span><span class=\"kt\">Input</span><span class=\"w\"> </span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">append</span><span class=\"w\"> </span><span class=\"nv\">xs</span><span class=\"w\"> </span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Step</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">ok</span>\n<span class=\"w\">       </span><span class=\"kt\">End</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Done</span><span class=\"w\"> </span><span class=\"nv\">xs</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">ok</span>\n<span class=\"w\">   </span><span class=\"p\">)</span>\n</code></pre></div>\n</div></div>",
        "id": 405460383,
        "sender_full_name": "Jean Niklas L'orange",
        "timestamp": 1701477061
    },
    {
        "content": "<p>Would need to be written as: <code>solveWith : List (Str, Nat) -&gt; (List Str -&gt; Nat)</code> (if you want explicit currying)</p>",
        "id": 405460644,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701477204
    },
    {
        "content": "<p>Probably we can generate a better error message for that case</p>",
        "id": 405460664,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701477217
    },
    {
        "content": "<p>First anything I've written in Roc. Started from your solution for part 1 <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> and took off from there. Would love feedback.</p>\n<p><a href=\"https://github.com/spalger/advent-of-code/blob/main/roc/2023/day1/main.roc\">https://github.com/spalger/advent-of-code/blob/main/roc/2023/day1/main.roc</a></p>",
        "id": 405484448,
        "sender_full_name": "Spencer Alger",
        "timestamp": 1701488722
    },
    {
        "content": "<p>I don't know if it is just personal preference, but there is an infix <code>==</code> operator if you don't want to do Bool.isEq everywhere</p>",
        "id": 405556768,
        "sender_full_name": "Pearce Keesling",
        "timestamp": 1701542109
    },
    {
        "content": "<p>So you can do <code>expect first numOrWord (Str.toUtf8 \"123\") == Match 1</code></p>",
        "id": 405562945,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1701547592
    },
    {
        "content": "<p>oops wrong convo</p>",
        "id": 405564888,
        "sender_full_name": "[REDACTED]",
        "timestamp": 1701549460
    },
    {
        "content": "<p>A little late to the party, but here's my solution for day 1.<br>\n<a href=\"https://github.com/ryanb/advent-2023-roc/blob/main/day01/main.roc\">https://github.com/ryanb/advent-2023-roc/blob/main/day01/main.roc</a></p>",
        "id": 405883296,
        "sender_full_name": "Ryan Bates",
        "timestamp": 1701712599
    },
    {
        "content": "<p>Looks like I'm late to the party too! But I had fun anyway!<br>\n<a href=\"https://github.com/Ocupe/advent-of-code-2023/blob/main/day_01/part1.roc\">Part 1</a> | <a href=\"https://github.com/Ocupe/advent-of-code-2023/blob/main/day_01/part2.roc\">Part 2</a></p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>Result<span class=\"w\"> </span>part<span class=\"w\"> </span><span class=\"m\">1</span>:<span class=\"w\">  </span><span class=\"m\">55002</span>\nIt<span class=\"w\"> </span>took<span class=\"w\"> </span>3ms<span class=\"w\"> </span>to<span class=\"w\"> </span>run<span class=\"w\"> </span>day<span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span>part<span class=\"w\"> </span><span class=\"m\">1</span>.\nResult<span class=\"w\"> </span>part<span class=\"w\"> </span><span class=\"m\">2</span>:<span class=\"w\">  </span><span class=\"m\">55093</span>\nIt<span class=\"w\"> </span>took<span class=\"w\"> </span>4ms<span class=\"w\"> </span>to<span class=\"w\"> </span>run<span class=\"w\"> </span>day<span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span>part<span class=\"w\"> </span><span class=\"m\">2</span>.\n</code></pre></div>",
        "id": 416918985,
        "sender_full_name": "Jonas Schell",
        "timestamp": 1705710959
    },
    {
        "content": "<p>Nice!</p>",
        "id": 416939661,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1705712929
    }
]