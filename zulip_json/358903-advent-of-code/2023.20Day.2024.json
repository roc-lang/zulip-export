[
    {
        "content": "<p>I got both stars from day 24. But in the end, I can not say, that it is my solution: <a href=\"https://github.com/ostcar/aoc2023/blob/main/days/day24.roc\">https://github.com/ostcar/aoc2023/blob/main/days/day24.roc</a></p>\n<p>I spend a lot of time with day 24 and made so many detours. What I did was so dorky, that I don't use the spoiler tag. Nothing of it was necessary for day 24.</p>\n<p>For the day, you have to work with fractional numbers. So first, I tried Dec. But Dec is not fully implemented yet. I don't remember which operation I was missing. Maybe it was <a href=\"#narrow/stream/231634-beginners/topic/Is.20sqrt.20implemented.3F\">sqrt</a>.</p>\n<p>Next, I tried F64. But you can not compare them. I understand the decision. But it it very hard to work with them. For example, it is hard to write a test. The following test is a type error:</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>expect\n    f = 5.1 |&gt; Num.toF64\n    f == 5.1\n</code></pre></div>\n<p>Maybe a <a href=\"#narrow/stream/231634-beginners/topic/things.20I.20cannot.20figure.20out.20on.20numbers\">approx equal for Frac</a> would be helpful.</p>\n<p>Next, I tried I tried to use a <a href=\"https://github.com/ostcar/aoc2023/blob/65e31325282014850ea5c775f382dbd7901fedc8/days/day24.roc#L339-L420\">rational type</a> with some helper functions.</p>\n<div class=\"codehilite\"><pre><span></span><code>Rational a := (Int a, Int a)\n    implements [\n        Eq { isEq: qEq },\n    ]\n\nqEq = \\@Rational (a, b), @Rational (c, d) -&gt;\n    a * d == c * b\n\nqAdd = \\@Rational (a, b), @Rational (c, d) -&gt;\n    @Rational (a * d + b * c, b * d)\n    |&gt; qNormalize\n</code></pre></div>\n<p>This worked at the beginning. But it was very hard to make any calculations. For a type like <code>Rational</code>, it would be helpful to define infix function or overload operators.</p>\n<p>For example, here is a calculation, I had to do.</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>        # t1  = (a.x - a.y * b.x / b.y ) / (1 - b.x / b.y)\n        t1 = qDiv (qSub a.x (qDiv (qMul a.y b.x) b.y)) (qSub (qFromInt 1) (qDiv b.x b.y))\n</code></pre></div>\n<p>I started with <code>Rational I64</code>, but the input has very high numbers. So I had to switch to I128. It seems, that there is a problem with I128 and the surgical linker.  The returned message is:</p>\n<div class=\"codehilite\"><pre><span></span><code>An internal compiler expectation was broken.\nThis is definitely a compiler bug.\nPlease file an issue here: https://github.com/roc-lang/roc/issues/new/choose\nthread &#39;main&#39; panicked at &#39;Undefined Symbol in relocation, (+5d72, Relocation { kind: PltRelative, encoding: Generic, size: +20, target: Symbol(SymbolIndex(+65)), addend: +fffffffffffffffc, implicit_addend: false }): Ok(Symbol { name: &quot;__modti3&quot;, address: +0, size: +0, kind: Unknown, section: Undefined, scope: Unknown, weak: false, flags: Elf { st_info: +10, st_other: +0 } })&#39;, crates/linker/src/elf.rs:1486:25\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>\n<p>Using the legacy-linker fixed this for part1. But for part2 the numbers got even bigger and I could not use <code>Rational I128</code> anymore. Since I don't want (and probably are not able) to implement a <code>IBigNumber</code>,I used F64 in the end and it worked.</p>\n<p>For the actual problem for part2, I spend many hours to make the calculation, but I was not able to solve the equations. In the end, I looked at other solutions and used the calculation from someone else.</p>",
        "id": 411434957,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1704489894
    },
    {
        "content": "<p>Thanks for solving so many advent of code problems in Roc <span class=\"user-mention\" data-user-id=\"496321\">@Oskar Hahn</span>!<br>\nI wish we could make faster progress on solving bugs but we have a bunch that are very difficult and time consuming to solve.</p>",
        "id": 411494349,
        "sender_full_name": "Anton",
        "timestamp": 1704535525
    },
    {
        "content": "<p>yeah I believe you now hold the record for most Advent of Code problems solved in Roc! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 411500765,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704540862
    },
    {
        "content": "<p>Thanks. I am still missing 4 stars. Roc is so much fun. I is great to see it evolve. I hope, I find a hobby project I can do with roc until AoC 2024.</p>",
        "id": 411505269,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1704545002
    },
    {
        "content": "<p>I hope you do too! And we'll be here to support, as always <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 411505858,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704545626
    }
]