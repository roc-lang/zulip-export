[
    {
        "content": "<p><a href=\"https://gist.github.com/mulias/e87ccf5402dcf6d58ae18e6cc945e7cb\">https://gist.github.com/mulias/e87ccf5402dcf6d58ae18e6cc945e7cb</a></p>",
        "id": 408012330,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1702575875
    },
    {
        "content": "<p><a href=\"https://github.com/ostcar/aoc2023/blob/main/days/day14.roc\">https://github.com/ostcar/aoc2023/blob/main/days/day14.roc</a></p>",
        "id": 408067913,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1702598297
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"496321\">@Oskar Hahn</span> </p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>Were you able to get good enough performance to do the full 1000000 (or whatever number) cycles without finding the loop? I think my solution has one if those ref counting issues so the brute force approach didn't cut it.</p>\n</div></div>",
        "id": 408080399,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1702604081
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"586417\">Elias Mulhall</span> <a href=\"#narrow/stream/358903-Advent-of-Code/topic/2023.20Day.2014/near/408080399\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"496321\">Oskar Hahn</span> </p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>Were you able to get good enough performance to do the full 1000000 (or whatever number) cycles without finding the loop? I think my solution has one if those ref counting issues so the brute force approach didn't cut it.</p>\n<p></div></div><br>\n</p>\n</blockquote>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Answer</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>No. I don't think any solution is good enough to loop 1.000.000.000.</p>\n<p>But I did not write the loop finding code yet. I just printed the first 1.000 numbers and found the loop by hand by selecting one line in vs code.</p>\n<p>It was late and the vs code solution was too easy <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>\n</div></div>",
        "id": 408118525,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1702620538
    },
    {
        "content": "<p>Ah that makes sense! I did that with the example to check my math.</p>",
        "id": 408209206,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1702654759
    },
    {
        "content": "<p>In part 2 my recursive function is totally broken. The values turn into utter garbage, I think this is a compiler bug.</p>",
        "id": 408329629,
        "sender_full_name": "Fabian Schmalzried",
        "timestamp": 1702723375
    },
    {
        "content": "<p>Can you share your code <span class=\"user-mention\" data-user-id=\"559412\">@Fabian Schmalzried</span>?</p>",
        "id": 408330964,
        "sender_full_name": "Anton",
        "timestamp": 1702724403
    },
    {
        "content": "<p>@Anton Sure here it is: <a href=\"https://github.com/FabHof/aoc-2023/blob/cd1bab067b21e778cbd516f1607bcd38793090a6/day14/main.roc\">https://github.com/FabHof/aoc-2023/blob/cd1bab067b21e778cbd516f1607bcd38793090a6/day14/main.roc</a> I just hat time to add a small comment.</p>",
        "id": 408373221,
        "sender_full_name": "Fabian Schmalzried",
        "timestamp": 1702758250
    },
    {
        "content": "<p>Here's my day 14 <a href=\"https://github.com/ryanb/advent-2023-roc/blob/main/day14/main.roc\">https://github.com/ryanb/advent-2023-roc/blob/main/day14/main.roc</a></p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Spoiler</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>I enjoyed using Array2D lib for the first time for this (thanks Elias). It took about 7 seconds to do part 2, but I can think of a few ways to improve it on my end.</p>\n<p>Solving part 2 by detecting a pattern was a fun problem.</p>\n</div></div>",
        "id": 408378749,
        "sender_full_name": "Ryan Bates",
        "timestamp": 1702764242
    },
    {
        "content": "<p>My day 14: <a href=\"https://github.com/timotree3/aoc2023/blob/main/roc/day14.roc\">https://github.com/timotree3/aoc2023/blob/main/roc/day14.roc</a></p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Algorithm</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>I used the constant-space <a href=\"https://en.wikipedia.org/wiki/Tortoise_and_hare_algorithm\">tortoise and hare cycle detection algorithm</a></p>\n</div></div>",
        "id": 409301202,
        "sender_full_name": "timotree",
        "timestamp": 1703129532
    },
    {
        "content": "<p>Fancy!</p>",
        "id": 409309268,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1703133954
    }
]