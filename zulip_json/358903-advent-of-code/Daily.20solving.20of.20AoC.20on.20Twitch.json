[
    {
        "content": "<p>Hi, I'm currently streaming my daily solves of AoC on Twitch.</p>\n<p>Since I'm new to functional programming and Roc I'd love if some more experienced people would join my chat and provide feedback and improvements on the frequently horrible code I write :D</p>\n<p>Beginners are always welcome too obviously.</p>\n<p>You can find it on <a href=\"https://twitch.tv/ScallyGamesDev\">https://twitch.tv/ScallyGamesDev</a></p>",
        "id": 488001101,
        "sender_full_name": "Scally",
        "timestamp": 1733883716
    },
    {
        "content": "<p>What time do you normally stream?</p>",
        "id": 488003440,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733885388
    },
    {
        "content": "<p>Woah, there's ads on Twitch <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span> -- I hope they don't interrupt streams</p>",
        "id": 488004702,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733886227
    },
    {
        "content": "<p>Just listening to Day 10 now... <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 488004960,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733886387
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"772522\">@Scally</span> mind if I drop some ideas for you in here?</p>",
        "id": 488006160,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733887162
    },
    {
        "content": "<p>Checkout <a href=\"https://www.roc-lang.org/builtins/List#keepOks\">List.keepOks</a> -- I like to use that sometimes for AoC for quick and dirty parsing the lines where I have a Result</p>",
        "id": 488006267,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733887213
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/358903-advent-of-code/topic/Daily.20solving.20of.20AoC.20on.20Twitch/near/488003440\">said</a>:</p>\n<blockquote>\n<p>What time do you normally stream?</p>\n</blockquote>\n<p>Well... <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>  that unfortunately varies widely.<br>\nUsually around afternoon/evening CET but also sometimes late night or early morning xD<br>\nI'd say probably easiest to follow to get notified when I go live <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 488009213,
        "sender_full_name": "Scally",
        "timestamp": 1733888995
    },
    {
        "content": "<p>Alright, I'll give you a sub</p>",
        "id": 488009291,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733889021
    },
    {
        "content": "<p>They sadly do <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span>  :| Also you sadly can't fully turn them off as a streamer. I'd honestly recommend using adblocks</p>",
        "id": 488009306,
        "sender_full_name": "Scally",
        "timestamp": 1733889037
    },
    {
        "content": "<p>Follow is good enough and free, sub is appreciated nontheless :D<br>\nAlso thanks for checking out the VOD</p>",
        "id": 488009341,
        "sender_full_name": "Scally",
        "timestamp": 1733889066
    },
    {
        "content": "<p>Apparently I'm a Twitch noob... I'm the guy that catches streams people have uploaded to YT</p>",
        "id": 488009461,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733889141
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/channel/358903-advent-of-code/topic/Daily.20solving.20of.20AoC.20on.20Twitch/near/488006160\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"772522\">Scally</span> mind if I drop some ideas for you in here?</p>\n</blockquote>\n<p>Sure, I'd love that<br>\nI've used List.keepOks a bunch already but yes, managing errors and results is one of my biggest troubles still.<br>\nCan you tell me why List.keeppOks takes a function as argument instead of just working on a list of results? It seems somewhat annoying. Or is there some better way to include it in a pipeline than going</p>\n<div class=\"codehilite\"><pre><span></span><code>somethingThatGeneratesListOfResults |&gt; List.keepOks \\x -&gt; x\n</code></pre></div>",
        "id": 488009513,
        "sender_full_name": "Scally",
        "timestamp": 1733889188
    },
    {
        "content": "<p>Yeah, youtube subscribes are twitch follows, twitch subscribes are paid support that unlocks emotes and some other stuff.<br>\nTo me the youtube subscribe term always felt weird because it seemed to me like it was paid.</p>",
        "id": 488009620,
        "sender_full_name": "Scally",
        "timestamp": 1733889247
    },
    {
        "content": "<p>Not to confuse things further, but I pay for YT so I don't have ads</p>",
        "id": 488009691,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733889330
    },
    {
        "content": "<p>Also something that's been repeatedly annoying to me is Results after I know that it won't fail.<br>\nSomething like</p>\n<div class=\"codehilite\"><pre><span></span><code># already did bound check\nList.get list 0\n</code></pre></div>\n<p>What I usually do is pipe it into <code>Result.withDefault 0</code> or something alike, knowing it will never happen, but it always feels really bad</p>",
        "id": 488009777,
        "sender_full_name": "Scally",
        "timestamp": 1733889382
    },
    {
        "content": "<p>I sometimes throw a quick and dirty one of these in and use that for AoC</p>\n<div class=\"codehilite\"><pre><span></span><code>unwrap : Result ok err -&gt; ok\nunwrap = \\result -&gt;\n    when result is\n        Ok value -&gt; value\n        Err _ -&gt; crash &quot;expected Ok&quot;\n</code></pre></div>",
        "id": 488009832,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733889441
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/channel/358903-advent-of-code/topic/Daily.20solving.20of.20AoC.20on.20Twitch/near/488004960\">said</a>:</p>\n<blockquote>\n<p>Just listening to Day 10 now... <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>\n</blockquote>\n<p>Btw, AoC 10 has probably been one of my better days <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span> </p>\n<p>Some days were that terrible that I did a second stream for redemption trying to improve on my solution xD</p>",
        "id": 488009872,
        "sender_full_name": "Scally",
        "timestamp": 1733889480
    },
    {
        "content": "<p>I think that is fine for these kind of programs where we are just slapping code together and not too concerned about errors</p>",
        "id": 488009874,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733889481
    },
    {
        "content": "<p>Okay, I was wondering because some other languages have unwrap (I think I know it from Rust) but Roc doesn't</p>",
        "id": 488009973,
        "sender_full_name": "Scally",
        "timestamp": 1733889539
    },
    {
        "content": "<p>As I've learnt more though, I've found my need for that has dropped off dramatically though, so it's definitely something I've gotten more comfortable with handling the errors and passing them up through the program</p>",
        "id": 488009974,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733889539
    },
    {
        "content": "<p>Using <code>?</code> makes like much easier too</p>",
        "id": 488010008,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733889565
    },
    {
        "content": "<p>I was assuming that it's something that would go away as I got better but so far I haven't found any great solutions.<br>\nMy assumption is that Result.try or the new try keyword will help but I haven't quite figured out how to properly use that.</p>",
        "id": 488010073,
        "sender_full_name": "Scally",
        "timestamp": 1733889602
    },
    {
        "content": "<p>Usually any attempts to use try results in compiler errors because of incorrect arguments to something xD</p>",
        "id": 488010170,
        "sender_full_name": "Scally",
        "timestamp": 1733889635
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>part1 : Str -&gt; Result Str _\npart1 = \\input -&gt;\n\n    tests : List Test\n    tests = parseStr? (sepBy parse_test (codeunit &#39;\\n&#39;)) (Str.trim input)\n\n    ...\n</code></pre></div>",
        "id": 488010202,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733889654
    },
    {
        "content": "<p>The key thing in this example is that I use a <code>_</code> to infer the error type</p>",
        "id": 488010265,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733889676
    },
    {
        "content": "<p>So I don't care about the errors from my <code>parseStr</code> function.. that just gets passed up the chain</p>",
        "id": 488010313,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733889706
    },
    {
        "content": "<p>So <code>try</code> and <code>?</code> are implemented identically under the hood now. In the long term I suspect <code>?</code> will fit nicer with the parens and commas design that's been kicking around. But for now we have both.</p>",
        "id": 488010434,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733889762
    },
    {
        "content": "<p>Interesting, I'll have to look into the <code>Str -&gt; Result Str _</code> tomorrow, bubbling up errors is kind of what I wanted, just never seemed to get it to work.<br>\nInitially it was also really confusing because iirc some APIs actually throw errors instead of returning results and those errors just stop execution of the function and in the end crash the program.<br>\nIn many cases I wished I'd just get a crash instead of a Result. Is there some way to convert an Err to a crash? I assume the custom unwrap function you've posted above?</p>",
        "id": 488010731,
        "sender_full_name": "Scally",
        "timestamp": 1733889962
    },
    {
        "content": "<blockquote>\n<p>I assume the custom unwrap function you've posted above?</p>\n</blockquote>\n<p>Yes, this is the only way</p>",
        "id": 488010822,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733890002
    },
    {
        "content": "<blockquote>\n<p>some APIs actually throw errors instead of returning results</p>\n</blockquote>\n<p>This should only be for things that cannot be handled in any sensible way but crashing</p>",
        "id": 488010878,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733890041
    },
    {
        "content": "<p>Ah, I think it was mostly for Tasks</p>",
        "id": 488010964,
        "sender_full_name": "Scally",
        "timestamp": 1733890085
    },
    {
        "content": "<p>I remember some videos / talks by Richard where he showed off some basic programs and it was basically only crashes, no working with results there.</p>",
        "id": 488011051,
        "sender_full_name": "Scally",
        "timestamp": 1733890150
    },
    {
        "content": "<p>I'm currently listening to you explaining why AoC isn't well suited for FP <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 488011058,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733890157
    },
    {
        "content": "<p>There was some really neat Haskell implementation for today's task by someone in my chat</p>",
        "id": 488011197,
        "sender_full_name": "Scally",
        "timestamp": 1733890234
    },
    {
        "content": "<p><a href=\"https://github.com/Andriamanitra/adventofcode2024/blob/main/day10/solution.hs\">https://github.com/Andriamanitra/adventofcode2024/blob/main/day10/solution.hs</a></p>",
        "id": 488011213,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733890244
    },
    {
        "content": "<p>Lol, looking at it rn</p>",
        "id": 488011219,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733890251
    },
    {
        "content": "<p>Jup, that's the one</p>",
        "id": 488011233,
        "sender_full_name": "Scally",
        "timestamp": 1733890261
    },
    {
        "content": "<p>Today and the one with the bridge and doing math operations on a list of operands was really nice with FP</p>",
        "id": 488011274,
        "sender_full_name": "Scally",
        "timestamp": 1733890296
    },
    {
        "content": "<p>My Roc tends to be really verbose... but I don't mind it like that. </p>\n<p>I tend to write smaller parts and then use <code>expects</code> to test my assumptions at each point as I go.</p>\n<p>Others seem to be able to keep a whole algorithm in their head and write something correct using much less code than me.</p>",
        "id": 488011464,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733890421
    },
    {
        "content": "<p>I just recently started breaking things up more and more since doing long function chain would result in the editor underlining like 12 lines of code saying there was something wrong with some type at some point in those lines <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 488011608,
        "sender_full_name": "Scally",
        "timestamp": 1733890514
    },
    {
        "content": "<p>Also I had some really bad issues with some stupid single value or operation incorrectly inferring some type which then messed up some type signature way up the chain</p>",
        "id": 488011740,
        "sender_full_name": "Scally",
        "timestamp": 1733890585
    },
    {
        "content": "<p>I really like working with the compiler and using type annotations to help me \"think\" about the algorithm. Like I can \"pin\" the type at a point and get instant feedback if the compiler agrees with me or not.</p>",
        "id": 488011779,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733890621
    },
    {
        "content": "<p>Like somewhere in the function chain some U64 + Num (but actually I64 or similar) operation which then suddenly changes the entire type of the Num to U64 which then bubbles up instead of it telling me I couldn't do addition between unsigned and signed int.</p>",
        "id": 488011834,
        "sender_full_name": "Scally",
        "timestamp": 1733890663
    },
    {
        "content": "<p>Creating smaller functions and adding explicit type annotations really helped on that</p>",
        "id": 488011846,
        "sender_full_name": "Scally",
        "timestamp": 1733890680
    },
    {
        "content": "<p>Yeah, I think I talked about it on today's stream that I really started to like starting to write a function in terms of it's signature</p>",
        "id": 488011939,
        "sender_full_name": "Scally",
        "timestamp": 1733890728
    },
    {
        "content": "<p>Yeah, I often start with types for anything vaguely complex</p>",
        "id": 488012185,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733890888
    },
    {
        "content": "<p>Here's an example... I'm even doing it in the middle of a function.</p>\n<div class=\"codehilite\"><pre><span></span><code>part1 : Str -&gt; Result Str _\npart1 = \\input -&gt;\n\n    tests : List Test\n    tests = parseStr? (sepBy parse_test (codeunit &#39;\\n&#39;)) (Str.trim input)\n\n    valid_tests : List Test\n    valid_tests =\n        List.keepIf tests \\test -&gt;\n            k = 2 # Add, Mul\n            find_first_valid_ast test k |&gt; Result.isOk\n\n    valid_tests\n    |&gt; List.map .test_value\n    |&gt; List.sum\n    |&gt; Num.toStr\n    |&gt; Ok\n</code></pre></div>",
        "id": 488012290,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733890942
    },
    {
        "content": "<p>Usually I'm writing that as I think through the algorithm, so even though it's more verbose it somehow saves me wall time, because I get to a correct solution faster.</p>",
        "id": 488012354,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733890994
    },
    {
        "content": "<p>Yeah, I've started doing some of that</p>",
        "id": 488012358,
        "sender_full_name": "Scally",
        "timestamp": 1733890999
    },
    {
        "content": "<p>Btw, do you have any recommendations on a function lacking a return or having 2 returned values breaking all of intellisense and type checking? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 488012491,
        "sender_full_name": "Scally",
        "timestamp": 1733891082
    },
    {
        "content": "<p>I'm not sure I've seen this issue before</p>",
        "id": 488012545,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733891119
    },
    {
        "content": "<p>Oh, like if it can't parse the file it prevents type checking?</p>",
        "id": 488012657,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733891182
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"453336\">@Joshua Warner</span> or <span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span>  were working on something for a more tolerant parser</p>",
        "id": 488012687,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733891211
    },
    {
        "content": "<p>Actually... that might be what is going on with this issue <a href=\"https://github.com/roc-lang/roc/issues/7332\">https://github.com/roc-lang/roc/issues/7332</a> I just reported from your comments on stream. I asked Josh and he said it looks like it may be language server related</p>",
        "id": 488012817,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733891286
    },
    {
        "content": "<p>Yeah, running <code>roc check</code> gives use the expected error report. So this is a language server thing.</p>",
        "id": 488012914,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733891345
    },
    {
        "content": "<p>Like something like</p>\n<div class=\"codehilite\"><pre><span></span><code>doSomething = \\a -&gt;\n    test = getSomething\n    # currently still working on this function\n\npart1 -&gt; \\input\n# ....\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\"><pre><span></span><code>doSomething = \\a -&gt;\n    getSomething\n    a == 1\n\npart1 -&gt; \\input\n# ....\n</code></pre></div>\n<p>usually resulted in a general parser error and breaking all editor integration.</p>\n<p>I think it's been more of an issue with Zed than in VSCode and especially annoying because the error message says something like </p>\n<div class=\"codehilite\"><pre><span></span><code>Error parsing\n\nsomewhere around here\n========\n            doSomething = \\a -&gt;\n[120]         test = getSomething\n                               ^\n========\n</code></pre></div>\n<p>so it seems to know the line number but it only shows the error on line 1 on the app keyword (I guess character 1 of the file).</p>",
        "id": 488012936,
        "sender_full_name": "Scally",
        "timestamp": 1733891352
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/channel/358903-advent-of-code/topic/Daily.20solving.20of.20AoC.20on.20Twitch/near/488012687\">said</a>:</p>\n<blockquote>\n<p>I think <span class=\"user-mention silent\" data-user-id=\"453336\">Joshua Warner</span> or <span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span>  were working on something for a more tolerant parser</p>\n</blockquote>\n<p>yeah, exactly that.</p>\n<p>I think earlier I saw something on a thread here about having to reload the Zed editor because it was breaking all the time.</p>",
        "id": 488013231,
        "sender_full_name": "Scally",
        "timestamp": 1733891449
    },
    {
        "content": "<p><a class=\"message-link\" href=\"/#narrow/channel/358903-advent-of-code/topic/2024.20Day.201/near/485504522\">#advent of code &gt; 2024 Day 1 @ 💬</a></p>",
        "id": 488013295,
        "sender_full_name": "Scally",
        "timestamp": 1733891490
    },
    {
        "content": "<p>Another thing I've found that saves a lot of pain, is actually parsing the input. So instead of leaving the \"heights\" as <code>U8</code>, parsing that into <code>Heights: [L1, L2, L3, ..]</code> for example. On the days when I don't use <code>roc-parser</code> I tend to find at lesat two or three bugs where I simply just assume something obvious like forgetting that <code>'9'</code> and <code>9</code> are different numbers <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 488013838,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733891805
    },
    {
        "content": "<p>Hm... so parsing the integers into Tags? I've done that on the defragmentation task and it was quite nice (apart from sometimes being confused with the syntax of opaque types)</p>",
        "id": 488014177,
        "sender_full_name": "Scally",
        "timestamp": 1733892011
    },
    {
        "content": "<p>Clip on intellisense issues for reference: <a href=\"https://www.twitch.tv/scallygamesdev/clip/ComfortableTenuousSrirachaPJSalt-id4WvH-OQXEwCGcU\">https://www.twitch.tv/scallygamesdev/clip/ComfortableTenuousSrirachaPJSalt-id4WvH-OQXEwCGcU</a></p>\n<p>cc <span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> and <span class=\"user-mention\" data-user-id=\"453336\">@Joshua Warner</span> who work on the parser.</p>",
        "id": 488021140,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733896464
    },
    {
        "content": "<p>I think it's a language server thing. <span class=\"user-mention\" data-user-id=\"651372\">@Eli Dowling</span> said he'll have a look at it and scope (suss) it out.</p>",
        "id": 488021240,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733896557
    },
    {
        "content": "<p>Ah, sorry for wrong pings then.</p>",
        "id": 488021484,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733896734
    },
    {
        "content": "<p>Alg, I just wanted to let Sam and Josh know I'd had a quick chat to Eli</p>",
        "id": 488021613,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733896811
    },
    {
        "content": "<blockquote>\n<p>so it seems to know the line number but it only shows the error on line 1 on the app keyword (I guess character 1 of the file).</p>\n</blockquote>\n<p>Can we do a quick change for this that underlines the entire file? I usually never notice the top error for a while and I continue thinking my code is all correct. It's easier to fix errors immediately.</p>",
        "id": 488058899,
        "sender_full_name": "Anton",
        "timestamp": 1733911362
    },
    {
        "content": "<p>I will try to fix it today <span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> if I can't get it solved I'll make a pr changing the default scope :)</p>",
        "id": 488071180,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733915315
    },
    {
        "content": "<p>Language server reports a lot of weird errors I don't see with <code>roc check</code>, and it will stick around at the top of the file forever until you restart the LSP.</p>",
        "id": 488143939,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733936093
    },
    {
        "content": "<blockquote>\n<p>Language server reports a lot of weird errors I don't see with <code>roc check</code></p>\n</blockquote>\n<p>That is strange, I don't think I've ever had that, do you have an example?</p>",
        "id": 488144327,
        "sender_full_name": "Anton",
        "timestamp": 1733936197
    },
    {
        "content": "<p>I've definitely had the lsp get into a nasty not dead not alive state before. Got a deadlock in there somewhere I guess. I'm not sure if we have a way of timing out when the compiler hangs. Which it does fairly often with recursive code.</p>",
        "id": 488146182,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733936747
    },
    {
        "content": "<p>Hanging -&gt; in a when will do it for me pretty reliably</p>",
        "id": 488158142,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733940718
    },
    {
        "content": "<p>But I have a lot more feedback on language server when I have time to write it down</p>",
        "id": 488158226,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733940739
    }
]