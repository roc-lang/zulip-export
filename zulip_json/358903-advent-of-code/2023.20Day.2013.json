[
    {
        "content": "<p><a href=\"https://github.com/ostcar/aoc2023/blob/main/days/day13.roc\">https://github.com/ostcar/aoc2023/blob/main/days/day13.roc</a></p>\n<p>I think this was easier again.</p>",
        "id": 407800695,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1702497694
    },
    {
        "content": "<p>Part 2 wrinkled my brain a bit, but we got there<br>\n<a href=\"https://gist.github.com/mulias/2e9f88bc847a4e1ba28c75b522af7ecc\">https://gist.github.com/mulias/2e9f88bc847a4e1ba28c75b522af7ecc</a></p>",
        "id": 407878696,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1702531146
    },
    {
        "content": "<p>Love that I can do this</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>some pretty generic code with tags</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\"><pre><span></span><code>{dimX, dimY} = Array2D.shape pattern\n\nlinesX =\n    { start: At 1, end: Before dimX }\n    |&gt; List.range\n    |&gt; List.map X\n\nlinesY =\n    { start: At 1, end: Before dimY }\n    |&gt; List.range\n    |&gt; List.map Y\n\nList.concat linesX linesY\n</code></pre></div>\n\n</div></div>\n<p><code>X</code> and <code>Y</code> working contextually as constructor functions, plus <code>List.concat</code> producing a list of mixed tag types without needing type annotations all feels great. Between OCaml and TypeScript I feel like I have good grasp of polymorphic/structural variants, but no other language has done it as cleanly as Roc IMO.</p>",
        "id": 407879112,
        "sender_full_name": "Elias Mulhall",
        "timestamp": 1702531519
    },
    {
        "content": "<p>Finally solved day 13! <a href=\"https://github.com/lindskogen/advent-of-code-2023/blob/main/day13/main.roc\">https://github.com/lindskogen/advent-of-code-2023/blob/main/day13/main.roc</a></p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>The trick</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>When I figured out you could model both solutions as \"mismatch tolerance\" it clicked for me!</p>\n</div></div>",
        "id": 408135290,
        "sender_full_name": "Johan Lindskogen",
        "timestamp": 1702627463
    },
    {
        "content": "<p>I also finally found some time to solve this. <a href=\"https://github.com/FabHof/aoc-2023/blob/main/day13/main.roc\">https://github.com/FabHof/aoc-2023/blob/main/day13/main.roc</a><br>\nI think it was on the easier side. Part 2 was not a huge problem to adapt, and I was even inefficient with it.</p>",
        "id": 408162527,
        "sender_full_name": "Fabian Schmalzried",
        "timestamp": 1702637532
    },
    {
        "content": "<p>Here's my day 13. Fun one! <a href=\"https://github.com/ryanb/advent-2023-roc/tree/main/day13\">https://github.com/ryanb/advent-2023-roc/tree/main/day13</a></p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Solution Observation</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>Looks like most solutions here use <a href=\"https://github.com/mulias/roc-array2d\">Array 2D lib</a>. I'll have to try that!</p>\n</div></div>",
        "id": 408279574,
        "sender_full_name": "Ryan Bates",
        "timestamp": 1702687134
    },
    {
        "content": "<p>My day 13: <a href=\"https://github.com/timotree3/aoc2023/blob/main/roc/day13.roc\">https://github.com/timotree3/aoc2023/blob/main/roc/day13.roc</a><br>\nI was so slow because I still haven't finished day 12!</p>",
        "id": 409043263,
        "sender_full_name": "timotree",
        "timestamp": 1703033270
    }
]