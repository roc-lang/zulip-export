[
    {
        "content": "<p>I'd like to make an SDL platform, where the <code>main</code> function accepts &amp; returns a \"State\" type that is defined by the end-user programmer, not by the platform. I'm not really sure how to define the State type though; can I list a type in the <code>requires</code> part of the platform declaration?<br>\n(also is there documentation on the platform declaration syntax anywhere?)</p>",
        "id": 418331357,
        "sender_full_name": "Jared",
        "timestamp": 1706294300
    },
    {
        "content": "<p>I believe <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> tried this somewhere. it is a bit like the elm architecture right?</p>",
        "id": 418336272,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706296247
    },
    {
        "content": "<p><a href=\"https://github.com/lukewilliamboswell/roc-wasm4\">roc-wasm4</a> and <a href=\"https://github.com/lukewilliamboswell/roc-ray\">roc-ray</a> both do this</p>",
        "id": 418337387,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706296696
    },
    {
        "content": "<p>You have to be care if you do a classic <code>init</code>, <code>update</code>, <code>render</code> though. Your <code>render</code> function if written the default way will free the model leading to future calls accessing already freed memory.</p>",
        "id": 418337676,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706296837
    },
    {
        "content": "<p>I just wrote an article on how I developed roc-ray which goes into this in some detail. <a href=\"https://lukewilliamboswell.github.io/roc-ray-experiment/\">https://lukewilliamboswell.github.io/roc-ray-experiment/</a></p>",
        "id": 418342385,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1706298828
    },
    {
        "content": "<p>The way the platform is currently setup you can use tasks directly like setWindowSize etc, your not only providing a tree for things to render. </p>\n<p>I think it should be pretty straightforward to swap out raylib for SDL if you want, though the libraries are very similar from what I can tell.</p>",
        "id": 418342815,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1706299028
    },
    {
        "content": "<p>nice!</p>",
        "id": 418346154,
        "sender_full_name": "Jared",
        "timestamp": 1706300532
    },
    {
        "content": "<p>If your interested we could collaborate on roc-ray? Was there anything in particular you wanted to build with SDL?</p>",
        "id": 418356114,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1706305855
    },
    {
        "content": "<p>Sure! yeah raylib seems just as good, I'd be happy to hack on it</p>",
        "id": 418361947,
        "sender_full_name": "Jared",
        "timestamp": 1706309411
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> checking out roc-ray -- the <code>raylib</code> submodule is referencing a commit that doesn't exist on the public raylib.zig repo, or on your fork. Is it something you just have locally?</p>",
        "id": 419100740,
        "sender_full_name": "Jared",
        "timestamp": 1706725788
    },
    {
        "content": "<p>First time using git submodules... I thought I had pushed that commit. It's just a one liner to make something public I think. I'll have a look again and see if I can push it to my fork.</p>",
        "id": 419111599,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1706729897
    },
    {
        "content": "<p>I think I figured out the issue, I has pushed to <code>main</code> but the raylib repository uses <code>master</code> as the default. I've just pushed the commit to both branches on my fork now, so I hope that works. Can you let me know if you have any issues?</p>",
        "id": 419112757,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1706730424
    },
    {
        "content": "<p>hm the submodule is registered to the ryupold github link, not your fork</p>",
        "id": 419120972,
        "sender_full_name": "Jared",
        "timestamp": 1706734150
    },
    {
        "content": "<p>ok after fixing that, checkout is working</p>",
        "id": 419121544,
        "sender_full_name": "Jared",
        "timestamp": 1706734424
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>+ zig build\n/Users/jared/clone/fork/roc-ray/build.zig:18:9: error: no field named &#39;force_pic&#39; in struct &#39;Build.Step.Compile&#39;\n    lib.force_pic = true;\n        ^~~~~~~~~\n/Users/jared/bin/zig-0.12/lib/std/Build/Step/Compile.zig:1:1: note: struct declared here\nconst builtin = @import(&quot;builtin&quot;);\n</code></pre></div>",
        "id": 419121694,
        "sender_full_name": "Jared",
        "timestamp": 1706734491
    },
    {
        "content": "<p>error while building</p>",
        "id": 419121703,
        "sender_full_name": "Jared",
        "timestamp": 1706734495
    },
    {
        "content": "<p>Are you running zig 0.11.0? otherwise Im not sure</p>",
        "id": 419121793,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1706734546
    },
    {
        "content": "<p>oh yeah 0.12. i just downloaded it</p>",
        "id": 419121912,
        "sender_full_name": "Jared",
        "timestamp": 1706734592
    },
    {
        "content": "<p>ok 0.11</p>\n<div class=\"codehilite\"><pre><span></span><code>+ zig build\n/Users/jared/clone/fork/roc-ray/build.zig:21:21: error: expected error union type, found &#39;void&#39;\n    try raylib.addTo(b, lib, target, mode, .{\n        ~~~~~~~~~~~~^\nreferenced by:\n    runBuild__anon_6734: /Users/jared/bin/zig-11/lib/std/Build.zig:1639:37\n    remaining reference traces hidden; use &#39;-freference-trace&#39; to see all reference traces\n/Users/jared/clone/fork/roc-ray/raylib/build.zig:105:21: error: expected type &#39;*Build.Step.Compile&#39;, found &#39;@typeInfo(@typeInfo(@TypeOf(raylib.raylib.src.build.addRaylib__anon_13150)).Fn.return_type.?).ErrorUnion.error_set!*Build.Step.Compile&#39;\n    exe.linkLibrary(lib_raylib);\n                    ^~~~~~~~~~\n/Users/jared/clone/fork/roc-ray/raylib/build.zig:105:21: note: cannot convert error union to payload type\n/Users/jared/clone/fork/roc-ray/raylib/build.zig:105:21: note: consider using &#39;try&#39;, &#39;catch&#39;, or &#39;if&#39;\n/Users/jared/bin/zig-11/lib/std/Build/Step/Compile.zig:672:41: note: parameter type declared here\n</code></pre></div>",
        "id": 419122185,
        "sender_full_name": "Jared",
        "timestamp": 1706734731
    },
    {
        "content": "<p>ah I see <a href=\"https://github.com/lukewilliamboswell/raylib/commit/7ca0edde71b7154f16b638a42003ea68283de4e5\">https://github.com/lukewilliamboswell/raylib/commit/7ca0edde71b7154f16b638a42003ea68283de4e5</a></p>",
        "id": 419123304,
        "sender_full_name": "Jared",
        "timestamp": 1706735198
    },
    {
        "content": "<p>working!!!! nice</p>",
        "id": 419123400,
        "sender_full_name": "Jared",
        "timestamp": 1706735223
    },
    {
        "content": "<p>now if I can get it all running on android, we'd really be cookin'</p>",
        "id": 419125097,
        "sender_full_name": "Jared",
        "timestamp": 1706736043
    },
    {
        "content": "<p>How hard is it to send collections over the bridge? I think my ideal API would be to have a single task like \"renderDrawables\" where you send a list of shapes / text / etc and it draws them all, instead doing a ton of chained tasks.</p>",
        "id": 419126530,
        "sender_full_name": "Jared",
        "timestamp": 1706736648
    },
    {
        "content": "<p>Without glue it will probably be quite tedious. The collection isn't the hard part. The hard part is the tagged union type that can wrap anything that is drawable.</p>",
        "id": 419129420,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706737894
    },
    {
        "content": "<p>Without glue for zig I imagine that would be cumbersome to write by hand. Definitely possible, just not ergonomic. If it's just small for a proof of concept or experiment I would. But if I wanted to change things and iterate I'd make a start on Zig glue instead.</p>",
        "id": 419130518,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1706738358
    },
    {
        "content": "<p>hmmm yeah that makes sense. I could get by with just a small handful of drawables, so maybe it wouldn't be too bad?</p>",
        "id": 419132082,
        "sender_full_name": "Jared",
        "timestamp": 1706738935
    },
    {
        "content": "<p>on the other hand, I could make a layer on top of the imperative API in roc, and get the user experience I want</p>",
        "id": 419132192,
        "sender_full_name": "Jared",
        "timestamp": 1706738990
    },
    {
        "content": "<p>That probably would be much easier to do and what I would advise for now.</p>",
        "id": 419140684,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706742735
    },
    {
        "content": "<p>Yeah, should be pretty easy actually if we do it in the platform layer. So in e.g. <code>platform/main.roc</code>.</p>",
        "id": 419147173,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1706746072
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/tXdbn6KeGcogX1H0TMrH-8Nk/pong.mp4\">pong.mp4</a><br>\nsolitaire pong :)</p>\n<div class=\"message_inline_image message_inline_video\"><a href=\"/user_uploads/22008/tXdbn6KeGcogX1H0TMrH-8Nk/pong.mp4\" title=\"pong.mp4\"><video preload=\"metadata\" src=\"/user_uploads/22008/tXdbn6KeGcogX1H0TMrH-8Nk/pong.mp4\"></video></a></div>",
        "id": 419165998,
        "sender_full_name": "Jared",
        "timestamp": 1706757929
    },
    {
        "content": "<p>That's awesome. Did you have to make many modifications to get that working?</p>",
        "id": 419171450,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1706760922
    },
    {
        "content": "<p>Nope! Made a PR with the code</p>",
        "id": 419173716,
        "sender_full_name": "Jared",
        "timestamp": 1706762454
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"404111\">@Jared</span> what do you think of this? <a href=\"https://github.com/lukewilliamboswell/roc-ray/pull/2\">https://github.com/lukewilliamboswell/roc-ray/pull/2</a></p>",
        "id": 419566310,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1706926782
    },
    {
        "content": "<p>I added a <code>Drawable</code> ability to see how that might feel for an API.</p>",
        "id": 419566367,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1706926806
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>render : Model -&gt; Task Model []\nrender = \\_ -&gt;\n\n    shapes = [\n        Shape2D.rect { posX: 10, posY: 50, width: 200, height: 50, color: white },\n        Shape2D.rectGradientV { posX: 10, posY: 150, width: 200, height: 50, top: white, bottom: blue },\n        Shape2D.text { text: &quot;Hello World&quot;, posX: 10, posY: 250, size: 20, color: white },\n        Shape2D.circle { centerX: 300, centerY: 100, radius: 50, color: red },\n        Shape2D.circleGradient { centerX: 300, centerY: 200, radius: 35, inner: red, outer: blue },\n    ]\n\n    _ &lt;- shapes |&gt; Task.forEach draw |&gt; Task.await\n\n    Task.ok {}\n</code></pre></div>",
        "id": 419566432,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1706926890
    },
    {
        "content": "<p>Looks neat!</p>",
        "id": 419613358,
        "sender_full_name": "Jared",
        "timestamp": 1706970510
    }
]