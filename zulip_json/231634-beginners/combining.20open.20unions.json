[
    {
        "content": "<p>I don't really understand the table in <a href=\"https://www.roc-lang.org/tutorial#combining-open-unions\">https://www.roc-lang.org/tutorial#combining-open-unions</a><br>\nor maybe it is just a wording issue perhaps, or I am really not understanding</p>\n<p>Surely <code>[Ok Str]*</code> can also include <code>Other field</code>, which would be rejected by <code>[Ok Str] -&gt; Bool</code>, no?<br>\nI <em>think</em> the second column means \"can receive\" <code>Ok Str</code> (eg <code>Ok \"hi\"</code>) from an <code>[Ok Str]*</code> perhaps?</p>",
        "id": 434275242,
        "sender_full_name": "Jens Petersen",
        "timestamp": 1713497561
    },
    {
        "content": "<p>I think the confusion here is about what open means. Opens means that it can be merged with something else. So, if a function returns <code>[Ok Str]*</code>, it would never be <code>Other field</code>. It could merge with something that generates <code>Other field</code>, but it couldn't possibly be returned from the original function with the return type of <code>[Ok Str]*</code>.</p>",
        "id": 434283131,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713502745
    },
    {
        "content": "<p><code>*</code> in general is a bit confusing. It is so unconstrained that it can't contain any useful information.</p>",
        "id": 434283265,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713502816
    },
    {
        "content": "<p><code>[Ok Str]a</code> is a different story that probably works how you currently think <code>[Ok Str]*</code> works.</p>",
        "id": 434283464,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713502863
    },
    {
        "content": "<p>Also, I think there is a bug currently. Tag unions are meant to be open by default in the return position. Sometimes I have to add an underscore to make this work correctly, so I'll write it out like this <code>thing: Task {} [Tag1, Tag2]_</code></p>",
        "id": 434289226,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713505833
    },
    {
        "content": "<p>But it is not in the return position in the examples: it is being received, that is my point</p>",
        "id": 434475271,
        "sender_full_name": "Jens Petersen",
        "timestamp": 1713594336
    },
    {
        "content": "<p>Yeah, this is not related to returned tags being open</p>",
        "id": 434509279,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713626227
    },
    {
        "content": "<p>Let me try to write out some examples to explain better.</p>",
        "id": 434509448,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713626348
    },
    {
        "content": "<p>Hopefully a decent explanation of why <code>[Ok Str]*</code> can be passed to <code>[Ok Str] -&gt; Bool</code></p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"nc\">Test</span>\n<span class=\"w\">    </span><span class=\"n\">exposes</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n<span class=\"w\">    </span><span class=\"n\">imports</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n\n<span class=\"c1\"># Note: all returned tags are open, so this is the same</span>\n<span class=\"c1\"># generateOpenOkStr : Str -&gt; [Ok Str]</span>\n<span class=\"n\">generateOpenOkStr</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Str</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"nc\">Str</span><span class=\"p\">]</span><span class=\"o\">*</span>\n<span class=\"n\">generateOpenOkStr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"c1\"># Really super imporant note in this first function.</span>\n<span class=\"w\">    </span><span class=\"c1\"># I can not return `Other` here.</span>\n<span class=\"w\">    </span><span class=\"c1\"># I have to return `Ok` with a `Str` in it.</span>\n<span class=\"w\">    </span><span class=\"c1\"># That is the only data the matches `[Ok Str]*` as an output</span>\n<span class=\"w\">    </span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"n\">s</span>\n\n\n<span class=\"n\">usesAsOpen</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"nc\">Str</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Bool</span>\n<span class=\"n\">usesAsOpen</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">union</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"c1\"># A user can pass any tag into this.</span>\n<span class=\"w\">    </span><span class=\"c1\"># The tag is just guaranteed to have `Ok Str` as an option</span>\n<span class=\"w\">    </span><span class=\"ow\">when</span><span class=\"w\"> </span><span class=\"n\">union</span><span class=\"w\"> </span><span class=\"n\">is</span>\n<span class=\"w\">        </span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"nc\">Str</span><span class=\"o\">.</span><span class=\"n\">isEmpty</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Bool</span><span class=\"o\">.</span><span class=\"no\">true</span>\n<span class=\"w\">        </span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Bool</span><span class=\"o\">.</span><span class=\"no\">false</span>\n<span class=\"w\">        </span><span class=\"c1\"># `_ -&gt;` is required to deal with everything else</span>\n<span class=\"w\">        </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Bool</span><span class=\"o\">.</span><span class=\"no\">false</span>\n\n<span class=\"n\">expect</span>\n<span class=\"w\">    </span><span class=\"ow\">in</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">generateOpenOkStr</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span>\n<span class=\"w\">    </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">usesAsOpen</span><span class=\"w\"> </span><span class=\"ow\">in</span>\n<span class=\"w\">    </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"nc\">Bool</span><span class=\"o\">.</span><span class=\"no\">false</span>\n\n<span class=\"n\">expect</span>\n<span class=\"w\">    </span><span class=\"ow\">in</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">generateOpenOkStr</span><span class=\"w\"> </span><span class=\"s2\">\"123\"</span>\n<span class=\"w\">    </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">usesAsOpen</span><span class=\"w\"> </span><span class=\"ow\">in</span>\n<span class=\"w\">    </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"nc\">Bool</span><span class=\"o\">.</span><span class=\"no\">true</span>\n\n\n<span class=\"n\">restrictsToClosed</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"nc\">Str</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Bool</span>\n<span class=\"n\">restrictsToClosed</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">union</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"c1\"># The only tag possible here is `Ok Str`</span>\n<span class=\"w\">    </span><span class=\"c1\"># Nothing else</span>\n\n<span class=\"w\">    </span><span class=\"c1\"># Since there is only one option, we can directly pattern match</span>\n<span class=\"w\">    </span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">union</span>\n\n<span class=\"w\">    </span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"nc\">Str</span><span class=\"o\">.</span><span class=\"n\">isEmpty</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># In both of these, `[Ok Str]*` is safe to restrict to `[Ok Str]`.</span>\n<span class=\"c1\"># So everything works fine.</span>\n<span class=\"n\">expect</span>\n<span class=\"w\">    </span><span class=\"ow\">in</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">generateOpenOkStr</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span>\n<span class=\"w\">    </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">restrictsToClosed</span><span class=\"w\"> </span><span class=\"ow\">in</span>\n<span class=\"w\">    </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"nc\">Bool</span><span class=\"o\">.</span><span class=\"no\">false</span>\n\n<span class=\"n\">expect</span>\n<span class=\"w\">    </span><span class=\"ow\">in</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">generateOpenOkStr</span><span class=\"w\"> </span><span class=\"s2\">\"123\"</span>\n<span class=\"w\">    </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">restrictsToClosed</span><span class=\"w\"> </span><span class=\"ow\">in</span>\n<span class=\"w\">    </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"nc\">Bool</span><span class=\"o\">.</span><span class=\"no\">true</span>\n\n\n<span class=\"c1\"># Where the closed version fails, but the open version is fine.</span>\n<span class=\"n\">expect</span>\n<span class=\"w\">    </span><span class=\"c1\"># `in` will expand the type from `[Ok Str]*` to `[Ok Str, Other]*` due to merging branches.</span>\n<span class=\"w\">    </span><span class=\"ow\">in</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nc\">Bool</span><span class=\"o\">.</span><span class=\"no\">true</span><span class=\"w\"> </span><span class=\"n\">then</span>\n<span class=\"w\">            </span><span class=\"n\">generateOpenOkStr</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span>\n<span class=\"w\">        </span><span class=\"k\">else</span>\n<span class=\"w\">            </span><span class=\"nc\">Other</span>\n\n<span class=\"w\">    </span><span class=\"c1\"># Not possible, will type mismatch</span>\n<span class=\"w\">    </span><span class=\"c1\"># out = restrictsToClosed in</span>\n\n<span class=\"w\">    </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">usesAsOpen</span><span class=\"w\"> </span><span class=\"ow\">in</span>\n\n<span class=\"w\">    </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"nc\">Bool</span><span class=\"o\">.</span><span class=\"no\">false</span>\n</code></pre></div>\n</div></div>",
        "id": 434511236,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713627340
    },
    {
        "content": "<p>I think Jens has a point here. <code>[Ok Str]*</code> can't always be passed to <code>[Ok Str] -&gt; Bool</code>. In particular, if the value of type <code>[Ok Str]*</code> is a function argument, then it really could contain <code>Other x</code>. Example:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">acceptsClosed</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"nv\">acceptsClosed</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n\n<span class=\"nv\">acceptsOpen</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"nv\">acceptsOpen</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">openParameter</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nx\">acceptsClosed</span><span class=\"w\"> </span><span class=\"nx\">openParameter</span><span class=\"w\"> </span><span class=\"c1\"># ERROR (mismatch between [...]* and [...])</span>\n\n<span class=\"nv\">returnsOpen</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"p\">]</span><span class=\"o\">*</span>\n<span class=\"nv\">returnsOpen</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"s\">\"foo\"</span>\n\n<span class=\"nv\">passesOpen</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"nv\">passesOpen</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">openLocalVariable</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">returnsOpen</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"w\">    </span><span class=\"nx\">acceptsClosed</span><span class=\"w\"> </span><span class=\"nx\">openLocalVariable</span><span class=\"w\"> </span><span class=\"c1\"># no error...</span>\n</code></pre></div>",
        "id": 434518329,
        "sender_full_name": "timotree",
        "timestamp": 1713632766
    },
    {
        "content": "<p>In fact, if I add a type annotation <code>openLocalVariable : [Ok Str]*</code>, then both examples error</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">passesOpenAnnotated</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"nv\">passesOpenAnnotated</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">openLocalVariable</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"p\">]</span><span class=\"o\">*</span>\n<span class=\"w\">    </span><span class=\"nv\">openLocalVariable</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">returnsOpen</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"w\">    </span><span class=\"nx\">acceptsClosed</span><span class=\"w\"> </span><span class=\"nx\">openLocalVariable</span><span class=\"w\"> </span><span class=\"c1\"># ERROR (mismatch between [...]* and [...])</span>\n</code></pre></div>",
        "id": 434519823,
        "sender_full_name": "timotree",
        "timestamp": 1713634075
    },
    {
        "content": "<p>I think it might be helpful to distinguish between <code>[Ok Str]*</code> and <code>[Ok Str]_</code> here. If I write <code>openLocalVariable : [Ok Str]_</code> then there's no error, because <code>_</code> can be chosen to be <code>[]</code>, and <code>[Ok Str][]</code> is <code>[Ok Str]</code>, which makes the whole thing type correct.</p>",
        "id": 434520014,
        "sender_full_name": "timotree",
        "timestamp": 1713634237
    },
    {
        "content": "<p>It would be an accurate statement to say \"If I have a local of type <code>[Ok Str]_</code>, it can be passed to a function of type <code>[Ok Str] -&gt; Bool</code>\" But I don't think the original statement is accurate</p>",
        "id": 434520080,
        "sender_full_name": "timotree",
        "timestamp": 1713634285
    },
    {
        "content": "<p>It seems that in general in Roc, when you're defining a top-level function, <code>*</code> represents a placeholder instantiated by each of your callers, whereas <code>_</code> represents a placeholder which you get to instantiate.</p>",
        "id": 434520339,
        "sender_full_name": "timotree",
        "timestamp": 1713634556
    },
    {
        "content": "<blockquote>\n<p>In fact, if I add a type annotation <code>openLocalVariable : [Ok Str]*</code>, then both examples error</p>\n</blockquote>\n<p>Yeah, I'm not sure if that is a bug or not. It definitely is confusing. Realized that early and started <a class=\"stream-topic\" data-stream-id=\"395097\" href=\"/#narrow/stream/395097-compiler-development/topic/Is.20this.20a.20bug.3F\">#compiler development &gt; Is this a bug?</a>.</p>\n<blockquote>\n<p>\"If I have a local of type <code>[Ok Str]_</code>, it can be passed to a function of type <code>[Ok Str] -&gt; Bool</code>\"</p>\n</blockquote>\n<p>Need to add a caveat that the <code>_</code> needs to not merge with anything else for that to work.</p>\n<p>Eg</p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">generateOpenOkStr</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Str</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"nc\">Str</span><span class=\"p\">]</span><span class=\"o\">*</span>\n<span class=\"n\">generateOpenOkStr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"n\">s</span>\n\n<span class=\"n\">restrictsToClosed</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"nc\">Str</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Bool</span>\n<span class=\"n\">restrictsToClosed</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"nc\">Str</span><span class=\"o\">.</span><span class=\"n\">isEmpty</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">)</span>\n\n<span class=\"n\">restrictsToDifferentClosed</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"nc\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nc\">Other</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Bool</span>\n<span class=\"n\">restrictsToDifferentClosed</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">union</span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"ow\">when</span><span class=\"w\"> </span><span class=\"n\">union</span><span class=\"w\"> </span><span class=\"n\">is</span>\n<span class=\"w\">        </span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"nc\">Str</span><span class=\"o\">.</span><span class=\"n\">isEmpty</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"nc\">Other</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Bool</span><span class=\"o\">.</span><span class=\"no\">false</span>\n\n<span class=\"n\">expect</span>\n<span class=\"w\">    </span><span class=\"ow\">in</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"nc\">Str</span><span class=\"p\">]</span><span class=\"bp\">_</span>\n<span class=\"w\">    </span><span class=\"ow\">in</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">generateOpenOkStr</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span>\n<span class=\"w\">    </span><span class=\"n\">out0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">restrictsToDifferentClosed</span><span class=\"w\"> </span><span class=\"ow\">in</span>\n<span class=\"w\">    </span><span class=\"n\">out1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">restrictsToClosed</span><span class=\"w\"> </span><span class=\"ow\">in</span><span class=\"w\"> </span><span class=\"c1\"># Type error: `[Other, …]` vs `[…]`</span>\n<span class=\"w\">    </span><span class=\"n\">out0</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">out1</span>\n</code></pre></div>",
        "id": 434521128,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713635275
    }
]