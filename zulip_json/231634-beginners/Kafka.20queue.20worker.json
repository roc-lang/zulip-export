[
    {
        "content": "<p>Suppose I want to write a Roc app that handles Kafka messages rather than HTTP requests. Would the <code>basic-webserver</code> still be the best platform to use?</p>",
        "id": 441321677,
        "sender_full_name": "Eric Rogstad",
        "timestamp": 1717018331
    },
    {
        "content": "<p>Gut feeling is that a custom platform that understands Kafka could be really powerful here, but if you fundamentally need a webserver and want to build something today, <code>basic-webserver</code> is really the only thing ready in Roc.</p>",
        "id": 441331827,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717022600
    },
    {
        "content": "<p>Oh, though with Kafka queues, it is more like a CLI that polls the kafka queue and the post results, right? So it isn't really a web server at all. So might fitter better to a a CLI repeatedly making http requests across multiple threads</p>",
        "id": 441340263,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717025447
    },
    {
        "content": "<p>After skimming through this tutorial... <a href=\"https://developer.confluent.io/get-started/go/#create-project\">https://developer.confluent.io/get-started/go/#create-project</a></p>\n<p>I think it might be possible to make a Go platform to do this.</p>\n<p>You could have the app provide the <code>ConfigMap</code> on startup for all the properties, and <code>Topics</code> to subscribe to etc. </p>\n<p>The app could provide a handler and the platform exposes an API with effects or things to do on each message.</p>",
        "id": 441343162,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1717026527
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"496321\">@Oskar Hahn</span> has made a lot of progress recently with Go platform development, and upgraded the template, so I think we have most of the parts needed to get something like this working.</p>",
        "id": 441343408,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1717026603
    },
    {
        "content": "<p><a href=\"https://github.com/lukewilliamboswell/roc-platform-template-go\">https://github.com/lukewilliamboswell/roc-platform-template-go</a></p>",
        "id": 441343638,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1717026692
    },
    {
        "content": "<p>I also want to mention that I have no experience with Kafka other than a quick google.</p>",
        "id": 441345343,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1717027313
    },
    {
        "content": "<p>Thanks guys. That's helpful!</p>\n<p>Let me come at this from another angle though — what if what I really want is to be able to handle a bunch of requests (or queue messages) in parallel, and take advantage of the server's many cores — is there a platform that will run <code>Task</code>s on multiple threads by default? Or that makes it easy to do so?</p>",
        "id": 441380325,
        "sender_full_name": "Eric Rogstad",
        "timestamp": 1717045546
    },
    {
        "content": "<p>The context is that I've got a Rust project that uses <a href=\"https://github.com/fede1024/rust-rdkafka\">https://github.com/fede1024/rust-rdkafka</a> for interfacing with Kafka, and uses <code>tokio</code> tasks and channels to split up the work of processing the messages across multiple cores.</p>\n<p>I'm trying to think about how I'd organize an analogous project in Roc.</p>",
        "id": 441380686,
        "sender_full_name": "Eric Rogstad",
        "timestamp": 1717045708
    },
    {
        "content": "<p>As far, as I know, currently, you can not run Tasks in parallel. This will probably change in the future.</p>\n<p>What you can do today is writing your own platform. The host (the part of the platform, written in rust, go etc) can then call the exported roc function in parallel.</p>",
        "id": 441380851,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1717045792
    },
    {
        "content": "<p>Correct me if I'm wrong, but is it fair to say that the <code>Task</code> pattern, with managed effects, should be pretty amenable to running in parallel? Especially since everything in Roc is immutable.</p>",
        "id": 441381094,
        "sender_full_name": "Eric Rogstad",
        "timestamp": 1717045901
    },
    {
        "content": "<p>Here is the proposal to change, how Task works:  <a href=\"https://docs.google.com/document/d/1-h9bNNCLuYV2wSvjQA58SsGHOJivH9NHGr4wU_VF5I0/edit\">https://docs.google.com/document/d/1-h9bNNCLuYV2wSvjQA58SsGHOJivH9NHGr4wU_VF5I0/edit</a></p>\n<p>Here is the discussion, to implement it: <a href=\"#narrow/stream/395097-compiler-development/topic/Task.20as.20builtin\">https://roc.zulipchat.com/#narrow/stream/395097-compiler-development/topic/Task.20as.20builtin</a></p>\n<p>With this change, Task can run in parallel.</p>",
        "id": 441381747,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1717046222
    },
    {
        "content": "<p>To clarify, basic webserver runs multiple workers running tasks in parallel</p>",
        "id": 441383692,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717047096
    },
    {
        "content": "<p>What is missing is starting with a single threaded task and then spawning many things to run in parallel from that single threaded start</p>",
        "id": 441383732,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717047119
    },
    {
        "content": "<p>In this specific case, a bespoke platform for kafka that is built on top of <a href=\"https://github.com/fede1024/rust-rdkafka\">https://github.com/fede1024/rust-rdkafka</a> would make a lot of sense (but of course be more work).</p>",
        "id": 441383859,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717047167
    },
    {
        "content": "<p>Could also be built upon any similar tooling/libraries. You would define the worker functions in roc and something else would deal with mapping to/from kafka queues</p>",
        "id": 441383931,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717047210
    },
    {
        "content": "<p>Otherwise, with existing roc platforms, I'm not really sure something would work quite right. Basic cli is only single threaded. Basic webserver is not really made for queue processsing workers. It is made for url based web requests</p>",
        "id": 441384061,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717047271
    },
    {
        "content": "<p>Hmm, yeah I think what I'd be looking for is something like a more generic version of <code>basic-webserver</code>, where it runs multiple workers in parallel, but the workers aren't necessarily handling HTTP requests, and also they can pass messages to each other.</p>",
        "id": 441384422,
        "sender_full_name": "Eric Rogstad",
        "timestamp": 1717047470
    },
    {
        "content": "<p>Yeah, and that doesn't have to be tied directly to kafka, but roc really lets you play with the idea of tying directly to something like kafka if that would make a better experience for some forms of apps</p>",
        "id": 441384638,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717047586
    }
]