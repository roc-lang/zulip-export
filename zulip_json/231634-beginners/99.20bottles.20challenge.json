[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"c1\"># \"99 Bottles of Beer\" in Roc, by Jan Van Bruggen</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># For https://99-bottles-of-beer.net</span>\n\n<span class=\"n\">app</span> <span class=\"s2\">\"sing\"</span>\n    <span class=\"n\">packages</span> <span class=\"p\">{</span> <span class=\"n\">pf</span><span class=\"p\">:</span> <span class=\"s2\">\"../roc/examples/hello-world/platform/main.roc\"</span> <span class=\"p\">}</span>\n    <span class=\"n\">imports</span> <span class=\"p\">[]</span>\n    <span class=\"n\">provides</span> <span class=\"p\">[</span><span class=\"n\">main</span><span class=\"p\">]</span> <span class=\"n\">to</span> <span class=\"n\">pf</span>\n\n<span class=\"n\">main</span> <span class=\"o\">=</span> <span class=\"n\">List</span><span class=\"o\">.</span><span class=\"n\">range</span> <span class=\"mi\">0</span> <span class=\"mi\">100</span>\n    <span class=\"o\">|&gt;</span> <span class=\"n\">List</span><span class=\"o\">.</span><span class=\"n\">reverse</span>\n    <span class=\"o\">|&gt;</span> <span class=\"n\">List</span><span class=\"o\">.</span><span class=\"n\">map</span> \\<span class=\"n\">count</span> <span class=\"o\">-&gt;</span>\n        <span class=\"n\">before</span> <span class=\"o\">=</span> <span class=\"n\">Num</span><span class=\"o\">.</span><span class=\"n\">toStr</span> <span class=\"n\">count</span>\n        <span class=\"n\">after</span> <span class=\"o\">=</span> <span class=\"n\">Num</span><span class=\"o\">.</span><span class=\"n\">toStr</span> <span class=\"p\">(</span><span class=\"n\">count</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">when</span> <span class=\"n\">count</span> <span class=\"ow\">is</span>\n            <span class=\"mi\">0</span> <span class=\"o\">-&gt;</span> <span class=\"s2\">\"No more bottles of beer on the wall, no more bottles of beer.</span><span class=\"se\">\\n</span><span class=\"s2\">Go to the store and buy some more, 99 bottles of beer on the wall.\"</span>\n            <span class=\"mi\">1</span> <span class=\"o\">-&gt;</span> <span class=\"s2\">\"1 bottle of beer on the wall, 1 bottle of beer.</span><span class=\"se\">\\n</span><span class=\"s2\">Take one down and pass it around, no more bottles of beer on the wall.\"</span>\n            <span class=\"mi\">2</span> <span class=\"o\">-&gt;</span> <span class=\"s2\">\"2 bottles of beer on the wall, 2 bottles of beer.</span><span class=\"se\">\\n</span><span class=\"s2\">Take one down and pass it around, 1 bottle of beer on the wall.\"</span>\n            <span class=\"n\">_</span> <span class=\"o\">-&gt;</span> <span class=\"s2\">\"\\(before) bottles of beer on the wall, \\(before) bottles of beer.</span><span class=\"se\">\\n</span><span class=\"s2\">Take one down and pass it around, \\(after) bottles of beer on the wall.\"</span>\n    <span class=\"o\">|&gt;</span> <span class=\"n\">Str</span><span class=\"o\">.</span><span class=\"n\">joinWith</span> <span class=\"s2\">\"</span><span class=\"se\">\\n\\n</span><span class=\"s2\">\"</span>\n    <span class=\"o\">|&gt;</span> <span class=\"n\">Str</span><span class=\"o\">.</span><span class=\"n\">concat</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n</code></pre></div>\n<p>Any other approaches? :)</p>",
        "id": 288307598,
        "sender_full_name": "jan kili",
        "timestamp": 1656823823
    },
    {
        "content": "<p>maybe <code>List.range 100 0</code> should Just Work here</p>",
        "id": 288325762,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1656852206
    },
    {
        "content": "<p>would be a lot more efficient than reversing in place!</p>",
        "id": 288325768,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1656852219
    },
    {
        "content": "<p><code>List.range 0 100 |&gt; List.map (\\x -&gt; 100 - x) |&gt; ...</code> <span aria-label=\"sunglasses\" class=\"emoji emoji-1f60e\" role=\"img\" title=\"sunglasses\">:sunglasses:</span></p>",
        "id": 288325819,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1656852271
    },
    {
        "content": "<p>you could also do a <code>List.walkBackwards</code> and build up the answer list one <code>List.append</code> at a time</p>",
        "id": 288325827,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1656852285
    },
    {
        "content": "<p>We should benchmark this against using <code>Task.await (Stdout.line ...)</code></p>",
        "id": 288325907,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1656852399
    },
    {
        "content": "<p>I'd expect the <code>List</code> version to be faster - fewer syscalls, and Stdout is usually buffered (on a line boundary too), so probably fewer array writes too <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 288326303,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1656852935
    },
    {
        "content": "<p>but then again, performance is often surprising in practice!</p>",
        "id": 288326313,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1656852961
    },
    {
        "content": "<p>I refactored my script to make it more <code>s  c  a  l  a  b  l  e</code> - any ideas for how to gracefully merge <code>before1</code> and <code>before2</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"c1\"># \"99 Bottles of Beer\" in Roc, by Jan Van Bruggen</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># For https://99-bottles-of-beer.net</span>\n\n<span class=\"n\">app</span> <span class=\"s2\">\"sing\"</span>\n    <span class=\"n\">packages</span> <span class=\"p\">{</span> <span class=\"n\">pf</span><span class=\"p\">:</span> <span class=\"s2\">\"../roc/examples/hello-world/platform/main.roc\"</span> <span class=\"p\">}</span>\n    <span class=\"n\">imports</span> <span class=\"p\">[]</span>\n    <span class=\"n\">provides</span> <span class=\"p\">[</span><span class=\"n\">main</span><span class=\"p\">]</span> <span class=\"n\">to</span> <span class=\"n\">pf</span>\n\n<span class=\"n\">main</span> <span class=\"o\">=</span> <span class=\"n\">List</span><span class=\"o\">.</span><span class=\"n\">range</span> <span class=\"mi\">0</span> <span class=\"mi\">100</span>\n    <span class=\"o\">|&gt;</span> <span class=\"n\">List</span><span class=\"o\">.</span><span class=\"n\">reverse</span>\n    <span class=\"o\">|&gt;</span> <span class=\"n\">List</span><span class=\"o\">.</span><span class=\"n\">map</span> <span class=\"n\">verse</span>\n    <span class=\"o\">|&gt;</span> <span class=\"n\">Str</span><span class=\"o\">.</span><span class=\"n\">joinWith</span> <span class=\"s2\">\"</span><span class=\"se\">\\n\\n</span><span class=\"s2\">\"</span>\n    <span class=\"o\">|&gt;</span> <span class=\"n\">Str</span><span class=\"o\">.</span><span class=\"n\">concat</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n\n<span class=\"n\">verse</span> <span class=\"o\">=</span> \\<span class=\"n\">count</span> <span class=\"o\">-&gt;</span>\n    <span class=\"n\">take</span> <span class=\"o\">=</span> <span class=\"s2\">\"Take one down and pass it around\"</span>\n    <span class=\"n\">more</span> <span class=\"o\">=</span> <span class=\"s2\">\"Go to the store and buy some more\"</span>\n    <span class=\"n\">when</span> <span class=\"n\">count</span> <span class=\"ow\">is</span>\n        <span class=\"mi\">0</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">format</span> <span class=\"s2\">\"No more bottles\"</span> <span class=\"s2\">\"no more bottles\"</span> <span class=\"n\">more</span> <span class=\"s2\">\"99 bottles\"</span>\n        <span class=\"mi\">1</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">format</span> <span class=\"s2\">\"1 bottle\"</span> <span class=\"s2\">\"1 bottle\"</span> <span class=\"n\">take</span> <span class=\"s2\">\"No more bottles\"</span>\n        <span class=\"mi\">2</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">format</span> <span class=\"s2\">\"2 bottles\"</span> <span class=\"s2\">\"2 bottles\"</span> <span class=\"n\">take</span> <span class=\"s2\">\"1 bottle\"</span>\n        <span class=\"n\">_</span> <span class=\"o\">-&gt;</span>\n            <span class=\"n\">stringify</span> <span class=\"o\">=</span> \\<span class=\"n\">n</span> <span class=\"o\">-&gt;</span> <span class=\"n\">n</span> <span class=\"o\">|&gt;</span> <span class=\"n\">Num</span><span class=\"o\">.</span><span class=\"n\">toStr</span> <span class=\"o\">|&gt;</span> <span class=\"n\">Str</span><span class=\"o\">.</span><span class=\"n\">concat</span> <span class=\"s2\">\" bottles\"</span>\n            <span class=\"nb\">format</span> <span class=\"p\">(</span><span class=\"n\">stringify</span> <span class=\"n\">count</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">stringify</span> <span class=\"n\">count</span><span class=\"p\">)</span> <span class=\"n\">take</span> <span class=\"p\">(</span><span class=\"n\">stringify</span> <span class=\"p\">(</span><span class=\"n\">count</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n\n<span class=\"nb\">format</span> <span class=\"o\">=</span> \\<span class=\"n\">before1</span><span class=\"p\">,</span> <span class=\"n\">before2</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"p\">,</span> <span class=\"n\">after</span> <span class=\"o\">-&gt;</span>\n    <span class=\"s2\">\"\\(before1) of beer on the wall, \\(before2) of beer.</span><span class=\"se\">\\n</span><span class=\"s2\">\\(action), \\(after) of beer on the wall.\"</span>\n</code></pre></div>",
        "id": 290649550,
        "sender_full_name": "jan kili",
        "timestamp": 1658634089
    },
    {
        "content": "<p>(the only reason for the split is <code>No more</code> vs. <code>no more</code> <span aria-label=\"distraught\" class=\"emoji emoji-1f629\" role=\"img\" title=\"distraught\">:distraught:</span>)</p>",
        "id": 290649606,
        "sender_full_name": "jan kili",
        "timestamp": 1658634141
    },
    {
        "content": "<p>... or a bigger idea for how to do dynamic verse formatting more gracefully in general?</p>",
        "id": 290649653,
        "sender_full_name": "jan kili",
        "timestamp": 1658634204
    },
    {
        "content": "<p>You could pass a function on how to transform a capitalized string \"No more bottles\" into the non-capitalized form, which gives the caller a similar level of freedom.<br>\nA bigger idea could be defining functions like <code>format</code> for specific uses (like this one) but a record with transformations on a string inside of it. Functions that format strings could then require specific formatting functions and make the rest optional (or enable defaulting, as it's entirely possible to default some of these operations). This reduces the number of arguments and enables modular formatting functions with similar design elements. Just an idea though, no idea how ergonomic that would be</p>",
        "id": 290659365,
        "sender_full_name": "Thomas Dwyer",
        "timestamp": 1658649438
    },
    {
        "content": "<p>I imagine something like the following:</p>\n<div class=\"codehilite\"><pre><span></span><code>format :\n    {\n        toLowerPhr : Str -&gt; Str,\n        toUpperPhr : Str -&gt; Str,\n        replace : Map [Action, After] Str -&gt; [Action, After] -&gt; Str ,\n        # ^ The idea behind this is to mitigate the action and after\n               arguments and instead enable ad hoc replacements\n        replacements : Map [Action, After] Str\n    }*,\n    # ^ This whole record would be a Formatter and all formatting functions would use it.\n    Str -&gt; Str\nformat = \\{ toLowerPhr, toUpperPhr, replace, replacements}, str -&gt;\n    &quot;\\(toUpperPhr str) of beer on the wall, \\(toLowerPhr str) of beer.\\n\\(replace replacements Action), \\(replace replacements After) of beer on the wall&quot;\n</code></pre></div>\n<p>This means you pick and choose which formatting functions you want and throw out the rest. The caller provides the formatters they want and the formatter applies them where necessary. Hope this makes sense, also note I haven't done much Roc coding aside from browsing discussions here so I'm unsure how ergonomic this may or may not be. One thing i don't know how to do is enable picking and choosing of record fields from an established record (<code>Formatter</code>) in the Type declaration so new formatting functions can't add new functions not present in <code>Formatter</code> to the record; it may be difficult to have <em>a la carte</em> Open Records, if that makes sense. (Apologies for the several edits, its way too late at night lol)</p>",
        "id": 290660393,
        "sender_full_name": "Thomas Dwyer",
        "timestamp": 1658651112
    },
    {
        "content": "<p>Is the 'No more bottles...' thing required? There seem to be many implementations that just use `0 bottles...'</p>",
        "id": 290664808,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1658658154
    },
    {
        "content": "<p>I agree, that website probably would accept <code>0 bottles</code>, but I embrace this string formatting challenge!</p>",
        "id": 290669394,
        "sender_full_name": "jan kili",
        "timestamp": 1658664866
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"484835\">@Thomas Dwyer</span> interesting, I want to try that and see how it feels!</p>",
        "id": 290669554,
        "sender_full_name": "jan kili",
        "timestamp": 1658665173
    }
]