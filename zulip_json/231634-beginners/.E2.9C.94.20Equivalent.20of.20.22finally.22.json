[
    {
        "content": "<p>What would be the equivalent of \"finally\" for executing a task? I want to execute a task, store its result, then execute another task (cleanup that should always happen), then return the result. Here's kind of what I'm trying:</p>\n<div class=\"codehilite\"><pre><span></span><code>app = {}\n    Tty.enableRawMode! {}\n    loopTask = Task.loop app gameLoop |&gt; Task.mapErr (\\_ -&gt; Exit 0 &quot;Error&quot;)\n    # TODO execute loopTask, cache its result, disable raw mode no matter what, then return result\n    Tty.disableRawMode! {}\n    result\n</code></pre></div>",
        "id": 472801062,
        "sender_full_name": "Jared Cone",
        "timestamp": 1727317144
    },
    {
        "content": "<p><code>Task.ok result</code></p>",
        "id": 472801102,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727317194
    },
    {
        "content": "<p><a href=\"https://www.roc-lang.org/builtins/Task#ok\">https://www.roc-lang.org/builtins/Task#ok</a></p>",
        "id": 472801182,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727317235
    },
    {
        "content": "<p>I pass <code>loopTask</code> into Task.ok?</p>",
        "id": 472802577,
        "sender_full_name": "Jared Cone",
        "timestamp": 1727318241
    },
    {
        "content": "<p>to clarify, by store the result of loopTask, I mean the Result (which can be Ok or Err)</p>",
        "id": 472802791,
        "sender_full_name": "Jared Cone",
        "timestamp": 1727318383
    },
    {
        "content": "<p><del>You are mapping the error using <code>Task.mapErr</code> so you won't get a result from Task.loop. If you want that you should use something like <code>loopTask = Task.loop app gameLoop  |&gt; Task.result!</code></del></p>",
        "id": 472802955,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727318486
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>app [main] { cli: platform &quot;https://github.com/roc-lang/basic-cli/releases/download/0.15.0/SlwdbJ-3GR7uBWQo6zlmYWNYOxnvo8r6YABXD-45UOw.tar.br&quot; }\n\nimport cli.Stdout\n\nmain =\n\n    Stdout.line! &quot;enableRawMode&quot;\n\n    result = Task.loop! {} gameLoop\n\n    Stdout.line! &quot;disableRawMode&quot;\n\n    Stdout.line &quot;Got: $(Inspect.toStr result)&quot;\n\ngameLoop = \\{} -&gt; Task.ok (Done Answer)\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>$ roc example.roc\nenableRawMode\ndisableRawMode\nGot: Answer\n</code></pre></div>",
        "id": 472803485,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727318866
    },
    {
        "content": "<p>There isn't any Result being used here though. <code>Task.loop</code> </p>\n<p><span class=\"user-mention silent\" data-user-id=\"481285\">Jared Cone</span> <a href=\"#narrow/stream/231634-beginners/topic/Equivalent.20of.20.22finally.22/near/472802791\">said</a>:</p>\n<blockquote>\n<p>to clarify, by store the result of loopTask, I mean the Result (which can be Ok or Err)</p>\n</blockquote>\n<p>What is the type of your <code>gameLoop</code> function?</p>",
        "id": 472803749,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727319037
    },
    {
        "content": "<p>In your code snippet, if <code>Task.loop! {} gameLoop</code> fails, will <code>Stdout.line! \"disableRawMode\"</code> still execute? I thought it would not</p>",
        "id": 472803814,
        "sender_full_name": "Jared Cone",
        "timestamp": 1727319103
    },
    {
        "content": "<p>I think this might be what I wanted:</p>\n<div class=\"codehilite\"><pre><span></span><code>main : Task {} [Exit I32 Str]_\nmain =\n    app = {}\n    Tty.enableRawMode! {}\n    Task.loop app gameLoop\n    |&gt; Task.attempt\n        (\\result -&gt;\n            Tty.disableRawMode! {}\n            Task.fromResult result)\n    |&gt; Task.mapErr (\\_ -&gt; Exit 1 &quot;Error&quot;)\n\ngameLoop : AppState -&gt; Task [Done {}, Step AppState] _\n</code></pre></div>",
        "id": 472803979,
        "sender_full_name": "Jared Cone",
        "timestamp": 1727319236
    },
    {
        "content": "<p>There's definitely some frustrating compiler bugs lurking around here. I keep seeing when I try different things</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;&lt;unnamed&gt;&#39; panicked at crates/compiler/mono/src/ir.rs:6151:56:\ncalled `Option::unwrap()` on a `None` value\n</code></pre></div>\n<p><a href=\"https://gist.github.com/lukewilliamboswell/fac30e97e14793c078369d6afa26aa63\">https://gist.github.com/lukewilliamboswell/fac30e97e14793c078369d6afa26aa63</a></p>",
        "id": 472804432,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727319571
    },
    {
        "content": "<p>Anyway, glad you have something working for now</p>",
        "id": 472804581,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727319660
    },
    {
        "content": "<p>ty</p>",
        "id": 472804593,
        "sender_full_name": "Jared Cone",
        "timestamp": 1727319669
    },
    {
        "content": "<p>I would have expected this to work. But it's hitting that error. </p>\n<div class=\"codehilite\"><pre><span></span><code>app [main] { cli: platform &quot;https://github.com/roc-lang/basic-cli/releases/download/0.15.0/SlwdbJ-3GR7uBWQo6zlmYWNYOxnvo8r6YABXD-45UOw.tar.br&quot; }\n\nimport cli.Stdout\n\nmain =\n\n    Stdout.line! &quot;enableRawMode&quot;\n\n    gameState =\n        Task.loop {} gameLoop\n        |&gt; Task.onErr! \\_ -&gt;\n            Stdout.line! &quot;got an error... cleaning up then exiting&quot;\n            Stdout.line! &quot;disableRawMode&quot;\n            Task.err (Exit 1 &quot;SomethingBlewUp&quot;)\n\n    Stdout.line! &quot;disableRawMode&quot;\n\n    Stdout.line! &quot;Got: $(Inspect.toStr gameState)&quot;\n\n# crashes with this\n#thread &#39;&lt;unnamed&gt;&#39; panicked at crates/compiler/mono/src/ir.rs:6151:56:\n#called `Option::unwrap()` on a `None` value\n#note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\ngameLoop = \\{} -&gt; Task.err SomethingBlewUp\n\n# works with this\n#$ roc example.roc\n#enableRawMode\n#disableRawMode\n#Got: Answer\n#gameLoop = \\{} -&gt; Task.ok (Done Answer)\n</code></pre></div>",
        "id": 472804961,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727319934
    },
    {
        "content": "<p>Looks like a lambda set specialization issue. This is what crashes</p>\n<div class=\"codehilite\"><pre><span></span><code>let spec_symbol_index = iter_lambda_set.next().unwrap().0;\n</code></pre></div>",
        "id": 472805080,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727320015
    },
    {
        "content": "<p>Different error when running debug build of the compiler...</p>\n<div class=\"codehilite\"><pre><span></span><code>$ nix develop\n$ cargo run -- example.roc\nthread &#39;&lt;unnamed&gt;&#39; panicked at crates/compiler/mono/src/layout.rs:2065:17:\nunspecialized lambda sets left over during resolution: LambdaSet([] + (&lt;2127&gt;FlexAble(*, [`Inspect.Inspect`]):`Inspect.toInspector`:2), ^&lt;2130&gt;), UlsOfVar(VecMap { keys: [2127], values: [VecSet { elements: [2126, 2129] }] })\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>",
        "id": 472805409,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727320264
    },
    {
        "content": "<p>Ok, so the issue is cause by <code>Inspect.toStr</code> here.. removing that and it works as I expected. </p>\n<div class=\"codehilite\"><pre><span></span><code>app [main] { cli: platform &quot;https://github.com/roc-lang/basic-cli/releases/download/0.15.0/SlwdbJ-3GR7uBWQo6zlmYWNYOxnvo8r6YABXD-45UOw.tar.br&quot; }\n\nimport cli.Stdout\n\nmain =\n\n    Stdout.line! &quot;enableRawMode&quot;\n\n    # ignoring the game state\n    _ =\n        Task.loop {} gameLoop\n        |&gt; Task.onErr! \\_ -&gt;\n            Stdout.line! &quot;got an error... cleaning up then exiting&quot;\n            Stdout.line! &quot;disableRawMode&quot;\n            Task.err (Exit 1 &quot;exiting because we got an error running the game loop&quot;)\n\n    Stdout.line! &quot;disableRawMode&quot;\n\n    Stdout.line! &quot;SUCCESS&quot;\n\ngameLoop = \\{} -&gt; Task.err SomethingBlewUp\n\n#gameLoop = \\{} -&gt; Task.ok (Done Answer)\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>$ cargo run -- example.roc\n    Finished dev [unoptimized + debuginfo] target(s) in 0.17s\n     Running `target/debug/roc example.roc`\nenableRawMode\ngot an error... cleaning up then exiting\ndisableRawMode\nexiting because we got an error running the game loop\n</code></pre></div>",
        "id": 472805579,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727320405
    },
    {
        "content": "<p>As a general note, I think <a href=\"https://www.roc-lang.org/builtins/Task#result\">Task.result</a> is closer to what you were looking for. That can be used to merge the ok and error case enabling a \"finally\"</p>",
        "id": 472891513,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1727355759
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Stdout.line! &quot;enableRawMode&quot;\nres = Task.loop ... |&gt; Task.result!\nStdout.line! &quot;disableRawMode&quot;\nTask.fromResult! res\n</code></pre></div>",
        "id": 472894786,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1727356592
    },
    {
        "content": "<p>We probably could add a <code>Task.finally</code> to make this simpler</p>",
        "id": 472894897,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1727356631
    },
    {
        "content": "<p>sure - plus, in the Purity Inference world, this entire category of problem goes away <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 472907246,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1727360066
    },
    {
        "content": "<p>Does it? You still have the case of wanting a finally after a group of <code>?</code> on a result</p>",
        "id": 472988820,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1727393897
    },
    {
        "content": "<p>I mean converting between <code>Task</code> and <code>Result</code> in general</p>",
        "id": 472989193,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1727394144
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"481285\">Jared Cone</span> has marked this topic as resolved.</p>",
        "id": 473271142,
        "sender_full_name": "Notification Bot",
        "timestamp": 1727491714
    }
]