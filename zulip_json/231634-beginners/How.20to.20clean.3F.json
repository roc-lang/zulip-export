[
    {
        "content": "<p>Silly question, but I think I got in some weird state.</p>\n<p><code>roc check file.roc</code> have passed 0 errs, 0 warns, but <code>roc run file.roc</code> exploded on my face like a piÃ±ata. <br>\nSubsequent undos of the code make even <code>roc check file.roc</code> paniced. </p>\n<p>So maybe it's worth debugging it, my question is, what would be rocs <code>rm -rf ./node_modules</code> equivalent? </p>\n<p>For those interested below is log: </p>\n<div class=\"codehilite\"><pre><span></span><code>MacBook-Pro:examples popara$ ../target/debug/roc check cli/echo.roc\n\nâ”€â”€ UNUSED DEFINITION â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ cli/echo.roc â”€\n\naction is not used anywhere in your code.\n\n37â”‚      action =\n         ^^^^^^\n\nIf you didn&#39;t intend on using action then remove it so future readers\nof your code don&#39;t wonder why it is there.\n\nâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n\n0 errors and 1 warning found in 395 ms.\nMacBook-Pro:examples popara$ ../target/debug/roc check cli/echo.roc\n0 errors and 0 warnings found in 320 ms.\nMacBook-Pro:examples popara$ ../target/debug/roc run cli/echo.roc\nðŸ”¨ Rebuilding platform...\nthread &#39;main&#39; panicked at &#39;Error in alias analysis: error in module ModName(&quot;UserApp&quot;), function definition FuncName(&quot;\\x01\\x00\\x00\\x00\\x16\\x00\\x00\\x00\\x02\\\\\\xbd\\x19\\x94\\x9bG\\xe6&quot;), definition of type binding TypeId(0): could not find named type in module ModName(&quot;UserApp&quot;) with name TypeName(&quot;\\x17{\\xd3\\x8c\\x03\\xbeS\\xb9&quot;)&#39;, crates/compiler/gen_llvm/src/llvm/build.rs:4504:23\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\nMacBook-Pro:examples popara$ ../target/debug/roc dev cli/echo.roc\nðŸ”¨ Rebuilding platform...\nthread &#39;main&#39; panicked at &#39;Error in alias analysis: error in module ModName(&quot;UserApp&quot;), function definition FuncName(&quot;\\x01\\x00\\x00\\x00\\x16\\x00\\x00\\x00\\x02\\\\\\xbd\\x19\\x94\\x9bG\\xe6&quot;), definition of type binding TypeId(0): could not find named type in module ModName(&quot;UserApp&quot;) with name TypeName(&quot;\\x17{\\xd3\\x8c\\x03\\xbeS\\xb9&quot;)&#39;, crates/compiler/gen_llvm/src/llvm/build.rs:4504:23\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\nMacBook-Pro:examples popara$ ../target/debug/roc run cli/echo.roc\nthread &#39;&lt;unnamed&gt;&#39; panicked at &#39;internal error: entered unreachable code: Expects { conditions: [Call((89, @371-373 AbilityMember(`Bool.isEq`, Some(SpecializationId(1)), 88), 90, 91), [(85, @362-370 Access { record_var: 82, ext_var: 84, field_var: 83, loc_expr: @362-370 Var(`#UserApp.nm`), field: &#39;cyber&#39; }), (87, @374-376 Num(86, &quot;42&quot;, I128([42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), AtLeastIntOrFloat { sign: NoDemand, width: I8 }))], BinOp(Equals))], regions: [@362-376], preceding_comment: [@355-355] }&#39;, crates/compiler/can/src/def.rs:2320:13\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n^C\nMacBook-Pro:examples popara$ ../target/debug/roc check cli/echo.roc\nthread &#39;&lt;unnamed&gt;&#39; panicked at &#39;internal error: entered unreachable code: Expects { conditions: [Call((89, @371-373 AbilityMember(`Bool.isEq`, Some(SpecializationId(1)), 88), 90, 91), [(85, @362-370 Access { record_var: 82, ext_var: 84, field_var: 83, loc_expr: @362-370 Var(`#UserApp.nm`), field: &#39;cyber&#39; }), (87, @374-376 Num(86, &quot;42&quot;, I128([42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), AtLeastIntOrFloat { sign: NoDemand, width: I8 }))], BinOp(Equals))], regions: [@362-376], preceding_comment: [@355-355] }&#39;, crates/compiler/can/src/def.rs:2320:13\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\n^C\nMacBook-Pro:examples popara$\n</code></pre></div>",
        "id": 304861966,
        "sender_full_name": "Zeljko Nesic",
        "timestamp": 1666138956
    },
    {
        "content": "<p>It looks like you have triggered a compiler bug. This can happen when there are things in your <code>.roc</code> file that are not yet supported in the <code>roc</code> binary. Pretty sure there is nothing you need to clean up, just delete the generated executable file (or not as it will be overwritten anyway), and build again. Fro reference I prefer using <code>roc dev</code> which includes a typecheck like <code>roc check</code>.  If you can narrow down your code to isolate the compiler bug, then you can create an issue for it.</p>",
        "id": 304862511,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1666139419
    },
    {
        "content": "<p>Oh turned out to be even more trivial. <br>\nCompiler breaks when you write this </p>\n<div class=\"codehilite\"><pre><span></span><code>mainTask : Task ExitCode [] [Read [Stdin], Write [Stdout]]\nmainTask =\n    Task.forever (\n        nm = { cyber : 42 , funk : &quot;Yo&quot; }\n        msg = Vamos\n        expect nm == nm # &lt;&lt;&lt; THIS\n        _ &lt;- Task.await (Stdout.line &quot;ðŸ—£ \\(nm.funk) ! ðŸ‘‚ðŸ‘‚ðŸ‘‚&quot;)\n        Task.loop nm (\\model -&gt; Task.map (tick  msg model) Step)\n    )\n    |&gt; Program.exit 0\n</code></pre></div>\n<p><code>expect</code> in <code>Tasks</code> == bazooka + piÃ±ata</p>",
        "id": 304938494,
        "sender_full_name": "Zeljko Nesic",
        "timestamp": 1666181423
    }
]