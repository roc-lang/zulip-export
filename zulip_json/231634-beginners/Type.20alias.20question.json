[
    {
        "content": "<p>I have the following sample:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kn\">module</span><span class=\"w\"> </span><span class=\"err\">[</span><span class=\"nc\">MyType</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">create</span><span class=\"p\">]</span>\n\n<span class=\"kt\">MyType</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nv\">name</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"err\">#</span><span class=\"w\"> </span><span class=\"kt\">I</span><span class=\"w\"> </span><span class=\"nv\">know</span><span class=\"w\"> </span><span class=\"kt\">I</span><span class=\"w\"> </span><span class=\"nv\">can</span><span class=\"w\"> </span><span class=\"nv\">do</span><span class=\"w\"> </span><span class=\"nv\">this</span>\n<span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nv\">create</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">MyType</span>\n<span class=\"nv\">create</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">|</span><span class=\"nv\">name</span><span class=\"nf\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nv\">name</span><span class=\"p\">}</span>\n</code></pre></div>\n<p>Is there a way to \"cast\" the record to the alias without the global type annotation?</p>\n<p>I guess the same goes for:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">MyType</span>\n<span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nv\">name</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"name\"</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nv\">can</span><span class=\"w\"> </span><span class=\"kt\">I</span><span class=\"w\"> </span><span class=\"nv\">somehow</span><span class=\"w\"> </span><span class=\"s\">\"cast\"</span><span class=\"w\"> </span><span class=\"nv\">it</span><span class=\"err\">?</span>\n</code></pre></div>\n<p>I tried different things, but most errors point me to a situation where it just creates a new tag. Btw, I was a bit surprised that you can have both a tag and a type with the same name :)</p>",
        "id": 512416771,
        "sender_full_name": "Krzysztof Skowronek",
        "timestamp": 1744752618
    },
    {
        "content": "<p>I'm not sure I understand the question. What do you need to cast?</p>",
        "id": 512434051,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744761572
    },
    {
        "content": "<p>I want the function type to say it return MyType. So I need to somehow tell the compiler to use the alias instead of just record shape.</p>\n<p>So far only way I found is to use type annotations on the function. By casting I mean putting something in the record itself, so that the MyType is infected for the function</p>",
        "id": 512477007,
        "sender_full_name": "Krzysztof Skowronek",
        "timestamp": 1744786607
    },
    {
        "content": "<p>I am looking for something like:</p>\n<div class=\"codehilite\"><pre><span></span><code>create = |name| {name} as MyType\n</code></pre></div>\n<p>so that the create function is inferred as <code>create: Str -&gt; MyType</code> instead of <code>create : Str -&gt; {name: Str}</code>. I know I can add the dectoration on the fucntion. Another thing I know I can do is:</p>\n<div class=\"codehilite\"><pre><span></span><code>create = |name|\n    result : MyType\n    result = { name }\n\n    result\n</code></pre></div>\n<p>but it still feels like a way around :)</p>",
        "id": 512496886,
        "sender_full_name": "Krzysztof Skowronek",
        "timestamp": 1744793125
    },
    {
        "content": "<p>There is no casting like that in Roc, annotations are the only way.</p>",
        "id": 512505680,
        "sender_full_name": "Anton",
        "timestamp": 1744795624
    },
    {
        "content": "<p>A function that returns <code>{ name: Str }</code> and one that accepts <code>MyType</code> are compatible though.</p>",
        "id": 512514334,
        "sender_full_name": "Anton",
        "timestamp": 1744798192
    },
    {
        "content": "<p>I know, but they stop being compatible when I change the MyType definition. I guess type annotations are enough. the seem a bit invasive. But defintely good enough :)</p>",
        "id": 512515210,
        "sender_full_name": "Krzysztof Skowronek",
        "timestamp": 1744798501
    },
    {
        "content": "<p>An important piece of information in Roc:<br>\nA type alias is solely an alias (or in more proper terms, is a structural type). So they have no distinction in the compiler from the underlying type. That is why you can't cast to them it would literally be a noop.</p>\n<p>We also have opaque types (which are true custom types that are unique), but they are likely way more heavy handed than you want here.</p>\n<p>Type annotations are the correct solution in roc for this.</p>\n<p>The short way to do it without annotating the function would be to just annotate the variable:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">myFn</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|...|</span>\n<span class=\"w\">    </span><span class=\"o\">...</span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"no\">SomeType</span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">...</span>\n<span class=\"w\">    </span><span class=\"n\">x</span>\n</code></pre></div>\n<p>We generally recommend annotating all top level functions in code larger than small scripts.</p>",
        "id": 512609351,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744823362
    },
    {
        "content": "<p>I fully understand, I haven't written big enough program yet to fully emerge the practices around that :) </p>\n<p>I have played with opaque types, and so far my only question for them would be whether it's possible to make just some member \"public\", like a length for a list while everything else is hidden.</p>\n<p>Judging by the standard library it's impossible and I should just make MyType.len function</p>",
        "id": 512656270,
        "sender_full_name": "Krzysztof Skowronek",
        "timestamp": 1744830522
    },
    {
        "content": "<p>Currently impossible. May change in the zig compiler with custom types (the new variant of opaque types)</p>",
        "id": 512665159,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744831891
    }
]