[
    {
        "content": "<p>Anything obvious that I am doing wrong here: <a href=\"https://gist.github.com/bhansconnect/4927cd203a407b98ee369da47c4f7e58\">https://gist.github.com/bhansconnect/4927cd203a407b98ee369da47c4f7e58</a></p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;main&#39; panicked at &#39;Error in alias analysis: error in module ModName(&quot;UserApp&quot;), function definition FuncName(&quot;\\x02\\x00\\x00\\x00\\x13\\x00\\x00\\x00\\xa1\\xfb\\xe2\\xb3\\x18i\\xd5#&quot;), definition of value binding ValueId(3): could not find func in module ModName(&quot;UserApp&quot;) with name FuncName(&quot;\\x04\\x00\\x00\\x00\\&#39;\\x00\\x00\\x00\\xa1\\xfb\\xe2\\xb3\\x18i\\xd5#&quot;)&#39;, crates/compiler/gen_llvm/src/llvm/build.rs:5123:19\n</code></pre></div>\n<p>I assume it is an issue with recursive functions that return task? I am just not sure why. <code>roc check</code> does pass.</p>",
        "id": 391801586,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1695085206
    },
    {
        "content": "<p>Those are some funky <code>FuncName</code>s!<br>\nThey have a lot of non ASCII characters, even though the source code doesn't.<br>\nThe message mentions alias analysis which is to do with reference counting and operates on the monomorphic IR. Probably worth dumping that to debug further.</p>",
        "id": 391832542,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1695101672
    },
    {
        "content": "<p>This is a version that works: <a href=\"https://gist.github.com/bhansconnect/bbc096e1a19ad1056856bc0cb40a03c7\">https://gist.github.com/bhansconnect/bbc096e1a19ad1056856bc0cb40a03c7</a></p>\n<p>Still need to dig into exactly why the original version doesn't work. The core issue is recursively using tasks. Without <code>Task.loop</code> the recursive tasks break and I get the alias error.</p>",
        "id": 391836400,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1695103611
    },
    {
        "content": "<p>That link has the same hash as above and writeRow is a recursive task.</p>",
        "id": 391839243,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1695105133
    },
    {
        "content": "<p>My bad. Updated.</p>",
        "id": 391840422,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1695105755
    },
    {
        "content": "<p>We have <a href=\"https://github.com/search?q=repo%3Aroc-lang%2Froc+%22error+in+alias+analysis%22+%22could+not+find+func%22+is%3Aissue+is%3Aopen&amp;type=issues\">several issues with that error</a>.</p>",
        "id": 391880186,
        "sender_full_name": "Anton",
        "timestamp": 1695118884
    },
    {
        "content": "<p>I wonder if that means it is an unclear error with little valuable information or if it means that the error is caused by a consistent issue any many places. Maybe <span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> has a guess?</p>",
        "id": 391939119,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1695137507
    },
    {
        "content": "<p>If you hit a bug like that it's definitely a bug with the compiler middle/backend, not a user error</p>",
        "id": 391945261,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1695139313
    },
    {
        "content": "<p>it usually means we have a miscompilation. almost certainly during the mono IR lowering</p>",
        "id": 391945373,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1695139337
    },
    {
        "content": "<p>Since you can get a debug compiler, I would run <code>ROC_CHECK_MONO_IR=1</code> when you build with the debug compiler - that's likely to print out where the problem in the miscompilation is</p>",
        "id": 391945620,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1695139384
    },
    {
        "content": "<p>Interesting, an error recognizing two specializations are the same?</p>\n<p>This is repeated for many different functions:</p>\n<div class=\"codehilite\"><pre><span></span><code>await : ({Str, {}}, {I64, I64, I64, I64}) -&gt;\n[&lt;r&gt;C {Str, {}} {I64, I64, I64, I64}, C Str {}, C [C I32, C {}]] ((niche {}))\n\nwas found\n\nThe following specializations of Task.await were built:await : ({Str, {}},\n{I64, I64, I64, I64}) -&gt;\n[&lt;r&gt;C {Str, {}} {I64, I64, I64, I64}, C Str {}, C [C I32, C {}]] ((niche {}))\n\n...\n</code></pre></div>\n<p>The built specialization matches the one that is claim to be missing here (minus some formatting to print).</p>",
        "id": 391947604,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1695139953
    },
    {
        "content": "<p>maybe the lambda sets are off. the lambda names are missing in those types</p>",
        "id": 391950086,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1695140590
    },
    {
        "content": "<p>Is this something you think it is worth me digging in and trying to debug or should I just collect this info and file a bug?</p>",
        "id": 391955670,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1695142455
    },
    {
        "content": "<p>If you have the bandwidth and want to, yeah, absolutely go for it!</p>",
        "id": 391971822,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1695148052
    },
    {
        "content": "<p>Any base tips for what to dive into? Haven't messed with specialization or lambda sets.</p>",
        "id": 391973760,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1695148618
    },
    {
        "content": "<p>I would first look into what is actually the difference between the two specializations</p>",
        "id": 391973860,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1695148657
    },
    {
        "content": "<p>for example here is where the procedure layout is being printed: <a href=\"https://github.com/roc-lang/roc/blob/ab2ec925a3038643d5da5c431d1773d34fc4100c/crates/compiler/mono/src/debug/report.rs#L537-L565\">https://github.com/roc-lang/roc/blob/ab2ec925a3038643d5da5c431d1773d34fc4100c/crates/compiler/mono/src/debug/report.rs#L537-L565</a></p>",
        "id": 391974743,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1695148971
    },
    {
        "content": "<p>you might want to apply a diff like</p>\n<div class=\"codehilite\"><pre><span></span><code>diff --git a/crates/compiler/mono/src/debug/report.rs b/crates/compiler/mono/src/debug/report.rs\nindex bca214c26..7a7495c3e 100644\n--- a/crates/compiler/mono/src/debug/report.rs\n+++ b/crates/compiler/mono/src/debug/report.rs\n@@ -550,16 +550,16 @@ where\n     let args = f.intersperse(\n         arguments\n             .iter()\n-            .map(|a| interner.to_doc(*a, f, &amp;mut Default::default(), Parens::InFunction)),\n+            .map(|a| format!(&quot;{:?}&quot;, interner.dbg_deep(*a))),\n         f.reflow(&quot;, &quot;),\n     );\n     let fun = f.concat([\n         f.concat([f.reflow(&quot;(&quot;), args, f.reflow(&quot;)&quot;)]),\n         f.reflow(&quot; -&gt; &quot;),\n-        interner.to_doc_top(result, f),\n+        f.text(format!(&quot;{:?}&quot;, interner.dbg_deep(result))),\n     ]);\n     let niche = (f.text(&quot;(&quot;))\n-        .append(captures_niche.to_doc(f, interner, &amp;mut Default::default()))\n+        .append(format!(&quot;{:?}&quot;, captures_niche.dbg_deep(interner)))\n         .append(f.text(&quot;)&quot;));\n     f.concat([fun, f.space(), niche])\n }\n</code></pre></div>\n<p>to print the whole represetntations</p>",
        "id": 391975391,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1695149202
    },
    {
        "content": "<p>Wow is that a lot of output. Looks like built version truncates the tree with a recursive pointer, but the wanted version does not have that recursive pointer. Instead it nests much farther before hitting a recursive pointer. So they probably are equal, but something isn't being compressed into recursive pointers correctly.</p>",
        "id": 391978127,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1695150202
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/issues/5701#issuecomment-1703850484\">I had completely minimized the basic-cli platform</a> from when I hit this error, that may help reduce the output.</p>",
        "id": 392702969,
        "sender_full_name": "Anton",
        "timestamp": 1695477860
    }
]