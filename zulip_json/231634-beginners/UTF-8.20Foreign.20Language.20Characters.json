[
    {
        "content": "<p>I was playing around with single character type.</p>\n<p>What would be the best way to go from 12363 Int* back to String or Char?  Should 'か' default to List U8 instead of Int *?</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>x = 'か'\n12363 : Int *\n\nStr.fromUtf8 [227, 129, 139]\nOk \"か\" : Result Str\n</code></pre></div>",
        "id": 419529631,
        "sender_full_name": "Brian Teague",
        "timestamp": 1706905680
    },
    {
        "content": "<p>Ah, cause we don't have <code>Str.appendScalar</code> anymore.</p>",
        "id": 419531482,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706906401
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> I don't quite understand why we removed <code>Str.appendScalar</code>. It feels like an important primitive for using characters with Strings. I don't think it falls into the same complexity as other Unicode function and it can return a result to avoid errors with invalid Unicode scalar.</p>\n<p>That or at least need some way to go from a character literal to a string literal</p>",
        "id": 419531723,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706906490
    },
    {
        "content": "<p>I guess currently the best option would be to store  <code>か</code> as a string and use <code>Str.concat</code></p>",
        "id": 419531980,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706906589
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"676210\">@Brian Teague</span> what are you actually trying to do?</p>",
        "id": 419532260,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706906715
    },
    {
        "content": "<p>Nothing actually productive.  I'm just trying to learn the specifics of ROC's implementation.  I mean the easiest thing to do is <code>Str.toUtf8 \"か\"</code>, so maybe a better question is why not treat everything as a Str instead of Int unless there is a specific use case for single characters integers?</p>",
        "id": 419534686,
        "sender_full_name": "Brian Teague",
        "timestamp": 1706907766
    },
    {
        "content": "<p>I guess the larger ones are problematic. The U8 ones are great for pattern matching.</p>\n<p>Before it was useful cause you could convert a string into a list of scalars (I32) and then match on any of these values.</p>",
        "id": 419536827,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706908912
    },
    {
        "content": "<p>We just need to add it in roc-lang/unicode. The module is there just needs some love.</p>",
        "id": 419540976,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1706910959
    },
    {
        "content": "<p>part of the motivation for removing it is to make it more obvious that in practical scenarios, you should either be working in terms of <code>Str</code> or in terms of <code>List U8</code> 99.99% of the time, and doing anything at all with code point integers should be microscopically rare in practice</p>",
        "id": 419544160,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1706912438
    },
    {
        "content": "<p>(other than the ones that overlap with ASCII, which comes up in parsing textual data formats like JSON and source code, in which case <code>List U8</code> is definitely the right thing to reach for!)</p>",
        "id": 419544289,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1706912521
    },
    {
        "content": "<p>someone pointed out in a comment somewhere (reddit I think?) that they weren't sure what <code>Str</code> was encouraging them to do in terms of these different primitives, and I think that criticism was valid</p>",
        "id": 419544450,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1706912594
    },
    {
        "content": "<p>so I think there's value in not having any <code>Str</code> functions at all that work in terms of code points, and instead having all of that logic live in <code>roc-lang/unicode</code></p>",
        "id": 419544545,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1706912643
    },
    {
        "content": "<p>I guess it just really weird having the <code>'か'</code> literal then.</p>\n<p>It can't be used with <code>Str</code> or <code>List U8</code></p>",
        "id": 419547393,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706914029
    },
    {
        "content": "<blockquote>\n<p>We just need to add it in roc-lang/unicode</p>\n</blockquote>\n<p>I don't think that is the issue. Unicode is a power module for special use cases. Most users should never need to touch it. Adding a character to the end of a Str is not a special use case. We need to make sure there is a clear story of how that works.</p>\n<p>Note, the clear story may be to remove literals like <code>'か'</code> and require <code>\"か\"</code> instead. Then <code>Str.concat</code> just works.</p>",
        "id": 419547661,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706914175
    },
    {
        "content": "<p>I would use <code>Str.concat mystr \"か\"</code>. It is helpful to have the codepoint literals though, so I would rather not lose that</p>",
        "id": 419551434,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1706916191
    },
    {
        "content": "<p>I'm not sold. It is really strange to have a literal type that doesn't work with any of the standard library.</p>",
        "id": 419551558,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706916246
    },
    {
        "content": "<p>I agree that it's strange</p>",
        "id": 419555160,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1706918562
    },
    {
        "content": "<p>so then would single quotes only accept things that fit in <code>U8</code>?</p>",
        "id": 419555222,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1706918613
    },
    {
        "content": "<p>(I think it's reasonable to try that and see if there's demand in practice for expanding it; I suspect there would be little or none)</p>",
        "id": 419555318,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1706918672
    },
    {
        "content": "<p>Yeah, I think that would make more sense <code>'c'</code> for list U8 and <code>\"c\"</code> for string use.</p>",
        "id": 419555835,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706918961
    },
    {
        "content": "<p>oh I meant <code>'c'</code> for <code>U8</code></p>",
        "id": 419557142,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1706919820
    },
    {
        "content": "<p>(maybe that's what you meant too though!)</p>",
        "id": 419557164,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1706919836
    },
    {
        "content": "<p>Yeah, sorry, I meant <code>'c'</code> for use with List U8. The value would just be a U8.</p>",
        "id": 419557280,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706919900
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/231634-beginners/topic/UTF-8.20Foreign.20Language.20Characters/near/419555222\">said</a>:</p>\n<blockquote>\n<p>so then would single quotes only accept things that fit in <code>U8</code>?</p>\n</blockquote>\n<p>If I understand you correctly, only convert chars to U8 if they fit, otherwise return a compile error?<br>\nAn alternative is converting to List U8 if it doesn't fit in a U8, but I could see that leading to unexpected outcomes because of the different types single quote chars could return.</p>",
        "id": 419567104,
        "sender_full_name": "Brian Teague",
        "timestamp": 1706927512
    },
    {
        "content": "<p>Yeah, exactly that</p>",
        "id": 419569677,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706929536
    },
    {
        "content": "<p>With the exact same concern for different values</p>",
        "id": 419569684,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706929546
    }
]