[
    {
        "content": "<p>Why  this code  does not work and how to implement equivalent </p>\n<div class=\"codehilite\"><pre><span></span><code>modifyActive = \\ head -&gt;\n\n    updatedLst =\n\n        if List.isEmpty head.children == Bool.true then\n            [head]\n        else\n            head.children\n    updatedLst\n\n\n\n\na = { children :  []}\nkk =modifyActive a\n</code></pre></div>",
        "id": 400942781,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1699449635
    },
    {
        "content": "<p>tree like are  rather quite basic  structures  how to accomplish  creating them in Roc</p>",
        "id": 400946146,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1699450786
    },
    {
        "content": "<p>I think I can  workaround this problem  using  Tags  a = { children :  Childern []}   &lt;-- something like that</p>",
        "id": 400982404,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1699461582
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>modifyActive = \\ head -&gt;\n\n    updatedLst =\n         when  head.children is\n           Ok children -&gt;\n                    if List.isEmpty head.children == Bool.true then\n                          [head]\n                     else\n                           head.children\n            Err -&gt;  []\n    updatedLst\n</code></pre></div>",
        "id": 400982605,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1699461636
    },
    {
        "content": "<p>This would definitely be something good to add to the examples.<br>\nI think with tags you'll still encounter self-referential issues later on.<br>\nYou could go with something like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>NodeID : U64\n\nNode : { value: Str, children :  List NodeID}\n\ntree : Dict NodeID Node\ntree = Dict.empty {}\n       |&gt; Dict.insert 0 { value: &quot;hey&quot;, children: [1]}\n       |&gt; Dict.insert 1 { value: &quot;hey!&quot;, children: []}\n</code></pre></div>\n<p>This particular code assumes you want to store a Str in each Node.</p>",
        "id": 400985972,
        "sender_full_name": "Anton",
        "timestamp": 1699462720
    },
    {
        "content": "<p>If you don't want to store anything in the Node, you could go with this:</p>\n<div class=\"codehilite\"><pre><span></span><code>NodeID : U64\n\nChildren : List NodeID\n\ntree : Dict NodeID Children\ntree = Dict.empty {}\n       |&gt; Dict.insert 0 [1]\n       |&gt; Dict.insert 1 []\n</code></pre></div>",
        "id": 400987858,
        "sender_full_name": "Anton",
        "timestamp": 1699463240
    },
    {
        "content": "<p>thx  I just encounter problems  apparently what I am trying is impossible, but your solution  will work for  sure</p>",
        "id": 400992989,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1699465086
    },
    {
        "content": "<p>btw, this  crashes  compiler</p>\n<div class=\"codehilite\"><pre><span></span><code>modifyActivetest = \\ head -&gt;\n    updatedLst =\n        when head.children is\n            Children  children-&gt;\n                if List.isEmpty children == Bool.true then\n                    [{ locked : Bool.false, children : Children [], value : [] }]\n                else\n                    when List.last children is\n                        Ok elem -&gt;\n                            if elem.locked == Bool.true then\n                                [{ locked : Bool.false, children : Children [], value : [] }]\n                            else\n                                [modifyActivetest elem]\n                        Err  _ -&gt; []\n            _ -&gt; []\n\n    { locked : head.locked, children : Children updatedLst , value : head.value }\n\n\n\n    www = { locked : Bool.false, children : Children [], value : [] }\n\n    uuu =  modifyActivetest  www\n</code></pre></div>",
        "id": 400993656,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1699465329
    },
    {
        "content": "<p>I think we have a few bugs to file here and track. </p>\n<ol>\n<li>Recursion though lists/dicts/etc instead of tags should just work.</li>\n<li>We already have a super old bug for this, but the recursive tag definition issue if they aren't in a single definition.</li>\n<li>The crash is probably a separate issue and should be filed as well.</li>\n</ol>",
        "id": 400994778,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1699465777
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Self-referential.20type.20.20problem.20!/near/400994778\">said</a>:</p>\n<blockquote>\n<p>I think we have a few bugs to file here and track. </p>\n<ol>\n<li>Recursion though lists/dicts/etc instead of tags should just work.</li>\n<li>We already have a super old bug for this, but the recursive tag definition issue if they aren't in a single definition.</li>\n<li>The crash is probably a separate issue and should be filed as well.</li>\n</ol>\n</blockquote>\n<p>It turned  out  that through tags I was not able to accomplish anything as well, it fall apart when I tried  do something useful in real  life</p>",
        "id": 401002755,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1699468851
    },
    {
        "content": "<p>In terms of  language  adaptation, as new user intuitively I would  rather expect that language (any language) will figure  out that what I am trying to do is  perfectly  fine. But  still, if  feature is missing (for  technical or other reasons) I can live with  this Dict approach presented  by Anton</p>",
        "id": 401004117,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1699469416
    },
    {
        "content": "<p>Yeah, I am not sure about the technical problems here, but I think it should just work. Gonna chat with others.</p>",
        "id": 401013001,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1699473149
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"568088\">@Artur Swiderski</span> This should work and be a lot nicer than dictionaries:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">Node</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">Branch</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"nx\">Node</span><span class=\"p\">)]</span>\n\n<span class=\"nv\">modifyActive</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Node</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"nx\">Node</span>\n<span class=\"nv\">modifyActive</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">head</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nx\">Branch</span><span class=\"w\"> </span><span class=\"nv\">children</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">head</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">isEmpty</span><span class=\"w\"> </span><span class=\"nx\">children</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">        </span><span class=\"p\">[</span><span class=\"nx\">head</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"k\">else</span>\n<span class=\"w\">        </span><span class=\"nx\">children</span>\n</code></pre></div>",
        "id": 401014505,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1699473744
    },
    {
        "content": "<p>the problem is that my  code  is sightly bit more  complex then example I provided <br>\nmy target function is </p>\n<p>modifyActive : Node -&gt; Node  <br>\nnot<br>\n   modifyActive : Node -&gt; List Node (this worked in some  variations in other it crashed but not self  reference  problem)</p>\n<p>the  type  I used  was:  Node :  [  {  branch  : Branch (List Node), ... } ] </p>\n<p>I have to check if this  works with <br>\nNode :  [ Element {  branch  : List Node, ... } ]  ?? (I will check my code  with  this  type  used)</p>\n<p>So  to repeat :<br>\nEarlier <br>\nI fall into problems  when I tried (this is  equivalent  code):<br>\nWith  type like  this :<br>\nNode :  [  {  branch  :  Branch (List Node), ... } ] <br>\nI tried something like  this :</p>\n<div class=\"codehilite\"><pre><span></span><code>modifyActive : Node -&gt;  Node\nmodifyActive = \\head -&gt;\n    Branch children = head\n    updatedList =\n    if List.isEmpty children then\n        [ ----&gt; create new  node  element but no problem  here  &lt;---]\n    else\n        when List.last children  is\n               Ok  child -&gt;\n #  before I checked  if child  is eligible for  modification  but  here  it is irrelevant\n                     List.dropLast children\n                     |&gt; List.append (  modifyActive child )     &lt;--------in  this  line it failed with reference  to itself  problem\n....\n{ head &amp;  branch : updatedList }  &lt;-- function has this  as  return  value\n</code></pre></div>",
        "id": 401018997,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1699475796
    },
    {
        "content": "<p>I think we are just giving you a misleading type error here. This code checks for me and should be similar to your goal above:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">modifyActive</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Node</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Node</span>\n<span class=\"nv\">modifyActive</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">head</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nx\">Branch</span><span class=\"w\"> </span><span class=\"nv\">children</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">head</span>\n<span class=\"w\">    </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">last</span><span class=\"w\"> </span><span class=\"nx\">children</span><span class=\"w\"> </span><span class=\"o\">is</span>\n<span class=\"w\">        </span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"nx\">child</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">dropLast</span><span class=\"w\"> </span><span class=\"nx\">children</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">            </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">append</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">modifyActive</span><span class=\"w\"> </span><span class=\"nx\">child</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Branch</span><span class=\"w\"> </span><span class=\"c1\"># This converts back from (List Node) to a Node</span>\n<span class=\"w\">        </span><span class=\"nx\">Err</span><span class=\"w\"> </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"c1\"># This is the list empty case, make new node or etc.</span>\n<span class=\"w\">            </span><span class=\"nx\">head</span>\n</code></pre></div>",
        "id": 401020508,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1699476515
    },
    {
        "content": "<p>But I explicitly recover  object  in line <br>\n{ head &amp;  branch : Branch updatedList }   &lt;---   that  was  last  line  of my  function </p>\n<p>I will check tomorrow but  keep in mind that I need different  type. then you are  using <br>\n something like:<br>\n  Node : [ { branch :  (List Node), ... } ]                    &lt;--- this checked already and it failed on reference  to itself <br>\n  Node : [ { branch : Branch (List Node), ... } ]        &lt;--- this checked already and it failed on reference  to itself  <br>\n  Node : [  Element { branch :  (List Node), ... } ]     &lt;--- maybe  this  will work<br>\n  Node : [Element { branch : Branch (List Node), ... } ]   &lt;--- or  this </p>\n<p>I need Node  to  be record (and maybe  record usage  is  the  problem ??)</p>\n<p>I will try two  last  options in case of  problems ,  Dict  approach  will work  for  sure</p>",
        "id": 401023139,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1699477574
    },
    {
        "content": "<p>I am  using  like  2  weeks old  Roc  so  maybe  that's  the  problem  I will  update environment</p>",
        "id": 401023693,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1699477812
    },
    {
        "content": "<p>I would expect <code>Node: [Element { branch: List Node, ...}]</code> to work with current roc.</p>",
        "id": 401028079,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1699479815
    },
    {
        "content": "<p>Also, I'll try to fix the base roc issue.</p>",
        "id": 401028099,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1699479825
    },
    {
        "content": "<p>this may be the same problem as I mentioned before but this piece of code compiles but crashes </p>\n<div class=\"codehilite\"><pre><span></span><code>modifyActive = \\ op, currentStructHead  -&gt;\n    Node  head = currentStructHead\n\n    updatedLst =\n        if List.isEmpty head.children == Bool.true then\n            op head.children\n        else\n            when List.last head.children is\n                Ok node -&gt;\n                    Node child = node\n                        if child.locked == Bool.true then\n                            op head.children\n                        else\n                            modifyLastInList head.children  (modifyActive op  node )\n\n                Err _ -&gt; []\n\n    Node {head &amp; children : updatedLst }\n\n\nmain =\n\n    www = Node { locked : Bool.false, children :  [], value : [] }\n    fun1 = (\\ lst -&gt; List.append lst (Node { locked : Bool.false, children : [], value : [] } ))\n\n    wataC = modifyActive  fun1  www\n\n\n    .\n    .\n    .\n</code></pre></div>",
        "id": 401178376,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1699543328
    },
    {
        "content": "<p>I would rather  consider it  valid, or at least it would be nice to get some meaningful  message out of execution  if it is not</p>",
        "id": 401178598,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1699543390
    },
    {
        "content": "<p>I placed it here  <a href=\"https://github.com/roc-lang/roc/issues/5970\">https://github.com/roc-lang/roc/issues/5970</a></p>",
        "id": 401180995,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1699544045
    }
]