[
    {
        "content": "<p>What should the behaviour be for a tag union that is imported from an \"internal\" module be? Should the tags be included in docs when we run <code>roc docs</code>? </p>\n<p>Below is an example from <a href=\"https://github.com/roc-lang/basic-cli/blob/main/src/Dir.roc\">basic-cli/blob/main/src/Dir.roc</a>.</p>\n<p>There is nothing generated for <code>ReadErr</code> in the docs. I guess we could manually include the types in a doc comment with <code>##</code> but that seems like a bad idea for maintainability. I imagine users will want to know what the possible error types are so they can handle these if needed. </p>\n<div class=\"codehilite\"><pre><span></span><code># In basic-cli/src/Dir.roc\nReadErr : InternalDir.ReadErr\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code># In basic-cli/src/InternalDir.roc\nReadErr : [\n    NotFound,\n    Interrupted,\n    InvalidFilename,\n    PermissionDenied,\n    TooManySymlinks, # aka FilesystemLoop\n    TooManyHardlinks,\n    TimedOut,\n    StaleNetworkFileHandle,\n    NotADirectory,\n    OutOfMemory,\n    Unsupported,\n    Unrecognized I32 Str,\n]\n</code></pre></div>",
        "id": 365017517,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1686372207
    },
    {
        "content": "<p>Do we need internal read error anymore</p>",
        "id": 365019168,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1686373220
    },
    {
        "content": "<p>I think it was needed to work around glue limitations at the time</p>",
        "id": 365019184,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1686373232
    },
    {
        "content": "<p>Interesting, I wonder if that is the same for all of the <code>InternalX</code> modules? Or is this related to opaque types somehow? like maybe this is the way to \"hide\" implementation details.</p>",
        "id": 365026705,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1686377433
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> do you have any thoughts on this? I can make some changes while I'm looking at this today.</p>",
        "id": 365211208,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1686441114
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/231634-beginners/topic/Docs.20gen.20internal.20modules/near/365026705\">said</a>:</p>\n<blockquote>\n<p>Interesting, I wonder if that is the same for all of the <code>InternalX</code> modules? Or is this related to opaque types somehow? like maybe this is the way to \"hide\" implementation details.</p>\n</blockquote>\n<p>yeah that's the point of <code>InternalX</code> - it's a way to say \"my sibling modules can access this, but nobody outside our package can access it\"</p>",
        "id": 365216650,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686444856
    },
    {
        "content": "<p>separately, before docs generation was aware of which modules were exported from a package, it had a hack that would look for the string \"Internal\" in the module name, and if it saw that, hide it from the docs <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 365216703,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686444905
    },
    {
        "content": "<p>but today it's actually aware of what's exposed, so that hack is gone</p>",
        "id": 365216729,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686444933
    },
    {
        "content": "<p>Why wouldn't we want read error and related types as exposed types? Why are they internal?</p>",
        "id": 365219558,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1686446701
    },
    {
        "content": "<p>oh, they are exposed - via <a href=\"https://github.com/roc-lang/basic-cli/blob/main/src/Dir.roc\"><code>Dir</code></a></p>\n<div class=\"codehilite\"><pre><span></span><code>interface Dir\n    exposes [ReadErr, DeleteErr, DirEntry, deleteEmptyDir, deleteRecursive, list]\n    imports [Effect, Task.{ Task }, InternalTask, Path.{ Path }, InternalPath, InternalDir]\n\nReadErr : InternalDir.ReadErr\n</code></pre></div>",
        "id": 365219778,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686446849
    },
    {
        "content": "<p>another use of Internal is avoiding cyclic dependencies</p>",
        "id": 365219876,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686446884
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/7HK-oMiaRAPgK1zwVR_il7yc/Screen-Shot-2023-06-11-at-11.30.00.png\">Screen-Shot-2023-06-11-at-11.30.00.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/7HK-oMiaRAPgK1zwVR_il7yc/Screen-Shot-2023-06-11-at-11.30.00.png\" title=\"Screen-Shot-2023-06-11-at-11.30.00.png\"><img src=\"/user_uploads/22008/7HK-oMiaRAPgK1zwVR_il7yc/Screen-Shot-2023-06-11-at-11.30.00.png\"></a></div>",
        "id": 365220222,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1686447018
    },
    {
        "content": "<p>although I forget if there was a cyclic dep issue here that <code>InternalDir</code> was solving...it's been awhile since I've looked at that code! <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 365220297,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686447053
    },
    {
        "content": "<p>This is what the docs looks like, I just feel like it would be good to see these errors enumerated. Otherwise a user will need to dig into the platform implementation to know what these are and handle them</p>",
        "id": 365220312,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1686447057
    },
    {
        "content": "<p>oh yeah for sure</p>",
        "id": 365220361,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686447085
    },
    {
        "content": "<p>I think the issue here is just that docs gen is not doing what it ideally should</p>",
        "id": 365220437,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686447111
    },
    {
        "content": "<p>Ohk, so re-exporting something from a sibling \"InternalX\" package should be visible in the docs?</p>",
        "id": 365220604,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1686447176
    },
    {
        "content": "<p>I think what it should do is:</p>\n<ul>\n<li>if it's an exposed type alias of a type alias from an internal module, it should try to unpack the type alias and render whatever it resolves to (so the fact that it's a type alias becomes an implementation detail and isn't reflected in the docs</li>\n<li>if, in the course of unpacking that type alias, it encounters a type that isn't exposed (e.g. because it's a type that isn't exposed from any module, or because it's exposed from an \"internal-only\" module that the package doesn't expose) <em>then</em> it renders nothing for the type, because that type is opaque to the reader of the docs by design</li>\n</ul>",
        "id": 365220754,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686447239
    },
    {
        "content": "<p>What about our opaque types? They should also render nothing I guess, even if they are exposed?</p>",
        "id": 365220931,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1686447296
    },
    {
        "content": "<p>yeah opaque types should always render nothing <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 365221000,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686447314
    },
    {
        "content": "<p>Ok. Yeah, that makes sense.</p>",
        "id": 365222403,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1686447907
    }
]