[
    {
        "content": "<p>I have a roc function to traverse a binary tree in order. I need to get the value of the current node, which uses a method which returns a result, so I use an if statement instead of a when block to handle the result. </p>\n<p>Thus I have <code>if resultVal == Ok val then</code>, to extract the named value from the Result tag. I wonder if this syntax is incorrect, and the <code>val</code> is being treated as a definition, thus causing the error I am getting? </p>\n<p>Error and code below:</p>\n<div class=\"codehilite\"><pre><span></span><code>── MISSING FINAL EXPRESSION ───────────────────────────── InorderTraversal.roc ─\n\nI am partway through parsing a definition, but I got stuck here:\n25│              valsListWithCurrent = valsListWithLeft |&gt; List.append val\n                                                                          ^\nThis definition is missing a final expression. A nested definition\nmust be followed by either another definition, or an expression\n\n    x = 4\n    y = 2\n\n    x + y\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">inorderTraversalRecur</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Tree</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Nat</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"nx\">a</span>\n<span class=\"nv\">inorderTraversalRecur</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">tree</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">index</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">valsList</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nx\">hasLhs</span><span class=\"w\"> </span><span class=\"nx\">tree</span><span class=\"w\"> </span><span class=\"nx\">index</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"c1\"># tree with left subtree</span>\n<span class=\"w\">        </span><span class=\"nv\">valsListWithLeft</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">inorderTraversalRecur</span><span class=\"w\"> </span><span class=\"nx\">tree</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">getLhsIdx</span><span class=\"w\"> </span><span class=\"nx\">index</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nx\">valsList</span>\n<span class=\"w\">        </span><span class=\"nv\">resultVal</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">getValAtIdx</span><span class=\"w\"> </span><span class=\"nx\">tree</span><span class=\"w\"> </span><span class=\"nx\">index</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nx\">resultVal</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"nx\">val</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"c1\"># should always be true</span>\n<span class=\"w\">            </span><span class=\"nv\">valsListWithCurrent</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">valsListWithLeft</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">append</span><span class=\"w\"> </span><span class=\"nx\">val</span>\n<span class=\"w\">        </span><span class=\"k\">else</span>\n<span class=\"w\">            </span><span class=\"nx\">crash</span><span class=\"w\"> </span><span class=\"s\">\"Expected a value at index \\(index)\"</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nx\">hasRhs</span><span class=\"w\"> </span><span class=\"nx\">tree</span><span class=\"w\"> </span><span class=\"nx\">index</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"c1\"># tree with left and right subtree</span>\n<span class=\"w\">            </span><span class=\"nx\">inorderTraversalRecur</span><span class=\"w\"> </span><span class=\"nx\">tree</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">getRhsIdx</span><span class=\"w\"> </span><span class=\"nx\">index</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nx\">valsListWithCurrent</span>\n<span class=\"w\">        </span><span class=\"k\">else</span>\n<span class=\"w\">            </span><span class=\"nx\">valsListWithCurrent</span><span class=\"w\"> </span><span class=\"c1\"># tree with only left subtree</span>\n<span class=\"w\">    </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nx\">hasRhs</span><span class=\"w\"> </span><span class=\"nx\">tree</span><span class=\"w\"> </span><span class=\"nx\">index</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"c1\"># tree with only right subtree</span>\n<span class=\"w\">        </span><span class=\"nv\">resultVal</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">getValAtIdx</span><span class=\"w\"> </span><span class=\"nx\">tree</span><span class=\"w\"> </span><span class=\"nx\">index</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nx\">resultVal</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"nx\">val</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"c1\"># should always be true</span>\n<span class=\"w\">            </span><span class=\"nv\">valsListWithCurrent</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">valsList</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">append</span><span class=\"w\"> </span><span class=\"nx\">val</span>\n<span class=\"w\">        </span><span class=\"k\">else</span>\n<span class=\"w\">            </span><span class=\"nx\">crash</span><span class=\"w\"> </span><span class=\"s\">\"Expected a value at index \\(index)\"</span>\n<span class=\"w\">        </span><span class=\"nx\">inorderTraversalRecur</span><span class=\"w\"> </span><span class=\"nx\">tree</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">getRhsIdx</span><span class=\"w\"> </span><span class=\"nx\">index</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nx\">valsListWithCurrent</span><span class=\"w\"> </span><span class=\"c1\"># finish right subtree</span>\n<span class=\"w\">    </span><span class=\"k\">else</span>\n<span class=\"w\">        </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">getValAtIdx</span><span class=\"w\"> </span><span class=\"nx\">tree</span><span class=\"w\"> </span><span class=\"nx\">index</span><span class=\"w\"> </span><span class=\"o\">is</span><span class=\"w\"> </span><span class=\"c1\"># leaf node</span>\n<span class=\"w\">            </span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"nx\">val</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">valsList</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">append</span><span class=\"w\"> </span><span class=\"nx\">val</span><span class=\"w\"> </span><span class=\"c1\"># should always be Ok</span>\n<span class=\"w\">            </span><span class=\"nx\">Err</span><span class=\"w\"> </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">crash</span><span class=\"w\"> </span><span class=\"s\">\"Expected a value at index \\(index)\"</span>\n</code></pre></div>\n<p>Full binary tree implementation <a href=\"https://github.com/imclerran/LeetCode-Roc/blob/main/RocUtils/BinaryTree.roc\">here</a><br>\nAnd full code for inorder traversal <a href=\"https://github.com/imclerran/LeetCode-Roc/blob/main/InorderTraversal.roc\">here</a></p>",
        "id": 413046141,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1705362644
    },
    {
        "content": "<p>I don't think this work: <code>if resultVal == Ok val then</code>.</p>\n<p>I think you have to use a <code>when ... is</code></p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">resultVal</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">    </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">val</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"nv\">valsListWithCurrent</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">valsListWithLeft</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">append</span><span class=\"w\"> </span><span class=\"nv\">val</span>\n<span class=\"w\">    </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"nv\">crash</span><span class=\"w\"> </span><span class=\"s\">\"Expected a value at index \\(index)\"</span>\n</code></pre></div>",
        "id": 413047857,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705363639
    },
    {
        "content": "<p>That said, this isn't the root of the specific error message linked above</p>",
        "id": 413047874,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705363653
    },
    {
        "content": "<p>Roc <code>if ... then else ...</code> blocks are expressions, not statements.</p>",
        "id": 413047975,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705363695
    },
    {
        "content": "<p>You can't set a value in an <code>if</code> and then use the value after the <code>if</code>. In fact, there is no \"after\" the <code>if</code></p>",
        "id": 413048014,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705363724
    },
    {
        "content": "<p>For example, this chunk of code:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kr\">else</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">hasRhs</span><span class=\"w\"> </span><span class=\"nv\">tree</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"kr\">then</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nv\">tree</span><span class=\"w\"> </span><span class=\"nv\">with</span><span class=\"w\"> </span><span class=\"nv\">only</span><span class=\"w\"> </span><span class=\"nv\">right</span><span class=\"w\"> </span><span class=\"nv\">subtree</span>\n<span class=\"w\">        </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">resultVal</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">val</span><span class=\"w\"> </span><span class=\"kr\">then</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nv\">should</span><span class=\"w\"> </span><span class=\"nv\">always</span><span class=\"w\"> </span><span class=\"nv\">be</span><span class=\"w\"> </span><span class=\"nv\">true</span>\n<span class=\"w\">            </span><span class=\"nv\">valsListWithCurrent</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">valsList</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">append</span><span class=\"w\"> </span><span class=\"nv\">val</span>\n<span class=\"w\">        </span><span class=\"kr\">else</span>\n<span class=\"w\">            </span><span class=\"nv\">crash</span><span class=\"w\"> </span><span class=\"s\">\"Expected a value at index \\(index)\"</span>\n<span class=\"w\">        </span><span class=\"nv\">inorderTraversalRecur</span><span class=\"w\"> </span><span class=\"nv\">tree</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">getRhsIdx</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">valsListWithCurrent</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nv\">finish</span><span class=\"w\"> </span><span class=\"nv\">right</span><span class=\"w\"> </span><span class=\"nv\">subtree</span>\n</code></pre></div>\n<p>Should probably be:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kr\">else</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">hasRhs</span><span class=\"w\"> </span><span class=\"nv\">tree</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"kr\">then</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nv\">tree</span><span class=\"w\"> </span><span class=\"nv\">with</span><span class=\"w\"> </span><span class=\"nv\">only</span><span class=\"w\"> </span><span class=\"nv\">right</span><span class=\"w\"> </span><span class=\"nv\">subtree</span>\n<span class=\"w\">        </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">resultVal</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">val</span><span class=\"w\"> </span><span class=\"kr\">then</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nv\">should</span><span class=\"w\"> </span><span class=\"nv\">always</span><span class=\"w\"> </span><span class=\"nv\">be</span><span class=\"w\"> </span><span class=\"nv\">true</span>\n<span class=\"w\">            </span><span class=\"nv\">valsListWithCurrent</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">valsList</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">append</span><span class=\"w\"> </span><span class=\"nv\">val</span>\n<span class=\"w\">            </span><span class=\"nv\">inorderTraversalRecur</span><span class=\"w\"> </span><span class=\"nv\">tree</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">getRhsIdx</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">valsListWithCurrent</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nv\">finish</span><span class=\"w\"> </span><span class=\"nv\">right</span><span class=\"w\"> </span><span class=\"nv\">subtree</span>\n<span class=\"w\">        </span><span class=\"kr\">else</span>\n<span class=\"w\">            </span><span class=\"nv\">crash</span><span class=\"w\"> </span><span class=\"s\">\"Expected a value at index \\(index)\"</span>\n</code></pre></div>",
        "id": 413048105,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705363779
    },
    {
        "content": "<p>Another alternative would be to make the if expression return the value directly:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kr\">else</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">hasRhs</span><span class=\"w\"> </span><span class=\"nv\">tree</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"kr\">then</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nv\">tree</span><span class=\"w\"> </span><span class=\"nv\">with</span><span class=\"w\"> </span><span class=\"nv\">only</span><span class=\"w\"> </span><span class=\"nv\">right</span><span class=\"w\"> </span><span class=\"nv\">subtree</span>\n<span class=\"w\">        </span><span class=\"nv\">valsListWithCurrent</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">            </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">resultVal</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">val</span><span class=\"w\"> </span><span class=\"kr\">then</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nv\">should</span><span class=\"w\"> </span><span class=\"nv\">always</span><span class=\"w\"> </span><span class=\"nv\">be</span><span class=\"w\"> </span><span class=\"nv\">true</span>\n<span class=\"w\">                </span><span class=\"nv\">valsList</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">append</span><span class=\"w\"> </span><span class=\"nv\">val</span>\n<span class=\"w\">            </span><span class=\"kr\">else</span>\n<span class=\"w\">                </span><span class=\"nv\">crash</span><span class=\"w\"> </span><span class=\"s\">\"Expected a value at index \\(index)\"</span>\n<span class=\"w\">        </span><span class=\"nv\">inorderTraversalRecur</span><span class=\"w\"> </span><span class=\"nv\">tree</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">getRhsIdx</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">valsListWithCurrent</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nv\">finish</span><span class=\"w\"> </span><span class=\"nv\">right</span><span class=\"w\"> </span><span class=\"nv\">subtree</span>\n</code></pre></div>",
        "id": 413048284,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705363854
    },
    {
        "content": "<p>I feel like I need to figure out better wording to explain this, but hopefully the example helps</p>",
        "id": 413048330,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705363888
    },
    {
        "content": "<p>Note: for those examples above, still need to change to a <code>when ... is</code> to get the value out of the tag union.</p>",
        "id": 413048483,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705363962
    },
    {
        "content": "<p>No your explanation is perfect. I actually knew that, just completely spaced on the fact that if blocks are statements.</p>",
        "id": 413049011,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1705364184
    },
    {
        "content": "<p>When blocks are also statements, correct?</p>",
        "id": 413049051,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1705364205
    },
    {
        "content": "<p>Neither are statements, they are both expresssions.</p>\n<p>So neither stands alone like in an imperative language. They are always returning some sort of value from each branch.</p>",
        "id": 413049199,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705364261
    },
    {
        "content": "<p>Haha yes... dyslexic... \"left = right\", \"expression = statement\" <span aria-label=\"rolling eyes\" class=\"emoji emoji-1f644\" role=\"img\" title=\"rolling eyes\">:rolling_eyes:</span></p>",
        "id": 413049542,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1705364375
    },
    {
        "content": "<p>All issues fixed:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">inorderTraversalRecur</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Tree</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Nat</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"nx\">a</span>\n<span class=\"nv\">inorderTraversalRecur</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">tree</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">index</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">valsList</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nx\">hasLhs</span><span class=\"w\"> </span><span class=\"nx\">tree</span><span class=\"w\"> </span><span class=\"nx\">index</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"c1\"># tree with left subtree</span>\n<span class=\"w\">        </span><span class=\"nv\">valsListWithLeft</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">inorderTraversalRecur</span><span class=\"w\"> </span><span class=\"nx\">tree</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">getLhsIdx</span><span class=\"w\"> </span><span class=\"nx\">index</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nx\">valsList</span>\n<span class=\"w\">        </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">getValAtIdx</span><span class=\"w\"> </span><span class=\"nx\">tree</span><span class=\"w\"> </span><span class=\"nx\">index</span><span class=\"w\"> </span><span class=\"o\">is</span><span class=\"w\"> </span><span class=\"c1\"># should always be Ok</span>\n<span class=\"w\">            </span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"nx\">val</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                </span><span class=\"nv\">valsListWithCurrent</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">valsListWithLeft</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">append</span><span class=\"w\"> </span><span class=\"nx\">val</span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nx\">hasRhs</span><span class=\"w\"> </span><span class=\"nx\">tree</span><span class=\"w\"> </span><span class=\"nx\">index</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"c1\"># tree with left and right subtree</span>\n<span class=\"w\">                    </span><span class=\"nx\">inorderTraversalRecur</span><span class=\"w\"> </span><span class=\"nx\">tree</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">getRhsIdx</span><span class=\"w\"> </span><span class=\"nx\">index</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nx\">valsListWithCurrent</span>\n<span class=\"w\">                </span><span class=\"k\">else</span>\n<span class=\"w\">                    </span><span class=\"nx\">valsListWithCurrent</span><span class=\"w\"> </span><span class=\"c1\"># tree with only left subtree</span>\n<span class=\"w\">            </span><span class=\"nx\">Err</span><span class=\"w\"> </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">crash</span><span class=\"w\"> </span><span class=\"s\">\"Expected a value at index \\(Num.toStr index)\"</span>\n<span class=\"w\">    </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nx\">hasRhs</span><span class=\"w\"> </span><span class=\"nx\">tree</span><span class=\"w\"> </span><span class=\"nx\">index</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"c1\"># tree with only right subtree</span>\n<span class=\"w\">        </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">getValAtIdx</span><span class=\"w\"> </span><span class=\"nx\">tree</span><span class=\"w\"> </span><span class=\"nx\">index</span><span class=\"w\"> </span><span class=\"o\">is</span><span class=\"w\"> </span><span class=\"c1\"># should always be Ok</span>\n<span class=\"w\">            </span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"nx\">val</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                </span><span class=\"nv\">valsListWithCurrent</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">valsList</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">append</span><span class=\"w\"> </span><span class=\"nx\">val</span>\n<span class=\"w\">                </span><span class=\"nx\">inorderTraversalRecur</span><span class=\"w\"> </span><span class=\"nx\">tree</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">getRhsIdx</span><span class=\"w\"> </span><span class=\"nx\">index</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nx\">valsListWithCurrent</span><span class=\"w\"> </span><span class=\"c1\"># finish right subtree</span>\n<span class=\"w\">            </span><span class=\"nx\">Err</span><span class=\"w\"> </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">crash</span><span class=\"w\"> </span><span class=\"s\">\"Expected a value at index \\(Num.toStr index)\"</span>\n<span class=\"w\">    </span><span class=\"k\">else</span>\n<span class=\"w\">        </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">getValAtIdx</span><span class=\"w\"> </span><span class=\"nx\">tree</span><span class=\"w\"> </span><span class=\"nx\">index</span><span class=\"w\"> </span><span class=\"o\">is</span><span class=\"w\"> </span><span class=\"c1\"># leaf node</span>\n<span class=\"w\">            </span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"nx\">val</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">valsList</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">append</span><span class=\"w\"> </span><span class=\"nx\">val</span><span class=\"w\"> </span><span class=\"c1\"># should always be Ok</span>\n<span class=\"w\">            </span><span class=\"nx\">Err</span><span class=\"w\"> </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">crash</span><span class=\"w\"> </span><span class=\"s\">\"Expected a value at index \\(Num.toStr index)\"</span>\n</code></pre></div>",
        "id": 413050225,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1705364629
    },
    {
        "content": "<p>You may get simpler/cleaner code if you switch to always recursing down both the left and the right side.</p>\n<p>Then as the first part of the recurse, you check if the current node exits. If it doesn't, early return.<br>\nI think that would remove some duplicate logic.</p>\n<p>Of course could always just pull that logic into a helper if wanted</p>",
        "id": 413051624,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705365064
    },
    {
        "content": "<p>Great point. Gonna do exactly that. <span aria-label=\"working on it\" class=\"emoji emoji-1f6e0\" role=\"img\" title=\"working on it\">:working_on_it:</span></p>",
        "id": 413052067,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1705365200
    },
    {
        "content": "<p>Refactored version is much cleaner:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">inorderTraversalRecur</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Tree</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Nat</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"nx\">where</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"nx\">implements</span><span class=\"w\"> </span><span class=\"nx\">Inspect</span><span class=\"p\">.</span><span class=\"nx\">Inspect</span>\n<span class=\"nv\">inorderTraversalRecur</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">tree</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">index</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">valsList</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">getValAtIdx</span><span class=\"w\"> </span><span class=\"nx\">tree</span><span class=\"w\"> </span><span class=\"nx\">index</span><span class=\"w\"> </span><span class=\"o\">is</span>\n<span class=\"w\">        </span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"nx\">val</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"nv\">valsListWithLeft</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">inorderTraversalRecur</span><span class=\"w\"> </span><span class=\"nx\">tree</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">getLhsIdx</span><span class=\"w\"> </span><span class=\"nx\">index</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nx\">valsList</span>\n<span class=\"w\">            </span><span class=\"nv\">valsListWithCurrent</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">valsListWithLeft</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">append</span><span class=\"w\"> </span><span class=\"nx\">val</span>\n<span class=\"w\">            </span><span class=\"nx\">inorderTraversalRecur</span><span class=\"w\"> </span><span class=\"nx\">tree</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">getRhsIdx</span><span class=\"w\"> </span><span class=\"nx\">index</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nx\">valsListWithCurrent</span>\n<span class=\"w\">        </span><span class=\"nx\">Err</span><span class=\"w\"> </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">valsList</span>\n</code></pre></div>",
        "id": 413061150,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1705369030
    },
    {
        "content": "<p>Wow. Did not realize it would be that level of reduction. Awesome!</p>",
        "id": 413063864,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705370351
    },
    {
        "content": "<p>Haha yeah, that was a very good call! So many unnecessary branches!</p>",
        "id": 413070227,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1705373982
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"518883\">Ian McLerran</span> has marked this topic as resolved.</p>",
        "id": 413070235,
        "sender_full_name": "Notification Bot",
        "timestamp": 1705373986
    }
]