[
    {
        "content": "<h1>Spoiler: this contains an answer to part 1 of day 8 of AoC 2023.</h1>\n<p>I feel like I'm missing something. Does anyone see anything obviously wrong with this code? (Forget about the parsing bit, it is immaterial in performance)</p>\n<div class=\"codehilite\"><pre><span></span><code>app &quot;AoC&quot;\n    packages {\n        pf: &quot;https://github.com/roc-lang/basic-cli/releases/download/0.7.0/bkGby8jb0tmZYsy2hg1E_B2QrCgcSTxdUlHtETwm5m4.tar.br&quot;,\n        parser: &quot;https://github.com/lukewilliamboswell/roc-parser/releases/download/0.2.0/dJQSsSmorujhiPNIvJKlQoI92RFIG_JQwUfIxZsCSwE.tar.br&quot;,\n    }\n    imports [\n        pf.Stdout,\n        pf.Task.{ Task },\n        parser.Core.{\n            Parser,\n            const,\n            keep,\n            skip,\n            oneOf,\n            many,\n            sepBy1,\n        },\n        parser.String.{\n            string,\n            parseStr,\n            codeunitSatisfies,\n        },\n        &quot;day-8-input.txt&quot; as input : Str,\n    ]\n    provides [main] to pf\n\nmain : Task {} *\nmain =\n    Stdout.line part1\n    |&gt; Task.await \\_ -&gt; Stdout.line &quot;&quot;\n\npart1 : Str\npart1 =\n    input\n    |&gt; Str.trim\n    |&gt; parseMap\n    |&gt; stepsAAAToZZZ\n    |&gt; Num.toStr\n\nDirection : [Left, Right]\nNode : { left : Str, right : Str }\nNetwork : Dict Str Node\nMap : { directions : List Direction, network : Network }\n\nfindNode : Network, Str -&gt; Node\nfindNode = \\network, node -&gt;\n    when Dict.get network node is\n        Ok n -&gt; n\n        Err _ -&gt; crash &quot;bad input: node \\(node) not found&quot;\n\nstepsAAAToZZZ : Map -&gt; Nat\nstepsAAAToZZZ = \\{ directions, network } -&gt;\n    go = \\steps, ds, d, cur -&gt;\n        if cur == &quot;ZZZ&quot; then\n            steps\n        else\n            when List.get ds (Num.rem d (List.len ds)) is\n                Ok Left -&gt; go (steps + 1) directions (d + 1) (findNode network cur).left\n                Ok Right -&gt; go (steps + 1) directions (d + 1) (findNode network cur).right\n                Err _ -&gt; crash &quot;bad input&quot;\n\n    go 0 directions 0 &quot;AAA&quot;\n\nparseMap : Str -&gt; Map\nparseMap = \\str -&gt;\n    pDirection : Parser _ Direction\n    pDirection = oneOf [\n        const Left |&gt; skip (string &quot;L&quot;),\n        const Right |&gt; skip (string &quot;R&quot;),\n    ]\n\n    pDirections = many pDirection\n\n    pLabel : Parser _ Str\n    pLabel =\n        const \\c -&gt;\n            when Str.fromUtf8 c is\n                Ok s -&gt; s\n                Err _ -&gt; crash &quot;bad input: non-utf8 character&quot;\n        |&gt; keep (many (codeunitSatisfies \\b -&gt; b &gt;= &#39;A&#39; &amp;&amp; b &lt;= &#39;Z&#39;))\n\n    pNode : Parser _ (Str, Node)\n    pNode =\n        const (\\node -&gt; \\left -&gt; \\right -&gt; (node, { left, right }))\n        |&gt; keep pLabel\n        |&gt; skip (string &quot; = (&quot;)\n        |&gt; keep pLabel\n        |&gt; skip (string &quot;, &quot;)\n        |&gt; keep pLabel\n        |&gt; skip (string &quot;)&quot;)\n\n    pNetwork : Parser _ Network\n    pNetwork =\n        const Dict.fromList\n        |&gt; keep (sepBy1 pNode (string &quot;\\n&quot;))\n\n    pMap : Parser _ Map\n    pMap =\n        const (\\directions -&gt; \\network -&gt; { directions, network })\n        |&gt; keep pDirections\n        |&gt; skip (string &quot;\\n\\n&quot;)\n        |&gt; keep pNetwork\n\n    when parseStr pMap str is\n        Ok g -&gt; g\n        Err (ParsingFailure e) | Err (ParsingIncomplete e) -&gt; crash &quot;bad input: &#39;\\(e)&#39;&quot;\n</code></pre></div>\n<p>If I run this as-is, without opt or <a href=\"https://github.com/roc-lang/roc/issues/6216\">#6216</a>, it takes ~9 seconds. <code>stepsAAAToZZZ#go</code> makes 22K iterations.</p>\n<p>If I compile with opt and <a href=\"https://github.com/roc-lang/roc/issues/6216\">#6216</a> it's at 860ms. But this is still paltry compared to a simple Node.js version:</p>\n<div class=\"codehilite\"><pre><span></span><code>❯ hyperfine --warmup 2 ./day8 &#39;node day8.js&#39;\nBenchmark 1: ./day8\n  Time (mean ± σ):     867.2 ms ±  17.8 ms    [User: 856.2 ms, System: 5.4 ms]\n  Range (min … max):   848.4 ms … 895.3 ms    10 runs\n\nBenchmark 2: node day8.js\n  Time (mean ± σ):      35.0 ms ±   1.5 ms    [User: 29.7 ms, System: 5.3 ms]\n  Range (min … max):    31.5 ms …  38.6 ms    74 runs\n\nSummary\n  &#39;node day8.js&#39; ran\n   24.77 ± 1.18 times faster than &#39;./day8&#39;\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>const fs = require(&#39;fs&#39;);\nconst path = require(&#39;path&#39;);\n\nconst input = fs.readFileSync(path.resolve(__dirname, &#39;./day-8-input.txt&#39;), &#39;utf8&#39;);\n\nconst dir = {left: 0, right: 1};\n\nfunction parseInput(input) {\n  const [directions, nodes] = input.trim().split(&#39;\\n\\n&#39;);\n  const dirs = directions.split(&#39;&#39;).map(d =&gt; d === &#39;L&#39; ? dir.left : dir.right);\n  const network = {};\n  const parsedNodes = nodes.split(&#39;\\n&#39;).forEach(n =&gt; {\n    const [name, lrs] = n.split(&#39; = (&#39;);\n    const left = lrs.substring(0, 3);\n    const right = lrs.substring(3 + &#39;, &#39;.length, 3 + &#39;, &#39;.length + 3);\n    network[name] = {left, right};\n  });\n  return {dirs, network};\n}\n\nconst {dirs, network} = parseInput(input);\n\nfunction stepsAAAToZZZ(dirs, network) {\n  let steps = 0;\n  let cur = &quot;AAA&quot;;\n  while (cur !== &quot;ZZZ&quot;) {\n    const {left, right} = network[cur];\n    const dir = dirs[steps % dirs.length];\n    cur = dir === 0 ? left : right;\n    steps++;\n  }\n  return steps;\n}\n\nconsole.log(stepsAAAToZZZ(dirs, network));\n</code></pre></div>\n<p>I ran a profile and all the time is spent in Dict and doing str refcounts. But 800ms for 22K iterations of that loop feels insane to me. The input file has ~700 nodes. So in the absolute worst case, where each node must be scanned, this Roc program amortizes to 800ms/22K/700~=5ns per scan. While that might be reasonable, it seems super unlikely in practice.</p>",
        "id": 406875515,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1702090169
    },
    {
        "content": "<p>Dicts with refcounts keys or values are currently a pathological case</p>",
        "id": 406876374,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702090763
    },
    {
        "content": "<p>Cause we don't have any sort of smarter refcounting or borrowing, each call to dict.get will increment the refcount and then decrement it.</p>\n<p>This will be recursive</p>",
        "id": 406876470,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702090817
    },
    {
        "content": "<p>So it will spend all the time traversing all elements of the dict incrementing and decrementing refcounts</p>",
        "id": 406876523,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702090837
    },
    {
        "content": "<p>This is why I want automatic borrowing</p>",
        "id": 406876552,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702090847
    },
    {
        "content": "<p>If the strings are small and you write a when to convert them to a static sized tuple, it would run way way faster</p>",
        "id": 406876991,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702091099
    },
    {
        "content": "<p>Oh, also, it will chase the node and increment those two strings as well.</p>",
        "id": 406877052,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702091154
    },
    {
        "content": "<p>I tried it with a assoc list too and it was just as slow</p>",
        "id": 406877674,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1702091560
    },
    {
        "content": "<p>Did you make a get method? If so it took ownership of the list, requiring a recursive increment when called and a recursive decrement in the function when the list is dropped. Has to be manually inlined to avoid this</p>",
        "id": 406877910,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702091753
    },
    {
        "content": "<p>It's a huge perf problem for anything wrapping <code>list.get</code>in another function when the list contains recounted types</p>",
        "id": 406878022,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702091816
    },
    {
        "content": "<p>Also, before we fix add the borrowing, probably fixing this recounting worst case it's more important. I think I'll work on that next. Shouldn't be too hard</p>",
        "id": 406878764,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702092346
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> </p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>AoC Day 8 spoiler</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>I ended up using U16 for the dictionary key and it was much faster. Runs in less than a second on my machine for both parts.<br>\n<a href=\"https://github.com/ryanb/advent-2023-roc/blob/main/day08/main.roc\">https://github.com/ryanb/advent-2023-roc/blob/main/day08/main.roc</a></p>\n</div></div>",
        "id": 406887430,
        "sender_full_name": "Ryan Bates",
        "timestamp": 1702097726
    },
    {
        "content": "<p>Just to clearly show how fast this should be. Just took Ayaz's code and changed from a <code>Str</code> to a <code>(U8, U8, U8)</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>Benchmark 1: /tmp/aoc\n  Time (mean ± σ):     861.2 ms ±  24.9 ms    [User: 855.8 ms, System: 1.5 ms]\n  Range (min … max):   828.2 ms … 894.9 ms    10 runs\n\nBenchmark 2: /tmp/aoc-u8\n  Time (mean ± σ):       7.9 ms ±   0.2 ms    [User: 6.4 ms, System: 0.9 ms]\n  Range (min … max):     7.5 ms …   8.5 ms    270 runs\n\nSummary\n  &#39;/tmp/aoc-u8&#39; ran\n  109.63 ± 4.14 times faster than &#39;/tmp/aoc&#39;\n</code></pre></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>New version of the code</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">app</span><span class=\"w\"> </span><span class=\"s\">\"AoC\"</span>\n<span class=\"w\">    </span><span class=\"nx\">packages</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nv\">pf</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/roc-lang/basic-cli/releases/download/0.7.0/bkGby8jb0tmZYsy2hg1E_B2QrCgcSTxdUlHtETwm5m4.tar.br\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nv\">parser</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/lukewilliamboswell/roc-parser/releases/download/0.2.0/dJQSsSmorujhiPNIvJKlQoI92RFIG_JQwUfIxZsCSwE.tar.br\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"nx\">imports</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">        </span><span class=\"nx\">pf</span><span class=\"p\">.</span><span class=\"nx\">Stdout</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nx\">pf</span><span class=\"p\">.</span><span class=\"nx\">Task</span><span class=\"p\">.{</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"nx\">parser</span><span class=\"p\">.</span><span class=\"nx\">Core</span><span class=\"p\">.{</span>\n<span class=\"w\">            </span><span class=\"nx\">Parser</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nx\">const</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nx\">keep</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nx\">skip</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nx\">oneOf</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nx\">many</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nx\">sepBy1</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"nx\">parser</span><span class=\"p\">.</span><span class=\"nb\">String</span><span class=\"p\">.{</span>\n<span class=\"w\">            </span><span class=\"nx\">string</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nx\">parseStr</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nx\">codeunitSatisfies</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"s\">\"day-8-input.txt\"</span><span class=\"w\"> </span><span class=\"nx\">as</span><span class=\"w\"> </span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"nx\">provides</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nx\">to</span><span class=\"w\"> </span><span class=\"nx\">pf</span>\n\n<span class=\"nv\">main</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"o\">*</span>\n<span class=\"nv\">main</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"nx\">Stdout</span><span class=\"p\">.</span><span class=\"nx\">line</span><span class=\"w\"> </span><span class=\"nx\">part1</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">await</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Stdout</span><span class=\"p\">.</span><span class=\"nx\">line</span><span class=\"w\"> </span><span class=\"s\">\"\"</span>\n\n<span class=\"nv\">part1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Str</span>\n<span class=\"nv\">part1</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"nx\">input</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"p\">.</span><span class=\"nx\">trim</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">parseMap</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">stepsAAAToZZZ</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Num</span><span class=\"p\">.</span><span class=\"nx\">toStr</span>\n\n<span class=\"nv\">Direction</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">Left</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Right</span><span class=\"p\">]</span>\n<span class=\"nv\">Node</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">left</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">U8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">U8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">U8</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nv\">right</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">U8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">U8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">U8</span><span class=\"p\">)}</span>\n<span class=\"nv\">Network</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Dict</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">U8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">U8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">U8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nx\">Node</span>\n<span class=\"nv\">Map</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">directions</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"nx\">Direction</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">network</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Network</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"nv\">findNode</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Network</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">(U8, U8, U8)-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Node</span>\n<span class=\"nv\">findNode</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">network</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">node</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">Dict</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"w\"> </span><span class=\"nx\">network</span><span class=\"w\"> </span><span class=\"nx\">node</span><span class=\"w\"> </span><span class=\"o\">is</span>\n<span class=\"w\">        </span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"nx\">n</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">n</span>\n<span class=\"w\">        </span><span class=\"nx\">Err</span><span class=\"w\"> </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">crash</span><span class=\"w\"> </span><span class=\"s\">\"bad input: node \\(node |&gt; Inspect.toStr) not found\"</span>\n\n<span class=\"nv\">stepsAAAToZZZ</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Map</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Nat</span>\n<span class=\"nv\">stepsAAAToZZZ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nx\">directions</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">network</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">go</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">steps</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">ds</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">d</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">cur</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nx\">cur</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"s\">'Z'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">'Z'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">'Z'</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">            </span><span class=\"nx\">steps</span>\n<span class=\"w\">        </span><span class=\"k\">else</span>\n<span class=\"w\">            </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"w\"> </span><span class=\"nx\">ds</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Num</span><span class=\"p\">.</span><span class=\"nx\">rem</span><span class=\"w\"> </span><span class=\"nx\">d</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">len</span><span class=\"w\"> </span><span class=\"nx\">ds</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">is</span>\n<span class=\"w\">                </span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"nx\">Left</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">go</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">steps</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nx\">directions</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">d</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">findNode</span><span class=\"w\"> </span><span class=\"nx\">network</span><span class=\"w\"> </span><span class=\"nx\">cur</span><span class=\"p\">).</span><span class=\"nx\">left</span>\n<span class=\"w\">                </span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"nx\">Right</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">go</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">steps</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nx\">directions</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">d</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">findNode</span><span class=\"w\"> </span><span class=\"nx\">network</span><span class=\"w\"> </span><span class=\"nx\">cur</span><span class=\"p\">).</span><span class=\"nx\">right</span>\n<span class=\"w\">                </span><span class=\"nx\">Err</span><span class=\"w\"> </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">crash</span><span class=\"w\"> </span><span class=\"s\">\"bad input\"</span>\n\n<span class=\"w\">    </span><span class=\"nx\">go</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"nx\">directions</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"s\">'A'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">'A'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">'A'</span><span class=\"p\">)</span>\n\n<span class=\"nv\">parseMap</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Map</span>\n<span class=\"nv\">parseMap</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">pDirection</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Parser</span><span class=\"w\"> </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nx\">Direction</span>\n<span class=\"w\">    </span><span class=\"nv\">pDirection</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">oneOf</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">        </span><span class=\"nx\">const</span><span class=\"w\"> </span><span class=\"nx\">Left</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">skip</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">string</span><span class=\"w\"> </span><span class=\"s\">\"L\"</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"nx\">const</span><span class=\"w\"> </span><span class=\"nx\">Right</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">skip</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">string</span><span class=\"w\"> </span><span class=\"s\">\"R\"</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">]</span>\n\n<span class=\"w\">    </span><span class=\"nv\">pDirections</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">many</span><span class=\"w\"> </span><span class=\"nx\">pDirection</span>\n\n<span class=\"w\">    </span><span class=\"nv\">pLabel</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Parser</span><span class=\"w\"> </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nx\">Str</span>\n<span class=\"w\">    </span><span class=\"nv\">pLabel</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">        </span><span class=\"nx\">const</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">c</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"p\">.</span><span class=\"nx\">fromUtf8</span><span class=\"w\"> </span><span class=\"nx\">c</span><span class=\"w\"> </span><span class=\"o\">is</span>\n<span class=\"w\">                </span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"nx\">s</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">s</span>\n<span class=\"w\">                </span><span class=\"nx\">Err</span><span class=\"w\"> </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">crash</span><span class=\"w\"> </span><span class=\"s\">\"bad input: non-utf8 character\"</span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">keep</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">many</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">codeunitSatisfies</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">b</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">b</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"s\">'A'</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nx\">b</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"s\">'Z'</span><span class=\"p\">))</span>\n\n<span class=\"w\">    </span><span class=\"nv\">pNode</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Parser</span><span class=\"w\"> </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"nx\">U8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">U8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">U8</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nx\">Node</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nv\">pNode</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">        </span><span class=\"nx\">const</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"err\">\\</span><span class=\"nx\">node</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">left</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">right</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Str</span><span class=\"p\">.</span><span class=\"nx\">toUtf8</span><span class=\"w\"> </span><span class=\"nx\">node</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"p\">.</span><span class=\"nx\">toUtf8</span><span class=\"w\"> </span><span class=\"nx\">left</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"p\">.</span><span class=\"nx\">toUtf8</span><span class=\"w\"> </span><span class=\"nx\">right</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">is</span>\n<span class=\"w\">                </span><span class=\"nf\">([n1, n2, n3], [l1, l2, l3], [r1, r2, r3]) -&gt;</span>\n<span class=\"w\">                    </span><span class=\"p\">((</span><span class=\"nx\">n1</span><span class=\"p\">,</span><span class=\"nx\">n2</span><span class=\"p\">,</span><span class=\"nx\">n3</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">left</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">l1</span><span class=\"p\">,</span><span class=\"nx\">l2</span><span class=\"p\">,</span><span class=\"nx\">l3</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nv\">right</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">r1</span><span class=\"p\">,</span><span class=\"nx\">r2</span><span class=\"p\">,</span><span class=\"nx\">r3</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"w\">                </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                    </span><span class=\"nx\">crash</span><span class=\"w\"> </span><span class=\"s\">\"bad input: \\(node)-\\(left)-\\(right)\"</span>\n<span class=\"w\">            </span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">keep</span><span class=\"w\"> </span><span class=\"nx\">pLabel</span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">skip</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">string</span><span class=\"w\"> </span><span class=\"s\">\" = (\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">keep</span><span class=\"w\"> </span><span class=\"nx\">pLabel</span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">skip</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">string</span><span class=\"w\"> </span><span class=\"s\">\", \"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">keep</span><span class=\"w\"> </span><span class=\"nx\">pLabel</span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">skip</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">string</span><span class=\"w\"> </span><span class=\"s\">\")\"</span><span class=\"p\">)</span>\n\n<span class=\"w\">    </span><span class=\"nv\">pNetwork</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Parser</span><span class=\"w\"> </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nx\">Network</span>\n<span class=\"w\">    </span><span class=\"nv\">pNetwork</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">        </span><span class=\"nx\">const</span><span class=\"w\"> </span><span class=\"nx\">Dict</span><span class=\"p\">.</span><span class=\"nx\">fromList</span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">keep</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">sepBy1</span><span class=\"w\"> </span><span class=\"nx\">pNode</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">string</span><span class=\"w\"> </span><span class=\"s\">\"\\n\"</span><span class=\"p\">))</span>\n\n<span class=\"w\">    </span><span class=\"nv\">pMap</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Parser</span><span class=\"w\"> </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nx\">Map</span>\n<span class=\"w\">    </span><span class=\"nv\">pMap</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">        </span><span class=\"nx\">const</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"err\">\\</span><span class=\"nx\">directions</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">network</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nx\">directions</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">network</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">keep</span><span class=\"w\"> </span><span class=\"nx\">pDirections</span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">skip</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">string</span><span class=\"w\"> </span><span class=\"s\">\"\\n\\n\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">keep</span><span class=\"w\"> </span><span class=\"nx\">pNetwork</span>\n\n<span class=\"w\">    </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">parseStr</span><span class=\"w\"> </span><span class=\"nx\">pMap</span><span class=\"w\"> </span><span class=\"nx\">str</span><span class=\"w\"> </span><span class=\"o\">is</span>\n<span class=\"w\">        </span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"nx\">g</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">g</span>\n<span class=\"w\">        </span><span class=\"nx\">Err</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">ParsingFailure</span><span class=\"w\"> </span><span class=\"nx\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"nx\">Err</span><span class=\"w\"> </span><span class=\"nf\">(ParsingIncomplete e) -&gt;</span><span class=\"w\"> </span><span class=\"nx\">crash</span><span class=\"w\"> </span><span class=\"s\">\"bad input: '\\(e)'\"</span>\n</code></pre></div>\n</div></div>",
        "id": 406891003,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702099263
    },
    {
        "content": "<p>Once we fix the recursive list refcounting, these two should run at essentially the same speed</p>",
        "id": 406891266,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702099346
    },
    {
        "content": "<p>Nice work Brendan, this is really cool so see how performance can be impacted like this, and that there are solutions.</p>",
        "id": 406892868,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1702100437
    },
    {
        "content": "<p>Haha, now I just need to fix the underlying issue in  the compiler</p>",
        "id": 406893053,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702100612
    },
    {
        "content": "<p>I have no contributions to this little optimisation saga, I just want to say that I'm loving it. There's something hypnotic about watching something get optimised.</p>",
        "id": 406893162,
        "sender_full_name": "Declan Joseph Maguire",
        "timestamp": 1702100675
    },
    {
        "content": "<p>Should be roughly:</p>\n<ol>\n<li>List and Str store their full size on the heap (only needs to be updated when the list refcount goes from 1 to 2).</li>\n<li>Using this, seamless slices can free all elements of an underlying list</li>\n<li>All lists to the same allocation only keep a single reference to each inserted element. As such list will inc the refcount on insert, but will never touch the refcount recursively when passing the list around.</li>\n<li>When deallocating a list or slice, this is when we have to do all the recursive deallocations.</li>\n<li>Also, if we actually clone a list, we will still have to recursively increment the recount.</li>\n</ol>\n<p>Hmm, though on the heap I have to think about capacity vs size. Cause ideally we want to know the full capacity for in the future when <code>roc_dealloc</code> is passed the full allocation size. But for recount purposes, we want to know the full size such that the slice can just decrease the refcounts of real elements, not old junk elements. I'll have to think about this a bit more, but something along those lines should free us from this problem (though will keep some refcounted objects alive for longer)</p>",
        "id": 406893894,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702101103
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> do my comments here sound roughly right to you? Anything I am missing? I know you have thought about this recursive refcounting issue before.</p>",
        "id": 406905338,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702108685
    },
    {
        "content": "<p>well fundamentally this is a simple change. But there are many places now where the assumption is made that an inc/dec on a list is recursive, and we have to track them all down and fix them</p>",
        "id": 406933790,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1702127846
    },
    {
        "content": "<p>For sure, there will be memory leaks and double frees for a while as I do this. Hopefully due to tests and valgrind I'll be able to dig through those</p>",
        "id": 406954849,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702140724
    },
    {
        "content": "<p>Im not sure that refcounting is enough to explain the problem here. In a trace I ran, refcounts of the inner strings as 70ms/300ms of the profile. So I'm not sure that automatically translates to a 100x improvement</p>",
        "id": 406960779,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1702145867
    },
    {
        "content": "<p>I also wrote this program in Koka, and it ran in about the same time as the JS</p>",
        "id": 406960831,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1702145891
    },
    {
        "content": "<p>the refcounts also mess with the cache though</p>",
        "id": 406961437,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1702146453
    },
    {
        "content": "<p>I'd try running it with refcounts disabled (like they're a no-op) and see how that compares</p>",
        "id": 406961449,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1702146472
    },
    {
        "content": "<p>Does koka have the recursive refcount issue where if you pass a <code>List Str</code> to a function, it will end up recursively incrementing the refcount of all strings in the list? Or in this case <code>Dict Str {Str, Str}</code> so 3x as many strings to increment. Then at the end of the function it will recursively decrement the refcount of all the strings. (in this case, technically it is just traversing all the strings and realizing they are small then moving to the next one.)</p>\n<p>You need full debug info from dwarf and perf using it to see the inlined functions. Almost all of the refcounted functions are inlined</p>\n<p>Purple is refcounting. It is 98.6% of the program execution: <br>\n<a href=\"/user_uploads/22008/I1tRBIHi3RfmhPQ2GMDFdpwj/Screenshot-2023-12-09-at-10.30.06AM.png\">Screenshot-2023-12-09-at-10.30.06AM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/I1tRBIHi3RfmhPQ2GMDFdpwj/Screenshot-2023-12-09-at-10.30.06AM.png\" title=\"Screenshot-2023-12-09-at-10.30.06AM.png\"><img src=\"/user_uploads/22008/I1tRBIHi3RfmhPQ2GMDFdpwj/Screenshot-2023-12-09-at-10.30.06AM.png\"></a></div>",
        "id": 406961712,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702146649
    },
    {
        "content": "<p>Flamegraph of my faster version with <code>U8</code>s Purple is still refcounting. Essentially all of the time is spent in the parser:<br>\n<a href=\"/user_uploads/22008/ceNtIpznL6FysTrsl8I1hp7q/Screenshot-2023-12-09-at-10.37.10AM.png\">Screenshot-2023-12-09-at-10.37.10AM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/ceNtIpznL6FysTrsl8I1hp7q/Screenshot-2023-12-09-at-10.37.10AM.png\" title=\"Screenshot-2023-12-09-at-10.37.10AM.png\"><img src=\"/user_uploads/22008/ceNtIpznL6FysTrsl8I1hp7q/Screenshot-2023-12-09-at-10.37.10AM.png\"></a></div><p>~5% of the 109x faster version of the application is spent in refcounting</p>",
        "id": 406962206,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702147110
    },
    {
        "content": "<p>Also, wow, the parser has a deep call stack.</p>",
        "id": 406962228,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702147141
    },
    {
        "content": "<blockquote>\n<p>Dicts with refcounts keys or values are currently a pathological case</p>\n</blockquote>\n<p>Is this still a WIP issue? I ran into a problem where my roc code was running almost a 1000x slower than similar go code. Playing around with it a bit more I realized most of this overhead is coming from using <code>Str</code> key values for my <code>Dict</code>. Using a num type puts me back in go ballpark numbers</p>",
        "id": 440118892,
        "sender_full_name": "Musab Nazir",
        "timestamp": 1716391365
    },
    {
        "content": "<p>Yeah, I have a PR that is mostly done and I need to circle back to.</p>",
        "id": 440297181,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1716461699
    },
    {
        "content": "<p>That said, may be slow to finish. I think most remaining failing tests are segfaults. (Probably also have a number of memory leaks)</p>",
        "id": 440297260,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1716461737
    }
]