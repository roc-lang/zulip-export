[
    {
        "content": "<p>hello world with basic_cli and --opt-size is like 102M, stripped 19M which is kind of a lot.<br>\nI assume most of it is platform right?<br>\nSo what else can be done to optimize size<br>\nAnd would it be possible in the future in compilation to strip down stuff from platform that isn't used by the application</p>",
        "id": 324288703,
        "sender_full_name": "dank",
        "timestamp": 1674912117
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> looked into this recently</p>",
        "id": 324293146,
        "sender_full_name": "Anton",
        "timestamp": 1674913584
    },
    {
        "content": "<p>i also wonder about statically linked executables<br>\nrn it links with a bunch of stuff. is it planned to offer completely statically linked binaries</p>",
        "id": 324293624,
        "sender_full_name": "dank",
        "timestamp": 1674913753
    },
    {
        "content": "<blockquote>\n<p>is it planned to offer completely statically linked binaries</p>\n</blockquote>\n<p>Yes indeed, static linking would make it work out-of-the-box on NixOS</p>",
        "id": 324294712,
        "sender_full_name": "Anton",
        "timestamp": 1674914094
    },
    {
        "content": "<p>would it be a compiler flag like zig's <code>-static</code> or in general you wish to output only static?</p>",
        "id": 324296342,
        "sender_full_name": "dank",
        "timestamp": 1674914590
    },
    {
        "content": "<p>good question, l'll look around a bit to see what our options are</p>",
        "id": 324299540,
        "sender_full_name": "Anton",
        "timestamp": 1674915756
    },
    {
        "content": "<p>Whenever possible I think we should use \"config\" files for the platform. So for rust this could be done with <code>Cargo.toml</code> and <code>.cargo/config</code>. I don't have much zig experience but I think 'build.zig' can be used for that?<br>\nFor c platforms a roc flag like --platform-build-flags=\"\" may be the most appropriate.</p>",
        "id": 324312164,
        "sender_full_name": "Anton",
        "timestamp": 1674920346
    },
    {
        "content": "<p>Once we get the platform building logic out of the compiler itself, and into some sort of config in the platform, roc will have no way to control this. It already can't really effect this. If the platform is static roc will end up generating a truely static library. That said, we may have to jump through some more surgical linker hoops to make this fully work.</p>",
        "id": 324319657,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1674923378
    },
    {
        "content": "<p>Fundamentally, the surgical linker relies on the platform generating an executable where just the roc app is dynamically linked. Then we patch it up and remove that dynamic linking.</p>",
        "id": 324319847,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1674923434
    },
    {
        "content": "<p>As for the 102M basic_cli, i would have to look back over things to remember the exact cause, but i think it is a bug specifically related to rust hosts that ends up making them very bloated. I think the surgical linker can work around this, but we still have the issue because we support both the surgical and legacy linker. Don't exactly remember the details.</p>",
        "id": 324320266,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1674923612
    },
    {
        "content": "<p>Oh, also with the new plan for effects, i think it should also help a lot.</p>",
        "id": 324320413,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1674923666
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/size.20optimization/near/324320413\">said</a>:</p>\n<blockquote>\n<p>Oh, also with the new plan for effects, i think it should also help a lot.</p>\n</blockquote>\n<p>what's the new plan for effects</p>",
        "id": 324330200,
        "sender_full_name": "dank",
        "timestamp": 1674928318
    },
    {
        "content": "<p>Richard outlined the plan at a meetup recently. Luke hosted the meetup and shared a recording in this thread:<br>\n<a href=\"#narrow/stream/303057-gatherings/topic/Roc.20Online.20Meetup.20Jan.202023\">https://roc.zulipchat.com/#narrow/stream/303057-gatherings/topic/Roc.20Online.20Meetup.20Jan.202023</a></p>",
        "id": 324330932,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1674928679
    },
    {
        "content": "<p>In brief:<br>\nThe Roc app sends an effect to the platform as a value containing a callback. The callback is a \"continuation\" that returns next effect. Keep going like this till the program is finished.</p>",
        "id": 324331501,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1674928935
    },
    {
        "content": "<p>The big reason why this should help with binary size is that we won't have to fight with the platforms dead code elimination. It will now be more directly managing all functions that roc could interact with. With the current system, roc essentially uses ffi to directly call platform functions instead. This means the platform needs to keep all of those functions around even if it would normally dead code eliminate them. I think in rust, we fully turn of dead code elimination for platforms. That should be fixed with this update.</p>",
        "id": 324334643,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1674930562
    },
    {
        "content": "<p>ah that's clever</p>",
        "id": 324335826,
        "sender_full_name": "dank",
        "timestamp": 1674931266
    }
]