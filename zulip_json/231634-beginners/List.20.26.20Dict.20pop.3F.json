[
    {
        "content": "<p>Is there an efficient &amp; concise way to pop a value from a <code>List</code> or a <code>Dict</code>?</p>\n<p>Right now I'm using this function for <code>List</code>:</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>popFirst : List a, (a -&gt; Bool) -&gt; (a, List a)\npopFirst = \\list, condition -&gt;\n    index = list |&gt; List.findFirstIndex? condition\n    maybeValue = list |&gt; List.get index\n    value = when maybeValue is\n        Ok val -&gt; val\n        Err OutOfBounds -&gt; crash \"Unreachable, we just found the value's index\"\n    updatedList = list |&gt; List.dropAt index\n    Ok (value, updatedList)\n</code></pre></div>\n<p>And a similar helper function for <code>Dict</code>.</p>",
        "id": 469893566,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1726215763
    },
    {
        "content": "<p>Pretty sure we don't, the closest is <a href=\"https://www.roc-lang.org/builtins/List#replace\">replace</a>?. We should probably add some <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.swap_remove\">swap_remove</a> equivalent function.</p>",
        "id": 469895453,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1726216265
    },
    {
        "content": "<p>I guess you could use <code>List.walkWithIndexUntil</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">popFirst</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">NotFound</span><span class=\"p\">]</span>\n<span class=\"nv\">popFirst</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">list</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">condition</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">walkWithIndexUntil</span><span class=\"w\"> </span><span class=\"nv\">list</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">NotFound</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">element</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">condition</span><span class=\"w\"> </span><span class=\"nv\">element</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"w\">            </span><span class=\"kt\">Break</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">element</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">dropAt</span><span class=\"w\"> </span><span class=\"nv\">list</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"kr\">else</span>\n<span class=\"w\">            </span><span class=\"kt\">Continue</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">NotFound</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 469909008,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1726219431
    },
    {
        "content": "<p>Nice solution</p>",
        "id": 469921894,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1726222472
    },
    {
        "content": "<p>If possible, swapping the found element with the last element in the list before removing should be more performant</p>",
        "id": 469999166,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726241631
    },
    {
        "content": "<p>Why is that?</p>",
        "id": 470047616,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1726260866
    },
    {
        "content": "<p>Side note: it might be useful to have a \"performance tips\" page in the docs (unless it already exists?).</p>",
        "id": 470047734,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1726260941
    },
    {
        "content": "<p>If you delete an element in the middle of the list, it will shift all elements following to close the gap and keep the list contiguous.</p>",
        "id": 470057399,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726265853
    },
    {
        "content": "<p>If you swap and then delete. No other data has to move around besides the swapped elements.</p>",
        "id": 470057432,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726265879
    },
    {
        "content": "<p>So moving 1 vs n elements</p>",
        "id": 470057492,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726265902
    },
    {
        "content": "<p>I see, thanks, but this only works if we don't care about the order of the elements in the list.</p>",
        "id": 470061033,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1726268029
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"734214\">Aurélien Geron</span> <a href=\"#narrow/stream/231634-beginners/topic/List.20.26.20Dict.20pop.3F/near/470061033\">said</a>:</p>\n<blockquote>\n<p>I see, thanks, but this only works if we don't care about the order of the elements in the list.</p>\n</blockquote>\n<p>The alternative is a linked list, which is O(n) to traverse for the element, but O(1) to remove</p>",
        "id": 470061749,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1726268466
    },
    {
        "content": "<p>However, it's probably not worth doing a linked list, array-backed lists are more efficient for most use cases</p>",
        "id": 470062041,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1726268677
    },
    {
        "content": "<p>I would expect a linked list to lose about 100% of the time for this search then remove algorithm. But it depends on the exact use case. If it truly is a random element in the middle of the list, I would expect the linked list to be terrible.</p>",
        "id": 470070078,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726275484
    },
    {
        "content": "<p>But yeah, sometimes order matters. When that happens, start with a regular list and just remove the element... shifting everything. It has a cost, but until you get to a large n, is still probably faster than basically everything.</p>",
        "id": 470070328,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726275694
    },
    {
        "content": "<p>A <code>Collections</code> package with alternative list implementations, like unrolled linked lists,  B-trees, deque, skip lists, gap buffers, etc. would be nice. Perhaps also <code>Counter</code> and <code>DefaultDict</code>, which are two of my favorites in Python.</p>",
        "id": 470078908,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1726281542
    },
    {
        "content": "<p>\"unrolled\"?</p>",
        "id": 470080505,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726282206
    },
    {
        "content": "<p><a href=\"https://github.com/Subtlesplendor/roc-data\">https://github.com/Subtlesplendor/roc-data</a></p>\n<p>I think <span class=\"user-mention\" data-user-id=\"595873\">@Johan Lövgren</span> started on this</p>",
        "id": 470080531,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1726282233
    },
    {
        "content": "<p>Oh, googled it, multiple elements per node linked list.</p>",
        "id": 470080608,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726282285
    },
    {
        "content": "<p>Personally, I would push away from a generic catch all for data structures. Often turns more into an algorithmic jungle of hopes in big O rather than a handful of simple and powerful data structures that can do most heavy lifting if used well.</p>",
        "id": 470081107,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726282643
    },
    {
        "content": "<p>But obviously anyone can implement whatever roc packages they please.</p>",
        "id": 470081127,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726282662
    },
    {
        "content": "<p>And more roc experimentation and code is always good.</p>",
        "id": 470081152,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726282676
    },
    {
        "content": "<p>Good point Brendan, I really like the Unix philosophy of doing one thing and doing it well. Roc is a great language for that because packages cannot do bad things outside of their scope, so anyone can try out unknown packages without fear.</p>",
        "id": 470084480,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1726284421
    },
    {
        "content": "<p>Yes I did some simple things like that, mostly for fun. I also prefer the standard library to be as simple as possible.</p>",
        "id": 470112116,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1726295399
    },
    {
        "content": "<p>Though admittedly there is a bit of paradox to library defined data structures. As in, “the user should not care about how this queue is defined internally” clashes with the need to know the actual performance</p>",
        "id": 470112618,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1726295706
    }
]