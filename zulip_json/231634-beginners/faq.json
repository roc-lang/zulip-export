[
    {
        "content": "<p>I added a FAQ for some questions we've seen come up a few times - thoughts and feedback welcome!</p>\n<p><a href=\"https://github.com/rtfeldman/roc/blob/15a6193670a0393fe6d7dee6c0e4a2ef5fc10c1c/FAQ.md\">https://github.com/rtfeldman/roc/blob/15a6193670a0393fe6d7dee6c0e4a2ef5fc10c1c/FAQ.md</a></p>",
        "id": 272492375,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645245213
    },
    {
        "content": "<p>I left some comments on <a href=\"https://github.com/rtfeldman/roc/pull/2522\">https://github.com/rtfeldman/roc/pull/2522</a></p>",
        "id": 272495982,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1645249913
    },
    {
        "content": "<p>Might be worth reversing the order of the questions. The first one is a bit intimidating!</p>",
        "id": 272510516,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1645267855
    },
    {
        "content": "<p>Something I don't understand (and maybe is FAQ worthy) is how code like this</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">decoder</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">Json</span><span class=\"nf\">.</span><span class=\"kt\">Decode</span><span class=\"nf\">.</span><span class=\"nv\">succeed</span><span class=\"w\"> </span><span class=\"kt\">Point</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Json</span><span class=\"nf\">.</span><span class=\"kt\">Decode</span><span class=\"nf\">.</span><span class=\"nv\">field</span><span class=\"w\"> </span><span class=\"s\">\"x\"</span><span class=\"w\"> </span><span class=\"kt\">Decoder</span><span class=\"nf\">.</span><span class=\"nv\">int</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Json</span><span class=\"nf\">.</span><span class=\"kt\">Decode</span><span class=\"nf\">.</span><span class=\"nv\">field</span><span class=\"w\"> </span><span class=\"s\">\"y\"</span><span class=\"w\"> </span><span class=\"kt\">Decoder</span><span class=\"nf\">.</span><span class=\"nv\">int</span><span class=\"w\"></span>\n\n<span class=\"nv\">parser</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">Parser</span><span class=\"nf\">.</span><span class=\"nv\">succeed</span><span class=\"w\"> </span><span class=\"kt\">Point</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nf\">|=</span><span class=\"w\"> </span><span class=\"kt\">Parser</span><span class=\"nf\">.</span><span class=\"nv\">int</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nf\">|.</span><span class=\"w\"> </span><span class=\"kt\">Parser</span><span class=\"nf\">.</span><span class=\"nv\">symbol</span><span class=\"w\"> </span><span class=\"s\">\",\"</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nf\">|=</span><span class=\"w\"> </span><span class=\"kt\">Parser</span><span class=\"nf\">.</span><span class=\"nv\">int</span><span class=\"w\"></span>\n</code></pre></div>\n<p>translates over to Roc. Since there's no currying this won't work directly right?</p>",
        "id": 272524166,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1645284128
    },
    {
        "content": "<p>Here's a refactoring of your Elm code that uses explicit currying instead of implicit.</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">decoder</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">Json</span><span class=\"nf\">.</span><span class=\"kt\">Decode</span><span class=\"nf\">.</span><span class=\"nv\">succeed</span><span class=\"w\"> </span><span class=\"kt\">Point</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Json</span><span class=\"nf\">.</span><span class=\"kt\">Decode</span><span class=\"nf\">.</span><span class=\"nv\">field</span><span class=\"w\"> </span><span class=\"s\">\"x\"</span><span class=\"w\"> </span><span class=\"kt\">Decoder</span><span class=\"nf\">.</span><span class=\"nv\">int</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Json</span><span class=\"nf\">.</span><span class=\"kt\">Decode</span><span class=\"nf\">.</span><span class=\"nv\">field</span><span class=\"w\"> </span><span class=\"s\">\"y\"</span><span class=\"w\"> </span><span class=\"kt\">Decoder</span><span class=\"nf\">.</span><span class=\"nv\">int</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 272525750,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1645285967
    },
    {
        "content": "<p>And you could translate that more directly to Roc</p>",
        "id": 272525766,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1645285990
    },
    {
        "content": "<p>I think the way to go here is backpassing?</p>",
        "id": 272525785,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1645286031
    },
    {
        "content": "<p>True, that works in this example. Does it work for replacing all instances of currying? Because I thought that was more what Martin was getting at.</p>",
        "id": 272525967,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1645286190
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"431893\">Brian Carroll</span> <a href=\"#narrow/stream/231634-beginners/topic/faq/near/272525750\">said</a>:</p>\n<blockquote>\n<p>Here's a refactoring of your Elm code that uses explicit currying instead of implicit.</p>\n<p><div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">decoder</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">Json</span><span class=\"nf\">.</span><span class=\"kt\">Decode</span><span class=\"nf\">.</span><span class=\"nv\">succeed</span><span class=\"w\"> </span><span class=\"kt\">Point</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Json</span><span class=\"nf\">.</span><span class=\"kt\">Decode</span><span class=\"nf\">.</span><span class=\"nv\">field</span><span class=\"w\"> </span><span class=\"s\">\"x\"</span><span class=\"w\"> </span><span class=\"kt\">Decoder</span><span class=\"nf\">.</span><span class=\"nv\">int</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Json</span><span class=\"nf\">.</span><span class=\"kt\">Decode</span><span class=\"nf\">.</span><span class=\"nv\">field</span><span class=\"w\"> </span><span class=\"s\">\"y\"</span><span class=\"w\"> </span><span class=\"kt\">Decoder</span><span class=\"nf\">.</span><span class=\"nv\">int</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I don't think this works. The issue is that after <code> |&gt; (\\a -&gt; Json.Decode.field \"x\" Decoder.int a)</code> only the x value is applied to Point which isn't possible if you don't have currying.</p>\n<blockquote>\n<p>I think the way to go here is backpassing?</p>\n</blockquote>\n<p>Maybe this could work. Perhaps an example of this could be added to the FAQ?</p>",
        "id": 272526097,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1645286351
    },
    {
        "content": "<p>this is the backpassing translation:</p>\n<div class=\"codehilite\"><pre><span></span><code>decoder =\n    x &lt;- required &quot;x&quot; int\n    y &lt;- required &quot;y&quot; int\n\n    succeed { x, y }\n</code></pre></div>\n<p>(using an API similar to json-decode-pipeline)</p>",
        "id": 272526413,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645286644
    },
    {
        "content": "<p>Is backpassing only for monads (if I may be forgiven for using the M-word)?</p>",
        "id": 272526434,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1645286678
    },
    {
        "content": "<p>no, it's just syntactic sugar; you can use it for anything!</p>",
        "id": 272526440,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645286700
    },
    {
        "content": "<p>oh I see. I was incorrectly thinking of it as an equivalent of <code>do</code> notation from Haskell</p>",
        "id": 272526462,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1645286724
    },
    {
        "content": "<p>we're more general than haskell</p>",
        "id": 272526468,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1645286741
    },
    {
        "content": "<p>oh that's fun to say</p>",
        "id": 272526471,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1645286746
    },
    {
        "content": "<p>That should be a slogan on the website</p>",
        "id": 272526474,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1645286753
    },
    {
        "content": "<p>technically instead of writing this:</p>\n<div class=\"codehilite\"><pre><span></span><code>List.map list \\elem -&gt;\n   stuff\n</code></pre></div>\n<p>you can write this:</p>\n<div class=\"codehilite\"><pre><span></span><code>elem &lt;- List.map list\n\nstuff\n</code></pre></div>\n<p>...but I'm not saying I recommend it <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 272526525,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645286778
    },
    {
        "content": "<p>(or for any higher-order function)</p>",
        "id": 272526533,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645286789
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"432314\">@Martin Stewart</span> the backpassing version of the parser one would look similar, except it would be like <code>&lt;- keep (...)</code> or <code>&lt;- drop (...)</code> instead of <code>|.</code> and <code>|=</code></p>",
        "id": 272526573,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645286850
    },
    {
        "content": "<p>Cool! The backpassing approach looks nicer than the pipeline style in Elm. It's something I've gotten used to but it's strange to start with <code>Json.Decode.succeed MyValue</code>. I imagine backpassing is easier to explain.</p>",
        "id": 272526806,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1645287094
    },
    {
        "content": "<p>yeah I expect it to be easier to learn, although the Abilities approach might make it a moot point in the specific case of decoders</p>",
        "id": 272527313,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645287647
    },
    {
        "content": "<p>still relevant for parsers though!</p>",
        "id": 272527319,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1645287655
    }
]