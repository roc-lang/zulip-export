[
    {
        "content": "<p>Hey just seeing this discussion on Wasm. In my Elm-in-Wasm project I originally built a back end that went directly to Wasm. But later I decided to go through C to make it easier to debug, and I could have kernel code in the C too, etc. Anyway I have a good understanding of how the instruction set works and that kind of thing, if that can be of use to people.</p>",
        "id": 249049139,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1628636494
    },
    {
        "content": "<p>Regarding .wasm and .wat formats, there's a <a href=\"https://github.com/WebAssembly/wabt\">WebAssembly Binary Toolkit</a> that has some useful tools including translating back and forth between the two.</p>",
        "id": 249049427,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1628636653
    },
    {
        "content": "<p>There's also an optimizer there</p>",
        "id": 249049442,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1628636666
    },
    {
        "content": "<p>are there rust bindings for that? I thought wasm was pretty rust-centered but maybe not?</p>",
        "id": 249049767,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1628636919
    },
    {
        "content": "<p>The Wasm module is a data structure that I think more or less resembles an executable file like ELF or EXE. It has a data section and code sections and some tables and that kind of thing. Best resource I found for this was the spec itself, although that was a couple of years ago, maybe there's better stuff now. But this page shows you the module structure: <a href=\"https://webassembly.github.io/spec/core/syntax/modules.html\">https://webassembly.github.io/spec/core/syntax/modules.html</a></p>",
        "id": 249049773,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1628636924
    },
    {
        "content": "<p>No I definitely wouldn't say Wasm is Rust-centred! If anything maybe the other way around</p>",
        "id": 249049805,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1628636955
    },
    {
        "content": "<p>Rust does have good support for it</p>",
        "id": 249049825,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1628636971
    },
    {
        "content": "<p>But a lot of the actual Wasm development is more geared towards C and C++. And if you're using LLVM anyway then that has a Wasm back end so that would be the way to do it. Zig has a Wasm back end.</p>",
        "id": 249049929,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1628637050
    },
    {
        "content": "<p>I didn't use Rust for my project, only C. I did a tiny amount with Rust and Wasm like 2 or 3 years ago but can't remember now.</p>",
        "id": 249050181,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1628637246
    },
    {
        "content": "<p>I did create a Haskell type definition to represent the Wasm module though</p>",
        "id": 249050257,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1628637312
    },
    {
        "content": "<p>well sure we can go to wasm via llvm, but llvm is very slow</p>",
        "id": 249050285,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1628637341
    },
    {
        "content": "<p>which is why we're also working on direct assembly backends</p>",
        "id": 249050293,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1628637349
    },
    {
        "content": "<p>and would similarly ultimately like to emit wasm directly, for development purposes (a release/optimized build would still probably go via LLVM)</p>",
        "id": 249050343,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1628637371
    },
    {
        "content": "<p>Right, I see</p>",
        "id": 249050386,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1628637412
    },
    {
        "content": "<p>(moved this to its own topic!)</p>",
        "id": 249059860,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1628645976
    },
    {
        "content": "<p>thanks for the wasm tips, Brian! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 249059912,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1628646015
    },
    {
        "content": "<p>Sure!<br>\nLooks like there are indeed Rust bindings for WABT, and it has struct definitions for a Wasm module etc. <a href=\"https://docs.rs/wabt/0.10.0/wabt/\">https://docs.rs/wabt/0.10.0/wabt/</a></p>",
        "id": 249079420,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1628669359
    },
    {
        "content": "<p>Hey all! Getting started with roc and having trouble with compiling to wasm. Is there a simple (relatively recent) example of this? Is there a dedicated wasm platform?</p>\n<p>I have found repos that are 2 years old, using zig, but I think the wasm story is much better now. Any examples / references would be appreciated!</p>\n<p>Thanks</p>",
        "id": 508973100,
        "sender_full_name": "Ally Jr Salim",
        "timestamp": 1743295911
    },
    {
        "content": "<p>I think most wasm platforms have been bespoke made for single apps. I don't think we have any flexible platforms. That said, we may have more recent examples. Oh, I guess, wasm4 is technically slightly flexible and wasm, but it isn't hooked into the browser directly. It is for a game engine.</p>",
        "id": 508989785,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743309972
    },
    {
        "content": "<p>There is an example of compilation to wasm (frontend stuff though)<br>\n<a href=\"https://github.com/lukewilliamboswell/roc-experiment-js-dom/blob/a0bf524d1d80ff8a36128611aa4de21c6d465bf7/run-web.sh#L15\">https://github.com/lukewilliamboswell/roc-experiment-js-dom/blob/a0bf524d1d80ff8a36128611aa4de21c6d465bf7/run-web.sh#L15</a></p>",
        "id": 509023931,
        "sender_full_name": "Vladimir Zotov",
        "timestamp": 1743339816
    }
]