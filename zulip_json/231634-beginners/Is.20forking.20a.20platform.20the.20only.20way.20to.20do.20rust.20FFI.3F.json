[
    {
        "content": "<p>So if multiple platforms are't a thing...</p>\n<p>Hypothetically speaking, how would I do FFI from roc code an existing rust library?</p>\n<p>Is the only way to fork a platform?</p>\n<p>I'm vaguely aware that there has been and idea for something like platform plug-ins? But that's.. not a thing? right?</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>superfluous details about my use-case</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>...you don't need this wall of text to understand my question, but if you're curious for context, here it is.</p>\n<p>I really like building things for the <a href=\"https://matrix.org\">Matrix protocol</a>.<br>\nI like to build special-purpose clients and bots. <br>\nFor writing bots I've just been using python (it's what I'm used to).<br>\nIt's all HTTP-based, so Elm has been very nice for building web clients.<br>\nBut some things are just not feasible to implement myself in Elm; for example a proper end-to-end encryption implementation. It needs to be fast and secure, and I'm not <em>that</em> good.<br>\nI could do use elm ports and make bindings for some JS library, but... that sounds like a quick way introduce way more JS in my app than I want there to be.</p>\n<p>I want to start using the <a href=\"https://github.com/matrix-org/matrix-rust-sdk\">matrix-rust-sdk</a>, which a lot of matrix projects have been converging on. It has end-to-end encryption and all the fancy stuff I need. It works both natively and for wasm!</p>\n<p>I wrote a small experiment of a client webapp in rust with <a href=\"https://yew.rs\">yew</a>. It's alright, but it's far less friendly than Elm.<br>\nOf course I could use rust for writing bots and other server-side stuff as well.</p>\n<p>Maybe Roc could be great for this?</p>\n<p>If my understandings of Roc platforms is correct (it probably isn't), my very hypothetical plan would be something like this:<br>\n- fork <code>basic_cli</code> and write add <code>matrix-rust-sdk</code> bindings to make a <code>matrix-bot</code> platform<br>\n- fork <code>virtual-dom</code> and add the <code>matrix-rust-sdk</code> bindings to make a <code>matrix-webapp</code> platform<br>\n- fork the <code>webserver</code> platform and add the <code>matrix-rust-sdk</code> bindings to make a <code>matrix-appservice</code> platform (<a href=\"http://\">matrix appservices</a> need to respond to http requests)</p>\n<p>Does that seem like a reasonable way to go?</p>\n</div></div>",
        "id": 405893891,
        "sender_full_name": "Asbjørn Olling",
        "timestamp": 1701716533
    },
    {
        "content": "<blockquote>\n<p>Is the only way to fork a platform?</p>\n</blockquote>\n<p>If you truly need ffi to an arbitrary library either:</p>\n<ul>\n<li>a platform needs to be forked</li>\n<li>the library has to be ported to roc building on primitives (example, postgres connect built on just tcp)</li>\n<li>someone needs to implement a platform with generic ffi using <code>libffi</code> and dynamically loading shared libraries</li>\n</ul>",
        "id": 405894665,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701716801
    },
    {
        "content": "<blockquote>\n<p>Does that seem like a reasonable way to go?</p>\n</blockquote>\n<p>Yep. Fork, add matrix library. Maybe trim some unneeded stuff or customize the platform otherwise. Then build on that.</p>",
        "id": 405895050,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701716983
    },
    {
        "content": "<p>Coolcool. I might give that a shot one day. Thanks.</p>",
        "id": 405897042,
        "sender_full_name": "Asbjørn Olling",
        "timestamp": 1701717832
    },
    {
        "content": "<p>I still have a limited understanding of platforms, but I think that having to do <code>matrix-bot</code> platform is actually a good thing. Because you could set it up so that the Roc code just provides callbacks for the hooks (and some configuration probably? or maybe just a path to a file and the platform will handle that) and the platform would handle setup, connecting to the server, setting callbacks. So the platform would be like a framework, exposing only what's needed. Is this the idea?</p>",
        "id": 405900413,
        "sender_full_name": "LoipesMas",
        "timestamp": 1701719201
    },
    {
        "content": "<p>100% that is the idea.</p>",
        "id": 405900787,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701719372
    },
    {
        "content": "<p>That would be an amazingly well scope platform that would hopefully expose a really nice and focused matrix related api</p>",
        "id": 405900822,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701719397
    },
    {
        "content": "<p>Huh that's a cool idea. I haven't thought much about the API of a matrix platform, I guess I was figuring it'd be a lot of request/response managed effects / a lot of generic <code>Task</code> stuff, that should just map directly to the types and functions in matrix-rust-sdk.<br>\nThinking about where platform/application boundaries are drawn is super interesting.<br>\nI really like the idea of a high-level Matrix bot platform.</p>",
        "id": 405904551,
        "sender_full_name": "Asbjørn Olling",
        "timestamp": 1701720856
    }
]