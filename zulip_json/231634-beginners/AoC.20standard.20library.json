[
    {
        "content": "<p>I'm interested to know what utility functions people commonly use when writing advent of code solutions (or anything else). I'm thinking along the lines of simple things which are somewhat general-purpose rather than very specific to the kind of puzzles you get. Mine are:</p>\n<h3>List sumBy</h3>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">three</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"p\">[[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]]</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">sumBy</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">len</span>\n</code></pre></div>\n<p>This one feels quite intuitive to use. On the other hand, it's not much more concise than <code>map</code> + <code>sum</code>. I learnt FSharp for a while before Roc, so I became use to these 'map+' functions (see also <a href=\"https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-listmodule.html#sortBy\">sortBy</a>). As I understand it the performance reasons for wanting this kind of function may be negated by future language features like iterators?</p>\n<h3>Dict upsert</h3>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">upsert</span><span class=\"w\"> </span><span class=\"nv\">dict</span><span class=\"w\"> </span><span class=\"nv\">key</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>The alternative seems quite verbose:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">Dict</span><span class=\"nf\">.</span><span class=\"nv\">update</span><span class=\"w\"> </span><span class=\"nv\">dict</span><span class=\"w\"> </span><span class=\"nv\">key</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">current</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">current</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">Missing</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n</code></pre></div>\n<h3>String bisect</h3>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">string</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"s\">\"Button A: X+94, Y+34\"</span>\n<span class=\"p\">(</span><span class=\"nv\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">xyStr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">try</span><span class=\"w\"> </span><span class=\"nv\">bisect</span><span class=\"w\"> </span><span class=\"nv\">string</span><span class=\"w\"> </span><span class=\"s\">\": \"</span>\n<span class=\"p\">(</span><span class=\"nv\">xStr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">yStr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">try</span><span class=\"w\"> </span><span class=\"nv\">bisect</span><span class=\"w\"> </span><span class=\"nv\">xyStr</span><span class=\"w\"> </span><span class=\"s\">\", \"</span>\n</code></pre></div>\n<p>This seems quite powerful for writing an off-the-cuff parser without nested pattern matching, in combination with <code>Str.dropPrefix</code> and other things.</p>",
        "id": 488896282,
        "sender_full_name": "Alex Nuttall",
        "timestamp": 1734113774
    },
    {
        "content": "<p>bisect is just a single split?</p>",
        "id": 488896994,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734114092
    },
    {
        "content": "<p>Also, upsert sounds like something we should add...I wonder if there is a better name.</p>",
        "id": 488897043,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734114111
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/231634-beginners/topic/AoC.20standard.20library/near/488896994\">said</a>:</p>\n<blockquote>\n<p>bisect is just a single split?</p>\n</blockquote>\n<p>Yes, I originally called it <code>splitTwo</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">splitTwo</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">CouldNotSpli</span><span class=\"p\">]</span>\n<span class=\"nv\">splitTwo</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">on</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">splitOn</span><span class=\"w\"> </span><span class=\"nv\">str</span><span class=\"w\"> </span><span class=\"nv\">on</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"p\">[</span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">CouldNotSplit</span>\n</code></pre></div>\n<p>splitThree (trisect?) could also be useful as well</p>",
        "id": 488897819,
        "sender_full_name": "Alex Nuttall",
        "timestamp": 1734114423
    },
    {
        "content": "<p>Being able to destructure the result is key I think</p>",
        "id": 488897915,
        "sender_full_name": "Alex Nuttall",
        "timestamp": 1734114458
    },
    {
        "content": "<p>oh, bisect is exactly two, so not the same as splitting at the first instance of the substring (that is what I initially assumed it was)</p>",
        "id": 488898264,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734114598
    },
    {
        "content": "<p>Ah yeah. That may be more useful for real world stuff whereas my <code>bisect</code> is only useful for parsing extremely constrained inputs.</p>",
        "id": 488899953,
        "sender_full_name": "Alex Nuttall",
        "timestamp": 1734115227
    },
    {
        "content": "<p>I'm not sure there are any cases where I could not just have used <code>Str.splitFirst</code> to be honest.</p>",
        "id": 488900551,
        "sender_full_name": "Alex Nuttall",
        "timestamp": 1734115475
    }
]