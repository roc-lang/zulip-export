[
    {
        "content": "<p>While trying to cast an U8 integer to I64 in the REPL I get the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Enter an expression, or :help, or :q to quit.\n\n» Num.toI64 3u8\nthread 'main' panicked at crates/compiler/gen_dev/src/generic64/mod.rs:4775:22:\nnot yet implemented: int cast from U8 to I64\n</code></pre></div>\n<p>And indeed, <a href=\"https://github.com/roc-lang/roc/blob/f662f2910fe63383db1c01f05f99f4db92c63a8a/crates/compiler/gen_dev/src/generic64/mod.rs#L4775\">line 4775 of <code>crates/compiler/gen_dev/src/generic64/mod.rs</code> </a> is:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">                </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">todo!</span><span class=\"p\">(</span><span class=\"s\">\"int cast from {source:?} to {target:?}\"</span><span class=\"p\">),</span>\n</code></pre></div>\n<p>Is there some fundamental reason this (and similar) integer casts are not supported yet? This particular case seems rather obvious, at least to my unsuspecting and unexperienced eye. In the <a href=\"https://www.roc-lang.org/repl\">online REPL</a> it works as desired:</p>\n<div class=\"codehilite\"><pre><span></span><code>» Num.toI64 3u8\n\n3 : I64\n</code></pre></div>\n<p>I couldn't find a github issue that tracks this problem.</p>",
        "id": 491449172,
        "sender_full_name": "kukimik",
        "timestamp": 1735685652
    },
    {
        "content": "<p>What arch are you on? I think the REPL uses the dev backends, which are still filling out these APIs. Wasm is the most mature, then x64 I think.</p>",
        "id": 491450132,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735686576
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"722031\">@shua</span> probably would know the status here. They've been chipping away at these functions. <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 491450217,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735686630
    },
    {
        "content": "<p>Thanks! I'm on x86_64.</p>",
        "id": 491532355,
        "sender_full_name": "kukimik",
        "timestamp": 1735769393
    },
    {
        "content": "<p>If I can take some more of your time... What do you mean by \"dev backends\"?</p>\n<p>Does that mean that the compiler should handle it and the problem only occurs in the REPL? (I didn't try it.)</p>\n<p>Is there some document that gives an overview of the architecture of the compiler/REPL/standard library/other important parts of the language that I'm not aware of?</p>",
        "id": 491533041,
        "sender_full_name": "kukimik",
        "timestamp": 1735770105
    },
    {
        "content": "<p>When we compile Roc, it first gets parsed and typechecked and all, and that result gets saved as IR, or an Intermediate Representation. It's a generic, high-level way to say \"this is a function, and this is a number, etc.\" Depending on where and how we want to run the program, we have different \"backends\" to convert this IR to something the machine can run</p>",
        "id": 491533159,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735770232
    },
    {
        "content": "<p>One of them is LLVM, which is what Rust and Swift and all use, it spits out fast code but it's slow to compile</p>",
        "id": 491533236,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735770300
    },
    {
        "content": "<p>See <a href=\"https://en.wikipedia.org/wiki/Frontend_and_backend#:~:text=In%20compilers%2C%20the%20frontend%20translates,produce%20code%20that%20runs%20faster.\">en.wikipedia.org/wiki/Frontend_and_backend</a></p>\n<p>The roc compiler has three backends. </p>\n<ol>\n<li>gen-llvm - used for producing highly optimised machine code that runs fast for a production release. It compiles slow.</li>\n<li>gen-dev - used for producing machine code lightening fast for iterative development workflow. The runtime perf is probably terrible.</li>\n<li>gen-wasm - used to lower to WASM bytecode</li>\n</ol>",
        "id": 491533247,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1735770308
    },
    {
        "content": "<p>Yeah, what he said</p>",
        "id": 491533255,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735770325
    },
    {
        "content": "<p>Ah, ok, so the \"dev backends\" are the backends designed to be used during development, allowing for fast iteration (at the cost of bad runtime performance). Now I see what the \"dev\" stands for in this context. Thanks for explaining this!</p>",
        "id": 491680629,
        "sender_full_name": "kukimik",
        "timestamp": 1735860933
    }
]