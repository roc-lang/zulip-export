[
    {
        "content": "<p>Where can I find the functions available in the String (Str ?) library?</p>",
        "id": 248673520,
        "sender_full_name": "James Carlson",
        "timestamp": 1628287182
    },
    {
        "content": "<p>this is probably the most up-to-date list <a href=\"https://github.com/rtfeldman/roc/blob/trunk/compiler/module/src/symbol.rs#L905\">https://github.com/rtfeldman/roc/blob/trunk/compiler/module/src/symbol.rs#L905</a></p>",
        "id": 248675566,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1628288712
    },
    {
        "content": "<p>not very discoverable or friendly, but that's what's actually implemented</p>",
        "id": 248675581,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1628288722
    },
    {
        "content": "<p>I'll work on improving that tonight!</p>",
        "id": 248682194,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1628294806
    },
    {
        "content": "<p>Excellent!  I've decoded just a tad, see section 6 of <a href=\"https://l1-lab.lamdera.app/g/jxxcarlson-the-roc-language-by-example-2021-08-05\">https://l1-lab.lamdera.app/g/jxxcarlson-the-roc-language-by-example-2021-08-05</a> -- will belay and look at what you do.</p>\n<p>Here is the beginning of some notes on parser combinators: <a href=\"https://l1-lab.lamdera.app/g/jxxcarlson-roc-parser-combinator-notes-2021-08-07\">https://l1-lab.lamdera.app/g/jxxcarlson-roc-parser-combinator-notes-2021-08-07</a>  <br>\nSome questions there (all very brief)</p>",
        "id": 248692072,
        "sender_full_name": "James Carlson",
        "timestamp": 1628305699
    },
    {
        "content": "<p>One question.  Is it possible to split a string <code>(x:xs)</code> into <code>Pair x xs</code>? By <code>(x:xs)</code>, I mean <code>x = first char</code>, <code>xs = the rest</code>.</p>",
        "id": 248692174,
        "sender_full_name": "James Carlson",
        "timestamp": 1628305859
    },
    {
        "content": "<p>Something like <code>String.uncons</code> in Elm</p>",
        "id": 248692514,
        "sender_full_name": "James Carlson",
        "timestamp": 1628306340
    },
    {
        "content": "<blockquote>\n<p>One question.  Is it possible to split a string <code>(x:xs)</code> into <code>Pair x xs</code>? By <code>(x:xs)</code>, I mean <code>x = first char</code>, <code>xs = the rest</code>.</p>\n</blockquote>\n<p>I don't think so. I find elm has a small number of builtins in general so if it's in elm it might be worth including in roc as well, <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> <span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span>.</p>",
        "id": 248721993,
        "sender_full_name": "Anton",
        "timestamp": 1628350862
    },
    {
        "content": "<p>About the questions in the notes:</p>\n<blockquote>\n<p>Can we import stuff into the repl?</p>\n</blockquote>\n<p>No, I dont't think so. Although I think we planned on adding that in the future.</p>\n<blockquote>\n<p>Need to learn how put these in a module (or interface???) and how to make use of what is in that file in a test app or in the repl.</p>\n</blockquote>\n<p><a href=\"https://github.com/rtfeldman/roc/blob/trunk/examples/benchmarks/QuicksortApp.roc\">examples/benchmarks/QuicksortApp.roc</a> uses things from the Quicksort interface. That should be a good example for you.</p>",
        "id": 248722376,
        "sender_full_name": "Anton",
        "timestamp": 1628351364
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> , very helpful!</p>",
        "id": 248725930,
        "sender_full_name": "James Carlson",
        "timestamp": 1628356455
    },
    {
        "content": "<p>ok, I wrote up a bunch of notes on string parsing API thoughts!</p>\n<p><a href=\"https://gist.github.com/rtfeldman/ae69d41e0f73d3059d14b7d54186edc1\">https://gist.github.com/rtfeldman/ae69d41e0f73d3059d14b7d54186edc1</a></p>",
        "id": 248728852,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1628360583
    },
    {
        "content": "<p>some of those things that aren't implemented should be very quick, and good beginner projects for contributing to the compiler - if anyone wants to pair on implementing any of them this weekend, DM me!</p>",
        "id": 248728868,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1628360608
    },
    {
        "content": "<p>also, love to hear any feedback anyone has about that gist <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 248732091,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1628365154
    },
    {
        "content": "<p>I like that the design of <code>Str</code> has the specific use case of \"writing arbitrary string parsers\" and pattern matching APIs geared towards it. In my experience with scripting languages, there's a perpetual temptation to hack together code that sort of works using clever hash-table and string manipulation, so if the ergonomics of Roc can guide users towards modeling their problem with data structures instead, that's a win. </p>\n<p>To that end, I'd propose keeping the API of strings reasonably minimal. What exists now seems reasonable, and a few more helpers might be nice, but I'd get nervous about adding too much regular expression sugar or Rubyims like <code>squeeze</code> and friends. I also think the temptation to write <code>Str.length</code> and other similar functions gives us the chance to add lots of lovely compiler messages about why strings can be so confusing and why you might want to choose something else.</p>\n<p>Could we build mechanisms into the compiler/editor to help application and platform writers decide where their parsing functions belong? I could envision a scenario where a platform author adds a built-in after discovering application developers writing lots of similar parsing code. Would adding explicit tooling for that use-case be worthwhile? Probably not yet, but maybe in the future...</p>\n<p>Philosophically, I think users tend to be happier when they understand the why of an API, not merely the what. I thought the gist did a good job conveying that <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 248734915,
        "sender_full_name": "Joshua Hoeflich",
        "timestamp": 1628369361
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/231634-beginners/topic/strings/near/248732091\">said</a>:</p>\n<blockquote>\n<p>also, love to hear any feedback anyone has about that gist <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>\n</blockquote>\n<p>Makes a lot of sense to me. I like it.</p>",
        "id": 248735848,
        "sender_full_name": "Chad Stearns",
        "timestamp": 1628370776
    },
    {
        "content": "<p>gist nice</p>",
        "id": 248742769,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1628381720
    },
    {
        "content": "<p>Elixir has the best string story I’ve seen so far.</p>\n<p><a href=\"https://elixir-lang.org/getting-started/binaries-strings-and-char-lists.html\">https://elixir-lang.org/getting-started/binaries-strings-and-char-lists.html</a></p>",
        "id": 248742775,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1628381735
    },
    {
        "content": "<p>they take into account graphemes and have some gnarly pattern matching for them too</p>",
        "id": 248742823,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1628381771
    },
    {
        "content": "<p>Woaaah, the bitstring matching looks freaking slick</p>",
        "id": 248742975,
        "sender_full_name": "Joshua Hoeflich",
        "timestamp": 1628382007
    },
    {
        "content": "<p>yea aside from that matching roc has a lot of what elixir does with strings</p>",
        "id": 248743050,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1628382133
    },
    {
        "content": "<p>‘(‘ vs. 40</p>",
        "id": 248743056,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1628382145
    },
    {
        "content": "<p>In elixir a list of numbers will print as a Charlist if the numbers are a readable sequence of characters</p>",
        "id": 248743069,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1628382185
    },
    {
        "content": "<p>well in roc you could match on bytes but elixir has that wild thing where you can say what sizes each chunk should be</p>",
        "id": 248743140,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1628382267
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/ARcEnQG_dbDl3Y0W1AHvODj4/IMG_7600.PNG\">IMG_7600.PNG</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/ARcEnQG_dbDl3Y0W1AHvODj4/IMG_7600.PNG\" title=\"IMG_7600.PNG\"><img src=\"/user_uploads/22008/ARcEnQG_dbDl3Y0W1AHvODj4/IMG_7600.PNG\"></a></div>",
        "id": 248743303,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1628382544
    },
    {
        "content": "<p>Wild is the right word, I wanna go read a parser in Elixir now</p>",
        "id": 248743317,
        "sender_full_name": "Joshua Hoeflich",
        "timestamp": 1628382584
    },
    {
        "content": "<p><a href=\"https://github.com/elixir-ecto/ecto/blob/v3.5.4/lib/ecto/uuid.ex\">https://github.com/elixir-ecto/ecto/blob/v3.5.4/lib/ecto/uuid.ex</a></p>",
        "id": 248743403,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1628382682
    },
    {
        "content": "<p>this is how one would generate a UUID with the same syntax</p>",
        "id": 248743406,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1628382700
    },
    {
        "content": "<p><a href=\"https://github.com/elixir-ecto/ecto/blob/6aea34e865f05c9f0ffa9d3c78219e21a63527c7/lib/ecto/uuid.ex#L163\">https://github.com/elixir-ecto/ecto/blob/6aea34e865f05c9f0ffa9d3c78219e21a63527c7/lib/ecto/uuid.ex#L163</a></p>\n<p>I don't know if I'd want to read code that looks like this every day, but in isolation... wow, that's gorgeous</p>",
        "id": 248743526,
        "sender_full_name": "Joshua Hoeflich",
        "timestamp": 1628382853
    },
    {
        "content": "<p>Thanks so much!  The link above was really helpful, and as I mentioned in my reply to your Gist, I think that the foundation is almost there for writing fault-tolerant pasrsers.</p>",
        "id": 248744215,
        "sender_full_name": "James Carlson",
        "timestamp": 1628384030
    },
    {
        "content": "<p>Richard, I put a very brief comment in your gist.  I'm satisfied that this lays a good foundation for what I want to do — implement something along the lines of <a href=\"https://www.cs.nott.ac.uk/~pszgmh/monparsing.pdf\">Hughes and Meijer: Parse Combinators</a>.  I'm going to have a go at it and can probably have more specific feedback after I've gotten into the code.</p>",
        "id": 248745526,
        "sender_full_name": "James Carlson",
        "timestamp": 1628386066
    },
    {
        "content": "<p>Is there an analogue of Elm's <code>Debug.toString</code>?</p>",
        "id": 248751469,
        "sender_full_name": "James Carlson",
        "timestamp": 1628395711
    },
    {
        "content": "<p>there is not...the plan is to do that through the editor, but that's a ways off <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 248751532,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1628395827
    },
    {
        "content": "<p>OK!</p>",
        "id": 248751595,
        "sender_full_name": "James Carlson",
        "timestamp": 1628395940
    },
    {
        "content": "<p>FYI, <span class=\"user-mention\" data-user-id=\"430829\">@James Carlson</span> you can now find up-to-date (as in, what's actually currently implemented) documentation for the <code>Str</code> module at <a href=\"https://www.roc-lang.org/builtins/Str\">https://www.roc-lang.org/builtins/Str</a> - so far I've only added <code>Str</code> and <code>Bool</code> there, but I'm hoping to add the other builtin modules soon!</p>",
        "id": 248751648,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1628396076
    },
    {
        "content": "<p>there's a bug where <code>Bool</code> is always the expanded module on the sidebar; I'll fix that tomorrow!</p>",
        "id": 248751653,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1628396112
    },
    {
        "content": "<p>Fantastic!</p>",
        "id": 248751763,
        "sender_full_name": "James Carlson",
        "timestamp": 1628396352
    },
    {
        "content": "<p>Extremely cool that <code>List.len</code> returns a <code>Nat</code>!  That's the way it's supposed to be.</p>",
        "id": 248751836,
        "sender_full_name": "James Carlson",
        "timestamp": 1628396515
    },
    {
        "content": "<p>Why this error?</p>\n<div class=\"codehilite\"><pre><span></span><code>I expected to reach the end of the file, but got stuck here:\n\n1│  interface MiniParsec exposes [ result, test1 ] imports []\n2│\n3│  result = \\v -&gt; (\\inp -&gt; [Pair v inp])\n4│\n5│  test1 n = (result &quot;a&quot;) n  |&gt; List.len\n        ^\n\nno hints%\n</code></pre></div>\n<p>There is a blank line 6</p>",
        "id": 248752191,
        "sender_full_name": "James Carlson",
        "timestamp": 1628397198
    },
    {
        "content": "<p>Oops, the caret should be at the beginning of line 5</p>",
        "id": 248752412,
        "sender_full_name": "James Carlson",
        "timestamp": 1628397617
    },
    {
        "content": "<p>can you file an issue for it? that's a confusing error message!</p>",
        "id": 248752540,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1628397909
    },
    {
        "content": "<p>the problem is that functions are always defined using lambdas in Roc - should be <code>test1 = \\n -&gt; ...</code></p>",
        "id": 248752546,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1628397923
    },
    {
        "content": "<p>Ah ok, i forgot that.  Will file</p>",
        "id": 248752653,
        "sender_full_name": "James Carlson",
        "timestamp": 1628398150
    },
    {
        "content": "<p>ok, I fixed the sidebar bug on <a href=\"https://www.roc-lang.org/builtins/Str\">https://www.roc-lang.org/builtins/Str</a> - you have to refresh the page to get it instead of the cached version, because I haven't set up hashed assets on Netlify yet <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 248752705,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1628398219
    },
    {
        "content": "<p>Very nice! Here is another one.  First, we have</p>\n<div class=\"codehilite\"><pre><span></span><code># MiniParsec.roc\ninterface MiniParsec exposes [ result, test1, idNat] imports []\n\nresult : a -&gt; (b -&gt; List [ Pair a b ]*)\nresult = \\v -&gt; (\\inp -&gt; [Pair v inp])\n\ntest1 : Nat -&gt; Nat\ntest1 = \\n -&gt; (result &quot;a&quot;) n  |&gt; List.len\n\nidNat : Nat -&gt; Nat\nidNat = \\n -&gt; n\n</code></pre></div>\n<p>Then this:</p>\n<div class=\"codehilite\"><pre><span></span><code># ParseApp.roc\napp &quot;parseap&quot;\n    packages { base: &quot;platform&quot; }\n    imports [base.Task, MiniParsec]\n    provides [ main ] to base\n\nmain : Task.Task {} []\nmain =\n    Task.after Task.getInt \\n -&gt;\n        MiniParsec.idNat n\n            |&gt; Str.fromInt\n            |&gt; Task.putLine\n</code></pre></div>\n<p>But the below hangs after entering an integer (5):</p>\n<div class=\"codehilite\"><pre><span></span><code>➜  roc git:(trunk) ✗ cargo run run jim/ParseApp.roc\n    Finished dev [unoptimized + debuginfo] target(s) in 0.77s\n     Running `target/debug/roc run jim/ParseApp.roc`\n5\n</code></pre></div>",
        "id": 248753132,
        "sender_full_name": "James Carlson",
        "timestamp": 1628399051
    },
    {
        "content": "<p>I'll take a look</p>",
        "id": 248767221,
        "sender_full_name": "Anton",
        "timestamp": 1628424229
    },
    {
        "content": "<p>the compiler hanging is odd. Usually it just panics, I think it hanging could only be an infinite loop ?!</p>",
        "id": 248767446,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1628424481
    },
    {
        "content": "<p>well, really your program here is running forever</p>",
        "id": 248767485,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1628424493
    },
    {
        "content": "<p>which, if it's a compiler problem would usually segfault</p>",
        "id": 248767492,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1628424504
    },
    {
        "content": "<p>got it. <code>getInt</code> returns a <code>I64</code>, but then you try to use it as an <code>Int</code></p>",
        "id": 248767802,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1628425018
    },
    {
        "content": "<p>normally, that should give a good error message, but in this case I guess you built the compiler with <code>--release</code> (turning off debug messages) and the application hits a panic at a later stage because the input is illtyped and therefore malformed</p>",
        "id": 248767818,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1628425060
    },
    {
        "content": "<p>I just got it too :)</p>",
        "id": 248767831,
        "sender_full_name": "Anton",
        "timestamp": 1628425078
    },
    {
        "content": "<p>using <code>        idNat (Num.intCast n)</code> allows you to cast any integer type to another</p>",
        "id": 248767872,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1628425088
    },
    {
        "content": "<p>OK, on my end, I will clean up my bad types</p>",
        "id": 248771871,
        "sender_full_name": "James Carlson",
        "timestamp": 1628430818
    },
    {
        "content": "<p>Hmm .. I am getting the same behavior with </p>\n<div class=\"codehilite\"><pre><span></span><code>idI64 : I64 -&gt; I64\nidI64 = \\n -&gt; n\n</code></pre></div>",
        "id": 248772397,
        "sender_full_name": "James Carlson",
        "timestamp": 1628431540
    },
    {
        "content": "<p>Hmmm, do you have something different than I?</p>\n<div class=\"codehilite\"><pre><span></span><code>interface MiniParsec exposes [ result, test1, idI64] imports []\n\nresult : a -&gt; (b -&gt; List [ Pair a b ]*)\nresult = \\v -&gt; (\\inp -&gt; [Pair v inp])\n\ntest1 : Nat -&gt; Nat\ntest1 = \\n -&gt; (result &quot;a&quot;) n  |&gt; List.len\n\nidI64 : I64 -&gt; I64\nidI64 = \\n -&gt; n\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>app &quot;parseap&quot;\n    packages { base: &quot;platform&quot; }\n    imports [base.Task, MiniParsec]\n    provides [ main ] to base\n\nmain : Task.Task {} []\nmain =\n    Task.after Task.getInt \\n -&gt;\n        MiniParsec.idI64 n\n            |&gt; Str.fromInt\n            |&gt; Task.putLine\n</code></pre></div>",
        "id": 248773410,
        "sender_full_name": "Anton",
        "timestamp": 1628433073
    },
    {
        "content": "<p>This is working for me</p>",
        "id": 248773416,
        "sender_full_name": "Anton",
        "timestamp": 1628433084
    },
    {
        "content": "<p>We seem to have identical files (after insertion of whitespace).  I verified with <code>diff</code>.  However, it may be that I had not run <code>git pull</code>.  Now I'm not sure which command to run (after the git pull):</p>\n<div class=\"codehilite\"><pre><span></span><code>➜  roc git:(trunk) ✗ cargo run run jim/ParseApp.roc\n    Finished dev [unoptimized + debuginfo] target(s) in 0.28s\n     Running `target/debug/roc run jim/ParseApp.roc`\n`roc run` is deprecated! (You no longer need the `run` - just do `roc [FILE]` instead of `roc run [FILE]` like before.\n\n➜  roc git:(trunk) ✗ roc jim/ParseApp.roc\nzsh: command not found: roc\n\n➜  roc git:(trunk) ✗ cargo roc jim/ParseApp.roc\nerror: no such subcommand: `roc`\n\n    Did you mean `doc`?\n\n➜  roc git:(trunk) ✗ cargo run roc jim/ParseApp.roc\n    Finished dev [unoptimized + debuginfo] target(s) in 0.25s\n     Running `target/debug/roc roc jim/ParseApp.roc`\nFile not found: roc\n</code></pre></div>\n<p>Hmmmm ....</p>",
        "id": 248776475,
        "sender_full_name": "James Carlson",
        "timestamp": 1628437581
    },
    {
        "content": "<p>With cargo it's <code>cargo run jim/ParseApp.roc</code> now</p>",
        "id": 248776589,
        "sender_full_name": "Anton",
        "timestamp": 1628437796
    },
    {
        "content": "<p>I'll improve the suggestion in the deprecation message</p>",
        "id": 248776642,
        "sender_full_name": "Anton",
        "timestamp": 1628437857
    },
    {
        "content": "<p>The suggestion refers to roc as in <code>target/debug/roc</code></p>",
        "id": 248776699,
        "sender_full_name": "Anton",
        "timestamp": 1628437927
    },
    {
        "content": "<p>It's really helpful to have you trying out all this stuff <span class=\"user-mention\" data-user-id=\"430829\">@James Carlson</span>  :)</p>",
        "id": 248776797,
        "sender_full_name": "Anton",
        "timestamp": 1628438107
    },
    {
        "content": "<p>I am well-known for my ability to commit errors , blunders, oversights, and mess-ups of all kinds <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 248776850,
        "sender_full_name": "James Carlson",
        "timestamp": 1628438180
    },
    {
        "content": "<p>Hmm .. really strange.  I copied Anton's code verbatim, have done git pull, and  <code>cargo run jim/ParseApp.roc</code> still \"hangs\" when I enter \"5&lt;RETURN&gt;\"</p>",
        "id": 248777328,
        "sender_full_name": "James Carlson",
        "timestamp": 1628438889
    },
    {
        "content": "<p>Can you tell me what platform you are using? I put the two files in <code>examples/benchmarks</code> so  I'm using <code>examples/benchmarks/platform</code></p>",
        "id": 248777395,
        "sender_full_name": "Anton",
        "timestamp": 1628439046
    },
    {
        "content": "<p>maybe he isn’t using a platform and that’s why stuff is acting up?</p>",
        "id": 248778100,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1628440264
    },
    {
        "content": "<p>I think that would result in some kind of file error tho so maybe not</p>",
        "id": 248778109,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1628440293
    },
    {
        "content": "<p>Yep I just tried it. That's what happens when there is no platform. I'll make an issue for a better error.</p>",
        "id": 248780707,
        "sender_full_name": "Anton",
        "timestamp": 1628444553
    },
    {
        "content": "<p>#1552</p>",
        "id": 248780951,
        "sender_full_name": "Anton",
        "timestamp": 1628444958
    },
    {
        "content": "<p>I moved <code>jim/</code> into <code>./examples/benchmarks</code>.  However, I get the same error:</p>\n<div class=\"codehilite\"><pre><span></span><code>➜  benchmarks git:(trunk) ✗ cargo run jim/ParseApp.roc\n    Finished dev [unoptimized + debuginfo] target(s) in 0.68s\n     Running `/Users/jxxcarlson/dev/roc/roc/target/debug/roc jim/ParseApp.roc`\n9\n^C\n</code></pre></div>\n<p>I've pushed a new branch <code>jim</code> with my code.</p>",
        "id": 248782937,
        "sender_full_name": "James Carlson",
        "timestamp": 1628447911
    },
    {
        "content": "<p>hmm, I don't see a <code>jim</code> folder when I check out that branch, or a <code>ParseApp.roc</code> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> - maybe something didn't get pushed?</p>",
        "id": 248784106,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1628449507
    },
    {
        "content": "<p>but here are the critical ingredients:</p>\n<ol>\n<li>You're running the <code>cargo run</code> command from the root <code>roc/</code> directory (with the main <code>rtfeldman/roc</code> README file in it)</li>\n<li>The <code>cargo run</code> command is being passed the path to your <code>.roc</code> application file, relative to the current directory - so for example if you're running <code>cargo</code> from <code>~/roc/</code> and the <code>.roc</code> file you want to run is in <code>~/roc/examples/ParseApp.roc</code> then you'd run that with <code>cargo run examples/ParseApp.roc</code></li>\n<li>Your <code>ParseApp.roc</code> has a  <code>platform/</code> folder in the same directory as it (for example, in <code>examples/hello-world/</code> there's  <code>examples/hello-world/Hello.roc</code> and also <code>examples/hello-world/platform/</code>)</li>\n</ol>",
        "id": 248784282,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1628449733
    },
    {
        "content": "<p>so for the command <code>cargo run jim/ParseApp.roc</code> to work, you'd need to be able to run <code>ls jim/ParseApp.roc</code> and have that succeed, and also <code>ls jim/platform/</code> and have that succeed too</p>",
        "id": 248784355,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1628449844
    },
    {
        "content": "<p>if either of those <code>ls</code> commands fails, then something is amiss!</p>",
        "id": 248784363,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1628449860
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span>  — All is good!  I moved the contents of <code>examples/benchmarks/jim</code> into <code>examples/benchmarks/</code> and ran this:</p>\n<div class=\"codehilite\"><pre><span></span><code>➜  roc git:(jim) ✗ cargo run examples/benchmarks/ParseApp.roc\n    Finished dev [unoptimized + debuginfo] target(s) in 0.25s\n     Running `target/debug/roc examples/benchmarks/ParseApp.roc`\n8\n8\nruntime: 466.063ms\n➜  roc git:(jim) ✗\n</code></pre></div>\n<p>This was of course a dry run for doing real work. <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></p>",
        "id": 248790565,
        "sender_full_name": "James Carlson",
        "timestamp": 1628459386
    },
    {
        "content": "<p>Yes, I forgot to commit some files.  I had misgivings about putting stuff in <code>examples/benchmarks</code>, but then I realized that no one can see them in the working branch. ((Hurrah!))</p>",
        "id": 248790640,
        "sender_full_name": "James Carlson",
        "timestamp": 1628459494
    },
    {
        "content": "<p>FWIW, I pushed <code>jim</code></p>",
        "id": 248790685,
        "sender_full_name": "James Carlson",
        "timestamp": 1628459527
    },
    {
        "content": "<p>awesome, glad we got it resolved! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 248791041,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1628460077
    },
    {
        "content": "<p>also, this experience report helped identify several improvements to make, so thank you so much for your patience! <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 248791063,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1628460123
    },
    {
        "content": "<p>I love the bleeding edge, LOL!  </p>\n<p>Question: is there some kind of <code>Task.getLine</code> to pair with <code>Task.putline</code>?</p>",
        "id": 248791845,
        "sender_full_name": "James Carlson",
        "timestamp": 1628461239
    },
    {
        "content": "<p>depends on the platform. I think you're using the one in benchmarks<br>\n<a href=\"https://github.com/rtfeldman/roc/blob/trunk/examples/benchmarks/platform/Task.roc\">https://github.com/rtfeldman/roc/blob/trunk/examples/benchmarks/platform/Task.roc</a></p>\n<p>and I don't see a getLine in that one. There seems to be a getInt tho</p>",
        "id": 248792108,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1628461625
    },
    {
        "content": "<p>Never mind, all good and getting better!</p>",
        "id": 248793706,
        "sender_full_name": "James Carlson",
        "timestamp": 1628464388
    },
    {
        "content": "<p>Nice</p>",
        "id": 248798548,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1628472773
    },
    {
        "content": "<p>Hmm ... What does this mean?</p>\n<div class=\"codehilite\"><pre><span></span><code>➜  roc git:(dev) ✗ vr parser\n    Finished dev [unoptimized + debuginfo] target(s) in 0.68s\n     Running `target/debug/roc examples/benchmarks/ParseApp.roc`\nthread &#39;main&#39; panicked at &#39;There were still outstanding Arc references to module_ids&#39;, /Users/jxxcarlson/dev/roc/roc/compiler/load/src/file.rs:1576:33\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\nerror: Failed at the parser script\n</code></pre></div>\n<p>Here <code>vr parser == cargo run examples/benchmarks/ParseApp.roc</code> where <code>vr  == velociraptor</code></p>",
        "id": 248815589,
        "sender_full_name": "James Carlson",
        "timestamp": 1628495850
    },
    {
        "content": "<p>What's velociraptor?</p>",
        "id": 248816742,
        "sender_full_name": "Anton",
        "timestamp": 1628496814
    },
    {
        "content": "<p>Velociraptor is a script runner very lean and clean: <a href=\"https://dev.to/umbo/velociraptor-an-npm-style-script-runner-for-deno-26a\">https://dev.to/umbo/velociraptor-an-npm-style-script-runner-for-deno-26a</a></p>",
        "id": 248867123,
        "sender_full_name": "James Carlson",
        "timestamp": 1628524522
    },
    {
        "content": "<p>It behaves the same without velociraptor right?</p>",
        "id": 248873444,
        "sender_full_name": "Anton",
        "timestamp": 1628527104
    },
    {
        "content": "<p>Can you push it to the Jim branch?</p>",
        "id": 248873763,
        "sender_full_name": "Anton",
        "timestamp": 1628527260
    },
    {
        "content": "<p>Yes, the same .  Just pushed the script.  I really like velociraptor.  No bloat.</p>",
        "id": 248889060,
        "sender_full_name": "James Carlson",
        "timestamp": 1628534168
    },
    {
        "content": "<p>Is there an analogue of Elm's </p>\n<div class=\"codehilite\"><pre><span></span><code>List.concat : List (List a) -&gt; List a\n</code></pre></div>\n<p>??</p>",
        "id": 248906607,
        "sender_full_name": "James Carlson",
        "timestamp": 1628542443
    },
    {
        "content": "<p>Ah: <code>List.join</code> !! Figures!</p>",
        "id": 248906843,
        "sender_full_name": "James Carlson",
        "timestamp": 1628542589
    },
    {
        "content": "<p>I've made progress with <code>MiniParsec.roc</code> in the <code>jim</code> branch: the primitive parsers <code>zero</code> (always fails), <code>result</code> (always succeeds, consumes no input), and <code>item</code>: consumes one character and otherwise fails.  Also, possibly correct <code>Parser.map</code> and <code>Parser.andThen</code> where <code>Parser  = MiniParsec</code>.  Pretty much trying to follow the paper by Hughes &amp; Meijer.</p>\n<p>What would speed things up enormously  is the ability to import interfaces into the repl to experiment with them.  Not sure if this is easy, medium, or hard, but it will be great when it gets there.</p>\n<p>I'll probably give the primitive parsers better names and rename the parser interface to something less pretentious.</p>\n<p>As part of this, I wrote the beginnings of an interface <code>Pair.roc</code> with functions <code>first</code> and <code>second</code>, like Elm's <code>Tuple</code> stuff, and also some mapping functions:</p>\n<div class=\"codehilite\"><pre><span></span><code>first : [Pair a b] -&gt; a\nfirst = \\(Pair a _) -&gt; a\n\nsecond : [Pair a b] -&gt; b\nsecond = \\(Pair _ b) -&gt; b\n\n\nmapFirst : [Pair a x], (a -&gt; b) -&gt; [Pair b x]\nmapFirst =\n  \\(Pair a b), f -&gt; (Pair (f a) b)\n\nmapSecond : [Pair a x], (x -&gt; y) -&gt; [Pair a y]\nmapSecond =\n  \\(Pair a b), f -&gt; (Pair a (f b))\n</code></pre></div>\n<p>Overall, quite  a pleasant coding experience  after the first painful day.  Thanks all!!!</p>",
        "id": 248907990,
        "sender_full_name": "James Carlson",
        "timestamp": 1628543132
    },
    {
        "content": "<p>Perhaps a <code>Pair</code> library already exists?</p>",
        "id": 248908085,
        "sender_full_name": "James Carlson",
        "timestamp": 1628543166
    },
    {
        "content": "<p>I can work on adding imports to the repl this weekend!</p>",
        "id": 248922319,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1628551754
    },
    {
        "content": "<p>I'd say it's a medium-sized project <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 248922437,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1628551844
    },
    {
        "content": "<blockquote>\n<p>Perhaps a <code>Pair</code> library already exists?</p>\n</blockquote>\n<p>No, I don't think so.</p>",
        "id": 248949979,
        "sender_full_name": "Anton",
        "timestamp": 1628582004
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>cargo run examples/benchmarks/ParseApp.roc\n</code></pre></div>\n<p>Is working for me on the latest Jim branch.<br>\nI'm wondering if it could be the rust version, can you send over the output of <code>rustup show</code> <span class=\"user-mention\" data-user-id=\"430829\">@James Carlson</span> ?<br>\nCan you also check if <code>cargo test</code> (from the root of the repo) runs without failures?</p>",
        "id": 248951857,
        "sender_full_name": "Anton",
        "timestamp": 1628583568
    },
    {
        "content": "<p>Everything good with <code>cargo test</code>, with the excption of. <code>test cli_run::rbtree_insert ... FAILED</code></p>",
        "id": 248975425,
        "sender_full_name": "James Carlson",
        "timestamp": 1628600526
    },
    {
        "content": "<p>Everything is working for me now.  One thing that had stumped for a while is a mysterious error message that occurs when there is a missing comma in the import list.  I will file an issue.</p>",
        "id": 248975583,
        "sender_full_name": "James Carlson",
        "timestamp": 1628600621
    },
    {
        "content": "<p>Is there a roc testing library?</p>",
        "id": 248975655,
        "sender_full_name": "James Carlson",
        "timestamp": 1628600650
    },
    {
        "content": "<p>Is there a block comment in roc?</p>",
        "id": 248976911,
        "sender_full_name": "James Carlson",
        "timestamp": 1628601298
    },
    {
        "content": "<p>no and no. That rbtree issue should go away on a second try. We have some race condition in the tests when a file is not present (i.e. on first run)</p>",
        "id": 248977569,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1628601622
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"361169\">@Anton</span>  or <span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> , if you have a moment, could you look at commit <code>8997bf8be</code> in the <code>jim</code> branch regarding the definition of <code>andThen</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>andThen : Parser a, (a -&gt; Parser b) -&gt; Parser b\nandThen = \\p, q -&gt;\n            \\input -&gt; p input |&gt; List.map (\\(Pair a input2) -&gt; (q a) input2) |&gt; List.join\n</code></pre></div>\n<p>You can run a test on it with <code>cargo run examples/benchmarks/ParseApp.roc</code>.  Here is the test:</p>\n<div class=\"codehilite\"><pre><span></span><code>app &quot;parseapp&quot;\n    packages { base: &quot;platform&quot; }\n    imports [base.Task, Parser]\n    provides [ main ] to base\n\nmain : Task.Task {} []\nmain =\n    # TEST Parser.andThen\n    Parser.runToString Parser.showU8 &quot;abcd&quot; (  Parser.andThen (Parser.satisfy (\\u -&gt; u == 97)) (\\u2 -&gt; Parser.satisfy (\\u3 -&gt; u3 == u2))  )\n       |&gt; Task.putLine\n</code></pre></div>\n<p>I am not feeding the second parser <code>q a</code> properly.  If I replace <code>(\\u3 -&gt; u3 == u2)</code> with <code>(\\u3 -&gt; u3 == 98)</code>, I get the  expected output, but that of course is not the point.</p>",
        "id": 248985683,
        "sender_full_name": "James Carlson",
        "timestamp": 1628605295
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 248985806,
        "sender_full_name": "James Carlson",
        "timestamp": 1628605333
    },
    {
        "content": "<p>what is the problem you observe?</p>",
        "id": 248985845,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1628605356
    },
    {
        "content": "<p>I get an error message <code>Parse error (runToString)</code> from the function <code>runToString</code>.</p>",
        "id": 248985955,
        "sender_full_name": "James Carlson",
        "timestamp": 1628605416
    },
    {
        "content": "<p>Because I get the expected output with the subsitution <code>(\\u3 -&gt; u3 == 98)</code> for <code>(\\u3 -&gt; u3 == u2)</code>, I know that the problem is in how the second parser in <code>andThen</code> is being fed its info (or handling that info)</p>",
        "id": 248986199,
        "sender_full_name": "James Carlson",
        "timestamp": 1628605505
    },
    {
        "content": "<p>Here is the <code>run</code> code:</p>\n<div class=\"codehilite\"><pre><span></span><code>run : Str, Parser a -&gt; Result a [ListWasEmpty]\nrun =\n  \\str, parser -&gt; parser (Str.toUtf8 str) |&gt; List.map Pair.first  |&gt; List.first\n\nrunToString : (a -&gt; Str), Str, Parser a -&gt; Str\nrunToString =\n  \\toString, str, parser -&gt;\n    when run str parser is\n      Ok a -&gt; toString a\n      _ -&gt; &quot;Parse error (runToString)&quot;\n</code></pre></div>\n<p>Pretty sure the problem is not there.</p>",
        "id": 248986438,
        "sender_full_name": "James Carlson",
        "timestamp": 1628605589
    },
    {
        "content": "<p>but <code>u3 == u2</code> should fail right? b != c</p>",
        "id": 248986467,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1628605604
    },
    {
        "content": "<p>Well,  I can't disagree!  I think I see what the problem is.  Thanks!</p>",
        "id": 248987015,
        "sender_full_name": "James Carlson",
        "timestamp": 1628605819
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span>  My test was incorrect.  The below works:</p>\n<div class=\"codehilite\"><pre><span></span><code># TEST Parser.andThen\n# Recognize strings beginning with &quot;aa&quot;\n    Parser.runToString Parser.showU8 &quot;aaxyz&quot; (  Parser.andThen (Parser.satisfy (\\u -&gt; u == 97)) (\\u2 -&gt; Parser.satisfy (\\u3 -&gt; u3 == u2))  )\n</code></pre></div>",
        "id": 248988235,
        "sender_full_name": "James Carlson",
        "timestamp": 1628606359
    },
    {
        "content": "<p>nice</p>",
        "id": 248988284,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1628606385
    },
    {
        "content": "<p>Hmmm ... Error on <code>git push</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>➜  roc git:(jim) git push\nEnumerating objects: 15, done.\nCounting objects: 100% (15/15), done.\nDelta compression using up to 16 threads\nCompressing objects: 100% (11/11), done.\nWriting objects: 100% (11/11), 1.38 KiB | 1.38 MiB/s, done.\nTotal 11 (delta 7), reused 0 (delta 0)\nremote: Resolving deltas: 100% (7/7), completed with 4 local objects.\nremote: fatal error in commit_refs\nTo github.com:rtfeldman/roc.git\n ! [remote rejected]     jim -&gt; jim (failure)\nerror: failed to push some refs to &#39;git@github.com:rtfeldman/roc.git&#39;\n</code></pre></div>",
        "id": 248994036,
        "sender_full_name": "James Carlson",
        "timestamp": 1628609173
    },
    {
        "content": "<p><a href=\"https://stackoverflow.com/a/37342002/4200103\">This</a> might help</p>",
        "id": 248994443,
        "sender_full_name": "Anton",
        "timestamp": 1628609392
    },
    {
        "content": "<p>Hmm ... never used <code>git gc</code> or <code>git fsck</code> before. Unfortunately, the error persists.  Just checked: the compiler repo is online</p>",
        "id": 248996224,
        "sender_full_name": "James Carlson",
        "timestamp": 1628610203
    },
    {
        "content": "<p>Kind of a hack, but maybe create a new branch based on trunk and copy over your files.<br>\nI've never encountered this error either.</p>",
        "id": 248998055,
        "sender_full_name": "Anton",
        "timestamp": 1628611039
    },
    {
        "content": "<p>I'm encountering it too; maybe GitHub is down?</p>",
        "id": 248998194,
        "sender_full_name": "Joshua Hoeflich",
        "timestamp": 1628611088
    },
    {
        "content": "<p><a href=\"https://www.githubstatus.com/\">https://www.githubstatus.com/</a></p>",
        "id": 248998216,
        "sender_full_name": "Joshua Hoeflich",
        "timestamp": 1628611100
    },
    {
        "content": "<p>Uhu, looks like it.</p>",
        "id": 248998604,
        "sender_full_name": "Anton",
        "timestamp": 1628611267
    },
    {
        "content": "<p>I'll wait a while and see what happens.  When I do<code>git fsck</code>, I get this:</p>\n<div class=\"codehilite\"><pre><span></span><code>➜  roc git:(jim) git fsck\nChecking object directories: 100% (256/256), done.\nChecking objects: 100% (71877/71877), done.\ndangling commit 19b2d41cd70df2f24b1b91aeb387a359130100ba\ndangling tree bce4c448a8cea397f51573f8951e2096a47d3a9d\ndangling commit b617a55998ea6c81c52b3f1e5ac3a96ab4c3c985\ndangling commit 32c9f99ee8cc7090481fd4edf45a63cf2f31a555\ndangling tree b5d7b19d0dc3e36e51a7786e004ab52582ab7bfb\ndangling tree 4577eab778e36ff32f767c843a4c0354bb1977b3\ndangling tree 379fa66772dc46659b618374a98e3c2ee05ad2f7\ndangling commit 68ceda8f3ab08c8e751c283ebbdcb87bde931403\ndangling commit b5d84e7ca957d950322508b184ca020760fced15\ndangling blob e62c9f7e5dc3baa8a285536ddb10d302b612b7e8\n</code></pre></div>",
        "id": 248999581,
        "sender_full_name": "James Carlson",
        "timestamp": 1628611783
    },
    {
        "content": "<p>I have the type definition <code>Step state a : [ Loop state, Done a ]</code> and <code>Counter : { counter : I64, value : I64 }</code>  The function<code>loop : (state -&gt; Step state a), state -&gt; a</code>is used with <code>updateCounter : Counter -&gt; Step Counter I64</code>  as the first argument  and with a <code>Counter</code> value as the second.</p>\n<p>Later I say this:</p>\n<div class=\"codehilite\"><pre><span></span><code>test3 : Str\ntest3 =\n  out = loop updateCounter { counter : 4, value : 0}\n  if out == Done 10 then &quot;Ok&quot; else &quot;Fail&quot;\n</code></pre></div>\n<p>But calling <code>test3</code> gives a type error:</p>\n<div class=\"codehilite\"><pre><span></span><code>41│    if out == Done 10 then &quot;Ok&quot; else &quot;Fail&quot;\n                 ^^^^^^^\n\nThis Done global tag application has the type:\n\n    [ Done (Num a) ]b\n\nBut isEq needs the 2nd argument to be:\n\n    I64\n</code></pre></div>\n<p>Shouldn't the various <code>I64</code> declarations above make this not happen?</p>",
        "id": 249004633,
        "sender_full_name": "James Carlson",
        "timestamp": 1628614090
    },
    {
        "content": "<p>Or is there some way to ensure that <code>Done 10</code> is <code>Done I64</code>?</p>",
        "id": 249004987,
        "sender_full_name": "James Carlson",
        "timestamp": 1628614252
    },
    {
        "content": "<p>Can you push it to the jim branch? github should be good again</p>",
        "id": 249005800,
        "sender_full_name": "Anton",
        "timestamp": 1628614598
    },
    {
        "content": "<p>Done!</p>",
        "id": 249005929,
        "sender_full_name": "James Carlson",
        "timestamp": 1628614663
    },
    {
        "content": "<p>My first thought is that <code>out</code> is a <code>I64</code>, not a <code>[ Done I64 ]b</code> which is why <code>isEq</code> would not work.</p>",
        "id": 249006065,
        "sender_full_name": "Anton",
        "timestamp": 1628614715
    },
    {
        "content": "<p>Ah yes indeed!!  let me verify that.</p>",
        "id": 249006188,
        "sender_full_name": "James Carlson",
        "timestamp": 1628614790
    },
    {
        "content": "<p>Works -- thanks!</p>",
        "id": 249006320,
        "sender_full_name": "James Carlson",
        "timestamp": 1628614824
    }
]