[
    {
        "content": "<p>Can any tell me why can't I pass an <code>Int Unsigned16</code> into a function which requires <code>Int *</code>?</p>\n<div class=\"codehilite\"><pre><span></span><code>This 2nd argument to addDays has an unexpected type:\n109â”‚          addDays { year: date.year + 1, month: 1, dayOfMonth: 1, dayOfYear: 0 } (newDayOfYear - daysInYear)\n                                                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis sub call produces:\n    Int Unsigned16\n\nBut addDays needs its 2nd argument to be:\n    Int *\n</code></pre></div>",
        "id": 434629276,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1713744518
    },
    {
        "content": "<p>Can you share the function <code>addDays</code> please?</p>",
        "id": 434629301,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713744555
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>addDays : Date, Int * -&gt; Date\naddDays = \\date, days -&gt;\n    daysInYear = if isLeapYear date.year then 366 else 365\n    newDayOfYear = date.dayOfYear + Num.toU16 days\n    if newDayOfYear &gt; daysInYear then\n        addDays { year: date.year + 1, month: 1, dayOfMonth: 1, dayOfYear: 0 } (newDayOfYear - daysInYear)\n    else\n        fromYd date.year newDayOfYear\n</code></pre></div>",
        "id": 434629312,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1713744579
    },
    {
        "content": "<p><code>Date : { year: I64, month: U8, dayOfMonth: U8, dayOfYear: U16 }</code></p>",
        "id": 434629317,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1713744594
    },
    {
        "content": "<p>Does it work if you change it to <code>a</code> instead of <code>*</code>?</p>",
        "id": 434629364,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713744604
    },
    {
        "content": "<p>Nope, no difference.</p>",
        "id": 434629386,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1713744660
    },
    {
        "content": "<p>I'm not sure I can help much... it seems strange to me</p>",
        "id": 434629402,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713744690
    },
    {
        "content": "<p><code>Int _</code> should work, but so should <code>Int *</code></p>",
        "id": 434629405,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713744692
    },
    {
        "content": "<p>Ahah! <code>Int _</code> does work!</p>",
        "id": 434629471,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1713744731
    },
    {
        "content": "<p>Maybe it's something to do with <code>Num.toU16</code>... what if you change that to <code>Num.intCast</code></p>",
        "id": 434629475,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713744737
    },
    {
        "content": "<p>But yeah, 99% sure that <code>Int *</code> should work. Good bug to file.</p>",
        "id": 434629485,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713744765
    },
    {
        "content": "<p>Changing to <code>intCast</code> does not fix, but yes, the <code>Int _</code> does work.</p>",
        "id": 434629517,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1713744826
    },
    {
        "content": "<p>I can definitely file a bug report for that</p>",
        "id": 434629583,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1713744870
    },
    {
        "content": "<p>Reproduction</p>\n<div class=\"codehilite\"><pre><span></span><code>interface Test\n    exposes []\n    imports []\n\nexpect add 1 == 1\n\nadd : Int * -&gt; _\nadd = \\in -&gt; add (Num.toU16 (in - 1))\n</code></pre></div>\n<p>edit even smaller</p>",
        "id": 434629710,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713745027
    },
    {
        "content": "<p>Awesome. Thanks for finding that minimum reproduction.</p>",
        "id": 434629809,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1713745151
    },
    {
        "content": "<p>Surprised I haven't run into that bug sooner... I've been using <code>Int *</code>s left and right</p>",
        "id": 434629917,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1713745251
    },
    {
        "content": "<p>this isn't a bug actually!</p>",
        "id": 434631035,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713746343
    },
    {
        "content": "<p>if you accept an <code>Int *</code> argument, that means you can pass any size int into the function and it will work</p>",
        "id": 434631051,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713746368
    },
    {
        "content": "<p>so let's say I pass <code>1i32</code> in, for example (because <code>Int *</code> says I'm allowed to do that)</p>",
        "id": 434631068,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713746384
    },
    {
        "content": "<p>now the body of the function is <code>1i32 + 1u16</code> which is a type mismatch</p>",
        "id": 434631076,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713746393
    },
    {
        "content": "<p>so I think a more helpful error message would say something like:</p>\n<blockquote>\n<p>This type annotation says the function can accept any <code>Int</code>, but the implementation only works with <code>U16</code>.</p>\n<p>If you used any integer other than <code>U16</code> here, the implementation would have a type mismatch, but<br>\nthe type annotation incorrectly says other integer types would work.</p>\n<p>Hint: Try changing <code>Int *</code> to <code>U16</code>, or changing the implementation to no longer use <code>U16</code> wherever it currently uses it.</p>\n</blockquote>",
        "id": 434631293,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713746551
    },
    {
        "content": "<p>I don't think this is the same <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> </p>\n<p>This is <code>U16 + (Num.toU16 (Int *))</code></p>",
        "id": 434632903,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713748040
    },
    {
        "content": "<p>So should always type check, right?</p>",
        "id": 434632910,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713748050
    },
    {
        "content": "<p>Cause no matter the input int type, you convert it to <code>U16</code></p>",
        "id": 434632968,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713748087
    },
    {
        "content": "<p>As long as the function can specialize multiple times for different <code>Int *</code>, it should be totally fine.</p>",
        "id": 434632991,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713748115
    },
    {
        "content": "<p>sorry, the original one looks like it should work (so there's a bug there) but I wouldn't expect the minimal repro to work (although it's been edited since my previous response)</p>",
        "id": 434636687,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713751426
    },
    {
        "content": "<p>I totally understand why this looks like it should work:</p>\n<div class=\"codehilite\"><pre><span></span><code>add : Int * -&gt; _\nadd = \\in -&gt; add (Num.toU16 (in - 1))\n</code></pre></div>\n<p>because in the mental model of \"<code>Int *</code> means it accepts any integer\" it should totally work</p>",
        "id": 434636769,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713751474
    },
    {
        "content": "<p>however, that's not <em>quite</em> what <code>Int *</code> means</p>",
        "id": 434636799,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713751502
    },
    {
        "content": "<p>it's very close to what it means, but not quite</p>",
        "id": 434636806,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713751511
    },
    {
        "content": "<p>and I think the fact that it's recursively calling itself with a narrower type than <code>Int *</code> (namely <code>U16</code>) would be an error in a perfect implementation of Roc's type system</p>",
        "id": 434636829,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713751548
    },
    {
        "content": "<p>but <span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> would know better (and probably be able to explain better) than I would - I might be wrong about that!</p>",
        "id": 434637109,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713751771
    },
    {
        "content": "<p>yeah, the reason</p>\n<div class=\"codehilite\"><pre><span></span><code>add : Int * -&gt; _\nadd = \\in -&gt; add (Num.toU16 (in - 1))\n</code></pre></div>\n<p>doesn't work is that it demand polymorphic recursion - regardless of what you pass in for the first <code>add</code>, the recursive call to <code>add</code> must be <code>U16</code>. And Roc does not support polymorphic recursion. That is, a recursive call must be as generic as the initial call, so in this case the recursive call to <code>add</code> must be made with the same type as <code>in</code>.</p>",
        "id": 434639120,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1713753192
    },
    {
        "content": "<p>This was my intuition for the issue and why I wrote the repro that way. Is it the same issue as the original report?</p>",
        "id": 434639620,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713753561
    },
    {
        "content": "<p>The original is also passing a <code>U16</code> as the second argument to <code>addDays</code></p>",
        "id": 434639715,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713753624
    },
    {
        "content": "<p>yes, I think so</p>",
        "id": 434640079,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1713753911
    },
    {
        "content": "<p>ahh I missed the recursion in the original because it's further down than where the conversion to <code>U16</code> happens - makes sense now!</p>",
        "id": 434644011,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713757095
    },
    {
        "content": "<p>Thanks for taking a look at this, all. Good to know its just PEBCAK! <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n<p>I want my API to be flexible on argument types, so I rewrote with a helper method to get out of the polymorphic recursion issue.</p>",
        "id": 434756908,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1713794209
    },
    {
        "content": "<p>this definitely seems like an opportunity for more helpful error messaging though!</p>",
        "id": 434773806,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713798145
    },
    {
        "content": "<p>Why don't we have polymorphic recursion here? Feels like after the first call it will settle into a base case</p>",
        "id": 434774646,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713798341
    },
    {
        "content": "<p>I feel like polymorphic recursion makes sense to support.</p>",
        "id": 434774724,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713798359
    },
    {
        "content": "<p>But maybe it leads to pains due to tail recursion</p>",
        "id": 434774830,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713798375
    },
    {
        "content": "<p>I'm not sure how feasible it is to support without a totally different type system - that's another <span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> question <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 434787986,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713801583
    },
    {
        "content": "<p>yeah polymorphic recursion is not a good idea</p>",
        "id": 434791329,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1713802431
    },
    {
        "content": "<p>I don't think the use cases are really there and it makes a ton of code generation really hard</p>",
        "id": 434791404,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1713802444
    },
    {
        "content": "<p>it also requires a certain expansion to the type system</p>",
        "id": 434791649,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1713802525
    },
    {
        "content": "<p>Side question: could the initial function be made to work by adding a <code>Num.intCast</code> to go from <code>U16</code> back to the original <code>Int *</code> type?</p>",
        "id": 434805367,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713806535
    },
    {
        "content": "<p>I think yes</p>",
        "id": 434884751,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1713837984
    },
    {
        "content": "<p>Tested and confirmed, intCast will allow the original recursive form.</p>",
        "id": 435440594,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1714067896
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"518883\">Ian McLerran</span> has marked this topic as resolved.</p>",
        "id": 435440601,
        "sender_full_name": "Notification Bot",
        "timestamp": 1714067899
    },
    {
        "content": "<p>I wonder if we can capture this somehow? Maybe an advanced section in Tutorial on recursion?</p>",
        "id": 435465388,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714078094
    }
]