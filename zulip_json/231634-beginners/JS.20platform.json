[
    {
        "content": "<p>Hey folks!</p>\n<p>Would it be possible, in theory, for Roc to be compiled to JS through a platform?</p>\n<p>I can imagine that platforms can only access their API's, right? So the compiled Roc itself would still be in another format (binary?) so a platform by itself would never be able to do it?</p>\n<p>I'm 100% sure this has been asked before but I couldn't find it... thanks! <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 284233077,
        "sender_full_name": "Georges Boris",
        "timestamp": 1653749751
    },
    {
        "content": "<p>Interesting question! Are you aware that we already compile to WebAssembly? That's a much more practical target for Roc, since a lot of the compiler is focused on things that make sense for binary output formats that operate on bytes in memory.<br>\nIn JS it's a bit unnatural to express things like that... Although I suppose it must be possible using a <code>Uint8Array</code>. But you'd end up recreating a slower implementation of WebAssembly!</p>",
        "id": 284240477,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1653760262
    },
    {
        "content": "<p>In the <code>examples</code> folder in the repo, one of the examples displays the words \"hello world\" on a web page using WebAssembly.</p>",
        "id": 284240662,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1653760470
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"431893\">@Brian Carroll</span> ! thanks for the reply!</p>\n<p>I'm aware of WASM support but I was wondering how practical would be for other runtime representations - even if slower! currently WASM is slower in theory but since DOM manipulation still needs JS you end up slowing things down if you need a lot of interop, right? and you end up with larger bundles.</p>\n<p>I'm aware it has been stated before that Roc doesn't aim at replacing web languages like Elm but I wonder if that is a non-goal or if it's not even a possibility if someone tried to do it. Makes sense?</p>",
        "id": 284241355,
        "sender_full_name": "Georges Boris",
        "timestamp": 1653761401
    },
    {
        "content": "<p>Yes that's right, you need JS/Wasm interop stuff to manipulate the DOM. I built a C backend for the Elm compiler to target Wasm and that was the main issue with it.</p>\n<p>From that experience I concluded that if you try to convert complex Wasm structures to complex JS structures, it will be slow.</p>\n<p>I think it can be fast if you design the whole system around that Wasm/JS boundary and minimise the JS. All you really need in JS is a small number of DOM API functions and a <code>TextDecoder</code>.</p>\n<p>You don't want an overly general system that can convert any Wasm structure to any JS structure, like <code>wasm-bindgen</code> tries to do. That's always going to be slow. You want something that a virtual DOM and nothing else, and is excellent at that one thing.</p>",
        "id": 284241917,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1653762184
    },
    {
        "content": "<p>So to your actual question on whether it's possible... Well in theory you can translate any set of bytes to any other set of bytes. You could build a new Roc compiler!</p>",
        "id": 284241999,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1653762307
    },
    {
        "content": "<p>uhnn interesting! and with that in mind you can definitely make it a platform, right?</p>\n<p>sorry for the ignorance but is the wasm bundling size these days still a \"problem\"? or is it something that has been getting better over time?</p>",
        "id": 284242011,
        "sender_full_name": "Georges Boris",
        "timestamp": 1653762352
    },
    {
        "content": "<p>Could you fit it into the current one without major surgery everywhere in a reasonable amount of time and effort? I'm not sure, I'd have to think about it a bit more!</p>",
        "id": 284242014,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1653762356
    },
    {
        "content": "<p>I don't understand the connection with platforms, can you elaborate?</p>",
        "id": 284242060,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1653762394
    },
    {
        "content": "<p>What would the platform do?</p>",
        "id": 284242066,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1653762413
    },
    {
        "content": "<p>The compiler is the thing that translates Roc code to some other code format like x86 instructions or Wasm instructions or JS. The platform doesn't do that</p>",
        "id": 284242092,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1653762475
    },
    {
        "content": "<p>If you're used to Elm then think of the platform as \"the Elm runtime\".</p>",
        "id": 284242157,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1653762566
    },
    {
        "content": "<p>In fact the elm runtime has a Platform module that is very similar to what we call a platform in Roc.</p>",
        "id": 284242210,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1653762611
    },
    {
        "content": "<p>I'm just wondering about eventually using Roc fullstack for building the same things I currently use Elm for. I guess the platform could take a view abstraction and do whatever with it - but the  runtime itself would continue to be WASM, right? (using the current wasm compiler)</p>",
        "id": 284242215,
        "sender_full_name": "Georges Boris",
        "timestamp": 1653762634
    },
    {
        "content": "<p>for the bundle size to be more optimized (not use wasm) I would need to properly work on a compiler and not a platform afaik</p>",
        "id": 284242232,
        "sender_full_name": "Georges Boris",
        "timestamp": 1653762692
    },
    {
        "content": "<p>What gave you the idea that Wasm bundles are always larger than JS bundles?</p>",
        "id": 284242283,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1653762744
    },
    {
        "content": "<p>I don't see any reason for that, maybe I'm missing something</p>",
        "id": 284242315,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1653762824
    },
    {
        "content": "<p>yeah! this is my assumed ignorance - this is 100% based on criticisms I have been hearing over time but not based on actual experience. (elm bundle sizes begin at sub-20kb as an example)</p>",
        "id": 284242321,
        "sender_full_name": "Georges Boris",
        "timestamp": 1653762838
    },
    {
        "content": "<p>It would be hard to get solid evidence for that, you'd need to compare the same app in each target somehow.</p>",
        "id": 284242472,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1653763067
    },
    {
        "content": "<p>I might be able to find some numbers actually, but they're on a machine I can't access this week.</p>",
        "id": 284242521,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1653763085
    },
    {
        "content": "<p>You might be hearing about very inefficient Wasm implementations with lots of big dependencies that aren't really necessary. Because rust and c libraries normally run on desktop where bundle size is irrelevant.</p>",
        "id": 284242547,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1653763185
    },
    {
        "content": "<p>got it! but this is interesting - indeed there is nothing preventing wasm from anything. I had more blockers in mind for some reason.</p>",
        "id": 284242552,
        "sender_full_name": "Georges Boris",
        "timestamp": 1653763195
    },
    {
        "content": "<p>things completely unrelated like GHCJS might have been mixed in my mind for some reason.</p>",
        "id": 284242598,
        "sender_full_name": "Georges Boris",
        "timestamp": 1653763226
    },
    {
        "content": "<p>If we do a web platform for Roc it would be completely dedicated and optimized for this, with no dependencies</p>",
        "id": 284242603,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1653763258
    },
    {
        "content": "<p>Or very few</p>",
        "id": 284242609,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1653763267
    },
    {
        "content": "<p>I have fairly clear ideas on how I would do it</p>",
        "id": 284242672,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1653763362
    },
    {
        "content": "<p>and the roc runtime/compiled code wouldn't be large by itself by default, right?</p>",
        "id": 284242674,
        "sender_full_name": "Georges Boris",
        "timestamp": 1653763364
    },
    {
        "content": "<p>No I don't think so</p>",
        "id": 284242679,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1653763376
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"431893\">@Brian Carroll</span> awesome! got me excited to experiment :) thank you</p>",
        "id": 284243096,
        "sender_full_name": "Georges Boris",
        "timestamp": 1653764012
    },
    {
        "content": "<p>Great! I'm interested in this, so keep me informed and I'll be happy to chat about ideas if you like.</p>",
        "id": 284244221,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1653765482
    }
]