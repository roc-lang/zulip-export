[
    {
        "content": "<p>Does/will Roc support anything like haskell’s do or gleam’s use or ocaml’s let*, for example for nested calls to map? Or is there a different idiomatic approach for handling this in Roc? Thanks.</p>",
        "id": 491412331,
        "sender_full_name": "misterdrgn",
        "timestamp": 1735658105
    },
    {
        "content": "<p>We used to have this, it was called backpassing. But it was removed because it was one of the most complicated things to understand in Roc. I have not missed it so far :)</p>",
        "id": 491413516,
        "sender_full_name": "Anton",
        "timestamp": 1735658946
    },
    {
        "content": "<p>I'll see if I can make an example of your nested calls</p>",
        "id": 491413549,
        "sender_full_name": "Anton",
        "timestamp": 1735658980
    },
    {
        "content": "<p>Thanks. Another example would be Result.try, if you want to try several operations in a row, where each depends on the previous one succeeding.</p>",
        "id": 491414708,
        "sender_full_name": "misterdrgn",
        "timestamp": 1735659810
    },
    {
        "content": "<p>For that we have a <a href=\"https://www.roc-lang.org/tutorial#the-try-keyword\">try keyword</a>, as well as a <a href=\"https://www.roc-lang.org/tutorial#the-postfix-try-operator\"><code>?</code> operator</a>. I think we only plan on keeping one of those in the long term</p>",
        "id": 491414997,
        "sender_full_name": "Anton",
        "timestamp": 1735659997
    },
    {
        "content": "<p>Oh right! Apologies, that’s what I get for asking when I haven’t looked at the tutorial in a while. So there’s syntax for Result and I believe for Task, but there isn’t generalized syntax for apply the same idea to lists, sets, etc.</p>",
        "id": 491415536,
        "sender_full_name": "misterdrgn",
        "timestamp": 1735660339
    },
    {
        "content": "<p>Correct :)</p>",
        "id": 491415554,
        "sender_full_name": "Anton",
        "timestamp": 1735660357
    },
    {
        "content": "<p>The nested map calls would just be this, nothing special:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">app</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">main</span><span class=\"err\">!</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">pf</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">platform</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/roc-lang/basic-cli/releases/download/0.18.0/0APbwVN1_p1mJ96tXjaoiUCr8NBGamr8G8Ac_DrXR-o.tar.br\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">pf.Stdout</span>\n\n<span class=\"nv\">main</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">_args</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"nv\">y</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">200</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"nv\">z</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"nv\">z</span>\n<span class=\"w\">            </span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Inspect</span><span class=\"nf\">.</span><span class=\"nv\">toStr</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span>\n</code></pre></div>",
        "id": 491416060,
        "sender_full_name": "Anton",
        "timestamp": 1735660686
    },
    {
        "content": "<p>Yeah, understood, thanks.</p>",
        "id": 491417134,
        "sender_full_name": "misterdrgn",
        "timestamp": 1735661371
    }
]