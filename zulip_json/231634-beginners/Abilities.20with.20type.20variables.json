[
    {
        "content": "<p>Is it posible to make abilities with type variables?</p>\n<p>I was playing around with roc and wanted to make an <code>Iterator</code> (similar to the rust trait) to see how it would work. I tried the following but it doesn't parse:</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>Iterator item has\n    next : iter -&gt; Result (item, iter) | iter has Iterator\n</code></pre></div>\n<p>If I try it without the type variable, it does parse:</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>Iterator has\n    next : iter -&gt; Result (item, iter) | iter has Iterator\n</code></pre></div>\n<p>I'm not yet sure if the type variable is needed, so I will keep playing around. I am mainly checking if this is a bug, a planned unimplemented feature, or not planned at all</p>",
        "id": 372896816,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1688649934
    },
    {
        "content": "<p>It's not planned. The current design is that an ability can only specialize over the type the ability is implemented for, and no other type variable.</p>\n<p>You can however support unbound polymorphic variables in the member signatures, for example something like</p>\n<div class=\"codehilite\"><pre><span></span><code>WeirdId has\n  id : a, me -&gt; a | me has WeirdId\n</code></pre></div>\n<p>and an impl like</p>\n<div class=\"codehilite\"><pre><span></span><code>Foo := {} has [WeirdId.{id}]\nid = \\anything, @Foo {} -&gt; anything\n</code></pre></div>\n<p>is allowed</p>",
        "id": 372908532,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1688652015
    },
    {
        "content": "<p>I see, thanks for the answer.</p>\n<p>Is there a specific reason for this choice? Like performance, ease of implementation, ...</p>",
        "id": 372922754,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1688654337
    },
    {
        "content": "<p>The main one is the scope of abilities - we would like to reduce the scope of ad-hoc polymorphism as much as possible for now, until such a time as we see necessary demand for any larger scope. Our current hypothesis is that in practice the scope will not need to be larger than it is now (that is, no need for ad-hoc polymorphism over more than one type variable).<br>\nIt is a nice coincidence that the compiler performance is much better when you have only one type variable to resolve over, but that is secondary reason to the scope of the feature.</p>",
        "id": 372924097,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1688654577
    },
    {
        "content": "<p>Okay makes sense.<br>\nI was surprised to see the following work though</p>\n<div class=\"codehilite\"><pre><span></span><code>ability Iter has\n    next : iter -&gt; Result (iter, item) [IterDone] | iter has Iter\n\nMap iter a b := {\n    base : iter,\n    func : a -&gt; b,\n} has\n    [\n        Iter { next: nextMap },\n    ]\n\nnextMap : Map iter a b -&gt; Result (Map iter a b, b) [IterDone] | iter has Iter\nnextMap = \\@Map { base, func } -&gt;\n    when next base is\n        Ok (newBase, item) -&gt; Ok (@Map { base: newBase, func }, func item)\n        Err IterDone -&gt; Err IterDone\n\nmap : iter, (a -&gt; b) -&gt; Map iter a b | iter has Iter\nmap = \\iter, func -&gt; @Map {\n    base: iter,\n    func,\n}\n</code></pre></div>\n<p>I know this doesn't seem like idiomatic roc at all (as far as idiomatic roc exists), but it was a proof of concept. What I found surprising was that in the <code>nextMap</code> function we never have to specify that the iterator items are the same as the map's function input variable.</p>\n<p>Nowhere in the signature of map does it show this, yet it still works</p>",
        "id": 372926994,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1688655092
    },
    {
        "content": "<p>It works because <code>item</code> in the return type of the <code>next</code> member is unbound in the input arguments, and so can be instantiated to any type (in this case, the <code>a</code> of the Map constructor). But that also means that you could not implement <code>Iter</code> for a ground type (that is, one that does not contain a nested <code>iter | iter has Iter</code> value), without only returning the <code>Err</code> variant for <code>Iter#next</code>.</p>",
        "id": 372934772,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1688656425
    },
    {
        "content": "<p><code>Iter#next</code> is effectively asking for the equivalent of a function <code>iter -&gt; item</code>, where <code>item</code> has no relation to <code>iter</code>, and therefore must be able to be instantiated to any type. No such value exists.</p>",
        "id": 372935117,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1688656484
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"454654\">Ayaz Hafiz</span> <a href=\"#narrow/stream/231634-beginners/topic/Abilities.20with.20type.20variables/near/372934772\">said</a>:</p>\n<blockquote>\n<p>It works because <code>item</code> in the return type of the <code>next</code> member is unbound in the input arguments, and so can be instantiated to any type (in this case, the <code>a</code> of the Map constructor). But that also means that you could not implement <code>Iter</code> for a ground type (that is, one that does not contain a nested <code>iter | iter has Iter</code> value), without only returning the <code>Err</code> variant for <code>Iter#next</code>.</p>\n</blockquote>\n<p>What do you mean by ground type exactly? I have an iterator which iterates over lists:</p>\n<div class=\"codehilite\"><pre><span></span><code>ListIter a := {\n    list : List a,\n    index : Nat,\n}\n     has [\n         Iter { next: nextList },\n     ]\n\nnextList : ListIter item -&gt; Result (ListIter item, item) [IterDone]\nnextList = \\@ListIter { list, index } -&gt;\n    when List.get list index is\n        Ok item -&gt; Ok (@ListIter { list, index: index + 1 }, item)\n        Err OutOfBounds -&gt; Err IterDo\n</code></pre></div>\n<p>It does not contain a nested iter, yet still works</p>",
        "id": 372936064,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1688656663
    },
    {
        "content": "<p>could you share your whole program in a GitHub gist or something similar?</p>",
        "id": 372937094,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1688656848
    },
    {
        "content": "<p>maybe you have found a soundness hole <span aria-label=\"nerd\" class=\"emoji emoji-1f913\" role=\"img\" title=\"nerd\">:nerd:</span></p>",
        "id": 372937155,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1688656859
    },
    {
        "content": "<p><a href=\"https://gist.github.com/KilianVounckx/227dca42606a5eafc7f3fa6e2482b045\">https://gist.github.com/KilianVounckx/227dca42606a5eafc7f3fa6e2482b045</a></p>",
        "id": 372938363,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1688657046
    },
    {
        "content": "<p>I can make a smaller one without the iterator adaptors I already made if that would be clearer</p>",
        "id": 372938495,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1688657068
    },
    {
        "content": "<p>I added a more minimal one with only the list iterator and toList function</p>",
        "id": 372939309,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1688657190
    },
    {
        "content": "<p>thanks! will take a look soon</p>",
        "id": 372939362,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1688657197
    },
    {
        "content": "<p>Nice. Yeah this is definitely a soundness hole</p>",
        "id": 372973330,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1688664312
    },
    {
        "content": "<p>You'll notice that in theory, it should also be possible to write</p>\n<div class=\"codehilite\"><pre><span></span><code>expect\n    toList (intoIter (iterList [1, 2, 3])) == [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]\n</code></pre></div>\n<p>this doesn't work, the compiler blows up, but it should catch this whole program as incorrect</p>",
        "id": 372973741,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1688664411
    },
    {
        "content": "<p>The problem is that this type signature</p>\n<div class=\"codehilite\"><pre><span></span><code>nextList : ListIter item -&gt; Result (ListIter item, item) [IterDone]\n</code></pre></div>\n<p>does not line up with</p>\n<div class=\"codehilite\"><pre><span></span><code>    next : iter -&gt; Result (iter, item) [IterDone] | iter has Iter\n</code></pre></div>\n<p>in the <code>item</code> position, in that the compiler lets you instantiate it as a concrete type related to <code>ListIter item</code>, when it should not</p>",
        "id": 372974144,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1688664513
    },
    {
        "content": "<p>I filed <a href=\"https://github.com/roc-lang/roc/issues/5645\">https://github.com/roc-lang/roc/issues/5645</a> and raised what is needed to address this soundness bug in <a class=\"stream-topic\" data-stream-id=\"395097\" href=\"/#narrow/stream/395097-compiler-development-.28public.29/topic/Sound.20type-checking.20of.20ability.20implementations\">#compiler development (public) &gt; Sound type-checking of ability implementations</a>. Thanks again for catching this!</p>",
        "id": 372990343,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1688668647
    }
]