[
    {
        "content": "<p>Hello everybody,</p>\n<p>Is it possible to destructure a record to get field \"a\" and \"b\" into \"a\" and \"b\" variables and also get the whole record into \"input\" variable? Something like this?</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code># invalid code\nstuff = \\{ a ? \"default1\", b ? \"default2\" }@input -&gt;\n    (a, b, input)\n</code></pre></div>\n<p>I want that so I can recursively call the function with a different field:</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>stuff = ...\n  ...\n  # from within the function\n  stuff { input &amp; a: \"bla bla\" }\n</code></pre></div>\n<p>Thank you!</p>",
        "id": 465371639,
        "sender_full_name": "Ostar",
        "timestamp": 1724748429
    },
    {
        "content": "<p>There should be, but the syntax is currently broken</p>",
        "id": 465507209,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724777871
    },
    {
        "content": "<p>It should be <code>{a, b} as input</code></p>",
        "id": 465507332,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724777883
    },
    {
        "content": "<p>You can destructure as the first line of the function instead</p>",
        "id": 465507465,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724777904
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">stuff</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"err\">?</span><span class=\"w\"> </span><span class=\"s\">\"default1\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"err\">?</span><span class=\"w\"> </span><span class=\"s\">\"default2\"</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">input</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">input</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 465507585,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724777922
    },
    {
        "content": "<p>Also, just a prewarning: optional record fields have a really inconvenient bug currently. They only specialize to one selection of optionality (which kinda makes them useless).</p>\n<p>This means:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"kt\">This</span><span class=\"w\"> </span><span class=\"nv\">works</span><span class=\"w\"> </span><span class=\"nv\">by</span><span class=\"w\"> </span><span class=\"nv\">itself</span>\n<span class=\"nv\">stuff</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nv\">a</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"something\"</span><span class=\"p\">}</span>\n\n<span class=\"err\">#</span><span class=\"w\"> </span><span class=\"kt\">This</span><span class=\"w\"> </span><span class=\"nv\">still</span><span class=\"w\"> </span><span class=\"nv\">works</span><span class=\"w\"> </span><span class=\"nv\">cause</span><span class=\"w\"> </span><span class=\"nv\">it</span><span class=\"w\"> </span><span class=\"nv\">is</span><span class=\"w\"> </span><span class=\"nv\">also</span><span class=\"w\"> </span><span class=\"nv\">missing</span><span class=\"w\"> </span><span class=\"nv\">b</span>\n<span class=\"nv\">stuff</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nv\">a</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"something2\"</span><span class=\"p\">}</span>\n\n<span class=\"err\">#</span><span class=\"w\"> </span><span class=\"kt\">This</span><span class=\"w\"> </span><span class=\"nv\">breaks</span><span class=\"w\"> </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">used</span><span class=\"w\"> </span><span class=\"nv\">with</span><span class=\"w\"> </span><span class=\"nv\">the</span><span class=\"w\"> </span><span class=\"nv\">above</span><span class=\"w\"> </span><span class=\"nv\">due</span><span class=\"w\"> </span><span class=\"nv\">to</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">compiler</span><span class=\"w\"> </span><span class=\"nv\">bug</span><span class=\"nf\">:</span>\n<span class=\"nv\">stuff</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nv\">a</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"something3\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"roc is sad :cry:\"</span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 465508609,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724778133
    },
    {
        "content": "<p>Do you think this bug is the cause for <a href=\"https://github.com/roc-lang/roc/issues/7031\">#7031</a> and/or <a href=\"https://github.com/roc-lang/roc/issues/7035\">#7035</a>?</p>",
        "id": 465511922,
        "sender_full_name": "Anton",
        "timestamp": 1724779156
    },
    {
        "content": "<p>Yes</p>",
        "id": 465530513,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724784008
    }
]