[
    {
        "content": "<p>Hey all! I am trying to open a browser window from CLI which works from a Linux terminal: <code>xdg-open http://localhost:8080</code><br>\nBut this code yields <code>IOError \"No such file or directory (os error 2)\"</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>envPath &lt;-\n    Env.var &quot;PATH&quot;\n    |&gt; Task.onErr (\\ VarNotFound -&gt; crash &quot;PATH env not found, really?&quot;)\n    |&gt; await\nres &lt;-\n    Cmd.new &quot;xdg-open&quot;\n    |&gt; Cmd.arg &#39;http://localhost:8080&#39;\n    |&gt; Cmd.env &quot;PATH&quot; envPath\n    |&gt; Cmd.output\n    |&gt; Task.onErr (\\e -&gt; crash (Inspect.toStr e))\n    |&gt; await\n</code></pre></div>\n<p>I have also tried <code>Cmd.new \"/usr/bin/xdg-open\"</code>, <code>Cmd.new \"sh -c\" |&gt; Cmd.arg \"xdg-open http://localhost:8080\"</code> and manually initializing PATH env var, but didn't get anywhere.<br>\nI am using --linker=legacy</p>",
        "id": 409892555,
        "sender_full_name": "Karakatiza",
        "timestamp": 1703495825
    },
    {
        "content": "<p>Hmm, that code does work for me (on NixOS), can you share your OS and architecture?</p>",
        "id": 409908973,
        "sender_full_name": "Anton",
        "timestamp": 1703508506
    },
    {
        "content": "<p>Ubuntu 22.04.3 LTS, non-WSL, x86_64<br>\nMinimal example to reproduce for me, either with or without --linker=legacy:</p>\n<div class=\"codehilite\"><pre><span></span><code>app &quot;hello&quot;\n  packages {\n      pf: &quot;https://github.com/roc-lang/basic-cli/releases/download/0.7.0/bkGby8jb0tmZYsy2hg1E_B2QrCgcSTxdUlHtETwm5m4.tar.br&quot;,\n      json: &quot;https://github.com/lukewilliamboswell/roc-json/releases/download/0.6.0/hJySbEhJV026DlVCHXGOZNOeoOl7468y9F9Buhj0J18.tar.br&quot;\n  }\n  imports [pf.Task.{ Task, await }, pf.Cmd, pf.Env]\n  provides [main] to pf\n\nurl = &quot;http://localhost:8080&quot;\nmain =\n  envPath &lt;- Env.var &quot;PATH&quot; |&gt; Task.onErr (\\ VarNotFound -&gt; crash &quot;PATH env not found, really?&quot;) |&gt; await\n  {} &lt;-\n      Cmd.new &quot;xdg-open&quot;\n      |&gt; Cmd.arg url\n      |&gt; Cmd.env &quot;PATH&quot; envPath\n      |&gt; Cmd.output\n      |&gt; Task.onErr (\\e -&gt; crash (Inspect.toStr e))\n      |&gt; await\n  Task.ok {}\n</code></pre></div>",
        "id": 409928975,
        "sender_full_name": "Karakatiza",
        "timestamp": 1703526048
    },
    {
        "content": "<p>Thanks, I can take a look on my ubuntu vm tomorrow</p>",
        "id": 409930485,
        "sender_full_name": "Anton",
        "timestamp": 1703527739
    },
    {
        "content": "<p>That also works for me (on Ubuntu 22.04). To narrow this down, I would try:</p>\n<ul>\n<li><code>roc build hello.roc</code> followed by <code>strace ./hello</code></li>\n<li>running the <code>ls</code> command instead of <code>xdg-open</code> and see if that runs without problems.</li>\n</ul>",
        "id": 410006971,
        "sender_full_name": "Anton",
        "timestamp": 1703586632
    },
    {
        "content": "<p>I realized I was running the file in Ubuntu Docker container (same version as the host machine). Directly on host the code works fine. I can keep developing in container and testing on host, but eventually I'd like to be able run my CLI app within the container, too.<br>\nHere is the strace when running in the container:</p>\n<div class=\"codehilite\"><pre><span></span><code>open(&quot;/proc/self/exe&quot;, O_RDONLY|O_LARGEFILE|O_CLOEXEC) = 3\nfcntl(3, F_SETFD, FD_CLOEXEC)           = 0\nfstat(3, {st_mode=S_IFREG|0755, st_size=2759264, ...}) = 0\nmmap(NULL, 2759264, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7fb4b2e00000\nclose(3)                                = 0\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fb4b3449000\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fb4b3448000\nmunmap(0x7fb4b3449000, 4096)            = 0\nmmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fb4b3446000\nmunmap(0x7fb4b3448000, 4096)            = 0\nmmap(NULL, 16384, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fb4b3442000\nmunmap(0x7fb4b3446000, 8192)            = 0\nmmap(NULL, 28672, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fb4b343b000\nmunmap(0x7fb4b3442000, 16384)           = 0\nmmap(NULL, 53248, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fb4b31f3000\nmunmap(0x7fb4b343b000, 28672)           = 0\nmmap(NULL, 102400, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fb4b31da000\nmunmap(0x7fb4b31f3000, 53248)           = 0\nstat(&quot;/usr/lib/debug&quot;, {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0\nopen(&quot;/usr/lib/debug/.build-id/c9/d2cee6f567f1cc0aacc6fa91c163c14279364b.debug&quot;, O_RDONLY|O_LARGEFILE|O_CLOEXEC) = -1 ENOENT (No such file or directory)\nopen(&quot;/proc/self/exe.dwp&quot;, O_RDONLY|O_LARGEFILE|O_CLOEXEC) = -1 ENOENT (No such file or directory)\n</code></pre></div>\n<p><code>/usr/lib/debug/.build-id/</code> was indeed missing inside the container, so I ran<br>\n<code>sudo apt-get update &amp;&amp; sudo apt-get install libc6-dbg</code> in the container and recompiled the Roc program but still getting the same strace. The issue persists with --optimize flag, too.</p>",
        "id": 410139479,
        "sender_full_name": "Karakatiza",
        "timestamp": 1703675523
    },
    {
        "content": "<p>Strange, I'm investigating...</p>",
        "id": 410148301,
        "sender_full_name": "Anton",
        "timestamp": 1703680709
    },
    {
        "content": "<p>Can you share your Dockerfile?</p>",
        "id": 410148544,
        "sender_full_name": "Anton",
        "timestamp": 1703680866
    },
    {
        "content": "<p><a href=\"https://github.com/feldera/feldera/blob/main/.devcontainer/Dockerfile\">https://github.com/feldera/feldera/blob/main/.devcontainer/Dockerfile</a></p>",
        "id": 410148677,
        "sender_full_name": "Karakatiza",
        "timestamp": 1703680941
    },
    {
        "content": "<p>I am using a nightly build of Roc, not compiling from source btw</p>",
        "id": 410149334,
        "sender_full_name": "Karakatiza",
        "timestamp": 1703681336
    },
    {
        "content": "<p>It doesn't really make sense to run xdg-open from inside docker right?</p>",
        "id": 410156712,
        "sender_full_name": "Anton",
        "timestamp": 1703685441
    },
    {
        "content": "<p>Oh, crap. I just realized it probably doesn't <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> And thus xdg-utils are not even installed in a Docker container. Sorry for leading you down the wrong path!</p>",
        "id": 410158250,
        "sender_full_name": "Karakatiza",
        "timestamp": 1703686128
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"654587\">Karakatiza</span> has marked this topic as resolved.</p>",
        "id": 410158366,
        "sender_full_name": "Notification Bot",
        "timestamp": 1703686172
    },
    {
        "content": "<p>To sum up: the original code is valid and works in an environment with a desktop subsystem (and with xdg-utils) installed.</p>",
        "id": 410158582,
        "sender_full_name": "Karakatiza",
        "timestamp": 1703686266
    }
]