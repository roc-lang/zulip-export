[
    {
        "content": "<p>Not sure if this would be related to Result.orElse, but does Roc have error propagation, so you can write waterfall style code for Ok backpass unrwapped and return an Err otherwise?</p>\n<p>Something like this?</p>\n<div class=\"codehilite\"><pre><span></span><code>errorPropagation =\n   a &lt;- Num.divChecked 2 0 |&gt; Result.next\n   b = a - 1\n   c &lt;- Num.divChecked 3 b |&gt; Result.next\n</code></pre></div>\n<p>Would fast fail with Err [divideByZero]</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>errorPropagation =\n   a &lt;- Num.divChecked 2 2 |&gt; Result.next\n   b = a - 1\n   c &lt;- Num.divChecked 3 b |&gt; Result.next\n</code></pre></div>\n<p>Would first succeed with a, but then fail with Err [divideByZero]</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>errorPropagation =\n   a &lt;- Num.divChecked 4 2 |&gt; Result.next\n   b = a - 1\n   c &lt;- Num.divChecked 3 b |&gt; Result.next\n</code></pre></div>\n<p>Would succeed with Ok 3</p>",
        "id": 419671116,
        "sender_full_name": "Brian Teague",
        "timestamp": 1707024492
    },
    {
        "content": "<p>I believe you're looking for Result.try! It works exactly like you describe.</p>",
        "id": 419675573,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1707029704
    }
]