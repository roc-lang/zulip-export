[
    {
        "content": "<p>Hi! I'm new here, and I'm learning Roc by rewriting some coding puzzles I've done previously in Haskell in Roc. I'm currently doing the One Billion Row Challenge (which is basically just parsing a list of cities with temperatures and returning the min/mean/max temperature for each city).</p>\n<p>I've gotten thusfar, working from the CLI args example:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">app</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nv\">pf</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">platform</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/roc-lang/basic-cli/releases/download/0.10.0/vNe6s9hWzoTZtFmNkvEICPErI9ptji_ySjicO6CkucY.tar.br\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">pf.Stdout</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">pf.File</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">pf.Path</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">pf.Task</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">pf.Arg</span>\n\n<span class=\"kr\">main </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">finalTask</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">        </span><span class=\"nv\">pathArg</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">readFirstArgT</span><span class=\"err\">!</span>\n<span class=\"w\">        </span><span class=\"nv\">readFileToStr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Path</span><span class=\"nf\">.</span><span class=\"nv\">fromStr</span><span class=\"w\"> </span><span class=\"nv\">pathArg</span><span class=\"p\">)</span>\n\n<span class=\"w\">    </span><span class=\"nv\">finalResult</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">attempt</span><span class=\"w\"> </span><span class=\"nv\">finalTask</span>\n\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">finalResult</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">ZeroArgsGiven</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">err</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Exit</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"s\">\"Error ZeroArgsGiven\"</span><span class=\"p\">)</span>\n\n<span class=\"w\">        </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">ReadFileErr</span><span class=\"w\"> </span><span class=\"nv\">errMsg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">err</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Exit</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"s\">\"Error ReadFileErr:</span><span class=\"se\">\\n</span><span class=\"s\">$(errMsg)\"</span><span class=\"p\">)</span>\n\n<span class=\"w\">        </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">fileContentStr</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"nv\">fileContentStr</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">parse</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span>\n\n\n<span class=\"nv\">readFirstArgT</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">args</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Arg</span><span class=\"nf\">.</span><span class=\"nv\">list</span><span class=\"err\">!</span>\n<span class=\"w\">    </span><span class=\"nv\">dbg</span><span class=\"w\"> </span><span class=\"nv\">args</span>\n<span class=\"w\">    </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">get</span><span class=\"w\"> </span><span class=\"nv\">args</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">mapErr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">ZeroArgsGiven</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">fromResult</span>\n\n\n<span class=\"nv\">readFileToStr</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">path</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">path</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">File</span><span class=\"nf\">.</span><span class=\"nv\">readUtf8</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">mapErr</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">ReadFileErr</span><span class=\"w\"> </span><span class=\"s\">\"Failed to read file: $(Path.display path)\"</span>\n\n\n<span class=\"nv\">parse</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">contents</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">citiesList</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"w\"> </span><span class=\"nv\">contents</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n\n<span class=\"w\">    </span><span class=\"nv\">results</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">walk</span><span class=\"w\"> </span><span class=\"nv\">citiesList</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Dict</span><span class=\"nf\">.</span><span class=\"nv\">empty</span><span class=\"w\"> </span><span class=\"p\">{})</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">elem</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"nv\">cityWithTemp</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"w\"> </span><span class=\"nv\">elem</span><span class=\"w\"> </span><span class=\"s\">\";\"</span>\n<span class=\"w\">        </span><span class=\"nv\">city</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">            </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">get</span><span class=\"w\"> </span><span class=\"nv\">cityWithTemp</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">                </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">v</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">v</span>\n<span class=\"w\">                </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">crash</span><span class=\"w\"> </span><span class=\"s\">\"err\"</span>\n\n<span class=\"w\">        </span><span class=\"nv\">temp</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">            </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">get</span><span class=\"w\"> </span><span class=\"nv\">cityWithTemp</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">                </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">v</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toF64</span><span class=\"w\"> </span><span class=\"nv\">v</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">                            </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">w</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">w</span>\n<span class=\"w\">                            </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">crash</span><span class=\"w\"> </span><span class=\"s\">\"err\"</span>\n<span class=\"w\">                </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">crash</span><span class=\"w\"> </span><span class=\"s\">\"err\"</span>\n\n<span class=\"w\">        </span><span class=\"kt\">Dict</span><span class=\"nf\">.</span><span class=\"nv\">update</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"nv\">city</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">                </span><span class=\"kt\">Missing</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                    </span><span class=\"kt\">Present</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">min</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">temp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">mean</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">temp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">max</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">temp</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">                </span><span class=\"kt\">Present</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">min</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">oldMin</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">mean</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">oldMean</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">max</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">oldMax</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                    </span><span class=\"kt\">Present</span>\n<span class=\"w\">                        </span><span class=\"p\">{</span>\n<span class=\"w\">                            </span><span class=\"nv\">min</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">min</span><span class=\"w\"> </span><span class=\"nv\">temp</span><span class=\"w\"> </span><span class=\"nv\">oldMin</span><span class=\"p\">,</span>\n<span class=\"w\">                            </span><span class=\"nv\">mean</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">temp</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"nv\">oldMean</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">/</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span>\n<span class=\"w\">                            </span><span class=\"nv\">max</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">max</span><span class=\"w\"> </span><span class=\"nv\">temp</span><span class=\"w\"> </span><span class=\"nv\">oldMax</span><span class=\"p\">,</span>\n<span class=\"w\">                        </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"nv\">results</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Dict</span><span class=\"nf\">.</span><span class=\"nv\">toList</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">(</span><span class=\"nv\">city</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nv\">min</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">mean</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">max</span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"s\">\"$(city): $(Num.toStr min), $(Num.toStr mean), $(Num.toStr max)\"</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">joinWith</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n</code></pre></div>\n<p><code>roc dev</code> tells me \"The surgical linker currently has issue <a href=\"https://github.com/roc-lang/roc/issues/3609\">#3609</a> and would fail linking your app. Please use <code>--linker=legacy</code> to avoid the issue for now.\" I'm not sure which change made it so the surgical linker wouldn't work anymore, but I think it was inbetween when I realised I can't <code>Stdout.line</code> a Dict and have to manually create the string to print. When I run it with the legacy linker (<code>roc dev --linker=legacy -- measurements.txt</code>), it always results in <code>ZeroArgsGiven</code>, and <code>dbg args</code> gives <code>[ ]</code>. If I remember correctly, this wasn't so before I introduced whatever caused the problem with the linker. Could this be, or is it a coincidence? If so, what mistake am I making in my code?</p>\n<p>I also wanted to know if there is a way to print, e.g., dicts. I'm used to elements having <code>show</code> in Haskell, so I can do <code>print</code> on basically any structure. Having to do that last <code>results |&gt; Dict.toList |&gt; List.map ... |&gt; Str.joinWith \"\\n\"</code> bit is a bit tedious tbh.</p>\n<p>Then, I'm still working on my understanding of error handling, but I'm pretty sure this  is sub-optimal:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">get</span><span class=\"w\"> </span><span class=\"nv\">cityWithTemp</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">                </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">v</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toF64</span><span class=\"w\"> </span><span class=\"nv\">v</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">                            </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">w</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">w</span>\n<span class=\"w\">                            </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">crash</span><span class=\"w\"> </span><span class=\"s\">\"err\"</span>\n<span class=\"w\">                </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">crash</span><span class=\"w\"> </span><span class=\"s\">\"err\"</span>\n</code></pre></div>\n<p>Is there something simple I'm missing? Or something more fundamental?</p>\n<p>Thanks!</p>",
        "id": 444781253,
        "sender_full_name": "Paul Joubert",
        "timestamp": 1718396117
    },
    {
        "content": "<p><code>Inspect.toStr</code> should help you</p>",
        "id": 444790433,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718399341
    },
    {
        "content": "<p>For printing a dict</p>",
        "id": 444790466,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718399359
    },
    {
        "content": "<p>Oh yes! I forgot about <code>Inspect</code>. Thanks.</p>",
        "id": 444790694,
        "sender_full_name": "Paul Joubert",
        "timestamp": 1718399471
    },
    {
        "content": "<p>I'll do a new basic-cli release soon that should improve the args parsing.<br>\nIf you want you can use <a href=\"https://www.roc-lang.org/examples/IngestFiles/README.html\">this</a> to simplify the file reading a lot.</p>",
        "id": 444861245,
        "sender_full_name": "Anton",
        "timestamp": 1718456399
    },
    {
        "content": "<p>I'm already \"watching\" the basic-cli repo :) looking forward to it &lt;3<br>\nAbout the <code>import file</code> syntax, does that compile the file into the binary? Because the one billion row file is 14GB haha. Also, I think I'd prefer to keep the file dynamic, so I can benchmark performance on different sizes without recompiling.</p>",
        "id": 444863658,
        "sender_full_name": "Paul Joubert",
        "timestamp": 1718458203
    },
    {
        "content": "<p>I've rerun the <a href=\"https://www.roc-lang.org/examples/CommandLineArgs/README.html\">CLI args example</a> as is, and it doesn't see the args when using the legacy linker, so it seems the problem is with using the legacy linker. Legacy linker means using shared system libraries and such, right? In which case maybe the problem is because I'm running NixOS. Does anyone know what in my code above prevents the surgical linker from working? I didn't see anything on the issue that seemed relevant.</p>",
        "id": 444864421,
        "sender_full_name": "Paul Joubert",
        "timestamp": 1718458816
    },
    {
        "content": "<blockquote>\n<p>About the <code>import file</code> syntax, does that compile the file into the binary?</p>\n</blockquote>\n<p>Yes indeed.</p>\n<blockquote>\n<p>Also, I think I'd prefer to keep the file dynamic, so I can benchmark performance on different sizes without recompiling.</p>\n</blockquote>\n<p>Makes sense :)</p>",
        "id": 444864439,
        "sender_full_name": "Anton",
        "timestamp": 1718458842
    },
    {
        "content": "<blockquote>\n<p>In which case maybe the problem is because I'm running NixOS.</p>\n</blockquote>\n<p>I'm on NixOS as well, I'll see if it is any different on my ubuntu laptop.</p>",
        "id": 444864513,
        "sender_full_name": "Anton",
        "timestamp": 1718458910
    },
    {
        "content": "<p>Now that I think of it; for the benchmark later, make sure to use:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ roc build yourApp.roc --optimize\n</code></pre></div>\n<p>And then time the execution of <code>./yourApp cities.csv</code></p>",
        "id": 444864885,
        "sender_full_name": "Anton",
        "timestamp": 1718459258
    },
    {
        "content": "<p>Oh yeah, I've been intending to do that but haven't gotten it to build yet in the first place haha <span aria-label=\"smiling\" class=\"emoji emoji-1f972\" role=\"img\" title=\"smiling\">:smiling:</span> but thanks tho</p>",
        "id": 444864999,
        "sender_full_name": "Paul Joubert",
        "timestamp": 1718459346
    },
    {
        "content": "<p>I've been following the meta conversation about Roc development, all Richard's talks and podcasts and such, so I know a lot about the way things work, I just haven't actually sat down and written code until now hahaha</p>",
        "id": 444865093,
        "sender_full_name": "Paul Joubert",
        "timestamp": 1718459424
    },
    {
        "content": "<p>Yeah the behavior is the same on Ubuntu, the tracking issue for this is <a href=\"https://github.com/roc-lang/basic-cli/issues/82\">here</a>.</p>",
        "id": 444865840,
        "sender_full_name": "Anton",
        "timestamp": 1718460014
    },
    {
        "content": "<p>Oh huh thanks for confirming</p>",
        "id": 444865895,
        "sender_full_name": "Paul Joubert",
        "timestamp": 1718460043
    },
    {
        "content": "<p>The <code>Str.toF64</code> is what requires the legacy linker, <code>Str.toU64</code> does work (if I change cities.csv to natural numbers).</p>",
        "id": 444867213,
        "sender_full_name": "Anton",
        "timestamp": 1718460959
    },
    {
        "content": "<p>Hm I tried <code>Str.toDec</code> and it segfaulted <span aria-label=\"skull\" class=\"emoji emoji-1f480\" role=\"img\" title=\"skull\">:skull:</span></p>",
        "id": 444867576,
        "sender_full_name": "Paul Joubert",
        "timestamp": 1718461213
    },
    {
        "content": "<p>Yeah, I tried that too <span aria-label=\"smiling face with tear\" class=\"emoji emoji-1f972\" role=\"img\" title=\"smiling face with tear\">:smiling_face_with_tear:</span></p>",
        "id": 444867621,
        "sender_full_name": "Anton",
        "timestamp": 1718461255
    },
    {
        "content": "<p>I'll see if we have an issue for that</p>",
        "id": 444867665,
        "sender_full_name": "Anton",
        "timestamp": 1718461295
    },
    {
        "content": "<p>No issue, it doesn't happen every time when using Str.toDec (in other code), I'll minimize and make an issue.</p>",
        "id": 444868242,
        "sender_full_name": "Anton",
        "timestamp": 1718461769
    },
    {
        "content": "<p>I was doing the same challenge (1brc) few weeks ago and ran into what I understand is a refcount performance issue. And I think we also have an open issue to load a large file in chunks which is probably required for the full 1 billion row file<br>\n<a href=\"#narrow/stream/231634-beginners/topic/Profiling.20an.20AoC.20app/near/440118892\">https://roc.zulipchat.com/#narrow/stream/231634-beginners/topic/Profiling.20an.20AoC.20app/near/440118892</a></p>\n<p>These were some of my numbers for a super naive implementation that stopped after parsing and creating the dict</p>\n<div class=\"codehilite\"><pre><span></span><code>1M row file\nroc reference: 103271ms\ngleam reference: 2251ms\ngleam (arrays): 2901ms\ngo reference: 140ms\n</code></pre></div>",
        "id": 444881407,
        "sender_full_name": "Musab Nazir",
        "timestamp": 1718469086
    },
    {
        "content": "<p>btw this is the issue for reading in chunks: <a href=\"http://github.com/roc-lang/basic-cli/issues/205\">github.com/roc-lang/basic-cli/issues/205</a></p>",
        "id": 444882887,
        "sender_full_name": "Anton",
        "timestamp": 1718470026
    },
    {
        "content": "<blockquote>\n<p>I'll minimize and make an issue.</p>\n</blockquote>\n<p><a href=\"https://github.com/roc-lang/roc/issues/6813\">#6813</a></p>",
        "id": 444884198,
        "sender_full_name": "Anton",
        "timestamp": 1718470780
    },
    {
        "content": "<p>I've investigated the empty args issue further and also found a <a href=\"https://github.com/roc-lang/basic-cli/issues/82#issuecomment-2170459561\">temporary workaround</a> :)</p>",
        "id": 444891821,
        "sender_full_name": "Anton",
        "timestamp": 1718474893
    },
    {
        "content": "<p>Oh I implented that <br>\n<a href=\"https://github.com/roc-lang/basic-cli/pull/206\">https://github.com/roc-lang/basic-cli/pull/206</a></p>\n<p>Just forgot to add a test script and make it ready for review</p>",
        "id": 444917965,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1718490879
    },
    {
        "content": "<p>I forgot I had that sitting there</p>",
        "id": 444917981,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1718490900
    },
    {
        "content": "<p>Ok for completion's sake, I managed to get things working!</p>\n<p>Code and results:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">app</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nv\">pf</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">platform</span><span class=\"w\"> </span><span class=\"s\">\"./basic-cli/platform/main.roc\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">pf.Stdout</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">pf.File</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">pf.Task</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">pf.Arg</span>\n\n<span class=\"kr\">main </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">finalTask</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">        </span><span class=\"nv\">pathArg</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">readFirstArgT</span><span class=\"err\">!</span>\n<span class=\"w\">        </span><span class=\"nv\">readFileToStr</span><span class=\"w\"> </span><span class=\"nv\">pathArg</span>\n\n<span class=\"w\">    </span><span class=\"nv\">finalResult</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"nv\">finalTask</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">attempt</span>\n\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">finalResult</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">ZeroArgsGiven</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">err</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Exit</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"s\">\"Error ZeroArgsGiven\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">ReadFileErr</span><span class=\"w\"> </span><span class=\"nv\">errMsg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">err</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Exit</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"s\">\"Error ReadFileErr:</span><span class=\"se\">\\n</span><span class=\"s\">$(errMsg)\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">fileContentStr</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"nv\">fileContentStr</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">parse</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Inspect</span><span class=\"nf\">.</span><span class=\"nv\">toStr</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span>\n<span class=\"w\">        </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">err</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Exit</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"s\">\"Unknown error\"</span><span class=\"p\">)</span>\n\n<span class=\"nv\">readFirstArgT</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">args</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Arg</span><span class=\"nf\">.</span><span class=\"nv\">list</span><span class=\"err\">!</span>\n<span class=\"w\">    </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">get</span><span class=\"w\"> </span><span class=\"nv\">args</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">mapErr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">ZeroArgsGiven</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">fromResult</span>\n\n<span class=\"nv\">readFileToStr</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">path</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">path</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">File</span><span class=\"nf\">.</span><span class=\"nv\">readUtf8</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">mapErr</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">ReadFileErr</span><span class=\"w\"> </span><span class=\"s\">\"Failed to read file: $(path)\"</span>\n\n<span class=\"nv\">parse</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">contents</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">citiesList</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"w\"> </span><span class=\"nv\">contents</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n\n<span class=\"w\">    </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">walk</span><span class=\"w\"> </span><span class=\"nv\">citiesList</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Dict</span><span class=\"nf\">.</span><span class=\"nv\">empty</span><span class=\"w\"> </span><span class=\"p\">{})</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">elem</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"nv\">cityWithTemp</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"w\"> </span><span class=\"nv\">elem</span><span class=\"w\"> </span><span class=\"s\">\";\"</span>\n<span class=\"w\">        </span><span class=\"p\">[</span><span class=\"nv\">city</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">t</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">cityWithTemp</span>\n<span class=\"w\">        </span><span class=\"nv\">temp</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">withDefault</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toF32</span><span class=\"w\"> </span><span class=\"nv\">t</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n\n<span class=\"w\">        </span><span class=\"kt\">Dict</span><span class=\"nf\">.</span><span class=\"nv\">update</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"nv\">city</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">                </span><span class=\"kt\">Missing</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Present</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">min</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">temp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">mean</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">temp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">max</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">temp</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">                </span><span class=\"kt\">Present</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">min</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">oldMin</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">mean</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">oldMean</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">max</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">oldMax</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                    </span><span class=\"kt\">Present</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                        </span><span class=\"nv\">min</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">min</span><span class=\"w\"> </span><span class=\"nv\">temp</span><span class=\"w\"> </span><span class=\"nv\">oldMin</span><span class=\"p\">,</span>\n<span class=\"w\">                        </span><span class=\"nv\">mean</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">temp</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"nv\">oldMean</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">/</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span>\n<span class=\"w\">                        </span><span class=\"nv\">max</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">max</span><span class=\"w\"> </span><span class=\"nv\">temp</span><span class=\"w\"> </span><span class=\"nv\">oldMax</span><span class=\"p\">,</span>\n<span class=\"w\">                    </span><span class=\"p\">}</span>\n</code></pre></div>\n<p><code>hyperfine --warmup 1 -L num 1_000,10_000,100_000,1_000_000 \"./main measurements_{num}.txt\"</code></p>\n<div class=\"codehilite\"><pre><span></span><code>Benchmark 1: ./main ../1brc-hs/measurements_1_000.txt\n  Time (mean ± σ):       6.9 ms ±   0.3 ms    [User: 5.8 ms, System: 1.1 ms]\n  Range (min … max):     6.2 ms …   8.4 ms    261 runs\n\nBenchmark 2: ./main ../1brc-hs/measurements_10_000.txt\n  Time (mean ± σ):      67.6 ms ±   1.2 ms    [User: 65.2 ms, System: 2.0 ms]\n  Range (min … max):    65.4 ms …  71.3 ms    42 runs\n\nBenchmark 3: ./main ../1brc-hs/measurements_100_000.txt\n  Time (mean ± σ):     661.0 ms ±   5.8 ms    [User: 654.7 ms, System: 3.9 ms]\n  Range (min … max):   653.8 ms … 671.7 ms    10 runs\n\nBenchmark 4: ./main ../1brc-hs/measurements_1_000_000.txt\n  Time (mean ± σ):      6.557 s ±  0.041 s    [User: 6.510 s, System: 0.025 s]\n  Range (min … max):    6.501 s …  6.621 s    10 runs\n</code></pre></div>\n<p>Which is faster than I got my Haskell code, in a few cases at least! Which was:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"cm\">{-# LANGUAGE OverloadedStrings #-}</span>\n<span class=\"cm\">{-# OPTIONS_GHC -Wno-incomplete-uni-patterns #-}</span>\n\n<span class=\"kr\">module</span><span class=\"w\"> </span><span class=\"nn\">Main</span><span class=\"w\"> </span><span class=\"kr\">where</span>\n\n<span class=\"kr\">import</span><span class=\"w\"> </span><span class=\"nn\">System.Environment</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">getArgs</span><span class=\"p\">)</span>\n<span class=\"kr\">import</span><span class=\"w\"> </span><span class=\"nn\">Data.Foldable</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">foldl'</span><span class=\"p\">)</span>\n<span class=\"kr\">import</span><span class=\"w\"> </span><span class=\"k\">qualified</span><span class=\"w\"> </span><span class=\"nn\">Data.Map.Strict</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">M</span>\n<span class=\"kr\">import</span><span class=\"w\"> </span><span class=\"k\">qualified</span><span class=\"w\"> </span><span class=\"nn\">Data.Text</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">T</span>\n\n<span class=\"kr\">type</span><span class=\"w\"> </span><span class=\"kt\">Results</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">M</span><span class=\"o\">.</span><span class=\"kt\">Map</span><span class=\"w\"> </span><span class=\"kt\">T</span><span class=\"o\">.</span><span class=\"kt\">Text</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Float</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Float</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Float</span><span class=\"p\">)</span>\n\n<span class=\"nf\">main</span><span class=\"w\"> </span><span class=\"ow\">::</span><span class=\"w\"> </span><span class=\"kt\">IO</span><span class=\"w\"> </span><span class=\"nb\">()</span>\n<span class=\"nf\">main</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kr\">do</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"n\">path</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"ow\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">getArgs</span>\n<span class=\"w\">  </span><span class=\"n\">txt</span><span class=\"w\"> </span><span class=\"ow\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">readFile</span><span class=\"w\"> </span><span class=\"n\">path</span>\n<span class=\"w\">  </span><span class=\"n\">print</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"w\"> </span><span class=\"kt\">M</span><span class=\"o\">.</span><span class=\"n\">toList</span><span class=\"w\"> </span><span class=\"o\">.</span><span class=\"w\"> </span><span class=\"n\">foldl'</span><span class=\"w\"> </span><span class=\"n\">addCity</span><span class=\"w\"> </span><span class=\"kt\">M</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"w\"> </span><span class=\"o\">.</span><span class=\"w\"> </span><span class=\"kt\">T</span><span class=\"o\">.</span><span class=\"n\">lines</span><span class=\"w\"> </span><span class=\"o\">.</span><span class=\"w\"> </span><span class=\"kt\">T</span><span class=\"o\">.</span><span class=\"n\">pack</span><span class=\"w\"> </span><span class=\"o\">$</span><span class=\"w\"> </span><span class=\"n\">txt</span>\n\n<span class=\"nf\">addCity</span><span class=\"w\"> </span><span class=\"ow\">::</span><span class=\"w\"> </span><span class=\"kt\">Results</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">T</span><span class=\"o\">.</span><span class=\"kt\">Text</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Results</span>\n<span class=\"nf\">addCity</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"ow\">=</span>\n<span class=\"w\">  </span><span class=\"kr\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">city</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">temp</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">parseLine</span><span class=\"w\"> </span><span class=\"n\">line</span>\n<span class=\"w\">  </span><span class=\"kr\">in</span><span class=\"w\"> </span><span class=\"kt\">M</span><span class=\"o\">.</span><span class=\"n\">insertWith</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">city</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">temp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">temp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">temp</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">results</span>\n<span class=\"w\">      </span><span class=\"kr\">where</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">temp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kr\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kr\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">oldMin</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">oldMean</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">oldMax</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"ow\">=</span>\n<span class=\"w\">              </span><span class=\"p\">(</span><span class=\"n\">min</span><span class=\"w\"> </span><span class=\"n\">temp</span><span class=\"w\"> </span><span class=\"n\">oldMin</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">temp</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">oldMean</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span><span class=\"w\"> </span><span class=\"n\">temp</span><span class=\"w\"> </span><span class=\"n\">oldMax</span><span class=\"p\">)</span>\n\n<span class=\"nf\">parseLine</span><span class=\"w\"> </span><span class=\"ow\">::</span><span class=\"w\"> </span><span class=\"kt\">T</span><span class=\"o\">.</span><span class=\"kt\">Text</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">T</span><span class=\"o\">.</span><span class=\"kt\">Text</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Float</span><span class=\"p\">)</span>\n<span class=\"nf\">parseLine</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"ow\">=</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">read</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">T</span><span class=\"o\">.</span><span class=\"n\">unpack</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"ow\">::</span><span class=\"w\"> </span><span class=\"kt\">Float</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"kr\">where</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">T</span><span class=\"o\">.</span><span class=\"n\">splitOn</span><span class=\"w\"> </span><span class=\"s\">\";\"</span><span class=\"w\"> </span><span class=\"n\">line</span>\n</code></pre></div>\n<p>Which resulted in:</p>\n<div class=\"codehilite\" data-code-language=\"Markdown\"><pre><span></span><code>|       rows | runs | result (ms) |       ± |\n|-----------:|-----:|------------:|--------:|\n|      1 000 |  164 |        13.4 |     0.9 |\n|     10 000 |   50 |        52.9 |     3.8 |\n|    100 000 |   10 |       386.2 |    10.7 |\n|  1 000 000 |   10 |     4 107.0 |    28.0 |\n| 10 000 000 |   10 |    47 138.0 | 1 736.0 |\n</code></pre></div>\n<p>For some reason, the Haskell is faster from 100 000 rows. Since Roc starts out faster, maybe this is a file reading thing? Not sure. (I did compile with <code>--optimize</code>).</p>\n<p>I do like the Haskell for being more concise, but then again it doesn't do any error handling.</p>",
        "id": 444983742,
        "sender_full_name": "Paul Joubert",
        "timestamp": 1718550656
    },
    {
        "content": "<p>Just a note, we have a bug that effects dict containing strings and would be killing your perf</p>",
        "id": 444995552,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718557303
    },
    {
        "content": "<p>Also, I'm really surprised that this works. It is probably a bug: <code>[city, t] = cityWithTemp</code>. Cause there is no guarantee the list is length 2.</p>",
        "id": 445001048,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718560712
    },
    {
        "content": "<p>So, I wrote <a href=\"https://gist.github.com/bhansconnect/088655a9c821184b9c4bba04204ffc79\">a terrible function</a> to instead of using strings, use tuples of 32 U8s. The longest string was 26 bytes, so everything fits in these tuples, but they are way less efficient for hashing than a string. This should actually be a slower solution, but it work around a current refcounting bug.</p>\n<p>Your code on my machine (so using <code>Dict Str</code>):</p>\n<div class=\"codehilite\"><pre><span></span><code>|       rows | runs | result (ms) |       ± |\n|-----------:|-----:|------------:|--------:|\n|      1 000 |  294 |         6.8 |     0.4 |\n|     10 000 |   55 |        54.9 |     6.5 |\n|    100 000 |   10 |       531.8 |    72.8 |\n|  1 000 000 |   10 |     5 434.0 |   737.0 |\n| 10 000 000 |   10 |    51 639.0 | 6 809.0 |\n</code></pre></div>\n<p>My slightly modified code to use tuples (so using <code>Dict (U8, ..., U8)</code>):</p>\n<div class=\"codehilite\"><pre><span></span><code>|       rows | runs | result (ms) |       ± |\n|-----------:|-----:|------------:|--------:|\n|      1 000 |  248 |         4.1 |     0.4 |\n|     10 000 |  300 |         6.3 |     0.2 |\n|    100 000 |   96 |        27.6 |     2.7 |\n|  1 000 000 |   12 |       233.2 |     1.1 |\n| 10 000 000 |   10 |     2 291.0 |    15.0 |\n</code></pre></div>\n<p>The <code>Dict Str</code> version should actually be faster than this second version with the tuples, but we have a refcounting bug to finish fixing. So the roc version should be about 20x faster for large inputs.</p>",
        "id": 445006598,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718563746
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Learning.20questions.20with.201brc.3A.20no.20args.20with.20legacy.20linker.3F/near/445001048\">said</a>:</p>\n<blockquote>\n<p>I'm really surprised that this works. It is probably a bug: <code>[city, t] = cityWithTemp</code>. Cause there is no guarantee the list is length 2.</p>\n</blockquote>\n<p>Oh huh, I think I wrote that with the intention of afterwards chasing down the type errors to do error handling, and then when the checker didn't complain I just forgot about it!</p>",
        "id": 445015272,
        "sender_full_name": "Paul Joubert",
        "timestamp": 1718568918
    },
    {
        "content": "<blockquote>\n<p>I wrote <a href=\"https://gist.github.com/bhansconnect/088655a9c821184b9c4bba04204ffc79\">a terrible function</a></p>\n</blockquote>\n<p>thank you, this is beautiful</p>",
        "id": 445015522,
        "sender_full_name": "Paul Joubert",
        "timestamp": 1718569062
    },
    {
        "content": "<p>It's so exciting to write functional/high-level code — and a pretty naive implementation also — that is just really fast!!</p>",
        "id": 445016517,
        "sender_full_name": "Paul Joubert",
        "timestamp": 1718569588
    },
    {
        "content": "<p>I tried to investigate the destructuring thing a bit, and tried this input:</p>\n<div class=\"codehilite\"><pre><span></span><code>Seoul;8.7\nMinneapolis;3.5\nEl Paso;22.0\nHelsinki;9.1\nFoo\nReggane;15.4\nGaborone;25.3\nBenghazi;31.6\nBridgetown;38.0\nAlgiers;26.8\nChihuahua;12.9\n</code></pre></div>\n<p>which resulted in</p>\n<div class=\"codehilite\"><pre><span></span><code>{\n  &quot;Seoul&quot;: {max: 8.699999809265137, mean: 8.699999809265137, min: 8.699999809265137 },\n  &quot;Minneapolis&quot;: {max: 3.5, mean: 3.5, min: 3.5 },\n  &quot;El Paso&quot;: {max: 22, mean: 22, min: 22 },\n  &quot;Helsinki&quot;: {max: 9.100000381469727, mean: 9.100000381469727, min: 9.100000381469727 },\n  &quot;Foo&quot;: {max: 9.100000381469727, mean: 9.100000381469727, min: 9.100000381469727 },\n  &quot;Reggane&quot;: {max: 15.399999618530273, mean: 15.399999618530273, min: 15.399999618530273 },\n  &quot;Gaborone&quot;: {max: 25.299999237060547, mean: 25.299999237060547, min: 25.299999237060547 },\n  &quot;Benghazi&quot;: {max: 31.600000381469727, mean: 31.600000381469727, min: 31.600000381469727 },\n  &quot;Bridgetown&quot;: {max: 38, mean: 38, min: 38 },\n  &quot;Algiers&quot;: {max: 26.799999237060547, mean: 26.799999237060547, min: 26.799999237060547 },\n  &quot;Chihuahua&quot;: {max: 12.899999618530273, mean: 12.899999618530273, min: 12.899999618530273 },\n  &quot;&quot;: {max: 12.899999618530273, mean: 12.899999618530273, min: 12.899999618530273 }\n}\n</code></pre></div>\n<p>So, it carried over the previous value for <code>t</code> during the walk.</p>\n<p>I also noticed that it added a blank string at the bottom, which is because splitting the input on <code>\"\\n\"</code> results in a blank string at the end (or rather, the file string ends on a <code>\\n</code>):</p>\n<div class=\"codehilite\"><pre><span></span><code>» Str.split &quot;Seoul;8.7\\nMinneapolis;3.5\\n&quot; &quot;\\n&quot;\n[&quot;Seoul;8.7&quot;, &quot;Minneapolis;3.5&quot;, &quot;&quot;] : List Str\n</code></pre></div>\n<p>Anyway, when I insert <code>dbg cityWithTemp</code> above <code>[city, t] = cityWithTemp</code>, compilation fails with</p>\n<div class=\"codehilite\"><pre><span></span><code>This looks like an operator, but it&#39;s not one I recognize!\n\n45│          dbg cityWithTemp\n46│          [city, t] = cityWithTemp\n                       ^\n\nI have no specific suggestion for this operator, see TODO for the full\nlist of operators in Roc.\n</code></pre></div>\n<p>I remember trying <code>[city, t] = Str.split elem \";\"</code>, which, trying again, results in the same \"looks like an operator\" error. I originally thought this was maybe because <code>split</code> can fail, but I realise now it can't, so it must be something else.</p>\n<p>Adding <code>dbg</code> after the line works. This:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"w\"> </span><span class=\"nf\">...</span>\n<span class=\"w\">    </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">walk</span><span class=\"w\"> </span><span class=\"nv\">citiesList</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Dict</span><span class=\"nf\">.</span><span class=\"nv\">empty</span><span class=\"w\"> </span><span class=\"p\">{})</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">elem</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"nv\">cityWithTemp</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"w\"> </span><span class=\"nv\">elem</span><span class=\"w\"> </span><span class=\"s\">\";\"</span>\n<span class=\"w\">        </span><span class=\"p\">[</span><span class=\"nv\">city</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">t</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">cityWithTemp</span>\n<span class=\"w\">        </span><span class=\"nv\">dbg</span><span class=\"w\"> </span><span class=\"nv\">cityWithTemp</span>\n<span class=\"w\">        </span><span class=\"nv\">dbg</span><span class=\"w\"> </span><span class=\"nv\">t</span>\n<span class=\"w\">        </span><span class=\"nv\">temp</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">withDefault</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toF32</span><span class=\"w\"> </span><span class=\"nv\">t</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">        </span><span class=\"nv\">dbg</span><span class=\"w\"> </span><span class=\"nv\">temp</span>\n\n<span class=\"w\">        </span><span class=\"kt\">Dict</span><span class=\"nf\">.</span><span class=\"nv\">update</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"nv\">city</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nf\">...</span>\n</code></pre></div>\n<p>gives</p>\n<div class=\"codehilite\"><pre><span></span><code>...\n[main.roc:46] cityWithTemp = [&quot;Helsinki&quot;, &quot;9.1&quot;]\n[main.roc:47] t = &quot;9.1&quot;\n[main.roc:49] temp = 9.100000381469727\n\n[main.roc:46] cityWithTemp = [&quot;Foo&quot;]\n[main.roc:47] t = &quot;9.1&quot;\n[main.roc:49] temp = 9.100000381469727\n\n[main.roc:46] cityWithTemp = [&quot;Reggane&quot;, &quot;15.4&quot;]\n[main.roc:47] t = &quot;15.4&quot;\n[main.roc:49] temp = 15.399999618530273\n...\n</code></pre></div>",
        "id": 445019281,
        "sender_full_name": "Paul Joubert",
        "timestamp": 1718571243
    },
    {
        "content": "<p>Can you try Str.splitFirst there instead of split?</p>",
        "id": 445021619,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718573084
    },
    {
        "content": "<p>I think it should be faster and give you a record that can be matched inline like that. As I mentioned earlier, I don't think<code>[city, t] = ...</code> is actually expected to work in general. So it may confuse the compiler.</p>",
        "id": 445021693,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718573145
    },
    {
        "content": "<p>Also, the value carry over is definitely a bug. If you could file an issue on GitHub, that would be great.</p>",
        "id": 445021932,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718573384
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Learning.20questions.20with.201brc.3A.20no.20args.20with.20legacy.20linker.3F/near/445021619\">said</a>:</p>\n<blockquote>\n<p>Can you try Str.splitFirst there instead of split?</p>\n</blockquote>\n<p>I tried this (not sure if the nested <code>when</code>s is best way to express this <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> )</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">parse</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">contents</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">citiesList</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">contents</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n\n<span class=\"w\">    </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">walk</span><span class=\"w\"> </span><span class=\"nv\">citiesList</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Dict</span><span class=\"nf\">.</span><span class=\"nv\">empty</span><span class=\"w\"> </span><span class=\"p\">{})</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">elem</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">splitFirst</span><span class=\"w\"> </span><span class=\"nv\">elem</span><span class=\"w\"> </span><span class=\"s\">\";\"</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">            </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nv\">before</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">city</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">after</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                </span><span class=\"nv\">temp</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">after</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toF32</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"nf\">.</span><span class=\"nv\">withDefault</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n\n<span class=\"w\">                </span><span class=\"kt\">Dict</span><span class=\"nf\">.</span><span class=\"nv\">update</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"nv\">city</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">                        </span><span class=\"kt\">Missing</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Present</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">min</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">temp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">mean</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">temp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">max</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">temp</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">                        </span><span class=\"kt\">Present</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">min</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">oldMin</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">mean</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">oldMean</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">max</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">oldMax</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                            </span><span class=\"kt\">Present</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                                </span><span class=\"nv\">min</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">min</span><span class=\"w\"> </span><span class=\"nv\">temp</span><span class=\"w\"> </span><span class=\"nv\">oldMin</span><span class=\"p\">,</span>\n<span class=\"w\">                                </span><span class=\"nv\">mean</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">temp</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"nv\">oldMean</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">/</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span>\n<span class=\"w\">                                </span><span class=\"nv\">max</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">max</span><span class=\"w\"> </span><span class=\"nv\">temp</span><span class=\"w\"> </span><span class=\"nv\">oldMax</span><span class=\"p\">,</span>\n<span class=\"w\">                            </span><span class=\"p\">}</span>\n\n<span class=\"w\">            </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">NotFound</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">state</span>\n</code></pre></div>\n<p>and it's actually a tiny bit slower. But by like 1ms in the 1000 line case and 200ms in the 1m line case, so could be insignificant.</p>\n<blockquote>\n<p>I don't think<code>[city, t] = ...</code> is actually expected to work in general</p>\n</blockquote>\n<p>oohhh I misunderstood earlier, sorry.</p>\n<blockquote>\n<p>If you could file an issue on GitHub, that would be great.</p>\n</blockquote>\n<p>Will do! <span aria-label=\"salute\" class=\"emoji emoji-1fae1\" role=\"img\" title=\"salute\">:salute:</span></p>",
        "id": 445135223,
        "sender_full_name": "Paul Joubert",
        "timestamp": 1718631633
    },
    {
        "content": "<blockquote>\n<p>and it's actually a tiny bit slower</p>\n</blockquote>\n<p>This intuitively makes some sense to me. I'm pretty sure that <code>[city, t] = ...</code> has no error handling. So it runs faster due to having a bug that is hit if the list isn't exactly (at least?) 2 elements.</p>\n<p>Also, does it help if you change the error case to:<br>\n<code>Err NotFound -&gt; crash \"impossible\"</code></p>\n<p>Sometimes crashing leads to better optimizations by the compiler</p>",
        "id": 445159345,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718637704
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/issues/6816\">Issue #6816: Destructuring like <code>[a, b] = [\"foo\"]</code> should fail, but value for <code>b</code> is held over from previous walk element</a></p>",
        "id": 445161010,
        "sender_full_name": "Paul Joubert",
        "timestamp": 1718638042
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Learning.20questions.20with.201brc.3A.20no.20args.20with.20legacy.20linker.3F/near/445159345\">said</a>:</p>\n<blockquote>\n<p>Also, does it help if you change the error case to:<br>\n<code>Err NotFound -&gt; crash \"impossible\"</code></p>\n</blockquote>\n<p>Problem is, the error case is reached because of the newline at the end of the file and <code>Str.split</code>adds blank strings, e.g., <code>Str.split \"foo\" \"o\"</code> =&gt; <code>[\"f\", \"\", \"\"]</code>.<br>\nI think this is expected behaviour since Haskell's <a href=\"https://hackage.haskell.org/package/split-0.2.5/docs/Data-List-Split.html#v:splitOn\"><code>splitOn</code></a> also does this. I was actually looking for an equivalent of <a href=\"https://hackage.haskell.org/package/ghc-internal-9.1001.0/docs/src/GHC.Internal.Data.OldList.html#lines\"><code>lines</code></a>.</p>",
        "id": 445165898,
        "sender_full_name": "Paul Joubert",
        "timestamp": 1718639374
    },
    {
        "content": "<p>I see there's <code>Str.trim</code>, will try that in a moment.</p>",
        "id": 445167394,
        "sender_full_name": "Paul Joubert",
        "timestamp": 1718639749
    },
    {
        "content": "<p>An interesting observation:<br>\nYou guys were getting 5-6s for the 1M files and even though my implementation (Dict Str) was virtually identical my M1 mac would finish consistently around 100-110s. After looking into it a lot, it came down to my input generation script. The one I was using, would create the correct number of rows, but it had waaay more unique cities. When I swapped the script to <a href=\"https://github.com/ifnesi/1brc#submitting\">one linked</a> on the official 1brc site I started getting ~5s. This input script only has 413 unique cities whereas my old one could go up to 44k which exacerbates the Dict issue I think</p>",
        "id": 445169751,
        "sender_full_name": "Musab Nazir",
        "timestamp": 1718640382
    },
    {
        "content": "<p>Trimming the newline at the end before splitting, and using crash on the nofound error:</p>\n<div class=\"codehilite\"><pre><span></span><code>Benchmark 1: ./main ../1brc-hs/measurements_1_000.txt\n  Time (mean ± σ):       7.1 ms ±   0.3 ms    [User: 5.7 ms, System: 1.3 ms]\n  Range (min … max):     6.4 ms …   8.4 ms    267 runs\n\nBenchmark 2: ./main ../1brc-hs/measurements_10_000.txt\n  Time (mean ± σ):      69.2 ms ±   0.7 ms    [User: 67.0 ms, System: 1.7 ms]\n  Range (min … max):    68.0 ms …  71.8 ms    41 runs\n\nBenchmark 3: ./main ../1brc-hs/measurements_100_000.txt\n  Time (mean ± σ):     677.7 ms ±   4.1 ms    [User: 670.1 ms, System: 5.0 ms]\n  Range (min … max):   672.5 ms … 686.2 ms    10 runs\n\nBenchmark 4: ./main ../1brc-hs/measurements_1_000_000.txt\n  Time (mean ± σ):      6.839 s ±  0.060 s    [User: 6.777 s, System: 0.029 s]\n  Range (min … max):    6.755 s …  6.920 s    10 runs\n</code></pre></div>\n<p>I think this is within the margin of error of the prevous version.</p>",
        "id": 445169924,
        "sender_full_name": "Paul Joubert",
        "timestamp": 1718640445
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"588760\">@Musab Nazir</span> oh interesting, and yeah, my test files were generated by the \"official\" python script.</p>",
        "id": 445170379,
        "sender_full_name": "Paul Joubert",
        "timestamp": 1718640555
    },
    {
        "content": "<blockquote>\n<p>This input script only has 413 unique cities whereas my old one could go up to 44k which exacerbates the Dict issue I think</p>\n</blockquote>\n<p>Yeah, the issue is linear with the size of the dict</p>",
        "id": 445202389,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718650420
    },
    {
        "content": "<p>Basically, it is recursively updating all of the refcounts of the stored string keys</p>",
        "id": 445202430,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1718650437
    },
    {
        "content": "<p>This is a basic impl of 1brc using the latest roc (including <a href=\"https://github.com/roc-lang/roc/issues/6911\">#6911</a>) and basic-cli: <a href=\"https://github.com/bhansconnect/roc-1brc/blob/main/1brc.roc\">https://github.com/bhansconnect/roc-1brc/blob/main/1brc.roc</a></p>\n<p>It's only single threaded, so obviously the performance can't be that good. I'm sure it also has tons of room for improvement (probably a lot within roc itself).</p>\n<p>Perf result on the full 1 billion rows:</p>\n<p>M1 mac 8GB ram: 145s</p>\n<p>Linux machine 32GB ram: 272s</p>\n<hr>\n<p>Assuming perfect parallelism over the 8 cores the test uses, we would expect something in the range of:<br>\nM1: 18s<br>\nLinux: 34s</p>\n<p>For context, good results for the expanded key version of the test start at about 20s and go down as low as 3s. That said, good results also do a lot more tricks than we do (like swar for finding the semicolons).</p>\n<hr>\n<p>Note: I used the python generator, which actually leads to slower results cause it uses 8,921 weather station names instead of just the 413 of the java generator.</p>",
        "id": 452257270,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721283542
    },
    {
        "content": "<p>Comparing to <a href=\"https://benhoyt.com/writings/go-1brc/\">https://benhoyt.com/writings/go-1brc/</a></p>\n<p>I am doing something roughly similar to <code>r4</code>. Which took 51s in golang.</p>",
        "id": 452257481,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721283629
    },
    {
        "content": "<p>To get a bit more of a direct comparison. This is the timing of <code>r4</code> on my machines with my same input data:<br>\nM1: 66s<br>\nLinux: 73s</p>\n<p>So roughly 2.2x slower currently on M1 and 3.7x slower on linux.</p>",
        "id": 452259305,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721284412
    },
    {
        "content": "<p>Perf of the roc code is split as such:<br>\n25% list.splitFirst<br>\n25% parsing the rest of row (probably the pattern match)<br>\n50% Dict.update</p>",
        "id": 452260003,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721284548
    },
    {
        "content": "<p>I wonder how much of that is algorithmic differences</p>",
        "id": 452328181,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1721304740
    },
    {
        "content": "<p>not sure how splitFirst could be made significantly faster! <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 452328236,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1721304757
    },
    {
        "content": "<p>What do you mean by algorithmic?</p>",
        "id": 452376386,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721316875
    },
    {
        "content": "<p>Aside from using an mmap instead of buffered io, the two implementations are almost identical algorithmically. With the caveat that I use pattern matching while go uses manual but roughly equivalent code.</p>",
        "id": 452377814,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721317306
    },
    {
        "content": "<p>Also, at a minimum for split, it is doing a ton of redundant checks by calling <code>List.sublist</code> twice. But I would guess that iterating in roc with refcount, tags, and list checks probably costs a solid amount then a quick loop in zig.</p>\n<p>Also, for bytes specifically, you can use simd or swar to find much faster.</p>",
        "id": 452381507,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721318425
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Learning.20questions.20with.201brc.3A.20no.20args.20with.20legacy.20linker.3F/near/452381507\">said</a>:</p>\n<blockquote>\n<p>Also, at a minimum for split, it is doing a ton of redundant checks by calling <code>List.sublist</code> twice. But I would guess that iterating in roc with refcount, tags, and list checks probably costs a solid amount then a quick loop in zig.</p>\n</blockquote>\n<p>oh interesting! do you think it would be viable to move more of that to zig to avoid redundant checks?</p>",
        "id": 452388484,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1721320173
    },
    {
        "content": "<p>Yeah, I think we could get a decent gain from moving it into zig.</p>\n<p>Also, in this specific case, a bytes specific version could use simd or swar. Which would be even faster, but I don't think the go version does that.</p>",
        "id": 452394751,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721322375
    },
    {
        "content": "<p>I also like the idea of doing that!</p>",
        "id": 452409640,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1721326437
    },
    {
        "content": "<p>working with bytes is super common</p>",
        "id": 452409724,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1721326444
    },
    {
        "content": "<p>and having builtins just automatically run faster for common cases like that seems great</p>",
        "id": 452409845,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1721326459
    },
    {
        "content": "<p>it's a good use of builtins <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 452409943,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1721326469
    },
    {
        "content": "<p>Yeah, one note related to that, would also be great if we allowed for special ability specialization for lists of bytes. For example, hashing has <code>addBytes</code>, but you have to wrap a <code>List U8</code> in an opaque type to use it. So <code>List U8</code> hashing is slow by default.</p>\n<p>I should actually double check and verify this</p>",
        "id": 452433104,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721334025
    },
    {
        "content": "<p>Yeah, doubled checked, <code>List U8</code> hashing is on the slow path by default. It hashes each element individually.</p>",
        "id": 452438172,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721335766
    },
    {
        "content": "<p>oh yeah we should totally do that one too</p>",
        "id": 452439480,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1721336144
    },
    {
        "content": "<p>same with equality checks for sure</p>",
        "id": 452439563,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1721336168
    },
    {
        "content": "<p>yeah, and with equality checks, we can use treat any list of types without pointers (or opaques) as a big list of bytes and just blit over them instead of caring about padding.</p>",
        "id": 452439735,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721336266
    },
    {
        "content": "<p>Actually, i guess we could do that with hashing as well...maybe....depends if we want hashing <code>a</code> <code>b</code> and <code>c</code> to be equivalent to hashing <code>[a,b,c]</code>. Where <code>a/b/c</code> are variables of some random type alias.</p>",
        "id": 452439929,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721336361
    },
    {
        "content": "<p>Oh wait, list hashing is already different than just hashing the elements...so yeah, any type that can be seen as a bag of bits (memcpy safe in the llvm backend) could use way faster list hashing.</p>",
        "id": 452440086,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721336413
    },
    {
        "content": "<p>That said, I do think there is a problem here with ordering of passes. Abilities are generated when we don't know concrete types. These optimizations require knowing the concrete final type.</p>",
        "id": 452440191,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721336456
    },
    {
        "content": "<p>concrete as in monomorphized?</p>",
        "id": 452440665,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1721336676
    },
    {
        "content": "<p>I'd be surprised if there wasn't some way to get that to work without restructuring things, although <span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> would know better</p>",
        "id": 452440795,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1721336734
    },
    {
        "content": "<p>Oh, I bet we could just make hashList a low level. So the ability dispatches to hashList. Then the low level should know the concrete type and be able to dispatch farther.</p>",
        "id": 452441252,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721336968
    },
    {
        "content": "<p>Or at least something roughly like that. So kinda two steps.</p>",
        "id": 452441333,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721337006
    },
    {
        "content": "<p>Also, as much as I would love to keep dict in roc (and think it should long term be possible to make efficient in roc), we probably could get some large perf gains by moving dict to zig. (oh, and making sure we enable borrow inference for dict and set the same as list and str).</p>\n<p>That said, it would be a pretty large project to move dict and may not be worth it for now.</p>",
        "id": 452441943,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721337295
    },
    {
        "content": "<p>Do we have a location in the compiler pipeline after/during specialization that we can pick a lowlevel we generate? Thinking about trying to specialize before we get to the backends instead of needing to deal with the specialization in each of the backends. So backends would still just dispatch a function call to zig without any special wiring. I'm assuming this would just be a pass on mono ir. I assume there is already a location in the compiler to add something like this.</p>",
        "id": 452443970,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721338367
    },
    {
        "content": "<p>I believe so, although I'm not sure offhand where it is</p>",
        "id": 452447875,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1721340476
    },
    {
        "content": "<p>actually I think the lowlevels all do that</p>",
        "id": 452447943,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1721340496
    },
    {
        "content": "<p>so if you search for pattern matches on lowlevels you might find it (I'm on mobile right now)</p>",
        "id": 452447995,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1721340526
    },
    {
        "content": "<p>Also, ran this through the <code>poop</code> and definitely some heavy memory issues (I need to test with a large bufreader instead of an mmap). That may be a large part of the perf, but memory issues might be from something else (like mmap loading pages may be label as a cache miss but not actually be that expensive, not sure):</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>poop<span class=\"w\"> </span>-d<span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"s2\">\"./r4 data/measurements_1_000_000_000.txt\"</span><span class=\"w\"> </span><span class=\"s2\">\"./1brc data/measurements_1_000_000_000.txt\"</span>\n<span class=\"go\">Benchmark 1 (3 runs): ./r4 data/measurements_1_000_000_000.txt</span>\n<span class=\"go\">  measurement          mean ± σ            min … max           outliers         delta</span>\n<span class=\"go\">  wall_time          87.3s  ± 3.30s     83.5s  … 89.5s           0 ( 0%)        0%</span>\n<span class=\"go\">  peak_rss           4.15MB ±  227KB    3.89MB … 4.28MB          0 ( 0%)        0%</span>\n<span class=\"go\">  cpu_cycles          276G  ±  958M      275G  …  277G           0 ( 0%)        0%</span>\n<span class=\"go\">  instructions        471G  ±  175M      471G  …  471G           0 ( 0%)        0%</span>\n<span class=\"go\">  cache_references   16.3G  ±  265M     16.0G  … 16.6G           0 ( 0%)        0%</span>\n<span class=\"go\">  cache_misses       1.06M  ±  224K      870K  … 1.31M           0 ( 0%)        0%</span>\n<span class=\"go\">  branch_misses      2.75G  ± 21.6M     2.74G  … 2.77G           0 ( 0%)        0%</span>\n<span class=\"go\">Benchmark 2 (3 runs): ./1brc data/measurements_1_000_000_000.txt</span>\n<span class=\"go\">  measurement          mean ± σ            min … max           outliers         delta</span>\n<span class=\"go\">  wall_time           169s  ± 10.1s      159s  …  180s           0 ( 0%)        💩+ 94.1% ± 19.6%</span>\n<span class=\"go\">  peak_rss           16.0GB ± 74.5KB    16.0GB … 16.0GB          0 ( 0%)        💩+385274.2% ±  9.2%</span>\n<span class=\"go\">  cpu_cycles          640G  ± 2.13G      638G  …  642G           0 ( 0%)        💩+131.9% ±  1.4%</span>\n<span class=\"go\">  instructions       1.40T  ± 1.59G     1.40T  … 1.40T           0 ( 0%)        💩+197.5% ±  0.5%</span>\n<span class=\"go\">  cache_references   10.9G  ±  133M     10.8G  … 11.0G           0 ( 0%)        ⚡- 33.0% ±  2.9%</span>\n<span class=\"go\">  cache_misses        462M  ± 1.43M      460M  …  463M           0 ( 0%)        💩+43454.8% ± 218.7%</span>\n<span class=\"go\">  branch_misses      2.95G  ± 30.2M     2.92G  … 2.97G           0 ( 0%)        💩+  7.4% ±  2.2%</span>\n</code></pre></div>\n<p>Highlights ~45x as many cache misses and ~3x as many instructions.</p>",
        "id": 452465752,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721350832
    },
    {
        "content": "<p>Also, totally possible all the cache misses are from our dictionary being in two different allocation along with the memory pressure from the giant mmap.</p>",
        "id": 452465794,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721350876
    },
    {
        "content": "<p>Also, note, these times are way faster than the times above due to not clearing the page cache between runs. So the file was already in ram more or less.</p>",
        "id": 452465910,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721350947
    },
    {
        "content": "<p>So with a better version of readline, perf is even worse than with the mmap. This version of readline actually accumulates to a RocList directly instead of a Vec (which helped a lot, but not enough):</p>\n<div class=\"codehilite\"><pre><span></span><code>Benchmark 1 (3 runs): ./r4 data/measurements_1_000_000_000.txt\n  wall_time          77.6s  ± 4.87s     74.5s  … 83.2s           0 ( 0%)        0%\nBenchmark 2 (3 runs): ./1brc-mmap data/measurements_1_000_000_000.txt\n  wall_time           177s  ± 7.44s      168s  …  182s           0 ( 0%)        💩+127.7% ± 18.4%\nBenchmark 3 (3 runs): ./1brc-readlines data/measurements_1_000_000_000.txt\n  wall_time           255s  ± 2.91s      252s  …  258s           0 ( 0%)        💩+228.0% ± 11.7%\n</code></pre></div>",
        "id": 452499058,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721371156
    }
]