[
    {
        "content": "<p>I think roc does not allow me to do this :<br>\noutStruct = {  inStruct : {  one:  1  , two : 2 } , something = 0  }<br>\nnewStruct  = { outStruct &amp; inStruct : { outStruct.inStruct &amp; two = 9 }  }     it  should  work  but  apparently it does not</p>",
        "id": 351572029,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1682071998
    },
    {
        "content": "<p>So two things are going on here:</p>\n<p>First, the syntax is slightly off. The equal signs should be colons:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">outStruct</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">inStruct</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">one</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">two</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">something</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"nv\">newStruct</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nx\">outStruct</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"nv\">inStruct</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nx\">outStruct</span><span class=\"p\">.</span><span class=\"nx\">inStruct</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"nv\">two</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>Second, updating does not work with nested fields. I feel like it should in a case like this, maybe that is a bug that we need to file.<br>\nSpecifically the issue is with <code>{ outStruct.inStruct &amp; two : 9 }</code></p>\n<p>When put in the repl directly, we print the error:</p>\n<div class=\"codehilite\"><pre><span></span><code>── SYNTAX PROBLEM ──────────────────────────────────────────────────────────────\n\nThis expression cannot be updated:\n\n6│      { outStruct.inStruct &amp; two : 9 }\n          ^^^^^^^^^^^^^^^^^^\n\nOnly variables can be updated with record update syntax.\n</code></pre></div>",
        "id": 351685897,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682096514
    },
    {
        "content": "<p>My gut feeling is that we should support this, but I am not sure the technical changes required for that.</p>",
        "id": 351686021,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682096537
    },
    {
        "content": "<p>A working alternative would be:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">outStruct</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">inStruct</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">one</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">two</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">something</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"nv\">inStruct</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">outStruct</span><span class=\"p\">.</span><span class=\"nx\">inStruct</span>\n<span class=\"nv\">newStruct</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nx\">outStruct</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"nv\">inStruct</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nx\">inStruct</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"nv\">two</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 351686318,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682096607
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> do you know if there is a specific technical reason that we can't support a record update like this:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nx\">outStruct</span><span class=\"p\">.</span><span class=\"nx\">inStruct</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"nv\">two</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 351686587,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682096663
    },
    {
        "content": "<p>because it is unclear what this does</p>",
        "id": 351686667,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1682096682
    },
    {
        "content": "<p>is the return type of this the type of the outer, or the inner struct</p>",
        "id": 351686726,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1682096697
    },
    {
        "content": "<p>That makes sense.</p>",
        "id": 351688513,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682097136
    },
    {
        "content": "<p>To me it seems \"obviously\" the type of the inner struct.. I can't parse it in my head to make it be the outer one</p>",
        "id": 351702879,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1682101192
    },
    {
        "content": "<p>Is it \"obviously\" the other way around for someone else?</p>",
        "id": 351703060,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1682101247
    },
    {
        "content": "<p>To me <code>outStruct.inStruct</code> is the expression between <code>{</code> and <code>&amp;</code> so it's the record you're updating</p>",
        "id": 351703278,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1682101314
    },
    {
        "content": "<p>Yeah, to me, that's as intuitive as the case with the <code>inStruct</code> def</p>",
        "id": 351704684,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1682101725
    },
    {
        "content": "<p>Elm also doesn't support arbitrary expressions in record update</p>",
        "id": 351704837,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1682101775
    },
    {
        "content": "<p>and I want them all the time :D</p>",
        "id": 351704873,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1682101788
    },
    {
        "content": "<p>It doesn't have to be arbitrary expressions, though. Identifiers would be enough.</p>",
        "id": 351705405,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1682101922
    },
    {
        "content": "<p>I think this would be something that people would also quickly learn if we added it. Even if they thought the wrong option, they will just get a type mismatch and need to learn how this works once.</p>",
        "id": 351705971,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682102080
    },
    {
        "content": "<p>Let say there is  record<br>\nP = {   k: {  ...  }  , ...   }    I can't do       {  P.k   &amp;   ....    }    instead  I have to go around     f = P.k     {f &amp;   ...}   is that  ok  ?</p>",
        "id": 400152624,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1699024295
    },
    {
        "content": "<p>I don't understand your workaround. Can you elaborate?</p>",
        "id": 400153175,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1699024469
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"568088\">Artur Swiderski</span> <a href=\"#narrow/stream/231634-beginners/topic/record.20update/near/400152624\">said</a>:</p>\n<blockquote>\n<p>Let say there is  record</p>\n<p><div class=\"codehilite\"><pre><span></span><code>P = {\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>hm, <code>P = {</code> isn't valid Roc syntax, because it's capitalized - did you mean exposing a record named <code>k</code> from <code>P.roc</code>?</p>",
        "id": 400182769,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1699034512
    },
    {
        "content": "<p>I meant <br>\np  = { k: { ... } , ... } </p>\n<p>--  I can't  do this <br>\nh =  { p.k &amp; .... }<br>\n--  but I can<br>\nf = p.k <br>\nh = {f &amp; ...}<br>\n--  this a bit unexpected since those are equivalent</p>",
        "id": 400299532,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1699105224
    },
    {
        "content": "<p>I think this was inherited from Elm where you also can’t use arbitrary expressions in record update</p>",
        "id": 400300955,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1699106208
    },
    {
        "content": "<p>That said, I’d prefer Roc supported arbitrary identifiers at least. I probably wouldn’t want to put a function call there, but being able to access record fields would be nice.</p>",
        "id": 400301099,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1699106356
    },
    {
        "content": "<p>Why not allow function calls or any arbitrary expressions?</p>",
        "id": 400303170,
        "sender_full_name": "Sky Rose",
        "timestamp": 1699107931
    },
    {
        "content": "<p>Yeah, I mean I wouldn’t be against it really. I just figured the design intention was to keep these simple.</p>",
        "id": 400304179,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1699108892
    },
    {
        "content": "<p>would you want that entire <code>{ ... }</code> expression to evaluate to the record <code>p</code> (with its <code>k</code> field updated) or to the <code>k</code> record?</p>",
        "id": 400309255,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1699113170
    },
    {
        "content": "<p>I think we have a syntax that works for both even if it isn't currently enabled for both:<br>\nUpdate k in p: <code>{ p &amp; k: {...}}</code><br>\nUpdate k only: <code>{p.k &amp; ...}</code> this returns something with the same type as <code>k</code></p>",
        "id": 400309511,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1699113419
    },
    {
        "content": "<p>yeah so I think that could plausibly be supported, but I remember way back when <span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> and I were discussing the original implementation, it made something about the type inference significantly trickier. I don't remember the details anymore though. <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 400315062,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1699118459
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/231634-beginners/topic/record.20update/near/400309255\">said</a>:</p>\n<blockquote>\n<p>would you want that entire <code>{ ... }</code> expression to evaluate to the record <code>p</code> (with its <code>k</code> field updated) or to the <code>k</code> record?</p>\n</blockquote>\n<p>intuitively to the 'k' record</p>",
        "id": 400945692,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1699450641
    },
    {
        "content": "<p>I hope there is plan to do something  about this because I stumbled upon this again</p>",
        "id": 409213576,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1703087506
    }
]