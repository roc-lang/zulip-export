[
    {
        "content": "<p>Since when is <code>\"\\(var)\"</code> valid string interpolation? </p>\n<p>I have been playing with AI agents writing roc code by piping in the tutorial, and have discovered that Claude likes to write <code>\"\\()</code> for string interpolation, and it works! </p>\n<p>This is not mentioned as valid syntax in the tutorial, but I have seen Claude write this repeatedly, and to my surprise it actually interpolates the value, and the <code>\\</code> is not printed.</p>",
        "id": 475371399,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1728327726
    },
    {
        "content": "<p>String interpolation syntax used to be <code>\"\\(var)\"</code>, and recently support was added for <code>\"$(var)\"</code>, I believe because it's better known. The old syntax is still around, I imagine at some point we'll remove it.</p>",
        "id": 475373507,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1728328347
    },
    {
        "content": "<p>that's right</p>",
        "id": 475377710,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1728329593
    },
    {
        "content": "<p>the reason was more because it gets hard to read in the common case where you're using it with slashes, e.g. in a file path <code>\"foo/\\(name)/bar\"</code> vs. <code>\"foo/$(name)/bar\"</code></p>",
        "id": 475377807,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1728329626
    },
    {
        "content": "<p>also it was annoying for some vim keybindings</p>",
        "id": 475377914,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1728329650
    },
    {
        "content": "<p>Ahh.. Thanks! That makes total sense.</p>",
        "id": 475380178,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1728330396
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"518883\">Ian McLerran</span> has marked this topic as resolved.</p>",
        "id": 475380191,
        "sender_full_name": "Notification Bot",
        "timestamp": 1728330401
    },
    {
        "content": "<p>We should make an issue to track that and remove it. I think it's probably ok to remove already, as it's been a while.</p>",
        "id": 475387871,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728332478
    },
    {
        "content": "<p>agreed!</p>",
        "id": 475409174,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1728338912
    },
    {
        "content": "<p>only argument I can see against it is if we want to wait until an 0.1 release to remove it</p>",
        "id": 475409274,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1728338935
    },
    {
        "content": "<p>so that like \"pre-0.1 Roc\" Advent of Code solutions still work</p>",
        "id": 475409330,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1728338947
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"518883\">Ian McLerran</span> has marked this topic as unresolved.</p>",
        "id": 475413343,
        "sender_full_name": "Notification Bot",
        "timestamp": 1728340443
    },
    {
        "content": "<blockquote>\n<p>\"pre-0.1 Roc\" Advent of Code solutions still work</p>\n</blockquote>\n<p>Those probably are broken already anyway. Task as builtin, basic cli changes, etc</p>",
        "id": 475418167,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728342707
    },
    {
        "content": "<p>I agree with Brendan. For breaking changes until we reach some 0.1 more \"stable\" version of Roc, we should <em>try</em> to provide backwards-compatible changes (like Agus' new header syntax that re-formats the old syntax to the new one), and just make announcements for breaking changes like the Task changes. Otherwise, there are gonna be a lot of breaking changes soon (purity inference, <code>try</code> vs ?, etc.) that will be slowed down trying to think of breaking code less than it is already broken.</p>",
        "id": 475420381,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1728343667
    },
    {
        "content": "<p>fair point!</p>",
        "id": 475422737,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1728344583
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/String.20interpolation.20with.20.22.5C.28var.29.22.20instead.20of.20.22.24.28var.29.22.3F/near/475418167\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>\"pre-0.1 Roc\" Advent of Code solutions still work</p>\n</blockquote>\n<p>Those probably are broken already anyway. Task as builtin, basic cli changes, etc</p>\n</blockquote>\n<p>Don't forget about <code>Nat</code>. I think this is the main reason, that none of the old AoC files work anymore</p>",
        "id": 475477283,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1728367729
    },
    {
        "content": "<p>FWIW I like to go back and update my AoC examples before Dec so people have some working examples. I did it last year and it was really interesting to see how much had changed in only 1 year. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 475485095,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728369801
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/231634-beginners/topic/String.20interpolation.20with.20.22.5C.28var.29.22.20instead.20of.20.22.24.28var.29.22.3F/near/475387871\">said</a>:</p>\n<blockquote>\n<p>We should make an issue to track that and remove it. I think it's probably ok to remove already, as it's been a while.</p>\n</blockquote>\n<p>Issue logged <a href=\"https://github.com/roc-lang/roc/issues/7148\">https://github.com/roc-lang/roc/issues/7148</a></p>",
        "id": 475489272,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728370838
    }
]