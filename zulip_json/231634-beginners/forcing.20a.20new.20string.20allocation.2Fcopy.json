[
    {
        "content": "<p>In my little test program, I am tokenizing s-expressions. Coming from manual memory management languages, I want to allocate a working buffer at the start of the process, and reset/reuse it as needed.</p>\n<p>This is all fine, but I realised that my tests were failing when I run them under <code>--optimize</code>, so I immediately suspected my use of the working buffer:</p>\n<div class=\"codehilite\"><pre><span></span><code>    res =\n        st.buf\n        |&gt; List.takeFirst st.bufIndex\n        |&gt; Str.fromUtf8\n        |&gt; Result.mapErr \\_ -&gt; Err (BadUtf8 st.start)\n    Result.try res \\r -&gt; Ok (r, st |&gt; stateResetBuf)\n</code></pre></div>\n<p>It seems I need to force a copy of the string <code>r</code> on the last line. I tried <code>Str.concat r \"\"</code> and <code>Str.concat \"\" r</code> but this didn't change the behaviour of the tests.</p>\n<p>What worked is this: <code>\"$(r)\"</code>. This seems accidental rather than purposeful, so I wanted to ask if there was a more supported or intended way to do what I'm doing?</p>",
        "id": 488758346,
        "sender_full_name": "Mo",
        "timestamp": 1734060788
    },
    {
        "content": "<p>tests failing on optimized but passing in a normal build are definitely bugs</p>",
        "id": 488758624,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734061015
    },
    {
        "content": "<p>Optimized should not change behaviour</p>",
        "id": 488758633,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734061023
    },
    {
        "content": "<p>You could also try <code>Str.releaseExcessCapacity</code> and that is a more intentional potential copy.</p>",
        "id": 488758658,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734061047
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/231634-beginners/topic/forcing.20a.20new.20string.20allocation.2Fcopy/near/488758624\">said</a>:</p>\n<blockquote>\n<p>tests failing on optimized but passing in a normal build are definitely bugs</p>\n</blockquote>\n<p>Ah ok, I didn't realise that. Seems pretty easy to make a small test case if that would be useful.</p>",
        "id": 488758762,
        "sender_full_name": "Mo",
        "timestamp": 1734061116
    },
    {
        "content": "<p><span aria-label=\"thank you\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"thank you\">:thank_you:</span></p>",
        "id": 488758803,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734061151
    },
    {
        "content": "<p>Yes, that would be very useful</p>",
        "id": 488758804,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734061156
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/231634-beginners/topic/forcing.20a.20new.20string.20allocation.2Fcopy/near/488758658\">said</a>:</p>\n<blockquote>\n<p>You could also try <code>Str.releaseExcessCapacity</code> and that is a more intentional potential copy.</p>\n</blockquote>\n<p>That also does the trick and seems more official :)</p>",
        "id": 488758818,
        "sender_full_name": "Mo",
        "timestamp": 1734061172
    },
    {
        "content": "<p>At the moment the tests that failed under <code>--optimize</code> without this fix are in: <a href=\"https://github.com/mocompute/roc-sexp/blob/main/src/Token.roc\">https://github.com/mocompute/roc-sexp/blob/main/src/Token.roc</a> but the few lines I posted above should be a good basis for a repro case -- I'll work on that a bit later today...</p>",
        "id": 488759087,
        "sender_full_name": "Mo",
        "timestamp": 1734061369
    },
    {
        "content": "<p>I think this is an intriguing bug, because it might intersect seamless slicing as well as the order of execution of parts of an expression under optimisation. I managed to narrow down a test case which identifies the clear cause of the behaviour: <a href=\"https://github.com/roc-lang/roc/issues/7354\">https://github.com/roc-lang/roc/issues/7354</a></p>",
        "id": 488779009,
        "sender_full_name": "Mo",
        "timestamp": 1734074076
    },
    {
        "content": "<p>Yeah, I figured out a bunch in <a class=\"stream-topic\" data-stream-id=\"463736\" href=\"/#narrow/channel/463736-bugs/topic/Off.20by.20one.20error.20running.20with.20.27optimize.27\">#bugs &gt; Off by one error running with 'optimize'</a></p>",
        "id": 488779265,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734074180
    },
    {
        "content": "<p>I think it is also the same root cause</p>",
        "id": 488779275,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734074184
    },
    {
        "content": "<p>Oh nice</p>",
        "id": 488779299,
        "sender_full_name": "Mo",
        "timestamp": 1734074206
    },
    {
        "content": "<p>There are two hard problems in computer science: cache invalidation, naming things, and off-by-one errors</p>",
        "id": 488779489,
        "sender_full_name": "Mo",
        "timestamp": 1734074299
    }
]