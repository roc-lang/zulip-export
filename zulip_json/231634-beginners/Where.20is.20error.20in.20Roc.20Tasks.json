[
    {
        "content": "<p>Hey guys. My friend advised me to look into roclang. As far he knows I love live script. I would recommend to look into live script and check some ideas too.</p>",
        "id": 411619793,
        "sender_full_name": "Andrey Stegno",
        "timestamp": 1704650432
    },
    {
        "content": "<p><a href=\"http://livescript.net\">http://livescript.net</a> lots of identical concepts here</p>",
        "id": 411619875,
        "sender_full_name": "Andrey Stegno",
        "timestamp": 1704650483
    },
    {
        "content": "<p>but the difference in live script I can make err, data &lt;- func ....</p>",
        "id": 411620374,
        "sender_full_name": "Andrey Stegno",
        "timestamp": 1704650805
    },
    {
        "content": "<p>here  url &lt;- File.readUtf8 path |&gt; Task.await</p>",
        "id": 411620379,
        "sender_full_name": "Andrey Stegno",
        "timestamp": 1704650809
    },
    {
        "content": "<p>where is err?</p>",
        "id": 411620387,
        "sender_full_name": "Andrey Stegno",
        "timestamp": 1704650815
    },
    {
        "content": "<p>5 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"304641\" href=\"/#narrow/stream/304641-ideas/topic/import.20.2B.20decode.3F\">#ideas &gt; import + decode?</a> by <span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span>.</p>",
        "id": 411621531,
        "sender_full_name": "Notification Bot",
        "timestamp": 1704651623
    },
    {
        "content": "<p><code>Task.await</code> only maps the happy case.</p>",
        "id": 411621560,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704651655
    },
    {
        "content": "<p>It will just let all of the error cases accumulate together.</p>",
        "id": 411621576,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704651672
    },
    {
        "content": "<p><code>Task.attempt</code> would instead give a result for handling the error immediately.</p>",
        "id": 411621594,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704651695
    },
    {
        "content": "<p><a href=\"https://www.roc-lang.org/packages/basic-cli/Task#await\">https://www.roc-lang.org/packages/basic-cli/Task#await</a><br>\nError value type union is the second member of Task type (<code>b</code> in the example <code>Task c b</code>)<br>\nIn the case of an error there are multiple ways to handle / change the error type:<br>\n<code>onErr : Task a b, (b -&gt; Task a c) -&gt; Task a c</code>  lets you use a handler function that takes an error type and returns a task, to process the error case with side effects and produce either successful result or an error of different type;<br>\n<code>attempt : Task a b, (Result a b -&gt; Task c d) -&gt; Task c</code> lets you process both the happy case and error case in the same function;<br>\nWith <code>mapErr : Task c a, (a -&gt; b) -&gt; Task c b</code> you simply convert the type of your error value without handling it</p>\n<p>Example:</p>\n<div class=\"codehilite\"><pre><span></span><code>task =\n  data &lt;- File.readUtf8 (Path.fromStr &quot;myfile.txt&quot;) |&gt; Task.await\n  # At this point you have the type Task Str [ReadErr]\n  File.write (Path.fromStr &quot;output.json&quot;) { some: &quot;json stuff&quot; } Json.toCompactUtf8\n  # At this point you have the type Task {} [ReadErr, WriteErr]\ntask2 = task |&gt; Task.onErr \\err -&gt; when err is\n  ReadErr -&gt; Stderr.line &quot;Something went wrong!&quot; # We decide to only handle ReadErr\n  e -&gt; Task.err e # We return a task that returns all other errors as is\n# Type of task2 is Task {} [WriteErr]\n</code></pre></div>\n<p>In summary, the errors can be immediately handled like in LiveScript, but usually are accumulated until a later error handling</p>",
        "id": 411623472,
        "sender_full_name": "Karakatiza",
        "timestamp": 1704653109
    },
    {
        "content": "<p>LiveScript-style, above could be changed to:</p>\n<div class=\"codehilite\"><pre><span></span><code>data &lt;- File.readUtf8 (Path.fromStr &quot;myfile.txt&quot;)\n  |&gt; Task.onErr (\\e -&gt; readErrToStr e |&gt; Stderr.line)\n  |&gt; Task.await\n# At this point you have the type Task Str []\n{} &lt;- File.write (Path.fromStr &quot;output.json&quot;) { some: &quot;json stuff&quot; } Json.toCompactUtf8\n  |&gt; Task.onErr (\\e -&gt; writeErrToStr e |&gt; Stderr.line)\n  |&gt; Task.await\n# At this point you have the type Task {} []\n</code></pre></div>",
        "id": 411624038,
        "sender_full_name": "Karakatiza",
        "timestamp": 1704653564
    },
    {
        "content": "<p>You don't have <code>err, data &lt;- task</code> in Roc because this syntax combines an error case and a happy case in a single code path where both <code>err</code> and <code>data</code> are nullable. This is not considered nice so there are different patterns for error handling.</p>",
        "id": 411628885,
        "sender_full_name": "Karakatiza",
        "timestamp": 1704658085
    }
]