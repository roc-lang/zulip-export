[
    {
        "content": "<p>I'm trying to compile a code that worked a month ago and getting an error</p>\n<div class=\"codehilite\"><pre><span></span><code>This expression has a type that does not implement the abilities it&#39;s expected to:\n\n105│      parseYarnV1LockFileContent testInputStr\n\nI can&#39;t generate an implementation of the Eq ability for\n\n    [\n        Err [\n            ParsingFailure ?,\n            ParsingIncomplete ?,\n        ],\n        Ok (List [\n            Comment ?,\n            DependencySection {\n                dependencies : List {\n                    name : ?,\n                    version : ?,\n                },\n                head : List ?,\n                integrity : ?,\n                resolved : ?,\n                version : ?,\n            },\n        ]),\n    ]\n\nIn particular, an implementation for\n\n    ?\n\ncannot be generated.\n</code></pre></div>\n<p>The ? was supposed to be a <code>Str</code>. Does anyone know if that is something that has changed in the language/platforms?</p>",
        "id": 453405614,
        "sender_full_name": "Vladimir Zotov",
        "timestamp": 1721738560
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"625587\">@Vladimir Zotov</span>,<br>\nCan you share the full code?</p>",
        "id": 453405986,
        "sender_full_name": "Anton",
        "timestamp": 1721738656
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/0ryC1e8HG9Y4KMBeM3T84V6K/YarnLockV1Parser.roc\">YarnLockV1Parser.roc</a><br>\n<a href=\"/user_uploads/22008/OgpevlLL4SJo_T_M8hAU4gma/main.roc\">main.roc</a></p>",
        "id": 453410684,
        "sender_full_name": "Vladimir Zotov",
        "timestamp": 1721739725
    },
    {
        "content": "<p>I changed <code>c != \":\"</code> and  <code>c == \":\"</code> to <code>c != ':'</code> and  <code>c == ':'</code></p>",
        "id": 453438440,
        "sender_full_name": "Anton",
        "timestamp": 1721747150
    },
    {
        "content": "<p>That will bring up a new error, but you should be able to solve it by using <code>sepBy (codeunit ',')</code>in combination with <code>oneOf</code> (to account for one dependency vs multiple) in <code>dependecyHead</code>.</p>",
        "id": 453438949,
        "sender_full_name": "Anton",
        "timestamp": 1721747230
    },
    {
        "content": "<p>The old version should not have worked, I suspect this is a bug that was fixed</p>",
        "id": 453439245,
        "sender_full_name": "Anton",
        "timestamp": 1721747283
    },
    {
        "content": "<p>It was really not clear what's got broken from just looking at the error. My bad, thank you for spotting, Anton!</p>",
        "id": 453449914,
        "sender_full_name": "Vladimir Zotov",
        "timestamp": 1721749702
    },
    {
        "content": "<p>Really interesting that roc generated <code>?</code>. I thought type inference was fully decidable, Shouldn't <code>?</code> be impossible?</p>",
        "id": 453460732,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721751789
    },
    {
        "content": "<p>I don't think ? is possible in an error free Roc program, perhaps it's meant to be used to be able to run code with some errors in it, or to be able to diagnose/report other errors in the program instead of stopping at that one.</p>",
        "id": 453463977,
        "sender_full_name": "Anton",
        "timestamp": 1721752709
    },
    {
        "content": "<p>The first error was the most helpful one, it highlighted the issue:</p>\n<div class=\"codehilite\"><pre><span></span><code>── TYPE MISMATCH in /home/username/Downloads/vladimir/YarnLockV1Parser.roc ─────\n\nThis 2nd argument to != has an unexpected type:\n\n138│      |&gt; keep (chompWhile (\\c -&gt; c != &#39;&quot;&#39; &amp;&amp; c != &quot;:&quot;) |&gt; map strFromUtf8)\n                                                      ^^^\n\nThe argument is a string of type:\n\n    Str\n\nBut != needs its 2nd argument to be:\n\n    Int *\n</code></pre></div>",
        "id": 453464344,
        "sender_full_name": "Anton",
        "timestamp": 1721752828
    },
    {
        "content": "<p>The display order of errors is not ideal, because in the terminal you see the last one first, but reversing the order does not seem great either...</p>",
        "id": 453464547,
        "sender_full_name": "Anton",
        "timestamp": 1721752921
    },
    {
        "content": "<p>Perhaps we should add a tip after the last error like: \"We recommend starting with the first error at the top.\"?</p>",
        "id": 453464834,
        "sender_full_name": "Anton",
        "timestamp": 1721753040
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/latest.20nightly.20Eq.20not.20implemented.20for.20.3F.20.28it's.20a.20Str.29/near/453460732\">said</a>:</p>\n<blockquote>\n<p>Really interesting that roc generated <code>?</code>. I thought type inference was fully decidable, Shouldn't <code>?</code> be impossible?</p>\n</blockquote>\n<p>this is after type-checking, it's something during ability implementation auto-generation</p>",
        "id": 453474589,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1721755363
    },
    {
        "content": "<p>that said, I'm not sure why it would print <code>?</code> there <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 453474647,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1721755375
    },
    {
        "content": "<p>Could anyone help me compile my code re Luke's parser? <span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> || <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span>  <span aria-label=\"bow\" class=\"emoji emoji-1f647\" role=\"img\" title=\"bow\">:bow:</span> <br>\nI don't understand how to turn a parser for a list of possibly quoted strings into a list of definitely unquoted strings. <a href=\"http://Core.map\">Core.map</a> doesn't do what I think it would, and I can't figure out a pass-through parser (in case the unquoting parser fails)</p>\n<div class=\"codehilite\"><pre><span></span><code>app [main] {\n    cli: platform &quot;https://github.com/roc-lang/basic-cli/releases/download/0.12.0/Lb8EgiejTUzbggO2HVVuPJFkwvvsfW6LojkLR20kTVE.tar.br&quot;,\n    parser: &quot;https://github.com/lukewilliamboswell/roc-parser/releases/download/0.7.1/MvLlME9RxOBjl0QCxyn3LIaoG9pSlaNxCa-t3BfbPNc.tar.br&quot;,\n}\n\nimport cli.Task\nimport cli.Stdout\nimport parser.Core exposing [Parser, many, oneOf, oneOrMore, const, skip, between, keep, apply, flatten, chompWhile, chompUntil, map, alt, sepBy]\nimport parser.String exposing [parseStr, codeunit, strFromUtf8, string, Utf8]\n\nmain =\n    (parseStr dependencyHead &quot;\\&quot;@adobe/css-tools@^4.3.2\\&quot;:&quot;)\n        |&gt; \\x -&gt;\n            when x is\n                Ok output -&gt; Str.joinWith output &quot;, &quot;\n                Err e -&gt;\n                    when e is\n                        ParsingFailure msg -&gt; &quot;ParsingFailure: $(msg)&quot;\n                        ParsingIncomplete msg -&gt; &quot;ParsingIncomplete: $(msg)&quot;\n        |&gt; Stdout.line!\n\nbetweenQuotes : Parser Utf8 Str\nbetweenQuotes =\n    const (\\value -&gt; value)\n        |&gt; skip (codeunit &#39;&quot;&#39;)\n        |&gt; keep (chompWhile (\\c -&gt; c != &#39;&quot;&#39;) |&gt; map strFromUtf8)\n        |&gt; skip (codeunit &#39;&quot;&#39;)\n\nuntilColon =\n    const (\\value -&gt; value)\n    |&gt; keep (chompWhile (\\c -&gt; c != &#39;:&#39;) |&gt; map strFromUtf8)\n    |&gt; skip (codeunit &#39;:&#39;)\n\ndependencyHead : Parser Utf8 (List Str)\ndependencyHead =\n    const (\\value -&gt; value)\n    |&gt; keep (untilColon |&gt; sepBy (codeunit &#39;,&#39;) |&gt; map (alt betweenQuotes (const \\x -&gt; x)))\n\nexpect parseStr dependencyHead &quot;\\&quot;@adobe/css-tools@^4.3.2\\&quot;:&quot; == Ok [&quot;@adobe/css-tools@^4.3.2&quot;]\nexpect parseStr dependencyHead &quot;mime-db@1.52.0, \\&quot;mime-db@&gt;= 1.43.0 &lt; 2\\&quot;:&quot; == Ok [&quot;mime-db@1.52.0&quot;, &quot;mime-db@&gt;= 1.43.0 &lt; 2&quot;]\n</code></pre></div>",
        "id": 453943655,
        "sender_full_name": "Vladimir Zotov",
        "timestamp": 1721912670
    },
    {
        "content": "<p>That issue is the last step before I get to a compiler bug, that only happens when the rest of my code uses a variant type of two items and compiles if I only have a variant of one XD</p>",
        "id": 453944466,
        "sender_full_name": "Vladimir Zotov",
        "timestamp": 1721912866
    },
    {
        "content": "<p>This works I think. It's probably not 100% what your looking for.</p>\n<p>Basically, I'd do that kind of string transformation inside the function we pass to <code>const</code> and just parse both kinds of strings the same.</p>\n<div class=\"codehilite\"><pre><span></span><code>app [main] {\n    cli: platform &quot;https://github.com/roc-lang/basic-cli/releases/download/0.12.0/Lb8EgiejTUzbggO2HVVuPJFkwvvsfW6LojkLR20kTVE.tar.br&quot;,\n    parser: &quot;https://github.com/lukewilliamboswell/roc-parser/releases/download/0.7.1/MvLlME9RxOBjl0QCxyn3LIaoG9pSlaNxCa-t3BfbPNc.tar.br&quot;,\n}\n\nimport cli.Task\nimport cli.Stdout\nimport parser.Core exposing [Parser, const, skip, keep, chompWhile, map, sepBy]\nimport parser.String exposing [parseStr, codeunit, strFromUtf8, Utf8]\n\nmain =\n    (parseStr dependencyHead &quot;\\&quot;@adobe/css-tools@^4.3.2\\&quot;:&quot;)\n        |&gt; \\x -&gt;\n            when x is\n                Ok output -&gt; Str.joinWith output &quot;, &quot;\n                Err e -&gt;\n                    when e is\n                        ParsingFailure msg -&gt; &quot;ParsingFailure: $(msg)&quot;\n                        ParsingIncomplete msg -&gt; &quot;ParsingIncomplete: $(msg)&quot;\n        |&gt; Stdout.line!\n\nuntilColon =\n    const (\\value -&gt; value)\n    |&gt; keep (chompWhile (\\c -&gt; c != &#39;:&#39;) |&gt; map strFromUtf8)\n    |&gt; skip (codeunit &#39;:&#39;)\n\ndependencyHead : Parser Utf8 (List Str)\ndependencyHead =\n\n    splitComma = \\str -&gt; Str.split str &quot;,&quot;\n\n    const \\strings -&gt;\n        strings\n        |&gt; List.map splitComma # not sure if you wanted this in a parser or here is ok??\n        |&gt; List.join\n        |&gt; List.map Str.trim\n        |&gt; List.map removeQuotes\n    |&gt; keep (untilColon |&gt; sepBy (codeunit &#39;,&#39;))\n\nexpect\n    actual = parseStr dependencyHead &quot;\\&quot;@adobe/css-tools@^4.3.2\\&quot;:&quot;\n    expected = Ok [&quot;@adobe/css-tools@^4.3.2&quot;]\n    actual == expected\n\nexpect\n    actual = parseStr dependencyHead &quot;mime-db@1.52.0, \\&quot;mime-db@&gt;= 1.43.0 &lt; 2\\&quot;:&quot;\n    expected = Ok [&quot;mime-db@1.52.0&quot;, &quot;mime-db@&gt;= 1.43.0 &lt; 2&quot;]\n    actual == expected\n\nremoveQuotes : Str -&gt; Str\nremoveQuotes = \\input -&gt;\n    if Str.startsWith input &quot;\\&quot;&quot; &amp;&amp; Str.endsWith input &quot;\\&quot;&quot; then\n        input\n        |&gt; Str.replaceFirst &quot;\\&quot;&quot; &quot;&quot;\n        |&gt; Str.replaceLast &quot;\\&quot;&quot; &quot;&quot;\n    else\n        input\n\nexpect removeQuotes &quot;@adobe/css-tools@^4.3.2&quot; == &quot;@adobe/css-tools@^4.3.2&quot;\nexpect removeQuotes &quot;\\&quot;@adobe/css-tools@^4.3.2\\&quot;&quot; == &quot;@adobe/css-tools@^4.3.2&quot;\n</code></pre></div>",
        "id": 454138690,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1721956024
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>$ roc test strings.roc\n0 failed and 4 passed in 1299 ms.\n</code></pre></div>",
        "id": 454138717,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1721956050
    },
    {
        "content": "<p>Haha, that was also my last idea, but I thought it's cheating to use string replace :-D</p>",
        "id": 454233701,
        "sender_full_name": "Vladimir Zotov",
        "timestamp": 1721980218
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"625587\">Vladimir Zotov</span> has marked this topic as resolved.</p>",
        "id": 454430965,
        "sender_full_name": "Notification Bot",
        "timestamp": 1722060116
    }
]