[
    {
        "content": "<p>Pardon me for the stupid question. But I don't really understand what am I doing wrong:</p>\n<p>This works:</p>\n<div class=\"codehilite\"><pre><span></span><code>ip = &quot;127.0.0.1&quot;\nurl = &quot;http://\\(ip)/win&amp;T=2&quot;\n</code></pre></div>\n<p>This does not</p>\n<div class=\"codehilite\"><pre><span></span><code>ip = &quot;127.0.0.1&quot;\nStr.concat &quot;IP: &quot; ip\n    |&gt; Stdout.line\n\nurl = &quot;http://\\(ip)/win&amp;T=2&quot;\n</code></pre></div>\n<p>with error</p>\n<div class=\"codehilite\"><pre><span></span><code>This looks like an operator, but it&#39;s not one I recognize!\n\n12│      ip = &quot;127.0.0.1&quot;\n13│      &quot;IP: \\(ip)&quot;\n14│          |&gt; Stdout.line\n15│\n16│      url = &quot;http://\\(ip)/win&amp;T=2&quot;\n             ^\n\nI have no specific suggestion for this operator, see TODO for the full\nlist of operators in Roc.⏎\n</code></pre></div>",
        "id": 412010317,
        "sender_full_name": "Dan",
        "timestamp": 1704833574
    },
    {
        "content": "<p>Slightly different code</p>\n<div class=\"codehilite\"><pre><span></span><code>12│       ip = &quot;127.0.0.1&quot;\n13│&gt;      Stdout.line &quot;IP: \\(ip)&quot;\n14│&gt;\n15│&gt;      url = &quot;http://\\(ip)/win&amp;T=2&quot;\n\nLooks like you are trying to define a function. In roc, functions are\nalways written as a lambda, like increment = \\n -&gt; n + 1.⏎\n</code></pre></div>",
        "id": 412010583,
        "sender_full_name": "Dan",
        "timestamp": 1704833688
    },
    {
        "content": "<p><code>Stdout.line</code> constructs a <code>Task</code>, but it doesn't run it right away. In order to do so and continue doing other stuff after, you can use <a href=\"https://www.roc-lang.org/packages/basic-cli/Task#await\"><code>Task.await</code></a> like this:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">ip</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"127.0.0.1\"</span>\n<span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">Stdout</span><span class=\"p\">.</span><span class=\"nx\">line</span><span class=\"w\"> </span><span class=\"s\">\"IP: \\(ip)\"</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">await</span>\n<span class=\"nv\">url</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"http://\\(ip)/win&amp;T=2\"</span>\n</code></pre></div>",
        "id": 412017259,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1704836695
    },
    {
        "content": "<p>The type of <code>Task.await</code> looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">await</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"nx\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">(a -&gt; Task c b) -&gt;</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"w\"> </span><span class=\"nx\">c</span><span class=\"w\"> </span><span class=\"nx\">b</span>\n</code></pre></div>\n<p>It takes a <code>Task</code> (in this case the one returned by <code>Stdout.line ...</code>), and a callback which takes the value produced by running the <code>Task</code> (in this case <code>{}</code>, since printing doesn't produce any meaningful values) and returns the next <code>Task</code>.</p>\n<p>The <code>&lt;-</code> syntax is called <a href=\"https://www.roc-lang.org/tutorial#backpassing\">Backpassing</a>, and it's just a convenient way to pass a callback to a function without increasing the indentation level.</p>\n<p>You could also write it like this without Backpassing:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">ip</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"127.0.0.1\"</span>\n\n<span class=\"nx\">Stdout</span><span class=\"p\">.</span><span class=\"nx\">line</span><span class=\"w\"> </span><span class=\"s\">\"IP: \\(ip)\"</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">await</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">url</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"http://\\(ip)/win&amp;T=2\"</span>\n\n<span class=\"w\">    </span><span class=\"c1\"># The rest of your code...</span>\n</code></pre></div>",
        "id": 412018927,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1704837440
    },
    {
        "content": "<p>Thanks! I was trying <code>Task.await</code> but this was needed:</p>\n<p><code>{} &lt;- ...</code></p>\n<p>I'm not yet completely understand why.</p>",
        "id": 412018939,
        "sender_full_name": "Dan",
        "timestamp": 1704837445
    },
    {
        "content": "<p>Ah, seems I need to tell Roc to \"discard\" I/O operation result.<br>\nThanks again!</p>",
        "id": 412019507,
        "sender_full_name": "Dan",
        "timestamp": 1704837697
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"679899\">Dan</span> has marked this topic as resolved.</p>",
        "id": 412019626,
        "sender_full_name": "Notification Bot",
        "timestamp": 1704837750
    },
    {
        "content": "<p>Yes. If instead you used a <code>Task</code> that produces values such as <a href=\"https://www.roc-lang.org/packages/basic-cli/Stdin\"><code>Stdin.line</code></a>, you'd give them a name instead of discarding them:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">input</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">Stdout</span><span class=\"p\">.</span><span class=\"nx\">line</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">await</span>\n</code></pre></div>",
        "id": 412019919,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1704837906
    }
]