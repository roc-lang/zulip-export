[
    {
        "content": "<p>hi , I want  to read  file  store it  somewhere and than let say use  it in  another  task but I don't know  how to  do that</p>",
        "id": 392384900,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1695325022
    },
    {
        "content": "<p>one  thing  I want  to  loop this  second  task</p>",
        "id": 392385129,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1695325122
    },
    {
        "content": "<p>This is an example with a mix of file io: <a href=\"https://github.com/roc-lang/roc/blob/main/examples/cli/file.roc\">https://github.com/roc-lang/roc/blob/main/examples/cli/file.roc</a></p>\n<p>Reading from a file is specifically: <code>contents &lt;- File.readUtf8 path |&gt; Task.await</code></p>\n<p>more docs here: <a href=\"https://www.roc-lang.org/packages/basic-cli/File\">https://www.roc-lang.org/packages/basic-cli/File</a></p>",
        "id": 392391407,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1695327981
    },
    {
        "content": "<p>great but  this does not wok for me, first of all I can't get result out of one  task  and pass it to the other  which is looping</p>",
        "id": 392442735,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1695360903
    },
    {
        "content": "<p>I would need to see more context to understand. Can you share code or a simplified example?</p>",
        "id": 392443006,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1695361061
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>    task =\n        path = Path.fromStr &quot;out.txt&quot;\n        contents &lt;- File.readUtf8 path |&gt; Task.await\n        Stdout.line &quot;I read the file back. Its contents: \\&quot;\\(contents)\\&quot;&quot;\n\n    Task.attempt task \\result -&gt;\n        when result is\n            Ok {} -&gt; Stdout.line &quot;Successfully wrote a string to out.txt&quot;\n            Err err -&gt;\n                msg =\n                    when err is\n                        FileWriteErr _ PermissionDenied -&gt; &quot;PermissionDenied&quot;\n                        FileWriteErr _ Unsupported -&gt; &quot;Unsupported&quot;\n                        FileWriteErr _ (Unrecognized _ other) -&gt; other\n                        FileReadErr _ _ -&gt; &quot;Error reading file&quot;\n                        _ -&gt; &quot;Uh oh, there was an error!&quot;\n\n                {} &lt;- Stderr.line msg |&gt; Task.await\n                Process.exit 1\n</code></pre></div>\n<p>I want to extract content file from previous and run something like that in the other task <br>\nto process it further</p>\n<div class=\"codehilite\"><pre><span></span><code>Task.loop {} \\_ -&gt; Task.map in_this_task_I_want_to_process_file_content Step\n</code></pre></div>",
        "id": 392449937,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1695364753
    },
    {
        "content": "<p>or  I want  to  run  this loop inside  </p>\n<div class=\"codehilite\"><pre><span></span><code>Task.attempt task \\result -&gt;\n</code></pre></div>\n<p>basically I have  no clue  how I could  encapsulate  or  queue   Task.attempt  with  other  tasks</p>",
        "id": 392450202,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1695364896
    },
    {
        "content": "<p>this way  works  more or less  </p>\n<div class=\"codehilite\"><pre><span></span><code>read =\n\n    path = Path.fromStr &quot;log.txt&quot;\n\n    hien &lt;- File.readUtf8 path |&gt; Task.await\n\n    _ &lt;- Stdout.line &quot;file read&quot; |&gt; Task.await\n\n    loopTask =\n\n    text &lt;- Task.await Stdin.line\n\n    Stdout.line &quot;You just entered: \\(hien)&quot;\n\n\n    Task.loop {} \\_ -&gt; Task.map loopTask Step\n\n\n\n\nTask.attempt read \\result -&gt;\n        when result is\n            Ok {} -&gt; Stdout.line &quot;Successfully wrote a string to out.txt&quot;\n            Err err -&gt;\n                msg =\n                    when err is\n                        FileWriteErr _ PermissionDenied -&gt; &quot;PermissionDenied&quot;\n                        FileWriteErr _ Unsupported -&gt; &quot;Unsupported&quot;\n                        FileWriteErr _ (Unrecognized _ other) -&gt; other\n                        FileReadErr _ _ -&gt; &quot;Error reading file&quot;\n                        _ -&gt; &quot;Uh oh, there was an error!&quot;\n\n                {} &lt;- Stderr.line msg |&gt; Task.await\n                Process.exit 1\n</code></pre></div>",
        "id": 392471155,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1695372766
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/examples/issues/87\">I've made an issue</a> to create/assemble some <code>Task.loop</code> examples with explanation.<br>\nDo you have any other ideas for how we could have made this easier for you <span class=\"user-mention\" data-user-id=\"568088\">@Artur Swiderski</span>?</p>",
        "id": 392484873,
        "sender_full_name": "Anton",
        "timestamp": 1695377299
    },
    {
        "content": "<p>I've also <a href=\"#narrow/stream/304641-ideas/topic/Basic.20cli.20error.20handling/near/392485363\">started a discussion</a> about another potential usability improvement.</p>",
        "id": 392485536,
        "sender_full_name": "Anton",
        "timestamp": 1695377559
    },
    {
        "content": "<p>I don't get idea of task at all, I am using it but I don't know what I am doing. I can't say the same  about C++ threads for example when I do understand what it means and how it relates to OS internals</p>",
        "id": 392495250,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1695380978
    },
    {
        "content": "<p>I see, Tasks are used in Roc because they allow us to separate \"dangerous\" and \"safe\" code. This makes it easier to create reliable programs. When writing to a file in for example python, you will by default not handle <a href=\"https://chat.openai.com/share/05f4e9e5-09f0-449b-b574-77f136fdc9d2\">any errors that can come up</a>. But it's not at all obvious that you are doing anything dangerous that has a significant chance of crashing your program. Depending on the application, crashing can range from being annoying to risking lives. With Tasks, we make it obvious what can go wrong and give the programmer the opportunity to handle an error without crashing the program.</p>\n<p>In the future, tasks will also allow us to record the running of your program so you don't have to manually mock things for tests.<br>\nTasks also give us the opportunity to never need to run specific tests unnecessarily because we can be sure the result has not changed.<br>\nWhen checking the source code of a Roc program for security or privacy risks, tasks allow you to focus your attention on the dangerous parts of the code.</p>\n<p>I am working on a new Roc platform named roc-script that takes a less strict approach with the error handling intended for less \"sensitive/critical programs\" like scripts. That should make programming easier compared to the basic-cli platform.</p>\n<p>Feel free to ask me more questions :)<br>\nI've also created three issues to explain the benefits of <code>Task</code> in more places.</p>",
        "id": 392505746,
        "sender_full_name": "Anton",
        "timestamp": 1695385037
    },
    {
        "content": "<p>I'm not sure \"dangerous\" is a good term especially given it sounds kinda like \"unsafe\", which has a very specific meaning.</p>\n<p>Fundamentally, a task must wrap any effect that your program can do. Generally speaking, an effect means any sort of input/output to the program (network requests, file io, stdin/out/err, requesting a random seed from the OS, getting the time, etc)</p>\n<p>If something is wrapped in a task it doesn't necessarily return the same result. For example, if you read the same file twice it may give you totally different results.</p>\n<p>Task is the only special part of roc where that can happen. All of the rest of roc can be fully reasoned about. If you have a roc function without any tasks in the type signature, no matter how many times you call it, if you pass in the same args, you will get the same result. This is huh for understanding and debugging a program.</p>\n<p>Side note: Tasks being designed to expose many classes of errors is an option but not strictly required. One could design tasks with no errors that instead always crash (essentially what roc-scripts will do). This is another reason I am not sure \"dangerous\" is the best wording.</p>",
        "id": 392535585,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1695394050
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"568088\">@Artur Swiderski</span>, your example that works more or less looks correct. You could also use the state variable of <code>Task.loop</code> to pass the file into the loop if wanted. Or just define the entire loopTask as part of the lambda passed to <code>Task.loop</code>. Any specific questions you have around it?</p>",
        "id": 392536522,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1695394286
    },
    {
        "content": "<p>thx  I will live with what I have  for now</p>",
        "id": 392566824,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1695402258
    },
    {
        "content": "<p>thx for  clarification btw. so task is an abstract concept not real thing like thread. I explains why it is so difficult for me  to grasp it</p>",
        "id": 392567443,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1695402464
    },
    {
        "content": "<p>and one more  thing  how  task relates to main , and  how roc main relates  to main in C/C++</p>",
        "id": 392568023,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1695402674
    },
    {
        "content": "<p>In essentially all platforms, main is a task. So it is an operation or a chain of operations to run.</p>\n<p>At least for the roc-cli platform main, you can think of main as essentially the same thing as c/c++ main.</p>",
        "id": 392573580,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1695404889
    },
    {
        "content": "<p>I think the c/c++ main can be seen as a \"real main\", the roc main is kind of fake. The roc platform (like basic-cli) contains the real main and this one calls the roc main function.</p>\n<p>The platform is \"fixed\" and expects a roc main function with a specific signature <code>Task {} I32</code>. The I32 is the exit code of your program, like you would do <code>return 1</code> in C++. The <code>{}</code> is empty because you don't want to pass a value to the platform if all operations succeeded. The roc main signature is not just <code>I32</code> like in C++ because we want to clearly indicate \"effectful\" code with a <code>Task</code>. Only the platform can execute the Task.</p>",
        "id": 392581428,
        "sender_full_name": "Anton",
        "timestamp": 1695408253
    },
    {
        "content": "<p>about signatures what  does it even mean:  main : Task {} []  or  Task {} I32 , clearly something different than function, at  the same time since C everything what I can execute is function there is no confusion. How to pass parameters  to it(like  passing parameters to application)? What is the way to chain tasks?  can I just run them in parallel if needed. How task produces its return  value it is the value of last executed statement ?  What does it  return in that  case  \"Task.loop {} \\_ -&gt; <a href=\"http://Task.map\">Task.map</a> loopTask Step\"</p>",
        "id": 392662774,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1695458725
    },
    {
        "content": "<p><del><a href=\"https://github.com/roc-lang/examples/blob/main/examples/TaskUsage/main.roc\">this example from roc-lang/examples</a> has some extra explanation on Tasks.</del></p>\n<p>Update: <a href=\"https://lukewilliamboswell.github.io/TaskUsage/README.html\">TaskUsage</a> I just pushed a temporary build of the examples so you can see it rendered.</p>",
        "id": 392663091,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1695458845
    },
    {
        "content": "<p>It does get rendered nicely if you build the examples site, but I dont think we have a good link I can share RN, hopefully on the next site update all the examples will be available.</p>",
        "id": 392663237,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1695458891
    },
    {
        "content": "<p>Basically <code>Task {} I32</code> means that it will succeed and return an empty record <code>{}</code> or fail and return an 32-bit integer.</p>",
        "id": 392663342,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1695458939
    },
    {
        "content": "<blockquote>\n<p>does it even mean: <code>main : Task {} []</code></p>\n</blockquote>\n<p>Here we say that the value main has the type <code>Task {} []</code>. Given that it takes no arguments it is indeed not really a function but a value. Similar to what Luke said, in the case of <code>Task a b</code>, <code>a</code> is the success value and <code>b</code> is the error value.</p>\n<blockquote>\n<p>How to pass parameters to it(like passing parameters to application)?</p>\n</blockquote>\n<p>We currently have an <a href=\"https://github.com/roc-lang/roc/issues/5701\">issue</a> with passing command line arguments to the application but <a href=\"https://github.com/roc-lang/basic-cli/blob/0.5.0/examples/argsBROKEN.roc\">here is the code to do that</a>.</p>\n<blockquote>\n<p>What is the way to chain tasks?</p>\n</blockquote>\n<p>Luke's <a href=\"https://lukewilliamboswell.github.io/TaskUsage/README.html\">example</a> explains that.</p>\n<blockquote>\n<p>can I just run them in parallel if needed.</p>\n</blockquote>\n<p>We plan to support that in the future.</p>\n<blockquote>\n<p>How task produces its return value it is the value of last executed statement? </p>\n</blockquote>\n<p>The return value will be produced by the last line of code in the function.</p>\n<blockquote>\n<p>What does it return in that case \"Task.loop {} \\_ -&gt; <a href=\"http://Task.map\">Task.map</a> loopTask Step\"</p>\n</blockquote>\n<p>The <a href=\"https://www.roc-lang.org/packages/basic-cli/0.5.0/Task#loop\"><code>loop</code> function</a> returns a Task with either a success value or an error value.</p>",
        "id": 392671662,
        "sender_full_name": "Anton",
        "timestamp": 1695462451
    },
    {
        "content": "<p>Please  link  this  doc-s  <a href=\"https://www.roc-lang.org/packages/basic-cli/0.5.0/\">https://www.roc-lang.org/packages/basic-cli/0.5.0/</a>  better,  I was  even not aware of its existence although I am using the language  from time  to time  few months now</p>",
        "id": 392690761,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1695471363
    },
    {
        "content": "<p>I'm happy to, they are linked on the <a href=\"https://github.com/roc-lang/basic-cli\">platform's github repo</a>, do you have any suggestions where else they could be linked?</p>",
        "id": 392693959,
        "sender_full_name": "Anton",
        "timestamp": 1695472652
    },
    {
        "content": "<p>I think that, when  I go  <a href=\"https://www.roc-lang.org/tutorial\">https://www.roc-lang.org/tutorial</a>  and  press doc button this doc  should be there available  too. You have to be aware  that,  at least initially for most users  roc has potential to be at most like second, third language. It means  those people will dig just enough to get  things  done. So tutorial  and  doc pointed there, will be everything they are using. If  some  essential  information is missing it may cause frustration and  discouragement.<br>\nIt is  trade off between my curiosity of new things  and  the time I have to spend. That's the reason why  information has to be linked  well, many  times in the past  when I couldn't complete  something like within 3-4 hours, because of lack of  knowledge I just  drop it altogether,  because this new hot thing was not essential to me. and  roc is one of  those  things  I think is nice  but  is novelty and  I can  do without it.</p>",
        "id": 392694623,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1695473170
    },
    {
        "content": "<p>on  other  question  when I want  to  loop function let say  100k times   I can  do it by recurrence, but I see that  playing  with  Task.loop could  also  do the  trick, which  is more  efficient from  performance  point of view?</p>",
        "id": 392694770,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1695473306
    },
    {
        "content": "<p>Can you share what kind of function you want to loop 100k times? That will allow me to give the best recommendation</p>",
        "id": 392695078,
        "sender_full_name": "Anton",
        "timestamp": 1695473571
    },
    {
        "content": "<p>actual function is  complex  but in essence is  something as  follows   </p>\n<div class=\"codehilite\"><pre><span></span><code>fun = \\ list, cnt -&gt;\n\nfun  (List.append  list  1)  (cnt -1)\n</code></pre></div>\n<p>in real  application  I am accumulating more  complex  result in a list(few lists in struct), there  are some  calculation involved, but it boils down  to this at the  end</p>",
        "id": 392697146,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1695474666
    },
    {
        "content": "<p>In the real function are you using another function that returns a Task? A function that does not use any tasks will be faster.</p>",
        "id": 392701178,
        "sender_full_name": "Anton",
        "timestamp": 1695476729
    },
    {
        "content": "<p>no  side effects in that  function  so no tasks</p>",
        "id": 392701385,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1695476832
    },
    {
        "content": "<p>Ok, then you will not need Task.loop. You probably want to use something like <a href=\"http://List.map\">List.map</a>, List.walk, List.walkWithIndex...<br>\nFeel free to share the whole program, lots of people here like performance optimization.<br>\nFor maximum speed make sure to use <code>roc build --optimize yourprogram.roc</code> :)</p>",
        "id": 392702282,
        "sender_full_name": "Anton",
        "timestamp": 1695477302
    },
    {
        "content": "<p>If you did have a Task to start with and then want to use your function without Task, you probably want to also use <a href=\"https://www.roc-lang.org/packages/basic-cli/0.5.0/Task#map\">Task.map</a>.</p>",
        "id": 392702420,
        "sender_full_name": "Anton",
        "timestamp": 1695477430
    },
    {
        "content": "<p>ok thx roc build --optimize   what does it do ?</p>",
        "id": 392707339,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1695481379
    },
    {
        "content": "<p>It makes LLVM do a lot more optimization, we don't enable it by default because it also takes a lot longer to build.<br>\nRoc code is converted to an LLVM representation and LLVM converts that to machine code.</p>",
        "id": 392709338,
        "sender_full_name": "Anton",
        "timestamp": 1695482792
    },
    {
        "content": "<p>The C++ compiler also produces this LLVM representation.</p>",
        "id": 392710000,
        "sender_full_name": "Anton",
        "timestamp": 1695483112
    }
]