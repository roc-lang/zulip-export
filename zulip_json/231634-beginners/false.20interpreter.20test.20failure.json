[
    {
        "content": "<p>I just tried to run the tests on macOS. All passed but one. Is this expected? This is using LLVM 12.0.1,  Zig 0.8.1 and Rust 1.56.0.</p>\n<p><a href=\"/user_uploads/22008/xPznf5o7K23D_Ix75OWPiZ3k/Screenshot-2021-10-24-at-15.24.43.png\">Screenshot-2021-10-24-at-15.24.43.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/xPznf5o7K23D_Ix75OWPiZ3k/Screenshot-2021-10-24-at-15.24.43.png\" title=\"Screenshot-2021-10-24-at-15.24.43.png\"><img src=\"/user_uploads/22008/xPznf5o7K23D_Ix75OWPiZ3k/Screenshot-2021-10-24-at-15.24.43.png\"></a></div>",
        "id": 258878787,
        "sender_full_name": "Kevin Hovsäter",
        "timestamp": 1635081894
    },
    {
        "content": "<p>definitely not expected! <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>\n<p>any ideas <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span>?</p>",
        "id": 258878849,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1635081980
    },
    {
        "content": "<p>Not off the top of my head. I guess it was never tested on Marcos, but I wouldnt expect it to be broken. Can some try to repro to see if it is broken on all Macs?</p>",
        "id": 258884001,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1635089826
    },
    {
        "content": "<p>works for me on Big Sur on an Intel Mac</p>",
        "id": 258884233,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1635090210
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"452574\">@Kevin Sjöberg</span> are you on an Intel Mac or M1?</p>",
        "id": 258884246,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1635090229
    },
    {
        "content": "<p>also which macOS version?</p>",
        "id": 258884286,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1635090248
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/231634-beginners/topic/error.20messages/near/258884246\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"452574\">Kevin Sjöberg</span> are you on an Intel Mac or M1?</p>\n</blockquote>\n<p>I'm on an Intel Mac. Running macOS Big Sur, 11.6.</p>",
        "id": 258884540,
        "sender_full_name": "Kevin Hovsäter",
        "timestamp": 1635090609
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> this is what I see when I manually run that test case.</p>\n<p><a href=\"/user_uploads/22008/ubbXUCXDu5nY-JpggkFR4LOw/Screenshot-2021-10-24-at-17.54.45.png\">Screenshot-2021-10-24-at-17.54.45.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/ubbXUCXDu5nY-JpggkFR4LOw/Screenshot-2021-10-24-at-17.54.45.png\" title=\"Screenshot-2021-10-24-at-17.54.45.png\"><img src=\"/user_uploads/22008/ubbXUCXDu5nY-JpggkFR4LOw/Screenshot-2021-10-24-at-17.54.45.png\"></a></div>",
        "id": 258884774,
        "sender_full_name": "Kevin Hovsäter",
        "timestamp": 1635090920
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"452574\">@Kevin Sjöberg</span> never mind, I just realized I re-ran the tests on a branch that didn't have the false interpreter example merged in yet - when I ran on <code>trunk</code> I was able to reproduce what you're seeing <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 258884899,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1635091105
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> great. Glad it's not just me! <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 258884907,
        "sender_full_name": "Kevin Hovsäter",
        "timestamp": 1635091143
    },
    {
        "content": "<p>yeah, although not sure what the issue might be <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 258885035,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1635091261
    },
    {
        "content": "<p>actually, I have one theory - there are currently two tests failing on macOS that I need to track down</p>",
        "id": 258885058,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1635091302
    },
    {
        "content": "<p>(we don't have macOS CI set up right now, only Linux, so OS-specific regressions happen from time to time)</p>",
        "id": 258885070,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1635091318
    },
    {
        "content": "<p>I wish I could be more helpful, but I literally just touched Rust for the first time a moment ago. The error message seem to indicate we're trying to free memory not allocated through malloc. Seems weird it would be platform specific though.</p>",
        "id": 258885072,
        "sender_full_name": "Kevin Hovsäter",
        "timestamp": 1635091320
    },
    {
        "content": "<p>yeah we've seen something like that happen once in the past</p>",
        "id": 258885148,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1635091427
    },
    {
        "content": "<p>if I remember right, it turned out that we were always doing something wrong, but for some reason the way Linux implements malloc and free, it wasn't reporting the error (and maybe the memory happened to be untouched, so the use-after-free happened to not cause a problem in practice)</p>",
        "id": 258885217,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1635091494
    },
    {
        "content": "<p>Is it fair to assume the error must be in the Roc implementation of the False interpreter given that the platform compiled correctly (I assume a use-after-free shouldn't really be possible in Rust-land either, right?)?</p>",
        "id": 258885612,
        "sender_full_name": "Kevin Hovsäter",
        "timestamp": 1635092020
    },
    {
        "content": "<p>in general a UAF is either a bug in the Roc compiler or a bug in the platform; it shouldn't be possible to get one from writing application code wrong (the false interpreter being the application in this case)</p>",
        "id": 258885885,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1635092381
    },
    {
        "content": "<p>almost certainly this is a compiler bug, although it is possible to get a UAF from Rust, depending on what you're doing <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 258885894,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1635092400
    },
    {
        "content": "<p>Got it. Thanks for explaining. This is all new to me. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 258885954,
        "sender_full_name": "Kevin Hovsäter",
        "timestamp": 1635092444
    },
    {
        "content": "<p>totally! That's why we have the <a class=\"stream\" data-stream-id=\"231634\" href=\"/#narrow/stream/231634-beginners\">#beginners</a> channel! <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 258886037,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1635092542
    },
    {
        "content": "<p>Oh this makes sense now.</p>",
        "id": 258888017,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1635095201
    },
    {
        "content": "<p>If Mac os fails on a memory leak, that is different behavior than Linux. This test currently doesn't run with valgrind because it has a memory leak.</p>",
        "id": 258888041,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1635095251
    },
    {
        "content": "<p>I guess i forgot to dig into/file a bug related to the false app having a memory leak.</p>",
        "id": 258888112,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1635095301
    },
    {
        "content": "<p>aha! Yeah would be great to have an issue for that <span aria-label=\"100\" class=\"emoji emoji-1f4af\" role=\"img\" title=\"100\">:100:</span></p>",
        "id": 258889051,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1635096686
    },
    {
        "content": "<p>Pretty sure the rust ffi is at least partially to blame</p>",
        "id": 258889506,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1635097385
    },
    {
        "content": "<p>E.g. we learned recently that only extern \"c\" fn s are ffi safe</p>",
        "id": 258889530,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1635097437
    },
    {
        "content": "<p>Yeah, it looks to be all rust related, working on a fix</p>",
        "id": 258890860,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1635099304
    },
    {
        "content": "<p>Out of curiosity, how do you go about debugging something like this? Valgrind seems useful but I’ve had no luck getting it to work properly on macOS.</p>",
        "id": 258893956,
        "sender_full_name": "Kevin Hovsäter",
        "timestamp": 1635103910
    },
    {
        "content": "<p>I almost always use linux, so no tips on getting valgrind working on macos, but in general, lldb/gdb and valgrind are quite useful for getting context around the location leaks are happening and investigating the instructions generated. That being said, a lot of the debugging is based on context of were the app could be allocating/deallocating memory. In this case, part of the bug is caused by rust dropping data that roc later tried to free.</p>",
        "id": 258894408,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1635104529
    },
    {
        "content": "<p>I'm not sure that is the most useful answer, but I don't really have specific steps.</p>",
        "id": 258894428,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1635104553
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"452574\">Kevin Sjöberg</span> <a href=\"#narrow/stream/231634-beginners/topic/false.20interpreter.20test.20failure/near/258878787\">said</a>:</p>\n<blockquote>\n<p>I just tried to run the tests on macOS. All passed but one. Is this expected? This is using LLVM 12.0.1,  Zig 0.8.1 and Rust 1.56.0.</p>\n<p><a href=\"/user_uploads/22008/xPznf5o7K23D_Ix75OWPiZ3k/Screenshot-2021-10-24-at-15.24.43.png\">Screenshot-2021-10-24-at-15.24.43.png</a></p>\n</blockquote>\n<p>Back to this issue, I'm also seeing this on MacOS (not sure about other OSes). It seems like the arguments are not forwarded correctly to the application when using cargo test / cargo run. When I edit the platform to print the args it only has the first argument to the executable and not the executable name (which is the first arg of std::env::args when run standalone).</p>",
        "id": 258897073,
        "sender_full_name": "Tim Whiting",
        "timestamp": 1635107832
    },
    {
        "content": "<p>When using <code>cargo run</code> you need to separate the file name with a <code>--</code> like <code>cargo run examples/false-interpreter/False.roc -- examples/false-interpreter/examples/hello.false</code></p>",
        "id": 258908096,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1635124257
    },
    {
        "content": "<p>That may be the cause of the specific issue you are seeing</p>",
        "id": 258908106,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1635124276
    }
]