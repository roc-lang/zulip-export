[
    {
        "content": "<p>Roc beginner here</p>\n<p>From <a href=\"https://www.roc-lang.org/platforms\">https://www.roc-lang.org/platforms</a>, I get the notion that \"platforms\" really modularize Roc's capabilities. </p>\n<p>The stdlib doesn't ship with concurrency primitives, but if someone wanted to implement Golang-esque Channels or an Actor Model, platforms would be the way to do that?</p>",
        "id": 505891989,
        "sender_full_name": "Undefined Behavior",
        "timestamp": 1742078247
    },
    {
        "content": "<p>Yeah thats the plan <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 505893258,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1742079298
    },
    {
        "content": "<p>that's so cool!</p>",
        "id": 505893444,
        "sender_full_name": "Undefined Behavior",
        "timestamp": 1742079453
    },
    {
        "content": "<p>Yeah, its going to really cool when we're back at the stage with a working zig compiler people can start building platforms again. We've learnt a lot about how to architect things so its much easier and more performant. I'm pretty sure we'll see lots of awesome experimental platforms soon, testing out different ideas and ways to use roc.</p>",
        "id": 505896359,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1742081948
    },
    {
        "content": "<p>Hey all! </p>\n<p>Just figured I add to this topic... First off, amazing language, love the overall idea/syntax/etc. (I'm a big Elm fan, also love Elixir.)</p>\n<p>So, yeah, I guess I have a question re: platform concept. It seems like the idea is that an application has one and only one \"platform\"?</p>\n<p>I'm not 100% sure this makes total sense to me? I'm sure this has all been debated and discussed at length, so I apologize in advance if this is just a rehashing of old dialogues!</p>\n<p>Take two examples. First, Python. The way most people use Python is more like a wrapper to other native code, e.g. C and bit of Fortran  (Numpy), C++ &amp; CUDA (PyTorch), Rust (Polars), etc.</p>\n<p>Second, the NodeJS alternative Bun, which uses Zig as the glue. If you go to their home page, they are touting Bun's performance on three things: Express (e.g. webserver), Postgres, and WebSockets.</p>\n<p>The Bun webserver is literally µWebSockets (written in C++), which I think is a bit... uncool? that they don't really say that, and the websocket server is likewise literally µSockets (written in C), again, odd that they don't spell that out, while Postgres in an internal Zig library.</p>\n<p>My point is, that from the user's perspective, you just import them as regular libraries and use them, unaware that they are written in different languages (C++, C and Zig) under the hood.</p>\n<p>(I get that Zig is amazing at gluing all this together!)</p>\n<p>But I guess my point is that, personally, the idea of having a single \"server platform\" that has all of these things baked in (e.g. web, ws, sql, etc) seems logical? And likewise, that you could then add your own independently without having to edit the main \"platform\"?</p>\n<p>As opposed to having a bunch of independent backends (platforms) that only do a small part of what you need? Like why is the \"webserver\" platform different from the \"cli\" platform? </p>\n<p>In my experience, backend code evolves, so at first may only need one thing (e.g. web server), but then you need access to a db, local file access, a pdf generator, S3 access, a job queue, ftp access, image generators, an in-memory db, etc. So if each of those things require side effects, then it seems like you need a way to add them w/o requiring someone to understand the \"platform\"? For example, maybe the main platform is Rust, but I am XYZ programmer and want to use another language for a job queue.</p>\n<p>For me, I mentally compare Roc against the various other backend language and ecosystems like Python, Node, Elixir, Rust, Go, etc. , and am just thinking about how the Roc platform concept either helps or hinders the idea of using Roc as a potential replacement for say Node in the long term.</p>\n<p>Thanks in advance for thoughts! :)</p>",
        "id": 511970606,
        "sender_full_name": "Adam Forbes",
        "timestamp": 1744599397
    },
    {
        "content": "<p>Two core thoughts here. Just to give a super quick answer. One more theoretical and one more technical.</p>\n<p>Firstly, think of Elm. A gigantic part of the reason elm is amazing is that it has exactly one \"platform\". Elm curates your entire experience in building a web app. This curation is what leads to elm being an amazing and delightful experience. Any time you have to leave the curation bubble and interact with JS, life gets worse. Roc is the same way. It just has many potential platforms. Each platform tries to curate in a way to make an amazing experience. The platform can still add escape hatches if it wants (raw access to os primitives, libffi support, etc). But using those escape hatches will be painful in comparison to staying within the curated experience. Since roc is such a young language, most platforms only have the curated expecience (that said, the curation is not always the best and as nice as something like elm).</p>\n<p>On the technical side, ultimately roc is producing a single executable. An executable can only have one main function and has to compile into a single binary on the machine. The platform controls all of this. As such, two platforms in one executable does not make technical sense. How would I create an application with two main functions? which would run?</p>",
        "id": 511974248,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744601868
    },
    {
        "content": "<p>So one platform is more of a fundamental constraint. That said, we could definitely make escape hatches easier if we wanted (we don't though).</p>",
        "id": 511974327,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744601916
    },
    {
        "content": "<p>One could make the ultimately flexible roc platform if they wanted, it would be a main function and only expose a wrapper around <a href=\"https://sourceware.org/libffi/\">libffi</a>. With that, all c ffi compatible code would be accessible. It would be a horrible experience, but it would fundamentally be able to talk to essentially all software and do anything. No platform yet exposes <code>libffi</code>, but I expect it to eventually happen for a super flexible escape hatch.</p>",
        "id": 511974509,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744602039
    },
    {
        "content": "<p>I think another aspect of this is the ecosystem being pure roc... the boundary for API's moves a little up to a higher abstraction. So platforms will tend to provide lower level primitives, and that means more functionality can be provided by cross-platform libraries. </p>\n<p>For example, any platforms that provide TCP-like primitives can probably support a large number of roc packages and functionality from interfacing with SQL servers, sending HTTP requests, etc.</p>\n<p>From an app authors perspective the focus in more on higher level functionality and integrating libraries.</p>\n<p>If more flexibility is required than the platform (or a cross-platform package) provides, I expect it to be common to fork the platform and easily implement customised parts for a particular use-case.</p>",
        "id": 511975148,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1744602459
    },
    {
        "content": "<p>Cool. Makes sense! Yes, that is a good analogy re: Elm and JS.</p>\n<p>Also, the single executable... interesting...</p>\n<p>Yeah, I mean (now responding to Luke), if the whole goal of Roc is to be super-fast (e.g. faster than Go, I believe Richard said), then the idea of providing a platform with a low level set of system primitives (including TCP, etc) would encourage the writing of a web server in Roc, websockets in Roc, sql client in Roc, etc.</p>\n<p>Personally, the idea of forking a platform sounds seems... counter-intuitive? I'd think you'd want a small number of very low level, bulletproof platforms? Like \"server\", \"wasm\", \"embedded\", \"browser\", that kind of thing?</p>\n<p>Anyway, thanks for the thoughts!</p>",
        "id": 511976006,
        "sender_full_name": "Adam Forbes",
        "timestamp": 1744603067
    },
    {
        "content": "<p>Yeah, a lot of possiblities. One is the low level apis and all roc. Another is more high level bespoke experiences, but maybe with more restrictions. I think it will be a mix of both in practice depending on the exact goals</p>",
        "id": 511976648,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744603466
    },
    {
        "content": "<p>I think it's a nice feature that both are totally reasonable options with Roc and have different trade-offs. </p>\n<p>I can start with a friendly batteries included web-server, and if my needs outgrow that I can roll over the top with an more customised platform that suits my needs (tuned for performance or provides unique capabilities).</p>",
        "id": 511979569,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1744605473
    },
    {
        "content": "<p>Ok but imagine I need a redis server, a mysql db, a web server and say... an access to the sound card. Then I have to create my own platform ?</p>",
        "id": 512016531,
        "sender_full_name": "Tib",
        "timestamp": 1744619451
    },
    {
        "content": "<ul>\n<li>I've never used redis but I believe <a href=\"https://roc-lang.github.io/basic-webserver/Tcp/\">TCP</a> could be used.</li>\n<li>In the future, mysql db support would be added to <a href=\"https://github.com/roc-lang/basic-webserver\">basic-webserver</a> or to a yet to be created industrial-webserver. Alternatively, on e.g. debian-based linux, the package <code>mysql-server</code> could also be used with TCP.</li>\n<li>Can you provide a specific example in which sound card access would be needed that could not be done with <a href=\"https://roc-lang.github.io/basic-webserver/Cmd/\">Cmd</a>?</li>\n</ul>",
        "id": 512032371,
        "sender_full_name": "Anton",
        "timestamp": 1744623503
    },
    {
        "content": "<p>Cool. Yeah, Cmd is a necessary escape hatch, and could handle lots of \"fork/exec\" stuff, e.g. calling ffmpeg, etc. As long as you use Cmd for \"slow\" stuff &amp; have a worker pool in front of it, should be fine.</p>\n<p>I guess it comes down to really asking the question: \"What is the first world real use-case for Roc?\"</p>\n<p>For example, Elixir was trying to replace Ruby on Rails. So the first real world \"test\" of the Elixir language was the creation of the Ecto library, an ORM for sql, as that was seen as a fundamental requirement to build a web server backends and ultimately replace rails.</p>\n<p>As everything I work on tends to be... API driven? E.g. web server serving JSON, HTML, handling Websockets &amp; calling a bunch of stuff on the backend behind the scenes, I look at languages through that lens. (Obviously Async + green threads (or imitate Tokio) is all key for this kind of stuff.) As opposed to writing a command line util, etc.</p>\n<p>So that's why when I view of Roc, I am looking at to see how it would ultimately compare to say Node, Phoenix/Elixir, Go, etc.</p>\n<p>Maybe that's not the goal! Maybe the goal is embedded dev! Or build tools like Vite. Or writing compilers, like Microsoft just moved the Typescript compiler to Go. Or writing GPU code, like Mojo. Etc.</p>\n<p>But in general, I think working backward from a goal is a good strategy :)</p>\n<p>I guess with the Platform concept, the idea is you can kick this can down the road? E.g. once the language and Platform interfaces is solid, then someone can write an \"async networking platform\" that would allow someone to build a batteries-included web framework?</p>",
        "id": 512073630,
        "sender_full_name": "Adam Forbes",
        "timestamp": 1744635638
    },
    {
        "content": "<p>Just adding two cents here. The way I see it, in Elm you kind of already have this \"\"platforms\"\" concept. I recently had to do a headless Elm application and I ended up using <a href=\"https://package.elm-lang.org/packages/elm/core/latest/Platform#worker\">Platform.worker</a> instead of <a href=\"https://package.elm-lang.org/packages/elm/browser/latest/Browser#application\">Browser.application</a>. <br>\nIt's still Elm, you just don't get a <code>view</code> function. <br>\nWhat I love about the ROC idea on platforms is that I can see in one place (Main module) where have we taken the \"capabilities\" from the platform and to which libraries/functions have they been passed to. Please don't ever let go of that core principle 🙏🏻</p>",
        "id": 512074439,
        "sender_full_name": "Fábio Beirão",
        "timestamp": 1744635855
    },
    {
        "content": "<blockquote>\n<p>But in general, I think working backward from a goal is a good strategy :)</p>\n</blockquote>\n<p>I like exploration, we've got this pretty unique setup, let's explore where it's strength and weaknesses are. Relatedly on this philosophy, I love the book \"Why Greatness Cannot Be Planned\".</p>",
        "id": 512079531,
        "sender_full_name": "Anton",
        "timestamp": 1744637175
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/channel/231634-beginners/topic/Platform.20Clarification/near/512079531\">said</a>:</p>\n<blockquote>\n<p>I love the book \"Why Greatness Cannot Be Planned\".</p>\n</blockquote>\n<p>Will check it out! Love the concept! :)</p>",
        "id": 512080050,
        "sender_full_name": "Adam Forbes",
        "timestamp": 1744637299
    },
    {
        "content": "<p>An \"async networking platform\" may now be possible with atomic refcounting, cc <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span>. But it currently requires significant expertise or a lot of motivation and it's not a priority for the core team right now.</p>",
        "id": 512080183,
        "sender_full_name": "Anton",
        "timestamp": 1744637335
    },
    {
        "content": "<p>Yeah, should be possible to build now. You could theoretically unleash the full power of go as a platform for roc.</p>",
        "id": 512157595,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1744658794
    },
    {
        "content": "<p>You could probably use something like <a href=\"https://github.com/anthdm/hollywood\">https://github.com/anthdm/hollywood</a> as inspiration</p>",
        "id": 512446808,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744770075
    },
    {
        "content": "<p>Accessible actors in Roc could be something people really enjoy, the mental model is so much easier compared to how threads are typically used.</p>",
        "id": 512504561,
        "sender_full_name": "Anton",
        "timestamp": 1744795281
    },
    {
        "content": "<p>In the dotnet ecosystem I am really enjoying Microsoft Orleans (virtual actors) <a href=\"https://learn.microsoft.com/en-us/dotnet/orleans/overview\">https://learn.microsoft.com/en-us/dotnet/orleans/overview</a><br>\nIt kind of side-steps the whole supervision tree from Erlang/Akka, of course with its own trade-offs. But the mental model did indeed click hard (hard to go back <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>)</p>",
        "id": 512507762,
        "sender_full_name": "Fábio Beirão",
        "timestamp": 1744796217
    },
    {
        "content": "<p>Implementing an actor model platform for Roc is one of my main goals (or at least to see one be implemented)</p>",
        "id": 512522527,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744800823
    },
    {
        "content": "<p>Just helping the language be stable syntax-wise before I even start on it</p>",
        "id": 512522723,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744800874
    },
    {
        "content": "<p>A Purely Functional Actor system is my dream</p>",
        "id": 512522964,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744800953
    },
    {
        "content": "<p>Imagine being able to property test all the concurrent behaviors of every component of your system...</p>",
        "id": 512523191,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744801019
    },
    {
        "content": "<p>I like to think of it as a bunch of little Elm programs communicating with type safe messages in a massively concurrent way</p>",
        "id": 512523453,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744801109
    },
    {
        "content": "<p>That sells it well :) (If you know Elm <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> )</p>",
        "id": 512523607,
        "sender_full_name": "Anton",
        "timestamp": 1744801164
    },
    {
        "content": "<p>I hope it will.  I tried to build it from soup to nuts myself, but I'm much happier doing it in steps with this community</p>",
        "id": 512523805,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744801213
    },
    {
        "content": "<p>You could also say \"communicating memory-isolated state machines\"</p>",
        "id": 512523985,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744801271
    },
    {
        "content": "<p>Or \"event-driven architecture in the small\"</p>",
        "id": 512524364,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744801394
    },
    {
        "content": "<blockquote>\n<p>\"communicating memory-isolated state machines\"</p>\n</blockquote>\n<p>This seems the coolest</p>",
        "id": 512524680,
        "sender_full_name": "Anton",
        "timestamp": 1744801486
    },
    {
        "content": "<blockquote>\n<p>\"communicating memory-isolated state machines\"</p>\n</blockquote>\n<p>How familiar are you with Erlang processes? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 512528890,
        "sender_full_name": "Fábio Beirão",
        "timestamp": 1744802795
    },
    {
        "content": "<p>That’s the point. processes are (roughly) Actors</p>",
        "id": 512694653,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744840674
    },
    {
        "content": "<p>They would be true Actors if they guaranteed in order processing of messages</p>",
        "id": 512694743,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744840709
    },
    {
        "content": "<p>And that all messages are handled</p>",
        "id": 512695331,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744840969
    },
    {
        "content": "<blockquote>\n<p>\"communicating memory-isolated state machines\"</p>\n</blockquote>\n<p>Isn't that the idea behind object oriented programming?</p>",
        "id": 512739750,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1744867446
    },
    {
        "content": "<p>It’s funny you say that. There is a discussion between Alan Kay and Joe Armstrong(creator of Erlang) about this very thing. The difference is communication between actors is always asynchronous and therefore coordinated.</p>",
        "id": 512933243,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744932772
    },
    {
        "content": "<p><a href=\"https://youtu.be/fhOHn9TClXY?si=xCQVAaC_7y1piomb\">https://youtu.be/fhOHn9TClXY?si=xCQVAaC_7y1piomb</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"fhOHn9TClXY\" href=\"https://youtu.be/fhOHn9TClXY?si=xCQVAaC_7y1piomb\"><img src=\"https://uploads.zulipusercontent.net/7e464d01f60c0185944f91173fc56dd70fff7b8e/68747470733a2f2f692e7974696d672e636f6d2f76692f66684f486e3954436c58592f6d7164656661756c742e6a7067\"></a></div>",
        "id": 512933287,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1744932796
    }
]