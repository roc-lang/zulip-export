[
    {
        "content": "<p>So it looks like <code>roc dev</code> and <code>roc run</code> produce binaries that don't have any extensions ... is it a way to have the files have extensions? That would make it easier to <code>.gitignore</code> them.</p>",
        "id": 419163650,
        "sender_full_name": "Jared",
        "timestamp": 1706756547
    },
    {
        "content": "<p>linux and mac binaries don't tend to have extensions, so that would be a bit strange to do by default. That said, you can always use <code>--output</code> to set it to whatever you like</p>",
        "id": 419165137,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706757390
    },
    {
        "content": "<p>I guess the lack of extension is why most build systems put everything in a build directory. In like in the case of rust/zig <code>./target</code> and <code>./zig-out</code>. We probably should do something similar for roc to make it easy to gitignore. That is the more \"correct\" solution</p>",
        "id": 419165219,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706757454
    },
    {
        "content": "<p>Just like for a number of our intermediate artifacts, we should either move them to the global <code>.cache/roc</code> or some sort of local <code>roc-cache</code> or <code>./roc-cache</code>. I think this would all be welcome improvements (of course with a bit of discussion on the exact order/location/name for the pieces).</p>",
        "id": 419165385,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706757548
    },
    {
        "content": "<p>We also potentially will want two different folders, which is a bit odd. One in the platform directory if you have a locally compiled platform. One for where actual apps are built.</p>",
        "id": 419165845,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706757843
    },
    {
        "content": "<p>This sounds like a good idea.</p>",
        "id": 419171635,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1706761073
    },
    {
        "content": "<p>I like the idea of a roc-cache, but not the idea of a build directory. In my time as a go developer, it never was a problem to add <code>/my-binary</code> to <code>.gitignore</code>. Yes, it is not so generic, but I only have to add it once. This is very little work for the convenient having the binary at the place, where I built it. It is nice to call <code>roc build &amp;&amp; ./main</code>.</p>\n<p>For someone without any knowledge of rust, it took me some time to find the <code>roc</code>-binary after running <code>cargo build</code>.</p>",
        "id": 419183893,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1706770258
    },
    {
        "content": "<p>I think <code>roc dev</code> and <code>roc run</code> should not put binaries in the local directory. A tempdir seems fine for now, if someone wants to make that change!</p>",
        "id": 419238486,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1706791505
    },
    {
        "content": "<p>long-term, I want to avoid having roc builds create any local directories unless you explicitly ask for them (via <code>--output</code>)</p>",
        "id": 419238831,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1706791620
    },
    {
        "content": "<p>Sweet yeah that sounds great to me.</p>",
        "id": 419239063,
        "sender_full_name": "Jared",
        "timestamp": 1706791693
    },
    {
        "content": "<p>Can we still put (or at least accept) a subfolder in the platform directory for all of the roc related output....actually I think this may already be planned as part of the platform changes. I think we plan to enable the platform to specify the exact file path. So then the platform can put it wherever.</p>",
        "id": 419275036,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706802413
    }
]