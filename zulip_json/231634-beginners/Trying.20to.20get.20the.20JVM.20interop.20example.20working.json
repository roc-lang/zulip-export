[
    {
        "content": "<p>It looks like some compiler things have changed since it was written (<a href=\"https://github.com/roc-lang/roc/pull/5120/files\">https://github.com/roc-lang/roc/pull/5120/files</a>), and now the <code>bridge.c</code> is referencing undefined symbols.</p>",
        "id": 417486119,
        "sender_full_name": "Jared",
        "timestamp": 1706028311
    },
    {
        "content": "<p>The symbols it's looking for are</p>\n<div class=\"codehilite\"><pre><span></span><code>roc__programForHost_1__InterpolateString_caller\nroc__programForHost_1__MulArrByScalar_caller\nroc__programForHost_1__Factorial_caller\n</code></pre></div>\n<p>but the ones that show up in the <code>impl.o</code> are</p>\n<div class=\"codehilite\"><pre><span></span><code>0000000000003948 T _roc__programForHost_0_caller\n0000000000003978 T _roc__programForHost_0_result_size\n0000000000003988 T _roc__programForHost_0_size\n0000000000003990 T _roc__programForHost_1_caller\n0000000000003888 T _roc__programForHost_1_exposed\n0000000000003878 T _roc__programForHost_1_exposed_generic\n0000000000003898 T _roc__programForHost_1_exposed_size\n00000000000039d8 T _roc__programForHost_1_result_size\n00000000000039e8 T _roc__programForHost_1_size\n00000000000039f0 T _roc__programForHost_2_caller\n0000000000003a30 T _roc__programForHost_2_result_size\n0000000000003a40 T _roc__programForHost_2_size\n</code></pre></div>\n<p>Is there a compiler flag I'm missing to get the function names added to the linker symbols?</p>",
        "id": 417486385,
        "sender_full_name": "Jared",
        "timestamp": 1706028377
    },
    {
        "content": "<p>Yeah....I think names were lost at some point. Not sure why.</p>",
        "id": 417487089,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706028601
    },
    {
        "content": "<p>Also, not sure if we have a bug filed for it or not</p>",
        "id": 417487166,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706028613
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> I assume it was a glue related change that caused this. Any ideas?</p>",
        "id": 417487295,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706028654
    },
    {
        "content": "<p>No. I guess we updated all other platforms to not rely on the names?</p>",
        "id": 417507893,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706035669
    },
    {
        "content": "<p>So do I just use 0_caller, 1_caller, and 2_caller for the three functions that get exported? (I tried that, and got <code>ILLEGAL INSTRUCTION</code> when trying to execute)</p>",
        "id": 417517672,
        "sender_full_name": "Jared",
        "timestamp": 1706039597
    },
    {
        "content": "<p>they could be in an arbitrary order</p>",
        "id": 417517847,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706039665
    },
    {
        "content": "<p><span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span> oh that's exciting. Any tips on how to proceed?</p>",
        "id": 417518229,
        "sender_full_name": "Jared",
        "timestamp": 1706039815
    },
    {
        "content": "<p>Is exporting multiple functions just not well supported anymore?</p>",
        "id": 417518266,
        "sender_full_name": "Jared",
        "timestamp": 1706039832
    },
    {
        "content": "<p>it never was really, I'm not really sure why this was attempted here. so, one thing you can do is look at teh LLVM IR and guess. or the info should be available in the compiler somewhere, I'm looking</p>",
        "id": 417518435,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706039894
    },
    {
        "content": "<p>Yeah, we really need to get rid of this record of closures thing and allow exporting multiple functions.</p>",
        "id": 417518591,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706039948
    },
    {
        "content": "<p>so we have this function</p>\n<div class=\"codehilite\"><pre><span></span><code>fn build_closure_caller&lt;&#39;a, &#39;ctx&gt;(\n    env: &amp;Env&lt;&#39;a, &#39;ctx, &#39;_&gt;,\n    layout_interner: &amp;STLayoutInterner&lt;&#39;a&gt;,\n    def_name: &amp;str,\n    evaluator: FunctionValue&lt;&#39;ctx&gt;,\n    alias_symbol: Symbol,\n    arguments: &amp;[InLayout&lt;&#39;a&gt;],\n    return_layout: InLayout&lt;&#39;a&gt;,\n    lambda_set: LambdaSet&lt;&#39;a&gt;,\n    result: InLayout&lt;&#39;a&gt;,\n) {\n</code></pre></div>\n<p>I suspect the <code>alias_symbol</code> is the name of the alias?</p>",
        "id": 417519149,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706040159
    },
    {
        "content": "<p>Was broken during this PR: <a href=\"https://github.com/roc-lang/roc/pull/5093\">https://github.com/roc-lang/roc/pull/5093</a></p>\n<p>Sadly didn't manage to narrow to a specific commit. Instead have about 10:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\"><pre><span></span><code>There are only &#39;skip&#39;ped commits left to test.\nThe first bad commit could be any of:\n1bf2cc3b8c9b22e3ea5a41a0010aa43b17b1e4f5\n6aa73b3b1fe745924e63934066c9cad51c2ef2cb\na3e759cc3c89574f993c5911e0f06158e100276c\nf232bdda4f13133e174825461bbc3b3911b44f6f\n35980e50b8e134a8ddecb6c80a1dcadeee4b5f25\nfee5e978f78e6d87a799adc1616683f9685d45e0\n033618f3f4787c9152a34d296f4a3e3f0c4e723c\n454f3c603e010e7a43581bfd0b59757aabd0ea8d\n5ab2466872a65409a6fe3dbe8845bfc7c1bbb805\nfa05c4969394865b199f7def6ad522135eca8167\n0d4135c57a39398d5cc52126fd8a7dfafa4deca5\n706894d37a24a3a50c9d3ac7e17d751e7e5c9a59\n180187e5af199cbffdc6c936542f70133158501b\nedf557e48095e004263273cfb622eefb7aace7cc\n4a9990de62ba3c8245420c6014c69c950623a8b2\nb6bae82913a16979e3f0c84ba323f166a5ddb082\n6c15284a8f226a10d4d38350cc5b673ccfb39556\nbfbf1c7d4e7fb8722d34c731b8ad4fff518fd12d\n769a4c415b04a12f88e75cefdea7b135c9dbbb5f\nWe cannot bisect more!\nerror: bisect run cannot continue any more\n</code></pre></div>\n</div></div>",
        "id": 417523925,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706042064
    },
    {
        "content": "<p>Updated how I was testing for bisect to avoid a different error. Now I have a first failing commit:</p>\n<p><a href=\"https://github.com/roc-lang/roc/commit/769a4c415b04a12f88e75cefdea7b135c9dbbb5f\">https://github.com/roc-lang/roc/commit/769a4c415b04a12f88e75cefdea7b135c9dbbb5f</a></p>",
        "id": 417526149,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706043076
    },
    {
        "content": "<p>Oh yeah, literally just pulled out the feature: <a href=\"https://github.com/roc-lang/roc/commit/769a4c415b04a12f88e75cefdea7b135c9dbbb5f#diff-cdbf72af96e45146eca8f0477d9181a0ca3d64f2d134a3ecb7503af3352b1a17L5211-L5236\">https://github.com/roc-lang/roc/commit/769a4c415b04a12f88e75cefdea7b135c9dbbb5f#diff-cdbf72af96e45146eca8f0477d9181a0ca3d64f2d134a3ecb7503af3352b1a17L5211-L5236</a></p>",
        "id": 417526340,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706043163
    },
    {
        "content": "<p>yeah the thing is that these names need to link up with what glue generates/expects</p>",
        "id": 417526532,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706043246
    },
    {
        "content": "<p>that is hard because in general we don't have a name for that thing. Especially now that we've dropped the <code>as Fx</code> syntax that symbol name is actually not guaranteed to be meaningful</p>",
        "id": 417526620,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706043286
    },
    {
        "content": "<blockquote>\n<p>Especially now that we've dropped the as Fx syntax</p>\n</blockquote>\n<p>The syntax still is valid and parses. Maybe that is the root of the confusion?</p>",
        "id": 417526778,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706043359
    },
    {
        "content": "<p>We probably should fully remove it if it is no longer supported</p>",
        "id": 417526876,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706043381
    },
    {
        "content": "<p>no, it's a way to define inline aliases, so the alias still works</p>",
        "id": 417526946,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706043422
    },
    {
        "content": "<p>it's just no longer meaningful for generating names</p>",
        "id": 417526968,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706043428
    },
    {
        "content": "<p>Oh, so that can be used to work around our recursive type bug? You can use a inline alias instead of trying to define to mutually recursive aliases?</p>",
        "id": 417527331,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706043577
    },
    {
        "content": "<p>I guess I never realized that feature was used for more. I thought it was just for the glue naming</p>",
        "id": 417527377,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706043601
    },
    {
        "content": "<p>not sure what you mean? you can write</p>\n<div class=\"codehilite\"><pre><span></span><code>x : [ Cons a (ConsList a), Nil ] as ConsList a\nx = Nil\n</code></pre></div>",
        "id": 417527534,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706043640
    },
    {
        "content": "<p>Why is that a feature? It is just to skip this line?</p>\n<div class=\"codehilite\"><pre><span></span><code>ConsList a : [ Cons a (ConsList a), Nil ]\n</code></pre></div>",
        "id": 417528164,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706043910
    },
    {
        "content": "<p>Also, I was mentioning that currently it can be used to work around this bug:</p>\n<div class=\"codehilite\"><pre><span></span><code>Program : List Term\nTerm : [Quote Program]\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>── CYCLIC ALIAS ──────────────────────────────────────────────── /tmp/impl.roc ─\n\nThe Program alias is self-recursive in an invalid way:\n\n6│  Program : List Term\n    ^^^^^^^\n\nRecursion in aliases is only allowed if recursion happens behind a\ntagged union, at least one variant of which is not recursive.\n\n────────────────────────────────────────────────────────────────────────────────\n</code></pre></div>\n<p>Cause this works:</p>\n<div class=\"codehilite\"><pre><span></span><code>Term : [Quote ((List Term) as Program)]\n</code></pre></div>",
        "id": 417529776,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706044516
    },
    {
        "content": "<p>That said, I don't think that is really a reason for the feature to exist. It is just a case where it can happen to work around a compiler bug.</p>",
        "id": 417529837,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706044534
    },
    {
        "content": "<p>well the general idea is that you should be able to type any value without resorting to an alias defined outside of the type itself</p>",
        "id": 417532325,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706045471
    },
    {
        "content": "<p>if an alias is an alias, we should always be able to inline the alias,right</p>",
        "id": 417532354,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1706045483
    },
    {
        "content": "<p>ah</p>",
        "id": 417532709,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706045635
    },
    {
        "content": "<p>That makes sense</p>",
        "id": 417532721,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706045640
    },
    {
        "content": "<p>Just feels weird to have two ways to do the same thing kinda. But I get the use now.</p>",
        "id": 417532813,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706045669
    },
    {
        "content": "<p>Is there a tutorial anywhere about platform glue?</p>",
        "id": 417569509,
        "sender_full_name": "Jared",
        "timestamp": 1706067203
    },
    {
        "content": "<p>Not really. Glue currently can only autogenerate for rust (and to a more limited extent zig).</p>",
        "id": 417569904,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706067496
    },
    {
        "content": "<p>So currently, it is mostly bespoke knowledge and learned by asking question.</p>",
        "id": 417569929,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706067517
    },
    {
        "content": "<p>It is currently an actively moving target with some larger changes planned, which is why it hasn't really be documented currently.</p>",
        "id": 417569970,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1706067556
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"559412\">Fabian Schmalzried</span> has marked this topic as resolved.</p>",
        "id": 417596514,
        "sender_full_name": "Notification Bot",
        "timestamp": 1706085604
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"559412\">Fabian Schmalzried</span> has marked this topic as unresolved.</p>",
        "id": 417596529,
        "sender_full_name": "Notification Bot",
        "timestamp": 1706085608
    }
]