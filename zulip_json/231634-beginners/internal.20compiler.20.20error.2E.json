[
    {
        "content": "<p>Hi there. I know I am doing something wrong, but instead of giving me a helpful suggestion, the compiler crashes. Is this a known error or should I file it as a bug?</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>foo = \\x -&gt;\n    when x is\n        Bool.false -&gt; Ok Bool.false\n        NotImplemented op -&gt; Ok Bool.true\n</code></pre></div>\n<p>Gives:</p>\n<div class=\"codehilite\"><pre><span></span><code>‚ùØ roc check\nAn internal compiler expectation was broken.\nThis is definitely a compiler bug.\nPlease file an issue here: https://github.com/roc-lang/roc/issues/new/choose\nthread &#39;&lt;unnamed&gt;&#39; panicked at &#39;After type checking, a constructor can never align with a literal: that should be a type error!&#39;, crates/compiler/exhaustive/src/lib.rs:637:29\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\n\nThere was an unrecoverable error in the Roc compiler. The `roc check` command can sometimes give a more helpful error report than other commands.\n</code></pre></div>",
        "id": 427130005,
        "sender_full_name": "Jamie Neubert Pedersen",
        "timestamp": 1710684968
    },
    {
        "content": "<p>Hello <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> </p>\n<p>A fellow beginner Rocketeer here! It's probably best to wait for the more experienced members to join the discussion but, in the meantime, I'll try to help. My understanding is that pattern matching on booleans is currently not supported.</p>\n<p><strong>References:</strong></p>\n<ul>\n<li><a href=\"#narrow/stream/304641-ideas/topic/opaque.20bools/near/420111501\">https://roc.zulipchat.com/#narrow/stream/304641-ideas/topic/opaque.20bools/near/420111501</a></li>\n<li><a href=\"#narrow/stream/231634-beginners/topic/Pattern.20matching.20on.20booleans\">https://roc.zulipchat.com/#narrow/stream/231634-beginners/topic/Pattern.20matching.20on.20booleans</a></li>\n<li><a href=\"https://github.com/roc-lang/roc/issues/4152\">https://github.com/roc-lang/roc/issues/4152</a></li>\n</ul>",
        "id": 427132658,
        "sender_full_name": "Hristo",
        "timestamp": 1710685658
    },
    {
        "content": "<p>In your case, some <code>if</code>-<code>then</code>-<code>else</code> might be more applicable, given this current limitation.</p>",
        "id": 427132848,
        "sender_full_name": "Hristo",
        "timestamp": 1710685706
    },
    {
        "content": "<p>General related question: what is the type of <code>x</code> supposed to be in your code sample? It looks like it is trying to be two different types at once. Both Bool and a tag that contains a NotImplemented variant.</p>",
        "id": 427165803,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1710694400
    },
    {
        "content": "<p>I was in the process of trying to recreate a pattern from other ML languages like Haskell with a sum type e.g. <code>Either</code>. To represent if the operation is implemented or not, but I got stuck along the way and then I just made the reproducible example as small as possible. What I actually want to achieve is something of the sort <code>Left a | Right b</code>. Imagine getting passed a data structure like this to a hypothetical <code>testEquality</code> function:</p>\n<div class=\"codehilite\"><pre><span></span><code>testEquality [\n        { op: &quot;Equals&quot;, a: 1, b: 1 },\n        { op: &quot;NotEquals&quot;, a: 1, b: 2 },\n        { op: &quot;UnknownOperand&quot;, a: 1, b: 2 },\n    ]\n</code></pre></div>\n<p>I then want to report back the equality test doesn't work on that last <code>op</code></p>",
        "id": 427171401,
        "sender_full_name": "Jamie Neubert Pedersen",
        "timestamp": 1710695881
    },
    {
        "content": "<p>I was meaning to inquire about the type of <code>x</code> as well actually, but I dismissed this question in my head because my assumption has been that the current standard-library booleans couldn't be made to work in that context, regardless of the type of <code>x</code>.</p>\n<p>If the solution doesn't have to depend on the standard library, I wonder if it would be possible with a custom type, which would implement the <code>Eq</code> ability. Without having experimented with it, I couldn't confidently convince myself that it wouldn't be possible.</p>\n<p><strong><em>Update:</em></strong> Based on Richard's <a href=\"#narrow/stream/231634-beginners/topic/internal.20compiler.20.20error.2E/near/427175271\">comment</a> below, it seems that implementing custom equality behaviour wouldn't be necessary at all.</p>",
        "id": 427175244,
        "sender_full_name": "Hristo",
        "timestamp": 1710696937
    },
    {
        "content": "<p>I don't totally understand the example, but you can implement <code>Either</code> in Roc like this if you want:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kt\">Either</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Left</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Right</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>and then use <code>Left</code> and <code>Right</code> the same way as you would in Haskell</p>",
        "id": 427175271,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710696944
    },
    {
        "content": "<p>is that helpful?</p>",
        "id": 427175434,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710696980
    },
    {
        "content": "<p>Thanks Richard. Though it is not quite what I was aiming for. I guess I need to post the full example.<br>\nI am playing around and found that I want to make a program that can take in data like the above example</p>\n<div class=\"codehilite\"><pre><span></span><code>[\n  { operand: &quot;Equals&quot;, a: 1, b: 1 },\n  { operand: &quot;NotEquals&quot;, a: 1, b: 2 },\n  { operand: &quot;ThisOperandDoesNotExist&quot;, a: 1, b: 2 },\n]\n</code></pre></div>\n<p>I want to go from here to testing equality for each record in the array.<br>\nI have then implemented the equality operators like this:<br>\n(I am missing a step where I convert from String <code>\"Equals\"</code> to tag <code>Equals</code>)</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>compare = \\op, a, b -&gt;\n    when op is\n        Equals -&gt; Ok (a == b)\n        NotEquals -&gt; Ok (a != b)\n        GreaterThan -&gt; Ok (a &gt; b)\n        LessThan -&gt; Ok (a &lt; b)\n        GreaterThanOrEquals -&gt; Ok (a &gt;= b)\n        LessThanOrEquals -&gt; Ok (a &lt;= b)\n        _ -&gt; NotImplemented op\n</code></pre></div>\n<p>Then I want to execute all these comparisons, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>executeRulesFold = \\rules -&gt;\n    List.walk rules (Ok Bool.true) \\state, rule -&gt;\n        result &lt;- compare rule.condition rule.a rule.b\n        when result is\n            Ok Bool.true -&gt; state\n            Ok Bool.false -&gt; Ok Bool.false\n            NotImplemented op -&gt; NotImplemented op\n</code></pre></div>\n<p>Mind you, I am not that proficient in functional programming and I am just exploring and want to learn Roc and how to solve problems with this language :).</p>\n<p>So what I hope for with this is being told that there is an unknown operand in the data passed in <code>\"ThisOperandDoesNotExist\"</code>by way of the tag <code>NotImplemented</code></p>\n<p>I hope it makes sense.</p>",
        "id": 427750995,
        "sender_full_name": "Jamie Neubert Pedersen",
        "timestamp": 1710862308
    },
    {
        "content": "<p>that looks mostly like it should work (except for the compiler bug), although it should be <code>result =</code> and not <code>result &lt;-</code></p>",
        "id": 427758217,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710864112
    },
    {
        "content": "<p>with <code>result &lt;-</code>, that function will be equivalent to this:</p>\n<div class=\"codehilite\"><pre><span></span><code>executeRulesFold = \\rules -&gt;\n    List.walk rules (Ok Bool.true) \\state, rule -&gt;\n        compare rule.condition rule.a rule.b \\result -&gt;\n            when result is\n                Ok Bool.true -&gt; state\n                Ok Bool.false -&gt; Ok Bool.false\n                NotImplemented op -&gt; NotImplemented op\n</code></pre></div>\n<p>but that's not going to work, because <code>compare</code> doesn't take a function as its last argument <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 427758581,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710864197
    },
    {
        "content": "<p>(because <code>result &lt;-</code> is syntax sugar for a \"backwards lambda\" essentially)</p>",
        "id": 427758647,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710864219
    },
    {
        "content": "<p>assuming the compiler bug is happening on this part of it:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">true</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">state</span>\n<span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">false</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">false</span>\n</code></pre></div>\n<p>...you can try writing it like this instead as a workaround:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">bool</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">bool</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">state</span>\n<span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"nv\">false</span>\n</code></pre></div>",
        "id": 427758947,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710864291
    },
    {
        "content": "<p>that should sidestep the compiler bug, assuming that's what the problem is!</p>",
        "id": 427759018,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710864309
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/231634-beginners/topic/internal.20compiler.20.20error.2E/near/427758217\">said</a>:</p>\n<blockquote>\n<p>that looks mostly like it should work (except for the compiler bug), although it should be <code>result =</code> and not <code>result &lt;-</code></p>\n</blockquote>\n<p>this syntax made me a little bit confused at a first.<br>\nThere was this thread here to help beginners with Task understanding or something like this and I think this was the only thing that made me scratch my head for a few minutes, until I read the actual Roc docs on it.<br>\nNot directly related to Task use, but it is usually something that we do with Tasks</p>",
        "id": 427916476,
        "sender_full_name": "Iuri Brindeiro",
        "timestamp": 1710937862
    },
    {
        "content": "<p>yeah, we're working on a different syntax for chaining tasks that will hopefully be easier to pick up! <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 427921707,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1710939569
    }
]