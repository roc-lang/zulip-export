[
    {
        "content": "<p>Hi folks!</p>\n<p>I've been following Roc for a couple years and finally sat down to build something non-trivial with it this morning and wow what a beautiful language!! The care you've put into how everything fits together is really special, and I love how you've balanced expressiveness and simplicity. Truly software you can love.</p>\n<p>I wanted to share a quick report on my experience as a new user. I don't think much of this will be a surprise, but wanted to share in case it's helpful!</p>\n<p>Background: I was building a tiny little HTML page using basic-webserver. I pulled some data from an API then rendered it on the page.</p>\n<p>What works:</p>\n<ul>\n<li>So little boilerplate, so much clarity and type safety! Mostly a result of the super lightweight tag syntax and structural typing.</li>\n<li><code>_</code> in return types makes it easy to have lots of descriptive error tags, but avoids the boilerplate of having to repeat them in type signatures.</li>\n<li>Data modeling is super straightforward.</li>\n<li>Build speeds, oh my god.</li>\n<li>Error messages were great, with some caveats below on type inference.</li>\n</ul>\n<p>What was challenging:</p>\n<ul>\n<li>I ran into a couple spots where the type inference did more harm than good, and I had to add more explicit error type annotations to a few of my functions to get sensible error messages. I got the sense that leaning on type inference too much is a footgun, and that for most top-level functions you should annotate the signature. Roc does a great job of guiding you away from other footguns, so I'm wondering if there's a way to help users avoid this one as well. Alternatively, find a way to make it not a footgun somehow.</li>\n<li>JSON encoding and decoding was far and away the most confusing and difficult part of this little project. The biggest roadblock I ran into was trying to decode some JSON into a record with tag fields, where I got this compiler panic:</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;&lt;unnamed&gt;&#39; panicked at crates/compiler/mono/src/ir.rs:6257:10:\nAbility specialization is unknown. Tip: check out &lt;https://roc.zulipchat.com/#narrow/stream/231634-beginners/topic/Non-Functions.20in.20Abilities/near/456068617&gt;: DeriveError(Underivable)\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>\n<p>If I'm understanding correctly, the compiler is currently being rewritten in Zig, so maybe fixing this is already on the roadmap for the next version of the compiler.</p>\n<p>Either way, sincerely appreciate the hard work you're all putting in, and looking forward to using Roc more in the future!</p>",
        "id": 528495696,
        "sender_full_name": "Luca",
        "timestamp": 1752371587
    },
    {
        "content": "<p>Thank you for taking the time to share this. It's really helpful to know how Roc is feeling from someone who has fresh eyes.</p>\n<p>Regarding the JSON decoding... there are definitely issues lurking here which cause confusing compiler panics. This is one of the motivating reasons for the re-write. We have a fix, but unfortunately it is quite invasive.</p>",
        "id": 528496376,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752372540
    },
    {
        "content": "<p>Thanks for the kind words and feedback <span class=\"user-mention\" data-user-id=\"741498\">@Luca</span>! Encouraging type annotations is a good idea, not yet sure how we should do that <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> Additional tip: if you hover over a variable or function with your mouse it will show the type, assuming you have the LSP set up with your editor.</p>",
        "id": 528520015,
        "sender_full_name": "Anton",
        "timestamp": 1752402056
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> of course, happy to help! And that makes sense — figured it was already on your radar :)</p>\n<p><span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> you're so welcome! For type annotations — maybe emitting a warning for top-level functions without annotations? Doesn't stop you from hacking things together while exploring solutions, but probably something you want to fix before merging a PR. And that makes sense about the rewrite :)</p>",
        "id": 528554260,
        "sender_full_name": "Luca",
        "timestamp": 1752437265
    },
    {
        "content": "<p>A warning feels a little strong, we see warnings as: \"You should fix this before getting to production.\". If people don't want to add type annotations to e.g. their scripts, we should not annoy them. We also like to introduce beginners to the language without type annotations.</p>",
        "id": 528590546,
        "sender_full_name": "Anton",
        "timestamp": 1752473239
    },
    {
        "content": "<p>Would be a nice addition of a <code>roc lint</code> or similar tool to run in ci</p>",
        "id": 528667309,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1752500957
    }
]