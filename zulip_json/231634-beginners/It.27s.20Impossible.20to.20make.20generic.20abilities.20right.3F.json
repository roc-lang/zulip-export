[
    {
        "content": "<p>I've had a few times recently when I've wanted to make abilities in roc that are generic. Normally I've just given up and not used abilities, but this time I cared a bit more about it actually working.</p>\n<p>I was just finalising the improvements to the basic-cli file reader, and I realised the tcp stream and file api is basically the same. <br>\nOfcourse in both cases we're just talking about a stream of bytes. This is a classic example kind of thing that I might want to write a general function around without worrying where the bytes are coming from.</p>\n<p>So I go ahead and make an ability, but I immediately get stuck:<br>\nReading from a file or a tcp socket or a pipe have some common error states, but also have their own unique errors.<br>\nYou could probably try to coerce them into a common interface if you squint a little, but you'd be loosing information.<br>\nI was imagining something like</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">ByteReader</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">implements</span>\n<span class=\"w\">    </span><span class=\"nv\">read</span><span class=\"err\">!</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">reader</span><span class=\"w\"> </span><span class=\"nf\">=&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"nv\">a</span><span class=\"w\">  </span><span class=\"kr\">where</span><span class=\"w\"> </span><span class=\"nv\">reader</span><span class=\"w\"> </span><span class=\"nv\">implements</span><span class=\"w\"> </span><span class=\"kt\">ByteReader</span>\n<span class=\"w\">    </span><span class=\"nv\">readLine</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">reader</span><span class=\"nf\">=&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"kr\">where</span><span class=\"w\"> </span><span class=\"nv\">reader</span><span class=\"w\"> </span><span class=\"nv\">implements</span><span class=\"w\"> </span><span class=\"kt\">ByteReader</span>\n\n<span class=\"kt\">ByteWriter</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">implements</span>\n<span class=\"w\">    </span><span class=\"nv\">write</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">writer</span><span class=\"p\">,</span><span class=\"w\">  </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"w\"> </span><span class=\"nf\">=&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\">  </span><span class=\"kr\">where</span><span class=\"w\"> </span><span class=\"nv\">reader</span><span class=\"w\"> </span><span class=\"nv\">implements</span><span class=\"w\"> </span><span class=\"kt\">Byterwriter</span>\n</code></pre></div>\n<p>I can imagine a bytewriter for file might return <code>DiskFull</code> which would be nonsensical for a tcp stream or a broken pipe which would be silly for a file. <br>\nI'm just looking for confirmation that roc doesn't support anything like this at present.</p>",
        "id": 486642408,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733554708
    },
    {
        "content": "<p>Also If it's not possible I'd love to hear suggestions for workarounds?<br>\nI guess we could just make a huge catch all IOErr type?</p>",
        "id": 486642462,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733554784
    },
    {
        "content": "<p>Then group them logically:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">StreamErr</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">    </span><span class=\"kt\">StreamNotFound</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"kt\">PermissionDenied</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"kt\">ConnectionRefused</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"kt\">ConnectionReset</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"kt\">Interrupted</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"kt\">OutOfMemory</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"kt\">BrokenPipe</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"kt\">Unrecognized</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n\n<span class=\"kt\">WriteErr</span><span class=\"nf\">:</span><span class=\"p\">[</span><span class=\"kt\">FIleErr</span><span class=\"p\">[</span><span class=\"kt\">DiskFull</span><span class=\"p\">],</span><span class=\"kt\">TcpErr</span><span class=\"w\"> </span><span class=\"kt\">StreamErr</span><span class=\"w\"> </span><span class=\"p\">]</span><span class=\"nf\">`</span>\n</code></pre></div>",
        "id": 486642669,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733554955
    },
    {
        "content": "<p>yeah it's not supported atm. Making the error type concrete is the only way.</p>",
        "id": 486642841,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1733555156
    },
    {
        "content": "<p>My main complaint with this is that you've essentially just created exceptions again. <br>\nLike you have some large set of errors that a function may or may not throw, and you are never going to catch them all, so you just have to re-raise them mostly. <br>\nYou then just hope the author of your function documents which of the errors this function throws so you can catch and handle those ones.</p>",
        "id": 486642903,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733555191
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"454654\">Ayaz Hafiz</span> <a href=\"#narrow/channel/231634-beginners/topic/It's.20Impossible.20to.20make.20generic.20abilities.20right.3F/near/486642841\">said</a>:</p>\n<blockquote>\n<p>yeah it's not supported atm. Making the error type concrete is the only way.</p>\n</blockquote>\n<p>Out of curiosity, do you think that's likely to change?</p>",
        "id": 486642921,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733555209
    },
    {
        "content": "<p>I have no idea, I'm pretty far removed these days</p>",
        "id": 486642947,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1733555233
    },
    {
        "content": "<p>haha, fair. Thanks anyway :)</p>",
        "id": 486642967,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733555255
    },
    {
        "content": "<p>Yeah, can make an ability, but can make an interface that uses generic higher order functions</p>",
        "id": 486643359,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733555614
    },
    {
        "content": "<p>By interface I mean adhoc instead of abilities but all types confirm</p>",
        "id": 486643377,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733555633
    },
    {
        "content": "<p>So you would still be sharing code</p>",
        "id": 486643423,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733555643
    },
    {
        "content": "<p>I think static dispatch would fix this though.</p>",
        "id": 486643441,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733555679
    },
    {
        "content": "<p>Hmm, though it would still depend on higher order relationships, so I'm not fully sure. But feels like you could specify what you want with static dispatch (just not 100% sure it would work)</p>",
        "id": 486643486,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733555738
    },
    {
        "content": "<p>oh, really, that's interesting.<br>\nI'm not sure I totally follow what you mean by interface that isn't an ability <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> ?</p>\n<p>Say I wanted to write a function <code>Tokenize: a-&gt; List Tokens where a implements ByteStream</code> <br>\ndo you just mean writing <code>Tokenize: ({}-&gt;List U8)-&gt;List Tokens</code>?<br>\nthen wrapping like this? <code>reader=\\{}-&gt;file |&gt;readFile!</code></p>",
        "id": 486643697,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733555922
    },
    {
        "content": "<p>I guess you could always just invent crappy OOP: </p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">ByteReader</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"nf\">:</span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nv\">read</span><span class=\"err\">!</span><span class=\"nf\">:</span><span class=\"p\">{}</span><span class=\"nf\">=&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nv\">readToBuf</span><span class=\"err\">!</span><span class=\"nf\">:</span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"nf\">=&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">a</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 486644005,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733556188
    },
    {
        "content": "<p>Yes, crappy oop</p>",
        "id": 486644024,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733556207
    },
    {
        "content": "<p>That is what I was talking about</p>",
        "id": 486644028,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733556213
    },
    {
        "content": "<p>But static dispatch makes it first class</p>",
        "id": 486644035,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733556221
    },
    {
        "content": "<p>That's cool. I think standardising on some of these interfaces Is going to be super important for making code shareable between platforms and stopping the ecosystem from fragmenting all over the place</p>",
        "id": 486644137,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733556302
    },
    {
        "content": "<p>Yeah. And I think it will require static dispatch or more flexible abilities to work well</p>",
        "id": 486644163,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733556335
    },
    {
        "content": "<p>Good, well I'll shelve that grand plan for now and come back to it once one of those two things are implemented.</p>",
        "id": 486644518,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733556687
    },
    {
        "content": "<p>If you just want to share code, maybe module params for all of those functions are enough?</p>",
        "id": 486644663,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733556821
    },
    {
        "content": "<p>It was more about being able to let the user  easily and naturally write code that works with both TCP and file streams. </p>\n<p>But yeah module Params would definitely work too. But overuse starts getting towards the functor nightmare you have in very generic Ocaml code, where modules start taking a gazillion parameters because they need Params for their children which need Params for their children.</p>",
        "id": 486644990,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733557092
    },
    {
        "content": "<p>I know it's not the question directly. But the API I'm moving towards in basic-cli uses a common internal IO error tag. So we could have this, but we'd just lose the top level StdinErr, or FileReadErr...</p>",
        "id": 486647160,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733559092
    },
    {
        "content": "<p>Here thr error in the host <a href=\"https://github.com/roc-lang/basic-cli/blob/08467a2447c5f27f3c32fac6144ebe60a691810d/crates/roc_host/src/glue.rs#L7\">https://github.com/roc-lang/basic-cli/blob/08467a2447c5f27f3c32fac6144ebe60a691810d/crates/roc_host/src/glue.rs#L7</a></p>",
        "id": 486647250,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733559159
    },
    {
        "content": "<p>And in the platform <a href=\"https://github.com/roc-lang/basic-cli/blob/08467a2447c5f27f3c32fac6144ebe60a691810d/platform/PlatformTasks.roc#L54\">https://github.com/roc-lang/basic-cli/blob/08467a2447c5f27f3c32fac6144ebe60a691810d/platform/PlatformTasks.roc#L54</a></p>",
        "id": 486647268,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733559186
    },
    {
        "content": "<p>This isn't intended to be public facing though right? <br>\nLike if I as a user of basic CLI call read I'm not going to get that am I?</p>",
        "id": 486647418,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733559344
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> ^</p>",
        "id": 486647512,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733559418
    },
    {
        "content": "<p>We could. <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> had a separate tag for each, but they're all the same internally. Maybe for the sake of an ability if it makes things nicer, (or to experiment with it) we could try this.</p>",
        "id": 486648479,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733560279
    },
    {
        "content": "<p>Well almost identical internally... I am definitely keen to remove the RocStr and use a proper tag and the InternalIOErr was the plan.</p>",
        "id": 486648576,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733560353
    },
    {
        "content": "<p>We could, but I must say, I just really hate the idea that if we do that, every time I want to match on read related errors I have to put<code> Err a -&gt; Err a</code> at the bottom, to handle all the cases which I know can't occur but the compiler says I need to handle.</p>",
        "id": 486655711,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733566262
    },
    {
        "content": "<p>But, I suppose if we add an ability as well as keep the reader specific API we could enable the generic reader with crappy errors temporarily without adversely affecting normal use. and then move to just using the ability once either parameterized abilities or static dispatch gets added</p>",
        "id": 486655868,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733566394
    },
    {
        "content": "<p>I would do a handy little  <code>x-&gt; x</code> at the end, but that seems to invariably lead to compiler crashes <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 486656005,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733566499
    },
    {
        "content": "<p>hm, couldn't this be a concrete <code>ByteReader</code> opaque type that you can just create and then call things on? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 486669144,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1733577465
    },
    {
        "content": "<p>similarly to how <code>Iter</code> would be a concrete type and not an Ability</p>",
        "id": 486669220,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1733577508
    },
    {
        "content": "<p>The main reason that is slightly less desirable is that it prevents my file from having any other methods. <br>\nWhat if I want a file reader that also has the ability to be closed, abilities ( good name choice <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>) are a bit nicer there because I can have it be a \"reader\" and also a file with file specific stuff like closing .</p>\n<p>But ofcourse the file type could just contain a reader and have a get reader function. </p>\n<p>So yeah, I don't see why that wouldn't be a reasable solution though. Even if it is a touch less ergonomic. </p>\n<p>What do you think <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> would that feel like a good fit for the API to you?</p>",
        "id": 486676094,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733582882
    },
    {
        "content": "<p>ah, so I think we should probably not support manual closing (as opposed to automatically closing it when its refcount hits zero and it gets deallocated - there's a technique the host can use to make this happen) because by default it opens the door to \"double-free\" problems</p>",
        "id": 486680975,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1733586690
    },
    {
        "content": "<p>where you open a file, close it, then the OS hands out that file descriptor again, you call close on the original file a second time, and it closes the other one by mistake</p>",
        "id": 486681076,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1733586743
    },
    {
        "content": "<p>if only automatic closing is possible, it rules out that whole category of problems - just like how automatic memory management rules out actual double-free bugs</p>",
        "id": 486681124,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1733586792
    },
    {
        "content": "<p>Oh, haha, I wasn't actually proposing adding a close function, It was just the first operation related to file reads that's not general to all reading. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> <br>\nBut I agree, better to just make it clear dereferencing will auto close and not have to worry about double closing.</p>",
        "id": 486684544,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733589265
    }
]