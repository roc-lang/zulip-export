[
    {
        "content": "<p>Hi, <br>\nI'm motivated to implement  an SNMP-Library for Roc, but I'm unable to find a platform which lets me send and recieve UDP-packets. Is there already any platform or just an API for UDP? It's hard to find good pointers to platforms and their API. So thanks in advance for any help or pointers for this matter :)</p>",
        "id": 412707451,
        "sender_full_name": "Jerome Bergmann",
        "timestamp": 1705149833
    },
    {
        "content": "<p>I've never heard of anyone implementing either of these for Roc. I'm pretty sure we don't have them yet. In fact I never heard of SNMP at all! Maybe you could say a bit more about what kind of apps you want to build?</p>",
        "id": 412708105,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1705150457
    },
    {
        "content": "<p>Basic-cli has <a href=\"https://github.com/roc-lang/basic-cli/blob/main/platform/Tcp.roc\">Tcp implemented</a> so you could fork that and add Udp in a similar way.</p>",
        "id": 412708125,
        "sender_full_name": "Anton",
        "timestamp": 1705150484
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"431893\">Brian Carroll</span> <a href=\"#narrow/stream/231634-beginners/topic/UDP.2FSNMP-Platform/near/412708105\">said</a>:</p>\n<blockquote>\n<p>I've never heard of anyone implementing either of these for Roc. I'm pretty sure we don't have them yet. In fact I never heard of SNMP at all! Maybe you could say a bit more about what kind of apps you want to build?</p>\n</blockquote>\n<p>In my workplace, we have a lot of low level hardware (routers, switches,...) that I need to monitor. Usually, they are locked down to only respond to ICMP and SNMP. So I'm forced to use that protocol, it's not the best but it does the job.</p>\n<p>Until now, I used some python or perl libraries to write simple scripts that gather metrics via snmp. <br>\nI wrote my bachelor thesis using elm and learned to love the functional style. <br>\nSince elm is not suited at all for these tasks, roc is a natural replacement for it.</p>",
        "id": 412708636,
        "sender_full_name": "Jerome Bergmann",
        "timestamp": 1705150941
    },
    {
        "content": "<p>OK cool. Well people have done low level programming with Roc before, and this sounds totally feasible, but nobody's done it yet. I think Anton's suggestion is the right place to start! The basic-cli platform is for writing command line scripts, and it sounds like you've written this kind of script with other languages before so it should fit.<br>\nDo keep us updated and keep asking questions!</p>",
        "id": 412709065,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1705151360
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/stream/231634-beginners/topic/UDP.2FSNMP-Platform/near/412708125\">said</a>:</p>\n<blockquote>\n<p>Basic-cli has <a href=\"https://github.com/roc-lang/basic-cli/blob/main/platform/Tcp.roc\">Tcp implemented</a> so you could fork that and add Udp in a similar way.</p>\n</blockquote>\n<p>That's a good start! If I'm not mistaken, I would have to add the send/recieve method declaration (!= implementation) in<a href=\"https://github.com/roc-lang/basic-cli/blob/main/platform/Effect.roc#L80\">Effect</a> but where would I then implement the according Rust code?</p>",
        "id": 412709088,
        "sender_full_name": "Jerome Bergmann",
        "timestamp": 1705151395
    },
    {
        "content": "<p>Rust TCP code is <a href=\"https://github.com/roc-lang/basic-cli/blob/main/platform/src/lib.rs#L727-L857\">here</a></p>",
        "id": 412709179,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1705151467
    },
    {
        "content": "<p>The Rust function linked as <code>roc_fx_tcpConnect</code> implements the effect called <code>tcpConnect</code> in Roc</p>",
        "id": 412709246,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1705151524
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"431893\">Brian Carroll</span> <a href=\"#narrow/stream/231634-beginners/topic/UDP.2FSNMP-Platform/near/412709179\">said</a>:</p>\n<blockquote>\n<p>Rust TCP code is <a href=\"https://github.com/roc-lang/basic-cli/blob/main/platform/src/lib.rs#L727-L857\">here</a></p>\n</blockquote>\n<p>Perfect! I'll go ahead and keep you updated ;) Thank you so much :)</p>",
        "id": 412709294,
        "sender_full_name": "Jerome Bergmann",
        "timestamp": 1705151585
    },
    {
        "content": "<p>The <code>roc_fx_</code> name prefix is added by the compiler. This convention is part of how effects work in Roc. It's not very well documented unfortunately but hopefully you will be able to follow the patterns.</p>",
        "id": 412709296,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1705151586
    },
    {
        "content": "<p>There is also a <a href=\"https://github.com/j340m3/basic-cli/blob/main/platform/src/tcp_glue.rs\">tcp_glue.rs</a> file saying that it was generated via roc glue. Whats up with that? The cli says \"Generate glue code between a platform's Roc API and its host language\". Will it be automatically called upon build of basic-cli or do I have to do so manually? Is there more documentation on that?</p>",
        "id": 412711372,
        "sender_full_name": "Jerome Bergmann",
        "timestamp": 1705153666
    },
    {
        "content": "<p>The Rust code needs to know how to read and write the Roc data structures, so we autogenerate Rust type definitions for them, and we call this \"glue code\".<br>\nThe <code>roc glue</code> command generates this glue code. You need to provide it with the platform main.roc file and another Roc file specific to the language you are generating for. It currently only works well with Rust - there's a RustGlue.roc somewhere in the repo.<br>\nI personally don't know the basic-cli platform well enough to know what build script it's run from. I'd start looking in the CI scripts and Cargo <a href=\"http://build.rs\">build.rs</a> file.</p>",
        "id": 412711837,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1705154093
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"431893\">Brian Carroll</span> <a href=\"#narrow/stream/231634-beginners/topic/UDP.2FSNMP-Platform/near/412711837\">said</a>:</p>\n<blockquote>\n<p>The Rust code needs to know how to read and write the Roc data structures, so we autogenerate Rust type definitions for them, and we call this \"glue code\".<br>\nThe <code>roc glue</code> command generates this glue code. You need to provide it with the platform main.roc file and another Roc file specific to the language you are generating for. It currently only works well with Rust - there's a RustGlue.roc somewhere in the repo.<br>\nI personally don't know the basic-cli platform well enough to know what build script it's run from. I'd start looking in the CI scripts and Cargo <a href=\"http://build.rs\">build.rs</a> file.</p>\n</blockquote>\n<p>Allright, so there is no standard way of doing it platformwise and I have to dig into the CI to see if/where its called. But is it called on a <em>per platform basis</em> or on a <em>per module basis</em>, does <code>roc glue</code> automagically find, what it has to generate or do I have to supply arguments? <br>\nThe CLI says it wants:<br>\n<code>roc glue &lt;GLUE_SPEC&gt; &lt;GLUE_DIR&gt; [ROC_FILE]</code><br>\nI would assume that ( in the case of basic-cli):</p>\n<ul>\n<li><code>GLUE_DIR</code> is <code>platform/src</code></li>\n<li><code>ROC_FILE</code> is <code>platform/Effect.roc</code></li>\n</ul>\n<p>but what (the hell) is a <code>GLUE_SPEC</code> ;)?<br>\nEdit: Answered <a href=\"#narrow/stream/231634-beginners/topic/How.20to.20use.20roc.20glue.3F\">here</a></p>",
        "id": 412712928,
        "sender_full_name": "Jerome Bergmann",
        "timestamp": 1705155157
    },
    {
        "content": "<p>Glue is not generated in CI or using the <a href=\"http://build.rs\">build.rs</a>, all glue files have been generated with <code>roc glue ...</code> and added to the repo</p>",
        "id": 412712938,
        "sender_full_name": "Anton",
        "timestamp": 1705155174
    },
    {
        "content": "<p>GLUE_SPEC may be <a href=\"https://github.com/roc-lang/roc/blob/2d64d134d44e0616f53cb68f6c15890690ddc4bf/crates/glue/src/RustGlue.roc#L4\">this file</a> but I don't have much glue experience either.</p>",
        "id": 412713130,
        "sender_full_name": "Anton",
        "timestamp": 1705155367
    },
    {
        "content": "<p>For basic-cli I have a PR that hasn't merged yet, that cleans up glue for the whole platform to be generated from the one script. You can check that out for inspiration on how you could use glue to generate the types you need for these new effects.</p>",
        "id": 412722879,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1705163897
    },
    {
        "content": "<p>Glue is still a work in progress and there are quite a few known issues that you need to work around, but for the most part it is very helpful, moreso than manually writing the glue code.</p>",
        "id": 412722929,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1705163984
    },
    {
        "content": "<p>Can you share a link to the PR?</p>",
        "id": 412724789,
        "sender_full_name": "Jerome Bergmann",
        "timestamp": 1705165592
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/basic-cli/pull/135\">https://github.com/roc-lang/basic-cli/pull/135</a></p>",
        "id": 412725224,
        "sender_full_name": "Anton",
        "timestamp": 1705165889
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> -- also came here interested in a UDP implementation. <span class=\"user-mention\" data-user-id=\"471840\">@Jerome Bergmann</span> -- did you have any luck with this?</p>",
        "id": 441350917,
        "sender_full_name": "Aaron Strick",
        "timestamp": 1717030138
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"699215\">Aaron Strick</span> <a href=\"#narrow/stream/231634-beginners/topic/UDP.2FSNMP-Platform/near/441350917\">said</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> -- also came here interested in a UDP implementation. <span class=\"user-mention silent\" data-user-id=\"471840\">Jerome Bergmann</span> -- did you have any luck with this?</p>\n</blockquote>\n<p>No, I spent a couple of hours poking around in the source code and then my personal life carried me away. If you have any success, I'm still interested. TBH, I forgot this thread until your question slided into my mails. Maybe I will give it at shot in the near future. Anyways, good luck, hope we'll get this sooner than later ;)</p>",
        "id": 441456338,
        "sender_full_name": "Jerome Bergmann",
        "timestamp": 1717075512
    },
    {
        "content": "<p>OK - I started poking around last night and I made some progress. I did the following:</p>\n<ol>\n<li>I built roc and cloned <code>basic-cli</code></li>\n<li>I got it so that if I make changes to <code>basic-cli</code> - I can run a roc program that reflects those changes</li>\n<li>I created a <code>Udp</code> and <code>InternalUdp</code> packages that basically just copy/paste the respective Tcp modules</li>\n<li>I got my test program to crash because of a lack of corresponding functions in <code>src/lib.rs</code></li>\n<li>I started poking at the rust <a href=\"https://doc.rust-lang.org/std/net/struct.UdpSocket.html\"><code>UdpSocket</code></a> docs so I could actually implement it</li>\n</ol>\n<hr>\n<p>But I stopped there for night 1-</p>\n<p>I'm <strong><em>hoping</em></strong> that by adding the appropriate functions in <code>lib.rs</code> it will Just Work<span aria-label=\"tm\" class=\"emoji emoji-2122\" role=\"img\" title=\"tm\">:tm:</span> -- but I have a sense that I will need to do something around \"generating glue\" -- but I don't know.</p>\n<p>Perhaps someone could weigh in here. (But also, I won't be able to dive back for the next few days... and at that point, I'll know better if I run into a hiccup.</p>",
        "id": 441534949,
        "sender_full_name": "Aaron Strick",
        "timestamp": 1717096572
    },
    {
        "content": "<p>Made some progress here:</p>\n<ol>\n<li>I changed my copy pasted <code>Tcp</code> modules so that they actually had a few Udp specific functions.</li>\n<li>I wrote an example that uses it</li>\n<li>I implemented the corresponding functions in <a href=\"http://lib.rs\">lib.rs</a></li>\n</ol>\n<p>But... unfortunately I got kind of stuck here.</p>\n<p>I first received errors that were somewhat expected -- that my types didn't actually exist in rust.</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0433]: failed to resolve: could not find `BindResult` in `roc_app`\n   --&gt; src/lib.rs:951:22\n    |\n951 |             roc_app::BindResult::Bound(ptr)\n    |                      ^^^^^^^^^^\n    |                      |\n    |                      could not find `BindResult` in `roc_app`\n</code></pre></div>\n<p>This makes sense!</p>\n<p>I had a feeling I'd have to generate some glue. So I ran the <code>./glue.sh</code> script that is in the repo.<br>\nThis resulted in a big diff  in<code>crates/roc_app/*</code>. <br>\nOn the surface, the diff looked good (ie, I saw my new types reflected)</p>\n<p>However! I could not get the example to run, receiving a wholly unexpected group of errors that looked like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>   --&gt; /Users/strickinato/code/basic-cli/crates/roc_app/src/x86_64.rs:326:39\n    |\n326 | const _SIZE_CHECK_union_ReadErr: () = assert!(core::mem::size_of::&lt;union_ReadErr&gt;() == 40);\n    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at &#39;assertion failed: core::mem::size_of::&lt;union_ReadErr&gt;() == 40&#39;, /Users/strickinato/code/basic-cli/crates/roc_app/src/x86_64.rs:326:39\n    |\n    = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n</code></pre></div>\n<p>This is where I'm stuck. And I am wondering:</p>\n<ul>\n<li>Is there a different way I should be generating the glue?</li>\n<li>Do I have a version mismatch of some kind?</li>\n<li>Or something entirely different?</li>\n</ul>\n<p>Here is a draft PR with my starting initial code and the example:<br>\n<a href=\"https://github.com/roc-lang/basic-cli/pull/212/files\">https://github.com/roc-lang/basic-cli/pull/212/files</a></p>\n<p>I've also checked in the problematic generated glue code:<br>\n(<a href=\"https://github.com/roc-lang/basic-cli/pull/212/commits/c248ce19dc64d36e868351d0af0eabc36061cc31\">commit</a>)</p>\n<p>If anyone has an ideas to unblock, happy to keep trucking.</p>",
        "id": 441874369,
        "sender_full_name": "Aaron Strick",
        "timestamp": 1717229937
    },
    {
        "content": "<p>If your types are simple enough it's much easier to hand roll them.</p>",
        "id": 441874482,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1717229999
    },
    {
        "content": "<p>If your type is more complicated, I think the best strategy is to make a \"fake\" platform that just uses that single type, and then run glue on it and copy-paste the generate Rust out and clean it up a bit manually.</p>",
        "id": 441874572,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1717230038
    },
    {
        "content": "<p>If you can avoid re-generating glue for the whole of basic cli then that would be best, as I usually go through and fixup the glue generated code manually.</p>",
        "id": 441874671,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1717230120
    },
    {
        "content": "<p>If you use a fake platform you can generate glue into a random/temp directory</p>",
        "id": 441874736,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1717230140
    },
    {
        "content": "<p>Interesting! OK -- By \"hand roll\"<br>\nI am pretty sure you mean to just type out (or copy/paste/edit) the types in crates/roc_app/&lt;arch&gt;.rs</p>\n<p>That I think I can do</p>",
        "id": 441874843,
        "sender_full_name": "Aaron Strick",
        "timestamp": 1717230206
    },
    {
        "content": "<p>Also, I have a release of the glue platform files so you don't have to have the roc repository cloned locally. You can copy just the <code>RustGlue.roc</code> spec and replace the platform with <code>    pf: platform \"https://github.com/lukewilliamboswell/roc/releases/download/test/olBfrjtI-HycorWJMxdy7Dl2pcbbBoJy4mnSrDtRrlI.tar.br\",</code></p>",
        "id": 441874875,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1717230230
    },
    {
        "content": "<p>Yes, though I would advise putting your handrolled types in <code>platform/src/lib.rs</code> for now</p>",
        "id": 441874968,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1717230273
    },
    {
        "content": "<p>The <code>roc_app</code> crate is generated by glue, so you might lose the types if someone re-generates glue over the top of it</p>",
        "id": 441875051,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1717230340
    },
    {
        "content": "<p><span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span> - OK - that makes sense.</p>",
        "id": 441875219,
        "sender_full_name": "Aaron Strick",
        "timestamp": 1717230451
    },
    {
        "content": "<p>I find using <code>roc glue RustGlue.roc glue-tmp/ dummy-platform.roc</code> and using the generated types much quicker than writing by hand, and if you have  only one type in the <code>mainForHost</code> in the <code>dummy-platform.roc</code> then there isn't too much to sift through</p>",
        "id": 441875224,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1717230455
    },
    {
        "content": "<p>I don't really have reps setting up platforms yet -- so I'll probably start with the hand roll option. I should be able to dive into that more quickly</p>",
        "id": 441875369,
        "sender_full_name": "Aaron Strick",
        "timestamp": 1717230546
    },
    {
        "content": "<p>Thanks for your help <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 441875687,
        "sender_full_name": "Aaron Strick",
        "timestamp": 1717230751
    }
]