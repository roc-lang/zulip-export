[
    {
        "content": "<p>Hi everyone!<br>\nI have a few questions about modules</p>\n<ol>\n<li>Can I rename modules like in Elm/Haskell/Purescript?</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">ModuleName</span><span class=\"w\"> </span><span class=\"kr\">as</span><span class=\"w\"> </span><span class=\"kt\">M</span>\n</code></pre></div>\n<ol start=\"2\">\n<li>Is there a way to have name a module something other than it's directory for this specific case-<br>\nI have a collection of modules, let's call them <code>A, A.B, A.C, A.D</code>. <code>B, C, D</code> are all sub-modules of <code>A</code>, and in my file hierarchy I would like to have them in the same file. Other languages I've seen (like Rust) will have the <code>A</code> module file be called something generic (like <code>mod.rs</code>) within the file <code>A</code>, and all the other files work exactly as they do in Roc.</li>\n</ol>\n<p>Thanks!</p>",
        "id": 412324127,
        "sender_full_name": "Fletch Canny",
        "timestamp": 1704973202
    },
    {
        "content": "<p>roc modules always correspond to a file. That makes file loading faster and error messages more reliable</p>",
        "id": 412340002,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1704978832
    },
    {
        "content": "<p>the <code>as Foo</code> should work I think? if not that's a bug (but imports are getting reworked anyway right now to allow them in more places, so if it's a bug we likely won't fix it and rather land the new approach)</p>",
        "id": 412340220,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1704978901
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281543\">Folkert de Vries</span> <a href=\"#narrow/stream/231634-beginners/topic/Module.20Names/near/412340002\">said</a>:</p>\n<blockquote>\n<p>roc modules always correspond to a file. That makes file loading faster and error messages more reliable</p>\n</blockquote>\n<p>I still feel like a special case for module names would be nice, since it makes file management a bit easier.<br>\nIs there something in the compiler which prevents swapping from a file to a directory for this case? Either performance-wise or maybe this is a bad design idea? Because I feel like that wouldn't be much pre-processing needed to make it happen.</p>\n<p>I'm not sure though, happy to change my mind.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"281543\">Folkert de Vries</span> <a href=\"#narrow/stream/231634-beginners/topic/Module.20Names/near/412340220\">said</a>:</p>\n<blockquote>\n<p>the <code>as Foo</code> should work I think? if not that's a bug (but imports are getting reworked anyway right now to allow them in more places, so if it's a bug we likely won't fix it and rather land the new approach)</p>\n</blockquote>\n<p>Oh you're supposed to be able to do that? I'll update my compiler and see if that fixes it. It was assuming I was referring to a file name before.</p>",
        "id": 412341444,
        "sender_full_name": "Fletch Canny",
        "timestamp": 1704979404
    },
    {
        "content": "<p>hmm, that might be because we also support including files verbatim as string/list of byte</p>",
        "id": 412347659,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1704981506
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"489294\">@Agus Zubiaga</span> might know more about the current/future state of imports</p>",
        "id": 412347739,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1704981533
    },
    {
        "content": "<p>Yeah that's a cool feature, which I use often.</p>",
        "id": 412347823,
        "sender_full_name": "Fletch Canny",
        "timestamp": 1704981562
    },
    {
        "content": "<p>The <code>as</code> keyword in imports is currently not supported, but it's introduced in the <a href=\"#narrow/stream/304641-ideas/topic/module.20and.20package.20changes/near/372121793\">#ideas&gt;module and package changes</a> proposal. I'm currently working on it. The new imports are pretty close to done, but we're probably going to hold that until the rest of the proposal is implemented, to prevent multiple batches of breaking changes.</p>",
        "id": 412359348,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1704984725
    },
    {
        "content": "<p>Note the syntax in the doc was revised in Zulip later. The most up-to-date one looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kr\">import</span><span class=\"w\"> </span><span class=\"nn\">Json</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">J</span><span class=\"w\"> </span><span class=\"n\">exposing</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">int</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"p\">]</span>\n<span class=\"kr\">import</span><span class=\"w\"> </span><span class=\"s\">\"names.txt\"</span><span class=\"w\"> </span><span class=\"nn\">as</span><span class=\"w\"> </span><span class=\"n\">names</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span>\n</code></pre></div>\n<p>The <code>as</code> and <code>exposing</code> keywords are optional, and imports can appear nested inside defs/expressions so they can be introduced in a smaller scope than the entire module.</p>",
        "id": 412360304,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1704984978
    },
    {
        "content": "<p>See also <a class=\"stream-topic\" data-stream-id=\"304641\" href=\"/#narrow/stream/304641-ideas/topic/module.20params\">#ideas &gt; module params</a></p>",
        "id": 412361671,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1704985267
    },
    {
        "content": "<p>Thanks for working on this change! I like it, especially coming from other ML family languages. I do have a few questions though-</p>\n<p>Will Roc support rust-style nested imports? That syntax seems like it might make that tricky.</p>\n<p>Also, if we're not allowed to have <code>mod.rs</code>-like files,  is there a consensus about what to name a file if you keep it inside a folder of the same name? The Parser library by <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> uses <code>Core</code> which I like.</p>",
        "id": 412362112,
        "sender_full_name": "Fletch Canny",
        "timestamp": 1704985371
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"569850\">Fletch Canny</span> <a href=\"#narrow/stream/231634-beginners/topic/Module.20Names/near/412362112\">said</a>:</p>\n<blockquote>\n<p>Will Roc support rust-style nested imports? That syntax seems like it might make that tricky.</p>\n</blockquote>\n<p>Check out the <a href=\"https://docs.google.com/document/d/1E_77fO-44BtoBtXoVeWyGh1xN2KRTWTu8q6i25RNNx0/edit#heading=h.x84bh32l37em\">\"Module and package privacy changes\"</a> section of the proposal, there a few changes that are probably better explained there <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 412364368,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1704985982
    },
    {
        "content": "<p>oh haha I missed that. I'll check it out</p>",
        "id": 412364485,
        "sender_full_name": "Fletch Canny",
        "timestamp": 1704986022
    },
    {
        "content": "<p>Note <code>import X from Y</code> becomes <code>import Y exposing X</code> after syntax modification decisions that are not updated in the doc</p>",
        "id": 412364712,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1704986090
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"560905\">Simon Peleška</span> has marked this topic as resolved.</p>",
        "id": 412396535,
        "sender_full_name": "Notification Bot",
        "timestamp": 1704996703
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"560905\">Simon Peleška</span> has marked this topic as unresolved.</p>",
        "id": 412396549,
        "sender_full_name": "Notification Bot",
        "timestamp": 1704996710
    }
]