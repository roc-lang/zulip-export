[
    {
        "content": "<p>It looks like <code>Task.sequence</code> reverses the list order, is this expected? For example:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">app</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">cli</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">platform</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/roc-lang/basic-cli/releases/download/0.12.0/Lb8EgiejTUzbggO2HVVuPJFkwvvsfW6LojkLR20kTVE.tar.br\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">cli.Task</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">cli.Stdout</span>\n\n<span class=\"nv\">run</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nv\">_</span>\n<span class=\"nv\">run</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">n</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">n</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toStr</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span>\n\n<span class=\"kr\">main </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nv\">run</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">sequence</span><span class=\"err\">!</span>\n<span class=\"w\">    </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">ok</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n</code></pre></div>\n<p>When I run this code I get this:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span>roc<span class=\"w\"> </span>test.roc\n<span class=\"m\">3</span>\n<span class=\"m\">2</span>\n<span class=\"m\">1</span>\n</code></pre></div>",
        "id": 454766668,
        "sender_full_name": "Aur√©lien Geron",
        "timestamp": 1722243510
    },
    {
        "content": "<p>It seems to be expected, although not documented <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> <br>\n<a href=\"https://github.com/roc-lang/basic-cli/blob/79bb5e88ea3cdb2973a43f3c7b0847936f204c69/examples/task-list.roc#L15\">https://github.com/roc-lang/basic-cli/blob/79bb5e88ea3cdb2973a43f3c7b0847936f204c69/examples/task-list.roc#L15</a></p>\n<p>There's also <code>forEach</code> method: <a href=\"https://www.roc-lang.org/packages/basic-cli/0.12.0/Task#forEach\">https://www.roc-lang.org/packages/basic-cli/0.12.0/Task#forEach</a></p>",
        "id": 454769991,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1722244021
    },
    {
        "content": "<p>This works as expected. But of course the identity function in the callback is not what we want here. I think it's a bug in <br>\n<code>Task.sequence</code> indeed as <code>Task.sequence list</code> should work almost the same as <code>Task.forEach list \\x -&gt; x</code></p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">app</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">cli</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">platform</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/roc-lang/basic-cli/releases/download/0.12.0/Lb8EgiejTUzbggO2HVVuPJFkwvvsfW6LojkLR20kTVE.tar.br\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">cli.Task</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">cli.Stdout</span>\n\n<span class=\"nv\">run</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nv\">_</span>\n<span class=\"nv\">run</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">n</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">n</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toStr</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span>\n\n<span class=\"kr\">main </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nv\">run</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">forEach</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">x</span>\n<span class=\"w\">    </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">ok</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n</code></pre></div>",
        "id": 454772213,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1722244579
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"584248\">@Kiryl Dziamura</span> . I guess I'll open an issue on github then.</p>",
        "id": 454772340,
        "sender_full_name": "Aur√©lien Geron",
        "timestamp": 1722244625
    },
    {
        "content": "<p>Anyway, <code>Task</code> is going to become part of the roc std very soon and will be removed from platforms</p>",
        "id": 454772443,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1722244658
    },
    {
        "content": "<p>If you're interested, here's the pr: <a href=\"https://github.com/roc-lang/roc/pull/6836\">https://github.com/roc-lang/roc/pull/6836</a><br>\nThe bug will probably be there as well, so you can link your issue there for visibility.</p>\n<p>And thank you for the report!</p>",
        "id": 454772918,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1722244778
    },
    {
        "content": "<p>I don't think it's deliberate, I just implemented it the first way I thought of and didn't consider this or notice. </p>\n<p>It does seem a little unexpected to me. </p>\n<p>I think we should look at this. It might be easy to change, just taking from the other end of the list.</p>",
        "id": 454777690,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722246000
    },
    {
        "content": "<p>We could swap from List.walk to List.walkBackwards</p>",
        "id": 454777920,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722246064
    },
    {
        "content": "<p>I opened <a href=\"https://github.com/roc-lang/basic-cli/issues/235\">https://github.com/roc-lang/basic-cli/issues/235</a></p>",
        "id": 454778704,
        "sender_full_name": "Aur√©lien Geron",
        "timestamp": 1722246308
    },
    {
        "content": "<p>I might see if I can roll a fix into the builtin-task branch while I have it open, and it's pretty minor change.</p>",
        "id": 454779023,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722246412
    },
    {
        "content": "<p>Fixed </p>\n<div class=\"codehilite\"><pre><span></span><code>$ roc examples/hello-world.roc\nüî® Rebuilding platform...\n1\n2\n3\n</code></pre></div>",
        "id": 454779594,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722246605
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/pull/6836/commits/aabe75ff87bd105e293eb1e7c6944f9fc6141ffd\">https://github.com/roc-lang/roc/pull/6836/commits/aabe75ff87bd105e293eb1e7c6944f9fc6141ffd</a></p>",
        "id": 454780159,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722246786
    },
    {
        "content": "<p>It wasn't a big change <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 454780184,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722246796
    },
    {
        "content": "<p>The only thing is it reverses the order of the results... so if we had the following</p>\n<div class=\"codehilite\"><pre><span></span><code>app [main] { pf: platform &quot;../platform/main.roc&quot; }\n\nimport pf.Stdout\n\nrun : U8 -&gt; Task U8 _\nrun = \\n -&gt;\n    n |&gt; Num.toStr |&gt; Stdout.line!\n\n    Task.ok n\n\nmain =\n    nums = [1,2,3] |&gt; List.map run |&gt; Task.seq!\n\n    Stdout.line! &quot;Got nums: $(Inspect.toStr nums)&quot;\n\n    Task.ok {}\n</code></pre></div>\n<p>We get the following</p>\n<div class=\"codehilite\"><pre><span></span><code>$ roc examples/hello-world.roc\nüî® Rebuilding platform...\n1\n2\n3\nGot nums: [3, 2, 1]\n</code></pre></div>",
        "id": 454781246,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722247003
    },
    {
        "content": "<p>I guess we could use, <code>List.prepend</code> to build the results up.</p>",
        "id": 454781658,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722247087
    },
    {
        "content": "<p>It looks like it collected tasks in correct order, but resolved them in LIFO</p>",
        "id": 454781683,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1722247093
    },
    {
        "content": "<p>Switching to List.prepend we get this, </p>\n<div class=\"codehilite\"><pre><span></span><code>$ roc examples/hello-world.roc\nüî® Rebuilding platform...\n1\n2\n3\nGot nums: [1, 2, 3]\n</code></pre></div>",
        "id": 454781979,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722247192
    },
    {
        "content": "<p>So this impl</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>seq : List (Task ok err) -&gt; Task (List ok) err\nseq = \\tasks -&gt;\n    List.walkBackwards tasks (ok []) \\state, task -&gt;\n        value &lt;- task |&gt; await\n\n        state |&gt; map \\values -&gt; List.prepend values value\n</code></pre></div>",
        "id": 454782103,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722247220
    },
    {
        "content": "<p>!tcefreP</p>",
        "id": 454782787,
        "sender_full_name": "Aur√©lien Geron",
        "timestamp": 1722247411
    },
    {
        "content": "<p>Hmmm, I'm thinking the List.append is the correct solution even though it may be a little surprising at first</p>",
        "id": 454783223,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722247531
    },
    {
        "content": "<p>But, I'm definitely not confident about that</p>",
        "id": 454783287,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722247549
    },
    {
        "content": "<blockquote>\n<p>Hmmm, I'm thinking the List.append is the correct solution even though it may be a little surprising at first</p>\n</blockquote>\n<p>Can you elaborate? Having it reversed seems weird to me</p>",
        "id": 454784597,
        "sender_full_name": "Anton",
        "timestamp": 1722247938
    },
    {
        "content": "<p>Well the list is built up one element at a time, so the first element in will be in the last position.</p>",
        "id": 454784714,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722247981
    },
    {
        "content": "<p>Yeah, I'd say the implementation looks kind of weird now but input vs output seems more logical in the last version</p>",
        "id": 454787026,
        "sender_full_name": "Anton",
        "timestamp": 1722248607
    },
    {
        "content": "<p>I think there might be two different ways of thinking about things here. This is a bit of a wild generalisation... </p>\n<p>One is from a more mathematical/logical/functional perspective, the other is from a more concrete/imperative/procedural perspective.</p>\n<p>I think having the sequence return the list return the results in the same order is closer to the former, as this would be the order they are executed. </p>\n<p>While having them returned reversed is closer to the latter, where you might have a mental model of placing items in on a stack, placing them into a queue.</p>",
        "id": 454787259,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722248672
    },
    {
        "content": "<blockquote>\n<p>implementation looks kind of weird now</p>\n</blockquote>\n<p>How does this look? </p>\n<div class=\"codehilite\"><pre><span></span><code>seq : List (Task ok err) -&gt; Task (List ok) err\nseq = \\tasks -&gt;\n    List.walkBackwards tasks (ok []) \\state, task -&gt;\n        await task \\value -&gt;\n            map state \\values -&gt; List.prepend values value\n</code></pre></div>\n<p>This gives us</p>\n<div class=\"codehilite\"><pre><span></span><code>1\n2\n3\nGot nums: [1, 2, 3]\n</code></pre></div>",
        "id": 454787721,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722248820
    },
    {
        "content": "<p>I might also add a <code>List.withCapacity</code> in there too</p>",
        "id": 454787878,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722248866
    },
    {
        "content": "<blockquote>\n<p>How does this look?</p>\n</blockquote>\n<p>Yeah I think this is better</p>",
        "id": 454788268,
        "sender_full_name": "Anton",
        "timestamp": 1722248965
    },
    {
        "content": "<p>With capacity</p>\n<div class=\"codehilite\"><pre><span></span><code>seq : List (Task ok err) -&gt; Task (List ok) err\nseq = \\tasks -&gt;\n\n    init = ok (List.withCapacity (List.len tasks))\n\n    List.walkBackwards tasks init \\state, task -&gt;\n        await task \\value -&gt;\n            map state \\values -&gt; List.prepend values value\n</code></pre></div>",
        "id": 454788434,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722249000
    },
    {
        "content": "<p>I think I agree too.</p>",
        "id": 454788532,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722249013
    },
    {
        "content": "<p>maybe <code>initListTask</code> instead of <code>init</code>? If I see <code>init</code> in some code without context that could be anything :p</p>",
        "id": 454789005,
        "sender_full_name": "Anton",
        "timestamp": 1722249113
    },
    {
        "content": "<p>I suspect this will be a lot faster by doing appends while building it up and then doing one reverse at the end</p>",
        "id": 454821391,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1722256677
    },
    {
        "content": "<p>because doing a bunch of prepends in a row is a pathological case for a list, since each one has to copy and shift the entire previous list</p>",
        "id": 454821795,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1722256745
    },
    {
        "content": "<p>whereas appends are super cheap, and 1 reverse should be about the same cost as one of the prepends</p>",
        "id": 454822098,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1722256793
    },
    {
        "content": "<p>I don't understand the issue. I can see, that the current implementation returns the values in the reverse order. But when looking at the current code, I can not understand why. This is the <a href=\"https://github.com/roc-lang/basic-cli/blob/79bb5e88ea3cdb2973a43f3c7b0847936f204c69/platform/Task.roc#L228C1-L233C57\">current code</a>:</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>sequence : List (Task ok err) -&gt; Task (List ok) err\nsequence = \\tasks -&gt;\n    List.walk tasks (InternalTask.ok []) \\state, task -&gt;\n        value &lt;- task |&gt; await\n\n        state |&gt; map \\values -&gt; List.append values value\n</code></pre></div>\n<p>It walks the list of task from start to end. On each step, it places the result at the end of the list. This looks correct to me. How is it possible, that the last task in the list gets the first element in the result list? Is there something special about tasks I don't understand?</p>\n<p>The two issues I see are the missing capacity and that the function does not stop running the tasks on the  first error. I would have guessed, that something like <code>List.walkUntil</code> or <code>List.walkTry</code> would be used.</p>",
        "id": 455042504,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1722322045
    },
    {
        "content": "<p>It is building up a giant chain of closures. The outer most closure will be the last task in the list.</p>\n<p>The inner body should be:</p>\n<div class=\"codehilite\"><pre><span></span><code>values = state!\nvalue = task!\nTask.ok (List.append values value)\n</code></pre></div>\n<p>Or something along those lines to get the ordering correctly.</p>",
        "id": 455047145,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1722323449
    },
    {
        "content": "<p>That way the state accumulates and wraps the final task instead of repeatedly being placed inside the newest task.</p>",
        "id": 455047471,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1722323553
    },
    {
        "content": "<p>That said, I would probably write it as</p>\n<div class=\"codehilite\"><pre><span></span><code>sequence = \\taskList -&gt;\n    Task.loop (taskList, List.withCapacity (List.len taskList)) \\(tasks, values) -&gt;\n        when tasks is\n            [task, .. as rest] -&gt;\n                value = task!\n                Step (rest, List.append values value)\n                |&gt; Task.ok\n            [] -&gt;\n                Done values\n                |&gt; Task.ok\n</code></pre></div>\n<p>Task.loop is special and less likely to break with weird edge cases related to lambdaset nesting and such. So I think it is the best option here.</p>",
        "id": 455050596,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1722324261
    },
    {
        "content": "<p>Well I think we found our issue with <a href=\"#narrow/stream/231634-beginners/topic/Compiler.20seems.20extremely.20slow.20on.20some.20code/near/454811693\">https://roc.zulipchat.com/#narrow/stream/231634-beginners/topic/Compiler.20seems.20extremely.20slow.20on.20some.20code/near/454811693</a></p>\n<p>I just updated to your solution above and ran that using the latest Task as Builtin branch for both roc and basic-cli and it compiles and runs fine.</p>",
        "id": 455055709,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1722325513
    },
    {
        "content": "<p>That's great, thanks <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> , I'll try this now. <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 455057685,
        "sender_full_name": "Aur√©lien Geron",
        "timestamp": 1722326258
    }
]