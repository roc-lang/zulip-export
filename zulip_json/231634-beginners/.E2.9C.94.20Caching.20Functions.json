[
    {
        "content": "<p>One of the benefits of pure FP is the ability to cache, but I can't seem to find anything in the documentation about it. Is there a way to explicitly tell Roc to cache one of or all functions in an app?<br>\nI tried implementing caching with a <code>Cache value cache</code> monad, but (with the problem I was solving, at least- aoc day12) it crashed with a stack overflow.</p>",
        "id": 407691816,
        "sender_full_name": "Fletch Canny",
        "timestamp": 1702462601
    },
    {
        "content": "<p>Roc does not have this currently</p>",
        "id": 407759326,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702483488
    },
    {
        "content": "<p>Would need to be done manually with a dictionary</p>",
        "id": 407759366,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702483499
    },
    {
        "content": "<p>Recently we realized that we have a bug in code generation related to the stack that makes stack overflows more common. So you may have it that even if your function was tail recursive</p>",
        "id": 407759645,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702483575
    },
    {
        "content": "<p>Oh okay, a compiler bug makes more sense. Thanks for the reply!<br>\nI'd like to make an interface like so</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">interface</span><span class=\"w\"> </span><span class=\"kt\">Cache</span>\n<span class=\"w\">  </span><span class=\"nv\">exposes</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n<span class=\"w\">  </span><span class=\"nv\">imports</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n<span class=\"kt\">Cache</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">cache</span><span class=\"w\"> </span><span class=\"nf\">:=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">cache</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">cache</span><span class=\"p\">))</span>\n<span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Cache</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">cache</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Cache</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"nv\">cache</span>\n<span class=\"nv\">updateCache</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Cache</span><span class=\"w\"> </span><span class=\"nv\">r</span><span class=\"w\"> </span><span class=\"nv\">cache</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">cache</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">cache</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Cache</span><span class=\"w\"> </span><span class=\"nv\">r</span><span class=\"w\"> </span><span class=\"nv\">cache</span>\n<span class=\"nv\">andThen</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Cache</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">cache</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Cache</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"nv\">cache</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Cache</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"nv\">cache</span>\n<span class=\"nv\">sequence</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"p\">({}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Cache</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">cache</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Cache</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">cache</span>\n<span class=\"nv\">store</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">cache</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Cache</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nv\">cache</span>\n<span class=\"nv\">ignore</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Cache</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">cache</span>\n<span class=\"nv\">get</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Cache</span><span class=\"w\"> </span><span class=\"nv\">cache</span><span class=\"w\"> </span><span class=\"nv\">cache</span>\n<span class=\"nv\">run</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Cache</span><span class=\"w\"> </span><span class=\"nv\">r</span><span class=\"w\"> </span><span class=\"nv\">cache</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">cache</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">r</span>\n</code></pre></div>\n<p>Where the elements of sequence are thunked to optimize recursive functions, though I suppose that won't be necessary when function caching is implemented.<br>\nI'll mark this thread as solved.</p>",
        "id": 407842476,
        "sender_full_name": "Fletch Canny",
        "timestamp": 1702517171
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"569850\">Fletch Canny</span> has marked this topic as resolved.</p>",
        "id": 407842488,
        "sender_full_name": "Notification Bot",
        "timestamp": 1702517183
    }
]