[
    {
        "content": "<p>For my upcoming talk about parser combinators, I've defined the following types:</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>Parser a := Str -&gt; ParseResult a\nParseResult a : Result { value : a, rest : Str } Str\n</code></pre></div>\n<p>An opaque <code>Parser</code> type and a <code>ParseResult</code> type alias. I now tried to define a simple parser like so:</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>parse_digit : Parser U8\nparse_digit = |input|\n  Err(\"not implemented\")\n</code></pre></div>\n<p>This fails with the following message:</p>\n<div class=\"codehilite\"><pre><span></span><code>── TYPE MISMATCH in Parser.roc ─────────────────────────────────────────────────\n\nSomething is off with the body of the parse_digit definition:\n\n7│   parse_digit : Parser U8\n8│&gt;  parse_digit = |input|\n9│&gt;    Err(&quot;not implemented&quot;)\n\nThe body is an anonymous function of type:\n\n    (* -&gt; [Err Str])\n\nBut the type annotation on parse_digit says it should be:\n\n    Parser U8\n</code></pre></div>\n<p>I'm not entirely sure why as I've annotated <code>parse_digit</code> as <code>Parser U8</code>, but ok. Next, after looking through the Zulip conversations I found out that you can <code>@</code> prefix the lambda. Let's try that.</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>parse_digit : Parser U8\nparse_digit = |@Parser input|\n  Err(\"not implemented\")\n</code></pre></div>\n<p>But this also fail with a somewhat different message:</p>\n<div class=\"codehilite\"><pre><span></span><code>── TYPE MISMATCH in Parser.roc ─────────────────────────────────────────────────\n\nSomething is off with the body of the parse_digit definition:\n\n7│   parse_digit : Parser U8\n8│&gt;  parse_digit = |@Parser input|\n9│&gt;    Err(&quot;not implemented&quot;)\n\nThe body is an anonymous function of type:\n\n    (Parser * -&gt; [Err Str])\n\nBut the type annotation on parse_digit says it should be:\n\n    Parser U8\n</code></pre></div>\n<p>I'm sure I don't understand what's going on here, so any pointers would be much appreciated. I understand the problem must be related to how opaque types work, because if it's not opaque it compiles.</p>",
        "id": 501242783,
        "sender_full_name": "Kevin Hovsäter",
        "timestamp": 1740213640
    },
    {
        "content": "<p>To create an opaque value, you wrap the value with the name of the tag prefixed with @</p>",
        "id": 501263753,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740229720
    },
    {
        "content": "<p>To take the inner data out of the opaque value, you do what you did with the function args</p>",
        "id": 501263794,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740229760
    },
    {
        "content": "<p>Where you make a pattern that matches on <code>@Opaque(inner)</code></p>",
        "id": 501263815,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740229784
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/channel/231634-beginners/topic/I.20need.20help.20understanding.20opaque.20types/near/501263753\">said</a>:</p>\n<blockquote>\n<p>To create an opaque value, you wrap the value with the name of the tag prefixed with @</p>\n</blockquote>\n<p>Right. What I don't understand is why <code>parse_digit</code> isn't compatible with <code>Parser U8</code>. My understanding is that the type is only opaque outside the module?</p>",
        "id": 501263874,
        "sender_full_name": "Kevin Hovsäter",
        "timestamp": 1740229810
    },
    {
        "content": "<p>So to do what you want, you'll need to wrap the entire function in the opaque wrapper, not just the args or the return value</p>",
        "id": 501263892,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740229829
    },
    {
        "content": "<p>The type is the same inside and outside the module where the opaque type is defined</p>",
        "id": 501263912,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740229853
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/channel/231634-beginners/topic/I.20need.20help.20understanding.20opaque.20types/near/501263892\">said</a>:</p>\n<blockquote>\n<p>So to do what you want, you'll need to wrap the entire function in the opaque wrapper, not just the args or the return value</p>\n</blockquote>\n<p>I'm pretty sure I tried that. Hold on.</p>",
        "id": 501263933,
        "sender_full_name": "Kevin Hovsäter",
        "timestamp": 1740229869
    },
    {
        "content": "<p>The only difference is that you can't create or unwrap an opaque value outside of its defining module</p>",
        "id": 501263944,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740229881
    },
    {
        "content": "<p>This error message isn't super useful, but I'm not sure what specific improvement we could make</p>",
        "id": 501264074,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740229972
    },
    {
        "content": "<p>We could suggest moving where the opaque wrapper is if there's an opaque type on one side and a non-opaque type on the other side</p>",
        "id": 501264147,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740230028
    },
    {
        "content": "<p>When I wrap the entire lambda in <code>@Parser</code>, I get an error message saying I can't call the function with an argument because the type is opaque. Which I guess makes sense? What I wanted to achieve was having <code>Parser</code> be opaque as in you can't construct them yourself, you'll have to use the module interface, but perhaps I need some sort of constructor to achieve that then?</p>",
        "id": 501264217,
        "sender_full_name": "Kevin Hovsäter",
        "timestamp": 1740230064
    },
    {
        "content": "<p>Yes, for others to construct a parser they'll need a constructor</p>",
        "id": 501264525,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740230188
    },
    {
        "content": "<p>Yeah, I figured. But from within the module itself I was hoping that I can construct my own parsers without having to do that, but I can't really make it work.</p>",
        "id": 501264577,
        "sender_full_name": "Kevin Hovsäter",
        "timestamp": 1740230229
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>parse_digit : Parser U8\nparse_digit = @Parser(|input| Err(\"not implemented\"))\n</code></pre></div>",
        "id": 501264588,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740230236
    },
    {
        "content": "<p>Does this not work?</p>",
        "id": 501264595,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740230245
    },
    {
        "content": "<p>Nope.</p>",
        "id": 501264600,
        "sender_full_name": "Kevin Hovsäter",
        "timestamp": 1740230251
    },
    {
        "content": "<p>Getting a laptop...</p>",
        "id": 501264622,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740230269
    },
    {
        "content": "<p>Well, it compiles, but my <code>expect</code> fails saying I can't call my parser. This is all done in the same module.</p>",
        "id": 501264675,
        "sender_full_name": "Kevin Hovsäter",
        "timestamp": 1740230286
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>── TOO MANY ARGS in Parser.roc ─────────────────────────────────────────────────\n\nThe parse_digit value is an opaque type, so it cannot be called with\nan argument:\n\n11│  expect parse_digit(&quot;123&quot;) == Ok { value: 1, rest: &quot;123&quot; }\n            ^^^^^^^^^^^\n\nI can&#39;t call an opaque type because I don&#39;t know what it is! Maybe you\nmeant to unwrap it first?\n\n────────────────────────────────────────────────────────────────────────────────\n</code></pre></div>",
        "id": 501264696,
        "sender_full_name": "Kevin Hovsäter",
        "timestamp": 1740230306
    },
    {
        "content": "<p>Oh yeah, you can't call it!</p>",
        "id": 501265020,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740230458
    },
    {
        "content": "<p>The hint at the bottom is right in that you need to get the inner function out of the opaque value first</p>",
        "id": 501265045,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740230484
    },
    {
        "content": "<p>There's no auto dereferencing in Roc</p>",
        "id": 501265084,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740230500
    },
    {
        "content": "<p>Oh, I see, because <code>Parser</code> is opaque, you can’t really make assumptions about it. So I guess that means I need to change how <code>parse_digit</code> works then. Because unwrapping only works within the module, right?</p>",
        "id": 501265360,
        "sender_full_name": "Kevin Hovsäter",
        "timestamp": 1740230619
    },
    {
        "content": "<p>Yep, unless you provide a <code>get_inner : Parser a -&gt; (Str -&gt; ParseResult a)</code> equivalent</p>",
        "id": 501265694,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740230793
    },
    {
        "content": "<p>But I'd recommend something like this</p>",
        "id": 501265722,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740230800
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kn\">module</span><span class=\"w\"> </span><span class=\"err\">[]</span>\n\n<span class=\"kt\">Parser</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">:=</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">ParserResult</span><span class=\"w\"> </span><span class=\"nv\">a</span>\n<span class=\"kt\">ParserResult</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">data</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"kt\">Str</span>\n\n<span class=\"nv\">word</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Parser</span><span class=\"w\"> </span><span class=\"kt\">Str</span>\n<span class=\"nv\">word</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"kt\">Parser</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"nf\">|</span><span class=\"nv\">input</span><span class=\"nf\">|</span>\n<span class=\"w\">        </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">before</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">after</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">            </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">split_last</span><span class=\"p\">(</span><span class=\"nv\">input</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\" \"</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"err\">?</span><span class=\"w\"> </span><span class=\"nf\">|</span><span class=\"nv\">_</span><span class=\"nf\">|</span><span class=\"w\"> </span><span class=\"s\">\"Failed to split string\"</span>\n\n<span class=\"w\">        </span><span class=\"kt\">Ok</span><span class=\"p\">({</span><span class=\"w\"> </span><span class=\"nv\">data</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">before</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">after</span><span class=\"w\"> </span><span class=\"p\">}),</span>\n<span class=\"p\">)</span>\n\n<span class=\"nv\">parse</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Parser</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">ParserResult</span><span class=\"w\"> </span><span class=\"nv\">a</span>\n<span class=\"nv\">parse</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">|</span><span class=\"err\">@</span><span class=\"kt\">Parser</span><span class=\"p\">(</span><span class=\"nv\">parser</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nv\">input</span><span class=\"nf\">|</span><span class=\"w\"> </span><span class=\"nv\">parser</span><span class=\"p\">(</span><span class=\"nv\">input</span><span class=\"p\">)</span>\n\n<span class=\"nv\">expect</span>\n<span class=\"w\">    </span><span class=\"nv\">word</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"nv\">parse</span><span class=\"w\"> </span><span class=\"s\">\"abc def\"</span>\n<span class=\"w\">    </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"p\">({</span><span class=\"w\"> </span><span class=\"nv\">data</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"abc\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">rest</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"def\"</span><span class=\"w\"> </span><span class=\"p\">})</span>\n</code></pre></div>",
        "id": 501265953,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740230864
    },
    {
        "content": "<p>In that you provide an interface using the opaque value that doesn't leak the encapsulated impl</p>",
        "id": 501266157,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740230920
    },
    {
        "content": "<p>Ah, that makes sense! I test using the public interface. I have a <code>run</code> equivalent.</p>",
        "id": 501266169,
        "sender_full_name": "Kevin Hovsäter",
        "timestamp": 1740230923
    },
    {
        "content": "<p>Yeah, <code>run</code> works!</p>",
        "id": 501266232,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740230942
    },
    {
        "content": "<p>Thanks for the help, <span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span>. Appreciate it. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 501266488,
        "sender_full_name": "Kevin Hovsäter",
        "timestamp": 1740231037
    },
    {
        "content": "<p>Of course!</p>",
        "id": 501266609,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740231108
    },
    {
        "content": "<p>And of course, expect minor changes to this with the new compiler</p>",
        "id": 501266689,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740231127
    },
    {
        "content": "<p>Namely, custom/nominal types will not need the @ in the future, but will otherwise work very similarly</p>",
        "id": 501266753,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740231157
    },
    {
        "content": "<p>But you can optionally expose the tags of a custom union to other modules...</p>",
        "id": 501266822,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740231182
    },
    {
        "content": "<p>It's a bit more complicated, but <em>basically</em> the same</p>",
        "id": 501266853,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740231196
    },
    {
        "content": "<p>We'll put out docs when they're implemented!</p>",
        "id": 501266868,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740231205
    },
    {
        "content": "<p>When/where is your parser combinator talk?</p>",
        "id": 501266908,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740231223
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/channel/231634-beginners/topic/I.20need.20help.20understanding.20opaque.20types/near/501266908\">said</a>:</p>\n<blockquote>\n<p>When/where is your parser combinator talk?</p>\n</blockquote>\n<p>February 27, so Thursday next week. It's for a local meetup where I live, but fun nevertheless. I've never held one before. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> I'm going to walkthrough building a parser for arithmetic expressions, e.g., <code>1 * (1 + 3) + 2</code>.</p>",
        "id": 501269084,
        "sender_full_name": "Kevin Hovsäter",
        "timestamp": 1740232233
    },
    {
        "content": "<p>Awesome! A very fun usage of FP</p>",
        "id": 501269107,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740232258
    },
    {
        "content": "<p>If you want to do idiomatic Roc, consider throwing on record builders right at the end for an advanced feature</p>",
        "id": 501269142,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740232288
    },
    {
        "content": "<p>Might be to complex for a short talk</p>",
        "id": 501269150,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740232296
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/channel/231634-beginners/topic/I.20need.20help.20understanding.20opaque.20types/near/501269142\">said</a>:</p>\n<blockquote>\n<p>If you want to do idiomatic Rust, consider throwing on record builders right at the end for an advanced feature</p>\n</blockquote>\n<p>Roc you mean? I think I have roughly an hour allocated, so it could work.</p>",
        "id": 501269233,
        "sender_full_name": "Kevin Hovsäter",
        "timestamp": 1740232366
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/examples/blob/main/examples/RecordBuilder/DateParser.roc\">https://github.com/roc-lang/examples/blob/main/examples/RecordBuilder/DateParser.roc</a></p>",
        "id": 501269278,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740232410
    },
    {
        "content": "<p>Yep, typo</p>",
        "id": 501269309,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740232439
    },
    {
        "content": "<p>It's a very clean interface, you just need to figure out how to explain it well enough</p>",
        "id": 501269372,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740232467
    },
    {
        "content": "<p>Yeah, that would actually be an interesting \"alternative\" to what I'll go through. Record builders completely slipped my mind.</p>",
        "id": 501269413,
        "sender_full_name": "Kevin Hovsäter",
        "timestamp": 1740232518
    },
    {
        "content": "<p>They're an unusual feature, but they're really nice</p>",
        "id": 501270188,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740233150
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"452574\">Kevin Hovsäter</span> <a href=\"#narrow/channel/231634-beginners/topic/I.20need.20help.20understanding.20opaque.20types/near/501269084\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/channel/231634-beginners/topic/I.20need.20help.20understanding.20opaque.20types/near/501266908\">said</a>:</p>\n<blockquote>\n<p>When/where is your parser combinator talk?</p>\n</blockquote>\n<p>February 27, so Thursday next week. It's for a local meetup where I live, but fun nevertheless. I've never held one before. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> I'm going to walkthrough building a parser for arithmetic expressions, e.g., <code>1 * (1 + 3) + 2</code>.</p>\n</blockquote>\n<p>Does this meetup happen to be in/around Stockholm? I could be your cheerleader (outfit not included) <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 501275744,
        "sender_full_name": "Niclas Ahden",
        "timestamp": 1740237408
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"524503\">Niclas Ahden</span> <a href=\"#narrow/channel/231634-beginners/topic/I.20need.20help.20understanding.20opaque.20types/near/501275744\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"452574\">Kevin Hovsäter</span> <a href=\"#narrow/channel/231634-beginners/topic/I.20need.20help.20understanding.20opaque.20types/near/501269084\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/channel/231634-beginners/topic/I.20need.20help.20understanding.20opaque.20types/near/501266908\">said</a>:</p>\n<blockquote>\n<p>When/where is your parser combinator talk?</p>\n</blockquote>\n<p>February 27, so Thursday next week. It's for a local meetup where I live, but fun nevertheless. I've never held one before. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> I'm going to walkthrough building a parser for arithmetic expressions, e.g., <code>1 * (1 + 3) + 2</code>.</p>\n</blockquote>\n<p>Does this meetup happen to be in/around Stockholm? I could be your cheerleader (outfit not included) <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>\n<p>Haha!  it's happening in Växjö, so unfortunately not close by.</p>",
        "id": 501276025,
        "sender_full_name": "Kevin Hovsäter",
        "timestamp": 1740237609
    },
    {
        "content": "<p>Crap, I never get to practice my <em>moves</em> -- next time!</p>",
        "id": 501276101,
        "sender_full_name": "Niclas Ahden",
        "timestamp": 1740237680
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"452574\">Kevin Hovsäter</span> has marked this topic as resolved.</p>",
        "id": 501280412,
        "sender_full_name": "Notification Bot",
        "timestamp": 1740240908
    }
]