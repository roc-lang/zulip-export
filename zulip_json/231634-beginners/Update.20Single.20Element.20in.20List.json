[
    {
        "content": "<p>Is it possible to update a single element in a List without copying the entire List? I'm looking through the Roc Tutorial, and I didn't see a <code>List.set</code> function.</p>\n<p>Some context, I am an F# developer currently, and I write discrete event simulations. I often have a State record that has several fields of <code>Num List</code>that model the current state of the system.</p>\n<div class=\"codehilite\"><pre><span></span><code>State : { flowRates: Num List, volumes: Num List }\n</code></pre></div>\n<p>These fields represent things like Flow Rates and Volumes in tanks. As I process events, I have to update individual elements in the <code>Num List</code>. Flow rates are changing, for example.</p>\n<p>I have written these in a pure-functional style, but in F# the performance is terrible due to all the copying that needs to occur. I wonder if the Roc compiler is smart enough to avoid these copies if I write my code correctly. Since there doesn't appear to be a <code>List.set</code> function, it does not appear that this would be possible, or am I missing something?</p>\n<p>I'm excited about Roc but unsure if I could get the performance I need.</p>",
        "id": 342108177,
        "sender_full_name": "Matthew Crews",
        "timestamp": 1678897698
    },
    {
        "content": "<p>Roc has optimizations to update in place when possible.</p>",
        "id": 342108418,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1678897756
    },
    {
        "content": "<p>there is a <code>List.set</code>, in fact! <a href=\"https://www.roc-lang.org/builtins/List#set\">https://www.roc-lang.org/builtins/List#set</a></p>",
        "id": 342108427,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1678897757
    },
    {
        "content": "<p>and yeah it does what you want - if the list is unique, it will update in-place</p>",
        "id": 342108477,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1678897769
    },
    {
        "content": "<p>(we do need to fix the formatting on that type in the docs though haha)</p>",
        "id": 342108527,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1678897783
    },
    {
        "content": "<p>Is there a way to see if your lists are unique? I'd turn that compiler warning on for sure <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 342108745,
        "sender_full_name": "Matthew Crews",
        "timestamp": 1678897830
    },
    {
        "content": "<p>Not currently. Also, in certain cases, it can only be know at runtime and not compile time.</p>",
        "id": 342112423,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1678898696
    },
    {
        "content": "<p>we've discussed things like this a bunch in the past; the current thinking is that separate performance-oriented tools outside the compiler is most likely the way to go</p>",
        "id": 342113464,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1678898958
    },
    {
        "content": "<p>it's tricky to try to guarantee uniqueness without getting into a more Rust-like user experience where the type system has to incorporate them and you get compiler errors for scenarios that you know wouldn't be a problem in practice</p>",
        "id": 342113681,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1678899005
    },
    {
        "content": "<p>That sounds similar to JetBrains Rider which has an extension that lets you know if you are heap-allocating and making defensive copies which is incredibly helpful.</p>",
        "id": 342113896,
        "sender_full_name": "Matthew Crews",
        "timestamp": 1678899059
    },
    {
        "content": "<p>From my standpoint, Roc is beautiful and concise. Roc would make it easier to get a Discrete Event Simulation (DES) up and running faster using Functional Style than writing something in another language with a Procedural Style.</p>\n<p>The problem will be if I end up having to spend significant amounts of time getting the performance I need hunting down non-uniqueness.</p>\n<p>I know I can get the perf I need with a Procedural Style, but it will take longer to write a correct DES.</p>\n<p>Again, NOT complaining! I used to think it would be impossible to get high-perf FP language but Roc gives me hope.</p>",
        "id": 342115581,
        "sender_full_name": "Matthew Crews",
        "timestamp": 1678899421
    },
    {
        "content": "<p>If you start working on something. People here would definitely be willing to help.</p>",
        "id": 342118542,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1678900113
    },
    {
        "content": "<p>Is there a possibility to create a platform that would enforce linear types (like ATS or Austral)? That way, there would be no question of having a non-unique reference.</p>",
        "id": 342121186,
        "sender_full_name": "Uttam Narsu",
        "timestamp": 1678900822
    },
    {
        "content": "<blockquote>\n<p>Is there a possibility to create a platform that would enforce linear types (like ATS or Austral)?</p>\n</blockquote>\n<p>I still don't understand the Platforms thing, but it would be wonderful to have a system that enforced the uniqueness of references. Probably annoying until you know how to write code in that way but ultimately quite helpful.</p>",
        "id": 342124911,
        "sender_full_name": "Matthew Crews",
        "timestamp": 1678901775
    },
    {
        "content": "<p>No, couldn't be done by a platform.</p>",
        "id": 342135319,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1678904549
    },
    {
        "content": "<p>Also, I think to add on, besides 1 or 2 specific sharp edges I can think of, I believe that for the most part, you can write code in a normal manner and copies should be pretty minimal.</p>",
        "id": 342140478,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1678906028
    },
    {
        "content": "<p>have u guys ever talked about quantitative type theory idris2 style <a href=\"https://arxiv.org/pdf/2104.00480.pdf\">https://arxiv.org/pdf/2104.00480.pdf</a> ?</p>",
        "id": 342140968,
        "sender_full_name": "dank",
        "timestamp": 1678906163
    },
    {
        "content": "<p>Idris2 has definitely been talked about and people working on the compiler know about it. I don't have an answer to type detaiil specifics though. I regularly talk about more powerful types for performance but have limited literature experiences. Have much more experience having no type level help and just making things fast with lots of benchmarks, profiling, and such.</p>",
        "id": 342142512,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1678906590
    },
    {
        "content": "<p>i think we really want to avoid using type systems built on dependent type theories if possible. they are powerful, but their algorithmic complexity is very high (slow compile times) and have poor DX right now (though of course QTT is much better in this regard, still not great though). One thing is that, at least I, am not aware of any type system built on a dependent type theory that has complete type inference</p>",
        "id": 342148353,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1678908382
    },
    {
        "content": "<p>For me, it would be enough to have feedback in the IDE that a copy is occurring. I don't necessarily need the compiler to force me to behave in a particular way. That's how the Rider plugin works for warning on defensive copies of structs or heap allocation.</p>",
        "id": 342148972,
        "sender_full_name": "Matthew Crews",
        "timestamp": 1678908525
    },
    {
        "content": "<p>That is definitely a feature i want to make a reality</p>",
        "id": 342149672,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1678908739
    },
    {
        "content": "<p>Though extremely low priority</p>",
        "id": 342149700,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1678908749
    },
    {
        "content": "<p>Without that visibility, I'm afraid I would spend large amounts of time \"debugging\" the copying of data since there's no way to make a fast simulation without minimizing the memcpy.</p>",
        "id": 342149798,
        "sender_full_name": "Matthew Crews",
        "timestamp": 1678908787
    },
    {
        "content": "<blockquote>\n<p>Though extremely low priority</p>\n</blockquote>\n<p>That's what I was guessing</p>",
        "id": 342149827,
        "sender_full_name": "Matthew Crews",
        "timestamp": 1678908802
    },
    {
        "content": "<p>Recently, I manage to nicely display memory allocations at the function level. Where it made a flame graph based on the number of bytes allocated over the run of the program (though total count of allocations may be more useful in some cases)</p>",
        "id": 342150264,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1678908959
    },
    {
        "content": "<p>Also, i don't think it is hard to write roc code in a way to avoids allocations due to lack of uniqueness. Just need to learn a few rules/tips.</p>",
        "id": 342150400,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1678908987
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"454654\">Ayaz Hafiz</span> <a href=\"#narrow/stream/231634-beginners/topic/Update.20Single.20Element.20in.20List/near/342148353\">said</a>:</p>\n<blockquote>\n<p>i think we really want to avoid using type systems built on dependent type theories if possible. they are powerful, but their algorithmic complexity is very high (slow compile times) and have poor DX right now (though of course QTT is much better in this regard, still not great though). One thing is that, at least I, am not aware of any type system built on a dependent type theory that has complete type inference</p>\n</blockquote>\n<p>not all of it<br>\ni agree this stuff tends to be too complex</p>\n<p>but specifically something like idris' quantity annotation?</p>",
        "id": 342152051,
        "sender_full_name": "dank",
        "timestamp": 1678909470
    },
    {
        "content": "<p>what is the quantity annotation?</p>",
        "id": 342198906,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1678930253
    },
    {
        "content": "<p><a href=\"https://idris2.readthedocs.io/en/latest/tutorial/multiplicities.html\">https://idris2.readthedocs.io/en/latest/tutorial/multiplicities.html</a></p>",
        "id": 342352228,
        "sender_full_name": "Uttam Narsu",
        "timestamp": 1678981296
    },
    {
        "content": "<p>The 1 multiplicity expresses that a variable must be used exactly once</p>",
        "id": 342352514,
        "sender_full_name": "Uttam Narsu",
        "timestamp": 1678981346
    },
    {
        "content": "<p>Doesn't that add the same problem as linear types? anything with a value set to <code>1</code> you have to follow through all names and function calls to make sure it isn't duplicated?</p>",
        "id": 342366392,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1678984391
    },
    {
        "content": "<p>I guess if you force labeling all functions, it reduces that chasing some.</p>",
        "id": 342366488,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1678984418
    }
]