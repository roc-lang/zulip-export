[
    {
        "content": "<p>I'm having trouble, parsing <code>multipart/form-data</code>, since the builtin <code>List</code> lacks a <code>splitSequence</code> function.</p>",
        "id": 432189224,
        "sender_full_name": "Adrian",
        "timestamp": 1712657190
    },
    {
        "content": "<p>Is there a known parser for this format? Should I just bite the bullet and implement it with roc-parser, or am I misusing roc's Lists</p>",
        "id": 432189560,
        "sender_full_name": "Adrian",
        "timestamp": 1712657263
    },
    {
        "content": "<p>Should I write the zig primitive for the standard library?</p>",
        "id": 432191670,
        "sender_full_name": "Adrian",
        "timestamp": 1712657822
    },
    {
        "content": "<p>I don't know if anyone has looked at parsing that before.</p>",
        "id": 432201156,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1712660199
    },
    {
        "content": "<p><a href=\"https://roc-lang.github.io/basic-webserver/Http/#parseFormUrlEncoded\">https://roc-lang.github.io/basic-webserver/Http/#parseFormUrlEncoded</a></p>",
        "id": 432201635,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1712660336
    },
    {
        "content": "<p>I added a parser for FormUrlEncoded data, I'm not sure if that helps.</p>",
        "id": 432201788,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1712660384
    },
    {
        "content": "<p>I think it would be great to have a parser written in Roc <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 432202515,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1712660576
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/231634-beginners/topic/Roc.20.22multipart.2Fform-data.22.20parser/near/432201635\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://roc-lang.github.io/basic-webserver/Http/#parseFormUrlEncoded\">https://roc-lang.github.io/basic-webserver/Http/#parseFormUrlEncoded</a></p>\n</blockquote>\n<p>This is great! Sadly it doesn't solve my issue, since i'm parsing the format:</p>\n<div class=\"codehilite\"><pre><span></span><code>-----------------------------306137057221634204471155786395\nContent-Disposition: form-data; name=&quot;text&quot;\n\nabc\n-----------------------------306137057221634204471155786395\nContent-Disposition: form-data; name=&quot;file&quot;; filename=&quot;&quot;\nContent-Type: application/octet-stream\n\n\n-----------------------------306137057221634204471155786395--\n</code></pre></div>",
        "id": 432207300,
        "sender_full_name": "Adrian",
        "timestamp": 1712661791
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/231634-beginners/topic/Roc.20.22multipart.2Fform-data.22.20parser/near/432202515\">said</a>:</p>\n<blockquote>\n<p>I think it would be great to have a parser written in Roc <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>\n</blockquote>\n<p>I'm a bit worried about the performance <span aria-label=\"face with spiral eyes\" class=\"emoji emoji-1f635-200d-1f4ab\" role=\"img\" title=\"face with spiral eyes\">:face_with_spiral_eyes:</span>.<br>\nI'll try the roc only approach and if it doesn't work out I'll probably send a pr to either roc-builtins or roc-webserver.</p>",
        "id": 432207812,
        "sender_full_name": "Adrian",
        "timestamp": 1712661914
    },
    {
        "content": "<p>Here's my attempt, I don't think it's too performant</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>listSplit : List a, List a -&gt; List (List a) where a implements Eq\nlistSplit = \\inp, sep -&gt;\n    if List.len sep == 0 then\n        [inp]\n    else\n        inp\n        |&gt; List.walk\n            { out: [], buf: [], consume: [] }\n            \\{out, buf, consume}, elem -&gt;\n                if elem == List.get sep (List.len consume) |&gt; unwrap then\n                    { consume: consume |&gt; List.append elem, out, buf} |&gt; tryToConsume sep\n                else\n                    {consume:[], out, buf: buf |&gt; List.concat consume|&gt; List.append elem}\n        |&gt; \\{out,buf,consume} -&gt; out|&gt;List.append (List.concat buf consume)\n\ntryToConsume = \\{out,buf,consume},sep-&gt;\n            if consume == sep then\n                {out: out|&gt; List.append buf, buf:[],consume:[]}\n            else\n                {out,buf,consume}\n\nexpect listSplit (\"a/b/c/d\"|&gt;Str.toUtf8) ['/'] == [\"a\",\"b\",\"c\",\"d\"]|&gt;List.map Str.toUtf8\nexpect listSplit (\"a/b/c/d\"|&gt;Str.toUtf8) ['/','/'] == [\"a/b/c/d\"]|&gt;List.map Str.toUtf8\nexpect listSplit (\"/a//b/c/d/\"|&gt;Str.toUtf8) ['/'] == [\"\",\"a\",\"\",\"b\",\"c\",\"d\",\"\"]|&gt;List.map Str.toUtf8\nexpect listSplit (\"//a////b//c//d/\"|&gt;Str.toUtf8) ['/','/'] == [\"\",\"a\",\"\",\"b\",\"c\",\"d/\"]|&gt;List.map Str.toUtf8\n\nunwrap = \\a-&gt;\n       when a is\n            Ok e -&gt; e\n            Err e -&gt; crash \"unwraped Err $(Inspect.toStr e)\"\n</code></pre></div>",
        "id": 432222641,
        "sender_full_name": "Adrian",
        "timestamp": 1712665125
    },
    {
        "content": "<p>If any roc wizards would look at this, that would be just fine by me</p>",
        "id": 432222807,
        "sender_full_name": "Adrian",
        "timestamp": 1712665151
    },
    {
        "content": "<p>So this function is just Str.split, but on a list of bytes?</p>",
        "id": 432263573,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712674394
    },
    {
        "content": "<p>Jep, that's why I was asking if I should implement it the same way (in zig) or just in roc</p>",
        "id": 432269072,
        "sender_full_name": "Adrian",
        "timestamp": 1712675753
    },
    {
        "content": "<p>And if the std lib would accept it</p>",
        "id": 432269233,
        "sender_full_name": "Adrian",
        "timestamp": 1712675778
    },
    {
        "content": "<p>It should be fine to implement in Roc with good performance. All of the sub pieces needed for list are there.</p>\n<p>I know that separately, some changes are planned for <code>List.split</code> that never got implemented. We wanted to make the signatures cleaner and more consistent: <a href=\"https://github.com/roc-lang/roc/issues/6164\">https://github.com/roc-lang/roc/issues/6164</a></p>\n<p>That said, I think those changes would be around changing the current <code>List.split</code> to <code>List.splitAt</code>. Then implementing a new split function that is more simple to the string version, but still for single element splits. <code>List.splitBy: List a, a -&gt; List (List a)</code>. So no explicit plans for a 'List.splitSequences<code>, but would still be a good general discussion to have. Maybe it should fully match </code>Str.split` for flexibility.</p>",
        "id": 432274479,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712677022
    },
    {
        "content": "<p>Anyway, for a performant version in Roc, it will be very important to use <code>List.take</code> and <code>List.drop</code> or <code>List.sublist</code> to extract the splits. I should be able to write something up later today. May also want to use a smart search algorithm like <a href=\"https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore%E2%80%93Horspool_algorithm\">https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore%E2%80%93Horspool_algorithm</a>, but that would be more complex to get write and use in roc. Linear scan is probably a fine start.</p>",
        "id": 432275375,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712677253
    },
    {
        "content": "<p>Should I mark as complete until the List.split rework?</p>",
        "id": 432524466,
        "sender_full_name": "Adrian",
        "timestamp": 1712761166
    },
    {
        "content": "<p>I don't think anyone is specifically working on the <code>List.split</code> rework. Someone claimed it in december, but it never progressed. Overall, it is open to ideas an contributors.</p>\n<p>As for a performant implementation in pure roc, this  should be a solid base:</p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">listSplitSeq</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">list</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">seq</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nc\">List</span><span class=\"o\">.</span><span class=\"n\">isEmpty</span><span class=\"w\"> </span><span class=\"n\">seq</span><span class=\"w\"> </span><span class=\"n\">then</span>\n<span class=\"w\">        </span><span class=\"p\">[</span><span class=\"n\">list</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"k\">else</span>\n<span class=\"w\">        </span><span class=\"n\">listSplitSeqHelper</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"n\">seq</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n\n<span class=\"n\">listSplitSeqHelper</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">List</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">List</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nc\">List</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nc\">List</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nc\">U64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nc\">U64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nc\">U64</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">List</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">List</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">where</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">implements</span><span class=\"w\"> </span><span class=\"nc\">Eq</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"nc\">Inspect</span>\n<span class=\"n\">listSplitSeqHelper</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">out</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">seq</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lastMatch</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"ow\">when</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">List</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nc\">List</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">seq</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">is</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"c1\"># Still matching correct</span>\n<span class=\"w\">            </span><span class=\"n\">listSplitSeqHelper</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"n\">seq</span><span class=\"w\"> </span><span class=\"n\">lastMatch</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"c1\"># Failure to match</span>\n<span class=\"w\">            </span><span class=\"n\">listSplitSeqHelper</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"n\">seq</span><span class=\"w\"> </span><span class=\"n\">lastMatch</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n\n<span class=\"w\">        </span><span class=\"c1\"># (Ok _, Err OutOfBounds) -&gt;</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nc\">Err</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"c1\"># Managed to match the whole subseq</span>\n<span class=\"w\">            </span><span class=\"n\">subList</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nc\">List</span><span class=\"o\">.</span><span class=\"n\">sublist</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"ss\">start</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">lastMatch</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">len</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">lastMatch</span><span class=\"p\">}</span>\n<span class=\"w\">            </span><span class=\"n\">nextOut</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nc\">List</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"n\">subList</span>\n\n<span class=\"w\">            </span><span class=\"n\">listSplitSeqHelper</span><span class=\"w\"> </span><span class=\"n\">nextOut</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"n\">seq</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"nc\">Err</span><span class=\"w\"> </span><span class=\"nc\">OutOfBounds</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nc\">Err</span><span class=\"w\"> </span><span class=\"nc\">OutOfBounds</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"c1\"># Match all the way to the end, append last match and extra empty list</span>\n<span class=\"w\">            </span><span class=\"n\">subList</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nc\">List</span><span class=\"o\">.</span><span class=\"n\">sublist</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"ss\">start</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">lastMatch</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">len</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">lastMatch</span><span class=\"p\">}</span>\n<span class=\"w\">            </span><span class=\"n\">nextOut</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nc\">List</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"n\">subList</span>\n\n<span class=\"w\">            </span><span class=\"nc\">List</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"w\"> </span><span class=\"n\">nextOut</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"nc\">Err</span><span class=\"w\"> </span><span class=\"nc\">OutOfBounds</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"c1\"># No more possible matches, append remaining</span>\n<span class=\"w\">            </span><span class=\"n\">subList</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nc\">List</span><span class=\"o\">.</span><span class=\"n\">sublist</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"ss\">start</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">lastMatch</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">len</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">lastMatch</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">}</span>\n<span class=\"w\">            </span><span class=\"nc\">List</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"n\">subList</span>\n</code></pre></div>\n<p>It is just a linear scan, which is best for short sequences to match. To make it more optimal would be to add the fancy algorithm if the key is larger or the input list is really large. This might be worth making a builtin only for all of the extra bounds checks we could remove (especially if we add in the fancier algorithm).</p>",
        "id": 432533377,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712763589
    },
    {
        "content": "<p>This is great! One minor question is it possible for anything to match <code>(Ok _, Ok _)</code> and not match <code>(Ok x, Ok y)</code>. To me this seems like the same case?</p>",
        "id": 432543118,
        "sender_full_name": "Adrian",
        "timestamp": 1712766638
    },
    {
        "content": "<p>The <code>(Ok x, Ok y)</code> has a guard clause. It only matches <code>if x == y</code></p>",
        "id": 432553188,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712769928
    },
    {
        "content": "<p>Oh, one extra note <code>List (List a)</code> and <code>List Str</code> may have some general perf issues currently. I am actively working on a fix, but we have a refcounting issue with nested container types.</p>",
        "id": 432553427,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712769998
    },
    {
        "content": "<p>Perhaps the quicket fix is to just send a patch to basic-webserver platform and implement the parser directly. Is there any other way to run native code other than platoform and builtins?</p>",
        "id": 432556001,
        "sender_full_name": "Adrian",
        "timestamp": 1712770987
    },
    {
        "content": "<blockquote>\n<p>Is there any other way to run native code other than platoform and builtins?</p>\n</blockquote>\n<p>nope (well, depends on what you mean by \"native code\". Both builtins and regular roc code compile the same way. Builtins just have minor abilities to cut corners. Platform is the only place where side effects can happen at all)</p>",
        "id": 432565537,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712774894
    },
    {
        "content": "<blockquote>\n<p>Perhaps the quicket fix is to just send a patch to basic-webserver platform and implement the parser directly</p>\n</blockquote>\n<p>Eh, I think it would be best to keep it in roc or the standard library. If this does lead to measurable perf issues, that just more pressure to improve roc.</p>",
        "id": 432569103,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712776251
    },
    {
        "content": "<p>Seems like the most sane action: <a href=\"https://github.com/roc-lang/basic-webserver/blob/3f1028a742180da649f73361b8f389b98e10ca7a/platform/Http.roc#L147\">https://github.com/roc-lang/basic-webserver/blob/3f1028a742180da649f73361b8f389b98e10ca7a/platform/Http.roc#L147</a><br>\nIn the future sending files over http might make this a bottleneck</p>",
        "id": 432579905,
        "sender_full_name": "Adrian",
        "timestamp": 1712780908
    },
    {
        "content": "<p>I don't follow. That is just normal roc code.</p>",
        "id": 432611382,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712797361
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Roc.20.22multipart.2Fform-data.22.20parser/near/432611382\">said</a>:</p>\n<blockquote>\n<p>I don't follow. That is just normal roc code.</p>\n</blockquote>\n<p>Oh, sorry; It was meant as an example of the prevous parser also being just native roc.</p>",
        "id": 432641807,
        "sender_full_name": "Adrian",
        "timestamp": 1712819834
    },
    {
        "content": "<p><span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 432641839,
        "sender_full_name": "Adrian",
        "timestamp": 1712819854
    }
]