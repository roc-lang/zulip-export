[
    {
        "content": "<p>I’m implementing a non linear function from U8 to U8. I could use a list of 256 elements and use <code>List.get</code> but the never-existing errors might be annoying so I tried just writing a huge <code>when n is ...</code> with all integers from 0 to 255.</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">n</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">99</span>\n<span class=\"w\">  </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">124</span>\n<span class=\"w\">  </span><span class=\"nf\">...</span>\n<span class=\"w\">  </span><span class=\"mi\">255</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">22</span>\n</code></pre></div>\n<p>But the compiler tells me this:</p>\n<div class=\"codehilite\"><pre><span></span><code>330│&gt;          254 -&gt; 187\n331│&gt;          255 -&gt; 22\n\nOther possibilities include:\n\n    _\n\nI would have to crash if I saw one of those! Add branches for them!\n</code></pre></div>",
        "id": 441502013,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1717086752
    },
    {
        "content": "<p>I should add that I put a type annotation:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">sbox</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">U8</span>\n<span class=\"nv\">sbox</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">i</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">i</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">99</span>\n<span class=\"w\">        </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">124</span>\n<span class=\"w\">  </span><span class=\"nf\">...</span>\n</code></pre></div>",
        "id": 441502225,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1717086813
    },
    {
        "content": "<p>Is it expected that the type inference is not aware that 0..255 covers all numbers in U8? or is it a bug?</p>",
        "id": 441554492,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1717102230
    },
    {
        "content": "<p>I would guess a bug</p>",
        "id": 441556696,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717102895
    },
    {
        "content": "<p>I think we just never implemented it!</p>",
        "id": 441578670,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717111295
    }
]