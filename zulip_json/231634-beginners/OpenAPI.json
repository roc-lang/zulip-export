[
    {
        "content": "<p>I'm wondering about how an open api implementation could be added - to document server APIs. I like the way <a href=\"https://docs.nestjs.com/openapi/introduction\">NestJs</a> does it with decorators, but for ROC an approach like <a href=\"https://github.com/open-api-spex/open_api_spex\">open_api_spex</a> seems a better fit (although elixir allows metaprogramming)</p>\n<p>Or would this have to be added at the platform level?</p>",
        "id": 406299883,
        "sender_full_name": "David",
        "timestamp": 1701867715
    },
    {
        "content": "<p>I think that without metaprogramming it might be hard to do that automatically. For example, in Python you can have decorator parse function name, arguments, return type and docstring to create full OpenAPI description. I bet the same is possible in Rust. Then, you don't have to write anything new or separate, just the standard type hinting and docs. I guess without metaprogramming there is no other choice than to register endpoints explicitly/manually. Platform could provide some helpers for that, but I'm afraid it wouldn't be able to do that automagically</p>",
        "id": 406405813,
        "sender_full_name": "LoipesMas",
        "timestamp": 1701904383
    },
    {
        "content": "<p>Without decorators, you'd need a central place to register your handlers, but besides that I don't think you need any metaprogramming to have a really nice API in Roc.</p>",
        "id": 406550900,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1701958476
    },
    {
        "content": "<p>For example, you can use <a href=\"https://github.com/roc-lang/roc/pull/5389\">Record Builders</a> to define arguments to your endpoint and the library could automatically decode and validate those for you, while the compiler can make sure all the types line up.</p>",
        "id": 406551774,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1701958721
    },
    {
        "content": "<p>A few months ago, I made this <code>roc-gql</code> experiment that allows you implement a  fully type-safe and introspectable GraphQL backend without using any metaprogramming. You can see an example of a resolver definition <a href=\"https://github.com/agu-z/roc-gql/blob/089ec0b27b96d3a65c22a0b5bbe1d9ed1bf99114/examples/posts.roc#L40-L48\">here</a>.</p>\n<p>I'd imagine an OpenAPI package could use similar concepts, and it can probably look nicer as it wouldn't have to deal with the complexities of GraphQL.</p>",
        "id": 406554080,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1701959339
    }
]