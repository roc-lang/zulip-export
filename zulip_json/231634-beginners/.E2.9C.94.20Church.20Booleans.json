[
    {
        "content": "<p>While attempting to implement Church Booleans in Roc, I encountered the following errors:</p>\n<div class=\"codehilite\"><pre><span></span><code>── CIRCULAR TYPE in lambda.roc ─────────────────────────────────────────────────\n\nI&#39;m inferring a weird self-referential type for and:\n\n8│  and = \\p, q -&gt; p q p\n    ^^^\n\nHere is my best effort at writing down the type. You will see ∞ for\nparts of the type that repeat something already printed out\ninfinitely.\n\n    (a, ∞ -&gt; b), a -&gt; b\n\n\n── CIRCULAR TYPE in lambda.roc ─────────────────────────────────────────────────\n\nI&#39;m inferring a weird self-referential type for or:\n\n9│  or = \\p, q -&gt; p p q\n    ^^\n\nHere is my best effort at writing down the type. You will see ∞ for\nparts of the type that repeat something already printed out\ninfinitely.\n\n    (∞, a -&gt; b), a -&gt; b\n\n────────────────────────────────────────────────────────────────────────────────\n\n2 errors and 1 warning found in 43 ms\n.\n</code></pre></div>\n<p>Perhaps I missed something obvious in the documentation or tutorials, but I don't understand why Roc is objecting to these functions.</p>",
        "id": 430334171,
        "sender_full_name": "nat-418",
        "timestamp": 1711756560
    },
    {
        "content": "<p>so the basic problem is that the type system (apparently - TIL!) doesn't support functions which pass themselves to themselves and have only type variables for arguments. I think this is a limitation of Hindley-Milner type systems.</p>",
        "id": 430336737,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1711758104
    },
    {
        "content": "<p>(Elm and Haskell give similar errors; this isn't specific to Roc)</p>",
        "id": 430336756,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1711758117
    },
    {
        "content": "<p>for what it's worth, chatGPT suggests this implementation of Church And:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">and</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">q</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">p</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">q</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">y</span>\n</code></pre></div>",
        "id": 430337837,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1711758788
    },
    {
        "content": "<p>Thanks for the reply, and for the language. For posterity, I got my baby steps running by writing this code to a file and then loading it into the REPL (<code>$ roc repl &lt; bools.roc</code>):</p>\n<div class=\"codehilite\"><pre><span></span><code>true = \\x, _y -&gt; x\nfalse = \\_x, y -&gt; y\nand = \\p, q -&gt; \\x, y -&gt; p (q x y) y\nor = \\p, q -&gt; \\x, y -&gt; p x (q x y)\n\n&quot;Test &#39;true&#39;&quot;\n(true true true) &quot;ok&quot; &quot;err!&quot;\n(true true false) &quot;ok&quot; &quot;err!&quot;\n(true false true) &quot;err!&quot; &quot;ok&quot;\n(true false false) &quot;err!&quot; &quot;ok&quot;\n\n&quot;Test &#39;false&#39;&quot;\n(false true true) &quot;ok&quot; &quot;err!&quot;\n(false true false) &quot;err!&quot; &quot;ok&quot;\n(false false true) &quot;ok&quot; &quot;err!&quot;\n(false false false) &quot;err!&quot; &quot;ok&quot;\n\n&quot;Test &#39;and&#39;&quot;\n(and true true) &quot;ok&quot; &quot;err!&quot;\n(and true false) &quot;err!&quot; &quot;ok&quot;\n(and false true) &quot;err!&quot; &quot;ok&quot;\n(and false false) &quot;err!&quot; &quot;ok&quot;\n\n&quot;Test &#39;or&#39;&quot;\n(or true true) &quot;ok&quot; &quot;err!&quot;\n(or true false) &quot;ok&quot; &quot;err!&quot;\n(or false true) &quot;ok&quot; &quot;err!&quot;\n(or false false) &quot;err!&quot; &quot;ok&quot;\n</code></pre></div>",
        "id": 430394853,
        "sender_full_name": "nat-418",
        "timestamp": 1711809257
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"705306\">nat-418</span> has marked this topic as resolved.</p>",
        "id": 430394862,
        "sender_full_name": "Notification Bot",
        "timestamp": 1711809266
    }
]