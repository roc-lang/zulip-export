[
    {
        "content": "<p>is there a builtin identity function somewhere or should we just write <code>\\x -&gt; x</code>?</p>",
        "id": 303272762,
        "sender_full_name": "Travis",
        "timestamp": 1665412882
    },
    {
        "content": "<p>i'm often using this. is this the best way to express 'unwrap if ok'? </p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">...</span><span class=\"w\"></span>\n<span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Result</span><span class=\"o\">.</span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 303273140,
        "sender_full_name": "Travis",
        "timestamp": 1665413027
    },
    {
        "content": "<p>Do you have a bigger example?<br>\n<code>Result.try</code> has this definition :</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">try</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">err</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"nv\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"nv\">err</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It doesn't look to fit with your example as the callback should return a <code>Result</code></p>",
        "id": 303276162,
        "sender_full_name": "Ghislain",
        "timestamp": 1665414015
    },
    {
        "content": "<p>oh you're right. i was forgetting a Result. i need to use type annotations more. would have helped here.</p>",
        "id": 303276798,
        "sender_full_name": "Travis",
        "timestamp": 1665414232
    },
    {
        "content": "<p>so maybe i only thought i needed an identity function. is it even useful in roc? seems necessary in other functional langs.</p>",
        "id": 303277193,
        "sender_full_name": "Travis",
        "timestamp": 1665414355
    },
    {
        "content": "<p>my general view is that demand for an identity function is usually demand for a convenience operation in an API <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 303284745,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665417074
    },
    {
        "content": "<p>e.g. in other languages I've often found myself using <code>filterMap identity</code> - but if there were a function (like <code>keepOks</code> in Roc) which directly did what I wanted, I'd use that instead!</p>",
        "id": 303284943,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665417144
    },
    {
        "content": "<p>seems good to me. was just curious. turns out i didn't really need it. will re-evaluate later on maybe after doing more of the advent problems (via zig platform btw )  <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 303287723,
        "sender_full_name": "Travis",
        "timestamp": 1665418138
    },
    {
        "content": "<p>now that we have an at least partially working File.readBytes impl, i won't need to use multiline strings either</p>",
        "id": 303288068,
        "sender_full_name": "Travis",
        "timestamp": 1665418241
    },
    {
        "content": "<p>turns out i did need to use <code>Result.try \\x -&gt; x</code> here is the usage for more context. this is from my aoc 2021 day 2. without the last line it errors. </p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">parseLine</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Str</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Result</span><span class=\"w\"> </span><span class=\"nc\">Vec2</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nc\">InvalidNumStr</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"n\">parseLine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">parsers</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"err\">\\</span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">parseDir</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"s2\">\"up \"</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"ss\">x</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">y</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"err\">\\</span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">parseDir</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"s2\">\"down \"</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"ss\">x</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">y</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"err\">\\</span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">parseDir</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"s2\">\"forward \"</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"ss\">x</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">y</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">]</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"nc\">List</span><span class=\"o\">.</span><span class=\"n\">walkUntil</span><span class=\"w\"> </span><span class=\"n\">parsers</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">Err</span><span class=\"w\"> </span><span class=\"nc\">InvalidNumStr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"ow\">when</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Break</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nc\">Err</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Continue</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Result</span><span class=\"o\">.</span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 303300355,
        "sender_full_name": "Travis",
        "timestamp": 1665423008
    },
    {
        "content": "<p>Yes, my bad, I re-thought about your unwrap after posting my answer and understood what you could have written. <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 303301607,
        "sender_full_name": "Ghislain",
        "timestamp": 1665423563
    },
    {
        "content": "<p>But, it looked a bit confusing to me to return a <code>Result (Result a e) e</code>. Here it looks like it's what returns your <code>parseDir</code>, or am I missing something?</p>",
        "id": 303301878,
        "sender_full_name": "Ghislain",
        "timestamp": 1665423692
    },
    {
        "content": "<p>maybe <code>parseDir</code> could be simplified to only return <code>Result a e</code></p>",
        "id": 303302219,
        "sender_full_name": "Ghislain",
        "timestamp": 1665423842
    },
    {
        "content": "<p>Then you wouldn't have to unwrap if <code>Ok</code></p>",
        "id": 303302378,
        "sender_full_name": "Ghislain",
        "timestamp": 1665423909
    },
    {
        "content": "<p>If you want to keep your <code>parseDir</code> signature, you could also have written:</p>\n<div class=\"codehilite\"><pre><span></span><code>when f line is\n            Ok v -&gt; Break v\n            Err _ -&gt; Continue state\n</code></pre></div>\n<p>Although it would still be confusing to keep an unknown <code>Result</code> after having unwrapped it with <code>Ok v</code></p>",
        "id": 303302820,
        "sender_full_name": "Ghislain",
        "timestamp": 1665424116
    },
    {
        "content": "<p>yes i agree about the Result Result. that function needs some work. but its an improvement over what i started with. originally i was always doing all 3 <code>parseDir</code> calls and them <code>List.keepOks</code> followed by <code>List.get 0</code> was very sad. so atleast this is an improvement.</p>",
        "id": 303303097,
        "sender_full_name": "Travis",
        "timestamp": 1665424256
    },
    {
        "content": "<p>i think the <code>Break Ok v</code> is needed because the state is a Result.</p>",
        "id": 303303221,
        "sender_full_name": "Travis",
        "timestamp": 1665424321
    },
    {
        "content": "<p>initially <code>Err InvalidNumStr</code></p>",
        "id": 303303352,
        "sender_full_name": "Travis",
        "timestamp": 1665424363
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> <code>v</code> should also be a <code>Result</code> (<code>[Ok a, Err *]</code>)  so compatible with <code>Err InvalidNumStr</code></p>",
        "id": 303304100,
        "sender_full_name": "Ghislain",
        "timestamp": 1665424736
    },
    {
        "content": "<p>yes i agree. but when i remove it i get this error:</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"go\">This 2nd argument to try has an unexpected type:</span>\n\n<span class=\"go\">24│      |&gt; Result.try \\x -&gt; x</span>\n<span class=\"go\">                       ^^^^^^^</span>\n\n<span class=\"go\">The argument is an anonymous function of type:</span>\n\n<span class=\"go\">    { x : Int Signed64, y : Int Signed64 } -&gt; { x : Int Signed64,</span>\n<span class=\"go\">    y : Int Signed64 }</span>\n\n<span class=\"go\">But try needs its 2nd argument to be:</span>\n\n<span class=\"go\">    { x : Int Signed64, y : Int Signed64 } -&gt;</span>\n<span class=\"go\">    Result b [InvalidNumStr]*</span>\n</code></pre></div>",
        "id": 303304442,
        "sender_full_name": "Travis",
        "timestamp": 1665424898
    },
    {
        "content": "<p>this was with Oct 8th build</p>",
        "id": 303304477,
        "sender_full_name": "Travis",
        "timestamp": 1665424920
    },
    {
        "content": "<p>it took me a few minutes to respond cause i had just installed Oct 10th build to check if my json parser lazy call was fixed</p>",
        "id": 303304579,
        "sender_full_name": "Travis",
        "timestamp": 1665424960
    },
    {
        "content": "<p>but that made my day2 code err with different errors</p>",
        "id": 303304609,
        "sender_full_name": "Travis",
        "timestamp": 1665424981
    },
    {
        "content": "<p>Yes, my point was to be able to remove the Result.try <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 303305101,
        "sender_full_name": "Ghislain",
        "timestamp": 1665425201
    },
    {
        "content": "<p>i did end up removing the <code>Result.try</code> btw. here's how they ended up. </p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">parseLine</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Str</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Result</span><span class=\"w\"> </span><span class=\"nc\">Vec2</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nc\">InvalidNumStr</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"n\">parseLine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">parsers</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"err\">\\</span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">parseDir</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"s2\">\"up \"</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"ss\">x</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">y</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"err\">\\</span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">parseDir</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"s2\">\"down \"</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"ss\">x</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">y</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"err\">\\</span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">parseDir</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"s2\">\"forward \"</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"ss\">x</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">y</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">]</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"nc\">List</span><span class=\"o\">.</span><span class=\"n\">walkUntil</span><span class=\"w\"> </span><span class=\"n\">parsers</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">Err</span><span class=\"w\"> </span><span class=\"nc\">InvalidNumStr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"ow\">when</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Break</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nc\">Err</span><span class=\"w\"> </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Continue</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"></span>\n\n<span class=\"n\">parseDir</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nc\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nc\">Vec2</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Result</span><span class=\"w\"> </span><span class=\"nc\">Vec2</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nc\">NotFound</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nc\">InvalidNumStr</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"n\">parseDir</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">line</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">startsWith</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nc\">Str</span><span class=\"o\">.</span><span class=\"n\">replaceFirst</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"n\">startsWith</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Result</span><span class=\"o\">.</span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Str</span><span class=\"o\">.</span><span class=\"n\">toI64</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Result</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">vecMul</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"ss\">x</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">y</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 303476532,
        "sender_full_name": "Travis",
        "timestamp": 1665506293
    },
    {
        "content": "<p>not too bad. i looked at your day 2 and like your solution better though which uses pattern matching</p>",
        "id": 303476662,
        "sender_full_name": "Travis",
        "timestamp": 1665506345
    },
    {
        "content": "<p>i wonder do you have any suggestions for cleaning this part up? would like to remove the last line somehow.</p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">solve</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Str</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">pos1</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Vec2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">pos2</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Vec2</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">solve</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">vecs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nc\">Str</span><span class=\"o\">.</span><span class=\"n\">trim</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Str</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"w\"> </span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">List</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">parseLine</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\"># will overflow if reached - how to panic here or stop / return error?</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Result</span><span class=\"o\">.</span><span class=\"n\">withDefault</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">x</span><span class=\"p\">:</span><span class=\"mi\">999999999999999</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">:</span><span class=\"mi\">999999999999999</span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 303477266,
        "sender_full_name": "Travis",
        "timestamp": 1665506533
    },
    {
        "content": "<p><code>List.mapTry</code> may help</p>",
        "id": 303477409,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665506589
    },
    {
        "content": "<p>Instead of getting a list of results will give you a result of a list.</p>",
        "id": 303477539,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665506638
    },
    {
        "content": "<p>oh neat. will give it a 'try' <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 303477987,
        "sender_full_name": "Travis",
        "timestamp": 1665506792
    },
    {
        "content": "<p><code>mapTry</code> much better. now i can handle the error in main.</p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">solve</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Str</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Result</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">pos1</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Vec2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">pos2</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Vec2</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nc\">InvalidNumStr</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"n\">solve</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nc\">Str</span><span class=\"o\">.</span><span class=\"n\">trim</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Str</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"w\"> </span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">List</span><span class=\"o\">.</span><span class=\"n\">mapTry</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">parseLine</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Result</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">vecs</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">...</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 303483332,
        "sender_full_name": "Travis",
        "timestamp": 1665508500
    }
]