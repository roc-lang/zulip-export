[
    {
        "content": "<p>I don't know the proper term(s) for this situation, but it seems that two tags with the same name but different payload types can't interact with each other. Is this a feature or a bug?</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">expect</span><span class=\"w\"> </span><span class=\"no\">Foo</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"no\">Foo</span><span class=\"w\">           </span><span class=\"c1\"># true</span>\n<span class=\"n\">expect</span><span class=\"w\"> </span><span class=\"no\">Foo</span><span class=\"p\">(</span><span class=\"no\">Bar</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"no\">Foo</span><span class=\"p\">(</span><span class=\"no\">Baz</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\"># true, because payloads can unify to [Bar, Baz]</span>\n<span class=\"n\">expect</span><span class=\"w\"> </span><span class=\"no\">Foo</span><span class=\"p\">(</span><span class=\"no\">Bar</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"no\">Foo</span><span class=\"w\">      </span><span class=\"c1\"># fails type checking, so does Foo(\"Bar\") etc</span>\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>── TYPE MISMATCH in repro.roc ──────────────────────────────────────────────────\n\nThis 2nd argument to != has an unexpected type:\n\n10│  expect Foo(Bar) != Foo\n                        ^^^\n\nThis Foo tag has the type:\n\n    [Foo]\n\nBut != needs its 2nd argument to be:\n\n    [Foo [Bar]]a\n\n────────────────────────────────────────────────────────────────────────────────\n\n1 error and 0 warnings found in 31 ms\n</code></pre></div>",
        "id": 508363400,
        "sender_full_name": "jan kili",
        "timestamp": 1743017931
    },
    {
        "content": "<p>The simplest workaround seems to be to wrap any incompatible payload types in arbitrary tags, like</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"no\">Foo</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">))</span>\n<span class=\"no\">Foo</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">(</span><span class=\"s2\">\"4\"</span><span class=\"p\">))</span>\n<span class=\"no\">Foo</span><span class=\"p\">(</span><span class=\"no\">Empty</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 508364457,
        "sender_full_name": "jan kili",
        "timestamp": 1743018297
    },
    {
        "content": "<p>Technically we could allow it, but seems more error prone and confusing if the same union could have <code>Foo</code> and <code>Foo a</code> in it.</p>",
        "id": 508390637,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743028825
    },
    {
        "content": "<p>That said, it is important to allow <code>Foo</code> and <code>Foo a</code> to exist in separate tag unions. Cause that can easily happen if two libraries just happen to use the same tag name.</p>",
        "id": 508390717,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743028878
    },
    {
        "content": "<p>I'm really not sure about a use case, but I do get that from a theoretical perspective it could be allowed.</p>",
        "id": 508390866,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743028958
    },
    {
        "content": "<p>this is the correct behavior</p>",
        "id": 508391366,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1743029223
    },
    {
        "content": "<p>I thought through this scenario years ago and concluded it would break things if we did it the other way, although I don't remember the specific reason anymore and would have to reconstruct the reasoning <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 508391544,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1743029289
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/should.20tag.20.22homonyms.22.28.3F.29.20be.20allowed.3F/near/508390717\">said</a>:</p>\n<blockquote>\n<p>That said, it is important to allow <code>Foo</code> and <code>Foo a</code> to exist in separate tag unions.</p>\n</blockquote>\n<p><span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span><br>\nYup, this works - they just can't interact.</p>",
        "id": 508402076,
        "sender_full_name": "jan kili",
        "timestamp": 1743034881
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/231634-beginners/topic/should.20tag.20.22homonyms.22.28.3F.29.20be.20allowed.3F/near/508391366\">said</a>:</p>\n<blockquote>\n<p>this is the correct behavior</p>\n</blockquote>\n<p>Okie dokie!</p>",
        "id": 508402171,
        "sender_full_name": "jan kili",
        "timestamp": 1743034940
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"462053\">JanCVanB</span> has marked this topic as resolved.</p>",
        "id": 508402183,
        "sender_full_name": "Notification Bot",
        "timestamp": 1743034950
    }
]