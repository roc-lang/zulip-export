[
    {
        "content": "<p><code>Task.await</code> is currently defined as <code>Task a err, (a -&gt; Task b err) -&gt; Task b err</code>, I'd like to have <code>Task a erra, (a -&gt; Task b errb) -&gt; Task b errc</code> where <code>errc</code> is the combination of the tag unions of <code>erra</code> and <code>errb</code>, is that possible?</p>",
        "id": 364031785,
        "sender_full_name": "Anton",
        "timestamp": 1686064078
    },
    {
        "content": "<p>that should already happen automatically</p>",
        "id": 364034782,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686064669
    },
    {
        "content": "<p>in the sense that if you give it two tasks that each have tag unions for their error types, they should all unify and the returned task should have the union of their tags</p>",
        "id": 364035114,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686064728
    },
    {
        "content": "<p>That does work when I let the compiler infers the types but not with my own \"narrow\" type annotation, see comments above <code>readFirstArgT</code> and <code>readFileToStr</code>:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">app</span><span class=\"w\"> </span><span class=\"s\">\"command-line-args\"</span>\n<span class=\"w\">    </span><span class=\"nx\">packages</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nv\">pf</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/roc-lang/basic-cli/releases/download/0.3.2/tE4xS_zLdmmxmHwHih9kHWQ7fsXtJr7W7h3425-eZFk.tar.br\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"nx\">imports</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">        </span><span class=\"nx\">pf</span><span class=\"p\">.</span><span class=\"nx\">Stdout</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nx\">pf</span><span class=\"p\">.</span><span class=\"nx\">Stderr</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nx\">pf</span><span class=\"p\">.</span><span class=\"nx\">File</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nx\">pf</span><span class=\"p\">.</span><span class=\"nx\">Path</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nx\">pf</span><span class=\"p\">.</span><span class=\"nx\">Task</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nx\">pf</span><span class=\"p\">.</span><span class=\"nx\">Arg</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"nx\">provides</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nx\">to</span><span class=\"w\"> </span><span class=\"nx\">pf</span>\n\n<span class=\"nv\">main</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">Task</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n<span class=\"nv\">main</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">finalTask</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">        </span><span class=\"c1\"># try to read the first command line argument</span>\n<span class=\"w\">        </span><span class=\"nx\">pathArg</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">await</span><span class=\"w\"> </span><span class=\"nx\">readFirstArgT</span>\n\n<span class=\"w\">        </span><span class=\"nx\">readFileToStr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Path</span><span class=\"p\">.</span><span class=\"nx\">fromStr</span><span class=\"w\"> </span><span class=\"nx\">pathArg</span><span class=\"p\">)</span>\n\n<span class=\"w\">    </span><span class=\"nx\">finalResult</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">attempt</span><span class=\"w\"> </span><span class=\"nx\">finalTask</span>\n\n<span class=\"w\">    </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">finalResult</span><span class=\"w\"> </span><span class=\"o\">is</span>\n<span class=\"w\">        </span><span class=\"nx\">Err</span><span class=\"w\"> </span><span class=\"nx\">ZeroArgsGiven</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"nx\">Stderr</span><span class=\"p\">.</span><span class=\"nx\">line</span><span class=\"w\"> </span><span class=\"s\">\"Error ZeroArgsGiven:\\n\\tI expected one argument, but I got none.\\n\\tRun the app like this: `roc command-line-args.roc -- path/to/input.txt`\"</span>\n\n<span class=\"w\">        </span><span class=\"nx\">Err</span><span class=\"w\"> </span><span class=\"nf\">(ReadFileErr errMsg) -&gt;</span>\n<span class=\"w\">            </span><span class=\"nx\">Stderr</span><span class=\"p\">.</span><span class=\"nx\">line</span><span class=\"w\"> </span><span class=\"s\">\"Error ReadFileErr:\\n\\t\\(errMsg)\"</span>\n\n<span class=\"w\">        </span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"nx\">fileContentStr</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"nx\">Stdout</span><span class=\"p\">.</span><span class=\"nx\">line</span><span class=\"w\"> </span><span class=\"s\">\"Success! \\n\\t\\(fileContentStr)\"</span>\n\n<span class=\"c1\"># Task to read the first CLI arg (= Str)</span>\n<span class=\"c1\"># readFirstArgT : Task.Task Str [ZeroArgsGiven]</span>\n<span class=\"nv\">readFirstArgT</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"c1\"># read all command line arguments</span>\n<span class=\"w\">    </span><span class=\"nx\">args</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">Arg</span><span class=\"p\">.</span><span class=\"nx\">list</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">await</span>\n\n<span class=\"w\">    </span><span class=\"c1\"># get the second argument, the first is the executable's path</span>\n<span class=\"w\">    </span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"w\"> </span><span class=\"nx\">args</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Result</span><span class=\"p\">.</span><span class=\"nx\">mapErr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"err\">\\</span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">ZeroArgsGiven</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">fromResult</span>\n\n<span class=\"c1\"># reads a file and puts all lines in one Str</span>\n<span class=\"c1\"># readFileToStr : Path.Path -&gt; Task.Task Str [ReadFileErr Str]</span>\n<span class=\"nv\">readFileToStr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">path</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nx\">path</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">File</span><span class=\"p\">.</span><span class=\"nx\">readUtf8</span>\n<span class=\"w\">    </span><span class=\"c1\"># Make a nice error message</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">mapFail</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"err\">\\</span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">ReadFileErr</span><span class=\"w\"> </span><span class=\"s\">\"failed to read file\"</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 364049871,
        "sender_full_name": "Anton",
        "timestamp": 1686067777
    },
    {
        "content": "<p>I can turn <code>readFirstArgT : Task.Task Str [ZeroArgsGiven]</code> into <code>readFirstArgT : Task.Task Str [ZeroArgsGiven, ReadFileErr Str]</code>but that feels dirty, because it's overly broad :p</p>",
        "id": 364050308,
        "sender_full_name": "Anton",
        "timestamp": 1686067878
    },
    {
        "content": "<p>huh, interesting</p>",
        "id": 364052871,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686068435
    },
    {
        "content": "<p>what happens if you do <code>[ZeroArgsGiven]*</code> instead?</p>",
        "id": 364053025,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686068468
    },
    {
        "content": "<p>Yeah, I tried that as well:</p>\n<div class=\"codehilite\"><pre><span></span><code>‚ùØ ./roc_nightly/roc examples/CommandLineArgs/main.roc -- examples/CommandLineArgs/input.txt\n\n‚îÄ‚îÄ TYPE MISMATCH ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ examples/CommandLineArgs/main.roc ‚îÄ\n\nThis 2nd argument to await has an unexpected type:\n\n20‚îÇ&gt;          pathArg &lt;- Task.await readFirstArgT\n21‚îÇ&gt;\n22‚îÇ&gt;          readFileToStr (Path.fromStr pathArg)\n\nThe argument is an anonymous function of type:\n\n    Str -&gt; Task Str [ReadFileErr Str]\n\nBut await needs its 2nd argument to be:\n\n    Str -&gt; Task Str [ZeroArgsGiven]*\n\nTip: Seems like a tag typo. Maybe ReadFileErr should be ZeroArgsGiven?\n\nTip: Can more type annotations be added? Type annotations always help\nme give more specific messages, and I think they could help a lot in\nthis case\n\n\n‚îÄ‚îÄ TYPE MISMATCH ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ examples/CommandLineArgs/main.roc ‚îÄ\n\nThis 2nd argument to attempt has an unexpected type:\n\n24‚îÇ&gt;      finalResult &lt;- Task.attempt finalTask\n25‚îÇ&gt;\n26‚îÇ&gt;      when finalResult is\n27‚îÇ&gt;          Err ZeroArgsGiven -&gt;\n28‚îÇ&gt;              Stderr.line &quot;Error ZeroArgsGiven:\\n\\tI expected one argument, but I got none.\\n\\tRun the app like this: `roc command-line-args.roc -- path/to/input.txt`&quot;\n29‚îÇ&gt;\n30‚îÇ&gt;          Err (ReadFileErr errMsg) -&gt;\n31‚îÇ&gt;              Stderr.line &quot;Error ReadFileErr:\\n\\t\\(errMsg)&quot;\n32‚îÇ&gt;\n33‚îÇ&gt;          Ok fileContentStr -&gt;\n34‚îÇ&gt;              Stdout.line &quot;Success! \\n\\t\\(fileContentStr)&quot;\n\nThe argument is an anonymous function of type:\n\n    [\n        Err [\n            ReadFileErr Str,\n            ZeroArgsGiven,\n        ],\n        Ok Str,\n    ] -&gt; Task {} *\n\nBut attempt needs its 2nd argument to be:\n\n    Result Str [ZeroArgsGiven]* -&gt; Task {} *\n\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n2 errors and 1 warning found in 42 ms.\n\nYou can run the program anyway with roc run examples/CommandLineArgs/main.roc\n</code></pre></div>",
        "id": 364053465,
        "sender_full_name": "Anton",
        "timestamp": 1686068563
    },
    {
        "content": "<p>yeah that's surprising! I'm not sure why that doesn't work, but I bet <span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> does <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 364054041,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686068694
    },
    {
        "content": "<p>it's because <code>Task.Task</code> is an opaque type, and not all tag unions can be open-by-default-in-output position under an opaque type (but type parameters like the tags here should be). I'll file an issue, but in the meantime you can work around this by saying <code>[ZeroArgsGiven]_</code> and <code>[ReadFileErr Str]_</code>.</p>",
        "id": 364056034,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1686069154
    },
    {
        "content": "<p>Awesome, thanks :)</p>",
        "id": 364059730,
        "sender_full_name": "Anton",
        "timestamp": 1686070015
    },
    {
        "content": "<p>I'm having some trouble understanding how to type named tag unions when I want to combine those unions. What is the inferred type of <code>funtime</code> in the example below? If it is just the union <code>[Late, OnTime, Ongoing, Stopped]</code>, is there a way to express that type in terms of <code>RabbitState a</code> and <code>TeaPartyState a</code>?</p>\n<div class=\"codehilite\"><pre><span></span><code>app &quot;hello&quot;\n    packages { pf: &quot;https://github.com/roc-lang/basic-cli/releases/download/0.7.1/Icc3xJoIixF3hCcfXrDwLCu4wQHtNdPyoJkEbkgIElA.tar.br&quot; }\n    imports [pf.Stdout]\n    provides [main] to pf\n\nRabbitState a : [OnTime, Late]a\n\nrabbit : Str -&gt; RabbitState a\nrabbit = \\str -&gt;\n    if str == &quot;lateforaveryimportantdate&quot; then\n        Late\n    else\n        OnTime\n\nTeaPartyState a : [Ongoing, Stopped]a\n\nteaParty : Str -&gt; TeaPartyState a\nteaParty = \\str -&gt;\n    if str == &quot;time said enough&quot; then\n        Stopped\n    else\n        Ongoing\n\n# fails because when produces [Late, OnTime, Ongoing, Stopped]\n# funtime : Str -&gt; [RabbitState a, TeaPartyState a]\nfuntime = \\str -&gt;\n    # when fails because it produces [Late, OnTime, Ongoing, Stopped]\n    when Str.countGraphemes str is\n        x if x &gt; 16 -&gt; rabbit str\n        _ -&gt; teaParty str\n\n    # # if fails because rabbit branch produces [Late, OnTime]\n    # if Str.countGraphemes str &gt; 16 then\n    #     rabbit str\n    # else\n    #     teaParty str\n\nmain =\n    dbg (funtime &quot;beep&quot;)\n    Stdout.line &quot;hello world&quot;\n</code></pre></div>",
        "id": 416973481,
        "sender_full_name": "David Dunn",
        "timestamp": 1705741409
    },
    {
        "content": "<p>If you want to type that function it would be something like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>FullState : RabbitState (TeaPartyState [])\nfuntime : Str -&gt; FullState\n</code></pre></div>",
        "id": 417009580,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705772313
    },
    {
        "content": "<p>That said, I would definitely suggest avoiding code like that in general</p>",
        "id": 417009619,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705772369
    },
    {
        "content": "<p>I think tagged wrapping or just defining the final output type makes a lot more sense in almost all cases:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">funtime</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Rabbit</span><span class=\"w\"> </span><span class=\"kt\">RabbitState</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">TeaParty</span><span class=\"w\"> </span><span class=\"kt\">TeaPartyState</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nv\">note</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">need</span><span class=\"w\"> </span><span class=\"nv\">to</span><span class=\"w\"> </span><span class=\"nv\">remove</span><span class=\"w\"> </span><span class=\"nv\">the</span><span class=\"w\"> </span><span class=\"kr\">type</span><span class=\"w\"> </span><span class=\"nv\">variable</span><span class=\"w\"> </span><span class=\"nv\">from</span><span class=\"w\"> </span><span class=\"nv\">each</span><span class=\"w\"> </span><span class=\"nv\">for</span><span class=\"w\"> </span><span class=\"nv\">this</span>\n<span class=\"nv\">funtime</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">countGraphemes</span><span class=\"w\"> </span><span class=\"nv\">str</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">rabbit</span><span class=\"w\"> </span><span class=\"nv\">str</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Rabbit</span>\n<span class=\"w\">        </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">teaParty</span><span class=\"w\"> </span><span class=\"nv\">str</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">TeaParty</span>\n</code></pre></div>",
        "id": 417009779,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1705772495
    },
    {
        "content": "<p>Thanks! Agreed, combining tags like that makes it harder to track the meaning of each tag. Also, if the types <code>RabbitState</code> and <code>TeaPartyState</code> ended up sharing a tag like <code>Late</code>, the caller wouldn't know the context of the <code>Late</code> tag - it could mean something different for each state type.</p>",
        "id": 417605183,
        "sender_full_name": "David Dunn",
        "timestamp": 1706088590
    },
    {
        "content": "<p>I was doing this more to push the bounds of open tag unions so I can understand them better. Thanks for the clear response!</p>",
        "id": 417605346,
        "sender_full_name": "David Dunn",
        "timestamp": 1706088631
    }
]