[
    {
        "content": "<p>Hello, I'm trying to add an effect that executes a Command using Rust platform code. I got it working with just the command arg. But I wanted to pass in a list of args. But I keep getting a seg fault. My Effect definition is<br>\n<code>exec : Str, List Str -&gt; Effect (Result Str {})</code><br>\nand my Rust code is<br>\n<code>pub extern \"C\" fn roc_fx_exec(cmd: &amp;RocStr, args: RocList&lt;RocStr&gt;) -&gt; RocResult&lt;RocStr, ()&gt; {</code></p>\n<p>If I remove the <code>args</code> param from the code it compiles and runs fine. But with the RocList it seg faults.</p>",
        "id": 308602742,
        "sender_full_name": "Rob",
        "timestamp": 1667918799
    },
    {
        "content": "<p>My first gut reaction is that it is related to borrowing vs not borrowing(aka pass by reference or not). Should the <code>RocList</code> be <code>&amp;RocList</code>?</p>",
        "id": 308621340,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1667924058
    },
    {
        "content": "<p>Just seems strange that the string is passed by reference, but not the list.</p>",
        "id": 308621506,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1667924109
    },
    {
        "content": "<p>no that is what the llvm codegen does at the moment</p>",
        "id": 308623412,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1667924677
    },
    {
        "content": "<p>at least, internally</p>",
        "id": 308623435,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1667924685
    },
    {
        "content": "<p>hmm the C interface might do something different. Worth a try</p>",
        "id": 308623469,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1667924698
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> that worked thanks, but now I'm getting a seg fault trying to change the <code>&amp;RocList&lt;&amp;RocStr&gt;</code> to a <code>Vec&lt;String&gt;</code><br>\nHere's the code I'm trying:<br>\n<code>  let rust_args: Vec&lt;String&gt; = args.as_slice().to_vec().iter().map(|x| x.as_str().to_string()).collect();</code></p>",
        "id": 308637892,
        "sender_full_name": "Rob",
        "timestamp": 1667929157
    },
    {
        "content": "<p>I think it should be <code>&amp;RocList&lt;RocStr&gt;</code></p>",
        "id": 308640853,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1667930230
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> that did it! Thanks so much!</p>",
        "id": 308646475,
        "sender_full_name": "Rob",
        "timestamp": 1667932029
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479320\">Rob</span> has marked this topic as resolved.</p>",
        "id": 308646501,
        "sender_full_name": "Notification Bot",
        "timestamp": 1667932038
    }
]