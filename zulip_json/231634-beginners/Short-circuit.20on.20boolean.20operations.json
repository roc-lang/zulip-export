[
    {
        "content": "<p>TIL that Roc does not short-circuit on boolean operations. I am surprised I only hit this now <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span><br>\nFor context, the following program is a minimization of what I was trying to do. It crashes because of underflow:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">app</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">pf</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">platform</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/roc-lang/basic-cli/releases/download/0.17.0/lZFLstMUCUvd5bjnnpYromZJXkQUrdhbva4xdBInicE.tar.br\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"kr\">main </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">idx</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"nv\">u64</span>\n<span class=\"w\">    </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">idx</span><span class=\"w\"> </span><span class=\"nf\">&gt;=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"nf\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nv\">idx</span><span class=\"w\"> </span><span class=\"nf\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"err\">!</span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">ok</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n</code></pre></div>",
        "id": 486060924,
        "sender_full_name": "JRI98",
        "timestamp": 1733308670
    },
    {
        "content": "<p>This was just brought up in the <a href=\"#narrow/channel/304641-ideas/topic/static.20dispatch.20-.20operator.20desugaring.20to.20methods/near/484629893\">operator desugaring discussion</a>. We plan to desugar <code>a &amp;&amp; b</code> to <code>if a then b else False</code> and <code>a || b</code> to <code>if a then True else b</code> to implement short circuiting.</p>",
        "id": 486061465,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733308834
    },
    {
        "content": "<p>I don't see an issue for it on GitHub, we should make a few of those once we move towards implementing static dispatch</p>",
        "id": 486061691,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733308911
    },
    {
        "content": "<p>I'm so glad you hit this before me!  How surprising!  I don't think I've used a language without short circuiting in a _long_ time</p>",
        "id": 486098833,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733320754
    },
    {
        "content": "<p>Seems like something you'd want to wait to transform until IR</p>",
        "id": 486099052,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1733320805
    }
]