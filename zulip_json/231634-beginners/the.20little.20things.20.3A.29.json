[
    {
        "content": "<p>Whoever is responsible for the superb handling of relative platform imports (ex: <code>packages { base: \"../roc/examples/hello-world/platform\" }</code>), thank you! I tried that, thinking \"surely it won't be this easy/possible\", and then it just worked.</p>",
        "id": 263751971,
        "sender_full_name": "jan kili",
        "timestamp": 1638684184
    },
    {
        "content": "<p>Haha, that's a pleasant error message: <a href=\"/user_uploads/22008/lLfNQmJKifIdhqZIfd5Eax-M/Screen-Shot-2021-12-21-at-8.27.20-AM.png\">Screen-Shot-2021-12-21-at-8.27.20-AM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/lLfNQmJKifIdhqZIfd5Eax-M/Screen-Shot-2021-12-21-at-8.27.20-AM.png\" title=\"Screen-Shot-2021-12-21-at-8.27.20-AM.png\"><img src=\"/user_uploads/22008/lLfNQmJKifIdhqZIfd5Eax-M/Screen-Shot-2021-12-21-at-8.27.20-AM.png\"></a></div>",
        "id": 265698826,
        "sender_full_name": "jan kili",
        "timestamp": 1640101116
    },
    {
        "content": "<p>I just accidentally discovered that <code>Num.mulWrap</code> (and its wrapping-related friends) exist. <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> This seems obvious in hindsight. Until two minutes ago, I thought Roc had disallowed planned <code>Num</code> overflows by design... but no, it's just a very flexible system that prevents unplanned overflows by default! Thank you, designers! I'm gonna add <code>Num.*Wrap</code> to the docs and tutorial.</p>",
        "id": 268334720,
        "sender_full_name": "jan kili",
        "timestamp": 1642471756
    },
    {
        "content": "<p>Now I can solve a TODO from a week ago! <code># TODO: Make this overflow-safe, somehow.</code> <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 268335642,
        "sender_full_name": "jan kili",
        "timestamp": 1642472703
    },
    {
        "content": "<p>lol :)</p>",
        "id": 268395076,
        "sender_full_name": "Lucas Rosa",
        "timestamp": 1642514819
    },
    {
        "content": "<p><code>record |&gt; transform |&gt; .field</code> works?!?! <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> Soooooooooo clean.</p>",
        "id": 275330222,
        "sender_full_name": "jan kili",
        "timestamp": 1647320677
    },
    {
        "content": "<p>(I know that point-free programming has drawbacks, but I didn't realize how many of my lambdas were syntactically unnecessary...)</p>",
        "id": 275330253,
        "sender_full_name": "jan kili",
        "timestamp": 1647320741
    },
    {
        "content": "<p>Nah, tacit programming is amazing with zero drawbacks and everyone should be programming in APL, BQN, or some similar language. ~~~lots of sarcasm~~~</p>",
        "id": 275330452,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1647320989
    },
    {
        "content": "<p>But actually, that is really cool and clean</p>",
        "id": 275330455,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1647320998
    },
    {
        "content": "<p>personally I think pointfree function <em>application</em> is usually great and pointfree function <em>composition</em> is usually not <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 275358480,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647342664
    },
    {
        "content": "<p><code>(saying  . you  . are . what) \"?\"</code>  :D</p>",
        "id": 275367890,
        "sender_full_name": "Zeljko Nesic",
        "timestamp": 1647348697
    },
    {
        "content": "<p>I think point free composition is really nice if the functions are named well and have obvious meaning</p>",
        "id": 275385309,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1647356677
    },
    {
        "content": "<p>hello:) </p>\n<p>I'm just getting started learning about capabilities<br>\n(<a href=\"http://habitatchronicles.com/2017/05/what-are-capabilities/\">http://habitatchronicles.com/2017/05/what-are-capabilities/</a>)</p>\n<p>apparently it works well with OOP (smalltalk, java?)</p>\n<p>roc being inspired by smalltalk, does it make use of capabilities?</p>",
        "id": 354586089,
        "sender_full_name": "osbyrne",
        "timestamp": 1682814261
    },
    {
        "content": "<p>I know smalltalk was mentioned in some editor chats, but to my knowledge roc isn't really inspired by smalltalk (could totally be wrong).</p>\n<p>Anyway, to answer the question. I think that Roc, especially with the platform abstraction could be used in a way to facilitate capabilities, but I don't think there is much explicit about the langauge otherwise that pushes people towards capabilties.</p>",
        "id": 354591370,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682817444
    },
    {
        "content": "<p>With the platform abstraction, I think you could directly create this type of limit access control, even making compatible platforms with different sets of restrictions.</p>",
        "id": 354591474,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682817509
    },
    {
        "content": "<p>That said, you could also build it directly into a platform where has some way to interface with a user when resources are requested. This would be akin to building an OS wrapper that uses capabilities instead of direct access control.</p>",
        "id": 354591628,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682817606
    },
    {
        "content": "<p>Saying all of this, I am totally new to capabilities and would really need to see concrete code examples to try and make examples of how it could look in roc. Probably will dig into the article more later and search around.</p>",
        "id": 354591740,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682817704
    },
    {
        "content": "<p>On other note, Roc does not have linear types. Depending on how exactly you think of capabilities, that may be a requirement, but I don't really think so based on reading the article.</p>",
        "id": 354591873,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1682817795
    }
]