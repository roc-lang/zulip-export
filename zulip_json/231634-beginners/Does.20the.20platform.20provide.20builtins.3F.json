[
    {
        "content": "<p>I'm confused about what a platform needs to include. The basic-cli seems to include implementations for all of the builtins. But other demo platforms are much smaller. Are the builtins in basic-cli just there for convenience with interfacing between Roc and Zig? If so, where are the real implementations of the builtins?</p>",
        "id": 486583356,
        "sender_full_name": "Matt Harden",
        "timestamp": 1733514193
    },
    {
        "content": "<p>When you say builtins, are you referring to <code>List</code> and <code>Dict</code> and all, or stuff like <code>File</code> and <code>Http</code>?</p>",
        "id": 486584693,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733514800
    },
    {
        "content": "<p>Roc's \"builtins\" are those types defined here: <a href=\"https://github.com/roc-lang/roc/tree/main/crates/compiler/builtins/roc\">https://github.com/roc-lang/roc/tree/main/crates/compiler/builtins/roc</a></p>",
        "id": 486584769,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733514842
    },
    {
        "content": "<p>And the basic-cli interaction with them is auto-generated as \"roc glue\"</p>",
        "id": 486584861,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733514867
    },
    {
        "content": "<p>The other types like <code>File</code> and <code>Http</code> are defined in basic-cli specifically for now because it's easier to maintain them there, but will <em>probably</em> get pulled into separate packages at some point</p>",
        "id": 486585006,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733514940
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/channel/231634-beginners/topic/Does.20the.20platform.20provide.20builtins.3F/near/486584693\">said</a>:</p>\n<blockquote>\n<p>When you say builtins, are you referring to <code>List</code> and <code>Dict</code> and all, or stuff like <code>File</code> and <code>Http</code>?</p>\n</blockquote>\n<p>List, Dict. Str...</p>",
        "id": 486585058,
        "sender_full_name": "Matt Harden",
        "timestamp": 1733514961
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 486585189,
        "sender_full_name": "Matt Harden",
        "timestamp": 1733515015
    },
    {
        "content": "<p>In particular, the builtins like <code>List</code> and <code>Result</code> are included by the compiler without import in every Roc program</p>",
        "id": 486585277,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733515060
    },
    {
        "content": "<p>Which is why you never see them explicitly imported</p>",
        "id": 486585312,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733515079
    },
    {
        "content": "<p>Follow up: how would one add support for a new platform language to <code>roc glue</code>?</p>\n<p>[edit] I found it at <a href=\"https://github.com/roc-lang/roc/tree/main/crates/glue\">https://github.com/roc-lang/roc/tree/main/crates/glue</a></p>",
        "id": 486585406,
        "sender_full_name": "Matt Harden",
        "timestamp": 1733515103
    },
    {
        "content": "<p>yep!</p>",
        "id": 486586091,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733515388
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"625912\">@Sven van Caem</span> was working on the glue recently, maybe he can help you figure out how to get started?</p>",
        "id": 486586187,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733515438
    },
    {
        "content": "<p>Thanks! I'm interested in (perhaps) making a better Go platform than <a href=\"https://github.com/roc-lang/examples/tree/main/examples/GoPlatform\">https://github.com/roc-lang/examples/tree/main/examples/GoPlatform</a>, so might give it a try to add support for Go to glue.</p>",
        "id": 486586525,
        "sender_full_name": "Matt Harden",
        "timestamp": 1733515570
    },
    {
        "content": "<p>btw. I noticed GoPlatform is missing roc_panic, roc_memset, roc_getppid, roc_shm_open, and roc_mmap. Are those optional?</p>",
        "id": 486587416,
        "sender_full_name": "Matt Harden",
        "timestamp": 1733515932
    },
    {
        "content": "<p>I'm not sure.</p>",
        "id": 486587485,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733515967
    },
    {
        "content": "<p>Does it run? haha</p>",
        "id": 486587495,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733515970
    },
    {
        "content": "<p>Also, having Go glue could be helpful for our attempt to make stackful coroutines work, so this would be a useful endeavour!</p>",
        "id": 486587574,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733516005
    },
    {
        "content": "<p>It runs the provided example, but I don't know what might break if I try to use it.</p>",
        "id": 486587629,
        "sender_full_name": "Matt Harden",
        "timestamp": 1733516034
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/stream/231634-beginners/topic/Does.20the.20platform.20provide.20builtins.3F/near/486586187\">said</a>:</p>\n<blockquote>\n<p>I think <span class=\"user-mention silent\" data-user-id=\"625912\">Sven van Caem</span> was working on the glue recently, maybe he can help you figure out how to get started?</p>\n</blockquote>\n<p>I might be able to answer questions! I'll have more time later though</p>",
        "id": 486587741,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1733516073
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"625912\">Sven van Caem</span> <a href=\"#narrow/channel/231634-beginners/topic/Does.20the.20platform.20provide.20builtins.3F/near/486587741\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/stream/231634-beginners/topic/Does.20the.20platform.20provide.20builtins.3F/near/486586187\">said</a>:</p>\n<blockquote>\n<p>I think <span class=\"user-mention silent\" data-user-id=\"625912\">Sven van Caem</span> was working on the glue recently, maybe he can help you figure out how to get started?</p>\n</blockquote>\n<p>I might be able to answer questions! I'll have more time later though</p>\n</blockquote>\n<p>No rush! I'm pleasantly surprised to have gotten any answer at all so quickly. :-)</p>",
        "id": 486587847,
        "sender_full_name": "Matt Harden",
        "timestamp": 1733516119
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"782455\">Matt Harden</span> <a href=\"#narrow/stream/231634-beginners/topic/Does.20the.20platform.20provide.20builtins.3F/near/486587416\">said</a>:</p>\n<blockquote>\n<p>btw. I noticed GoPlatform is missing roc_panic, roc_memset, roc_getppid, roc_shm_open, and roc_mmap. Are those optional?</p>\n</blockquote>\n<p>It seems to depend on the language e.g. a C app will run just fine without them as long as they're not used, but a Zig app won't compile without them</p>",
        "id": 486587873,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1733516132
    },
    {
        "content": "<p>Context on stackful coroutines, btw: <a href=\"#narrow/channel/304641-ideas/topic/stackful.20coroutines.20in.20hosts/near/473001620\">https://roc.zulipchat.com/#narrow/channel/304641-ideas/topic/stackful.20coroutines.20in.20hosts/near/473001620</a></p>",
        "id": 486587908,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1733516149
    },
    {
        "content": "<p><a href=\"https://github.com/lukewilliamboswell/roc-platform-template-go\">https://github.com/lukewilliamboswell/roc-platform-template-go</a> </p>\n<p>This may be of interest. </p>\n<p>Also checkout some of <span class=\"user-mention\" data-user-id=\"496321\">@Oskar Hahn</span> work on different go platforms.</p>",
        "id": 486588198,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733516269
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/channel/231634-beginners/topic/Does.20the.20platform.20provide.20builtins.3F/near/486588198\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/lukewilliamboswell/roc-platform-template-go\">https://github.com/lukewilliamboswell/roc-platform-template-go</a> </p>\n<p>This may be of interest. </p>\n<p>Also checkout some of <span class=\"user-mention silent\" data-user-id=\"496321\">Oskar Hahn</span> work on different go platforms.</p>\n</blockquote>\n<p>Oh! thank you, I missed those.</p>",
        "id": 486588338,
        "sender_full_name": "Matt Harden",
        "timestamp": 1733516308
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"782455\">Matt Harden</span> <a href=\"#narrow/channel/231634-beginners/topic/Does.20the.20platform.20provide.20builtins.3F/near/486587416\">said</a>:</p>\n<blockquote>\n<p>btw. I noticed GoPlatform is missing roc_panic, roc_memset, roc_getppid, roc_shm_open, and roc_mmap. Are those optional?</p>\n</blockquote>\n<p>roc_panic is called by roc when there is a crash or a runtime error. It is needed.</p>\n<p>The others are part of the shared memory infra that is used for roc test and <code>expect</code> . I believe the plan is to remove those. I made a start on a PR in that direction...</p>",
        "id": 486588648,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733516434
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/pull/7256\">https://github.com/roc-lang/roc/pull/7256</a></p>",
        "id": 486588744,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733516479
    },
    {
        "content": "<p>So <code>RocStr</code> and <code>RocList</code> in <a href=\"https://github.com/lukewilliamboswell/roc-platform-template-go/blob/main/host/roc/roc_std.go\">https://github.com/lukewilliamboswell/roc-platform-template-go/blob/main/host/roc/roc_std.go</a> are hand spun, right?</p>",
        "id": 486589109,
        "sender_full_name": "Matt Harden",
        "timestamp": 1733516655
    },
    {
        "content": "<p>Yep</p>",
        "id": 486589519,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733516865
    },
    {
        "content": "<p>So the <code>host</code> directory is for the Roc to host language basic interface, and the <code>platform</code> directory is for the extended capabilities provided to Roc by the platform?</p>",
        "id": 486589527,
        "sender_full_name": "Matt Harden",
        "timestamp": 1733516869
    },
    {
        "content": "<p>A roc app doesn't exist without a platform. The platform includes a host which is written in another language like Go, and is the executable that starts first and then calls into roc.</p>",
        "id": 486589752,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733516956
    },
    {
        "content": "<p>The platform files are all .roc and are basically just an API or interface between the roc part and the host part.</p>",
        "id": 486589865,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733517003
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/channel/231634-beginners/topic/Does.20the.20platform.20provide.20builtins.3F/near/486589865\">said</a>:</p>\n<blockquote>\n<p>The platform files are all .roc and are basically just an API or interface between the roc part and the host part.</p>\n</blockquote>\n<p>I see now; thanks.</p>",
        "id": 486590048,
        "sender_full_name": "Matt Harden",
        "timestamp": 1733517072
    },
    {
        "content": "<p>One day we might have a Go package for RocStr and RocList and the builtins so platform authors dont have to worry about the internals of how roc handles things. But for now we have been writing them by hand.</p>",
        "id": 486590064,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733517078
    },
    {
        "content": "<p>We would want to generate those with roc glue, right?</p>",
        "id": 486590124,
        "sender_full_name": "Matt Harden",
        "timestamp": 1733517110
    },
    {
        "content": "<p>I dont think so. Glue is more for generating types defined in the platform, like if you make a record or tag union you would use glue to generate interfacing code in go. It would probably use the Go package that already had impls for RocStr and RocList etc.</p>",
        "id": 486590325,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733517212
    },
    {
        "content": "<p>So the builtins should live in a Go package/library somwhere. e.g. <code>RocResult</code>, <code>RocList</code></p>\n<p>And custom types specific to the platform are generated by glue. E.g. <code>HttpResponse</code>, <code>File</code></p>",
        "id": 486590548,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733517314
    },
    {
        "content": "<p>Which builtin Roc types would we want to have hand implementations of in other languages? It seems like that could be a maintenance issue. Str and List are fairly complex already and the more different implementations we have the harder they will be to change without breaking things.</p>",
        "id": 486590734,
        "sender_full_name": "Matt Harden",
        "timestamp": 1733517400
    },
    {
        "content": "<p>It seems like a world where glue creates a working but perhaps suboptimal impl of those types for you would be nice, as long as you keep the option of replacing them with better implementations manually.</p>",
        "id": 486591253,
        "sender_full_name": "Matt Harden",
        "timestamp": 1733517611
    },
    {
        "content": "<p>glue/README.md agrees with what you're saying though.</p>",
        "id": 486591529,
        "sender_full_name": "Matt Harden",
        "timestamp": 1733517777
    },
    {
        "content": "<p>I noticed that <code>build.roc</code> in <a href=\"https://github.com/lukewilliamboswell/roc-platform-template-go\">https://github.com/lukewilliamboswell/roc-platform-template-go</a> tells the <code>go</code> command to use <code>zig cc</code>, meaning there's a dependency on Zig. Is that necessary?</p>",
        "id": 486592234,
        "sender_full_name": "Matt Harden",
        "timestamp": 1733518138
    },
    {
        "content": "<p>I really think for these types we should enable roc to expose a c abi interface for the platforms to use</p>",
        "id": 486615946,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733532016
    },
    {
        "content": "<p>Then the platform can just see them as an opaque bag of bytes</p>",
        "id": 486615958,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733532035
    },
    {
        "content": "<p>I came to this realization after making Dict. It is too complex to be worth implementing in platforms, yet it would still be very convenient to have in platforms.</p>",
        "id": 486616002,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733532084
    },
    {
        "content": "<p>That said, monomorphization makes this all a tad tricky.</p>",
        "id": 486616089,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733532136
    },
    {
        "content": "<p>we should be able to expose zig versions that take size and alignment as arguments to all their operations, which the host needs anyway - and I think that basically takes care of monomorphization except for refcounting, yeah?</p>",
        "id": 486617219,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1733533054
    },
    {
        "content": "<p>Yeah. Something along those lines (but doesn't work for dict which is written in roc)</p>",
        "id": 486621251,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733536229
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/231634-beginners/topic/Does.20the.20platform.20provide.20builtins.3F/near/486615946\">said</a>:</p>\n<blockquote>\n<p>I really think for these types we should enable roc to expose a c abi interface for the platforms to use</p>\n</blockquote>\n<p>Can you give me a simple example? </p>\n<p>Like <code>List.len</code> maybe?</p>",
        "id": 486621405,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733536382
    },
    {
        "content": "<p>It'd be great to explore this direction further... particularly if it greatly simplifies the glue stuff Sven is working on</p>",
        "id": 486621449,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733536433
    },
    {
        "content": "<p>Or at least simplifies the roc_std for zig/rust/go we've been talking about</p>",
        "id": 486621514,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733536469
    },
    {
        "content": "<p>It would be very similar to the zig builtins for roc list, but exposed as c abi. Then each language is ready of implementing roc list would just wrap our single bespoke c abi implementation</p>",
        "id": 486621670,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733536645
    },
    {
        "content": "<p>Really might be best to clean up the zig builtins and use that as the base. Though might be better to avoid the zig dependency and make this all in C.</p>",
        "id": 486621997,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733536887
    },
    {
        "content": "<p>Also, this still isn't enough cause our zig builtins don't understand refcounting. This is part of the reason I think it would be better for roc to generate these functions for each platform.</p>",
        "id": 486622082,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733536950
    },
    {
        "content": "<p>Is there an opportunity to kill two birds, with the zig package we want to make?</p>",
        "id": 486622125,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733537016
    },
    {
        "content": "<p>Imagine that instead of exposing init and respond from basic webserver, it also exposed a whole suite of functions related to each of the primitives used in init and update.</p>",
        "id": 486622128,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733537017
    },
    {
        "content": "<p>Oh interesting... you're imagining roc exposes more functions that are related for the primitive types exposed to the host. Nice</p>",
        "id": 486622203,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733537078
    },
    {
        "content": "<p>Like in the roc-on-simple example.. </p>\n<div class=\"codehilite\"><pre><span></span><code>Smf : {\n    header : Header,\n    tracks : List Track,\n}\n\nmainForHost! : {} =&gt; Smf\n</code></pre></div>\n<p>Here we might include a <code>void roc__smf_refcount_inc()</code> or something?</p>",
        "id": 486622322,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1733537181
    },
    {
        "content": "<p>Exactly. Plus the primitives to interactive with a list of <code>Track</code> (including refcounting a Track).</p>",
        "id": 486622372,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733537248
    },
    {
        "content": "<p>This stuff is hard to build out in glue, but roc already knows how to do it</p>",
        "id": 486622389,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733537263
    },
    {
        "content": "<p>So it would be nice if roc could expose it to the platform</p>",
        "id": 486622409,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733537277
    },
    {
        "content": "<p>Then glue truly is just glue code and not implementation code</p>",
        "id": 486622466,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733537318
    },
    {
        "content": "<p>This is where I think we need to head</p>",
        "id": 486622478,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733537337
    },
    {
        "content": "<p>yeah we should spec this out!</p>",
        "id": 486635944,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1733548956
    },
    {
        "content": "<p>definitely seems like the right approach based on what we've learned <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 486635974,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1733548991
    },
    {
        "content": "<p>I think keeping the implementation in Zig should be fine - either way, the host just needs some extern definition, which can be hardcoded .h and .rs files that we can write tests against using zig alone, and which glue can just copy/paste into the output dir</p>",
        "id": 486636134,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1733549121
    },
    {
        "content": "<p>Coming  back to go glue code. I also tried it some time ago. My problem was, that cgo needs a .h file, with all types. This .h file needs also the signatures of the provided functions, like this one: <a href=\"https://github.com/lukewilliamboswell/roc-platform-template-go/blob/0e8d53b6087662ea231a164a059f1c2ba0a91c34/host/roc/app.h#L14\">https://github.com/lukewilliamboswell/roc-platform-template-go/blob/0e8d53b6087662ea231a164a059f1c2ba0a91c34/host/roc/app.h#L14</a></p>\n<p>But this is currently impossible with glue, since the signature of the exported functions are not provided by the glue API.</p>\n<p>The separate .h file is also the reason, why I don't think a roc-std-go package is possible. Your app.h file could not import/include the std.h file, provided by the package. So your app.h file could not use types like RocStr. Therefore I think the std types have to be generated for each app with glue.</p>\n<p>I don't know if this would change, if roc would provide the types by API. I think it would still be necessary to generate the type definition and all std function definition with glue to use them inside the app.h.</p>",
        "id": 486648313,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1733560130
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Does.20the.20platform.20provide.20builtins.3F/near/486622128\">said</a>:</p>\n<blockquote>\n<p>Imagine that instead of exposing init and respond from basic webserver, it also exposed a whole suite of functions related to each of the primitives used in init and update.</p>\n</blockquote>\n<p>Love this idea! Would really lighten the load for a glue spec author.</p>",
        "id": 486657483,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1733567700
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"496321\">Oskar Hahn</span> <a href=\"#narrow/stream/231634-beginners/topic/Does.20the.20platform.20provide.20builtins.3F/near/486648313\">said</a>:</p>\n<blockquote>\n<p>Coming  back to go glue code. I also tried it some time ago. My problem was, that cgo needs a .h file, with all types. This .h file needs also the signatures of the provided functions, like this one: <a href=\"https://github.com/lukewilliamboswell/roc-platform-template-go/blob/0e8d53b6087662ea231a164a059f1c2ba0a91c34/host/roc/app.h#L14\">https://github.com/lukewilliamboswell/roc-platform-template-go/blob/0e8d53b6087662ea231a164a059f1c2ba0a91c34/host/roc/app.h#L14</a></p>\n<p>But this is currently impossible with glue, since the signature of the exported functions are not provided by the glue API.</p>\n<p>The separate .h file is also the reason, why I don't think a roc-std-go package is possible. Your app.h file could not import/include the std.h file, provided by the package. So your app.h file could not use types like RocStr. Therefore I think the std types have to be generated for each app with glue.</p>\n<p>I don't know if this would change, if roc would provide the types by API. I think it would still be necessary to generate the type definition and all std function definition with glue to use them inside the app.h.</p>\n</blockquote>\n<p>If all Roc values were passed around as opaque pointers in the API you wouldn't need any types in the .h files.</p>",
        "id": 486683970,
        "sender_full_name": "Matt Harden",
        "timestamp": 1733588867
    },
    {
        "content": "<p>well it's pretty common that the host wants to do things with the values it gets from Roc, e.g. read the contents of a string or list</p>",
        "id": 486688552,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1733592327
    },
    {
        "content": "<p>so in those cases it needs something more than opaque pointers</p>",
        "id": 486688565,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1733592345
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/231634-beginners/topic/Does.20the.20platform.20provide.20builtins.3F/near/486636134\">said</a>:</p>\n<blockquote>\n<p>I think keeping the implementation in Zig should be fine</p>\n</blockquote>\n<p>I don't think so. Zig does not know how to recount things. Only roc does. It depends on roc passing it functions that tell it how to recount things. I think we need to leave this all to roc. Otherwise, glue becomes way harder.</p>",
        "id": 486689831,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733593358
    },
    {
        "content": "<p>Roc will surely already be generating these functions anyway, it needs them to do refcounting of things passed into roc.</p>",
        "id": 486690109,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733593607
    },
    {
        "content": "<p>I guess after recounting, the rest could be in zig theoretically.</p>\n<p>This is where you get a trade from:<br>\nExtreme 1, like today, platform has to implement everything, super brittle</p>\n<p>To:<br>\nExtreme n, platform just needs to know the size of the type and which methods it has (including methods to get and set the data in the object). Roc exposes all of those via cffi. The platform doesn't even need to know the layout of the type.</p>\n<hr>\n<p>I think we should be way closer to extreme n. Maybe even at extreme n. Extreme n does have a minor cost in perf due to there being no inlining between platform and app, but it removes tons of what makes the API brittle and hard to work with.</p>",
        "id": 486690618,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733594066
    },
    {
        "content": "<p>oh sorry I mainly meant zig as opposed to C</p>",
        "id": 486690926,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1733594317
    },
    {
        "content": "<p>it makes sense that Roc would expose functions to the host, and that some of those would be implemented in the Roc code base using Zig</p>",
        "id": 486690962,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1733594360
    },
    {
        "content": "<p>but I don't think we would need to change any internal implementations from Zig to C to facilitate any of that</p>",
        "id": 486690990,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1733594384
    },
    {
        "content": "<p>Oh yeah, for sure not</p>",
        "id": 486690997,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733594398
    },
    {
        "content": "<p>Literally could make an exposed function for every builtin if we wanted. No need to implement anything in c for that.</p>",
        "id": 486691093,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733594446
    },
    {
        "content": "<p>yeah, basically we could look through every type that's exposed to the host and expose all the appropriate functions for it</p>",
        "id": 486691152,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1733594487
    },
    {
        "content": "<p>and put them in their own sections so a linker can DCE any unused ones</p>",
        "id": 486691186,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1733594507
    },
    {
        "content": "<p>and in a surgical linking future we could even do it lazily</p>",
        "id": 486691304,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1733594560
    },
    {
        "content": "<p>actually I guess just preprocessing the host is enough <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 486691322,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1733594578
    },
    {
        "content": "<p>like see which functions the host is dynamically linking in, and go generate them all (or give an error if it's asking for something that's malformed or shouldn't be exposed to the host)</p>",
        "id": 486691424,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1733594647
    },
    {
        "content": "<p>that way we wouldn't waste time generating a ton of monomorphized functions that the host wouldn't even use in practice anyway</p>",
        "id": 486691453,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1733594677
    },
    {
        "content": "<p>I guess with <code>--no-link</code> you'd have to generate them all anyway, unless we gave <code>--no-link</code> an optional host to analyze but not link</p>",
        "id": 486691597,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1733594810
    },
    {
        "content": "<p>Yeah, exactly this. And I don't think we need to expose the full standard library just enough primitives to use each type. Host languages tend to have enough tools to deal with most things (like mapping folding, looping, etc)</p>",
        "id": 486691728,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733594924
    },
    {
        "content": "<p>yeah that makes sense to me! <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 486704023,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1733605237
    },
    {
        "content": "<p>is there anything blocking that? I can't think of anything</p>",
        "id": 486704038,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1733605250
    },
    {
        "content": "<p>Not that I can think of.</p>",
        "id": 486710865,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733610950
    },
    {
        "content": "<p>As I said earlier, it could be done manually today by adding a ton more functions exposed to the host. Should be very doable to automatically generate them instead.</p>",
        "id": 486710948,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733611006
    },
    {
        "content": "<p>Was scanning zulip for some knowledge regarding the builtins when I came across this. Did this discussion produce a GH issue? Would be a shame to lose the conclusion.</p>",
        "id": 492682354,
        "sender_full_name": "Norbert Hajagos",
        "timestamp": 1736417449
    },
    {
        "content": "<p>I don't think we have an issue. But Brendan has mentioned a couple of times that he plans to work on this</p>",
        "id": 492683153,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736417686
    },
    {
        "content": "<p><a class=\"message-link\" href=\"/#narrow/channel/316715-contributing/topic/projects/near/491535450\">#contributing &gt; projects @ 💬</a></p>",
        "id": 492684288,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1736418021
    },
    {
        "content": "<p>Ah, thanks Luke, saw that thread when browsing, but it was in the additional projects section. It feels like <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span>  can do anything <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 492693392,
        "sender_full_name": "Norbert Hajagos",
        "timestamp": 1736420662
    },
    {
        "content": "<p>Anything with the backend, maybe....I don't tend to touch anything type checker and up.</p>",
        "id": 492758495,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1736438775
    }
]