[
    {
        "content": "<p>Are there any runtime costs for creating <em>constants</em> in a separate interface module like below? I guess the alternative would be to hardcode these where they are needed, but I feel this might be clearer and more maintainable.</p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"nc\">Unicode</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">exposes</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nc\">Character</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">utf8</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">imports</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"></span>\n\n<span class=\"nc\">UnicodeCharacter</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nc\">LF</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">utf8</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">UnicodeCharacter</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">List</span><span class=\"w\"> </span><span class=\"nc\">U8</span><span class=\"w\"></span>\n<span class=\"n\">utf8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">character</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"ow\">when</span><span class=\"w\"> </span><span class=\"n\">character</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nc\">LF</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Str</span><span class=\"o\">.</span><span class=\"n\">toUtf8</span><span class=\"w\"> </span><span class=\"s2\">\"\\u(000A)\"</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nc\">CR</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Str</span><span class=\"o\">.</span><span class=\"n\">toUtf8</span><span class=\"w\"> </span><span class=\"s2\">\"\\u(000A)\"</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 315160710,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1670734648
    },
    {
        "content": "<p>I feel like Roc could support <code>space : List U8 = Str.toUtf8 \"\\u(0020)\"</code> to define constants. Is this a bad idea?</p>",
        "id": 315167304,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1670740979
    },
    {
        "content": "<p>Cost for the interface, no. Roc looks at the program holistically</p>",
        "id": 315173125,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670745582
    },
    {
        "content": "<p>As for your constant. I don't think it is a constant in current roc. I think roc will compile it into a top level thunk. So it will actually get called and be run. Sadly we don't have a comp time solutions here currently</p>",
        "id": 315173283,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670745670
    },
    {
        "content": "<p>Is it a bad idea, depends on your use case and how often that would get called. I don't know if we currently memoize top level thunks</p>",
        "id": 315173338,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670745710
    },
    {
        "content": "<p>There is a small change llvm will optimize it away, but probably not due to memory writes</p>",
        "id": 315173786,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670746007
    },
    {
        "content": "<p>Is there a way to make a constant in Roc? It would be sweet if we could use these in pattern matching, e.g.  </p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"nc\">EMPSACE</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">List</span><span class=\"w\"> </span><span class=\"nc\">U8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">226</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">131</span><span class=\"p\">]</span><span class=\"w\"></span>\n\n<span class=\"ow\">when</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"nc\">EMSPACE</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\"> </span><span class=\"n\">somthing...</span><span class=\"w\"> </span><span class=\"c1\"># U+2003</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 315175426,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1670747287
    },
    {
        "content": "<p>I was doing the below which works well enough. Are there any runtime issues here?</p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">emSpace</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">226</span><span class=\"n\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">128</span><span class=\"n\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">131</span><span class=\"n\">u8</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"n\">input</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">226</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">131</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"w\"></span>\n\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nc\">List</span><span class=\"o\">.</span><span class=\"n\">startsWith</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"n\">emSpace</span><span class=\"w\"> </span><span class=\"n\">then</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nc\">YES</span><span class=\"w\"></span>\n<span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nc\">List</span><span class=\"o\">.</span><span class=\"n\">startsWith</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">then</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nc\">OTHERS</span><span class=\"w\"> </span><span class=\"c1\"># just chain a lot of these together...</span><span class=\"w\"></span>\n<span class=\"k\">else</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nc\">NOPE</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 315175912,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1670747704
    },
    {
        "content": "<p>Those will be proper constants that are directly ingested into the binary.</p>",
        "id": 315176598,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670748242
    },
    {
        "content": "<p>Well, <code>emSpace</code> and <code>input</code> will be.</p>",
        "id": 315176637,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670748270
    },
    {
        "content": "<p>I don't think the if and other functions would reduce down to constants, but actually not sure. It would totally depend on llvm optimizations, and my gut feeling is that llvm + lists = not optimized away</p>",
        "id": 315176689,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670748345
    },
    {
        "content": "<p>So i don't think it would compile the if to just always return <code>YES</code> even though in theory that is just a constant expression.</p>",
        "id": 315176776,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670748405
    },
    {
        "content": "<p>In this example the <code>input</code> would be variable and unknown, but it's good to know that <code>emSpace</code> will be a constant. <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 315177554,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1670748994
    },
    {
        "content": "<p>eventually I'd like to do compile-time evaluation to make it so that all top-level declarations are either functions or statically allocated constants, but that's a ways off <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 315180345,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1670750966
    }
]