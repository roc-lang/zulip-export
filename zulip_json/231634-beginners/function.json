[
    {
        "content": "<p>Are functions always have a return value? Or is there any keyword equivalent to \"void\"? I also wondered how Roc handles mutually recursive definitions of functions.</p>",
        "id": 345845572,
        "sender_full_name": "Audrey Gao",
        "timestamp": 1680241792
    },
    {
        "content": "<p>There is <code>{}</code>, maybe that works? I think it's an empty record, but you can use it as a type as well</p>",
        "id": 345852942,
        "sender_full_name": "itmuckel",
        "timestamp": 1680244487
    },
    {
        "content": "<p><code>{}</code> is the closest to void, but a function that returns it can't actually do anything in a purely functional language like Roc. What is the function you're trying to define? You probably need it to return something like <code>Task {} []</code> instead, since that can actually do a side effect.</p>",
        "id": 345868230,
        "sender_full_name": "Nick Hallstrom",
        "timestamp": 1680249215
    },
    {
        "content": "<p>Mutually recursive functions work in the standard way; you must write all functions involved in a mutual recursion next to each other, but otherwise there are no syntactic restrictions. Only functions can be recursive (respectively, mutually recursive), ground values cannot be recursive. Roc does not support polymorphic recursion.</p>",
        "id": 345963119,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1680271871
    },
    {
        "content": "<p>Thanks so much for the explanation!</p>",
        "id": 346070462,
        "sender_full_name": "Audrey Gao",
        "timestamp": 1680302813
    }
]