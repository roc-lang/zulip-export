[
    {
        "content": "<p>Hi there! I'm new to Roc, and I'm having fun with it on Exercism. Thanks for the nice language!</p>\n<p>Is there a convenient way to perform case-insensitive string comparisons using the stdlib? If not, is there some reasonably idiomatic way to do so?</p>",
        "id": 490060832,
        "sender_full_name": "Chuck Daniels",
        "timestamp": 1734648071
    },
    {
        "content": "<p>If you know you only have ASCII then it's easy to roll you're own using the builtins. </p>\n<p>If you have utf-8/unicode then there isn't an easy way to do it just with the builtins.</p>",
        "id": 490061706,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734648470
    },
    {
        "content": "<p>If you can use a package then I'd recommend you checkout <span class=\"user-mention\" data-user-id=\"508951\">@Hannes</span>'s <a href=\"https://github.com/Hasnep/roc-ascii\">https://github.com/Hasnep/roc-ascii</a></p>",
        "id": 490061790,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734648501
    },
    {
        "content": "<p>The longer term plan is for working with unicode is <a href=\"https://github.com/roc-lang/unicode\">https://github.com/roc-lang/unicode</a></p>",
        "id": 490061835,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734648533
    },
    {
        "content": "<p>Yep, just ASCII. What would be an idiomatic way to do that?</p>",
        "id": 490061924,
        "sender_full_name": "Chuck Daniels",
        "timestamp": 1734648587
    },
    {
        "content": "<p>The unicode package is a WIP and doesn't have the Str comparison functions your looking for</p>",
        "id": 490061939,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734648593
    },
    {
        "content": "<p>Can you use a package in exercism? <span class=\"user-mention\" data-user-id=\"611722\">@Isaac Van Doren</span> would know</p>",
        "id": 490062022,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734648628
    },
    {
        "content": "<p>I'll make an example for you, 1 sec</p>",
        "id": 490062044,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734648638
    },
    {
        "content": "<p>I'd say <code>Ascii.toLowercase left == Ascii.toLowercase right</code></p>",
        "id": 490062092,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734648668
    },
    {
        "content": "<p>I don't know if I can use a package in exercism.</p>",
        "id": 490062103,
        "sender_full_name": "Chuck Daniels",
        "timestamp": 1734648675
    },
    {
        "content": "<p>For a simple approach (ASCII only)</p>",
        "id": 490062107,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734648677
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">toLowercase</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">U8</span>\n<span class=\"nv\">toLowercase</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">casingDelta</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"nv\">a'</span><span class=\"w\"> </span><span class=\"nf\">-</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"kt\">A</span><span class=\"nf\">'</span>\n<span class=\"w\">    </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toUtf8</span><span class=\"w\"> </span><span class=\"nv\">str</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">byte</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">byte</span><span class=\"w\"> </span><span class=\"nf\">&gt;=</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"kt\">A</span><span class=\"nf\">'</span><span class=\"w\"> </span><span class=\"nf\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nv\">byte</span><span class=\"w\"> </span><span class=\"nf\">&lt;=</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"kt\">Z</span><span class=\"nf\">'</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"w\">            </span><span class=\"nv\">byte</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"nv\">casingDelta</span>\n<span class=\"w\">        </span><span class=\"kr\">else</span>\n<span class=\"w\">            </span><span class=\"nv\">byte</span>\n\n<span class=\"nv\">insensitiveEqual</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Bool</span>\n<span class=\"nv\">insensitiveEqual</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">left</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">right</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">toLowercase</span><span class=\"w\"> </span><span class=\"nv\">left</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"nv\">toLowercase</span><span class=\"w\"> </span><span class=\"nv\">right</span>\n</code></pre></div>",
        "id": 490062294,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734648792
    },
    {
        "content": "<p>You can use packages in Exercism but they have to be explicitly added to that exercise in the language track. If it seems like many users of an exercise would want a particular package we can certainly add one</p>",
        "id": 490062349,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1734648823
    },
    {
        "content": "<p>In this case hand-rolling might be straightforward enough</p>",
        "id": 490062471,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1734648878
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"787504\">Chuck Daniels</span> has marked this topic as resolved.</p>",
        "id": 490062934,
        "sender_full_name": "Notification Bot",
        "timestamp": 1734649098
    },
    {
        "content": "<p>Looks like <span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> beat me to it... </p>\n<div class=\"codehilite\"><pre><span></span><code>module [to_upper, to_lower]\n\nto_upper : Str -&gt; Str\nto_upper = \\str -&gt;\n    str\n    |&gt; Str.toUtf8\n    |&gt; List.map to_upper_help\n    |&gt; Str.fromUtf8\n    |&gt; unwrap\n\nto_lower : Str -&gt; Str\nto_lower = \\str -&gt;\n    str\n    |&gt; Str.toUtf8\n    |&gt; List.map to_lower_help\n    |&gt; Str.fromUtf8\n    |&gt; unwrap\n\nexpect to_upper &quot;hello&quot; == &quot;HELLO&quot;\nexpect to_upper &quot;Hello&quot; == &quot;HELLO&quot;\n\nexpect to_lower &quot;HELLO&quot; == &quot;hello&quot;\nexpect to_lower &quot;Hello&quot; == &quot;hello&quot;\n\nto_upper_help = \\c -&gt; if c &gt;= &#39;a&#39; &amp;&amp; c &lt;= &#39;z&#39; then c - delta else c\nto_lower_help = \\c -&gt; if c &gt;= &#39;A&#39; &amp;&amp; c &lt;= &#39;Z&#39; then c + delta else c\ndelta = &#39;a&#39; - &#39;A&#39;\n\nunwrap : Result a _ -&gt; a\nunwrap = \\result -&gt;\n    when result is\n        Ok a -&gt; a\n        Err _ -&gt; crash &quot;quick and dirty error handling&quot;\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>$ roc test conversion.roc\n0 failed and 4 passed in 523 ms.\n</code></pre></div>",
        "id": 490063043,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734649162
    },
    {
        "content": "<p>A cleaner quick-and-dirty solution</p>",
        "id": 490063179,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734649221
    },
    {
        "content": "<p>I've added a Good First Issue for someone to add this to our Examples repo </p>\n<p><a href=\"https://github.com/roc-lang/examples/issues/222\">https://github.com/roc-lang/examples/issues/222</a></p>",
        "id": 490069723,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1734653161
    },
    {
        "content": "<p>Nothing wrong with that solution, but I'd like to suggest an alternative. ASCII letters are conveniently arranged so that only one bit flips between lowercase and uppercase. So you can actually do this branchless with a bitwise operation:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">to_lower_help</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"o\">.</span><span class=\"n\">bitwiseOr</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"w\"> </span><span class=\"n\">c</span>\n\n<span class=\"o\">#</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"kt\">:</span>\n\n<span class=\"nf\">to_lower_help</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"o\">.</span><span class=\"n\">bitwiseOr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"sc\">'A'</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"sc\">'a'</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">c</span>\n</code></pre></div>",
        "id": 490088025,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1734665598
    },
    {
        "content": "<p>Actually, now that I think about it, this probably shouldn’t be used in the examples. Some non-letter characters would become different ones <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 490089013,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1734666383
    },
    {
        "content": "<p>So it’s only safe if you know you’re only working with a restricted subset. Probably just an interesting trick then.</p>",
        "id": 490089088,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1734666462
    },
    {
        "content": "<p>you can check first, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"sc\">'a'</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"sc\">'Z'</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"w\">    </span><span class=\"kt\">Num</span><span class=\"o\">.</span><span class=\"n\">bitwiseOr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"sc\">'A'</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"sc\">'a'</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">c</span>\n<span class=\"kr\">else</span>\n<span class=\"w\">    </span><span class=\"n\">c</span>\n</code></pre></div>",
        "id": 490095748,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734671677
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/channel/231634-beginners/topic/.E2.9C.94.20case-insensitive.20string.20comparison/near/490095748\">said</a>:</p>\n<blockquote>\n<p>you can check first, e.g.</p>\n<p><div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"sc\">'a'</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"sc\">'Z'</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"w\">    </span><span class=\"kt\">Num</span><span class=\"o\">.</span><span class=\"n\">bitwiseOr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"sc\">'A'</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"sc\">'a'</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">c</span>\n<span class=\"kr\">else</span>\n<span class=\"w\">    </span><span class=\"n\">c</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I <em>think</em> you meant <code>c &gt;= 'A' &amp;&amp; c &lt;= 'Z'</code>, although I would write it as <code>'A' &lt;= c &amp;&amp; c &lt;= 'Z'</code>.</p>",
        "id": 490141932,
        "sender_full_name": "Chuck Daniels",
        "timestamp": 1734693672
    },
    {
        "content": "<p>You can check but then idk how much better it’s than the original solution</p>",
        "id": 490144483,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1734694683
    },
    {
        "content": "<p>I suspect that using the bitwise operation would show noticeable performance benefit only in the context of performing a large volume of character conversions.</p>\n<p>Here's my approach:</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>asciiLowercaseBit : U8\nasciiLowercaseBit = 0b0010_0000\n\ncharToLower : U8 -&gt; U8\ncharToLower = \\char -&gt;\n    if 'A' &lt;= char &amp;&amp; char &lt;= 'Z' then\n        char |&gt; Num.bitwiseXor asciiLowercaseBit # Set lowercase bit\n    else\n        char\n\ncharToUpper : U8 -&gt; U8\ncharToUpper = \\char -&gt;\n    if 'a' &lt;= char &amp;&amp; char &lt;= 'z' then\n        char |&gt; Num.bitwiseXor asciiLowercaseBit # Clear lowercase bit\n    else\n        char\n</code></pre></div>",
        "id": 490164692,
        "sender_full_name": "Chuck Daniels",
        "timestamp": 1734702647
    },
    {
        "content": "<p>Or this, for some additional functions:</p>\n<div class=\"codehilite\"><pre><span></span><code>asciiLowercaseBit : U8\nasciiLowercaseBit = 0b0010_0000\n\nisUpper : U8 -&gt; Bool\nisUpper = \\char -&gt; &#39;A&#39; &lt;= char &amp;&amp; char &lt;= &#39;Z&#39;\n\nisLower : U8 -&gt; Bool\nisLower = \\char -&gt; &#39;a&#39; &lt;= char &amp;&amp; char &lt;= &#39;a&#39;\n\ntoggleCase : U8 -&gt; U8\ntoggleCase = \\char -&gt; char |&gt; Num.bitwiseXor asciiLowercaseBit # Toggle lowercase bit\n\ncharToLower : U8 -&gt; U8\ncharToLower = \\char -&gt; if char |&gt; isUpper then char |&gt; toggleCase else char\n\ncharToUpper : U8 -&gt; U8\ncharToUpper = \\char -&gt; if char |&gt; isLower then char |&gt; toggleCase else char\n</code></pre></div>",
        "id": 490173178,
        "sender_full_name": "Chuck Daniels",
        "timestamp": 1734705382
    },
    {
        "content": "<blockquote>\n<p>I suspect that using the bitwise operation would show noticeable performance benefit only in the context of performing a large volume of character conversions.</p>\n</blockquote>\n<p>If llvm can manage to optimize it to simd, bitwise would likely be significantly faster (it probably will fail if you use a conditional instead of doing fully bitwise math). </p>\n<p>Otherwise, they should be useing the exact same processor units, so no perf diff (I think they both should be single cycle and limited by ram loads and stores in a loop, which should be pipelined)</p>",
        "id": 490201681,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734715060
    },
    {
        "content": "<p>So the fast version would be something like:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"p\">(</span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">bitwiseAnd</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">'</span><span class=\"kt\">A</span><span class=\"nf\">'</span><span class=\"w\"> </span><span class=\"nf\">&lt;=</span><span class=\"w\"> </span><span class=\"nv\">char</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">char</span><span class=\"w\"> </span><span class=\"nf\">&lt;=</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"kt\">Z</span><span class=\"nf\">'</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">shiftLeftBy</span><span class=\"w\"> </span><span class=\"mi\">5</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">bitwiseXor</span><span class=\"w\"> </span><span class=\"nv\">char</span>\n</code></pre></div>",
        "id": 490201988,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734715177
    },
    {
        "content": "<p>llvm should turn that into a simd loop</p>",
        "id": 490202020,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734715195
    },
    {
        "content": "<p>oh, probably need to <code>Num.toU8</code> the conditionals</p>",
        "id": 490202126,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734715226
    },
    {
        "content": "<p>oh yeah, we can't <code>Num.toU8</code> a bool... that's annoying</p>",
        "id": 490202597,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734715442
    },
    {
        "content": "<p>So I guess a working form of the more optimized version would be to take the helpers from <span class=\"user-mention\" data-user-id=\"787504\">@Chuck Daniels</span> above, but write the core functions as:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">charToLower</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">U8</span>\n<span class=\"nv\">charToLower</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">char</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">toggle</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">isUpper</span><span class=\"w\"> </span><span class=\"nv\">char</span><span class=\"w\"> </span><span class=\"kr\">then</span><span class=\"w\"> </span><span class=\"nv\">asciiLowercaseBit</span><span class=\"w\"> </span><span class=\"kr\">else</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">bitwiseXor</span><span class=\"w\"> </span><span class=\"nv\">char</span><span class=\"w\"> </span><span class=\"nv\">toggle</span>\n\n<span class=\"nv\">charToUpper</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">U8</span>\n<span class=\"nv\">charToUpper</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">char</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">toggle</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">isLower</span><span class=\"w\"> </span><span class=\"nv\">char</span><span class=\"w\"> </span><span class=\"kr\">then</span><span class=\"w\"> </span><span class=\"nv\">asciiLowercaseBit</span><span class=\"w\"> </span><span class=\"kr\">else</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">bitwiseXor</span><span class=\"w\"> </span><span class=\"nv\">char</span><span class=\"w\"> </span><span class=\"nv\">toggle</span>\n</code></pre></div>",
        "id": 490203346,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734715735
    },
    {
        "content": "<p>That should turn into a hot simd loop if used within <code>List.map</code> or similar</p>",
        "id": 490203477,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734715793
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/231634-beginners/topic/.E2.9C.94.20case-insensitive.20string.20comparison/near/490202597\">said</a>:</p>\n<blockquote>\n<p>oh yeah, we can't <code>Num.toU8</code> a bool... that's annoying</p>\n</blockquote>\n<p>we could offer <code>Bool.toNum : Bool -&gt; Num *</code></p>",
        "id": 490204195,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1734716107
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/issues/7395\">https://github.com/roc-lang/roc/issues/7395</a></p>",
        "id": 490219621,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1734723274
    }
]