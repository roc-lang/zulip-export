[
    {
        "content": "<p>hi I am writing few  functions to operate on matrices here <a href=\"https://github.com/salarii/roc_play/blob/main/Matrix.roc\">https://github.com/salarii/roc_play/blob/main/Matrix.roc</a> . It seems I need two  \"configurations\" to cope with  complex and Frac  separately(btw. in some languages there would be  one  \"configuration\" and implementation for all of them but I can't figure out how to do this in Roc).<br>\n It is very  disheartening that apparently I can't create one instance  of  \"configuration\" and provide it  directly inside of every  function as needed. Apparently I need to copy paste the same thing over and over. I am talking \"opFrec\" and  \"opComplex\"  which I consider the  configurations here</p>",
        "id": 421300048,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1707848471
    },
    {
        "content": "<p>Hi Artur :)<br>\nThis seems like something suited for <a href=\"https://www.roc-lang.org/abilities\">Abilities</a>.<br>\nSee <a href=\"https://www.roc-lang.org/abilities#defining-a-new-ability\">this example</a> to learn how to implement your own Ability.</p>",
        "id": 421304450,
        "sender_full_name": "Anton",
        "timestamp": 1707849998
    },
    {
        "content": "<p>thx Anton, it looks like I could try this, but anyway why I have to repeat opComplex or opFrec every time. Seems to me like  a bug</p>",
        "id": 421323845,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1707857640
    },
    {
        "content": "<p>Not sure if this is the issue or not, but this type looks incorrect:</p>\n<div class=\"codehilite\"><pre><span></span><code>opFrec : OperationType (Frac a)\n</code></pre></div>\n<p>Shouldn't it be:</p>\n<div class=\"codehilite\"><pre><span></span><code>opFrec a : OperationType (Frac a)\n</code></pre></div>\n<p>Same with the complex ops.</p>",
        "id": 421333123,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1707861907
    },
    {
        "content": "<p>Also yeah, what you are trying to do definitely should work.</p>",
        "id": 421333207,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1707861947
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span>  you  overlooked that those guys are not types,  they are instances of  something. Anyway when I try to assign them to \"op\" directly there are compilation errors. Anyway when I will have more time  I will try abilities</p>",
        "id": 421437226,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1707914820
    },
    {
        "content": "<p>Ah, yeah.</p>",
        "id": 421494971,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1707931377
    },
    {
        "content": "<p>So I think this is a unification bug. Given the types print out as identical, I assume this is equivalent to <a class=\"stream-topic\" data-stream-id=\"231634\" href=\"/#narrow/stream/231634-beginners/topic/Puzzling.20type.20error\">#beginners &gt; Puzzling type error</a></p>",
        "id": 421495486,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1707931541
    },
    {
        "content": "<p>A workaround is to make <code>opComplex</code> and <code>opFreq</code> lazily generated</p>",
        "id": 421495513,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1707931549
    },
    {
        "content": "<p>Might also need to comment out the type</p>",
        "id": 421495653,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1707931577
    },
    {
        "content": "<p>So change the definition to <code>opComplex = \\{} -&gt; ...</code></p>",
        "id": 421495714,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1707931598
    }
]