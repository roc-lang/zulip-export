[
    {
        "content": "<p>I can't define  few  functions with the same name ? It would be possible since typing is strong here. I have to constantly invent new names , is this by design ??</p>",
        "id": 363369243,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1685820108
    },
    {
        "content": "<p>in general names recycling is very poor in this language I don't know if this is good or bad, In c++ as you may know by chance  I can use the same names over  and over again. As I said it may be good but is this design decision? or some missing features?</p>",
        "id": 363370856,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1685820904
    },
    {
        "content": "<p>It is definitely a design decision, but there has also been discussion around changing it and shadowing rules. I think it is something that could change in the future, but I don't have a well written explanation around why exactly these choices were made.</p>",
        "id": 363371351,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1685821124
    },
    {
        "content": "<p>Hopefully another dev will have more insight.</p>",
        "id": 363371417,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1685821159
    },
    {
        "content": "<p>Also <a class=\"stream-topic\" data-stream-id=\"304641\" href=\"/#narrow/stream/304641-ideas/topic/Shadowing.20.26.20Redeclaration\">#ideas &gt; Shadowing &amp; Redeclaration</a> is at least kinda related</p>",
        "id": 363371468,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1685821185
    },
    {
        "content": "<p>If I understand correctly, <span class=\"user-mention\" data-user-id=\"568088\">@Artur Swiderski</span> is asking why it's not possible to do this:</p>\n<div class=\"codehilite\"><pre><span></span><code>a : Float -&gt; Float\na = #implementation 1\n\na : Int -&gt; Int\na = #implementation 2\n\nfoo = a 5.4 # The compiler figures out that I&#39;m providing a float so the first implementation gets used\n</code></pre></div>\n<p>where as the shadowing and redeclaration discussion is about allowing a function to overwrite another in scope?</p>",
        "id": 363372148,
        "sender_full_name": "Martin Stewart",
        "timestamp": 1685821432
    },
    {
        "content": "<p>For sure, I just see them as related in a sense. So I think insights and decisions on one can often relate to the other.</p>",
        "id": 363372638,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1685821669
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"432314\">Martin Stewart</span> <a href=\"#narrow/stream/231634-beginners/topic/name.20overloading/near/363372148\">said</a>:</p>\n<blockquote>\n<p>If I understand correctly, <span class=\"user-mention silent\" data-user-id=\"568088\">Artur Swiderski</span> is asking why it's not possible to do this:</p>\n<div class=\"codehilite\"><pre><span></span><code>a : Float -&gt; Float\na = #implementation 1\n\na : Int -&gt; Int\na = #implementation 2\n\nfoo = a 5.4 # The compiler figures out that I&#39;m providing a float so the first implementation gets used\n</code></pre></div>\n<p>where as the shadowing and redeclaration discussion is about allowing a function to overwrite another in scope?</p>\n</blockquote>\n<p>exactly this</p>",
        "id": 363372657,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1685821681
    },
    {
        "content": "<p>Specifically if you look at something like:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">doSomething</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">x</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">     </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Float</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Float</span>\n<span class=\"w\">     </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"c1\">#implementation 1</span>\n\n<span class=\"w\">     </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Int</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Int</span>\n<span class=\"w\">     </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"c1\">#implementation 2</span>\n</code></pre></div>\n<p>This is really no different from:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">doSomething</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">x</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">     </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Float</span>\n<span class=\"w\">     </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"c1\">#value 1</span>\n\n<span class=\"w\">     </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Int</span>\n<span class=\"w\">     </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"c1\">#value 2</span>\n</code></pre></div>\n<p>You are defining the same variable twice and doing it with different types.</p>",
        "id": 363373679,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1685822148
    },
    {
        "content": "<p>This is at least from the current compilers perspective.</p>",
        "id": 363373807,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1685822220
    },
    {
        "content": "<p>One other more specific note, it may lead to complications in type decidability:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">U16</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">U16</span>\n<span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"c1\">#implementation 1</span>\n\n<span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">U8</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">U8</span>\n<span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"c1\">#implementation 2</span>\n\n<span class=\"nv\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"c1\">#what type are foo and 5? 5 is both a valid U8 and U16.</span>\n</code></pre></div>",
        "id": 363374359,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1685822498
    },
    {
        "content": "<p>I think allowing this has more drawbacks than benefits.</p>",
        "id": 363666890,
        "sender_full_name": "Anton",
        "timestamp": 1685958749
    }
]