[
    {
        "content": "<p>I understand roc has no macros (even though it seems to be fully expression-based), so I am inclined to guess 'no'.</p>",
        "id": 441951456,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717269815
    },
    {
        "content": "<p>no, could not be implemented in userspace</p>",
        "id": 441951496,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717269838
    },
    {
        "content": "<p>would have to be a compiler builtin</p>",
        "id": 441951555,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717269853
    },
    {
        "content": "<p>thanks <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 441951598,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717269878
    },
    {
        "content": "<p>what is the rationale for having one, but not the other? i.e. what makes <em>pipe-first</em> special?</p>",
        "id": 441951971,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717270043
    },
    {
        "content": "<p>Mostly around api design. Roc is not a curried language (curried languages tend to promote pipe last apis). As such, roc tends to design apis such that the main element is the first element of a function. List.someThing functions always take the List first. Str.someThing the Str first. So only having pipe first helps to keep things consistent and promote a specific style</p>",
        "id": 441952506,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717270300
    },
    {
        "content": "<p>There has never really been a need or request for pipe last.</p>",
        "id": 441952533,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717270311
    },
    {
        "content": "<p>Though there have definitely been requests for a generic place holder based piping. That said, so far a lambda has been the preferred only supported to do that.</p>",
        "id": 441952639,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717270356
    },
    {
        "content": "<p>Something like <code>list |&gt; someFunc 123 _ \"test\"</code> where <code>_</code> is where the pipe goes to.</p>",
        "id": 441952773,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717270429
    },
    {
        "content": "<p>OK, fair enough...let me just make sure I understand you very first point about currying, because I'm not even sure where it comes into play. If I have a chain of 3 functions, and they happen to be able to be pipe-able at the last position, what does that have to do with currying?</p>",
        "id": 441954395,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717271230
    },
    {
        "content": "<p>For what its worth, in Clojure we have <code>-&gt;</code>, <code>-&gt;&gt;</code>, <code>as-&gt;</code>, the latter being the most generic one, but the one used by far the least.</p>",
        "id": 441954821,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717271453
    },
    {
        "content": "<p>in other words, <code>thread-first</code> &amp; <code>thread-last</code> are the easiest to implement (don't need to introduce any placeholder symbols), and cover 99% of the use-cases.</p>",
        "id": 441955101,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717271595
    },
    {
        "content": "<p>It is just that in curried languages it tends to be more common to put the thing operated on as the last argument. This is so that you can partially apply what the function does leaving only what is operated on.</p>\n<p>So a find function in a curried language is likely to be <code>find needle haystack</code>. When partially applied you would do <code>findCoffee = find \"coffee\"</code>. When used in a pipe, you would want to pipe last because of this design</p>",
        "id": 441955273,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717271667
    },
    {
        "content": "<p>in a curried language, <code>|&gt; find \"coffee\"</code>. That needs pipe last to work correctly.</p>",
        "id": 441955357,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717271721
    },
    {
        "content": "<p>Given roc isn't curried, we have chosen the convention to put what is operated on first. This is essentially an arbitrary convention.</p>",
        "id": 441955479,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717271779
    },
    {
        "content": "<p>A larger writeup: <a href=\"https://www.roc-lang.org/faq#curried-pipes\">https://www.roc-lang.org/faq#curried-pipes</a></p>",
        "id": 441955605,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717271849
    },
    {
        "content": "<blockquote>\n<p>in other words, <code>thread-first</code> &amp; <code>thread-last</code> are the easiest to implement (don't need to introduce any placeholder symbols), and cover 99% of the use-cases.</p>\n</blockquote>\n<p>I think <code>thread-first</code> and general language api conventions covers about 98% of the use cases.</p>",
        "id": 441955830,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717271971
    },
    {
        "content": "<p>If that turns out to not be true, when friction arises, we can add <code>thread-last</code></p>",
        "id": 441955854,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717271986
    },
    {
        "content": "<p>hmm ok i think i get it...there is no way to make up a function from another function (e.g. composition, currying etc) at runtime, right?</p>",
        "id": 441955934,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717272006
    },
    {
        "content": "<p>Yeah, you would have to use an explicit lambda <code>\\x -&gt; Num.add x 7</code></p>",
        "id": 441956003,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717272041
    },
    {
        "content": "<p>indeed,  with this restriction in mind 98% sounds about right :)</p>",
        "id": 441956059,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717272067
    },
    {
        "content": "<p>It does feel terrible if you have a pipe and have to do something like:</p>\n<div class=\"codehilite\"><pre><span></span><code>|&gt; \\buffer -&gt; Str.concat &quot;prefix: &quot; buffer\n</code></pre></div>",
        "id": 441956247,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717272154
    },
    {
        "content": "<p>but if I can create a lambda, then in theory there could be a <code>compose</code>, or a <code>partial</code> builtin, right?</p>",
        "id": 441956326,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717272195
    },
    {
        "content": "<p>I guess you could make a helper function and do:</p>\n<div class=\"codehilite\"><pre><span></span><code>|&gt; (flip Str.concat) &quot;prefix: &quot;\n</code></pre></div>",
        "id": 441956362,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717272220
    },
    {
        "content": "<p>or a plain function that returns a lambda?</p>",
        "id": 441956385,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717272232
    },
    {
        "content": "<p>i see</p>",
        "id": 441956448,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717272245
    },
    {
        "content": "<p>yeah, you can also manually curry in roc.</p>",
        "id": 441956456,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717272249
    },
    {
        "content": "<p>functions that return functions</p>",
        "id": 441956472,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717272257
    },
    {
        "content": "<p>Just a bit less ergonomic cause you have to add extra parens when calling compared to a curried language</p>",
        "id": 441956512,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717272281
    },
    {
        "content": "<p>i do not mind parens :)</p>",
        "id": 441956540,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717272297
    },
    {
        "content": "<p>many thanks for your explanation <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 441956649,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717272358
    },
    {
        "content": "<p>Glad to help</p>",
        "id": 441956708,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717272368
    },
    {
        "content": "<blockquote>\n<p>Given roc isn't curried, we have chosen the convention to put what is operated on first. This is essentially an arbitrary convention.</p>\n</blockquote>\n<p>One big advantage of this convention is that it allows the trailing lambda syntax to work nicely because the thing being operated on is not the last argument</p>",
        "id": 441964194,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1717276037
    }
]