[
    {
        "content": "<p>I have another question relevant to the fiddling I'm doing with unicode.</p>\n<p>The process of changing case in unicode is basically about looking up tables. U+61 ('a') maps to an uppercase value of U+41 ('A') ... and so forth. There are a few special cases -- but that's the gist. All very easy. But it's not <em>algorithmically</em> determinable--you simply have to look things up, which essentially means taking the UCD data and putting it into a form the module can handle. You should care a lot, however, about efficient access to the map at run time, because anything you do with a string is going to require at least one table lookup for every codepoint in the string.</p>\n<p>The conventional approach to this would be to build some sort of efficiently accessible data structure which is simply compiled and then accessed. It is by definition completely immutable and fixed at compile time, and probably fixed for the next century. So you write something to read the UCD data and puts it into a usable form.</p>\n<p>The unicode package currently takes a different approach: it transforms the data into functions, which then get compiled. So instead of having a constant table and a lookup function, it has a function which returns the right result by piling up boolean checks. All perfectly reasonable ... up to a point.</p>\n<p>But taking this approach to casing starts to smell a bit (more than it already did). We end up with a <code>when codepoint is</code> statement with about 1500 branches before it gets to the default branch. And since I don't know how sly the compiler is about this, I worry about efficiency. If checking the entire lot is going to involve examining each branch, that's obviously going to be massively slow. On average (since most lookups will return zilch) 1500 checks per codepoint.</p>\n<p>So ...</p>\n<ol>\n<li>\n<p>Can I build a table (e.g. a Dict) at compile time and simply access it later? How? Is it as simple as just defining that dict in a module? I think of Dicts as structures that get created at run-time (which would be problematic), but maybe I'm wrong. It's obviously quite pointless and inefficient to build a function that builds a Dict every time it gets called, and I wouldn't really even want something that had to be constructed even once while the program is running: this should be a <em>fixed in stone</em> structure that is simply accessed when the program is in motion. I really want a static and immutable data structure which is fixed at compile time, and where the only thing that ever happens when the parts are moving is a lookup.</p>\n</li>\n<li>\n<p>Or am I worrying unnecessarily? If (say) the compiler was smart enough to know that this particular <code>when ... is</code> function could be compiled to a hash table, that would solve my problem ... and I'm simply assuming it's not without knowing anything about how these things are implemented internally. If my assumption that such a statement does not require n checks where n is the number of branches is wrong, I'd be OK with the current strategy.</p>\n</li>\n</ol>\n<p>I can think of other possible options which would retain the current \"functional\" approach but be more efficient (e.g. do a 2 stage check where stage 1 checks whether a codepoint is in one of the many blocks where there are no case mappings, and then delegate to smaller branch functions where the block is potentially \"interesting\"). But they are a bit ad hoc, and since the essential question (\"How to construct large immutable lookup tables at compile time?\") is really pretty fundamental to a <em>lot</em> of unicode-like things, it seems sensible to think about the essential issue fairly early on, rather than to continue to go down an approach which works fine (in terms of getting a correct result) but might hit a major brick-wall in terms of performance soon.</p>\n<p>(FWIW, I looked superficially at the Zig library that someone wrote for this. They originally started with the approach that the Roc unicode package is currently taking, simply turning the data into functions and switch statements. They then abandoned that completely and rewrote the whole library to use more efficient structures (tries, mostly, I think) in the interest of speed ... and it produced a very significant (order of magnitude) speed up. I've also looked at the most-used OCaml library, and that uses statically defined constant arrays to construct the tables, which works fine because OCaml has \"real\" arrays. I have no idea how Lists are implemented internally in Roc, or whether they could be deployed for that purpose.)</p>",
        "id": 484807522,
        "sender_full_name": "Paul Stanley",
        "timestamp": 1732745838
    },
    {
        "content": "<p>This is a mapping from codepoint to codepoint, so I32 to I32?</p>",
        "id": 484809517,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732746924
    },
    {
        "content": "<p>And it is dense? As in, would make sense as an array (wouldn't have millions of empty entries or be gigantic)?</p>",
        "id": 484809550,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732746949
    },
    {
        "content": "<p>I remember asking a similar question at the time I was writing the first version. <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>\n<p>I can't remember exactly, but I thought we concluded it was fine and the compiler can handle it. I'll see if I can dig up the thread. </p>\n<p>But interested to follow this thread again.</p>",
        "id": 484810260,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732747367
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"775526\">Paul Stanley</span> <a href=\"#narrow/channel/231634-beginners/topic/Constant.20data.20structures.20for.20efficient.20lookup/near/484807522\">said</a>:</p>\n<blockquote>\n<p>Can I build a table (e.g. a Dict) at compile time and simply access it later? How? Is it as simple as just defining that dict in a module? I think of Dicts as structures that get created at run-time (which would be problematic), but maybe I'm wrong. It's obviously quite pointless and inefficient to build a function that builds a Dict every time it gets called, and I wouldn't really even want something that had to be constructed even once while the program is running: this should be a <em>fixed in stone</em> structure that is simply accessed when the program is in motion. I really want a static and immutable data structure which is fixed at compile time, and where the only thing that ever happens when the parts are moving is a lookup.</p>\n</blockquote>\n<p>so the current plan is to have this Just Work exactly the way you want it to, but it's not implemented yet. <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 484812231,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1732748627
    },
    {
        "content": "<p>the design is in <a class=\"stream-topic\" data-stream-id=\"304641\" href=\"/#narrow/channel/304641-ideas/topic/Compile.20time.20computation\">#ideas &gt; Compile time computation</a></p>",
        "id": 484812241,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1732748637
    },
    {
        "content": "<p>the basic idea is that if you define a top-level constant like <code>foo = ...</code> then whatever that <code>...</code> is gets fully evaluated at compile time automatically (and if it hits a <code>crash</code> or something, that also gets reported at compile time before the program even runs) and ultimately gets emitted as a static chunk of memory in the final binary.</p>",
        "id": 484812353,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1732748706
    },
    {
        "content": "<p>since that hasn't been implemented yet, the way it works today is that if you say <code>foo = ...</code> then <code>foo</code> silently gets compiled behind the scenes to a function, which gets called every time you reference <code>foo</code></p>",
        "id": 484812398,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1732748743
    },
    {
        "content": "<p>personally, I actually like the idea of implementing it the way you ultimately want it to work, even though the performance will be bad now (because it regenerates the dictionary every time)</p>",
        "id": 484812470,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1732748764
    },
    {
        "content": "<p>because it would give us an excellent test case for the feature once we've actually built it</p>",
        "id": 484812492,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1732748784
    },
    {
        "content": "<p>that said, are you talking about putting capitalization directly in <code>roc-lang/unicode</code>?</p>",
        "id": 484812936,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1732749084
    },
    {
        "content": "<p>we've talked about this in the past, and capitalization can't be done correctly using only Unicode information - e.g. \"what is the capitalization of the letter <code>i</code>?\" cannot be correctly answered without knowing whether you mean in English or in Turkish, <a href=\"http://www.i18nguy.com/unicode/turkish-i18n.html#problem\">which has different rules</a> - the exact same Unicode code point for <code>i</code> capitalizes to <code>I</code> in English and <code>İ</code> in Turkish, and the exact same code point for <code>I</code> lowercases to <code>i</code> in English and <code>ı</code> in Turkish</p>",
        "id": 484813115,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1732749211
    },
    {
        "content": "<p>It's a mapping from codepoint to codepoint (mostly) ... though occasionally from codepoint to a list of codepoints. It's not really dense no ... compared to the number of potential codepoints. It's dense in some parts (blocks where there are case differences), but there are large tracts of the space with no mappings at all.</p>",
        "id": 484813278,
        "sender_full_name": "Paul Stanley",
        "timestamp": 1732749332
    },
    {
        "content": "<p>I forget what we decided the last time I talked to <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> about this - it was either to have a separate <code>roc-lang/locale</code> package or maybe to do something more granular, like having a module for different languages inside <code>unicode</code> (e.g. <code>En.roc</code>, <code>Tr.roc</code>, etc.)</p>",
        "id": 484813308,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1732749349
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"775526\">Paul Stanley</span> <a href=\"#narrow/channel/231634-beginners/topic/Constant.20data.20structures.20for.20efficient.20lookup/near/484813278\">said</a>:</p>\n<blockquote>\n<p>It's a mapping from codepoint to codepoint (mostly) ... though occasionally from codepoint to a list of codepoints.</p>\n</blockquote>\n<p>gotcha, so in those cases I guess we pick from within the list using the language code?</p>",
        "id": 484813404,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1732749396
    },
    {
        "content": "<p>anyway, I guess the main point is that since it's impossible to correctly implement a <code>capitalize : Str -&gt; Str</code> function, we need to figure out what to offer instead of that <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 484813446,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1732749429
    },
    {
        "content": "<p>We haven't really dug into it, I think we decided to defer it for later design.</p>",
        "id": 484813501,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732749475
    },
    {
        "content": "<p>I implemented the <code>Locale</code> thing in basic-cli so we've at least got a starting point. I decided to use just a <code>Str</code> instead of a tag union because it may be possible for new ones to be added in future, and I think any application should be able to handle that</p>",
        "id": 484813593,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732749529
    },
    {
        "content": "<p>There is a defined algorithm (which includes the mappings for Turkish, Azeri and Lithuanian. It's part of unicode and should be there, for sure.</p>",
        "id": 484813602,
        "sender_full_name": "Paul Stanley",
        "timestamp": 1732749536
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/basic-cli/blob/main/platform/Locale.roc\">https://github.com/roc-lang/basic-cli/blob/main/platform/Locale.roc</a></p>",
        "id": 484813656,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732749588
    },
    {
        "content": "<p>I haven't really done more than think lightly about how to represent Locales. There are some complexities there too (no surprises) ... and in particular a decision to be taken about how much is done with types. For the basic unicode case algorithms though the only thing that matters is the primary language. I'll definitely look at basic-cli.</p>",
        "id": 484813889,
        "sender_full_name": "Paul Stanley",
        "timestamp": 1732749723
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"775526\">Paul Stanley</span> <a href=\"#narrow/stream/231634-beginners/topic/Constant.20data.20structures.20for.20efficient.20lookup/near/484813889\">said</a>:</p>\n<blockquote>\n<p>For the basic unicode case algorithms though the only thing that matters is the primary language.</p>\n</blockquote>\n<p>ah, as in if you know the desired language and also the code point to capitalize, with those two inputs the table gives you the correct output in one lookup?</p>",
        "id": 484814088,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1732749891
    },
    {
        "content": "<p>I only did some light research. Dillon Kearn's work for Elm might be helpful <a href=\"https://package.elm-lang.org/packages/dillonkearns/elm-bcp47-language-tag/latest/\">https://package.elm-lang.org/packages/dillonkearns/elm-bcp47-language-tag/latest/</a></p>",
        "id": 484814089,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732749891
    },
    {
        "content": "<p>Performance-wise, I would guess that the gigantic switch would perform poorly. A dense switch will convert to a jump table. A sparse switch is at best some sort of nested log n conditional, and is at worst a linear chain of branching conditionals.</p>",
        "id": 484814438,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732750131
    },
    {
        "content": "<p>For some cases where the branching is too complex to turn into a map, the switch still makes the most sense. And it often is the simplest.</p>",
        "id": 484814470,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732750163
    },
    {
        "content": "<p>For something like this, a dict from codepoint to list of codepoint (one per locale I assume) is probably the simplest reasonably performant solution</p>",
        "id": 484814600,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732750233
    },
    {
        "content": "<p>If possible, would be better to go to a tuple of codepoints and avoid the extra indirection of a list. Or even go to a string to get small string optimization.</p>",
        "id": 484814677,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732750278
    },
    {
        "content": "<p>Also, can you give more info on the ocaml solution? If everything is sparse, how does it map to arrays?</p>",
        "id": 484814793,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732750350
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/231634-beginners/topic/Constant.20data.20structures.20for.20efficient.20lookup/near/484814793\">said</a>:</p>\n<blockquote>\n<p>Also, can you give more info on the ocaml solution? If everything is sparse, how does it map to arrays?</p>\n</blockquote>\n<p>It's using a trie, constructed as an array of arrays of arrays. Unicode codepoints range from U+0000 to U+10FFFF. But many blocks of codepoints are for scripts which have no casing information. You can exploit this. Effectively:</p>\n<ul>\n<li>\n<p>First index the first byte into an array. If there's no entry for any codepoint \"below\" that byte, return null ... otherwise return an array for the second byte. So, for example if we were looking up 01F001 we would examine simply 01 and get null -- so we know we won't have any mapping, but if we were looking up 000061 or 002150 we would get an array at level 2.</p>\n</li>\n<li>\n<p>Next index the second byte into this array. Same story. In this case 000061 would return a third level array, but 002150 would return null, because there are no codepoints in the 21xx range with any casing information.</p>\n</li>\n<li>\n<p>Finally index into the last array to get the value. In this case, 0061 (lower-case a) would return 0041, which is the uppercase value.</p>\n</li>\n</ul>\n<p>So basically we're taking advantage of the fact that we're searching a sparse structure where most routes from byte to byte are dead ends, and we can simply record that. We have three levels of arrays, and if all of them were needed we'd have a massive structure: but in most cases there are no \"children\" and we can simply record that fact, not needing to construct the arrays that would be required if there were data in them.</p>",
        "id": 484864027,
        "sender_full_name": "Paul Stanley",
        "timestamp": 1732782671
    },
    {
        "content": "<p>On my original question, I think the right thing to do is probably construct (it's not hard) a variety of possible solutions and ... measure!</p>",
        "id": 484864530,
        "sender_full_name": "Paul Stanley",
        "timestamp": 1732782845
    },
    {
        "content": "<p>I see. Makes sense. Would likely be a lot faster than any sort of hashing. Memory is slow, but 3 lookups is probably faster than hashing and looking up.</p>",
        "id": 484864936,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732782974
    },
    {
        "content": "<p>In roc today, I would probably represent that as a triple nested <code>when ... is</code> where each branch goes over the full 256 possible values</p>",
        "id": 484865012,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732782998
    },
    {
        "content": "<p>Triple nested lists would also be ok, but roc doesn't generate nested list constants efficiently today....so, not optimal.</p>",
        "id": 484865218,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732783064
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/231634-beginners/topic/Constant.20data.20structures.20for.20efficient.20lookup/near/484865012\">said</a>:</p>\n<blockquote>\n<p>In roc today, I would probably represent that as a triple nested <code>when ... is</code> where each branch goes over the full 256 possible values</p>\n</blockquote>\n<p>That's a brilliant idea!</p>",
        "id": 484865230,
        "sender_full_name": "Paul Stanley",
        "timestamp": 1732783067
    },
    {
        "content": "<p>I think llvm should generate you a fast jump table for that. If it doesn't, I'm sure we can poke at the code gen to make it happy.</p>",
        "id": 484865766,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732783257
    },
    {
        "content": "<p>Short update.</p>\n<p>I implemented both a single giant pattern-matching statement and a three-stage one.</p>\n<p>I attempted to time this by placing a <code>Utc.now!</code> on either side of some code which called a function that executes lookups over a short-ish (c 15000 codepoint) mixed piece of unicode, converted to a list of codepoints before I began timing, and assigns them to variables. And did this several times. The sample contained a good range of characters which would have lookup results and wouldn't. I reported the delta with <code>Utc.deltaAsMillis</code>. </p>\n<p>The result was ... totally inconclusive. A <em>tiny</em> average difference between the \"trie\" version and the single version. I didn't collect results systematically, but we were looking at c. 80 ms for either version.</p>\n<p>HOWEVER, something is fishy:</p>\n<ul>\n<li>I tried testing a function that actually does something substantial (building a new list with each codepoint: lots of <code>List.append</code> and <code>List.join</code> with no attempt to optimise).</li>\n<li>I tried testing a function that simply examines each codepoint and determines whether it has a mapping, returning true if every codepoint has a mapping.</li>\n<li>I tried the same thing, but with <code>List.walkUntil</code> terminating both when a codepoint did, and when it didn't have a mapping and reporting the point it had got to. That function examined only between 1 and 7 codepoints.</li>\n</ul>\n<p>The weird thing: all of these were taking the <em>same</em> time near as makes no difference. So either:</p>\n<ul>\n<li>I'm making some mistake timing this.</li>\n<li>The lookup is incredibly fast in either version, and the time is being dominated simply by the time taken to call functions and allocate memory for variables and I'd need a <em>much</em> longer sample test to see any differences.</li>\n</ul>\n<p>(I also tried timing a \"dummy\" identity function, which simply returned its input ... and got more or less the same timing. So ... my test is certainly dominated by things other than any actual logic.)</p>\n<p>Since the trie version is no harder to do now that I've written the code required to produce it, should be better, and doesn't look worse, I'll probably stick with it. But I suppose the usual rules about optimization apply!</p>",
        "id": 485048702,
        "sender_full_name": "Paul Stanley",
        "timestamp": 1732870058
    },
    {
        "content": "<p>Do you have code I can benchmark?</p>",
        "id": 485148282,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732906760
    },
    {
        "content": "<p>I will have to do some reconstruction ... because I've moved things on quite a while since I had the test code set up. Not urgent though!</p>",
        "id": 485500789,
        "sender_full_name": "Paul Stanley",
        "timestamp": 1733075183
    },
    {
        "content": "<p>No worries. In general, I know the sharp edges of roc performance and generally can identify them pretty quick with benchmarking.</p>",
        "id": 485504164,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1733078044
    }
]