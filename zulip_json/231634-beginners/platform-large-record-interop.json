[
    {
        "content": "<p>Hi all! Is it generally considered a bad practice to pass a large record from the platform as an argument into the main app function? And calling that main function multiple times?</p>\n<p>I'm toying around with a game idea, and want the platform to call into the apps <code>update : State, Action -&gt; State</code> function. Every time there is an input (keypress on terminal, etc), said input would be converted to an <code>Action</code> and would call into <code>update</code> to see how it affects the game state.  I assume that means that the inputs <code>State</code> and <code>Action</code> would be allocated on the heap, and have noticed significant effort in some of the examples to avoid doing exactly that. Is this a bad idea, and if so how should I go about it instead?</p>",
        "id": 291751795,
        "sender_full_name": "parasrah",
        "timestamp": 1659466062
    },
    {
        "content": "<p>at least today, records and non-recursive tags are fully on the stack, always</p>",
        "id": 291752252,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1659466228
    },
    {
        "content": "<p>under the hood big records are passed as pointers to this stack memory</p>",
        "id": 291752323,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1659466271
    },
    {
        "content": "<p>so, I think it should be fine?</p>",
        "id": 291752359,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1659466291
    },
    {
        "content": "<p>Ok great, and there isn't a significant amount of overhead from the platform calling into the app multiple times? From what I've seen in the example they all only call into it once</p>",
        "id": 291752634,
        "sender_full_name": "parasrah",
        "timestamp": 1659466408
    },
    {
        "content": "<p>examples*</p>",
        "id": 291752661,
        "sender_full_name": "parasrah",
        "timestamp": 1659466418
    },
    {
        "content": "<p>no, it's just a function</p>",
        "id": 291752710,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1659466440
    },
    {
        "content": "<p>the existing examples don't need the repeated calls, but more complex examples will</p>",
        "id": 291752810,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1659466463
    },
    {
        "content": "<p>it's something we want to support for sure</p>",
        "id": 291752827,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1659466470
    },
    {
        "content": "<p>Okay awesome, thanks for answering my questions! I'm not much of a systems dev so this is somewhat new territory for me</p>",
        "id": 291752887,
        "sender_full_name": "parasrah",
        "timestamp": 1659466497
    },
    {
        "content": "<p>An extra note on this: currently if you want something generic that is not tied to the platform, like <code>State</code> would likely be, you have to use <code>Box</code> around it. That way, the platform just sees it as a pointer and can pass it along without knowing anything about it.</p>",
        "id": 291757415,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1659468679
    },
    {
        "content": "<p>This example is out of date with current roc, but would be relatively easy to update:</p>\n<p>Main function signatures: <a href=\"https://github.com/bhansconnect/roc-ecs/blob/trunk/roc-simple-ecs/Package-Config.roc\">https://github.com/bhansconnect/roc-ecs/blob/trunk/roc-simple-ecs/Package-Config.roc</a><br>\nThe platform wrapper and how it interacts with Roc: <a href=\"https://github.com/bhansconnect/roc-ecs/blob/trunk/roc-simple-ecs/roc-ecs-platform.h\">https://github.com/bhansconnect/roc-ecs/blob/trunk/roc-simple-ecs/roc-ecs-platform.h</a></p>",
        "id": 291757525,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1659468745
    },
    {
        "content": "<p>As a first foray into Roc, this probably would be a bit complicated to get set up, especially if you are not used to lower level languages.</p>",
        "id": 291757794,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1659468889
    },
    {
        "content": "<p>well yes but we're here to help. What language are you using for the host?</p>",
        "id": 291758248,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1659469100
    },
    {
        "content": "<p>I'm using rust, and have been dabbling in it for years*</p>",
        "id": 291758397,
        "sender_full_name": "parasrah",
        "timestamp": 1659469201
    },
    {
        "content": "<p>Thanks for the example, that was the next problem I was going to tackle, as you're right I would like the State to be opaque to the platform</p>",
        "id": 291758550,
        "sender_full_name": "parasrah",
        "timestamp": 1659469273
    },
    {
        "content": "<p>then stack allocation becomes a bit harder, because the platform needs a place to put the value</p>",
        "id": 291758611,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1659469314
    },
    {
        "content": "<p>and you don't know statically how large it will be</p>",
        "id": 291758674,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1659469326
    },
    {
        "content": "<p>So if it's boxed, it would be allocated on the heap instead? Similar to rust?</p>",
        "id": 291758925,
        "sender_full_name": "parasrah",
        "timestamp": 1659469449
    },
    {
        "content": "<p>Yes</p>",
        "id": 291758938,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1659469459
    },
    {
        "content": "<p>On the heap with a refcount.</p>",
        "id": 291758949,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1659469468
    },
    {
        "content": "<p>yes, or you just sort of guess the maximum size and store into an array of bytes</p>",
        "id": 291759084,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1659469558
    },
    {
        "content": "<p>on the stack</p>",
        "id": 291759086,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1659469560
    },
    {
        "content": "<p>Well I will give it a shot, I can always refactor if perf becomes an issue. <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> I'm assuming that's your ecs repo? How did your experiment go?</p>",
        "id": 291759189,
        "sender_full_name": "parasrah",
        "timestamp": 1659469609
    },
    {
        "content": "<p>however that might still run into problems with the ABI</p>",
        "id": 291759195,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1659469615
    },
    {
        "content": "<p>Yeah, it is my repo, feel free to reach out with questions in general. I can also update it to current Roc if you want (I think it is only minor changes).</p>\n<p>The current difference between this and the equivalent code written in c++ is about 5x. So definitely a hit currently. That being said, it is still running so fast my terrible drawing pipeline is the bottleneck. Some details about it in <a class=\"stream-topic\" data-stream-id=\"231634\" href=\"/#narrow/stream/231634-beginners/topic/ECS\">#beginners &gt; ECS</a>. I think Roc should be able to close that gap, but box currently is totatly unoptimized and probably leads to a lot more copying than it should.</p>",
        "id": 291759699,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1659469895
    },
    {
        "content": "<p>Would need to look into it again to figure out the performance costs.</p>",
        "id": 291759770,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1659469923
    },
    {
        "content": "<p>No need to update it for my sake, I'll do some digging into it when I have the chance. For the time being I might just leave the state in the platform until that starts causing me problems. As far as performance, I don't anticipate it mattering as much for an ascii roguelike but the best method is probably just to try it out and see, thanks!</p>",
        "id": 291760266,
        "sender_full_name": "parasrah",
        "timestamp": 1659470197
    },
    {
        "content": "<p>Oh, also, I just realized that there is a likely better example in the Roc repo. It is up to date and built with rust: <a href=\"https://github.com/rtfeldman/roc/tree/trunk/examples/breakout\">https://github.com/rtfeldman/roc/tree/trunk/examples/breakout</a></p>",
        "id": 291767481,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1659473648
    },
    {
        "content": "<p><a href=\"https://mobile.twitter.com/roc_lang/status/1554586049417977857\">https://mobile.twitter.com/roc_lang/status/1554586049417977857</a> is a demo of both of those platforms!</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://mobile.twitter.com/roc_lang/status/1554586049417977857\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/f1fb53436f5039f39d6aff2404d9ca2c7091c6f8/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f313432323933313536303939393838323736322f5762615f7163746c5f6e6f726d616c2e6a7067\"></a><p>Here's a demo from <a href=\"https://twitter.com/phillyete\">@phillyete</a> 2022 of early-stage native desktop apps in Roc, with a bonus demo of cross-compiling Roc applications to self-contained executables that run on other operating systems:\n\n<a href=\"https://t.co/c4RuMP2HpA\">https://youtu.be/XnbKVTO0eUE</a></p><span>- Roc (@roc_lang)</span></div></div>",
        "id": 291776010,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1659478510
    }
]