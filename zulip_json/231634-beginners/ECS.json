[
    {
        "content": "<p>So I just wrote a simple ECS in c++ to better understand them that I am gonna trying port to Roc in order to get a better understanding of the performance and potential APIs. It is just a simple \"firework\" simulation thing that I made up. The ECS is a simplified and directly implemented version of <a href=\"https://youtu.be/NTWSeQtHZ9M\">the ECS in this talk</a>.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"NTWSeQtHZ9M\" href=\"https://youtu.be/NTWSeQtHZ9M\"><img src=\"https://uploads.zulipusercontent.net/a86b318e0eed2a4f97bb56330dbaf15a74f6d83b/68747470733a2f2f692e7974696d672e636f6d2f76692f4e545753655174485a394d2f64656661756c742e6a7067\"></a></div><p>This is what the output looks like:<br>\n<a href=\"/user_uploads/22008/RnCaqh1c0k6mH5KY-03Buhv2/slow.gif\">output.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/RnCaqh1c0k6mH5KY-03Buhv2/slow.gif\" title=\"output.gif\"><img src=\"/user_uploads/22008/RnCaqh1c0k6mH5KY-03Buhv2/slow.gif\"></a></div>",
        "id": 276734972,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1648313705
    },
    {
        "content": "<p>I can control the max number of entities and how fast the fireworks spawn:<br>\n<a href=\"/user_uploads/22008/lOxd_aeNKjAAJB6pj_JaQgfb/faster.gif\">faster.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/lOxd_aeNKjAAJB6pj_JaQgfb/faster.gif\" title=\"faster.gif\"><img src=\"/user_uploads/22008/lOxd_aeNKjAAJB6pj_JaQgfb/faster.gif\"></a></div>",
        "id": 276735005,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1648313745
    },
    {
        "content": "<p>I also can turn off rendering to just benchmark the underlying ECS performance. Turns out that drawing a bunch of colorful translucent circles is slow. Probably need to optimize the rendering more in general. But since I just care about the underlying ECS that doesn't matter.</p>",
        "id": 276735102,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1648313868
    },
    {
        "content": "<p>Current possible number of entities while maintaining 60 FPS (on my M1 mac):</p>\n<ul>\n<li>~9,000 circles when rendering with alpha blending</li>\n<li>~20,000 circles when rendering without alpha blending</li>\n<li>~700,000 circles when not rendering</li>\n<li>~1,500,000 when changing ECS to be very roughly based off of a Mike Acton talk on the Unity ECS</li>\n</ul>\n<p>No idea if those are actually decent numbers for what is being done, but still should be good enough for comparing the Roc to the C++ version for performance since they will be written in similar ways.</p>",
        "id": 276735185,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1648313990
    },
    {
        "content": "<p>For anyone interested, the repo is here: <a href=\"https://github.com/bhansconnect/roc-ecs\">https://github.com/bhansconnect/roc-ecs</a></p>\n<p>But currently it is only the c++ base and a readme. Next need to make a c++ platform and add a directly ported roc version.</p>",
        "id": 276735627,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1648314496
    },
    {
        "content": "<p>Got this working in Roc. It is a pretty direct port of the c++ version and not the prettiest code, but it is fully functional. Also had to work around some Roc issues to make it fully functional:<br>\n<a href=\"/user_uploads/22008/5tHXE1w-xmlxBWjQyfbl1PMk/roc.gif\">roc.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/5tHXE1w-xmlxBWjQyfbl1PMk/roc.gif\" title=\"roc.gif\"><img src=\"/user_uploads/22008/5tHXE1w-xmlxBWjQyfbl1PMk/roc.gif\"></a></div>",
        "id": 277804560,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1649112671
    },
    {
        "content": "<p>Would post performance information, but currently I can't compile it in an optimized build. Need to work around <a href=\"https://github.com/rtfeldman/roc/issues/2785\">this issue first</a></p>",
        "id": 277804591,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1649112702
    },
    {
        "content": "<p>cooooooool</p>",
        "id": 277805924,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1649113539
    },
    {
        "content": "<p>So I got the Roc version compiling in optimized build. Definitely gonna need to debug the performance. It essentially is the same speed as the debug build. Probably some references/copying of lists that is ruining the performance. But where we stand rn:</p>\n<p>~5,000 circles for Roc vs ~700,000 for c++</p>",
        "id": 278495727,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1649633996
    },
    {
        "content": "<p>So direct port of the c++ algorithm definitely block some roc optimizations and causing pain.</p>",
        "id": 278495773,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1649634022
    },
    {
        "content": "<p>Yep, definitely a referencing issue. Essentially all of the time is spent in <code>memmove</code> caused by <code>List.set</code>. So need to double check my references here.</p>",
        "id": 278495915,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1649634256
    },
    {
        "content": "<p>So found at least part of the issue. Roc does not know how to optimize updating a list inside of a struct directly. As in this code:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">nextModel = </span><span class=\"p\">{</span> <span class=\"nx\">model</span> <span class=\"o\">&amp;</span> <span class=\"nv\">graphics: </span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">set</span> <span class=\"nx\">model</span><span class=\"p\">.</span><span class=\"nx\">graphics</span> <span class=\"p\">(</span><span class=\"nx\">Num</span><span class=\"p\">.</span><span class=\"nx\">toNat</span> <span class=\"nx\">id</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nv\">color: </span><span class=\"nx\">fadeColor</span> <span class=\"nx\">color</span> <span class=\"nx\">fade</span><span class=\"p\">,</span> <span class=\"nx\">radius</span><span class=\"p\">}</span> <span class=\"p\">}</span>\n</code></pre></div>\n<p>It will copy every time with current roc. Instead you need something like:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">graphics = </span><span class=\"nx\">model</span><span class=\"p\">.</span><span class=\"nx\">graphics</span>\n<span class=\"nv\">tmpModel = </span><span class=\"p\">{</span> <span class=\"nx\">model</span> <span class=\"o\">&amp;</span> <span class=\"nv\">graphics: </span><span class=\"p\">[]</span> <span class=\"p\">}</span>\n<span class=\"nv\">nextModel = </span><span class=\"p\">{</span> <span class=\"nx\">tmpModel</span> <span class=\"o\">&amp;</span> <span class=\"nv\">graphics: </span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">set</span> <span class=\"nx\">graphics</span> <span class=\"p\">(</span><span class=\"nx\">Num</span><span class=\"p\">.</span><span class=\"nx\">toNat</span> <span class=\"nx\">id</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nv\">color: </span><span class=\"nx\">fadeColor</span> <span class=\"nx\">color</span> <span class=\"nx\">fade</span><span class=\"p\">,</span> <span class=\"nx\">radius</span><span class=\"p\">}</span> <span class=\"p\">}</span>\n</code></pre></div>\n<p>Just changing a couple of those and performance jumped up to 16,000. There are still more to change.</p>",
        "id": 278645825,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1649736164
    },
    {
        "content": "<p>Ok, I have a fixed at least all of the basic copying issues. I think it is still doing some extra copying but not completely sure. This now brings the Roc numbers up to <code>140,000</code>...so <code>5x</code> slower than the equivalent c++ implementation that can run at <code>700,000</code>. Definitely a respectable start.</p>",
        "id": 278647324,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1649737903
    },
    {
        "content": "<p>Nice! Can you open an issue for the missing optimization?</p>",
        "id": 278678929,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1649762870
    },
    {
        "content": "<p>that's disappointing that LLVM cannot figure it out</p>",
        "id": 278707705,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1649776517
    },
    {
        "content": "<p>Disappointing, but not really surprising. We increment the refcount, ask it to do something that will lead to a memmove, and then decrement the refcount. So we are doing really global effects. From llvms view you might explicitly want to move the data to a new location and free the old one.</p>",
        "id": 278708880,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1649776977
    },
    {
        "content": "<p>so then what is a good fix here in terms of code gen</p>",
        "id": 278713817,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1649779253
    },
    {
        "content": "<p>take the value out and zero out the field?</p>",
        "id": 278713865,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1649779274
    },
    {
        "content": "<p>That may actually be the simplest solution as silly as it sounds.</p>",
        "id": 278715541,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1649779981
    },
    {
        "content": "<p>Is that panic safe? If you just zero out the bits then it could be an invalid object for a while. I don't know whether that matters for Roc. Interestingly, this is a problem that I also encountered in my language (I try to do full program ownership inference) and I \"solved\" this by replacing updates with ctor calls where I simply plug in each unchanged and changed value. In this case, I believe there isn't any moment where the object is invalid.</p>",
        "id": 278716229,
        "sender_full_name": "László Benedek",
        "timestamp": 1649780329
    },
    {
        "content": "<p>No app state is recoverable on a panic. Only platform side state, so it should be safe.</p>",
        "id": 278716875,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1649780641
    },
    {
        "content": "<p>Also, if the record was boxed and shared between threads or something crazy like that. Zeroing the field would require copying the record to a local version before actually zeroing it. Which should also be safe.</p>",
        "id": 278717059,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1649780720
    },
    {
        "content": "<p>Would have happened when updating the record anyway. Just happening earlier now.</p>",
        "id": 278717121,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1649780754
    },
    {
        "content": "<p>I'm not talking about recovery, just safe destruction. How do you call the dtor of something that has invalid bits? Or do you simply forget everything in case of panics and let the platform figure out what to clean up?</p>",
        "id": 278717523,
        "sender_full_name": "László Benedek",
        "timestamp": 1649780948
    },
    {
        "content": "<p>It's the platform's problem</p>",
        "id": 278717785,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1649781087
    },
    {
        "content": "<p>Many platforms will likely just crash with a message. Some will just delete an arena and move on. Others may just log it and leak memory.</p>",
        "id": 278717919,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1649781156
    },
    {
        "content": "<p>What about other resources? Sockets, files?</p>",
        "id": 278718596,
        "sender_full_name": "László Benedek",
        "timestamp": 1649781489
    },
    {
        "content": "<p>Roc doesn't have control over sockets or files. Only the host does.</p>",
        "id": 278719400,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1649781874
    },
    {
        "content": "<p>So Roc literally doesn't know how to close a socket.</p>",
        "id": 278719447,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1649781897
    },
    {
        "content": "<p>It would have to call a host function to get it to close.</p>",
        "id": 278719476,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1649781914
    },
    {
        "content": "<p>From rocs point of view, after a panic, the platform could pass the same socket back into it again, so if we closed it, that would be problematic.</p>",
        "id": 278719671,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1649781989
    },
    {
        "content": "<p>I see. I wasn't aware of how much responsibility the platforms have.</p>",
        "id": 278720094,
        "sender_full_name": "László Benedek",
        "timestamp": 1649782180
    },
    {
        "content": "<p>Yeah, they deal with all forms of IO. Roc is really just a subfunction to a platform that does some pure data transformations. The only guaranteed* functions that a platform will provide are panic and memory allocation/resize/deallocation functions.</p>\n<p>Not technically guaranteed: On an embedded system, I might have a empty roc_alloc that just crashes. So the roc programmer would not be allowed to use anything that allocates.</p>",
        "id": 278720579,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1649782390
    },
    {
        "content": "<p>out of curiosity, did you also try this way?</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">graphics = </span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">set</span> <span class=\"nx\">model</span><span class=\"p\">.</span><span class=\"nx\">graphics</span> <span class=\"p\">(</span><span class=\"nx\">Num</span><span class=\"p\">.</span><span class=\"nx\">toNat</span> <span class=\"nx\">id</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nv\">color: </span><span class=\"nx\">fadeColor</span> <span class=\"nx\">color</span> <span class=\"nx\">fade</span><span class=\"p\">,</span> <span class=\"nx\">radius</span><span class=\"p\">}</span>\n<span class=\"nv\">nextModel = </span><span class=\"p\">{</span> <span class=\"nx\">model</span> <span class=\"o\">&amp;</span> <span class=\"nx\">graphics</span> <span class=\"p\">}</span>\n</code></pre></div>",
        "id": 278721994,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1649783003
    },
    {
        "content": "<p>Just tested. That copies.</p>",
        "id": 278727471,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1649785579
    }
]