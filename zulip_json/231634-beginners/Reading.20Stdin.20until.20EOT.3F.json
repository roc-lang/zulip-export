[
    {
        "content": "<p>How would I read from Stdin until EOT? I'm trying to pipe input into a basic-cli app and it crashes.</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;&lt;unnamed&gt;&#39; panicked at &#39;called `Option::unwrap()` on a `None` value&#39;, src/lib.rs:298:45\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\nfatal runtime error: failed to initiate panic, error 5\n</code></pre></div>\n<p>This is my best attempt:</p>\n<div class=\"codehilite\"><pre><span></span><code>            loop : Str -&gt; Task [Step Str, Done Str] never\n            loop = \\a -&gt; Task.attempt Stdin.line \\x -&gt; when x is\n                Ok b -&gt; Task.succeed (Step (Str.concat a b))\n                Err _ -&gt; Task.succeed (Done a)\n            stdin &lt;- await (Task.loop &quot;&quot; loop)\n</code></pre></div>",
        "id": 393824109,
        "sender_full_name": "Taylor Troesh",
        "timestamp": 1695947223
    },
    {
        "content": "<p>I think this is a case where we need to change how the stdin function works on the platform</p>",
        "id": 393825418,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1695947882
    },
    {
        "content": "<p>I think we currently have it just unwrap the stdin option when it really should return an option in the function</p>",
        "id": 393825484,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1695947907
    },
    {
        "content": "<p>That way you know when you hit eof instead of crashing</p>",
        "id": 393825509,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1695947926
    },
    {
        "content": "<p>Basically, we have a bad default currently that crashes on any error and eof is being considered an error.</p>",
        "id": 393825570,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1695947961
    },
    {
        "content": "<p>This would probably be a good first issue for anyone interested.</p>",
        "id": 393825601,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1695947982
    },
    {
        "content": "<p>Should we change the type of Stdin.line to <code>Task [Input Str, End] *</code>?</p>",
        "id": 393889322,
        "sender_full_name": "Anton",
        "timestamp": 1695977865
    },
    {
        "content": "<blockquote>\n<p>Should we change the type of Stdin.line to <code>Task [Input Str, End] *</code>?</p>\n</blockquote>\n<p>I like the sound of that</p>",
        "id": 399200430,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1698627131
    },
    {
        "content": "<p>Should Eof be a normal state or an error state? I would assume it is a error that you normally match on/react to, but I guess either is valid</p>",
        "id": 399204026,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1698628843
    },
    {
        "content": "<p>Hmm...in rust, I guess it is result option str</p>",
        "id": 399204050,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1698628857
    },
    {
        "content": "<p>So eof is part of the positive side, not error side</p>",
        "id": 399204084,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1698628876
    },
    {
        "content": "<p>Yeah I don't think it makes sense for eof to be considered an error</p>",
        "id": 399206170,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1698630038
    },
    {
        "content": "<p>I have this implemented, just need to make sure everything is right and then I'll open up a PR another day</p>",
        "id": 399218054,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1698636298
    }
]