[
    {
        "content": "<p>Do I need to define all of the abilities supported by a type when I define that type?</p>",
        "id": 412397047,
        "sender_full_name": "njlr",
        "timestamp": 1704996940
    },
    {
        "content": "<p>Yep</p>",
        "id": 412397127,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704996966
    },
    {
        "content": "<p>Hmm I wonder if this will become a problem.</p>\n<p>F# does not have traits / type-classes but at least it has interfaces to fall back on in the style of Java/C#</p>\n<p>I assume Roc does not have interfaces due to heap allocation / general slowness. </p>\n<p>Is there a plan in Roc to handle these situations?</p>",
        "id": 412397301,
        "sender_full_name": "njlr",
        "timestamp": 1704997047
    },
    {
        "content": "<p>you don't necessarily have to write out the whole implementation</p>",
        "id": 412398612,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704997653
    },
    {
        "content": "<p>like you can say <code>implements [Eq, Hash, Inspect]</code> and it will infer an implementation based on the inner type the opaque type is wrapping</p>",
        "id": 412398676,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704997682
    },
    {
        "content": "<p>If the type comes from somewhere else (like say in a library), I guess there is no way to \"extend\" it?</p>",
        "id": 412398781,
        "sender_full_name": "njlr",
        "timestamp": 1704997722
    },
    {
        "content": "<p>that's correct, and that's by design</p>",
        "id": 412398794,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704997732
    },
    {
        "content": "<p>part of the reason for defining all of the abilities explicitly is that it's important for opaque types to be opaque by default (that is, not exposing their internal implementations) so that backwards-compatible changes can be made to them later</p>",
        "id": 412398827,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704997753
    },
    {
        "content": "<p>Fair enough!<br>\nI do wonder if this will lead to lots of boilerplate situations, however.</p>",
        "id": 412398862,
        "sender_full_name": "njlr",
        "timestamp": 1704997772
    },
    {
        "content": "<p>part of this is not letting others implement those abilities, because then if the original implementor later decides to add an ability, it might conflict with the userspace implementations and cause problems</p>",
        "id": 412398876,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704997779
    },
    {
        "content": "<p>I suspect not, but an important consideration is that editor plugins can make it very quick to add them <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 412398976,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704997810
    },
    {
        "content": "<p>also keep in mind that this is just for opaque types and not type aliases</p>",
        "id": 412398990,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704997817
    },
    {
        "content": "<p>so for example if you just want a <code>User</code> record and you do <code>User : { email : Str, ... }</code> then it gets all the abilities inferred and you don't need to write anything</p>",
        "id": 412399041,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704997840
    },
    {
        "content": "<p>it's only if you want to make a new custom type that this comes up</p>",
        "id": 412399074,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704997855
    },
    {
        "content": "<p>I'm thinking of a situation like...</p>\n<p>- Library A implements operations on tree-like things and defines an ability<br>\n  - Library B implements some type T I want to use<br>\n  - To use T instances with Library A functions, I need to write my own type that has the abilities defined in Library A and I also need to convert T instances T into my type</p>",
        "id": 412399297,
        "sender_full_name": "njlr",
        "timestamp": 1704997939
    },
    {
        "content": "<p>to me, in this scenario the author of Library A made a mistake <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 412399717,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704998126
    },
    {
        "content": "<p>I think \"implementing operations on tree-like things\" is not a good idea for a library</p>",
        "id": 412399738,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704998139
    },
    {
        "content": "<p>it's better to implement operations on one specific tree implementation</p>",
        "id": 412399754,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704998146
    },
    {
        "content": "<p>I think this is something Java encouraged that hasn't worked out well in practice (at least based on my past career as a Java developer)</p>",
        "id": 412399849,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704998166
    },
    {
        "content": "<p>that is, \"build lots of things in terms of interfaces and then that way you can swap out implementations\" - I don't think the benefits of doing everything in that style have outweighed the drawbacks in practice, so I don't want to encourage that style in Roc</p>",
        "id": 412399914,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704998203
    },
    {
        "content": "<p>I was more thinking about Haskell libraries but I can understand if this is not the direction for Roc</p>",
        "id": 412399927,
        "sender_full_name": "njlr",
        "timestamp": 1704998210
    },
    {
        "content": "<p>yeah same consideration there! <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 412399946,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1704998219
    },
    {
        "content": "<p>You can easily get this feature by passing in a record of needed functions</p>",
        "id": 412399988,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704998233
    },
    {
        "content": "<p>This was the reponse Dom Syme (F#) gave too</p>",
        "id": 412400015,
        "sender_full_name": "njlr",
        "timestamp": 1704998249
    },
    {
        "content": "<p>Just a more explicit form of the interface</p>",
        "id": 412400029,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704998256
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"680630\">njlr</span> has marked this topic as resolved.</p>",
        "id": 412400216,
        "sender_full_name": "Notification Bot",
        "timestamp": 1704998325
    }
]