[
    {
        "content": "<p>Just to make sure: there are no exceptions, so every function is either total or returns a Result / Task ?</p>",
        "id": 300568225,
        "sender_full_name": "theduke",
        "timestamp": 1664042792
    },
    {
        "content": "<p>Correct</p>",
        "id": 300568268,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1664042810
    },
    {
        "content": "<p>Great.</p>\n<p>And... is there some syntax sugar for pipelines to forward to another argument than the first one? Like with a <code>_</code> placeholder or similar?</p>",
        "id": 300568455,
        "sender_full_name": "theduke",
        "timestamp": 1664042891
    },
    {
        "content": "<p>caveat: Roc can panic. This happens for example when overflowing an integer type during addition. There is no way to catch/recover from this in Roc. It directly calls a platform function that decides how to proceed.</p>",
        "id": 300568493,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1664042908
    },
    {
        "content": "<blockquote>\n<p>is there some syntax sugar for pipelines to forward to another argument than the first one?</p>\n</blockquote>\n<p>No, you have to use a lambda <code>|&gt; \\arg3 -&gt; SomeFunc arg1 arg2 arg3</code></p>",
        "id": 300568584,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1664042962
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Random.20Beginner.20Questions/near/300568493\">said</a>:</p>\n<blockquote>\n<p>caveat: Roc can panic. This happens for example when overflowing an integer type during addition. There is no way to catch/recover from this in Roc. It directly calls a platform function that decides how to proceed.</p>\n</blockquote>\n<p>That's a pretty big caveat.<br>\nSo essentially the <code>+</code> etc operators are useless in most code, since you'd want to use <code>addChecked</code> or <code>addWrap</code> in most places.</p>",
        "id": 300569038,
        "sender_full_name": "theduke",
        "timestamp": 1664043254
    },
    {
        "content": "<p>well, if you are reasonably confident that <code>+</code> will not overflow, it could be a reasonable operator!</p>",
        "id": 300569173,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1664043314
    },
    {
        "content": "<p>Sure, but possibility for an abort in pretty much all code is not exactly why I'd use a functional language.</p>",
        "id": 300569346,
        "sender_full_name": "theduke",
        "timestamp": 1664043407
    },
    {
        "content": "<p>Wouldn't a tradeoff like Rust does it be more sensible?<br>\nPanic in debug mode, but wrap in release mode?</p>",
        "id": 300569385,
        "sender_full_name": "theduke",
        "timestamp": 1664043427
    },
    {
        "content": "<p>I thought about this, but after asking around, it seems like the worst nightmare stories around consequences of silently wrapping instead of aborting end up happening in unforeseen production edge cases that didn't come up in development</p>",
        "id": 300569519,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1664043512
    },
    {
        "content": "<p>so it seems like the most reasonable designs to me are:</p>\n<ul>\n<li><code>+</code> always panics on integer overflow, like it does in Roc, Zig, and others</li>\n<li><code>+</code> silently upgrades to a bigger integer type on overflow, e.g. what Python does. I don't think the perf cost of this design is acceptable in Roc's case.</li>\n<li><code>+</code> always wraps, like in C</li>\n</ul>\n<p>I think what Rust and C++ do gives a false sense of security, and is more error prone than any of the 3 above designs</p>",
        "id": 300569839,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1664043712
    },
    {
        "content": "<p>I can get behind that reasoning, but honestly, in that case I'd be tempted to just not have the standard operators at all.<br>\nWhich admittedly makes code much more awkward and unapproachable...</p>",
        "id": 300570142,
        "sender_full_name": "theduke",
        "timestamp": 1664043962
    },
    {
        "content": "<p>yeah that would be a tough sell <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 300570254,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1664044025
    },
    {
        "content": "<p>I figured this is the best default, and then in the rare cases where the performance is sensitive to arithmetic instructions being wrapped in a conditional, you can opt into <code>Num.addWrap</code> and the like</p>",
        "id": 300570376,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1664044110
    },
    {
        "content": "<p>What makes it really problematic is that with no exception mechanism, there probably isn't any way to recover from an overflow?</p>",
        "id": 300570413,
        "sender_full_name": "theduke",
        "timestamp": 1664044138
    },
    {
        "content": "<p>I think it is important to remember that in most code, wrapping is not the wanted functionality and would be a bug. The question is whether you want to continue executing when something would almost certainly be a bug. In systems that need to be correct, I would definitely have to go with a resounding no. If you continue executing you may end up doing something very incorrect. It is better to panic, let the platform cleanup (for example by returning a 500 if this is a web server), and then continue on.</p>",
        "id": 300570424,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1664044145
    },
    {
        "content": "<p><code>Num.addChecked</code> is a way to recover</p>",
        "id": 300570541,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1664044216
    },
    {
        "content": "<p>basically <code>+</code> is saying \"I don't expect this to overflow, but I wouldn't bet my life on it\"</p>",
        "id": 300570542,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1664044216
    },
    {
        "content": "<p>Yeah, so essentially you have to either ban +-*/ from your code, or assume that your program can abort at any point.<br>\nI would hereby like to request a lint/compiler flag to forbid <code>+-*/</code> ;)</p>",
        "id": 300570585,
        "sender_full_name": "theduke",
        "timestamp": 1664044249
    },
    {
        "content": "<blockquote>\n<p>there probably isn't any way to recover from an overflow?</p>\n</blockquote>\n<p>The platform will be able to recover. The app will not be.</p>",
        "id": 300570590,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1664044254
    },
    {
        "content": "<p>whereas <code>Num.addWrap</code> is more like \"I am absolutely certain this will not overflow\" (or maybe you just want it to do wrapping overflow, e.g. in a hashing algorithm)</p>",
        "id": 300570615,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1664044272
    },
    {
        "content": "<p>computer programs in general can abort at any point</p>",
        "id": 300570647,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1664044300
    },
    {
        "content": "<p>e.g. due to stack overflows</p>",
        "id": 300570659,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1664044312
    },
    {
        "content": "<p>memory is finite</p>",
        "id": 300570704,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1664044325
    },
    {
        "content": "<p>if you want to absolutely guarantee that it won't happen, you have to get into things like proving there's no path through the program that could possibly exceed system resources, and run it on known hardware with multiple layers of hardware redundancy for all memory and CPU instructions, plus ample shielding from gamma rays</p>",
        "id": 300570797,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1664044411
    },
    {
        "content": "<p>and that's not Roc's target audience, so we have to draw the line for fault tolerance somewhere else <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 300570815,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1664044432
    },
    {
        "content": "<p>Well, even then someone could just cut the power cable at any point. :)</p>",
        "id": 300570872,
        "sender_full_name": "theduke",
        "timestamp": 1664044453
    },
    {
        "content": "<p>I think it just hurts my  sensibilities a bit.<br>\nNot even <code>Koka</code> has an effect for overlow (I think).</p>",
        "id": 300571037,
        "sender_full_name": "theduke",
        "timestamp": 1664044610
    },
    {
        "content": "<p>there are other things that panic: if you concatenate lists together until the resulting list can no longer fit in memory</p>",
        "id": 300571120,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1664044669
    },
    {
        "content": "<p>ps:  do abilities work, or should I expect bugs?</p>",
        "id": 300571129,
        "sender_full_name": "theduke",
        "timestamp": 1664044676
    },
    {
        "content": "<p>I don't know what Koka does there, but I'm quite sure it doesn't succeed <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 300571184,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1664044694
    },
    {
        "content": "<p>so <code>List.concat</code> can fail, same with string concatenation</p>",
        "id": 300571240,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1664044732
    },
    {
        "content": "<p>also any language with recursive algebraic data types can have that same failure scenario, so it's not like you could even ban certain stdlib operations to rule it out - you'd have to disallow recursive sum types altogether</p>",
        "id": 300571368,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1664044803
    },
    {
        "content": "<p>I'd say abilities work but have seen very minimal battle testing compared to the rest of the language, so I would definitely expect bugs just due to lack of exposure</p>",
        "id": 300571489,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1664044877
    },
    {
        "content": "<p>these are great questions btw! I've thought a lot about them but haven't written them down... maybe worth a FAQ entry</p>",
        "id": 300571814,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1664045077
    },
    {
        "content": "<p>If you frame it that way, pretty much every operation can fail, because in a functional language chances are it might need to allocate.</p>\n<p>But yeah I do get you need to make a tradeoff between usability and totality.</p>\n<p>I'd actually love an effect based language that has effects for pretty much everything that can fail (and is under the control of the language, not the OS), but allows just globally ignoring a set of effects, depending on how high-level you want your code to be.<br>\nBut I probably wouldn't want to see the compile times...</p>",
        "id": 300571878,
        "sender_full_name": "theduke",
        "timestamp": 1664045127
    },
    {
        "content": "<p>The other thing zig does is give explicit wrapping operators so you choose the behaviour and then it never panics.</p>",
        "id": 300589936,
        "sender_full_name": "Arya Elfren",
        "timestamp": 1664059459
    },
    {
        "content": "<p>yeah we could always have an operator like <code>+?</code> (for example) for <code>Num.addChecked</code>  but I'm not sure the extra benefit there is worth the cost</p>",
        "id": 300590100,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1664059629
    },
    {
        "content": "<p>like Rust has <code>add_checked</code> and I just use that when I want addition with overflow checking, and I haven't hoped Rust would add an operator for it...even though Rust's threshold for adding new sugar for existing functionality is massively lower than Roc's</p>",
        "id": 300590235,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1664059742
    }
]