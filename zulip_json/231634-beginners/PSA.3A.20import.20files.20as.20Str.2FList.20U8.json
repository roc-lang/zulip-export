[
    {
        "content": "<p>Hi all, I recently added a new feature that I think may be useful to others. It enables importing files directly as a <code>Str</code> or a <code>List U8</code>.</p>\n<p>There is a silly example in the repo of <a href=\"https://github.com/roc-lang/roc/blob/65ebeab30368e1270c628d9538b82e10874d5f73/examples/cli/ingested-file.roc\">a roc file that prints it's own source code</a>. There is also an example of <a href=\"https://github.com/roc-lang/roc/blob/65ebeab30368e1270c628d9538b82e10874d5f73/examples/cli/ingested-file-bytes.roc\">summing the bytes of a file</a>.</p>\n<p>The syntax is:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">imports</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">    </span><span class=\"s\">\"some-file\"</span><span class=\"w\"> </span><span class=\"nx\">as</span><span class=\"w\"> </span><span class=\"nv\">someStr</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"s\">\"some-file\"</span><span class=\"w\"> </span><span class=\"nx\">as</span><span class=\"w\"> </span><span class=\"nv\">someBytes</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"nx\">U8</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</code></pre></div>\n<p>This feature is now available in the <a href=\"https://github.com/roc-lang/roc/releases/tag/nightly\">latest nightly</a> from 2023-04-11.</p>",
        "id": 348507136,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1681229799
    },
    {
        "content": "<p>finally: a roc quine</p>",
        "id": 348521483,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1681233486
    },
    {
        "content": "<p>What happens if the file doesn't exist or there's no read permission?</p>",
        "id": 348567232,
        "sender_full_name": "Chris Duncan",
        "timestamp": 1681249689
    },
    {
        "content": "<p>A compilation error</p>",
        "id": 348567540,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1681249851
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"454654\">Ayaz Hafiz</span> <a href=\"#narrow/stream/231634-beginners/topic/PSA.3A.20import.20files.20as.20Str.2FList.20U8/near/348521483\">said</a>:</p>\n<blockquote>\n<p>finally: a roc quine</p>\n</blockquote>\n<p>April Fools idea: change the whole <a href=\"http://roc-lang.org\">roc-lang.org</a> webpage to be a pitch for how Roc is a programming language designed for speedrunning quines</p>",
        "id": 349089047,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1681387622
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> , this is awesome! <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span></p>",
        "id": 349089190,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1681387662
    },
    {
        "content": "<p>I missed the PR, but I'm curious - what happens if you annotate its type as <code>_</code> and then use it as something other than <code>Str</code> or <code>List U8</code>?</p>",
        "id": 349089627,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1681387768
    },
    {
        "content": "<p>also curious if the <code>:</code> is optional syntactically, given that <code>: _</code> is allowed <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 349089737,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1681387800
    },
    {
        "content": "<p>(side note: it's fun to come back from a 2-day conference and discover awesome new features have landed in the meantime! <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> )</p>",
        "id": 349089908,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1681387835
    },
    {
        "content": "<p><code>: _</code> just works. It is actually used in the summing bytes example linked above</p>",
        "id": 349121095,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1681394889
    },
    {
        "content": "<p>I don't think the <code>:</code> is optional. Currently, this does not really have any special parsing. It parses a string, <code> as </code>, and then a type annotation. I think a type annotation requires the <code>:</code>. I guess that could be changed to make it optional</p>",
        "id": 349121792,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1681394994
    },
    {
        "content": "<p>To Brendanâ€™s note- If you annotate as _, the inferred type would be List U8</p>",
        "id": 349140621,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1681399031
    },
    {
        "content": "<p>You are correct. I thought at one point I had it working with both, but maybe that was when the PR was broken in a different way. So, I guess, fixing other constraint bugs made it always <code>List U8</code>.</p>",
        "id": 349141585,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1681399283
    },
    {
        "content": "<p>to clarify, what I meant about the inference is: suppose I annotate it as <code>: _</code> and then use it as a <code>Dict</code> or something - do I get a type mismatch saying it can only unify to <code>Str</code> or <code>List U8</code>?</p>",
        "id": 349354378,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1681473420
    },
    {
        "content": "<p>also, I really like the idea of having the annotation syntax be optional - that's consistent with how annotations work in general, plus it means tutorials can use the feature even before they teach type annotations! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 349354893,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1681473502
    },
    {
        "content": "<p>Currently, if you annotate as <code>: _</code>, the type will be <code>List U8</code>. If you use it as any other type, that will be a type mismatch. Also, if you annotate as any other type than <code>List U8</code> or <code>Str</code>, it will be a type mismatch.</p>",
        "id": 349985307,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1681486992
    },
    {
        "content": "<p>oh interesting - so when you do <code>: _</code> it's not actually doing type inference?</p>",
        "id": 350004061,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1681491883
    },
    {
        "content": "<p>Nope. Was talking to ayaz about that. Would require more work to be done correctly. Would need a type like <code>RangedNum</code> but specific for ingested files. I initially had a version that kinda did type inference, but it would break if the type was used as <code>List a</code> where <code>a</code> is not <code>U8</code>. Currently, it just picks the first type the matches. Given any type matches <code>_</code>, <code>List U8</code> wins.</p>",
        "id": 350019215,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1681496240
    }
]