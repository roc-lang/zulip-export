[
    {
        "content": "<p>Or where could I find more info about how they work/perform?</p>",
        "id": 441950584,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717269390
    },
    {
        "content": "<p>I believe the important thing to know is that Roc will by default clone a collection when it is modified, unless the reference count is exactly 1, in which case it will mutate a collection in place. The Roc team is making the bet that the latter case will occur more often than the former. With this in mind, the List type (as I understand it) works just like a C++ vector/Rust Vec does, in that it allocates its elements contiguously on the heap instead of allocating each element separately in a linked list. The Dict and Set types are both index maps under the hood, backed by a List.</p>",
        "id": 441958096,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1717273078
    },
    {
        "content": "<p>That is a very good summary</p>",
        "id": 441965430,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717276674
    },
    {
        "content": "<p>nice one thanks - just to clarify, when you say 'clone',  you mean a full/deep copy? no fancy structural-sharing  or anything, right?</p>",
        "id": 441969241,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717278529
    },
    {
        "content": "<p>yep, deep copy.</p>",
        "id": 441969727,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717278673
    },
    {
        "content": "<p>In practice when code is written well, this will almost never happen. That said, today, there are more sharp edges than we would like.</p>",
        "id": 441969829,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717278709
    },
    {
        "content": "<p>this may be slightly off-topic, but if a web-server platform which depends on <code>tokio</code> can exist, I am wondering, can an immutable platform exist making use of something like <a href=\"https://docs.rs/im/latest/im/\">this</a> ?</p>",
        "id": 441972150,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717279464
    },
    {
        "content": "<p>ah nevermind, that's a stupid question...the platform is for side-effects</p>",
        "id": 441972220,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717279497
    },
    {
        "content": "<p>One could build an immutable data structure library in roc using tags (many immutable data structures are really just forms of trees)</p>",
        "id": 441972306,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717279536
    },
    {
        "content": "<p>So while roc doesn't have any of these today, and the standard library likely never will. Should be 100% supportable in userland</p>",
        "id": 441972511,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717279608
    },
    {
        "content": "<p>Roc is intentionally testing a hypothesis that traditional mutable data structures can be performant in an immutable language due to most data being unique if it might be modified. If the data is shared, it is likely to not be modified.</p>\n<p>This hypothesis is kinda tested by the rust borrow checker. Which is why we have reasonable faith that this should work out in practice (though maybe require some code rewriting to avoid accidental sharing of something that might be mutated)</p>",
        "id": 441972928,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717279781
    },
    {
        "content": "<p>On top of that, many immutable data structures end up having a lot of costs that add up over time due to the large amount of extra pointer chancing and fragmentation. So a few dense copies might actually be faster than using an immutable data structure.</p>",
        "id": 441973097,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717279849
    },
    {
        "content": "<p>Of course, there is a line here where at some point the number of copies ends up costing more than the cost of having an immutable data structure. Generally well written code can avoid essentially all copies. When that happens, we get significantly more perf than an immutable data structure could ever hope to accomplish.</p>",
        "id": 441973288,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717279925
    },
    {
        "content": "<p>Of course roc is young and we still have many more sharp edges. For example, we currently have some known refcounting cases that totally destroy performance.</p>",
        "id": 441973388,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717279974
    },
    {
        "content": "<p>sure, what you say is true, programs built around immutable data-structures aim mainly for correctness, rather than performance, however when you throw multi-threading into the mix the scales starts to shift.</p>",
        "id": 441973693,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717280103
    },
    {
        "content": "<p>it actually more costly to copy or even lock/unlock a mutable data-structure across many threads</p>",
        "id": 441973797,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717280157
    },
    {
        "content": "<p>anyway, I get your point - i don't want to side-track this thread</p>",
        "id": 441973931,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717280199
    },
    {
        "content": "<p>No worries side tracking is great for discussion. And yeah, multithreading can get a lot more complex. Currently Roc has not really touched that world. Anything that exist today and is multithread (like basic webserver) basically spawn N unique roc threads with no way to share or communicate.</p>",
        "id": 441974170,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717280288
    },
    {
        "content": "<p>oh i see</p>",
        "id": 441974260,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717280322
    },
    {
        "content": "<p>well if you like discussion, I personally am 100% sold on immutability...of course, i do understand the performance cost, but I value the benefits so much more...and by the way, opportunistic mutation, can still be available.</p>",
        "id": 441974695,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717280479
    },
    {
        "content": "<p>in fact with immutable data the opportunity for opportunistic mutation is much greater :)</p>",
        "id": 441974905,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717280555
    },
    {
        "content": "<p>I'm curious the use case for a shared across threads immutable data structures. As in, if it is truly immutable data, then it really doesn't matter how it is stored. It is read only. If it needs global mutation that will be visible to all threads, I don't think immutable data structures allow for that. I guess you could modify then data structure in one thread and the message the updated data structure to all other threads? (that sounds like a big synchronization problem)</p>\n<p>Generally speaking, I don't see many use cases where you have a global structure that every thread will have their own modified version of.</p>",
        "id": 441975227,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717280760
    },
    {
        "content": "<p>immutable data is and stays immutable forever - 'changing' them produces a new value, so it doesn't matter which function or  thread you're in. You received an immutable vector as a param? You can be confident that it's not going to change under your feet...</p>",
        "id": 441975592,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717280947
    },
    {
        "content": "<p>Yes, they are additive.</p>",
        "id": 441975720,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717281013
    },
    {
        "content": "<p>now, if the opportunistic mutation bit confuses you, have a look at <a href=\"https://docs.rs/im/latest/im/#in-place-mutation\">this</a></p>",
        "id": 441975726,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717281015
    },
    {
        "content": "<p>basically, you can create a 'transient' version of them in constant time, mutate it to death, and 'commit' it</p>",
        "id": 441975788,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717281058
    },
    {
        "content": "<p>I guess the general update structure would be that you are passed in the most up to date version of the immutable data structure. Then you can return a list of modifications and they will be synchronously applied to the data structure such then other threads can later see the change?</p>",
        "id": 441975825,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717281082
    },
    {
        "content": "<p>no no no</p>",
        "id": 441975858,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717281103
    },
    {
        "content": "<p>there are no updates that other threads can see</p>",
        "id": 441975891,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717281121
    },
    {
        "content": "<p>in fact there is no update-in-place</p>",
        "id": 441975964,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717281136
    },
    {
        "content": "<p>i see what confuses you</p>",
        "id": 441975989,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717281152
    },
    {
        "content": "<p>I know that none of it is inplace. Just trying to understand how this fixes shared information across threads</p>",
        "id": 441976014,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717281166
    },
    {
        "content": "<p>Generally speaking, there aren't many problems where I want every thread to have their own unique view of data. Generally at some point, I want the global view to be updated</p>",
        "id": 441976079,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717281215
    },
    {
        "content": "<p>sharing information across threads is done by modelling time</p>",
        "id": 441976093,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717281232
    },
    {
        "content": "<p>and time is best modelled by immutable data</p>",
        "id": 441976150,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717281250
    },
    {
        "content": "<p>so that you can take stable snapshots</p>",
        "id": 441976163,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717281260
    },
    {
        "content": "<p>this is the most concise sentence i can give you. For more information if that topic intrigues you, you really want to look at clojure's reference types</p>",
        "id": 441976232,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717281326
    },
    {
        "content": "<p>these are constructs that model time</p>",
        "id": 441976265,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717281350
    },
    {
        "content": "<p>Can we get concrete? What is a simple example of a threaded use case that benefits from immutable data structures?</p>",
        "id": 441976359,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717281372
    },
    {
        "content": "<p>there are 4 of them with different semantics - e.g. synchronous, asynchronous, transactional etc</p>",
        "id": 441976369,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717281380
    },
    {
        "content": "<p>the benefit is that you don't mutate the data-structure - you mutate the 'box' around it, and that is managed and comes with specific semantics and guarrantees that it couldn't make if the data was mutable</p>",
        "id": 441976662,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717281552
    },
    {
        "content": "<p>this may not sound like much but it's actually profound, because as I said, it lets you model time, which is super important in a multi-threads situation</p>",
        "id": 441976799,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717281624
    },
    {
        "content": "<p>there is no time in a pure function but there is time in real programs</p>",
        "id": 441976892,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717281673
    },
    {
        "content": "<p>Ah, looking at <code>clojure.core/ref</code> in closure and <code>clojure.core/dosync</code> is making it clearer how closure decides to model things.</p>\n<p>If I had a shared cache that was an immutable data structure represented as a ref. To read from the cache would be to deref and just directly use the data structure. To update the cache would be to additively change the data structure (because it is an immutable data structure that does not change inplace), then update all pointers to the data structure to the pointer to the new version. This can be done in an atomic commit to avoid other forms of thread synchronization.</p>",
        "id": 441977287,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717281847
    },
    {
        "content": "<p>let me give you the simplest possible example - i will presume total unfamiliarity with clojure</p>",
        "id": 441977291,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717281848
    },
    {
        "content": "<p>exactly! you picked the hardest one though which is rarely used</p>",
        "id": 441977351,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717281886
    },
    {
        "content": "<p>the simplest one is the <code>atom</code>, which the standard way of achieving mutation</p>",
        "id": 441977420,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717281920
    },
    {
        "content": "<p>atom comes with two guarrantees - atomicity + synchronicity (i.e. blocking)</p>",
        "id": 441977490,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717281959
    },
    {
        "content": "<p>Are atoms limited to basic values like numbers or do they allow for more complex types?</p>",
        "id": 441977550,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717281969
    },
    {
        "content": "<p>anything immutable goes</p>",
        "id": 441977572,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717281980
    },
    {
        "content": "<p>ok</p>",
        "id": 441977588,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717281985
    },
    {
        "content": "<p>interesting</p>",
        "id": 441977590,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717281987
    },
    {
        "content": "<p>hasmaps, vectors etc</p>",
        "id": 441977601,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717281990
    },
    {
        "content": "<p>deeply nested whatever</p>",
        "id": 441977624,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717282000
    },
    {
        "content": "<p>they cost nothing to comapre</p>",
        "id": 441977643,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717282012
    },
    {
        "content": "<p>in clojure, you really have to go out of your way to mutate something w/o some sort of synchronisation</p>",
        "id": 441977742,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717282063
    },
    {
        "content": "<p>there is a way, but is more like the <code>Unsafe</code> in java</p>",
        "id": 441977783,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717282078
    },
    {
        "content": "<p>highly discouraged</p>",
        "id": 441977854,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717282096
    },
    {
        "content": "<p>Yeah, interesting that the closure swap for atoms takes a function.</p>",
        "id": 441977881,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717282107
    },
    {
        "content": "<p>but guess what? very rarely you end up needing these types</p>",
        "id": 441977966,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717282140
    },
    {
        "content": "<p>what else could it take? a function of the current value</p>",
        "id": 441978025,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717282162
    },
    {
        "content": "<p>But I guess makes sense cause it can linearize calls for synchronoziation and avoid race conditions.</p>",
        "id": 441978051,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717282173
    },
    {
        "content": "<p>exactly</p>",
        "id": 441978179,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717282216
    },
    {
        "content": "<p>I think most of this could be represented in roc with a immutable data structure library built on tags. The only special part is that the atom/ref functions would be required to be implemented in the platform.</p>",
        "id": 441978259,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717282258
    },
    {
        "content": "<p>So I think roc could have both.</p>",
        "id": 441978321,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717282290
    },
    {
        "content": "<p>interesting</p>",
        "id": 441978345,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717282302
    },
    {
        "content": "<p>just to clarify what i meant by modelling time</p>",
        "id": 441978531,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717282392
    },
    {
        "content": "<p>the future is a function of the past, right?</p>",
        "id": 441978550,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717282408
    },
    {
        "content": "<p>so you will notice that all reference types in clojure have some sort of update function associated with them, but they all look the same same in terms of function-signature</p>",
        "id": 441978652,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717282454
    },
    {
        "content": "<p>they all take a function which accepts the current value (the past), and will produce the next value (the future)</p>",
        "id": 441978720,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717282495
    },
    {
        "content": "<p>they all have different semantics with respect to their operation, but they all obey the epochal time model i mentioned above</p>",
        "id": 441978863,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717282566
    },
    {
        "content": "<p>once you have a time model, multi-threading is a breeze</p>",
        "id": 441978926,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717282609
    },
    {
        "content": "<p>hope that makes sense</p>",
        "id": 441979046,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717282680
    },
    {
        "content": "<p>by the way, the stuff i said about transients earlier, don't apply to multi-threading at all! Mutating a transient value should only ever be done in one thread and should almost always be scoped  - i.e. not leak it for further mutation upstream, although  exceptions can exist.</p>",
        "id": 441979639,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717282974
    },
    {
        "content": "<p>Yeah totally does.</p>\n<p>Looking some at the underlying implementations, two main costs come to mind:</p>\n<ol>\n<li>lots of pointers and potentially scatter memory that mean more cache misses (not friendly to the cpu, but smarter immutable data structures do work to be at least slightly denser).</li>\n<li>built on top of compare and swap atomics. In the bad case of atomic swap, the update function could be stuck running on repeat wasting a ton of extra cpu. If for example, 4 threads all try to swap the atomic at the same time with an expensive swap function, you will get a ton of wasted cpu. All 4 threads run the expensive function. only 1 succeeds and updates the underlying atomic references. Then the 3 remaining threads repeat. Then the remaining 2. Then the single final thread. So in the really pessimistic case instead of doing 4 updates worth of work, you have done 4 + 3 + 2 +1 = 10 updates worth of work.</li>\n</ol>",
        "id": 441980136,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717283184
    },
    {
        "content": "<p>yes indeed lock contention is always the problem isn't it? :) that's exactly why modelling time in a pluggable fashion is so important</p>",
        "id": 441980554,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717283391
    },
    {
        "content": "<p>compare the difference between <code>atom</code> VS <code>agent</code> - different approaches: cas VS queueing</p>",
        "id": 441980684,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717283438
    },
    {
        "content": "<p>This isn't technically lock contention, but yeah, just noting the edge cases.</p>",
        "id": 441980737,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717283462
    },
    {
        "content": "<p>and general tradeoffs</p>",
        "id": 441980764,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717283474
    },
    {
        "content": "<p>for sure - anything 'managed' comes with costs</p>",
        "id": 441980847,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717283511
    },
    {
        "content": "<p>but i've personally come to conclude that 'data' and 'time' and pretty important aspects of programs</p>",
        "id": 441980991,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717283559
    },
    {
        "content": "<p>Yep. I think roc's current setup is likely to match agent's better. We already live in what feels like a fully async world.</p>",
        "id": 441981007,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717283566
    },
    {
        "content": "<p>For example in a webserver, if you want a global cache. That may work completely outside of roc only in the platform. Can be implemented in anyway the platform feels is best. Async with queuing, read write mutex, etc.</p>",
        "id": 441981220,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717283658
    },
    {
        "content": "<p>cool</p>",
        "id": 441981307,
        "sender_full_name": "Dimitrios Piliouras",
        "timestamp": 1717283695
    },
    {
        "content": "<p>So I think for a solid set of problems, the platform can define this api in a way that the roc author doesn't have to think how it is implemented. The platform author decides the transaction model.</p>",
        "id": 441981316,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717283700
    },
    {
        "content": "<p>and underlying way of implementation.</p>",
        "id": 441981336,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717283707
    },
    {
        "content": "<p>Definitely means that there would be less consistency from platform to platform though. So will be really interesting to see how this matures as roc grows.</p>",
        "id": 441981430,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717283748
    }
]