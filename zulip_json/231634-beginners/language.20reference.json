[
    {
        "content": "<p>Hi y'all. Is there a language reference for Roc? I am doing a PhD in programming language theory and I might have a go at formalising Roc's type system.</p>",
        "id": 300405459,
        "sender_full_name": "Vilem",
        "timestamp": 1663950463
    },
    {
        "content": "<p>there is not currently, but I'd be happy to work with you on that!</p>",
        "id": 300440492,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1663962801
    },
    {
        "content": "<p>Wow, that sounds great! Echoing what Richard said.</p>",
        "id": 300451307,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1663967381
    },
    {
        "content": "<p>We have some open questions around the type system (esp. with regard to type classes interacting with other type-level features in Roc) that we're working on trying to strongly define, if you have any interest in that as well.</p>",
        "id": 300451324,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1663967387
    },
    {
        "content": "<p>First of all, massive disclaimer: I will _try_â€“I'm still learning to wrangle Coq. Also, I won't be proving any properties about the _implementation_ of the type system, but rather I will be writing a _specification_ and proving metatheoretic properties of the specification.</p>\n<p>Based on my current understanding, from watching the presentations linked on the website, Roc features an HM type system with:</p>\n<ol>\n<li>base types</li>\n<li>open and closed anonymous records </li>\n<li>anonymous, disjoint sums</li>\n<li>tags/labels</li>\n<li>effect modalities</li>\n<li>some level of ad-hoc polymorphism (i.e. type class support)</li>\n</ol>\n<p>I probably got some of this wrong and perhaps there are missing bits; please let me know if that is the case.</p>\n<p>I confess that I haven't built the Roc compiler yet, so that might be a good starting point for getting more of an intuition for the language, as the online playground didn't work for me. </p>\n<p>My current action plan is to get a proof of progress and preservation (\"well typed programs don't go wrong\") with features 1 thru 4 from the list above. If I get that far, then we can talk ;)</p>",
        "id": 300576869,
        "sender_full_name": "Vilem",
        "timestamp": 1664048359
    },
    {
        "content": "<p>Yeah, that's correct! </p>\n<blockquote>\n<p>anonymous, disjoint sums<br>\ntags/labels</p>\n</blockquote>\n<p>These are the same thing in Roc, Roc's disjoint sums are very similar to polymorphic variants a-la OCaml.<br>\nThere are other type-level features that are not in this list (i.e. some tricks to express defunctionalization at the type-level), but that can mostly be thought of as orthogonal to the type system in general.</p>",
        "id": 300578811,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1664049775
    },
    {
        "content": "<p>What are effect modalities?</p>",
        "id": 300578817,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1664049780
    },
    {
        "content": "<blockquote>\n<p>as the online playground didn't work for me.</p>\n</blockquote>\n<p>Could you please let us know what problems you ran into, by filing an issue?</p>",
        "id": 300578849,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1664049806
    },
    {
        "content": "<p>there are also nightly releases of the compiler for various operating systems, so you should be able to download one and try it out without having to build from source!</p>",
        "id": 300579707,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1664050486
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"454654\">Ayaz Hafiz</span> <a href=\"#narrow/stream/231634-beginners/topic/language.20reference/near/300578817\">said</a>:</p>\n<blockquote>\n<p>What are effect modalities?</p>\n</blockquote>\n<p>The type-level constructors used in effect tracking. I'm guessing this is something like an indexed m***d?</p>",
        "id": 300635453,
        "sender_full_name": "Vilem",
        "timestamp": 1664103363
    },
    {
        "content": "<p>I see. yeah, it's like an indexed monad, but it falls out entirely from the behavior of Roc's tag unions. There are some examples in <a href=\"https://github.com/roc-lang/roc/blob/main/examples/interactive/cli-platform/File.roc\">https://github.com/roc-lang/roc/blob/main/examples/interactive/cli-platform/File.roc</a>; in short if you have two effects <code>read : {} -&gt; Task Str [Read]</code> and <code>write : Str -&gt; Task {} [Write]</code> (here you can pretend <code>Task</code> is any monad) and you compose them, you send up with <code>{} -&gt; Task {} [Read, Write]</code>.</p>",
        "id": 300665904,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1664121573
    },
    {
        "content": "<p>you're missing some type variables there. it should be <code>read : {} -&gt; Task Str [Read]*</code>, so that the \"effect row\" can grow to include more things</p>",
        "id": 300666084,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1664121674
    },
    {
        "content": "<p>Is <code>[Read, Write]</code> a set?</p>",
        "id": 300668408,
        "sender_full_name": "Vilem",
        "timestamp": 1664123075
    },
    {
        "content": "<p>effectively</p>",
        "id": 300668501,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1664123137
    }
]