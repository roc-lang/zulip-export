[
    {
        "content": "<p>Hi all!</p>\n<p>Very new to roc and this issue may not even be Roc related? If not, I'm very puzzled where the missing text is coming from if not stdout. Here is the symptom I'm seeing:</p>\n<div class=\"codehilite\"><pre><span></span><code> $ roc\nec425a0 Ignore compiler artifact\n $ git log --oneline --no-color\nec425a0 (HEAD -&gt; main) Ignore compiler artifact\n $ git log --oneline --no-color 2&gt;/dev/null\nec425a0 (HEAD -&gt; main) Ignore compiler artifact\n</code></pre></div>\n<p>For some reason my Roc output is missing the branch information section.<br>\nHere is my code to execute git log that follows the very nice example in the basic cli platform:</p>\n<div class=\"codehilite\"><pre><span></span><code>gitLog =\n  (_status, stdout, _stderr) &lt;-\n    Cmd.new &quot;git&quot;\n    |&gt; Cmd.args [\n      &quot;log&quot;,\n      &quot;--oneline&quot;,\n      &quot;--no-color&quot;,\n    ]\n    |&gt; Cmd.output\n    |&gt; Task.map \\output -&gt; (Success, output.stdout, output.stderr)\n    |&gt; Task.onErr \\(output, err) -&gt;\n      when err is\n        ExitCode code -&gt; Task.ok (NonZeroExit code, output.stdout, output.stderr)\n        KilledBySignal -&gt; Task.ok (Killed, output.stdout, output.stderr)\n        IOError error -&gt; Task.ok (IOError error, output.stdout, output.stderr)\n    |&gt; Task.await\n\n  value = Str.fromUtf8 stdout |&gt; Result.withDefault &quot;Failed to read buffer&quot;\n  Stdout.write value\n</code></pre></div>\n<p>I appreciate anyone that takes  the time to look into this with me!</p>",
        "id": 416656964,
        "sender_full_name": "Jordan Grant",
        "timestamp": 1705615405
    },
    {
        "content": "<p>So is the issue that when you run this with roc the <code> (HEAD -&gt; main) </code> is missing?</p>",
        "id": 416658299,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1705616024
    },
    {
        "content": "<p>Yep! Sorry I could have been more clear. That text is missing and its definitely produced by the same command when I call it in my terminal</p>",
        "id": 416658417,
        "sender_full_name": "Jordan Grant",
        "timestamp": 1705616070
    },
    {
        "content": "<p>Can you run like <code>cargo init bin</code> and copy paste this in</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">io</span>::<span class=\"p\">{</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Write</span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">process</span>::<span class=\"n\">Command</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Command</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">\"git\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">args</span><span class=\"p\">([</span><span class=\"s\">\"log\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"--oneline\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"--no-color\"</span><span class=\"p\">])</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">output</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"failed to execute process\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"status: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">output</span><span class=\"p\">.</span><span class=\"n\">status</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">io</span>::<span class=\"n\">stdout</span><span class=\"p\">().</span><span class=\"n\">write_all</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">output</span><span class=\"p\">.</span><span class=\"n\">stdout</span><span class=\"p\">[</span><span class=\"o\">..</span><span class=\"p\">]).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">io</span>::<span class=\"n\">stderr</span><span class=\"p\">().</span><span class=\"n\">write_all</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">output</span><span class=\"p\">.</span><span class=\"n\">stderr</span><span class=\"p\">[</span><span class=\"o\">..</span><span class=\"p\">]).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>and see what the output when you run <code>cargo run</code> is?</p>",
        "id": 416658736,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1705616232
    },
    {
        "content": "<p>Yep! I got the same output as my Roc application</p>\n<p>Edit to help anyone just showing up<br>\nOutput:</p>\n<div class=\"codehilite\"><pre><span></span><code>   Compiling roc-git-browser v0.1.0 (/home/jordan/personal/projects/roc/roc-git-browser)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.30s\n     Running `target/debug/roc-git-browser`\nstatus: exit status: 0\nec425a0 Ignore compiler artifact\n</code></pre></div>\n<p>normal git log output:</p>\n<div class=\"codehilite\"><pre><span></span><code> $ git log --oneline --no-color 2&gt;/dev/null\nec425a0 (HEAD -&gt; main) Ignore compiler artifact\n</code></pre></div>",
        "id": 416659075,
        "sender_full_name": "Jordan Grant",
        "timestamp": 1705616403
    },
    {
        "content": "<p>I've been scratching my head on this one, and I don't have any good ideas from here. I guess it's something to do with how rust executes a command that is different to the shell, or maybe the program <code>git</code> behaves differently somehow.</p>",
        "id": 416659503,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1705616618
    },
    {
        "content": "<p>yep! that is the only thing I could think of as well. I ran it as root just to see if I had something weird in git config but no dice</p>\n<p>Just tested with a simple ruby script as well and it was also missing the info</p>\n<div class=\"codehilite\"><pre><span></span><code>puts `git log --oneline --no-color`\n</code></pre></div>\n<p>So this is definitely not a Roc thing. I will continue my search but thank you for checking it out!</p>",
        "id": 416659702,
        "sender_full_name": "Jordan Grant",
        "timestamp": 1705616710
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"681967\">Jordan Grant</span> has marked this topic as resolved.</p>",
        "id": 416660818,
        "sender_full_name": "Notification Bot",
        "timestamp": 1705617288
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> <br>\nOh! I found the answer and will post if for posterity. Git must use the <code>--decorate</code> flag by default when executed by a shell process?</p>\n<p>Just add <code>--decorate</code> as an option to the above code and you get the expected result</p>",
        "id": 416661331,
        "sender_full_name": "Jordan Grant",
        "timestamp": 1705617508
    }
]