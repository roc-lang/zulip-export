[
    {
        "content": "<p>What is the Roc idiomatic way of encoding Dicts to json? </p>\n<p>I'm trying to solve the rest-api excercise on Exercism and my first try was to just use the Encoding ability of the platform to encode a Dict as JSON. </p>\n<p>Getting this error though:</p>\n<div class=\"codehilite\"><pre><span></span><code>I can&#39;t generate an implementation of the Encoding ability for\n\n    List User\n\nIn particular, an implementation for\n\n    Dict Str F64\n\ncannot be generated.\n</code></pre></div>\n<p>My next idea was to use some json encoding primitives like in Elm but this does not seem to be an idiomatic way to do it in Roc? I could not find any Elm like encoding functions anyway.</p>\n<p>Is string concatenation really my only option to build json objects with dynamic field names in Roc right now?</p>",
        "id": 476148217,
        "sender_full_name": "Niklas Konstenius",
        "timestamp": 1728570466
    },
    {
        "content": "<p>Encode and Decode before Dict and Set where really proper types. They need to be expanded</p>",
        "id": 476164103,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728574849
    },
    {
        "content": "<p>We actually have a proposal and partial implementation of a much more flexible implementation. Sadly, I think it is currently stuck in some lambaset bugs.</p>",
        "id": 476164417,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728574945
    },
    {
        "content": "<p>That said, the current version of encode and decode definitely could be expanded to support dict and set directly.</p>",
        "id": 476164520,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728574974
    },
    {
        "content": "<p>New encode and decode idea discussed in <a class=\"stream-topic\" data-stream-id=\"304641\" href=\"/#narrow/stream/304641-ideas/topic/Revamped.20Encode.20and.20Decode\">#ideas &gt; Revamped Encode and Decode</a>.</p>\n<p>I should probably circle back to the partial implementation to see if I can push it farther</p>",
        "id": 476164945,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728575111
    },
    {
        "content": "<p>Thanks for the link to the Revamped Encode and Decode discusson. Interesting read indeed, hope you will manage to finish it. </p>\n<p>Do you know if there is any other (possibly Elm style) Roc json-libraries in the wild? I really like the simplicity of Elms approach to json encoding / decoding and wouldn't mind using the same approach in Roc. </p>\n<p>The Roc Encode / Decode stuff is still a bit magical to me. :-)</p>",
        "id": 476169192,
        "sender_full_name": "Niklas Konstenius",
        "timestamp": 1728576319
    },
    {
        "content": "<p>I don't know if any other library for json</p>",
        "id": 476172746,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728577163
    },
    {
        "content": "<p>it would definitely be possible to port elm-json-decode-pipeline to Roc!</p>",
        "id": 476173492,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1728577323
    },
    {
        "content": "<p>you could even use record builder syntax to make it even nicer</p>",
        "id": 476173554,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1728577345
    },
    {
        "content": "<p>Cool, I need to read up on that record builder syntax now. :-)</p>",
        "id": 476185115,
        "sender_full_name": "Niklas Konstenius",
        "timestamp": 1728581367
    },
    {
        "content": "<p>That one is in the tutorial</p>",
        "id": 476193964,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1728584360
    },
    {
        "content": "<p>Feel free to ask anyone about it, but I in particular have good experience building interfaces with them</p>",
        "id": 476194043,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1728584391
    },
    {
        "content": "<p>I think this would be very useful in code generated from an API contract. Like type-safe GraphQL or OpenAPI clients. You don’t want those to use the derived Encode/Decode abilities.</p>",
        "id": 476288143,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1728618353
    },
    {
        "content": "<p>Couldn't GraphQL just generate the correct records and then use decode and encode?</p>",
        "id": 476302027,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728624651
    },
    {
        "content": "<p>From my perspective I don't really think that decoding JSON =&gt; Record  is very useful except for very simple cases. Optimizing for simple decoding of json into record structures  only means (if I understand it correctly) that I need to have a \"simple\" record typ that represents the structure of the json document 1-to-1 and then <em>parse</em> this json-record  into my domain types.  For this more advanced case its just much simpler to write a elm-style decoder from json directly to my domain model imho. </p>\n<p>There could of course be something I'm missing in this Encode/Decode architecture.  I must confess that I don't have all the concepts totally clear in my head right now. :)</p>",
        "id": 476311741,
        "sender_full_name": "Niklas Konstenius",
        "timestamp": 1728628337
    },
    {
        "content": "<p>I personally struggled a bit with elm JSON decoders in terms of the learning curve. </p>\n<p>Definitely powerful but a bit of a mind bending experience for me.</p>",
        "id": 476316740,
        "sender_full_name": "Nathan Kramer",
        "timestamp": 1728629794
    },
    {
        "content": "<p>I struggled with json decoders in Elm too. :-)</p>\n<p>I <em>do</em> think that json =&gt; record is very good for beginners and simple usecases. But the moment you want something that is not easily represented 1-to-1 as a record it starts to get more complicated to <em>not</em> use elm style decoders imho. </p>\n<p>A good example is sum-types  and how the \"tag\" are represented in the json structure.</p>",
        "id": 476322685,
        "sender_full_name": "Niklas Konstenius",
        "timestamp": 1728631378
    },
    {
        "content": "<p>Yeah, exactly. I think this applies primarily to clients, servers are more likely to match because they own the structure.</p>",
        "id": 476362698,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1728644432
    },
    {
        "content": "<p>When you’re building a client, it’s quite common that (even if it’s within the same company) the structure defined in the API is inconvenient for your use case. Things might be too nested, too general, have confusing names, or abuse primitives.</p>",
        "id": 476363863,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1728644867
    },
    {
        "content": "<p>With<code>dillonkearns/elm-graphql</code>, I can deal with all of that complexity at the border right where I define the query selection.</p>",
        "id": 476364452,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1728645114
    },
    {
        "content": "<p>APIs become messy over time as they evolve, but a client is often relying on a subset or a specific point in time where certain properties hold true. This is the mismatch that warrants this approach.</p>",
        "id": 476365379,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1728645471
    },
    {
        "content": "<p>Another thing this applies to is database schemas, which is why I designed the <code>roc-pg</code>’s selection builder after <code>elm-graphql</code>’s. You can rename columns, map them, or even change the structure at the query.</p>",
        "id": 476365920,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1728645664
    },
    {
        "content": "<p>All that said, that applies at a certain level of complexity and depth. There’s so many clients that only need to work with a few fields in mostly flat structures, and the derived abilities would work great <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 476368035,
        "sender_full_name": "Agus Zubiaga",
        "timestamp": 1728646433
    },
    {
        "content": "<p>I'd be curious which of these critiques apply to serde from rust. It is used very comprehensively in the rust ecosystem. I think people rarely reach for something else. (Graphql maybe being special due to flexible queries). But for most things, I think it full covers everything. So encode and decode should theoretically as well.</p>",
        "id": 476410016,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728660037
    },
    {
        "content": "<p>The jackson library is very popular in Java and it is similar in that your json is serialized and deserialized based on the fields on your objects so usually the structure of your json and objects is very closely related. That being said, there is a lot of customization you can do that makes it more flexible. The kind I end up using most is field level customizations like specifying how a date should be formatted.</p>",
        "id": 476419611,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1728663217
    },
    {
        "content": "<p>I would argue that the way json serialization are done in Java (with for example the Jackson library) more has to do with tradition and Javas background in OOP than it has to do with being  a \"good\" way. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> </p>\n<p>I have seen (and produced myself) lots of Java code with tons and tons of annotations polluting the carefully crafted domain objects just to configure how the objects properties should serialize to json. The rationale for all this noise  is that its \"just configuration\" and somehow configuration is always better than code...</p>\n<p>Imho, simple Elm-style transformation functions that maps the domain objects to it's json representation often is way more compact, more flexible and easier to read than all the  annotation mess and I really wish these functional approaches would find its way into Java land. Tradition is hard to change though...</p>\n<p>Since Roc aims to be a functional language I really hope Roc will take the more functional approach, or at least have good support for both approaches.</p>",
        "id": 476426252,
        "sender_full_name": "Niklas Konstenius",
        "timestamp": 1728665816
    },
    {
        "content": "<p>I'm sure both approaches can work and will be supported. I think with decode instead of annotations it would be specified in the types. Occasionally with custom abilities impls.</p>\n<p>Like you might have a <code>Nullable I64</code> json field that allows for the field to be missing.</p>\n<p>I'm mostly just curious where decode will fall short and why. Is it personal preference or something more fundamental. I probably should look more into where serde falls short cause decode is based on serde.</p>",
        "id": 476431052,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728667766
    },
    {
        "content": "<p>I don't think either approach is more or less functional than the other <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 476434807,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1728669382
    },
    {
        "content": "<p>one is more flexible but also more repetitive in common cases</p>",
        "id": 476434885,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1728669424
    },
    {
        "content": "<p>that's the main tradeoff I see in terms of usage</p>",
        "id": 476434948,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1728669451
    },
    {
        "content": "<p>there's also a major learning curve gap between them for common cases though</p>",
        "id": 476434999,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1728669471
    },
    {
        "content": "<blockquote>\n<p>I'm mostly just curious where decode will fall short and why. Is it personal preference or something more fundamental.</p>\n</blockquote>\n<p>For me it's a personal preference of wanting to have a clear separation of the domain model and it's representation as json. That's why I don't usually find generic json =&gt; record mappings (and the other way around) that useful. In Java that means I often end up with a set of simple classes representing the wanted json-structure (which is serialized/deserialized using jackson or similar) and then a set of transformation functions to and from the domain-model.</p>\n<p>Since the json-model is just something thats needed by Jackson its just boilerplate and I would rather use an Elm style  decoder/encoder pattern to do the mapping to/from json directly. For me this is a way more ergonomic / flexible pattern than the traditional style using annotations and reflection through jackson. </p>\n<p>But I do understand that for simple usecases and beginners this may be a big hurdle.</p>",
        "id": 476438192,
        "sender_full_name": "Niklas Konstenius",
        "timestamp": 1728670809
    },
    {
        "content": "<blockquote>\n<p>Like you might have a <code>Nullable I64</code> json field that allows for the field to be missing.</p>\n</blockquote>\n<p>This is actually a good example of what I DON'T want : smile:</p>\n<p>I do not want my domain types be polluted by stuff that only makes sense in the context of how it´s represented as json.</p>",
        "id": 476445112,
        "sender_full_name": "Niklas Konstenius",
        "timestamp": 1728674051
    },
    {
        "content": "<p>Fair enough. I think the standard for more complex inputs and something like serde is to represent the input exactly, map it into the happy land of a typed language with all the worts like <code>Nullable</code> (this guarantees it is fully represented and subsequent logic handles all cases), map it to a nice struct for domain use and without worts.</p>",
        "id": 476452814,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728677810
    },
    {
        "content": "<p>So you still have a domain type and logic. It is just split into two parts.</p>",
        "id": 476452870,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728677846
    },
    {
        "content": "<p>I've been thinking a bit and realised that the only thing I really need is a way to Decode / Encode json-text into a general ADT  like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>Json : [\n    True,\n    False,\n    Null,\n    Number F64,\n    String Str,\n    Array (List Json),\n    Object (List (Str, Json)),\n]\n</code></pre></div>\n<p>Do you think this is something that could be achieved using the Roc Decode/Encode functions and the existing Json library? Or maybe something as general as this is out of the scope for the Decode/Encode feature?</p>",
        "id": 476535436,
        "sender_full_name": "Niklas Konstenius",
        "timestamp": 1728750255
    },
    {
        "content": "<p>With a custom implementation of the ability, that should be doable. Then you could encode/decode any json.</p>",
        "id": 476537818,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728752453
    },
    {
        "content": "<p>That said, may be faster in many cases to lazily decode json. That way you only load the parts of the message you care about. That would not be possible with encode/decode.</p>",
        "id": 476537931,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728752548
    },
    {
        "content": "<p>Not sure about what you mean by <em>lazy</em> but being able to just extract specific parts of a json-document is really valuable and something I do a lot.  I have not realised that this could be a problem with Decode though.</p>\n<p>Do you mean that the record structure must match the json structure <em>exactly</em>  (like all fields must be included) to be able to decode it?</p>",
        "id": 476538520,
        "sender_full_name": "Niklas Konstenius",
        "timestamp": 1728753091
    },
    {
        "content": "<p>What I mean is Decode will parse the entire json document into a roc record. If the document is 100MB and you want to access 1 specific field, that is a huge waste of time parsing the entire document.</p>",
        "id": 476538736,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728753267
    },
    {
        "content": "<p>A lazy parser could do the minimal work to grab the one field. Then if you need a second field, it would again do minimal work to grab the second field.</p>\n<p>Really depends on the use case though. If you are always gonna access most fields, this won't matter.</p>",
        "id": 476538797,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728753334
    },
    {
        "content": "<p>In tag terms, it might represent json as:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">Json</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">    </span><span class=\"kt\">True</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"kt\">False</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"kt\">Null</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"kt\">Number</span><span class=\"w\"> </span><span class=\"kt\">F64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"kt\">String</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"kt\">Array</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Json</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"kt\">Object</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Json</span><span class=\"p\">)),</span>\n<span class=\"w\">    </span><span class=\"kt\">Lazy</span><span class=\"w\"> </span><span class=\"p\">({}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Json</span><span class=\"p\">),</span>\n<span class=\"p\">]</span>\n</code></pre></div>\n<p>This way, it can stop parsing part way instead of parsing everything.</p>",
        "id": 476538918,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728753433
    },
    {
        "content": "<p>I'm not an expert on parsing but I'm not sure how one could parse a JSON file without reading  the complete document? I mean, if just the last closing curly bracket is missing the document is invalid.</p>",
        "id": 476539150,
        "sender_full_name": "Niklas Konstenius",
        "timestamp": 1728753605
    },
    {
        "content": "<p>2 main options:</p>\n<ol>\n<li>ignore those kinds of errors and trust the main body of json is valid (or that it doesn't matter if it is invalid)</li>\n</ol>\n<p>For example, if I want to get <code>foo.bar</code>, I can still do so from this:</p>\n<div class=\"codehilite\" data-code-language=\"JSON\"><pre><span></span><code><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"nt\">\"baz\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n<span class=\"w\">  </span><span class=\"nt\">\"foo\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nt\">\"something\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"abc\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nt\">\"bar\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nt\">\"other\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">null</span><span class=\"p\">,</span>\n</code></pre></div>\n<ol start=\"2\">\n<li>do a much quicker single scan to validate the brackets and braces first.</li>\n</ol>",
        "id": 476539327,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728753810
    },
    {
        "content": "<p>Still not sure how one could do 2 without proper parsing but as I said, I'm not an parsing expert. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> </p>\n<p>To me it seems like there is an opportunity to fill a missing space in the Roc ecosystem by writing a generic JSON parser library ( json text =&gt; tag union ADT) that can be used as a building block for other libraries like for example Elm style json-decoder / encoder. </p>\n<p>I'm tempted to have a go at it to be honest. Would be a great way to learn more about Roc  as a programming language too.</p>",
        "id": 476540297,
        "sender_full_name": "Niklas Konstenius",
        "timestamp": 1728754736
    },
    {
        "content": "<blockquote>\n<p>by writing a generic JSON parser library</p>\n</blockquote>\n<p>That could definitely be useful for when decode isn't enough. That said, Decode should be able to generate the tag you shared above.</p>",
        "id": 476541067,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728755404
    },
    {
        "content": "<blockquote>\n<p>Still not sure how one could do 2 without proper parsing but as I said</p>\n</blockquote>\n<p>You have to be delaying some of the errors if you want max perf. So it is a fundamental trade off. That said, validating an entire json has correct syntax can still be faster than actual parsing the json into a nested tag</p>",
        "id": 476541399,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728755741
    },
    {
        "content": "<blockquote>\n<p>That said, Decode should be able to generate the tag you shared above.</p>\n</blockquote>\n<p>Cool, I'll have a look.  It it is not obvious for me where to start though.  <br>\nIs it the <code>DecoderFormatting</code> interface that i should implement to make this work?</p>",
        "id": 476541730,
        "sender_full_name": "Niklas Konstenius",
        "timestamp": 1728756047
    },
    {
        "content": "<p>You would implement <code>Decoding</code> then using the existing roc json decoder in combination. It would provide ways to decode all of the primitives. You need to map them to the the generic tag structure.</p>",
        "id": 476542531,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728756799
    },
    {
        "content": "<p>Ok, I think I understand how one could use the DecoderFormatter from roc -json to parse the primitives even though it feels a little bit <em>backwards</em> to use parsers  named after Roc primitives to parse json elements. But thats just a consequence of Encode/Decode being an generalised  abstraction of serialising Roc types I guess.</p>",
        "id": 476544858,
        "sender_full_name": "Niklas Konstenius",
        "timestamp": 1728759148
    },
    {
        "content": "<p>Yeah...</p>",
        "id": 476545448,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728759718
    },
    {
        "content": "<p>You also can just write a direct parser</p>",
        "id": 476545505,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728759726
    },
    {
        "content": "<p>Might be more reasonable with your goals</p>",
        "id": 476545510,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728759736
    },
    {
        "content": "<p>Yes I think I'll aim  for the simplest possible parser from text =&gt; ADT that can be used to build higher level features on as a proof of concept. </p>\n<p>I read in another thread something about implementing simdjson as a very fast built in support for JSON in the language itself.</p>\n<p>If that feature could be used to provide the  ADT  a parser built with Roc would be obsolete pretty fast :-)</p>",
        "id": 476545920,
        "sender_full_name": "Niklas Konstenius",
        "timestamp": 1728760146
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"701847\">@Monica</span> has made one of these for a talk she gave recently on Roc.</p>",
        "id": 476547227,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728761492
    },
    {
        "content": "<p>I would like to include decoding into a generic ADT JsonValue into roc-json too, I think it will be helpful.</p>",
        "id": 476547297,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728761551
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/book-of-examples/pull/68\">https://github.com/roc-lang/book-of-examples/pull/68</a></p>",
        "id": 476547415,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728761703
    },
    {
        "content": "<p>Cool, Monica seems to like elm style decoding/encoding as much as I do. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<p>As far as I could see Monicas example left out the step of parsing json text to the the Json ADT (or tag union which I understand is the correct term in Roc), right? </p>\n<p>I think that makes the case for a library (or a bultin way) of generic json parsing to ADT in Roc even stronger. Anyone that reads that example and thinks, cool I want to use that technique in may app, will otherwise inevitably be forced to first implement his own json parser. That would be really confusing for a beginner I think...</p>",
        "id": 476584005,
        "sender_full_name": "Niklas Konstenius",
        "timestamp": 1728804355
    },
    {
        "content": "<p>Another case thats a confusing for a Roc beginner like me is the RestApi exercise on Exercism. You can't solve it using Roc's bultin Encode/Decode but instead have to resort to string concatenation hacks just to serialise a json object.  This certainly is not something that makes Roc shine compared to other languages. I was really disappointed myself by this (and the reason why I started this thread in the first place).</p>",
        "id": 476585690,
        "sender_full_name": "Niklas Konstenius",
        "timestamp": 1728804956
    },
    {
        "content": "<p>But I should stop whining now and instead start implementing my json parser <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 476586211,
        "sender_full_name": "Niklas Konstenius",
        "timestamp": 1728805428
    },
    {
        "content": "<blockquote>\n<p>You can't solve it using Roc's bultin Encode/Decode</p>\n</blockquote>\n<p>Is this only due to dictionaries not encoding/decoding or are there other issues for that exercise specifically?</p>",
        "id": 476623601,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728841244
    },
    {
        "content": "<p>No, I think it's only the Dict encoding that's missing.</p>",
        "id": 476631377,
        "sender_full_name": "Niklas Konstenius",
        "timestamp": 1728848308
    },
    {
        "content": "<blockquote>\n<p>Another case thats a confusing for a Roc beginner like me is the RestApi exercise on Exercism. You can't solve it using Roc's bultin Encode/Decode but instead have to resort to string concatenation hacks just to serialise a json object. This certainly is not something that makes Roc shine compared to other languages. I was really disappointed myself by this (and the reason why I started this thread in the first place).</p>\n</blockquote>\n<p>Perhaps we should take out  this exercise until dict encoding/decoding is fixed <span class=\"user-mention\" data-user-id=\"734214\">@Aurélien Geron</span>?</p>",
        "id": 476724573,
        "sender_full_name": "Anton",
        "timestamp": 1728896598
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"544552\">Niklas Konstenius</span> <a href=\"#narrow/stream/231634-beginners/topic/Encoding.20json.20objects.20with.20dynamic.20fields.20.28Dict.20Str.20F64.29/near/476584005\">said</a>:</p>\n<blockquote>\n<p>Cool, Monica seems to like elm style decoding/encoding as much as I do. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<p>As far as I could see Monicas example left out the step of parsing json text to the the Json ADT (or tag union which I understand is the correct term in Roc), right? </p>\n<p>I think that makes the case for a library (or a bultin way) of generic json parsing to ADT in Roc even stronger. Anyone that reads that example and thinks, cool I want to use that technique in may app, will otherwise inevitably be forced to first implement his own json parser. That would be really confusing for a beginner I think...</p>\n</blockquote>\n<p>Sorry bit late to the party - yeh my example is strictly Json decoding from a tag union/ADT representation into a domain model, along with some helper functions to abstract away the error handling bits.</p>",
        "id": 476809401,
        "sender_full_name": "Monica",
        "timestamp": 1728919060
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/stream/231634-beginners/topic/Encoding.20json.20objects.20with.20dynamic.20fields.20.28Dict.20Str.20F64.29/near/476724573\">said</a>:</p>\n<blockquote>\n<p>Perhaps we should take out  this exercise until dict encoding/decoding is fixed <span class=\"user-mention silent\" data-user-id=\"734214\">Aurélien Geron</span>?</p>\n</blockquote>\n<p>The platform does not allow a track to delete an exercise, but we can <a href=\"https://exercism.org/docs/building/tracks/deprecated-exercises\">mark it as deprecated</a>: it will make no change to anyone who has already started the exercise, but it will hide it from everyone else. </p>\n<p>I see two other options:</p>\n<ol>\n<li>add a disclaimer in <code>.docs/instructions.append.md</code>, so users know what to expect and they can skip the exercise if they want to.</li>\n<li>add helper functions in the stub code <code>RestApi.roc</code></li>\n</ol>\n<p>I think I would prefer alternative 1, but it's not a strong opinion, I'm happy to go any direction here.</p>",
        "id": 476847476,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1728937288
    },
    {
        "content": "<p>we could also prioritize fixing that <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 476853302,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1728940864
    },
    {
        "content": "<p>Yeah, it would be really nice to have Dict supported. I thought someone worked on it for a bit, though I've not been able to find the old PR or branch (or remember who). I thought it was <span class=\"user-mention\" data-user-id=\"611722\">@Isaac Van Doren</span>??</p>",
        "id": 476853479,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728940994
    },
    {
        "content": "<p>Is it a big job to do? I don't have much idea in that part of the compiler</p>",
        "id": 476853617,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728941076
    },
    {
        "content": "<p>I took a stab at decoding tag unions not Dict, but I agree that fixing it sounds like a good approach <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 476854779,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1728941763
    },
    {
        "content": "<p>Decoding Tag Unions is one of my most wanted issues. If you could solve it in the same run, I would be so thankful.<span aria-label=\"pleading face\" class=\"emoji emoji-1f97a\" role=\"img\" title=\"pleading face\">:pleading_face:</span><span aria-label=\"kissing cat\" class=\"emoji emoji-1f63d\" role=\"img\" title=\"kissing cat\">:kissing_cat:</span></p>",
        "id": 476928308,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1728979114
    },
    {
        "content": "<blockquote>\n<p>I took a stab at decoding tag unions...</p>\n</blockquote>\n<p>Cool. I'm curious in how the design of decoding tag unions would work from a user perspective? <br>\nWhat kind of structures would be possible to decode? I guess it has to be the \"inverse\" of the <code>tag</code> function in <code>EncoderFormatting</code> in some way?</p>",
        "id": 476935531,
        "sender_full_name": "Niklas Konstenius",
        "timestamp": 1728981538
    },
    {
        "content": "<blockquote>\n<p>they can skip the exercise if they want to.</p>\n</blockquote>\n<p>Can exercises be skipped? I know there is some kind of unlocking of exercises mechanism</p>",
        "id": 476955858,
        "sender_full_name": "Anton",
        "timestamp": 1728987773
    },
    {
        "content": "<p>Yes. For roc (at the Moment) no exercise is locked. You can start with any of them.</p>",
        "id": 476957049,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1728988210
    },
    {
        "content": "<blockquote>\n<p>Cool. I'm curious in how the design of decoding tag unions would work from a user perspective?<br>\nWhat kind of structures would be possible to decode? I guess it has to be the \"inverse\" of the <code>tag</code> function in <code>EncoderFormatting</code> in some way?</p>\n</blockquote>\n<p>It would be up to the DecoderFormatting implementation (such as roc-json) to decide how to handle the decoding. I think the way that makes the most sense as a start would be to decode the following json into the following roc:</p>\n<div class=\"codehilite\" data-code-language=\"JSON\"><pre><span></span><code><span class=\"p\">[{</span><span class=\"w\"> </span><span class=\"nt\">\"a\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nt\">\"field1\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"foo\"</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nt\">\"b\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nt\">\"field2\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"bar\"</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}]</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"p\">[</span><span class=\"kt\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">field1</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"foo\"</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">B</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">field2</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"bar\"</span><span class=\"w\"> </span><span class=\"p\">}]</span>\n</code></pre></div>\n<p>But there could be other approaches. Special casing for <code>null</code> would probably be a good thing to include also.</p>",
        "id": 476977323,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1728995216
    }
]