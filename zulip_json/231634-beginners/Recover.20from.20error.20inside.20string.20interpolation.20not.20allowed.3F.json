[
    {
        "content": "<p>I tried doing the following in Roc:</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>\"Hello ${Err(\"No name provided\") ?? \"Jane\"}!\"\n</code></pre></div>\n<p>Which produces the following error message:</p>\n<div class=\"codehilite\"><pre><span></span><code>── SYNTAX PROBLEM ──────────────────────────────────────────────────────────────\n\nThis string interpolation is invalid:\n\n4│      &quot;Hello ${Err(&quot;No name provided&quot;) ?? &quot;Jane&quot;}!&quot;\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nString interpolations cannot contain newlines or other interpolations.\n\nYou can learn more about string interpolation at\n&lt;https://www.roc-lang.org/tutorial#string-interpolation&gt;\n</code></pre></div>\n<p>This seems odd as there's no newlines and/or other interpolations. The tutorial also states that I'm allowed to put entire single-line expressions inside <code>${}</code>. Have I hit a limitation of the compiler here?</p>",
        "id": 501280397,
        "sender_full_name": "Kevin Hovsäter",
        "timestamp": 1740240901
    },
    {
        "content": "<p>Interesting</p>",
        "id": 501288108,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740247190
    },
    {
        "content": "<p>I guess this is for to how<code>??</code> desugars</p>",
        "id": 501288179,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740247213
    },
    {
        "content": "<p>It becomes a <code>when ... is</code></p>",
        "id": 501288221,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740247248
    },
    {
        "content": "<p>Ah, of course! I forgot that it's sugar just like the postfix <code>?</code> is sugar for <code>Str.concat</code>...</p>\n<p>Still somewhat surprising since it looks like a single-line expression.</p>",
        "id": 501288769,
        "sender_full_name": "Kevin Hovsäter",
        "timestamp": 1740247641
    },
    {
        "content": "<p>I think that _ought_ to work, but just doesn't because bugs</p>",
        "id": 501288803,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1740247678
    },
    {
        "content": "<p>Worth reporting or will the new compiler most likely solve it?</p>",
        "id": 501289370,
        "sender_full_name": "Kevin Hovsäter",
        "timestamp": 1740248138
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453336\">Joshua Warner</span> <a href=\"#narrow/stream/231634-beginners/topic/Recover.20from.20error.20inside.20string.20interpolation.20not.20allowed.3F/near/501288803\">said</a>:</p>\n<blockquote>\n<p>I think that _ought_ to work, but just doesn't because bugs</p>\n</blockquote>\n<p>Yeah, totally agree</p>",
        "id": 501330174,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740281738
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"452574\">Kevin Hovsäter</span> <a href=\"#narrow/stream/231634-beginners/topic/Recover.20from.20error.20inside.20string.20interpolation.20not.20allowed.3F/near/501289370\">said</a>:</p>\n<blockquote>\n<p>Worth reporting or will the new compiler most likely solve it?</p>\n</blockquote>\n<p>Hopefully the new compiler will just fix this, but no guarantees. Might be worth just filing as a reminder.</p>",
        "id": 501330255,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740281788
    }
]