[
    {
        "content": "<p>Hi there!<br>\nI've just begun my journey with Roc .</p>\n<p>I'm attempting to create a program that lists files in a directory and extracts some data from each file. I have a function  <code>processFile: Path -&gt; Task Str err</code><br>\n and from Dir.list, I receive <code>Task (List Path)</code>. However, I don't know how to combine them do create  a<code>(Set Str)</code>.<br>\nI tried to map the list and created <code>Task List (Task Str)</code> but I'm not sure if it is a good approach. <br>\nPlease, give me some advice</p>",
        "id": 411877058,
        "sender_full_name": "Szymon Kolorz",
        "timestamp": 1704784162
    },
    {
        "content": "<p>You can use either <code>Task.await</code> or <code>Task.loop</code></p>",
        "id": 411879402,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1704785516
    },
    {
        "content": "<p>1sec I'll grab an example</p>",
        "id": 411879458,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1704785526
    },
    {
        "content": "<p>Here is an example from <a href=\"https://github.com/lukewilliamboswell/roc-wasm4/blob/main/examples/snake.roc\">roc-wasm4</a> using <code>Task.loop</code></p>\n<div class=\"codehilite\"><pre><span></span><code>getRandomFruit : Snake -&gt; Task Fruit []\ngetRandomFruit = \\{ head, body } -&gt;\n    Task.loop {} \\{} -&gt;\n        x &lt;- W4.randBetween { start: 0, before: 20 } |&gt; Task.await\n        y &lt;- W4.randBetween { start: 0, before: 20 } |&gt; Task.await\n\n        fruit = { x, y }\n        if fruit == head || List.contains body fruit then\n            Step {} |&gt; Task.ok\n        else\n            Done fruit |&gt; Task.ok\n</code></pre></div>",
        "id": 411879543,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1704785596
    },
    {
        "content": "<p>Or this may be closer to what you need </p>\n<div class=\"codehilite\"><pre><span></span><code>drawSnakeBody : Snake -&gt; Task {} []\ndrawSnakeBody = \\snake -&gt;\n    List.walk snake.body (Task.ok {}) \\task, part -&gt;\n        {} &lt;- task |&gt; Task.await\n\n        W4.rect { x: (part.x * 8), y: (part.y * 8), width: 8, height: 8 }\n</code></pre></div>",
        "id": 411879608,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1704785643
    },
    {
        "content": "<p>Here you could pass in your <code>List Path</code> instead of <code>Snake</code> and walk the list using <code>Task.await</code></p>",
        "id": 411879666,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1704785668
    },
    {
        "content": "<p>So I imagine you want to create a function like <code>processFiles : List Path -&gt; Task (List Str) [YourErrorsTypes]</code></p>",
        "id": 411879924,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1704785820
    },
    {
        "content": "<p>It worked  with Task.loop,<br>\nThank you!</p>",
        "id": 412015510,
        "sender_full_name": "Szymon Kolorz",
        "timestamp": 1704835910
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"677630\">Szymon Kolorz</span> has marked this topic as resolved.</p>",
        "id": 412020326,
        "sender_full_name": "Notification Bot",
        "timestamp": 1704838097
    }
]