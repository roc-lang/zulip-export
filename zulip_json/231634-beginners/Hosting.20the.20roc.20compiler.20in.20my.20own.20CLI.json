[
    {
        "content": "<p>Is there a scenario for hosting the roc compiler in my own CLI?<br>\nI have my own toolchain and I am wondering if I can do the roc compilation for my own custom platform using my own CLI, so that users would not need to directly invoke roc?<br>\nAlso I'm new here so I might be way off base with what I'm thinking. I'm imagining kind of like what <code>javy</code> from the bytecodealliance/shopify enables you to do by consuming their crates.</p>",
        "id": 439390779,
        "sender_full_name": "Damian Reeves",
        "timestamp": 1716075809
    },
    {
        "content": "<p><del>My understanding is that the Roc code that's being called from a platform (i.e., from the host is essentially an already-compiled shared library).</del></p>\n<p><del>I hope this does clarify matters a bit. It doesn't seem to me what you're actually after is hosting the Roc compiler.</del></p>\n<p><del>I have to admit I'm not familiar with the <code>javy</code> project.</del></p>\n<p><strong><em>Update:</em></strong> Having thought about your use-case in more detail and having looked up <code>javy</code> briefly, I think I have a bit better understandasing of your use-case.</p>\n<p>I'll let the more knowledgeable members share their opinion on this one, as I'm afraid I couldn't be of help.</p>",
        "id": 439430029,
        "sender_full_name": "Hristo",
        "timestamp": 1716116694
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"720944\">@Damian Reeves</span> do you also want to compile to wasm like javy?</p>",
        "id": 439558523,
        "sender_full_name": "Anton",
        "timestamp": 1716206344
    },
    {
        "content": "<p>Yes I do</p>",
        "id": 439561649,
        "sender_full_name": "Damian Reeves",
        "timestamp": 1716207472
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> what language does your \"own custom platform\" use?</p>",
        "id": 439573313,
        "sender_full_name": "Anton",
        "timestamp": 1716211446
    },
    {
        "content": "<p>So my \"custom platform\" can be theoretically written in any language though it is usually Elm (and perhaps Scala or Bosque), but the main thing is the language frontend produces a Mophir IR file that is a JSON file (or multiple IR JSON files if you have dependencies).</p>\n<p>I have multiple use-cases I have in mind but the main is I want to be able to run my compiler, produce my IR (as JSON), and produce webassembly... I believe I can produce Roc from my IR since my IR maps very well to Elm. </p>\n<p>I also want to be able to natively test from my CLI as well. <br>\nSo all these usecases kind of require me to use the underlying functionality of Roc to build my own toolchain.</p>",
        "id": 439574936,
        "sender_full_name": "Damian Reeves",
        "timestamp": 1716211973
    },
    {
        "content": "<p>In the end I also want to take advantage of Roc's platforms as  users often want to bind their model to execution on some platform that expects entry points with specific signatures (this is why I think Roc is such a good fit). <br>\nThe main thing is I don't want to need to tell my users to install my CLI (morphir CLI), install roc, install rust or clang and all this other stuff to produce their thing that runs on my platform.</p>\n<p>They want to write their app, which you can think of as something that will run a calculation that will work on their specific runtime. The output of compiling their app should be agnostic of the host it is being ran on (which is why I want to target webassembly since it runs on all hosts we target</p>",
        "id": 439575712,
        "sender_full_name": "Damian Reeves",
        "timestamp": 1716212260
    },
    {
        "content": "<blockquote>\n<p>The main thing is I don't want to need to tell my users to install my CLI (morphir CLI), install roc, install rust or clang and all this other stuff to produce their thing that runs on my platform.</p>\n</blockquote>\n<p>Right, that should be achievable, what targets do you plan on supporting? e.g. macos-aarch64, macos-x86-64, linux-x86-64, linux-aarch64, windows-x86-64 etc.?</p>",
        "id": 439581284,
        "sender_full_name": "Anton",
        "timestamp": 1716214049
    },
    {
        "content": "<p>By targets I don't mean wasm of course, but the type of computer your users will run your CLI on</p>",
        "id": 439581795,
        "sender_full_name": "Anton",
        "timestamp": 1716214248
    },
    {
        "content": "<p>That list seems sufficient: macos-aarch64, macos-x86-64, linux-x86-64, linux-aarch64, windows-x86-64. Potentially gravatron as well</p>",
        "id": 439582112,
        "sender_full_name": "Damian Reeves",
        "timestamp": 1716214358
    },
    {
        "content": "<p>But I'm no expert on the gravatron struff (I might even be spelling it wrong)</p>",
        "id": 439582165,
        "sender_full_name": "Damian Reeves",
        "timestamp": 1716214381
    },
    {
        "content": "<p>linux-aarch64 and windows-x86-64 currently still have some issues but macos-aarch64, macos-x86-64 and linux-x86-64 should work. Given that set, I would recommend creating one .sh script that can install everything in one go. I'm not sure which dependencies are required to compile to wasm, perhaps others can weigh in?</p>",
        "id": 439587469,
        "sender_full_name": "Anton",
        "timestamp": 1716216081
    },
    {
        "content": "<p>Coming back to this and wondering if just distributing roc alongside my CLI would be sufficient? What I am not sure is can I do that? Can I distribute roc with my tool?<br>\nAlso guess it depends on the state of things like rocup?</p>",
        "id": 441905698,
        "sender_full_name": "Damian Reeves",
        "timestamp": 1717248395
    },
    {
        "content": "<blockquote>\n<p>Can I distribute roc with my tool?</p>\n</blockquote>\n<p>Yes, just make sure to include <a href=\"https://github.com/roc-lang/roc/blob/main/LICENSE\">the Roc license</a> somewhere too.</p>\n<blockquote>\n<p>Also guess it depends on the state of things like rocup?</p>\n</blockquote>\n<p>We plan to include rocup functionality in the roc command. Note that  your Roc code (inside your CLI tool?) may not work if you \"blindly\" update to the latest Roc version.</p>",
        "id": 443269211,
        "sender_full_name": "Anton",
        "timestamp": 1717757575
    }
]