[
    {
        "content": "<p>hi <br>\nWorking  with type annotations is extremally  frustrating I have  spend  two  hours  straight  and I can't make  working  even simple  thing, what to do here :</p>\n<div class=\"codehilite\"><pre><span></span><code>nodeType  :  { children : List (Num a), locked : Bool, value : List *} where a implements Hash &amp; Eq\ng  : List * -&gt; nodeType\ng  = \\ lst -&gt;\n    { children : [], locked : Bool.true, value : [] }\n</code></pre></div>",
        "id": 404161590,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1700947220
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"231634\" href=\"/#narrow/stream/231634-beginners/topic/working.20.20with.20type.20.20annotation\">#beginners &gt; working  with type  annotation</a> by <span class=\"user-mention silent\" data-user-id=\"568088\">Artur Swiderski</span>.</p>",
        "id": 404161627,
        "sender_full_name": "Notification Bot",
        "timestamp": 1700947245
    },
    {
        "content": "<p>why  it  does not  compile  how  to  fix it ?</p>",
        "id": 404161715,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1700947290
    },
    {
        "content": "<p>why  it is  so unintuitive  and  difficult ?</p>",
        "id": 404161974,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1700947407
    },
    {
        "content": "<p>I can see a few issues with your example, its quite complex because it combines a lot of different features, and even includes some really advanced stuff like Abilities. </p>\n<p>You're not asking me to help you with a working version, but you would like to know how to fix it. </p>\n<p>I find it helpful to start with a really simple type annotation. Then run <code>roc check</code> to confirm it compiles like I expect. Then incrementally change it and re-run <code>roc check</code>. This way I get immediate feedback when I do something incorrectly and I know exactly where the issue is. In this way the compiler is a really helpful teacher for the type system. Also adding unit tests is another great way to check understanding of types.</p>",
        "id": 404165639,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700948997
    },
    {
        "content": "<p>one problem is that <code>nodeType :</code> is syntactically invalid because it's not capitalized. (I'm on mobile so not sure what the error message is, but I'm guessing it's not clear about this!)</p>\n<p>It needs to be <code>NodeType :</code> rather than <code>nodeType :</code></p>",
        "id": 404166597,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700949381
    },
    {
        "content": "<p>I notice some other problems:</p>\n<ol>\n<li>Whenever a type alias contains a type variable (lowercase names in type annotations, such as <code>a</code>, are always type variables), that variable must be listed next to the alias name. So since <code>NodeType</code> contains an <code>a</code> (specifically in <code>Num a</code>), it needs to be <code>NodeType a :</code></li>\n<li>Type aliases can't contain <code>*</code>, you have to choose names for those type variables (such as <code>a</code> instead of <code>*</code>, although in this particular type, <code>a</code> is already being used for something else, so we'd probably want to replace the <code>*</code> with <code>b</code>). So it can't be <code>value : List *</code>, it has to be <code>value: List b</code> (and then <code>NodeType a b :</code> because <code>b</code> needs to be listed next to the alias name just like <code>a</code> did.)</li>\n<li><code>where a implements Hash &amp; Eq</code> applies to the <code>a</code> in <code>Num a</code>. I'm guessing that's not necessary and can be removed!</li>\n</ol>",
        "id": 404168463,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700950107
    },
    {
        "content": "<p>These sound like good issues to track around improving our error massages to help make this experience nicer</p>",
        "id": 404179142,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700959583
    },
    {
        "content": "<p>it works  thx for  tips  <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span>  , but this  syntax  is  difficult nevertheless . Thankfully  this is optional, if I have to keep track of  those  types  during  prototyping  stage, it would be just to much. I hope it stays this way  as  -&gt; optional feature</p>",
        "id": 404189164,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1700965927
    },
    {
        "content": "<p>The FAQ says<br>\n\"A valuable aspect of Roc's type system is that it has decidable principal type inference. This means that:</p>\n<p>At compile time, Roc can correctly infer the types for every expression in a program, even if you don't annotate any of the types.\" </p>\n<p>so I don't think that feature is going away. I think it's fairly fundamental to the design decisions behind the language.</p>",
        "id": 404266931,
        "sender_full_name": "Andrew C",
        "timestamp": 1701011753
    }
]