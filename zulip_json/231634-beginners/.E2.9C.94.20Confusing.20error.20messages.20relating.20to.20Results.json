[
    {
        "content": "<p>Am I the only one who frequently gets confused by the error messages produced by the compiler when <code>Result</code>s are involved? Seems like the mismatched use of <code>Result</code> and <code>Ok</code>/<code>Err</code> contributes to the confusion. But I've pretty much never seen an error message involving a <code>Result</code> that wasn't difficult to decipher. For example the below:</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>This when expression produces:\n    Result [\n        Err [InvalidTimeFormat],\n        Ok Time.Time,\n    ] […]\n\nBut the type annotation on parseFractionalTime says it should be:\n    Result {\n        hour : Int Unsigned8,\n        minute : Int Unsigned8,\n        nanosecond : Int Unsigned32,\n        second : Int Unsigned8,\n    } […]\n</code></pre></div>\n<p>This makes no sense to me. The type annotation for parseFractionalTime is:<br>\n<code>parseFractionalTime : List U8, List U8 -&gt; Result Time [InvalidTimeFormat]</code></p>\n<p>So what is the difference between:</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>    Result [\n        Err [InvalidTimeFormat],\n        Ok Time.Time,\n    ] […]\n</code></pre></div>\n<p>and </p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>Result Time [InvalidTimeFormat]\n</code></pre></div>\n<p>I see the error message shows a Result [Ok .., Result .. ] as the unexpected return, where as the expected return is a Result {..} where {..} matches the type signature for my Date.Date type. What is this error message telling me?</p>",
        "id": 434601269,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1713716549
    },
    {
        "content": "<p>So</p>\n<div class=\"codehilite\"><pre><span></span><code>{\n    hour : Int Unsigned8,\n    minute : Int Unsigned8,\n    nanosecond : Int Unsigned32,\n    second : Int Unsigned8,\n}\n</code></pre></div>\n<p>Looks to just be an accidental inlining of <code>Time.Time</code></p>",
        "id": 434602121,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713717273
    },
    {
        "content": "<p>So the error is that you have a:</p>\n<div class=\"codehilite\"><pre><span></span><code>Result [\n        Err [InvalidTimeFormat],\n        Ok Time.Time,\n    ] […]\n</code></pre></div>\n<p>Which rewritten would be a:</p>\n<div class=\"codehilite\"><pre><span></span><code>Result (Result Time.Time [InvalidTimeFormat]) […]\n</code></pre></div>",
        "id": 434602181,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713717355
    },
    {
        "content": "<p>In other words, you have nested results</p>",
        "id": 434602227,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713717365
    },
    {
        "content": "<p>Aside:<br>\nResults probably have poor errors cause they are just tags and not some sort of unique type. As such, they are actually really flexible cause they can be used as any generic tag.</p>",
        "id": 434602255,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713717408
    },
    {
        "content": "<p>Any errors specific to result would need to be careful cause someone technically could make valid tags in many case.<br>\nFor example, this is valid (so we have our work cut out to make error nice while also dealing with that):</p>\n<div class=\"codehilite\"><pre><span></span><code>MyResult ok err : [OK ok, Err err]\n\nx = OK 27\nwhen x is\n    OK v -&gt; v\n    Err _ -&gt; crash &quot;...&quot;\n</code></pre></div>",
        "id": 434602433,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713717596
    },
    {
        "content": "<p>Okay, I thought it looked like it was telling me I had a nested result. But I'm tearing my hair out trying to figure out where I could be nesting results, without success. <span aria-label=\"expressionless\" class=\"emoji emoji-1f611\" role=\"img\" title=\"expressionless\">:expressionless:</span></p>",
        "id": 434602491,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1713717619
    },
    {
        "content": "<p>Can you share the code?</p>",
        "id": 434602506,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713717648
    },
    {
        "content": "<p>Sure! One moment...</p>",
        "id": 434602517,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1713717668
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">parseFractionalTime</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"nx\">U8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"nx\">U8</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Result</span><span class=\"w\"> </span><span class=\"nx\">Time</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">InvalidTimeFormat</span><span class=\"p\">]</span>\n<span class=\"nv\">parseFractionalTime</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">wholeBytes</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">fractionalBytes</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">combineDurationResAndTime</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">durationRes</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">time</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">durationRes</span><span class=\"w\"> </span><span class=\"o\">is</span>\n<span class=\"w\">            </span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"nx\">duration</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Duration</span><span class=\"p\">.</span><span class=\"nx\">addTimeAndDuration</span><span class=\"w\"> </span><span class=\"nx\">time</span><span class=\"w\"> </span><span class=\"nx\">duration</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Ok</span>\n<span class=\"w\">            </span><span class=\"nx\">Err</span><span class=\"w\"> </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Err</span><span class=\"w\"> </span><span class=\"nx\">InvalidTimeFormat</span>\n<span class=\"w\">    </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">wholeBytes</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">utf8ToFrac</span><span class=\"w\"> </span><span class=\"nx\">fractionalBytes</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">is</span>\n<span class=\"w\">        </span><span class=\"nf\">([_,_], Ok frac) -&gt;</span><span class=\"w\"> </span><span class=\"c1\"># hh</span>\n<span class=\"w\">            </span><span class=\"nx\">time</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">parseLocalTimeHour</span><span class=\"w\"> </span><span class=\"nx\">wholeBytes</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Result</span><span class=\"p\">.</span><span class=\"nx\">map</span>\n<span class=\"w\">            </span><span class=\"nx\">frac</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nx\">nanosPerHour</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Num</span><span class=\"p\">.</span><span class=\"nx\">round</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Duration</span><span class=\"p\">.</span><span class=\"nx\">fromNanoseconds</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">combineDurationResAndTime</span><span class=\"w\"> </span><span class=\"nx\">time</span>\n<span class=\"w\">        </span><span class=\"nf\">([_,_,_,_], Ok frac) -&gt;</span><span class=\"w\"> </span><span class=\"c1\"># hhmm</span>\n<span class=\"w\">            </span><span class=\"nx\">time</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">parseLocalTimeMinuteBasic</span><span class=\"w\"> </span><span class=\"nx\">wholeBytes</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Result</span><span class=\"p\">.</span><span class=\"nx\">map</span>\n<span class=\"w\">            </span><span class=\"nx\">frac</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nx\">nanosPerMinute</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Num</span><span class=\"p\">.</span><span class=\"nx\">round</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Duration</span><span class=\"p\">.</span><span class=\"nx\">fromNanoseconds</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">combineDurationResAndTime</span><span class=\"w\"> </span><span class=\"nx\">time</span>\n<span class=\"w\">        </span><span class=\"nf\">([_,_,':',_,_], Ok frac) -&gt;</span><span class=\"w\"> </span><span class=\"c1\"># hh:mm</span>\n<span class=\"w\">            </span><span class=\"nx\">time</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">parseLocalTimeMinuteExtended</span><span class=\"w\"> </span><span class=\"nx\">wholeBytes</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Result</span><span class=\"p\">.</span><span class=\"nx\">map</span>\n<span class=\"w\">            </span><span class=\"nx\">frac</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nx\">nanosPerMinute</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Num</span><span class=\"p\">.</span><span class=\"nx\">round</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Duration</span><span class=\"p\">.</span><span class=\"nx\">fromNanoseconds</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">combineDurationResAndTime</span><span class=\"w\"> </span><span class=\"nx\">time</span>\n<span class=\"w\">        </span><span class=\"nf\">([_,_,_,_,_,_], Ok frac) -&gt;</span><span class=\"w\"> </span><span class=\"c1\"># hhmmss</span>\n<span class=\"w\">            </span><span class=\"nx\">time</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">parseLocalTimeBasic</span><span class=\"w\"> </span><span class=\"nx\">wholeBytes</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Result</span><span class=\"p\">.</span><span class=\"nx\">map</span>\n<span class=\"w\">            </span><span class=\"nx\">frac</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nx\">nanosPerSecond</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Num</span><span class=\"p\">.</span><span class=\"nx\">round</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Duration</span><span class=\"p\">.</span><span class=\"nx\">fromNanoseconds</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">combineDurationResAndTime</span><span class=\"w\"> </span><span class=\"nx\">time</span>\n<span class=\"w\">        </span><span class=\"nf\">([_,_,':',_,_,':',_,_], Ok frac) -&gt;</span><span class=\"w\"> </span><span class=\"c1\"># hh:mm:ss</span>\n<span class=\"w\">            </span><span class=\"nx\">time</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">parseLocalTimeExtended</span><span class=\"w\"> </span><span class=\"nx\">wholeBytes</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Result</span><span class=\"p\">.</span><span class=\"nx\">map</span>\n<span class=\"w\">            </span><span class=\"nx\">frac</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nx\">nanosPerSecond</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Num</span><span class=\"p\">.</span><span class=\"nx\">round</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Duration</span><span class=\"p\">.</span><span class=\"nx\">fromNanoseconds</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">combineDurationResAndTime</span><span class=\"w\"> </span><span class=\"nx\">time</span>\n<span class=\"w\">        </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Err</span><span class=\"w\"> </span><span class=\"nx\">InvalidTimeFormat</span>\n</code></pre></div>\n<p>and the external call here that returns  the final value, <code>Duration.addTimeAndDuration</code>:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">addTimeAndDuration</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">Time</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">Duration</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Time</span>\n<span class=\"nv\">addTimeAndDuration</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">time</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">duration</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">t1nanos</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">toNanoseconds</span><span class=\"w\"> </span><span class=\"nx\">duration</span>\n<span class=\"w\">    </span><span class=\"nv\">dNanos</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">Time</span><span class=\"p\">.</span><span class=\"nx\">toNanosSinceMidnight</span><span class=\"w\"> </span><span class=\"nx\">time</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Num</span><span class=\"p\">.</span><span class=\"nx\">toI128</span>\n<span class=\"w\">    </span><span class=\"nv\">t2Nanos</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">dNanos</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">t1nanos</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"nx\">Const</span><span class=\"p\">.</span><span class=\"nx\">nanosPerDay</span>\n<span class=\"w\">    </span><span class=\"nx\">Time</span><span class=\"p\">.</span><span class=\"nx\">fromNanosSinceMidnight</span><span class=\"w\"> </span><span class=\"nx\">t2Nanos</span>\n</code></pre></div>",
        "id": 434602621,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1713717777
    },
    {
        "content": "<p><code>Result.map</code> to <code>Result.try</code>?</p>",
        "id": 434602739,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713717877
    },
    {
        "content": "<p>Cause <code>Result.map</code> Just maps the success case. So you are mapping the success case to a <code>Result Time.Time [InvalidTimeFormat]</code></p>",
        "id": 434602794,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713717931
    },
    {
        "content": "<p>Ahhh... that would make sense..</p>",
        "id": 434602888,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1713717989
    },
    {
        "content": "<p>Of course 🤦🏻‍♂️</p>",
        "id": 434602940,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1713718065
    },
    {
        "content": "<p>I do feel like Result error messages tend to be pretty confusing. They often mismatch, like you say, since they are just a Tag union, so there is intermingled use of Result and Ok Err, combined with mismatched inlining of other types can get pretty messy.</p>",
        "id": 434603290,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1713718364
    },
    {
        "content": "<p>Yeah, lots of room for improvement.</p>",
        "id": 434603710,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713718781
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"518883\">Ian McLerran</span> has marked this topic as resolved.</p>",
        "id": 434606267,
        "sender_full_name": "Notification Bot",
        "timestamp": 1713721226
    }
]