[
    {
        "content": "<p>Hey, I was trying to write a pattern match for a tuple (<code>when (left, right) is</code>), and the compiler threw an error:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;&lt;unnamed&gt;&#39; panicked at &#39;not yet implemented: desugar_expr: Tuple&#39;, crates/compiler/can/src/operator.rs:180:13\n</code></pre></div>\n<p>I was able to figure out that using a list works fine (<code> when [left, right] is</code>). </p>\n<p>Not sure how feasible it is to do, but having that be a nicer error message would be neat!</p>",
        "id": 322094288,
        "sender_full_name": "Tankor Smash",
        "timestamp": 1674058901
    },
    {
        "content": "<p>I think the core issue is that we don't actually have native tuple syntax yet. So there is no <code>(left, right)</code> syntax. Instead, you would have to make the tuple explicitly with a tag: <code>T left right</code> where <code>T</code> is just an arbitrary tag name. Could be <code>Pair</code> or <code>Tuple</code> or <code>T</code> or etc.</p>",
        "id": 322120271,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1674065625
    },
    {
        "content": "<p>Actually the syntax (parsing/formatting) works fine - it’s the rest of the compiler that doesn’t support tuples yet.</p>",
        "id": 322309850,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1674142306
    },
    {
        "content": "<p>To an end user, that is that the same thing, but I get the technicality.</p>",
        "id": 322315767,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1674143760
    },
    {
        "content": "<p>Hi, I'm guessing from reading the above messages that I can't pattern match tuples like I'm trying to in this code?</p>\n<div class=\"codehilite\"><pre><span></span><code>response : Str -&gt; Str\nresponse = \\heyBob -&gt;\n    isQuestion = Str.endsWith heyBob &quot;?&quot;\n    isSilence = Str.trim heyBob == &quot;&quot;\n    isYelling = strIsYelling heyBob\n    when (isQuestion, isYelling, isSilence) is\n        (Bool.true, Bool.true, Bool.false) -&gt; &quot;Calm down, I know what I&#39;m doing!&quot;\n        (Bool.true, Bool.false, Bool.false) -&gt; &quot;Sure.&quot;\n        (Bool.false, Bool.true, Bool.false) -&gt; &quot;Whoa, chill out!&quot;\n        (_, _, Bool.true) -&gt; &quot;Fine. Be that way!&quot;\n        _ -&gt; &quot;Whatever&quot;\n</code></pre></div>",
        "id": 474519414,
        "sender_full_name": "Nathan Kramer",
        "timestamp": 1727943632
    },
    {
        "content": "<p>I ended up re-writing it like this</p>\n<div class=\"codehilite\"><pre><span></span><code>response : Str -&gt; Str\nresponse = \\heyBob -&gt;\n    sanitized = Str.trim heyBob\n    isQuestion = Str.endsWith sanitized &quot;?&quot;\n    isSilence = sanitized == &quot;&quot;\n    isYelling = strIsYelling sanitized\n\n    if isSilence then\n        &quot;Fine. Be that way!&quot;\n    else if isQuestion &amp;&amp; isYelling then\n        &quot;Calm down, I know what I&#39;m doing!&quot;\n    else if isQuestion then\n        &quot;Sure.&quot;\n    else if isYelling then\n        &quot;Whoa, chill out!&quot;\n    else\n        &quot;Whatever.&quot;\n</code></pre></div>",
        "id": 474522616,
        "sender_full_name": "Nathan Kramer",
        "timestamp": 1727944668
    },
    {
        "content": "<p>You can pattern match tuples. The issue with your first example is that the roc currently can't pattern match bools.</p>",
        "id": 474615162,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1727967918
    },
    {
        "content": "<p>If those were tags instead of bools, it would work</p>",
        "id": 474615283,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1727967951
    },
    {
        "content": "<p>Hey all, my first time writing a Roc program for AoC day 1. Is this a parser bug or am I missing something? The tutorial suggested you can pattern match tuples, but this doesn't seem to be the case in function parameters?</p>\n<div class=\"codehilite\"><pre><span></span><code>unzip : List (a, b) -&gt; (List a, List b)\nunzip = \\pairs -&gt;\n    pairs |&gt; List.walk ([], []) \\(as, bs), (a, b) -&gt;\n        (List.append as a, List.append bs b)\n</code></pre></div>\n<p>yields the error:</p>\n<div class=\"codehilite\"><pre><span></span><code>I am partway through parsing a pattern in parentheses, but I got stuck\nhere:\n\n33│      pairs |&gt; List.walk ([], []) \\(as, bs), (a, b) -&gt;\n                                       ^\n\nI was expecting to see a closing parenthesis before this, so try\nadding a ) and see if that helps?\n</code></pre></div>\n<p>but the following compiles:</p>\n<div class=\"codehilite\"><pre><span></span><code>unzip : List (a, b) -&gt; (List a, List b)\nunzip = \\pairs -&gt;\n    pairs |&gt; List.walk ([], []) \\res, pair -&gt;\n        (List.append res.0 pair.0, List.append res.1 pair.1)\n</code></pre></div>",
        "id": 485522888,
        "sender_full_name": "Baffalop",
        "timestamp": 1733095497
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"783659\">@Baffalop</span> This really stumped me for a minute. I was looking at my own code and seeing where I have an unzip function that is almost identical.<br>\nThe issue is, you are using the <code>as</code> keyword as a name. This should have a much better error message, but that is the issue</p>",
        "id": 485540544,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1733111239
    },
    {
        "content": "<p>FWIW I ran across precisely the same issue, and yeah, the error message wasn't helpful here.</p>",
        "id": 485545293,
        "sender_full_name": "Matt Harden",
        "timestamp": 1733114925
    },
    {
        "content": "<p>Ah of course! <span aria-label=\"man facepalming\" class=\"emoji emoji-1f926-200d-2642\" role=\"img\" title=\"man facepalming\">:man_facepalming:</span></p>",
        "id": 485561173,
        "sender_full_name": "Baffalop",
        "timestamp": 1733125142
    },
    {
        "content": "<p>Can you file an issue for a better error message <span class=\"user-mention\" data-user-id=\"783659\">@Baffalop</span>?</p>",
        "id": 485599776,
        "sender_full_name": "Anton",
        "timestamp": 1733137995
    },
    {
        "content": "<p>Funny, i ran into the same problem.</p>",
        "id": 486163586,
        "sender_full_name": "Eelco Hoekema",
        "timestamp": 1733340337
    }
]