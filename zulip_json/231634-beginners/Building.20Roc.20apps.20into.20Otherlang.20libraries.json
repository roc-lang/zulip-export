[
    {
        "content": "<p>I just noticed the CLI flag to build your Roc app as a C library - that sounds cool! I don't remember that from Roc marketing or training materials, though. Could we build Zig libraries, too? Rust? (Context: I'm uninformed on most low-level language stuff)</p>",
        "id": 296933120,
        "sender_full_name": "jan kili",
        "timestamp": 1662172483
    },
    {
        "content": "<p>That probably doesn't mean what you think it means. You mean <code>--lib</code>, right? IIRC, that just builds a dynamic library.</p>",
        "id": 296933661,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1662173160
    },
    {
        "content": "<p>It talks c abi. Which is probably why it says a c library, but it really is just a standard dynamic/shared library</p>",
        "id": 296933715,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1662173193
    },
    {
        "content": "<p>It can be loaded by zig or c or rust and talked to with cffi like normal</p>",
        "id": 296933725,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1662173209
    },
    {
        "content": "<p>We are not emitting c or anything.</p>",
        "id": 296933728,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1662173217
    },
    {
        "content": "<p>Ah, yes, I did not envision it outputting uncompiled C source code. However, I maintain that this is super cool and (maybe) undersold in Roc's story!</p>",
        "id": 296934560,
        "sender_full_name": "jan kili",
        "timestamp": 1662174290
    },
    {
        "content": "<p>So far I've envisioned Roc as a valuable tool for any teams who want a lang upgrade or simply want to script/control an existing engine... but this opens a third category of use cases - incremental Roc-ification of a codebase!</p>",
        "id": 296934641,
        "sender_full_name": "jan kili",
        "timestamp": 1662174378
    },
    {
        "content": "<p>It sounds like one could have a dozen product features implemented in Rust/Zig/C and decide to implement the 13th feature in Roc???</p>",
        "id": 296934684,
        "sender_full_name": "jan kili",
        "timestamp": 1662174427
    },
    {
        "content": "<p>I mean it really is no different that current Roc really. It would be the exact same api. It just lives in a dynamic library instead of being surgically linked into the host.</p>",
        "id": 296934691,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1662174438
    },
    {
        "content": "<p>I guess a tad more dynamic</p>",
        "id": 296934694,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1662174444
    },
    {
        "content": "<p>My realization is that Roc doesn't have to own the entrypoint/callsite</p>",
        "id": 296934713,
        "sender_full_name": "jan kili",
        "timestamp": 1662174479
    },
    {
        "content": "<p>/executable</p>",
        "id": 296934758,
        "sender_full_name": "jan kili",
        "timestamp": 1662174487
    },
    {
        "content": "<p>What do you mean?</p>",
        "id": 296934767,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1662174494
    },
    {
        "content": "<p>Roc currently doesn't own the executable entry point. It is defined in rust or zig or c</p>",
        "id": 296934776,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1662174512
    },
    {
        "content": "<p>I guess we tend to currently have roc control the build process, but that isn't required.</p>",
        "id": 296934829,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1662174593
    },
    {
        "content": "<p>It sounds like we could take an existing codebase that doesn't use Roc, sprinkle some Roc goodness on it, and continue to run the service/product the same way (same entrypoint, same executable build pipeline, same everything external/interface-y) but with part of the compiled code sourcing Roc</p>",
        "id": 296934830,
        "sender_full_name": "jan kili",
        "timestamp": 1662174594
    },
    {
        "content": "<p>In my opinion, this is a massive boon for Roc's adoptability</p>",
        "id": 296934886,
        "sender_full_name": "jan kili",
        "timestamp": 1662174630
    },
    {
        "content": "<p>I guess? We also can emit a <code>.o</code> file. Which is probably better than a library in most cases</p>",
        "id": 296934936,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1662174693
    },
    {
        "content": "<p>I've never used Lua, so maybe analogies to Lua were supposed to elicit this realization earlier for me</p>",
        "id": 296934939,
        "sender_full_name": "jan kili",
        "timestamp": 1662174696
    },
    {
        "content": "<p>But yeah, long term, platforms should have more control on specifying the build process. That will likely help a lot. The current situation is all manually hacked into the compiler. When I targeted a microcontroller, I just used the <code>.o</code> file and an external build process</p>",
        "id": 296935020,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1662174779
    },
    {
        "content": "<p>Is there precedent for this style of language interop? All of cffi maybe, which I never looked into? All of these JVM-based FPLangs like Scala?</p>",
        "id": 296935031,
        "sender_full_name": "jan kili",
        "timestamp": 1662174819
    },
    {
        "content": "<p>I'm not sure I understand these questions.</p>",
        "id": 296935118,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1662174904
    },
    {
        "content": "<p>Can an existing Rust codebase call any compiled Roc app though not import from it?</p>",
        "id": 296935127,
        "sender_full_name": "jan kili",
        "timestamp": 1662174910
    },
    {
        "content": "<p>I might need to watch some videos on what cffi and .o are</p>",
        "id": 296935138,
        "sender_full_name": "jan kili",
        "timestamp": 1662174937
    },
    {
        "content": "<p>I'm coming from an understanding that scripting languages call systems languages, not the other way around.</p>",
        "id": 296935204,
        "sender_full_name": "jan kili",
        "timestamp": 1662174988
    },
    {
        "content": "<p>This breaks that distinction for me, in a very promising way :D</p>",
        "id": 296935224,
        "sender_full_name": "jan kili",
        "timestamp": 1662175018
    },
    {
        "content": "<p>When using the dynamic lib or <code>.o</code>, must of the rust code would not change. It still needs to define all of the <code>roc_</code> functions. It also needs to define all of the headers to know how to call roc code. Roc require bidirectional communication</p>",
        "id": 296935266,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1662175057
    },
    {
        "content": "<p>(Note: I've known that Roc apps are actually called by Roc platforms, not the other way around at all. However, I assumed that Roc platforms could call same-lang codebases but not the other way around, due to a crude understanding of executable entrypoint.)</p>",
        "id": 296935334,
        "sender_full_name": "jan kili",
        "timestamp": 1662175115
    },
    {
        "content": "<p>Ah, so an existing codebase would need to do the minimal enhancements required to become a Roc platform?</p>",
        "id": 296935376,
        "sender_full_name": "jan kili",
        "timestamp": 1662175169
    },
    {
        "content": "<p>That helpfully erodes at my idea of Roc platforms being codebases focused on Roc... rather than just codebases that happen to have implemented the adaptations necessary to call Roc</p>",
        "id": 296935477,
        "sender_full_name": "jan kili",
        "timestamp": 1662175268
    },
    {
        "content": "<p>Your last comment hits the nail on the head. For example, you may work on a game and just use Roc as a scripting language, but you still implement an entire game. This is super specialized and would be fine without roc. Roc is just a nice addition.</p>",
        "id": 296935561,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1662175356
    },
    {
        "content": "<p>Let's see. The best way to think about this is probably to just consider Roc another package/library in the host language (even though it clearly isn't).</p>\n<p>It is a package with a really weird api that imports a few functions (<code>roc_alloc</code>, <code>roc_memcpy</code>, ..., <code>roc_fx_DoSometing</code>) and exposes a few functions <code>roc_main_for_host</code>, etc.</p>",
        "id": 296935659,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1662175464
    },
    {
        "content": "<p>Yes, but critically, adding Roc doesn't make your codebase Roc-y and it doesn't create a scoped Roc zone that can't benefit existing code elsewhere</p>",
        "id": 296935683,
        "sender_full_name": "jan kili",
        "timestamp": 1662175494
    },
    {
        "content": "<p>The first example I heard about game dev was that devs could add a scripting language for game players/modders to use... but that didn't make me think that the game developers might want to refactor some of the game engine into Roc for maintainability or stability/security reasons</p>",
        "id": 296935787,
        "sender_full_name": "jan kili",
        "timestamp": 1662175592
    },
    {
        "content": "<p>So, following that simplification, if Roc is basically a Rust/Zig/C library... then a Roc app is basically a particular single data transformation plugin that the library can perform for a Rust/Zig/C codebase?</p>",
        "id": 296935934,
        "sender_full_name": "jan kili",
        "timestamp": 1662175748
    },
    {
        "content": "<p>If a Rust codebase calls 3 different Roc apps, will it need 3 \"really weird api\"s?</p>",
        "id": 296936045,
        "sender_full_name": "jan kili",
        "timestamp": 1662175843
    },
    {
        "content": "<p>It would be, but roc can also call effects. That enables it to do more than just transform data</p>",
        "id": 296936051,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1662175845
    },
    {
        "content": "<p>True, I suppose the Roc app is a data transformation but the Roc \"library\" uses the result of that data transformation to call effects on behalf of the codebase</p>",
        "id": 296936089,
        "sender_full_name": "jan kili",
        "timestamp": 1662175893
    },
    {
        "content": "<p>Also, roc is really not made with the idea of using multiple apps, though since they are just object files, I guess you could. You would probably have to be careful around name conflicts</p>",
        "id": 296936150,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1662175930
    },
    {
        "content": "<p>But yeah, you would need to define all effects expected from all roc apps. Though you would only define things like <code>roc_alloc</code> once.</p>",
        "id": 296936172,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1662175980
    },
    {
        "content": "<p>Also, you would have to deal with all the function calling code, but in the future hopefully glue will generate most of that</p>",
        "id": 296936204,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1662176013
    },
    {
        "content": "<p>I suppose it'd be easier to either have the main function switch on a tag or expose a record of functions, rather than using multiple apps</p>",
        "id": 296936207,
        "sender_full_name": "jan kili",
        "timestamp": 1662176018
    },
    {
        "content": "<p>Also, long term, roc should be able to expose multiple function directly rather than through main</p>",
        "id": 296936327,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1662176150
    },
    {
        "content": "<p>To summarize, any existing Rust/Zig/C(/C++?) codebase can add a few specific IO/memory-related (effect-related) functions and start adding new business logic features in Roc instead of in Rust/Zig/C (or refactoring old business logic into a superior language for it)</p>",
        "id": 296936423,
        "sender_full_name": "jan kili",
        "timestamp": 1662176235
    },
    {
        "content": "<p>#BigIfTrue</p>",
        "id": 296936506,
        "sender_full_name": "jan kili",
        "timestamp": 1662176285
    },
    {
        "content": "<p>Yeah</p>",
        "id": 296936539,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1662176331
    },
    {
        "content": "<p>That enables such a clear incremental adoption/upgrade/refactor story</p>",
        "id": 296936580,
        "sender_full_name": "jan kili",
        "timestamp": 1662176377
    },
    {
        "content": "<ol>\n<li>Add some boilerplate to your codebase</li>\n<li>Write new business logic in Roc</li>\n<li>Your codebase is now technically also a Roc platform</li>\n<li>Be happier</li>\n<li>Refactor old business logic into Roc</li>\n<li>Your codebase is now ONLY a Roc platform</li>\n<li>Be happier</li>\n</ol>",
        "id": 296936704,
        "sender_full_name": "jan kili",
        "timestamp": 1662176511
    },
    {
        "content": "<p>Haha <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> you make it sound so simple</p>",
        "id": 296937249,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1662177001
    },
    {
        "content": "<p>Hahahaha</p>",
        "id": 296937900,
        "sender_full_name": "jan kili",
        "timestamp": 1662177602
    },
    {
        "content": "<p>yeah check out <code>examples/ruby-interop</code> - that incremental adoption thing is how we're working on using it at work!</p>",
        "id": 296981876,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1662206096
    },
    {
        "content": "<p>How simple can step 1 become? Can we create+publish+maintain libraries/codegen for that \"setup step\" (platformification) to become trivial? Is it already trivial by virtue of it requiring only copy/paste of less than 50 lines of code?</p>",
        "id": 297052499,
        "sender_full_name": "jan kili",
        "timestamp": 1662259465
    },
    {
        "content": "<p>I don't know how Rust/Zig/C/Ruby libraries work, but a two-liner like</p>\n<div class=\"codehilite\"><pre><span></span><code>import Roc\nRoc.initializePlatform({ ... })\n</code></pre></div>\n<p>would be super cool</p>",
        "id": 297052538,
        "sender_full_name": "jan kili",
        "timestamp": 1662259561
    },
    {
        "content": "<p>The goal of <code>roc glue</code> is to make that step trivial!</p>",
        "id": 297053278,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1662260541
    }
]