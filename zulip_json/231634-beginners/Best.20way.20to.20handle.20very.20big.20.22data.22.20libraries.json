[
    {
        "content": "<p>I'd like to build some localisation packages for Roc using the <a href=\"https://cldr.unicode.org/\">unicode CLDR data</a>, I've made a start <a href=\"https://github.com/Hasnep/roc-cldr\">here</a> by using a codegen script to generate 11MB of Roc code <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> Unsurprisingly, <code>roc check</code> doesn't like running on this codebase. I assume the right way to do this would be to load the JSON data as a string and using roc-json to parse it in the package?</p>",
        "id": 442668268,
        "sender_full_name": "Hannes",
        "timestamp": 1717550346
    },
    {
        "content": "<p>The reason I didn't do that initially was because I thought the Roc compiler wouldn't be able to do any dead code elimination if the data was imported as a string, leading to a giant binary size if the package was imported in an app. Maybe with compile-time constant evaluation, it would be possible to not include all the loaded data in the final binary?</p>\n<p>Also, let me know if I'm completely wrong about any of this, I'm making a bunch of assumptions without having done any research <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 442668842,
        "sender_full_name": "Hannes",
        "timestamp": 1717550579
    },
    {
        "content": "<p>Theoretically correct with compile time eval....at the same time, the eval might be similar expensive to the result of the code gen</p>",
        "id": 442668973,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1717550635
    },
    {
        "content": "<p><del>Have you seen the approach I took with roc-unicode?</del> nvm</p>",
        "id": 442669052,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1717550653
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"508951\">Hannes</span> <a href=\"#narrow/stream/231634-beginners/topic/Best.20way.20to.20handle.20very.20big.20.22data.22.20libraries/near/442668268\">said</a>:</p>\n<blockquote>\n<p>using a codegen script to generate 11MB of Roc code <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> Unsurprisingly, <code>roc check</code> doesn't like running on this codebase.</p>\n</blockquote>\n<p>I'm actually really interested in this!</p>",
        "id": 442671486,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717551662
    },
    {
        "content": "<p>that is, I'm interested in <code>roc check</code> liking it - or at least being ok with it <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 442671538,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717551687
    },
    {
        "content": "<p>what happens when you run <code>roc check</code> on it?</p>",
        "id": 442671550,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717551692
    },
    {
        "content": "<p>I remember hearing on an episode of software unscripted that you were interested in <code>roc check</code> being fast :)</p>",
        "id": 442671817,
        "sender_full_name": "Hannes",
        "timestamp": 1717551798
    },
    {
        "content": "<p>When I run <code>roc check</code> it maxes out half of my cpu cores, immediately uses 1.4GB of ram and then slowly uses less and less ram, I've never left it for more than 3 minutes though, I'll try and find out if it ever does finish <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n<p>Update: the ram usage seems to fall slowly down to 500MB and then jumps back to 1.5GB, it's done that three or so times in the last 6 minutes, no idea if this is helpful or not <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 442672079,
        "sender_full_name": "Hannes",
        "timestamp": 1717551925
    },
    {
        "content": "<p>After 20 minutes I got this error:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ roc check src/main.roc\n\nthread &#39;main&#39; has overflowed its stack\nfatal runtime error: stack overflow\n</code></pre></div>",
        "id": 442675286,
        "sender_full_name": "Hannes",
        "timestamp": 1717553240
    },
    {
        "content": "<p>ok cool! Would you mind opening an issue with steps to reproduce?</p>",
        "id": 442681044,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717555673
    },
    {
        "content": "<p>I don't think we've ever thrown this much at it before, but I want <code>roc check</code> to be able to handle it!</p>",
        "id": 442681114,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1717555714
    },
    {
        "content": "<p>Finally got round to creating a reprex and opening an issue: <a href=\"https://github.com/roc-lang/roc/issues/6830\">https://github.com/roc-lang/roc/issues/6830</a> :)</p>",
        "id": 446269263,
        "sender_full_name": "Hannes",
        "timestamp": 1719060262
    }
]