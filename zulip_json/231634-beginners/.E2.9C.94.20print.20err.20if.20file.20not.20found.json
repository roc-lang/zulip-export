[
    {
        "content": "<p>is there some way to accomplish this? </p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">contents</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Path</span><span class=\"o\">.</span><span class=\"n\">fromStr</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">File</span><span class=\"o\">.</span><span class=\"n\">readUtf8</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">onFail</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Stderr</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"s2\">\"oops\"</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span><span class=\"w\"></span>\n</code></pre></div>\n<p>i get the errors</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"go\">── TOO MANY ARGS ────────────────────────────────────── platform-test/main.roc ─</span>\n\n<span class=\"go\">The onFail function expects 2 arguments, but it got 3 instead:</span>\n\n<span class=\"go\">20│          contents &lt;- path |&gt; Path.fromStr |&gt; File.readUtf8 |&gt; Task.onFail \\_ -&gt; Stderr.line \"oops\" |&gt; Task.await</span>\n<span class=\"go\">                                                                  ^^^^^^^^^^^</span>\n\n<span class=\"go\">Are there any missing commas? Or missing parentheses?</span>\n\n\n<span class=\"go\">── TOO FEW ARGS ─────────────────────────────────────── platform-test/main.roc ─</span>\n\n<span class=\"go\">The await function expects 2 arguments, but it got only 1:</span>\n\n<span class=\"go\">20│          contents &lt;- path |&gt; Path.fromStr |&gt; File.readUtf8 |&gt; Task.onFail \\_ -&gt; Stderr.line \"oops\" |&gt; Task.await</span>\n<span class=\"go\">                                                                                                          ^^^^^^^^^^</span>\n</code></pre></div>",
        "id": 303634786,
        "sender_full_name": "Travis",
        "timestamp": 1665583650
    },
    {
        "content": "<p>i'm thinking <code>Task.attempt</code> might work</p>",
        "id": 303635507,
        "sender_full_name": "Travis",
        "timestamp": 1665583881
    },
    {
        "content": "<p>Syntax aside, I don't think stderr writing should pipe to a variable named contents... mixing steps?</p>",
        "id": 303635800,
        "sender_full_name": "jan kili",
        "timestamp": 1665583954
    },
    {
        "content": "<p>Today you'll need to add parentheses around your mid-pipeline function</p>",
        "id": 303636002,
        "sender_full_name": "jan kili",
        "timestamp": 1665584019
    },
    {
        "content": "<p>What type are you aiming for for contents?</p>",
        "id": 303636189,
        "sender_full_name": "jan kili",
        "timestamp": 1665584075
    },
    {
        "content": "<p>contents is a <code>List u8</code> i believe</p>",
        "id": 303636323,
        "sender_full_name": "Travis",
        "timestamp": 1665584125
    },
    {
        "content": "<p>wait maybe its a Str. next line is:<br>\n<code>raw = Str.toUtf8 contents</code></p>",
        "id": 303636459,
        "sender_full_name": "Travis",
        "timestamp": 1665584174
    },
    {
        "content": "<p>(there is a File.readBytes that you might like)</p>",
        "id": 303636536,
        "sender_full_name": "jan kili",
        "timestamp": 1665584204
    },
    {
        "content": "<p>But yes, that sounds like a good aim, for contents to be a str</p>",
        "id": 303636587,
        "sender_full_name": "jan kili",
        "timestamp": 1665584222
    },
    {
        "content": "<p>yeah i don't really care what type contents is, Str or List u8 is fine. but lets just say Str for now</p>",
        "id": 303636681,
        "sender_full_name": "Travis",
        "timestamp": 1665584265
    },
    {
        "content": "<p>Unfortunately, after File.readUtf8 returns a task that could Ok or Err, you're not handling/extracting either the Ok or Err cases</p>",
        "id": 303636805,
        "sender_full_name": "jan kili",
        "timestamp": 1665584293
    },
    {
        "content": "<p>this is just for demoing my zig platform</p>",
        "id": 303636816,
        "sender_full_name": "Travis",
        "timestamp": 1665584300
    },
    {
        "content": "<p>I recommend changing <code>contents</code> to <code>result</code></p>",
        "id": 303637061,
        "sender_full_name": "jan kili",
        "timestamp": 1665584386
    },
    {
        "content": "<p>deleting the onFail logic and just awaiting the file read</p>",
        "id": 303637139,
        "sender_full_name": "jan kili",
        "timestamp": 1665584404
    },
    {
        "content": "<p>then on a new line handle the result</p>",
        "id": 303637206,
        "sender_full_name": "jan kili",
        "timestamp": 1665584424
    },
    {
        "content": "<p>ok sounds good. i'll see what i can do.</p>",
        "id": 303637249,
        "sender_full_name": "Travis",
        "timestamp": 1665584441
    },
    {
        "content": "<p>thanks!</p>",
        "id": 303637274,
        "sender_full_name": "Travis",
        "timestamp": 1665584447
    },
    {
        "content": "<p>After that works, recombining the lines is still an option but you'll have a working baseline :)</p>",
        "id": 303637289,
        "sender_full_name": "jan kili",
        "timestamp": 1665584452
    },
    {
        "content": "<p>You bet!</p>",
        "id": 303637298,
        "sender_full_name": "jan kili",
        "timestamp": 1665584457
    },
    {
        "content": "<p>And in case it's a point of confusion, stderr writing isn't a side effect</p>",
        "id": 303637491,
        "sender_full_name": "jan kili",
        "timestamp": 1665584522
    },
    {
        "content": "<p>hold on. how can i get a Result without stopping the subsequent chain of Tasks? Task.attempt?</p>",
        "id": 303637591,
        "sender_full_name": "Travis",
        "timestamp": 1665584557
    },
    {
        "content": "<p>thats what i was trying to use but having some problems. does it sound like it should work?</p>",
        "id": 303637707,
        "sender_full_name": "Travis",
        "timestamp": 1665584599
    },
    {
        "content": "<p>maybe you are saying instead of backpassing handle contents in a new function?</p>",
        "id": 303637957,
        "sender_full_name": "Travis",
        "timestamp": 1665584696
    },
    {
        "content": "<p>Shouldn't this work?</p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">contents</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Path</span><span class=\"o\">.</span><span class=\"n\">fromStr</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">File</span><span class=\"o\">.</span><span class=\"n\">readUtf8</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">onFail</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"err\">\\</span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Stderr</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"s2\">\"oops\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 303638037,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665584719
    },
    {
        "content": "<p>ooh seems closer. now i get an unexpected type error...</p>",
        "id": 303638310,
        "sender_full_name": "Travis",
        "timestamp": 1665584791
    },
    {
        "content": "<p>the diff is <code>Task {}</code> vs <code>Task Str</code></p>",
        "id": 303638485,
        "sender_full_name": "Travis",
        "timestamp": 1665584852
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"go\">This 2nd argument to onFail has an unexpected type:</span>\n\n<span class=\"go\">31│            |&gt; Task.onFail (\\_ -&gt; Stderr.line \"oops\")</span>\n<span class=\"go\">                               ^^^^^^^^^^^^^^^^^^^^^^^^</span>\n\n<span class=\"go\">The argument is an anonymous function of type:</span>\n\n<span class=\"go\">    [FileReadErr Path ReadErr,</span>\n<span class=\"go\">    FileReadUtf8Err Path [BadUtf8 Utf8ByteProblem Nat]*]* -&gt;</span>\n<span class=\"go\">    Task {} * [Read [File]*, Write [Stderr]*]a ?</span>\n\n<span class=\"go\">But onFail needs its 2nd argument to be:</span>\n\n<span class=\"go\">    [FileReadErr Path ReadErr,</span>\n<span class=\"go\">    FileReadUtf8Err Path [BadUtf8 Utf8ByteProblem Nat]*]* -&gt;</span>\n<span class=\"go\">    Task Str * [Read [File]*, Write [Stderr]*]a ?</span>\n</code></pre></div>",
        "id": 303638551,
        "sender_full_name": "Travis",
        "timestamp": 1665584878
    },
    {
        "content": "<p>last line and 4th from last</p>",
        "id": 303638644,
        "sender_full_name": "Travis",
        "timestamp": 1665584898
    },
    {
        "content": "<p>seems i just need to return a string there</p>",
        "id": 303638733,
        "sender_full_name": "Travis",
        "timestamp": 1665584930
    },
    {
        "content": "<p>Ah, <code>onFail</code> expects you to return a task that gives you a new value for contents. So a <code>Str</code></p>",
        "id": 303638815,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665584952
    },
    {
        "content": "<p>So this would work, but doesn't print of coures</p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">contents</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Path</span><span class=\"o\">.</span><span class=\"n\">fromStr</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">File</span><span class=\"o\">.</span><span class=\"n\">readUtf8</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">onFail</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"err\">\\</span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">succeed</span><span class=\"w\"> </span><span class=\"s2\">\"Some backup content value\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 303638937,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665584990
    },
    {
        "content": "<p>ah neat. well atleast i'll be able to see that an error happened. this will work ok for my use case.</p>",
        "id": 303639153,
        "sender_full_name": "Travis",
        "timestamp": 1665585058
    },
    {
        "content": "<p>thank you both <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 303639176,
        "sender_full_name": "Travis",
        "timestamp": 1665585068
    },
    {
        "content": "<p>So the current implementation of <code>onFail</code> doesn't work the way we expected here.</p>\n<p>I think you would need to do:</p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">contents</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Path</span><span class=\"o\">.</span><span class=\"n\">fromStr</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">File</span><span class=\"o\">.</span><span class=\"n\">readUtf8</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">onFail</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"err\">\\</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nc\">Stderr</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"s2\">\"oops\"</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">fail</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">await</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 303639281,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665585104
    },
    {
        "content": "<p>Probably would want a different helper function</p>",
        "id": 303639311,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665585117
    },
    {
        "content": "<p>So I guess <code>onFail</code> is really \"if I fail, try to recover and continue by doing this\"</p>\n<p>You want, \"if I fail, do this, but stay as a failure\"</p>",
        "id": 303648325,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665585150
    },
    {
        "content": "<p>This is probably worth making an issue for, or at least a discussion in <a class=\"stream\" data-stream-id=\"304641\" href=\"/#narrow/stream/304641-ideas\">#ideas</a>. Seems like a generally useful Task function that we are missing. Also a possible naming confusion/conflict.</p>",
        "id": 303648696,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665585297
    },
    {
        "content": "<p>yes. it would be nice to have a helper for that.  i agree.</p>",
        "id": 303648842,
        "sender_full_name": "Travis",
        "timestamp": 1665585352
    },
    {
        "content": "<p>maybe ill post some of this in ideas in a bit.</p>",
        "id": 303648940,
        "sender_full_name": "Travis",
        "timestamp": 1665585373
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"551275\">Travis</span> has marked this topic as resolved.</p>",
        "id": 303649428,
        "sender_full_name": "Notification Bot",
        "timestamp": 1665585538
    },
    {
        "content": "<p>That last code snippet works if the file exists (the <code>Ok</code> case), but it panics if it doesn't (the <code>Err</code> case):</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;main&#39; panicked at &#39;not yet implemented: Report a file open error&#39;, src/lib.rs:375:13\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\nfatal runtime error: failed to initiate panic, error 5\nAborted (core dumped)\n</code></pre></div>",
        "id": 303658189,
        "sender_full_name": "jan kili",
        "timestamp": 1665586564
    },
    {
        "content": "<p>Oh, that's not a roc issue, that's a rust platform issue.</p>",
        "id": 303658741,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665586752
    },
    {
        "content": "<p>The platform doesn't handle all errors yet</p>",
        "id": 303658762,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665586762
    },
    {
        "content": "<p>So some cases it just panics</p>",
        "id": 303658791,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665586769
    },
    {
        "content": "<p>Oh... Oh! I just now understood the \"stderr quick exit\" approach you two are both taking... that's cool.</p>",
        "id": 303659159,
        "sender_full_name": "jan kili",
        "timestamp": 1665586874
    },
    {
        "content": "<p>oh reeeeaaalllly? <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> i think i was able to get it working in my zig platform</p>",
        "id": 303659167,
        "sender_full_name": "Travis",
        "timestamp": 1665586876
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$</span>roc platform-test/main.roc -- asfd\n<span class=\"go\">🔨 Rebuilding platform...</span>\n<span class=\"go\">----</span>\n<span class=\"go\">File.readUtf8 platform-test/main.roc:</span>\n<span class=\"go\">----</span>\n<span class=\"go\">app \"platform-main\"</span>\n<span class=\"go\">    packages { ...(truncated)</span>\n<span class=\"go\">----</span>\n<span class=\"go\">not-a-file:               Not Found</span>\n</code></pre></div>",
        "id": 303659282,
        "sender_full_name": "Travis",
        "timestamp": 1665586916
    },
    {
        "content": "<p>like just got it working this morning doing some error handling in <code>roc_fx_fileReadBytes</code></p>",
        "id": 303659473,
        "sender_full_name": "Travis",
        "timestamp": 1665586968
    },
    {
        "content": "<p>I never realized you could write a backpassing chain that handles early exits halfway through...</p>",
        "id": 303659513,
        "sender_full_name": "jan kili",
        "timestamp": 1665586981
    },
    {
        "content": "<p>That's great!</p>",
        "id": 303659556,
        "sender_full_name": "jan kili",
        "timestamp": 1665586995
    },
    {
        "content": "<p>I mean the pipelining is handling the early exits. The backpass once triggered would be too late.</p>",
        "id": 303659640,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665587031
    },
    {
        "content": "<p>That said, it is also valid to just accumulate the errors and handle them all at the end in one place.</p>",
        "id": 303659835,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665587079
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>        happy &lt;-\n            input\n            |&gt; process\n            |&gt; ifSad exitSadly\n            |&gt; await\n        smile &lt;-\n            happy\n            |&gt; react\n            |&gt; ifFrown goToFrownTown\n            |&gt; await\n        smile\n        |&gt; welcomeToSmileTown\n</code></pre></div>",
        "id": 303660118,
        "sender_full_name": "jan kili",
        "timestamp": 1665587165
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/.E2.9C.94.20print.20err.20if.20file.20not.20found/near/303659835\">said</a>:</p>\n<blockquote>\n<p>That said, it is also valid to just accumulate the errors and handle them all at the end in one place.</p>\n</blockquote>\n<p>Related to this, if you accumulate all errors, how can you avoid error Tag naming conflict from different lib/package?</p>",
        "id": 303660194,
        "sender_full_name": "Ghislain",
        "timestamp": 1665587194
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> I credit backpassing with this \"early escape\" functionality, because if you only have <code>|&gt;</code>s with no <code>&lt;-</code> then at the end of the pipeline you'll have to handle a complex multi-type for all possible outcomes.</p>",
        "id": 303660570,
        "sender_full_name": "jan kili",
        "timestamp": 1665587303
    },
    {
        "content": "<p>...hence why I was going to suggest changing <code>contents</code> to <code>result</code> and then doing the <code>Err</code> handling after.</p>",
        "id": 303660681,
        "sender_full_name": "jan kili",
        "timestamp": 1665587336
    },
    {
        "content": "<p>With <code>&lt;-</code>, you can add mid-pipeline handler steps to narrow the type \"returned\" by <code>&lt;-</code>, because you're essentially narrowing the branches that the final callback must handle.</p>",
        "id": 303661032,
        "sender_full_name": "jan kili",
        "timestamp": 1665587441
    },
    {
        "content": "<p>This might be understood by everyone else here, but it's news to me :D</p>",
        "id": 303661096,
        "sender_full_name": "jan kili",
        "timestamp": 1665587464
    },
    {
        "content": "<p>related to this, is there a way to get the tag name as a string? or would i just have to do a manual switch?</p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">onFail</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"err\">\\</span><span class=\"bp\">_</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">succeed</span><span class=\"w\"> </span><span class=\"s2\">\"Not Found\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\">#TODO print error tag somehow</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 303661120,
        "sender_full_name": "Travis",
        "timestamp": 1665587472
    },
    {
        "content": "<p>your would just add a lambda to the last await in the pipeline, it would be the same thing with more indentation.</p>",
        "id": 303661136,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665587479
    },
    {
        "content": "<p>manual switch</p>",
        "id": 303661212,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665587505
    },
    {
        "content": "<blockquote>\n<p>Tag naming conflict from different lib/package?</p>\n</blockquote>\n<p>Wrap them by package or function or etc</p>",
        "id": 303661341,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665587535
    },
    {
        "content": "<p>i think i'm spoiled by zig here</p>",
        "id": 303661379,
        "sender_full_name": "Travis",
        "timestamp": 1665587553
    },
    {
        "content": "<p>haha. Sounds reasonable. Zig is a nice language.</p>",
        "id": 303661408,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665587569
    },
    {
        "content": "<p>yeah @tagName would be nice here</p>",
        "id": 303661476,
        "sender_full_name": "Travis",
        "timestamp": 1665587594
    },
    {
        "content": "<p>That's something else that could be worth putting in the <a class=\"stream\" data-stream-id=\"304641\" href=\"/#narrow/stream/304641-ideas\">#ideas</a> stream.</p>",
        "id": 303662711,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1665588003
    }
]