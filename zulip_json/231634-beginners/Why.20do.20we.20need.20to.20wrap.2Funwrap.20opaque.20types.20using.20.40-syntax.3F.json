[
    {
        "content": "<p>It's taking me a while to get an intuition for opaque types in Roc. I realize now that they're closer to type aliases than tags. I think part of the reason it's taking me some time to build intuition for opaque types in Roc is that I'm used to how Elm and Haskell do opaque unexposed type constructors.</p>\n<p>I also think the syntax for constructing and deconstructing opaque types puts me on the wrong foot a bit: It makes it look like we're wrapping and unwrapping a value in a constructor, similar to how you do tags in Roc or constructors in Elm and Haskell. Also, while in Elm/Haskell there's a nice symmetry between how you define the type (constructors with other types as parameters) and how you use types (same constructors, but parameters are nov values), in Roc the definition of the type using <code>:=</code>, and the use of the type using <code>@</code> is visually distinct.</p>\n<p>I think opaque types would feel a lot more like aliases if you didn't need the <code>@</code> syntax, like so:</p>\n<div class=\"codehilite\"><pre><span></span><code>Foo := { bar : U8 }\n\ngetBar : Foo -&gt; U8\ngetBar = \\{ bar: 4 } -&gt; bar\n</code></pre></div>\n<p>Which made me wonder why it doesn't work this way. Is it to allow type inference to distinguish between values meant to represent the opaque type the type it \"aliases\"? Are the <code>@..</code> \"constructors\" essentially type annotations?</p>",
        "id": 429059869,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1711180227
    },
    {
        "content": "<p>pretty much - another way to think of it is that otherwise type annotations would be required to tell what the behavior of the value is</p>",
        "id": 429071960,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1711192508
    },
    {
        "content": "<p>because adding a type annotation could change what ability implementations it had</p>",
        "id": 429072059,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1711192598
    },
    {
        "content": "<p>comparing how Roc does it to Elm, opaque types in Roc are basically 1-constructor, 1-payload custom types where the constructor isn't allowed to be exposed, e.g.</p>\n<p>Roc</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kt\">Foo</span><span class=\"w\"> </span><span class=\"kt\">:=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"nf\">getBar</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Foo</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">U8</span>\n<span class=\"nf\">getBar</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"o\">\\@</span><span class=\"kt\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">bar</span>\n</code></pre></div>\n<p>Elm</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kr\">type</span><span class=\"w\"> </span><span class=\"kt\">Foo</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"nf\">getBar</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Foo</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">U8</span>\n<span class=\"nf\">getBar</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"kt\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">bar</span>\n</code></pre></div>\n<p>so the differences are:</p>\n<ul>\n<li>comparing <code>Foo := ...</code> to <code>type Foo = Foo ...</code> you don't need to repeat the <code>Foo</code>, but otherwise it's basically saying the same thing</li>\n<li>comparing <code>getBar = \\Foo { bar } -&gt; bar</code> and <code>getBar = \\@Foo { bar } -&gt; bar</code> the difference is just the <code>@</code>, which we need to distinguish between tags and opaque wrappers (because <code>\\Foo { bar } -&gt;</code> always means a tag in Roc, not an opaque type wrapper)</li>\n</ul>",
        "id": 429072339,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1711192871
    },
    {
        "content": "<p>Thanks Richard! I guess that's the part what I was thinking about, thinking of opaque types as a wrapper.</p>\n<p>Question: Do you use the wrapper analogy to explain opaque types to most audiences, or would you only do that with someone you know is familiar with Elm or Haskell?</p>\n<p>The question underlying that previous question: I'm wondering if seeing opaque types as wrappers is helpful or not to understanding what they are / how to use them.</p>",
        "id": 430172659,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1711665704
    },
    {
        "content": "<p>that's a good question...I haven't really thought about it, to be honest!</p>",
        "id": 430187180,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1711675335
    }
]