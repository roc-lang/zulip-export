[
    {
        "content": "<p>I've been looking at the new record builder syntax, and not sure if it is possible to use it currently. I think we need a new function added to <code>basic-cli</code> to enable the applicative API, but not sure. Am I correct in saying that we need the following function to be able to use record builders with <code>Task</code>? </p>\n<div class=\"codehilite\"><pre><span></span><code>Task.apply : Task a err -&gt; Task (a -&gt; b) err -&gt; Task b err\n</code></pre></div>\n<p>My goal was to understand what an applicative API looks like, so I can understand where this language feature may be applied.</p>",
        "id": 364994459,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1686356997
    },
    {
        "content": "<p>I've made an example below, it's contrived but I wanted to just get something basic working. </p>\n<div class=\"codehilite\"><pre><span></span><code>% roc run Experiments/Applicative.roc\nApples: Granny Smith, Pink Lady, Golden Delicious\nOranges: Navel, Blood Orange, Clementine\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>app &quot;applicative&quot;\n    packages {\n        pf: &quot;https://github.com/roc-lang/basic-cli/releases/download/0.3.2/tE4xS_zLdmmxmHwHih9kHWQ7fsXtJr7W7h3425-eZFk.tar.br&quot;,\n    }\n    imports [\n        pf.Stdout,\n        pf.Task.{Task},\n    ]\n    provides [main] to pf\n\nmain =\n\n    myrecord : Task { apples : List Str, oranges : List Str } []\n    myrecord = Task.succeed {\n        apples: &lt;- getFruit Apples |&gt; apply,\n        oranges: &lt;- getFruit Oranges |&gt; apply,\n    }\n\n    {apples,oranges} &lt;- myrecord |&gt; Task.await\n\n    &quot;Apples: &quot;\n    |&gt; Str.concat (Str.joinWith apples &quot;, &quot;)\n    |&gt; Str.concat &quot;\\n&quot;\n    |&gt; Str.concat &quot;Oranges: &quot;\n    |&gt; Str.concat (Str.joinWith oranges &quot;, &quot;)\n    |&gt; Stdout.line\n\ngetFruit : [Apples, Oranges] -&gt; Task (List Str) []\ngetFruit = \\request -&gt;\n    when request is\n        Apples -&gt; Task.succeed [&quot;Granny Smith&quot;, &quot;Pink Lady&quot;, &quot;Golden Delicious&quot;]\n        Oranges -&gt; Task.succeed [&quot;Navel&quot;, &quot;Blood Orange&quot;, &quot;Clementine&quot;]\n\napply : Task a err -&gt; (Task (a -&gt; b) err -&gt; Task b err)\napply = \\first -&gt; \\second -&gt;\n    result &lt;- second |&gt; Task.attempt\n\n    when result is\n        Ok f -&gt; Task.map first f\n        Err err -&gt; Task.fail err\n</code></pre></div>",
        "id": 364996152,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1686357966
    },
    {
        "content": "<p>Ok, I think this is really cool. It also works with <code>Result</code> <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> </p>\n<div class=\"codehilite\"><pre><span></span><code>% roc run Experiments/Applicative.roc\nInsufficient fruit available\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>app &quot;applicative&quot;\n    packages {\n        pf: &quot;https://github.com/roc-lang/basic-cli/releases/download/0.3.2/tE4xS_zLdmmxmHwHih9kHWQ7fsXtJr7W7h3425-eZFk.tar.br&quot;,\n    }\n    imports [\n        pf.Stdout,\n    ]\n    provides [main] to pf\n\nmain =\n\n    myrecord : Result { apples : List Str, oranges : List Str } [LackOfFruit]\n    myrecord = Ok {\n        apples: &lt;- getFruit Apples |&gt; apply,\n        oranges: &lt;- getFruit Oranges |&gt; apply,\n    }\n\n    when myrecord is\n        Ok {apples,oranges} -&gt;\n            &quot;Apples: &quot;\n            |&gt; Str.concat (Str.joinWith apples &quot;, &quot;)\n            |&gt; Str.concat &quot;\\n&quot;\n            |&gt; Str.concat &quot;Oranges: &quot;\n            |&gt; Str.concat (Str.joinWith oranges &quot;, &quot;)\n            |&gt; Stdout.line\n        Err LackOfFruit -&gt;\n            Stdout.line &quot;Insufficient fruit available&quot;\n\ngetFruit : [Apples, Oranges] -&gt; Result (List Str) [LackOfFruit]\ngetFruit = \\request -&gt;\n    when request is\n        Apples -&gt; Ok [&quot;Granny Smith&quot;, &quot;Pink Lady&quot;, &quot;Golden Delicious&quot;]\n        # Oranges -&gt; Ok [&quot;Navel&quot;, &quot;Blood Orange&quot;, &quot;Clementine&quot;]\n        Oranges -&gt; Err LackOfFruit\n\napply : Result a err -&gt; (Result (a -&gt; b) err -&gt; Result b err)\napply = \\first -&gt; \\second -&gt;\n    when second is\n        Ok f -&gt; Result.map first f\n        Err err -&gt; Err err\n</code></pre></div>",
        "id": 364998869,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1686359573
    },
    {
        "content": "<p>So, I guess my question here is probably more suited for <a class=\"stream\" data-stream-id=\"304641\" href=\"/#narrow/stream/304641-ideas\">#ideas</a> but, should we add the applicative \"apply\" to <code>Result</code> and <code>Task</code> to enable the use of record builder?</p>",
        "id": 364999019,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1686359646
    },
    {
        "content": "<p>and a follow up question, what should the implementation look like, I just used <code>first</code> and <code>second</code> as I have no idea what to name these variables.</p>",
        "id": 364999075,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1686359692
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/231634-beginners/topic/Task.20apply/near/364999019\">said</a>:</p>\n<blockquote>\n<p>So, I guess my question here is probably more suited for <a class=\"stream\" data-stream-id=\"304641\" href=\"/#narrow/stream/304641-ideas\">#ideas</a> but, should we add the applicative \"apply\" to <code>Result</code> and <code>Task</code> to enable the use of record builder?</p>\n</blockquote>\n<p>I think it's a good idea to should start an <code>#ideas</code> for <code>Result</code> <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 365000245,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686360414
    },
    {
        "content": "<p>for <code>Task</code>, we 100% definitely want to, and I like the name <code>Task.batch</code> for it. If others prefer a different name, we could discuss, but I'm also fine with saying we could go ahead with adding <code>Task.batch</code> to <code>basic-cli</code> and implement it by chaining together <code>Task.await</code>s</p>",
        "id": 365000333,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686360480
    },
    {
        "content": "<p>having <code>Task.batch</code> run concurrently requires <a class=\"stream-topic\" data-stream-id=\"304641\" href=\"/#narrow/stream/304641-ideas/topic/Task.20as.20builtin\">#ideas &gt; Task as builtin</a> (<code>apply</code> and <code>map2</code> are two sides of the same coin, and each can be implemented in terms of the other) but we can still offer the API right now even if it doesn't run concurrently, and then upgrade it behind the scenes in the future to make it concurrent!</p>",
        "id": 365000423,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686360537
    },
    {
        "content": "<p>also I think we might as well add <code>map2</code> for both <code>Result</code> and <code>Task</code> while we're at it <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 365000504,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686360581
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/231634-beginners/topic/Task.20apply/near/364998869\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">myrecord</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">apples</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">oranges</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">LackOfFruit</span><span class=\"p\">]</span>\n<span class=\"nf\">myrecord</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">apples</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"ow\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">getFruit</span><span class=\"w\"> </span><span class=\"kt\">Apples</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">oranges</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"ow\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">getFruit</span><span class=\"w\"> </span><span class=\"kt\">Oranges</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Interesting - I never even considered this usage!</p>\n<p>When you're building a record anyway, it's a more concise alternative to <code>Result.try</code> and backpassing:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">myrecord</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">apples</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">oranges</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">LackOfFruit</span><span class=\"p\">]</span>\n<span class=\"nf\">myrecord</span><span class=\"w\"> </span><span class=\"ow\">=</span>\n<span class=\"w\">    </span><span class=\"n\">apples</span><span class=\"w\"> </span><span class=\"ow\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">getFruit</span><span class=\"w\"> </span><span class=\"kt\">Apples</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"o\">.</span><span class=\"n\">try</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">oranges</span><span class=\"w\"> </span><span class=\"ow\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">getFruit</span><span class=\"w\"> </span><span class=\"kt\">Oranges</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"o\">.</span><span class=\"n\">try</span><span class=\"p\">,</span>\n\n<span class=\"w\">    </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">apples</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">oranges</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 365000855,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686360772
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> do the function arguments to <code>batch</code> have special names? I am using <code>first</code> and <code>second</code> here which seem wrong</p>",
        "id": 365004226,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1686362867
    },
    {
        "content": "<p>that's a good question! I'm not aware of any precedent for good names here, to be honest <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 365004309,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686362912
    },
    {
        "content": "<p>it's a type that is all of these things:</p>\n<ul>\n<li>very useful</li>\n<li>funny-looking</li>\n<li>historically lacking in helpful names</li>\n</ul>",
        "id": 365004352,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686362947
    },
    {
        "content": "<p>hopefully we can figure some out!</p>",
        "id": 365004361,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1686362961
    },
    {
        "content": "<p>Posting in <a class=\"stream\" data-stream-id=\"304641\" href=\"/#narrow/stream/304641-ideas\">#ideas</a></p>",
        "id": 365004707,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1686363202
    }
]