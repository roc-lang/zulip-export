[
    {
        "content": "<p>I am playing around with Roc and thought of a way to get trivial OO semantics using function closures and records:</p>\n<div class=\"codehilite\"><pre><span></span><code>math = \\n -&gt;  {\n    addn: \\a, b -&gt;\n        a + b + n,\n    subn: \\a, b -&gt; a - b + n,\n    foo: \\_ -&gt; n\n}\np = math 10\nexpect p.addn 1 2 == 13\nexpect p.subn 5 2 == 13\nexpect p.foo 1 == 10\n</code></pre></div>\n<p>But I could not specify functions that take no parameters. I had to use a placeholder, <code>foo: \\_ -&gt; n</code> to do so. I tried <code>foo: \\ -&gt; n</code>, but the compiler gets stuck with: \"TODO provide more context.\"</p>",
        "id": 409936366,
        "sender_full_name": "Sanjay Chouksey",
        "timestamp": 1703534284
    },
    {
        "content": "<p>A pure function with no parameters cannot change its output and so is a constant =)<br>\nSo <code>foo: n</code><br>\nTo work around this the convention I think is to pass an empty value - <code>{}</code>, and pattern match it in the argument to <code>{}</code><br>\n<code>foo: \\ {} -&gt; n</code><br>\nBut I think the only advantage this gives in Roc is deferring the execution of the body until needed</p>",
        "id": 409937514,
        "sender_full_name": "Karakatiza",
        "timestamp": 1703535326
    },
    {
        "content": "<p>Yep</p>",
        "id": 409939143,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703537307
    },
    {
        "content": "<p>And it allows more polymorphisms of the type. A value becomes a concrete type. A function can return something that can become one of multiple possible types.</p>",
        "id": 409939156,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703537362
    },
    {
        "content": "<p>As in <code>List a</code> will become a concrete type when used like maybe <code>List U32</code>. A function that returns a <code>List a</code> can generate a different list type on each call. So maybe <code>List U32</code> one time and <code>List U8</code> another time.</p>",
        "id": 409939229,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703537456
    }
]