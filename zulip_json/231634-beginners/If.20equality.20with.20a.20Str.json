[
    {
        "content": "<p>I found this issue and thought this was strange behaviour.</p>\n<p><a href=\"https://github.com/roc-lang/roc/issues/6919\">https://github.com/roc-lang/roc/issues/6919</a></p>\n<p>Basically it doesn't seem to match on the first string, but it does on the others. </p>\n<p>Am I missing something obvious here?</p>",
        "id": 453058009,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1721611338
    },
    {
        "content": "<p>I tried to make a minimal repro of the issue</p>",
        "id": 453058053,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1721611393
    },
    {
        "content": "<p>It's like there is something funny going on with memory, like something is writing over the <code>Str</code>. Or maybe this is related to the <code>List Str</code> somehow, as I'm <code>List.map</code>ing over the strings.</p>",
        "id": 453058950,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1721612189
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> could this be related to the refcount changes?</p>",
        "id": 453058980,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1721612240
    },
    {
        "content": "<p>Yeah, I think it's related to having a List of refcounted things. </p>\n<p>Here's an even smaller repro</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kr\">module</span><span class=\"w\"> </span><span class=\"err\">[]</span>\n\n<span class=\"err\">from</span><span class=\"nn\">Str</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"kr\">_</span>\n<span class=\"nf\">fromStr</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"n\">raw</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"n\">raw</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s\">\"﻿FOO\"</span><span class=\"w\"> </span><span class=\"kr\">then</span><span class=\"w\"> </span><span class=\"kt\">FOO</span>\n<span class=\"w\">    </span><span class=\"kr\">else</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"n\">raw</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s\">\"BAR\"</span><span class=\"w\"> </span><span class=\"kr\">then</span><span class=\"w\"> </span><span class=\"kt\">BAR</span>\n<span class=\"w\">    </span><span class=\"kr\">else</span><span class=\"w\"> </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"n\">raw</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s\">\"BAZ\"</span><span class=\"w\"> </span><span class=\"kr\">then</span><span class=\"w\"> </span><span class=\"kt\">BAZ</span>\n<span class=\"w\">    </span><span class=\"kr\">else</span><span class=\"w\"> </span><span class=\"kt\">OTHER</span>\n\n<span class=\"nf\">expect</span>\n<span class=\"w\">    </span><span class=\"n\">actual</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"FOO\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"BAR\"</span><span class=\"p\">,</span><span class=\"s\">\"BAZ\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"n\">fromStr</span>\n<span class=\"w\">    </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">FOO</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">BAR</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">BAZ</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"n\">actual</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">expected</span>\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>actual = [OTHER, BAR, BAZ]\nexpected = [FOO, BAR, BAZ]\n</code></pre></div>",
        "id": 453059246,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1721612469
    },
    {
        "content": "<p>Interesting</p>",
        "id": 453059834,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721612967
    },
    {
        "content": "<p>I'm trying to debug this further... is there any way I can dump the IR at any of the stages in the compiler?</p>\n<p>I've tried things like this <code>$ ROC_CHECK_MONO_IR=1 ./target/debug/roc test Broken.roc</code>.</p>",
        "id": 453060170,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1721613245
    },
    {
        "content": "<p>It's for a module (and not an app) so I don't think I can <code>--emit-llvm-ir</code> or anything</p>",
        "id": 453060197,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1721613268
    },
    {
        "content": "<p>Just put it into platform switching and use the book to decide what you will print</p>",
        "id": 453060226,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721613302
    },
    {
        "content": "<p>Then it will be a full app and easier to dbg in general</p>",
        "id": 453060243,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721613320
    },
    {
        "content": "<p>Big thank you to <span class=\"user-mention\" data-user-id=\"409422\">@Basile Henry</span> who I think found the underlying issue here. There are empty/non-printable characters in the \"FOO\" string that aren't displayed. I'll raise an idea thread to see if there is a way we can help others in future avoid this issue.</p>",
        "id": 453801760,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1721857085
    },
    {
        "content": "<blockquote>\n<p>There are empty/non-printable characters in the \"FOO\" string that aren't displayed.</p>\n</blockquote>\n<p>Does it contain a zwj or something?</p>",
        "id": 453803597,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1721857971
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>» Str.toUtf8 &quot;FOO&quot;\n\n[70, 79, 79] : List U8\n» Str.toUtf8 &quot;﻿FOO&quot;\n\n[239, 187, 191, 70, 79, 79] : List U8\n</code></pre></div>",
        "id": 453805537,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1721858776
    },
    {
        "content": "<p>I'm not sure</p>",
        "id": 453805702,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1721858818
    }
]