[
    {
        "content": "<p>Hi! I would like to ask you about the general idea regarding two kind of errors/exceptions:</p>\n<ul>\n<li>those we expect and are supposed to handle</li>\n<li>those we know can happen, but we won't bother , as there is nothing to do about them other than handle \"somewhere else\", in lower parts of the system</li>\n</ul>\n<p>I am not sure I could be much more descriptive than what I've learned from Scott Wlaschin, especially:</p>\n<ul>\n<li><a href=\"https://fsharpforfunandprofit.com/rop/\">Railway Oriented Programming</a> as an introduction, and</li>\n<li><a href=\"https://fsharpforfunandprofit.com/posts/against-railway-oriented-programming/\">Against Railway-Oriented Programming</a> as a six year later followup.</li>\n</ul>\n<p>This is also something I do think a lot. For example: should an SQL library return a <code>Result</code> type from a <code>SELECT * FROM …</code>, describing errors like <code>DatabaseConnectionError</code> or <code>TableNotFoundError</code>? </p>\n<p>From my perspective, when I code a µservice, the only reason for these errors is that the infrastructure is down or failed to provision the database during deployment. There is absolutely nothing I can do about it in my µservice other than just explode and let \"the infrastructure people\" fix the deployment. So, in my very case, when I code using F# PostrgeSQL lib, I do know the query functions can throw, but I would not do anything about it. Especially I would not like to annotate my own functions with <code>DatabaseConnectionError</code> all over the place.</p>\n<p>On the other side, if I was to write a database browser, I would not like to \"panic\" if user provides incorrect database URL or if the table is missing. That would have to be handled as a regular error in-place.</p>\n<p>Is the try/catch style of exception possible in Roc? Does it have it's place? What is you say about this?  What would you do in both cases described above?</p>",
        "id": 469400124,
        "sender_full_name": "witoldsz",
        "timestamp": 1726061939
    },
    {
        "content": "<p>The new ? operator makes it much easier to implicitly chain results together so that you can get the “let someone else deal with this” behavior. Every function still needs to be wrapped in a Result, but you can let the errors flow freely without thinking about them. If you want to handle some errors, you of course still can by omitting the ?. This is not quite the same as exceptions, but I think it lets you get most of the nice qualities of exceptions with the big upside that errors are normal values. It seems very unlikely that exceptions will be added to Roc.</p>",
        "id": 469439170,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1726068497
    },
    {
        "content": "<p>We have <code>Result</code> for the default error handling type. I would expect essentially all libraries to return results that include things like <code>DatabaseConnectionError</code>.</p>\n<p>Roc also has <code>crash</code>. Libraries are pushed to never use it. The main exception is truly impossible states.</p>\n<p>There is no catch for roc crashes. Though the platform can clean up state and keep running.</p>\n<p>If you don't want to handle database errors, I would expect the application (not library) to explicitly crash when give one.</p>\n<p>That said, it is much much more common to just propagate the error and move on.</p>",
        "id": 469439466,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726068582
    },
    {
        "content": "<p>I agree that libraries should not use <code>crash</code>. The only place I've used it in a library is in <a href=\"https://github.com/smores56/weaver\">Weaver</a>, the CLI parsing lib. If your CLI parser has invalid configuration, I provide an <a href=\"https://github.com/smores56/weaver/blob/25394010392019dc1836b45b3f6a9af2b8c66046/package/Cli.roc#L306\">assertValid</a> function that calls <code>crash</code> to quit the entire app early. This use of <code>crash</code> is only viable because it's used as a way to ensure that code is written correctly, and the app shouldn't be running if your CLI config is invalid.</p>\n<p>Even then, there is still a <a href=\"https://github.com/smores56/weaver/blob/25394010392019dc1836b45b3f6a9af2b8c66046/package/Cli.roc#L261\">finishWithoutValidating</a> function that allows the user to handle the error themselves without crashing. In short, <code>crash</code> is for when you may as well quit running the app.</p>",
        "id": 469441575,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1726068975
    },
    {
        "content": "<p>I was actually reading <a href=\"https://cedardb.com/blog/exceptions_vs_errors/\">this Exceptions vs. Errors article</a> yesterday, and it brought up the same concept. Based on what my coworker told me about what Rich said in this <a href=\"https://www.youtube.com/watch?v=ug-KuDlMTYw\">Hybrid-Level Programming</a> talk from SYCL 2024, I think that app authors that own their platform code could feasibly have Roc do \"error handling\", and the platform do \"exception handling\". </p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"ug-KuDlMTYw\" href=\"https://www.youtube.com/watch?v=ug-KuDlMTYw\"><img src=\"https://uploads.zulipusercontent.net/f4d83a2c76a1c464099962ec429fbfdf4ec16022/68747470733a2f2f692e7974696d672e636f6d2f76692f75672d4b75446c4d5459772f64656661756c742e6a7067\"></a></div><p>Error handling is what Roc currently does: if expected failures occur during execution, then we represent them with error tag unions in Results, and optionally propagate errors when a function thinks a parent should handle said error.</p>\n<p>\"Exception\" handling happens in the platform: if in <code>basic-webserver</code> the platform gets an unmanageable error from the DB, that isn't returned as a Roc Result, no return even happens! We just send that error to be handled on the Rust side without ever finishing the Roc handling code. This is only feasible once we make custom platform code simple enough for app authors to <strong>want to own themselves</strong>, as currently they're strongly incentivized to currently just use a Roc team release.</p>",
        "id": 469449890,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1726070734
    },
    {
        "content": "<blockquote>\n<p>I was actually reading this <a href=\"https://cedardb.com/blog/exceptions_vs_errors/\">Exceptions vs. Errors article</a> yesterday</p>\n</blockquote>\n<p>I've read it just now and I cannot agree with it. IMHO, the author is providing a <strong>false dichotomy</strong>: exceptions vs results. This is wrong: exceptions and results <strong>are complement to each other</strong>. It's why I do recommend <a href=\"https://fsharpforfunandprofit.com/posts/against-railway-oriented-programming/\">Against Railway-Oriented Programming</a> (hint: a subversive title) because it highlights the most important difference.</p>\n<p>After second (third?) thought... I do like the Haskell option. There is no place for exceptions in pure functions. Exceptions can only happen within IO operations (during execution). Roc is a pure functional language with no IO in itself. So <strong>it does make sense</strong> there is no way to throw.</p>\n<p>ALSO: from my initial post in this thread - no one can tell if a specific function (like database query) should throw or return a result <strong>without</strong> a context (writing an application backend service vs a database browser). That means, we should pick a right platform for a right job. Even better: we should be able to easily write a right platform for our specific application. This is what I am waiting for. To be able to craft a very customized, tailor-made platform for my backend services ONCE, and then focus on business logic using Roc <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> </p>\n<hr>\n<blockquote>\n<p>This is only feasible once we make custom platform code simple enough for app authors to want to own themselves</p>\n</blockquote>\n<p><strong> Amen to that! </strong> <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 469457323,
        "sender_full_name": "witoldsz",
        "timestamp": 1726072419
    },
    {
        "content": "<p>Yeah, that article was a whole lotta \"but unwrap is tempting\", which is just not true haha</p>",
        "id": 469458609,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1726072609
    },
    {
        "content": "<p>Yep, same page!</p>",
        "id": 469458793,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1726072640
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Results.20and.20Exceptions/near/469439466\">said</a>:</p>\n<blockquote>\n<p>I would expect essentially all libraries to return results that include things like <code>DatabaseConnectionError</code>.</p>\n</blockquote>\n<p>That would be <strong>so convenient</strong> for one use case an <strong>so inconvenient</strong> for other. Since it is not possible to make an universal judgement, I can see a problem for a Roc-land database drivers, as opposed to providing them through a platform which can be adjusted to focus on an application specific needs.</p>",
        "id": 469459355,
        "sender_full_name": "witoldsz",
        "timestamp": 1726072730
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515922\">witoldsz</span> <a href=\"#narrow/stream/231634-beginners/topic/Results.20and.20Exceptions/near/469457323\">said</a>:</p>\n<blockquote>\n<p>It's why I do recommend <a href=\"https://fsharpforfunandprofit.com/posts/against-railway-oriented-programming/\">Against Railway-Oriented Programming</a> (hint: a subversive title) because it highlights the most important difference.</p>\n</blockquote>\n<p>To highlight the essence:</p>\n<blockquote>\n<p>So, in this post, I’m going to lay out reasons why you shouldn’t use Railway-Oriented Programming! Or to be more precise, why you shouldn’t use the <code>Result</code> type <strong>everywhere</strong> (because ROP is just the plumbing that is used to connect <code>Result</code>-returning functions).</p>\n</blockquote>",
        "id": 469461850,
        "sender_full_name": "witoldsz",
        "timestamp": 1726073163
    },
    {
        "content": "<p>I belief roc makes working with errors as values just much easier. One thing is the <code>?</code> operator, but another is automatically accumulating error tags so that you don't have to keep wrapping errors. If you want to handle specific errors near your main function, then you can just pattern match against those tags that weren't handled yet</p>",
        "id": 469463994,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1726073652
    },
    {
        "content": "<p>I think we need more clarification around <code>crash</code>. There is a reason it is named <code>crash</code>. While a platform can manage to recover. There are limitations around how <code>crash</code> can be recovered from. It is not a replacement for generic <code>try/catch</code>. Trying to use it as such will not be nice.</p>\n<p>I think the most important piece to remember is that a package/library does not know what platform it will be used for. This makes <code>crash</code> exceptionally dangerous. If you <code>crash</code> in a library, you should assume that it will take down the entire user application. As such, <code>crash</code> in libraries should really not be used for things like <code>DatabaseConnectionError</code>. <code>crash</code> in libraries should only be used for impossible states. If a user hits a <code>crash</code> in a library, expect them to file a bug. Obviously there are exception (especially if it is explicit in the api that some function might <code>crash</code>), but it should not be used lightly.</p>\n<p>The application on the other hand, knows what platform it is built for. It also knows how it wants to handle exceptional cases. If I am writing and app for <code>basic-cli</code>, <code>crash</code> is 100% unrecoverable and will end the application. If I am querying a database, I may want to retry a handful of times before crashing. If the library, automatically crashes, I simply can't use that library. If I am writing for <code>basic-webserver</code>, <code>crash</code> will never kill the application. <code>basic-webserver</code> general pushes the application to just crash. That will return a 500 to the end user and life will move on. As such, <code>DatabaseConnectionError</code> is probably fine to be converted to a <code>crash</code> in <code>basic-webserver</code>. This conversion to a crash, should almost certainly be done in the application. It is trivial for an application to convert result error types into a <code>crash</code> if they don't want to handle the error. I think it is important for this to be an application decision.</p>\n<p>There is the case where the platform is custom to the application. In that case, <code>crash</code> may have a lot more flexibility, but it still is exceptionally limited. After a <code>crash</code>, recovery has to be done in the platform. The entire roc call stack and current state is lost. There is no <code>crash</code>, fix, and then continue where you left off. The roc state is broken. As such, platforms generally only have the ability to continue running with a fully reset state. This is really terrible if you want to do any sort of actual error recovery with logic like is done with <code>try/catch</code>. With a lot of hacky and brittle logic, more could be recovered, but it is a dangerous land to play in.</p>\n<p>TLDR: <code>crash</code> in roc is not <code>try/catch</code>. I highly advise thinking about it as much much more severe.</p>\n<p>Also, Roc is trying to make <code>Result</code> and error unions a lot nicer to use. They can feel very similar to exceptions if you need them to.</p>",
        "id": 469478580,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726078332
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Results.20and.20Exceptions/near/469478580\">said</a>:</p>\n<blockquote>\n<p>I think we need more clarification around <code>crash</code>.</p>\n</blockquote>\n<p>I do not think so. The name reflects its purpose quite well. OK, it might not be super clear for non-FP people that one of it's goal is to please type checker in some scenarios of impossible or near-impossible situations, but overall I would not mix the \"What is crash for\" into the <em>Results and Exceptions</em> thread.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"497765\">Kilian Vounckx</span> <a href=\"#narrow/stream/231634-beginners/topic/Results.20and.20Exceptions/near/469463994\">said</a>:</p>\n<blockquote>\n<p>One thing is the <code>?</code> operator, but another is automatically accumulating error tags so that you don't have to keep wrapping errors.</p>\n</blockquote>\n<p>Well, sure it helps a lot, but still: if you want to model your domain, you do not want to mix business logic with infrastructure. If I create a </p>\n<ul>\n<li><code>queryCustomer : CustomerId -&gt; Result Customer [CustomerNotFound]</code> </li>\n<li><code>queryInvoice : InvoiceId -&gt; Result Invoice [InvoiceNotFound]</code></li>\n<li>etc…</li>\n</ul>\n<p>it looks OK, but how can I avoid being forced to add <code>[…, DatabaseConnectionError, InvalidQuery, MissingArguments, Etc...]</code> to each of these?</p>\n<p>Roc's <code>?</code> (or <code>try</code> if the change is a go) helps, but it won't fix the functions signatures issue, or I am missing something <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> I am sure I do, it's all a speculation, didn't have the pleasure to try it yet <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 469684846,
        "sender_full_name": "witoldsz",
        "timestamp": 1726149651
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515922\">witoldsz</span> <a href=\"#narrow/stream/231634-beginners/topic/Results.20and.20Exceptions/near/469684846\">said</a>:</p>\n<blockquote>\n<p>it looks OK, but how can I avoid being forced to add <code>[…, DatabaseConnectionError, InvalidQuery, MissingArguments, Etc...]</code> to each of these?</p>\n</blockquote>\n<p>If it is your application and you never want to handle those, you can just crash in those cases.</p>\n<p>If you want to group infra errors to be less noisy, you can wrap them:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">InfraErrors</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"kt\">DatabaseConnectionError</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">InvalidQuery</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nf\">...</span><span class=\"w\"> </span><span class=\"p\">]</span>\n\n<span class=\"nv\">queryCustomer</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">CustomerId</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"kt\">Customer</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">CustomerNotFound</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">InfraError</span><span class=\"w\"> </span><span class=\"kt\">InfraErrors</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>If you just care about a cleaner type but are fine with returning them flat, you can merge tags (note, syntax is going to change to make this more clear):</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">queryCustomer</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">CustomerId</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"kt\">Customer</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">CustomerNotFound</span><span class=\"p\">]</span><span class=\"kt\">InfraErrors</span>\n</code></pre></div>\n<p>Could also just use <code>_</code> for the errors you don't care about displaying in the type.</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">queryCustomer</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">CustomerId</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"kt\">Customer</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">CustomerNotFound</span><span class=\"p\">]</span><span class=\"nv\">_</span>\n</code></pre></div>",
        "id": 469687183,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726150224
    },
    {
        "content": "<blockquote>\n<p>if you want to model your domain, you do not want to mix business logic with infrastructure.</p>\n</blockquote>\n<p>I'm not sure this is actually a full truth. Often times, business logic has to handle infrastructure failures via retries, backup endpoints, or at least logging.</p>",
        "id": 469687836,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726150402
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Results.20and.20Exceptions/near/469687836\">said</a>:</p>\n<blockquote>\n<p>Often times, business logic has to handle infrastructure failures via retries, backup endpoints, or at least logging.</p>\n</blockquote>\n<p>Sometimes yes, but most of the times I handle these errors elsewhere. Business logic is business logic, infrastructure can be separated and hidden.</p>",
        "id": 469709793,
        "sender_full_name": "witoldsz",
        "timestamp": 1726155267
    },
    {
        "content": "<p>That's a fair separation of concerns</p>",
        "id": 469714518,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726156302
    }
]