[
    {
        "content": "<p>I am trying to create an AST type for a language parser in Roc, and I'm running into something that is a bit confusing. I would like to define a Tag type that refers to other Tag types, and I'm struggling to find a way to do that. Is it even possible?</p>\n<p>What I want is something like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>TypeAB : [A { loc : Location }, B { loc : Location }]\n\nTypeCD : [C { loc : Location }, D { loc : Location }]\n\nComposed : [\n    ...TypeAB,\n    ...TypeCD,\n]\n\nget_location : Composed -&gt; Location\nget_location = |test1|\n    when test1 is\n        A({ loc }) -&gt; loc\n        B({ loc }) -&gt; loc\n        C({ loc }) -&gt; loc\n        D({ loc }) -&gt; loc\n</code></pre></div>\n<p>What I really want is a way to simple \"include\" a set of existing tags by a type name. Is there a way to do this without having tons of wrappers around wrappers around my types?</p>",
        "id": 529995446,
        "sender_full_name": "Austin Davis",
        "timestamp": 1753155636
    },
    {
        "content": "<p>I think composing (or extending) tag unions is possible... I'm not sure what the syntax is. Is this current roc or the new 0.1 stuff?</p>",
        "id": 529996431,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753156515
    },
    {
        "content": "<p>Thanks for the reply, I am using a compiler/platform release from March, I think.</p>",
        "id": 529996504,
        "sender_full_name": "Austin Davis",
        "timestamp": 1753156569
    },
    {
        "content": "<p>I think this is the current support syntax</p>\n<div class=\"codehilite\"><pre><span></span><code>Other : [B, C]\n\nCombined : [A]Other\n</code></pre></div>",
        "id": 529996753,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753156741
    },
    {
        "content": "<p>Just building roc from source to try it out</p>",
        "id": 529996857,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753156797
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>  The rockin&#39; roc repl\n────────────────────────\n\nEnter an expression, or :help, or :q to quit.\n\n» Other : [B, C]\n» Combined : [A]Other\n» Combined\n\nCombined : [Combined]\n</code></pre></div>",
        "id": 529997168,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753156959
    },
    {
        "content": "<p>Yeah, looks like it's working</p>",
        "id": 529997174,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753156967
    },
    {
        "content": "<p>Then again... maybe it's just not implemented fully - or I've forgotten how to use Roc already <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<div class=\"codehilite\"><pre><span></span><code>» foo : Combined\n… foo = A\n\n── TYPE MISMATCH ───────────────────────────────────────────────────────────────\n\nSomething is off with the body of the foo definition:\n\n8│      foo : Combined\n9│      foo = A\n              ^\n\nThis A tag has the type:\n\n    [A]\n\nBut the type annotation on foo says it should be:\n\n    Combined\n\n» bar : Combined\n… bar = B\n\n── TYPE MISMATCH ───────────────────────────────────────────────────────────────\n\nSomething is off with the body of the foo definition:\n\n7│  foo : Combined\n8│  foo = A\n          ^\n\nThis A tag has the type:\n\n    [A]\n\nBut the type annotation on foo says it should be:\n\n    Combined\n\n\n\n── TYPE MISMATCH ───────────────────────────────────────────────────────────────\n\nSomething is off with the body of the bar definition:\n\n11│      bar : Combined\n12│      bar = B\n               ^\n\nThis B tag has the type:\n\n    [B]\n\nBut the type annotation on bar says it should be:\n\n    Combined\n\n»\n</code></pre></div>",
        "id": 529997317,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1753157086
    },
    {
        "content": "<p>Oh, that’s pretty cool as far as syntax goes. I’ll play around with it tomorrow and see how things go. Thanks!</p>",
        "id": 530076912,
        "sender_full_name": "Austin Davis",
        "timestamp": 1753165904
    }
]