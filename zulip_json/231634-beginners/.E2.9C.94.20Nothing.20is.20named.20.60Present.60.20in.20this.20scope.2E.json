[
    {
        "content": "<p>It seems like <code>Present</code> should be defined automatically by the core Dict types.  Here's my code:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">incrementDict</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"kt\">Missing</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Present</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Int</span><span class=\"w\"> </span><span class=\"kt\">Unsigned32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Present</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Int</span><span class=\"w\"> </span><span class=\"kt\">Unsigned32</span><span class=\"p\">)</span>\n<span class=\"nv\">incrementDict</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">possibleValue</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">possibleValue</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">Missing</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Present</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">        </span><span class=\"kt\">Present</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Present</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>The compiler: </p>\n<div class=\"codehilite\"><pre><span></span><code>Nothing is named `Present` in this scope.\n\n47â”‚  incrementDict : [ Missing, Present (Int Unsigned32) ] -&gt; Present (Int Unsigned32)\n                                                              ^^^^^^^^^^^^^^^^^^^^^^^^\n\nDid you mean one of these?\n\n    Result\n    Parser\n    const\n    Int\n</code></pre></div>\n<p>What's happening here?</p>",
        "id": 405885053,
        "sender_full_name": "Jason Hobbs",
        "timestamp": 1701713242
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>incrementDict : [ Missing, Present (Int Unsigned32) ] -&gt;  [ Missing, Present (Int Unsigned32) ]\n</code></pre></div>",
        "id": 405885669,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701713482
    },
    {
        "content": "<p>Should be something like that</p>",
        "id": 405885698,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701713492
    },
    {
        "content": "<p><code>Present</code> is just a part of a tag, not a type</p>",
        "id": 405885732,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701713503
    },
    {
        "content": "<p>That said, if we can think of a good name for it, we could exposed a type <code>SomeName: [ Missing, Present (Int Unsigned32) ]</code> from the dict module.</p>",
        "id": 405885960,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701713580
    },
    {
        "content": "<p>Ah, I didn't realize there's a distinction. I thought type was renamed to tag in Roc. </p>\n<p>I see just adding the brackets [ Present (Int U32) ] was enough to fix it</p>",
        "id": 405886022,
        "sender_full_name": "Jason Hobbs",
        "timestamp": 1701713599
    },
    {
        "content": "<p>In your example, <code>SomeName</code> would be a type and <code>Missing</code>, etc would be tags?</p>",
        "id": 405886142,
        "sender_full_name": "Jason Hobbs",
        "timestamp": 1701713643
    },
    {
        "content": "<p><code>[ Present (Int U32) ]</code> -&gt; That is a full type. It is a tag with one variant, <code>Present</code></p>",
        "id": 405886177,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701713645
    },
    {
        "content": "<blockquote>\n<p>In your example, SomeName would be a type and Missing, etc would be tags?</p>\n</blockquote>\n<p>yep</p>",
        "id": 405886220,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1701713660
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"460629\">Jason Hobbs</span> has marked this topic as resolved.</p>",
        "id": 405887950,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701714344
    }
]