[
    {
        "content": "<p>Hello! I've recently discovered Roc and I love it, such a cool language! I have a question regarding the example in the <a href=\"https://www.roc-lang.org/tutorial#type-variables-in-tag-unions\">type variables in tag unions</a> section:</p>\n<div class=\"codehilite\"><pre><span></span><code>example : [Foo Str, Bar Bool]a -&gt; [Foo Str, Bar Bool]a\nexample = \\tag -&gt;\n    when tag is\n        Foo str -&gt; Bar (Str.isEmpty str)\n        Bar bool -&gt; Bar Bool.false\n        other -&gt; other\n</code></pre></div>\n<p>The explanation says that <code>example</code> must return a <code>[Foo str, Bar Bool]a</code> since it is the type of <code>other</code>. However, I don't see why the type of other could not be inferred to be <code>a</code>: what I mean is that with the first two pattern matches one could already exclude that <code>other</code> is a <code>Foo Str</code> or a <code>Bar Bool</code>.<br>\nWhat I'd expect is a sort of \"shaving\" of the different tags from the union as one progresses further down in the pattern matching, for example:</p>\n<div class=\"codehilite\"><pre><span></span><code>example : [Foo Int, Bar Bool, Baz Str]a -&gt; [Foo Int, Baz Str]a\nexample = \\tag -&gt;\n  when tag is\n    Foo n -&gt; Foo n\n    Bar _ -&gt; Foo 1 # here x could only be [Bar Bool, Baz Str]a\n    x -&gt; x # here x could only be [Baz Str]a\n</code></pre></div>\n<p>So the first two branches would have type <code>[Foo Int]*</code> while the last one would have type <code>[Baz Str]a</code> resulting in a return type of <code>[Foo Int, Baz Str]a</code>.<br>\nIt seems like a reasonable behaviour to me but I'm pretty sure there are some gotchas I'm not seeing that would make this impossible <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> <br>\nCould anyone explain why <code>other</code> must be inferred to be <code>[Foo Str, Bar Bool]a</code>?</p>",
        "id": 324931182,
        "sender_full_name": "Giacomo Cavalieri",
        "timestamp": 1675176314
    },
    {
        "content": "<p>I think that would be possible if the type-checker that did flow control analysis. That's the \"shaving\" that you mention. But we don't do that. I'm not sure if we plan to or not.<br>\nI do know that every analysis takes time to actually compute, and therefore slows down the compiler, and adds maintenance complexity. So there have to be clear benefits in practice.</p>",
        "id": 324991043,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1675191333
    },
    {
        "content": "<p>(And maybe there are, I don't know! Typescript has this, Rust, Elm and Haskell don't. I don't miss it when I don't have it.)</p>",
        "id": 324993841,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1675192169
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> wrote up an issue for this, actually!</p>",
        "id": 324995536,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1675192643
    },
    {
        "content": "<p>oh ok</p>",
        "id": 324997799,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1675193271
    },
    {
        "content": "<p>I suppose in TypeScript this feature is useful because you often want to narrow down the possible shapes of a value. And maybe open unions mean that will also be true in Roc code.</p>",
        "id": 325002569,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1675194793
    },
    {
        "content": "<p>I've done a lot of work around this (here are two blog posts, <a href=\"https://ayazhafiz.com/articles/22/why-dont-more-languages-offer-flow-typing\">1</a>, <a href=\"https://ayazhafiz.com/articles/22/simple-flow-refinement-of-anonymous-sum-types\">2</a>). It could work reasonably in Roc but there are some tradeoffs, <a href=\"https://ayazhafiz.com/articles/22/why-dont-more-languages-offer-flow-typing#complication-of-the-compilation-model\">these are the main ones I'm aware of</a>. As I show in the second blog post, there is nothing precluding a language like Roc adopting the sort of behavior you describe <span class=\"user-mention\" data-user-id=\"575657\">@Giacomo Cavalieri</span> , other than, for Roc, the runtime performance cost this may bring about.</p>",
        "id": 325008255,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1675196542
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span>  thanks for the answer! I'll make sure to read the blog posts it seems like a very interesting read <span aria-label=\"smiling face\" class=\"emoji emoji-263a\" role=\"img\" title=\"smiling face\">:smiling_face:</span></p>",
        "id": 325009186,
        "sender_full_name": "Giacomo Cavalieri",
        "timestamp": 1675196871
    },
    {
        "content": "<p>Should we link an answer in the faq doc in the repo? I feel like this may be a common enough question to be worth adding there for an easy pointer.</p>",
        "id": 325011427,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1675197685
    }
]