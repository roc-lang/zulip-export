[
    {
        "content": "<p>I have two questions about the <a href=\"https://www.roc-lang.org/tutorial#operator-desugaring-table\">operator desugaring table</a> in the tutorial.</p>\n<ul>\n<li>It shows bit shift operators which aren't in the language. Are they planned, or were they at one point and is the table out of date</li>\n<li>It shows that <code>!f x y</code> desugars to <code>Bool.not (f x y)</code>, and <code>-f x y</code> desugars to <code>Num.neg (f x y)</code>, but at the moment they desugar to <code>Bool.not f x y</code> and <code>Num.neg f x y</code> respectively. Which one is incorrect?</li>\n</ul>",
        "id": 367189435,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1687012789
    },
    {
        "content": "<blockquote>\n<p>It shows bit shift operators which aren't in the language. Are they planned, or were they at one point and is the table out of date</p>\n</blockquote>\n<p>I think they were planned but I'm not sure if they still are, I'll update the table.</p>\n<blockquote>\n<p>It shows that !f x y desugars to Bool.not (f x y), and -f x y desugars to Num.neg (f x y), but at the moment they desugar to Bool.not f x y and Num.neg f x y respectively. Which one is incorrect?</p>\n</blockquote>\n<p>I think the brackets are just for clarity for the reader, the order of application is the same for the compiler (I think).</p>",
        "id": 367192563,
        "sender_full_name": "Anton",
        "timestamp": 1687013645
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/stream/231634-beginners/topic/Operator.20desugaring.20table.20questions/near/367192563\">said</a>:</p>\n<blockquote>\n<p>I think the brackets are just for clarity for the reader, the order of application is the same for the compiler (I think).</p>\n</blockquote>\n<p>I don't think it is the same. At the moment, the compiler does <code>(Bool.not f) x y</code>, not <code>Bool.not (f x y)</code>. If f is a function, it will be a compiler error. I don't know which of the two is best, but the table is not doing the same as the compiler if I am correct</p>",
        "id": 367193020,
        "sender_full_name": "Kilian Vounckx",
        "timestamp": 1687013783
    },
    {
        "content": "<p>You are correct, elm also does it like our current implementation, so I'm just going to remove the <code>!f x y</code> and <code>-f x y</code> from the table</p>",
        "id": 367196057,
        "sender_full_name": "Anton",
        "timestamp": 1687014540
    },
    {
        "content": "<p>Yeah i think the example needs parens and is just a mistake</p>",
        "id": 367198079,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1687015097
    }
]