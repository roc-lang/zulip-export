[
    {
        "content": "<p>Hello friendly people <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>\n<p>How would I get started writing a platform in C#? I understand that there's no official support, but I'm not scared getting dirty using the C ABI and some unmanaged code.</p>\n<p>Let's say I wanted to get applications written for <code>basic-cli</code> to run on a C# platform - what does this platform need? Are there any existing docs that I couldn't find?</p>\n<p>I'll open source everything I can come up with, but I'm doing this to procrastinate other things so I can't promise following through until the end.</p>",
        "id": 435075242,
        "sender_full_name": "Cameron",
        "timestamp": 1713910080
    },
    {
        "content": "<p>There is an example dotnet platform <a href=\"https://github.com/roc-lang/examples/tree/main/examples/DotNetPlatform\">https://github.com/roc-lang/examples/tree/main/examples/DotNetPlatform</a></p>",
        "id": 435076051,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713910574
    },
    {
        "content": "<p>To support the same applications you will need to provide the same API from the platform.</p>",
        "id": 435076089,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713910605
    },
    {
        "content": "<p>I'd recommend playing with the example platform, and testing out different things. To get something as complex as basic-cli you will likely need (want) a glue spec that can take the roc types and code gen the c# parts to interacts with roc. So that is something fun to also play with.</p>",
        "id": 435076429,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713910803
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/231634-beginners/topic/Getting.20started.20with.20a.20platform.20in.20C.23/near/435076051\">said</a>:</p>\n<blockquote>\n<p>There is an example dotnet platform <a href=\"https://github.com/roc-lang/examples/tree/main/examples/DotNetPlatform\">https://github.com/roc-lang/examples/tree/main/examples/DotNetPlatform</a></p>\n</blockquote>\n<p>Ha, then I am just blind. I've been staring at the Go example without knowing any Go <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span> Thanks!</p>\n<p>Yeah, C# has roslyn source generators that can generate code at compile time based on resources files (like roc files!)<br>\nDo you know of any examples on how to make a glue spec for roc types? I assume I'd just need to represent the types in my platform roc API in C#.</p>\n<p>Come to think of it: If I can get C header files, I can generate the C# bindings from that easily. Is there a way to generate C headers from Roc code?</p>",
        "id": 435077768,
        "sender_full_name": "Cameron",
        "timestamp": 1713911623
    },
    {
        "content": "<p>Coincidentally I just posted this a couple days ago <a href=\"#narrow/stream/316715-contributing/topic/Glue.20generate.20Types.20in.20JSON/near/434573060\">https://roc.zulipchat.com/#narrow/stream/316715-contributing/topic/Glue.20generate.20Types.20in.20JSON/near/434573060</a></p>",
        "id": 435078071,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713911831
    },
    {
        "content": "<p>Glue gen is a bit of a WIP so it's a bit wild rn, but if your up for a challenge it's super fun</p>",
        "id": 435078117,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713911866
    },
    {
        "content": "<p>I've been staring at this for a little while and it looks really useful for all kinds of glue generation! I guess Str and Unit have a representation of <code>[]</code> because they are builtin types?</p>",
        "id": 435078892,
        "sender_full_name": "Cameron",
        "timestamp": 1713912345
    },
    {
        "content": "<p>Come to think of it, just generating C header files for roc types could help a lot, e.g. when using <a href=\"https://www.swig.org/\">https://www.swig.org/</a></p>",
        "id": 435078969,
        "sender_full_name": "Cameron",
        "timestamp": 1713912378
    },
    {
        "content": "<p>Yeah, I think generating C types would be pretty handy.</p>",
        "id": 435079310,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713912596
    },
    {
        "content": "<p>But I'd rather go the direct route for a nicer experience. In my fantasy world, I'd just add the platform roc files as additional files in my C# project, and all the C# glue would be auto-generated neatly as C# code that's not even on disk.<br>\nHow would I get started with that? Do I need to write my own Roc parser in C#? Or can I go through your JSON route somehow?</p>",
        "id": 435079820,
        "sender_full_name": "Cameron",
        "timestamp": 1713912918
    },
    {
        "content": "<p>You can write your own <code>DotNetGlue.roc</code> plugin which takes the types from the roc compiler and generates the c# code.</p>",
        "id": 435079986,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713913016
    },
    {
        "content": "<p>There is a <code>RustGlue.roc</code> and a <code>ZigGlue.roc</code> example in <a href=\"https://github.com/roc-lang/roc/tree/main/crates/glue/src\">https://github.com/roc-lang/roc/tree/main/crates/glue/src</a></p>",
        "id": 435080038,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713913057
    },
    {
        "content": "<p>In that other thread I made a <code>JsonGlue.roc</code></p>",
        "id": 435080059,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713913070
    },
    {
        "content": "<p>When that PR lands, or if you use that branch, being able to just <code>Inspect.toStr</code> or <code>Encode.toBytes</code> on the types will help with figuring out what the types are for a given platform.</p>",
        "id": 435080209,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713913161
    },
    {
        "content": "<p>Say you write a <code>DotNetGlue.roc</code> and have a test platform <code>test-platform.roc</code> in your current directory. You can generate the glue using <code>roc glue DocNetGlue.roc glue/ test-platform.roc</code> and that will run the plugin/app.</p>",
        "id": 435080341,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713913230
    },
    {
        "content": "<p>Thanks a lot! I'll look into it over the coming days, whenever the need to procrastinate strikes again <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 435081427,
        "sender_full_name": "Cameron",
        "timestamp": 1713913929
    },
    {
        "content": "<p>You will also need to know how roc behaves with these types. </p>\n<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> went through a nice explanation in the <a href=\"https://drive.google.com/file/d/1uhxZ8vRJ_4a-RPccTGN8CsB5yWLjmdD2/view?usp=sharing&amp;t=2495\">recent online meetup</a> for how roc represents the <code>Str</code> type and how seamless slices work. </p>\n<p>You can find the implementation for the builtins at <a href=\"https://github.com/roc-lang/roc/tree/main/crates/compiler/builtins/bitcode/src\">https://github.com/roc-lang/roc/tree/main/crates/compiler/builtins/bitcode/src</a></p>\n<p>For example if you wanted to write a function that takes a <code>Str</code> and tells you if it is a seamless slice you might find the implementation in <code>str.zig</code> helpful.</p>\n<div class=\"codehilite\" data-code-language=\"Zig\"><pre><span></span><code><span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">isSeamlessSlice</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">RocStr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">isSmallStr</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">and</span><span class=\"w\"> </span><span class=\"nb\">@as</span><span class=\"p\">(</span><span class=\"kt\">isize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">@bitCast</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 435081455,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713913949
    }
]