[
    {
        "content": "<p>What's the difference between <code>Task {} {}</code>, <code>Task {} []</code> and <code>Task {} *</code>? For the latter two, what would be the rust-equivalent type?</p>",
        "id": 473410598,
        "sender_full_name": "Jared Cone",
        "timestamp": 1727584451
    },
    {
        "content": "<p>Unit Type<br>\nEmpty List<br>\nAnything -- in the return position there is nothing that can anything therefore this Task cannot fail.</p>",
        "id": 473411504,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727585189
    },
    {
        "content": "<p>I think how the function can then used is where the difference is most significant. I'll try and make an example</p>",
        "id": 473411673,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727585386
    },
    {
        "content": "<p>Is there any difference between Unit vs Anything? For anything, would the Rust type still be <code>RocResult&lt;(), ()&gt;</code>?</p>",
        "id": 473411885,
        "sender_full_name": "Jared Cone",
        "timestamp": 1727585545
    },
    {
        "content": "<p>For example ... using <code>[]</code> this is concrete and won't unify with the [Exit _ _] type.</p>\n<div class=\"codehilite\"><pre><span></span><code>app [main] { pf: platform &quot;https://github.com/roc-lang/basic-cli/releases/download/0.15.0/SlwdbJ-3GR7uBWQo6zlmYWNYOxnvo8r6YABXD-45UOw.tar.br&quot; }\n\nmain : Task {} [Exit I32 Str]\nmain =\n\n    foo!\n\n    Task.ok {}\n\nfoo : Task {} []\nfoo = Task.ok {}\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>── TYPE MISMATCH in main.roc ───────────────────────────────────────────────────\n\nSomething is off with the body of the main definition:\n\n3│  main : Task {} [Exit I32 Str]\n4│  main =\n5│\n6│      foo!\n        ^^^^\n\nThis await call produces:\n\n    Task {} []\n\nBut the type annotation on main says it should be:\n\n    Task {} [Exit I32 Str]\n</code></pre></div>\n<p>To fix this we would need to return an open tag union like <code>[]_</code>.</p>",
        "id": 473411995,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727585643
    },
    {
        "content": "<p>So <code>foo : Task {} []_</code> works</p>",
        "id": 473412012,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727585659
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"481285\">Jared Cone</span> <a href=\"#narrow/stream/231634-beginners/topic/Task.20.7B.7D.20.7B.7D.20vs.20Task.20.7B.7D.20.5B.5D.20vs.20Task.20.7B.7D.20*/near/473411885\">said</a>:</p>\n<blockquote>\n<p>Is there any difference between Unit vs Anything? For anything, would the Rust type still be <code>RocResult&lt;(), ()&gt;</code>?</p>\n</blockquote>\n<p>You're specifically thinking about the interface between roc and the platform host here... This is currently generated as a RocResult and the <code>*</code> is represented in rust using <code>()</code></p>",
        "id": 473412137,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727585766
    },
    {
        "content": "<p>Actually... you can't (shouldn't have) a <code>*</code> being passed to the host</p>",
        "id": 473412166,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727585825
    },
    {
        "content": "<p>That will be a bug because it's size isn't fixed</p>",
        "id": 473412179,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727585838
    },
    {
        "content": "<p>You want a concrete fixed sized type for things you pass across between roc and the host</p>",
        "id": 473412195,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727585859
    },
    {
        "content": "<p>Alrighty.  Ignoring host interface then, what would be the functional difference in a function that returns a <code>Task {} {}</code> vs. a <code>Task {} *</code>? I was using <code>Task {} {}</code> to indicate a task that can't fail, but then I saw this in the tutorial:</p>\n<div class=\"codehilite\"><pre><span></span><code>Stdout.line has the type Task {} * because it doesn&#39;t produce any values when it finishes (hence the {}) and there aren&#39;t any errors that can happen when it runs (hence the *).\n</code></pre></div>",
        "id": 473412589,
        "sender_full_name": "Jared Cone",
        "timestamp": 1727586082
    },
    {
        "content": "<p>I suppose <code>Task {} {}</code> means a task can fail but there's nothing useful in the error, but how does <code>Task {} *</code> affect callers?</p>",
        "id": 473412931,
        "sender_full_name": "Jared Cone",
        "timestamp": 1727586340
    },
    {
        "content": "<p>It's about how the error type unifies with other things, this affects where and how you use the function.</p>",
        "id": 473413068,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727586425
    },
    {
        "content": "<p><code>Task {} {}</code>: can succeed or fail but has no other information in either case.</p>\n<p><code>Task {} []</code>: empty tag for the failure case. This means it can not fail. Will unify with any other tag based errors (e.g. <code>Task {} [SomeErr]</code>)</p>\n<p><code>Task {} *</code>: unconstrained type variable for the error case. This means it cannot fail. Can unify with anything.</p>",
        "id": 473414170,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1727587536
    },
    {
        "content": "<p><code>Task {} {}</code> and <code>RocResult&lt;(), ()&gt;</code> are equivalent. The other 2 are not actually safe to pass over the host boundary. Their exact implementation will change based on unification.</p>",
        "id": 473414328,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1727587624
    },
    {
        "content": "<p>Would there be any reason to use <code>Task {} []</code> instead of <code>Task {} *</code>? Like, any reason a designer would want their task to only unify with other tasks that have tag-based errors?</p>",
        "id": 473414701,
        "sender_full_name": "Jared Cone",
        "timestamp": 1727588001
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"481285\">Jared Cone</span> <a href=\"#narrow/stream/231634-beginners/topic/Task.20.7B.7D.20.7B.7D.20vs.20Task.20.7B.7D.20.5B.5D.20vs.20Task.20.7B.7D.20*/near/473414701\">said</a>:</p>\n<blockquote>\n<p>Would there be any reason to use <code>Task {} []</code> instead of <code>Task {} *</code>? Like, any reason a designer would want their task to only unify with other tasks that have tag-based errors?</p>\n</blockquote>\n<p>I can't think of any reason why you would want to do that. I've used <code>[]</code> in the past because I didn't know the difference.</p>",
        "id": 473414945,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1727588247
    },
    {
        "content": "<p>Only reason I can think of is to clarify that you expect a tag union for the error type. Like if all tasks use tag unions for errors and then a few have no error cases, I could see an argument for using <code>[]</code> over <code>*</code>. Especially given I think a number of people find an empty tag easier to understand than <code>*</code>.</p>",
        "id": 473455702,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1727621326
    }
]