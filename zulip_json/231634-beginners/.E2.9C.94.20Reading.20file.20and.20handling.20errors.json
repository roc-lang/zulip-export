[
    {
        "content": "<p>I'm confused about how to handle errors here as I'm getting a compiler error</p>\n<div class=\"codehilite\"><pre><span></span><code>run =\n   part1 &lt;-\n      Path.fromStr &quot;day1_input.txt&quot;\n         |&gt; File.readUtf8\n         |&gt; Task.await\n   Stdout.line &quot;\\(part1)&quot;\n\nhandleErr = \\err -&gt;\n    when err is\n        FileReadErr -&gt; Stderr.line &quot;Error&quot;\n        FileReadUtf8Err -&gt; Stderr.line &quot;Error&quot;\nmain =\n   run |&gt; Task.onErr handleErr\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>19â”‚     |&gt; Task.onErr handleErr\n                      ^^^^^^^^^\n\nThis handleErr value is a:\n\n    [\n        FileReadErr,\n        FileReadUtf8Err,\n    ] -&gt; Task {} *\n\nBut |&gt; needs its 2nd argument to be:\n\n    [\n        FileReadErr Path.Path InternalFile.ReadErr,\n        FileReadUtf8Err Path.Path [BadUtf8 Utf8ByteProblem Nat]*,\n    ] -&gt; Task {} *\n</code></pre></div>",
        "id": 406625432,
        "sender_full_name": "Seth Workman",
        "timestamp": 1701985352
    },
    {
        "content": "<p>It looks like something like this would work</p>\n<div class=\"codehilite\"><pre><span></span><code>        FileReadErr _ _ -&gt; Stderr.line &quot;Error&quot;\n        FileReadUtf8Err _ _ -&gt; Stderr.line &quot;Error&quot;\n</code></pre></div>",
        "id": 406625560,
        "sender_full_name": "Seth Workman",
        "timestamp": 1701985425
    },
    {
        "content": "<p>Is there a better way to handle these errors?</p>",
        "id": 406625584,
        "sender_full_name": "Seth Workman",
        "timestamp": 1701985441
    },
    {
        "content": "<p>Your very close, just when you pattern match on the error yags in handleErr you are not including the tag payloads.</p>",
        "id": 406625747,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1701985510
    },
    {
        "content": "<p>If you havent seen it the <a href=\"https://www.roc-lang.org/examples/Tasks/README.html\">https://www.roc-lang.org/examples/Tasks/README.html</a> example might help, but I'm guessing from your code that you have as your using that same pattern.</p>",
        "id": 406626006,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1701985628
    },
    {
        "content": "<p>I highly recommend adding a type annotation in situations like this, it can help debug the issue and by pinning the types at that point the compiler can help check your understanding. You can always blow it away once your done with it and have working code.</p>",
        "id": 406627150,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1701986120
    },
    {
        "content": "<p>I think I'm starting to get it a bit more now, thanks! I'll read that over again and see what else I can pick up</p>",
        "id": 406627286,
        "sender_full_name": "Seth Workman",
        "timestamp": 1701986167
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"465260\">Seth Workman</span> has marked this topic as resolved.</p>",
        "id": 406627296,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701986172
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"465260\">@Seth Workman</span> you can also import local files directly which doesn't require error handling. The compiler handles it.</p>\n<div class=\"codehilite\"><pre><span></span><code>app ...\n    imports [\n        &quot;day1_input.txt&quot; as input : Str,\n        ...\n    ]\n</code></pre></div>",
        "id": 406627653,
        "sender_full_name": "Ryan Bates",
        "timestamp": 1701986353
    }
]