[
    {
        "content": "<p>I'm working on advent of code 8-2, and I'm getting this error at runtime:</p>\n<p><code>fish: Job 1, './main' terminated by signal SIGSEGV (Address boundary error)</code></p>\n<p>It happens on both <code>roc dev</code> and on <code>roc build &amp;&amp; ./main</code></p>\n<p>I understand that in principle roc programs shouldn't ever segfault, so it's probably a compiler (or platform?) bug.</p>\n<p>My code is pretty slow, so although I'm <em>fairly</em> sure I haven't caused an infinite recursion, I don't want to rule it out completely.<br>\nBut it's not swalloing a lot of ram, and my slow function is tail recursive, so I don't think it should be that bad memory-wise either.</p>\n<p>What steps can I take to try and debug this?</p>",
        "id": 406939001,
        "sender_full_name": "Asbjørn Olling",
        "timestamp": 1702130358
    },
    {
        "content": "<p>okay yeah my function <em>was</em> bad. It worked exactly how I wanted it to, but I had made some incorrect assumptions about the input data <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<p>Anyway, should I expect roc functions to segfault if I do infinite recursion? Even if it's tail-recursive?<br>\nI recently learned from a friend that  this is the only way for a (non-unsafe) rust program to segfault.<br>\nMaybe this is actually expected behavior from roc?</p>\n<p>For context, it crashed after 78111 (tail-)recursions</p>",
        "id": 406941125,
        "sender_full_name": "Asbjørn Olling",
        "timestamp": 1702131449
    }
]