[
    {
        "content": "<p>Apologies in advance about the not very good context!</p>\n<p>The following file (<code>PatternMatch.roc</code> in the second code block below) is supposed to be a minimum reproducible example (it's practically an equivalent code excerpt of what I'm currently prototyping as part of a larger use-case) of this error:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"err\">──</span><span class=\"w\"> </span><span class=\"kt\">TYPE</span><span class=\"w\"> </span><span class=\"kt\">MISMATCH</span><span class=\"w\"> </span><span class=\"kr\">in</span><span class=\"w\"> </span><span class=\"kt\">PatternMatchError</span><span class=\"nf\">.</span><span class=\"nv\">roc</span><span class=\"w\"> </span><span class=\"err\">───────────────────────────────────────</span>\n\n<span class=\"kt\">The</span><span class=\"w\"> </span><span class=\"nv\">branches</span><span class=\"w\"> </span><span class=\"kr\">of</span><span class=\"w\"> </span><span class=\"nv\">this</span><span class=\"w\"> </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">expression</span><span class=\"w\"> </span><span class=\"nv\">don't</span><span class=\"w\"> </span><span class=\"nv\">match</span><span class=\"w\"> </span><span class=\"nv\">the</span><span class=\"w\"> </span><span class=\"nv\">condition</span><span class=\"nf\">:</span>\n\n<span class=\"mi\">101</span><span class=\"err\">│</span><span class=\"nf\">&gt;</span><span class=\"w\">      </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">get</span><span class=\"w\"> </span><span class=\"nv\">ranges</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"mi\">102</span><span class=\"err\">│</span><span class=\"w\">           </span><span class=\"kt\">OK</span><span class=\"w\"> </span><span class=\"nv\">range</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"mi\">103</span><span class=\"err\">│</span><span class=\"w\">               </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">range</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">len</span><span class=\"w\"> </span><span class=\"nv\">result</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"mi\">104</span><span class=\"err\">│</span><span class=\"w\">                   </span><span class=\"p\">[]</span>\n<span class=\"mi\">105</span><span class=\"err\">│</span><span class=\"w\">               </span><span class=\"kr\">else</span>\n<span class=\"mi\">106</span><span class=\"err\">│</span><span class=\"w\">                   </span><span class=\"nv\">result</span>\n<span class=\"mi\">107</span><span class=\"err\">│</span><span class=\"w\">           </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">OutOfBounds</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"mi\">108</span><span class=\"err\">│</span><span class=\"w\">               </span><span class=\"p\">[]</span>\n\n<span class=\"kt\">The</span><span class=\"w\"> </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">condition</span><span class=\"w\"> </span><span class=\"nv\">is</span><span class=\"nf\">:</span>\n\n<span class=\"w\">    </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"kt\">Range</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">OutOfBounds</span><span class=\"p\">]</span>\n\n<span class=\"kt\">But</span><span class=\"w\"> </span><span class=\"nv\">the</span><span class=\"w\"> </span><span class=\"nv\">branch</span><span class=\"w\"> </span><span class=\"nv\">patterns</span><span class=\"w\"> </span><span class=\"nv\">have</span><span class=\"w\"> </span><span class=\"kr\">type</span><span class=\"nf\">:</span>\n\n<span class=\"w\">    </span><span class=\"p\">[</span>\n<span class=\"w\">        </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">OutOfBounds</span><span class=\"p\">],</span>\n<span class=\"w\">        </span><span class=\"kt\">OK</span><span class=\"w\"> </span><span class=\"nf\">*</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">]</span>\n\n<span class=\"kt\">The</span><span class=\"w\"> </span><span class=\"nv\">branches</span><span class=\"w\"> </span><span class=\"nv\">must</span><span class=\"w\"> </span><span class=\"nv\">be</span><span class=\"w\"> </span><span class=\"nv\">cases</span><span class=\"w\"> </span><span class=\"kr\">of</span><span class=\"w\"> </span><span class=\"nv\">the</span><span class=\"w\"> </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">condition's</span><span class=\"w\"> </span><span class=\"kr\">type</span><span class=\"err\">!</span>\n\n<span class=\"err\">────────────────────────────────────────────────────────────────────────────────</span>\n</code></pre></div>\n<p>The attempt at reproducing the issue:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"kt\">PatternMatch</span><span class=\"nf\">.</span><span class=\"nv\">roc</span>\n\n<span class=\"nv\">interface</span><span class=\"w\"> </span><span class=\"kt\">PatternMatch</span>\n<span class=\"w\">    </span><span class=\"nv\">exposes</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n<span class=\"w\">    </span><span class=\"nv\">imports</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n\n<span class=\"kt\">Range</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">U64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">U64</span><span class=\"p\">)</span>\n\n<span class=\"nv\">getRanges</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Range</span>\n<span class=\"nv\">getRanges</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">[(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)]</span>\n\n<span class=\"nv\">processRanges</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Range</span>\n<span class=\"nv\">processRanges</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">ranges</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">getRanges</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">get</span><span class=\"w\"> </span><span class=\"nv\">ranges</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">range</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">range</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">len</span><span class=\"w\"> </span><span class=\"nv\">ranges</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"w\">                </span><span class=\"p\">[]</span>\n<span class=\"w\">            </span><span class=\"kr\">else</span>\n<span class=\"w\">                </span><span class=\"p\">[(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)]</span>\n<span class=\"w\">        </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">OutOfBounds</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"p\">[]</span>\n\n<span class=\"nv\">expect</span>\n<span class=\"w\">    </span><span class=\"nv\">expected</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"p\">[(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)]</span>\n<span class=\"w\">    </span><span class=\"nv\">actual</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">processRanges</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"w\">    </span><span class=\"nv\">actual</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"nv\">expected</span>\n</code></pre></div>\n<p>However, the compiler is happy with the second code block, but complains in the first case.<br>\nI haven't been able to come up with a minimal reproducible example (as mentioned, the one which is practically equivalent passes the test OK), and was hoping I might get some pointers, even in the absence of such an example.</p>\n<p>Thank you!</p>",
        "id": 431597340,
        "sender_full_name": "Hristo",
        "timestamp": 1712348089
    },
    {
        "content": "<p>The first block has OK instead of Ok which should be the culprit</p>",
        "id": 431597588,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1712348196
    },
    {
        "content": "<p>I think there was a thread about this same thing a while back but it seems like a good case for a tailored error message</p>",
        "id": 431597644,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1712348217
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"693045\">Hristo</span> has marked this topic as resolved.</p>",
        "id": 431597718,
        "sender_full_name": "Notification Bot",
        "timestamp": 1712348255
    },
    {
        "content": "<p>Indeed, that's the case - fixed! Thank you so much!</p>",
        "id": 431597729,
        "sender_full_name": "Hristo",
        "timestamp": 1712348260
    },
    {
        "content": "<blockquote>\n<p>I think there was a thread about this same thing a while back</p>\n</blockquote>\n<p>Yes, I think I did run into it back when I joined Roc's ZulipChat instance, when I was exploring different streams and topics. It's embarrassing that I couldn't spot it, nor remember about the topic I'd read <span aria-label=\"man facepalming\" class=\"emoji emoji-1f926-200d-2642\" role=\"img\" title=\"man facepalming\">:man_facepalming:</span></p>\n<blockquote>\n<p>it seems like a good case for a tailored error message</p>\n</blockquote>\n<p>I'm slightly biased, as I've just fallen for this trap, but I'd say it'd be definitely worth associating a more concrete error message with this class of error cases.</p>",
        "id": 431597994,
        "sender_full_name": "Hristo",
        "timestamp": 1712348347
    },
    {
        "content": "<p>if anyone wants to try implementing that, I'd be happy to give pointers on how to do it!</p>",
        "id": 431611094,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712354584
    },
    {
        "content": "<p>I'll be definitely happy to contribute along these lines at some point after I've produced an end-to-end first draft of my book chapter, if that's Ok (no pun intended <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>).<br>\nCurrently, extremely short on non-primary-job programming time, as there's been an unusual extremely busy stretch of work for about 2 months now.</p>",
        "id": 431653325,
        "sender_full_name": "Hristo",
        "timestamp": 1712391487
    },
    {
        "content": "<p>I made <a href=\"https://github.com/roc-lang/roc/issues/6630\">#6630</a> for this.</p>",
        "id": 431655756,
        "sender_full_name": "Anton",
        "timestamp": 1712393768
    },
    {
        "content": "<p>Would it make sense for the corresponding ticket to be a bit more general than just <code>OK</code>/<code>Ok</code>? For instance, handling also other possible capitalisation mismatches such as <code>Err</code>/<code>ERR</code>? I suppose those haven't been reported to have occurred yet, and would probably not be as common, but it might be useful to have a fuzzy similarity check along the lines of \"Did you mean &lt;one or more options&gt; instead?\", which already applies in some other Roc error cases.</p>",
        "id": 431665422,
        "sender_full_name": "Hristo",
        "timestamp": 1712403146
    },
    {
        "content": "<p>Good idea! I've added a checkbox to the issue to evaluate that possibility once the specific OK&lt;-&gt;Ok case is handled.</p>",
        "id": 431665891,
        "sender_full_name": "Anton",
        "timestamp": 1712403644
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 431666620,
        "sender_full_name": "Hristo",
        "timestamp": 1712404389
    },
    {
        "content": "<p>oh yeah I was thinking of it in terms of capitalization in general <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 431667788,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712405586
    },
    {
        "content": "<p>and for that matter we can do edit distance to suggest tag names like we do variable names in case there's a misspelling there</p>",
        "id": 431667866,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1712405647
    },
    {
        "content": "<p>Yes, that's what I meant by \"fuzzy similarity check\", thanks <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span>! (I hadn't checked that part of the codebase to have known how that's implemented in Roc. Perhaps \"fuzzy\" and \"similarity\" were a bit too redundant terms to have put together in this context haha <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>)</p>",
        "id": 431674706,
        "sender_full_name": "Hristo",
        "timestamp": 1712411101
    }
]