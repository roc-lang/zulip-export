[
    {
        "content": "<p>I am trying to write a simple toEncoder generator for enum values based on the mapping list, which requires Eq ability.<br>\n<code>roc check</code> doesn't find errors or warnings, but I get the following error on <code>roc run</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;&lt;unnamed&gt;&#39; panicked at &#39;Cannot find a partial proc for LambdaName { name: `17.IdentId(9)`, niche: Niche(Captures([InLayout(54)])) }&#39;, crates/compiler/mono/src/ir.rs:3193:13\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>\n<p>main.roc :</p>\n<div class=\"codehilite\"><pre><span></span><code>app &quot;simple-enum&quot;\n    packages {\n        pf: &quot;https://github.com/roc-lang/basic-cli/releases/download/0.8.1/x8URkvfyi9I0QhmVG98roKBUs_AZRkLFwFJVJ3942YA.tar.br&quot;,\n        json: &quot;https://github.com/lukewilliamboswell/roc-json/releases/download/0.6.3/_2Dh4Eju2v_tFtZeMq8aZ9qw2outG04NbkmKpFhXS_4.tar.br&quot;,\n    }\n    imports [\n        pf.Stdout,\n        json.Core.{ json },\n    ]\n    provides [main] to pf\n\nmain =\n    Encode.toBytes (@PipelineStatus Running) json |&gt; Str.fromUtf8 |&gt; Result.withDefault &quot;Failed to encode&quot; |&gt; Stdout.line\n\nencodeEnum : List (a, Str) -&gt; (a -&gt; Encoder fmt) where a implements Eq, fmt implements EncoderFormatting\nencodeEnum = \\values -&gt; \\enum -&gt;\n        Encode.custom\n            (\\bytes, _fmt -&gt; List.concat\n                    bytes\n                    (\n                        when\n                            List.findFirst values \\pair -&gt; enum == pair.0\n                        is\n                            Ok pair -&gt; Str.toUtf8 &quot;\\&quot;$(pair.1)\\&quot;&quot;\n                            Err err -&gt; crash (Inspect.toStr err)\n                    )\n            )\n\nPipelineStatus := [\n    Shutdown,\n    Running,\n]\n    implements [\n        Encoding { toEncoder: encodePipelineStatus },\n        Inspect, # auto derive\n        Eq, # auto derive\n    ]\nvaluesPipelineStatus = [\n    (@PipelineStatus Shutdown, &quot;Shutdown&quot;),\n    (@PipelineStatus Running, &quot;Running&quot;),\n]\nencodePipelineStatus = encodeEnum valuesPipelineStatus\n</code></pre></div>\n<p>The same error occurs without type declaration for <code>encodeEnum</code>.</p>\n<p>It looks like I might need to specify type definition something like</p>\n<div class=\"codehilite\"><pre><span></span><code>encodeEnum : List (a, Str) -&gt; (a -&gt; Encoder fmt) where a implements [Encoding, Eq], fmt implements EncoderFormatting\n</code></pre></div>\n<p>but it looks like this syntax isn't supported yet.<br>\nDid anyone had a similar issue?</p>",
        "id": 431615261,
        "sender_full_name": "Karakatiza",
        "timestamp": 1712357415
    },
    {
        "content": "<p>Type declaration</p>\n<div class=\"codehilite\"><pre><span></span><code>encodeEnum : List (a, Str) -&gt; (a -&gt; Encoder fmt) where a implements Encoding, fmt implements EncoderFormatting\n</code></pre></div>\n<p>on <code>roc run</code> yields </p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;&lt;unnamed&gt;&#39; panicked at &#39;[Abilities] not yet implemented. Tracking issue: https://github.com/roc-lang/roc/issues/2463&#39;, crates/compiler/solve/src/specialize.rs:874:34\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>",
        "id": 431615349,
        "sender_full_name": "Karakatiza",
        "timestamp": 1712357497
    },
    {
        "content": "<p>The syntax is with an <code>&amp;</code>. So should be something like:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">encodeEnum</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Encoder</span><span class=\"w\"> </span><span class=\"nv\">fmt</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kr\">where</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">implements</span><span class=\"w\"> </span><span class=\"kt\">Encoding</span><span class=\"w\"> </span><span class=\"err\">&amp;</span><span class=\"w\"> </span><span class=\"kt\">Eq</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">fmt</span><span class=\"w\"> </span><span class=\"nv\">implements</span><span class=\"w\"> </span><span class=\"kt\">EncoderFormatting</span>\n</code></pre></div>",
        "id": 431616361,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712358285
    },
    {
        "content": "<p>Not sure that is the actual bug here specifically, but that would be the type</p>",
        "id": 431616435,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712358344
    },
    {
        "content": "<p>Thanks, this seems to be the case! But this indeed is not the source of the error, I am working on a simpler reproduction</p>",
        "id": 431616558,
        "sender_full_name": "Karakatiza",
        "timestamp": 1712358433
    },
    {
        "content": "<p>I know a workaround. This is the first time I have seen this bug in an app. Generally it is only seen on the app platform boundary.</p>\n<p><span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> would probably have context as to why the issue exist</p>\n<p>I have no idea, just have a workround:<br>\nChange the last line to:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">encodePipelineStatus</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">e</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">encodeEnum</span><span class=\"w\"> </span><span class=\"nv\">valuesPipelineStatus</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">e</span>\n</code></pre></div>",
        "id": 431616685,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712358535
    },
    {
        "content": "<p>Wow, this works!! Thank you, Brendan!</p>",
        "id": 431616797,
        "sender_full_name": "Karakatiza",
        "timestamp": 1712358623
    },
    {
        "content": "<p>It is a fun game I am having with Roc - when something errors out in runtime - try to shuffle equivalent expressions / add explicit types until the code works <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 431616857,
        "sender_full_name": "Karakatiza",
        "timestamp": 1712358695
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"654587\">Karakatiza</span> has marked this topic as resolved.</p>",
        "id": 431616866,
        "sender_full_name": "Notification Bot",
        "timestamp": 1712358701
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"654587\">Karakatiza</span> has marked this topic as unresolved.</p>",
        "id": 431617493,
        "sender_full_name": "Notification Bot",
        "timestamp": 1712359199
    },
    {
        "content": "<p>I have a minimal reproduction (requires multiple files):<br>\nShow.roc</p>\n<div class=\"codehilite\"><pre><span></span><code>interface Show\n    exposes [Show, show]\n    imports [\n    ]\n\nShow implements\n    show : a -&gt; Str where a implements Show\n</code></pre></div>\n<p>Types.roc</p>\n<div class=\"codehilite\"><pre><span></span><code>interface Types\n    exposes [PipelineStatus, pipelineStatus]\n    imports [\n        Show.{ Show, show },\n        Enum.{ showEnum },\n    ]\n\nPipelineStatus := [\n    Shutdown,\n    Running,\n]\n    implements [\n        Eq,\n        Show { show: showPipelineStatus },\n    ]\nvaluesPipelineStatus = [\n    (@PipelineStatus Shutdown, &quot;Shutdown&quot;),\n    (@PipelineStatus Running, &quot;Running&quot;),\n]\nshowPipelineStatus = showEnum valuesPipelineStatus\npipelineStatus = \\x -&gt; @PipelineStatus x\n\nexpect\n    show (pipelineStatus Running) == &quot;Running&quot;\n</code></pre></div>\n<p>Enum.roc</p>\n<div class=\"codehilite\"><pre><span></span><code>interface Enum\n    exposes [\n        showEnum,\n    ]\n    imports [\n    ]\n\nshowEnum = \\values -&gt; \\enum -&gt;\n        when\n            List.findFirst values \\pair -&gt; enum == pair.0\n        is\n            Ok pair -&gt; pair.1\n            Err err -&gt; crash (Inspect.toStr err)\n</code></pre></div>\n<p>main.roc</p>\n<div class=\"codehilite\"><pre><span></span><code>app &quot;simple-enum&quot;\n    packages {\n        pf: &quot;https://github.com/roc-lang/basic-cli/releases/download/0.8.1/x8URkvfyi9I0QhmVG98roKBUs_AZRkLFwFJVJ3942YA.tar.br&quot;,\n    }\n    imports [\n        pf.Stdout,\n        Show.{ Show, show, pipelineStatus },\n        Types.{ pipelineStatus },\n    ]\n    provides [main] to pf\n\nmain =\n    show (pipelineStatus Running) |&gt; Stdout.line\n</code></pre></div>\n<p><code>roc run</code> yields</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;main&#39; panicked at &#39;Error in alias analysis: error in module ModName(&quot;UserApp&quot;), function definition FuncName(&quot;\\x11\\x00\\x00\\x00\\x00\\x00\\x00\\x00t\\xebz\\x14\\xc2\\x8d\\x90\\xb5&quot;), definition of value binding ValueId(4): expected type &#39;((heap_cell,),)&#39;, found type &#39;((heap_cell, bag&lt;((heap_cell,), ())&gt;),)&#39;&#39;, crates/compiler/gen_llvm/src/llvm/build.rs:5759:19\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>\n<p><code>roc test</code> yields</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;&lt;unnamed&gt;&#39; panicked at &#39;Cannot find a partial proc for LambdaName { name: `40.IdentId(2)`, niche: Niche(Captures([InLayout(27)])) }&#39;, crates/compiler/mono/src/ir.rs:3193:13\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>",
        "id": 431617629,
        "sender_full_name": "Karakatiza",
        "timestamp": 1712359309
    },
    {
        "content": "<p>Yeah, though roc's core is pretty stable, it is easy to hit bugs especially, with more complex types and features (like abilities)</p>",
        "id": 431617756,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1712359391
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"654587\">@Karakatiza</span> I think this would be helpful as an Issue if you dont mind.</p>",
        "id": 431625013,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1712365751
    },
    {
        "content": "<p>Now tracking in <a href=\"https://github.com/roc-lang/roc/issues/6629\">https://github.com/roc-lang/roc/issues/6629</a></p>",
        "id": 431630537,
        "sender_full_name": "Karakatiza",
        "timestamp": 1712370711
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"654587\">Karakatiza</span> has marked this topic as resolved.</p>",
        "id": 431630538,
        "sender_full_name": "Notification Bot",
        "timestamp": 1712370712
    }
]