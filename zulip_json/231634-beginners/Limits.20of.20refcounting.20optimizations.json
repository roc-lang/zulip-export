[
    {
        "content": "<p>I have the following code, and I'm wondering whether the way I'm bundling state together into this IdBindState record is going to be negating the optimization where a refcount of 1 allows in-place mutation?</p>\n<div class=\"codehilite\"><pre><span></span><code>IdBindState : { byId: List IdParser, byName: Dict Name Id, unique: Dict Str Id }\n\nstateBind : IdBindState, IdParser -&gt; {state: IdBindState, id: Id}\nstateBind = \\state, parser -&gt;\n    when Dict.get state.unique parser is\n        Err KeyNotFound -&gt;\n            id = List.len state.byId\n            newById = List.append state.byId parser\n            newUnique = Dict.set state.unique parser id\n            {state: {byId: newById, byName: state.byName, unique: newUnique}, id}\n        Ok id -&gt; {state, id}\n</code></pre></div>\n<p>In particular - will the old versions of <code>byId</code> and <code>unique</code> be kept alive because they're still referenced from <code>state</code>? Or will the compiler know that each of those fields in that particular <code>state</code> is ever accessed again?</p>\n<p>If the compiler doesn't optimize that reliably, I can see that being a footgun of accidental state duplication.</p>",
        "id": 318188937,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1672197173
    },
    {
        "content": "<p>Currently a foot gun</p>",
        "id": 318193872,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1672202693
    },
    {
        "content": "<p>Has been noted a few times before.</p>",
        "id": 318193886,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1672202712
    },
    {
        "content": "<p>I always deconstruct records that are function inputs to avoid that issue</p>",
        "id": 318193904,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1672202761
    }
]