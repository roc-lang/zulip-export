[
    {
        "content": "<p>Okay this is really a beginner question. But I'm stumped.<br>\nI can't figure out how to assign variables within the scope of a function.<br>\nI get that I can do <code>foobar = \"foobar\"</code> to assign module-scoped constants<br>\nbut what if I want to do an expensive operation on runtime data, and use the result in two different places?</p>\n<p>basically I wanted to do something like </p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>let\n  a = f x\nin\n  (g a) + (h a)\n</code></pre></div>\n<p>I can of course do</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>(g (f x)) + (h (f x))\n</code></pre></div>\n<p>but that seems to compute <code>f</code> twice? Seems really inefficient.</p>",
        "id": 405342125,
        "sender_full_name": "Asbjørn Olling",
        "timestamp": 1701430193
    },
    {
        "content": "<p>I assume that I'm just being dumb here and need some help <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 405342538,
        "sender_full_name": "Asbjørn Olling",
        "timestamp": 1701430337
    },
    {
        "content": "<p>I of course read through the tutorial. It seems the most relevant section was \"Naming things\", but that only describes assigning constants.</p>",
        "id": 405342630,
        "sender_full_name": "Asbjørn Olling",
        "timestamp": 1701430385
    },
    {
        "content": "<p>I guess I could \"fork\" the value by calling a function like <code>\\a -&gt; (g a) + (h a)</code><br>\nIs that maybe the idiomatic way to do this?</p>",
        "id": 405342707,
        "sender_full_name": "Asbjørn Olling",
        "timestamp": 1701430433
    },
    {
        "content": "<p>ah! Short answer is to take your <code>let</code> ... <code>in</code> example and delete the <code>let</code> and <code>in</code> keywords <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 405343370,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701430706
    },
    {
        "content": "<p>here's an example in the tutorial: <a href=\"https://www.roc-lang.org/tutorial#if-then-else\">https://www.roc-lang.org/tutorial#if-then-else</a></p>",
        "id": 405343392,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701430717
    },
    {
        "content": "<p>basically Roc uses <code>let</code> ... <code>in</code> semantics except it's based on indentation instead of having actual <code>let</code> and <code>in</code> keywords</p>",
        "id": 405343560,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701430779
    },
    {
        "content": "<p>Also doesn't Roc have some magic compiler stuff so that calling the function twice with the same argument is zero additional work? It's not being calculating things again right?</p>",
        "id": 405343886,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1701430913
    },
    {
        "content": "<p>not currently, although theoretically we could in certain cases</p>",
        "id": 405344132,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1701431014
    },
    {
        "content": "<p>Ah cool. Thanks for the help.<br>\nA suggestion: maybe it would be useful to include a non-constant assignment example in the \"Naming things\" section. :)</p>",
        "id": 405345406,
        "sender_full_name": "Asbjørn Olling",
        "timestamp": 1701431546
    }
]