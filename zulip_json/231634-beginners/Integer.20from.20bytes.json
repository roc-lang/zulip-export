[
    {
        "content": "<p>Hey, I'm working on parsing a binary format in Roc and I need to parse a series of bytes into an integer. To be specific, I need to parse a little endian u64.  Is there a builtin for this?</p>",
        "id": 423668916,
        "sender_full_name": "Louis Pearson",
        "timestamp": 1709057550
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"550652\">@Louis Pearson</span>,<br>\nThere used to be builtins for this but they got removed. I believe because they detected endianness automatically and we did not want the same pure roc program to return different outputs on different devices.</p>",
        "id": 423671341,
        "sender_full_name": "Anton",
        "timestamp": 1709058448
    },
    {
        "content": "<p>Ok, that makes sense. I decided to write my own function for it:</p>\n<div class=\"codehilite\"><pre><span></span><code>leBytesToU64 : List U8 -&gt; U64\nleBytesToU64 = \\bytes -&gt;\n    expect List.len bytes == 8\n    .value (List.walk bytes {value: 0, index: 0} \\{value, index}, byte -&gt;\n        { value: value + (Num.shiftRightBy (Num.toU64 byte) (index * 4))\n        , index: index + 1\n        })\n</code></pre></div>",
        "id": 423671828,
        "sender_full_name": "Louis Pearson",
        "timestamp": 1709058630
    },
    {
        "content": "<p>It's important to be aware that inline expect statements are discarded when building a roc program for release (with <code>roc build</code>). So you probably want to use <code>Result</code> here, or if you're building something quick and dirty you can use the <code>crash</code> keyword.</p>",
        "id": 423672689,
        "sender_full_name": "Anton",
        "timestamp": 1709059033
    },
    {
        "content": "<p>Thank you! Took me a little bit to work out how to integrate it into the rest of my code, but I've changed the function to look like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>leBytesToU64 : List U8 -&gt; Result U64 [WrongListLength]\nleBytesToU64 = \\bytes -&gt;\n    if List.len bytes == 8 then\n        Ok (.value (List.walk bytes {value: 0, index: 0} \\{value, index}, byte -&gt;\n            { value: value + (Num.shiftRightBy (Num.toU64 byte) (index * 4))\n            , index: index + 1\n            }))\n    else\n        Err WrongListLength\n</code></pre></div>",
        "id": 423680015,
        "sender_full_name": "Louis Pearson",
        "timestamp": 1709061772
    },
    {
        "content": "<p>My main problem was trying to do everything in one function chaining a bunch of Task.await calls. I fixed it by moving the functional code to it's own function that returns a result and then convert that to Task.Ok/Task.Err based on the result</p>",
        "id": 423680359,
        "sender_full_name": "Louis Pearson",
        "timestamp": 1709061917
    },
    {
        "content": "<p>Using dbg for my print statements also helped</p>",
        "id": 423680644,
        "sender_full_name": "Louis Pearson",
        "timestamp": 1709062023
    },
    {
        "content": "<p>We have a solid design for this, just needs someone to implement I think. It's been a while since I looked at this, but I dont think we made a tracking issue for it yet. Here's the discussion <a href=\"#narrow/stream/383402-API-Design/topic/reading.20integers.20from.20bytes/near/418550042\">https://roc.zulipchat.com/#narrow/stream/383402-API-Design/topic/reading.20integers.20from.20bytes/near/418550042</a></p>",
        "id": 423685402,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1709063747
    },
    {
        "content": "<p>I think the final design is to leave it to users for integers</p>",
        "id": 423695659,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1709067702
    },
    {
        "content": "<p>I think it is just fractional types that will require methods to break them into pieces</p>",
        "id": 423695766,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1709067725
    },
    {
        "content": "<p>this is a great approach <span class=\"user-mention\" data-user-id=\"550652\">@Louis Pearson</span>! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 423695919,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1709067794
    },
    {
        "content": "<p>I wonder if llvm will inline that all happily to get the optimized output.</p>",
        "id": 423696184,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1709067888
    },
    {
        "content": "<p>If not, probably have to do it the more manual way:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">leBytesToU64</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"kt\">U64</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">WrongListLength</span><span class=\"p\">]</span>\n<span class=\"nv\">leBytesToU64</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">bytes</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">bytes</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"p\">[</span><span class=\"nv\">b0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">b1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">b2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">b3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">b4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">b5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">b6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">b7</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toU64</span><span class=\"w\"> </span><span class=\"nv\">b0</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">bitwiseOr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toU64</span><span class=\"w\"> </span><span class=\"nv\">b1</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">shiftLeftBy</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">bitwiseOr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toU64</span><span class=\"w\"> </span><span class=\"nv\">b2</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">shiftLeftBy</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">bitwiseOr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toU64</span><span class=\"w\"> </span><span class=\"nv\">b3</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">shiftLeftBy</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">bitwiseOr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toU64</span><span class=\"w\"> </span><span class=\"nv\">b4</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">shiftLeftBy</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">bitwiseOr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toU64</span><span class=\"w\"> </span><span class=\"nv\">b5</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">shiftLeftBy</span><span class=\"w\"> </span><span class=\"mi\">40</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">bitwiseOr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toU64</span><span class=\"w\"> </span><span class=\"nv\">b6</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">shiftLeftBy</span><span class=\"w\"> </span><span class=\"mi\">48</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">bitwiseOr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toU64</span><span class=\"w\"> </span><span class=\"nv\">b7</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">shiftLeftBy</span><span class=\"w\"> </span><span class=\"mi\">56</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">NotEnoughData</span>\n</code></pre></div>",
        "id": 423696820,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1709068128
    },
    {
        "content": "<p>Oh, also, in your example, you probably want to use <a href=\"https://www.roc-lang.org/builtins/List#walkWithIndex\">List.walkWithIndex</a>. Something like this is a bit more cleaned up:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">leBytesToU64</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"kt\">U64</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">WrongListLength</span><span class=\"p\">]</span>\n<span class=\"nv\">leBytesToU64</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">bytes</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">len</span><span class=\"w\"> </span><span class=\"nv\">bytes</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"w\">        </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">walkWithIndex</span><span class=\"w\"> </span><span class=\"nv\">bytes</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">byte</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">           </span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">shiftRightBy</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toU64</span><span class=\"w\"> </span><span class=\"nv\">byte</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">index</span><span class=\"w\"> </span><span class=\"nf\">*</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Ok</span>\n<span class=\"w\">    </span><span class=\"kr\">else</span>\n<span class=\"w\">        </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">WrongListLength</span>\n</code></pre></div>",
        "id": 423697353,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1709068329
    },
    {
        "content": "<p>Hmm, just realized my implementation is multiplying index by 4 when it should be multiplying by 8</p>",
        "id": 423711430,
        "sender_full_name": "Louis Pearson",
        "timestamp": 1709073498
    },
    {
        "content": "<p>Thanks for the examples BTW, still trying to get my bearings in Roc</p>",
        "id": 423711521,
        "sender_full_name": "Louis Pearson",
        "timestamp": 1709073556
    },
    {
        "content": "<p>I'm more used to procedural languages like zig</p>",
        "id": 423713051,
        "sender_full_name": "Louis Pearson",
        "timestamp": 1709074358
    },
    {
        "content": "<p>Yeah, definitely is a learning curve. Roc was my first langauge where I really dove more into FP.</p>",
        "id": 423713924,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1709074790
    },
    {
        "content": "<p>Like I have done some elm, ocaml, and haskel, but not enough to actually feel like I know FP. Just basic tutorial level stuff.</p>",
        "id": 423714041,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1709074825
    },
    {
        "content": "<p>Yeah, I'm in the same boat</p>",
        "id": 423714150,
        "sender_full_name": "Louis Pearson",
        "timestamp": 1709074877
    },
    {
        "content": "<p>I found elm to be a really compelling language when I first encountered it, but I don't do that much frontend web development so I didn't have a use case for it. I know Roc is still early days but I'm excited by the idea of it</p>",
        "id": 423714556,
        "sender_full_name": "Louis Pearson",
        "timestamp": 1709075084
    },
    {
        "content": "<p>yeah, same here. Elm has been in my back pocket but I essentially never do web dev.</p>",
        "id": 423714720,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1709075182
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"550652\">@Louis Pearson</span> would you be interested in making a library/package that implements the <code>Decoding</code> and <code>Encoding</code> abilities like JSON does? If so I could help you with that. It's been on my list for a couple of months now but I haven't quite got around to it. We don't quite have all the pieces like for Dec/Frac etc, but I guess we could leave them unimplemented for now.</p>",
        "id": 423763728,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1709107058
    },
    {
        "content": "<p>Also, I'm interested to know what binary format you are looking at. It sounds interesting</p>",
        "id": 423763943,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1709107152
    },
    {
        "content": "<p>Sure, is there a guide to creating a Roc package?</p>",
        "id": 423763962,
        "sender_full_name": "Louis Pearson",
        "timestamp": 1709107159
    },
    {
        "content": "<p>The binary format is the signature block in Android APKs</p>",
        "id": 423764038,
        "sender_full_name": "Louis Pearson",
        "timestamp": 1709107193
    },
    {
        "content": "<p>I don't think we have a guide yet</p>",
        "id": 423764128,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1709107213
    },
    {
        "content": "<p><a href=\"https://source.android.com/docs/security/features/apksigning/v2\">https://source.android.com/docs/security/features/apksigning/v2</a></p>",
        "id": 423764289,
        "sender_full_name": "Louis Pearson",
        "timestamp": 1709107274
    },
    {
        "content": "<p>I don't think this is a candidate for decode and encode. It is a specific binary header rather than a generic binary format</p>",
        "id": 423844845,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1709134573
    },
    {
        "content": "<p>I thought the question of packaging was for encode/decode of little-endian or big-endian integers, not for APK signing</p>",
        "id": 423855126,
        "sender_full_name": "Louis Pearson",
        "timestamp": 1709137325
    },
    {
        "content": "<p>Ah fair, though either way, it can't use the actual <code>Encoding</code> and <code>Decoding</code> abilities unless it is a full generic binary serialization format.</p>",
        "id": 423870779,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1709142403
    }
]