[
    {
        "content": "<p>Hi...<br>\nI am a beginner programmer on ROC language.<br>\nI got an error message <code>terminated by signal SIGSEGV (Address boundary error)</code><br>\nIn this code:</p>\n<div class=\"codehilite\"><pre><span></span><code>main = Program.noArgs mainTask\n\npowDigit : U32 -&gt; U32\npowDigit = \\nval -&gt;\n    cval = nval // 10\n    rem = nval % 10\n    when cval is\n      0 -&gt; rem * rem\n      _ -&gt; (rem * rem) + (powDigit cval)\n\npattern : U32 -&gt; U32\npattern = \\val -&gt;\n    pw = powDigit val\n    when pw is\n        1 -&gt; 0\n        89 -&gt; 1\n        _ -&gt; pattern pw\n\nloop : U32 -&gt; U32\nloop = \\number -&gt;\n    when number is\n        1 -&gt; 0\n        _ -&gt; pattern number + (loop (number - 1))\n\nmainTask =\n    Stdout.line (1_000_000 |&gt; loop |&gt; Num.toStr)\n     |&gt; Program.exit 0\n</code></pre></div>\n<p>Is it segmentation fault error?</p>",
        "id": 306159959,
        "sender_full_name": "Katsuki",
        "timestamp": 1666755872
    },
    {
        "content": "<p>I think it is a stack overflow</p>",
        "id": 306161130,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1666756974
    },
    {
        "content": "<p>yeah, definitely a stack overflow in my testing. It can get a bit farther with <code>--optimize</code>, but 1,000,000 leads to deep nesting of function calls. Since the function isn't tail recursive, it can't be turned into a loop.</p>",
        "id": 306161300,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1666757121
    },
    {
        "content": "<p>Interesting... thinking out loud here... would it be possible for <code>roc check</code> to give you a warning when you have a recursion that is not tail-recursive? Maybe it could suggest another way to write it? I'm not sure how hard that would be to do in practice, but it seems important for a FP language where we don't have loops. Or would something like this also overflow in an iterative implementation?</p>",
        "id": 306162348,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1666757809
    },
    {
        "content": "<blockquote>\n<p>would it be possible for <code>roc check</code> to give you a warning when you have a recursion that is not tail-recursive?</p>\n</blockquote>\n<p>Should be doable, the compiler at some point knows if a function is tail recursive. That said, it might be much later than the steps that <code>roc check</code> runs.</p>\n<blockquote>\n<p>Maybe it could suggest another way to write it?</p>\n</blockquote>\n<p>I would bet in most cases that would be really hard to do.</p>\n<blockquote>\n<p>Or would something like this also overflow in an iterative implementation?</p>\n</blockquote>\n<p>I think iterative would be fine. If this was rewritten in some sort of accumulator pattern, I would expect it to work.</p>",
        "id": 306163873,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1666758860
    },
    {
        "content": "<p>It's worth noting that non-tail recursion is perfectly ok and deliberate in lots of cases! It's the only way to implement some algorithms. If you are implementing one of those cases, it would be weird to get a warning about your perfectly correct code, as if it's wrong. So although it's _possible_, I'm not sure it's a good idea.</p>",
        "id": 306310461,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1666810951
    }
]