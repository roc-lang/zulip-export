[
    {
        "content": "<p>Is there a generic type for unsigned integers, as in, a type that the only restriction on the number is that it is unsigned and does not limit the size or the underlying representation of the number? I would like to write functions that work on any unsigned integer to only choose its size at the edge of the app.</p>",
        "id": 303088934,
        "sender_full_name": "Chris Duncan",
        "timestamp": 1665287879
    },
    {
        "content": "<p>Is that what an Int * is?</p>",
        "id": 303089028,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1665287979
    },
    {
        "content": "<p>Currently no: <a href=\"https://github.com/roc-lang/roc/blob/main/crates/compiler/builtins/roc/Num.roc#L421\">https://github.com/roc-lang/roc/blob/main/crates/compiler/builtins/roc/Num.roc#L421</a></p>",
        "id": 303089032,
        "sender_full_name": "jan kili",
        "timestamp": 1665287986
    },
    {
        "content": "<p>As you can see in the definitions for <code>I128</code>, <code>U8</code>, etc. the size &amp; signedness are currently entangled</p>",
        "id": 303089107,
        "sender_full_name": "jan kili",
        "timestamp": 1665288028
    },
    {
        "content": "<p>However, I imagine that could change</p>",
        "id": 303089117,
        "sender_full_name": "jan kili",
        "timestamp": 1665288050
    },
    {
        "content": "<p>Could you do something like [U16, U32, U64, ...]?</p>",
        "id": 303089155,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1665288091
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> you could use tags to indicate what type of data you're intending to be passing around, but it wouldn't enforce it</p>",
        "id": 303089277,
        "sender_full_name": "jan kili",
        "timestamp": 1665288174
    },
    {
        "content": "<p>since the numerical system currently only supports enforcing either integerness or 64-bit-unsigned-integer-ness, but nothing in-between</p>",
        "id": 303089317,
        "sender_full_name": "jan kili",
        "timestamp": 1665288216
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"551608\">@Chris Duncan</span> in other words, you can definitely write those functions today, but you can't prevent yourself from using them on signed integers</p>",
        "id": 303089391,
        "sender_full_name": "jan kili",
        "timestamp": 1665288281
    },
    {
        "content": "<p>well, actually, nevermind, <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> makes a good point - you could restrict them to operate on the exact complete set of currently-defined unsigned integer types</p>",
        "id": 303089496,
        "sender_full_name": "jan kili",
        "timestamp": 1665288395
    },
    {
        "content": "<p>Yeah, re what Luke suggested, you could do something like</p>\n<div class=\"codehilite\"><pre><span></span><code>UnsignedInt : [U8 U8, U16 U16, ...]\n\naddUnsigned : UnsignedInt, UnsignedInt -&gt; UnsignedInt\n</code></pre></div>\n<p>but this can be kind of annoying , since you'll need to enumerate all cases in a <code>when</code> expression</p>",
        "id": 303089536,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665288480
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>UnsignedFriend : [Smol U8, Small U16, Medium U32, Big U64, Beeg U128]\naddUnsigned : UnsignedFriend, UnsignedFriend -&gt; UnsignedFriend\naddUnsigned = \\a, b -&gt;\n    when a is\n        Smol aa -&gt;\n            when b is\n                Smol bb -&gt;\n                    Smol (aa + bb)\n                Small bb -&gt;\n                    Small ((Num.toU16 aa) + bb)\n                Medium bb -&gt;\n                    oh no\n                ...\n        Small aa -&gt;\n            oh no\n        ...\n</code></pre></div>",
        "id": 303089709,
        "sender_full_name": "jan kili",
        "timestamp": 1665288680
    },
    {
        "content": "<p>Currently this would require 25 <code>when</code> cases, which means 40+ lines of repetitive code</p>",
        "id": 303089839,
        "sender_full_name": "jan kili",
        "timestamp": 1665288824
    },
    {
        "content": "<p>The practical solutions to this are:<br>\na) in your project, discourage (but don't prevent) use with signed integers by naming it something like <code>fooUnsigned</code><br>\nb) in the Roc builtins, disentangle signedness from size for integer types for everyone, which doesn't seem crazy</p>",
        "id": 303089994,
        "sender_full_name": "jan kili",
        "timestamp": 1665289017
    },
    {
        "content": "<p>However, if short-term safety is your goal, then enjoy a <code>Beeg</code> function <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 303090068,
        "sender_full_name": "jan kili",
        "timestamp": 1665289132
    },
    {
        "content": "<p>Yeah, I guess we could add this to <code>Num.roc</code> so that <code>Integer range</code> is defined as <code>Integer range := [Signed range, Unsigned range]</code>. And then you get <code>Unsigned range : Integer (Unsigned range)</code> and likewise for <code>Signed</code></p>\n<p>At runtime there would be no extra cost here, just possibly a minor cost to typechecking</p>",
        "id": 303090084,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665289171
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> Would the definition instead be something like <code>Integer signedness range := { signedness, range }</code> so that we can define integer types like <code>I128 : Num (Integer Signed 128)</code>? I'm unfamiliar with opaque types, but I don't know how we'd define <code>I128</code> with the <code>Integer</code> definition you gave above.</p>",
        "id": 303090441,
        "sender_full_name": "jan kili",
        "timestamp": 1665289688
    },
    {
        "content": "<p>Hmm, maybe <code>I128 : Num (Integer (Signed 128))</code>, but something feels wrong about <code>(Signed 128)</code> mapping to <code>range</code>...</p>",
        "id": 303090472,
        "sender_full_name": "jan kili",
        "timestamp": 1665289779
    },
    {
        "content": "<p>either way works, those two definitions are actually identical in terms of what they can express <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 303090611,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665289937
    },
    {
        "content": "<p>there are probably other ways too</p>",
        "id": 303090624,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665289958
    },
    {
        "content": "<p>Oh, cool... but how do we not need <code>signedness</code> as a type variable?</p>",
        "id": 303090646,
        "sender_full_name": "jan kili",
        "timestamp": 1665290002
    },
    {
        "content": "<p>well presumably it would only take on two forms, Signed or Unsigned. That’s why i explicitly enumerated them</p>",
        "id": 303090712,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665290090
    },
    {
        "content": "<p>“range” could be thought of as “bitWidth” here</p>",
        "id": 303090729,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665290136
    },
    {
        "content": "<p>Sorry if I'm being thick here, but wouldn't</p>\n<div class=\"codehilite\"><pre><span></span><code>Integer range := [Signed range, Unsigned range]\nI128 : Num (Integer (Signed 128))\n</code></pre></div>\n<p>mean that <code>I128</code> is \"represented\"(?) as <code>Num (Signed (Signed 128))</code>? And how would it know that first <code>Signed</code> part?</p>",
        "id": 303090949,
        "sender_full_name": "jan kili",
        "timestamp": 1665290427
    },
    {
        "content": "<p>as opposed to</p>\n<div class=\"codehilite\"><pre><span></span><code>Integer signedness range := { signedness, range }\nI128 : Num (Integer Signed 128)\n</code></pre></div>\n<p>meaning that <code>I128</code> is represented as <code>Num { signedness: Signed, range: 128 }</code>?</p>",
        "id": 303091037,
        "sender_full_name": "jan kili",
        "timestamp": 1665290542
    },
    {
        "content": "<p>Maybe the generalization of my question is:</p>\n<p>How can you ever use a tag union as an underlying representation of an opaque type when the tags represent an externally-pickable behavior, since you can't pick the tag via type variables?</p>\n<p>(pardon my lack of vocabulary around opaque types, I'm sure \"pick\" and \"represent\" aren't ideal words here)</p>",
        "id": 303091596,
        "sender_full_name": "jan kili",
        "timestamp": 1665291314
    },
    {
        "content": "<p>(and I'm not asking just to be pedantic - I went to implement this change and got stuck)</p>",
        "id": 303092128,
        "sender_full_name": "jan kili",
        "timestamp": 1665291978
    },
    {
        "content": "<p>I wasn't thinking of a <code>signedness</code> type variable, instead to enumerate signedness explicitly - sorry, I know I glossed over that in your description</p>",
        "id": 303092165,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665292038
    },
    {
        "content": "<p>Concretely</p>",
        "id": 303092167,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665292040
    },
    {
        "content": "<p>&lt;oops&gt;</p>",
        "id": 303092257,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665292146
    },
    {
        "content": "<p>oh oops</p>",
        "id": 303092333,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665292219
    },
    {
        "content": "<p>one sec</p>",
        "id": 303092334,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665292220
    },
    {
        "content": "<p>sorry, you're right, I got too caught up in the value level. my bad, that was really a huge oversight on my part. you would have to have a type variable for the sign</p>",
        "id": 303092455,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665292410
    },
    {
        "content": "<p>Phew, I feel like I just connected a bunch of static-typing neurons in my brain <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 303092514,
        "sender_full_name": "jan kili",
        "timestamp": 1665292458
    },
    {
        "content": "<p>No yeah you're totally right. Sorry again</p>",
        "id": 303092614,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665292571
    },
    {
        "content": "<p>All good! It was a helpful exploration for me :) hopefully others, too</p>",
        "id": 303092719,
        "sender_full_name": "jan kili",
        "timestamp": 1665292704
    },
    {
        "content": "<p>I'm diving back into implementation now, and enjoying the nuance of <code>Nat</code> <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 303092725,
        "sender_full_name": "jan kili",
        "timestamp": 1665292727
    },
    {
        "content": "<p>My implementation so far, what do y'all think? <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> </p>\n<div class=\"codehilite\" data-code-language=\"TypeScript\"><pre><span></span><code><span class=\"nx\">Num</span><span class=\"w\"> </span><span class=\"nx\">range</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"nx\">range</span><span class=\"w\"></span>\n\n<span class=\"nx\">Integer</span><span class=\"w\"> </span><span class=\"nx\">signedness</span><span class=\"w\"> </span><span class=\"nx\">bits</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nx\">signedness</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">bits</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"nx\">Fraction</span><span class=\"w\"> </span><span class=\"nx\">pointSystem</span><span class=\"w\"> </span><span class=\"nx\">bits</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nx\">pointSystem</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">bits</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"nx\">Int</span><span class=\"w\"> </span><span class=\"nx\">signedness</span><span class=\"w\"> </span><span class=\"nx\">bits</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Integer</span><span class=\"w\"> </span><span class=\"nx\">signedness</span><span class=\"w\"> </span><span class=\"nx\">bits</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"nx\">Frac</span><span class=\"w\"> </span><span class=\"nx\">pointSystem</span><span class=\"w\"> </span><span class=\"nx\">bits</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Fraction</span><span class=\"w\"> </span><span class=\"nx\">pointSystem</span><span class=\"w\"> </span><span class=\"nx\">bits</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"nx\">I8</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Int</span><span class=\"w\"> </span><span class=\"nx\">Signed</span><span class=\"w\"> </span><span class=\"nx\">Static8Bits</span><span class=\"w\"></span>\n<span class=\"nx\">I16</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Int</span><span class=\"w\"> </span><span class=\"nx\">Signed</span><span class=\"w\"> </span><span class=\"nx\">Static16Bits</span><span class=\"w\"></span>\n<span class=\"nx\">I32</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Int</span><span class=\"w\"> </span><span class=\"nx\">Signed</span><span class=\"w\"> </span><span class=\"nx\">Static32Bits</span><span class=\"w\"></span>\n<span class=\"nx\">I64</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Int</span><span class=\"w\"> </span><span class=\"nx\">Signed</span><span class=\"w\"> </span><span class=\"nx\">Static64Bits</span><span class=\"w\"></span>\n<span class=\"nx\">I128</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Int</span><span class=\"w\"> </span><span class=\"nx\">Signed</span><span class=\"w\"> </span><span class=\"nx\">Static128Bits</span><span class=\"w\"></span>\n\n<span class=\"nx\">U8</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Int</span><span class=\"w\"> </span><span class=\"nx\">Unsigned</span><span class=\"w\"> </span><span class=\"nx\">Static8Bits</span><span class=\"w\"></span>\n<span class=\"nx\">U16</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Int</span><span class=\"w\"> </span><span class=\"nx\">Unsigned</span><span class=\"w\"> </span><span class=\"nx\">Static16Bits</span><span class=\"w\"></span>\n<span class=\"nx\">U32</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Int</span><span class=\"w\"> </span><span class=\"nx\">Unsigned</span><span class=\"w\"> </span><span class=\"nx\">Static32Bits</span><span class=\"w\"></span>\n<span class=\"nx\">U64</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Int</span><span class=\"w\"> </span><span class=\"nx\">Unsigned</span><span class=\"w\"> </span><span class=\"nx\">Static64Bits</span><span class=\"w\"></span>\n<span class=\"nx\">U128</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Int</span><span class=\"w\"> </span><span class=\"nx\">Unsigned</span><span class=\"w\"> </span><span class=\"nx\">Static128Bits</span><span class=\"w\"></span>\n\n<span class=\"nx\">Nat</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Int</span><span class=\"w\"> </span><span class=\"nx\">Unsigned</span><span class=\"w\"> </span><span class=\"nx\">Dynamic32Or64BitsPerSystem</span><span class=\"w\"></span>\n\n<span class=\"nx\">Signed</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"></span>\n<span class=\"nx\">Unsigned</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"></span>\n\n<span class=\"nx\">Static8Bits</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"></span>\n<span class=\"nx\">Static16Bits</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"></span>\n<span class=\"nx\">Static32Bits</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"></span>\n<span class=\"nx\">Static64Bits</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"></span>\n<span class=\"nx\">Static128Bits</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"></span>\n<span class=\"nx\">Dynamic32Or64BitsPerSystem</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"></span>\n\n<span class=\"nx\">F32</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Frac</span><span class=\"w\"> </span><span class=\"nx\">FloatingPoint</span><span class=\"w\"> </span><span class=\"nx\">Static32Bits</span><span class=\"w\"></span>\n<span class=\"nx\">F64</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Frac</span><span class=\"w\"> </span><span class=\"nx\">FloatingPoint</span><span class=\"w\"> </span><span class=\"nx\">Static64Bits</span><span class=\"w\"></span>\n<span class=\"nx\">Dec</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">Frac</span><span class=\"w\"> </span><span class=\"nx\">FixedPoint</span><span class=\"w\"> </span><span class=\"nx\">Static128Bits</span><span class=\"w\"></span>\n\n<span class=\"nx\">FixedPoint</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"></span>\n<span class=\"nx\">FloatingPoint</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 303093858,
        "sender_full_name": "jan kili",
        "timestamp": 1665294215
    },
    {
        "content": "<p>I wish I saw a way to enable both generic integers and generic 32-bit numbers... because it's so close now... but that doesn't seem syntactically possible to cut generically across both of those dimensions. Oh well, handling both 32-bit integers and 32-bit fractions probably doesn't have many use cases... right?</p>",
        "id": 303094159,
        "sender_full_name": "jan kili",
        "timestamp": 1665294530
    },
    {
        "content": "<p>I'm curious what the motivating use case is! I thought about having this as a distinction back in 2018 but concluded it wouldn't be worth the added type complexity and (probably very minor) compile time increase <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 303094165,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665294532
    },
    {
        "content": "<p>I don't think you can add it onto the existing system, but it's definitely possible (at nontrivial cost) to make <code>Num</code> support this while still supporting all the use cases it currently does</p>",
        "id": 303094188,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665294587
    },
    {
        "content": "<p>(\"it\" &amp; \"this\" meaning 32-bit generics?)</p>",
        "id": 303094242,
        "sender_full_name": "jan kili",
        "timestamp": 1665294621
    },
    {
        "content": "<p>Yes, I'm also interested in the use cases for signedness/bit-depth generics! What's new since 2018?</p>",
        "id": 303094276,
        "sender_full_name": "jan kili",
        "timestamp": 1665294681
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"551608\">@Chris Duncan</span> what's your motivation for this? (mine is just \"because it seems right\")</p>",
        "id": 303094338,
        "sender_full_name": "jan kili",
        "timestamp": 1665294740
    },
    {
        "content": "<p>my threshold for making <code>Num</code> more complex is way higher than \"seems right\" <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 303094369,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665294790
    },
    {
        "content": "<p>my original motivating use case for signedness was wanting <code>Num.neg</code> to only accept signed numbers</p>",
        "id": 303094380,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665294824
    },
    {
        "content": "<p>because with unsigned ones you either give it exactly <code>0</code> or else it's going to panic</p>",
        "id": 303094398,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665294842
    },
    {
        "content": "<p>Well, really how much more complex is <code>Num (Integer Signed Static8Bits)</code> than <code>Num (Integer Signed8)</code>? Is it a matter of character count?</p>",
        "id": 303094578,
        "sender_full_name": "jan kili",
        "timestamp": 1665295070
    },
    {
        "content": "<p>Personally it feels more explanatory, which counts for something, even lowering complexity by making it less magical</p>",
        "id": 303094640,
        "sender_full_name": "jan kili",
        "timestamp": 1665295121
    },
    {
        "content": "<p>However, compile times matter.</p>",
        "id": 303094662,
        "sender_full_name": "jan kili",
        "timestamp": 1665295143
    },
    {
        "content": "<p>I'll give a couple examples I've run into:</p>\n<ul>\n<li>one is throughout advent of code 2021 there are times I've wanted to generically operate over unsigned types, like when working on a 2D Cartesian plane only in Q1: <a href=\"https://github.com/ayazhafiz/roc-advent-of-code/blob/main/2021/day4.roc\">https://github.com/ayazhafiz/roc-advent-of-code/blob/main/2021/day4.roc</a>. Ideally you (or the compiler) would minimize the runtime unsigned integer you use but in practice a U64 is fine. I had a similar thing for day 6</li>\n<li>When you bit shift you want to shift by an unsigned integer amount; again, in practice just passing a U8 is fine</li>\n</ul>",
        "id": 303094714,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665295197
    },
    {
        "content": "<p>(To be fair to the downsides of verbosity, it would be pretty jarring to type <code>List.len [1, 2, 3]</code> into the REPL and see <code>3 : Num (Integer Unsigned Dynamic32Or64BitsPerSystem)</code> <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span> ...it's not wrong, though)</p>",
        "id": 303094973,
        "sender_full_name": "jan kili",
        "timestamp": 1665295363
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> You beat me to it <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span> I'm also doing Advent of Code, and I'm encountering the same want of having functions that operate over natural numbers and expressing that restriction in the types.</p>",
        "id": 303094999,
        "sender_full_name": "Chris Duncan",
        "timestamp": 1665295398
    },
    {
        "content": "<p>It's worth mentioning <code>Nat</code> already exists, and it can already service the use cases mentioned so far</p>",
        "id": 303095100,
        "sender_full_name": "jan kili",
        "timestamp": 1665295513
    },
    {
        "content": "<p>(unless you're working with big numbers on a 32-bit system)</p>",
        "id": 303095138,
        "sender_full_name": "jan kili",
        "timestamp": 1665295549
    },
    {
        "content": "<p>Let's continue discussing if this is sufficiently motivated/justified, but here's a visualization of what the builtins changes might entail: <a href=\"https://github.com/roc-lang/roc/pull/4268/files\">https://github.com/roc-lang/roc/pull/4268/files</a> (and it's missing how many other downstream files will need to change)</p>",
        "id": 303095331,
        "sender_full_name": "jan kili",
        "timestamp": 1665295739
    },
    {
        "content": "<p>I remember from my earlier exploration (it's been a few years, so not sure exactly what I had written down, or where) that it's doable with <code>Int</code> still having one type parameter</p>",
        "id": 303095640,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665296149
    },
    {
        "content": "<p>and then having separate <code>Signed *</code> and <code>Unsigned *</code></p>",
        "id": 303095683,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665296166
    },
    {
        "content": "<p>it was something to do with <code>Int</code>'s type param being a record I think</p>",
        "id": 303095693,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665296176
    },
    {
        "content": "<p>so it was something like <code>Signed a : Int { signedness : [Signed], other : a }</code></p>",
        "id": 303095815,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665296320
    },
    {
        "content": "<p>where <code>other</code> is whatever other info you want in there (e.g. number of bits)</p>",
        "id": 303095832,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665296344
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"462053\">@JanCVanB</span>, I am using <code>Nat</code> precisely because it's the most generic of the unsigned integers.</p>",
        "id": 303095840,
        "sender_full_name": "Chris Duncan",
        "timestamp": 1665296362
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> oh interesting, does reducing the quantity of type parameters inherently reduce complexity to either developers or the compiler?</p>",
        "id": 303095985,
        "sender_full_name": "jan kili",
        "timestamp": 1665296505
    },
    {
        "content": "<p>I think it does for developers - like consider the type of <a href=\"https://www.roc-lang.org/builtins/Num#shiftLeftBy\">https://www.roc-lang.org/builtins/Num#shiftLeftBy</a></p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">Int</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Int</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"></span>\n</code></pre></div>\n<p>vs</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">Int</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">U8</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Int</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 303096111,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665296630
    },
    {
        "content": "<p>it's not the end of the world, but it's definitely more to think about for no real benefit in the common case</p>",
        "id": 303096162,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665296650
    },
    {
        "content": "<p>the type parameter in the first type communicates \"whatever type of integer you pass in, that's the type of integer you'll get back\" - just like <code>List a</code></p>",
        "id": 303096175,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665296688
    },
    {
        "content": "<p>the second one communicates the same information, but in a way that requires strictly more explanation</p>",
        "id": 303096194,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665296716
    },
    {
        "content": "<p><span aria-label=\"100\" class=\"emoji emoji-1f4af\" role=\"img\" title=\"100\">:100:</span> I forgot that a majority of exposures to these type signature will be with placeholders like <code>a</code> and <code>*</code></p>",
        "id": 303096199,
        "sender_full_name": "jan kili",
        "timestamp": 1665296734
    },
    {
        "content": "<p>it also eats up a whole letter in complex signatures</p>",
        "id": 303096257,
        "sender_full_name": "jan kili",
        "timestamp": 1665296771
    },
    {
        "content": "<p>yeah I think it's valuable to have <code>Num</code>, <code>Int</code>, and <code>Frac</code> all have one type parameter, no matter how deep the hierarchy goes beneath them</p>",
        "id": 303096259,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1665296777
    },
    {
        "content": "<p>Totally - and it's trivial to adapt my implementation above to do that.</p>",
        "id": 303096266,
        "sender_full_name": "jan kili",
        "timestamp": 1665296798
    },
    {
        "content": "<p>I don't like this idea but you could do this with abilities rather than extra type parameter</p>",
        "id": 303135063,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665322997
    }
]