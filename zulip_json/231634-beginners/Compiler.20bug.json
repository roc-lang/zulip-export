[
    {
        "content": "<p>Hi, i was messing about with databases and recursive html generation and ren into a weird bug.</p>",
        "id": 429747528,
        "sender_full_name": "Adrian",
        "timestamp": 1711490749
    },
    {
        "content": "<p><code>roc dev</code> results in</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;main&#39; panicked at &#39;Error in alias analysis: error in module ModName(&quot;UserApp&quot;), function definition FuncName(&quot;\\x11\\x00\\x00\\x00\\x04\\x00\\x00\\x00*;j\\xa0}\\xf7\\xe1\\xf1&quot;), definition of value binding ValueId(6): could not find func in module ModName(&quot;UserApp&quot;) with name FuncName(&quot;\\x14\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\xe5\\x96\\x8d\\x14@\\xd2\\xe7\\xc3&quot;)&#39;, crates/compiler/gen_llvm/src/llvm/build.rs:5779:19\n</code></pre></div>",
        "id": 429747645,
        "sender_full_name": "Adrian",
        "timestamp": 1711490791
    },
    {
        "content": "<p><code>roc dev --dev</code> results in</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;main&#39; panicked at &#39;called `Option::unwrap()` on a `None` value&#39;, crates/compiler/mono/src/code_gen_help/mod.rs:587:86\n</code></pre></div>",
        "id": 429747767,
        "sender_full_name": "Adrian",
        "timestamp": 1711490868
    },
    {
        "content": "<p><a href=\"https://ass.si/git/Adrian/skovir2\">ass.si/gitea/skovir2</a> the problematic part seems to be <code>getPostReply</code>, tho i haven't been able to create the minimum example</p>",
        "id": 429748154,
        "sender_full_name": "Adrian",
        "timestamp": 1711491047
    },
    {
        "content": "<p>Thanks for the help</p>",
        "id": 429748194,
        "sender_full_name": "Adrian",
        "timestamp": 1711491067
    },
    {
        "content": "<p>The class of bugs <code>Error in alias analysis</code> are usually pretty hairy. If you are able to isolate and minimise the bug to file an issue that would be helpful. When I usually get this bug, I generally find a workaround by changing the types or finding a bug in my code somewhere.  Another potential solution is to try and remove the type annotations and see if that helps. Sorry I'm not being more helpful.</p>",
        "id": 429748279,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1711491118
    },
    {
        "content": "<p>I was able to remove it for some builds, by adding the annotation.</p>",
        "id": 429748503,
        "sender_full_name": "Adrian",
        "timestamp": 1711491242
    },
    {
        "content": "<p>I'll work on the distillation tomorrow. I just wished, that this was a known problem, so that I needn't be the one reporting it. :)</p>",
        "id": 429748622,
        "sender_full_name": "Adrian",
        "timestamp": 1711491305
    },
    {
        "content": "<p>It is kinda a class of issues <span aria-label=\"oh no\" class=\"emoji emoji-1f615\" role=\"img\" title=\"oh no\">:oh_no:</span>. So multiple variants to be reported to help fix root causes.</p>",
        "id": 429754288,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711494788
    },
    {
        "content": "<p>Not to speculate too much, but this looks like a memory corruption in rust land</p>",
        "id": 429857805,
        "sender_full_name": "Adrian",
        "timestamp": 1711545786
    },
    {
        "content": "<p>What makes you think that?</p>",
        "id": 429871865,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711549617
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Compiler.20bug/near/429871865\">said</a>:</p>\n<blockquote>\n<p>What makes you think that?</p>\n</blockquote>\n<p>The first error message seems to report not finding a wierd function name, that contains non ascii bytes</p>\n<blockquote>\n<p><code>FuncName(\"\\x11\\x00\\x00\\x00\\x04\\x00\\x00\\x00*;j\\xa0}\\xf7\\xe1\\xf1\")</code></p>\n</blockquote>",
        "id": 429873847,
        "sender_full_name": "Adrian",
        "timestamp": 1711550050
    },
    {
        "content": "<p>I think it may just be printing an integer as a string. Need to double check though.</p>",
        "id": 429876488,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711550647
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>app &quot;test&quot;\n    packages {\n        pf: &quot;https://github.com/roc-lang/basic-webserver/releases/download/0.3.0/gJOTXTeR3CD4zCbRqK7olo4edxQvW5u3xGL-8SSxDcY.tar.br&quot;,\n    }\n    imports [\n        pf.Task,\n        pf.SQLite3,\n    ]\n    provides [main] to pf\n\ngetPostReply = \\_postID -&gt;\n    postRez &lt;- SQLite3.execute {\n            path: &quot;skovir.db&quot;,\n            query: &quot;select * from posts&quot;,\n            bindings: [],\n        } |&gt; Task.attempt\n    Task.ok postRez\n\nmain = \\_req -&gt;\n    out &lt;- getPostReply &quot;1&quot; |&gt; Task.attempt\n    Task.ok { body: Inspect.toStr out |&gt; Str.toUtf8, status: 200, headers: [] }\n</code></pre></div>\n<p>This is the smallest I can get it, while still keeping the bug</p>",
        "id": 429882238,
        "sender_full_name": "Adrian",
        "timestamp": 1711551965
    },
    {
        "content": "<p>Tho it seems to be a different bug. Am I writing illegal roc?</p>",
        "id": 429882394,
        "sender_full_name": "Adrian",
        "timestamp": 1711552009
    },
    {
        "content": "<p>I wouldnt say illegal, the compiler should give a nice error instead of crashing.</p>",
        "id": 429931425,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1711567372
    },
    {
        "content": "<p>The Task.attempt parts dont look right to me. I'm away from my computer but can give an example later.</p>",
        "id": 429931538,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1711567426
    },
    {
        "content": "<p>Luke can probably explain why this is happening, but if you change it to unwrap the Task.attempt before wrapping it in a Task.ok a second time, that seems to fix  it. The compiler reasons for why are beyond me though.</p>\n<div class=\"codehilite\"><pre><span></span><code>app &quot;test&quot;\n    packages {\n        pf: &quot;https://github.com/roc-lang/basic-webserver/releases/download/0.3.0/gJOTXTeR3CD4zCbRqK7olo4edxQvW5u3xGL-8SSxDcY.tar.br&quot;,\n    }\n    imports [\n        pf.Task,\n        pf.SQLite3,\n    ]\n    provides [main] to pf\n\ngetPostReply = \\_postID -&gt;\n    postRez &lt;- SQLite3.execute {\n            path: &quot;skovir.db&quot;,\n            query: &quot;select * from posts&quot;,\n            bindings: [],\n        }\n        |&gt; Task.attempt\n\n    # Task.ok postRez\n\n    when postRez is\n        Ok result -&gt;\n            Task.ok result\n\n        Err err -&gt;\n            Task.err err\n\nmain = \\_req -&gt;\n    out &lt;- getPostReply &quot;1&quot; |&gt; Task.attempt\n\n    Task.ok { body: Inspect.toStr out |&gt; Str.toUtf8, status: 200, headers: [] }\n</code></pre></div>",
        "id": 429935647,
        "sender_full_name": "Jeffrey Mudge",
        "timestamp": 1711569005
    },
    {
        "content": "<p>Thats changing the type tho. From <code>_ -&gt; Task (Result (List (List SqliteValue)) Error) []</code> To <code>_ -&gt; Task  (List (List SqliteValue)) Error</code><br>\nCould complex task values be the issue?</p>",
        "id": 429938753,
        "sender_full_name": "Adrian",
        "timestamp": 1711570212
    },
    {
        "content": "<p>I think the Task.attempt requires you to handle the backpassed Task with a function that transforms the Result into a task.<br>\nThe definition according to <a href=\"https://roc-lang.github.io/basic-webserver/Task/#attempt\">https://roc-lang.github.io/basic-webserver/Task/#attempt</a> is <code>attempt : Task a b, (Result a b -&gt; Task c d) -&gt; Task c d</code></p>\n<p>I think if you rewrote the code like this without the syntax sugar it might be more clear that the second argument isn't matching the expected definition for Task.attempt's second argument. </p>\n<div class=\"codehilite\"><pre><span></span><code>Task.attempt (SQLite3.execute {\n            path: &quot;skovir.db&quot;,\n            query: &quot;select * from posts&quot;,\n            bindings: [],\n        }) (\\postRez -&gt; Task.ok postRez)\n</code></pre></div>",
        "id": 429947348,
        "sender_full_name": "Jeffrey Mudge",
        "timestamp": 1711572742
    },
    {
        "content": "<p>Not sure if I said that clearly or not.</p>",
        "id": 429947414,
        "sender_full_name": "Jeffrey Mudge",
        "timestamp": 1711572763
    },
    {
        "content": "<p>Could it be that the return type of <code>Task.ok : a -&gt; Task a *</code> doesn't unify with <code>Task (Result ...) []</code> specifically the error return types?</p>",
        "id": 429947875,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1711572947
    },
    {
        "content": "<p>Yeah, so if I change it to this it is also happy. </p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>getPostReply = \\_postID -&gt;\n    postRez &lt;- SQLite3.execute {\n            path: \"skovir.db\",\n            query: \"select * from posts\",\n            bindings: [],\n        } |&gt; Task.attempt\n\n    Task.ok postRez\n\nmain = \\_req -&gt;\n    out &lt;- getPostReply \"1\" |&gt; Task.await\n    Task.ok { body: Inspect.toStr out |&gt; Str.toUtf8, status: 200, headers: [] }\n</code></pre></div>",
        "id": 429948838,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1711573328
    },
    {
        "content": "<p>So the second <code>Task.attempt</code> changed to <code>Task.await</code>. I think this works because now we are not trying to unwrap an <code>*</code> error... (probably butchered that explanation) and so the compiler can complete its analysis.</p>",
        "id": 429948983,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1711573393
    },
    {
        "content": "<p>At least this is my totally uninformed mental model. To find out what is actually going on we probably need to follow it through the compiler with some <code>dbg!</code> statements, or consult Ayaz who is familiar with the type analysis. Maybe the checkmate program could help here?</p>",
        "id": 429949449,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1711573588
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"565654\">Jeffrey Mudge</span> <a href=\"#narrow/stream/231634-beginners/topic/Compiler.20bug/near/429947348\">said</a>:</p>\n<blockquote>\n<p>I think the Task.attempt requires you to handle the backpassed Task with a function that transforms the Result into a task.<br>\nThe definition according to <a href=\"https://roc-lang.github.io/basic-webserver/Task/#attempt\">https://roc-lang.github.io/basic-webserver/Task/#attempt</a> is <code>attempt : Task a b, (Result a b -&gt; Task c d) -&gt; Task c d</code></p>\n<p>I think if you rewrote the code like this without the syntax sugar it might be more clear that the second argument isn't matching the expected definition for Task.attempt's second argument. </p>\n<p><div class=\"codehilite\"><pre><span></span><code>Task.attempt (SQLite3.execute {\n            path: &quot;skovir.db&quot;,\n            query: &quot;select * from posts&quot;,\n            bindings: [],\n        }) (\\postRez -&gt; Task.ok postRez)\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I'm, sorry, I'm not sure if I'm misreading this, but it seems to me, like this is correct.<br>\nThe Result is passed into the second argument, so the signature must be at least:<br>\n<code>Result a b -&gt; _</code><br>\nand then i return a Task.ok with a value, meaning that i create the following type signature<br>\n<code>Result (List (List SqlValue)) Error -&gt; Task (Result (List (List SqlValue))) []</code><br>\nwhich fits into <code>Result a b -&gt; Task c d</code></p>",
        "id": 429951484,
        "sender_full_name": "Adrian",
        "timestamp": 1711574418
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/231634-beginners/topic/Compiler.20bug/near/429948838\">said</a>:</p>\n<blockquote>\n<p>Yeah, so if I change it to this it is also happy. </p>\n<p><div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>getPostReply = \\_postID -&gt;\n    postRez &lt;- SQLite3.execute {\n            path: \"skovir.db\",\n            query: \"select * from posts\",\n            bindings: [],\n        } |&gt; Task.attempt\n\n    Task.ok postRez\n\nmain = \\_req -&gt;\n    out &lt;- getPostReply \"1\" |&gt; Task.await\n    Task.ok { body: Inspect.toStr out |&gt; Str.toUtf8, status: 200, headers: [] }\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This is great news! Now i can try to work around the issue. I thought I was gonna have to go back to zig. :)</p>",
        "id": 429951873,
        "sender_full_name": "Adrian",
        "timestamp": 1711574590
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span>, sorry for the ping, but after messing about for a day, I still have no idea how to even approach writing a bug report about this. For clarity <a href=\"https://ass.si/git/Adrian/skovir2/src/commit/19d446a53494e9b3472b25f28bbd24247a22c24f/main.roc\">This is the permalink to the problematic file</a>. With the following function seemingly being responsible for the crash:</p>\n<div class=\"codehilite\"><pre><span></span><code>getPostReply : I64, Num * -&gt; Task.Task (List Html.Node) _\ngetPostReply = \\postID, limit -&gt;\n    if limit &gt; 0 then\n        postRez &lt;- dbWrap &quot;select (post_id, post_date, post_content, quoting_post_id) from posts where quoting_post_id = :postid&quot; [{ name: &quot;:postid&quot;, value: Num.toStr postID }] |&gt; Task.attempt\n        posts = postRez |&gt; Result.withDefault [] |&gt; List.map postFromList\n        posts\n         |&gt; List.map\n             (\\el -&gt;\n                 recurse &lt;- getPostReply el.id (limit - 1) |&gt; Task.attempt\n                 Html.div [] [\n                     Html.text &quot;$(Inspect.toStr el)&quot;,\n                     Html.div [] (recurse |&gt; Result.withDefault []),\n                 ]\n                 |&gt; Task.ok\n             )\n         |&gt; seq\n    else\n        Task.ok []\n</code></pre></div>\n<p>Thanks in advance</p>",
        "id": 430057378,
        "sender_full_name": "Adrian",
        "timestamp": 1711629074
    },
    {
        "content": "<p>Don’t worry too much about filing a bug report, we know about this class of issues. Are you able to find a workaround to unlock yourself?</p>",
        "id": 430135965,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1711649230
    },
    {
        "content": "<p>Not really. Currently my best workaround is to just load the whole database into ram</p>",
        "id": 430145620,
        "sender_full_name": "Adrian",
        "timestamp": 1711652540
    },
    {
        "content": "<p>Alright. It might take me a couple days, but I’ll try to take a look at<br>\nyour application and see if I can find a workaround. We have some ideas<br>\nabout how to resolve these types of bugs in the short term.</p>",
        "id": 430152431,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1711655653
    },
    {
        "content": "<p>Much appreciated, tho if a fix is too difficult I'd settle for a brief explanation of this class of issues.</p>",
        "id": 430172806,
        "sender_full_name": "Adrian",
        "timestamp": 1711665804
    },
    {
        "content": "<p>I'm following this with some interest, as I'm currently trying to workaround a similar issue in my Roc project. If anyone has general tips for finding workarounds in these cases that'd be super helpful! I've tried unwrapping and rewrapping a task involved but that didn't make a difference in my case.</p>",
        "id": 430173361,
        "sender_full_name": "Jasper Woudenberg",
        "timestamp": 1711666154
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"695871\">@Adrian</span> when I have had these issues my solution has been to explicitly annotate everything and then work backwards, normally I find it's a weird type error, or there isn't enough information for the compiler to properly infer everything</p>",
        "id": 430890303,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1712099485
    },
    {
        "content": "<p>This sadly didn't work for me (maybe I didn't annotate enough; no true Scotsman). In general i find the bug to pop up when copying Task.seq from <code>basic-cli</code> to <code>basic-webserver</code> (could be due to suppressing errors)</p>",
        "id": 432525254,
        "sender_full_name": "Adrian",
        "timestamp": 1712761344
    },
    {
        "content": "<p>Ahh I might actually have an answer for you now. For me this happens when I create certain type aliases.<br>\nIf I make an opaque type and then make an alias of that opaque type I get that compiler error. My solution is to remove all type aliases that are just aliases of opaque types and write them online instead.</p>",
        "id": 433697455,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1713341318
    },
    {
        "content": "<p>I don't remember writing any explicit type aliases for my case</p>",
        "id": 433711575,
        "sender_full_name": "Adrian",
        "timestamp": 1713345992
    },
    {
        "content": "<p>This issue is being discussed in many places, so I thing closing this and pointing everyone to <a href=\"https://github.com/roc-lang/roc/issues/5701\">github.com/roc-lang/#5701</a> would be the most productive</p>",
        "id": 435550101,
        "sender_full_name": "Adrian",
        "timestamp": 1714123912
    }
]