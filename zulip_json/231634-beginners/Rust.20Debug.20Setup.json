[
    {
        "content": "<p>Hey everyone - any advice on debugging roc-related Rust code in general?</p>\n<p>I'm trying to optimize my local dev setup for small contributions, and just the <code>codelldb</code> debugger extension working, which took setting <code>profile.dev.debug=1</code> in  the Cargo.toml. Do other contributors even rely on the debugger?</p>\n<p>i'm curious, what tips to people have for debugging compiler code?</p>\n<p>For context, I'm developing with Nix in Neovim with the <a href=\"https://github.com/mrcjkb/rustaceanvim\">rustaceanvim</a> plugin.</p>",
        "id": 447507102,
        "sender_full_name": "Isak Jones (he) (W1'21)",
        "timestamp": 1719501831
    },
    {
        "content": "<p>I also use codelldb but with vscode, I never needed to change anything in Cargo.toml though.<br>\nSometimes I use the <a href=\"http://cursor.sh\">cursor.sh</a> editor to help me find specific code given a vague description.<br>\nI use valgrind on a binary (built with --linker=legacy) and sometimes gdb for segmentation faults.<br>\nThe flags at the end <a href=\"https://github.com/roc-lang/roc/blob/main/.cargo/config.toml\">here</a> are very useful as well.</p>\n<p><a href=\"https://github.com/tweedegolf/cargo-minify/issues/7\">This debugging tool</a> is on my wishlist :p</p>",
        "id": 447721004,
        "sender_full_name": "Anton",
        "timestamp": 1719568548
    },
    {
        "content": "<p>Looking at the llvm IR is useful as well (with the roc flag <code>--emit-llvm-ir</code>) for certain issues.</p>",
        "id": 447723254,
        "sender_full_name": "Anton",
        "timestamp": 1719568954
    },
    {
        "content": "<p>Let's add the tips to <code>CONTRIBUTING.md</code>?</p>",
        "id": 447724722,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1719569340
    },
    {
        "content": "<p>Good idea, I'll do it now</p>",
        "id": 447728040,
        "sender_full_name": "Anton",
        "timestamp": 1719570404
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/pull/6848\">PR#6848</a></p>",
        "id": 447754716,
        "sender_full_name": "Anton",
        "timestamp": 1719578041
    },
    {
        "content": "<p>thanks for sharing!</p>",
        "id": 447861669,
        "sender_full_name": "Isak Jones (he) (W1'21)",
        "timestamp": 1719604788
    },
    {
        "content": "<p>followup - what's the best way to setup the LSP on neovim?</p>",
        "id": 448639169,
        "sender_full_name": "Isak Jones (he) (W1'21)",
        "timestamp": 1719934889
    },
    {
        "content": "<p>I don't use neovim but <a href=\"#narrow/stream/231634-beginners/topic/LSP.20feedback.20in.20Neovim/near/447153737\">this message</a> may help you.</p>",
        "id": 448641263,
        "sender_full_name": "Anton",
        "timestamp": 1719935472
    },
    {
        "content": "<p>Hey Isak, I have been using neovim on this project and my setup has worked pretty well. I will give you one hint. A lot of the current nvim_lsp_config setup guides use Mason. Make sure you set it up with <code>PATH = \"append\"</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>require(&#39;mason&#39;).setup { PATH = &quot;append&quot; }\n</code></pre></div>\n<p>This projects sets the rust toolchain so you want to make sure nvim uses the rust-analyzer provided by rustup and not masos so the versions all match up. Using <code>PATH = \"append\"</code> make sure that the mason installed version is the last place the editor goes looking for an installed language server.</p>",
        "id": 448664824,
        "sender_full_name": "Ryan Barth",
        "timestamp": 1719941681
    },
    {
        "content": "<p>thanks to both!</p>",
        "id": 448683850,
        "sender_full_name": "Isak Jones (he) (W1'21)",
        "timestamp": 1719947515
    }
]