[
    {
        "content": "<p>Hey folks! I have been working on a Roc implementation of Postcard, a binary serialization protocol. I am about 90% of the way there, but I have hit a wall due to some combination of limitations with Roc, the fact the protocol is non-self-describing, or my own ignorance.</p>\n<p>The few issues I have hit so far are:</p>\n<ul>\n<li>No ability to get a list of variants of a Tag, or a discriminant</li>\n<li>No ability to get a list of fields on a record, or their definition order</li>\n</ul>\n<p>I looked at the <a href=\"https://github.com/roc-lang/roc/blob/faaf69599eccd043ac62cf349581c1989aba4265/crates/compiler/derive/src/decoding/record.rs#L72\">builtin record decoder</a>. This looks like something that requires the compiler internals and it would not be possible to create from within Roc, preventing an in-roc alternate decoding framework / ability.</p>\n<p>Here is the <a href=\"https://github.com/r-bar/roc-postcard?tab=readme-ov-file#structs-wip\">repo</a> with the progress I have made so far. I would love if anyone could suggest a way forward.</p>\n<p>Considered alternatives:</p>\n<ul>\n<li>Hashing field names when encoding so the wire format is a tuple of alternating key hashes and field values. This would deviate from the spec (further than I already have, see the note on variants) and make the representation less compact.</li>\n<li>Code gen with an external program?</li>\n</ul>",
        "id": 480557840,
        "sender_full_name": "Ryan Barth",
        "timestamp": 1730770674
    },
    {
        "content": "<p>Probably needs the work discussed at the top of this thread: <a href=\"#narrow/stream/304641-ideas/topic/Revamped.20Encode.20and.20Decode\">https://roc.zulipchat.com/#narrow/stream/304641-ideas/topic/Revamped.20Encode.20and.20Decode</a></p>",
        "id": 480761615,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1730824927
    },
    {
        "content": "<p>Encode and decode are too limited currently</p>",
        "id": 480761649,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1730824944
    },
    {
        "content": "<p>Sadly, that work is blocked by a compiler bug last I checked</p>",
        "id": 480761762,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1730824975
    },
    {
        "content": "<p>Though maybe you can do most of what you want with the current version of decode: <a href=\"https://github.com/roc-lang/roc/blob/main/crates/compiler/builtins/roc/Decode.roc\">https://github.com/roc-lang/roc/blob/main/crates/compiler/builtins/roc/Decode.roc</a></p>",
        "id": 480762088,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1730825089
    },
    {
        "content": "<p>But I think current decode may require self descriptive formats in many cases</p>",
        "id": 480762285,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1730825155
    },
    {
        "content": "<p>Thanks for the reply <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> ! That first link had exactly what I would need to solve the variant problem. Is the type erasure stuff what you meant by the compiler bug that was blocking that work? </p>\n<blockquote>\n<p>But I think current decode may require self descriptive formats in many cases</p>\n</blockquote>\n<p>That was what I was afraid of. From what I gleaned from the <a href=\"https://github.com/lukewilliamboswell/roc-json/blob/main/package/Json.roc\">json</a> implementation it seemed like you needed the parser to drive the decoder. That is you need the name of the fields, then call <code>stepField state fieldName</code>. Do you know if there is an issue I can reference for any planned changes for the record decoding specifically?</p>\n<p>I also think given the current limitations I am better off just using your MsgPack package for what I need <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> . I am bummed I couldn't finish my first roc package.</p>",
        "id": 480767320,
        "sender_full_name": "Ryan Barth",
        "timestamp": 1730826949
    },
    {
        "content": "<p>The msgpack package is where I was testing out the new encoder and decoder abilities</p>",
        "id": 480768474,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1730827372
    },
    {
        "content": "<p>So it is not actually functional.</p>",
        "id": 480768490,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1730827379
    },
    {
        "content": "<p>That said, msgpack could be made to work with current encode and decode</p>",
        "id": 480768542,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1730827398
    },
    {
        "content": "<p>As for records, I was messing around with the interface in the msgpack repo. I don't think it has a solo bug, just something I wanted to fold into the new encode and decode</p>",
        "id": 480768776,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1730827484
    },
    {
        "content": "<p>The bug was an issue with lambdaset unification if I recall correctly. Essentially, the compiler getting confused by the recursion and captures that are generated by the ability.</p>",
        "id": 480768906,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1730827533
    }
]