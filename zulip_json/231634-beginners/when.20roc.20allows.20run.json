[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">app</span><span class=\"w\"> </span><span class=\"s\">\"hello\"</span>\n<span class=\"w\">    </span><span class=\"nv\">packages</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">pf</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/roc-lang/basic-cli/releases/download/0.2.1/wx1N6qhU3kKva-4YqsVJde3fho34NqiLD3m620zZ-OI.tar.br\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"nv\">imports</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">pf</span><span class=\"nf\">.</span><span class=\"kt\">Stdout</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"nv\">provides</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nv\">to</span><span class=\"w\"> </span><span class=\"nv\">pf</span>\n\n\n<span class=\"nv\">foo</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">name</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"s\">\"hello \\(name)\"</span>\n\n\n<span class=\"kr\">main </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">foo</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">foo</span><span class=\"w\"> </span><span class=\"s\">\"dank\"</span>\n<span class=\"w\">    </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"nv\">foo</span>\n</code></pre></div>\n<p>this obviously should not work, and the errors are pretty good</p>\n<div class=\"codehilite\"><pre><span></span><code>── DUPLICATE NAME ─────────────────────────────────────────────────── keke.roc ─\n\nThe foo name is first defined here:\n\n8│  foo = \\name -&gt;\n    ^^^\n\nBut then it&#39;s defined a second time here:\n\n13│      foo = foo &quot;dank&quot;\n         ^^^\n\nSince these variables have the same name, it&#39;s easy to use the wrong\none by accident. Give one of them a new name.\n\n\n── TYPE MISMATCH ──────────────────────────────────────────────────── keke.roc ─\n\nThis 1st argument to line has an unexpected type:\n\n14│      Stdout.line foo\n                     ^^^\n\nThis foo value is a:\n\n    Str -&gt; Str\n\nBut line needs its 1st argument to be:\n\n    Str\n</code></pre></div>\n<p>but it will still allow you to compile and run into </p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;main&#39; panicked at &#39;Error in alias analysis: error in module ModName(&quot;UserApp&quot;), function definition FuncName(&quot;mainForHost&quot;), definition of value binding ValueId(4): could not find func in module ModName(&quot;UserApp&quot;) with name FuncName(&quot;\\x00\\x00\\x00\\x00\\x12\\x00\\x00\\x00z\\x87\\xceV\\x11\\xaaYs&quot;)&#39;, crates/compiler/gen_llvm/src/llvm/build.rs:4764:19\n</code></pre></div>\n<p>so question being, as i know a  goal of roc is to allow running even with type mismatches, should stuff like this be allowed?<br>\nlike where is the line where roc says \"this is unsound, im not compiling this\"</p>\n<p>note this is an alias analysis panic, not really _just_ a type thing</p>",
        "id": 342435351,
        "sender_full_name": "dank",
        "timestamp": 1679006405
    },
    {
        "content": "<p>So I think the goal is essentially, if we can replace part of your program with a runtime panic and otherwise lower it correctly, we want to do it. So in this case, we would maybe change the second definition of <code>foo</code> to a runtime panic. Then you could test part of your program and ipnore this issue.</p>",
        "id": 342473967,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679031240
    },
    {
        "content": "<p>That said, I am not really sure where the line should be drawn, If we really don't know, we may have to add a runtime panic in many places or just give up during compilation. Either way, the error should be made way better than the crash you got.</p>",
        "id": 342474083,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679031288
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/when.20roc.20allows.20run/near/342473967\">said</a>:</p>\n<blockquote>\n<p>So I think the goal is essentially, if we can replace part of your program with a runtime panic and otherwise lower it correctly, we want to do it. So in this case, we would maybe change the second definition of <code>foo</code> to a runtime panic. Then you could test part of your program and ipnore this issue.</p>\n</blockquote>\n<p>oh yeah panic replacement sounds good here, didn't consider that</p>",
        "id": 342588146,
        "sender_full_name": "dank",
        "timestamp": 1679065801
    }
]