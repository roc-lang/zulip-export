[
    {
        "content": "<p>I'm wondering if there's any other compiler flags that may allow code to be inlined more aggressively. I've tried <code>--optimize</code> but it doesn't seem to be inlining the thing I want.</p>\n<p>The thing I want inlined:</p>\n<div class=\"codehilite\"><pre><span></span><code>dot = \\a, b -&gt; map2 a b Num.mul |&gt; agg Num.add\nmap2 = \\a, b, func -&gt; vec (func a.x b.x) (func a.y b.y) (func a.z b.z)\nagg = \\v, func -&gt; func (func v.x v.y) v.z\n</code></pre></div>\n<p>Idealy <code>dot</code> would be inlined at the call site, but I'd settile for <code>map2</code> and <code>agg</code> being inline in the dot function. When I look at the <code>objdump</code> for the executable though I see this:</p>\n<p>The call site:</p>\n<div class=\"codehilite\"><pre><span></span><code>call   153f0 &lt;Vec3_dot_\n</code></pre></div>\n<p>and the <code>dot</code> function:</p>\n<div class=\"codehilite\"><pre><span></span><code>00000000000153f0 &lt;Vec3_dot_139c9542137b10e977a775e441e04012cc6d2c98579f3cdeb5fb42ef98df6d6&gt;:\n   153f0:   50                      push   %rax\n   153f1:   e8 fa 04 00 00          call   158f0 &lt;Vec3_map2_3d7aff37b23cd9f9e6beb177d8bf818babb9d186ea278cc981a34be43b8cf34&gt;\n   153f6:   58                      pop    %rax\n   153f7:   e9 84 01 00 00          jmp    15580 &lt;Vec3_agg_bd5db9a62133a57f3c3971868413d37dfa646aa8a2764e7763fd4ba5b0b0d4&gt;\n   153fc:   0f 1f 40 00             nopl   0x0(%rax)\n</code></pre></div>\n<p>I don't think the calls to <code>Num.mul</code> and <code>Num.add</code> are being inlined either.</p>",
        "id": 475429217,
        "sender_full_name": "Jared Cone",
        "timestamp": 1728347508
    },
    {
        "content": "<p>That's definitely surprising. I wonder if we are generating strange llvm ir that is breaking inlining. That would surprise me for something simple like this.</p>",
        "id": 475430080,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728348128
    },
    {
        "content": "<p>the <code>Vec3</code> type is just a record of x, y, z, that are all some specific numeric type?</p>",
        "id": 475430099,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728348149
    },
    {
        "content": "<p>Also, if you are willing to compile the compiler, you could try setting this number higher: <a href=\"https://github.com/roc-lang/roc/blob/f1a1f57adfc78be555b8553525fa7ff03d61e15b/crates/compiler/gen_llvm/src/llvm/build.rs#L1137\">https://github.com/roc-lang/roc/blob/f1a1f57adfc78be555b8553525fa7ff03d61e15b/crates/compiler/gen_llvm/src/llvm/build.rs#L1137</a></p>",
        "id": 475430246,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728348255
    },
    {
        "content": "<p>Yep just a record with x y &amp; z F64</p>",
        "id": 475430269,
        "sender_full_name": "Jared Cone",
        "timestamp": 1728348283
    },
    {
        "content": "<p>But I would guess that something more fundamental is off that is confusing llvm if simple functions like that aren't inlining</p>",
        "id": 475430272,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728348287
    },
    {
        "content": "<p>k I'll give that a try</p>",
        "id": 475430302,
        "sender_full_name": "Jared Cone",
        "timestamp": 1728348318
    },
    {
        "content": "<p>oh and I should mention the roc command I'm using is <code>roc dev --prebuilt-platform --optimize game/test.roc</code></p>",
        "id": 475430414,
        "sender_full_name": "Jared Cone",
        "timestamp": 1728348405
    },
    {
        "content": "<p>this Vec3 is in the platform's roc code, which <code>roc dev</code> also builds right? When it sees what platform <code>game/test.roc</code> uses</p>",
        "id": 475430577,
        "sender_full_name": "Jared Cone",
        "timestamp": 1728348467
    },
    {
        "content": "<p>Oh, I think <code>roc dev</code> ignores <code>--optimize</code></p>",
        "id": 475430997,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728348614
    },
    {
        "content": "<p>That's a part of the cli we should definitely fix.</p>",
        "id": 475431025,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728348633
    },
    {
        "content": "<p>Anyone looking for a good first issue/contributing to hacktoberfest. This should be a great one to grab.</p>",
        "id": 475431424,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728348724
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> should we make the flag work or just remove it from <code>roc dev</code>? I assume remove, but thought I might as well double check. Important not is that <code>roc ...</code> and <code>roc dev ...</code> are technically run the exact same code path. Banning <code>roc dev --optimize ...</code> sound reasonable. Banning <code>roc --optimize ...</code> sounds strange.</p>",
        "id": 475431841,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728348858
    },
    {
        "content": "<p>overall I think we should move in <a href=\"#narrow/stream/304641-ideas/topic/Roc.20cli.20workflow/near/451019171\">this direction</a></p>",
        "id": 475437804,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1728351911
    },
    {
        "content": "<p>and in that design there's no <code>roc dev</code>, just <code>roc</code> and <code>roc --optimize</code></p>",
        "id": 475437852,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1728351951
    },
    {
        "content": "<p>so in the meantime I don't have strong feelings about what we do while <code>roc dev</code> still exists <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 475437899,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1728351965
    },
    {
        "content": "<p>I thiiink that worked, I can't even find the dot function in the binary anymore :) I still want to compare the code for <code>map2 a b Num.mul |&gt; agg Num.add</code> vs manally doing <code>\\a, b -&gt; (a.x * b.x) + (a.y * b.y) + (a.z * b.z)</code>, will have to find what happened to that call site...</p>",
        "id": 475440518,
        "sender_full_name": "Jared Cone",
        "timestamp": 1728353286
    },
    {
        "content": "<p>So for anyone interesting in contributing to this. It has easy progression to a medium sized project. Super small project is just cleaning up <code>--optimize</code> for <code>roc dev</code> and <code>roc</code> subcomands of the compiler. I think for simplicity, we should just make those two flags work.</p>\n<p>After that small task, the medium size project would be to revamp the cli in general. Goals here: <a href=\"#narrow/stream/304641-ideas/topic/Roc.20cli.20workflow/near/451019171\">https://roc.zulipchat.com/#narrow/stream/304641-ideas/topic/Roc.20cli.20workflow/near/451019171</a><br>\nOf note, that can definitely be split into multiple smaller pieces instead of done at once.</p>",
        "id": 475445995,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728354869
    },
    {
        "content": "<p>Here is the primary issue that <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> created back in April: <a href=\"https://github.com/roc-lang/roc/issues/6637\">https://github.com/roc-lang/roc/issues/6637</a></p>",
        "id": 475467008,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1728361988
    },
    {
        "content": "<p>I may get around to creating some child issues, but if I don't do it in time, I can still probably help anyone work on this</p>",
        "id": 475467111,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1728362070
    },
    {
        "content": "<p>Also note that we improved the llvm optimisation passes a lot in the llvm upgrade branch. It's almost ready to land, just needs some CI love and the wasm repl fixed. My plan was to revisit after we land the rebuild host PR. Basically we currently have just a few hand picked passes, but on that branch Folkert helped to use the same as clang for the different opt levels.</p>",
        "id": 475474220,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728366614
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"481285\">@Jared Cone</span> what form is your code in? Is it simple enough to drop into something like the platform switching example? I'd be interested to know if there's any difference using that branch <a href=\"https://github.com/roc-lang/roc/tree/upgrade-llvm-zig\">https://github.com/roc-lang/roc/tree/upgrade-llvm-zig</a></p>",
        "id": 475490252,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728371068
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> yep I'll extract it later and put up a branch</p>",
        "id": 475584215,
        "sender_full_name": "Jared Cone",
        "timestamp": 1728398647
    },
    {
        "content": "<p>I tried building my app using roc from the <code>upgrade-llvm-zig</code> branch but I still see my <code>Vec.dot</code> function not getting inlined when running <code>roc dev --prebuilt-platform --optimize app/app.roc</code></p>",
        "id": 475622648,
        "sender_full_name": "Jared Cone",
        "timestamp": 1728408049
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Option.20for.20aggressive.20inlining.3F/near/475430997\">said</a>:</p>\n<blockquote>\n<p>Oh, I think <code>roc dev</code> ignores <code>--optimize</code></p>\n</blockquote>\n<p>Can you try that same command with <code>build</code> instead of <code>dev</code> <span class=\"user-mention\" data-user-id=\"481285\">@Jared Cone</span>?</p>",
        "id": 475623724,
        "sender_full_name": "Anton",
        "timestamp": 1728408436
    },
    {
        "content": "<p>Yes <code>build</code> correctly inlines. I think Luke was asking me to try <code>roc dev --optimize</code> using a different branch of roc</p>",
        "id": 475627443,
        "sender_full_name": "Jared Cone",
        "timestamp": 1728409215
    },
    {
        "content": "<p>Yeah, maybe, I'm not sure <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 475627741,
        "sender_full_name": "Anton",
        "timestamp": 1728409319
    },
    {
        "content": "<p>I think there was a miscommunication.</p>\n<p>The issue we are seeing here is simply the <code>--optimize</code> flag being ignored. When we properly instruct llvm to optimize, it does so correctly.</p>\n<p>Luke's branch may help llvm optimize better, but doesn't fix anything around the <code>--optimize</code> flag. So I wouldn't expect it to have any effect on this issue.</p>",
        "id": 475637491,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1728412061
    },
    {
        "content": "<p>Yeah I think I misunderstood</p>",
        "id": 475645356,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1728414131
    }
]