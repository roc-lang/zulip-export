[
    {
        "content": "<p>I'm curious if the CP-style Task wrapper outlined at <a href=\"https://youtu.be/7SidSvJcPd0?t=2064\">https://youtu.be/7SidSvJcPd0?t=2064</a> ever got implemented? Was there a reason that got dropped in favor of the current approach? Just trying to learn some of the internals and the design decisions behind them.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"7SidSvJcPd0\" href=\"https://youtu.be/7SidSvJcPd0?t=2064\"><img src=\"https://uploads.zulipusercontent.net/532c76747f28a3609113079b89ddde0ee6cf8ff2/68747470733a2f2f692e7974696d672e636f6d2f76692f3753696453764a635064302f64656661756c742e6a7067\"></a></div>",
        "id": 423931332,
        "sender_full_name": "Nicolo Davis",
        "timestamp": 1709169230
    },
    {
        "content": "<p>we're still working on implementing it!</p>",
        "id": 423931503,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1709169355
    },
    {
        "content": "<p>it's being worked on as recently as earlier today <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 423931565,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1709169385
    },
    {
        "content": "<p>Oh I see :)</p>",
        "id": 423934301,
        "sender_full_name": "Nicolo Davis",
        "timestamp": 1709171265
    },
    {
        "content": "<p>I was trying to use this pattern for a Haskell project I was working on and gave up after realizing that I would need to enumerate all the possible types for the continuations in the <code>Operation</code> type:</p>\n<div class=\"codehilite\"><pre><span></span><code>data Operation = Op1 (Int -&gt; Operation) | Op2 (String -&gt; Operation) | ...\ntype Effect a = (a -&gt; Operation) -&gt; Operation\n</code></pre></div>\n<p>(it didn't seem like there was an easy way to make <code>Operation</code> polymorphic in this case)</p>\n<p>I'm guessing that Roc doesn't have this problem because all the operations are well defined and finite in number?</p>",
        "id": 423936248,
        "sender_full_name": "Nicolo Davis",
        "timestamp": 1709171862
    },
    {
        "content": "<p>yeah exactly</p>",
        "id": 423938706,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1709173255
    },
    {
        "content": "<p>the platform knows exactly which operations it supports!</p>",
        "id": 423938720,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1709173266
    }
]