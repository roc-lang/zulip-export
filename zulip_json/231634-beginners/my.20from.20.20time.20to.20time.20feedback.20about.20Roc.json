[
    {
        "content": "<p>Since I am  using  Roc for  quite some time I would like share  my opinion about pros and cons of the language</p>\n<p>pros -&gt; in  general  this language  has simplicity build in, using only handful of abstraction I am able to   do a lot(this alone is insane in comparison to C++ for example) . I like  structure of those programs just redirecting data from one place to another via  functions.<br>\nIt goes deep, having  my day to day work and programming from time to time is difficult  I have only so much  of my mental resources to  spare on this. In C++  (and  other  languages I tried  including  python, haskell, even lua )  but especially C++ burnout  of my \"daily mental  resources\" is immense. I just can't effort to  spend  so much of my  daily focus and  at the same time  make  next to zero progress. Roc stands out in that regard I am wasted to  but I see  some progress. This ratio  of  effort-&gt; result I am getting is acceptable. It is deal breaker for me. I can  still hold  my live  balance  in a grip. That's the reason I haven't moved to next thing and  I plan to stay, provided  that you do not spoil  design by unnecessary  levels of  complexity/weird magic/ to much  syntactic  sugar.</p>\n<p>cons -&gt;<br>\nlack of  multiline  comment  (kind of annoying ) <br>\ncrashing  dbg  (very annoying)<br>\ngeneral immaturity  (I feel it all the time)<br>\nlack  of multithreading  (this I plan  to use in the  future)<br>\nno bit and byte access (I think  sometime it is useful to be  able to access float/integers byte by byte or  bits, especially during some low level stuff tweaking  )</p>\n<p>other  remarks:<br>\noverall I don't get how application is created which  is kind of  obvious when I am using  C or C++ this may be meaningful if I  at some point decide to create  application on microcontroller  (bare metal). Somehow I don't get how those  abstraction are translated to real code. How I will access specific  address  etc.     </p>\n<p>there  are  some things in language  itself,  which makes working with  it manually tedious at times (\"when..  is\" block  all over the place).  <br>\nIn that regard  I consider  it  to be my  homework,  to just get used to it. I would not expect  improvements necessarily. Good  outcome is that  those  constructions are  forcing me to  think about  things I usually neglect, so  it may be  good thing overall, but still uncomfortable and  time  consuming</p>",
        "id": 402888956,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1700323235
    },
    {
        "content": "<p>thanks for the feedback! It's been really cool to see the things you've been working on <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> </p>\n<blockquote>\n<p>no bit and byte access (I think sometime it is useful to be able to access float/integers byte by byte or bits, especially during some low level stuff tweaking )</p>\n</blockquote>\n<p>I'd like to do this, although there are some design questions because endianness makes doing it a tricky to be both performant and also consistent across targets</p>",
        "id": 402896155,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700328324
    },
    {
        "content": "<p>To be fair on the endianness, it may be reasonable to just start by not caring. Swapping from little to/from big endian has to be <a href=\"https://www.felixcloutier.com/x86/bswap\">builtin</a> and fast in processors cause processors are almost always little endian and network protocols are big endian. We probably could just make both functions.</p>\n<p>The other important factor is we have tuples which should allow this all to be done in a cpu register instead of requiring allocating a list.</p>",
        "id": 402898032,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700329752
    },
    {
        "content": "<p>another design question is what number types should support it.</p>\n<p>ints seem fine, but exposing the internal structure of <code>Dec</code> would make changing that structure in the future a breaking change.</p>\n<p>also for floats I'm not sure if the NaN flags are consistent enough across CPUs that they'd actually give the same answer regardless of target</p>",
        "id": 402898576,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700330208
    },
    {
        "content": "<p>but I guess figuring these things out is necessary in order to support fast <code>Encode</code> implementations that serialize to binary formats</p>",
        "id": 402898670,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700330285
    },
    {
        "content": "<blockquote>\n<p>crashing dbg (very annoying)</p>\n</blockquote>\n<p>We have a pull request in the works that should massively improve the reliability of dbg.</p>",
        "id": 402906027,
        "sender_full_name": "Anton",
        "timestamp": 1700335541
    },
    {
        "content": "<blockquote>\n<p>I don't get how application is created</p>\n</blockquote>\n<p>It sounds like it would be good to have a page on the website that explains this with a nice diagram. I'm already going to make an issue for it, but others are welcome to suggest alternative options.</p>",
        "id": 402906545,
        "sender_full_name": "Anton",
        "timestamp": 1700335701
    },
    {
        "content": "<p>We have some diagrams here <a href=\"https://github.com/roc-lang/roc/blob/main/crates/README.md\">https://github.com/roc-lang/roc/blob/main/crates/README.md</a></p>",
        "id": 402907683,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1700336609
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> s diagrams from that latest stream were the best I've seen for the app/platform/host breakdown. Could you share them? Maybe we can massage into a guide or page for the website?</p>",
        "id": 402909552,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700338103
    },
    {
        "content": "<p>If we want to refactor these for the site, I have the original excalidraw file. Can make it all in one line, change colors, export in both light and dark mode. This is the version I showed on stream as a png:<br>\n<a href=\"/user_uploads/22008/CVB-P-XkIEvXr_KjwcrPYLG3/Roc-Platform-to-Final-Binary-Dark.png\">Roc-Platform-to-Final-Binary-Dark.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/CVB-P-XkIEvXr_KjwcrPYLG3/Roc-Platform-to-Final-Binary-Dark.png\" title=\"Roc-Platform-to-Final-Binary-Dark.png\"><img src=\"/user_uploads/22008/CVB-P-XkIEvXr_KjwcrPYLG3/Roc-Platform-to-Final-Binary-Dark.png\"></a></div>",
        "id": 402912101,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700340008
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> that looks great!!! Could you do it in an inline SVG with classes for colors so we can switch its color scheme in CSS for light vs dark mode? <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 402913354,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700341239
    },
    {
        "content": "<p>I can try. Definitely can export as SVG. Don't really know how classes work in SVG for color.</p>",
        "id": 402913762,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700341507
    },
    {
        "content": "<p>eh I can make that change, it's easy</p>",
        "id": 402913776,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700341520
    },
    {
        "content": "<p>I dunno if it's possible to make it include the text as actual text instead of SVG shapes, but that would be best if possible somehow!</p>",
        "id": 402913793,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700341543
    },
    {
        "content": "<p>Looking at diagrams  it seems I have to find  platform library for given architecture  and link Roc  application with  it? Roc wrapper  has to be available ? One other  thing  all  3rd  C libraries has to be in this  platform  library ? I do not need  this  functionality  right  now  but I have  some  ideas  and it may be useful  at some point</p>",
        "id": 402939625,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1700358353
    },
    {
        "content": "<p>Given rocs design, the platform is essentially the runtime of a roc application and decides all of the primitives that it has access to. Currently there aren't that many platforms and custom ones would often be a requirement.</p>\n<p>This does limit the roc ecosystem. It is not easy to just pick an arbitrary library in c and depend on it in a roc app. That library would have to be exposed to roc through a platform. As such, roc kinda depends on platform developers building custom experience for roc users (kinda like how elm gives a custom web UI experience, but is otherwise quite limited in functionality).</p>\n<p>Note, through tools like libffi, a platform could give a roc application dynamic access to code in any shared library, but I assume this would be pretty uncommon.</p>",
        "id": 402940601,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700358723
    },
    {
        "content": "<p>If you wanted to depend on an arbitrary rust library in a basic CLI app for example, the simplest solution would be to fork the platform. Add the new library and wrapping effects for each function you want to use and then use that instead of the original basic CLI platform.</p>",
        "id": 402940707,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700358802
    },
    {
        "content": "<p>What would roc's fesability be for running in very constrained platforms? Say I wanted to run on a microcontroller? Could I write a platform that would run on a riscv esp chip? Or even avr on an Arduino?</p>",
        "id": 402944779,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1700361520
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span>  made a platform <a href=\"https://github.com/bhansconnect/roc-microbit\">https://github.com/bhansconnect/roc-microbit</a> for running on a microbit embedded processor.</p>",
        "id": 402945125,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700361668
    },
    {
        "content": "<p>I think he made a line following robot with it</p>",
        "id": 402945167,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700361684
    },
    {
        "content": "<p>So our current constraint is 32bit systems and requiring some compiler target hacking cause we don't expose everything needed for this. So without messing with the compiler, you are stuck more with like arm 32bit Linux, but with very minor target hacking any arm or riscv 32bit microcontroller should be a possible target</p>",
        "id": 402945692,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700361886
    },
    {
        "content": "<p>Oooo cool, thanks. That's good to hear that it's feasible.<br>\nCurrently the best language I've found for doing embedded development is nim.... But nim has... Problems. I feel like of all people y'all are probably pretty likely to know a bit about a high-level high performance language that does reference counting. </p>\n<p>I like many things about the nim language, but the design feels extremely scattered and just has the \"kitchen sink approach\" but it also is majorly lacking in really basic ways. No interfaces, so no ability to do mocking and testing. No good unit testing story at all for that matter. Plus the editor tooling is a mess despite being a mature language. And I mean a mess at the compiler level. I looked at trying to improve it and it felt totally futile as someone who isn't part of the core team. </p>\n<p>Anyway, I feel like roc, with a focus on performance,  and the whole platforms business, might be a good choice in future for high powered platforms like ESP and STM</p>\n<p>Side note, does roc have arrays? I couldn't find any array syntax</p>",
        "id": 402983287,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1700382767
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"651372\">Eli Dowling</span> <a href=\"#narrow/stream/231634-beginners/topic/my.20from.20.20time.20to.20time.20feedback.20about.20Roc/near/402983287\">said</a>:</p>\n<blockquote>\n<p>Side note, does roc have arrays? I couldn't find any array syntax</p>\n</blockquote>\n<p>Our List is like C++ <code>std::vector</code> or Rust <code>Vec</code>. All elements are allocated side by side in memory. It's not a linked list like most functional languages have.</p>",
        "id": 402984000,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1700383130
    },
    {
        "content": "<p>Eli I wasn't sure which parts of your comment were about Roc and which about Nim.</p>",
        "id": 402984156,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1700383205
    },
    {
        "content": "<p>Oh oops <span class=\"user-mention\" data-user-id=\"431893\">@Brian Carroll</span> I see how that could be ambiguous, I've edited for clarity. Good catch, thanks :)</p>",
        "id": 402989697,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1700386166
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"431893\">Brian Carroll</span> <a href=\"#narrow/stream/231634-beginners/topic/my.20from.20.20time.20to.20time.20feedback.20about.20Roc/near/402984000\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"651372\">Eli Dowling</span> <a href=\"#narrow/stream/231634-beginners/topic/my.20from.20.20time.20to.20time.20feedback.20about.20Roc/near/402983287\">said</a>:</p>\n<blockquote>\n<p>Side note, does roc have arrays? I couldn't find any array syntax</p>\n</blockquote>\n<p>Our List is like C++ <code>std::vector</code> or Rust <code>Vec</code>. All elements are allocated side by side in memory. It's not a linked list like most functional languages have.</p>\n</blockquote>\n<p>Ahh, I see, excellent, thanks :) <br>\nLooking forward to when roc has some good docs for the standard library and all the current language features. Still I suppose that makes the journey of discovery more exciting <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 402990058,
        "sender_full_name": "Eli Dowling",
        "timestamp": 1700386341
    },
    {
        "content": "<p>If you come across any features that aren't documented very well, please log an issue for it or drop a comment in <a class=\"stream\" data-stream-id=\"316715\" href=\"/#narrow/stream/316715-contributing\">#contributing</a> channel. I would be interested to try and improve that where I can.</p>",
        "id": 402990840,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700386772
    },
    {
        "content": "<p>regarding my remark about (when is) block <br>\nI make up my mind  what I don't like<br>\nSometimes in a function  I already determined that let say list is no empty <br>\nBut  logic goes on  an  when I am using  the same  array in different  context, although in the  same  data path when it was establish already , that it is not  empty. Again I have to use (when  is )  block,  with  possible  error -&gt;  array  empty <br>\nI agree first time  it  make  sense but  second  time ?? <br>\nList.first  could be smart  in  this  case  and  work  without  (Ok/Err  - as an  option  if  somebody insist it should be still allowed )  compiler  could  easily figure  this  out. This  may  cause some  confusion  at first  but  for seasoned  programmer, it would be efficient and  maybe  cleaner  in long  run</p>",
        "id": 403020137,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1700407021
    },
    {
        "content": "<p>if  List.isEmpty  lst  then<br>\n   #and  here this  would be allowed   <br>\nk  = List.first lst<br>\n#old  school  also <br>\nwhen  List.first lst is<br>\n...</p>\n<p>else<br>\n..  </p>\n<p>I agree this  may be  confusing  at first but  I see   benefits in  long  run  and  people  aren't  stupid  after  all, they  will  understand  the  reasoning behind it</p>",
        "id": 403021365,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1700407642
    },
    {
        "content": "<p>One way you can get around that is once you confirm that the list is not empty, take the first element and make a (a, List a). Then you have encoded in the type that it is non empty and can explicitly work with the first element.</p>",
        "id": 403022710,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1700408367
    },
    {
        "content": "<p>The downside is that then you can’t pass the tuple into functions that take a list</p>",
        "id": 403022803,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1700408409
    },
    {
        "content": "<p>Here is a brief <a href=\"https://sporto.github.io/elm-patterns/basic/parse-dont-validate.html\">explainer</a> about patterns like this.</p>",
        "id": 403022991,
        "sender_full_name": "Anton",
        "timestamp": 1700408518
    },
    {
        "content": "<p>Other languages have libraries that support NonEmpty lists that are basically what I suggested above, but with functions made for them</p>",
        "id": 403023033,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1700408525
    },
    {
        "content": "<p>Uhu, I believe we've discussed including NonEmptyList in the language before, let me see if I can find it.</p>",
        "id": 403023141,
        "sender_full_name": "Anton",
        "timestamp": 1700408592
    },
    {
        "content": "<p>Also, a lot of cases like the one you posted above are solved by pattern matching on the list instead of using an if else. Then you can access the first element directly. </p>\n<p>when list is <br>\n    [first, ..] -&gt;</p>",
        "id": 403023375,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1700408720
    },
    {
        "content": "<blockquote>\n<p>Uhu, I believe we've discussed including NonEmptyList in the language before, let me see if I can find it.</p>\n</blockquote>\n<p><a href=\"#narrow/stream/304641-ideas/topic/non-empty.20lists\">old discussion</a></p>",
        "id": 403024085,
        "sender_full_name": "Anton",
        "timestamp": 1700409162
    },
    {
        "content": "<blockquote>\n<p>I agree first time it make sense but second time ?? </p>\n</blockquote>\n<p>I think this could be done with dependent types but that would significantly increase compiler complexity. It could be something we look at in the future, but for now the compiler has enough complex bugs without using dependent types :p</p>",
        "id": 403024739,
        "sender_full_name": "Anton",
        "timestamp": 1700409578
    },
    {
        "content": "<p>ok  I got  that there  are  some  ways  to propagate information or  distinguish via pattern matching, </p>\n<p>I will see  how it improves  things  over time  thx  for  tips</p>",
        "id": 403025051,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1700409692
    },
    {
        "content": "<p>A quick comment. Often times calling <code>List.isEmpty</code> is the issue. You don't really want to call it if you are also going to call something like <code>List.last</code>. instead, you should just call <code>List.last</code> where you would have called <code>List.isEmoty</code> and use the error case of <code>List.last</code> as your check for whether or not the list is empty. I often find a lot of code that check a list twice can be rewritten to just check it once. Using the errors is the important part</p>",
        "id": 403029394,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700412004
    },
    {
        "content": "<p>Oh also, if you really want, you can make a function that will unwrap a result or crash. Then you can do:</p>\n<p><code>List.last ... |&gt; crashOnError</code></p>\n<p>Given the error case is impossible, this may be fine.</p>",
        "id": 403029645,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700412142
    },
    {
        "content": "<p>could  you  show  example of this  </p>\n<div class=\"codehilite\"><pre><span></span><code>List.last ... |&gt; crashOnError\n</code></pre></div>",
        "id": 403084470,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1700450381
    },
    {
        "content": "<p>I don't get  idea</p>",
        "id": 403084487,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1700450398
    },
    {
        "content": "<p>The idea is</p>\n<div class=\"codehilite\"><pre><span></span><code>when List.last list is\n    Err _ -&gt; crash &quot;empty list&quot;\n    Ok last -&gt; doSomething last\n</code></pre></div>\n<p>although I would say this is a bit of an anti pattern</p>",
        "id": 403084735,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1700450539
    },
    {
        "content": "<p>Or maybe this could work? </p>\n<div class=\"codehilite\"><pre><span></span><code>unwrapOrCrash = \\x -&gt;\n    when x is\n        Err _ -&gt; crash &quot;unwrapping value&quot;\n        Ok a -&gt; a\n\nlast = List.last list |&gt; unwrapOrCrash\n\n#do something with last\n</code></pre></div>",
        "id": 403085350,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700450927
    },
    {
        "content": "<p>that can work, but I specifically don't want to add a function like that to builtins because it makes crashing convenient...and unless you're writing a throwaway script or something (e.g. for Advent of Code) there's usually a more graceful way to handle the error, which I'd prefer to make feel relatively more natural!</p>",
        "id": 403091295,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700454833
    },
    {
        "content": "<p>Yeah definitely really hacky. </p>\n<p>The roc type system is so nice, so there are really nice ways to handle errors and have a good program flow, but I'm still getting used to writing things a little differently and discovering these patterns.</p>",
        "id": 403094512,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700456858
    },
    {
        "content": "<p>Here's an article I found really useful when I was learning these patterns (in Elm)<br>\n<a href=\"https://thoughtbot.com/blog/problem-solving-with-maybe\">https://thoughtbot.com/blog/problem-solving-with-maybe</a></p>",
        "id": 403144169,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1700477722
    },
    {
        "content": "<p>Ok  this  crash  approach is  something  I would  go for, I somehow missed  this  capability although I see now  there is  chapter in tutorial, I will just define  convenient  set of  functions  and  this  is basically  feature   I am asking ,  provided  that  matching  alone will not solve  specific  case   thx</p>",
        "id": 403202849,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1700497022
    },
    {
        "content": "<p>it is  out of  control  of compiler (that's bad) but this communicates  the  notion that, there has  to be value here, anything  different is just ridiculous. In such scenario inventing error messages or  alternative  paths flow is  tedious( at least  for me)</p>",
        "id": 403204517,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1700497596
    },
    {
        "content": "<p>To clarify here, with restructuring your code and potentially using result helper methods, there should be a cleaner solution to this.</p>\n<p>The crash function I mentioned above is just a simple solution to remove some of the tedium. I would have to analyze specific code more deeply to give examples of how it could be rewritten to take advantage of other roc patterns to clean up the code.</p>\n<p>If you share links to specific functions that are bad, I can try and see if I can show off other patterns to help clean them up.</p>",
        "id": 403207460,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700498652
    },
    {
        "content": "<p>Ok  I will  invent  something </p>\n<div class=\"codehilite\"><pre><span></span><code>k = [2,3,4]\nwhen  List.first k is\n      Ok val:\n              .....\n              #and  here\n               I know  list not  empty already-&gt;  List.last k\n      Err  _-&gt;\n      ......\n</code></pre></div>",
        "id": 403210378,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1700499720
    },
    {
        "content": "<p>here  maybe I could  use  pattern  [valfirst, .., valLast]  but what when k = [4]    (first and last still valid)</p>\n<p>Other example</p>\n<div class=\"codehilite\"><pre><span></span><code>if (List.len lst &gt; 5)  &amp;&amp; (List.len lst &lt; 10) then\n     List.get lst  7   # I know this element is there\n</code></pre></div>\n<p>things like  that sometimes not so easy to match</p>",
        "id": 403210772,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1700499829
    },
    {
        "content": "<p>I don't know how real this is but  sooner or later there will be something difficult</p>",
        "id": 403212161,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1700500375
    },
    {
        "content": "<p>I definitely would prefer links to real functions rather than examples. I think full context is often important for these kinds of suggesttions.</p>\n<p>That said, I'll still comment on snippets and see If I can help some.</p>\n<p>For the first example, I see two main options:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">k</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"k\">when</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">first</span><span class=\"w\"> </span><span class=\"nx\">k</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">last</span><span class=\"w\"> </span><span class=\"nx\">k</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">is</span>\n<span class=\"w\">    </span><span class=\"nf\">(Ok first, Ok last) -&gt;</span>\n<span class=\"w\">        </span><span class=\"p\">...</span>\n<span class=\"w\">    </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"p\">...</span>\n</code></pre></div>\n<p>This second option would be to try and use the result related apis.<br>\nI am going to do something very direct, but this requires context to see what would fit best in a full function.</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">res</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"nx\">first</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">first</span><span class=\"w\"> </span><span class=\"nx\">k</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Result</span><span class=\"p\">.</span><span class=\"nx\">try</span>\n<span class=\"w\">    </span><span class=\"nx\">last</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">last</span><span class=\"w\"> </span><span class=\"nx\">k</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Result</span><span class=\"p\">.</span><span class=\"nx\">try</span>\n<span class=\"w\">    </span><span class=\"c1\"># use first and last. Errors are now grouped and would be handled elsewhere</span>\n\n<span class=\"c1\"># handle every single error at the end</span>\n<span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">res</span><span class=\"w\"> </span><span class=\"o\">is</span>\n<span class=\"w\">    </span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nx\">Err</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n</code></pre></div>",
        "id": 403212764,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700500584
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"568088\">Artur Swiderski</span> <a href=\"#narrow/stream/231634-beginners/topic/my.20from.20.20time.20to.20time.20feedback.20about.20Roc/near/403210772\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>if (List.len lst &gt; 5)  &amp;&amp; (List.len lst &lt; 10) then\n     List.get lst  7   # I know this element is there\n</code></pre></div>\n<p>things like that sometimes not so easy to match</p>\n</blockquote>\n<p>Here is an option using <code>when</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>when List.get lst 7 is\n    Ok x if List.len &lt; 10 -&gt; ...\n    _ -&gt; ...\n</code></pre></div>",
        "id": 403212938,
        "sender_full_name": "timotree",
        "timestamp": 1700500665
    },
    {
        "content": "<p>For the second example, I do agree that you are kinda just stuck unless you can make a larger refactor. So I don't have any immediate suggestions. That would definitely need more context for me to potentially have suggestions.</p>",
        "id": 403212944,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700500668
    },
    {
        "content": "<p>huh, I guess when guards could potentially work. interesting idea <span class=\"user-mention\" data-user-id=\"636541\">@timotree</span></p>",
        "id": 403213083,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700500717
    },
    {
        "content": "<p>Note that you need <code>List.len lst &gt; 7</code> to know that <code>List.get 7</code> will succeed, not just <code>List.len lst &gt; 5</code>, so there is a bug in the second example using <code>if</code></p>",
        "id": 403213156,
        "sender_full_name": "timotree",
        "timestamp": 1700500745
    },
    {
        "content": "<p>Is there a way to bind a name to a pattern like <code>@</code> patterns in Rust? If those existed (let's say with the <code>as</code> keyword), you could do the following for the first example:</p>\n<div class=\"codehilite\"><pre><span></span><code>when k is\n    [first, .., last] | [first as last] -&gt; ...\n    _ -&gt; ...\n</code></pre></div>",
        "id": 403214054,
        "sender_full_name": "timotree",
        "timestamp": 1700501118
    },
    {
        "content": "<p>This does work....wow, way better:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">is</span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"nx\">first</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">..,</span><span class=\"w\"> </span><span class=\"nx\">last</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">first</span><span class=\"w\"> </span><span class=\"nx\">as</span><span class=\"w\"> </span><span class=\"nx\">last</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">first</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">last</span><span class=\"p\">)</span>\n<span class=\"w\">     </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">Err</span><span class=\"w\"> </span><span class=\"nx\">EmptyList</span>\n</code></pre></div>",
        "id": 403214878,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700501409
    },
    {
        "content": "<p>what  \"as\" means ?</p>",
        "id": 403215053,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1700501487
    },
    {
        "content": "<p>It give another name to a value.</p>",
        "id": 403215116,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700501511
    },
    {
        "content": "<p>So it is making it such that both first and last have the same value if the list is a single element</p>",
        "id": 403215208,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700501530
    },
    {
        "content": "<p>kinda equivalent to doing:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">is</span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"nx\">first</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"nv\">last</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">first</span>\n<span class=\"w\">        </span><span class=\"p\">...</span>\n</code></pre></div>",
        "id": 403215312,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700501573
    },
    {
        "content": "<p>ok  if  I have real  live problem  I will let you know</p>",
        "id": 403215395,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1700501601
    },
    {
        "content": "<p>things like this I consider  horrible btw.</p>\n<div class=\"codehilite\"><pre><span></span><code>when List.get lst 7 is\n    Ok x if List.len &lt; 10 -&gt; ...\n    _ -&gt; ...\n</code></pre></div>\n<p>I don't even understand  what is intention  here when I see this</p>\n<hr>\n<div class=\"codehilite\"><pre><span></span><code>when k is\n    [first, .., last] | [first as last] -&gt; ...\n    _ -&gt; ...\n</code></pre></div>\n<p>above  is  acceptable </p>\n<hr>\n<p>but  below is better </p>\n<div class=\"codehilite\"><pre><span></span><code>k = [2,3,4]\nwhen (List.first k, List.last k) is\n    (Ok first, Ok last) -&gt;\n        ...\n    _ -&gt;\n        ...\n</code></pre></div>\n<hr>\n<p>and  horrible  again </p>\n<div class=\"codehilite\"><pre><span></span><code>res =\n    first &lt;- List.first k |&gt; Result.try\n    last &lt;- List.last k |&gt; Result.try\n    # use first and last. Errors are now grouped and would be handled elsewhere\n\n# handle every single error at the end\nwhen res is\n    Ok ... -&gt;\n    Err ... -&gt;\n</code></pre></div>\n<p>My general view<br>\nFor  me  code  should be very  simple in construction (if I don't  understand specific line in like 0.3 sec, this line is a  failure , I mean in it's structure  composition, I still could  have not  idea why it is there, that's is  fine for me )<br>\nIt is different story with entire application, complexity  may lay  in program structure because  sometimes  problem  one  has to solve  isn't necessarily  easy, so  intricate structure although not welcome it is something  I have to live  with  at times. Although  in many cases it happens because of lack  of imagination but  still there is no way around it(mind limitations)</p>",
        "id": 403217922,
        "sender_full_name": "Artur Swiderski",
        "timestamp": 1700502648
    },
    {
        "content": "<p>That's totally fair. I think if you use tasks enough, syntaxes like <code>Task.await</code> and <code>Result.try</code> become a lot clearer, but I understand avoiding them. I did that for a very long time.</p>",
        "id": 403220321,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700503514
    },
    {
        "content": "<p>I have experienced this problem in the past as well, this made me think of a simplified view (with for example editor plugin) for roc files that hides all uses of <code>Task.await</code>, <code>Result.try</code>, backpassing and general error handling. A lot of the time you don't care about the specifics of the error handling and just want to understand what the code does for the case where everything goes right (no empty lists, no errors...). I have not written down any formal proposal for this but I do see a lot of value in exploring something like it in the future.</p>",
        "id": 403220752,
        "sender_full_name": "Anton",
        "timestamp": 1700503683
    },
    {
        "content": "<p>2 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"231634\" href=\"/#narrow/stream/231634-beginners/topic/wasm32.20basic-cli\">#beginners &gt; wasm32 basic-cli</a> by <span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span>.</p>",
        "id": 403221785,
        "sender_full_name": "Notification Bot",
        "timestamp": 1700504096
    },
    {
        "content": "<p>This was specifically something I rushed past at the start, and kept bumping into issues trying to do things. Seeing other peoples solutions to the AoC puzzles I was working on was a massive help to see different ways to do the same thing. I think I had to slow down and spend some time playing with Result and Task building different programs to get comfortable with it.</p>",
        "id": 403260108,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1700521281
    }
]