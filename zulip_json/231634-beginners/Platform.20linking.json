[
    {
        "content": "<p>I have been playing around with the compiler to improve my understanding of how Roc platforms work. I thought I might take some notes and share what I have so far for anyone else on a similar journey. I would appreciate any corrections to the below, or additions.</p>\n<p>What is the pattern for how Roc functions are named in the generated files?</p>\n<h2>Roc Platform Linking</h2>\n<p><code>roc build main.roc --debug</code> with a debug build of the Roc compiler will compile the application into a dynamic library at <code>main.o</code>.</p>\n<p>If there is a prebuilt platform available it will be located at <code>platform/host.o</code>. If not then the Roc binary will <em>do something</em> to generate it.</p>\n<p>The surgical linker will then dynamically link the aplpication <code>main.o</code> into the platform <code>host.o</code> to generate an exectuable.</p>\n<h2>Inspecting generated object files</h2>\n<p>Using <code>objdump -t main.o</code> you can see the symbol tables for the application e.g.</p>\n<div class=\"codehilite\"><pre><span></span><code>main.o: file format mach-o arm64\n\nSYMBOL TABLE:\n0000000000000000 l     F __TEXT,__text ltmp0\n0000000000000000 l     F __TEXT,__text _roc_builtins.utils.allocate_with_refcount\n// collapsed for brevity\n00000000000001a4 g     F __TEXT,__text _roc__renderForHost_1_exposed\n0000000000000184 g     F __TEXT,__text _roc__renderForHost_1_exposed_generic\n00000000000001b4 g     F __TEXT,__text _roc__renderForHost_size\n</code></pre></div>\n<p>And <code>objdump -t platform/host.o | grep \"roc_\"</code> to the symbol table for the host, which gives something like the following;</p>\n<div class=\"codehilite\"><pre><span></span><code>// collapsed for brevity, this can be a very large number of symbols\n000000000007ce68 g     F __TEXT,__text _roc_alloc\n000000000007ced4 g     F __TEXT,__text _roc_dealloc\n000000000007cfe8 g     F __TEXT,__text _roc_memcpy\n000000000007d024 g     F __TEXT,__text _roc_memset\n000000000007cf00 g     F __TEXT,__text _roc_panic\n000000000007ce98 g     F __TEXT,__text _roc_realloc\n0000000000000000         *UND* _roc__renderForHost_1_exposed\n</code></pre></div>\n<h2>Rust FFI</h2>\n<p>For now you can generate Rust bindings for most Roc types using the <code>roc glue platform/main.roc platform/glue.rs</code> command.</p>\n<p>Roc functions will be exposed in the symbol table. Take for example a function in the <code>Effect.roc</code> file <code>setCwd : List U8 -&gt; Effect (Result {} {})</code> function. It requires the following rust function to be defined. </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[no_mangle]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">roc_fx_setCwd</span><span class=\"p\">(</span><span class=\"n\">roc_path</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">RocList</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">RocResult</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">env</span>::<span class=\"n\">set_current_dir</span><span class=\"p\">(</span><span class=\"n\">path_from_roc_path</span><span class=\"p\">(</span><span class=\"n\">roc_path</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">RocResult</span>::<span class=\"n\">ok</span><span class=\"p\">(()),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">RocResult</span>::<span class=\"n\">err</span><span class=\"p\">(()),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 306591264,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1666939270
    },
    {
        "content": "<p>Another question... should <code>roc glue</code> generate rust type for builtins like <code>Str</code> etc?</p>",
        "id": 306592347,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1666939864
    },
    {
        "content": "<p>We already have Rust definitions of Str etc since long before glue existed. See roc_std crate.</p>",
        "id": 306602939,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1666944946
    },
    {
        "content": "<p>Thank you, I'm importing the dependency with the below in <code>Cargo.toml</code>, which works well.  </p>\n<div class=\"codehilite\"><pre><span></span><code>[dependencies]\nlibc = &quot;0.2&quot;\nroc_std = { git = &quot;https://github.com/roc-lang/roc/&quot; }\n</code></pre></div>",
        "id": 306617587,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1666950330
    },
    {
        "content": "<p>although I'd actually like the Rust glue to generate <code>roc_std</code> automatically for the particular project - long-term I think the best experience will be \"all I need to do is run <code>roc glue</code> for my target language and it generates me everything I need for my bindings to work, no further dependencies to install or keep in sync\"</p>",
        "id": 306643458,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1666960050
    },
    {
        "content": "<p>Your description of roc linking is not surgical linking. That is legacy linking. Also, i am a bit confused by <code>main.o</code>. unless something changed recently, the application file we generate should be created in a temporary folder and called <code>app.o</code></p>\n<p>EDIT: maybe <code>--debug</code> causes <code>main.o</code> to be generated?</p>",
        "id": 306662840,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1666965613
    },
    {
        "content": "<blockquote>\n<p>What is the pattern for how Roc functions are named in the generated files?</p>\n</blockquote>\n<p><code>roc</code> + <code>__</code> + name of function + specialization number + <code>exposed</code> + optional <code>generic</code>. Generic version is a work around to complex c abi that instead of returning a type directly, take a pointer to the type as an out param. Theoretically shouldn't be needed.</p>",
        "id": 306663877,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1666965845
    },
    {
        "content": "<p>Also, specialization number might be slightly wrong wording.</p>",
        "id": 306663987,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1666965877
    },
    {
        "content": "<p>Also, each of these is paired with a size function because the size of the return type may not be know until the roc app is compiled, so we have to expose it to the platform</p>",
        "id": 306664368,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1666965993
    },
    {
        "content": "<p>Also, the main thing<code>--debug</code>does is run our llvm ir though a tool called debug ir that gives us debug info based on the llvm ir.</p>",
        "id": 306664736,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1666966096
    },
    {
        "content": "<p>I've had a go at trying to visualise the flow of the files through to application binary. I'm pretty sure this isn't quite right, but would appreciate any corrections. I thought <span class=\"user-mention\" data-user-id=\"361169\">@Anton</span> had filed an issue to describe common Roc terms, and thought something like this might be helpful. <br>\n<a href=\"/user_uploads/22008/2zevkIFlvwi1CkQWz_spqRUD/Building-a-Roc-Application.png\">Building-a-Roc-Application.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/2zevkIFlvwi1CkQWz_spqRUD/Building-a-Roc-Application.png\" title=\"Building-a-Roc-Application.png\"><img src=\"/user_uploads/22008/2zevkIFlvwi1CkQWz_spqRUD/Building-a-Roc-Application.png\"></a></div>",
        "id": 307045888,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1667199981
    },
    {
        "content": "<p>Awesome initiative <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span>  !<br>\nI'd love to generate a view like this from the code so it stays up-to-date and can show specific files.<br>\nI'm going to make an issue for that, we can probably log things to a file in debug builds and perhaps write a roc cli program to convert it to a graphviz image <img alt=\":roc:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/22008/emoji/images/18217.png\" title=\"roc\"></p>\n<p>btw Roc terms issue was <a href=\"https://github.com/roc-lang/roc/issues/913\">#913</a>.</p>",
        "id": 307055025,
        "sender_full_name": "Anton",
        "timestamp": 1667204921
    },
    {
        "content": "<p>What do you think of the content? Is it reasonably close?</p>",
        "id": 307059992,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1667207207
    },
    {
        "content": "<p>Yeah, I'm not very familiar with the details of the compiler pipeline so I'm not sure there but the rest looks good.<br>\n<del>We do call <code>cargo</code> in the code which does call rustc but perhaps best to rename that one to cargo.</del></p>",
        "id": 307065018,
        "sender_full_name": "Anton",
        "timestamp": 1667209250
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/issues/4438\">New graph logging issue</a></p>",
        "id": 307068073,
        "sender_full_name": "Anton",
        "timestamp": 1667210394
    },
    {
        "content": "<p>The compiler pipeline is a good high level picture.<br>\nThe app and host are joined together by a linker. You could draw a box for that if you like. We can use our own <code>--linker=surgical</code> or an external one <code>--linker=legacy</code>. I think it's fine without it though. Whatever you think.</p>",
        "id": 307133767,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1667229775
    },
    {
        "content": "<p>I just happened to come across the fact that we use both <code>cargo</code> and <a href=\"https://github.com/roc-lang/roc/blob/ae1a9e4dd6077b7db0b412ac20e5b5ec12c93c6a/crates/compiler/build/src/link.rs#L712\"><code>rustc</code></a>.</p>",
        "id": 307134476,
        "sender_full_name": "Anton",
        "timestamp": 1667229983
    },
    {
        "content": "<p>Is it worth adding this somewhere more permanent? maybe the rust docs README?</p>",
        "id": 307391965,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1667332268
    },
    {
        "content": "<p>I think in practice we only use <code>cargo</code></p>",
        "id": 307396219,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1667333855
    },
    {
        "content": "<p>So that block should say cargo then? I wasnt sure what the name os the rust compiler was. Thanks</p>",
        "id": 307402783,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1667336493
    },
    {
        "content": "<p>That's right, the block should say cargo.</p>\n<p>Context:  <code>rustc</code> is the Rust compiler and <code>cargo</code> is a build tool that sits on top of it. Most Rust users only ever use <code>cargo</code>. rustc is considered very low level. Roc calls cargo practically all the time too. I never knew it called rustc directly before the comment above. For this high level diagram we can ignore that, and only mention cargo.</p>",
        "id": 307431792,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1667349760
    }
]