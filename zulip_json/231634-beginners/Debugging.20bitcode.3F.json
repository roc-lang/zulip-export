[
    {
        "content": "<p>I'm trying to add some debug printing to the <code>List.appendUnsafe</code> builtin. If my understanding is correct, this should be done in the Zig code in <code>compiler/builtins/bitcode/src/list.zig</code>.</p>\n<p>Adding a simple <code>std.debug.print(\"appendUnsafe called!\", .{})</code> does not work. Compilation fails with the error</p>\n<div class=\"codehilite\"><pre><span></span><code>&#39;zig failed: /home/qqwy/.asdf/installs/zig/0.9.1/lib/std/os.zig:134:24: error: container &#39;std.os.system&#39; has no member called &#39;fd_t&#39;\n  pub const fd_t = system.fd_t;\n</code></pre></div>",
        "id": 289328190,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657634621
    },
    {
        "content": "<p>This looks like this code is being compiled in some kind of 'no std'-like kind of mode.</p>",
        "id": 289328271,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657634644
    },
    {
        "content": "<p>What is the proper way to do this?</p>",
        "id": 289328462,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657634667
    },
    {
        "content": "<p>you need to turn on DEBUG mode in builtins/build.rs</p>",
        "id": 289328611,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1657634716
    },
    {
        "content": "<p>it's because WASM doesn't have that type</p>",
        "id": 289328657,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1657634742
    },
    {
        "content": "<p>Ah, so switching that flag to true essentially disables WASM?</p>",
        "id": 289328766,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657634780
    },
    {
        "content": "<p>it disables the wasm backend builtins but do you need that for your debugging?</p>",
        "id": 289328824,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1657634812
    },
    {
        "content": "<p>Nope! Just trying to understand how it works. Thanks <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 289328852,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657634826
    },
    {
        "content": "<p>Hmm. Using <code>std.debug.print</code> results in an immediate segfault on app startup.<br>\nUsing <code>std.os.write</code> works, but there is no way to format numbers.</p>",
        "id": 289331956,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657636063
    },
    {
        "content": "<p>what are you running over? do you have a branch?</p>",
        "id": 289332058,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1657636087
    },
    {
        "content": "<p>Publishing the branch now</p>",
        "id": 289336461,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657637780
    },
    {
        "content": "<p><a href=\"https://github.com/rtfeldman/roc/issues/3494\">https://github.com/rtfeldman/roc/issues/3494</a></p>",
        "id": 289337797,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657638259
    },
    {
        "content": "<p>how do you repro the segfault? is it only with the debug.print?</p>",
        "id": 289338550,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1657638546
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> Marten noted earlier that there is almost no debug info in the final binary. That used to work  with debugir, I believe it worked with llvm13 too. Any idea what might have changed recently? (or am I misremenbering hand and has this not worked for a long time)</p>",
        "id": 289338903,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1657638653
    },
    {
        "content": "<p>Surgical linking? It is default now and doesn't handle debug info</p>",
        "id": 289339407,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1657638841
    },
    {
        "content": "<p>ah, that might be it</p>",
        "id": 289339552,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1657638884
    },
    {
        "content": "<p>good to know</p>",
        "id": 289339570,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1657638889
    },
    {
        "content": "<p>Yep! That is the reason! I have line numbers now <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span></p>",
        "id": 289339600,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657638899
    },
    {
        "content": "<p>Yeah, eventually need to look into linking dwarf debug info.</p>",
        "id": 289339840,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1657638977
    },
    {
        "content": "<p>debugir shouldn't be touching debug symbols from the zig builtins anyway I think, it only aids in debugging the generated LLVM</p>",
        "id": 289340290,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1657639151
    },
    {
        "content": "<p>Seems like there is a double free of a refcounted object (which manifests as invalid read of the refcount -&gt; invalid write of the refcount-&gt; invalid free).</p>",
        "id": 289340645,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657639294
    },
    {
        "content": "<p>is there a free of the address before the first read?</p>",
        "id": 289340797,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1657639348
    },
    {
        "content": "<p>There is</p>",
        "id": 289341038,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657639466
    },
    {
        "content": "<p>Interestingly memory is also leaked, depending on how long the input is to this example</p>",
        "id": 289341089,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657639484
    },
    {
        "content": "<p>(Short inputs 'only' leak, inputs &gt; 23 characters result in the double-free)</p>",
        "id": 289341279,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657639563
    },
    {
        "content": "<p>Which makes me think that it might be related to the short string optimization</p>",
        "id": 289341363,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657639599
    },
    {
        "content": "<p>yes almost certainly</p>",
        "id": 289341398,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1657639613
    },
    {
        "content": "<p>Even though 99% of the code manipulates <code>List U8</code></p>",
        "id": 289341401,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657639615
    },
    {
        "content": "<p>It is turned from a Str into a List U8 at the very beginning and turned back at the very end.</p>",
        "id": 289341458,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657639634
    },
    {
        "content": "<p>hold up</p>",
        "id": 289346210,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1657641461
    },
    {
        "content": "<p>are you using the hello world platform?</p>",
        "id": 289346223,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1657641469
    },
    {
        "content": "<p>in that platform's source code, we have </p>\n<div class=\"codehilite\"><pre><span></span><code>  // Write to stdout\n  if (write(1, str_bytes, str_len) &gt;= 0) {\n    // Writing succeeded!\n\n    // NOTE: the string is a static string, read from in the binary\n    // if you make it a heap-allocated string, it&#39;ll be leaked here\n    return 0;\n  } else {\n    printf(&quot;Error writing to stdout: %s\\n&quot;, strerror(errno));\n\n    // NOTE: the string is a static string, read from in the binary\n    // if you make it a heap-allocated string, it&#39;ll be leaked here\n    return 1;\n  }\n</code></pre></div>",
        "id": 289346312,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1657641492
    },
    {
        "content": "<p>Ah!</p>",
        "id": 289346369,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657641516
    },
    {
        "content": "<p>That would explain the leaking</p>",
        "id": 289346427,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657641539
    },
    {
        "content": "<p>But not the memory corruption</p>",
        "id": 289346474,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657641555
    },
    {
        "content": "<p>yeah, so what I usually do is use the <code>platform-switching</code> platform and pick the zig one there</p>",
        "id": 289346527,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1657641573
    },
    {
        "content": "<p>The sole reason I'm using <code>hello-world</code> while developing the parser rather than <code>cli-platform</code> is that that one currently does not compile <span aria-label=\"sweat\" class=\"emoji emoji-1f613\" role=\"img\" title=\"sweat\">:sweat:</span></p>",
        "id": 289346693,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657641622
    },
    {
        "content": "<p>I'll try to use the zig one <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 289346710,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657641627
    },
    {
        "content": "<p>But I have to leave for a couple of hours first</p>",
        "id": 289346728,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657641632
    },
    {
        "content": "<p>that platform also has a convenient <code>const DEBUG: bool = false;</code></p>",
        "id": 289346985,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1657641713
    },
    {
        "content": "<p>Can you make an issue for the cli-platform <span class=\"user-mention\" data-user-id=\"508003\">@Qqwy / Marten</span>?</p>",
        "id": 289347979,
        "sender_full_name": "Anton",
        "timestamp": 1657642145
    },
    {
        "content": "<p>I got it down to</p>\n<div class=\"codehilite\"><pre><span></span><code>main =\n    when manyImpl [48u8] [] is\n        _ -&gt; &quot;done&quot;\n\nmanyImpl = \\input, vals -&gt;\n    { before: start, others: inputRest } = List.split input 1\n\n    when List.get start 0 is\n        Err _ -&gt;\n            Ok { val: vals, input: input }\n        Ok _startCodepoint -&gt;\n            manyImpl inputRest []\n</code></pre></div>",
        "id": 289351041,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1657643449
    },
    {
        "content": "<p>the allocation of <code>[48u8]</code> does not get freed, really not sure why</p>",
        "id": 289351077,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1657643467
    },
    {
        "content": "<p>RC just loses track of it</p>",
        "id": 289351086,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1657643472
    },
    {
        "content": "<p>no decrement for it is emitted</p>",
        "id": 289351100,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1657643480
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/stream/231634-beginners/topic/Debugging.20bitcode.3F/near/289347979\">said</a>:</p>\n<blockquote>\n<p>Can you make an issue for the cli-platform <span class=\"user-mention silent\" data-user-id=\"508003\">Qqwy / Marten</span>?</p>\n</blockquote>\n<p>It was this one: <a href=\"https://github.com/rtfeldman/roc/issues/3438\">https://github.com/rtfeldman/roc/issues/3438</a></p>",
        "id": 289352992,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657644321
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281543\">Folkert de Vries</span> <a href=\"#narrow/stream/231634-beginners/topic/Debugging.20bitcode.3F/near/289351100\">said</a>:</p>\n<blockquote>\n<p>no decrement for it is emitted</p>\n</blockquote>\n<p>Really odd that the opposite (double free) happens for large inputs.</p>",
        "id": 289353206,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657644413
    },
    {
        "content": "<p>often the one snowballs into the other</p>",
        "id": 289353767,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1657644666
    },
    {
        "content": "<p>it just means RC is wrong and then all bets are off</p>",
        "id": 289353776,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1657644674
    },
    {
        "content": "<p>got it</p>",
        "id": 289355616,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1657645538
    },
    {
        "content": "<p>when the slice we end up making is empty, the logic is wrong</p>",
        "id": 289355704,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1657645564
    },
    {
        "content": "<p>just need to turn <code>sublist</code> into</p>\n<div class=\"codehilite\"><pre><span></span><code>sublist : List elem, { start : Nat, len : Nat } -&gt; List elem\nsublist = \\list, config -&gt;\n    if config.len == 0 then\n        []\n    else\n        sublistLowlevel list config.start config.len\n</code></pre></div>\n<p>in <code>List.roc</code></p>",
        "id": 289355883,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1657645655
    },
    {
        "content": "<p>Even with this fix in place, the larger example still fails with a use-after-free <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 289371474,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657652809
    },
    {
        "content": "<p>can you minimize the example again?</p>",
        "id": 289371590,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1657652874
    },
    {
        "content": "<p>I'm not sure; when I tried minimizing it further before, Roc no longer used refcounting and then the problem disappears</p>",
        "id": 289378752,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657656435
    },
    {
        "content": "<p>so long as you use lists it should just be using RC</p>",
        "id": 289378859,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1657656485
    },
    {
        "content": "<p>I managed to make the example shorter</p>",
        "id": 289381811,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657658112
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code># Use after free. List has 24 elems.\n# Making list 1 elem shorter resolves problem (short string optimization?)\nmain =\n    [65u8,65u8,65u8,65u8,65u8,65u8,65u8,65u8,65u8,65u8,65u8,65u8,65u8,65u8,65u8,65u8,65u8,65u8,65u8,65u8,65u8,65u8,65u8,65u8,]\n    |&gt; Str.fromUtf8\n    |&gt; Result.withDefault &quot;(not used)&quot;\n</code></pre></div>\n<p>This breaks also in the REPL</p>",
        "id": 289381830,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657658119
    },
    {
        "content": "<p>And obviously also with Valgrind</p>",
        "id": 289381849,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657658130
    },
    {
        "content": "<p>I think that <code>Str.fromUtf8</code> encounters a problem iff the resulting string is 'big'</p>",
        "id": 289381898,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657658155
    },
    {
        "content": "<p>In the REPL, the output becomes <code>\"%v����AAAAAAAAAAAAAAAA\" : Str</code>. (Deterministic because of WASM?)</p>",
        "id": 289381969,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657658179
    },
    {
        "content": "<p>And running the binary outside of valgrind gives arbitrary output for the first 8 characters of the 'hello world' example.</p>",
        "id": 289382105,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657658269
    },
    {
        "content": "<p>got that one too, now there is just a memory leak that remains</p>",
        "id": 289383489,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1657658953
    },
    {
        "content": "<p>Wait you already fixed this one somehow?</p>",
        "id": 289383529,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657658989
    },
    {
        "content": "<p>for the small string cases</p>",
        "id": 289383536,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1657658992
    },
    {
        "content": "<p>Do I need to update the current branch with trunk or something?</p>",
        "id": 289383549,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657659000
    },
    {
        "content": "<p>yeah it's an RC thing where you flip a bool and it works</p>",
        "id": 289383599,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1657659009
    },
    {
        "content": "<p>oh, it's not on trunk</p>",
        "id": 289383608,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1657659014
    },
    {
        "content": "<p>just locally</p>",
        "id": 289383613,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1657659017
    },
    {
        "content": "<p>I can make a branch, then you can cherry-pick to get unblocked</p>",
        "id": 289383659,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1657659045
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 289383669,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657659050
    },
    {
        "content": "<p>see the <code>string-memory-problems</code> branch</p>",
        "id": 289384169,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1657659314
    },
    {
        "content": "<p>eww that has a build error,</p>",
        "id": 289384230,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1657659352
    },
    {
        "content": "<p>allright, all good. The example from the issue now compiles without valgrind errors</p>",
        "id": 289384518,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1657659494
    },
    {
        "content": "<p>OK, <span aria-label=\"cherries\" class=\"emoji emoji-1f352\" role=\"img\" title=\"cherries\">:cherries:</span> <span aria-label=\"ok\" class=\"emoji emoji-1f44c\" role=\"img\" title=\"ok\">:ok:</span>  time</p>",
        "id": 289385121,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657659781
    },
    {
        "content": "<p>Your fix resolves the problem. I only see the one leak from the hello-world platform now</p>",
        "id": 289385249,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657659846
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"508003\">Qqwy / Marten</span> <a href=\"#narrow/stream/231634-beginners/topic/Debugging.20bitcode.3F/near/289381969\">said</a>:</p>\n<blockquote>\n<p>In the REPL, the output becomes <code>\"%v����AAAAAAAAAAAAAAAA\" : Str</code>. (Deterministic because of WASM?)</p>\n</blockquote>\n<p>If you mean the web REPL, which runs in Wasm, then be aware that on a 32-bit platform, short strings are &lt;=11 bytes rather than &lt;=23</p>",
        "id": 289385260,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1657659857
    },
    {
        "content": "<p>Not sure if that affects your conclusions or not</p>",
        "id": 289385319,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1657659892
    },
    {
        "content": "<p>No, I meant the command-line <code>roc repl</code></p>",
        "id": 289385566,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657659998
    },
    {
        "content": "<p>Does that one use WASM or LLVM?</p>",
        "id": 289385636,
        "sender_full_name": "Qqwy / Marten",
        "timestamp": 1657660035
    },
    {
        "content": "<p>LLVM</p>",
        "id": 289385653,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1657660041
    },
    {
        "content": "<p>though given the speed of our wasm backend  now, using wasm there might not be a bad idea</p>",
        "id": 289386772,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1657660652
    },
    {
        "content": "<p>eventually we'd go for just assembly I think, but that backend is fairly immature</p>",
        "id": 289386790,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1657660670
    }
]