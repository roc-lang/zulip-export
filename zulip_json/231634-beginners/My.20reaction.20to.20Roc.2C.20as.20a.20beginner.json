[
    {
        "content": "<p>Reading the Roc-for-Elm tutorial. So far most things are reasonable and/or improvements over Elm.</p>",
        "id": 344122709,
        "sender_full_name": "Leonardo Taglialegne",
        "timestamp": 1679614413
    },
    {
        "content": "<p>The first weird thing I found is the syntax for open records which is just... Weird<br>\n<code>{ name : Str, email : Str }a -&gt; { name : Str, email : Str }a</code> especially because I'd feel like writing it as<br>\n<code>{ name : Str, email : Str } a -&gt; { name : Str, email : Str } a</code> which feels... even weirder <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 344122843,
        "sender_full_name": "Leonardo Taglialegne",
        "timestamp": 1679614488
    },
    {
        "content": "<p>Qualified-but-not-dotted record update is :chefs-kiss:</p>",
        "id": 344122887,
        "sender_full_name": "Leonardo Taglialegne",
        "timestamp": 1679614521
    },
    {
        "content": "<blockquote>\n<p>...and the table function will fill in its default values for <code>x</code> and <code>y</code>. There is no need to use a <code>defaultConfig</code> record.</p>\n</blockquote>\n<p>Except it has default for <code>title</code> and <code>description</code>. Eh. Guess a PR is incoming <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 344123012,
        "sender_full_name": "Leonardo Taglialegne",
        "timestamp": 1679614587
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/pull/5184\">https://github.com/roc-lang/roc/pull/5184</a></p>",
        "id": 344123365,
        "sender_full_name": "Leonardo Taglialegne",
        "timestamp": 1679614774
    },
    {
        "content": "<p>Optional record fields are just Comfortable</p>",
        "id": 344123572,
        "sender_full_name": "Leonardo Taglialegne",
        "timestamp": 1679614884
    },
    {
        "content": "<blockquote>\n<p>Destructuring is the only way to implement a record with optional fields. (For example, if you write the expression <code>config.title</code> and <code>title</code> is an optional field, you'll get a compile error.)</p>\n</blockquote>\n<p>I get it but also... it could just be a <code>Maybe</code>? But then you'd bless a specific type which is suboptimal I guess? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 344123724,
        "sender_full_name": "Leonardo Taglialegne",
        "timestamp": 1679614957
    },
    {
        "content": "<blockquote>\n<p><code>when/is</code> instead of <code>case/of</code></p>\n</blockquote>\n<p>Fair enough</p>",
        "id": 344123785,
        "sender_full_name": "Leonardo Taglialegne",
        "timestamp": 1679614992
    },
    {
        "content": "<blockquote>\n<p>pipe for multiple patterns</p>\n</blockquote>\n<p>YES thank you</p>",
        "id": 344123799,
        "sender_full_name": "Leonardo Taglialegne",
        "timestamp": 1679615009
    },
    {
        "content": "<blockquote>\n<p>pattern guards</p>\n</blockquote>\n<p>Yes</p>",
        "id": 344123830,
        "sender_full_name": "Leonardo Taglialegne",
        "timestamp": 1679615030
    },
    {
        "content": "<blockquote>\n<p>can use <code>if</code> guards to match against constants</p>\n</blockquote>\n<p>YESSSSS</p>",
        "id": 344123915,
        "sender_full_name": "Leonardo Taglialegne",
        "timestamp": 1679615062
    },
    {
        "content": "<p>So tempted to rewrite nuPlot in Roc now <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></p>",
        "id": 344123939,
        "sender_full_name": "Leonardo Taglialegne",
        "timestamp": 1679615084
    },
    {
        "content": "<blockquote>\n<p>and Bool is an opaque type. The values Bool.true and Bool.false work like True and False do in Elm.</p>\n</blockquote>\n<p>weeeeird. Is this to avoid <code>when/is</code> on booleans? Guess one would <code>when/is/if</code> then <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 344124010,
        "sender_full_name": "Leonardo Taglialegne",
        "timestamp": 1679615141
    },
    {
        "content": "<p>Having to qualify booleans like <code>Bool.true</code> and <code>Bool.false</code> feels weeeeeird for such a basic thing. Is the idea to push towards custom types harder?</p>",
        "id": 344124103,
        "sender_full_name": "Leonardo Taglialegne",
        "timestamp": 1679615178
    },
    {
        "content": "<blockquote>\n<p><code>Task</code> type args are flipped</p>\n</blockquote>\n<p>...mmmmmmmmmmh. I get it. But also. Mhhhhhhh</p>",
        "id": 344124188,
        "sender_full_name": "Leonardo Taglialegne",
        "timestamp": 1679615263
    },
    {
        "content": "<blockquote>\n<p>combined error tags</p>\n</blockquote>\n<p>AMAZING</p>",
        "id": 344124258,
        "sender_full_name": "Leonardo Taglialegne",
        "timestamp": 1679615287
    },
    {
        "content": "<blockquote>\n<p>open tag unions syntax</p>\n</blockquote>\n<p>see my comment about re: open record syntax. weeeeeeeeeeeeeeeeeeeird</p>",
        "id": 344124333,
        "sender_full_name": "Leonardo Taglialegne",
        "timestamp": 1679615343
    },
    {
        "content": "<blockquote>\n<p>You don't need to declare tag unions before using them. Instead, you can just write a tag (essentially a variant) anywhere you like, and Roc will infer the type of the union it goes in.</p>\n</blockquote>\n<p>Thank you</p>",
        "id": 344124381,
        "sender_full_name": "Leonardo Taglialegne",
        "timestamp": 1679615388
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>&gt; y = Foo &quot;hi&quot; Bar\nFoo &quot;hi&quot; 5 : [Foo Str [Bar]*]*\n</code></pre></div>\n<p>This is another typo but I'm not sure what the intent was</p>",
        "id": 344124501,
        "sender_full_name": "Leonardo Taglialegne",
        "timestamp": 1679615458
    },
    {
        "content": "<blockquote>\n<p>Similarly to how if you put { name = \"\" } into elm repl, it will infer a type of { a | name : String } - that is, an open record with an unbound type variable and name : Str field </p>\n</blockquote>\n<p>It doesn't tho. It only infers that open record if you <code>hello {name} = \"Hello \" ++ name</code></p>",
        "id": 344124664,
        "sender_full_name": "Leonardo Taglialegne",
        "timestamp": 1679615553
    },
    {
        "content": "<p>For optional record fields:</p>\n<blockquote>\n<p>I get it but also... it could just be a Maybe? But then you'd bless a specific type which is suboptimal I guess?</p>\n</blockquote>\n<p>This is because optional record fields aren't really optional. They really should be called record fields with default values for a specific function. This is all known and dealt with at compile time. Depending on types, we generate specific functions with those values set as need. If you had a record field that was truly optional at runtime, you would use a <code>Result</code> or <code>Maybe</code> like value to hold the data.</p>",
        "id": 344124841,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679615678
    },
    {
        "content": "<p>Makes sense. I learned from Elm that it's fine to restrict features to nudge users towards better code</p>",
        "id": 344125043,
        "sender_full_name": "Leonardo Taglialegne",
        "timestamp": 1679615798
    },
    {
        "content": "<blockquote>\n<p>Opaque types</p>\n</blockquote>\n<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> ok</p>",
        "id": 344125136,
        "sender_full_name": "Leonardo Taglialegne",
        "timestamp": 1679615866
    },
    {
        "content": "<p>Also, for bool, the context is here: <a class=\"stream-topic\" data-stream-id=\"304641\" href=\"/#narrow/stream/304641-ideas/topic/opaque.20bools\">#ideas &gt; opaque bools</a></p>",
        "id": 344125160,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679615881
    },
    {
        "content": "<p>Doc at the top here: <a href=\"#narrow/stream/304641-ideas/topic/opaque.20bools/near/286971346\">https://roc.zulipchat.com/#narrow/stream/304641-ideas/topic/opaque.20bools/near/286971346</a></p>",
        "id": 344125226,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679615909
    },
    {
        "content": "<p>Yupp, I'm a convert. Love it</p>",
        "id": 344125934,
        "sender_full_name": "Leonardo Taglialegne",
        "timestamp": 1679616355
    },
    {
        "content": "<blockquote>\n<p>app vs interface modules</p>\n</blockquote>\n<p>Mmmmh <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> wouldn't this prevent multiple entrypoints? Which is a nice thing sometimes</p>",
        "id": 344126040,
        "sender_full_name": "Leonardo Taglialegne",
        "timestamp": 1679616401
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> I appreciate your responses, thanks for taking the time <span aria-label=\"purple heart\" class=\"emoji emoji-1f49c\" role=\"img\" title=\"purple heart\">:purple_heart:</span></p>",
        "id": 344126072,
        "sender_full_name": "Leonardo Taglialegne",
        "timestamp": 1679616425
    },
    {
        "content": "<blockquote>\n<p>All imports and exports in Roc are enumerated explicitly; there is no .. syntax.</p>\n</blockquote>\n<p>YES</p>",
        "id": 344126102,
        "sender_full_name": "Leonardo Taglialegne",
        "timestamp": 1679616444
    },
    {
        "content": "<blockquote>\n<p>(Later on, we'll talk about how opaque types work in Roc.)</p>\n</blockquote>\n<p>_technically_ you already did</p>",
        "id": 344126135,
        "sender_full_name": "Leonardo Taglialegne",
        "timestamp": 1679616467
    },
    {
        "content": "<blockquote>\n<p>Elm does permit overriding open imports - e.g. if you have import Foo exposing (bar), or import Foo exposing (..), you can still define bar = ... in the module. Roc treats this as shadowing and does not allow it.</p>\n</blockquote>\n<p>Good</p>",
        "id": 344126234,
        "sender_full_name": "Leonardo Taglialegne",
        "timestamp": 1679616515
    },
    {
        "content": "<blockquote>\n<p>Roc has no &lt;&lt; or &gt;&gt; operators, and there are no functions in the standard library for general-purpose pointfree function composition.</p>\n</blockquote>\n<p><span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span></p>",
        "id": 344126591,
        "sender_full_name": "Leonardo Taglialegne",
        "timestamp": 1679616753
    },
    {
        "content": "<p>The only \"good\" use of <code>&lt;&lt;</code> is <code>List.filter (not &lt;&lt; String.isEmpty)</code></p>",
        "id": 344126688,
        "sender_full_name": "Leonardo Taglialegne",
        "timestamp": 1679616837
    },
    {
        "content": "<p>Which. Like. <code>List.filter String.Extra.isNotEmpty</code></p>",
        "id": 344126740,
        "sender_full_name": "Leonardo Taglialegne",
        "timestamp": 1679616850
    },
    {
        "content": "<blockquote>\n<p>Separately, you don't need parens or an operator to pass when or if as arguments. Here's another example:</p>\n</blockquote>\n<p>Nize</p>",
        "id": 344126802,
        "sender_full_name": "Leonardo Taglialegne",
        "timestamp": 1679616904
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>list =\n    num &lt;- List.map numbers\n\n    num + 1\n</code></pre></div>\n<p>oooooooooh, this is NICE. At first I was like \"oh, ok, monadish syntax\" but no, this is way better</p>",
        "id": 344126950,
        "sender_full_name": "Leonardo Taglialegne",
        "timestamp": 1679616982
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>incrementedNumbers =\n    num &lt;-\n        [1, 2, 3]\n            |&gt; List.reverse\n            |&gt; List.map\n\n    num + 1\n</code></pre></div>\n<p>ooooh, it combines So Nicely</p>",
        "id": 344127032,
        "sender_full_name": "Leonardo Taglialegne",
        "timestamp": 1679617050
    },
    {
        "content": "<p>Oh, _that's_ why you <code>Task.await</code>! It's just an <code>andThen</code> mean to be used in backpassing style!</p>",
        "id": 344127169,
        "sender_full_name": "Leonardo Taglialegne",
        "timestamp": 1679617120
    },
    {
        "content": "<blockquote>\n<p><code>Dec</code></p>\n</blockquote>\n<p><span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span></p>",
        "id": 344127319,
        "sender_full_name": "Leonardo Taglialegne",
        "timestamp": 1679617204
    },
    {
        "content": "<blockquote>\n<p>If you encounter integer or Dec overflow in Roc, by default you get a runtime exception. </p>\n</blockquote>\n<p>Oh. Oh no. Oh PLEASE no. Nope. Noooope. Like. I get it. But. Ugh</p>",
        "id": 344127610,
        "sender_full_name": "Leonardo Taglialegne",
        "timestamp": 1679617378
    },
    {
        "content": "<blockquote>\n<p>No Char. This is by design. </p>\n</blockquote>\n<p>Good</p>",
        "id": 344128094,
        "sender_full_name": "Leonardo Taglialegne",
        "timestamp": 1679617672
    },
    {
        "content": "<blockquote>\n<p><code>dbg</code> auto-yeeted in prod</p>\n</blockquote>\n<p>Good</p>",
        "id": 344128487,
        "sender_full_name": "Leonardo Taglialegne",
        "timestamp": 1679617859
    },
    {
        "content": "<blockquote>\n<p><code>crash</code> keyword</p>\n</blockquote>\n<p>mmmmmmmh <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> I like that it's uncatchable, but I would also be wary of a library just randomly crashing on me?</p>",
        "id": 344128682,
        "sender_full_name": "Leonardo Taglialegne",
        "timestamp": 1679617949
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455778\">Leonardo Taglialegne</span> <a href=\"#narrow/stream/231634-beginners/topic/My.20reaction.20to.20Roc.2C.20as.20a.20beginner/near/344127610\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>If you encounter integer or Dec overflow in Roc, by default you get a runtime exception. </p>\n</blockquote>\n<p>Oh. Oh no. Oh PLEASE no. Nope. Noooope. Like. I get it. But. Ugh</p>\n</blockquote>\n<p>For reference, this was kinda a fitted compromise that matches the other numeric types. We tried enforcing more checked arithmetic on numeric types, but fundamentally it adds too much friction to the language. So Dec behaves the same as all the other regular number types. When you do <code>a + b</code>, whether it is a <code>U64</code>, <code>I8</code>, or <code>Dec</code>, it may overflow (which will run time panic). You, of course, can opt into checked arithmetic that will return a result.</p>",
        "id": 344130089,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679618548
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455778\">Leonardo Taglialegne</span> <a href=\"#narrow/stream/231634-beginners/topic/My.20reaction.20to.20Roc.2C.20as.20a.20beginner/near/344128682\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p><code>crash</code> keyword</p>\n</blockquote>\n<p>mmmmmmmh <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> I like that it's uncatchable, but I would also be wary of a library just randomly crashing on me?</p>\n</blockquote>\n<p>There was a lot of debate around this and it may change at some point, but fundamentally crash can be useful in libraries. For example, <code>Dict</code> is written in Roc. It uses crash for states that should be unreachable. Without crash, there is not really a clear thing to do if somehow you reached a state that should be unreachable and would definitely otherwise be a bug. The general thought is that it will hopefully turn out like <code>panic</code> in rust libraries. Most rust libraries will never panic, or if they do it is an unrecoverable library bug that should be filed upstream.</p>",
        "id": 344130811,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679618843
    },
    {
        "content": "<p>Interesting, for some reason I thought <code>crash</code> only worked in <code>app</code> modules.</p>",
        "id": 344132732,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1679619640
    },
    {
        "content": "<p>Here is <a href=\"#narrow/stream/304641-ideas/topic/crash/near/302000918\">Richard's proposal and zulip thread discussion</a> for anyone who is interested in reading more about <code>crash</code> design.</p>",
        "id": 344134060,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1679620224
    },
    {
        "content": "<blockquote>\n<p>Interesting, for some reason I thought <code>crash</code> only worked in <code>app</code> modules.</p>\n</blockquote>\n<p>Just double checked. I was able to put a crash directly in an interface in a platform.</p>",
        "id": 344135303,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1679620865
    },
    {
        "content": "<p>Yeah, I believe you. It is definitely in <code>Dict</code>. I guess I assumed somewhere along the way. Good to know. I think it's a good trade-off.</p>",
        "id": 344135483,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1679620951
    },
    {
        "content": "<p>Anyway. Considering that you're only a novice once I wanted to share my impressions :)</p>\n<p>I will now probably try and play with roc a bit</p>\n<p>Btw, thanks to all the people who worked on flake.nix, I was able to install roc by just adding it to home-manager like this: <a href=\"https://github.com/miniBill/dotfiles/commit/c0f1775048011f9e0580d842604870109be12a3f\">https://github.com/miniBill/dotfiles/commit/c0f1775048011f9e0580d842604870109be12a3f</a></p>",
        "id": 344135914,
        "sender_full_name": "Leonardo Taglialegne",
        "timestamp": 1679621211
    },
    {
        "content": "<p>7 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"304641\" href=\"/#narrow/stream/304641-ideas/topic/open.20record.20syntax\">#ideas &gt; open record syntax</a> by <span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span>.</p>",
        "id": 344375206,
        "sender_full_name": "Notification Bot",
        "timestamp": 1679695367
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>The List module does not expose `length`:\n</code></pre></div>\n<p>I'd write \"The List module does not expose a value or function named <code>length</code>\".<br>\nThe current  verbiage sounds like \"the function exist but is not exposed\".</p>",
        "id": 344476374,
        "sender_full_name": "Leonardo Taglialegne",
        "timestamp": 1679746986
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"err\">»</span><span class=\"w\"> </span><span class=\"nf\">-</span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">len</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nf\">'</span><span class=\"nv\">a'</span><span class=\"p\">])</span>\n\n<span class=\"mi\">18446744073709551615</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Nat</span>\n</code></pre></div>\n<p>... I know why it happens but it's still surprising</p>",
        "id": 344476533,
        "sender_full_name": "Leonardo Taglialegne",
        "timestamp": 1679747054
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"err\">»</span><span class=\"w\"> </span><span class=\"nf\">-</span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">len</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nf\">'</span><span class=\"nv\">a'</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mf\">3.</span><span class=\"mi\">0</span>\n<span class=\"nv\">thread</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"nv\">main'</span><span class=\"w\"> </span><span class=\"nv\">panicked</span><span class=\"w\"> </span><span class=\"nv\">at</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"nv\">called</span><span class=\"w\"> </span><span class=\"nf\">`</span><span class=\"kt\">Result</span><span class=\"nf\">::</span><span class=\"nv\">unwrap</span><span class=\"p\">()</span><span class=\"nf\">`</span><span class=\"w\"> </span><span class=\"nv\">on</span><span class=\"w\"> </span><span class=\"nv\">an</span><span class=\"w\"> </span><span class=\"nf\">`</span><span class=\"kt\">Err</span><span class=\"nf\">`</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Erroneous</span><span class=\"nf\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">crates</span><span class=\"nf\">/</span><span class=\"nv\">compiler</span><span class=\"nf\">/</span><span class=\"nv\">mono</span><span class=\"nf\">/</span><span class=\"nv\">src</span><span class=\"nf\">/</span><span class=\"nv\">ir</span><span class=\"nf\">.</span><span class=\"nv\">rs</span><span class=\"nf\">:</span><span class=\"mi\">10433</span><span class=\"nf\">:</span><span class=\"mi\">10</span>\n<span class=\"nv\">note</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">run</span><span class=\"w\"> </span><span class=\"nv\">with</span><span class=\"w\"> </span><span class=\"nf\">`</span><span class=\"kt\">RUST_BACKTRACE</span><span class=\"nf\">=</span><span class=\"mi\">1</span><span class=\"nf\">`</span><span class=\"w\"> </span><span class=\"nv\">environment</span><span class=\"w\"> </span><span class=\"nv\">variable</span><span class=\"w\"> </span><span class=\"nv\">to</span><span class=\"w\"> </span><span class=\"nv\">display</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">backtrace</span>\n</code></pre></div>\n<p>Whoops :D</p>",
        "id": 344476571,
        "sender_full_name": "Leonardo Taglialegne",
        "timestamp": 1679747068
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455778\">Leonardo Taglialegne</span> <a href=\"#narrow/stream/231634-beginners/topic/My.20reaction.20to.20Roc.2C.20as.20a.20beginner/near/344476533\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"err\">»</span><span class=\"w\"> </span><span class=\"nf\">-</span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">len</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nf\">'</span><span class=\"nv\">a'</span><span class=\"p\">])</span>\n\n<span class=\"mi\">18446744073709551615</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Nat</span>\n</code></pre></div>\n<p>... I know why it happens but it's still surprising</p>\n</blockquote>\n<p>oh this is actually a bug! I've opened <a href=\"https://github.com/roc-lang/roc/issues/5197\">https://github.com/roc-lang/roc/issues/5197</a> for it</p>",
        "id": 344485675,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1679750146
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455778\">Leonardo Taglialegne</span> <a href=\"#narrow/stream/231634-beginners/topic/My.20reaction.20to.20Roc.2C.20as.20a.20beginner/near/344476571\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"err\">»</span><span class=\"w\"> </span><span class=\"nf\">-</span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">len</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nf\">'</span><span class=\"nv\">a'</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mf\">3.</span><span class=\"mi\">0</span>\n<span class=\"nv\">thread</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"nv\">main'</span><span class=\"w\"> </span><span class=\"nv\">panicked</span><span class=\"w\"> </span><span class=\"nv\">at</span><span class=\"w\"> </span><span class=\"nf\">'</span><span class=\"nv\">called</span><span class=\"w\"> </span><span class=\"nf\">`</span><span class=\"kt\">Result</span><span class=\"nf\">::</span><span class=\"nv\">unwrap</span><span class=\"p\">()</span><span class=\"nf\">`</span><span class=\"w\"> </span><span class=\"nv\">on</span><span class=\"w\"> </span><span class=\"nv\">an</span><span class=\"w\"> </span><span class=\"nf\">`</span><span class=\"kt\">Err</span><span class=\"nf\">`</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Erroneous</span><span class=\"nf\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">crates</span><span class=\"nf\">/</span><span class=\"nv\">compiler</span><span class=\"nf\">/</span><span class=\"nv\">mono</span><span class=\"nf\">/</span><span class=\"nv\">src</span><span class=\"nf\">/</span><span class=\"nv\">ir</span><span class=\"nf\">.</span><span class=\"nv\">rs</span><span class=\"nf\">:</span><span class=\"mi\">10433</span><span class=\"nf\">:</span><span class=\"mi\">10</span>\n<span class=\"nv\">note</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">run</span><span class=\"w\"> </span><span class=\"nv\">with</span><span class=\"w\"> </span><span class=\"nf\">`</span><span class=\"kt\">RUST_BACKTRACE</span><span class=\"nf\">=</span><span class=\"mi\">1</span><span class=\"nf\">`</span><span class=\"w\"> </span><span class=\"nv\">environment</span><span class=\"w\"> </span><span class=\"nv\">variable</span><span class=\"w\"> </span><span class=\"nv\">to</span><span class=\"w\"> </span><span class=\"nv\">display</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">backtrace</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This is also a bug! Would you mind <a href=\"https://github.com/roc-lang/roc/issues\">opening an issue</a> for it?</p>",
        "id": 344485958,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1679750224
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/231634-beginners/topic/My.20reaction.20to.20Roc.2C.20as.20a.20beginner/near/344485675\">said</a>:</p>\n<blockquote>\n<p>oh this is actually a bug! I've opened <a href=\"https://github.com/roc-lang/roc/issues/5197\">https://github.com/roc-lang/roc/issues/5197</a> for it</p>\n</blockquote>\n<p>Would it be possible to instead forbid using <code>negate</code> on <code>Nat</code>?</p>",
        "id": 344495467,
        "sender_full_name": "Leonardo Taglialegne",
        "timestamp": 1679753077
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/231634-beginners/topic/My.20reaction.20to.20Roc.2C.20as.20a.20beginner/near/344485958\">said</a>:</p>\n<blockquote>\n<p>This is also a bug! Would you mind <a href=\"https://github.com/roc-lang/roc/issues\">opening an issue</a> for it?</p>\n</blockquote>\n<p>Minimized and posted <a href=\"https://github.com/roc-lang/roc/issues/5199\">https://github.com/roc-lang/roc/issues/5199</a></p>",
        "id": 344495935,
        "sender_full_name": "Leonardo Taglialegne",
        "timestamp": 1679753203
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455778\">Leonardo Taglialegne</span> <a href=\"#narrow/stream/231634-beginners/topic/My.20reaction.20to.20Roc.2C.20as.20a.20beginner/near/344495467\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/231634-beginners/topic/My.20reaction.20to.20Roc.2C.20as.20a.20beginner/near/344485675\">said</a>:</p>\n<blockquote>\n<p>oh this is actually a bug! I've opened <a href=\"https://github.com/roc-lang/roc/issues/5197\">https://github.com/roc-lang/roc/issues/5197</a> for it</p>\n</blockquote>\n<p>Would it be possible to instead forbid using <code>negate</code> on <code>Nat</code>?</p>\n</blockquote>\n<p>I considered it a long time ago, but I concluded it wouldn't be worth it because it would introduce an entire type-level distinction between signed and unsigned numbers basically just to prevent calling a function unnecessarily <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 344498124,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1679753863
    },
    {
        "content": "<p>(also there would be a nonzero cost to compile times to introducing that distinction)</p>",
        "id": 344498224,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1679753885
    },
    {
        "content": "<p>I could see an argument for having negation of an unsigned integer always crash, even if you give it 0</p>",
        "id": 344498422,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1679753967
    },
    {
        "content": "<p>and just say \"you tried to negate an unsigned number, and unsigned numbers can't be negative\"</p>",
        "id": 344498466,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1679753985
    },
    {
        "content": "<p>that would mean that if you ever called <code>Num.neg</code> on an unsigned number, it wouldn't give you a compile-time error, but in practice you'd always find out about it right away if you ever tried it</p>",
        "id": 344498708,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1679754059
    },
    {
        "content": "<p>you wouldn't even have the \"whoops it was 0 in my test cases, so I didn't notice\" edge case</p>",
        "id": 344498761,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1679754072
    },
    {
        "content": "<p>actually that seems worth trying and seeing if it causes problems; I've updated the issue</p>",
        "id": 344498988,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1679754121
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/231634-beginners/topic/My.20reaction.20to.20Roc.2C.20as.20a.20beginner/near/344498124\">said</a>:</p>\n<div class=\"codehilite\"><pre><span></span><code>I considered it a long time ago, but I concluded it wouldn&#39;t be worth it because it would introduce an entire type-level distinction between signed and unsigned numbers basically just to prevent calling a function unnecessarily :big_smile:\n</code></pre></div>\n<p>For builtin operations, Roc would not need to introduce a type-level distinction - the compiler already has support we added for checking, for example, does this integer fit in a U8? So, we could apply the same analyses for catching negations of unsigned integers, without having to change the type-level syntax or integer types a Roc programmer needs to know.</p>\n<p>The same kind of thing could be used to catch checks like <code>myU8 &lt; 0u8</code> which will never succeed.</p>",
        "id": 344537583,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1679767852
    },
    {
        "content": "<p>hm, what about something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">negatesArgInSomeCodePath</span> <span class=\"p\">:</span> <span class=\"n\">Num</span> <span class=\"n\">a</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Num</span> <span class=\"n\">a</span>\n\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">negatesArgInSomeCodePath</span> <span class=\"n\">someSignedInt</span>\n\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">negatesArgInSomeCodePath</span> <span class=\"n\">someUnsignedInt</span>\n</code></pre></div>\n<p>in that case, would it give an error for <code>y</code>? if so, what would the error be? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 344540632,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1679769629
    },
    {
        "content": "<p>yeah, that might not detectable at compile time - but something like</p>\n<div class=\"codehilite\"><pre><span></span><code>f : U8 -&gt; U8\nf = \\x -&gt;\n  ...\n  g = -x * -x\n  ...\n  g\n</code></pre></div>\n<p>the compiler could provide today with no language changes</p>",
        "id": 344541257,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1679769944
    },
    {
        "content": "<p>ahh sure, that's a good point!</p>",
        "id": 344541538,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1679770048
    },
    {
        "content": "<p>so just like \"if we know for sure it's gonna be a problem, we can tell you; otherwise, you might get a runtime error\"</p>",
        "id": 344541564,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1679770068
    }
]