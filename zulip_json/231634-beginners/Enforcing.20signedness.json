[
    {
        "content": "<p>Can signedness/unsignedness be enforced?</p>\n<p>I'm implementing a size-agnostic, unsigned-specific algorithm <a href=\"https://github.com/JanCVanB/roc-random/pull/9/files#diff-720f196293812d4f5da7f0bcca14a24834dd46862568f07a6139af22b33450f8R265\">here</a> (the linear congruential generator algorithm for pseudorandom number generation, which repeatedly multiplies and intentionally overflow-wraps). I'd like to be able to specify unsignedness in type aliases (and opaque types), but I don't think that's possible since it's currently implemented in the built-ins as the private tag <code>@Unsigned</code>.</p>\n<p>Something like this would be nice:<br>\n(I have no syntax preferences, the first line is just a guess)</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kt\">MustBeUnsignedForSomeReason</span><span class=\"w\"> </span><span class=\"n\">uint</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">Int</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"kt\">Unsigned</span><span class=\"w\"> </span><span class=\"n\">uint</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"nf\">foo</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">MustBeUnsignedForSomeReason</span><span class=\"w\"> </span><span class=\"kt\">U16</span><span class=\"w\"></span>\n<span class=\"nf\">foo</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">baz</span><span class=\"w\"></span>\n<span class=\"nf\">bar</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">MustBeUnsignedForSomeReason</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"></span>\n<span class=\"nf\">bar</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"n\">baz</span><span class=\"w\"></span>\n<span class=\"nf\">baz</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"kt\">U16</span><span class=\"w\"></span>\n<span class=\"nf\">baz</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Is this weird? Does Roc intentionally not support size-agnostic signedness specificity?</p>",
        "id": 275213117,
        "sender_full_name": "jan kili",
        "timestamp": 1647251425
    },
    {
        "content": "<p>with abilities it could be possible</p>",
        "id": 275229444,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1647261611
    },
    {
        "content": "<p>I actually thought about this at some point for purposes of making it a compile error to attempt to negate an unsigned integer, since that will always panic</p>",
        "id": 275235186,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647264548
    },
    {
        "content": "<p>amusingly, that would also improve negation performance because it would mean we no longer had to do a conditional to check for overflow there</p>",
        "id": 275235243,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647264582
    },
    {
        "content": "<p>(well, negating an unsigned integer of 0 would work, but if you're sure it's 0, why bother negating a 0? And if you aren't sure whether it's 0, then negating it isn't safe!)</p>",
        "id": 275235402,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647264656
    },
    {
        "content": "<p>so we could have a <code>SignedArithmetic</code> ability, yeah</p>",
        "id": 275235435,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647264675
    },
    {
        "content": "<p>Would you still want the check due to not being able to negate <code>-128 : I8</code>. Only matters for the minimum of each signed type, but still leads to an overflow case.</p>",
        "id": 275253297,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1647272156
    },
    {
        "content": "<p>oh true, for integers anyway</p>",
        "id": 275264655,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647276426
    },
    {
        "content": "<p>not floats, but I guess we already don't need it there</p>",
        "id": 275264694,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1647276442
    }
]