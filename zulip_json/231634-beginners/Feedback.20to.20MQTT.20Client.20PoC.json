[
    {
        "content": "<p>Hi,</p>\n<p>I wrote a first basic version of an MQTT client. It can connect to a server and subscribe to topics and receive their messages.</p>\n<p><a href=\"https://gist.github.com/jonasdiemer/6b650f473e990bff5f8d216bb3d9b371\">https://gist.github.com/jonasdiemer/6b650f473e990bff5f8d216bb3d9b371</a></p>\n<p>I'd be interested in feedback as to what could be improved, especially related to \"idiomatic Roc\". Thanks in advance!</p>",
        "id": 508946202,
        "sender_full_name": "Jonas Diemer",
        "timestamp": 1743272366
    },
    {
        "content": "<p>bug on line 11, I think you want:<br>\n<code>Num.to_u8(Num.shift_right_by(l, 8))</code> (with <code>to_u8</code> as the outer function call)</p>",
        "id": 508946345,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743272499
    },
    {
        "content": "<p><code>Str.count_utf8_bytes(payloadStr)</code> and <code>List.len(Str.to_utf8(payloadStr))</code> are the same thing. So you only need to grab one of them.</p>\n<p>I would probably do:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">addPayload</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">payload</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">payloadStr</span><span class=\"o\">|</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"no\">Str</span><span class=\"o\">.</span><span class=\"n\">is_empty</span><span class=\"p\">(</span><span class=\"n\">payloadStr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">        </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"no\">Str</span><span class=\"o\">.</span><span class=\"n\">to_utf8</span><span class=\"p\">(</span><span class=\"n\">payloadStr</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"no\">List</span><span class=\"o\">.</span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"n\">bytes</span>\n<span class=\"w\">        </span><span class=\"n\">payload</span>\n<span class=\"w\">            </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"no\">List</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"no\">Num</span><span class=\"o\">.</span><span class=\"n\">to_u8</span><span class=\"p\">(</span><span class=\"no\">Num</span><span class=\"o\">.</span><span class=\"n\">shift_right_by</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)))</span>\n<span class=\"w\">            </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"no\">List</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"no\">Num</span><span class=\"o\">.</span><span class=\"n\">to_u8</span><span class=\"p\">(</span><span class=\"no\">Num</span><span class=\"o\">.</span><span class=\"n\">bitwise_and</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xFF</span><span class=\"p\">)))</span>\n<span class=\"w\">            </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"no\">List</span><span class=\"o\">.</span><span class=\"n\">concat</span><span class=\"p\">(</span><span class=\"n\">bytes</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">else</span>\n<span class=\"w\">        </span><span class=\"n\">payload</span>\n</code></pre></div>",
        "id": 508946605,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743272697
    },
    {
        "content": "<p>I wouldn't advise using default value record fields <code>{ clientIdStr, userName ?? \"\", password ?? \"\" }</code>. They have known bugs and I believe are slotted for removal currently.</p>",
        "id": 508946763,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743272827
    },
    {
        "content": "<p>Instead you can use a result or tag union of some sort</p>",
        "id": 508946791,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743272854
    },
    {
        "content": "<p>Pretty minor, but all of these little lists <code>connectFlags = [connectFlagsValue]</code> allocate. I would avoid that and avoid <code>List.join</code> if possible. Instead, I would focus on using <code>List.append</code> and <code>List.concat</code></p>",
        "id": 508946968,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743272998
    },
    {
        "content": "<p>As a direct example, line 41 will lead to a new allocation and copying all the data, which is quite expensive. Would be better to either precalculate the length or to initially set to to zero. Then go back and <code>List.set</code> it to the value you want. Overall, this has a ton of extra copies and allocation. Not sure if you care, but important if you want to use best practices for perf.</p>",
        "id": 508947300,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743273285
    },
    {
        "content": "<p>Totally optional, but for all of the list reading after exact byte reading from tcp, I would probably transform the error. Either just crash cause it should be unreachable or give it a better error than the default <code>List.get</code> would give you. I would just make it a function like<code>exactListGet</code> or something. Also, hopefully the rust side has buffer, but loading and reading just 1 or 2 bytes at a time, likely will hurt perf a good bit. This is were roc could really use a better solution, like theoretically could return a tuple, but they you need a special method for each tuple size.</p>",
        "id": 508947637,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743273612
    },
    {
        "content": "<p>At like <code>130</code>, I would always try to avoid using <code>Bool.true</code>. Instead, just write the equality and avoid the when is.<code>ackFlags == 0x01</code></p>",
        "id": 508947689,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743273672
    },
    {
        "content": "<p>Overall looks quite reasonable for bit twiddling code in roc</p>",
        "id": 508947762,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743273732
    },
    {
        "content": "<p>Mostly makes me want to have inline bitwise operators in roc (I still am in the camp that we really should add these especially if we expect many libraries to be put in roc directly)</p>",
        "id": 508947801,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743273777
    },
    {
        "content": "<blockquote>\n<p>inline bitwise operators in roc</p>\n</blockquote>\n<p>This code could be a nice sample to compare the current version vs with bitwise operators.</p>",
        "id": 508948130,
        "sender_full_name": "Anton",
        "timestamp": 1743274069
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/231634-beginners/topic/Feedback.20to.20MQTT.20Client.20PoC/near/508946345\">said</a>:</p>\n<blockquote>\n<p>bug on line 11, I think you want:<br>\n<code>Num.to_u8(Num.shift_right_by(l, 8))</code> (with <code>to_u8</code> as the outer function call)</p>\n</blockquote>\n<p>Thanks for the reply. On line 11, there's a <code>Num.to_u8</code> in the second element of the list - wouldn't that force the first one to be of <code>u8</code> too?</p>",
        "id": 508949737,
        "sender_full_name": "Jonas Diemer",
        "timestamp": 1743275386
    },
    {
        "content": "<p>The original code <code>Num.shift_right_by(Num.to_u8(l), 8)</code> always returns zero. Cause converting <code>l</code> to u8 will return a value between <code>0</code> and <code>255</code>, truncating <code>l</code>.</p>",
        "id": 508949901,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743275511
    },
    {
        "content": "<p>or, it will actually always return 0 or 255 depending on the value of the first bit (might be undefined behaviour with optimizations)</p>",
        "id": 508950269,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743275815
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>» Num.shift_right_by(Num.to_u8(0xFF10), 8)\n\n0 : U8\n» Num.shift_right_by(Num.to_u8(0xFF80), 8)\n\n255 : U8\n» Num.shift_right_by(Num.to_u8(0x0080), 8)\n\n255 : U8\n</code></pre></div>\n<p>vs:</p>\n<div class=\"codehilite\"><pre><span></span><code>» Num.to_u8(Num.shift_right_by(0xFF10, 8))\n\n255 : U8\n» Num.to_u8(Num.shift_right_by(0xFF80, 8))\n\n255 : U8\n» Num.to_u8(Num.shift_right_by(0x0080, 8))\n\n0 : U8\n</code></pre></div>",
        "id": 508950509,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743276015
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/231634-beginners/topic/Feedback.20to.20MQTT.20Client.20PoC/near/508947300\">said</a>:</p>\n<blockquote>\n<p>As a direct example, line 41 will lead to a new allocation and copying all the data, which is quite expensive. Would be better to either precalculate the length or to initially set to to zero. Then go back and <code>List.set</code> it to the value you want. Overall, this has a ton of extra copies and allocation. Not sure if you care, but important if you want to use best practices for perf.</p>\n</blockquote>\n<p>So basically replace line 41 with something like this?</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>fixedHeader\n    |&gt; List.concat(protocolName)\n    |&gt; List.concat(protocolLevel)\n    |&gt; List.concat(connectFlags)\n    |&gt; List.concat(keepAliveBytes)\n    |&gt; List.concat(payload)\n</code></pre></div>\n<p>And of course removing the other <code>join()</code>s above. Would <code>concat()</code> of small lists like connectFlags still be overhead vs. using <code>append()</code> of the value?</p>",
        "id": 508950829,
        "sender_full_name": "Jonas Diemer",
        "timestamp": 1743276298
    },
    {
        "content": "<p>Join and concat of small lists are the same. They allocate all the intermediate lists. I would only use it for pre-existing strings/lists if possible and use append otherwise.</p>",
        "id": 508951004,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743276406
    },
    {
        "content": "<p>The issue is that every small list is an allocation and then a copy</p>",
        "id": 508951013,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743276420
    },
    {
        "content": "<p>Roc has no sort of small list optimization or stack allocated array</p>",
        "id": 508951041,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1743276433
    }
]