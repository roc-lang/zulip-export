[
    {
        "content": "<p>I'm building Roc on Windows (native windows, not wsl), and I'm running into this issue when building <code>roc-bindgen</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>   Compiling roc-bindgen v0.1.0 (C:\\Users\\abadi\\Code\\roc\\bindgen)\nerror: linking with `link.exe` failed: exit code: 1120\n\n...some very long text here..\n\n  = note: libroc_std-017ef31d29c35272.rlib(roc_std-017ef31d29c35272.3pajtss0nuz675y5.rcgu.o) : error LNK2019: unresolved external symbol roc_alloc referenced in function _ZN7roc_std8roc_list16RocList$LT$T$GT$17extend_from_slice17ha55bf35b00637735E\n          libroc_std-017ef31d29c35272.rlib(roc_std-017ef31d29c35272.3pajtss0nuz675y5.rcgu.o) : error LNK2019: unresolved external symbol roc_realloc referenced in function _ZN7roc_std8roc_list16RocList$LT$T$GT$17extend_from_slice17ha55bf35b00637735E\n          libroc_std-017ef31d29c35272.rlib(roc_std-017ef31d29c35272.3pajtss0nuz675y5.rcgu.o) : error LNK2019: unresolved external symbol roc_dealloc referenced in function _ZN83_$LT$roc_std..roc_list..RocList$LT$T$GT$$u20$as$u20$roc_std..rc..ReferenceCount$GT$9decrement17he3a4633907039d98E\n          C:\\Users\\abadi\\Code\\roc\\target\\debug\\deps\\roc_bindgen.exe : fatal error LNK1120: 3 unresolved externals\n\n\nerror: could not compile `roc-bindgen` due to previous error\n</code></pre></div>\n<p>Here's some information about my set up:</p>\n<ul>\n<li>Windows 11 Pro Insider Preview version 22H2 </li>\n<li>Visual Studio Community 2022 with Desktop development with C++</li>\n<li>LLVM 13.0.1 (compiled with Visul Studio 2022)</li>\n<li>Rust Toolchain: 1.60.0-x86_64-pc-windows-msvc</li>\n</ul>\n<p>Any help deciphering that error message will be appreciated!</p>",
        "id": 284301793,
        "sender_full_name": "Abadi Kurniawan",
        "timestamp": 1653852972
    },
    {
        "content": "<p>so unfortunately we don't have Roc building on native Windows at all yet <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 284301965,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1653853298
    },
    {
        "content": "<p>the main thing missing is linking; I don't personally have any experience with linking on Windows in general</p>",
        "id": 284301966,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1653853314
    },
    {
        "content": "<p>Yes, that's exactly why I want to build it on Windows <span aria-label=\"lol\" class=\"emoji emoji-1f606\" role=\"img\" title=\"lol\">:lol:</span>  I already worked around a couple of compilation errors with zig and compiling LLVM, but now I'm stuck on this error. Alas, I don't have any experience with linking on Windows either.</p>",
        "id": 284302296,
        "sender_full_name": "Abadi Kurniawan",
        "timestamp": 1653853819
    },
    {
        "content": "<p>The error message is saying that it can't find 3 functions: roc_alloc, roc_realloc, and roc_dealloc. These are memory management functions that are supposed to be provided to the app from the platform.<br>\nBut as Richard says, we don't have this working on Windows in general yet. If someone can get it working that would be an amazing contribution!</p>",
        "id": 284302302,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1653853840
    },
    {
        "content": "<p>In general to create a Roc program we are linking the \"host\" (the \"foreign language\" part of the platform) with the Roc app. The host and app are compiled to two object files, then we link them. Here, the app object file has some \"unresolved symbols\" that should get resolved when we link it to the host. But that is not happening because of some configuration issue.</p>",
        "id": 284302452,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1653854050
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> <a href=\"https://github.com/rtfeldman/roc/issues/2609#issuecomment-1055615817\">suggested to try linking with lld instead of with link.exe</a></p>",
        "id": 284339171,
        "sender_full_name": "Anton",
        "timestamp": 1653900187
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"501791\">@Abadi Kurniawan</span> feel free to make a PR for the zig and llvm fixes. I think we can set up a free windows github action runner(=CI) that checks <code>cargo build</code> so we can keep that working.</p>",
        "id": 284340236,
        "sender_full_name": "Anton",
        "timestamp": 1653900852
    },
    {
        "content": "<p>Is Windows still in an incomplete state?</p>",
        "id": 338935196,
        "sender_full_name": "Seth Workman",
        "timestamp": 1677698697
    },
    {
        "content": "<p>yes, though much more complete. Our examples actually work on windows now</p>",
        "id": 338935598,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1677698798
    },
    {
        "content": "<p>but certain features that make roc development easier don't work (e.g. <code>dbg</code> and <code>expect</code></p>",
        "id": 338935643,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1677698815
    },
    {
        "content": "<p>Side note: I've been wanting to set up windows nightly releases for a long time but I hit a memory access violation that is only triggered inside github actions. Like on the same laptop it works outside of github actions.</p>",
        "id": 339032521,
        "sender_full_name": "Anton",
        "timestamp": 1677746015
    },
    {
        "content": "<p>Hey guys I've never done functional programming but this language looks really interesting and I would like to learn this and be part of the contribution</p>",
        "id": 339033094,
        "sender_full_name": "Aslam Marikkar",
        "timestamp": 1677746237
    },
    {
        "content": "<p>I've been looking into this windows issue and discovered something interesting, I can run a produced exe (<code>platform-switching\\rocLovesRust.exe</code>) many times without error but using the roc binary to run something prebuilt fails regularly <code>roc.exe run .\\examples\\platform-switching\\rocLovesRust.roc --prebuilt-platform=true</code> which is strange...</p>",
        "id": 339570810,
        "sender_full_name": "Anton",
        "timestamp": 1677942164
    },
    {
        "content": "<p>My best guess is that surgical linking isn't fully clean and ends up building in top of the old exe (or something of that nature) leaving to slightly different results each time.</p>",
        "id": 339571454,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1677942418
    },
    {
        "content": "<p>Fascinating, so if I understand correctly, after <code>roc.exe run .\\examples\\platform-switching\\rocLovesRust.roc --prebuilt-platform=true</code> has failed, running just  <code>.\\examples\\platform-switching\\rocLovesRust.exe</code> should fail as well?</p>",
        "id": 339573721,
        "sender_full_name": "Anton",
        "timestamp": 1677943228
    },
    {
        "content": "<p>I've found that running just the exe works after a failure with <code>--prebuilt-platform=true</code></p>",
        "id": 339577813,
        "sender_full_name": "Anton",
        "timestamp": 1677945014
    },
    {
        "content": "<p>Oh, interesting.</p>",
        "id": 339581364,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1677946438
    },
    {
        "content": "<p>Then i guess it would have to be with roc linking in memory and then directly executing that code?</p>",
        "id": 339581492,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1677946473
    },
    {
        "content": "<p>Somehow the on disk version is fine, but running the in memory version has issues</p>",
        "id": 339581563,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1677946501
    },
    {
        "content": "<p>That sounds really strange to be flaky</p>",
        "id": 339581575,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1677946508
    },
    {
        "content": "<p>Nowadays I am getting regular crashes in the build command, I've painstakingly narrowed it down to <code>hasher.finalize()</code> in <code>hash_func_id_trivial</code> inside the morphic code. The hasher comes from a dependency sha2, it's not been known to crash on windows, but someone did encounter something similar on an embedded device; <a href=\"https://github.com/RustCrypto/hashes/issues/452\">issue</a>.</p>",
        "id": 342105592,
        "sender_full_name": "Anton",
        "timestamp": 1678897145
    },
    {
        "content": "<p>We use sha2 hashing? Why?</p>",
        "id": 342105927,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1678897216
    },
    {
        "content": "<p>I would assume we would want to switch that out for a faster algorithm anyway</p>",
        "id": 342106032,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1678897242
    },
    {
        "content": "<p>hmm yeah why use a cryptographic hash here?</p>",
        "id": 342106196,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1678897280
    },
    {
        "content": "<p>This is the line of code btw: <a href=\"https://github.com/roc-lang/roc/blob/2023770ce77756d01b63e67b13846f24fa95879c/crates/vendor/morphic_lib/src/analyze.rs#L1779\">link</a></p>",
        "id": 342106365,
        "sender_full_name": "Anton",
        "timestamp": 1678897322
    },
    {
        "content": "<blockquote>\n<p>I would assume we would want to switch that out for a faster algorithm anyway</p>\n</blockquote>\n<p>That would be great because I expect that swapping it for something else will fix it.</p>",
        "id": 342106758,
        "sender_full_name": "Anton",
        "timestamp": 1678897396
    },
    {
        "content": "<p>we could just use rust's <code>DefaultHasher</code> there right?</p>",
        "id": 342107171,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1678897490
    },
    {
        "content": "<p>probably, but it's SipHash - which is slow but resistent to hash flooding, which we don't care about <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 342107351,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1678897533
    },
    {
        "content": "<p>although it would be a quick way to verify whether that's the problem!</p>",
        "id": 342107418,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1678897548
    },
    {
        "content": "<p>Progress update:<br>\n<span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span>'s changes to the hashing algorithm fixed that issue on windows <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span><br>\nI'm now investigating the next crash point, <a href=\"https://github.com/roc-lang/roc/blob/6b3f3ba1a129b79a2c9322464d4dd2201fb3798c/crates/cli/src/lib.rs#L999\"><code>libc::execve(...</code></a>. I think tomorrow I'll start with a minimal rust program with the most basic libc::execve call and check if that works on windows CI</p>",
        "id": 343495905,
        "sender_full_name": "Anton",
        "timestamp": 1679425071
    },
    {
        "content": "<p>it did work on windows</p>",
        "id": 343497894,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1679425595
    },
    {
        "content": "<p>ah not on CI maybe, but it works on my machine at least</p>",
        "id": 343497980,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1679425622
    },
    {
        "content": "<p>Yeah, it works on my windows PC too</p>",
        "id": 343609433,
        "sender_full_name": "Anton",
        "timestamp": 1679475214
    },
    {
        "content": "<p>Why did we opt for execve instead of <code>std::process::Command</code> there <span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span>?</p>",
        "id": 343690433,
        "sender_full_name": "Anton",
        "timestamp": 1679494442
    },
    {
        "content": "<p>mainly so we don't have to spawn an extra process</p>",
        "id": 343702495,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1679497014
    },
    {
        "content": "<p>on linux an extra benefit is that we can use <code>fexecve</code>, which can use an in-memory program, saving a write to disk too</p>",
        "id": 343702586,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1679497035
    },
    {
        "content": "<p>I've looked into it and on windows <code>libc::execve</code> uses <a href=\"https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/execve-wexecve?view=msvc-170\">_execve</a> which appears to create a new process anyway: \"Each of these functions loads and executes a new process\".<br>\nSo for windows only, can I replace the <code>libc::execve</code> with a <code>std::process::Command</code> alternative?</p>",
        "id": 343709539,
        "sender_full_name": "Anton",
        "timestamp": 1679498469
    },
    {
        "content": "<p>that is what we had before and it caused other issues</p>",
        "id": 343723666,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1679501548
    },
    {
        "content": "<p>I don't remember what exactly</p>",
        "id": 343723689,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1679501554
    },
    {
        "content": "<p>but, you cannot get <code>execve</code> to work on the CI machine at all?</p>",
        "id": 343723796,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1679501580
    },
    {
        "content": "<p>It works sometimes but fails about 9 out of 10 times</p>",
        "id": 343724672,
        "sender_full_name": "Anton",
        "timestamp": 1679501784
    },
    {
        "content": "<p>It did work well with a execve hello world example I tried</p>",
        "id": 343724829,
        "sender_full_name": "Anton",
        "timestamp": 1679501817
    },
    {
        "content": "<p><a href=\"https://github.com/Anton-4/windows_execve_ci/blob/7eaeba595154624db4d29ca6a9d701ab2d292882/src/main.rs\">https://github.com/Anton-4/windows_execve_ci/blob/7eaeba595154624db4d29ca6a9d701ab2d292882/src/main.rs</a></p>",
        "id": 343724989,
        "sender_full_name": "Anton",
        "timestamp": 1679501849
    },
    {
        "content": "<p>Oh god, I found it <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>\n<div class=\"codehilite\"><pre><span></span><code>// don&#39;t waste time deallocating; the process ends anyway\n// ManuallyDrop will leak the bytes because we don&#39;t drop manually\nlet bytes = &amp;ManuallyDrop::new(std::fs::read(&amp;binary_path).unwrap());\n</code></pre></div>\n<p>Apparently windows CI doesn't like that</p>",
        "id": 343746592,
        "sender_full_name": "Anton",
        "timestamp": 1679507192
    },
    {
        "content": "<p>Removing the <code>&amp;ManuallyDrop</code> from my earlier post did not fix the problem, I was testing three times in a row and think I just \"got lucky\". Many days of debugging later I made some changes and was finally able to reproduce the problem locally. I now only have a segmentation fault when the roc app reads <a href=\"https://github.com/roc-lang/roc/blob/4f48873178a99b340848f041122e74a667ff3ed5/crates/cli_testing_examples/benchmarks/platform/host.zig#L247\">stdin through the benchmarks zig platform</a>. You also get a segfault on linux when running nqueens and pressing enter instead of an integer+enter. I think I might have been able to diagnose this issue much sooner if we used a rust platform at <code>crates/cli_testing_examples/benchmarks/platform/</code>, what do you all think about replacing that one?</p>",
        "id": 348276502,
        "sender_full_name": "Anton",
        "timestamp": 1681150257
    },
    {
        "content": "<p>fine by me! I think we should have at least 1 Zig example platform in <code>examples/</code> so people can see what it looks like, but for benchmarks I think we can use whatever's most convenient for us</p>",
        "id": 348276897,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1681150376
    },
    {
        "content": "<p>I'd rather not, rust is much slower which is really annoying when debugging with those examples</p>",
        "id": 348279833,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1681151420
    },
    {
        "content": "<p>why would rust have helped in this casse?</p>",
        "id": 348279906,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1681151456
    },
    {
        "content": "<p>Rust would not have segfaulted when the input provided through stdin is not what it expected.<br>\nBut given that \"rust is much slower which is really annoying when debugging with those examples\" I'll check if I can make the zig platform more robust when handling stdin.</p>",
        "id": 348375381,
        "sender_full_name": "Anton",
        "timestamp": 1681197632
    },
    {
        "content": "<p>I was wrong to blame zig here, looks like the segmentation fault was caused on the roc side, still figuring out the details...</p>",
        "id": 348735835,
        "sender_full_name": "Anton",
        "timestamp": 1681307315
    }
]