[
    {
        "content": "<p>Hi, I'm trying out Roc (looks very cool!) and I think I found a bug in roc-ls, but just wanted to post here before making an issue since I'm very unsure.</p>\n<p>I wrote a function like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>f = \\{field1, field2} -&gt; {}\n</code></pre></div>\n<p>And when I hovered over it, in my editor (neovim with builtin lsp), it looked like it returned the following type:</p>\n<div class=\"codehilite\"><pre><span></span><code>{ field1 : , field2 : * } -&gt; {}\n</code></pre></div>\n<p>...which doesn't look right <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> </p>\n<p>I did some digging and found that roc-ls is sending the following response to my textDocument/hover request:</p>\n<div class=\"codehilite\"><pre><span></span><code>{\n    contents: &quot;{ field1 : *, field2 : * }* -&gt; {}&quot;,\n    range: {\n        end: {\n            character: 1,\n            line: 9\n        },\n        start: {\n            character: 0,\n            line: 9\n        }\n    }\n}\n</code></pre></div>\n<p>This includes the correct type of my function, which made me think that roc-ls was fine and the problem was with neovim's lsp. But then I checked the lsp specification for <a href=\"https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_hover\">textDocument/hover</a>, and I see that the language server is supposed to return an object of the form:</p>\n<div class=\"codehilite\"><pre><span></span><code>/**\n * The result of a hover request.\n */\nexport interface Hover {\n    /**\n     * The hover&#39;s content\n     */\n    contents: MarkedString | MarkedString[] | MarkupContent;\n\n    /**\n     * An optional range is a range inside a text document\n     * that is used to visualize a hover, e.g. by changing the background color.\n     */\n    range?: Range;\n}\n/**\n * MarkedString can be used to render human readable text. It is either a\n * markdown string or a code-block that provides a language and a code snippet.\n * The language identifier is semantically equal to the optional language\n * identifier in fenced code blocks in GitHub issues.\n *\n * The pair of a language and a value is an equivalent to markdown:\n * ```${language}\n * ${value}\n * ```\n *\n * Note that markdown strings will be sanitized - that means html will be\n * escaped.\n *\n * @deprecated use MarkupContent instead.\n */\ntype MarkedString = string | { language: string; value: string };\n</code></pre></div>\n<p>So it looks like roc-ls is returning a MarkedString (which is deprecated), and is assuming that it will be treated as plain text, when in fact it is supposed to be markdown.</p>\n<p>Maybe we can return a <a href=\"https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#markupContent\">MarkupContent</a> instead, which supports plaintext as well as markdown?</p>",
        "id": 407596608,
        "sender_full_name": "Oli",
        "timestamp": 1702427729
    },
    {
        "content": "<p>Am I crazy? Shall I make an issue?</p>",
        "id": 407596720,
        "sender_full_name": "Oli",
        "timestamp": 1702427766
    },
    {
        "content": "<blockquote>\n<p>Shall I make an issue?</p>\n</blockquote>\n<p>Go for it :)</p>",
        "id": 407682824,
        "sender_full_name": "Anton",
        "timestamp": 1702460201
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/issues/6277\">Done</a> :)</p>",
        "id": 407785654,
        "sender_full_name": "Oli",
        "timestamp": 1702491521
    }
]