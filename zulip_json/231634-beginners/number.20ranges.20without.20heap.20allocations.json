[
    {
        "content": "<p>Can someone explain a way to make a generator for a long array of numbers that would just, well, make numbers? List.range is no good as it seems to allocate the actual list (even if I will only ever walk the thing)</p>",
        "id": 465252871,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1724697974
    },
    {
        "content": "<p>This may be helpful <a href=\"https://github.com/lukewilliamboswell/roc-random\">https://github.com/lukewilliamboswell/roc-random</a></p>",
        "id": 465253263,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724698117
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/231634-beginners/topic/Processing.20output.20in.20a.20CLI.20tool/near/465253263\">said</a>:</p>\n<blockquote>\n<p>This may be helpful <a href=\"https://github.com/lukewilliamboswell/roc-random\">https://github.com/lukewilliamboswell/roc-random</a></p>\n</blockquote>\n<p>which part of it? it still uses List.range to make the numbers, so it will OOM if I want to loop over 10 billion numbers</p>",
        "id": 465253717,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1724698300
    },
    {
        "content": "<p>If you want to loop over 10 billion numbers in a functional language, you'll want to write a recursive function that is <a href=\"https://stackoverflow.com/questions/310974/what-is-tail-call-optimization\">tail call optimized</a> into a \"while loop\" at runtime.</p>",
        "id": 465255299,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724698932
    },
    {
        "content": "<p>Well I do not want 10billion, I just want 1 billion, and I get a segfault with this...</p>\n<div class=\"codehilite\"><pre><span></span><code>app [main] { pf: platform &quot;https://github.com/roc-lang/basic-cli/releases/download/0.14.0/dC5ceT962N_4jmoyoffVdphJ_4GlW3YMhAPyGPr-nU0.tar.br&quot; }\n\nimport pf.Stdout\nimport pf.Task\n\nloop = \\i, max -&gt;\n    if i &lt; max then\n        i + loop (i + 1) max\n    else\n        i\n\nmain =\n    x = 1000 * 1000 * 1000\n    z = loop 0 x\n    # z = List.range {start: At 0, end: Before x} |&gt; List.walk 0 Num.add\n    Stdout.line! &quot;Hello, World! $(Num.toStr z)&quot;\n</code></pre></div>",
        "id": 465255542,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1724699055
    },
    {
        "content": "<p>and yes, I am fully aware that this not what roc was designed to do, but I think it is still relevant for the language that aims at high performance to not allocate arrays on the heap that will be insta-discarded after 1 use. even python is not that wasteful =)</p>",
        "id": 465255675,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1724699132
    },
    {
        "content": "<p>Of course, not segfaulting would be nice too =)I'll go file a bug.</p>",
        "id": 465255723,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1724699161
    },
    {
        "content": "<p>Well, that's not gonna be tail-call optimized, since the looping happens in the middle of the function</p>",
        "id": 465255763,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724699163
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/stream/231634-beginners/topic/Processing.20output.20in.20a.20CLI.20tool/near/465255763\">said</a>:</p>\n<blockquote>\n<p>Well, that's not gonna be tail-call optimized, since the looping happens in the middle of the function</p>\n</blockquote>\n<p>em? it is for all practical purposes... how else should I write it?</p>",
        "id": 465255842,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1724699205
    },
    {
        "content": "<p>It isn't a tail call cause addition has to happen after the next loop call returns.</p>\n<p>You need a state to accumulate into</p>",
        "id": 465256060,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724699313
    },
    {
        "content": "<p>errrr... hmhmh. ok. still it should not segfault on me, right?</p>",
        "id": 465256153,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1724699361
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">loop</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">sum</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">max</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">i</span><span class=\"w\"> </span><span class=\"nf\">&lt;</span><span class=\"w\"> </span><span class=\"nv\">max</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"w\">        </span><span class=\"nv\">loop</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">sum</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"nv\">i</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">i</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">max</span>\n<span class=\"w\">    </span><span class=\"kr\">else</span>\n<span class=\"w\">        </span><span class=\"nv\">sum</span>\n</code></pre></div>",
        "id": 465256219,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724699398
    },
    {
        "content": "<p>Yeah, probably not. It <em>might</em> be segfaulting because of an addition overflow? I'd have to <code>gdb</code> it</p>",
        "id": 465256414,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724699459
    },
    {
        "content": "<p>I would expect it to stack overflow</p>",
        "id": 465256452,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724699478
    },
    {
        "content": "<p>I presume you're running <code>roc &lt;your-file&gt;.roc</code>, which would run the dev backend</p>",
        "id": 465256458,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724699481
    },
    {
        "content": "<p>So something in our custom assembly builder isn't handling either a stack overflow or a number addition failure, probably the first</p>",
        "id": 465256603,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724699536
    },
    {
        "content": "<p>I am not getting the stack overflow, only SEGV.</p>",
        "id": 465256631,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1724699556
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>rustc  count.rs\nheadhunter@hunter-laptop /tmp&gt; ./count\n499999999500000000\nheadhunter@hunter-laptop /tmp&gt; cat count.rs\nfn main(){\n   let s:u64 = (0u64..1000*1000*1000).sum();\n    println!(&quot;{s}&quot;);\n}\n</code></pre></div>\n<p>there is no overflow in this program as far as rust can tell</p>",
        "id": 465256845,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1724699661
    },
    {
        "content": "<p>I'm assuming that roc defaults to u64 for num representation here (not sure that is true, and even if it does not the program would just run forever)</p>",
        "id": 465256926,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1724699703
    },
    {
        "content": "<p>I64</p>",
        "id": 465256950,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724699715
    },
    {
        "content": "<p>But yeah, definitely more than just the stack overflow issue being hit here</p>",
        "id": 465257003,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724699741
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>loop = \\sum, i, max -&gt;\n    if i &lt; max then\n        loop (sum + i) (i + 1) max\n    else\n        sum\n</code></pre></div>\n<p>this does not crash and gives correct answer</p>",
        "id": 465257123,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1724699806
    },
    {
        "content": "<p>so yes, missing TCO apparently leads to SEGV. which is kinda sad.</p>",
        "id": 465257166,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1724699833
    },
    {
        "content": "<p>but I would not even be here if I could have a generator for this sort of thing that I can then walk over</p>",
        "id": 465257220,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1724699866
    },
    {
        "content": "<p>feel like I'm inventing a range from python here, which feels wrong</p>",
        "id": 465257278,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1724699884
    },
    {
        "content": "<p>I mean rust has (min..max) notation that just gives you an iterator and you do not even need to think about it, would not be out of place in roc imo</p>",
        "id": 465257356,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1724699924
    },
    {
        "content": "<p>Yeah, iterators/streams have been talked about a few times on Zulip. There are concerns about splitting the ecosystem between lists and streams. But they are the right solution for certain problems.</p>",
        "id": 465257638,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724700046
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Processing.20output.20in.20a.20CLI.20tool/near/465257638\">said</a>:</p>\n<blockquote>\n<p>Yeah, iterators/streams have been talked about a few times on Zulip. There are concerns about splitting the ecosystem between lists and streams. But they are the right solution for certain problems.</p>\n</blockquote>\n<p>well its either that or better optimization passes that can detect when list is abused as iterator so it does not get backed by memory.</p>",
        "id": 465257784,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1724700122
    },
    {
        "content": "<p>either way it is a massive gotcha, as I would have never in my life expected List.range to allocate</p>",
        "id": 465257840,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1724700158
    },
    {
        "content": "<p>Interesting. It returns a <code>List</code> though</p>",
        "id": 465257876,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724700177
    },
    {
        "content": "<p>Today, has gotchas but forces users to be explicit about allocations. Technically iterators can be built up in userland if required. But yeah, it isn't a great state for usability.</p>",
        "id": 465258043,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724700268
    },
    {
        "content": "<p>Feels like roc needs an Iterator <del>trait</del> ability</p>",
        "id": 465258198,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1724700350
    },
    {
        "content": "<p>this way you can have functions taking in things that have Iterator ability rather than specifically Lists</p>",
        "id": 465258292,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1724700387
    },
    {
        "content": "<p>That would sadly require higher kinded abilites. Which roc does not have.</p>",
        "id": 465258530,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724700494
    },
    {
        "content": "<p>At least that is my understanding of the issue</p>",
        "id": 465258555,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724700511
    },
    {
        "content": "<p>But haven't looked into it in a while</p>",
        "id": 465258575,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724700523
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Processing.20output.20in.20a.20CLI.20tool/near/465258530\">said</a>:</p>\n<blockquote>\n<p>That would sadly require higher kinded abilites. Which roc does not have.</p>\n</blockquote>\n<p>what are those?</p>",
        "id": 465260262,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1724701251
    },
    {
        "content": "<p>An ability with a type variable. In the case of an iterator, it is needed to capture the element type.</p>\n<p>In roc, you could make an I64Iterator ability, but not a generic Iterator ability</p>",
        "id": 465264060,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724702941
    },
    {
        "content": "<p>Well in this case maybe some methods on numeric types would be nice to make ranges?</p>",
        "id": 465343021,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1724740726
    },
    {
        "content": "<p>as a stopgap measure at least</p>",
        "id": 465343083,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1724740735
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Processing.20output.20in.20a.20CLI.20tool/near/465258530\">said</a>:</p>\n<blockquote>\n<p>That would sadly require higher kinded abilites. Which roc does not have.</p>\n</blockquote>\n<p>It would? You can have type variables in the functions belonging to an ability, and there are iterator interfaces in languages like C#/F# and Java where there are no higher kinded types</p>",
        "id": 465413205,
        "sender_full_name": "batyoullfly",
        "timestamp": 1724757230
    },
    {
        "content": "<p><code>Iterator implements next : {} -&gt; Result a [NoMoreElements]</code> something like this?</p>",
        "id": 465415511,
        "sender_full_name": "batyoullfly",
        "timestamp": 1724757884
    },
    {
        "content": "<p>Or I guess there’s a rule about the type variables needing to implement the ability</p>",
        "id": 465415876,
        "sender_full_name": "batyoullfly",
        "timestamp": 1724757977
    },
    {
        "content": "<p>Why is that a restriction exactly?</p>",
        "id": 465418326,
        "sender_full_name": "batyoullfly",
        "timestamp": 1724758487
    },
    {
        "content": "<p>Oh, well I guess these aren’t methods with implicit access to an iterator object so you would need to have the iterator as an argument even if that wasn’t being enforced. Hmm. <br>\nCouldn’t you still do something like<br>\n<code>Iterator implements next : iter, a -&gt; { state: iter, elem: Result a [NoMoreElements] } where iter implements Iterator</code><br>\nand just leave it up to the implementation to ensure that <code>a</code> is in fact the element type of the type implementing the ability?</p>",
        "id": 465420428,
        "sender_full_name": "batyoullfly",
        "timestamp": 1724759099
    },
    {
        "content": "<p>I guess then the issue is you couldn’t actually use it very effectively. Is there any reason abilities shouldn’t be able to take type parameters themselves as long as they are concrete types?</p>",
        "id": 465426570,
        "sender_full_name": "batyoullfly",
        "timestamp": 1724760425
    },
    {
        "content": "<p>This is the general faq on that: <a href=\"https://www.roc-lang.org/faq#arbitrary-rank-types\">https://www.roc-lang.org/faq#arbitrary-rank-types</a></p>",
        "id": 465506645,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724777752
    },
    {
        "content": "<p>47 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"231634\" href=\"/#narrow/stream/231634-beginners/topic/Processing.20output.20in.20a.20CLI.20tool\">#beginners &gt; Processing output in a CLI tool</a> by <span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span>.</p>",
        "id": 465530796,
        "sender_full_name": "Notification Bot",
        "timestamp": 1724784091
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"674610\">Alexander Pyattaev</span> <a href=\"#narrow/stream/231634-beginners/topic/number.20ranges.20without.20heap.20allocations/near/465252871\">said</a>:</p>\n<blockquote>\n<p>Can someone explain a way to make a generator for a long array of numbers that would just, well, make numbers? List.range is no good as it seems to allocate the actual list (even if I will only ever walk the thing)</p>\n</blockquote>\n<p>what if we added this to <code>Num</code>? (the <code>...etc</code> part is the rest of the configuration record that <code>List.range</code> uses)</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kt\">Num</span><span class=\"o\">.</span><span class=\"n\">walkRange</span><span class=\"w\"> </span><span class=\"kt\">:</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">At</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Int</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"kt\">Before</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Int</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"kt\">After</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Int</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">)],</span><span class=\"w\"> </span><span class=\"o\">...</span><span class=\"n\">etc</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"n\">state</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">state</span>\n</code></pre></div>",
        "id": 465531500,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724784297
    },
    {
        "content": "<p>I think this would be a great allocation-free way to achieve the result, but points to an underlying issue that streams would solve in many ways. We have</p>\n<ul>\n<li>List.walk</li>\n<li>List.walkWithIndex</li>\n<li>List.walkWithIndexUntil</li>\n<li>List.walkUntil</li>\n<li>List.walkBackwards</li>\n<li>and so on...</li>\n</ul>\n<p>Because we want to have iterators, but don't want to support higher-kinded types. So having some mechanism to achieve that result would lower the cardinality of our APIs while also avoiding allocations.</p>",
        "id": 465532329,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724784592
    },
    {
        "content": "<p>I will try to look around this weekend at potential solutions that won't require our language to open the floodgates for type abuse</p>",
        "id": 465532563,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724784655
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/number.20ranges.20without.20heap.20allocations/near/465506645\">said</a>:</p>\n<blockquote>\n<p>This is the general faq on that: <a href=\"https://www.roc-lang.org/faq#arbitrary-rank-types\">https://www.roc-lang.org/faq#arbitrary-rank-types</a></p>\n</blockquote>\n<p>Would allowing abilities to have type parameters be a form of higher ranked types?</p>",
        "id": 465551833,
        "sender_full_name": "batyoullfly",
        "timestamp": 1724789138
    },
    {
        "content": "<p>Would it be rank 2? Because instead of a function in an implementation being able to satisfy a signature of <code>a -&gt; a</code> by accepting a specific type and returning that specific type, it would have to be able to accept any arbitrary type?</p>",
        "id": 465556429,
        "sender_full_name": "batyoullfly",
        "timestamp": 1724790229
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461444\">Sam Mohr</span> <a href=\"#narrow/stream/231634-beginners/topic/number.20ranges.20without.20heap.20allocations/near/465532563\">said</a>:</p>\n<blockquote>\n<p>I will try to look around this weekend at potential solutions that won't require our language to open the floodgates for type abuse</p>\n</blockquote>\n<p>I believe, to this end, the plan is for the compiler to eventually support deforestation/stream fusion, which would automatically combine successive list operations to avoid intermediate allocations. This way <code>List.walkBackwards</code> could be replaced by <code>List.reverse |&gt; List.walk</code> with no loss in performance. In the meantime though, having this expanded family of list operations acts as a stop-gap to achieve the desired performance characteristics anyway.</p>",
        "id": 465556454,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1724790238
    },
    {
        "content": "<p>Yes, that was a mechanism proposed by Rich. It would probably be better for users to not need to know the difference between List and Iterators for perf reasons, but there are some spots where we avoid giving \"easy ways out\", e.g. roc-unicode being a separate package instead of a standard library add with simple <code>Str.len</code> tools.</p>",
        "id": 465561091,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724791431
    },
    {
        "content": "<p>So yes, I'm okay with the expanded family for now, but it seems like if we could find a way to do iterators, that would be better than what we have. Meaning the issue isn't that iterators are the wrong solution, but that we don't know how to implement them in Roc's current type system.</p>",
        "id": 465561653,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724791519
    },
    {
        "content": "<p>for what it's worth, I spent a lot of time looking into various iterator designs and my conclusion was that \"there are more functions exposed\" was a better design than any of the ones I came up with</p>",
        "id": 465566532,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724792562
    },
    {
        "content": "<p>maybe another way to say it is that I prefer the downside of \"this API could be a few functions smaller\" to the downside of \"there is a new entire chapter's worth of complexity in the tutorial on iterators\"</p>",
        "id": 465566940,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724792752
    },
    {
        "content": "<p>that's not to say we should never do it, just that it's in the \"explored various designs and none seemed like they were worth the complexity cost\" state rather than the \"hasn't really been investigated seriously\" state <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 465567432,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724792951
    },
    {
        "content": "<p>Yeah, that tracks. If there was an easy way to do it, it would've been in the language a few years ago.</p>",
        "id": 465568840,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724793554
    },
    {
        "content": "<p>Which is why I think maybe some macro to combine the various walk* functions in the compiler would be the way to go. Duplication in the compiler isn't bad if the stdlib API is nicer to use.</p>",
        "id": 465569082,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724793650
    },
    {
        "content": "<p>Other than the number of functions for dealing with Lists, lack of any way to implement iterators still means there’s no generic way of writing a function that works with an unknown type of collection, right?</p>",
        "id": 465572631,
        "sender_full_name": "batyoullfly",
        "timestamp": 1724794752
    },
    {
        "content": "<p>Actually that is doable and done for decode and encode</p>",
        "id": 465573160,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724794869
    },
    {
        "content": "<p>Or maybe it is done for the future version of encode and decode that aren't implemented yet</p>",
        "id": 465573250,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724794894
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">SequenceWalker</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"nv\">seq</span><span class=\"w\"> </span><span class=\"nv\">elem</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">seq</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">elem</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">state</span>\n<span class=\"kt\">LengthInfo</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Length</span><span class=\"w\"> </span><span class=\"kt\">U64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">UnknownLength</span><span class=\"p\">]</span>\n\n<span class=\"err\">#</span><span class=\"w\"> </span><span class=\"kt\">In</span><span class=\"w\"> </span><span class=\"nv\">the</span><span class=\"w\"> </span><span class=\"nv\">encode</span><span class=\"w\"> </span><span class=\"nv\">ability</span><span class=\"w\"> </span><span class=\"nv\">for</span><span class=\"w\"> </span><span class=\"nv\">sequences</span><span class=\"nf\">:</span>\n<span class=\"w\">    </span><span class=\"nv\">sequence</span><span class=\"w\"> </span><span class=\"nf\">:</span>\n<span class=\"w\">        </span><span class=\"nv\">seq</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"kt\">LengthInfo</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"kt\">SequenceWalker</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"nv\">seq</span><span class=\"w\"> </span><span class=\"nv\">elem</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"nv\">elem</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">FutureEncoder</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">FutureEncoder</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"kr\">where</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"nv\">implements</span><span class=\"w\"> </span><span class=\"kt\">FutureEncoderFormatting</span>\n</code></pre></div>",
        "id": 465574480,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724795167
    },
    {
        "content": "<p>You then can pass <code>List.walk</code> or <code>Set.walk</code> into that and it would work. Theoretically could also pass a lazy <code>Iterator.walk</code>.</p>",
        "id": 465574618,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724795201
    },
    {
        "content": "<p>That said, it is technically missing information. It doesn't know the type of the element in the container. It just knows you have an impl of <code>Container.walk</code> that generates an element type. Technically that walk function could be mapping the element type to something different</p>",
        "id": 465574883,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724795269
    },
    {
        "content": "<p>So I guess similar to what I asked about earlier with having an iterator ability, you could do operations on the collection but you couldn’t, for example,  implement a sum function that works for all collections of Nums</p>",
        "id": 465575489,
        "sender_full_name": "batyoullfly",
        "timestamp": 1724795399
    },
    {
        "content": "<p>that's correct</p>",
        "id": 465575658,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724795460
    },
    {
        "content": "<p>that was actually the original motivation for my looking into it</p>",
        "id": 465575673,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724795471
    },
    {
        "content": "<p>it seemed like something that the language \"should be able to do\" in the abstract, but when I got down to it I honestly had more and more trouble convincing myself it was actually important in practice as opposed to something that sounds important in the abstract <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 465575743,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724795510
    },
    {
        "content": "<p>Yeah, and you have to be careful about some weird cases. Like if you require <code>elem</code> as an input to specify the input type, that may lead to impossible cases the user doesn't have a way to generate an element type</p>",
        "id": 465575761,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724795516
    },
    {
        "content": "<p>I was kind of thinking the same. Like in my mind it seems frustrating and strange that you wouldn’t be able to operate on generic collections of some specific type, but also I have never needed to do that really so it wouldn’t change anything for me in practice using the language</p>",
        "id": 465575893,
        "sender_full_name": "batyoullfly",
        "timestamp": 1724795570
    },
    {
        "content": "<p>Aside, isn't sequence walker almost the entire definitely or an iterator? Besides making apis inconvenient cause you have to pass in a input type and a walk function, I think it would work for most things iterators</p>",
        "id": 465575917,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724795582
    },
    {
        "content": "<p>You could make a version that uses <code>Num a</code> as the element type and implement sum</p>",
        "id": 465575993,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724795633
    },
    {
        "content": "<p>Oh? That’s cool, I think I don’t quite understand the usage of the example you gave then. I guess in situations where you’re writing library code and really anticipate people wanting to swap in their own data structure rather than using lists, you could always provide an alternate API for doing so, even if it’s a little awkward, because most of the time you’ll just use a list anyway</p>",
        "id": 465576348,
        "sender_full_name": "batyoullfly",
        "timestamp": 1724795780
    },
    {
        "content": "<p>Yeah, if you expect that you need to support multiple container types and you only need to walk the container. You could force the user to pass on the walk function and it would be functional. And they could even define a \"container\" that is really an iterator and doesn't have backing storage.</p>",
        "id": 465576509,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724795872
    },
    {
        "content": "<p>So I guess iterables can actually work today in roc. A bit of a strange setup, but should be functional. Also, the typing is a bit jank. It does work though..</p>\n<p>Also, I'm sure something nicer could be made from this. Just the first thing I tested really:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Functional iterator</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">app</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">pf</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">platform</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/roc-lang/basic-cli/releases/download/0.14.0/dC5ceT962N_4jmoyoffVdphJ_4GlW3YMhAPyGPr-nU0.tar.br\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">pf.Stdout</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">pf.Task</span><span class=\"w\"> </span><span class=\"nv\">exposing</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Task</span><span class=\"p\">]</span>\n\n<span class=\"kt\">Walker</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"nv\">elem</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">elem</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">state</span>\n\n<span class=\"kt\">Iterable</span><span class=\"w\"> </span><span class=\"nv\">implements</span>\n<span class=\"w\">    </span><span class=\"nv\">createWalkFn</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">iter</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Walker</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"nv\">elem</span><span class=\"w\"> </span><span class=\"kr\">where</span><span class=\"w\"> </span><span class=\"nv\">iter</span><span class=\"w\"> </span><span class=\"nv\">implements</span><span class=\"w\"> </span><span class=\"kt\">Iterable</span>\n\n<span class=\"kt\">IterList</span><span class=\"w\"> </span><span class=\"nv\">elem</span><span class=\"w\"> </span><span class=\"nf\">:=</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"nv\">elem</span><span class=\"w\"> </span><span class=\"nv\">implements</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">        </span><span class=\"kt\">Iterable</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nv\">createWalkFn</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">createIterListWalkFn</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">]</span>\n\n<span class=\"nv\">createIterListWalkFn</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"err\">@</span><span class=\"kt\">IterList</span><span class=\"w\"> </span><span class=\"nv\">list</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nf\">\\</span><span class=\"nv\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">step</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">walk</span><span class=\"w\"> </span><span class=\"nv\">list</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"nv\">step</span>\n\n<span class=\"kt\">Range</span><span class=\"w\"> </span><span class=\"nf\">:=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">start</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">I64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">stop</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">I64</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nv\">implements</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">        </span><span class=\"kt\">Iterable</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nv\">createWalkFn</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">createRangeWalkFn</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">]</span>\n\n<span class=\"nv\">createRangeWalkFn</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"err\">@</span><span class=\"kt\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">start</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">stop</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">helper</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">step</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">i</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">i</span><span class=\"w\"> </span><span class=\"nf\">&lt;</span><span class=\"w\"> </span><span class=\"nv\">stop</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"w\">            </span><span class=\"nv\">helper</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">step</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"nv\">i</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">step</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">i</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"kr\">else</span>\n<span class=\"w\">            </span><span class=\"nv\">state</span>\n\n<span class=\"w\">    </span><span class=\"nf\">\\</span><span class=\"nv\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">step</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"nv\">helper</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"nv\">step</span><span class=\"w\"> </span><span class=\"nv\">start</span>\n\n<span class=\"kr\">main </span><span class=\"nf\">=</span>\n\n<span class=\"w\">    </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"kt\">IterList</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"nv\">walkA</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">createWalkFn</span><span class=\"w\"> </span><span class=\"nv\">a</span>\n\n<span class=\"w\">    </span><span class=\"nv\">printA</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">        </span><span class=\"nv\">walkA</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">ok</span><span class=\"w\"> </span><span class=\"p\">{})</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">prev</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">elem</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"nv\">prev</span><span class=\"err\">!</span>\n\n<span class=\"w\">            </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toStr</span><span class=\"w\"> </span><span class=\"nv\">elem</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span>\n\n<span class=\"w\">    </span><span class=\"nv\">printA</span><span class=\"err\">!</span>\n\n<span class=\"w\">    </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"err\">@</span><span class=\"kt\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">start</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">stop</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"mi\">22</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"nv\">walkB</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">createWalkFn</span><span class=\"w\"> </span><span class=\"nv\">b</span>\n\n<span class=\"w\">    </span><span class=\"nv\">printB</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">        </span><span class=\"nv\">walkB</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">ok</span><span class=\"w\"> </span><span class=\"p\">{})</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">prev</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">elem</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"nv\">prev</span><span class=\"err\">!</span>\n\n<span class=\"w\">            </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toStr</span><span class=\"w\"> </span><span class=\"nv\">elem</span>\n<span class=\"w\">            </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span>\n\n<span class=\"w\">    </span><span class=\"nv\">printB</span><span class=\"err\">!</span>\n</code></pre></div>\n</div></div>",
        "id": 465607401,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724812108
    },
    {
        "content": "<p>Since abilities get monomorphize, roc will generate the concrete <code>Walker</code> type that is created by a walk function. Thus, later uses will type check/error correctly based on the concrete final types.</p>",
        "id": 465607491,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724812183
    },
    {
        "content": "<p>I guess that would suggest that something like this should just work:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">Iterator</span><span class=\"w\"> </span><span class=\"nv\">implements</span>\n<span class=\"w\">    </span><span class=\"nv\">next</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">iter</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">iter</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"nv\">elm</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">NoMoreElements</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"kr\">where</span><span class=\"w\"> </span><span class=\"nv\">iter</span><span class=\"w\"> </span><span class=\"nv\">implements</span><span class=\"w\"> </span><span class=\"kt\">Iterator</span>\n</code></pre></div>",
        "id": 465607923,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724812390
    },
    {
        "content": "<p>Of course you really need an extra layer of indirection. Cause an iterator is not just a container. It is general a container plus some extra state. But I guess it could be paired with:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">Iterable</span><span class=\"w\"> </span><span class=\"nv\">implements</span>\n<span class=\"w\">    </span><span class=\"nv\">toIter</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">iterable</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">iterator</span><span class=\"w\"> </span><span class=\"kr\">where</span><span class=\"w\"> </span><span class=\"nv\">iterable</span><span class=\"w\"> </span><span class=\"nv\">implements</span><span class=\"w\"> </span><span class=\"kt\">Iterable</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">iterator</span><span class=\"w\"> </span><span class=\"nv\">implements</span><span class=\"w\"> </span><span class=\"kt\">Iterator</span>\n</code></pre></div>\n<p>This definitely is throwing out some type information. Like we have no idea what the element type is from the signature, but I think it would still compile and work in roc.</p>",
        "id": 465608124,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724812523
    },
    {
        "content": "<p>Kinda feels like magic that shouldn't work.</p>",
        "id": 465608138,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724812537
    },
    {
        "content": "<p>I did something earlier at work, I'm gonna benchmark stuff when I get home</p>",
        "id": 465608158,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1724812560
    }
]