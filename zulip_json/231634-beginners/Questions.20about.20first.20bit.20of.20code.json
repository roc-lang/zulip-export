[
    {
        "content": "<p>Hi all. I just wrote my first bit of Roc code, and I'd appreciate any feedback, if people don't mind. I'm trying to set up a heterogeneous list where different types of elements (each with their own content tag) can be stored. This means that ultimately, the list of elements might have a type signature consisting of a a very large tag union. I don't know whether this is considered bad form or a nice way to get self-documenting code. I tried to make a very abstract \"Element\" type alias consisting of a record with two open tag unions, but it looks like you can't put open tag unions in a type alias?</p>\n<p>My other question involves the last line of my code, which I thought would result in something that was either Err ... or Ok (Image ...), but it didn't end up as specific as I expected. So I'm curious how I could improve it.</p>\n<p>Beyond that, does this code generally make sense? Obviously, it's just a start on an overall program. Thanks.</p>\n<div class=\"codehilite\"><pre><span></span><code># Element: {world: []*, content: []*} &lt;---- This does not work.\n# elements: List Element\n# Heterogeneous list of elements. In practice, there would be many types of elements\n# that could appear here.\nelements = []\n    |&gt; List.append {world: None, content: Empty}\n    |&gt; List.append {world: Some, content: Integer 3}\n    |&gt; List.append {world: None, content: Image (120,120)}\n\n# Check whether an element has an Image as its content\nisImage = \\element -&gt; when element is\n    {content: Image _} -&gt; Bool.true\n    _ -&gt; Bool.false\n\n# Attempt to downcast an element to one that has an Image as its content\nasImage = \\element -&gt; when element is\n    {content: Image _} as ele -&gt; Ok ele\n    _ -&gt; Err FailedToCast\n\n# Takes a list of elements and a function that attempts to downcast an element\n# to a particular type. Returns the first element that has been successfully downcast.\nfindFirstSuccess = \\elementList, asSomething -&gt; when elementList is\n    [element, .. as tail] -&gt; when asSomething element is\n        Ok a -&gt; Ok a\n        Err _ -&gt; findFirstSuccess tail asSomething\n    [] -&gt; Err NotFound\n\n# Find the first element that is an image\nfirstImage = List.findFirst elements isImage\n\n# Find the first element that has been successfully downcast to one containing an image.\n# This should be more specific than firstImage, but currently it is not.\nbetterFirstImage = findFirstSuccess elements asImage\n</code></pre></div>",
        "id": 484988674,
        "sender_full_name": "misterdrgn",
        "timestamp": 1732829474
    },
    {
        "content": "<p>The first line would need to be this to work:<br>\n<code>Element a b : { world: []a, content: []b }</code></p>",
        "id": 484993586,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732833114
    },
    {
        "content": "<p>Representing a list of tags might be completely reasonable. Generally speaking, it is less performance than some other solutions, but it can often be the most convenient solution.</p>",
        "id": 484993723,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732833227
    },
    {
        "content": "<p>For the last part, this is a semi-common confusion. Roc does not have any sort of gradual typing.</p>\n<p>A <code>[ Empty, Integer I64, Image (I64, I64) ]</code> will always be a <code>[ Empty, Integer I64, Image (I64, I64) ]</code></p>\n<p>You have to explicitly create a new type to separate it from that union. Generally, I do this by fully unwrapping the type. So just return the inner <code>(I64, I64)</code> instead of the full tag. That said, you could rewrap it and return a <code>[ Image (I64, I64) ]</code> if you want.</p>\n<div class=\"codehilite\"><pre><span></span><code>    {content: Image i} -&gt; Ok {content: Image i}\n</code></pre></div>\n<p>That code completely separated the two image tags. On the left is a <code>[ Empty, Integer I64, Image (I64, I64) ]</code>. On the right is a newly constructed <code>[ Image (I64, I64) ]</code></p>",
        "id": 484994603,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732833972
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> I appreciate the feedback. Regarding the first part, I tried doing the following:</p>\n<div class=\"codehilite\"><pre><span></span><code>Element a b: {world: []a, content: []b}\nelements: List (Element * *)\nelements = []\n    |&gt; List.append {world: None, content: Empty}\n    |&gt; List.append {world: Some, content: Integer 3}\n    |&gt; List.append {world: None, content: Image (120,120)}\n</code></pre></div>\n<p>But this is giving me an error that seems to suggest I'm creating a closed tag union with my type signature. I thought <code>{:world []*, :content []*}</code> would mean open tag unions, so I must be missing something. In any case, if having a large tag union is reasonable, then perhaps I'm better off not providing a type signature for elements anyway, since that means I can see the auto-generated signature that shows all the possible types that tag could be, based on all the code that's being called. (To be clear, I'm trying to avoid needing to specify all the possible tags ahead of time and in one place, so that it's easy to add new tags in new files in the future). </p>\n<p>Thanks.</p>",
        "id": 485008249,
        "sender_full_name": "misterdrgn",
        "timestamp": 1732845849
    },
    {
        "content": "<p>Can you just use <code>_</code> and let the compiler infer it?</p>",
        "id": 485008496,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732846048
    },
    {
        "content": "<p><code>elements: List (Element _ _)</code></p>",
        "id": 485008515,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732846064
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span> That does work, thank you, though I don't understand the difference between using a wildcard, which could mean anything, and using a *, which I thought could also mean anything in a type signature.</p>\n<p>I guess it's something like...the wildcard is telling the compiler to fill in the details, whereas the * is telling the compiler something, but I don't fully understand what, or why <code>[]*</code> wouldn't be consistent with any possible tag.</p>",
        "id": 485009094,
        "sender_full_name": "misterdrgn",
        "timestamp": 1732846551
    },
    {
        "content": "<p>It would be really great if someone with decent type theory knowledge could write up a guide around the use of wildcard and types in general. This is a  bit of a FAQ and it's sometimes confusing.</p>",
        "id": 485009450,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732846820
    },
    {
        "content": "<p>My laymans understanding is that <code>*</code> in this position is saying match with \"anything\" which effectively means nothing because there are no types that will unify with all tags unions except the empty one <code>[]</code> .</p>",
        "id": 485009539,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732846909
    },
    {
        "content": "<p><a href=\"#narrow/channel/231634-beginners/topic/templates.3F/near/407225577\">https://roc.zulipchat.com/#narrow/channel/231634-beginners/topic/templates.3F/near/407225577</a></p>\n<blockquote>\n<p>When you return something with a wildcard type, it may not be immediately clear what that means. Say we have wildcardList : List *, what could we fill in for wildcardList = ...? The only value that can represent a list of any type is the empty list. So the only option is wildcardList = [].</p>\n</blockquote>\n<blockquote>\n<p>With Task it's very similar. If we have the type Task Str *, we have Str for the success value and * for the error value. Similar to List *, the only error type that could satisfy * is the empty error.</p>\n</blockquote>",
        "id": 485009765,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732847101
    },
    {
        "content": "<p>Tutorial link <a href=\"https://www.roc-lang.org/tutorial#wildcard-type\">https://www.roc-lang.org/tutorial#wildcard-type</a></p>",
        "id": 485009879,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732847168
    },
    {
        "content": "<p>I'm just digging up references at this point... trying to clarify for myself</p>",
        "id": 485009887,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732847175
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/231634-beginners/topic/Why.20do.20wildcard.20types.20exist.20.3F/near/401009545\">said</a>:</p>\n<blockquote>\n<p>It could be replaced, but seeing <code>List a</code> is meant to have a meaning. <code>a</code> is a type variable that is expected to be matched with other locations. By writing <code>a</code> it is kinda like specifying that you care about the type.</p>\n<p><code>(List a, a)</code> means that I care about the element type of the list. It must match the other value in the tuple.</p>\n<p>Seeing <code>(List a, b, List c, d)</code> is just noise. None of those type variable have any meaning. As a reader of the type signiture, I expect to see the type variables used elsewhere, but they aren't.</p>\n<p>Seeing a <code>*</code> is a clear signal that the type can not matter. There is no way it can be depended on or matched at all.</p>\n</blockquote>",
        "id": 485009985,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732847278
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/channel/304641-ideas/topic/should.20we.20have.20the.20*.20type.20variable.3F/near/350622625\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/304641-ideas/topic/reddit.20type.20variable.20syntax/near/350602384\">said</a>:</p>\n<blockquote>\n<p>Would it be possible to remove the <code>*</code> altogether from the language and just use lowercase letters?</p>\n</blockquote>\n<p>so this is how Elm does it, and I specifically wanted to add it because I don't like how lowercase letters are overloaded</p>\n</blockquote>\n<p>Richard provides a good explanation in this ^^^ thread</p>",
        "id": 485010075,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732847331
    },
    {
        "content": "<p>I think it's was suggested that we get rid of * at some point, and I think that's still the right move. I think <code> List.len : List a -&gt; U64</code> is basically as clear as <code>List.len : List * -&gt; U64</code>. We lose the communication of \"this type should be ignored\", but it leads to so much confusion...</p>",
        "id": 485010095,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1732847348
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/channel/304641-ideas/topic/should.20we.20have.20the.20*.20type.20variable.3F/near/350630153\">said</a>:</p>\n<blockquote>\n<p>Thank you for explaning this. I really appreciate it. I'm happy with the status-quo, however, my goal here is to provide an alternative argument which may improve Roc by simplifying it a little.</p>\n<p>From my experience I think the <code>a</code> in <code>Html a</code> is easier to understand. Once I learnt that lowercase letters were type variables it felt natural and is used just like other variables.</p>\n<p>I find the <code>*</code> confusing as it is a special case and sometimes used, sometimes not, it hasn't been clear when to use it verse <code>a</code>, <code>b</code>, <code>c</code> etc. Your explanation here has helped me see the intent behind it, as it is an unbound type variable and can mean anything and two <code>*</code>s are not equal/must be different.</p>\n<p>However, isn't is possible to use different letters to show this same thing more explicitely? I.e. that these types must be different? Do we need to have an unbound type variable?</p>\n<p>For example;</p>\n<ul>\n<li><code>f : List *, List * -&gt; Nat</code> could be <code>f : List a, List b -&gt; Nat</code> </li>\n<li><code>x : List (*, *)</code> could be <code>x : List (a, b)</code></li>\n</ul>\n<blockquote>\n<p>basically there's an important distinction between bound and unbound type variables, and I like having a syntactic distinction between them as well</p>\n</blockquote>\n<p>This leads me to think that maybe I don't fully understand it though...</p>\n</blockquote>\n<p>I still feel this way, even having stared at roc code at lot since then. The <code>*</code> still feels a little magic.</p>",
        "id": 485010426,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732847619
    },
    {
        "content": "<p>Anyway... sorry for taking this thread of course <span class=\"user-mention\" data-user-id=\"783718\">@misterdrgn</span></p>",
        "id": 485010501,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732847654
    },
    {
        "content": "<p>Personally I think we should only allow <code>*</code> on function inputs. Ban it in all other cases. Then it can only be used in the clear case.</p>\n<p>It would mean: Pass me anything. I know nothing about the thing, but will manage anyway.</p>",
        "id": 485011043,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732848073
    },
    {
        "content": "<p><code>*</code> on something concrete means that you must know nothing about the concrete type. Which essentially means it must be an empty or none value. But restricting a concrete type to only the empty or none value is not useful.</p>\n<p>That issue getting hit here. Writing <code>Element * *</code> on a concrete type means that the element type contains tag unions that you know nothing about. That clearly is not true. You know they contain <code>Empty</code>, <code>Integer</code>, and <code>Image</code>. That is why the types don't work out. For the wanted flexibility, <code>Element _ _</code> is the correct type.</p>",
        "id": 485011327,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732848295
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> That makes sense, thank you.</p>",
        "id": 485011450,
        "sender_full_name": "misterdrgn",
        "timestamp": 1732848367
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> One more question, if you don't mind. I threw together the following function, which doesn't work for reasons that are pretty obvious.</p>\n<div class=\"codehilite\"><pre><span></span><code># Takes a list of elements and a function that takes a certain kind of element and returns a Bool.\n# Attempts to cast each element as a type that matches the input signature of the function.\n# If the cast succeeds, then returns that element if calling the function on it returns true.\nfindElement: List (Element _ _), ({}a -&gt; Bool) -&gt; {}a\nfindElement = \\elementList, test -&gt; when elementList is\n[element, .. as tail] -&gt; when element is\n    {}a as ele -&gt; Ok ele\n    Err _ -&gt; findExp tail asSomething\n[] -&gt; Err NotFound\n\n# Example of how this might be used. The anonymous function should be called on any Image elements,\n# whereas other elements should be ignored.\nmyImage = findElement elements (\\{content: Image size} -&gt; size == (120,140))\n</code></pre></div>\n<p>I can't match element to <code>{}a</code> because within the body of the function, there's no way of knowing what \"a\" is. But does this idea make sense? I want to be able to take what in some languages would be a \"partial function,\" that is a function that only works when called on a subset of elements. Then I want to find elements that match the input it is expecting, and when there is a match, I can try calling the function on those elements. </p>\n<p>I'm not sure whether this concept makes sense in Roc. If not, I can write a longer piece of code that has the desired effect, for example the asImage function from my original code snippet. But it would be pretty cool if I could define a more abstract function that didn't require defining an asX for every possible element type.</p>",
        "id": 485013727,
        "sender_full_name": "misterdrgn",
        "timestamp": 1732849892
    },
    {
        "content": "<p>I'd be open to trying out changing the stdlib to no longer use <code>*</code> and the automatically generated types (e.g. in the repl and error messages) to no longer use it</p>",
        "id": 485023952,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1732857745
    },
    {
        "content": "<p>(which is to say, sort of soft-deprecating it and planning to take it out)</p>",
        "id": 485023982,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1732857772
    },
    {
        "content": "<p>I'd like to get a feel for how much of the confusion is about <code>*</code> specifically versus unbound type variables</p>",
        "id": 485024034,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1732857811
    },
    {
        "content": "<p>for example, today if you put <code>[]</code> into the repl it says the inferred type is <code>List *</code>. If instead it starts printing <code>List a</code> are people more, less, or the same amount of confused about why it said that and what that means?</p>",
        "id": 485024067,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1732857840
    },
    {
        "content": "<p>I don't know, but I'm open to trying it</p>",
        "id": 485024110,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1732857844
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/channel/231634-beginners/topic/Questions.20about.20first.20bit.20of.20code/near/485011043\">said</a>:</p>\n<blockquote>\n<p>Personally I think we should only allow <code>*</code> on function inputs. Ban it in all other cases. Then it can only be used in the clear case.</p>\n<p>It would mean: Pass me anything. I know nothing about the thing, but will manage anyway.</p>\n</blockquote>\n<p>What about trying this? is this kind of a mid way point to try?</p>",
        "id": 485026618,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1732859548
    },
    {
        "content": "<p>A downside of having <code>*</code> is that we have to explain when they are used over named type variables, and it seems like that downside would get worse if we not only had to explain the difference (like today) but additionally had to explain why unbound type variables in arguments use <code>*</code> but unbound type variables in other positions don't.</p>\n<p>Also, what counts as \"in an argument\" is tricky - e.g. what about <code>foo : ({} -&gt; Num *) -&gt; Str</code> - does that count as \"in an argument\" because it's in <code>foo</code>'s first argument? Or does it not count because <code>foo</code>'s first argument happens to be a function, and the <code>*</code> happens to be in the return position of <em>that</em> function?  I think the spirit of the idea would suggest that this should not be an allowed use of <code>*</code>, but it makes the rule even more complicated to learn.</p>\n<p>Overall, I think we should either have special syntax for unbound type variables or we shouldn't.</p>",
        "id": 485031992,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1732862925
    },
    {
        "content": "<p>and my current intuition is that we probably shouldn't, in that:</p>\n<ul>\n<li>no other languages I'm aware of have it</li>\n<li>in Roc, it seems to be something people complain about or are confused about more than love</li>\n<li>putting those two together, it seems like a failed experiment</li>\n</ul>",
        "id": 485032137,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1732863008
    },
    {
        "content": "<p>If you don't want it to be arbitrarily restricted like I mentioned then I assume eventual removal will be a the cleanest for beginner understanding. We shall see though. Just need to add a formatter and tutorial update to test it out</p>",
        "id": 485032723,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732863359
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"783718\">misterdrgn</span> <a href=\"#narrow/stream/231634-beginners/topic/Questions.20about.20first.20bit.20of.20code/near/485013727\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> One more question, if you don't mind. I threw together the following function, which doesn't work for reasons that are pretty obvious.</p>\n<p><div class=\"codehilite\"><pre><span></span><code># Takes a list of elements and a function that takes a certain kind of element and returns a Bool.\n# Attempts to cast each element as a type that matches the input signature of the function.\n# If the cast succeeds, then returns that element if calling the function on it returns true.\nfindElement: List (Element _ _), ({}a -&gt; Bool) -&gt; {}a\nfindElement = \\elementList, test -&gt; when elementList is\n[element, .. as tail] -&gt; when element is\n    {}a as ele -&gt; Ok ele\n    Err _ -&gt; findExp tail asSomething\n[] -&gt; Err NotFound\n\n# Example of how this might be used. The anonymous function should be called on any Image elements,\n# whereas other elements should be ignored.\nmyImage = findElement elements (\\{content: Image size} -&gt; size == (120,140))\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This concept doesn't make sense in roc. Either all values in the list match <code>a</code> or it is a type error. This is fundamentally how unification works. So that would never type check. So the <code>when ... is</code> would need to move into the lambda.</p>\n<p>I think that rocs tags are so flexible that it often leads to confusion for beginners. I'm not sure what other language you know, but in whatever other language, roughly imagine a tag union as an enum. Imagine defining an enum with thee variants:</p>\n<div class=\"codehilite\"><pre><span></span><code>enum MyEnum {\n    Empty,\n    Integer,\n    Image,\n}\n</code></pre></div>\n<p>When trying anything that interacts with the enum, you type it as <code>MyEnum</code>. Nothing would ever be typed as <code>Image</code>. <code>Image</code> is not a type. It is simply part of the <code>MyEnum</code> type. The same goes with all tags in roc. It just gets confusing cause they are structural and automatically unify. Makes them feel exceptionally flexible, but they are still just enums (potentially with an attached payload).</p>",
        "id": 485033604,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1732863798
    }
]