[
    {
        "content": "<p>I'm exploring recursive types and having trouble understanding how to annotate them. I suspect I'm not declaring the Node type correctly to start with. I'm not sure if brackets are missing, or an 'as a' annotation, but what I've tried so far isn't working.</p>\n<p>In this example, using any of my naive type annotations on the functions causes a check error. I've included the types suggested by the lsp in comments, but I don't understand why using <code>Node</code> doesn't work.</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>module []\n\nNode : [Nil, NodeList List Node]\n\n# createNil : {} -&gt; Node\n# lsp suggests: {}* -&gt; [Nil]\ncreateNil = \\{} -&gt; Nil\n\n# createList : {} -&gt; Node\n# lsp suggests: {}* -&gt; [NodeList (List [NodeList (List [Nil])])]\ncreateList = \\{} -&gt; NodeList (List.repeat (NodeList (List.repeat Nil 0)) 0)\n\n# createNode : Bool -&gt; Node\n# lsp suggests: Bool -&gt; [Nil, NodeList (List [NodeList (List [Nil])])]\ncreateNode = \\bool -&gt;\n    if bool then createList {} else createNil {}\n\n# isNil : Node -&gt; Bool\n# lsp suggests: [Nil, NodeList *] -&gt; Bool\nisNil = \\in -&gt;\n    when in is\n        Nil -&gt;\n            Bool.true\n\n        NodeList _ -&gt;\n            Bool.false\n\n# isList : Node -&gt; Bool\n# lsp suggests: [Nil, NodeList *] -&gt; Bool\nisList = \\in -&gt;\n    when in is\n        Nil -&gt;\n            Bool.false\n\n        NodeList _ -&gt;\n            Bool.true\n\nexpect isNil (createNil {})\nexpect isList (createList {})\nexpect isNil (createNode Bool.false)\nexpect isList (createNode Bool.true)\n</code></pre></div>",
        "id": 488905162,
        "sender_full_name": "Mo",
        "timestamp": 1734117338
    },
    {
        "content": "<p>I think you want</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">Node</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Nil</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">NodeList</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Node</span><span class=\"p\">)]</span>\n</code></pre></div>\n<p>(with the parenthesis around list)</p>\n<p>Honestly I'm struggling to understand why your type even compiles at all</p>",
        "id": 488907035,
        "sender_full_name": "lue",
        "timestamp": 1734118224
    },
    {
        "content": "<p>I think it just never gets materialized and thus never gets type checked</p>",
        "id": 488907144,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734118275
    },
    {
        "content": "<p>But I know I have seen bugs like this before. I'm not sure when the number of type variables is checked, but they seem to be check really late</p>",
        "id": 488907212,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1734118312
    },
    {
        "content": "<p>Wow I would have sworn I had tried <code>NodeList (List Node)</code> already, but that makes all the type annotations work as I expect...</p>",
        "id": 488907387,
        "sender_full_name": "Mo",
        "timestamp": 1734118382
    },
    {
        "content": "<p>Cheers!</p>",
        "id": 488907577,
        "sender_full_name": "Mo",
        "timestamp": 1734118450
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"802367\">Mo</span> has marked this topic as resolved.</p>",
        "id": 488907746,
        "sender_full_name": "Notification Bot",
        "timestamp": 1734118533
    }
]