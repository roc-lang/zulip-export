[
    {
        "content": "<p>This is an extremely beginners' question, but I can't figure out how to get the length of a string in Roc. Can someone help please?</p>",
        "id": 434949053,
        "sender_full_name": "Abhinav Sarkar",
        "timestamp": 1713866711
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"709964\">@Abhinav Sarkar</span>,<br>\nIf you only expect your Str to contain ascii characters, you can use <code>List.len (Str.toUtf8 myStr)</code>. For an in depth treatment of this suprisingly complicated problem I recommend reading the sections Unicde, Graphemes, Code Points... near the top of the <a href=\"https://www.roc-lang.org/builtins/Str\">Str docs</a>.</p>",
        "id": 434950562,
        "sender_full_name": "Anton",
        "timestamp": 1713867257
    },
    {
        "content": "<p>I'd like to handle Unicode too. I read the docs. It recommends using the roc-unicode package, but it does not have any releases.</p>",
        "id": 434950713,
        "sender_full_name": "Abhinav Sarkar",
        "timestamp": 1713867328
    },
    {
        "content": "<p>And I don't know how to use a package from Github without releases. Can't find any doc on that.</p>",
        "id": 434950862,
        "sender_full_name": "Abhinav Sarkar",
        "timestamp": 1713867376
    },
    {
        "content": "<p>Do we have something like <code>countGraphemes</code> in roc-unicode that works <span class=\"user-mention\" data-user-id=\"515757\">@Luke Boswell</span>?<br>\nCan you tell us a bit more about why you need the length of a string <span class=\"user-mention\" data-user-id=\"709964\">@Abhinav Sarkar</span>? That may allow me to give some specific suggestions.</p>",
        "id": 434955134,
        "sender_full_name": "Anton",
        "timestamp": 1713868967
    },
    {
        "content": "<p>I'm writing a pretty printing algorithm and it requires me to know how many columns a strings takes when printed. If I understand correctly, that's the grapheme  count of string.</p>",
        "id": 434955442,
        "sender_full_name": "Abhinav Sarkar",
        "timestamp": 1713869075
    },
    {
        "content": "<p>Yeah, <code>Grapheme.split</code> from <a href=\"https://github.com/roc-lang/unicode\">roc-lang/unicode</a> can be used to do this with unicode.</p>",
        "id": 434956053,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713869310
    },
    {
        "content": "<p>We don't have a release so you currently have to clone that repo (it's tiny) and use a local reference</p>",
        "id": 434956102,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713869340
    },
    {
        "content": "<p>You can use a path for a package, <a href=\"https://github.com/lukewilliamboswell/roc-json/blob/35686acda9a4b5923535438a68dd1371c52e1167/examples/simple1.roc#L4\">like we do here</a></p>",
        "id": 434956293,
        "sender_full_name": "Anton",
        "timestamp": 1713869424
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 434956438,
        "sender_full_name": "Abhinav Sarkar",
        "timestamp": 1713869497
    },
    {
        "content": "<p>Or if you are looking for unicode CodePoints <a href=\"https://github.com/roc-lang/unicode/blob/main/examples/simple.roc\">https://github.com/roc-lang/unicode/blob/main/examples/simple.roc</a></p>",
        "id": 434956469,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713869512
    },
    {
        "content": "<p>^^ this example shows how to parse utf8 and also the package from a path</p>",
        "id": 434956539,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713869528
    },
    {
        "content": "<p>I think for a pretty printing \"column\" count, grapheme count makes the most sense</p>",
        "id": 434959203,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713870456
    },
    {
        "content": "<p>if you're in a monospace font, 1 grapheme will more often correspond to 1 \"character width\" than anything else will (including code points), although it's still not guaranteed</p>",
        "id": 434959550,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713870574
    },
    {
        "content": "<p>for example, some East Asian characters are defined to be half-width</p>",
        "id": 434959684,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713870607
    },
    {
        "content": "<p>I'd like to be as accurate as possible. Any suggestion for dealing with such cases?</p>",
        "id": 434959799,
        "sender_full_name": "Abhinav Sarkar",
        "timestamp": 1713870656
    },
    {
        "content": "<p>I actually just tried this out (I asked chatGPT for some concrete examples of them) and they seem to all render the same width in my terminal:</p>\n<ul>\n<li>Half-width 'カ' (U+FF76) versus full-width 'カ' (U+30AB).</li>\n<li>Half-width 'ケ' (U+FF79) versus full-width 'ケ' (U+30B1).</li>\n</ul>",
        "id": 434960117,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713870749
    },
    {
        "content": "<p>so maybe that's not an issue in practice</p>",
        "id": 434960154,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713870762
    },
    {
        "content": "<p>so grapheme count should work fine?</p>",
        "id": 434960206,
        "sender_full_name": "Abhinav Sarkar",
        "timestamp": 1713870778
    },
    {
        "content": "<p>if you wanted to be maximally accurate, I think you'd need to get specific fonts involved and measure their glyph widths, which probably doesn't make sense for a pretty printer <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 434960269,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713870802
    },
    {
        "content": "<p>personally I would use grapheme count for this, yeah</p>",
        "id": 434960297,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713870810
    },
    {
        "content": "<p>I can't think of a measurement that's font-agnostic and would work better than grapheme count</p>",
        "id": 434960373,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713870838
    },
    {
        "content": "<p>I rather not deal with fonts. I'll assume monospace. Let me figure out how to get grapheme count.</p>",
        "id": 434960837,
        "sender_full_name": "Abhinav Sarkar",
        "timestamp": 1713870981
    },
    {
        "content": "<p>Also a feedback as a noob, it seems really wrong to go through all these hoops to get a string's length.</p>",
        "id": 434960952,
        "sender_full_name": "Abhinav Sarkar",
        "timestamp": 1713871016
    },
    {
        "content": "<p>I could be misunderstanding but I think the \"issue\" here isn't a Roc-specific one. It might appear Roc is asking you to go through extra hoops, but that's probably because other languages in some cases gloss over things a bit too much, and make assumptions on behalf of the user.</p>\n<p>Whether this is an indication that there could exist a tiny bit more user-friendly library in user space - probably, yes, but it'll come with caveats, as there aren't any shortcuts which could be taken without compromise in this case.</p>",
        "id": 434965026,
        "sender_full_name": "Hristo",
        "timestamp": 1713872405
    },
    {
        "content": "<p>Sure, but in my life I've never seen a single language that has a String data type and does not have a length function in it. TBH, I was very surprised with Roc's choice. Just my 2c.</p>",
        "id": 434965488,
        "sender_full_name": "Abhinav Sarkar",
        "timestamp": 1713872595
    },
    {
        "content": "<p>yeah this is an intentional choice</p>",
        "id": 434966349,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713872884
    },
    {
        "content": "<p>the way it goes in most languages is: </p>\n<ol>\n<li>Use a builtin <code>Str.len</code> or similar </li>\n<li>Emoji bugs get reported</li>\n<li>Learn about the different ways string length can be represented (graphemes and such), figure out which one makes the best sense for this use case, implement a fix</li>\n</ol>\n<p>my hope is to replace that status quo with: </p>\n<ol>\n<li>Look for builtin <code>Str.len</code> or similar, discover it's not there</li>\n<li>Ask in <a class=\"stream\" data-stream-id=\"231634\" href=\"/#narrow/stream/231634-beginners\">#beginners</a>  how to get string length in Roc</li>\n<li>Learn about the different ways string length can be represented (graphemes and such), figure out which one makes the best sense for this use case, implement it using that way the first time around instead of shipping with Unicode bugs <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></li>\n</ol>",
        "id": 434966968,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713873129
    },
    {
        "content": "<p>this flow will be smoother when we have a release of <code>roc-unicode</code>, to be fair <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 434967021,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713873162
    },
    {
        "content": "<p>I've never seen a language like it either. I was surprised too. But I'm finding there are lots of little details like this where a lot of care has gone into thinking about how to set people up for success. It's why I love using roc so much.</p>\n<p>I'd love to improve the unicode library. If anyone is interested in helping with that then please let me know. A second pair of eyes to help make things more sensible would be amazing.</p>",
        "id": 434967151,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713873210
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"709964\">@Abhinav Sarkar</span>, my understanding is that one of the philosophies behind the design of Roc is to minimise (or eliminate altogether) the number of ways a developer could shoot themselves in the foot.<br>\nOne of the directions for ensuring this is via not allowing use-case ambiguities and misinterpretation of semantics to be mistaken to be shortcomings of the language.<br>\nThe language enables the user to truly attempt to identify and understand their use-case, and act accordingly.</p>",
        "id": 434967399,
        "sender_full_name": "Hristo",
        "timestamp": 1713873298
    },
    {
        "content": "<p>If there's is insufficient clarity or understanding in a use-case, then this signifies that the language cannot fill it in on behalf of the user, because at best that would be a guess. That's why the user is empowered to actually get to understand better the underlying problem they're trying to solve.</p>\n<p>Again, user-space libraries do not have to share the same methodologies as the standard library, and many users might find functionality providing glossing-over of concepts (which in other languages may come as part of the standard library) available at that kind of level.</p>",
        "id": 434967821,
        "sender_full_name": "Hristo",
        "timestamp": 1713873455
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/231634-beginners/topic/How.20to.20get.20String.20length.3F/near/434967021\">said</a>:</p>\n<blockquote>\n<p>this flow will be smoother when we have a release of <code>roc-unicode</code>, to be fair <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>\n<p>When is the release expected?</p>",
        "id": 434984203,
        "sender_full_name": "Abhinav Sarkar",
        "timestamp": 1713878595
    },
    {
        "content": "<p>Nothing stopping use from making a release today. Though it doesn't cover much of unicode yet, and hasn't been tested in great detail, so maybe it's not a good idea?? I dont know but I guess a release would indicate a lvel of maturity, and what is there is still a WIP though usable.</p>\n<p>It took me quite a while to build the text segmentation for graphemes. It would probably be much easier now.</p>\n<p>I was planning to do some fuzz testing with it, but keep getting distracted on other projects and work.</p>",
        "id": 435071237,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713907936
    },
    {
        "content": "<p>Can make it release 0.0.0-alpha or something</p>",
        "id": 435087138,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713918426
    },
    {
        "content": "<p>The visual width in a terminal is implemented using the wcwidth function, the python package has an explanation of it here: <a href=\"https://pypi.org/project/wcwidth/\">https://pypi.org/project/wcwidth/</a></p>\n<p>I actually started working on a roc-wcwidth package a while ago for a project, but didn't finish it. I'll dig it up tomorrow and see if I can finish it.</p>",
        "id": 435202708,
        "sender_full_name": "Hannes",
        "timestamp": 1713968859
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"508951\">Hannes</span> <a href=\"#narrow/stream/231634-beginners/topic/How.20to.20get.20String.20length.3F/near/435202708\">said</a>:</p>\n<blockquote>\n<p>The visual width in a terminal is implemented using the wcwidth function, the python package has an explanation of it here: <a href=\"https://pypi.org/project/wcwidth/\">https://pypi.org/project/wcwidth/</a></p>\n</blockquote>\n<p>Will it be not same as grapheme count as discussed above?</p>",
        "id": 435215040,
        "sender_full_name": "Abhinav Sarkar",
        "timestamp": 1713971706
    },
    {
        "content": "<blockquote>\n<p>Characters of category East Asian Wide (W) or East Asian Full-width (F) which are displayed using two terminal cells.</p>\n</blockquote>\n<p>Those count as 2 cells</p>",
        "id": 435282893,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713997960
    },
    {
        "content": "<p>So it will be different</p>",
        "id": 435282900,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1713997967
    },
    {
        "content": "<p>that's a good point, this is probably a better choice than graphemes!</p>",
        "id": 435283882,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713998607
    },
    {
        "content": "<p>you could always start with graphemes to get close and then switch to using this later, if you don't want to block on it</p>",
        "id": 435283971,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713998660
    },
    {
        "content": "<p>Would it be something worth adding from the platform? <a href=\"https://github.com/unicode-rs/unicode-width\">https://github.com/unicode-rs/unicode-width</a></p>",
        "id": 435284168,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713998785
    },
    {
        "content": "<p>Given basic CLI will likely have tools built for a terminal, maybe we should expose that as a helper until we can write a pure roc implementation?</p>",
        "id": 435284264,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713998860
    },
    {
        "content": "<p>Actually, we might have most of the things we need in our unicode package already</p>",
        "id": 435284562,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713999040
    },
    {
        "content": "<p>yeah it's probably not very different from graphemes I'd imagine</p>",
        "id": 435284754,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1713999165
    },
    {
        "content": "<p>From what I can tell, there is just <a href=\"https://www.unicode.org/Public/15.1.0/ucd/EastAsianWidth.txt\">the EastAsianWidth data file</a> which maps codepoints to the width property. And then everything else is (neutral) and given a width of 1, except a handful of harcoded cases like em dash.</p>",
        "id": 435284883,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713999253
    },
    {
        "content": "<p>Actually, it's just this data file</p>",
        "id": 435284941,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713999302
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code># The format is two fields separated by a semicolon.\n# Field 0: Unicode code point value or range of code point values\n# Field 1: East_Asian_Width property, consisting of one of the following values:\n#         &quot;A&quot;, &quot;F&quot;, &quot;H&quot;, &quot;N&quot;, &quot;Na&quot;, &quot;W&quot;\n#  - All code points, assigned or unassigned, that are not listed\n#      explicitly are given the value &quot;N&quot;.\n</code></pre></div>",
        "id": 435284977,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713999336
    },
    {
        "content": "<p>The Unicode Character Database [<a href=\"https://www.unicode.org/reports/tr41/tr41-32.html#UCD\">UCD</a>] assigns to each Unicode character as its default width property one of six values: <em>Ambiguous, Fullwidth, Halfwidth, Narrow, Wide</em>, or <em>Neutral</em> (<em>= Not East Asian</em>). For any given operation, these six default property values resolve into only two property values, <em>narrow</em> and <em>wide,</em> depending on context.</p>",
        "id": 435285113,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713999456
    },
    {
        "content": "<p><a href=\"/user_uploads/22008/GCjkMmFtwOgweo_fLfJcl7RH/Screenshot-2024-04-25-at-09.02.19.png\">Screenshot-2024-04-25-at-09.02.19.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/GCjkMmFtwOgweo_fLfJcl7RH/Screenshot-2024-04-25-at-09.02.19.png\" title=\"Screenshot-2024-04-25-at-09.02.19.png\"><img src=\"/user_uploads/22008/GCjkMmFtwOgweo_fLfJcl7RH/Screenshot-2024-04-25-at-09.02.19.png\"></a></div>",
        "id": 435285715,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1713999744
    },
    {
        "content": "<p>We already have a few examples that do this in our package, so this would be quite easy to implement.</p>\n<p>If someone would like to have a crack at this, we just need to add that data file to <code>unicode/package/data</code>, then write a <code>InternalEAWGen.roc</code> file that is almost a copy paste of <a href=\"https://github.com/roc-lang/unicode/blob/main/package/InternalGBPGen.roc\">InternalGBPGen.roc</a> to parse the data file and generates a Roc file that maps CodePoints <code>CP</code> to an East Asian Width property <code>EAW : [Ambiguous, Fullwidth, Halfwidth, Narrow, Neutral, Wide]</code>, and then implement a corresponding helper that uses this to walk through a <code>List U8</code> or a <code>Str</code> and sum of the width. </p>\n<p>This is some of what the <code>InternalGBP.roc</code> looks like.</p>\n<div class=\"codehilite\"><pre><span></span><code>interface InternalGBP\n    exposes [GBP, fromCP, isExtend, isZWJ]\n    imports [InternalCP.{ CP, toU32, fromU32Unchecked }]\n\nGBP : [CR, Control, Extend, ZWJ, RI, Prepend, SpacingMark, V, T, LF, LVT, LV, L, Other]\n\nisCR : U32 -&gt; Bool\nisCR = \\u32 -&gt; (u32 == 13)\n\n# etc\n</code></pre></div>",
        "id": 435286677,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714000325
    },
    {
        "content": "<p>Aren't emojis double width?</p>",
        "id": 435893083,
        "sender_full_name": "timotree",
        "timestamp": 1714325206
    },
    {
        "content": "<p>I believe emoji are all quadruple length.</p>\n<p>For example:  <code>\"🙂\" |&gt; Str.toUtf8 == [240, 159, 153, 130]</code></p>",
        "id": 435896358,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1714327775
    },
    {
        "content": "<p>I think this is a question about visible width - like how it will be printed in a terminal using a monospace font</p>",
        "id": 435897392,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714328145
    },
    {
        "content": "<p>this whole thread is reinforcing the decision to not include \"string length\" in the <code>Str</code> module - we've discussed like 5 different concepts of length, and all but one of them have turned out to be the wrong answer for the use case! <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 435897565,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714328199
    },
    {
        "content": "<p>Clearly should have caught up on a little more context before dropping off topic responses! <span aria-label=\"woozy face\" class=\"emoji emoji-1f974\" role=\"img\" title=\"woozy face\">:woozy_face:</span></p>",
        "id": 435900128,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1714329369
    },
    {
        "content": "<p>Like just the comment before timotree! <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 435900183,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1714329445
    },
    {
        "content": "<p>no worries, the rabbit hole is very deep on this topic! <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 435900260,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714329508
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/unicode/issues/6\">https://github.com/roc-lang/unicode/issues/6</a> created to track the above</p>",
        "id": 436006114,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714385889
    }
]