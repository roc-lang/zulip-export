[
    {
        "content": "<p>apparently having a recursive type alias via a dictionary is not allowed?</p>\n<div class=\"codehilite\"><pre><span></span><code>Dir : {\n    subDirs : Dict Str Dir,\n    files : Dict Str Nat,\n}\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>The Dir alias is self-recursive in an invalid way:\n\n6â”‚  Dir : {\n    ^^^\n\nRecursion in aliases is only allowed if recursion happens behind a\ntagged union, at least one variant of which is not recursive.\n</code></pre></div>\n<p>I can see how roc might arrive at this conclusion, but it also seems very unergonomic and avoidable. Is this intentional?</p>",
        "id": 314984244,
        "sender_full_name": "Gabriel Pickl",
        "timestamp": 1670620704
    },
    {
        "content": "<p>Nope, not intentional</p>",
        "id": 314984808,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670620946
    },
    {
        "content": "<p>I think</p>",
        "id": 314984910,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670620992
    },
    {
        "content": "<p>Though it may be a base case problem now that I am thinking about it more. Though the empty Dict/List is technically the base case so it should be fine.</p>",
        "id": 314984979,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670621022
    },
    {
        "content": "<p>I think the fundamental issue would be that our compiler doesn't know that a <code>List</code> is essentially a pointer and splits a type the same a a recursive definition would.</p>",
        "id": 314985126,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670621073
    },
    {
        "content": "<p><code>Dict</code> is built on <code>List</code>.</p>",
        "id": 314985152,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670621086
    },
    {
        "content": "<p>So the core question would be something like</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">Dir</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">subDir</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">T</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"w\"> </span><span class=\"nx\">Dir</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nx\">files</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nx\">T</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"w\"> </span><span class=\"nx\">Nat</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 314985294,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670621160
    },
    {
        "content": "<p>The error says you need to put the recursion behind a tagged union, which would look like this</p>\n<div class=\"codehilite\"><pre><span></span><code>Dir : {\n    subDirs : [SubDirs (Dict Str Dir)],\n    files : Dict Str Nat,\n}\n</code></pre></div>",
        "id": 314999551,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1670627435
    },
    {
        "content": "<p>Seems like it would be possible for us to eventually support the original type, but apparently we do not currently support that.</p>",
        "id": 314999795,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1670627561
    },
    {
        "content": "<p>In other words, I <em>think</em> it would be possible to support recursion behind a tagged union <em>or List</em> but today it's only tagged unions.</p>",
        "id": 315000036,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1670627685
    },
    {
        "content": "<p>yeah we definitely should support that!</p>",
        "id": 315011291,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1670635279
    }
]