[
    {
        "content": "<p>I've been playing with function annotations, as part of my own approaches to learning Roc (I'm essentially translating a bunch of my own Elm code samples to Roc), and as a related side exploration, I've run into the following, when trying to annotate <a href=\"https://www.roc-lang.org/tutorial#tests-and-expectations\">this</a> example from Roc's tutorial:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"w\">  </span><span class=\"kt\">The</span><span class=\"w\"> </span><span class=\"nv\">rockin'</span><span class=\"w\"> </span><span class=\"nv\">roc</span><span class=\"w\"> </span><span class=\"nv\">repl</span>\n<span class=\"err\">────────────────────────</span>\n<span class=\"kt\">Enter</span><span class=\"w\"> </span><span class=\"nv\">an</span><span class=\"w\"> </span><span class=\"nv\">expression</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">or</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"nv\">help</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">or</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"nv\">q</span><span class=\"w\"> </span><span class=\"nv\">to</span><span class=\"w\"> </span><span class=\"nv\">quit</span><span class=\"nf\">.</span>\n\n<span class=\"err\">»</span><span class=\"w\"> </span><span class=\"nv\">pl</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"err\">…</span><span class=\"w\">     </span><span class=\"nv\">cs</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toStr</span><span class=\"w\"> </span><span class=\"nv\">c</span>\n<span class=\"err\">…</span><span class=\"w\">     </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"err\">…</span><span class=\"w\">         </span><span class=\"s\">\"$(cs) $(s)\"</span>\n<span class=\"err\">…</span><span class=\"w\">     </span><span class=\"kr\">else</span>\n<span class=\"err\">…</span><span class=\"w\">         </span><span class=\"s\">\"$(cs) $(p)\"</span>\n\n<span class=\"nf\">&lt;</span><span class=\"nv\">function</span><span class=\"nf\">&gt;</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"w\"> </span><span class=\"nf\">*</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span>\n</code></pre></div>\n<p>So, it's all OK up until this point.<br>\nBut then:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"err\">»</span><span class=\"w\"> </span><span class=\"nv\">pl</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"w\"> </span><span class=\"nf\">*</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span>\n<span class=\"err\">…</span><span class=\"w\"> </span><span class=\"nv\">pl</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"err\">…</span><span class=\"w\">     </span><span class=\"nv\">cs</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toStr</span><span class=\"w\"> </span><span class=\"nv\">c</span>\n<span class=\"err\">…</span><span class=\"w\">     </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"err\">…</span><span class=\"w\">         </span><span class=\"s\">\"$(cs) $(s)\"</span>\n<span class=\"err\">…</span><span class=\"w\">     </span><span class=\"kr\">else</span>\n<span class=\"err\">…</span><span class=\"w\">         </span><span class=\"s\">\"$(cs) $(p)\"</span>\n\n\n<span class=\"err\">──</span><span class=\"w\"> </span><span class=\"kt\">TYPE</span><span class=\"w\"> </span><span class=\"kt\">MISMATCH</span><span class=\"w\"> </span><span class=\"err\">───────────────────────────────────────────────────────────────</span>\n\n<span class=\"kt\">This</span><span class=\"w\"> </span><span class=\"nv\">expression</span><span class=\"w\"> </span><span class=\"nv\">has</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"kr\">type</span><span class=\"w\"> </span><span class=\"nv\">that</span><span class=\"w\"> </span><span class=\"nv\">does</span><span class=\"w\"> </span><span class=\"nv\">not</span><span class=\"w\"> </span><span class=\"nv\">implement</span><span class=\"w\"> </span><span class=\"nv\">the</span><span class=\"w\"> </span><span class=\"nv\">abilities</span><span class=\"w\"> </span><span class=\"nv\">it's</span><span class=\"w\"> </span><span class=\"nv\">expected</span><span class=\"w\"> </span><span class=\"nv\">to</span><span class=\"nf\">:</span>\n\n<span class=\"mi\">7</span><span class=\"err\">│</span><span class=\"w\">          </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"w\">               </span><span class=\"nf\">^</span>\n\n<span class=\"kt\">I</span><span class=\"w\"> </span><span class=\"nv\">can't</span><span class=\"w\"> </span><span class=\"nv\">generate</span><span class=\"w\"> </span><span class=\"nv\">an</span><span class=\"w\"> </span><span class=\"nv\">implementation</span><span class=\"w\"> </span><span class=\"kr\">of</span><span class=\"w\"> </span><span class=\"nv\">the</span><span class=\"w\"> </span><span class=\"kt\">Eq</span><span class=\"w\"> </span><span class=\"nv\">ability</span><span class=\"w\"> </span><span class=\"nv\">for</span>\n\n<span class=\"w\">    </span><span class=\"kt\">Num</span><span class=\"w\"> </span><span class=\"nf\">*</span>\n\n<span class=\"kt\">In</span><span class=\"w\"> </span><span class=\"nv\">particular</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">an</span><span class=\"w\"> </span><span class=\"nv\">implementation</span><span class=\"w\"> </span><span class=\"nv\">for</span>\n\n<span class=\"w\">    </span><span class=\"nf\">*</span>\n\n<span class=\"nv\">cannot</span><span class=\"w\"> </span><span class=\"nv\">be</span><span class=\"w\"> </span><span class=\"nv\">generated</span><span class=\"nf\">.</span>\n\n<span class=\"kt\">Tip</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">This</span><span class=\"w\"> </span><span class=\"kr\">type</span><span class=\"w\"> </span><span class=\"nv\">variable</span><span class=\"w\"> </span><span class=\"nv\">is</span><span class=\"w\"> </span><span class=\"nv\">not</span><span class=\"w\"> </span><span class=\"nv\">bound</span><span class=\"w\"> </span><span class=\"nv\">to</span><span class=\"w\"> </span><span class=\"kt\">Eq</span><span class=\"nf\">.</span><span class=\"w\"> </span><span class=\"kt\">Consider</span><span class=\"w\"> </span><span class=\"nv\">adding</span><span class=\"w\"> </span><span class=\"nv\">an</span>\n<span class=\"nv\">implements</span><span class=\"w\"> </span><span class=\"nv\">clause</span><span class=\"w\"> </span><span class=\"nv\">to</span><span class=\"w\"> </span><span class=\"nv\">bind</span><span class=\"w\"> </span><span class=\"nv\">the</span><span class=\"w\"> </span><span class=\"kr\">type</span><span class=\"w\"> </span><span class=\"nv\">variable</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">like</span>\n<span class=\"kr\">where</span><span class=\"w\"> </span><span class=\"nf\">*</span><span class=\"w\"> </span><span class=\"nv\">implements</span><span class=\"w\"> </span><span class=\"kt\">Bool</span><span class=\"nf\">.</span><span class=\"kt\">Eq</span>\n</code></pre></div>\n<p>and even further:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"err\">»</span><span class=\"w\"> </span><span class=\"nv\">pl</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"w\"> </span><span class=\"nf\">*</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"kr\">where</span><span class=\"w\"> </span><span class=\"nf\">*</span><span class=\"w\"> </span><span class=\"nv\">implements</span><span class=\"w\"> </span><span class=\"kt\">Eq</span>\n<span class=\"err\">…</span><span class=\"w\"> </span><span class=\"nv\">pl</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"err\">…</span><span class=\"w\">     </span><span class=\"nv\">cs</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toStr</span><span class=\"w\"> </span><span class=\"nv\">c</span>\n<span class=\"err\">…</span><span class=\"w\">     </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"err\">…</span><span class=\"w\">         </span><span class=\"s\">\"$(cs) $(s)\"</span>\n<span class=\"err\">…</span><span class=\"w\">     </span><span class=\"kr\">else</span>\n<span class=\"err\">…</span><span class=\"w\">         </span><span class=\"s\">\"$(cs) $(p)\"</span>\n<span class=\"err\">…</span>\n<span class=\"err\">»</span><span class=\"w\"> </span><span class=\"nv\">pl</span><span class=\"w\"> </span><span class=\"s\">\"cactus\"</span><span class=\"w\"> </span><span class=\"s\">\"cacti\"</span><span class=\"w\"> </span><span class=\"mi\">3</span>\n\n<span class=\"err\">──</span><span class=\"w\"> </span><span class=\"kt\">NOT</span><span class=\"w\"> </span><span class=\"kt\">END</span><span class=\"w\"> </span><span class=\"kt\">OF</span><span class=\"w\"> </span><span class=\"kt\">FILE</span><span class=\"w\"> </span><span class=\"err\">─────────────────────────────────────────────────────────────</span>\n\n<span class=\"kt\">I</span><span class=\"w\"> </span><span class=\"nv\">expected</span><span class=\"w\"> </span><span class=\"nv\">to</span><span class=\"w\"> </span><span class=\"nv\">reach</span><span class=\"w\"> </span><span class=\"nv\">the</span><span class=\"w\"> </span><span class=\"nv\">end</span><span class=\"w\"> </span><span class=\"kr\">of</span><span class=\"w\"> </span><span class=\"nv\">the</span><span class=\"w\"> </span><span class=\"nv\">file</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">but</span><span class=\"w\"> </span><span class=\"nv\">got</span><span class=\"w\"> </span><span class=\"nv\">stuck</span><span class=\"w\"> </span><span class=\"nv\">here</span><span class=\"nf\">:</span>\n\n<span class=\"mi\">3</span><span class=\"err\">│</span><span class=\"w\">  </span><span class=\"nv\">pl</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"w\"> </span><span class=\"nf\">*</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"kr\">where</span><span class=\"w\"> </span><span class=\"nf\">*</span><span class=\"w\"> </span><span class=\"nv\">implements</span><span class=\"w\"> </span><span class=\"kt\">Eq</span>\n<span class=\"w\">                                </span><span class=\"nf\">^</span>\n</code></pre></div>\n<p>I believe this should be a straightforward thing to figure out, but all my attempts have failed.</p>\n<p>Essentially, without the type annotation, the function does work as expected. But I can't seem to annotate it properly (tried with <code>Bool.Eq</code> etc), despite all the help from the compiler.</p>\n<p>Thank you for your time!</p>",
        "id": 425569539,
        "sender_full_name": "Hristo",
        "timestamp": 1709922075
    },
    {
        "content": "<p>I don't think we support <code>*</code> with <code>where ... implements</code>. So in general you should use a specific type variable like <code>a</code>.<br>\nBut you will then encounter problems here with the type of <code>1</code> (in <code>c == 1</code>).</p>\n<p>Anyway, the easy fix is to use <code>U64</code> or <code>I64</code> instead of <code>Num *</code>. I'll file some issues to improve the experience here.</p>",
        "id": 425573308,
        "sender_full_name": "Anton",
        "timestamp": 1709923735
    },
    {
        "content": "<p>Sidenote: the reason you need to add <code>where a implements Eq</code> here is because the number could be a floating number. Floats don't support <code>Eq</code>, because <a href=\"https://stackoverflow.com/questions/4915462/how-should-i-do-floating-point-comparison\">you need to be cautious when comparing floats</a>. To compare floats we have <code>isApproxEq</code>.</p>",
        "id": 425574838,
        "sender_full_name": "Anton",
        "timestamp": 1709924340
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/stream/231634-beginners/topic/Trying.20to.20figure.20out.20a.20straightforward.20function.20annotation/near/425573308\">said</a>:</p>\n<blockquote>\n<p>But you will then encounter problems here with the type of <code>1</code> (in <code>c == 1</code>).</p>\n</blockquote>\n<p>Yes, precisely, I did run into that as well.</p>\n<blockquote>\n<p>Anyway, the easy fix is to use <code>U64</code> or <code>I64</code> instead of <code>Num *</code>. I'll file some issues to improve the experience here.</p>\n</blockquote>\n<p>Thank you!<span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>\n<p>What did confuse me in this case was the fact that the inferred function annotation wasn't practically applicable.</p>\n<p>I'll mark this thread as resolved.</p>",
        "id": 425575943,
        "sender_full_name": "Hristo",
        "timestamp": 1709924744
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"693045\">Hristo</span> has marked this topic as resolved.</p>",
        "id": 425575959,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709924754
    },
    {
        "content": "<blockquote>\n<p>What did confuse me in this case was the fact that the inferred function annotation wasn't practically applicable.</p>\n</blockquote>\n<p>Yeah, that should not happen, I expect that may be hard to fix but I'll make an issue.</p>",
        "id": 425577276,
        "sender_full_name": "Anton",
        "timestamp": 1709925293
    },
    {
        "content": "<p>Why is there a problem with <code>c == 1</code>? That seems like it should work</p>",
        "id": 425625365,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1709942314
    },
    {
        "content": "<p>the problem is that the type annotation says <code>Num *</code> rather than <code>Int *</code></p>",
        "id": 425626956,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1709943539
    },
    {
        "content": "<p>for the type of <code>c</code></p>",
        "id": 425626962,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1709943542
    },
    {
        "content": "<p><code>Num *</code> doesn't have <code>Eq</code> because <code>Num *</code> can include floats</p>",
        "id": 425626976,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1709943559
    },
    {
        "content": "<p>whereas <code>Int *</code> does have <code>Eq</code> because all ints have <code>Eq</code></p>",
        "id": 425626984,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1709943567
    },
    {
        "content": "<p>This should work though, right?</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"err\">»</span><span class=\"w\"> </span><span class=\"nv\">pl</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"kr\">where</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">implements</span><span class=\"w\"> </span><span class=\"kt\">Eq</span>\n<span class=\"err\">…</span><span class=\"w\"> </span><span class=\"nv\">pl</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"err\">…</span><span class=\"w\">     </span><span class=\"nv\">cs</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">toStr</span><span class=\"w\"> </span><span class=\"nv\">c</span>\n<span class=\"err\">…</span><span class=\"w\">     </span><span class=\"kr\">if</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"kr\">then</span>\n<span class=\"err\">…</span><span class=\"w\">         </span><span class=\"s\">\"$(cs) $(s)\"</span>\n<span class=\"err\">…</span><span class=\"w\">     </span><span class=\"kr\">else</span>\n<span class=\"err\">…</span><span class=\"w\">         </span><span class=\"s\">\"$(cs) $(p)\"</span>\n</code></pre></div>",
        "id": 425631542,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1709947272
    },
    {
        "content": "<p>unfortunately not, because <code>a</code> doesn't really relate to <code>Num</code> itself</p>",
        "id": 425633005,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1709948601
    },
    {
        "content": "<p>it's just a type marker like <code>Integer Signed32</code> or something like that</p>",
        "id": 425633016,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1709948616
    },
    {
        "content": "<p>so this is saying that \"whatever type marker you use has <code>Eq</code>\" but that's not helpful here <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 425633042,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1709948637
    },
    {
        "content": "<p>Ah, so I really need <code>where (Num a) implements Eq</code>. Which of course is an unsupported syntax</p>\n<p>Or would need something like <code>a where a implements Eq &amp; NumericOps</code> or something like that</p>",
        "id": 425637763,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1709953393
    },
    {
        "content": "<p>Of course neither being supported though the second could technically be implemented as a builtin if we really wanted (and would probably be added if we ever did custom infix ops for numerics)</p>",
        "id": 425637791,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1709953440
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/.E2.9C.94.20Trying.20to.20figure.20out.20a.20straightforward.20function.20annotation/near/425637763\">said</a>:</p>\n<blockquote>\n<p>Ah, so I really need <code>where (Num a) implements Eq</code>. Which of course is an unsupported syntax</p>\n<p>Or would need something like <code>a where a implements Eq &amp; NumericOps</code> or something like that</p>\n</blockquote>\n<p>Exactly, <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span>! That's where I was trying to pull it towards (the first option you mentioned).</p>",
        "id": 425671088,
        "sender_full_name": "Hristo",
        "timestamp": 1709976040
    },
    {
        "content": "<p>yeah I guess the difference between that and <code>Int *</code> is whether <code>Dec</code> is accepted</p>",
        "id": 425683059,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1709987823
    }
]