[
    {
        "content": "<p>Just my 2 cents...personally I don't favor backpassing for non-IO (Task) due to the indentation change. E.g. glancing below, it feels like the last line is the return value (instead of of List Str)</p>\n<div class=\"codehilite\"><pre><span></span><code>result =\n    x &lt;- nums |&gt; List.map\n    Num.toStr x\n</code></pre></div>\n<p>The old fashion way is cleaner keeping the lambda closer to <a href=\"http://List.map\">List.map</a></p>\n<div class=\"codehilite\"><pre><span></span><code>result =\n    nums |&gt; List.map \\x -&gt; Num.toStr x\n</code></pre></div>",
        "id": 407546711,
        "sender_full_name": "Steven Chen",
        "timestamp": 1702408362
    },
    {
        "content": "<p>It definitely can read weird at times. Though works great with <code>Result.try</code> for example</p>",
        "id": 407550605,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702409738
    },
    {
        "content": "<p>I probably use it too much personally.</p>",
        "id": 407550644,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702409751
    },
    {
        "content": "<p>also we can only do one backpassing block at a time, right? because the lambda body now takes that indentation</p>",
        "id": 407551183,
        "sender_full_name": "Steven Chen",
        "timestamp": 1702409928
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/backpassing.20style.20for.20non-IO/near/407550605\">said</a>:</p>\n<blockquote>\n<p>It definitely can read weird at times. Though works great with <code>Result.try</code> for example</p>\n</blockquote>\n<p>because Result.try is a typical Monad (with my limited Haskell understanding). so it works naturally with the backpassing style (do-notation in Haskell)</p>",
        "id": 407551848,
        "sender_full_name": "Steven Chen",
        "timestamp": 1702410124
    },
    {
        "content": "<p>Just trying to point out that it works with more than just io. It works with anything monad like. Random number generation can also be nice for this.</p>",
        "id": 407552337,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702410273
    },
    {
        "content": "<p>Yes, one block at a time due to indentation.</p>",
        "id": 407552475,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702410317
    },
    {
        "content": "<p>Though you can always do:</p>\n<div class=\"codehilite\"><pre><span></span><code>task =\n        x &lt;- ...\n        y &lt;- ...\n        ...\n\n# continue on outside of that scope\n</code></pre></div>",
        "id": 407552671,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702410367
    },
    {
        "content": "<p>So one level of indentation for a whole chain of calls</p>",
        "id": 407552728,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702410385
    },
    {
        "content": "<p>gotcha. the callback chains can be one block</p>",
        "id": 407552879,
        "sender_full_name": "Steven Chen",
        "timestamp": 1702410440
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"672117\">Steven Chen</span> has marked this topic as resolved.</p>",
        "id": 408071042,
        "sender_full_name": "Notification Bot",
        "timestamp": 1702599642
    }
]