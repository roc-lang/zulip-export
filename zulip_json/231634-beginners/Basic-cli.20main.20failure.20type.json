[
    {
        "content": "<p>I've noticed the docs in <code>std::process::Command</code> for getting the exit status code produces a signed integer. We recently updated <code>basic-cli</code> to use an unsigned U32 failure value for main. It would be nice if running commands was able to produce the same error/fail type as this would make things much more \"seamless\" when using the Command module tasks within main.</p>\n<p>Is there any reason we chose unsigned over signed? Does it make sense to change to <code>main : Task {} I32</code> instead? </p>\n<h2>Rust docs</h2>\n<div class=\"codehilite\"><pre><span></span><code>pub fn code(&amp;self) -&gt; Option&lt;i32&gt;\nReturns the exit code of the process, if any.\n</code></pre></div>\n<blockquote>\n<p>In Unix terms the return value is the exit status: the value passed to exit, if the process finished by calling exit. Note that on Unix the exit status is truncated to 8 bits, and that values that didn’t come from a program’s call to exit may be invented by the runtime system (often, for example, 255, 254, 127 or 126).</p>\n</blockquote>\n<blockquote>\n<p>On Unix, this will return None if the process was terminated by a signal. ExitStatusExt is an extension trait for extracting any such signal, and other details, from the ExitStatus.</p>\n</blockquote>\n<h2>ChatGPT explanation</h2>\n<p>I also thought I might see what ChatGPT had to say about the issue.</p>\n<blockquote>\n<p>In general, programs can return both positive and negative values as exit codes. Conventionally, an exit code of 0 is used to indicate a successful execution or termination of a program. Positive exit codes are often used to represent various success or informational states, depending on the program's specific requirements or conventions.</p>\n</blockquote>\n<blockquote>\n<p>Negative exit codes, on the other hand, are typically used to indicate errors or exceptional conditions. However, the interpretation and specific meaning of negative exit codes are program-dependent. Some programs may define specific negative values to represent different types of errors or failure scenarios, while others may not use negative exit codes at all.</p>\n</blockquote>",
        "id": 368480397,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1687425321
    },
    {
        "content": "<p>interesting! I'm up for changing it to <code>I32</code> <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 368496341,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1687428450
    },
    {
        "content": "<p>Submitted PR <a href=\"https://github.com/roc-lang/basic-cli/pull/65\">#65</a> for this change. Note I think the two PR's will likely conflict, happy to merge main and update if/when required.</p>",
        "id": 368740905,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1687490572
    }
]