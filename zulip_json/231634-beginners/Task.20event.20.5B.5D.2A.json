[
    {
        "content": "<p>In this example:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kr\">main </span><span class=\"nf\">=</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">attempt</span><span class=\"w\"> </span><span class=\"nv\">processTask</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">p</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">p</span><span class=\"w\"> </span><span class=\"nv\">is</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">s</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"nv\">s</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">ReadErr</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"s\">\"Tried to read\"</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">WriteErr</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"s\">\"Tried to write\"</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Program</span><span class=\"nf\">.</span><span class=\"nv\">quick</span><span class=\"w\"></span>\n\n<span class=\"nv\">processTask</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">ReadErr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">WriteErr</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Compiler output says:</p>\n<div class=\"codehilite\"><pre><span></span><code>This 2nd argument to attempt has an unexpected type:\n...\nThe argument is an anonymous function of type:\n\n    [Err [ReadErr, WriteErr], Ok Str] -&gt;\n    Task {} * [Write [Stdout]*]* ?\n\nBut attempt needs its 2nd argument to be:\n\n    Result Str [ReadErr, WriteErr] -&gt; Task {} * [] ?\n</code></pre></div>\n<p>Let's say <code>processTask</code> doesn't produce any event, why the compiler tells me to handle others by putting <code>[]*</code>?</p>",
        "id": 303673255,
        "sender_full_name": "Ghislain",
        "timestamp": 1665591297
    },
    {
        "content": "<p>This is due to a quirk of how type checking in Roc works. We're working on making it better! But for now, in this case, <code>[]</code> means it can be used in <strong>only</strong> a place where a <code>[]</code> is expected, and nothing more than a <code>[]</code>. So you add <code>[]*</code> to say \"you can use this as a <code>[]</code>, or any tag that has more variants than <code>[]</code>\"</p>",
        "id": 303675253,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1665591978
    },
    {
        "content": "<p>Ok, thank you!</p>",
        "id": 303676416,
        "sender_full_name": "Ghislain",
        "timestamp": 1665592361
    }
]