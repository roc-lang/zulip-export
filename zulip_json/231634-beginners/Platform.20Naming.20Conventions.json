[
    {
        "content": "<p>I keep forgetting the host is part Roc. <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 307829868,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1667506323
    },
    {
        "content": "<p>Platform is, host isn't if you want to get really technical with naming. The platform is the host and the roc API.</p>",
        "id": 307868294,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1667524943
    },
    {
        "content": "<p>Cool, so Roc API + (rust/c/swift/etc) Host = Platform. <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> I guess any Roc application can only see the Roc API, so would it be a good idea/should I refer to these parts as Platform API and Platform Host?</p>",
        "id": 307870070,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1667526157
    },
    {
        "content": "<p>Generally, we just say platform when talking about things from the roc app/roc developer perspective</p>",
        "id": 307871934,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1667527722
    },
    {
        "content": "<p>yeah I wish we had a better name for the part of the platform that's written in Roc!</p>",
        "id": 307875268,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1667530457
    },
    {
        "content": "<p>the terminology we have right now is that <em>Platform</em> breaks down into two pieces:</p>\n<ol>\n<li>The <em>host</em>, which is the part of the platform that isn't written in Roc</li>\n<li>The <em>___</em>, which is the part of the platform that <em>is</em> written in Roc</li>\n</ol>\n<p>I don't know what should go in the blank though <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 307875304,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1667530505
    },
    {
        "content": "<p>Some brainstorming... <br>\nHost &lt;&gt; <strong>Framework</strong> &lt;&gt; App (like exposing common functionality)<br>\nHost &lt;&gt; <strong>Controller</strong> &lt;&gt; App (takes charge of the platform)<br>\nHost &lt;&gt; <strong>Super</strong> &lt;&gt; App (host supports the Roc api)<br>\nHost &lt;&gt; <strong>Attendant</strong> &lt;&gt; App (like hotel)<br>\nHost &lt;&gt; <strong>Gateway</strong> &lt;&gt; App (like for an API)<br>\nHost &lt;&gt; <strong>Strata</strong> &lt;&gt; App (like a geological rock layer)</p>",
        "id": 307879310,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1667533836
    },
    {
        "content": "<p>7 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"231634\" href=\"/#narrow/stream/231634-beginners/topic/Understanding.20Effects\">#beginners &gt; Understanding Effects</a> by <span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span>.</p>",
        "id": 307879349,
        "sender_full_name": "Notification Bot",
        "timestamp": 1667533893
    },
    {
        "content": "<p>Is <em>app</em> even the correct name for the thing that is built on top of a platform? In the case of a modular application, you could imagine having multiple <em>app</em>s per platform, and even multiple platforms.</p>",
        "id": 307881521,
        "sender_full_name": "David Mell",
        "timestamp": 1667535497
    },
    {
        "content": "<p>Multiple platforms doesn't really make sense with how roc works. Multiple applications on top of a single platform theoretically makes sense in roc.</p>",
        "id": 307885734,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1667538845
    },
    {
        "content": "<p>I think with roc used as a scripting language for a game, you could see multiple apps with a single platform</p>",
        "id": 307885854,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1667538959
    },
    {
        "content": "<p>Game scripting is a perfect example of a case in which you actually might want different platforms. You don't necessarily want every script to be able to do anything for pipelining reasons. Having multiple platforms also doesn't mean you can't share a large portion of the platform types.</p>",
        "id": 307888967,
        "sender_full_name": "David Mell",
        "timestamp": 1667541587
    },
    {
        "content": "<p>Just for clarity, multiple platforms doesn't really make sense because that would mean having multiple executables. So a game that is multiple platforms would have to be multiple executables, which is not normal.</p>",
        "id": 307992567,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1667577816
    },
    {
        "content": "<p>Though i guess this maybe points to wanting multiple platform exposed roc apis such that you can control what is available for each individual script written in roc.</p>",
        "id": 307992816,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1667577869
    },
    {
        "content": "<p>You don't need multiple executables. If you are going to have multiple scripts with the same platform, then you are already going to be building them as dynamic libraries.</p>\n<p>If there were to only be one script for each platform, then you could conceivably do multi-way surgery to produce a single executable.</p>",
        "id": 308008175,
        "sender_full_name": "David Mell",
        "timestamp": 1667582134
    },
    {
        "content": "<p>If you have two platforms, you have two chunks of non-roc code that are expected to generate executables. There is no way to merge those two.</p>",
        "id": 308072229,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1667607109
    },
    {
        "content": "<p>You're talking about two hosts. I'm talking about two roc platform specifications for the same host. A host can also produce a library that is used by an executable, not just the executable itself. The way I see it, a platform is a type boundary that both the host and \"app\" depend on.</p>",
        "id": 308083747,
        "sender_full_name": "David Mell",
        "timestamp": 1667616436
    },
    {
        "content": "<p>Lumping the host and platform together has problems when you think about cases where there are multiple host implementations.</p>",
        "id": 308084666,
        "sender_full_name": "David Mell",
        "timestamp": 1667617229
    },
    {
        "content": "<p>A platform is a host and a roc api. So two platforms necessarily means two hosts.</p>",
        "id": 308090388,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1667623743
    },
    {
        "content": "<p>But yes, you could have multiple roc apis and a single host theoretically.</p>",
        "id": 308090420,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1667623764
    },
    {
        "content": "<p>Also yes, two different platforms could have the exact same roc api, but different host implementations and languages. One example is a cli app and a secure cli app. For the secure cli app, all file access and what not explicitly asks for user permission when the app requests to load a file for example.</p>",
        "id": 308090543,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1667623860
    },
    {
        "content": "<p>Still exposing the same roc api, but one version the user will have a clear specification of everything the app may access.</p>",
        "id": 308090652,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1667623957
    },
    {
        "content": "<p>That said, multiple roc apis for a single host may not really make sense in practice. It would really just be one larger roc api for the single host. Though segregating the roc apis and apps would be useful in some cases.</p>",
        "id": 308090732,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1667624047
    },
    {
        "content": "<blockquote>\n<p>A host can also produce a library that is used by an executable, not just the executable itself.</p>\n</blockquote>\n<p>That is not currently possible with how roc is planned to work.</p>",
        "id": 308090797,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1667624129
    },
    {
        "content": "<p>you can produce a library with <code>--lib</code> - e.g. that's used in the <code>ruby-interop</code> example</p>",
        "id": 308091632,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1667624869
    },
    {
        "content": "<p>That is different though, that is the roc app as a dynamic library rather than surgically linking to a host that is a library that will be link to another host to become and executable</p>",
        "id": 308091867,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1667625093
    },
    {
        "content": "<p>indeed!</p>",
        "id": 308091877,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1667625107
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"519988\">David Mell</span> <a href=\"#narrow/stream/231634-beginners/topic/Platform.20Naming.20Conventions/near/307881521\">said</a>:</p>\n<blockquote>\n<p>Is <em>app</em> even the correct name for the thing that is built on top of a platform? In the case of a modular application, you could imagine having multiple <em>app</em>s per platform, and even multiple platforms.</p>\n</blockquote>\n<p>I think this will be very unusual I'm not sure what a better name would be than <em>application</em> <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> </p>\n<p>like for example the <code>roc</code> executable will someday expose functionality that relies on at least 2 different platforms:</p>\n<ul>\n<li>one for <code>roc glue</code>, where you can specify a <code>.roc</code> file to generate bindings from Roc to another programming language</li>\n<li>another for <code>roc edit</code> where you can specify editor plugins as Roc applications</li>\n</ul>\n<p>those two use cases would have totally different APIs, but they would be part of the same <code>roc</code> executable</p>",
        "id": 308091959,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1667625184
    },
    {
        "content": "<p>I guess strictly speaking, everything is just assembly and object files at the end of the day, so it is possible to make it work if really wanted. Make roc dump a bunch of object files and the manually link, but that isn't really the plan for normal roc use.</p>",
        "id": 308091962,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1667625190
    },
    {
        "content": "<p>so \"application\" is at least distinct from \"executable\" here!</p>",
        "id": 308091966,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1667625205
    },
    {
        "content": "<p>Multi-way surgery was just a thought experiment. My objection primarily has to do with the case of using roc as a scripting/plugin language as part of an application. (In my opinion, one of the most powerful use cases.) In which case, each plugin type would have a platform, and each plugin would be an \"app\". (Not to say I have figured out a better name.)</p>",
        "id": 308094030,
        "sender_full_name": "David Mell",
        "timestamp": 1667627915
    },
    {
        "content": "<p>I see. Yeah, we definitely have to work on that use case. No proof of concept has really been done. I think the goal would be: one host in another language, multiple roc platform apis, and multiple apps that match with individual platform apis.</p>",
        "id": 308158483,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1667662993
    }
]