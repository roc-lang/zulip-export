[
    {
        "content": "<p>Is there a way to get rid of the first line (the line line)?</p>\n<div class=\"codehilite\"><pre><span></span><code>parse = |line| line\n    |&gt; Str.replace_each(&quot;:&quot;, &quot; &quot;) |&gt; Str.split_on(&quot; &quot;)\n</code></pre></div>",
        "id": 518967935,
        "sender_full_name": "Tobias",
        "timestamp": 1747611296
    },
    {
        "content": "<p>not really. Roc does not support automatic partial application</p>",
        "id": 518969431,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1747612787
    },
    {
        "content": "<p>but this will be a single line in the future with Static Dispatch</p>",
        "id": 518969538,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1747612831
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"708280\">Tobias</span> <a href=\"#narrow/stream/231634-beginners/topic/Point-free.20function.20definition/near/518967935\">said</a>:</p>\n<blockquote>\n<p>Is there a way to get rid of the first line (the line line)?</p>\n<p><div class=\"codehilite\"><pre><span></span><code>parse = |line| line\n    |&gt; Str.replace_each(&quot;:&quot;, &quot; &quot;) |&gt; Str.split_on(&quot; &quot;)\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>will become</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"n\">parse</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">line</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"o\">.</span><span class=\"n\">replace_each</span><span class=\"p\">(</span><span class=\"s2\">\":\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\" \"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">split_on</span><span class=\"p\">(</span><span class=\"s2\">\" \"</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 518969757,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1747612939
    },
    {
        "content": "<p>This is v0.1 syntax</p>",
        "id": 518969790,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1747612967
    },
    {
        "content": "<p>and semantics <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 518969800,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1747612976
    },
    {
        "content": "<p>You can actually do it like this</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">parse</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"nx\">line</span><span class=\"o\">|</span>\n<span class=\"w\">    </span><span class=\"nx\">Str</span><span class=\"p\">.</span><span class=\"nx\">replace_each</span><span class=\"p\">(</span><span class=\"nx\">line</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\":\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\" \"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"p\">.</span><span class=\"nx\">split_on</span><span class=\"p\">(</span><span class=\"s\">\" \"</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>But this is the way I would write it</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nv\">parse</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"nx\">line</span><span class=\"o\">|</span>\n<span class=\"w\">    </span><span class=\"nx\">line</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"p\">.</span><span class=\"nx\">replace_each</span><span class=\"p\">(</span><span class=\"s\">\":\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\" \"</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Str</span><span class=\"p\">.</span><span class=\"nx\">split_on</span><span class=\"p\">(</span><span class=\"s\">\" \"</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 519046311,
        "sender_full_name": "Anton",
        "timestamp": 1747646147
    },
    {
        "content": "<p>I read the FAQ on currying. But I feel like pipe support is sabotaging the argument.</p>",
        "id": 519160681,
        "sender_full_name": "Tobias",
        "timestamp": 1747671546
    },
    {
        "content": "<p>Where can I read about v0.1? Curious how this works with type inference.</p>",
        "id": 519160860,
        "sender_full_name": "Tobias",
        "timestamp": 1747671586
    },
    {
        "content": "<p>That particular v0.1 feature is called static dispatch, here is the design doc:<br>\n<a href=\"https://docs.google.com/document/d/1OUd0f4PQjH8jb6i1vEJ5DOnfpVBJbGTjnCakpXAYeT8/edit?tab=t.0#heading=h.vuo6e14bvfkt\">https://docs.google.com/document/d/1OUd0f4PQjH8jb6i1vEJ5DOnfpVBJbGTjnCakpXAYeT8/edit?tab=t.0#heading=h.vuo6e14bvfkt</a></p>",
        "id": 519167592,
        "sender_full_name": "Anton",
        "timestamp": 1747673218
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"708280\">@Tobias</span> the difference between currying and pipe is that you immediately consume the partially applied function and you can't pass it around</p>",
        "id": 519179945,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1747676372
    },
    {
        "content": "<p>Thanks for the link. It doesn't mention type inference, and all the examples specify at least one module. Would the following from Anthony even compile? (without a signature)<br>\n<code>parse = |line| line.replace_each(\":\", \" \").split_on(\" \")</code></p>",
        "id": 519238638,
        "sender_full_name": "Tobias",
        "timestamp": 1747693876
    },
    {
        "content": "<p>yes.  it should by looking into the imported modules to look for one with matching functions and then infer line to be a Str</p>",
        "id": 519238967,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1747693997
    },
    {
        "content": "<p>What if that's ambiguous? IIRC that's why OCAML requires modules everywhere.</p>",
        "id": 519239418,
        "sender_full_name": "Tobias",
        "timestamp": 1747694170
    },
    {
        "content": "<p>it would first be a <code>a -&gt; c where { module(a).replace_each(Str, Str) -&gt; b, module(b).split_on(Str) -&gt; c }</code></p>",
        "id": 519239426,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1747694174
    },
    {
        "content": "<p>And then it finds that Str.replace_each matches and replaces module(a) with Str, inferring a as Str and then b as Str then we know that module(b) is Str - finding split_on in that module and inferring c to be Str.  so the final type is Str -&gt; Str</p>",
        "id": 519239795,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1747694319
    },
    {
        "content": "<p>I see. So the compiler will be as slow as Scala <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 519239832,
        "sender_full_name": "Tobias",
        "timestamp": 1747694334
    },
    {
        "content": "<p>we hope not!</p>",
        "id": 519239855,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1747694342
    },
    {
        "content": "<p>but we will see</p>",
        "id": 519239891,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1747694353
    },
    {
        "content": "<p>that inference may only happen when we try to unify</p>",
        "id": 519239954,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1747694381
    },
    {
        "content": "<p>we don't have meta programming so that will gelp</p>",
        "id": 519240059,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1747694414
    },
    {
        "content": "<p>help</p>",
        "id": 519240069,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1747694416
    },
    {
        "content": "<p>also we have a compiler in Zig not on top of the JVM</p>",
        "id": 519240108,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1747694432
    },
    {
        "content": "<p>oh that dispatch algorithm should be almost no cost</p>",
        "id": 519240856,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1747694713
    },
    {
        "content": "<p>we already have all the relevant info after normal type inference, we just need to use it in a new way during code gen</p>",
        "id": 519241067,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1747694786
    },
    {
        "content": "<p>Python has a kind of partial application for methods.</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"s2\">\"Hello\"</span><span class=\"o\">.</span><span class=\"n\">replace</span>\n<span class=\"n\">f</span><span class=\"p\">(</span><span class=\"s2\">\"l\"</span><span class=\"p\">,</span> <span class=\"s2\">\"p\"</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Do you think that's useful?</p>",
        "id": 519242777,
        "sender_full_name": "Tobias",
        "timestamp": 1747695443
    },
    {
        "content": "<p>yeah that's called a method tear off. super useful for OOP languages</p>",
        "id": 519246233,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1747696760
    },
    {
        "content": "<p>at least that's what we called them in Dart</p>",
        "id": 519246270,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1747696779
    }
]