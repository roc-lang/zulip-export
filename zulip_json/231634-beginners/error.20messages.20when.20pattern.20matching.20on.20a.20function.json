[
    {
        "content": "<p>May I suggest a change to the <code>when</code> pattern matching error messages to aid beginners?</p>\n<p>For example in the basic cli when <code>Stdin.line!</code> has not been given <code>({})</code> and the programmer tries to pattern match on the \"input\". I spent longer than I'd like to admit banging my head against errors like this:</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>This input value is a:\n\n    {} =&gt; Result Str [\n        EndOfFile,\n        StdinErr [\n            AlreadyExists,\n            BrokenPipe,\n            Interrupted,\n            NotFound,\n            Other Str,\n            OutOfMemory,\n            PermissionDenied,\n            Unsupported,\n        ],\n    ]\n\nBut the branch patterns have type:\n\n    [\n        Err *,\n        Ok *,\n    ]\n\nThe branches must be cases of the when condition's type!\n</code></pre></div>\n<p>I realize that a more experienced programmer would immediately recognize that unit on the left side of the function arrow, but as a relative newcomer it wasn't clicking. </p>\n<p>Could an \"it looks like you are trying to\" style message be added when that happens? Right now, the error message's final line  is correct, but misleading and led me to spend a long time trying to change my <code>when</code> statement branches, even though they were fine for dealing with the Result, I just wasn't pattern matching on the Result because I didn't realize that I had to give the Stdin a <code>{}</code>. </p>\n<p>There may be good reasons why someone would want to pattern match the function itself in the <code>when</code> statement, but I expect people doing that won't have any issue reading these error messages, where as those doing it by accident, intending to work on a Result, are more likely to struggle. Anyways, just an idea where a beginner might get tripped up that a different error message could quickly resolve.</p>",
        "id": 497298052,
        "sender_full_name": "Jeffrey Mudge",
        "timestamp": 1738535743
    },
    {
        "content": "<p>We can definitely say in the compiler that if one of the types is a function and the other is a value, print a message saying \"did you forget to call that function?\"</p>",
        "id": 497299556,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738536919
    },
    {
        "content": "<p>That would be a good addition</p>",
        "id": 497299564,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738536927
    },
    {
        "content": "<p>Could you help out in making a GitHub issue? Then we can throw this at someone who wants to start contributing! <a href=\"https://github.com/roc-lang/roc/issues/new?template=Blank+issue\">https://github.com/roc-lang/roc/issues/new?template=Blank+issue</a></p>",
        "id": 497299636,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738536982
    },
    {
        "content": "<p>Sure. Here you go: <a href=\"https://github.com/roc-lang/roc/issues/7570\">https://github.com/roc-lang/roc/issues/7570</a> Thanks!</p>",
        "id": 497300114,
        "sender_full_name": "Jeffrey Mudge",
        "timestamp": 1738537381
    },
    {
        "content": "<p>I do think that might still be confusing, since it looks to a novice like they've called it and are operating on a result. Since not all languages require an argument to all functions, I think an additional comment about that might be helpful if the type is <code>{} =&gt; ...</code></p>",
        "id": 497300338,
        "sender_full_name": "Jeffrey Mudge",
        "timestamp": 1738537553
    },
    {
        "content": "<p>That makes sense. Feel free to extend the issue you created with that info</p>",
        "id": 497301175,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738538195
    },
    {
        "content": "<p>For context, we just decided to rewrite the compiler in Zig, so this will need to be kept around for a few months while we do that rewrite first</p>",
        "id": 497301215,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738538240
    },
    {
        "content": "<p>Because if we implement this now in the current compiler impl, it could get lost in the rewrite, though of course we'd hope that wouldn't happen</p>",
        "id": 497301284,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1738538283
    }
]