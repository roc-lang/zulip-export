[
    {
        "content": "<p>I have the following code:</p>\n<div class=\"codehilite\"><pre><span></span><code>shiftStr = Stdin.line!\nshift &lt;- Str.toI8 shiftStr |&gt; Result.map\ndbg shift\n</code></pre></div>\n<p>and the compiler doesn’t like it, giving me a long error about a type mismatch between something which is a <code>Task ...</code> and something which is a <code>Result ...</code>. Maybe there is a section in the tutorial I’ve skipped that give an example similar to this I’m trying to do?</p>",
        "id": 437816736,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1715260281
    },
    {
        "content": "<p>Your code is nested lambdas that return both tasks and results.</p>",
        "id": 437817491,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715260630
    },
    {
        "content": "<p><a href=\"http://Result.map\">Result.map</a> returns a result</p>",
        "id": 437817506,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715260640
    },
    {
        "content": "<p>Do you have an example of how to read an integer from stdin?</p>",
        "id": 437817574,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1715260677
    },
    {
        "content": "<p>Task.await (called by <code>!</code>) returns a task/requires a task</p>",
        "id": 437817646,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715260692
    },
    {
        "content": "<p>So they aren't capatible</p>",
        "id": 437817688,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715260712
    },
    {
        "content": "<p><a href=\"https://www.roc-lang.org/packages/basic-cli/Task#fromResult\">https://www.roc-lang.org/packages/basic-cli/Task#fromResult</a> should help</p>",
        "id": 437818044,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715260874
    },
    {
        "content": "<p><code>shift = Str.toI8 shiftStr |&gt; Task.fromResult!</code></p>",
        "id": 437818124,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715260914
    },
    {
        "content": "<p>That will let you just accumulate the errors</p>",
        "id": 437818193,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715260932
    },
    {
        "content": "<p>Could also just use a raw <code>when ... is</code> on the result.</p>",
        "id": 437818230,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715260949
    },
    {
        "content": "<p>Thanks ok. I was trying the exercise of having all in one indentation. This seems to work</p>\n<div class=\"codehilite\"><pre><span></span><code>shiftStr = Stdin.line!\nshift &lt;- Str.toI8 shiftStr |&gt; Task.fromResult |&gt; Task.await\n</code></pre></div>",
        "id": 437818629,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1715261122
    },
    {
        "content": "<p>Mainly to just not care about the error path</p>",
        "id": 437818813,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1715261186
    },
    {
        "content": "<p>This version works too</p>\n<div class=\"codehilite\"><pre><span></span><code>    shiftStr = Stdin.line!\n    shift = (Str.toI8 shiftStr |&gt; Task.fromResult)!\n</code></pre></div>",
        "id": 437818972,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1715261265
    },
    {
        "content": "<p>The parens are required in that last example? If so, pretty sure that is a bug in the <code>!</code> desugaring</p>",
        "id": 437848655,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715272093
    },
    {
        "content": "<p>yes the parens are required</p>",
        "id": 437851952,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1715273464
    },
    {
        "content": "<p>yeah should be able to do <code>|&gt; Task.fromResult!</code> instead, sounds like a bug <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 437856462,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1715275265
    },
    {
        "content": "<p>I would advise against mixing <code>!</code> and <code>&lt;-</code> (backpassing) in the same code unless you're very experienced with both. We may get rid of backpassing in favor of <code>!</code>.</p>",
        "id": 437949879,
        "sender_full_name": "Anton",
        "timestamp": 1715332009
    },
    {
        "content": "<p>Does anyone know why specifically the initial version doesn't compile?  I thought syntactically it is valid?</p>\n<p>Matthieu, are there any other statements after dbg in your original code? If not, maybe the body of the function is incomplete - you declare a backpassed argument, but then you might have no statements which I think is invalid syntax, you would atleast need to return something, e.g. that argument</p>",
        "id": 437968125,
        "sender_full_name": "Karakatiza",
        "timestamp": 1715341078
    },
    {
        "content": "<p><code>Result.map</code> returns a Result</p>",
        "id": 437975601,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715344801
    },
    {
        "content": "<p><code>Task.await</code> requires an inner function that returns a Task</p>",
        "id": 437975682,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715344822
    },
    {
        "content": "<p>So it is a type mismatch</p>",
        "id": 437975702,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1715344836
    },
    {
        "content": "<p>Speaking of mixing back passing and bang syntax, I discovered a bug where using the bang operator in a when block causes a compiler panic, but back passing does not. Haven’t got a min repo yet though, so haven’t determined for sure that it’s related to the when.</p>",
        "id": 437995026,
        "sender_full_name": "Ian McLerran",
        "timestamp": 1715352661
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"654587\">Karakatiza</span> <a href=\"#narrow/stream/231634-beginners/topic/How.20to.20use.20Stdin.2Eline.20and.20a.20function.20returning.20a.20result.20aftr/near/437968125\">said</a>:</p>\n<blockquote>\n<p>Does anyone know why specifically the initial version doesn't compile?  I thought syntactically it is valid?</p>\n<p>Matthieu, are there any other statements after dbg in your original code? If not, maybe the body of the function is incomplete - you declare a backpassed argument, but then you might have no statements which I think is invalid syntax, you would atleast need to return something, e.g. that argument</p>\n</blockquote>\n<p>yep, as Brendan says, it was a type mismatch between a Result and a Task</p>",
        "id": 437999170,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1715354189
    }
]