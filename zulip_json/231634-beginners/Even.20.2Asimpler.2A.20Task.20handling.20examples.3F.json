[
    {
        "content": "<p>Hello!</p>\n<p>I've been through the tutorial, and looked a bit at the basic-cli examples in the repo, but am struggling to get a handle on (among other things) Tasks. I'm starting Advent of Code (I know there's a dedicated stream, but this seems too basic and generic to fit there), and my first tiny goal is simply reading a text file into a (what I would normally call 'variable' but I think in roc is a) 'def' (same term for variable and function? because in each case it's an expression that gets evaluated to a value?).</p>\n<p>I don't really get why tasks are a special thing with special syntax, and need for await and attempt usage, rather than just being able to use a sequence of assignments, of Result type.</p>\n<p>So I'm looking at something like:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">getLedger</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"></span>\n<span class=\"nv\">getLedger</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">filepath</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">attempt</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">File</span><span class=\"nf\">.</span><span class=\"nv\">readUtf8</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Path</span><span class=\"nf\">.</span><span class=\"nv\">fromStr</span><span class=\"w\"> </span><span class=\"nv\">filepath</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">result</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">result</span><span class=\"w\"> </span><span class=\"nv\">is</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">err</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"s\">\"UH OH\"</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">data</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">data</span><span class=\"w\"></span>\n</code></pre></div>\n<p>But that's not right, because I'm apparently getting <code>InternalTask.Task c d</code> at the end of it, not a <code>Str</code>. I don't know what that kind of <code>Task</code> is, I thought <code>Task</code> wasn't part of roc internals. So I'm looking at the <code>attempt</code> docs from the basic-cli platform:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">attempt</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Result</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nv\">d</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"nv\">d</span><span class=\"w\"></span>\n</code></pre></div>\n<p>So that's saying <code>attempt</code> takes a <code>Task</code> parameter, and . . . a function (?) that itself takes a <code>Result</code> and returns a <code>Task</code>, and then the <code>attempt</code> function returns a <code>Task</code>? And that returned task has two payload values... and in this case <code>a</code> is maybe the <code>Path</code>type from the platform, and <code>b</code> is maybe a union of error types, and then I realize that I don't know how to match properly on this and can't keep track of what all these single letters mean, and my brain suddenly feels very tired.</p>\n<p>So I think I will take a break and re-read the tutorial later, but welcome any tips regarding my many misunderstandings, and any examples of Task... unwrapping/handling that is even simpler than those in the tutorial and the basic-cli example.</p>",
        "id": 313379028,
        "sender_full_name": "Andy Kluger",
        "timestamp": 1669929415
    },
    {
        "content": "<p>Someone else can probably answer this better/more theoretically, but I will try to give a general answer.</p>\n<p>The simplified direct answer first:</p>\n<p>Roc is a pure functional language that is not allowed to have side effects. Reading a file in most languages is a a side effect. If Roc could just read a file and return the result, it would no longer be pure and would lose the many benefits that come with being a pure language.<br>\nInstead of performing side effects, Roc returns a chain of Tasks. The platform then is responsible for executing the chain of tasks and calling the roc callbacks with the data that it loads.</p>",
        "id": 313386157,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1669931983
    },
    {
        "content": "<p>Your understanding of <code>attempt</code> is correct - it's saying \"give me a <code>Task</code> that produces an <code>a</code> or an error <code>b</code>. Also, once I evaluate the task at runtime and get its Result, which is either the value <code>a</code> or the error <code>b</code>, give me a way to transform that into another Task I can run, that produces any other value <code>c</code> or error <code>d</code>. And I'll give you back a Task to chain those two operations together\"</p>",
        "id": 313387075,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1669932293
    },
    {
        "content": "<p>In the case of <code>getLedger</code>, for example, you want to read a file. This means that you want to return a <code>Task</code> that can latter be chained from and used. It could be written like (note untested code):</p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">getLedger</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Str</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"w\"> </span><span class=\"nc\">Str</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"c1\"># No error type because we turn the error case to the \"UH OH\" string.</span><span class=\"w\"></span>\n<span class=\"n\">getLedger</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">filepath</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">attempt</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">File</span><span class=\"o\">.</span><span class=\"n\">readUtf8</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nc\">Path</span><span class=\"o\">.</span><span class=\"n\">fromStr</span><span class=\"w\"> </span><span class=\"n\">filepath</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"ow\">when</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nc\">Err</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">succeed</span><span class=\"w\"> </span><span class=\"s2\">\"UH OH\"</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nc\">Ok</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"o\">.</span><span class=\"n\">succeed</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"></span>\n</code></pre></div>\n<p><code>getLedger</code> is now a function that takes a string and returns a <code>Task</code> that contains a string.<br>\nThis can now be used in some other function. Something like:</p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"n\">printLedger</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Task</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"></span>\n<span class=\"n\">printLedger</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">await</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"n\">getLedger</span><span class=\"w\"> </span><span class=\"s2\">\"ledger.txt\"</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nc\">Stdout</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Eventually, this all has to bubble up to main, which will return a task to the platform to get executed.</p>",
        "id": 313387193,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1669932343
    },
    {
        "content": "<p>amazing, thank you. I read this and will read it again when I'm back at a computer.</p>",
        "id": 313392174,
        "sender_full_name": "Andy Kluger",
        "timestamp": 1669934158
    },
    {
        "content": "<p>Hello all!</p>\n<p>I wanted to try Roc for the Advent of Code, and ran into an issue trying to run the Hello world:</p>\n<div class=\"codehilite\"><pre><span></span><code>roc dev\n── FILE NOT FOUND ──────────────────────────────────────────────── UNKNOWN.roc ─\n\nI am looking for this file, but it&#39;s not there:\n\n    https://github.com/roc-lang/basic-cli/releases/download/0.1.1/zAoiC9xtQPHywYk350_b7ust04BmWLW00sjb9ZPtSQk.tar.br\n\nIs the file supposed to be there? Maybe there is a typo in the file\nname?%\n</code></pre></div>",
        "id": 313451503,
        "sender_full_name": "Jordane Grenat",
        "timestamp": 1669971126
    },
    {
        "content": "<p>apparently there is a copy between file systems that  does not work on mac? there is a thread with details somewhere</p>",
        "id": 313452011,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1669971317
    },
    {
        "content": "<p>this call fails <a href=\"https://github.com/roc-lang/roc/blob/2a27d3c05f7974adf87e782704eab8d43c80652e/crates/packaging/src/cache.rs#L74\">https://github.com/roc-lang/roc/blob/2a27d3c05f7974adf87e782704eab8d43c80652e/crates/packaging/src/cache.rs#L74</a></p>",
        "id": 313452218,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1669971383
    },
    {
        "content": "<p>here is the thread <a href=\"#narrow/stream/358903-Advent-of-Code/topic/Setting.20up.20environment.20.28nix.29/near/313301198\">https://roc.zulipchat.com/#narrow/stream/358903-Advent-of-Code/topic/Setting.20up.20environment.20.28nix.29/near/313301198</a></p>",
        "id": 313452381,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1669971454
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span> I don't think there is anything wrong with that call. I believe this is because <span class=\"user-mention\" data-user-id=\"569776\">@Jordane Grenat</span> is using a MacOS x86_64 nightly release. Those have been lagging behind due to an unresolved test failure.</p>\n<p><span class=\"user-mention\" data-user-id=\"569776\">@Jordane Grenat</span> I've posted a workaround here: <a href=\"https://github.com/roc-lang/roc/issues/4655\">https://github.com/roc-lang/roc/issues/4655</a></p>",
        "id": 313477250,
        "sender_full_name": "Anton",
        "timestamp": 1669980098
    }
]