[
    {
        "content": "<p>how do i sequence multiple Stdout.line programmably? e.g. print a list of names with <code>Stdout.line \"hello \\(name)\"</code>. IIUC, backpassing is still callback and can only sequence pre-defined effects</p>",
        "id": 407345048,
        "sender_full_name": "Steven Chen",
        "timestamp": 1702341520
    },
    {
        "content": "<p>Ok. Here is what I made...is there a better way?</p>\n<div class=\"codehilite\"><pre><span></span><code>Task.loop 0 \\i -&gt;\n        if i &lt; List.len names then\n            _ &lt;- Stdout.line &quot;hello \\(List.get names i |&gt; Result.withDefault &quot;Unwrap&quot;)&quot; |&gt; Task.await\n            Task.ok (Step (i + 1))\n        else\n            Task.ok (Done {})\n</code></pre></div>",
        "id": 407355931,
        "sender_full_name": "Steven Chen",
        "timestamp": 1702346835
    },
    {
        "content": "<p>I would do it like this:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"w\">    </span><span class=\"nv\">names</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"a\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"b\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"c\"</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"nv\">printNames</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">        </span><span class=\"nx\">prevTask</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">name</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">walk</span><span class=\"w\"> </span><span class=\"nx\">names</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">ok</span><span class=\"w\"> </span><span class=\"p\">{})</span>\n<span class=\"w\">        </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">prevTask</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">await</span>\n<span class=\"w\">        </span><span class=\"nx\">Stdout</span><span class=\"p\">.</span><span class=\"nx\">line</span><span class=\"w\"> </span><span class=\"s\">\"Next name was: \\(name)\"</span>\n\n<span class=\"w\">    </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">printNames</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">await</span>\n<span class=\"w\">    </span><span class=\"nx\">Stdout</span><span class=\"p\">.</span><span class=\"nx\">line</span><span class=\"w\"> </span><span class=\"s\">\"All done!\"</span>\n</code></pre></div>",
        "id": 407357277,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702347478
    },
    {
        "content": "<p><code>Task.loop</code> also works, but I would use <code>List.get</code> directly and avoid the <code>withDefault</code>. Something like:</p>\n<div class=\"codehilite\" data-code-language=\"CoffeeScript\"><pre><span></span><code><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">loop</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"nx\">i</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"k\">when</span><span class=\"w\"> </span><span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"w\"> </span><span class=\"nx\">names</span><span class=\"w\"> </span><span class=\"nx\">i</span><span class=\"w\"> </span><span class=\"o\">is</span>\n<span class=\"w\">            </span><span class=\"nx\">Ok</span><span class=\"w\"> </span><span class=\"nx\">name</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"nx\">Stdout</span><span class=\"p\">.</span><span class=\"nx\">line</span><span class=\"w\"> </span><span class=\"s\">\"hello \\(name)\"</span><span class=\"w\"> </span><span class=\"o\">|&gt;</span><span class=\"w\"> </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">await</span>\n<span class=\"w\">                </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">ok</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Step</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"w\">            </span><span class=\"nx\">Err</span><span class=\"w\"> </span><span class=\"nx\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                </span><span class=\"nx\">Task</span><span class=\"p\">.</span><span class=\"nx\">ok</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">Done</span><span class=\"w\"> </span><span class=\"p\">{})</span>\n</code></pre></div>",
        "id": 407357695,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702347616
    },
    {
        "content": "<p>once we have <code>Task</code> as a builtin, I like the idea of having helpers for that <code>List.walk</code> version, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">forEach</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"nv\">elem</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">elem</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"nv\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"nv\">err</span>\n</code></pre></div>",
        "id": 407360914,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1702348466
    },
    {
        "content": "<p>Thanks Brendan! I was originally expecting of the former one (but missed a few bits)</p>",
        "id": 407360967,
        "sender_full_name": "Steven Chen",
        "timestamp": 1702348483
    },
    {
        "content": "<p>and if any of them errors, the whole thing errors</p>",
        "id": 407360973,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1702348485
    },
    {
        "content": "<p>Who doesnâ€™t like Monad</p>",
        "id": 407361320,
        "sender_full_name": "Steven Chen",
        "timestamp": 1702348575
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/231634-beginners/topic/how.20to.20sequence.20side.20effects/near/407360914\">said</a>:</p>\n<blockquote>\n<p>once we have <code>Task</code> as a builtin</p>\n</blockquote>\n<p>I can't remember if it was an episode of your podcast or the Roc documentation, but I thought <code>Task</code> wasn't a builtin by design. Is the plan that there's a standard <code>Task</code> interface which the platform authors must implement? Or rather, is there a feature request / issue I can find to learn more?</p>",
        "id": 407375325,
        "sender_full_name": "Fletch Canny",
        "timestamp": 1702353369
    },
    {
        "content": "<p>So the individual <code>Task</code>s will always be implemented by a platform, but the actual wrapper that deal with success, failure, and how exactly data is exposed to the host will be changed to be a builtin.</p>",
        "id": 407378286,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702354472
    },
    {
        "content": "<p>The main reasons are:</p>\n<ol>\n<li>We want to change to an effect interpreting state machine</li>\n<li>Certain functions we want Tasks to be able to support are impossible to define within roc itself. So we need some compiler/builtin magic.</li>\n</ol>",
        "id": 407378435,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702354536
    },
    {
        "content": "<p><a href=\"#narrow/stream/304641-ideas/topic/Task.20as.20builtin/near/363187595\">https://roc.zulipchat.com/#narrow/stream/304641-ideas/topic/Task.20as.20builtin/near/363187595</a></p>",
        "id": 407378626,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702354593
    },
    {
        "content": "<p>Also the design proposal may be of interest <a href=\"https://github.com/lukewilliamboswell/roc-awesome?tab=readme-ov-file#task-as-builtin\">https://github.com/lukewilliamboswell/roc-awesome?tab=readme-ov-file#task-as-builtin</a></p>",
        "id": 407396990,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1702362241
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/how.20to.20sequence.20side.20effects/near/407378435\">said</a>:</p>\n<blockquote>\n<p>The main reasons are:</p>\n<ol>\n<li>We want to change to an effect interpreting state machine</li>\n<li>Certain functions we want Tasks to be able to support are impossible to define within roc itself. So we need some compiler/builtin magic.</li>\n</ol>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"515757\">Luke Boswell</span> <a href=\"#narrow/stream/231634-beginners/topic/how.20to.20sequence.20side.20effects/near/407396990\">said</a>:</p>\n<blockquote>\n<p>Also the design proposal may be of interest <a href=\"https://github.com/lukewilliamboswell/roc-awesome?tab=readme-ov-file#task-as-builtin\">https://github.com/lukewilliamboswell/roc-awesome?tab=readme-ov-file#task-as-builtin</a></p>\n</blockquote>\n<p>Thanks guys that's exactly what I was looking for!</p>",
        "id": 407463736,
        "sender_full_name": "Fletch Canny",
        "timestamp": 1702383895
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/how.20to.20sequence.20side.20effects/near/407378435\">said</a>:</p>\n<blockquote>\n<p>The main reasons are:</p>\n<ol>\n<li>We want to change to an effect interpreting state machine</li>\n<li>Certain functions we want Tasks to be able to support are impossible to define within roc itself. So we need some compiler/builtin magic.</li>\n</ol>\n</blockquote>\n<p>Off-topic, but I wonder how <code>Task</code>s are currently being represented and interpreted by the platform? Is there a document I can read or term I can google to learn more about this topic?</p>",
        "id": 407555014,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1702411080
    },
    {
        "content": "<p>Currently, roc kinda manually generates a bunch of glue that is essentially a linearized version of the program where roc has all of the control and the platform has none.</p>",
        "id": 407564655,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702414255
    },
    {
        "content": "<p>As a result, the platforms can't really do anything async or otherwise decide when/how roc executes.</p>",
        "id": 407564742,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702414284
    },
    {
        "content": "<p>Ah, gotcha! Thanks</p>",
        "id": 407810962,
        "sender_full_name": "Sven van Caem",
        "timestamp": 1702501865
    }
]