[
    {
        "content": "<p>hi I can sort of imagine answers to these questions but I'm not sure,</p>\n<p>would it work to compile roc code at runtime and load it into the platform?</p>\n<p>I get that the application can only have one platform, can the platform run many copies of one or more applications?</p>\n<p>how best can I determine the possible functions and values I could use while implementing a platform? right now I would guess I'd copy one of templates or platforms and then guess and check?</p>\n<p>thanks you!</p>",
        "id": 527340752,
        "sender_full_name": "Drewry Pope",
        "timestamp": 1751800756
    },
    {
        "content": "<blockquote>\n<p>would it work to compile roc code at runtime and load it into the platform?</p>\n</blockquote>\n<p>Yes. Though you need <code>roc</code>accessible as an executable or I guess linked into the platform. You can have roc create a shared library and then load that dynamically at runtime.</p>\n<blockquote>\n<p>can the platform run many copies of one or more applications?</p>\n</blockquote>\n<p>It should be possible but has not be done yet. This likely would require specialized loading and would not fit the standard roc process.</p>\n<blockquote>\n<p>how best can I determine the possible functions and values I could use while implementing a platform?</p>\n</blockquote>\n<p>I'm not sure what this is asking.</p>",
        "id": 527360700,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1751822811
    },
    {
        "content": "<blockquote>\n<p>I get that the application can only have one platform, can the platform run many copies of one or more applications?</p>\n</blockquote>\n<p>I would think of this as the embedded use-case which we definitely want to support. </p>\n<p>Think of something like a big game engine or editor, it might use lot's of different Roc apps for scripting various functionality. </p>\n<p>Roc would be a nice friendly high-level language that users can write code it, but still have excellent performance and integration with the underlying engine in a safe/secure way.</p>\n<p>Instead of having a heavy boundary interface like a WASM runtime, the engine or editors is just calling roc using plain old functions compiled to (optimized) machine code.</p>",
        "id": 527376253,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1751839639
    },
    {
        "content": "<p>thank you both. I understand the language has changed somewhat over time, is there a platform repo updated to the latest styles that I could learn from?</p>",
        "id": 527462277,
        "sender_full_name": "Drewry Pope",
        "timestamp": 1751889336
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"747334\">@Drewry Pope</span>,<br>\n<a href=\"https://github.com/roc-lang/basic-cli\">basic-cli</a> and <a href=\"https://github.com/roc-lang/basic-webserver\">basic-webserver</a> are the most up to date, tested and well featured platforms.</p>\n<p>Here are some more exotic (also up to date) platform configurations:<br>\n<a href=\"https://www.roc-lang.org/examples/ElmWebApp/README.html\">https://www.roc-lang.org/examples/ElmWebApp/README.html</a><br>\n<a href=\"https://github.com/niclas-ahden/joy\">https://github.com/niclas-ahden/joy</a> (only tested on linux x64)<br>\n<a href=\"https://www.roc-lang.org/examples/GoPlatform/README.html\">https://www.roc-lang.org/examples/GoPlatform/README.html</a> (only works on linux x64)<br>\n<a href=\"https://www.roc-lang.org/examples/DotNetPlatform/README.html\">https://www.roc-lang.org/examples/DotNetPlatform/README.html</a> (only works on linux x64)</p>",
        "id": 527463868,
        "sender_full_name": "Anton",
        "timestamp": 1751889854
    },
    {
        "content": "<p>thank you!</p>",
        "id": 527463996,
        "sender_full_name": "Drewry Pope",
        "timestamp": 1751889897
    },
    {
        "content": "<p>hi again I have another question, I'm still working through running existing platforms and rebuilding hello world and other simple apps again and again design phase. one thing I want to do, is run other people's roc code in containers on a vps. one day dynamic loading or whatever magic but today I can just compile it and throw it in a container.</p>\n<p>I mention this because I'm not so worried about someone escaping roc/container/vm into network as I am about content policy for code creators or guests in their code playground.</p>\n<p>what I'm interested in is whether there are any designs around inspecting roc at runtime? not like today, just trying to understand if this makes sense or is totally out of scope so I can plan. I plan to test io to start that is given. maybe I can write my own roc code in the platform package, they would have to run that roc code right? still would be io limited.</p>\n<p>I'm pretty sure variable names are erased at compile but would there be any way to \"inspect\" a roc program maybe specifically during a host io function basically getting the stack frame breakpoint info,</p>\n<p>4 ints and a str in global space and values<br>\n2 args and their values<br>\nfunction local and it's value<br>\netc</p>\n<p>maybe a debug build/literally breakpoints but I was thinking more during release runtime host can audit as needed</p>\n<p>anyways I'll try to stick to more immediate concerns for a while and not drop a bunch of random thoughts <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 527789204,
        "sender_full_name": "Drewry Pope",
        "timestamp": 1752020535
    },
    {
        "content": "<p>Richard gave a talk once with a Roc demo where you can approve network calls to specific website on a case by case basis. Can someone provide a link for that, I can't find it.  That may be close to what you're talking about <span class=\"user-mention\" data-user-id=\"747334\">@Drewry Pope</span>.</p>",
        "id": 527853695,
        "sender_full_name": "Anton",
        "timestamp": 1752055939
    },
    {
        "content": "<p>With the new compiler we'll also be making a Roc interpreter, it is likely we'll give it advanced inspection abilities.</p>",
        "id": 527853937,
        "sender_full_name": "Anton",
        "timestamp": 1752056008
    },
    {
        "content": "<p>For now, if you build your program with <code>roc build main.roc --linker=legacy</code> you'll get access to better debug info. I also recommend <code>roc build main.roc --emit-llvm-ir</code> and inspecting the main.ll file that was created, so you can see which function names you can track with gdb or lldb. The .ll file can also help you get a better understanding how a Roc program is translated to a low level IR.</p>",
        "id": 527854771,
        "sender_full_name": "Anton",
        "timestamp": 1752056249
    },
    {
        "content": "<p>Giving people advanced control over the program's access to files, sending requests to websites and sensitive operations in general is something we'd like to experiment with.</p>",
        "id": 527856199,
        "sender_full_name": "Anton",
        "timestamp": 1752056703
    },
    {
        "content": "<p>I think this is the talk?</p>\n<p><a href=\"https://youtu.be/cpQwtwVKAfU?si=URrb-iDm9vqFdQBp\">https://youtu.be/cpQwtwVKAfU?si=URrb-iDm9vqFdQBp</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"cpQwtwVKAfU\" href=\"https://youtu.be/cpQwtwVKAfU?si=URrb-iDm9vqFdQBp\"><img src=\"https://uploads.zulipusercontent.net/4efb5aa870c78fc9cd1110301033e3a37f741b0e/68747470733a2f2f692e7974696d672e636f6d2f76692f637051777477564b4166552f6d7164656661756c742e6a7067\"></a></div>",
        "id": 527857024,
        "sender_full_name": "Kiryl Dziamura",
        "timestamp": 1752056987
    },
    {
        "content": "<p>Yes, that's the one, thanks <span class=\"user-mention\" data-user-id=\"584248\">@Kiryl Dziamura</span> :)</p>",
        "id": 527857420,
        "sender_full_name": "Anton",
        "timestamp": 1752057120
    },
    {
        "content": "<blockquote>\n<p>what I'm interested in is whether there are any designs around inspecting roc at runtime?</p>\n</blockquote>\n<p>One thing that comes to mind, is that Roc doesn't have a runtime ... AFAIK we compile the app down to plain old functions and data. So there isn't really anything Roc would do in this regard. </p>\n<p>OTOH the platform has all the control, and calls into Roc passing in various function pointers for IO and things like allocation. So there is nothing stopping a platform author from implementing some cool runtime inspection features.</p>",
        "id": 527857462,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752057135
    },
    {
        "content": "<blockquote>\n<p>I'm pretty sure variable names are erased at compile but would there be any way to \"inspect\" a roc program maybe specifically during a host io function basically getting the stack frame breakpoint info,</p>\n</blockquote>\n<p>You could objdump the static library or object file roc produces.</p>",
        "id": 527857764,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752057232
    },
    {
        "content": "<p>Also in case you haven't seen it, we have some nice debugging tooling that produces our snapshot files. You can see the syntax and semantic analysis in an s-expression format.</p>\n<p><a href=\"https://github.com/roc-lang/roc/blob/c02e047cae8244bc4ecf16806d65ebe3ccee28a2/src/snapshots/hello_world.md#canonicalize\">https://github.com/roc-lang/roc/blob/c02e047cae8244bc4ecf16806d65ebe3ccee28a2/src/snapshots/hello_world.md#canonicalize</a></p>",
        "id": 527857983,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1752057311
    }
]