[
    {
        "content": "<p>I’m seeing some compiler hangs and just want to verify some assumptions. Are cycles in module imports allowed? How about cycles in data structure definitions?</p>",
        "id": 259321471,
        "sender_full_name": "Brian Hicks",
        "timestamp": 1635377752
    },
    {
        "content": "<p>cycles in imports aren't allowed</p>",
        "id": 259324776,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1635380457
    },
    {
        "content": "<p>cycles in type aliases are only allowed within tag unions</p>",
        "id": 259324796,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1635380477
    },
    {
        "content": "<p>as far as I know they aren't allowed anywhere else!</p>",
        "id": 259324805,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1635380496
    },
    {
        "content": "<p>cool cool cool. Would you expect an import cycle to have given an error right now or is that a TODO? This is in platform code for rbt so maybe it’s being special-cased somehow?</p>",
        "id": 259325618,
        "sender_full_name": "Brian Hicks",
        "timestamp": 1635381239
    },
    {
        "content": "<p>yeah we have an explicit error for that one</p>",
        "id": 259325796,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1635381381
    },
    {
        "content": "<p>with the fancy box art like Elm does <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 259325806,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1635381397
    },
    {
        "content": "<p>I think we have a general problem in file loading for \"file not found\" leads to a hang</p>",
        "id": 259325837,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1635381436
    },
    {
        "content": "<p>I think the reason for this is that instead of a worker reporting that it finished and failed, it instead doesn't report at all - so other worker(s) wait for it forever</p>",
        "id": 259325934,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1635381500
    },
    {
        "content": "<p>cool. I bet I can smoosh all these data types into one module and be fine</p>",
        "id": 259326974,
        "sender_full_name": "Brian Hicks",
        "timestamp": 1635382440
    },
    {
        "content": "<p>as far as the other thing, the current design for rbt has Job -&gt; Command -&gt; Tool -&gt; Job. Reckon that can be accommodated or nah? Not familiar enough with the tagged stuff yet to know if it’s reasonable</p>",
        "id": 259327090,
        "sender_full_name": "Brian Hicks",
        "timestamp": 1635382528
    },
    {
        "content": "<p>anything you can do with an ADT you can do with a closed tag union, so should be fine!</p>",
        "id": 259327687,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1635382950
    },
    {
        "content": "<p>phantom types currently work a little differently, but I assume they won't come up here</p>",
        "id": 259327733,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1635382994
    },
    {
        "content": "<p>well, those 3 types are not in the same union. Am I understanding that’s required?</p>",
        "id": 259328774,
        "sender_full_name": "Brian Hicks",
        "timestamp": 1635384077
    },
    {
        "content": "<p>nah, so like</p>",
        "id": 259332299,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1635387817
    },
    {
        "content": "<p>in Elm you'd write <code>type Result ok err = Ok ok | Err err</code> and in Roc you'd write <code>Result ok err : [ Ok ok, Err err ]</code></p>",
        "id": 259332382,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1635387912
    },
    {
        "content": "<p>in either case you still do <code>Ok 5</code> and <code>Err \"blah\"</code> to make one, and you pattern match to destructure them in the same way</p>",
        "id": 259332460,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1635387973
    },
    {
        "content": "<p>you <em>can</em> use tags in other ways than this, but this is how to use them to basically be ADTs</p>",
        "id": 259332476,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1635388005
    },
    {
        "content": "<p>so an easy way to get started with them is to write what you'd write in Elm, then do the syntactic translation I showed above, and everything will work pretty much the same way you're used to unless you want to make a recursive one or a phantom type! <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 259332601,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1635388098
    },
    {
        "content": "<p>got it. Here's where I've ended up. Do you see anything in this module that would make this error happen? (I figure you might since we were looking at it yesterday) <a href=\"https://github.com/rtfeldman/rbt/pull/15#issuecomment-953756395\">https://github.com/rtfeldman/rbt/pull/15#issuecomment-953756395</a></p>",
        "id": 259373919,
        "sender_full_name": "Brian Hicks",
        "timestamp": 1635420580
    },
    {
        "content": "<p>ahhh I think this might be <a href=\"https://github.com/rtfeldman/roc/issues/1642\">https://github.com/rtfeldman/roc/issues/1642</a></p>",
        "id": 259375491,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1635421675
    },
    {
        "content": "<p>try defining <code>Tool</code> higher in the file than <code>Command</code></p>",
        "id": 259375618,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1635421737
    },
    {
        "content": "<p>and <code>Command</code> higher than <code>Job</code></p>",
        "id": 259375654,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1635421759
    },
    {
        "content": "<p>ahh, ok. It happens when they’re tag unions too. I guess they use the same mechanism?</p>",
        "id": 259379400,
        "sender_full_name": "Brian Hicks",
        "timestamp": 1635423660
    },
    {
        "content": "<p>oh so <code>Foo : ...</code> is Roc's syntax for type aliases - it's equivalent to <code>type alias Foo = ...</code> in Elm</p>",
        "id": 259379576,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1635423762
    },
    {
        "content": "<p>so all of those type definitions involving tag unions are type aliases <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 259379602,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1635423777
    },
    {
        "content": "<p>that's what I thought. OK, let's see how far I can get now <span aria-label=\"smiling devil\" class=\"emoji emoji-1f608\" role=\"img\" title=\"smiling devil\">:smiling_devil:</span></p>",
        "id": 259383794,
        "sender_full_name": "Brian Hicks",
        "timestamp": 1635425910
    }
]