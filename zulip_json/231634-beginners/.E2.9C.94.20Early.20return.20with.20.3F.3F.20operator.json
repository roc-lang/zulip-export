[
    {
        "content": "<p>Hello,</p>\n<p>Is something like the following possible?</p>\n<div class=\"codehilite\"><pre><span></span><code>solve = |so_far, vals, ops|\n    first = List.first(vals) ?? return so_far\n    ...\n    # continue working with first\n</code></pre></div>\n<p>If I try this currently, I get:</p>\n<div class=\"codehilite\"><pre><span></span><code>── TRAILING OPERATOR in 7.roc ──────────────────────────────────────────────────\n\nI am partway through parsing an expression, but I got stuck here:\n\n38│          first = List.first(vals) ?? return so_far\n                                         ^\n\nTODO provide more context.\n</code></pre></div>\n<p>Currently using the following:</p>\n<div class=\"codehilite\"><pre><span></span><code>        first = if List.len(vals) == 0 then\n            return so_far\n        else\n            List.first(vals) ?? crash &quot;expected non-empty list&quot;\n\n        ...\n        # continue using first\n</code></pre></div>\n<p>But was wondering if it could be shortened to the previously mentioned expression.</p>",
        "id": 502317859,
        "sender_full_name": "hchac",
        "timestamp": 1740671336
    },
    {
        "content": "<p>I don’t think so, return is not an expression</p>",
        "id": 502319719,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740671782
    },
    {
        "content": "<p>It is a keyword and more similar to a statement</p>",
        "id": 502319819,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740671807
    },
    {
        "content": "<p>But i know we’ve talked about else-less ifs when the if has a return is after then</p>",
        "id": 502320107,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740671879
    },
    {
        "content": "<p>I see, was hoping the compiler could work some magic in the event of early-return even if an expression is expected since it would clean up my currently working attempt (List.len in an if followed by List.first in one of the branches).</p>\n<p>Maybe there's some other cleaner away I could do the same without additional nesting. Basically just want to grab the first element of the list and continue working, otherwise if it's empty return what exists so far.</p>\n<p>I may be still thinking about this too much in the imperative mindset (early returns when conditions aren't what we want).</p>\n<p>Thanks.</p>",
        "id": 502321783,
        "sender_full_name": "hchac",
        "timestamp": 1740672272
    },
    {
        "content": "<p>I would typically do a when..is on List.first here</p>",
        "id": 502325343,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740673250
    },
    {
        "content": "<p>Or not even List.first, just when..is, destructuring the list</p>",
        "id": 502325446,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740673280
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>when vals is\n    [] -&gt; crash “….”\n    [first, .. as rest] -&gt;\n        # continue using first\n</code></pre></div>",
        "id": 502326232,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740673488
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"881564\">@hchac</span> ^</p>",
        "id": 502326268,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740673499
    },
    {
        "content": "<p>Oh!  You can also just do</p>\n<div class=\"codehilite\"><pre><span></span><code>first = List.first(vals)?\n# Continue using first\n</code></pre></div>\n<p>Which is what you want - no need to check length and no block or indentation</p>",
        "id": 502326997,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740673689
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"781658\">Anthony Bullard</span> <a href=\"#narrow/channel/231634-beginners/topic/Early.20return.20with.20.3F.3F.20operator/near/502326997\">said</a>:</p>\n<blockquote>\n<p>Oh!  You can also just do</p>\n<div class=\"codehilite\"><pre><span></span><code>first = List.first(vals)?\n# Continue using first\n</code></pre></div>\n<p>Which is what you want - no need to check length and no block or indentation</p>\n</blockquote>\n<p>I thought about this one, but didn't want to return a Result value. Was shooting for just the value type, no wrapper.</p>\n<p>Thanks for letting me know about the <code>[]</code> and <code>[first, .. as rest]</code> syntax in the when cases though! I might have missed it in the tutorial. Very useful syntax!</p>",
        "id": 502327915,
        "sender_full_name": "hchac",
        "timestamp": 1740673928
    },
    {
        "content": "<p>I think early return with <code>??</code> is expected to work</p>",
        "id": 502349638,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740680585
    },
    {
        "content": "<p>At least it was discussed and I believe <span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span> suggested that he wanted it to work</p>",
        "id": 502349762,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740680619
    },
    {
        "content": "<p>I think it makes sense that it should work. Same with throwing a crash there if wanted</p>",
        "id": 502350121,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1740680713
    },
    {
        "content": "<p>The when pattern that <span class=\"user-mention\" data-user-id=\"781658\">@Anthony Bullard</span> showed me is holding me over for now (works quite well), but early return on <code>??</code> would also be nice to reduce too much nesting (more whens inside etc)</p>",
        "id": 502350630,
        "sender_full_name": "hchac",
        "timestamp": 1740680863
    },
    {
        "content": "<p>Like if I only want to continue down the function as long as x conditions are met:</p>\n<div class=\"codehilite\"><pre><span></span><code>first = List.first(vals) ?? return so_far\nop = List.first(ops) ?? return first\n... perform work with first and op ...\n</code></pre></div>\n<p>which I assume would look like the following at the moment:</p>\n<div class=\"codehilite\"><pre><span></span><code>when vals is\n    [] -&gt; so_far\n    [first, .. as restvals] -&gt;\n        when ops is\n            [] -&gt; first\n            [op, .. as restops] -&gt;\n                ... perform work with first and op ...\n</code></pre></div>",
        "id": 502351285,
        "sender_full_name": "hchac",
        "timestamp": 1740681060
    },
    {
        "content": "<p>yeah exactly, definitely want that to work!</p>",
        "id": 502362655,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740684906
    },
    {
        "content": "<p>which, incidentally, means that both the <code>return</code> and <code>crash</code> keywords need to be expressions (cc <span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> <span class=\"user-mention\" data-user-id=\"781658\">@Anthony Bullard</span>)</p>",
        "id": 502363427,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740685154
    },
    {
        "content": "<p>so like <code>foo(crash \"blah\")</code> and <code>foo(return \"blah\")</code> should both parse as valid, but then give a canonicalization warning of like \"hey <code>foo</code> is never actually going to be called...\"</p>",
        "id": 502363530,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740685188
    },
    {
        "content": "<p>but parsing them that way means that <code>?? crash \"blah\"</code> and <code>?? return \"blah\"</code> work</p>",
        "id": 502363562,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740685201
    },
    {
        "content": "<p>and also that like <code>foo = if a { b } else { return \"blah\" }</code> can work too</p>",
        "id": 502363679,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740685235
    },
    {
        "content": "<p>and then when they're used as statements, which is equivalent to <code>{} = return \"blah\"</code> that works because the <code>return</code> expression has the type <code>a</code> (or <code>*</code> as we used to call it), and same with <code>crash</code> expressions</p>",
        "id": 502363768,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740685272
    },
    {
        "content": "<p>The word \"unbound\" was used by Ayaz, which seems a more accurate descriptor</p>",
        "id": 502364265,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1740685447
    },
    {
        "content": "<p>totally</p>",
        "id": 502364614,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1740685575
    },
    {
        "content": "<p>Not sure what Zig calls it, but I believe they handle this scenario as well:</p>\n<div class=\"codehilite\"><pre><span></span><code>pub fn main() void {\n    const vals = std.ArrayList(i32).init(std.heap.page_allocator);\n    std.debug.print(&quot;{}&quot;, .{solve(123, vals)});\n}\n\nfn solve(so_far: i32, vals: std.ArrayList(i32)) i32 {\n    const first = if (vals.items.len &gt; 0) vals.items[0] else return so_far;\n    return first;\n}\n\nReturns: 123\n</code></pre></div>",
        "id": 502364825,
        "sender_full_name": "hchac",
        "timestamp": 1740685662
    },
    {
        "content": "<p>Ok, some more work for me to do in the zig compiler as well</p>",
        "id": 502467684,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740702825
    },
    {
        "content": "<p>And actually now that I think about it ?? return <em>should</em> work with the way it’s desugared</p>",
        "id": 502467769,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740702869
    },
    {
        "content": "<p>It looks like the parser is the problem here though</p>",
        "id": 502467817,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1740702899
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"881564\">hchac</span> has marked this topic as resolved.</p>",
        "id": 502748809,
        "sender_full_name": "Notification Bot",
        "timestamp": 1740837381
    }
]