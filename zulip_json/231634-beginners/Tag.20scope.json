[
    {
        "content": "<p>What is the scope of union tags?</p>\n<p>If I create a tag union with a tag Gear in one module (function?), and another with Gear in another module, are they the same tag? Do they have to take the same payload? If not, how do I specify whether it's the Gear from Mechanical (with an iteger number of teeth payload)or the Gear from Camping (with a string description payload)? It doesn't seem like roc accepts Mechanical.Gear as a valid way to specify a tag.</p>",
        "id": 419684704,
        "sender_full_name": "Anne Archibald",
        "timestamp": 1707039896
    },
    {
        "content": "<p>I imagine they would be different unions and not unify even if they have the same name, because they have different payloads.</p>",
        "id": 419686443,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1707041246
    },
    {
        "content": "<p>Should be easy enough to test. But I guess your looking for a more formal answer, which I don't really know much about.</p>",
        "id": 419686510,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1707041287
    },
    {
        "content": "<p>tag unions work the same way as records: it doesn't matter where they're defined, what matters are the names of the tags and that the payloads are type-compatible</p>",
        "id": 419694126,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1707048720
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/231634-beginners/topic/Tag.20scope/near/419694126\">said</a>:</p>\n<blockquote>\n<p>tag unions work the same way as records: it doesn't matter where they're defined, what matters are the names of the tags and that the payloads are type-compatible</p>\n</blockquote>\n<p>Does this mean that roc can't infer types from the arguments to tags?</p>\n<p>Specifically, if I use (Gear 7) somewhere, can roc object to me using (Gear \"seven\") elsewhere? (Or for a more likely error, Gear 7 \"seven\" and Gear \"seven\" 7?) </p>\n<p>I mean, on the one hand when I use pattern matching on Gear I'd like roc to be able to infer the types of the arguments. On the other hand I would rather my program not suddenly explode because I imported a module that uses Gear with different types internally. How is this resolved?</p>",
        "id": 419702141,
        "sender_full_name": "Anne Archibald",
        "timestamp": 1707056544
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"685556\">Anne Archibald</span> <a href=\"#narrow/stream/231634-beginners/topic/Tag.20scope/near/419702141\">said</a>:</p>\n<blockquote>\n<p>if I use (Gear 7) somewhere, can roc object to me using (Gear \"seven\") elsewhere?</p>\n</blockquote>\n<p>nope, that's fine</p>",
        "id": 419702317,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1707056713
    },
    {
        "content": "<p>the type inference is based on the local to the usage site, also like records</p>",
        "id": 419702332,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1707056732
    },
    {
        "content": "<p>just like how record field names are arbitrary strings that are in a shared global namespace, so are tag names</p>",
        "id": 419702350,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1707056752
    },
    {
        "content": "<p>and just like how you can have a record with <code>{ email : Str }</code> in one place and <code>{ email : Email }</code> in another place, no problem, you can also have a tag union with <code>[Email Str]</code> and <code>[Email Email]</code> somewhere else, no problem</p>",
        "id": 419702419,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1707056798
    },
    {
        "content": "<p>I guess what I'm asking is if I write</p>\n<div class=\"codehilite\"><pre><span></span><code>when thing is\n    Gear a b -&gt; ...\n</code></pre></div>\n<p>what, if any, constraints does that place on the types of a and b?</p>",
        "id": 419702426,
        "sender_full_name": "Anne Archibald",
        "timestamp": 1707056810
    },
    {
        "content": "<p>just based on that code alone? none whatsoever</p>",
        "id": 419702451,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1707056829
    },
    {
        "content": "<p>like you can write:</p>\n<div class=\"codehilite\"><pre><span></span><code>\\thing -&gt;\n    when thing is\n        Gear a b -&gt; ...\n</code></pre></div>\n<p>and it will infer the type of <code>a</code> and <code>b</code> based on how they get used in the <code>...</code></p>",
        "id": 419702520,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1707056890
    },
    {
        "content": "<p>and if they just get returned without anything else happening to them that would constrain their types, then their inferred types will both be type variables (probably also named <code>a</code> and  <code>b</code>, since those are the first two auto-generated type variable names the compiler will choose), and if they don't even get returned, then their inferred types will be <code>*</code></p>",
        "id": 419702538,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1707056915
    },
    {
        "content": "<p>I guess I was thinking of <code>Gear</code> in this context as being like a constructor, which would constrain the types of its input. I have been making stream objects with <code>Stream nextFunction initialState</code> and assuming this would constrain the types of its arguments. Should I create a function <code>makeStream = \\nextFunction, initialState -&gt; Stream nextFunction initialState</code> so that I can provide this restriction?</p>",
        "id": 419702883,
        "sender_full_name": "Anne Archibald",
        "timestamp": 1707057252
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"685556\">Anne Archibald</span> <a href=\"#narrow/stream/231634-beginners/topic/Tag.20scope/near/419702883\">said</a>:</p>\n<blockquote>\n<p>I guess I was thinking of <code>Gear</code> in this context as being like a constructor, which would constrain the types of its input.</p>\n</blockquote>\n<p>ah, yeah so tags don't do that, they just tag data with a name <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 419702943,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1707057337
    },
    {
        "content": "<p>like records, they are intentionally just about labeling and that's it</p>",
        "id": 419702960,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1707057359
    },
    {
        "content": "<p>if you want to constrain the types, then yeah making a function like that is a good start, but the best way to enforce that is with an opaque wrapper</p>",
        "id": 419703024,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1707057390
    },
    {
        "content": "<p><a href=\"https://www.roc-lang.org/tutorial#opaque-types\">https://www.roc-lang.org/tutorial#opaque-types</a></p>",
        "id": 419703033,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1707057398
    },
    {
        "content": "<p>so something like:</p>\n<div class=\"codehilite\"><pre><span></span><code>\\nextFunction, initialState -&gt; @MyOpaqueTypeName (Stream nextFunction initialState)\n</code></pre></div>",
        "id": 419703147,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1707057500
    },
    {
        "content": "<p>I experimented with opaque types (of necessity) when I thought an Ability would solve my polymorphism problem. In this case, though, I don't want to restrict creation and inspection of these objects to code in the Stream module - people elsewhere should also be able to write efficient Stream operations. I guess I can make an opaque type and then provide accessors that let people get at all its gubbins?</p>",
        "id": 419703319,
        "sender_full_name": "Anne Archibald",
        "timestamp": 1707057646
    },
    {
        "content": "<p>you can, although if you give access to every internal detail then every change to internal structure becomes a breaking change, so I generally default to exposing as little as seems necessary <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 419705036,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1707058911
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/231634-beginners/topic/Tag.20scope/near/419705036\">said</a>:</p>\n<blockquote>\n<p>you can, although if you give access to every internal detail then every change to internal structure becomes a breaking change, so I generally default to exposing as little as seems necessary <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>\n</blockquote>\n<p>This brings me to my polymorphism problem :-p even using Ability streams with different internal state are not compatible unless I wrap them in a callable. And I'm not at all clear whether the optimisations my stream code is meant to allow can work with a callable wrapper in the way. (A chain of stream operations should be inline-able down to a single function that steps through the stream elements, with no recursion/looping anywhere inside.) Anyway, that's another thread. Thanks for clarifying how tags work!</p>",
        "id": 419711678,
        "sender_full_name": "Anne Archibald",
        "timestamp": 1707065027
    },
    {
        "content": "<p>sure, happy to clarify! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 419712762,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1707065960
    },
    {
        "content": "<p>I just checked, and you probably said so but:</p>\n<p>While you can have all the tags \"Gear\", \"Gear 7\", and \"Gear 7 8\", they cannot exist in the same union type.</p>\n<p>If I understand correctly, normally, if you have two union types, their, uh union is also a valid type. That is not true if any of their tags have the same spelling but different \"signatures\". </p>\n<p>I guess, though, that one doesn't normally take the union of union types defined in different places. The exception would seem to be error return values - if one package defines HttpFailure to take an error code argument and another defines it without, that might give confusing problems using Result?</p>",
        "id": 419904436,
        "sender_full_name": "Anne Archibald",
        "timestamp": 1707158357
    },
    {
        "content": "<p>Yeah, you would have to add a mapping or wrap tags or something to deal with the discrepancy if using two different libraries with the same error tag name but different contained data.</p>",
        "id": 419906540,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1707159055
    },
    {
        "content": "<p>It's really trivial to just wrap by library if you need to. <code>someTask |&gt; Task.mapErr LibraryWrapperTag</code></p>",
        "id": 419906732,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1707159125
    },
    {
        "content": "<p>I think long term it should be possible to make really clear errors for this case. Print the source code of both definitions, note they are incompatible, and link to a page that shows common solutions like wrapping and mapping.</p>",
        "id": 419906908,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1707159199
    }
]