[
    {
        "content": "<p>Hi, I'm still trying to figure out some basic stuff about writing platforms, especially the mapping of data types. Right now, I'm using C to write a host. If <code>mainForHost</code> is a record type,</p>\n<div class=\"codehilite\"><pre><span></span><code>Type: { n: U64, str: Str }\n</code></pre></div>\n<p>say. I can treat it as a struct in my host.c</p>\n<div class=\"codehilite\"><pre><span></span><code>struct MyType {\n  int n;\n  struct RocStr str;\n};\n</code></pre></div>\n<p>but what about union types. Lets say I have a <code>mainForHost</code> of type</p>\n<div class=\"codehilite\"><pre><span></span><code>MyUnion: [A Str (List MyUnion), Div (List MyUnion)]\n</code></pre></div>\n<p>how can I treat that in my host.c?</p>",
        "id": 464164615,
        "sender_full_name": "Max",
        "timestamp": 1724272805
    },
    {
        "content": "<p><code> int n;</code> -&gt; <code>uint64_t n;</code></p>",
        "id": 464168452,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724274023
    },
    {
        "content": "<p>myunion would be the union of a <code>{ RocStr; RocList}</code> with a <code>{ RocList }</code> with a trailing <code>uint8_t</code> for the tag.</p>",
        "id": 464169257,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724274159
    },
    {
        "content": "<p>One trick I use, is to make a super minimal platform.roc file and then use <code>roc glue path/to/RustGlue.roc output/  platform.roc</code> to generate the glue for it and then see what it looks like in Rust.</p>",
        "id": 464185205,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724279962
    },
    {
        "content": "<p>Here is RustGlue.roc <a href=\"https://github.com/roc-lang/roc/blob/main/crates/glue/src/RustGlue.roc\">https://github.com/roc-lang/roc/blob/main/crates/glue/src/RustGlue.roc</a></p>",
        "id": 464185266,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724279995
    },
    {
        "content": "<p>So the return type e.g. mainForHost is just whatever type I'm interested to know how roc handles.</p>",
        "id": 464185341,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724280029
    },
    {
        "content": "<p>Here is an example </p>\n<p>This is the c equivalent for [A U64, B]: <a href=\"https://github.com/ostcar/kingfisher/blob/b23e778dc5a56472d09b8319c1044138d2226141/host/roc/host.h#L19\">https://github.com/ostcar/kingfisher/blob/b23e778dc5a56472d09b8319c1044138d2226141/host/roc/host.h#L19</a></p>\n<p>As you can see, you need a struct and a union. The struct has two fields. The first field is the union, the second is one byte. The union contains all payload types and the byte decides, which one is active.</p>\n<p>In your c code, you can look at the byte and then read the union value accordingly.</p>",
        "id": 464282084,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1724310736
    },
    {
        "content": "<p>Nice, to be honest, I did not even know about glue. Maybe I should have run roc --help at some point :D<br>\nTook me some time, but I was able to run the simple examples I was thinking of using rust now.<br>\nI will probably be using Rust now that it's starting to work for me. But out of curiosity, I would still like to get my c example to work. <span class=\"user-mention\" data-user-id=\"496321\">@Oskar Hahn</span> I ran a copy of your <code>[A U64, B]</code> example successfully.  However I can not seem to map that to my example. I can't even read the tag right. I get different values depending how long I make the string in the <code>A</code>. I'm sure I'm just missing something.</p>\n<p><a href=\"https://github.com/mx-ws/rocunion\">https://github.com/mx-ws/rocunion</a></p>",
        "id": 464740189,
        "sender_full_name": "Max",
        "timestamp": 1724444899
    },
    {
        "content": "<p>First glance that looks correct. But would need to take a deeper look.</p>",
        "id": 464748303,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724448922
    },
    {
        "content": "<p>Thanks for looking at it and for all the answers then!</p>",
        "id": 465011389,
        "sender_full_name": "Max",
        "timestamp": 1724591956
    },
    {
        "content": "<p>Sorry for forgetting to circle back to this.</p>",
        "id": 465031992,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724608710
    },
    {
        "content": "<p>There is definitely a compiler issue here.</p>",
        "id": 465032003,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724608720
    },
    {
        "content": "<p>It seems that Roc doesn't understand that Lists create a separate allocation in a type definition</p>",
        "id": 465032022,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724608769
    },
    {
        "content": "<p><code>MyUnion: [A Str (List MyUnion), Div (List MyUnion)]</code></p>\n<p>Is being generated as if it where a recursive tag union. But it isn't. The Lists stop it from needing to be recursive</p>",
        "id": 465032037,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724608798
    },
    {
        "content": "<p>So it is generating something roughly like:<br>\n<code>MyUnion: Box [A Str (List MyUnion), Div (List MyUnion)]</code></p>",
        "id": 465032143,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724608844
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> since you're online, do you know where I would look in the source code to teach roc that <code>List</code> and <code>Box</code> break recursion when it comes to tag unions?</p>",
        "id": 465033317,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724609940
    }
]