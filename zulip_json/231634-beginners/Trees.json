[
    {
        "content": "<p>What's a good way to represent trees in Roc? I'd like every node (whether they're leaves or not) to have identical fields, such as <code>label</code>, but non-leaf nodes also have a <code>children</code> field.</p>\n<p>Is the following idiomatic?</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>Tree : [Leaf { label : Str }, Node { label : Str, children : List Tree}]\n</code></pre></div>",
        "id": 470890923,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1726557488
    },
    {
        "content": "<p>I don't think we have enough Roc code out there to say whether your way is idiomatic, but it's an obvious and clean implementation using our type system effectively</p>",
        "id": 470891920,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1726557781
    },
    {
        "content": "<p>One thing though, do you want to allow for empty trees?</p>",
        "id": 470892097,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1726557816
    },
    {
        "content": "<p>This doesn't currently allow for that</p>",
        "id": 470892158,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1726557828
    },
    {
        "content": "<p>You'd want something like </p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">Tree</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Empty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Node</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">label</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">children</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Tree</span><span class=\"w\"> </span><span class=\"p\">}]</span>\n</code></pre></div>",
        "id": 470892494,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1726557892
    },
    {
        "content": "<p>Thanks Sam.  It's for an exercism exercise which does not have any test cases for empty trees, but I think it still makes sense to allow them. <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 470905392,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1726560798
    },
    {
        "content": "<p>Ah yeah, this is a case where a tag union shouldn't even be required, but recursion check limitation in the roc compiler make it required.</p>",
        "id": 470982017,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726580059
    },
    {
        "content": "<p>I was wondering about that: the compiler could see the <code>List</code> and understand that an empty list can stop the recursion. In fact, this is true of any container that can be empty.</p>",
        "id": 471081109,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1726603365
    },
    {
        "content": "<p>Yeah, which in roc is just tags and lists. Cause all other containers that can be empty would be built on those primitives</p>",
        "id": 471083760,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726604021
    },
    {
        "content": "<p>Oh, and I guess optional boxes of the recursive type. (or a box of an option of the recursive type)</p>",
        "id": 471083858,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726604042
    },
    {
        "content": "<p>I'm working on the <code>pov</code> (point of view) exercise which involves manipulating trees. I used the definition suggested by <span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> :</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">Tree</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Empty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Node</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">label</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">children</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"kt\">Tree</span><span class=\"w\"> </span><span class=\"p\">}]</span>\n</code></pre></div>\n<p>However, I just realized that I should have used <code>Set Tree</code> instead of <code>List Tree</code> for the children, because the exercise explicitly requires us to ignore the order of the children.</p>\n<p>However, I can't create a <code>Set</code> of trees, because trees are not hashable, it seems, probably because they contain a <code>Set</code>. I'm not sure how to do that without making <code>Tree</code> an opaque type. In fact, even if I make it an opaque type and use <code>implements [Hash { hash:  hashTree }]</code>, the compiler crashes when I try to add a tree to a <code>Set</code>. I'm a bit stuck, so any help would be much appreciated! <span aria-label=\"thank you\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"thank you\">:thank_you:</span></p>",
        "id": 471580058,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1726790012
    },
    {
        "content": "<p><code>Set</code> is also ordered. Just for reference</p>",
        "id": 471583607,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726792639
    },
    {
        "content": "<p>It also should be hashable</p>",
        "id": 471583624,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726792654
    },
    {
        "content": "<p>Maybe I missed that though</p>",
        "id": 471583634,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726792661
    },
    {
        "content": "<p>Yeah, set had a hash implementation....maybe a compiler bug....not sure at this moment</p>",
        "id": 471583952,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726792892
    },
    {
        "content": "<p>Can you share the source? I'll take a look later</p>",
        "id": 471585416,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726793904
    },
    {
        "content": "<p>I haven’t read the instructions so not sure about the context, but would it work to keep using a list but make the tests ignore order? That might be easier for the students</p>",
        "id": 471586461,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1726794714
    },
    {
        "content": "<p>oh, they are unordered for comparison only...ah...yeah, set is better</p>",
        "id": 471588560,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726796423
    },
    {
        "content": "<p>It has an internal order that a user can get access to, but it compares unordered</p>",
        "id": 471588582,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726796446
    },
    {
        "content": "<p>Oh, this looks like a recursion bug if I had to guess. I think we may have an issue with ability specialization for recursive types.</p>",
        "id": 471588998,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726796821
    },
    {
        "content": "<p>repro:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">app</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">pf</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">platform</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/roc-lang/basic-cli/releases/download/0.15.0/SlwdbJ-3GR7uBWQo6zlmYWNYOxnvo8r6YABXD-45UOw.tar.br\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nc\">pf.Stdout</span>\n\n<span class=\"kt\">Tree</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Empty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Node</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">label</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">children</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Set</span><span class=\"w\"> </span><span class=\"kt\">Tree</span><span class=\"w\"> </span><span class=\"p\">}]</span>\n\n<span class=\"kr\">main </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Tree</span>\n<span class=\"w\">    </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Node</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">label</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"a\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">children</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Set</span><span class=\"nf\">.</span><span class=\"nv\">fromList</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"kt\">Inspect</span><span class=\"nf\">.</span><span class=\"nv\">toStr</span><span class=\"w\"> </span><span class=\"nv\">x</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span>\n</code></pre></div>",
        "id": 471589033,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726796854
    },
    {
        "content": "<p>Error:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;main&#39; panicked at crates/compiler/load_internal/src/file.rs:685:26:\nway too many specialization passes!\n</code></pre></div>",
        "id": 471589048,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726796868
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"454654\">@Ayaz Hafiz</span> just in case you have any immediate comments that might help whoever debug this.</p>",
        "id": 471589294,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726797057
    },
    {
        "content": "<p>well that's wild</p>",
        "id": 471591695,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1726798644
    },
    {
        "content": "<p>the only case where that happens is if you have infinite specialization</p>",
        "id": 471591706,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1726798660
    },
    {
        "content": "<p>i.e. polymorphic recursion</p>",
        "id": 471591714,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1726798666
    },
    {
        "content": "<p>Let's see:</p>\n<p>Request hash for <code>Tree</code><br>\n-&gt; <code>Set Tree</code><br>\n-&gt; Request hash impl for <code>Dict Tree {}</code><br>\n-&gt; <code>Hash.hashUnordered</code> on the <code>List (Tree, {})</code><br>\n-&gt; Request hash for <code>(Tree, {})</code><br>\n-&gt; Back to the top? This is where it should cutoff and call to the generated <code>Tree</code> hash function, but it apparently is looping forever.</p>",
        "id": 471592503,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726799175
    },
    {
        "content": "<p>yeah not sure what's happening</p>",
        "id": 471592554,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1726799227
    },
    {
        "content": "<p>Seems to be specific to the container being part of the recursion:<br>\nThis can be hashed <code>Tree : [Empty, Node { label : Str, children : Tree }]</code></p>\n<p>But these two will fail to hash:</p>\n<div class=\"codehilite\"><pre><span></span><code>Tree : [Empty, Node { label : Str, children : Set Tree }]\nTree : [Empty, Node { label : Str, children : List Tree }]\n</code></pre></div>",
        "id": 471592882,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726799432
    },
    {
        "content": "<p>Thanks for looking into this. Perhaps <a href=\"https://github.com/roc-lang/roc/issues/7098\">issue #7098</a> is also linked to this infinite recursion bug?</p>",
        "id": 471603808,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1726804217
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"611722\">Isaac Van Doren</span> <a href=\"#narrow/stream/231634-beginners/topic/Trees/near/471586461\">said</a>:</p>\n<blockquote>\n<p>I haven’t read the instructions so not sure about the context, but would it work to keep using a list but make the tests ignore order? That might be easier for the students</p>\n</blockquote>\n<p>That's actually what I did, but if sets can be hashed and compared for equality while ignoring the order, then they pretty much fit the exercise perfectly, and I think it the code will be simpler for the users. Plus we don't have any exercise that uses sets yet, so it's properly a good chance to use them. And also this exercise is the hardest I'm seen yet, so users will be expecting (and probably hoping for) some complexity.</p>",
        "id": 471604859,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1726804538
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/issues/7098\">#7098</a> is different. You just have infinite recursion leading to a stack overflow (really not sure why so many roc stack overflows lead to segfaults)</p>",
        "id": 471607179,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726805417
    },
    {
        "content": "<p><code>help node1.children node2.children</code> instead of <code>help [tree1] [tree2]</code></p>",
        "id": 471607231,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726805442
    },
    {
        "content": "<p>And yeah, <code>Set</code> is definitely the right tool here once we fix the hashing bug here.</p>",
        "id": 471607275,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726805459
    },
    {
        "content": "<p>Oh yes, I missed the infinite recursion, thanks <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> . The code continues to crash, but it looks like it's because of the <code>List.dropAt</code>issue (<a href=\"https://github.com/roc-lang/roc/issues/7065\">#7065</a>), which you recently fixed. With these two fixes, the code works fine.</p>",
        "id": 471609221,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1726806162
    },
    {
        "content": "<p>I closed <a href=\"https://github.com/roc-lang/roc/issues/7098\">#7098</a>, since it was a bug in my code (+ the <code>List.dropAt</code> issue <a href=\"https://github.com/roc-lang/roc/issues/7065\">#7065</a>).</p>\n<p>I also opened <a href=\"https://github.com/roc-lang/roc/issues/7108\">#7108</a> regarding the infinite loop issue with recursive types involving containers.</p>\n<p>And if you're interested in the Exercism exercise that I'm working on, I submitted a <a href=\"https://github.com/exercism/roc/pull/97\">draft PR</a> (the code isn't fully tested yet due to <a href=\"https://github.com/roc-lang/roc/issues/7108\">#7108</a>).</p>",
        "id": 471616270,
        "sender_full_name": "Aurélien Geron",
        "timestamp": 1726808312
    },
    {
        "content": "<p>Thanks for logging things!</p>",
        "id": 471616407,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1726808369
    },
    {
        "content": "<p>I just noticed a <a href=\"https://github.com/roc-lang/roc/issues/7111\">bug</a> related to sets and comparison so thought I would mention it here. When sets are compared within tags, the internal order matters:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"kt\">Passes</span>\n<span class=\"nv\">expect</span><span class=\"w\"> </span><span class=\"kt\">Set</span><span class=\"nf\">.</span><span class=\"nv\">fromList</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"kt\">Set</span><span class=\"nf\">.</span><span class=\"nv\">fromList</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"err\">#</span><span class=\"w\"> </span><span class=\"kt\">Passes</span>\n<span class=\"nv\">expect</span><span class=\"w\"> </span><span class=\"kt\">Set</span><span class=\"nf\">.</span><span class=\"nv\">fromList</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"kt\">Set</span><span class=\"nf\">.</span><span class=\"nv\">fromList</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"err\">#</span><span class=\"w\"> </span><span class=\"kt\">Passes</span>\n<span class=\"nv\">expect</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Set</span><span class=\"nf\">.</span><span class=\"nv\">fromList</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Set</span><span class=\"nf\">.</span><span class=\"nv\">fromList</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"err\">#</span><span class=\"w\"> </span><span class=\"kt\">Fails</span>\n<span class=\"nv\">expect</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Set</span><span class=\"nf\">.</span><span class=\"nv\">fromList</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Set</span><span class=\"nf\">.</span><span class=\"nv\">fromList</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">])</span>\n</code></pre></div>",
        "id": 472003358,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1726978240
    },
    {
        "content": "<p>Wild guess. We aren't correctly resolving abilities and using the opaque set equality operator when it is wrapped in a tag. Instead, it is doing a raw comparison of the internal impl as if the opaque type wasn't there.</p>",
        "id": 472059726,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1727022662
    }
]