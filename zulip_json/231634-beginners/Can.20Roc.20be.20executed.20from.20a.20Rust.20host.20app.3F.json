[
    {
        "content": "<p>I'm looking at using Roc as a kind of replacement for Lua. However I see its a compiled language rather than scripting language, so I guess I could compile it to wasm and run it from Rust.</p>\n<p>If I assumed things correctly, I have a few questions:</p>\n<ul>\n<li>Would I just use Wasmtime to execute the Roc script? Or is there a better way to do so without even compiling Roc to wasm?</li>\n<li>If it is compiled to wasm, how would I share data between Roc and my host Rust app? I could use Json or something of course, but is there any other approaches similar to wasm bindgen?</li>\n<li>Any other suggestions? My idea is to use Roc as a simple event handler (in event sourcing for projections), where it will handle an event, and return a structure which my host Rust will upsert into a mongodb database.</li>\n</ul>",
        "id": 471618235,
        "sender_full_name": "Ari Seyhun",
        "timestamp": 1726808821
    },
    {
        "content": "<p>It's not super easy right now, but doable. There's a few things in development which make platform development more difficult than it will be in future. </p>\n<p>I have a template <a href=\"https://github.com/lukewilliamboswell/roc-platform-template-wasi\">https://github.com/lukewilliamboswell/roc-platform-template-wasi</a> which does what you are looking for. It currently uses a build script using <code>build.sh</code> which you can see the steps manually. We have some WIP PR's which should unlock more WASI/WASM type workflows but that hasn't landed yet.</p>",
        "id": 471626096,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1726811621
    },
    {
        "content": "<blockquote>\n<p>Would I just use Wasmtime to execute the Roc script? Or is there a better way to do so without even compiling Roc to wasm?</p>\n</blockquote>\n<p>You can make a custom roc platform that compiles your roc app/script/plugin to WASM/WASI, and then load that an run it using something like wasmtime.</p>",
        "id": 471626725,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1726811804
    },
    {
        "content": "<blockquote>\n<p>If it is compiled to wasm, how would I share data between Roc and my host Rust app? I could use Json or something of course, but is there any other approaches similar to wasm bindgen?</p>\n</blockquote>\n<p>The example template I shared above is using zig for the (roc platform) host language. If you use rust then you can use wasm bindgen to simplify data across the WASM boundary</p>",
        "id": 471627151,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1726811941
    },
    {
        "content": "<p>It can be difficult to talk about this idea specifically because there are multiple layers and terms that are overloaded, like the roc platform has a host and the wasm runtime is also a host... so it can get confusing.</p>",
        "id": 471627347,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1726812002
    },
    {
        "content": "<blockquote>\n<p>Would I just use Wasmtime to execute the Roc script? Or is there a better way to do so without even compiling Roc to wasm?</p>\n</blockquote>\n<p>The other option which is much simpler is to use roc in what I think of as a plugin. Have your rust app compile the roc source to a dynamic library (using roc as a library \"libroc\" by pointing cargo at the compiler repository, or even just shelling out using std::process::Command)  and then load the library at runtime to run the roc app.</p>",
        "id": 471628134,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1726812224
    },
    {
        "content": "<p>This is what roc does internally with the <code>roc glue</code> subcommand, where the end user provides a glue script and the roc cli compiles and then runs that to generate the glue files.</p>",
        "id": 471628593,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1726812354
    },
    {
        "content": "<p>I had a crack at doing this to make an example and see what is involved. </p>\n<p><a href=\"https://github.com/lukewilliamboswell/roc-plugin-experiment-rust\">https://github.com/lukewilliamboswell/roc-plugin-experiment-rust</a></p>\n<p>I got pretty far, it builds and runs fine... but there is something not quite right as it doesn't look like roc is running when I call it, or at least it doesn't appear to be modifying the input at all. </p>\n<p>I'm hoping <span class=\"user-mention\" data-user-id=\"343810\">@Brendan Hansknecht</span> or <span class=\"user-mention\" data-user-id=\"281543\">@Folkert de Vries</span>  or someone can see my problem as it's probably something simple I'm missing I think.</p>",
        "id": 471644983,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1726817265
    },
    {
        "content": "<p>One hunch I have is that I'm providing an implementation of <code>roc_alloc</code> and friends to satisfy <code>roc_std</code> which is linked in at build time and then the host also provides an implementation of <code>roc_alloc</code> for linking with the script... and maybe these two need to be the same implementation. <span aria-label=\"man shrugging\" class=\"emoji emoji-1f937-200d-2642\" role=\"img\" title=\"man shrugging\">:man_shrugging:</span></p>",
        "id": 471646103,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1726817444
    },
    {
        "content": "<p>This is awesome, thank you for the detailed response Luke!</p>\n<p>Since what I'm building is a little more than just a side project, I'll probably have to stick with a simpler approach for now until Roc has some more stability and documentation for this kind of thing. But I'll still check out the GH repos you linked thanks for taking the time for that</p>",
        "id": 471688897,
        "sender_full_name": "Ari Seyhun",
        "timestamp": 1726828129
    },
    {
        "content": "<p>Ok, I got carried away (and Folkert helped to) and now it works <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> </p>\n<p><a href=\"https://github.com/lukewilliamboswell/roc-plugin-experiment-rust\">https://github.com/lukewilliamboswell/roc-plugin-experiment-rust</a></p>\n<p>Definitely one of the coolest experiments I've put together in a little while.</p>\n<p>I can see how this could be easily expanded to more complicated platforms with a Task based API etc.</p>",
        "id": 471699479,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1726831084
    },
    {
        "content": "<p>I haven't tested this on linux, but tried to use some <code>cfg</code> flags so hopefully it should just work.</p>",
        "id": 471699735,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1726831165
    },
    {
        "content": "<p>In the end I had everything setup correctly but we have a bug where the codegen isn't correct for</p>\n<div class=\"codehilite\"><pre><span></span><code>mainForHost : U64 -&gt; Str\nmainForHost = main\n</code></pre></div>\n<p>But is for </p>\n<div class=\"codehilite\"><pre><span></span><code>mainForHost : U64 -&gt; Str\nmainForHost = \\x -&gt; main x\n</code></pre></div>\n<p><span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 471700433,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1726831341
    }
]