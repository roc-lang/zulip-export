[
    {
        "content": "<p>I would like to write a program using basic-cli that reads input that is piped in, and then later on in the execution, reads more input from the terminal. My understanding is that when I pipe something in like in</p>\n<div class=\"codehilite\"><pre><span></span><code>echo 7 | myRocProgram\n</code></pre></div>\n<p>the stdout of the first program is bound to the stdin of the second. So when I try to read anything else in from <code>myRocProgram</code> it doesn't work because stdin is not bound to the terminal input. </p>\n<p>Does anyone know if this is possible with basic cli? If not, does it seem like a reasonable thing to add given the scope?</p>\n<p>I thought I might be able to accomplish it by running commands but I suspect that that will not work since the commands run in a child process but I need to alter the main process.</p>",
        "id": 403059424,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1700434436
    },
    {
        "content": "<p>seems like a reasonable use case to me!</p>",
        "id": 403059657,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700434687
    },
    {
        "content": "<p>I think the question is what the API would look like</p>",
        "id": 403059664,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1700434701
    },
    {
        "content": "<p>Can that be done in a regular c program?</p>",
        "id": 403059711,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700434775
    },
    {
        "content": "<p>It looks like it <a href=\"https://stackoverflow.com/questions/584868/rerouting-stdin-and-stdout-from-c\">https://stackoverflow.com/questions/584868/rerouting-stdin-and-stdout-from-c</a></p>",
        "id": 403060248,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1700435115
    },
    {
        "content": "<p>That doesn't work as you think. it will reopen stdin, which is just at the eof from <code>echo 7</code>.</p>",
        "id": 403062640,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700437290
    },
    {
        "content": "<p>Ah I see</p>",
        "id": 403062654,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1700437312
    },
    {
        "content": "<p>Just tested with this</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;stdio.h&gt;</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;stdbool.h&gt;</span>\n\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">){</span>\n<span class=\"w\">    </span><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"n\">line_top</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">true</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">ch</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fgetc</span><span class=\"p\">(</span><span class=\"n\">stdin</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">EOF</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">break</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">line_top</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"%zu \"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">++</span><span class=\"n\">no</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"n\">line_top</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"sc\">'\\n'</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"n\">fputc</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"n\">fflush</span><span class=\"p\">(</span><span class=\"n\">stdout</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"n\">freopen</span><span class=\"p\">(</span><span class=\"s\">\"newin\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"r\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">stdin</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">ch</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fgetc</span><span class=\"p\">(</span><span class=\"n\">stdin</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">EOF</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"reopened file is just at eof\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"the reopened file is useful\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"n\">fflush</span><span class=\"p\">(</span><span class=\"n\">stdout</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span>clang<span class=\"w\"> </span>main.c<span class=\"w\"> </span>-o<span class=\"w\"> </span>main<span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nb\">echo</span><span class=\"w\"> </span><span class=\"m\">7</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>./main\n<span class=\"m\">1</span><span class=\"w\"> </span><span class=\"m\">7</span>\nreopened<span class=\"w\"> </span>file<span class=\"w\"> </span>is<span class=\"w\"> </span>just<span class=\"w\"> </span>at<span class=\"w\"> </span>eof%\n</code></pre></div>",
        "id": 403062717,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700437354
    },
    {
        "content": "<p>you may be able to read <code>/dev/tty</code> as a file. That may be a fix. Though it sounds like that is not really a proper solution. It sounds like if you want <code>stdin</code> from the terminal, you should really make all other input come through command line arguments and files rather than being piped in.</p>",
        "id": 403063170,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700437824
    },
    {
        "content": "<p>Mm I'll have to give that a try. I agree that it seems improper. Unfortunately being able to pipe the input in specifically is very relevant here</p>",
        "id": 403063297,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1700437986
    },
    {
        "content": "<p>Just curious, what are you working on?</p>",
        "id": 403063550,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700438243
    },
    {
        "content": "<p>In <a href=\"https://github.com/isaacvando/gob\">gob</a> you can pipe programs into other programs, which I think could be interesting for scripting purposes. So piping is important to be able to chain multiple together easily.</p>\n<p>There is an option to step through the execution of a program one state at a time where it waits for input before taking the next step. </p>\n<p>So when you pipe in input, the stepping doesn't work because Stdin.line always returns End.</p>",
        "id": 403070030,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1700441574
    },
    {
        "content": "<p>Interesting. Makes sense</p>",
        "id": 403077060,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1700445326
    }
]