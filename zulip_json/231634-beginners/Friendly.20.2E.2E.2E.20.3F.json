[
    {
        "content": "<p>I know roc is pre-pre-alpha, but really? You can't compare two strings ... ?</p>\n<div class=\"codehilite\"><pre><span></span><code>&quot;abc&quot; &lt; &quot;def&quot;\n</code></pre></div>\n<p>This 1st argument to &gt; has an unexpected type:</p>\n<p>4â”‚      \"abc\" &gt; \"dev\"<br>\n        ^^^^^<br>\nThe argument is a string of type:<br>\n    Str<br>\nBut &gt; needs its 1st argument to be:<br>\n    Num a</p>",
        "id": 503239120,
        "sender_full_name": "Jonathan Kelly",
        "timestamp": 1741086648
    },
    {
        "content": "<p>What would you expect the result to be? What about if there are two different emojis?</p>",
        "id": 503241700,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741087450
    },
    {
        "content": "<p>I think this is similar to comparing floats, we can't compare NaN, so we can't provide a \"correct\" comparison impl for floats</p>",
        "id": 503241923,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741087529
    },
    {
        "content": "<p>Unless we just panic on totally normal values</p>",
        "id": 503241961,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741087540
    },
    {
        "content": "<p>The same applies to strings, unfortunately</p>",
        "id": 503241982,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741087549
    },
    {
        "content": "<p>Yeah, this was a deliberate choice. Sorting can vary by language and even by country.</p>",
        "id": 503241991,
        "sender_full_name": "Anton",
        "timestamp": 1741087552
    },
    {
        "content": "<p>Unicode is just a horrible rats nest, and we've pushed for correctness over simplicity pretty much every time, even if 99% of languages don't care about this</p>",
        "id": 503242193,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1741087614
    },
    {
        "content": "<p>I would just say that excluding a feature that every other computer language in the known universe seems to provide without causing even a single computer to implode is a much bigger issue than putting people off because of indent blocks.</p>",
        "id": 503243381,
        "sender_full_name": "Jonathan Kelly",
        "timestamp": 1741087977
    },
    {
        "content": "<p>indent blocks?</p>",
        "id": 503243908,
        "sender_full_name": "Anton",
        "timestamp": 1741088163
    },
    {
        "content": "<p>By the way, if your application is only working with ascii strings you can use the <a href=\"https://github.com/Hasnep/roc-ascii\">roc-ascii package</a></p>",
        "id": 503244098,
        "sender_full_name": "Anton",
        "timestamp": 1741088221
    },
    {
        "content": "<p>That was the only term I could think of ... isn't there a very long discussion going on about using braces to define a code block?</p>",
        "id": 503244221,
        "sender_full_name": "Jonathan Kelly",
        "timestamp": 1741088261
    },
    {
        "content": "<p>We're aware of how inconvenient some of these things are, it's just very easy for subtle bugs to sneak into vital software if we don't do this.</p>",
        "id": 503244614,
        "sender_full_name": "Anton",
        "timestamp": 1741088377
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/channel/231634-beginners/topic/Friendly.20.2E.2E.2E.20.3F/near/503244098\">said</a>:</p>\n<blockquote>\n<p>By the way, if your application is only working with ascii strings you can use the <a href=\"https://github.com/Hasnep/roc-ascii\">roc-ascii package</a></p>\n</blockquote>\n<p>is there a manual / tutorial somewhere?</p>",
        "id": 503245005,
        "sender_full_name": "Jonathan Kelly",
        "timestamp": 1741088487
    },
    {
        "content": "<p>I assume you mean for roc-ascii specifically?<br>\nIt would indeed be good to add some examples to the roc-ascii repo's README.</p>\n<p>You probably want to use these functions:<br>\n<a href=\"https://hasnep.github.io/roc-ascii/Ascii/#from_str\">https://hasnep.github.io/roc-ascii/Ascii/#from_str</a><br>\n<a href=\"https://hasnep.github.io/roc-ascii/Ascii/#to_str\">https://hasnep.github.io/roc-ascii/Ascii/#to_str</a><br>\n<a href=\"https://hasnep.github.io/roc-ascii/Ascii/#sort_asc\">https://hasnep.github.io/roc-ascii/Ascii/#sort_asc</a><br>\n<a href=\"https://hasnep.github.io/roc-ascii/Ascii/#sort_desc\">https://hasnep.github.io/roc-ascii/Ascii/#sort_desc</a></p>",
        "id": 503245969,
        "sender_full_name": "Anton",
        "timestamp": 1741088779
    },
    {
        "content": "<p><a href=\"https://github.com/ostcar/aoc2024/blob/10d1d5e9cfa04773523399603220e7cbc7a41dbb/day24.roc#L21\">This code</a> uses the old Roc syntax but may still be helpful for you</p>",
        "id": 503246427,
        "sender_full_name": "Anton",
        "timestamp": 1741088942
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"669222\">Jonathan Kelly</span> <a href=\"#narrow/channel/231634-beginners/topic/Friendly.20.2E.2E.2E.20.3F/near/503243381\">said</a>:</p>\n<blockquote>\n<p>I would just say that excluding a feature that every other computer language in the known universe seems to provide without causing even a single computer to implode is a much bigger issue than putting people off because of indent blocks.</p>\n</blockquote>\n<p>I understand you are frustrated, but please refrain from adding accusatory hyperbole.</p>\n<hr>\n<p>Roc restrict users from doing many things. String comparisons is one of them. Roc is being \"friendly\" by reducing the design space and trying to remove common pitfalls. Strings are full of common pitfalls that developers get burned by all the time. Not having string comparison, string byte indexing, captialization, character splitting, etc directly in the language has lead to many productive discussions with developers about common pitfalls, workarounds, and future plans.</p>\n<p>Long term, we do want an official unicode package that has all the information necessary to make the correct decisions. On top of that, we likely will add some methods to the standard library that do the naive things full of pitfalls (those methods will just be very explicitly named around the pitfall, have strong docs explaining the issues, and link to the unicode library function that can handle the problem without pitfalls). We just haven't reached this point yet cause wrangling unicode and localizations is a lot of work and we have many things to get done.</p>",
        "id": 503324121,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1741109211
    },
    {
        "content": "<p>We should probably add a special error message explaining all this if someone tries to use the number comparison operators on strings, but that's probably a longer term thing</p>",
        "id": 503332915,
        "sender_full_name": "Hannes",
        "timestamp": 1741111903
    },
    {
        "content": "<p>If anyone is interested in one person's experience, which will also explain the level of my frustration that lead to the hyperbole, the fact that this \"feature\" of roc is nowhere to be found on the <a href=\"http://roc-lang.org\">roc-lang.org</a> website, feels deceptive.  Or is the word disingenuous?</p>\n<p>I read the tutorial and was impressed enough to give roc a try. Would I have invested the last 3 days of my free time if I'd encountered this fact in the tutorial, or the Str manual page, which I had read from top to bottom? I don't know, but at least I would have known up front, and had some time to consider the implications before the frustration set in. And I would NOT have wasted the better part of an hour trying to work out what <em>I</em> had done wrong to make the compiler think one of the elements in my program should be a Num *.</p>",
        "id": 503354448,
        "sender_full_name": "Jonathan Kelly",
        "timestamp": 1741118907
    },
    {
        "content": "<p>... and no, I didn't actually audit the entire website .. I asked chatgpt, and then asked it to check again.</p>\n<div class=\"codehilite\"><pre><span></span><code>I couldn&#39;t find an explicit statement on the Roc Programming Language&#39;s website\nabout the absence of built-in functions for lexicographical string comparisons using\nless than or greater than operators. However, the Str module documentation lists\nthe available string operations, and functions for direct lexicographical comparisons\nare not included. This omission indicates that such comparisons are not currently\nsupported in Roc&#39;s standard library.\n</code></pre></div>",
        "id": 503354904,
        "sender_full_name": "Jonathan Kelly",
        "timestamp": 1741119041
    },
    {
        "content": "<p>I think the answer here is that we should special-case the compiler error message for this to explain not just why it's gone, but also why it's the best design</p>",
        "id": 503356320,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1741119479
    },
    {
        "content": "<p>also once we have the <code>Sort</code> module, the error message can suggest something from there as an alternative</p>",
        "id": 503356526,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1741119543
    },
    {
        "content": "<p>Or, you could be transparent, and put it in the Tutorial. Or the FAQ. Or the Str reference page.</p>",
        "id": 503356637,
        "sender_full_name": "Jonathan Kelly",
        "timestamp": 1741119579
    },
    {
        "content": "<p>I understand that you're upset about this. Message received. You don't need to keep hammering that point home. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 503357472,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1741119883
    },
    {
        "content": "<p>it definitely seems like a good idea to put this in the <code>Str</code> docs explicitly</p>",
        "id": 503357583,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1741119928
    },
    {
        "content": "<p>I think the tutorial needs to stay focused on \"here's how to get to the next step\" and not go on too many tangents, and this feels like it would be too much of a tangent</p>",
        "id": 503357755,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1741119988
    },
    {
        "content": "<p>I could also see FAQ, maybe under a broader umbrella of \"things Roc intentionally does differently when it comes to strings\" - and maybe just link to the <code>Str</code> docs</p>",
        "id": 503358010,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1741120079
    },
    {
        "content": "<p>I'll make those additions</p>",
        "id": 503460787,
        "sender_full_name": "Anton",
        "timestamp": 1741166513
    },
    {
        "content": "<p><a href=\"https://github.com/roc-lang/roc/issues/7667\">#7667</a><br>\n<a href=\"https://github.com/roc-lang/roc/pull/7666\">PR#7666</a></p>",
        "id": 503558026,
        "sender_full_name": "Anton",
        "timestamp": 1741190390
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"669222\">@Jonathan Kelly</span> </p>\n<blockquote>\n<p>without causing even a single computer to implode</p>\n</blockquote>\n<p>LOL. Literally the source of all bugs is due to a discrepancy between the mental model of the developer of the language's design, the mental model of the developer using the language, any unaddressed loose ends or corner cases, and how the language actually behaves. Some of these discrepancies can be subtle, and those are some of the worst- I've literally spent entire developer-months trying to run down bugs based on this sort of thing. So experienced developers have learned, the hard way, that the more explicit you are, the better, simply because it reduces the potential surface area of the aforementioned things.</p>\n<p>Look up \"Postel's Law\" and how it's become seen over the past 20+ years, as to why the Roc designers probably made this (IMHO correct, if a bit frustrating) choice. And, you can always just write a function to encode the string you're trying to compare into any ordinal numeric pattern you want and then compare <em>those</em> (numerically)- but even then, that would expose cases you might not have considered- For example, which word is \"less than\" the other in the following 2 words: \"auto\" and \"automatic\"? What about \"auto\" and \"Ã¡Ã¼to\"? (Do you ignore foreign diacritics in comparisons, or do you sort them differently, and if so, what order? Etc.) Is a capital \"less than\" or \"greater than\" its equivalent lowercase?</p>",
        "id": 504623738,
        "sender_full_name": "Peter Marreck",
        "timestamp": 1741621807
    },
    {
        "content": "<p>I would much rather have the language force me to explicitly define these textual relationships than stick in its own possibly flawed interpretation of them (which might end up surprising me on certain inputs, thus causing bugs).<br>\nThanks, Roc language designers. Keep going. ;)<br>\nI would perhaps agree that a helpful error message WHEN someone tries to directly compare two strings (in an ordinal fashion, not a direct equivalence test) might be helpful to beginners.</p>",
        "id": 504626162,
        "sender_full_name": "Peter Marreck",
        "timestamp": 1741622304
    },
    {
        "content": "<blockquote>\n<p>without causing even a single computer to implode</p>\n</blockquote>\n<p>This video shows why it's important to properly handle unicode and string length: <a href=\"https://www.youtube.com/watch?v=rgsIkZkflMw\">https://www.youtube.com/watch?v=rgsIkZkflMw</a><br>\nNo computers imploded but Chinese hackers did get access to a US treasury database.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"rgsIkZkflMw\" href=\"https://www.youtube.com/watch?v=rgsIkZkflMw\"><img src=\"https://uploads.zulipusercontent.net/80b50396036541c26f65719e08e84a1f4837d6e5/68747470733a2f2f692e7974696d672e636f6d2f76692f726773496b5a6b666c4d772f6d7164656661756c742e6a7067\"></a></div>",
        "id": 504806760,
        "sender_full_name": "Anton",
        "timestamp": 1741691028
    },
    {
        "content": "<p>Just watched that not 2 hours ago after it was recommended in my YT feed.<br>\nReally astonishing how string handling almost seems like it requires strict typing in any legitimate security context. Especially where UTF8 is concerned. (Notably, MAYBE, this bug wouldn't have occurred in a UTF-16 context, which is possibly why Microsoft chose that route instead...)<br>\nI'd normally bash PHP, but they were relying on the assumption that Postgres' own string-escape functions were not buggy or security-hole-ridden and calling into them...</p>",
        "id": 504954815,
        "sender_full_name": "Peter Marreck",
        "timestamp": 1741726827
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/channel/231634-beginners/topic/Friendly.20.2E.2E.2E.20.3F/near/503358010\">said</a>:</p>\n<blockquote>\n<p>I could also see FAQ, maybe under a broader umbrella of \"things Roc intentionally does differently when it comes to strings\" - and maybe just link to the <code>Str</code> docs</p>\n</blockquote>\n<p>As someone who has been tinkering with roc fairly casually for a bit, and who was also taken aback by how complicated string manipulation turned out to be (relative to my expectations, at least), I think this would be really nice. </p>\n<p>I appreciate the reasoning for it and I'm not super mad about it, but  I think currently there's a bit of friction that arises from the difference between the use case for which this a good design decision (production apps with many users who might not all be in the same place) and what I imagine is the median use case for Roc as a language that is still in alpha (quick and dirty apps for fun or personal use, written in Roc because the programmer was curious about the language). </p>\n<p>It might be a little less of a frustrating thing to encounter if there's an warning and explanation somewhere easily found.</p>",
        "id": 504956537,
        "sender_full_name": "Aline Thome",
        "timestamp": 1741727366
    },
    {
        "content": "<blockquote>\n<p>I think currently there's a bit of friction that arises from the difference between the use case for which this a good design decision (production apps with many users who might not all be in the same place) and what I imagine is the median use case for Roc as a language that is still in alpha (quick and dirty apps for fun or personal use, written in Roc because the programmer was curious about the language).</p>\n</blockquote>\n<p>This has been <a href=\"https://www.roc-lang.org/faq.html#strings-in-roc\">added to the faq</a> :)<br>\nAn easily discoverable tip <a href=\"https://github.com/roc-lang/roc/issues/7667\">will be added</a> to the new compiler when it is ready.</p>",
        "id": 505081725,
        "sender_full_name": "Anton",
        "timestamp": 1741773595
    },
    {
        "content": "<p>Just a quick follow-up for people who are stuck on this issue:</p>\n<p>If you really don't care about language-specific alphabetical ordering (which is super complicated and probably requires a full-blown <code>Internationalization</code> library), you can implement your own <code>string_compare</code> function by converting the <code>Str</code> types to <code>List U8</code> using the <code>List.to_utf8</code> function, and then recursively iterating over the two lists to compare the <code>U8</code> values at each index. Something like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>compare_utf8 : List U8, List U8 -&gt; [EQ, LT, GT]\ncompare_utf8 = |bytes_a, bytes_b|\n    when (bytes_a, bytes_b) is\n        ([], []) -&gt; EQ\n        ([_a], []) -&gt; GT\n        ([], [_b]) -&gt; LT\n        ([head_a, .. as tail_a], [head_b, .. as tail_b]) -&gt;\n            when Num.compare(head_a, head_b) is\n                EQ -&gt; compare_utf8(tail_a, tail_b)\n                res -&gt; res\n\n        _ -&gt; EQ\n\ncompare : Str, Str -&gt; [EQ, LT, GT]\ncompare = |str_a, str_b|\n    bytes_a = Str.to_utf8(str_a)\n    bytes_b = Str.to_utf8(str_b)\n    compare_utf8(bytes_a, bytes_b)\n\nexpect compare(&quot;abc&quot;, &quot;abc&quot;) == EQ\nexpect compare(&quot;abc&quot;, &quot;abcd&quot;) == LT\nexpect compare(&quot;abcd&quot;, &quot;abc&quot;) == GT\nexpect compare(&quot;abc&quot;, &quot;abd&quot;) == LT\nexpect compare(&quot;abd&quot;, &quot;abc&quot;) == GT\n</code></pre></div>\n<p>This will probably give you what you expect for most English language UTF-8 strings, but it definitely doesn't handle any edge cases. Still, it's good enough if you're implementing algorithms and data structures that don't require true alphabetical ordering.</p>",
        "id": 506592125,
        "sender_full_name": "Austin Davis",
        "timestamp": 1742336706
    }
]