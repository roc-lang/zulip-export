[
    {
        "content": "<p>Hi all! How do I make something like a circular buffer in Roc? specifically, I mean a data structure with amortized-constant-time push/pop operations at both the front and back, based on a dynamically allocated contiguous array?</p>\n<p>Afaik, to do it properly, it requires low-level twiddling with allocation beyond what Roc itself exposes. but I’m still new to Roc so I thought I’d reach out. Thanks!</p>",
        "id": 410060075,
        "sender_full_name": "Becker A.",
        "timestamp": 1703619472
    },
    {
        "content": "<p>Should be doable in roc built off of a List. Generate the list with a specific capacity and then use the start and end index into the buffer</p>",
        "id": 410061336,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703620434
    },
    {
        "content": "<p>The main annoyance is that users will be required to specify an empty element.</p>",
        "id": 410061393,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703620452
    },
    {
        "content": "<p>Cause you will generate a list of the max capacity of the circular buffer and that requires it being filled in with some sort of element. (That or you wrap all list elements on essentially a maybe type)</p>",
        "id": 410061459,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703620511
    },
    {
        "content": "<p>Roc will not give you access to something uninitialized.</p>",
        "id": 410061490,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703620538
    },
    {
        "content": "<p>Yeah exactly, I wasn’t sure how best to deal with uninitialized memory chunks in Roc</p>",
        "id": 410064332,
        "sender_full_name": "Becker A.",
        "timestamp": 1703622572
    },
    {
        "content": "<p>Is there any way to implement this as a Zig/Rust extension, without making it into a whole platform or anything?</p>",
        "id": 410064448,
        "sender_full_name": "Becker A.",
        "timestamp": 1703622647
    },
    {
        "content": "<p>Not really. Some context in <a class=\"stream-topic\" data-stream-id=\"304641\" href=\"/#narrow/stream/304641-ideas/topic/FFI\">#ideas &gt; FFI</a></p>",
        "id": 410064745,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703622872
    },
    {
        "content": "<p>I guess you could also start with an empty list and just correctly cap it when you hit the max circular buffer size. So to begin with, the list would slowly initialize elements. That would enable building the circular buffer without the need for a default/empty element to initialize the list</p>",
        "id": 410064935,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703623049
    },
    {
        "content": "<p>Hmm so if you pop values, you actually just move the front index up and leave the “popped” value in the dead section of the list?</p>",
        "id": 410066128,
        "sender_full_name": "Becker A.",
        "timestamp": 1703624099
    },
    {
        "content": "<p>yes (that or reset them to the default/empty value if you require one)</p>",
        "id": 410066880,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1703624583
    }
]