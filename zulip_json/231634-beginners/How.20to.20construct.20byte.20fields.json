[
    {
        "content": "<p>Hi,</p>\n<p>looking into building some MQTT client as an exercise with Roc (at very basic stage still). So far, I am constructing eg. a CONNECT packet by joining various <code>List U8</code> together (see below an example).</p>\n<p>I am wondering if this is \"the way to go\" or if Roc has some feature that I am missing to work with bit/byte fields.</p>\n<div class=\"codehilite\" data-code-language=\"roc\"><pre><span></span><code>makeConnect : Str -&gt; List U8\nmakeConnect = |clientIdStr|\n    remLength = Num.to_u8(10 + 2 + List.len(Str.to_utf8(clientIdStr)))\n    fixedHeader = [0x10, remLength]\n    protocolName = [0x00, 0x04, 0x4d, 0x51, 0x54, 0x54]\n    protocolLevel = [0x04]\n    connectFlagsValue = 0b00000010 # Beispiel: Clean Session gesetzt\n    connectFlags = [connectFlagsValue]\n    keepAliveValue = 60\n    keepAliveBytes = [00, keepAliveValue] # Num.toU16(keepAliveValue) |&gt; Num.toBytes(endian: Big)\n\n    variableHeader = List.join [protocolName, protocolLevel, connectFlags, keepAliveBytes]\n\n    l = List.len(Str.to_utf8(clientIdStr))\n    clientIdLength = [Num.shift_right_by(Num.to_u8(l), 8), Num.to_u8(Num.bitwise_and(l, 0xFF))]\n    payload = List.join [clientIdLength, Str.to_utf8(clientIdStr)]\n\n    List.join [fixedHeader, variableHeader, payload]\n</code></pre></div>",
        "id": 507746699,
        "sender_full_name": "Jonas Diemer",
        "timestamp": 1742819577
    },
    {
        "content": "<p>This seems like a reasonable approach. Given the low level nature, I would probably do this kind of thing on the platform side though.</p>",
        "id": 507755166,
        "sender_full_name": "Anton",
        "timestamp": 1742821339
    },
    {
        "content": "<p>Thanks. Can you elaborate on \"the platform side\"? Thus far, I am using basic-cli for cli.Tcp.</p>",
        "id": 507758620,
        "sender_full_name": "Jonas Diemer",
        "timestamp": 1742822004
    },
    {
        "content": "<blockquote>\n<p>Can you elaborate on \"the platform side\"? Thus far, I am using basic-cli for cli.Tcp.</p>\n</blockquote>\n<p>Yes, I was thinking about forking basic-cli and doing the bit twiddling in Rust but now I'm doubting myself :p <br>\nPerhaps <a href=\"https://www.roc-lang.org/examples/EncodeDecode/README.html\">making an encoder</a> (in pure Roc) may be the best solution.</p>",
        "id": 507764932,
        "sender_full_name": "Anton",
        "timestamp": 1742823257
    },
    {
        "content": "<p>There's <code>0b0000_1100</code> syntax I think. Maybe that helps?</p>",
        "id": 507869355,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1742847871
    },
    {
        "content": "<p>I think this is a good way to do it. As a pure roc library, because then it's cross-platform automatically.</p>",
        "id": 507869464,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1742847918
    },
    {
        "content": "<p>Yeah, roc doesn't really have a better way to do this than what you are currently doing. For generic formats like msgpack, an encoder could be used, but that doesn't help for specific encoding like this.</p>",
        "id": 507885013,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742854113
    },
    {
        "content": "<p>This is part of the reason I think we still need proper inline bittwiddling symbols</p>",
        "id": 507885047,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1742854136
    }
]