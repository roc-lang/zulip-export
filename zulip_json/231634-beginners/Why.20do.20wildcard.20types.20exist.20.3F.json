[
    {
        "content": "<p>Hi, just a bit of feedback on the wildcard types part of the tutorial (<a href=\"https://www.roc-lang.org/tutorial#wildcard-type\">https://www.roc-lang.org/tutorial#wildcard-type</a>). </p>\n<p>Type variables have been easy to understand because I just mapped them to Rust's generics. I've been confused of why a wildcard was needed in <code>isEmpty : List * -&gt; Bool</code> because I'm naturally excepting  <code>isEmpty : List a -&gt; Bool</code> to work just fine. Which makes me wonder why the wildcard type exist.</p>",
        "id": 400960290,
        "sender_full_name": "Paul Le Corre",
        "timestamp": 1699455092
    },
    {
        "content": "<p>The type of List.isEmpty actually is <a href=\"https://www.roc-lang.org/builtins/List#isEmpty\">List a -&gt; Bool</a>. I also checked the roc codebase, examples and basic-cli and we never use <code>List *</code> in any roc file. This also makes me wonder why we have wildcard types :p</p>",
        "id": 400963520,
        "sender_full_name": "Anton",
        "timestamp": 1699456070
    },
    {
        "content": "<p>Maybe it's for type inference, when you use an empty list somewhere without providing a type annotation.</p>",
        "id": 400964033,
        "sender_full_name": "Anton",
        "timestamp": 1699456209
    },
    {
        "content": "<p>If there's only one type variable in your signature then it makes no difference whether you use <code>*</code> or <code>a</code><br>\nBut consider these signatures</p>\n<ol>\n<li><code>List a, List a -&gt; Bool</code></li>\n<li><code>List a, List b -&gt; Bool</code></li>\n<li><code>List *, List * -&gt; Bool</code> </li>\n</ol>\n<p>1 and 2 are different signatures. In signature 1, the two lists must contain the same type of value. In signature 2 that is not a constraint. They can be different or the same.<br>\nSignatures 2 and 3 are the same.<br>\nSignature 3 is just a convenience notation for signature 2.</p>",
        "id": 400966930,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1699457097
    },
    {
        "content": "<p>oh alright, got it now, thank you very much !</p>",
        "id": 400970605,
        "sender_full_name": "Paul Le Corre",
        "timestamp": 1699458129
    },
    {
        "content": "<p>Maybe it's a concept that could be approached later in the tutorial ? At least, after the variable types part, as it seems mainly used for type inference and not much in day to day development.</p>",
        "id": 400971094,
        "sender_full_name": "Paul Le Corre",
        "timestamp": 1699458294
    },
    {
        "content": "<p>Let me know if you need help updating that part.</p>",
        "id": 400971505,
        "sender_full_name": "Paul Le Corre",
        "timestamp": 1699458414
    },
    {
        "content": "<p>I wonder if we should cut the <code>wildcard types</code> section <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 400974807,
        "sender_full_name": "Anton",
        "timestamp": 1699459375
    },
    {
        "content": "<p>perhaps it does come up often enough in the repl or in error messages...</p>",
        "id": 400975297,
        "sender_full_name": "Anton",
        "timestamp": 1699459454
    },
    {
        "content": "<p>We could also move it to the examples repo</p>",
        "id": 400976291,
        "sender_full_name": "Anton",
        "timestamp": 1699459714
    },
    {
        "content": "<p>I think the main place it comes up is the standard library documentation.</p>",
        "id": 400978026,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1699460265
    },
    {
        "content": "<p>Probably worth a mention in a subsection at the end of the type variable section. Just something short, maybe even brians example</p>",
        "id": 400978043,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1699460269
    },
    {
        "content": "<blockquote>\n<p>I think the main place it comes up is the standard library documentation.</p>\n</blockquote>\n<p>The standard library documentation is all in roc files right? And I searched for <code>List *</code> in all roc files in the repo and got nothing, so seems like it's not in the documentation either.</p>",
        "id": 400978554,
        "sender_full_name": "Anton",
        "timestamp": 1699460417
    },
    {
        "content": "<p>I think since it's in the std lib it should be mentioned in the tutorial. It's true though that in application code you don't often write <code>*</code>, it's mostly for library code. So a beginner intro should cover how to read it at least.</p>",
        "id": 400978644,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1699460448
    },
    {
        "content": "<p>Oh!</p>",
        "id": 400978675,
        "sender_full_name": "Brian Carroll",
        "timestamp": 1699460459
    },
    {
        "content": "<p>I was still focused on <code>List *</code>, it does come up regularly for Dict, Set, and when using Task.</p>",
        "id": 400980439,
        "sender_full_name": "Anton",
        "timestamp": 1699461001
    },
    {
        "content": "<p>I've changed List <code>isEmpty</code>, <code>withCapacity</code> and <code>len</code> to use a wildcard for consistency with Dict and Set.</p>",
        "id": 401004498,
        "sender_full_name": "Anton",
        "timestamp": 1699469585
    },
    {
        "content": "<p>Is it something that could be removed from the language ? Inferred signatures could have default variable type names such as <code>a</code>, <code>b</code>, <code>c</code>, <code>..</code>, <code>aa</code>.  As a beginner not used to FP notations, it seems clearer to not have both. But I may be missing important uses cases.</p>",
        "id": 401007529,
        "sender_full_name": "Paul Le Corre",
        "timestamp": 1699470777
    },
    {
        "content": "<p>It could be replaced, but seeing <code>List a</code> is meant to have a meaning. <code>a</code> is a type variable that is expected to be matched with other locations. By writing <code>a</code> it is kinda like specifying that you care about the type.</p>\n<p><code>(List a, a)</code> means that I care about the element type of the list. It must match the other value in the tuple.</p>\n<p>Seeing <code>(List a, b, List c, d)</code> is just noise. None of those type variable have any meaning. As a reader of the type signiture, I expect to see the type variables used elsewhere, but they aren't.</p>\n<p>Seeing a <code>*</code> is a clear signal that the type can not matter. There is no way it can be depended on or matched at all.</p>",
        "id": 401009545,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1699471625
    },
    {
        "content": "<p>Indeed, the nuance was unclear to me, but makes perfect sense now. Thanks for sharing !</p>",
        "id": 401016239,
        "sender_full_name": "Paul Le Corre",
        "timestamp": 1699474474
    }
]