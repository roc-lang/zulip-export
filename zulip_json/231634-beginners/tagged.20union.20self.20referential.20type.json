[
    {
        "content": "<p>I'm trying to build a tagged union type that describes a 'parser' - very similar to those used in the current (rust) parser, and running into issues with the type checker stack-overflowing. Not sure whether this is a bug in my code, a bug in the compiler, or both.</p>\n<p>Here's a reduced version of the problematic code:</p>\n<div class=\"codehilite\"><pre><span></span><code>Type : Str # usually something more complicated\nParserName : Str\nErrTy : Str  # usually something more complicated\n\nField : { name: Str, parser: Parser }\n\nParser : [\n    Loc Parser,\n    Specialize ErrTy Parser,\n    Record (List Field),\n    Builtin Str Type,\n]\n</code></pre></div>\n<p>An instantiation of this type might be something like:</p>\n<div class=\"codehilite\"><pre><span></span><code>module_name = Loc (Specialize &quot;EHeader::ModuleName&quot; (Builtin &quot;name&quot; &quot;&amp;str&quot;))\n</code></pre></div>\n<p>Is this the right way to go about representing the type for this kind of tree, of arbitrary depth in roc? In rust, I'd need to insert a Box somewhere in there - do I need an analogous thing in roc?</p>",
        "id": 314379954,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1670390621
    },
    {
        "content": "<p>Roc should automatically deal with the boxing for the recursive type. So I think this is a compiler bug.</p>",
        "id": 314380567,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670391045
    },
    {
        "content": "<p>I bet it is due to the list of the record containing a <code>Parser</code></p>",
        "id": 314380591,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670391070
    },
    {
        "content": "<p>I bet that it confuses the compiler</p>",
        "id": 314380601,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670391095
    },
    {
        "content": "<p>Ah, the issue is that you define <code>Field</code>. If you inline the definition of <code>Field</code>, it works. So definitely a compiler bug</p>",
        "id": 314380978,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670391378
    },
    {
        "content": "<p>oh, and <code>module_name</code> isn't a valid variable name in Roc. has to be <code>moduleName</code> or similar.</p>",
        "id": 314381191,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1670391585
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"453336\">@Joshua Warner</span> if you get something working and happy to share, I would be super keen to see it. I've been learning the basics of parsing and looking through different implementations at the moment to try and understand more.</p>",
        "id": 314391363,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1670398030
    },
    {
        "content": "<p>Here's the main part of the stack overflow, if you're curious:</p>\n<div class=\"codehilite\"><pre><span></span><code>    frame #1751: 0x000000010344667c roc`roc_types::types::Type::instantiate_aliases::h7fd1ca528cfb61a4(self=0x00000001715f3820, region=Region @ 0x00000001715f2278, aliases=0x00000001715fa930, var_store=0x000000017160b334, new_lambda_set_variables=0x00000001715fa948, new_infer_ext_vars=0x00000001715fa960) at types.rs:2677:25\n    frame #1752: 0x0000000103445c10 roc`roc_types::types::Type::instantiate_aliases::h7fd1ca528cfb61a4(self=0x0000029fc4059920, region=Region @ 0x00000001715f34d8, aliases=0x00000001715fa930, var_store=0x000000017160b334, new_lambda_set_variables=0x00000001715fa948, new_infer_ext_vars=0x00000001715fa960) at types.rs:2917:25\n    frame #1753: 0x000000010344667c roc`roc_types::types::Type::instantiate_aliases::h7fd1ca528cfb61a4(self=0x00000001715f5ce0, region=Region @ 0x00000001715f4738, aliases=0x00000001715fa930, var_store=0x000000017160b334, new_lambda_set_variables=0x00000001715fa948, new_infer_ext_vars=0x00000001715fa960) at types.rs:2677:25\n    frame #1754: 0x0000000103445c10 roc`roc_types::types::Type::instantiate_aliases::h7fd1ca528cfb61a4(self=0x0000029fc40598c0, region=Region @ 0x00000001715f5998, aliases=0x00000001715fa930, var_store=0x000000017160b334, new_lambda_set_variables=0x00000001715fa948, new_infer_ext_vars=0x00000001715fa960) at types.rs:2917:25\n    frame #1755: 0x000000010344667c roc`roc_types::types::Type::instantiate_aliases::h7fd1ca528cfb61a4(self=0x00000001715f81a0, region=Region @ 0x00000001715f6bf8, aliases=0x00000001715fa930, var_store=0x000000017160b334, new_lambda_set_variables=0x00000001715fa948, new_infer_ext_vars=0x00000001715fa960) at types.rs:2677:25\n    frame #1756: 0x0000000103445c10 roc`roc_types::types::Type::instantiate_aliases::h7fd1ca528cfb61a4(self=0x0000029fc43c5db0, region=Region @ 0x00000001715f7e58, aliases=0x00000001715fa930, var_store=0x000000017160b334, new_lambda_set_variables=0x00000001715fa948, new_infer_ext_vars=0x00000001715fa960) at types.rs:2917:25\n    frame #1757: 0x0000000103445244 roc`roc_types::types::RecordField$LT$roc_types..types..Type$GT$::instantiate_aliases::h892c40d91ec5d2c0(self=0x0000029fc43c5da8, region=Region @ 0x00000001715f8df8, aliases=0x00000001715fa930, var_store=0x000000017160b334, new_lambda_sets=0x00000001715fa948, new_infer_ext_vars=0x00000001715fa960) at types.rs:182:9\n    frame #1758: 0x0000000103446760 roc`roc_types::types::Type::instantiate_aliases::h7fd1ca528cfb61a4(self=0x00000001715fa8d0, region=Region @ 0x00000001715f9128, aliases=0x00000001715fa930, var_store=0x000000017160b334, new_lambda_set_variables=0x00000001715fa948, new_infer_ext_vars=0x00000001715fa960) at types.rs:2699:21\n    frame #1759: 0x00000001033c8e80 roc`roc_can::def::correct_mutual_recursive_type_alias::h0b0aff0b5ffca772(env=0x0000000171600328, original_aliases=VecMap&lt;roc_module::symbol::Symbol, roc_types::types::Alias&gt; @ 0x00000001715fc670, var_store=0x000000017160b334) at def.rs:2873:13\n    frame #1760: 0x00000001033c3330 roc`roc_can::def::canonicalize_type_defs::h72be2e745d0b89fd(env=0x0000000171600328, output=0x0000000171600fc8, var_store=0x000000017160b334, scope=0x0000000171600048, pending_abilities_in_scope=0x0000000171606780, pending_type_defs=Vec&lt;roc_can::def::PendingTypeDef, alloc::alloc::Global&gt; @ 0x0000000171606bb0) at def.rs:1306:19\n    frame #1761: 0x0000000103366224 roc`roc_can::module::canonicalize_module_defs::h641f2bfc12631c51 at def.rs:977:9\n    frame #1762: 0x0000000103365bac roc`roc_can::module::canonicalize_module_defs::h641f2bfc12631c51(arena=0x0000029fb82304c8, loc_defs=0x0000029fc4412e28, header_for=0x000000017160af58, home=ModuleId @ 0x0000000171600024, module_ids=0x0000000171611bd0, exposed_ident_ids=IdentIds @ 0x000000017160b768, dep_idents=0x0000000171612620, aliases=HashMap&lt;roc_module::symbol::Symbol, roc_types::types::Alias, core::hash::BuildHasherDefault&lt;wyhash::traits::WyHash&gt;&gt; @ 0x000000017160b7b0, imported_abilities_state=IAbilitiesStore&lt;roc_can::abilities::Pending&gt; @ 0x000000017160b7d8, exposed_imports=HashMap&lt;roc_module::ident::Ident, (roc_module::symbol::Symbol, roc_region::all::Region), core::hash::BuildHasherDefault&lt;wyhash::traits::WyHash&gt;&gt; @ 0x000000017160b8a0, exposed_symbols=0x0000000171612650, symbols_from_requires=&amp;[(roc_region::all::Loc&lt;roc_module::symbol::Symbol&gt;, roc_region::all::Loc&lt;roc_parse::ast::TypeAnnotation&gt;)] @ 0x0000000171606610, var_store=0x000000017160b334) at module.rs:366:46\n</code></pre></div>",
        "id": 314488157,
        "sender_full_name": "Joshua Warner",
        "timestamp": 1670428060
    },
    {
        "content": "<p>nice, we haven't seen one of these in a while. I filed <a href=\"https://github.com/roc-lang/roc/issues/4709\">https://github.com/roc-lang/roc/issues/4709</a> for it</p>",
        "id": 314494526,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1670428932
    },
    {
        "content": "<p>I know it's not great, but you could work around this for now by inlining the definition of <code>Field</code> where it's used in <code>Parser</code></p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">-     Record (List Field),</span><span class=\"w\"></span>\n<span class=\"gi\">+     Record (List { name: Str, parser: Parser }),</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 314494802,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1670429016
    }
]