[
    {
        "content": "<p>Hey,<br>\nwhen working with opaque types, I constantly seem to get it wrong when to \"prefix\" my def with the actual type, e.g. when passing it to another function that expects such a type.</p>\n<p>Example:</p>\n<div class=\"codehilite\"><pre><span></span><code>A := {\n    input: List U8\n}\n\nnew : {} -&gt; A\nnew = \\{} -&gt; @A { input: [] }\n\nsomeFunc : A -&gt; Result {} _\nsomeFunc = \\@A a -&gt;\n    a2 = anotherFunc (@A a) # only works with @A\n    a3 = anotherFunc a2 # only works without @A\n    Ok ({})\n\nanotherFunc : A -&gt; A\nanotherFunc = \\@A a -&gt;\n    @A a # only works with @A\n</code></pre></div>\n<p>Is it maybe just me not understanding when to explicitly prefix the def, or is this currently a known \"issue\"?<br>\nAnyway, I am very new to Roc, so my limited understanding and experience with Roc might be very well the root cause.</p>",
        "id": 491516107,
        "sender_full_name": "Patrick Wierer",
        "timestamp": 1735752903
    },
    {
        "content": "<p>Sorry to hear that it's been confusing when to prefix the type. If it helps, the type of <code>@A a</code> and <code>a</code> itself are different. In this case <code>@A a</code> is the entire opaque type <code>A</code>. <code>a</code> is the type \"inside\" <code>A</code>, so <code>{ input: List U8 }</code> in your example. To pass <code>{ input: List U8 }</code> to <code>anotherFunc</code>, it must first be wrapped in the <code>A</code>. But <code>anotherFunc</code> returns an <code>A</code>, so you don't need to wrap it again when calling <code>a3 = anotherFunc a2</code>.</p>",
        "id": 491516438,
        "sender_full_name": "Ayaz Hafiz",
        "timestamp": 1735753220
    },
    {
        "content": "<p>No worries, it's the normal process with everything new. Just takes time to internalize things <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span><br>\nThanks for the explanation, it definitely makes sense to me now.<br>\nSo it seems the argument <code>@A a</code> from <code>someFunc</code> is actually unwrapped, which explains my confusion as to why I would need to wrap it again when calling <code>anotherFunc</code> the first time.</p>",
        "id": 491516862,
        "sender_full_name": "Patrick Wierer",
        "timestamp": 1735753651
    },
    {
        "content": "<p>Yep!</p>",
        "id": 491517111,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735753858
    }
]