[
    {
        "content": "<p>What’s the simplest and/or most efficient way to convert a U32 (big endian by default) into its little endian equivalent?</p>",
        "id": 440517065,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1716559644
    },
    {
        "content": "<p>For now, I’ve written the following:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">littleendian</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">U32</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">U32</span>\n<span class=\"nv\">littleendian</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">b3</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">shiftRightZfBy</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"mi\">24</span>\n<span class=\"w\">    </span><span class=\"nv\">b2</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">shiftRightZfBy</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">shiftLeftBy</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">24</span>\n<span class=\"w\">    </span><span class=\"nv\">b1</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">shiftRightZfBy</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">shiftLeftBy</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">24</span>\n<span class=\"w\">    </span><span class=\"nv\">b0</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">shiftRightZfBy</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">shiftLeftBy</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">24</span>\n<span class=\"w\">    </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">shiftLeftBy</span><span class=\"w\"> </span><span class=\"nv\">b0</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">shiftLeftBy</span><span class=\"w\"> </span><span class=\"nv\">b1</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"kt\">Num</span><span class=\"nf\">.</span><span class=\"nv\">shiftLeftBy</span><span class=\"w\"> </span><span class=\"nv\">b2</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"nf\">+</span><span class=\"w\"> </span><span class=\"nv\">b3</span>\n</code></pre></div>",
        "id": 440519551,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1716560429
    },
    {
        "content": "<p>Yeah, bit shifting is the way. Personally, I prefer bitwise or to addition, but would need to play around with exact assembly to find the fastest way (and tight benchmarks).</p>",
        "id": 440521141,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1716560967
    },
    {
        "content": "<p>Also, I would expect bitwise and with <code>0xFF</code> to be more likely to optimize correctly than shifting back and forth. But again, just a guess and llvm is really smart.</p>",
        "id": 440521416,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1716561055
    },
    {
        "content": "<p>Thanks, yeah the performance part is just out of curiosity. I’m implementing salsa20 for the learning experience and not for production ready code.</p>",
        "id": 440521725,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1716561142
    }
]