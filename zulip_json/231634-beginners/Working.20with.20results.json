[
    {
        "content": "<p>Given I've got a string that looks like this<br>\n\"123x123x123<br>\n234x123x987<br>\n567x987x123\"</p>\n<p>I'd like to transform this into something like [{a: 123, b: 123, c: 123}, {a: 234, b: 123, c: 987}, {a: 567, b: 987, c: 123}].</p>\n<p>Without access to the lsp right now, I'm somehow confused.</p>\n<p>I'd have assumed something like:</p>\n<div class=\"codehilite\"><pre><span></span><code>    inputDetails =\n        inputs\n        |&gt; Str.split &quot;\\n&quot;\n        |&gt; List.dropIf Str.isEmpty\n        |&gt; List.map parseLine\n\nparseLine = \\singleLine -&gt;\n    lineParts = Str.split singleLine &quot;x&quot;\n    if List.len lineParts == 3 then\n        a = List.get? lineParts 0 |&gt; Str.toI8\n        b = List.get? lineParts 1 |&gt; Str.toI8\n        c = List.get? lineParts 2 |&gt; Str.toI8\n        Ok { a, b, c }\n    else\n        Err InvalidInputFormat\n</code></pre></div>\n<p>Yet this is a list of results with properties of a result type which I can't seem to use in further functions requiring numbers.  What would I need to do in order to work further with these properties?</p>",
        "id": 469737668,
        "sender_full_name": "Tobias Steckenborn",
        "timestamp": 1726162552
    },
    {
        "content": "<p>You'll be looking for <a href=\"https://www.roc-lang.org/builtins/List#mapTry\">mapTry</a>, of type <code>List elem, (elem -&gt; Result ok err) -&gt; Result (List ok) err</code></p>",
        "id": 469745836,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1726164030
    },
    {
        "content": "<p>I'd recommend something like:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">inputDetails</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">inputs</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">dropIf</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">isEmpty</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">mapTry</span><span class=\"w\"> </span><span class=\"nv\">parseLine</span>\n\n<span class=\"nv\">parseLine</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">parsedNums</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">        </span><span class=\"nv\">line</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"w\"> </span><span class=\"s\">\"x\"</span>\n<span class=\"w\">        </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">mapTry</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">toI8</span>\n\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">parsedNums</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">c</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">WrongAmountOfNums</span>\n<span class=\"w\">        </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">InvalidNumStr</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"kt\">InvalidNum</span>\n</code></pre></div>\n<p>This could help avoid the repetition in <code>parseLine</code></p>",
        "id": 469747361,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1726164293
    },
    {
        "content": "<p>The output of that would be <code>Result (List { height : I8, length : I8, width : I8 }) [InvalidNum, WrongAmountOfNums]</code> right? Given I'd need to pass this into a further function,  just calling <br>\n<code>`        |&gt; List.map \\element -&gt; someFunction element.a element.b element.c</code> wouldn't work, right?</p>",
        "id": 469752132,
        "sender_full_name": "Tobias Steckenborn",
        "timestamp": 1726165843
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"513294\">@Tobias Steckenborn</span> yes, we can't with the above code just use <code>inputDetails</code>, as errors have potentially occurred. My code changes <code>inputDetails</code> from <code>List (Result { ... } [...])</code> to <code>Result (List { ... }) [...]</code>, but there is still a <code>Result</code> being returned</p>",
        "id": 469753269,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1726166248
    },
    {
        "content": "<p>If you want to access the values inside, you could either put a question mark on <code>|&gt; List.mapTry? parseLine</code> to propagate the potential error up to the result of the function these variables exist within, or call something like <code>|&gt; Result.withDefault []</code> to handle the result in-place.</p>",
        "id": 469753565,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1726166338
    },
    {
        "content": "<p>Otherwise, there's not much to be done while the Result is as-of-yet \"wrapped\" around the useful value (that may or may not exist).</p>",
        "id": 469753711,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1726166377
    },
    {
        "content": "<p>After that point, you could do what you're suggesting:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">inputDetails</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">inputs</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">dropIf</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">isEmpty</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">mapTry</span><span class=\"err\">?</span><span class=\"w\"> </span><span class=\"nv\">parseLine</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">element</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">someFunction</span><span class=\"w\"> </span><span class=\"nv\">element</span><span class=\"nf\">.</span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">element</span><span class=\"nf\">.</span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"nv\">element</span><span class=\"nf\">.</span><span class=\"nv\">c</span>\n\n<span class=\"err\">#</span><span class=\"w\"> </span><span class=\"kt\">ALTERNATIVELY</span>\n\n<span class=\"nv\">inputDetails</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">inputs</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">split</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">dropIf</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"nf\">.</span><span class=\"nv\">isEmpty</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">mapTry</span><span class=\"w\"> </span><span class=\"nv\">parseLine</span>\n\n<span class=\"nv\">mappedDetails</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">inputDetails</span><span class=\"err\">?</span>\n<span class=\"w\">    </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">element</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">someFunction</span><span class=\"w\"> </span><span class=\"nv\">element</span><span class=\"nf\">.</span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">element</span><span class=\"nf\">.</span><span class=\"nv\">b</span><span class=\"w\"> </span><span class=\"nv\">element</span><span class=\"nf\">.</span><span class=\"nv\">c</span>\n</code></pre></div>",
        "id": 469754630,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1726166621
    },
    {
        "content": "<p>Are you sure that the alternative version should work?</p>\n<p>I'm getting:</p>\n<div class=\"codehilite\"><pre><span></span><code>UNRECOGNIZED NAME\n\nNothing is named `inputDetails` in this scope.\n</code></pre></div>\n<p><a href=\"/user_uploads/22008/Sy2wB0D_Y5wnZ3Ne1jctoLCG/2024-09-13-at-17.15.102x.png\">2024-09-13-at-17.15.102x.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/22008/Sy2wB0D_Y5wnZ3Ne1jctoLCG/2024-09-13-at-17.15.102x.png\" title=\"2024-09-13-at-17.15.102x.png\"><img data-original-dimensions=\"1898x390\" src=\"/user_uploads/thumbnail/22008/Sy2wB0D_Y5wnZ3Ne1jctoLCG/2024-09-13-at-17.15.102x.png/840x560.webp\"></a></div>",
        "id": 469994695,
        "sender_full_name": "Tobias Steckenborn",
        "timestamp": 1726240532
    }
]