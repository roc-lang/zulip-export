[
    {
        "content": "<p>I'm trying to read a file, and convert any of the errors I get into a simple <code>FailedToReadFile</code> like so:</p>\n<div class=\"codehilite\"><pre><span></span><code>readFile : Path -&gt; Task Str [FailedToReadFile]\nreadFile = \\path -&gt;\n    File.readUtf8 path\n    |&gt; Task.onErr \\err -&gt;\n        Task.err FailedToReadFile\n</code></pre></div>\n<p>However, it looks like the error details of <code>File.readUtf8</code> are escaping somehow, and I get this error:</p>\n<div class=\"codehilite\"><pre><span></span><code>This Task.await call produces:\n\n    Task {} [\n        FileReadErr Path.Path InternalFile.ReadErr,\n        FileReadUtf8Err Path.Path [BadUtf8 Utf8ByteProblem Nat],\n        …\n    ]\n\nBut the type annotation on run says it should be:\n\n    Task {} [FailedToReadFile, …]\n</code></pre></div>",
        "id": 408300481,
        "sender_full_name": "Zellyn Hunter",
        "timestamp": 1702700390
    },
    {
        "content": "<p>(Basically, I'm a noob to Roc (or even something else that has Tasks like Elm), and running aground on the classic \"I just want to read a file\" tutorial example <span aria-label=\"disappointed\" class=\"emoji emoji-1f61e\" role=\"img\" title=\"disappointed\">:disappointed:</span>)</p>",
        "id": 408300618,
        "sender_full_name": "Zellyn Hunter",
        "timestamp": 1702700508
    },
    {
        "content": "<p>Can you share your full code please? This seems a bit strange</p>",
        "id": 408300694,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1702700536
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>app &quot;hello&quot;\n    packages { pf: &quot;https://github.com/roc-lang/basic-cli/releases/download/0.7.0/bkGby8jb0tmZYsy2hg1E_B2QrCgcSTxdUlHtETwm5m4.tar.br&quot; }\n    imports [\n        pf.Stdout,\n        pf.File,\n        pf.Task.{ Task, await },\n        pf.Path.{ Path },\n        pf.Stderr,\n        pf.Arg,\n    ]\n    provides [main] to pf\n\nmain : Task {} *\nmain =\n    run\n    |&gt; Task.onErr handleErr\n\nError : [\n    FailedToReadArgs,\n    FailedToReadFile,\n]\n\nhandleErr : Error -&gt; Task {} *\nhandleErr = \\err -&gt;\n    usage = &quot;roc main.roc -- example&quot;\n\n    errorMsg = when err is\n        FailedToReadArgs -&gt; &quot;Failed to read command line arguments, usage: \\(usage)&quot;\n        FailedToReadFile -&gt; &quot;Failed to read file&quot;\n\n    Stderr.line &quot;Error: \\(errorMsg)&quot;\n\nrun : Task {} Error\nrun =\n    { inputPath } &lt;- readArgs |&gt; await\n\n    {} &lt;- Stdout.line &quot;Reading file \\&quot;\\(Path.display inputPath)\\&quot;&quot; |&gt; await\n\n    contents &lt;- File.readUtf8 inputPath |&gt; await\n\n    Stdout.line &quot;Done&quot;\n\n\nreadFile : Path -&gt; Task Str [FailedToReadFile]\nreadFile = \\path -&gt;\n    File.readUtf8 path\n    |&gt; Task.onErr \\err -&gt;\n        Task.err FailedToReadFile\n\n\nreadArgs : Task { inputPath: Path } [FailedToReadArgs]_\nreadArgs =\n    args &lt;- Arg.list |&gt; Task.attempt\n\n    when args is\n        Ok ([ _, arg ]) -&gt;\n            Task.ok { inputPath: Path.fromStr arg }\n        _ -&gt;\n            Task.err FailedToReadArgs\n</code></pre></div>",
        "id": 408300722,
        "sender_full_name": "Zellyn Hunter",
        "timestamp": 1702700571
    },
    {
        "content": "<p>I even tried putting a mysterious \"to fix bug\" underscore on the end of the type definition for <code>readFile</code> (like on <code>readArgs</code> from the tutorial), but that didn't help <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 408300774,
        "sender_full_name": "Zellyn Hunter",
        "timestamp": 1702700635
    },
    {
        "content": "<p>Calling the wrong function in<code>run</code>? <code>contents &lt;- File.readUtf8 inputPath |&gt; await</code></p>",
        "id": 408300961,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702700773
    },
    {
        "content": "<p>Should be <code>contents &lt;- readFile inputPath |&gt; await</code></p>",
        "id": 408300995,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702700804
    },
    {
        "content": "<p><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 408301012,
        "sender_full_name": "Zellyn Hunter",
        "timestamp": 1702700815
    },
    {
        "content": "<p>Not sure what is going on yet, but using .mapErr instead works ok</p>\n<div class=\"codehilite\"><pre><span></span><code>readFile : Path -&gt; Task Str [FailedToReadFile]_\nreadFile = \\path -&gt;\n    File.readUtf8 path |&gt; Task.mapErr \\_ -&gt; FailedToReadFile\n</code></pre></div>",
        "id": 408301036,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1702700834
    },
    {
        "content": "<p>Ah, that's cleaner.</p>",
        "id": 408301049,
        "sender_full_name": "Zellyn Hunter",
        "timestamp": 1702700861
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 408301050,
        "sender_full_name": "Zellyn Hunter",
        "timestamp": 1702700864
    },
    {
        "content": "<p>lol, and I thought adventofcode day 14 might be fun to try to use for learning Roc <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 408301111,
        "sender_full_name": "Zellyn Hunter",
        "timestamp": 1702700888
    },
    {
        "content": "<p>Yeah, Tasks can be tricky to start with.</p>",
        "id": 408301134,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1702700910
    },
    {
        "content": "<p>I guess I picked the right day… Sisyphus and all that…</p>",
        "id": 408301141,
        "sender_full_name": "Zellyn Hunter",
        "timestamp": 1702700922
    },
    {
        "content": "<p>It took me a while to grok them. But they're pretty awesome, so worth the time to learn.</p>",
        "id": 408301168,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1702700950
    },
    {
        "content": "<p>Without the trailing <code>_</code> the errors wont merge very well into the single handleErr</p>",
        "id": 408301310,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1702701071
    },
    {
        "content": "<p>hmm not sure I understand that last part…</p>",
        "id": 408301675,
        "sender_full_name": "Zellyn Hunter",
        "timestamp": 1702701420
    },
    {
        "content": "<p>The tutorial probably explains it better than I can <a href=\"https://www.roc-lang.org/tutorial#open-and-closed-tag-unions\">here in the advanced topics section</a>. </p>\n<p>My understanding though is that the tag unions (should be) open in the output position by default (but currently there is a bug), which means they can be combined into a larger tag union.  Without the <code>_</code> the type, with the current implementation this means that the tag union is closed i.e. <code>[A,B]</code> can only have the tags <code>A</code> and <code>B</code> in it. This isn't very helpful when we want to define two different functions <code>x : Result _ [Foo]</code> and <code>y : Result _ [Bar]</code> because these errors are different closed tag unions and cannot be combined. Whereas if we add the trailing <code>_</code> they become open and will accept additional tags in a combined union.</p>",
        "id": 408303900,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1702702964
    },
    {
        "content": "<p>Ah, thanks, that's helpful.</p>",
        "id": 408396050,
        "sender_full_name": "Zellyn Hunter",
        "timestamp": 1702778079
    }
]