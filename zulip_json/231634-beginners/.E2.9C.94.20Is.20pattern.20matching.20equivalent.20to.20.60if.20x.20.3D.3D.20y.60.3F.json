[
    {
        "content": "<p>In the <a href=\"https://www.roc-lang.org/tutorial#pattern-matching\">tutorial section on pattern matching</a>, this snippet:</p>\n<div class=\"codehilite\"><pre><span></span><code>if stoplightColor == Red then\n    &quot;red&quot;\n# ...\n</code></pre></div>\n<p>is converted to:</p>\n<div class=\"codehilite\"><pre><span></span><code>when stoplightColor is\n    Red -&gt; &quot;red&quot;\n# ...\n</code></pre></div>\n<p>Does that mean pattern matching is equivalent to <code>if x == y</code>?</p>\n<p>That seems to be the case as long as the matches are a single value. This works:</p>\n<div class=\"codehilite\"><pre><span></span><code>when 1 + 1 is\n    2 -&gt; Stdout.line! &quot;math is cool&quot;\n    _ -&gt; crash &quot;everything you believe in is a lie&quot;\n</code></pre></div>\n<p>But this doesn't work, with the match as an expression:</p>\n<div class=\"codehilite\"><pre><span></span><code>when 1 + 1 is\n    3 - 1 -&gt; Stdout.line! &quot;math is cool&quot;\n    _ -&gt; crash &quot;everything you believe in is a lie&quot;\n</code></pre></div>\n<p>I get this error:</p>\n<div class=\"codehilite\"><pre><span></span><code>MISSING ARROW\n\nI am partway through parsing a `when` expression, but got\nstuck here:\n\n6│  when 1 + 1 is\n7│      3 - 1 -&gt;\n          ^\n</code></pre></div>\n<p>I tried adding parentheses around the expression, and putting the branches on a new indented line, but the error is still there. It seems to be related to the way pattern matching works. Which makes me wonder: is pattern matching really equivalent to <code>if x == y</code> after all?</p>",
        "id": 469492137,
        "sender_full_name": "Felipe Vogel",
        "timestamp": 1726083302
    },
    {
        "content": "<p>It's <em>similar</em>, but not equivalent. We call it matching instead of equivalence checking because we're checking if a value with different possible states matches a pattern that represents a set of those states.</p>\n<p>For example, </p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">user</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">email</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">status</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Inactive</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"err\">!</span><span class=\"w\"> </span><span class=\"s\">\"Inactive user found with email $(email)\"</span>\n</code></pre></div>",
        "id": 469493001,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1726083517
    },
    {
        "content": "<p>This <em>matches</em> on any user that has <code>status == Inactive</code>, but will allow any user with any email.</p>",
        "id": 469493287,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1726083572
    },
    {
        "content": "<p>The examples you gave at the start are these special cases where instead of matching on structurally equivalent values like <code>{ email, status: ... }</code>, we're instead matching on something that has the same whole value, like 2.</p>",
        "id": 469493853,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1726083668
    },
    {
        "content": "<p>The <code>3 - 1</code> thing doesn't work because we don't currently (nor do most languages) have a compiler that's smart enough to know that <code>3 - 1</code> is equivalent to <code>2</code>.</p>",
        "id": 469494095,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1726083711
    },
    {
        "content": "<p>So in short, <code>when</code> is close to <code>==</code>, but it's smarter in the way that it can capture and use structural content of the matched data, but dumber in that it needs to be given static values, not expressions that evaluate to static values</p>",
        "id": 469494512,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1726083786
    },
    {
        "content": "<p>Gotcha, that makes sense, thanks.</p>\n<p>The reason I went down this rabbit hole is that <code>_ if someExpression -&gt;</code> match syntax makes it easier to fit logic into pattern matching that otherwise wouldn't fit and would have to be changed to a full <code>if-then</code> expression instead. So that made me wonder about the boundaries between the two syntaxes.</p>",
        "id": 469497232,
        "sender_full_name": "Felipe Vogel",
        "timestamp": 1726084444
    },
    {
        "content": "<p>Well, I disagree that a single <code>if</code> expression linguistically implies you're checking multiple conditions. That's why we have these <code>if-else</code> chains:</p>\n<p>\"If X then A else if Y then B else if ...\"</p>\n<p><code>when</code> is meant to imply you're checking multiple conditions. If we found a word that implied both, I'd be more okay with them having the same keyword, but <code>if</code> is so universal, it'd be pretty hard to argue for getting rid of it</p>",
        "id": 469498006,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1726084758
    },
    {
        "content": "<p>Sorry, I didn't mean to suggest changing <code>when</code> to <code>if</code>. I meant that I was thinking about the existing way that <code>if</code> can be included in a <code>when</code> match:</p>\n<div class=\"codehilite\"><pre><span></span><code>when n is\n    0 -&gt; # ...\n    1 -&gt; # ...\n    _ if Num.isEven n -&gt; # ...\n    _ -&gt; # ...\n</code></pre></div>\n<p>(And the reason I was thinking about it is that this structure appears in some solutions to the Roc <a href=\"https://exercism.org/tracks/roc/exercises/collatz-conjecture/\">Collatz Conjecture exercise</a> on Exercism.)</p>",
        "id": 469499981,
        "sender_full_name": "Felipe Vogel",
        "timestamp": 1726085593
    },
    {
        "content": "<p>Oh, I see. Those are guard statements</p>",
        "id": 469500140,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1726085653
    },
    {
        "content": "<p>Yeah, let me re-read your messages, I may have read too quickly</p>",
        "id": 469500209,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1726085697
    },
    {
        "content": "<p>Okay, having re-read, I think the reason I answered the way I did was because you ended on \"that made me wonder about the boundaries between the two syntaxes\", and I didn't know how to provide a useful answer to that, so I assumed you were implying the barrier should be dropped.</p>",
        "id": 469500576,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1726085865
    },
    {
        "content": "<p>But I'm not actually sure what the question was, unless you really were just offering food for thought to the group.</p>",
        "id": 469500638,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1726085883
    },
    {
        "content": "<p>Which is totally fine! I'm just tutor-brained right now</p>",
        "id": 469500678,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1726085897
    },
    {
        "content": "<p>No worries, you answered my question when you explained:</p>\n<blockquote>\n<p>The <code>3 - 1</code> thing doesn't work because we don't currently (nor do most languages) have a compiler that's smart enough to know that <code>3 - 1</code> is equivalent to <code>2</code>.</p>\n</blockquote>\n<p>When I said \"that made me wonder…\" I was just saying why I asked the question in the first place, because I didn't want to seem like I was arbitrarily complaining about an edge case that doesn't matter in any real scenarios. My mistake for not being clearer that you'd already answered my question! Thanks again.</p>",
        "id": 469501199,
        "sender_full_name": "Felipe Vogel",
        "timestamp": 1726086134
    },
    {
        "content": "<p>Great!</p>",
        "id": 469501246,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1726086167
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"752978\">Felipe Vogel</span> has marked this topic as resolved.</p>",
        "id": 471062384,
        "sender_full_name": "Notification Bot",
        "timestamp": 1726598337
    }
]