[
    {
        "content": "<p>Why do <a href=\"https://www.roc-lang.org/builtins/List#len\">the docs for <code>List.len</code></a> say</p>\n<blockquote>\n<p>One List can store up to 2,147,483,648 elements (just over 2 billion), which is exactly equal to the highest valid #I32 value. This means the #U32 this function returns can always be safely converted to an #I32 without losing any data.</p>\n</blockquote>\n<p>I would've thought that, at least on a 64-bit machine, the maximum length would be closer to 2^63, and this expectation seems to be backed up by the design document for seamless slices. 2 billion items is very possible to reach by accident, so I don't think that limit would be a good choice for a correctness-oriented language like Roc</p>",
        "id": 430291564,
        "sender_full_name": "timotree",
        "timestamp": 1711733726
    },
    {
        "content": "<p>Docs are wrong unless you are on a 32bit system</p>",
        "id": 430302791,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1711738347
    },
    {
        "content": "<p>yeah looks like there was a mistaken edit there</p>",
        "id": 430302845,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1711738369
    },
    {
        "content": "<p>that part is true on 32-bit targets but not on 64-bit targets</p>",
        "id": 430302902,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1711738393
    },
    {
        "content": "<p>so it should be updated!</p>",
        "id": 430302924,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1711738402
    },
    {
        "content": "<p>Fixed in <a href=\"https://github.com/roc-lang/roc/pull/6612\">PR#6612</a> :)</p>",
        "id": 430391662,
        "sender_full_name": "Anton",
        "timestamp": 1711806539
    }
]