[
    {
        "content": "<p>How do I access elements of Pair? Eg as used in the example of map2, <code>zipped = List.map2 [\"a\", \"b\", \"c\"] [1, 2, 3] Pair</code>. If I pipe this to <code>List.all</code> how do I unpack/destructure the elements of the pair? I tried <code>\\p -&gt; p.0 == p.1</code> which seems to be tuple unpacking, and <code>\\p -&gt; p.first == p.second</code>, which tries to bind to a record with members first/second. (my example has  integers in both lists, not string and int like the map2 example, so equality testing should be ok)</p>",
        "id": 468587440,
        "sender_full_name": "Nils Hjelte",
        "timestamp": 1725809905
    },
    {
        "content": "<p>So you used a tag as your map2 joining function</p>",
        "id": 468593614,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725811411
    },
    {
        "content": "<p>So you have created <code>Pair Str (Num a)</code></p>",
        "id": 468594016,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725811491
    },
    {
        "content": "<p>So you would destructive the pair something like <code>\\Pair str int -&gt; ...</code></p>",
        "id": 468594167,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725811528
    },
    {
        "content": "<p>Also, you can destructive with a record or tuple as well:<br>\n<code>\\{first, second} -&gt; ...</code><br>\n<code>\\(first, second) -&gt; ...</code></p>",
        "id": 468594592,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725811655
    },
    {
        "content": "<p>With the record, the names would need to match the field name</p>",
        "id": 468594785,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725811736
    },
    {
        "content": "<p>For tags and tuples, the name can be anything</p>",
        "id": 468594813,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725811747
    },
    {
        "content": "<p>And of course, instead of using <code>Pair</code>, you could just build a tuple or record:<br>\n<code>List.map2 [\"a\", ...] [1, ...] \\a, b -&gt; (a, b)</code></p>",
        "id": 468595118,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1725811899
    },
    {
        "content": "<p>If you use a tuple, you can access the fields with .0, .1, .2, etc:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"p\">(</span><span class=\"s\">\"hello\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"world\"</span><span class=\"p\">)</span><span class=\"nf\">.</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"s\">\"world\"</span>\n\n<span class=\"kt\">List</span><span class=\"nf\">.</span><span class=\"nv\">map</span><span class=\"w\"> </span><span class=\"p\">[(</span><span class=\"s\">\"hello\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"world\"</span><span class=\"p\">)]</span><span class=\"w\"> </span><span class=\"nf\">.</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"nf\">==</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"world\"</span><span class=\"p\">]</span>\n</code></pre></div>",
        "id": 468622753,
        "sender_full_name": "Isaac Van Doren",
        "timestamp": 1725826950
    }
]