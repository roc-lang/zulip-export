[
    {
        "content": "<p>Hi Everyone,</p>\n<p>Can anybody please tell me is it possible to underscore in var names / fields?</p>\n<p>I found this issue: <a href=\"https://github.com/roc-lang/roc/issues/3026\">https://github.com/roc-lang/roc/issues/3026</a></p>\n<p>And it clearly states that it is possible to use underscore. But when I type in editor or repl something like <code>a_a = 1</code> instead of <code>a = 1</code> - it doesn't work. Same for <code>{ a_a : 1 }</code></p>\n<p>Thank you.</p>",
        "id": 410402955,
        "sender_full_name": "Paul Wickham",
        "timestamp": 1703836973
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span></p>",
        "id": 410405549,
        "sender_full_name": "Anton",
        "timestamp": 1703839059
    },
    {
        "content": "<p>if I remember correctly, I think we decided on Zulip to hold off on changing the design there, and to leave underscores out for now</p>",
        "id": 410432492,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1703856379
    },
    {
        "content": "<p>Ouh, I'd prefer to have the option. I'll look at the <a href=\"https://github.com/roc-lang/roc/issues/3026\">#3026</a> - maybe I figure out how to hack \"my\" Roc.</p>\n<p>Thank you.</p>",
        "id": 410437751,
        "sender_full_name": "Paul Wickham",
        "timestamp": 1703860083
    },
    {
        "content": "<p>Ok, I take that back - the issue is not associated with a commit. So I won't figure out how to patch it. No problem, no underscores for me ;-)<br>\nThank you.</p>",
        "id": 410437949,
        "sender_full_name": "Paul Wickham",
        "timestamp": 1703860215
    },
    {
        "content": "<p>I would like to be able to use underscores in special situations.</p>\n<p>For example, I like to name test functions with underscores, even when the naming convention of the language suggests CamelCase. I was convinced by Kevlin Henney in this talk: <a href=\"https://m.youtube.com/watch?v=MWsk1h8pv2Q&amp;si=QPoqmM85AifspmZU&amp;t=19m\">https://m.youtube.com/watch?v=MWsk1h8pv2Q&amp;si=QPoqmM85AifspmZU&amp;t=19m</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"MWsk1h8pv2Q\" href=\"https://m.youtube.com/watch?v=MWsk1h8pv2Q&amp;si=QPoqmM85AifspmZU&amp;t=19m\"><img src=\"https://uploads.zulipusercontent.net/8c568df2c68b2858b0243baaab1f37e5c9d8a9ba/68747470733a2f2f692e7974696d672e636f6d2f76692f4d57736b316838707632512f64656661756c742e6a7067\"></a></div><p>I know, you cannot name tests in roc, but I still hope, that this will change in the future <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>\n<p>Another case, where I used underscores in function names in Go (has a CamelCase convention) was in a situation of auto generated code, where it was impossible/very hard to get unique names without underscores. The data contained names like <code>foo/bar_blub</code> and <code>foo_bar/blub</code>. So I needed a different way to translate the slash and the underscores. In the end, I used <code>FooBar_Blub</code> and <code>Foo_BarBlub</code>. I don't like it, but I don't know, what I would have done, if Go would not allow underscores in their names.</p>",
        "id": 410448791,
        "sender_full_name": "Oskar Hahn",
        "timestamp": 1703866777
    },
    {
        "content": "<p>Hello,</p>\n<p>If there is an easy way how to <code>hack</code> the Rust implemetation as <span class=\"user-mention\" data-user-id=\"676655\">@Paul Wickham</span>  wanted to do, I'm happy to test it during my limited use.</p>\n<p><span class=\"user-mention\" data-user-id=\"281383\">@Richard Feldman</span>  If it is easy as changing <code>abcdefghijklmnopqrstuvwxyz</code> to <code>abcdefghijklmnopqrstuvwxyz_</code> please let us know where to add <code>_</code> in the codebase. I searched on github for something like <code>Vec&lt;char&gt; = s.chars().collect();</code> but I guess it is more complicated since I didn't find anything interesting...</p>",
        "id": 410448803,
        "sender_full_name": "mark.r",
        "timestamp": 1703866788
    },
    {
        "content": "<p>I  don't need the prime symbol. But I do miss underscore.</p>",
        "id": 410453015,
        "sender_full_name": "rudolf",
        "timestamp": 1703869368
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"676751\">rudolf</span> <a href=\"#narrow/stream/231634-beginners/topic/Allow.20underscores.20in.20field.20names.20and.20variable.20names.20.233026/near/410453015\">said</a>:</p>\n<blockquote>\n<p>I  don't need the prime symbol. But I do miss underscore.</p>\n</blockquote>\n<p>would this still be the case if <a class=\"stream-topic\" data-stream-id=\"304641\" href=\"/#narrow/stream/304641-ideas/topic/Shadowing.20Sigil\">#ideas &gt; Shadowing Sigil</a> was implemented?</p>",
        "id": 410454218,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1703869973
    },
    {
        "content": "<p>I haven't written enough code to need shadowing. My take is that the limitation of <code>[0-9A-Za-z]</code> characters is too restrictive. I'd like to have at least one special and underscore makes more sense than any other.</p>\n<p>It might not be the best practice in Elm/Roc to use underscore but it is handy to have the option. For example, in Haskell, a <code>functionName_</code>  usually means it is monadic. I saw people using <code>a_b</code> for conversion functions. And it is nice to have an underscore for record field names so your brain doesn't need to map between <code>fullName</code> in Roc and <code>full_name</code> in JSON you're reading.</p>",
        "id": 410460153,
        "sender_full_name": "rudolf",
        "timestamp": 1703872409
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"677127\">mark.r</span> <a href=\"#narrow/stream/231634-beginners/topic/Allow.20underscores.20in.20field.20names.20and.20variable.20names.20.233026/near/410448803\">said</a>:</p>\n<blockquote>\n<p>please let us know where to add <code>_</code> in the codebase. </p>\n</blockquote>\n<p>Same. Please let us know so we can modify Roc for our own use.</p>\n<p>I registered on Zulip just to figure out what special characters can be used, assuming that something like <code>'</code> or <code>-</code> can be used because <code>_</code> doesn't work. We need at least one special character, and I'd prefer <code>_</code> over Unicode Emoji char. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> .</p>",
        "id": 410527588,
        "sender_full_name": "geor",
        "timestamp": 1703927863
    },
    {
        "content": "<p>You can change <a href=\"https://github.com/roc-lang/roc/blob/a62c0ce054abd70e37013773ddf009920d8dd1ee/crates/compiler/parse/src/ident.rs#L473\">this line</a> to <code>if ch.is_alphabetic() || ch.is_ascii_digit() || ch == '_' {</code>. That allows <code>_</code> in identifiers but not as the first character. This change worked with one basic test, it may not play nice with <code>roc format</code> or the language server though, so no guarantees.</p>",
        "id": 410529402,
        "sender_full_name": "Anton",
        "timestamp": 1703929343
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"677210\">geor</span> <a href=\"#narrow/stream/231634-beginners/topic/Allow.20underscores.20in.20field.20names.20and.20variable.20names.20.233026/near/410527588\">said</a>:</p>\n<blockquote>\n<p>We need at least one special character</p>\n</blockquote>\n<p>I'm curious - what specific use cases do you want it for?</p>",
        "id": 410543002,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1703940054
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"676751\">rudolf</span> <a href=\"#narrow/stream/231634-beginners/topic/Allow.20underscores.20in.20field.20names.20and.20variable.20names.20.233026/near/410460153\">said</a>:</p>\n<blockquote>\n<p>My take is that the limitation of <code>[0-9A-Za-z]</code> characters is too restrictive. I'd like to have at least one special and underscore makes more sense than any other.</p>\n<p>It might not be the best practice in Elm/Roc to use underscore but it is handy to have the option. For example, in Haskell, a <code>functionName_</code>  usually means it is monadic. I saw people using <code>a_b</code> for conversion functions. And it is nice to have an underscore for record field names so your brain doesn't need to map between <code>fullName</code> in Roc and <code>full_name</code> in JSON you're reading.</p>\n</blockquote>\n<p>It's not just an Elm/Roc thing - underscores are also allowed in JavaScript, Java, C#, and Go, and I don't see them used in any of these ways in those languages. They certainly all use JSON and conversion functions!</p>",
        "id": 410543729,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1703940873
    },
    {
        "content": "<p>I also don't think the way Haskell uses <code>_</code> at the end of names is a convention Roc should adopt. <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 410544506,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1703941668
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/231634-beginners/topic/Allow.20underscores.20in.20field.20names.20and.20variable.20names.20.233026/near/410544506\">said</a>:</p>\n<blockquote>\n<p>I also don't think the way Haskell uses <code>_</code> at the end of names is a convention Roc should adopt. <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>\n</blockquote>\n<p>Of course, that wouldn't make sense for Roc. I just pointed out that one example is to differentiate two similar functions.</p>\n<p>But the main reason for me is that if I'm working with an outside world that is completely snake case, I want to be a snake case too or otherwise it's distracting and error-prone.</p>",
        "id": 410554944,
        "sender_full_name": "rudolf",
        "timestamp": 1703951820
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/231634-beginners/topic/Allow.20underscores.20in.20field.20names.20and.20variable.20names.20.233026/near/410543002\">said</a>:</p>\n<blockquote>\n<p>I'm curious - what specific use cases do you want it for?</p>\n</blockquote>\n<p><code>doIt_</code> will be a helper function for a function <code>doIt</code>. The trailing underscore means I don't have to come up with a name (like <code>doItHelp</code>) and I shouldn't expose it since it is a helper.</p>\n<p>But most importantly, everything I do is snake case. And I understand that Roc code should be camelCase but if I'm writing something just for myself and not open-sourcing I want to use the same casing as all those JSONs I'm working with have or the Python code I'm trying to convert to Roc uses.</p>\n<p>I didn't realize how it is <span aria-label=\"firecracker\" class=\"emoji emoji-1f9e8\" role=\"img\" title=\"firecracker\">:firecracker:</span>  <span aria-label=\"firecracker\" class=\"emoji emoji-1f9e8\" role=\"img\" title=\"firecracker\">:firecracker:</span>  <span aria-label=\"firecracker\" class=\"emoji emoji-1f9e8\" role=\"img\" title=\"firecracker\">:firecracker:</span> (pardon my French) annoying when I'm forced to use camelCase for my private projects. I love Roc but this small aspect wants me to break my keyboard.</p>\n<p>Apologies for this non-pragmatic answer. I love what you do Richard.</p>",
        "id": 410561162,
        "sender_full_name": "geor",
        "timestamp": 1703957961
    },
    {
        "content": "<p>I hear what you're saying, but I have to admit I'm really surprised. Personally if I'm using a language where the standard library and ecosystem is camelCase, then I use camelCase, and if it's snake_case I use snake_case. Otherwise my code inevitably ends up being a mix of both.</p>\n<p>This is the first time I've ever heard of a preference for mixing snake case and camel case in the same code base being an explicit goal!</p>",
        "id": 410564260,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1703961381
    },
    {
        "content": "<p>You know, it would be nice to have the option ;-).</p>",
        "id": 410569974,
        "sender_full_name": "geor",
        "timestamp": 1703967140
    },
    {
        "content": "<p>Hi, just dropped in. From most of this I get the same feeling I had when I started to use Python. I always used tabs to indent because it takes only 1 byte and everyone gets to set their own tabspace to their liking. So I kept using tabs. Used \"having the option\" to do so. But the moment I started working with other codebases, it bit me and I wished I wasn't as change averse over something invisibly small. To the point that I expect to have a formatter to do it for me.</p>\n<p>JSON is just the message format. I'm working in Python with prescribed camelCase OpenAPI specs, but in the code all data is represented with snake_case keys, and we deal with the differences between our models and the data interchange at the edge; the (de-) serialisation step.</p>\n<p>That said. When I implement a paper, I often wish I could use greek letters and prime characters as names in my program. The literature often has come to some common notation. And juggling the new concept is already taking precious cognitive load, so having the same notation would relax some of that. The way Python used to be very close to pseudo code in notation.</p>\n<p>But then again, papers are to code as JSON is to code. A message that needs to be translated.</p>",
        "id": 410622713,
        "sender_full_name": "Chris Wesseling",
        "timestamp": 1704017625
    },
    {
        "content": "<p>My 50c to this - if _ is not valid in variable names, the compiler should tell me as much. Instead I am greeted with this:</p>\n<div class=\"codehilite\"><pre><span></span><code>❯ roc repl\n\n  The rockin&#39; roc repl\n────────────────────────\n\nEnter an expression, or :help, or :q to quit.\n\n» x_1 = 4\nthread &#39;main&#39; panicked at &#39;not yet implemented: handle pattern other than identifier (which repl doesn&#39;t support)&#39;, crates/repl_ui/src/repl_state.rs:123:25\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>\n<p>This is the opposite of friendly. I'd say rust is doing it right where it allows you to use whatever names, but annoys you with warnings that you can silence if you want (e.g.  to match variable names to definitions in a spec or to keep them consistent across languages).</p>",
        "id": 410748452,
        "sender_full_name": "Alexander Pyattaev",
        "timestamp": 1704138280
    },
    {
        "content": "<p>For sure. We have a lot of cases where we need to fix up and improve error messages</p>",
        "id": 410748869,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704138551
    },
    {
        "content": "<p>Logging issues as you see things like this is always nice</p>",
        "id": 410749043,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1704138590
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/stream/231634-beginners/topic/Allow.20underscores.20in.20field.20names.20and.20variable.20names.20.233026/near/410529402\">said</a>:</p>\n<blockquote>\n<p>to `if ch.is_alphabetic() || ch.is_ascii_digit() || ch == '_'</p>\n</blockquote>\n<p>I tried this mainly to get familiarise myself with the Roc code base. I made this change in 3 places - for a module, highlighting and the rest. And it works - including the language server.</p>\n<p>I'm not sharing the result since it is very easy to make the change and also this is not an officially approved patch.</p>\n<p>Thank you <span class=\"user-mention\" data-user-id=\"361169\">@Anton</span>  for sharing.</p>",
        "id": 410820307,
        "sender_full_name": "rudolf",
        "timestamp": 1704188978
    }
]