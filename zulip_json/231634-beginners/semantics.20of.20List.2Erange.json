[
    {
        "content": "<p>So <code>List.range</code> has quite nice ergonomics in terms of the record <code>{start, end}</code> where start can be e.g. <code>At 5</code> or <code>After 5</code>. But I find that some of the cases are very unintuitive, when combined with the fact that specifying a range with a start after an end should give a reversed list. So for example, what would you expect the following cases to give? (I hid the result of calling this in the repl behind spoilers, if you want to guess before checking.)</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>List.range { start: After 5, end: Before 5 }</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p><code>[] : List (Num *)</code></p>\n</div></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>List.range { start: After 5, end: At 5 }</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p><code>[] : List (Num *)</code></p>\n</div></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>List.range { start: At 5, end: Before 5 }</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p><code>[] : List (Num *)</code></p>\n</div></div>\n<p>For me at least, it is very confusing that <code>After</code> and <code>Before</code> change meaning depending on wether the list is enumerated forwards or backwards. Especially since what you use for those values will determine the direction of the list in the first place.</p>",
        "id": 408476457,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1702843280
    },
    {
        "content": "<p>I can imagine this leading to some very confusing bugs if e.g. I am using some program that is calling this function with arbitrary integers <code>n</code> and <code>m</code> that change depending on some context.</p>",
        "id": 408476589,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1702843345
    },
    {
        "content": "<p>Not sure I have a proper question about this, but wanted to know if this has been thought about before at least. Maybe there is some good reason why it works this way?</p>",
        "id": 408476690,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1702843403
    },
    {
        "content": "<p>I would expect all of those to panic at first glance due to looping the list range, but maybe that is wrong, haven't checked. Empty lists may also be valid</p>",
        "id": 408478508,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702845137
    },
    {
        "content": "<p>My gut feeling is that if this ends up being error prone, we probably should stop inferring the direction and instead depend on step for reversing a range.</p>",
        "id": 408478536,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702845195
    },
    {
        "content": "<p>To be fair, if we made the step positive by default, you would get all the exact same answers for these examples. Those ranges all end before they start.</p>",
        "id": 408478605,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702845275
    },
    {
        "content": "<p>I think not inferring the direction is one way to make it more clear. Another could be to infer the direction but always interpret After as +1, and Before as -1. Then it would be After and Before as the numbers appear on the number line, not in the inferred direction</p>",
        "id": 408478717,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1702845399
    },
    {
        "content": "<p>Also, I would be fine preemptively changing this. Probably would be a good discussion to kick off in a new thread in <a class=\"stream\" data-stream-id=\"304641\" href=\"/#narrow/stream/304641-ideas\">#ideas</a>. I think it shouldn't be hard to come up with some confusing examples</p>",
        "id": 408478718,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702845400
    },
    {
        "content": "<p>That is a good point on before and after.</p>",
        "id": 408478736,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702845447
    },
    {
        "content": "<p>Though normally, I think end before means include one less element in the list, so it wouldn't depend on direction.</p>",
        "id": 408478792,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702845486
    },
    {
        "content": "<p>Same with start after in my mind. Kinda like building the full list them dropping the first elem</p>",
        "id": 408478814,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702845513
    },
    {
        "content": "<p>Ah ok. So I guess the semantics of start: After 5, end: At 5 would be \"find the list of integers between 5 and 5 ([5]), then drop the first element because we start After 5, which gives []\".</p>",
        "id": 408479015,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1702845752
    },
    {
        "content": "<p>Yes thinking of it like that, then the other examples also makes sense. First enumerate all the values, and then drop values depending on if After and Before are used.</p>",
        "id": 408479045,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1702845786
    },
    {
        "content": "<p>Yeah, I think that is the goal semantics. Maybe it just needs to be documented better</p>",
        "id": 408482989,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702849733
    }
]