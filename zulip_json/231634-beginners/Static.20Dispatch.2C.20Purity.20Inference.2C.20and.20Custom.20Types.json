[
    {
        "content": "<p>I am extremely excited about all three of these proposals, and was curious about a roadmap tracking the progress of these?</p>\n<p>I know there is mention of freezing the current iteration of Roc, and was wondering the approach about implementing these proposals via a dedicated feature branch?  Have they been pretty much finalized?</p>\n<p>What is ROC's approach to version control long term regarding introducing breaking changes in the future?  I think for better adoption, conversion scripts might be needed if people are using ROC in production (which I think is going to happen a lot once these proposals are implemented)</p>",
        "id": 491837140,
        "sender_full_name": "Brian Teague",
        "timestamp": 1735957153
    },
    {
        "content": "<p>We are doing our best to provide migration scripts for the things that we can - I've done that for both the move to snake_case identifiers and the new parens-and-comma calling syntax</p>",
        "id": 491838782,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735958771
    },
    {
        "content": "<p>Purity inference is a little harder to have a fix-script or migration for, but the changes are relatively minor</p>",
        "id": 491838799,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735958797
    },
    {
        "content": "<p>I think we _might_ be able to have a migration for Opaque Refs =&gt; Custom Types. The syntax is not changing in a HUGE way.</p>",
        "id": 491838838,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735958838
    },
    {
        "content": "<p>And I'm about to begin work on the new lambda syntax and we will support both for a time and add a migration for that as well</p>",
        "id": 491838856,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735958879
    },
    {
        "content": "<p>Purity inference has already been implemented in the language by <span class=\"user-mention\" data-user-id=\"489294\">@Agus Zubiaga</span> , it works really well (better than Tasks). We already have pre-releases for <a href=\"https://github.com/roc-lang/basic-cli/releases/tag/0.18.0\">basic-cli</a>, <a href=\"https://github.com/roc-lang/basic-webserver/releases/tag/0.11.0\">basic-webserver</a>, and <a href=\"https://github.com/lukewilliamboswell/basic-ssg/releases/tag/0.6.0\">basic-ssg</a>, we just need to fix an <a href=\"https://github.com/roc-lang/basic-cli/pull/292\">issue with Hyper</a> and then they're good to merge. <a href=\"https://github.com/lukewilliamboswell/roc-ray\">roc-ray</a> is already released with Purity Inference. </p>\n<p>So yeah, you can already use it with these platforms, we just need a little bit longer and then we'll be making an announcement for it then. Maybe a few days? No promises. We'll have an upgrade guide</p>",
        "id": 491839267,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735959251
    },
    {
        "content": "<p>Shoutouts to Luke Boswell on doing most of the work upgrading platforms. A champion, that one</p>",
        "id": 491839507,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735959532
    },
    {
        "content": "<p>Luke is a boss.  Literally, he's someone's boss</p>",
        "id": 491839521,
        "sender_full_name": "Anthony Bullard",
        "timestamp": 1735959551
    },
    {
        "content": "<blockquote>\n<p>What is ROC's approach to version control long term regarding introducing breaking changes in the future?</p>\n</blockquote>\n<p>Currently we are pre versioned releases. As such, the release strategy is pretty minor. Generally speaking, when breaking changes are incoming, we:</p>\n<ol>\n<li>temporarily change nightly release to be <code>testing</code> instead of <code>latest</code> release. So downloading the <code>latest</code> will get the version before any breaking changes.</li>\n<li>We submit the breaking changes directly in the roc main branch</li>\n<li>We update at a minimum basic-cli, basic-webserver, and basic-ssg. We also try to update examples and tutorials</li>\n<li>We go back to just having a <code>latest</code> release.</li>\n</ol>\n<p>If possible, we leave features around that enable old code to keep running. For example, <code>Task</code> still works for now despite purity inference being ready to go.</p>",
        "id": 491840234,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735960160
    },
    {
        "content": "<blockquote>\n<p>was wondering the approach about implementing these proposals via a dedicated feature branch?</p>\n</blockquote>\n<p>They get implemented directly to main via PRs. Occasionally, they get delayed a little before submitting to batch breaking changes and deal with the release cycle above.</p>",
        "id": 491840375,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735960273
    },
    {
        "content": "<blockquote>\n<p>Have they been pretty much finalized?</p>\n</blockquote>\n<p>Not at all. Purity inference is done, but no work has even started on static dispatch or custom types.</p>",
        "id": 491840395,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735960314
    },
    {
        "content": "<p>I have started work on static dispatch and custom types as part of my effort to rewrite canonicalization. In short, the canonicalization is some of the oldest code in the Roc repo, and we want to improve its performance and cache-friendliness by first canonicalizing modules in silos without any knowledge of any other Roc code. This makes the new <code>roc_can_solo</code> produce deterministic output that is later recombined in <code>roc_can_combine</code> (name is WIP) kind of like linking objects into a binary.</p>\n<p>There are lots of changes we want to do in addition to that.</p>\n<ul>\n<li>Static dispatch</li>\n<li>Custom types</li>\n<li>Move lambda set compilation to a future compiler pass</li>\n</ul>\n<p>To that end, I've been pushing to \"run in a straight line\" here: if we were to try to make all of these changes incrementally on top of the canonicalization rewrite, it'd take a whole lot longer. So we're doing it all in one go to get it to users faster. That will involve a big code switch at some point which means that writing Roc will look a lot different all at once. The hope is that around that time, Roc will be close to the shape we want it to be in the medium-term, so it's not so bad to make the breaks. After that, we'll try a lot harder to maintain stability to attract people to using Roc</p>",
        "id": 491840464,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735960350
    },
    {
        "content": "<blockquote>\n<p>I think for better adoption, conversion scripts might be needed if people are using ROC in production (which I think is going to happen a lot once these proposals are implemented)</p>\n</blockquote>\n<p>Hopefully sometime late 2025 we will have our first numbered release v0.1.0</p>",
        "id": 491840465,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1735960350
    },
    {
        "content": "<p>I don't yet have a branch published because of the scale of the change. My approach here is to get a rough draft of what the changes will look like by machete'ing what code makes sense until I can finish writing down a plain-English guide of what the code will do. I'll then be trying to break it up into as reasonable-to-code-review chunks as I can. I'll try to make the branch public as soon as I think it at all resembles what we want to do in the future</p>",
        "id": 491840977,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735960830
    },
    {
        "content": "<p>I'm planning on walking this road alone, but if anyone really wants to work on implementing this change, I'd be happy to share my playbook and we can try to split up this work</p>",
        "id": 491841070,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735960923
    },
    {
        "content": "<p>If anyone wants to know any particular details in the meantime, feel free to ask!</p>",
        "id": 491841101,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1735960971
    },
    {
        "content": "<p>Hello, I came to this Zulip wondering essentially the same things <span class=\"user-mention\" data-user-id=\"676210\">@Brian Teague</span> asked back in January. These features are super exciting to see! I'm wondering 1) how far along are these things (still planned for later this year?) and 2) for something like static dispatch, is it even possible to have any sort of automatic re-writing tools to migrate from code that used abilities to the new approach? 3) <span class=\"user-mention\" data-user-id=\"461444\">@Sam Mohr</span> Have you ended up making the branch you're working on public or is it not visible for now?</p>",
        "id": 531888921,
        "sender_full_name": "Hubbard Joppa",
        "timestamp": 1753894814
    },
    {
        "content": "<p>HI <span class=\"user-mention\" data-user-id=\"942556\">@Hubbard Joppa</span>,<br>\n1) Purity inference is done. Static dispatch and custom types will be implemented in the new compiler, not sure how far along those are right now. I believe we expect to be done with those by the end of the year.<br>\n2) Sounds like a job for a large language model :)</p>",
        "id": 531889909,
        "sender_full_name": "Anton",
        "timestamp": 1753895105
    },
    {
        "content": "<p>Gotcha, thanks!</p>",
        "id": 531892055,
        "sender_full_name": "Hubbard Joppa",
        "timestamp": 1753895804
    }
]