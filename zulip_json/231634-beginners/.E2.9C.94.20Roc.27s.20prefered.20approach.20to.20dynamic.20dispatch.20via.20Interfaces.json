[
    {
        "content": "<p>Hi, I'm just toying around with Roc to explore functional programming. Coming from the OOP (Java) world having some (limited) experience with Rust, I found a common pattern such that a library declares an interface (or trait + trait object in case of Rust) and lets clients implement methods declared by it. Then there can be a collection of type of said Interface, a method for client to add to the collection, and finally the library does dynamic dispatch on each element of said collection. Searching through chat history, I saw this has come up, but the Roc-blessed approach (somewhere someone suggested a record of functions) is still not very clear to me.<br>\nFor example, in Java I can have an interface of</p>\n<div class=\"codehilite\" data-code-language=\"Java\"><pre><span></span><code><span class=\"kd\">public</span><span class=\"w\"> </span><span class=\"kd\">interface</span> <span class=\"nc\">Renderable</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">public</span><span class=\"w\"> </span><span class=\"n\">String</span><span class=\"w\"> </span><span class=\"nf\">render</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>and clients can implement classes of <code>Person, Animal, Object</code> with their own implementations. The library can then do:</p>\n<div class=\"codehilite\" data-code-language=\"Java\"><pre><span></span><code><span class=\"kd\">public</span><span class=\"w\"> </span><span class=\"kd\">class</span> <span class=\"nc\">Scene</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"n\">Renderable</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">things</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">new</span><span class=\"w\"> </span><span class=\"n\">ArrayList</span><span class=\"o\">&lt;&gt;</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"c1\">// constructors an then a method to add things</span>\n<span class=\"w\">   </span><span class=\"p\">.....</span>\n<span class=\"w\">   </span><span class=\"c1\">// Scene rendering</span>\n<span class=\"w\">  </span><span class=\"kd\">public</span><span class=\"w\"> </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">render</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Renderable</span><span class=\"w\"> </span><span class=\"n\">thing</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">things</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">      </span><span class=\"n\">System</span><span class=\"p\">.</span><span class=\"na\">out</span><span class=\"p\">.</span><span class=\"na\">println</span><span class=\"p\">(</span><span class=\"n\">thing</span><span class=\"p\">.</span><span class=\"na\">render</span><span class=\"p\">());</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>The closest to this in Roc I've found is to declare a tagged union of <code>Renderable : [Person PersonData, Object ObjectData, Animal AnimalData]</code>,  then a <code>render : Renderable -&gt; Str</code> that redirects the XData records to its correct rendering implementation. This of course would not let any client implement their own Renderable types at all as they would need to modify both the Renderable union and the <code>render</code> redirecting function.<br>\nSo what is the approach that Roc (and other functional programming languages in general) takes?</p>",
        "id": 465418642,
        "sender_full_name": "Gladisane",
        "timestamp": 1724758591
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"746150\">@Gladisane</span>, I think <a href=\"https://www.roc-lang.org/abilities\">abilities</a> can do what you are looking for.</p>",
        "id": 465419761,
        "sender_full_name": "Anton",
        "timestamp": 1724758921
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/stream/231634-beginners/topic/Roc's.20prefered.20approach.20to.20dynamic.20dispatch.20via.20Interfaces/near/465419761\">said</a>:</p>\n<blockquote>\n<p>Hi <span class=\"user-mention silent\" data-user-id=\"746150\">Gladisane</span>, I think <a href=\"https://www.roc-lang.org/abilities\">abilities</a> can do what you are looking for.</p>\n</blockquote>\n<p>To my understanding, Abilities is a compile-time concept only and is highly discouraged for custom use. Roc also disallows implementing new Abilities for existing types, so you can't have a game engine that exposes a <code>Renderable</code> and asks users to implement it. Do I have any conceptual misunderstanding here?</p>",
        "id": 465422354,
        "sender_full_name": "Gladisane",
        "timestamp": 1724759581
    },
    {
        "content": "<p>That's all correct I believe. I've thought about translating inheritance to Roc before, I then <a href=\"https://github.com/roc-lang/examples/issues/94\">wrote up an issue</a> to make an example for it :)</p>\n<p>Anyway, I have basically no game engine experience but it seems like you could work with a general function that accepts two arguments like <code>Vertices</code> and <code>Texture</code>. A <code>Person</code>,<code> Animal</code> and <code>Object</code> would all just require <code>Vertices</code> and a <code>Texture</code> to render right? Let's leave shaders out of this for now :p that should not alter the fundamentals here.</p>",
        "id": 465435023,
        "sender_full_name": "Anton",
        "timestamp": 1724762129
    },
    {
        "content": "<p>Any user of your API (game engine platform) could provide <code>Vertices</code> and a <code>Texture</code> to that function for whatever custom thing they want in the game.</p>",
        "id": 465435801,
        "sender_full_name": "Anton",
        "timestamp": 1724762259
    },
    {
        "content": "<p>Contemplating on it more, I think use of custom abilities could be justified here to keep things conceptually simple. I do think it would not be recommended if you want maximum performance, but you could go with something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kt\">Renderable</span><span class=\"w\"> </span><span class=\"n\">implements</span>\n<span class=\"w\">    </span><span class=\"n\">render</span><span class=\"w\"> </span><span class=\"kt\">:</span><span class=\"w\"> </span><span class=\"n\">entity</span><span class=\"w\"> </span><span class=\"ow\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Vertices</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Texture</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kr\">where</span><span class=\"w\"> </span><span class=\"n\">entity</span><span class=\"w\"> </span><span class=\"n\">implements</span><span class=\"w\"> </span><span class=\"kt\">Renderable</span>\n</code></pre></div>",
        "id": 465447081,
        "sender_full_name": "Anton",
        "timestamp": 1724764155
    },
    {
        "content": "<p>There would be no need for the user to alter/extend <code>(Vertices, Texture)</code> because that is all the game engine needs to have in order to render something.</p>",
        "id": 465448165,
        "sender_full_name": "Anton",
        "timestamp": 1724764275
    },
    {
        "content": "<p>I don't think that would work because, I assume, abilities—unlike Java interfaces or Rust trait object—will get compiled down to a single type at compile-time. That means the collection <code>List Renderable</code> can only hold one type only, appending another type (e.g adding <code>Person</code> after <code>Object</code>) will get compiler type mismatch error.</p>",
        "id": 465491726,
        "sender_full_name": "Gladisane",
        "timestamp": 1724774397
    },
    {
        "content": "<p>Yeah, an ability is not a solution to dynamic dispatch.</p>",
        "id": 465499082,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724776156
    },
    {
        "content": "<p>That said, if you can fit into an ability and it might make the most sense in some cases similar to this</p>",
        "id": 465499152,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724776176
    },
    {
        "content": "<p>I would say that the first suggestions is definitely switching to a form of compositions with tagged data.</p>",
        "id": 465499391,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724776218
    },
    {
        "content": "<p>So you would just use a <code>when ... is</code> to do the dispatch.</p>",
        "id": 465499558,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724776248
    },
    {
        "content": "<p>Roc theoretically could support boxed dyn abilities like Rust supports boxed dyn traits, but that is not a feature today and is not currently planned.</p>",
        "id": 465499788,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724776294
    },
    {
        "content": "<p>Fundamentally, if you are missing multiple different types into the same data structure, roc requires tagging.</p>",
        "id": 465500113,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724776348
    },
    {
        "content": "<p>One final note, for functions called on a single element. You can make then have dynamic dispatch equivalent by passing function into the function.</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">Render</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Vertex</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Texture</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">FailedToRender</span><span class=\"p\">]</span>\n</code></pre></div>",
        "id": 465501023,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724776492
    },
    {
        "content": "<p>That enable essentially building up your dynamic dispatch table at runtime. You could create a record containing all of the functions that the data might need.</p>",
        "id": 465501333,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724776533
    },
    {
        "content": "<p>That said, if possible, I think it is generally preferred to use composition and have functions take a subset of the data.</p>",
        "id": 465501638,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724776611
    },
    {
        "content": "<p>welcome <span class=\"user-mention\" data-user-id=\"746150\">@Gladisane</span>! <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> </p>\n<p><span class=\"user-mention silent\" data-user-id=\"746150\">Gladisane</span> <a href=\"#narrow/stream/231634-beginners/topic/Roc's.20prefered.20approach.20to.20dynamic.20dispatch.20via.20Interfaces/near/465418642\">said</a>:</p>\n<blockquote>\n<p>Hi, I'm just toying around with Roc to explore functional programming. Coming from the OOP (Java) world having some (limited) experience with Rust, I found a common pattern such that a library declares an interface (or trait + trait object in case of Rust) and lets clients implement methods declared by it. </p>\n<p>[...]</p>\n<p>So what is the approach that Roc (and other functional programming languages in general) takes?</p>\n</blockquote>\n<p>I can't speak for other languages, but I would say that the approach that both Roc and Elm take is recommending against organizing code this way <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 465532256,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724784565
    },
    {
        "content": "<p>I spent a lot of time writing code like this, and also writing code in a \"just don't bother doing that\" style and my conclusion is that doing it this way is the wrong default way to organize code in general (not just in FP, but in OOP too - which I realize is controversial depending on who you ask!)</p>",
        "id": 465532457,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724784623
    },
    {
        "content": "<p>Also, to be concrete on how to make a user extendable type that gets put in a list, I think you would have to do something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">Renderable</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Person</span><span class=\"w\"> </span><span class=\"kt\">PersonData</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Object</span><span class=\"w\"> </span><span class=\"kt\">ObjectData</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Animal</span><span class=\"w\"> </span><span class=\"kt\">AnimalData</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">UserType</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">]</span>\n\n<span class=\"nv\">renderAll</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Renderable</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span>\n</code></pre></div>\n<p>Which fells pretty eh.</p>\n<p>Edit: This can be a bit nicer with an ability, still discouraged, but better</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"kt\">Render</span><span class=\"w\"> </span><span class=\"nv\">implements</span>\n<span class=\"w\">    </span><span class=\"nv\">renderEntity</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span>\n\n<span class=\"kt\">Renderable</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Person</span><span class=\"w\"> </span><span class=\"kt\">PersonData</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Object</span><span class=\"w\"> </span><span class=\"kt\">ObjectData</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Animal</span><span class=\"w\"> </span><span class=\"kt\">AnimalData</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">UserType</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"kr\">where</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"nv\">implement</span><span class=\"w\"> </span><span class=\"kt\">Render</span>\n\n<span class=\"nv\">renderAll</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">List</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Renderable</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span>\n</code></pre></div>\n<p>Then the users can implement render on there type and just stick it in UserType. They would aggregate all of their possible types into the single tag. The code would be able to store all Renderables into the single list.</p>",
        "id": 465532566,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724784655
    },
    {
        "content": "<p>That or force the user to define the render function.</p>",
        "id": 465532866,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724784736
    },
    {
        "content": "<p>So I don't know of a good solution to that specific problem apart from not modeling code that way.</p>",
        "id": 465532954,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1724784758
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"746150\">Gladisane</span> <a href=\"#narrow/stream/231634-beginners/topic/Roc's.20prefered.20approach.20to.20dynamic.20dispatch.20via.20Interfaces/near/465422354\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"361169\">Anton</span> <a href=\"#narrow/stream/231634-beginners/topic/Roc's.20prefered.20approach.20to.20dynamic.20dispatch.20via.20Interfaces/near/465419761\">said</a>:</p>\n<blockquote>\n<p>Hi <span class=\"user-mention silent\" data-user-id=\"746150\">Gladisane</span>, I think <a href=\"https://www.roc-lang.org/abilities\">abilities</a> can do what you are looking for.</p>\n</blockquote>\n<p>To my understanding, Abilities is a compile-time concept only and is highly discouraged for custom use. Roc also disallows implementing new Abilities for existing types, so you can't have a game engine that exposes a <code>Renderable</code> and asks users to implement it. Do I have any conceptual misunderstanding here?</p>\n</blockquote>\n<p>this is all totally correct, and in fact one of the main reasons I wanted to explicitly and strongly discourage reaching for abilities as a matter of course is that I believe it leads to overcomplicated code compared to just not doing that, and one of my fears with introducing abilities to the language is that it would lead to code that's overcomplicated because I know it's culturally encouraged to write code in this way in OOP communities <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 465533055,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724784786
    },
    {
        "content": "<blockquote>\n<p>a game engine that exposes a <code>Renderable</code> and asks users to implement it</p>\n</blockquote>\n<p>I don't have an exact example of how a game engine in Roc would look, but here's an example of a <a href=\"https://docs.google.com/document/d/16qY4NGVOHu8mvInVD-ddTajZYSsFvFBvQON_hmyHGfo/edit?usp=sharing\">UI framework design</a> for Roc - so it has the same concept of a rendering system which exposes ways for users of the system to specify how they want things to be rendered</p>",
        "id": 465534526,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724785201
    },
    {
        "content": "<p>without going too far down the rabbit hole, one of the key differences is that:</p>\n<ul>\n<li>in Java (at least from my memory of it back when I was a professional Enterprise Java Developer around 2010; Java didn't have lambdas back then, so things may have changed!) state that changes as the program runs is usually stored inside a named class and mutated in place directly, so \"asking an object what its current state is\" is a very common thing to do.</li>\n<li>in FP it's more common to have state be an immutable value that's passed between functions, and it changes over time by having different immutable values passed between those functions. (Asking an immutable value \"what its current state is\" is not interesting, because it's immutable; that state never changes!)</li>\n<li>it's also much more common in FP to pass first-class functions around - for example, saying \"I want to create a scene element on the fly, and here is the anonymous function which describes how that element will render; it's a function which receives the current state and returns the elements it wants displayed\"<ul>\n<li>a nice benefit of this style is that it takes less effort to provide an anonymous function than to define a named type and then implement a method on it</li>\n</ul>\n</li>\n</ul>",
        "id": 465536324,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1724785681
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/231634-beginners/topic/Roc's.20prefered.20approach.20to.20dynamic.20dispatch.20via.20Interfaces/near/465532457\">said</a>:</p>\n<blockquote>\n<p>I spent a lot of time writing code like this, and also writing code in a \"just don't bother doing that\" style and my conclusion is that doing it this way is the wrong default way to organize code in general (not just in FP, but in OOP too - which I realize is controversial depending on who you ask!)</p>\n</blockquote>\n<p>Well, I guess it's another case of reconditioning away from ingrained OOP patterns for me.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Roc's.20prefered.20approach.20to.20dynamic.20dispatch.20via.20Interfaces/near/465532866\">said</a>:</p>\n<blockquote>\n<p>That or force the user to define the render function.</p>\n</blockquote>\n<p>That's probably the right way to go in the FP world, right, just embracing first-class functions.</p>\n<p>BTW, what is the syntax for function that takes no argument/thunking in Roc. It seems a function type of <code>(* -&gt; Str)</code> would not work, but after some tinkering <code>({} -&gt; Str)</code> seems to be the right one, but it still requires passing in <code>{}</code> as an argument for function call.</p>",
        "id": 465688734,
        "sender_full_name": "Gladisane",
        "timestamp": 1724834432
    },
    {
        "content": "<p>Yeah <code>{} -&gt; Str</code> is the way we do a thunk in roc. You still pass in an empty record argument to call the function.</p>",
        "id": 465692929,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1724835231
    },
    {
        "content": "<p>Thanks for all the responses, this is really helpful!</p>",
        "id": 465788605,
        "sender_full_name": "Gladisane",
        "timestamp": 1724856359
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"746150\">Gladisane</span> has marked this topic as resolved.</p>",
        "id": 465788626,
        "sender_full_name": "Notification Bot",
        "timestamp": 1724856362
    }
]