[
    {
        "content": "<p>Hi! This one has me really confused. I have a compiling piece of code with a <code>when … is</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>loop = \\oldState -&gt;\n    Stdout.line! &quot;Checking git status…&quot;\n    gitStatusOutput =\n        gitStatus!\n            |&gt; outputToStr\n    newState =\n        getTimeSinceLastCommit!\n            |&gt; (\\timeSinceLastCommit -&gt; stateFromGitStatus gitStatusOutput timeSinceLastCommit)\n\n    when (oldState, newState) is\n        (DirtySince _, Clean) -&gt;\n            Stdout.line! &quot;You are back into a clean state.&quot;\n            sleepOk newState\n\n        (DirtySince before, DirtySince now) if now - before &gt; thresholdInSeconds -&gt;\n            minutes = Num.toFrac thresholdInSeconds / 60 |&gt; Num.round\n            Stdout.line! &quot;You have been in a dirty state since more than $(if minutes &gt; 1 then &quot;minutes&quot; else &quot;minute&quot;).&quot;\n            sleepOk newState\n\n        (DirtySince before, DirtySince now) -&gt;\n            Stdout.line! &quot;delta is supposed to be inferior or equal to threshold&quot;\n            Stdout.line! (Inspect.toStr before)\n            Stdout.line! (Inspect.toStr now)\n            sleepOk newState\n\n        (Clean, DirtySince _) -&gt;\n            # Just started changing files, all good\n            Stdout.line! &quot;&quot;\n            sleepOk newState\n\n        (Clean, Clean) -&gt;\n            # Still clean, all good\n            Stdout.line! &quot;&quot;\n            sleepOk newState\n\n        _ -&gt;\n            Stdout.line! (stateToStr newState)\n            sleepOk newState\n</code></pre></div>\n<p>But the catch-all branch at the end is useless because redundant: <code>Clean</code> and <code>DirtySince U128</code> are the only two possible states here. Yet when I try to remove it, I get this error:</p>\n<div class=\"codehilite\"><pre><span></span><code>This 2nd argument to loop has an unexpected type:\n\n32│      Task.loop Initial loop\n                           ^^^^\n\nThis loop value is a:\n\n    [\n        Clean,\n        DirtySince (Int Unsigned128),\n    ] -&gt; Task [Step State, …] […]\n\nBut loop needs its 2nd argument to be:\n\n    [Initial]* -&gt; Task [Step [Initial], …] […]\n\nTip: Seems like a tag typo. Maybe DirtySince should be Initial?\n</code></pre></div>\n<p>I really don’t get it, I don’t see the difference in the last couple branches in terms of type. Also I’m pretty sure of the exhaustiveness because if I remove another branch, I get an additional error about the unsafe pattern matching.</p>",
        "id": 479120291,
        "sender_full_name": "Sylvain Brunerie",
        "timestamp": 1730022559
    },
    {
        "content": "<p>So the first tip I'd always recommend in these situations is to add type annotations where you have type issues like this</p>",
        "id": 479132980,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1730035049
    },
    {
        "content": "<p>Second off, the type of <code>Task.loop</code> is:</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">loop</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">Step</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Done</span><span class=\"w\"> </span><span class=\"nv\">done</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nv\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"nv\">done</span><span class=\"w\"> </span><span class=\"nv\">err</span>\n<span class=\"nv\">loop</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">step</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">looper</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">current</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"err\">@</span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"nv\">next</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">step</span><span class=\"w\"> </span><span class=\"nv\">current</span>\n<span class=\"w\">        </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">next</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">            </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">e</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Err</span><span class=\"w\"> </span><span class=\"nv\">e</span>\n<span class=\"w\">            </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Done</span><span class=\"w\"> </span><span class=\"nv\">newResult</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"nv\">newResult</span>\n<span class=\"w\">            </span><span class=\"kt\">Ok</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Step</span><span class=\"w\"> </span><span class=\"nv\">newState</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">looper</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">newState</span><span class=\"p\">)</span>\n\n<span class=\"w\">    </span><span class=\"err\">@</span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"nv\">looper</span><span class=\"w\"> </span><span class=\"nv\">state</span>\n</code></pre></div>",
        "id": 479133068,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1730035122
    },
    {
        "content": "<p>So two things I can think of:</p>\n<ol>\n<li>The type of the state that you're passing is <code>[Initial]*</code>, not <code>[Clean, DirtySince I128]</code></li>\n<li>You're not returning <code>Step newState</code>, you're just returning <code>newState</code></li>\n</ol>",
        "id": 479133114,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1730035191
    },
    {
        "content": "<p>I can't confirm either without more code to look at</p>",
        "id": 479133238,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1730035267
    },
    {
        "content": "<p>In the error message you're given, it returns <code>Task [Step State, ...] [...]</code>. What is <code>State</code>?</p>",
        "id": 479133361,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1730035360
    },
    {
        "content": "<p>I think this is a bug we have with <code>when ... is</code> and tuples. I have seen it come up in the context of lists and tuples before</p>",
        "id": 479141072,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1730041957
    },
    {
        "content": "<p>That said, hard to guarantee without seeing types</p>",
        "id": 479141093,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1730041983
    },
    {
        "content": "<p>A thing I just noticed locally matching on a tuple is that if I accidentally add one redundant case to an already-exhaustive match, then rather than getting an error on the 'extra' case, I get the 'other possibilities include (_, _)' style error</p>",
        "id": 479145731,
        "sender_full_name": "Dan G Knutson",
        "timestamp": 1730045940
    },
    {
        "content": "<p>Ok it probably has to do with the types at least, I had this type alias State, which is an alias to [Clean, DirtySince U128] but did not include Initial.</p>",
        "id": 479213145,
        "sender_full_name": "Sylvain Brunerie",
        "timestamp": 1730101509
    },
    {
        "content": "<p>So I’ve added Initial to State, and now I need more branches, so I can’t quite yet get the exact same potential bug that I had before. Sorry about not being so reactive, I’ll follow up on this later, thanks all for you input!</p>",
        "id": 479222139,
        "sender_full_name": "Sylvain Brunerie",
        "timestamp": 1730105091
    },
    {
        "content": "<p>I will say, it's not always great to hear \"it'll get better so just wait a bit\", but the purity inference PR is looking pretty good, so once we transition to that a lot of the Task-related typing woes can go away by using effectful functions instead of Tasks</p>",
        "id": 479268029,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1730119847
    },
    {
        "content": "<p>That should happen sometime in the next couple weeks</p>",
        "id": 479268088,
        "sender_full_name": "Sam Mohr",
        "timestamp": 1730119865
    },
    {
        "content": "<p>Right! I fell asleep yesterday while watching the video, I need to watch the whole thing <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 479317269,
        "sender_full_name": "Sylvain Brunerie",
        "timestamp": 1730133499
    }
]