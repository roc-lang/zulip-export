[
    {
        "content": "<p>I have run into an issue when trying to create a package... Let's say I define a generic type in a module, and then have another module import the type and define a more specific version of it, for example</p>\n<p><code>package/Parser/Advanced/Generic.roc</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>interface Parser.Advanced.Generic\n    exposes [Parser ]\n    imports []\n\nParser input value :=\n    input -&gt; Result value Str\n</code></pre></div>\n<p><code>package/Parser/Bytes.roc</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>interface Parser.Bytes\n    exposes [Parser]\n    imports [Parser.Advanced.Generic]\n\nParser value : Parser.Advanced.Generic.Parser Str value\n</code></pre></div>\n<p>I also have a  main file, <br>\n<code>package/main.roc</code>:</p>\n<p>And then I have an example file which tries to use the less generic version,<br>\n<code>examples/example.roc</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>app &quot;example&quot;\n    packages {\n        cli: &quot;https://github.com/roc-lang/basic-cli/releases/download/0.5.0/Cufzl36_SnJ4QbOoEmiJ5dIpUxBvdB3NEySvuH82Wio.tar.br&quot;,\n        parser: &quot;../package/main.roc&quot;,\n    }\n    imports [\n        cli.Stdout,\n        parser.Parser.Bytes.{ Parser }\n    ]\n    provides [main] to cli\n\nmain =\n    Stdout.line &quot;hello&quot;\n</code></pre></div>\n<p>Then I get some errors when I try to build the example! But not when running `roc check package/main.roc´</p>",
        "id": 397970892,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1698007210
    },
    {
        "content": "<p>The errors I get are:</p>\n<div class=\"codehilite\"><pre><span></span><code>── MODULE NOT IMPORTED ─────────────────────────── ../package/Parser/Bytes.roc ─\n\nThe `Parser.Advanced.Generic` module is not imported:\n\n8│  Parser value : Parser.Advanced.Generic.Parser Str value\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nDid you mean to import it?\n\n\n── MISSING DEFINITION ──────────────────────────── ../package/Parser/Bytes.roc ─\n\nParser is listed as exposed, but it isn&#39;t defined in this module.\n\nYou can fix this by adding a definition for Parser, or by removing it\nfrom exposes.\n\n────────────────────────────────────────────────────────────────────────────────\n</code></pre></div>",
        "id": 397970935,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1698007288
    },
    {
        "content": "<p>I can fix the error by also importing <code>Parser.Advanced.Generic.Parser</code>in the example. But should I not be able to use the more specific type and not have to even know/care about the generic one? (this example is inspired by the elm parser, which is built in this way with one advanced parser and then a simpler parser which is a more specific type with fewer type variables)</p>",
        "id": 397971042,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1698007425
    },
    {
        "content": "<p>Not sure this is a fix, but if you import <code>Parser.Advanced.Generic</code>, I would assume you would have to references things as <code>Generic.Parser</code></p>",
        "id": 397971897,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1698008432
    },
    {
        "content": "<p>Is that the same issue as this? <a href=\"https://github.com/roc-lang/roc/issues/5477\">https://github.com/roc-lang/roc/issues/5477</a></p>",
        "id": 397975203,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1698012703
    },
    {
        "content": "<p>Oh! Yes that seems to be the same. Ok then I know it’s a known issue at least</p>",
        "id": 398015349,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1698040825
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343810\">Brendan Hansknecht</span> <a href=\"#narrow/stream/231634-beginners/topic/Importing.20types.20bug.3F/near/397971897\">said</a>:</p>\n<blockquote>\n<p>Not sure this is a fix, but if you import <code>Parser.Advanced.Generic</code>, I would assume you would have to references things as <code>Generic.Parser</code></p>\n</blockquote>\n<p>Hmm if I try to reference like this <code>Parser value : Generic.Parser Str value</code> I get a panic:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;&lt;unnamed&gt;&#39; panicked at &#39;called `Option::unwrap()` on a `None` value&#39;, crates/compiler/load_internal/src/docs.rs:382:71\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>",
        "id": 398016416,
        "sender_full_name": "Johan Lövgren",
        "timestamp": 1698041336
    }
]