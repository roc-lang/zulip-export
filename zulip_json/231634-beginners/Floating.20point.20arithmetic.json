[
    {
        "content": "<p>I'm new to Roc with a numerics background. I'm used to things like 1.0 / 0.0 being Infinity and 0.0 / 0.0 being NaN. Does Roc use IEEE754 floating point arithmetic? Is it defaulting to the decimal type? (And is the decimal type supposed to be a floating-point value with decimal digits (mantissa) instead of binary digits? Or an integer with fixed point semantics?)</p>",
        "id": 436699040,
        "sender_full_name": "Andy Ferris",
        "timestamp": 1714657844
    },
    {
        "content": "<p>Default fractional type is a fixed point decimal</p>",
        "id": 436708561,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1714660432
    },
    {
        "content": "<p>Can just specify the type to get a float though</p>",
        "id": 436708670,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1714660454
    },
    {
        "content": "<p><code>1.0f32 / 0.0</code></p>",
        "id": 436708729,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1714660478
    },
    {
        "content": "<p>also type inference takes care of that automatically; if you have a function that expects a  <code>F64</code> or <code>F32</code>, you can pass it <code>1.0</code> or even just <code>1</code> and it will use the appropriate representation</p>",
        "id": 436713419,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714661821
    },
    {
        "content": "<p>Awesome - thanks, that makes a lot of sense.</p>\n<p>Is there any syntax (i.e. literals) for Infinity, -Infinity and NaN of F32 and F64? The printing of these values at the REPL isn't round-trippable.</p>",
        "id": 436787322,
        "sender_full_name": "Andy Ferris",
        "timestamp": 1714689298
    },
    {
        "content": "<p>I don't there is. I'm interested to know what round-trippable means?</p>",
        "id": 436787496,
        "sender_full_name": "Luke Boswell",
        "timestamp": 1714689398
    },
    {
        "content": "<p>I assume as in what the repl prints out can't be put back into the program</p>",
        "id": 436789277,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714690564
    },
    {
        "content": "<p>we should probably make <code>Num.infinityF32</code> and <code>Num.infinityF64</code> and same for <code>nan</code></p>",
        "id": 436789379,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714690644
    },
    {
        "content": "<p>we can't give them the type <code>Frac *</code> because <code>Dec</code> doesn't have infinity and nan</p>",
        "id": 436789407,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714690679
    },
    {
        "content": "<p>also probably don't need a negative infinity because e.g. <code>-Num.infinityF64</code> would compile to that anyway</p>",
        "id": 436789496,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714690715
    },
    {
        "content": "<p>Yes I meant what printed in the REPL for at least built-in primitive types like F64 and F32 should be valid syntax for the same value. (In fact, for a functional language it should be possible to ensure this for basically all values, though you might not want to print everything in full at the REPL by default).</p>",
        "id": 436791815,
        "sender_full_name": "Andy Ferris",
        "timestamp": 1714692253
    },
    {
        "content": "<p>Note that being round-trippable for finite floating-point numbers is also pretty big deal. Back in the 2000's, say, a lot of languages would not give the exact same float when you print it and then parse it again, which causes trouble for really basic interchange like saving and loading a CSV or trying to debug a problem or whatever. Nowadays there exist fast and robust techniques for printing and parsing floats, so that shouldn't be a problem, but I didn't look into how Roc does this yet.</p>",
        "id": 436791817,
        "sender_full_name": "Andy Ferris",
        "timestamp": 1714692256
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281383\">Richard Feldman</span> <a href=\"#narrow/stream/231634-beginners/topic/Floating.20point.20arithmetic/near/436789496\">said</a>:</p>\n<blockquote>\n<p>also probably don't need a negative infinity because e.g. <code>-Num.infinityF64</code> would compile to that anyway</p>\n</blockquote>\n<p>I'd suggest following whatever Roc does for -1.0. Is that evaluated as -(1.0) or parsed as a single literal?</p>",
        "id": 436792009,
        "sender_full_name": "Andy Ferris",
        "timestamp": 1714692421
    },
    {
        "content": "<p>made an issue! <a href=\"https://github.com/roc-lang/roc/issues/6709\">https://github.com/roc-lang/roc/issues/6709</a></p>",
        "id": 436793202,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714693222
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"714854\">Andy Ferris</span> <a href=\"#narrow/stream/231634-beginners/topic/Floating.20point.20arithmetic/near/436791815\">said</a>:</p>\n<blockquote>\n<p>Yes I meant what printed in the REPL for at least built-in primitive types like F64 and F32 should be valid syntax for the same value. (In fact, for a functional language it should be possible to ensure this for basically all values, though you might not want to print everything in full at the REPL by default).</p>\n</blockquote>\n<p>in the case of opaque types it's very important that this property not hold, and for functions it's probably more annoying than helpful (especially long functions), but yeah for structural types other than functions I agree!</p>",
        "id": 436793307,
        "sender_full_name": "Richard Feldman",
        "timestamp": 1714693312
    },
    {
        "content": "<p>I've made a little bit more progress on this at <a href=\"https://github.com/roc-lang/roc/pull/6755\">https://github.com/roc-lang/roc/pull/6755</a>, but am a little stuck.</p>\n<p>Part of my problem is now <code>cargo build</code> isn't working (on WSL2) as it is complaining about the <code>llvm-sys</code> crate not being able to find LLVM. I tried apt installing <code>llvm-dev</code> but that wasn't helpful. The end result is I haven't been able to run my changes locally.</p>",
        "id": 439218965,
        "sender_full_name": "Andy Ferris",
        "timestamp": 1715951242
    },
    {
        "content": "<p>This may help:</p>\n<div class=\"codehilite\"><pre><span></span><code>wget https://apt.llvm.org/llvm.sh\nchmod +x llvm.sh\n./llvm.sh 16\n</code></pre></div>\n<p>Add <code>export LLVM_SYS_160_PREFIX=/usr/lib/llvm-16</code> to your <code>~/.bashrc</code> or equivalent file for your shell.</p>\n<p>Although I would recommend using nix with <code>nix develop</code> as that will set up everything for you.</p>",
        "id": 439572765,
        "sender_full_name": "Anton",
        "timestamp": 1716211268
    },
    {
        "content": "<p>Thanks that helps. I also had to install libpolly-16-dev and libzstd-dev.</p>\n<p>I tried <code>nix develop</code> and it originally worked (a couple of weeks ago) but now it isn't, not sure what I've done differently.</p>",
        "id": 439802200,
        "sender_full_name": "Andy Ferris",
        "timestamp": 1716293187
    },
    {
        "content": "<blockquote>\n<p>I tried <code>nix develop</code> and it originally worked (a couple of weeks ago) but now it isn't, not sure what I've done differently.</p>\n</blockquote>\n<p>You may need to do <code>cargo clean</code> because problems arise when rust tries to combine old cached build artifacts (outside nix) with new ones built inside nix.</p>",
        "id": 439807811,
        "sender_full_name": "Anton",
        "timestamp": 1716295151
    }
]