[
    {
        "content": "<p>Hello. I am trying to build a program that reads lines from Stdin, changes them and writes to Stdout.<br>\nRight now it looks like</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">app</span><span class=\"w\"> </span><span class=\"s\">\"hello\"</span>\n<span class=\"w\">    </span><span class=\"nv\">packages</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">pf</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/roc-lang/basic-cli/releases/download/0.7.0/bkGby8jb0tmZYsy2hg1E_B2QrCgcSTxdUlHtETwm5m4.tar.br\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"nv\">imports</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">pf</span><span class=\"nf\">.</span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"nv\">pf</span><span class=\"nf\">.</span><span class=\"kt\">Stdin</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">pf</span><span class=\"nf\">.</span><span class=\"kt\">Stdout</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">pf</span><span class=\"nf\">.</span><span class=\"kt\">Stderr</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"nv\">provides</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nv\">to</span><span class=\"w\"> </span><span class=\"nv\">pf</span>\n\n<span class=\"nv\">loop</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"kt\">I32</span>\n<span class=\"nv\">loop</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">Stdin</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">await</span>\n<span class=\"w\">    </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">        </span><span class=\"kt\">End</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"kt\">Stderr</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"s\">\"EOF\"</span>\n\n<span class=\"w\">        </span><span class=\"kt\">Input</span><span class=\"w\"> </span><span class=\"nv\">s</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">inputToOutput</span><span class=\"w\"> </span><span class=\"nv\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">await</span>\n<span class=\"w\">            </span><span class=\"nv\">loop</span>\n\n<span class=\"nv\">inputToOutput</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span>\n<span class=\"nv\">inputToOutput</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">input</span>\n\n<span class=\"kr\">main </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"kt\">I32</span>\n<span class=\"kr\">main </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">loop</span>\n</code></pre></div>\n<p>Eventually the <code>inputToOutput</code> function will get more complex, but right now I'm hitting a compiler error:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;main&#39; panicked at &#39;Error in alias analysis: error in module ModName(&quot;UserApp&quot;), function definition FuncName(&quot;\\x12\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\xb5\\x94\\rioj\\xd2=&quot;), definition of value binding ValueId(3): could not find func in module ModName(&quot;UserApp&quot;) with name FuncName(&quot;)\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\xb5\\x94\\rioj\\xd2=&quot;)&#39;, crates/compiler/gen_llvm/src/llvm/build.rs:5713:19\n</code></pre></div>\n<p>This seems to be the same as <a href=\"https://github.com/roc-lang/roc/issues/5701\">https://github.com/roc-lang/roc/issues/5701</a>. I tried changing the code to circumvent the compiler error, but got no luck. Any tips? <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 407750529,
        "sender_full_name": "JRI98",
        "timestamp": 1702480938
    },
    {
        "content": "<p>Try writing it with <code>Task.loop</code></p>",
        "id": 407757906,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702483166
    },
    {
        "content": "<p>Thank you so much <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span><br>\nFor anyone reading, the working program looks like</p>\n<div class=\"codehilite\" data-code-language=\"Elm\"><pre><span></span><code><span class=\"nv\">app</span><span class=\"w\"> </span><span class=\"s\">\"hello\"</span>\n<span class=\"w\">    </span><span class=\"nv\">packages</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nv\">pf</span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/roc-lang/basic-cli/releases/download/0.7.0/bkGby8jb0tmZYsy2hg1E_B2QrCgcSTxdUlHtETwm5m4.tar.br\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"nv\">imports</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">pf</span><span class=\"nf\">.</span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"nv\">pf</span><span class=\"nf\">.</span><span class=\"kt\">Stdin</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">pf</span><span class=\"nf\">.</span><span class=\"kt\">Stdout</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">pf</span><span class=\"nf\">.</span><span class=\"kt\">Stderr</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"nv\">provides</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"nv\">main</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"nv\">to</span><span class=\"w\"> </span><span class=\"nv\">pf</span>\n\n<span class=\"nv\">loop</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"kt\">I32</span>\n<span class=\"nv\">loop</span><span class=\"w\"> </span><span class=\"nf\">=</span>\n<span class=\"w\">    </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">loop</span>\n<span class=\"w\">        </span><span class=\"p\">{}</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"nv\">state</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">            </span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">Stdin</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">await</span>\n<span class=\"w\">            </span><span class=\"nv\">when</span><span class=\"w\"> </span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"nv\">is</span>\n<span class=\"w\">                </span><span class=\"kt\">End</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                    </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">Stderr</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"s\">\"EOF\"</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">await</span>\n<span class=\"w\">                    </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">ok</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Done</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"p\">)</span>\n\n<span class=\"w\">                </span><span class=\"kt\">Input</span><span class=\"w\"> </span><span class=\"nv\">s</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">                    </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"nf\">&lt;-</span><span class=\"w\"> </span><span class=\"kt\">Stdout</span><span class=\"nf\">.</span><span class=\"nv\">line</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">inputToOutput</span><span class=\"w\"> </span><span class=\"nv\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nf\">|&gt;</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">await</span>\n<span class=\"w\">                    </span><span class=\"kt\">Task</span><span class=\"nf\">.</span><span class=\"nv\">ok</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">Step</span><span class=\"w\"> </span><span class=\"nv\">state</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">)</span>\n\n<span class=\"nv\">inputToOutput</span><span class=\"w\"> </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Str</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">Str</span>\n<span class=\"nv\">inputToOutput</span><span class=\"w\"> </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nf\">\\</span><span class=\"nv\">input</span><span class=\"w\"> </span><span class=\"nf\">-&gt;</span>\n<span class=\"w\">    </span><span class=\"nv\">input</span>\n\n<span class=\"kr\">main </span><span class=\"nf\">:</span><span class=\"w\"> </span><span class=\"kt\">Task</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"kt\">I32</span>\n<span class=\"kr\">main </span><span class=\"nf\">=</span><span class=\"w\"> </span><span class=\"nv\">loop</span>\n</code></pre></div>",
        "id": 407761085,
        "sender_full_name": "JRI98",
        "timestamp": 1702484007
    },
    {
        "content": "<p>As a note, long term both should work just fine I'm pretty sure, but our underlying effect primitive is kinda naive currently. We have plans to switch out the implementation, and I think that would fix this.</p>",
        "id": 407761915,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1702484239
    }
]