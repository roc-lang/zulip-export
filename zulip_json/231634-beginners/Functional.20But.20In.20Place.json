[
    {
        "content": "<p>Hello! I finally managed to find some spare time to write some Roc, so far I really like it! One thing I'd love to try is to write Okasaki's functional pearl on RB trees</p>",
        "id": 339725407,
        "sender_full_name": "Giacomo Cavalieri",
        "timestamp": 1678037160
    },
    {
        "content": "<p>From what I can recall Roc uses Perceus which should allow functional-but-in-place algorithms, and I remember seeing an example on quicksort in one of Richard's talk on youtube, can I expect the same kind of optimization to be applied to a pure functional algorithm written on a custom datatype like an RB-tree node? Or is it something that is just available for lists for now?</p>",
        "id": 339725468,
        "sender_full_name": "Giacomo Cavalieri",
        "timestamp": 1678037178
    },
    {
        "content": "<p>Yeah, should apply to custom types.</p>",
        "id": 339725565,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1678037269
    },
    {
        "content": "<p>Though of course depending on how things are written can have unintentional copies.</p>",
        "id": 339725631,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1678037294
    },
    {
        "content": "<p>Thanks! I'll se what I can do :)</p>",
        "id": 339725743,
        "sender_full_name": "Giacomo Cavalieri",
        "timestamp": 1678037401
    },
    {
        "content": "<p>we're also not quite using perceus, but its predecessor \"counting immutable beans\". That means RC is a bit less efficient in some cases. But in general yes, it should work, and if it doesn't, that would be valuable to know!</p>",
        "id": 339725803,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1678037416
    },
    {
        "content": "<p>After you write it up, if you want help debugging allocations, I have messed with that a lot.</p>",
        "id": 339725977,
        "sender_full_name": "Brendan Hansknecht",
        "timestamp": 1678037537
    },
    {
        "content": "<p>Ok so I finished writing the code it's exactly as presented in Okasaki's pearl: <a href=\"https://gist.github.com/giacomocavalieri/1ea3836783a2668c9fb4852de13f313d\">https://gist.github.com/giacomocavalieri/1ea3836783a2668c9fb4852de13f313d</a></p>",
        "id": 339730360,
        "sender_full_name": "Giacomo Cavalieri",
        "timestamp": 1678040132
    },
    {
        "content": "<p>Just to make sure I get the hang of how the reuse could work, for example in the <code>balance</code> function it should be able to reuse the <code>Tree</code> constructor instead of allocating a new one?</p>",
        "id": 339730368,
        "sender_full_name": "Giacomo Cavalieri",
        "timestamp": 1678040135
    },
    {
        "content": "<p>assuming a unique input, yes</p>",
        "id": 339731449,
        "sender_full_name": "Folkert de Vries",
        "timestamp": 1678040807
    }
]